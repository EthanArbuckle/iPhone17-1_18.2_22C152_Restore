void sub_7294D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  __cxa_guard_abort(&qword_24F7190);
  sub_574530(a30);
  _Unwind_Resume(a1);
}

void sub_7294F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_5ABC24(&a35);
  sub_574530(v35);
  _Unwind_Resume(a1);
}

void sub_7295BC()
{
}

void sub_7295D8()
{
}

void sub_729614()
{
}

void sub_729634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_574D4C((uint64_t)&STACK[0x418]);
  sub_5ABC24(&a35);
  sub_574530(v35);
  _Unwind_Resume(a1);
}

void sub_729658(uint64_t a1, char ***a2)
{
  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2) {
    return;
  }
  do
  {
    uint64_t v5 = sub_647FB0(v3);
    if (v5) {
      break;
    }
    v3 += 945;
  }
  while (v3 != v2);
  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6) {
    return;
  }
  do
  {
    uint64_t v107 = sub_647E2C(v7);
    if (v107) {
      break;
    }
    v7 += 945;
  }
  while (v7 != v6);
  uint64_t v9 = (uint64_t)*a2;
  v8 = a2[1];
  if (*a2 == v8) {
    return;
  }
  do
  {
    v10 = (uint64_t *)sub_648B60(v9);
    uint64_t v11 = v10[1];
    v9 += 7560;
  }
  while (v11 == *v10 && v9 != (void)v8);
  v13 = (uint64_t *)*a2;
  v105 = (uint64_t *)a2[1];
  if (*a2 == (char **)v105) {
    return;
  }
  if (v5) {
    int v14 = 2;
  }
  else {
    int v14 = 1;
  }
  if (v107) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
  int v100 = v15;
  int v101 = v14;
  if (v11 == *v10) {
    int v16 = 1;
  }
  else {
    int v16 = 2;
  }
  int v102 = v16;
  uint64_t v103 = *v10;
  uint64_t v104 = v10[1];
  while (2)
  {
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_268;
    }
    sub_64A4F0(v13, (uint64_t *)&__p);
    sub_64A458(v13, (uint64_t *)&v113);
    v117 = 0;
    long long v118 = 0uLL;
    v18 = (char *)__p;
    v19 = (char *)v116;
    if (__p == (void *)v116)
    {
      v108 = 0;
      v110 = 0;
      int v20 = v101;
      goto LABEL_78;
    }
    do
    {
      while (1)
      {
        uint64_t v21 = v118;
        if ((unint64_t)v118 >= *((void *)&v118 + 1)) {
          break;
        }
        *(_DWORD *)(v118 + 1120) = -1;
        uint64_t v22 = v21 + 1128;
        *(void *)&long long v118 = v21 + 1128;
        uint64_t v23 = v21;
        int v24 = *(_DWORD *)(v21 + 1120);
        if (v24 != 1) {
          goto LABEL_34;
        }
LABEL_40:
        if (*(unsigned char *)(v22 - 16))
        {
          sub_3A6CB8(v22 - 448);
          *(unsigned char *)(v22 - 16) = 0;
        }
        *(void *)(v23 + 640) = off_2438EC8;
        if (*(char *)(v23 + 671) < 0) {
          operator delete(*(void **)(v22 - 480));
        }
        if (*(unsigned char *)(v22 - 496)) {
          *(unsigned char *)(v22 - 496) = 0;
        }
        if (*(char *)(v22 - 513) < 0)
        {
          operator delete(*(void **)(v22 - 536));
          if ((*(char *)(v22 - 545) & 0x80000000) == 0)
          {
LABEL_48:
            if ((*(char *)(v22 - 569) & 0x80000000) == 0) {
              goto LABEL_49;
            }
            goto LABEL_56;
          }
        }
        else if ((*(char *)(v22 - 545) & 0x80000000) == 0)
        {
          goto LABEL_48;
        }
        operator delete(*(void **)(v22 - 568));
        if ((*(char *)(v22 - 569) & 0x80000000) == 0)
        {
LABEL_49:
          if ((*(char *)(v22 - 609) & 0x80000000) == 0) {
            goto LABEL_50;
          }
          goto LABEL_57;
        }
LABEL_56:
        operator delete(*(void **)(v22 - 592));
        if ((*(char *)(v22 - 609) & 0x80000000) == 0)
        {
LABEL_50:
          if ((*(char *)(v22 - 641) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_58;
        }
LABEL_57:
        operator delete(*(void **)(v22 - 632));
        if ((*(char *)(v22 - 641) & 0x80000000) == 0)
        {
LABEL_51:
          if ((*(char *)(v22 - 665) & 0x80000000) == 0) {
            goto LABEL_52;
          }
          goto LABEL_59;
        }
LABEL_58:
        operator delete(*(void **)(v22 - 664));
        if ((*(char *)(v22 - 665) & 0x80000000) == 0)
        {
LABEL_52:
          v26 = (unsigned char *)(v22 - 696);
          if (!*(unsigned char *)(v22 - 696)) {
            goto LABEL_30;
          }
LABEL_60:
          unsigned char *v26 = 0;
          goto LABEL_30;
        }
LABEL_59:
        operator delete(*(void **)(v22 - 688));
        v26 = (unsigned char *)(v22 - 696);
        if (*(unsigned char *)(v22 - 696)) {
          goto LABEL_60;
        }
LABEL_30:
        sub_29D95C(v23);
LABEL_31:
        sub_4BD34C(v23, (uint64_t)v18);
        *(_DWORD *)(v22 - 8) = 0;
        v18 += 168;
        if (v18 == v19) {
          goto LABEL_61;
        }
      }
      uint64_t v22 = sub_737FA0((uint64_t *)&v117);
      *(void *)&long long v118 = v22;
      uint64_t v23 = v22 - 1128;
      int v24 = *(_DWORD *)(v22 - 8);
      if (v24 == 1) {
        goto LABEL_40;
      }
LABEL_34:
      if (v24) {
        goto LABEL_31;
      }
      *(void *)uint64_t v23 = *(void *)v18;
      std::string::operator=((std::string *)(v22 - 1120), (const std::string *)(v18 + 8));
      long long v25 = *((_OWORD *)v18 + 2);
      *(_DWORD *)(v23 + 48) = *((_DWORD *)v18 + 12);
      *(_OWORD *)(v23 + 32) = v25;
      std::string::operator=((std::string *)(v22 - 1072), (const std::string *)(v18 + 56));
      std::string::operator=((std::string *)(v22 - 1048), (const std::string *)(v18 + 80));
      if (v18 != (char *)v23) {
        sub_69208(v22 - 1024, *((std::string **)v18 + 13), *((std::string **)v18 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v18 + 14) - *((void *)v18 + 13)) >> 3));
      }
      *(_WORD *)(v22 - 1000) = *((_WORD *)v18 + 64);
      std::string::operator=((std::string *)(v22 - 992), (const std::string *)(v18 + 136));
      *(_WORD *)(v22 - 968) = *((_WORD *)v18 + 80);
      *(_DWORD *)(v22 - 8) = 0;
      v18 += 168;
    }
    while (v18 != v19);
LABEL_61:
    uint64_t v27 = (uint64_t)v117;
    v108 = v117;
    v110 = (void *)v118;
    if (v5)
    {
      uint64_t v28 = v118;
      if ((void *)v118 == v117)
      {
        int v20 = 2;
      }
      else
      {
        uint64_t v29 = (uint64_t)v117;
        do
        {
          if (sub_73AB30((uint64_t)&v117, v29, 0) && sub_73AB30((uint64_t)&v117, v29, 1))
          {
            int v20 = 6;
            goto LABEL_78;
          }
          v29 += 1128;
        }
        while (v29 != v28);
        uint64_t v30 = v27;
        do
        {
          if (sub_73AB30((uint64_t)&v117, v30, 1))
          {
            int v20 = 4;
            goto LABEL_78;
          }
          v30 += 1128;
        }
        while (v30 != v28);
        while (!sub_73AB30((uint64_t)&v117, v27, 0))
        {
          v27 += 1128;
          if (v27 == v28)
          {
            int v20 = 7;
            goto LABEL_78;
          }
        }
        int v20 = 5;
      }
    }
    else
    {
      int v20 = 1;
    }
LABEL_78:
    int v112 = v20;
    sub_647DD8(v13, &v112);
    v31 = v108;
    if (v108)
    {
      uint64_t v32 = (uint64_t)v110;
      if (v110 == v108)
      {
LABEL_124:
        operator delete(v31);
        goto LABEL_125;
      }
      while (2)
      {
        uint64_t v33 = v32;
        v32 -= 1128;
        int v34 = *(_DWORD *)(v33 - 8);
        if (v34 != 1)
        {
          if (!v34)
          {
            if (*(char *)(v33 - 969) < 0)
            {
              operator delete(*(void **)(v33 - 992));
              v35 = (void **)(v33 - 1024);
              v36 = *(void ***)(v33 - 1024);
              if (v36) {
                goto LABEL_106;
              }
LABEL_87:
              if ((*(char *)(v33 - 1025) & 0x80000000) == 0) {
                goto LABEL_88;
              }
LABEL_113:
              operator delete(*(void **)(v33 - 1048));
              if (*(char *)(v33 - 1049) < 0) {
                goto LABEL_114;
              }
LABEL_89:
              if (*(char *)(v33 - 1097) < 0) {
LABEL_115:
              }
                operator delete(*(void **)(v33 - 1120));
            }
            else
            {
              v35 = (void **)(v33 - 1024);
              v36 = *(void ***)(v33 - 1024);
              if (!v36) {
                goto LABEL_87;
              }
LABEL_106:
              v38 = *(void ***)(v33 - 1016);
              v39 = v36;
              if (v38 != v36)
              {
                do
                {
                  if (*((char *)v38 - 1) < 0) {
                    operator delete(*(v38 - 3));
                  }
                  v38 -= 3;
                }
                while (v38 != v36);
                v39 = *v35;
              }
              *(void *)(v33 - 1016) = v36;
              operator delete(v39);
              if (*(char *)(v33 - 1025) < 0) {
                goto LABEL_113;
              }
LABEL_88:
              if ((*(char *)(v33 - 1049) & 0x80000000) == 0) {
                goto LABEL_89;
              }
LABEL_114:
              operator delete(*(void **)(v33 - 1072));
              if (*(char *)(v33 - 1097) < 0) {
                goto LABEL_115;
              }
            }
          }
LABEL_82:
          if ((void *)v32 == v108)
          {
            v31 = v108;
            goto LABEL_124;
          }
          continue;
        }
        break;
      }
      if (*(unsigned char *)(v33 - 16))
      {
        sub_3A6CB8(v33 - 448);
        *(unsigned char *)(v33 - 16) = 0;
      }
      *(void *)(v32 + 640) = off_2438EC8;
      if (*(char *)(v32 + 671) < 0) {
        operator delete(*(void **)(v33 - 480));
      }
      if (*(unsigned char *)(v33 - 496)) {
        *(unsigned char *)(v33 - 496) = 0;
      }
      if (*(char *)(v33 - 513) < 0)
      {
        operator delete(*(void **)(v33 - 536));
        if (*(char *)(v33 - 545) < 0) {
          goto LABEL_117;
        }
LABEL_99:
        if ((*(char *)(v33 - 569) & 0x80000000) == 0) {
          goto LABEL_100;
        }
LABEL_118:
        operator delete(*(void **)(v33 - 592));
        if (*(char *)(v33 - 609) < 0) {
          goto LABEL_119;
        }
LABEL_101:
        if ((*(char *)(v33 - 641) & 0x80000000) == 0) {
          goto LABEL_102;
        }
LABEL_120:
        operator delete(*(void **)(v33 - 664));
        if (*(char *)(v33 - 665) < 0) {
          goto LABEL_121;
        }
LABEL_103:
        v37 = (unsigned char *)(v33 - 696);
        if (*(unsigned char *)(v33 - 696)) {
LABEL_122:
        }
          unsigned char *v37 = 0;
      }
      else
      {
        if ((*(char *)(v33 - 545) & 0x80000000) == 0) {
          goto LABEL_99;
        }
LABEL_117:
        operator delete(*(void **)(v33 - 568));
        if (*(char *)(v33 - 569) < 0) {
          goto LABEL_118;
        }
LABEL_100:
        if ((*(char *)(v33 - 609) & 0x80000000) == 0) {
          goto LABEL_101;
        }
LABEL_119:
        operator delete(*(void **)(v33 - 632));
        if (*(char *)(v33 - 641) < 0) {
          goto LABEL_120;
        }
LABEL_102:
        if ((*(char *)(v33 - 665) & 0x80000000) == 0) {
          goto LABEL_103;
        }
LABEL_121:
        operator delete(*(void **)(v33 - 688));
        v37 = (unsigned char *)(v33 - 696);
        if (*(unsigned char *)(v33 - 696)) {
          goto LABEL_122;
        }
      }
      sub_29D95C(v32);
      goto LABEL_82;
    }
LABEL_125:
    v117 = 0;
    long long v118 = 0uLL;
    v40 = (char *)v113;
    v41 = (char *)v114;
    if (v113 == v114)
    {
      v109 = 0;
      v111 = 0;
      int v42 = v100;
      goto LABEL_175;
    }
    while (2)
    {
      while (2)
      {
        uint64_t v43 = v118;
        if ((unint64_t)v118 < *((void *)&v118 + 1))
        {
          *(_DWORD *)(v118 + 1120) = -1;
          uint64_t v44 = v43 + 1128;
          *(void *)&long long v118 = v43 + 1128;
          uint64_t v45 = v43;
          int v46 = *(_DWORD *)(v43 + 1120);
          if (v46 != 1) {
            goto LABEL_131;
          }
LABEL_137:
          if (*(unsigned char *)(v44 - 16))
          {
            sub_3A6CB8(v44 - 448);
            *(unsigned char *)(v44 - 16) = 0;
          }
          *(void *)(v45 + 640) = off_2438EC8;
          if (*(char *)(v45 + 671) < 0) {
            operator delete(*(void **)(v44 - 480));
          }
          if (*(unsigned char *)(v44 - 496)) {
            *(unsigned char *)(v44 - 496) = 0;
          }
          if (*(char *)(v44 - 513) < 0)
          {
            operator delete(*(void **)(v44 - 536));
            if (*(char *)(v44 - 545) < 0) {
              goto LABEL_152;
            }
LABEL_145:
            if ((*(char *)(v44 - 569) & 0x80000000) == 0) {
              goto LABEL_146;
            }
LABEL_153:
            operator delete(*(void **)(v44 - 592));
            if (*(char *)(v44 - 609) < 0) {
              goto LABEL_154;
            }
LABEL_147:
            if ((*(char *)(v44 - 641) & 0x80000000) == 0) {
              goto LABEL_148;
            }
LABEL_155:
            operator delete(*(void **)(v44 - 664));
            if (*(char *)(v44 - 665) < 0) {
              goto LABEL_156;
            }
LABEL_149:
            v48 = (unsigned char *)(v44 - 696);
            if (*(unsigned char *)(v44 - 696)) {
LABEL_157:
            }
              unsigned char *v48 = 0;
          }
          else
          {
            if ((*(char *)(v44 - 545) & 0x80000000) == 0) {
              goto LABEL_145;
            }
LABEL_152:
            operator delete(*(void **)(v44 - 568));
            if (*(char *)(v44 - 569) < 0) {
              goto LABEL_153;
            }
LABEL_146:
            if ((*(char *)(v44 - 609) & 0x80000000) == 0) {
              goto LABEL_147;
            }
LABEL_154:
            operator delete(*(void **)(v44 - 632));
            if (*(char *)(v44 - 641) < 0) {
              goto LABEL_155;
            }
LABEL_148:
            if ((*(char *)(v44 - 665) & 0x80000000) == 0) {
              goto LABEL_149;
            }
LABEL_156:
            operator delete(*(void **)(v44 - 688));
            v48 = (unsigned char *)(v44 - 696);
            if (*(unsigned char *)(v44 - 696)) {
              goto LABEL_157;
            }
          }
          sub_29D95C(v45);
LABEL_128:
          sub_4BD34C(v45, (uint64_t)v40);
          *(_DWORD *)(v44 - 8) = 0;
          v40 += 168;
          if (v40 == v41) {
            goto LABEL_158;
          }
          continue;
        }
        break;
      }
      uint64_t v44 = sub_737FA0((uint64_t *)&v117);
      *(void *)&long long v118 = v44;
      uint64_t v45 = v44 - 1128;
      int v46 = *(_DWORD *)(v44 - 8);
      if (v46 == 1) {
        goto LABEL_137;
      }
LABEL_131:
      if (v46) {
        goto LABEL_128;
      }
      *(void *)uint64_t v45 = *(void *)v40;
      std::string::operator=((std::string *)(v44 - 1120), (const std::string *)(v40 + 8));
      long long v47 = *((_OWORD *)v40 + 2);
      *(_DWORD *)(v45 + 48) = *((_DWORD *)v40 + 12);
      *(_OWORD *)(v45 + 32) = v47;
      std::string::operator=((std::string *)(v44 - 1072), (const std::string *)(v40 + 56));
      std::string::operator=((std::string *)(v44 - 1048), (const std::string *)(v40 + 80));
      if (v40 != (char *)v45) {
        sub_69208(v44 - 1024, *((std::string **)v40 + 13), *((std::string **)v40 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v40 + 14) - *((void *)v40 + 13)) >> 3));
      }
      *(_WORD *)(v44 - 1000) = *((_WORD *)v40 + 64);
      std::string::operator=((std::string *)(v44 - 992), (const std::string *)(v40 + 136));
      *(_WORD *)(v44 - 968) = *((_WORD *)v40 + 80);
      *(_DWORD *)(v44 - 8) = 0;
      v40 += 168;
      if (v40 != v41) {
        continue;
      }
      break;
    }
LABEL_158:
    uint64_t v49 = (uint64_t)v117;
    v109 = v117;
    v111 = (void *)v118;
    if (v107)
    {
      uint64_t v50 = v118;
      if ((void *)v118 == v117)
      {
        int v42 = 2;
      }
      else
      {
        uint64_t v51 = (uint64_t)v117;
        do
        {
          if (sub_73AB30((uint64_t)&v117, v51, 0) && sub_73AB30((uint64_t)&v117, v51, 1))
          {
            int v42 = 6;
            goto LABEL_175;
          }
          v51 += 1128;
        }
        while (v51 != v50);
        uint64_t v52 = v49;
        do
        {
          if (sub_73AB30((uint64_t)&v117, v52, 1))
          {
            int v42 = 4;
            goto LABEL_175;
          }
          v52 += 1128;
        }
        while (v52 != v50);
        while (!sub_73AB30((uint64_t)&v117, v49, 0))
        {
          v49 += 1128;
          if (v49 == v50)
          {
            int v42 = 7;
            goto LABEL_175;
          }
        }
        int v42 = 5;
      }
    }
    else
    {
      int v42 = 1;
    }
LABEL_175:
    int v112 = v42;
    sub_647DFC(v13, &v112);
    v53 = v109;
    if (v109)
    {
      uint64_t v54 = (uint64_t)v111;
      if (v111 == v109)
      {
LABEL_221:
        operator delete(v53);
        goto LABEL_222;
      }
      while (2)
      {
        uint64_t v55 = v54;
        v54 -= 1128;
        int v56 = *(_DWORD *)(v55 - 8);
        if (v56 != 1)
        {
          if (!v56)
          {
            if (*(char *)(v55 - 969) < 0)
            {
              operator delete(*(void **)(v55 - 992));
              v57 = (void **)(v55 - 1024);
              v58 = *(void ***)(v55 - 1024);
              if (v58) {
                goto LABEL_203;
              }
LABEL_184:
              if ((*(char *)(v55 - 1025) & 0x80000000) == 0) {
                goto LABEL_185;
              }
LABEL_210:
              operator delete(*(void **)(v55 - 1048));
              if (*(char *)(v55 - 1049) < 0) {
                goto LABEL_211;
              }
LABEL_186:
              if (*(char *)(v55 - 1097) < 0) {
LABEL_212:
              }
                operator delete(*(void **)(v55 - 1120));
            }
            else
            {
              v57 = (void **)(v55 - 1024);
              v58 = *(void ***)(v55 - 1024);
              if (!v58) {
                goto LABEL_184;
              }
LABEL_203:
              v60 = *(void ***)(v55 - 1016);
              v61 = v58;
              if (v60 != v58)
              {
                do
                {
                  if (*((char *)v60 - 1) < 0) {
                    operator delete(*(v60 - 3));
                  }
                  v60 -= 3;
                }
                while (v60 != v58);
                v61 = *v57;
              }
              *(void *)(v55 - 1016) = v58;
              operator delete(v61);
              if (*(char *)(v55 - 1025) < 0) {
                goto LABEL_210;
              }
LABEL_185:
              if ((*(char *)(v55 - 1049) & 0x80000000) == 0) {
                goto LABEL_186;
              }
LABEL_211:
              operator delete(*(void **)(v55 - 1072));
              if (*(char *)(v55 - 1097) < 0) {
                goto LABEL_212;
              }
            }
          }
LABEL_179:
          if ((void *)v54 == v109)
          {
            v53 = v109;
            goto LABEL_221;
          }
          continue;
        }
        break;
      }
      if (*(unsigned char *)(v55 - 16))
      {
        sub_3A6CB8(v55 - 448);
        *(unsigned char *)(v55 - 16) = 0;
      }
      *(void *)(v54 + 640) = off_2438EC8;
      if (*(char *)(v54 + 671) < 0) {
        operator delete(*(void **)(v55 - 480));
      }
      if (*(unsigned char *)(v55 - 496)) {
        *(unsigned char *)(v55 - 496) = 0;
      }
      if (*(char *)(v55 - 513) < 0)
      {
        operator delete(*(void **)(v55 - 536));
        if (*(char *)(v55 - 545) < 0) {
          goto LABEL_214;
        }
LABEL_196:
        if ((*(char *)(v55 - 569) & 0x80000000) == 0) {
          goto LABEL_197;
        }
LABEL_215:
        operator delete(*(void **)(v55 - 592));
        if (*(char *)(v55 - 609) < 0) {
          goto LABEL_216;
        }
LABEL_198:
        if ((*(char *)(v55 - 641) & 0x80000000) == 0) {
          goto LABEL_199;
        }
LABEL_217:
        operator delete(*(void **)(v55 - 664));
        if (*(char *)(v55 - 665) < 0) {
          goto LABEL_218;
        }
LABEL_200:
        v59 = (unsigned char *)(v55 - 696);
        if (*(unsigned char *)(v55 - 696)) {
LABEL_219:
        }
          unsigned char *v59 = 0;
      }
      else
      {
        if ((*(char *)(v55 - 545) & 0x80000000) == 0) {
          goto LABEL_196;
        }
LABEL_214:
        operator delete(*(void **)(v55 - 568));
        if (*(char *)(v55 - 569) < 0) {
          goto LABEL_215;
        }
LABEL_197:
        if ((*(char *)(v55 - 609) & 0x80000000) == 0) {
          goto LABEL_198;
        }
LABEL_216:
        operator delete(*(void **)(v55 - 632));
        if (*(char *)(v55 - 641) < 0) {
          goto LABEL_217;
        }
LABEL_199:
        if ((*(char *)(v55 - 665) & 0x80000000) == 0) {
          goto LABEL_200;
        }
LABEL_218:
        operator delete(*(void **)(v55 - 688));
        v59 = (unsigned char *)(v55 - 696);
        if (*(unsigned char *)(v55 - 696)) {
          goto LABEL_219;
        }
      }
      sub_29D95C(v54);
      goto LABEL_179;
    }
LABEL_222:
    v62 = (void **)v113;
    if (v113)
    {
      v63 = v114;
      v64 = v113;
      if (v114 == v113)
      {
LABEL_244:
        v114 = v62;
        operator delete(v64);
        goto LABEL_245;
      }
      while (2)
      {
        if (*((char *)v63 - 9) < 0)
        {
          operator delete(*(v63 - 4));
          v65 = (void **)*(v63 - 8);
          if (v65) {
            goto LABEL_233;
          }
LABEL_228:
          if ((*((char *)v63 - 65) & 0x80000000) == 0) {
            goto LABEL_229;
          }
        }
        else
        {
          v65 = (void **)*(v63 - 8);
          if (!v65) {
            goto LABEL_228;
          }
LABEL_233:
          v66 = (void **)*(v63 - 7);
          if (v66 == v65)
          {
            *(v63 - 7) = v65;
            operator delete(v65);
            if (*((char *)v63 - 65) < 0) {
              break;
            }
LABEL_229:
            if ((*((char *)v63 - 89) & 0x80000000) == 0)
            {
LABEL_230:
              if (*((char *)v63 - 137) < 0) {
LABEL_242:
              }
                operator delete(*(v63 - 20));
LABEL_225:
              v63 -= 21;
              if (v63 == v62)
              {
                v64 = v113;
                goto LABEL_244;
              }
              continue;
            }
LABEL_241:
            operator delete(*(v63 - 14));
            if (*((char *)v63 - 137) < 0) {
              goto LABEL_242;
            }
            goto LABEL_225;
          }
          do
          {
            if (*((char *)v66 - 1) < 0) {
              operator delete(*(v66 - 3));
            }
            v66 -= 3;
          }
          while (v66 != v65);
          v67 = *(v63 - 8);
          *(v63 - 7) = v65;
          operator delete(v67);
          if ((*((char *)v63 - 65) & 0x80000000) == 0) {
            goto LABEL_229;
          }
        }
        break;
      }
      operator delete(*(v63 - 11));
      if ((*((char *)v63 - 89) & 0x80000000) == 0) {
        goto LABEL_230;
      }
      goto LABEL_241;
    }
LABEL_245:
    v68 = (void **)__p;
    if (__p)
    {
      v69 = (void **)v116;
      v70 = __p;
      if ((void *)v116 == __p)
      {
LABEL_267:
        *(void *)&long long v116 = v68;
        operator delete(v70);
        goto LABEL_268;
      }
      while (2)
      {
        if (*((char *)v69 - 9) < 0)
        {
          operator delete(*(v69 - 4));
          v71 = (void **)*(v69 - 8);
          if (v71) {
            goto LABEL_256;
          }
LABEL_251:
          if ((*((char *)v69 - 65) & 0x80000000) == 0) {
            goto LABEL_252;
          }
        }
        else
        {
          v71 = (void **)*(v69 - 8);
          if (!v71) {
            goto LABEL_251;
          }
LABEL_256:
          v72 = (void **)*(v69 - 7);
          if (v72 == v71)
          {
            *(v69 - 7) = v71;
            operator delete(v71);
            if (*((char *)v69 - 65) < 0) {
              break;
            }
LABEL_252:
            if ((*((char *)v69 - 89) & 0x80000000) == 0)
            {
LABEL_253:
              if (*((char *)v69 - 137) < 0) {
LABEL_265:
              }
                operator delete(*(v69 - 20));
LABEL_248:
              v69 -= 21;
              if (v69 == v68)
              {
                v70 = __p;
                goto LABEL_267;
              }
              continue;
            }
LABEL_264:
            operator delete(*(v69 - 14));
            if (*((char *)v69 - 137) < 0) {
              goto LABEL_265;
            }
            goto LABEL_248;
          }
          do
          {
            if (*((char *)v72 - 1) < 0) {
              operator delete(*(v72 - 3));
            }
            v72 -= 3;
          }
          while (v72 != v71);
          v73 = *(v69 - 8);
          *(v69 - 7) = v71;
          operator delete(v73);
          if ((*((char *)v69 - 65) & 0x80000000) == 0) {
            goto LABEL_252;
          }
        }
        break;
      }
      operator delete(*(v69 - 11));
      if ((*((char *)v69 - 89) & 0x80000000) == 0) {
        goto LABEL_253;
      }
      goto LABEL_264;
    }
LABEL_268:
    v74 = (uint64_t *)sub_648B60((uint64_t)v13);
    v117 = 0;
    long long v118 = 0uLL;
    uint64_t v75 = *v74;
    uint64_t v76 = v74[1];
    if (*v74 == v76)
    {
      __p = 0;
      long long v116 = 0uLL;
      int v77 = v102;
      goto LABEL_311;
    }
    while (2)
    {
      uint64_t v78 = v118;
      if ((unint64_t)v118 >= *((void *)&v118 + 1))
      {
        uint64_t v79 = sub_737FA0((uint64_t *)&v117);
        *(void *)&long long v118 = v79;
        uint64_t v80 = v79 - 1128;
        int v81 = *(_DWORD *)(v79 - 8);
        if (v81 == 1) {
          goto LABEL_282;
        }
LABEL_274:
        if (v81) {
          goto LABEL_270;
        }
        if (*(char *)(v79 - 969) < 0)
        {
          operator delete(*(void **)(v79 - 992));
          v82 = (void **)(v79 - 1024);
          v83 = *(void ***)(v79 - 1024);
          if (!v83)
          {
LABEL_277:
            if ((*(char *)(v79 - 1025) & 0x80000000) == 0) {
              goto LABEL_278;
            }
LABEL_291:
            operator delete(*(void **)(v79 - 1048));
            if ((*(char *)(v79 - 1049) & 0x80000000) == 0)
            {
LABEL_279:
              if (*(char *)(v79 - 1097) < 0) {
                goto LABEL_293;
              }
              goto LABEL_270;
            }
LABEL_292:
            operator delete(*(void **)(v79 - 1072));
            if (*(char *)(v79 - 1097) < 0) {
LABEL_293:
            }
              operator delete(*(void **)(v79 - 1120));
LABEL_270:
            sub_4BE9F4(v80, v75);
            goto LABEL_271;
          }
        }
        else
        {
          v82 = (void **)(v79 - 1024);
          v83 = *(void ***)(v79 - 1024);
          if (!v83) {
            goto LABEL_277;
          }
        }
        v84 = (void ***)(v79 - 1016);
        v85 = *(void ***)(v79 - 1016);
        if (v85 == v83)
        {
          *v84 = v83;
          operator delete(v83);
          if (*(char *)(v79 - 1025) < 0) {
            goto LABEL_291;
          }
        }
        else
        {
          do
          {
            if (*((char *)v85 - 1) < 0) {
              operator delete(*(v85 - 3));
            }
            v85 -= 3;
          }
          while (v85 != v83);
          v86 = *v82;
          *v84 = v83;
          operator delete(v86);
          if (*(char *)(v79 - 1025) < 0) {
            goto LABEL_291;
          }
        }
LABEL_278:
        if ((*(char *)(v79 - 1049) & 0x80000000) == 0) {
          goto LABEL_279;
        }
        goto LABEL_292;
      }
      *(_DWORD *)(v118 + 1120) = -1;
      uint64_t v79 = v78 + 1128;
      *(void *)&long long v118 = v78 + 1128;
      uint64_t v80 = v78;
      int v81 = *(_DWORD *)(v78 + 1120);
      if (v81 != 1) {
        goto LABEL_274;
      }
LABEL_282:
      sub_4C9334(v80, v75);
LABEL_271:
      *(_DWORD *)(v79 - 8) = 1;
      v75 += 1120;
      if (v75 != v76) {
        continue;
      }
      break;
    }
    uint64_t v87 = (uint64_t)v117;
    __p = v117;
    long long v116 = v118;
    if (v104 == v103)
    {
      int v77 = 1;
    }
    else
    {
      uint64_t v88 = v118;
      if ((void *)v118 == v117)
      {
        int v77 = 2;
      }
      else
      {
        uint64_t v89 = (uint64_t)v117;
        do
        {
          if (sub_73AB30((uint64_t)&v117, v89, 0) && sub_73AB30((uint64_t)&v117, v89, 1))
          {
            int v77 = 6;
            goto LABEL_311;
          }
          v89 += 1128;
        }
        while (v89 != v88);
        uint64_t v90 = v87;
        do
        {
          if (sub_73AB30((uint64_t)&v117, v90, 1))
          {
            int v77 = 4;
            goto LABEL_311;
          }
          v90 += 1128;
        }
        while (v90 != v88);
        while (!sub_73AB30((uint64_t)&v117, v87, 0))
        {
          v87 += 1128;
          if (v87 == v88)
          {
            int v77 = 7;
            goto LABEL_311;
          }
        }
        int v77 = 5;
      }
    }
LABEL_311:
    LODWORD(v113) = v77;
    sub_647E20((uint64_t)v13, &v113);
    v17 = __p;
    if (__p)
    {
      uint64_t v91 = v116;
      if ((void *)v116 == __p)
      {
LABEL_25:
        operator delete(v17);
        goto LABEL_26;
      }
      while (2)
      {
        uint64_t v92 = v91;
        v91 -= 1128;
        int v93 = *(_DWORD *)(v92 - 8);
        if (v93 != 1)
        {
          if (v93) {
            goto LABEL_315;
          }
          if (*(char *)(v92 - 969) < 0)
          {
            operator delete(*(void **)(v92 - 992));
            v94 = (void **)(v92 - 1024);
            v95 = *(void ***)(v92 - 1024);
            if (v95) {
              goto LABEL_339;
            }
LABEL_320:
            if ((*(char *)(v92 - 1025) & 0x80000000) == 0) {
              goto LABEL_321;
            }
          }
          else
          {
            v94 = (void **)(v92 - 1024);
            v95 = *(void ***)(v92 - 1024);
            if (!v95) {
              goto LABEL_320;
            }
LABEL_339:
            v97 = (void ***)(v92 - 1016);
            v98 = *(void ***)(v92 - 1016);
            if (v98 == v95)
            {
              *v97 = v95;
              operator delete(v95);
              if (*(char *)(v92 - 1025) < 0) {
                goto LABEL_346;
              }
LABEL_321:
              if ((*(char *)(v92 - 1049) & 0x80000000) == 0)
              {
LABEL_322:
                if (*(char *)(v92 - 1097) < 0) {
LABEL_348:
                }
                  operator delete(*(void **)(v92 - 1120));
LABEL_315:
                if ((void *)v91 == v17)
                {
                  v17 = __p;
                  goto LABEL_25;
                }
                continue;
              }
LABEL_347:
              operator delete(*(void **)(v92 - 1072));
              if (*(char *)(v92 - 1097) < 0) {
                goto LABEL_348;
              }
              goto LABEL_315;
            }
            do
            {
              if (*((char *)v98 - 1) < 0) {
                operator delete(*(v98 - 3));
              }
              v98 -= 3;
            }
            while (v98 != v95);
            v99 = *v94;
            *v97 = v95;
            operator delete(v99);
            if ((*(char *)(v92 - 1025) & 0x80000000) == 0) {
              goto LABEL_321;
            }
          }
LABEL_346:
          operator delete(*(void **)(v92 - 1048));
          if ((*(char *)(v92 - 1049) & 0x80000000) == 0) {
            goto LABEL_322;
          }
          goto LABEL_347;
        }
        break;
      }
      if (*(unsigned char *)(v92 - 16))
      {
        sub_3A6CB8(v92 - 448);
        *(unsigned char *)(v92 - 16) = 0;
      }
      *(void *)(v91 + 640) = off_2438EC8;
      if (*(char *)(v91 + 671) < 0) {
        operator delete(*(void **)(v92 - 480));
      }
      if (*(unsigned char *)(v92 - 496)) {
        *(unsigned char *)(v92 - 496) = 0;
      }
      if (*(char *)(v92 - 513) < 0)
      {
        operator delete(*(void **)(v92 - 536));
        if (*(char *)(v92 - 545) < 0) {
          goto LABEL_350;
        }
LABEL_332:
        if ((*(char *)(v92 - 569) & 0x80000000) == 0) {
          goto LABEL_333;
        }
LABEL_351:
        operator delete(*(void **)(v92 - 592));
        if (*(char *)(v92 - 609) < 0) {
          goto LABEL_352;
        }
LABEL_334:
        if ((*(char *)(v92 - 641) & 0x80000000) == 0) {
          goto LABEL_335;
        }
LABEL_353:
        operator delete(*(void **)(v92 - 664));
        if (*(char *)(v92 - 665) < 0) {
          goto LABEL_354;
        }
LABEL_336:
        v96 = (unsigned char *)(v92 - 696);
        if (*(unsigned char *)(v92 - 696)) {
LABEL_355:
        }
          unsigned char *v96 = 0;
      }
      else
      {
        if ((*(char *)(v92 - 545) & 0x80000000) == 0) {
          goto LABEL_332;
        }
LABEL_350:
        operator delete(*(void **)(v92 - 568));
        if (*(char *)(v92 - 569) < 0) {
          goto LABEL_351;
        }
LABEL_333:
        if ((*(char *)(v92 - 609) & 0x80000000) == 0) {
          goto LABEL_334;
        }
LABEL_352:
        operator delete(*(void **)(v92 - 632));
        if (*(char *)(v92 - 641) < 0) {
          goto LABEL_353;
        }
LABEL_335:
        if ((*(char *)(v92 - 665) & 0x80000000) == 0) {
          goto LABEL_336;
        }
LABEL_354:
        operator delete(*(void **)(v92 - 688));
        v96 = (unsigned char *)(v92 - 696);
        if (*(unsigned char *)(v92 - 696)) {
          goto LABEL_355;
        }
      }
      sub_29D95C(v91);
      goto LABEL_315;
    }
LABEL_26:
    v13 += 945;
    if (v13 != v105) {
      continue;
    }
    break;
  }
}

void sub_72AA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  int v15 = va_arg(va2, void *);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  sub_72BBD0((void **)va);
  sub_4B1DB4((void **)va1);
  sub_4B1DB4((void **)va2);
  _Unwind_Resume(a1);
}

void *sub_72AB24()
{
  result = (void *)__chkstk_darwin();
  uint64_t v4 = v3;
  LODWORD(v3) = *((unsigned __int8 *)result + 1259);
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = 0;
  if (v3 == 2)
  {
    uint64_t v5 = v2;
    v6 = v1;
    v7 = result;
    sub_72AEF4((char **)v4, ((char *)v1[1] - (char *)*v1) >> 5);
    sub_103E2B8(v30, *((unsigned __int8 *)v7 + 1259), *v7);
    v8 = *v6;
    uint64_t v9 = v6[1];
    if (*v6 != v9)
    {
      do
      {
        uint64_t v10 = sub_45E5CC(v8);
        uint64_t v11 = v10;
        if (*(_DWORD *)(v10 + 88) <= *((_DWORD *)v7 + 363)
          && (!*(unsigned char *)(v10 + 159) || *((unsigned char *)v7 + 26))
          && (!sub_358820(v10) || sub_1041610((uint64_t)v30, v11)))
        {
          sub_6F57B4((const std::string **)(v11 + 64), (uint64_t)(v7 + 125), (uint64_t)__p);
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          unint64_t v12 = *(void *)(v4 + 8);
          if (v12 >= *(void *)(v4 + 16))
          {
            uint64_t v13 = sub_738690((uint64_t *)v4, &v31, v11, (uint64_t)__p);
          }
          else
          {
            sub_738844(v4 + 16, *(void *)(v4 + 8), &v31, v11, (uint64_t)__p);
            uint64_t v13 = v12 + 1120;
            *(void *)(v4 + 8) = v12 + 1120;
          }
          *(void *)(v4 + 8) = v13;
          if (v29 < 0) {
            operator delete(__p[0]);
          }
        }
        v8 += 4;
      }
      while (v8 != v9);
    }
    if (*((unsigned char *)v7 + 27))
    {
      uint64_t v14 = *v5;
      int v15 = v5[1];
      if (*v5 != v15)
      {
        uint64_t v16 = (uint64_t)(v7 + 125);
        do
        {
          uint64_t v17 = **v14 + 424 * (void)v14[1];
          sub_6F57B4((const std::string **)(v17 + 64), v16, (uint64_t)__p);
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          unint64_t v18 = *(void *)(v4 + 8);
          if (v18 >= *(void *)(v4 + 16))
          {
            uint64_t v19 = sub_738690((uint64_t *)v4, &v31, v17, (uint64_t)__p);
          }
          else
          {
            sub_738844(v4 + 16, *(void *)(v4 + 8), &v31, v17, (uint64_t)__p);
            uint64_t v19 = v18 + 1120;
            *(void *)(v4 + 8) = v18 + 1120;
          }
          *(void *)(v4 + 8) = v19;
          if (v29 < 0) {
            operator delete(__p[0]);
          }
          v14 += 19;
        }
        while (v14 != v15);
      }
    }
    else if (*((unsigned char *)v7 + 28))
    {
      int v20 = *v5;
      uint64_t v21 = v5[1];
      if (*v5 != v21)
      {
        uint64_t v22 = (uint64_t)(v7 + 125);
        do
        {
          uint64_t v23 = v20[1];
          uint64_t v24 = **v20;
          uint64_t v25 = v24 + 424 * (void)v23;
          if (*(unsigned char *)(v25 + 312) && sub_1041610((uint64_t)v30, v24 + 424 * (void)v23))
          {
            sub_6F57B4((const std::string **)(v24 + 424 * (void)v23 + 64), v22, (uint64_t)__p);
            uint64_t v31 = 0;
            uint64_t v32 = 0;
            unint64_t v26 = *(void *)(v4 + 8);
            if (v26 >= *(void *)(v4 + 16))
            {
              uint64_t v27 = sub_738690((uint64_t *)v4, &v31, v25, (uint64_t)__p);
            }
            else
            {
              sub_738844(v4 + 16, *(void *)(v4 + 8), &v31, v25, (uint64_t)__p);
              uint64_t v27 = v26 + 1120;
              *(void *)(v4 + 8) = v26 + 1120;
            }
            *(void *)(v4 + 8) = v27;
            if (v29 < 0) {
              operator delete(__p[0]);
            }
          }
          v20 += 19;
        }
        while (v20 != v21);
      }
    }
    return sub_3A6230(v30);
  }
  return result;
}

void sub_72AE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  *(void *)(v16 + 8) = v17;
  if (a15 < 0)
  {
    operator delete(__p);
    sub_3A6230(&a16);
    sub_50E790((void **)v16);
    _Unwind_Resume(a1);
  }
  sub_3A6230(&a16);
  sub_50E790((void **)v16);
  _Unwind_Resume(a1);
}

void sub_72AEF4(char **a1, unint64_t a2)
{
  v2 = *a1;
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 5) >= a2) {
    return;
  }
  if (a2 >= 0x3A83A83A83A83BLL) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 1120 * a2;
  v6 = (char *)operator new(1120 * a2);
  v7 = &v6[v5];
  v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 1120;
    uint64_t v9 = sub_4C09FC(v9 - 1120, v4);
  }
  while ((char *)v4 != v2);
  uint64_t v10 = *a1;
  v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 1120;
      sub_3A6B94((uint64_t)v2);
    }
    while (v2 != v10);
    v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

__n128 sub_72B014@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 2040);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 2024);
  *(_OWORD *)(a2 + 208) = v2;
  long long v3 = *(_OWORD *)(a1 + 2072);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 2056);
  *(_OWORD *)(a2 + 240) = v3;
  long long v4 = *(_OWORD *)(a1 + 1976);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 1960);
  *(_OWORD *)(a2 + 144) = v4;
  long long v5 = *(_OWORD *)(a1 + 2008);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 1992);
  *(_OWORD *)(a2 + 176) = v5;
  long long v6 = *(_OWORD *)(a1 + 1912);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 1896);
  *(_OWORD *)(a2 + 80) = v6;
  long long v7 = *(_OWORD *)(a1 + 1944);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 1928);
  *(_OWORD *)(a2 + 112) = v7;
  long long v8 = *(_OWORD *)(a1 + 1848);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 1832);
  *(_OWORD *)(a2 + 16) = v8;
  __n128 result = *(__n128 *)(a1 + 1864);
  long long v10 = *(_OWORD *)(a1 + 1880);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void sub_72B05C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a2 + 1184);
  uint64_t v4 = *(void *)(a2 + 1192);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 152);
      if (v7)
      {
        uint64_t v8 = 0;
        for (unint64_t i = 0; i != v7; ++i)
          v8 += sub_46CCC8((void *)a2, i, a3);
        if (v8 > *(void *)(a1 + 16)) {
          return;
        }
      }
      else if (*(uint64_t *)(a1 + 16) < 0)
      {
        return;
      }
      if (sub_6F2FD8(v3)) {
        break;
      }
      v3 += 160;
      if (v3 == v4) {
        return;
      }
    }
    unint64_t v10 = *(void *)(v3 + 152);
    sub_4AA8E0((char *)&__dst, (long long *)v3);
    sub_738954((uint64_t *)(*(void *)(a2 + 1064) + 336), &__dst, &v32, 1uLL);
    if (v31 < 0)
    {
      operator delete(__p);
      if ((v29 & 0x80000000) == 0)
      {
LABEL_13:
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_20;
      }
    }
    else if ((v29 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v28);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_21;
    }
LABEL_20:
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete(v24);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if (v10 == -1) {
        return;
      }
LABEL_23:
      if (v10 >= *(void *)(sub_51690C((void *)(a2 + 1064), 1uLL) + 24)) {
        return;
      }
      uint64_t v11 = sub_46C8EC((void *)a2, v10);
      sub_2954EC(*(void *)(a1 + 8), *(void *)(v11 + 32), (uint64_t)&__dst);
      sub_2E4B5C((uint64_t)&__dst, &v21);
      if (__dst.__r_.__value_.__l.__size_)
      {
        __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__l.__size_;
        operator delete((void *)__dst.__r_.__value_.__l.__size_);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)v21) >> 2) < 2) {
        goto LABEL_44;
      }
      unint64_t v12 = (_DWORD *)sub_413C0(&v21, 0);
      uint64_t v13 = (_DWORD *)sub_413C0(&v21, 1uLL);
      if (*v13 == *v12)
      {
        unsigned int v14 = v12[1];
        unsigned int v15 = v13[1];
        double j = 0.0;
        if (v14 == v15)
        {
LABEL_37:
          double v18 = (j + 180.0) / 45.0 + 0.5;
          if ((int)v18 <= 0) {
            unsigned int v19 = -(-(int)v18 & 7);
          }
          else {
            unsigned int v19 = (int)v18 & 7;
          }
          if (v19 >= 8) {
            int v20 = "";
          }
          else {
            int v20 = off_243A380[v19];
          }
          std::string::assign((std::string *)(a2 + 7376), v20);
LABEL_44:
          if (v21)
          {
            uint64_t v22 = v21;
            operator delete(v21);
          }
          return;
        }
      }
      else
      {
        unsigned int v15 = v13[1];
        unsigned int v14 = v12[1];
      }
      double v17 = -(double)(*v12 - *v13);
      if (*v13 - *v12 < (*v12 - *v13)) {
        double v17 = (double)(*v13 - *v12);
      }
      for (double j = (atan2((double)v15 - (double)v14, v17) + 1.57079633) * 180.0 / 3.14159265; j >= 180.0; double j = j + -360.0)
        ;
      for (; j < -180.0; double j = j + 360.0)
        ;
      goto LABEL_37;
    }
LABEL_22:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v10 == -1) {
      return;
    }
    goto LABEL_23;
  }
}

void sub_72B3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_72B438(char **a1, unint64_t a2)
{
  long long v2 = *a1;
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x8AB355E008AB4) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 7560 * a2;
  long long v6 = (char *)operator new(7560 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 7560;
    uint64_t v9 = sub_738BB0(v9 - 7560, v4);
  }
  while ((char *)v4 != v2);
  unint64_t v10 = *a1;
  long long v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 7560;
      sub_574D4C((uint64_t)v2);
    }
    while (v2 != v10);
    long long v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_72B560(char **a1, unint64_t a2)
{
  long long v2 = *a1;
  if (0xFF55E3181697D6CDLL * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x550E73F4B414ALL) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 12328 * a2;
  long long v6 = (char *)operator new(12328 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 12328;
    uint64_t v9 = sub_5AF130(v9 - 12328, v4);
  }
  while ((char *)v4 != v2);
  unint64_t v10 = *a1;
  long long v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 12328;
      sub_5752F4((uint64_t)v2);
    }
    while (v2 != v10);
    long long v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

uint64_t sub_72B688(unsigned int **a1, uint64_t a2)
{
  long long v2 = a1[1];
  if (*a1 == v2) {
    return -1;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = ((char *)v2 - (char *)*a1) / 12;
  float64x2_t v39 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v40 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v37 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v38 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  while (1)
  {
    uint64_t v9 = *a1;
    unint64_t v10 = (unsigned int *)sub_413C0(a1, v7);
    unsigned int v12 = *v9;
    unsigned int v11 = v9[1];
    if (*v9 == -1 && v11 == -1) {
      break;
    }
    unsigned int v15 = *v10;
    unsigned int v14 = v10[1];
    if (*v10 == -1 && v14 == -1) {
      break;
    }
    long double v17 = exp(3.14159265 - (double)v11 * 6.28318531 / 4294967300.0);
    long double v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795 * 0.0174532925;
    v19.i64[0] = v12;
    v19.i64[1] = v15;
    long double v20 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
    long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v22 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v19), v40), v39), v38), v37);
    double v41 = vsubq_f64((float64x2_t)v22, (float64x2_t)vdupq_laneq_s64(v22, 1)).f64[0];
    long double v23 = sin((v18 - v21) * 0.5);
    long double v24 = v23 * v23;
    double v25 = cos(v18);
    long double v26 = v25 * cos(v21);
    long double v27 = sin(0.5 * v41);
    long double v28 = atan2(sqrt(v27 * v27 * v26 + v24), sqrt(1.0 - (v27 * v27 * v26 + v24)));
    double v29 = (v28 + v28) * 6372797.56 * 100.0;
    if (v29 >= 0.0)
    {
      double v30 = v29;
      if (v29 >= 4.50359963e15) {
        goto LABEL_19;
      }
      uint64_t v31 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      double v30 = v29;
      if (v29 <= -4.50359963e15) {
        goto LABEL_19;
      }
      uint64_t v31 = (uint64_t)(v29 + v29);
      if (v31 >= 1) {
        --v31;
      }
    }
    double v30 = (double)(v31 >> 1);
LABEL_19:
    if (v30 >= 9.22337204e18)
    {
      uint64_t v33 = 0x7FFFFFFFFFFFFFFELL;
      if (a2 != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      goto LABEL_31;
    }
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_30;
      }
      uint64_t v32 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_30;
      }
      uint64_t v32 = (uint64_t)(v29 + v29);
      if (v32 >= 1) {
        --v32;
      }
    }
    double v29 = (double)(v32 >> 1);
LABEL_30:
    uint64_t v33 = (uint64_t)v29;
    if ((uint64_t)v29 >= a2) {
      break;
    }
LABEL_31:
    if (v33 > v6)
    {
      uint64_t v6 = v33;
      unint64_t v5 = v7;
    }
    if (v8 == ++v7)
    {
      int v34 = a1;
      unint64_t v35 = v5;
      return *(void *)sub_413C0(v34, v35);
    }
  }
  int v34 = a1;
  unint64_t v35 = v7;
  return *(void *)sub_413C0(v34, v35);
}

uint64_t sub_72B9FC(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_45FC7C(a2);
  if (result - 1 == a3)
  {
    unint64_t v10 = *a4;
    unsigned int v11 = a4[1];
    if (*a4 != v11)
    {
      while (*((_DWORD *)v10 + 26) != 1)
      {
        v10 += 47;
        if (v10 == v11) {
          goto LABEL_11;
        }
      }
    }
    if (v10 != v11) {
      goto LABEL_8;
    }
LABEL_11:
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire))
    {
      unint64_t v10 = &qword_24F7018;
      uint64_t v12 = a6;
    }
    else
    {
      int v13 = __cxa_guard_acquire(&qword_24F7190);
      unint64_t v10 = &qword_24F7018;
      if (!v13)
      {
LABEL_8:
        uint64_t v12 = a6;
        return sub_64EFD0(v12, (uint64_t)v10);
      }
      qword_24F7018 = -1;
      dword_24F7020 = 0x7FFFFFFF;
      qword_24F7028 = -1;
      unk_24F7030 = -1;
      qword_24F7038 = 0x7FFFFFFFFFFFFFFFLL;
      unk_24F7040 = 0;
      dword_24F7048 = -1935635296;
      qword_24F7050 = 0;
      *(_DWORD *)((char *)&qword_24F7050 + 7) = 0;
      qword_24F7068 = 0;
      unk_24F7070 = 0;
      qword_24F7060 = 0;
      dword_24F7078 = 0;
      byte_24F707C = 100;
      qword_24F7080 = 0;
      dword_24F7088 = 0;
      byte_24F70F0 = 0;
      unk_24F70E0 = 0u;
      unk_24F70D0 = 0u;
      unk_24F70C0 = 0u;
      unk_24F70B0 = 0u;
      unk_24F70A0 = 0u;
      unk_24F7090 = 0u;
      qword_24F7148 = 0;
      xmmword_24F7128 = 0u;
      unk_24F7138 = 0u;
      xmmword_24F7108 = 0u;
      unk_24F7118 = 0u;
      xmmword_24F70F8 = 0u;
      xmmword_24F7150 = xmmword_20B8E30;
      qword_24F7160 = 0x7FFFFFFFFFFFFFFFLL;
      qword_24F7170 = 0;
      unk_24F7178 = 0;
      dword_24F7180 = 0;
      qword_24F7168 = 0;
      byte_24F7188 = 0;
      dword_24F718C = 0;
      __cxa_guard_release(&qword_24F7190);
      unint64_t v10 = &qword_24F7018;
      uint64_t v12 = a6;
    }
    return sub_64EFD0(v12, (uint64_t)v10);
  }
  return result;
}

void **sub_72BBD0(void **a1)
{
  long long v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
      {
        int v5 = *(_DWORD *)(v3 - 8);
        v3 -= 1128;
        if (v5 == 1)
        {
          uint64_t v3 = sub_3A6B94(v3);
        }
        else if (!v5)
        {
          uint64_t v3 = sub_4BCFD0(v3);
        }
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_72BC48(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "max_search_distance_for_named_street");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)a1);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "enable_congestion_zone_impact");
  uint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 8) = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_8:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "enable_guidance_event_importance_info");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 9) = v7 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 9) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_14:
    }
      operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "show_hidden_incidents");
  uint64_t v8 = sub_58070(a2, (uint64_t)__p);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 10) = v9 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 10) = *(unsigned char *)(a1 + 10) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_20:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "show_encountered_soft_closures");
  unint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 11) = v11 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 11) = *(unsigned char *)(a1 + 11) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_26:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "show_encountered_hard_closures");
  uint64_t v12 = sub_58070(a2, (uint64_t)__p);
  if (v12 && (int v13 = *((_DWORD *)v12 + 12), (v13 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 12) = v13 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_33;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a1 + 12) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_33:
    }
      operator delete(__p[0]);
  }
}

void sub_72BF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_72BFB8(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  uint64_t v7 = *(void *)a1;
  char v20 = 13;
  uint64_t v18 = 0;
  strcpy((char *)v19, "RouteGuidance");
  uint64_t v16 = 0;
  long double v17 = 0;
  uint64_t v8 = sub_374CDC(v7, (uint64_t)v19, (uint64_t *)&v16);
  sub_3CB560(v8, (uint64_t)__p);
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  sub_731E64(a1 + 16, __p);
  int v9 = v22;
  if (v22)
  {
    do
    {
      unsigned int v14 = *(char **)v9;
      sub_57AC8((uint64_t *)v9 + 5);
      if (v9[39] < 0) {
        operator delete(*((void **)v9 + 2));
      }
      operator delete(v9);
      int v9 = v14;
    }
    while (v14);
  }
  unint64_t v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  int v11 = (void **)v16;
  if (v16)
  {
    uint64_t v12 = v17;
    int v13 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      int v13 = v16;
    }
    long double v17 = v11;
    operator delete(v13);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  sub_4BBDC0(a1 + 32, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1568), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v15 = *a4;
    *(void *)(a1 + 1584) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 1568) = v15;
  }
  operator new();
}

void sub_72C6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_4BCED0(v19);
  _Unwind_Resume(a1);
}

void sub_72CC7C()
{
}

uint64_t *sub_72CCA8(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 3471) < 0) {
      operator delete(*(void **)(v1 + 3448));
    }
    sub_4BCED0(v1 + 8);
    operator delete();
  }
  return result;
}

uint64_t sub_72CD0C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 1800);
  *(void *)(a1 + 1800) = 0;
  if (v2) {
    sub_7385FC(a1 + 1800, v2);
  }
  uint64_t v3 = *(void *)(a1 + 1792);
  *(void *)(a1 + 1792) = 0;
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0) {
      operator delete(*(void **)(v3 + 8));
    }
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 1784);
  *(void *)(a1 + 1784) = 0;
  if (v4) {
    sub_738504(a1 + 1784, v4);
  }
  uint64_t v5 = *(void *)(a1 + 1776);
  *(void *)(a1 + 1776) = 0;
  if (v5)
  {
    if (*(char *)(v5 + 31) < 0) {
      operator delete(*(void **)(v5 + 8));
    }
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 1768);
  *(void *)(a1 + 1768) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1760);
  *(void *)(a1 + 1760) = 0;
  if (v7)
  {
    sub_4BCED0(v7 + 152);
    operator delete();
  }
  uint64_t v8 = *(void *)(a1 + 1752);
  *(void *)(a1 + 1752) = 0;
  if (v8) {
    operator delete();
  }
  uint64_t v9 = *(void *)(a1 + 1744);
  *(void *)(a1 + 1744) = 0;
  if (v9)
  {
    unint64_t v10 = *(std::__shared_weak_count **)(v9 + 1712);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    sub_4BCED0(v9 + 168);
    operator delete();
  }
  uint64_t v11 = *(void *)(a1 + 1736);
  *(void *)(a1 + 1736) = 0;
  if (v11) {
    operator delete();
  }
  uint64_t v12 = *(void *)(a1 + 1728);
  *(void *)(a1 + 1728) = 0;
  if (v12)
  {
    if (*(char *)(v12 + 3471) < 0) {
      operator delete(*(void **)(v12 + 3448));
    }
    sub_4BCED0(v12 + 8);
    operator delete();
  }
  uint64_t v13 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = 0;
  if (v13)
  {
    sub_E6E3BC();
    operator delete();
  }
  unsigned int v14 = *(void **)(a1 + 1712);
  *(void *)(a1 + 1712) = 0;
  if (v14)
  {
    sub_5ADD5C(v14);
    operator delete();
  }
  uint64_t v15 = *(void *)(a1 + 1704);
  *(void *)(a1 + 1704) = 0;
  if (v15) {
    operator delete();
  }
  uint64_t v16 = *(void *)(a1 + 1696);
  *(void *)(a1 + 1696) = 0;
  if (v16)
  {
    nullsub_1(v16);
    operator delete();
  }
  uint64_t v17 = *(void *)(a1 + 1688);
  *(void *)(a1 + 1688) = 0;
  if (v17) {
    operator delete();
  }
  uint64_t v18 = *(void *)(a1 + 1680);
  *(void *)(a1 + 1680) = 0;
  if (v18)
  {
    sub_68D2B0(v18);
    operator delete();
  }
  uint64_t v19 = *(void *)(a1 + 1672);
  *(void *)(a1 + 1672) = 0;
  if (v19)
  {
    nullsub_1(v19 + 8272);
    sub_670F0C((void *)(v19 + 2040));
    if (*(char *)(v19 + 1927) < 0) {
      operator delete(*(void **)(v19 + 1904));
    }
    operator delete();
  }
  uint64_t v20 = *(void *)(a1 + 1664);
  *(void *)(a1 + 1664) = 0;
  if (v20) {
    operator delete();
  }
  uint64_t v21 = *(void *)(a1 + 1656);
  *(void *)(a1 + 1656) = 0;
  if (v21) {
    operator delete();
  }
  uint64_t v22 = *(void *)(a1 + 1648);
  *(void *)(a1 + 1648) = 0;
  if (v22)
  {
    sub_5CD594(v22);
    operator delete();
  }
  uint64_t v23 = *(void *)(a1 + 1640);
  *(void *)(a1 + 1640) = 0;
  if (v23)
  {
    long double v24 = *(std::__shared_weak_count **)(v23 + 3896);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    double v25 = *(std::__shared_weak_count **)(v23 + 24);
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    operator delete();
  }
  uint64_t v26 = *(void *)(a1 + 1632);
  *(void *)(a1 + 1632) = 0;
  if (v26)
  {
    long double v27 = *(std::__shared_weak_count **)(v26 + 24);
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    operator delete();
  }
  uint64_t v28 = *(void *)(a1 + 1624);
  *(void *)(a1 + 1624) = 0;
  if (v28)
  {
    if (*(char *)(v28 + 1711) < 0)
    {
      operator delete(*(void **)(v28 + 1688));
      sub_4BCED0(v28 + 152);
      if ((*(char *)(v28 + 135) & 0x80000000) == 0)
      {
LABEL_68:
        if ((*(char *)(v28 + 63) & 0x80000000) == 0) {
          goto LABEL_69;
        }
LABEL_85:
        operator delete(*(void **)(v28 + 40));
LABEL_69:
        operator delete();
      }
    }
    else
    {
      sub_4BCED0(v28 + 152);
      if ((*(char *)(v28 + 135) & 0x80000000) == 0) {
        goto LABEL_68;
      }
    }
    operator delete(*(void **)(v28 + 112));
    if ((*(char *)(v28 + 63) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_85;
  }
  uint64_t v29 = *(void *)(a1 + 1616);
  *(void *)(a1 + 1616) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  double v30 = *(void **)(a1 + 1608);
  *(void *)(a1 + 1608) = 0;
  if (v30)
  {
    sub_738128(v30);
    operator delete();
  }
  uint64_t v31 = *(void *)(a1 + 1600);
  *(void *)(a1 + 1600) = 0;
  if (v31) {
    operator delete();
  }
  uint64_t v32 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = 0;
  if (v32)
  {
    uint64_t v33 = *(void *)(v32 + 48);
    if (v33)
    {
      sub_4AA6AC(v32 + 48, v33);
      operator delete(*(void **)(v32 + 48));
    }
    operator delete();
  }
  if (*(char *)(a1 + 1591) < 0) {
    operator delete(*(void **)(a1 + 1568));
  }
  sub_4BCED0(a1 + 32);
  return a1;
}

uint64_t sub_72D2F0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (void **)v0;
  uint64_t v9 = v8;
  uint64_t result = sub_725D0((uint64_t)v33);
  *uint64_t v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  uint64_t v11 = *v6;
  uint64_t v12 = v6[1];
  if (*v6 != v12)
  {
    while (1)
    {
      uint64_t result = sub_45FB98(v11);
      if (!result) {
        break;
      }
      uint64_t result = sub_45FB38(v11);
      if (result) {
        break;
      }
      v11 += 15;
      if (v11 == v12)
      {
        uint64_t v13 = sub_374EF4(*v7);
        sub_72D868();
        unsigned int v14 = *v9;
        if (*v9)
        {
          uint64_t v15 = (uint64_t)v9[1];
          uint64_t v16 = *v9;
          if ((std::string *)v15 != v14)
          {
            do
              uint64_t v15 = sub_574D4C(v15 - 7560);
            while ((std::string *)v15 != v14);
            uint64_t v16 = *v9;
          }
          v9[1] = v14;
          operator delete(v16);
          *uint64_t v9 = 0;
          v9[1] = 0;
          v9[2] = 0;
        }
        *(_OWORD *)uint64_t v9 = v43;
        v9[2] = v44;
        sub_653FE4(v9);
        sub_725A0((uint64_t)v33);
        sub_4B4210((uint64_t)&v43, *v7, v13, (uint64_t)(v7 + 4));
        sub_4B4360(&v43, (uint64_t **)v9);
        v7[244] = (void *)(round(sub_72688((uint64_t)v33)) + (double)(unint64_t)v7[244]);
        sub_725A0((uint64_t)v33);
        sub_7BC6D8((uint64_t)v7[220], (unsigned char *)v7 + 1248, (uint64_t *)v9);
        v7[245] = (void *)(round(sub_72688((uint64_t)v33)) + (double)(unint64_t)v7[245]);
        sub_725A0((uint64_t)v33);
        sub_797930(v7[219], (uint64_t *)v9);
        v7[246] = (void *)(round(sub_72688((uint64_t)v33)) + (double)(unint64_t)v7[246]);
        sub_72F930((uint64_t)v7, (char ***)v9);
        sub_725A0((uint64_t)v33);
        sub_62B9C4((int)v30, (int)*v7, 0, *((unsigned __int8 *)v7 + 1557), (std::string *)(v7 + 196));
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6E20, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F6E20))
        {
          sub_737844((uint64_t)&unk_24F6C38);
        }
        int v17 = *(unsigned __int8 *)(v2 + 8);
        uint64_t v18 = *(void **)v2;
        sub_5B98B8((uint64_t)v42, (uint64_t)(v7 + 4));
        if (v17) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = &unk_24F6C38;
        }
        sub_573F00(v34, (uint64_t)*v7, (uint64_t)v42, (uint64_t)v19, (uint64_t)v30);
        int64_t v20 = (char *)v6[1] - (char *)*v6;
        if (v20)
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = v20 / 120;
          do
          {
            sub_574128((uint64_t)v34, (__n128 *)&(*v6)[v22], v4, (__n128 *)&(*v9)[v21]);
            v22 += 15;
            v21 += 315;
            --v23;
          }
          while (v23);
        }
        v7[251] = (void *)(round(sub_72688((uint64_t)v33)) + (double)(unint64_t)v7[251]);
        int v24 = *((unsigned __int8 *)v7 + 1437);
        sub_725A0((uint64_t)v33);
        if (v24)
        {
          sub_52A970((uint64_t)v7[221], (uint64_t *)v9);
          double v25 = *v9;
          uint64_t v26 = v9[1];
          if (*v9 != v26 && *((unsigned char *)v7 + 1546))
          {
LABEL_20:
            if (*((unsigned char *)v7 + 25)) {
              sub_6036F8((uint64_t)v7[207], (uint64_t)v25);
            }
            while (1)
            {
              v25 += 315;
              if (v25 == v26) {
                break;
              }
              if (*((unsigned char *)v7 + 1546)) {
                goto LABEL_20;
              }
            }
          }
          double v27 = round(sub_72688((uint64_t)v33));
          uint64_t v28 = (unint64_t *)(v7 + 247);
        }
        else
        {
          sub_52A970((uint64_t)v7[202], (uint64_t *)v9);
          double v27 = round(sub_72688((uint64_t)v33));
          uint64_t v28 = (unint64_t *)(v7 + 248);
        }
        *uint64_t v28 = (unint64_t)(v27 + (double)*v28);
        if (v41 < 0) {
          operator delete(__p);
        }
        sub_4BCED0((uint64_t)&v39);
        sub_4F2894((uint64_t)&v38);
        uint64_t v29 = v37;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        if (v35)
        {
          v36 = v35;
          operator delete(v35);
        }
        sub_7379DC((uint64_t)v42);
        if (v32 < 0) {
          operator delete(v31);
        }
        return sub_737ADC((uint64_t)&v43);
      }
    }
  }
  return result;
}

void sub_72D794(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F6E20);
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  sub_737ADC((uint64_t)&STACK[0x28D0]);
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_72D854(_Unwind_Exception *a1)
{
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_72D868()
{
  uint64_t v0 = __chkstk_darwin();
  char v222 = v1;
  v226 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  sub_725D0((uint64_t)v240);
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = 0;
  sub_731674((char **)v7, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4[1] - *v4) >> 3));
  uint64_t v9 = *v226;
  uint64_t v8 = v226[1];
  uint64_t v231 = v7;
  uint64_t v232 = v5;
  if (*v226 != v8)
  {
    while (*((_DWORD *)v9 + 26) != 1)
    {
      v9 += 47;
      if (v9 == v8) {
        goto LABEL_6;
      }
    }
  }
  if (v9 == v8)
  {
LABEL_6:
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire))
    {
      uint64_t v9 = &qword_24F7018;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_24F7190))
      {
        sub_737C74((uint64_t)&qword_24F7018);
        __cxa_guard_release(&qword_24F7190);
      }
      uint64_t v9 = &qword_24F7018;
    }
  }
  uint64_t v221 = (uint64_t)v9;
  sub_EE7318((uint64_t)v235, *(void *)v5);
  v220 = (void *)v4[1];
  if ((void *)*v4 != v220)
  {
    unint64_t v10 = (void *)*v4;
    int v225 = 0;
    v219 = (int32x4_t *)(v5 + 2052);
    v223 = (unsigned char *)(v5 + 1259);
    uint64_t v229 = v5 + 1000;
LABEL_12:
    ++*(_DWORD *)(v5 + 2024);
    *(_DWORD *)(v5 + 2028) += sub_45FC7C(v10);
    sub_6467E4((uint64_t)v279, (uint64_t)v10);
    v230 = v10;
    int v12 = sub_45FE24((uint64_t)v10);
    sub_6478F0((uint64_t)v279, v12);
    char v13 = sub_45FE1C((uint64_t)v10);
    sub_6478E8((uint64_t)v279, v13);
    unsigned int v14 = (char **)nullsub_1(v279);
    unint64_t v15 = sub_45FC7C(v230);
    sub_72B560(v14, v15);
    uint64_t v16 = *(void *)(v5 + 1640);
    uint64_t v17 = nullsub_1(v279);
    uint64_t v19 = *(void **)v17;
    uint64_t v18 = *(void **)(v17 + 8);
    if (*(void **)v17 != v18)
    {
      do
      {
        sub_5BBAE8(v16, v19);
        v19 += 1541;
      }
      while (v19 != v18);
    }
    int v20 = *(unsigned __int8 *)(v5 + 1554);
    unint64_t v21 = sub_646938(v279);
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        uint64_t v23 = sub_6467E8(v279, i);
        sub_731B18(v5, v230, i, v226, v20, v23);
      }
    }
    int v24 = *(void **)v5;
    double v25 = (uint64_t *)nullsub_1(v279);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    if (*v25 != v26)
    {
      do
      {
        sub_5AE518(v27, v24);
        v27 += 12328;
      }
      while (v27 != v26);
    }
    uint64_t v28 = (uint64_t *)nullsub_1(v279);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    uint64_t v227 = v29;
    while (v30 != v29)
    {
      uint64_t v31 = *(void *)(v30 + 536) - *(void *)(v30 + 528);
      unint64_t v32 = v31 >> 2;
      uint64_t v33 = *(unsigned char **)(v30 + 1144);
      int v34 = *(unsigned char **)(v30 + 1136);
      unint64_t v35 = (v33 - v34) >> 2;
      unint64_t v36 = (v31 >> 2) - v35;
      if (v31 >> 2 <= v35)
      {
        if (v31 >> 2 >= v35) {
          goto LABEL_46;
        }
        int v46 = &v34[4 * v32];
        goto LABEL_37;
      }
      uint64_t v37 = *(void *)(v30 + 1152);
      if (v36 <= (v37 - (uint64_t)v33) >> 2)
      {
        memset_pattern16(*(void **)(v30 + 1144), &unk_20B8FB0, 4 * v36);
        int v46 = &v33[4 * v36];
LABEL_37:
        *(void *)(v30 + 1144) = v46;
        goto LABEL_46;
      }
      if (v31 < 0) {
        sub_2E00();
      }
      unint64_t v38 = v37 - (void)v34;
      unint64_t v39 = (v37 - (uint64_t)v34) >> 1;
      if (v39 > v32) {
        unint64_t v32 = v39;
      }
      if (v38 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v32;
      }
      if (v40 >> 62) {
        sub_188D718();
      }
      char v41 = operator new(4 * v40);
      size_t v42 = 4 * v36;
      long long v43 = &v41[4 * v35];
      memset_pattern16(v43, &unk_20B8FB0, v42);
      if (v33 == v34)
      {
        uint64_t v45 = &v41[4 * v35];
        goto LABEL_44;
      }
      unint64_t v44 = v33 - 4 - v34;
      if (v44 < 0x2C)
      {
        uint64_t v45 = &v41[4 * v35];
        do
        {
LABEL_43:
          int v54 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v45 - 1) = v54;
          v45 -= 4;
        }
        while (v33 != v34);
        goto LABEL_44;
      }
      uint64_t v45 = &v41[4 * v35];
      if ((unint64_t)(v34 - v41) < 0x20) {
        goto LABEL_43;
      }
      uint64_t v47 = (v44 >> 2) + 1;
      uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v49 = &v33[-v48];
      uint64_t v45 = &v43[-v48];
      uint64_t v50 = &v41[4 * v35 - 16];
      uint64_t v51 = (long long *)(v33 - 16);
      uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v53 = *v51;
        *(v50 - 1) = *(v51 - 1);
        *uint64_t v50 = v53;
        v50 -= 2;
        v51 -= 2;
        v52 -= 8;
      }
      while (v52);
      uint64_t v33 = v49;
      if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_43;
      }
LABEL_44:
      *(void *)(v30 + 1136) = v45;
      *(void *)(v30 + 1144) = &v43[v42];
      *(void *)(v30 + 1152) = &v41[4 * v40];
      if (v34) {
        operator delete(v34);
      }
LABEL_46:
      int v55 = sub_46CF04(v30);
      uint64_t v56 = *(void *)(v30 + 1144) - *(void *)(v30 + 1136);
      uint64_t v5 = v232;
      if (v56)
      {
        unint64_t v57 = 0;
        int v58 = *(_DWORD *)(v30 + 768);
        uint64_t v59 = v56 >> 2;
        int v60 = v58 / 10 + v55;
        BOOL v61 = v58 < 0;
        int v62 = v58 % 10;
        if (v61) {
          char v63 = -5;
        }
        else {
          char v63 = 5;
        }
        int v64 = v60 + (((103 * (char)(v63 + v62)) >> 15) & 1) + ((103 * (char)(v63 + v62)) >> 10);
        do
        {
          int v65 = sub_46E19C((void *)v30, v57, 0);
          v66 = (_DWORD *)sub_5BBCD0((void *)(v30 + 1136), v57);
          if (v65 < 0) {
            char v67 = -5;
          }
          else {
            char v67 = 5;
          }
          int v68 = 103 * (char)(v67 + v65 % 10);
          v64 += v65 / 10 + ((v68 >> 15) & 1) + (v68 >> 10);
          _DWORD *v66 = v64;
          ++v57;
        }
        while (v59 != v57);
      }
      v30 += 12328;
      uint64_t v29 = v227;
    }
    sub_725A0((uint64_t)v240);
    sub_E95AEC(*(void *)(v5 + 1728), (uint64_t)v279);
    *(void *)(v5 + 2000) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                              + (double)*(unint64_t *)(v5 + 2000));
    v69 = (int32x4_t *)sub_E95E3C(*(void *)(v5 + 1728));
    int32x4_t v70 = v219[1];
    int32x4_t *v219 = vaddq_s32(*v219, *v69);
    v219[1] = vaddq_s32(v70, v69[1]);
    if ((sub_DC6EDC(*(void *)v5) & 1) == 0 && *v223 == 2)
    {
      sub_725A0((uint64_t)v240);
      uint64_t v71 = *(void *)v5;
      v233 = "showSOS";
      *(void *)&long long v234 = 7;
      v72 = sub_377A30(v71, (char **)&v233);
      if (*((char *)v72 + 23) < 0)
      {
        sub_4200(__p, (void *)*v72, v72[1]);
      }
      else
      {
        long long v73 = *(_OWORD *)v72;
        uint64_t v242 = v72[2];
        *(_OWORD *)__p = v73;
      }
      uint64_t v74 = *(void *)(v5 + 1800);
      int v75 = SHIBYTE(v242);
      int v77 = (void **)__p[0];
      uint64_t v76 = (int *)__p[1];
      uint64_t v78 = __p;
      if (v242 >= 0) {
        uint64_t v76 = (int *)HIBYTE(v242);
      }
      else {
        uint64_t v78 = (void **)__p[0];
      }
      if (v76 == (int *)((char *)&def_332C + 1))
      {
        __darwin_ct_rune_t v91 = *(char *)v78;
        __darwin_ct_rune_t v92 = __toupper(49);
        BOOL v90 = v92 == __toupper(v91);
      }
      else
      {
        if (v76 != dword_4) {
          goto LABEL_77;
        }
        __darwin_ct_rune_t v79 = *(char *)v78;
        __darwin_ct_rune_t v80 = __toupper(116);
        if (v80 != __toupper(v79)) {
          goto LABEL_77;
        }
        int v81 = __p;
        if (v75 < 0) {
          int v81 = v77;
        }
        __darwin_ct_rune_t v82 = *((char *)v81 + 1);
        __darwin_ct_rune_t v83 = __toupper(114);
        if (v83 != __toupper(v82)) {
          goto LABEL_77;
        }
        v84 = __p;
        if (v75 < 0) {
          v84 = v77;
        }
        __darwin_ct_rune_t v85 = *((char *)v84 + 2);
        __darwin_ct_rune_t v86 = __toupper(117);
        if (v86 != __toupper(v85)) {
          goto LABEL_77;
        }
        uint64_t v87 = __p;
        if (v75 < 0) {
          uint64_t v87 = v77;
        }
        __darwin_ct_rune_t v88 = *((char *)v87 + 3);
        __darwin_ct_rune_t v89 = __toupper(101);
        if (v89 == __toupper(v88)) {
          BOOL v90 = 1;
        }
        else {
LABEL_77:
        }
          BOOL v90 = 0;
      }
      sub_8DA6E4(v74, v223, v90, (uint64_t)v279);
      *(void *)(v5 + 1864) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1864));
      if (SHIBYTE(v242) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_78A3B0(*(void *)(v5 + 1744), (uint64_t)v279);
    sub_725A0((uint64_t)v240);
    sub_8272F4(*(void ***)(v5 + 1792), v230, v279);
    *(void *)(v5 + 1848) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                              + (double)*(unint64_t *)(v5 + 1848));
    sub_E797FC(*(int8x8_t **)(v5 + 1720), (uint64_t)v279);
    nullsub_1(v279);
    int v93 = (uint64_t *)nullsub_1(v279);
    uint64_t v94 = *v93;
    uint64_t v95 = v93[1];
    if (*v93 != v95)
    {
      int v96 = v225;
      do
      {
        v97 = *(char **)(v94 + 1064);
        v98 = *(char **)(v94 + 1072);
        if (v97 != v98)
        {
          unint64_t v99 = v98 - v97 - 2400;
          if (v99 >= 0x960)
          {
            unint64_t v102 = v99 / 0x960 + 1;
            int v100 = v96 + (v102 & 0xFFFFFFFE);
            int v101 = &v97[2400 * (v102 & 0x3FFFFFFFFFFFFELL)];
            int v103 = v96;
            uint64_t v104 = v102 & 0x3FFFFFFFFFFFFELL;
            v105 = *(_DWORD **)(v94 + 1064);
            do
            {
              _DWORD *v105 = v103;
              v105[600] = v103 + 1;
              v105 += 1200;
              v103 += 2;
              v104 -= 2;
            }
            while (v104);
            if (v102 == (v102 & 0x3FFFFFFFFFFFFELL)) {
              goto LABEL_83;
            }
          }
          else
          {
            int v100 = v96;
            int v101 = *(char **)(v94 + 1064);
          }
          do
          {
            *(_DWORD *)int v101 = v100++;
            v101 += 2400;
          }
          while (v101 != v98);
        }
LABEL_83:
        v96 -= 1775253149 * ((unint64_t)(v98 - v97) >> 5);
        v94 += 12328;
      }
      while (v94 != v95);
    }
    int v224 = sub_646BEC((uint64_t *)v279);
    if (!*(unsigned char *)(v5 + 1512)
      || (v106 = nullsub_1(v279), uint64_t v107 = *(void **)v106, v228 = *(void **)(v106 + 8), *(void **)v106 == v228))
    {
LABEL_94:
      uint64_t v7 = v231;
      unint64_t v108 = sub_646938(v279);
      if (v108)
      {
        for (uint64_t j = 0; j != v108; ++j)
        {
          uint64_t v110 = sub_6467E8(v279, j);
          uint64_t v111 = *(void *)(v110 + 1064);
          uint64_t v112 = *(void *)(v110 + 1072);
          if (v111 != v112)
          {
            unint64_t v113 = v112 - v111 - 2400;
            if (v113 >= 0x960)
            {
              unint64_t v115 = v113 / 0x960 + 1;
              uint64_t v114 = v111 + 2400 * (v115 & 0x3FFFFFFFFFFFFELL);
              uint64_t v116 = v115 & 0x3FFFFFFFFFFFFELL;
              do
              {
                *(void *)(v111 + 8) = j;
                *(void *)(v111 + 2408) = j;
                v111 += 4800;
                v116 -= 2;
              }
              while (v116);
              if (v115 == (v115 & 0x3FFFFFFFFFFFFELL)) {
                continue;
              }
            }
            else
            {
              uint64_t v114 = *(void *)(v110 + 1064);
            }
            do
            {
              *(void *)(v114 + 8) = j;
              v114 += 2400;
            }
            while (v114 != v112);
          }
        }
      }
      v142 = *(void **)v5;
      uint64_t v143 = nullsub_1(v279);
      v145 = *(int64x2_t **)v143;
      v144 = *(int64x2_t **)(v143 + 8);
      if (*(int64x2_t **)v143 != v144)
      {
        do
        {
          sub_5AE8B8(v145, v142, v229);
          v145 = (int64x2_t *)((char *)v145 + 12328);
        }
        while (v145 != v144);
      }
      sub_725A0((uint64_t)v240);
      sub_835BE8(*(void *)(v5 + 1776), (uint64_t)v279, v229);
      *(void *)(v5 + 1856) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1856));
      sub_725A0((uint64_t)v240);
      sub_7D3170(*(uint64_t **)(v5 + 1784), (uint64_t)v279);
      *(void *)(v5 + 1880) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1880));
      uint64_t v146 = sub_7CF97C(*(void *)(v5 + 1784));
      *(unsigned char *)(v5 + 2048) |= v147;
      *(unsigned char *)(v5 + 2049) |= v148;
      *(_DWORD *)(v5 + 2040) += v146;
      *(_DWORD *)(v5 + 2044) += HIDWORD(v146);
      if ((v222 & 1) == 0)
      {
        sub_725A0((uint64_t)v240);
        sub_670DFC(*(uint64_t **)(v5 + 1672), (uint64_t)v279);
        *(void *)(v5 + 1888) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                  + (double)*(unint64_t *)(v5 + 1888));
      }
      sub_8DAEA8((uint64_t)v279);
      nullsub_1(*(void *)(v5 + 1664));
      v149 = (uint64_t *)nullsub_1(v279);
      uint64_t v151 = *v149;
      uint64_t v152 = v149[1];
      if (*v149 != v152)
      {
        do
        {
          sub_731298(v5, v151, v150);
          v151 += 12328;
        }
        while (v151 != v152);
      }
      sub_4A7B00(*(unsigned char **)(v5 + 1592), (uint64_t)v279);
      if (*v223 == 2)
      {
        sub_725A0((uint64_t)v240);
        uint64_t v153 = *(void *)(v5 + 1712);
        char v243 = 0;
        char v244 = 0;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v257 = 0u;
        v254[0] = 0;
        *(void *)((char *)v254 + 5) = 0;
        long long v245 = 0u;
        long long v246 = 0u;
        long long v247 = 0u;
        long long v248 = 0u;
        long long v249 = 0u;
        long long v250 = 0u;
        long long v251 = 0u;
        long long v252 = 0u;
        int v253 = 0;
        uint64_t v258 = 0x3FF0000000000000;
        uint64_t v260 = 0;
        uint64_t v261 = 0;
        uint64_t v259 = 0;
        char v262 = 5;
        long long v263 = 0u;
        long long v264 = 0u;
        long long v265 = 0u;
        int v266 = 0x7FFFFFFF;
        uint64_t v271 = 0;
        uint64_t v272 = 0;
        long long v267 = 0u;
        long long v268 = 0u;
        long long v269 = 0u;
        memset(v270, 0, sizeof(v270));
        uint64_t v273 = -1;
        int v274 = 0x7FFFFFFF;
        uint64_t v275 = 0;
        uint64_t v276 = -1;
        int v277 = -1;
        char v278 = 0;
        sub_771B7C(v153, (uint64_t)v279, (uint64_t)__p);
        sub_4BCC2C((uint64_t)__p);
        v154 = (uint64_t *)nullsub_1(v279);
        uint64_t v155 = *v154;
        uint64_t v156 = v154[1];
        while (1)
        {
          if (v155 == v156)
          {
            *(void *)(v5 + 1872) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                      + (double)*(unint64_t *)(v5 + 1872));
            break;
          }
          uint64_t v157 = *(void *)(v155 + 7352);
          uint64_t v158 = *(void *)(v155 + 7360);
          if (v157 == v158) {
            goto LABEL_148;
          }
          while (!sub_35876C(v157, 0) || sub_3587DC(v157, 0))
          {
            v157 += 1120;
            if (v157 == v158)
            {
              uint64_t v159 = v158;
              goto LABEL_194;
            }
          }
          if (v157 == v158 || v157 + 1120 == v158)
          {
LABEL_148:
            uint64_t v159 = v157;
          }
          else
          {
            uint64_t v159 = v157;
            do
            {
              if (!sub_35876C(v157 + 1120, 0) || sub_3587DC(v157 + 1120, 0))
              {
                sub_301388((char **)v159, v157 + 1120);
                if (*(unsigned char *)(v157 + 1552))
                {
                  uint64_t v172 = *(void *)(v157 + 1544);
                  if (!*(unsigned char *)(v159 + 432)) {
                    *(unsigned char *)(v159 + 432) = 1;
                  }
                  *(void *)(v159 + 424) = v172;
                }
                else if (*(unsigned char *)(v159 + 432))
                {
                  *(unsigned char *)(v159 + 432) = 0;
                }
                v173 = (void **)(v159 + 440);
                if (*(char *)(v159 + 463) < 0) {
                  operator delete(*v173);
                }
                long long v174 = *(_OWORD *)(v157 + 1560);
                *(void *)(v159 + 456) = *(void *)(v157 + 1576);
                *(_OWORD *)v173 = v174;
                *(unsigned char *)(v157 + 1583) = 0;
                *(unsigned char *)(v157 + 1560) = 0;
                v175 = (void **)(v159 + 464);
                if (*(char *)(v159 + 487) < 0) {
                  operator delete(*v175);
                }
                long long v176 = *(_OWORD *)(v157 + 1584);
                *(void *)(v159 + 480) = *(void *)(v157 + 1600);
                *(_OWORD *)v175 = v176;
                *(unsigned char *)(v157 + 1607) = 0;
                *(unsigned char *)(v157 + 1584) = 0;
                *(void *)(v159 + 488) = *(void *)(v157 + 1608);
                v177 = (void **)(v159 + 496);
                if (*(char *)(v159 + 519) < 0) {
                  operator delete(*v177);
                }
                long long v178 = *(_OWORD *)(v157 + 1616);
                *(void *)(v159 + 512) = *(void *)(v157 + 1632);
                *(_OWORD *)v177 = v178;
                *(unsigned char *)(v157 + 1639) = 0;
                *(unsigned char *)(v157 + 1616) = 0;
                *(void *)(v159 + 520) = *(void *)(v157 + 1640);
                *(_DWORD *)(v159 + 528) = *(_DWORD *)(v157 + 1648);
                v179 = (void **)(v159 + 536);
                if (*(char *)(v159 + 559) < 0) {
                  operator delete(*v179);
                }
                long long v180 = *(_OWORD *)(v157 + 1656);
                *(void *)(v159 + 552) = *(void *)(v157 + 1672);
                *(_OWORD *)v179 = v180;
                *(unsigned char *)(v157 + 1679) = 0;
                *(unsigned char *)(v157 + 1656) = 0;
                v181 = (void **)(v159 + 560);
                if (*(char *)(v159 + 583) < 0) {
                  operator delete(*v181);
                }
                long long v182 = *(_OWORD *)(v157 + 1680);
                *(void *)(v159 + 576) = *(void *)(v157 + 1696);
                *(_OWORD *)v181 = v182;
                *(unsigned char *)(v157 + 1703) = 0;
                *(unsigned char *)(v157 + 1680) = 0;
                *(_DWORD *)(v159 + 584) = *(_DWORD *)(v157 + 1704);
                v183 = (void **)(v159 + 592);
                if (*(char *)(v159 + 615) < 0) {
                  operator delete(*v183);
                }
                long long v184 = *(_OWORD *)(v157 + 1712);
                *(void *)(v159 + 608) = *(void *)(v157 + 1728);
                *(_OWORD *)v183 = v184;
                *(unsigned char *)(v157 + 1735) = 0;
                *(unsigned char *)(v157 + 1712) = 0;
                char v185 = *(unsigned char *)(v157 + 1740);
                if (v185)
                {
                  *(_DWORD *)(v159 + 616) = *(_DWORD *)(v157 + 1736);
                  char v185 = 1;
                }
                *(unsigned char *)(v159 + 620) = v185;
                if (*(unsigned char *)(v157 + 1752))
                {
                  uint64_t v186 = *(void *)(v157 + 1744);
                  if (!*(unsigned char *)(v159 + 632)) {
                    *(unsigned char *)(v159 + 632) = 1;
                  }
                  *(void *)(v159 + 624) = v186;
                }
                else if (*(unsigned char *)(v159 + 632))
                {
                  *(unsigned char *)(v159 + 632) = 0;
                }
                v187 = (void **)(v159 + 648);
                if (*(char *)(v159 + 671) < 0) {
                  operator delete(*v187);
                }
                long long v188 = *(_OWORD *)(v157 + 1768);
                *(void *)(v159 + 664) = *(void *)(v157 + 1784);
                *(_OWORD *)v187 = v188;
                *(unsigned char *)(v157 + 1791) = 0;
                *(unsigned char *)(v157 + 1768) = 0;
                *(_WORD *)(v159 + 672) = *(_WORD *)(v157 + 1792);
                uint64_t v189 = v159 + 680;
                if (*(unsigned char *)(v157 + 2232))
                {
                  if (*(unsigned char *)(v159 + 1112))
                  {
                    sub_4C2350(v189, v157 + 1800);
                  }
                  else
                  {
                    *(unsigned char *)(v159 + 680) = *(unsigned char *)(v157 + 1800);
                    *(void *)(v159 + 688) = 0;
                    *(_OWORD *)(v159 + 696) = 0u;
                    *(_OWORD *)(v159 + 688) = *(_OWORD *)(v157 + 1808);
                    *(void *)(v159 + 704) = *(void *)(v157 + 1824);
                    *(void *)(v157 + 1824) = 0;
                    *(_OWORD *)(v157 + 1808) = 0u;
                    *(void *)(v159 + 728) = 0;
                    *(_OWORD *)(v159 + 712) = 0u;
                    *(void *)(v159 + 712) = *(void *)(v157 + 1832);
                    *(void *)(v159 + 720) = *(void *)(v157 + 1840);
                    *(void *)(v159 + 728) = *(void *)(v157 + 1848);
                    *(void *)(v157 + 1848) = 0;
                    *(_OWORD *)(v157 + 1832) = 0u;
                    *(_DWORD *)(v159 + 736) = *(_DWORD *)(v157 + 1856);
                    *(_OWORD *)(v159 + 752) = 0u;
                    *(void *)(v159 + 744) = 0;
                    *(void *)(v159 + 744) = *(void *)(v157 + 1864);
                    *(void *)(v159 + 752) = *(void *)(v157 + 1872);
                    *(void *)(v159 + 760) = *(void *)(v157 + 1880);
                    *(void *)(v157 + 1880) = 0;
                    *(_OWORD *)(v157 + 1864) = 0u;
                    *(void *)(v159 + 784) = 0;
                    *(_OWORD *)(v159 + 768) = 0u;
                    *(_OWORD *)(v159 + 768) = *(_OWORD *)(v157 + 1888);
                    *(void *)(v159 + 784) = *(void *)(v157 + 1904);
                    *(void *)(v157 + 1904) = 0;
                    *(_OWORD *)(v157 + 1888) = 0u;
                    long long v160 = *(_OWORD *)(v157 + 1912);
                    *(void *)(v159 + 808) = *(void *)(v157 + 1928);
                    *(_OWORD *)(v159 + 792) = v160;
                    *(void *)(v157 + 1912) = 0;
                    *(_OWORD *)(v157 + 1920) = 0u;
                    long long v161 = *(_OWORD *)(v157 + 1952);
                    *(_OWORD *)(v159 + 816) = *(_OWORD *)(v157 + 1936);
                    *(_OWORD *)(v159 + 832) = v161;
                    long long v162 = *(_OWORD *)(v157 + 1968);
                    *(void *)(v159 + 864) = *(void *)(v157 + 1984);
                    *(_OWORD *)(v159 + 848) = v162;
                    *(_OWORD *)(v157 + 1976) = 0u;
                    *(void *)(v157 + 1968) = 0;
                    long long v163 = *(_OWORD *)(v157 + 1992);
                    *(void *)(v159 + 888) = *(void *)(v157 + 2008);
                    *(_OWORD *)(v159 + 872) = v163;
                    *(void *)(v157 + 2008) = 0;
                    *(_OWORD *)(v157 + 1992) = 0u;
                    long long v164 = *(_OWORD *)(v157 + 2016);
                    *(void *)(v159 + 912) = *(void *)(v157 + 2032);
                    *(_OWORD *)(v159 + 896) = v164;
                    *(void *)(v157 + 2032) = 0;
                    *(_OWORD *)(v157 + 2016) = 0u;
                    *(unsigned char *)(v159 + 920) = *(unsigned char *)(v157 + 2040);
                    long long v165 = *(_OWORD *)(v157 + 2048);
                    *(void *)(v159 + 944) = *(void *)(v157 + 2064);
                    *(_OWORD *)(v159 + 928) = v165;
                    *(_OWORD *)(v157 + 2056) = 0u;
                    *(void *)(v157 + 2048) = 0;
                    long long v166 = *(_OWORD *)(v157 + 2072);
                    *(void *)(v159 + 968) = *(void *)(v157 + 2088);
                    *(_OWORD *)(v159 + 952) = v166;
                    *(_OWORD *)(v157 + 2080) = 0u;
                    *(void *)(v157 + 2072) = 0;
                    long long v167 = *(_OWORD *)(v157 + 2096);
                    *(void *)(v159 + 992) = *(void *)(v157 + 2112);
                    *(_OWORD *)(v159 + 976) = v167;
                    *(_OWORD *)(v157 + 2104) = 0u;
                    *(void *)(v157 + 2096) = 0;
                    *(unsigned char *)(v159 + 1000) = *(unsigned char *)(v157 + 2120);
                    long long v168 = *(_OWORD *)(v157 + 2128);
                    *(void *)(v159 + 1024) = *(void *)(v157 + 2144);
                    *(_OWORD *)(v159 + 1008) = v168;
                    *(_OWORD *)(v157 + 2136) = 0u;
                    *(void *)(v157 + 2128) = 0;
                    long long v169 = *(_OWORD *)(v157 + 2152);
                    *(void *)(v159 + 1048) = *(void *)(v157 + 2168);
                    *(_OWORD *)(v159 + 1032) = v169;
                    *(_OWORD *)(v157 + 2160) = 0u;
                    *(void *)(v157 + 2152) = 0;
                    long long v170 = *(_OWORD *)(v157 + 2176);
                    *(void *)(v159 + 1072) = *(void *)(v157 + 2192);
                    *(_OWORD *)(v159 + 1056) = v170;
                    *(_OWORD *)(v157 + 2184) = 0u;
                    *(void *)(v157 + 2176) = 0;
                    *(_WORD *)(v159 + 1080) = *(_WORD *)(v157 + 2200);
                    *(_WORD *)(v159 + 1082) = *(_WORD *)(v157 + 2202);
                    *(void *)(v159 + 1088) = 0;
                    *(_OWORD *)(v159 + 1096) = 0u;
                    *(_OWORD *)(v159 + 1088) = *(_OWORD *)(v157 + 2208);
                    *(void *)(v159 + 1104) = *(void *)(v157 + 2224);
                    *(void *)(v157 + 2224) = 0;
                    *(_OWORD *)(v157 + 2208) = 0u;
                    *(unsigned char *)(v159 + 1112) = 1;
                  }
                }
                else if (*(unsigned char *)(v159 + 1112))
                {
                  sub_3A6CB8(v189);
                  *(unsigned char *)(v159 + 1112) = 0;
                }
                v159 += 1120;
              }
              uint64_t v171 = v157 + 2240;
              v157 += 1120;
            }
            while (v171 != v158);
          }
LABEL_194:
          uint64_t v190 = *(void *)(v155 + 7360);
          if (v159 == v190) {
            goto LABEL_145;
          }
          uint64_t v191 = 0;
          do
          {
            uint64_t v192 = v190 + v191;
            if (*(unsigned char *)(v190 + v191 - 8))
            {
              sub_3A6CB8(v192 - 440);
              *(unsigned char *)(v192 - 8) = 0;
            }
            *(void *)(v192 - 480) = off_2438EC8;
            if (*(char *)(v192 - 449) < 0) {
              operator delete(*(void **)(v190 + v191 - 472));
            }
            uint64_t v193 = v190 + v191;
            v194 = (unsigned char *)(v190 + v191 - 488);
            if (*v194) {
              unsigned char *v194 = 0;
            }
            if (*(char *)(v193 - 505) < 0)
            {
              operator delete(*(void **)(v190 + v191 - 528));
              uint64_t v195 = v190 + v191;
              if ((*(char *)(v190 + v191 - 537) & 0x80000000) == 0)
              {
LABEL_204:
                if ((*(char *)(v195 - 561) & 0x80000000) == 0) {
                  goto LABEL_205;
                }
                goto LABEL_214;
              }
            }
            else
            {
              uint64_t v195 = v190 + v191;
              if ((*(char *)(v190 + v191 - 537) & 0x80000000) == 0) {
                goto LABEL_204;
              }
            }
            operator delete(*(void **)(v195 - 560));
            if ((*(char *)(v195 - 561) & 0x80000000) == 0)
            {
LABEL_205:
              uint64_t v196 = v190 + v191;
              if ((*(char *)(v190 + v191 - 601) & 0x80000000) == 0) {
                goto LABEL_206;
              }
              goto LABEL_215;
            }
LABEL_214:
            operator delete(*(void **)(v190 + v191 - 584));
            uint64_t v196 = v190 + v191;
            if ((*(char *)(v190 + v191 - 601) & 0x80000000) == 0)
            {
LABEL_206:
              if ((*(char *)(v196 - 633) & 0x80000000) == 0) {
                goto LABEL_207;
              }
              goto LABEL_216;
            }
LABEL_215:
            operator delete(*(void **)(v196 - 624));
            if ((*(char *)(v196 - 633) & 0x80000000) == 0)
            {
LABEL_207:
              uint64_t v197 = v190 + v191;
              uint64_t v7 = v231;
              if ((*(char *)(v190 + v191 - 657) & 0x80000000) == 0) {
                goto LABEL_208;
              }
              goto LABEL_217;
            }
LABEL_216:
            operator delete(*(void **)(v193 - 656));
            uint64_t v197 = v190 + v191;
            uint64_t v7 = v231;
            if ((*(char *)(v190 + v191 - 657) & 0x80000000) == 0)
            {
LABEL_208:
              v198 = (unsigned char *)(v197 - 688);
              if (!*(unsigned char *)(v197 - 688)) {
                goto LABEL_210;
              }
LABEL_209:
              unsigned char *v198 = 0;
              goto LABEL_210;
            }
LABEL_217:
            operator delete(*(void **)(v197 - 680));
            v198 = (unsigned char *)(v197 - 688);
            if (*(unsigned char *)(v197 - 688)) {
              goto LABEL_209;
            }
LABEL_210:
            sub_29D95C(v192 - 1120);
            v191 -= 1120;
            uint64_t v5 = v232;
          }
          while (v190 + v191 != v159);
          *(void *)(v155 + 7360) = v159;
LABEL_145:
          v155 += 12328;
        }
      }
      sub_725A0((uint64_t)v240);
      sub_70771C(*(void *)(v5 + 1696), (uint64_t)v279);
      *(void *)(v5 + 1896) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1896));
      sub_725A0((uint64_t)v240);
      sub_518F98(*(void *)(v5 + 1608), (uint64_t)v279);
      *(void *)(v5 + 1912) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1912));
      sub_725A0((uint64_t)v240);
      sub_5C19A8(*(void *)(v5 + 1632), (uint64_t)v279);
      *(void *)(v5 + 1920) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1920));
      sub_725A0((uint64_t)v240);
      nullsub_1(*(void *)(v5 + 1736));
      *(void *)(v5 + 1936) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1936));
      sub_725A0((uint64_t)v240);
      sub_6F1BE0(*(void *)(v5 + 1688), v279);
      *(void *)(v5 + 2016) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 2016));
      sub_725A0((uint64_t)v240);
      sub_53CD54(*(void *)(v5 + 1624), v230, v279);
      *(void *)(v5 + 1904) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1904));
      sub_725A0((uint64_t)v240);
      sub_5D3B00(*(void *)(v5 + 1648), (uint64_t)v279);
      *(void *)(v5 + 1928) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1928));
      sub_725A0((uint64_t)v240);
      sub_70C19C(*(void *)(v5 + 1704), (uint64_t *)v279);
      *(void *)(v5 + 1944) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1944));
      sub_725A0((uint64_t)v240);
      sub_4AC594(*(void *)(v5 + 1600), v221, v279);
      *(void *)(v5 + 1992) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                + (double)*(unint64_t *)(v5 + 1992));
      sub_725A0((uint64_t)v240);
      sub_7720A4(*(uint64_t **)(v5 + 1712), (uint64_t)v279, (uint64_t *)__p);
      sub_648B6C((uint64_t)v279, (uint64_t *)__p);
      v199 = (char *)__p[0];
      if (!__p[0]) {
        goto LABEL_247;
      }
      v200 = (char *)__p[1];
      v201 = __p[0];
      if (__p[1] == __p[0]) {
        goto LABEL_246;
      }
      uint64_t v202 = 0;
      while (1)
      {
        v203 = &v200[v202];
        if (v200[v202 - 8])
        {
          sub_3A6CB8((uint64_t)(v203 - 440));
          *(v203 - 8) = 0;
        }
        *((void *)v203 - 60) = off_2438EC8;
        if (*(v203 - 449) < 0) {
          operator delete(*(void **)&v200[v202 - 472]);
        }
        v204 = (void **)&v200[v202];
        v205 = &v200[v202 - 488];
        if (*v205) {
          char *v205 = 0;
        }
        if (*((char *)v204 - 505) < 0)
        {
          operator delete(*(void **)&v200[v202 - 528]);
          v206 = (void **)&v200[v202];
          if ((v200[v202 - 537] & 0x80000000) == 0)
          {
LABEL_231:
            if ((*((char *)v206 - 561) & 0x80000000) == 0) {
              goto LABEL_232;
            }
            goto LABEL_241;
          }
        }
        else
        {
          v206 = (void **)&v200[v202];
          if ((v200[v202 - 537] & 0x80000000) == 0) {
            goto LABEL_231;
          }
        }
        operator delete(*(v206 - 70));
        if ((*((char *)v206 - 561) & 0x80000000) == 0)
        {
LABEL_232:
          v207 = (void **)&v200[v202];
          if ((v200[v202 - 601] & 0x80000000) == 0) {
            goto LABEL_233;
          }
          goto LABEL_242;
        }
LABEL_241:
        operator delete(*(void **)&v200[v202 - 584]);
        v207 = (void **)&v200[v202];
        if ((v200[v202 - 601] & 0x80000000) == 0)
        {
LABEL_233:
          if ((*((char *)v207 - 633) & 0x80000000) == 0) {
            goto LABEL_234;
          }
          goto LABEL_243;
        }
LABEL_242:
        operator delete(*(v207 - 78));
        if ((*((char *)v207 - 633) & 0x80000000) == 0)
        {
LABEL_234:
          v208 = (void **)&v200[v202];
          if (v200[v202 - 657] < 0) {
            goto LABEL_244;
          }
          goto LABEL_235;
        }
LABEL_243:
        operator delete(*(v204 - 82));
        v208 = (void **)&v200[v202];
        if (v200[v202 - 657] < 0)
        {
LABEL_244:
          operator delete(*(v208 - 85));
          v209 = (char *)(v208 - 86);
          if (!*((unsigned char *)v208 - 688)) {
            goto LABEL_237;
          }
LABEL_236:
          char *v209 = 0;
          goto LABEL_237;
        }
LABEL_235:
        v209 = (char *)(v208 - 86);
        if (*((unsigned char *)v208 - 688)) {
          goto LABEL_236;
        }
LABEL_237:
        sub_29D95C((uint64_t)(v203 - 1120));
        v202 -= 1120;
        uint64_t v5 = v232;
        if (&v200[v202] == v199)
        {
          v201 = __p[0];
LABEL_246:
          __p[1] = v199;
          operator delete(v201);
LABEL_247:
          *(void *)(v5 + 1872) = (unint64_t)(round(sub_72688((uint64_t)v240))
                                                    + (double)*(unint64_t *)(v5 + 1872));
          v210 = (void *)nullsub_1(v279);
          if (*v210 != v210[1])
          {
            uint64_t v211 = *(void *)nullsub_1(v279);
            int v212 = sub_46CF04(v211);
            int v213 = sub_46E120((unsigned int *)v211, 0);
            int v214 = sub_46E120((unsigned int *)v211, 1);
            uint64_t v215 = *(void *)(v211 + 504);
            v233 = (void *)0x8000000080000000;
            long long v234 = xmmword_20E8160;
            LODWORD(v234) = 0x7FFFFFFF;
            sub_EE731C((uint64_t)v235, v212, v213, v214, v215, (int *)&v233, (uint64_t)__p);
            sub_6478F8((uint64_t)v279, (__n128 *)__p);
          }
          uint64_t v216 = sub_45FE5C((uint64_t)v230);
          uint64_t v217 = *(unsigned __int8 *)(v216 + 23);
          if ((v217 & 0x80u) != 0) {
            uint64_t v217 = *(void *)(v216 + 8);
          }
          if (v217
            && (sub_45FE5C((uint64_t)v230),
                std::operator+<char>(),
                sub_5F3D48((uint64_t)__p, (uint64_t)&v233),
                sub_647AEC(v279, (uint64_t)__p),
                sub_4D4B58((uint64_t)__p),
                SHIBYTE(v234) < 0))
          {
            operator delete(v233);
            unint64_t v218 = *(void *)(v7 + 8);
            if (v218 < *(void *)(v7 + 16)) {
              goto LABEL_10;
            }
LABEL_254:
            uint64_t v11 = sub_73B854((uint64_t *)v7, (uint64_t)v279);
          }
          else
          {
            unint64_t v218 = *(void *)(v7 + 8);
            if (v218 >= *(void *)(v7 + 16)) {
              goto LABEL_254;
            }
LABEL_10:
            uint64_t v11 = sub_73AF14(v218, (uint64_t)v279) + 7560;
          }
          v225 += v224;
          *(void *)(v7 + 8) = v11;
          sub_574D4C((uint64_t)v279);
          unint64_t v10 = v230 + 15;
          if (v230 + 15 == v220) {
            goto LABEL_258;
          }
          goto LABEL_12;
        }
      }
    }
    while (1)
    {
      if (sub_46C760(v107))
      {
        v117 = *(int **)(sub_40EFE8((uint64_t)v107) + 8);
        long long v118 = (unsigned __int16 *)((char *)v117 - *v117);
        if (*v118 >= 0x11u && (uint64_t v119 = v118[8]) != 0) {
          int v120 = (*(unsigned __int16 *)((char *)v117 + v119) >> 3) & 1;
        }
        else {
          LOBYTE(v120) = 0;
        }
        unint64_t v121 = sub_46C760(v107);
        if (v121) {
          break;
        }
      }
LABEL_105:
      v107 += 1541;
      uint64_t v5 = v232;
      if (v107 == v228) {
        goto LABEL_94;
      }
    }
    uint64_t v122 = 0;
    unint64_t v123 = 0;
    v124 = (void **)(v107 + 1507);
    while (1)
    {
      v125 = *(int **)(sub_46C8EC(v107, v123) + 8);
      v127 = (unsigned __int16 *)((char *)v125 - *v125);
      if (*v127 >= 0x11u && (uint64_t v128 = v127[8]) != 0)
      {
        BOOL v129 = (*(_WORD *)((unsigned char *)v125 + v128) & 8) == 0;
        if ((((v120 == 0) ^ v129) & 1) == 0)
        {
          LOBYTE(v120) = v129;
          v130 = (unsigned char *)v107[1508];
          unint64_t v131 = v107[1509];
          if ((unint64_t)v130 >= v131) {
            goto LABEL_120;
          }
          goto LABEL_117;
        }
      }
      else if (!(_BYTE)v120)
      {
        LOBYTE(v120) = 1;
        v130 = (unsigned char *)v107[1508];
        unint64_t v131 = v107[1509];
        if ((unint64_t)v130 >= v131)
        {
LABEL_120:
          v133 = *v124;
          uint64_t v134 = (v130 - (unsigned char *)*v124) >> 4;
          unint64_t v135 = v134 + 1;
          if ((unint64_t)(v134 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v136 = v131 - (void)v133;
          if (v136 >> 3 > v135) {
            unint64_t v135 = v136 >> 3;
          }
          if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v137 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v137 = v135;
          }
          if (v137 >> 60) {
            sub_188D718();
          }
          v138 = (char *)operator new(16 * v137);
          v139 = &v138[16 * v134];
          *(void *)v139 = v122;
          v139[8] = v120;
          if (v130 == v133)
          {
            v107[1507] = v139;
            v132 = v139 + 16;
            v107[1508] = v139 + 16;
            v107[1509] = &v138[16 * v137];
            if (v133) {
              goto LABEL_131;
            }
          }
          else
          {
            v140 = &v138[16 * v134];
            do
            {
              v141 = v140 - 16;
              long long v126 = *((_OWORD *)v130 - 1);
              *((_OWORD *)v140 - 1) = v126;
              v130 -= 16;
              v140 -= 16;
            }
            while (v130 != v133);
            v107[1507] = v141;
            v132 = v139 + 16;
            v107[1508] = v139 + 16;
            v107[1509] = &v138[16 * v137];
            if (v133) {
LABEL_131:
            }
              operator delete(v133);
          }
LABEL_132:
          v107[1508] = v132;
          goto LABEL_133;
        }
LABEL_117:
        *(void *)v130 = v122;
        v130[8] = v120;
        v132 = v130 + 16;
        goto LABEL_132;
      }
LABEL_133:
      v122 += sub_46CCC8(v107, v123++, *(double *)&v126);
      if (v123 == v121) {
        goto LABEL_105;
      }
    }
  }
  int v225 = 0;
LABEL_258:
  *(_DWORD *)(v5 + 2036) = 0;
  *(_DWORD *)(v5 + 2032) = v225;
  sub_725A0((uint64_t)v240);
  sub_5BEE74(*(void *)(v5 + 1632), (uint64_t *)v7);
  *(void *)(v5 + 1920) = (unint64_t)(round(sub_72688((uint64_t)v240)) + (double)*(unint64_t *)(v5 + 1920));
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v236)
  {
    v237 = v236;
    operator delete(v236);
  }
}

void sub_72F7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
}

void sub_72F7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_5ABC24(&a35);
  sub_574530(v35);
  _Unwind_Resume(a1);
}

void sub_72F8B4()
{
}

void sub_72F8E8()
{
}

void sub_72F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_574D4C((uint64_t)&STACK[0x418]);
  sub_5ABC24(&a35);
  sub_574530(v35);
  _Unwind_Resume(a1);
}

void sub_72F930(uint64_t a1, char ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return;
  }
  do
  {
    uint64_t v5 = sub_647FB0(v3);
    if (v5) {
      break;
    }
    v3 += 945;
  }
  while (v3 != v2);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    return;
  }
  do
  {
    uint64_t v107 = sub_647E2C(v7);
    if (v107) {
      break;
    }
    v7 += 945;
  }
  while (v7 != v6);
  uint64_t v9 = (uint64_t)*a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8) {
    return;
  }
  do
  {
    unint64_t v10 = (uint64_t *)sub_648B60(v9);
    uint64_t v11 = v10[1];
    v9 += 7560;
  }
  while (v11 == *v10 && v9 != (void)v8);
  char v13 = (uint64_t *)*a2;
  v105 = (uint64_t *)a2[1];
  if (*a2 == (char **)v105) {
    return;
  }
  if (v5) {
    int v14 = 2;
  }
  else {
    int v14 = 1;
  }
  if (v107) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
  int v100 = v15;
  int v101 = v14;
  if (v11 == *v10) {
    int v16 = 1;
  }
  else {
    int v16 = 2;
  }
  int v102 = v16;
  uint64_t v103 = *v10;
  uint64_t v104 = v10[1];
  while (2)
  {
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_268;
    }
    sub_64809C(v13, (uint64_t *)&__p);
    sub_647F18(v13, (uint64_t *)&v113);
    v117 = 0;
    long long v118 = 0uLL;
    uint64_t v18 = (char *)__p;
    uint64_t v19 = (char *)v116;
    if (__p == (void *)v116)
    {
      unint64_t v108 = 0;
      uint64_t v110 = 0;
      int v20 = v101;
      goto LABEL_78;
    }
    do
    {
      while (1)
      {
        uint64_t v21 = v118;
        if ((unint64_t)v118 >= *((void *)&v118 + 1)) {
          break;
        }
        *(_DWORD *)(v118 + 1120) = -1;
        uint64_t v22 = v21 + 1128;
        *(void *)&long long v118 = v21 + 1128;
        uint64_t v23 = v21;
        int v24 = *(_DWORD *)(v21 + 1120);
        if (v24 != 1) {
          goto LABEL_34;
        }
LABEL_40:
        if (*(unsigned char *)(v22 - 16))
        {
          sub_3A6CB8(v22 - 448);
          *(unsigned char *)(v22 - 16) = 0;
        }
        *(void *)(v23 + 640) = off_2438EC8;
        if (*(char *)(v23 + 671) < 0) {
          operator delete(*(void **)(v22 - 480));
        }
        if (*(unsigned char *)(v22 - 496)) {
          *(unsigned char *)(v22 - 496) = 0;
        }
        if (*(char *)(v22 - 513) < 0)
        {
          operator delete(*(void **)(v22 - 536));
          if ((*(char *)(v22 - 545) & 0x80000000) == 0)
          {
LABEL_48:
            if ((*(char *)(v22 - 569) & 0x80000000) == 0) {
              goto LABEL_49;
            }
            goto LABEL_56;
          }
        }
        else if ((*(char *)(v22 - 545) & 0x80000000) == 0)
        {
          goto LABEL_48;
        }
        operator delete(*(void **)(v22 - 568));
        if ((*(char *)(v22 - 569) & 0x80000000) == 0)
        {
LABEL_49:
          if ((*(char *)(v22 - 609) & 0x80000000) == 0) {
            goto LABEL_50;
          }
          goto LABEL_57;
        }
LABEL_56:
        operator delete(*(void **)(v22 - 592));
        if ((*(char *)(v22 - 609) & 0x80000000) == 0)
        {
LABEL_50:
          if ((*(char *)(v22 - 641) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_58;
        }
LABEL_57:
        operator delete(*(void **)(v22 - 632));
        if ((*(char *)(v22 - 641) & 0x80000000) == 0)
        {
LABEL_51:
          if ((*(char *)(v22 - 665) & 0x80000000) == 0) {
            goto LABEL_52;
          }
          goto LABEL_59;
        }
LABEL_58:
        operator delete(*(void **)(v22 - 664));
        if ((*(char *)(v22 - 665) & 0x80000000) == 0)
        {
LABEL_52:
          uint64_t v26 = (unsigned char *)(v22 - 696);
          if (!*(unsigned char *)(v22 - 696)) {
            goto LABEL_30;
          }
LABEL_60:
          unsigned char *v26 = 0;
          goto LABEL_30;
        }
LABEL_59:
        operator delete(*(void **)(v22 - 688));
        uint64_t v26 = (unsigned char *)(v22 - 696);
        if (*(unsigned char *)(v22 - 696)) {
          goto LABEL_60;
        }
LABEL_30:
        sub_29D95C(v23);
LABEL_31:
        sub_4BD34C(v23, (uint64_t)v18);
        *(_DWORD *)(v22 - 8) = 0;
        v18 += 168;
        if (v18 == v19) {
          goto LABEL_61;
        }
      }
      uint64_t v22 = sub_737FA0((uint64_t *)&v117);
      *(void *)&long long v118 = v22;
      uint64_t v23 = v22 - 1128;
      int v24 = *(_DWORD *)(v22 - 8);
      if (v24 == 1) {
        goto LABEL_40;
      }
LABEL_34:
      if (v24) {
        goto LABEL_31;
      }
      *(void *)uint64_t v23 = *(void *)v18;
      std::string::operator=((std::string *)(v22 - 1120), (const std::string *)(v18 + 8));
      long long v25 = *((_OWORD *)v18 + 2);
      *(_DWORD *)(v23 + 48) = *((_DWORD *)v18 + 12);
      *(_OWORD *)(v23 + 32) = v25;
      std::string::operator=((std::string *)(v22 - 1072), (const std::string *)(v18 + 56));
      std::string::operator=((std::string *)(v22 - 1048), (const std::string *)(v18 + 80));
      if (v18 != (char *)v23) {
        sub_69208(v22 - 1024, *((std::string **)v18 + 13), *((std::string **)v18 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v18 + 14) - *((void *)v18 + 13)) >> 3));
      }
      *(_WORD *)(v22 - 1000) = *((_WORD *)v18 + 64);
      std::string::operator=((std::string *)(v22 - 992), (const std::string *)(v18 + 136));
      *(_WORD *)(v22 - 968) = *((_WORD *)v18 + 80);
      *(_DWORD *)(v22 - 8) = 0;
      v18 += 168;
    }
    while (v18 != v19);
LABEL_61:
    uint64_t v27 = (uint64_t)v117;
    unint64_t v108 = v117;
    uint64_t v110 = (void *)v118;
    if (v5)
    {
      uint64_t v28 = v118;
      if ((void *)v118 == v117)
      {
        int v20 = 2;
      }
      else
      {
        uint64_t v29 = (uint64_t)v117;
        do
        {
          if (sub_73B9B8((uint64_t)&v117, v29, 0) && sub_73B9B8((uint64_t)&v117, v29, 1))
          {
            int v20 = 6;
            goto LABEL_78;
          }
          v29 += 1128;
        }
        while (v29 != v28);
        uint64_t v30 = v27;
        do
        {
          if (sub_73B9B8((uint64_t)&v117, v30, 1))
          {
            int v20 = 4;
            goto LABEL_78;
          }
          v30 += 1128;
        }
        while (v30 != v28);
        while (!sub_73B9B8((uint64_t)&v117, v27, 0))
        {
          v27 += 1128;
          if (v27 == v28)
          {
            int v20 = 7;
            goto LABEL_78;
          }
        }
        int v20 = 5;
      }
    }
    else
    {
      int v20 = 1;
    }
LABEL_78:
    int v112 = v20;
    sub_647DD8(v13, &v112);
    uint64_t v31 = v108;
    if (v108)
    {
      uint64_t v32 = (uint64_t)v110;
      if (v110 == v108)
      {
LABEL_124:
        operator delete(v31);
        goto LABEL_125;
      }
      while (2)
      {
        uint64_t v33 = v32;
        v32 -= 1128;
        int v34 = *(_DWORD *)(v33 - 8);
        if (v34 != 1)
        {
          if (!v34)
          {
            if (*(char *)(v33 - 969) < 0)
            {
              operator delete(*(void **)(v33 - 992));
              unint64_t v35 = (void **)(v33 - 1024);
              unint64_t v36 = *(void ***)(v33 - 1024);
              if (v36) {
                goto LABEL_106;
              }
LABEL_87:
              if ((*(char *)(v33 - 1025) & 0x80000000) == 0) {
                goto LABEL_88;
              }
LABEL_113:
              operator delete(*(void **)(v33 - 1048));
              if (*(char *)(v33 - 1049) < 0) {
                goto LABEL_114;
              }
LABEL_89:
              if (*(char *)(v33 - 1097) < 0) {
LABEL_115:
              }
                operator delete(*(void **)(v33 - 1120));
            }
            else
            {
              unint64_t v35 = (void **)(v33 - 1024);
              unint64_t v36 = *(void ***)(v33 - 1024);
              if (!v36) {
                goto LABEL_87;
              }
LABEL_106:
              unint64_t v38 = *(void ***)(v33 - 1016);
              unint64_t v39 = v36;
              if (v38 != v36)
              {
                do
                {
                  if (*((char *)v38 - 1) < 0) {
                    operator delete(*(v38 - 3));
                  }
                  v38 -= 3;
                }
                while (v38 != v36);
                unint64_t v39 = *v35;
              }
              *(void *)(v33 - 1016) = v36;
              operator delete(v39);
              if (*(char *)(v33 - 1025) < 0) {
                goto LABEL_113;
              }
LABEL_88:
              if ((*(char *)(v33 - 1049) & 0x80000000) == 0) {
                goto LABEL_89;
              }
LABEL_114:
              operator delete(*(void **)(v33 - 1072));
              if (*(char *)(v33 - 1097) < 0) {
                goto LABEL_115;
              }
            }
          }
LABEL_82:
          if ((void *)v32 == v108)
          {
            uint64_t v31 = v108;
            goto LABEL_124;
          }
          continue;
        }
        break;
      }
      if (*(unsigned char *)(v33 - 16))
      {
        sub_3A6CB8(v33 - 448);
        *(unsigned char *)(v33 - 16) = 0;
      }
      *(void *)(v32 + 640) = off_2438EC8;
      if (*(char *)(v32 + 671) < 0) {
        operator delete(*(void **)(v33 - 480));
      }
      if (*(unsigned char *)(v33 - 496)) {
        *(unsigned char *)(v33 - 496) = 0;
      }
      if (*(char *)(v33 - 513) < 0)
      {
        operator delete(*(void **)(v33 - 536));
        if (*(char *)(v33 - 545) < 0) {
          goto LABEL_117;
        }
LABEL_99:
        if ((*(char *)(v33 - 569) & 0x80000000) == 0) {
          goto LABEL_100;
        }
LABEL_118:
        operator delete(*(void **)(v33 - 592));
        if (*(char *)(v33 - 609) < 0) {
          goto LABEL_119;
        }
LABEL_101:
        if ((*(char *)(v33 - 641) & 0x80000000) == 0) {
          goto LABEL_102;
        }
LABEL_120:
        operator delete(*(void **)(v33 - 664));
        if (*(char *)(v33 - 665) < 0) {
          goto LABEL_121;
        }
LABEL_103:
        uint64_t v37 = (unsigned char *)(v33 - 696);
        if (*(unsigned char *)(v33 - 696)) {
LABEL_122:
        }
          unsigned char *v37 = 0;
      }
      else
      {
        if ((*(char *)(v33 - 545) & 0x80000000) == 0) {
          goto LABEL_99;
        }
LABEL_117:
        operator delete(*(void **)(v33 - 568));
        if (*(char *)(v33 - 569) < 0) {
          goto LABEL_118;
        }
LABEL_100:
        if ((*(char *)(v33 - 609) & 0x80000000) == 0) {
          goto LABEL_101;
        }
LABEL_119:
        operator delete(*(void **)(v33 - 632));
        if (*(char *)(v33 - 641) < 0) {
          goto LABEL_120;
        }
LABEL_102:
        if ((*(char *)(v33 - 665) & 0x80000000) == 0) {
          goto LABEL_103;
        }
LABEL_121:
        operator delete(*(void **)(v33 - 688));
        uint64_t v37 = (unsigned char *)(v33 - 696);
        if (*(unsigned char *)(v33 - 696)) {
          goto LABEL_122;
        }
      }
      sub_29D95C(v32);
      goto LABEL_82;
    }
LABEL_125:
    v117 = 0;
    long long v118 = 0uLL;
    unint64_t v40 = (char *)v113;
    char v41 = (char *)v114;
    if (v113 == v114)
    {
      v109 = 0;
      uint64_t v111 = 0;
      int v42 = v100;
      goto LABEL_175;
    }
    while (2)
    {
      while (2)
      {
        uint64_t v43 = v118;
        if ((unint64_t)v118 < *((void *)&v118 + 1))
        {
          *(_DWORD *)(v118 + 1120) = -1;
          uint64_t v44 = v43 + 1128;
          *(void *)&long long v118 = v43 + 1128;
          uint64_t v45 = v43;
          int v46 = *(_DWORD *)(v43 + 1120);
          if (v46 != 1) {
            goto LABEL_131;
          }
LABEL_137:
          if (*(unsigned char *)(v44 - 16))
          {
            sub_3A6CB8(v44 - 448);
            *(unsigned char *)(v44 - 16) = 0;
          }
          *(void *)(v45 + 640) = off_2438EC8;
          if (*(char *)(v45 + 671) < 0) {
            operator delete(*(void **)(v44 - 480));
          }
          if (*(unsigned char *)(v44 - 496)) {
            *(unsigned char *)(v44 - 496) = 0;
          }
          if (*(char *)(v44 - 513) < 0)
          {
            operator delete(*(void **)(v44 - 536));
            if (*(char *)(v44 - 545) < 0) {
              goto LABEL_152;
            }
LABEL_145:
            if ((*(char *)(v44 - 569) & 0x80000000) == 0) {
              goto LABEL_146;
            }
LABEL_153:
            operator delete(*(void **)(v44 - 592));
            if (*(char *)(v44 - 609) < 0) {
              goto LABEL_154;
            }
LABEL_147:
            if ((*(char *)(v44 - 641) & 0x80000000) == 0) {
              goto LABEL_148;
            }
LABEL_155:
            operator delete(*(void **)(v44 - 664));
            if (*(char *)(v44 - 665) < 0) {
              goto LABEL_156;
            }
LABEL_149:
            uint64_t v48 = (unsigned char *)(v44 - 696);
            if (*(unsigned char *)(v44 - 696)) {
LABEL_157:
            }
              unsigned char *v48 = 0;
          }
          else
          {
            if ((*(char *)(v44 - 545) & 0x80000000) == 0) {
              goto LABEL_145;
            }
LABEL_152:
            operator delete(*(void **)(v44 - 568));
            if (*(char *)(v44 - 569) < 0) {
              goto LABEL_153;
            }
LABEL_146:
            if ((*(char *)(v44 - 609) & 0x80000000) == 0) {
              goto LABEL_147;
            }
LABEL_154:
            operator delete(*(void **)(v44 - 632));
            if (*(char *)(v44 - 641) < 0) {
              goto LABEL_155;
            }
LABEL_148:
            if ((*(char *)(v44 - 665) & 0x80000000) == 0) {
              goto LABEL_149;
            }
LABEL_156:
            operator delete(*(void **)(v44 - 688));
            uint64_t v48 = (unsigned char *)(v44 - 696);
            if (*(unsigned char *)(v44 - 696)) {
              goto LABEL_157;
            }
          }
          sub_29D95C(v45);
LABEL_128:
          sub_4BD34C(v45, (uint64_t)v40);
          *(_DWORD *)(v44 - 8) = 0;
          v40 += 168;
          if (v40 == v41) {
            goto LABEL_158;
          }
          continue;
        }
        break;
      }
      uint64_t v44 = sub_737FA0((uint64_t *)&v117);
      *(void *)&long long v118 = v44;
      uint64_t v45 = v44 - 1128;
      int v46 = *(_DWORD *)(v44 - 8);
      if (v46 == 1) {
        goto LABEL_137;
      }
LABEL_131:
      if (v46) {
        goto LABEL_128;
      }
      *(void *)uint64_t v45 = *(void *)v40;
      std::string::operator=((std::string *)(v44 - 1120), (const std::string *)(v40 + 8));
      long long v47 = *((_OWORD *)v40 + 2);
      *(_DWORD *)(v45 + 48) = *((_DWORD *)v40 + 12);
      *(_OWORD *)(v45 + 32) = v47;
      std::string::operator=((std::string *)(v44 - 1072), (const std::string *)(v40 + 56));
      std::string::operator=((std::string *)(v44 - 1048), (const std::string *)(v40 + 80));
      if (v40 != (char *)v45) {
        sub_69208(v44 - 1024, *((std::string **)v40 + 13), *((std::string **)v40 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v40 + 14) - *((void *)v40 + 13)) >> 3));
      }
      *(_WORD *)(v44 - 1000) = *((_WORD *)v40 + 64);
      std::string::operator=((std::string *)(v44 - 992), (const std::string *)(v40 + 136));
      *(_WORD *)(v44 - 968) = *((_WORD *)v40 + 80);
      *(_DWORD *)(v44 - 8) = 0;
      v40 += 168;
      if (v40 != v41) {
        continue;
      }
      break;
    }
LABEL_158:
    uint64_t v49 = (uint64_t)v117;
    v109 = v117;
    uint64_t v111 = (void *)v118;
    if (v107)
    {
      uint64_t v50 = v118;
      if ((void *)v118 == v117)
      {
        int v42 = 2;
      }
      else
      {
        uint64_t v51 = (uint64_t)v117;
        do
        {
          if (sub_73B9B8((uint64_t)&v117, v51, 0) && sub_73B9B8((uint64_t)&v117, v51, 1))
          {
            int v42 = 6;
            goto LABEL_175;
          }
          v51 += 1128;
        }
        while (v51 != v50);
        uint64_t v52 = v49;
        do
        {
          if (sub_73B9B8((uint64_t)&v117, v52, 1))
          {
            int v42 = 4;
            goto LABEL_175;
          }
          v52 += 1128;
        }
        while (v52 != v50);
        while (!sub_73B9B8((uint64_t)&v117, v49, 0))
        {
          v49 += 1128;
          if (v49 == v50)
          {
            int v42 = 7;
            goto LABEL_175;
          }
        }
        int v42 = 5;
      }
    }
    else
    {
      int v42 = 1;
    }
LABEL_175:
    int v112 = v42;
    sub_647DFC(v13, &v112);
    long long v53 = v109;
    if (v109)
    {
      uint64_t v54 = (uint64_t)v111;
      if (v111 == v109)
      {
LABEL_221:
        operator delete(v53);
        goto LABEL_222;
      }
      while (2)
      {
        uint64_t v55 = v54;
        v54 -= 1128;
        int v56 = *(_DWORD *)(v55 - 8);
        if (v56 != 1)
        {
          if (!v56)
          {
            if (*(char *)(v55 - 969) < 0)
            {
              operator delete(*(void **)(v55 - 992));
              unint64_t v57 = (void **)(v55 - 1024);
              int v58 = *(void ***)(v55 - 1024);
              if (v58) {
                goto LABEL_203;
              }
LABEL_184:
              if ((*(char *)(v55 - 1025) & 0x80000000) == 0) {
                goto LABEL_185;
              }
LABEL_210:
              operator delete(*(void **)(v55 - 1048));
              if (*(char *)(v55 - 1049) < 0) {
                goto LABEL_211;
              }
LABEL_186:
              if (*(char *)(v55 - 1097) < 0) {
LABEL_212:
              }
                operator delete(*(void **)(v55 - 1120));
            }
            else
            {
              unint64_t v57 = (void **)(v55 - 1024);
              int v58 = *(void ***)(v55 - 1024);
              if (!v58) {
                goto LABEL_184;
              }
LABEL_203:
              int v60 = *(void ***)(v55 - 1016);
              BOOL v61 = v58;
              if (v60 != v58)
              {
                do
                {
                  if (*((char *)v60 - 1) < 0) {
                    operator delete(*(v60 - 3));
                  }
                  v60 -= 3;
                }
                while (v60 != v58);
                BOOL v61 = *v57;
              }
              *(void *)(v55 - 1016) = v58;
              operator delete(v61);
              if (*(char *)(v55 - 1025) < 0) {
                goto LABEL_210;
              }
LABEL_185:
              if ((*(char *)(v55 - 1049) & 0x80000000) == 0) {
                goto LABEL_186;
              }
LABEL_211:
              operator delete(*(void **)(v55 - 1072));
              if (*(char *)(v55 - 1097) < 0) {
                goto LABEL_212;
              }
            }
          }
LABEL_179:
          if ((void *)v54 == v109)
          {
            long long v53 = v109;
            goto LABEL_221;
          }
          continue;
        }
        break;
      }
      if (*(unsigned char *)(v55 - 16))
      {
        sub_3A6CB8(v55 - 448);
        *(unsigned char *)(v55 - 16) = 0;
      }
      *(void *)(v54 + 640) = off_2438EC8;
      if (*(char *)(v54 + 671) < 0) {
        operator delete(*(void **)(v55 - 480));
      }
      if (*(unsigned char *)(v55 - 496)) {
        *(unsigned char *)(v55 - 496) = 0;
      }
      if (*(char *)(v55 - 513) < 0)
      {
        operator delete(*(void **)(v55 - 536));
        if (*(char *)(v55 - 545) < 0) {
          goto LABEL_214;
        }
LABEL_196:
        if ((*(char *)(v55 - 569) & 0x80000000) == 0) {
          goto LABEL_197;
        }
LABEL_215:
        operator delete(*(void **)(v55 - 592));
        if (*(char *)(v55 - 609) < 0) {
          goto LABEL_216;
        }
LABEL_198:
        if ((*(char *)(v55 - 641) & 0x80000000) == 0) {
          goto LABEL_199;
        }
LABEL_217:
        operator delete(*(void **)(v55 - 664));
        if (*(char *)(v55 - 665) < 0) {
          goto LABEL_218;
        }
LABEL_200:
        uint64_t v59 = (unsigned char *)(v55 - 696);
        if (*(unsigned char *)(v55 - 696)) {
LABEL_219:
        }
          unsigned char *v59 = 0;
      }
      else
      {
        if ((*(char *)(v55 - 545) & 0x80000000) == 0) {
          goto LABEL_196;
        }
LABEL_214:
        operator delete(*(void **)(v55 - 568));
        if (*(char *)(v55 - 569) < 0) {
          goto LABEL_215;
        }
LABEL_197:
        if ((*(char *)(v55 - 609) & 0x80000000) == 0) {
          goto LABEL_198;
        }
LABEL_216:
        operator delete(*(void **)(v55 - 632));
        if (*(char *)(v55 - 641) < 0) {
          goto LABEL_217;
        }
LABEL_199:
        if ((*(char *)(v55 - 665) & 0x80000000) == 0) {
          goto LABEL_200;
        }
LABEL_218:
        operator delete(*(void **)(v55 - 688));
        uint64_t v59 = (unsigned char *)(v55 - 696);
        if (*(unsigned char *)(v55 - 696)) {
          goto LABEL_219;
        }
      }
      sub_29D95C(v54);
      goto LABEL_179;
    }
LABEL_222:
    int v62 = (void **)v113;
    if (v113)
    {
      char v63 = v114;
      int v64 = v113;
      if (v114 == v113)
      {
LABEL_244:
        uint64_t v114 = v62;
        operator delete(v64);
        goto LABEL_245;
      }
      while (2)
      {
        if (*((char *)v63 - 9) < 0)
        {
          operator delete(*(v63 - 4));
          int v65 = (void **)*(v63 - 8);
          if (v65) {
            goto LABEL_233;
          }
LABEL_228:
          if ((*((char *)v63 - 65) & 0x80000000) == 0) {
            goto LABEL_229;
          }
        }
        else
        {
          int v65 = (void **)*(v63 - 8);
          if (!v65) {
            goto LABEL_228;
          }
LABEL_233:
          v66 = (void **)*(v63 - 7);
          if (v66 == v65)
          {
            *(v63 - 7) = v65;
            operator delete(v65);
            if (*((char *)v63 - 65) < 0) {
              break;
            }
LABEL_229:
            if ((*((char *)v63 - 89) & 0x80000000) == 0)
            {
LABEL_230:
              if (*((char *)v63 - 137) < 0) {
LABEL_242:
              }
                operator delete(*(v63 - 20));
LABEL_225:
              v63 -= 21;
              if (v63 == v62)
              {
                int v64 = v113;
                goto LABEL_244;
              }
              continue;
            }
LABEL_241:
            operator delete(*(v63 - 14));
            if (*((char *)v63 - 137) < 0) {
              goto LABEL_242;
            }
            goto LABEL_225;
          }
          do
          {
            if (*((char *)v66 - 1) < 0) {
              operator delete(*(v66 - 3));
            }
            v66 -= 3;
          }
          while (v66 != v65);
          char v67 = *(v63 - 8);
          *(v63 - 7) = v65;
          operator delete(v67);
          if ((*((char *)v63 - 65) & 0x80000000) == 0) {
            goto LABEL_229;
          }
        }
        break;
      }
      operator delete(*(v63 - 11));
      if ((*((char *)v63 - 89) & 0x80000000) == 0) {
        goto LABEL_230;
      }
      goto LABEL_241;
    }
LABEL_245:
    int v68 = (void **)__p;
    if (__p)
    {
      v69 = (void **)v116;
      int32x4_t v70 = __p;
      if ((void *)v116 == __p)
      {
LABEL_267:
        *(void *)&long long v116 = v68;
        operator delete(v70);
        goto LABEL_268;
      }
      while (2)
      {
        if (*((char *)v69 - 9) < 0)
        {
          operator delete(*(v69 - 4));
          uint64_t v71 = (void **)*(v69 - 8);
          if (v71) {
            goto LABEL_256;
          }
LABEL_251:
          if ((*((char *)v69 - 65) & 0x80000000) == 0) {
            goto LABEL_252;
          }
        }
        else
        {
          uint64_t v71 = (void **)*(v69 - 8);
          if (!v71) {
            goto LABEL_251;
          }
LABEL_256:
          v72 = (void **)*(v69 - 7);
          if (v72 == v71)
          {
            *(v69 - 7) = v71;
            operator delete(v71);
            if (*((char *)v69 - 65) < 0) {
              break;
            }
LABEL_252:
            if ((*((char *)v69 - 89) & 0x80000000) == 0)
            {
LABEL_253:
              if (*((char *)v69 - 137) < 0) {
LABEL_265:
              }
                operator delete(*(v69 - 20));
LABEL_248:
              v69 -= 21;
              if (v69 == v68)
              {
                int32x4_t v70 = __p;
                goto LABEL_267;
              }
              continue;
            }
LABEL_264:
            operator delete(*(v69 - 14));
            if (*((char *)v69 - 137) < 0) {
              goto LABEL_265;
            }
            goto LABEL_248;
          }
          do
          {
            if (*((char *)v72 - 1) < 0) {
              operator delete(*(v72 - 3));
            }
            v72 -= 3;
          }
          while (v72 != v71);
          long long v73 = *(v69 - 8);
          *(v69 - 7) = v71;
          operator delete(v73);
          if ((*((char *)v69 - 65) & 0x80000000) == 0) {
            goto LABEL_252;
          }
        }
        break;
      }
      operator delete(*(v69 - 11));
      if ((*((char *)v69 - 89) & 0x80000000) == 0) {
        goto LABEL_253;
      }
      goto LABEL_264;
    }
LABEL_268:
    uint64_t v74 = (uint64_t *)sub_648B60((uint64_t)v13);
    v117 = 0;
    long long v118 = 0uLL;
    uint64_t v75 = *v74;
    uint64_t v76 = v74[1];
    if (*v74 == v76)
    {
      __p = 0;
      long long v116 = 0uLL;
      int v77 = v102;
      goto LABEL_311;
    }
    while (2)
    {
      uint64_t v78 = v118;
      if ((unint64_t)v118 >= *((void *)&v118 + 1))
      {
        uint64_t v79 = sub_737FA0((uint64_t *)&v117);
        *(void *)&long long v118 = v79;
        uint64_t v80 = v79 - 1128;
        int v81 = *(_DWORD *)(v79 - 8);
        if (v81 == 1) {
          goto LABEL_282;
        }
LABEL_274:
        if (v81) {
          goto LABEL_270;
        }
        if (*(char *)(v79 - 969) < 0)
        {
          operator delete(*(void **)(v79 - 992));
          __darwin_ct_rune_t v82 = (void **)(v79 - 1024);
          __darwin_ct_rune_t v83 = *(void ***)(v79 - 1024);
          if (!v83)
          {
LABEL_277:
            if ((*(char *)(v79 - 1025) & 0x80000000) == 0) {
              goto LABEL_278;
            }
LABEL_291:
            operator delete(*(void **)(v79 - 1048));
            if ((*(char *)(v79 - 1049) & 0x80000000) == 0)
            {
LABEL_279:
              if (*(char *)(v79 - 1097) < 0) {
                goto LABEL_293;
              }
              goto LABEL_270;
            }
LABEL_292:
            operator delete(*(void **)(v79 - 1072));
            if (*(char *)(v79 - 1097) < 0) {
LABEL_293:
            }
              operator delete(*(void **)(v79 - 1120));
LABEL_270:
            sub_4BE9F4(v80, v75);
            goto LABEL_271;
          }
        }
        else
        {
          __darwin_ct_rune_t v82 = (void **)(v79 - 1024);
          __darwin_ct_rune_t v83 = *(void ***)(v79 - 1024);
          if (!v83) {
            goto LABEL_277;
          }
        }
        v84 = (void ***)(v79 - 1016);
        __darwin_ct_rune_t v85 = *(void ***)(v79 - 1016);
        if (v85 == v83)
        {
          *v84 = v83;
          operator delete(v83);
          if (*(char *)(v79 - 1025) < 0) {
            goto LABEL_291;
          }
        }
        else
        {
          do
          {
            if (*((char *)v85 - 1) < 0) {
              operator delete(*(v85 - 3));
            }
            v85 -= 3;
          }
          while (v85 != v83);
          __darwin_ct_rune_t v86 = *v82;
          *v84 = v83;
          operator delete(v86);
          if (*(char *)(v79 - 1025) < 0) {
            goto LABEL_291;
          }
        }
LABEL_278:
        if ((*(char *)(v79 - 1049) & 0x80000000) == 0) {
          goto LABEL_279;
        }
        goto LABEL_292;
      }
      *(_DWORD *)(v118 + 1120) = -1;
      uint64_t v79 = v78 + 1128;
      *(void *)&long long v118 = v78 + 1128;
      uint64_t v80 = v78;
      int v81 = *(_DWORD *)(v78 + 1120);
      if (v81 != 1) {
        goto LABEL_274;
      }
LABEL_282:
      sub_4C9334(v80, v75);
LABEL_271:
      *(_DWORD *)(v79 - 8) = 1;
      v75 += 1120;
      if (v75 != v76) {
        continue;
      }
      break;
    }
    uint64_t v87 = (uint64_t)v117;
    __p = v117;
    long long v116 = v118;
    if (v104 == v103)
    {
      int v77 = 1;
    }
    else
    {
      uint64_t v88 = v118;
      if ((void *)v118 == v117)
      {
        int v77 = 2;
      }
      else
      {
        uint64_t v89 = (uint64_t)v117;
        do
        {
          if (sub_73B9B8((uint64_t)&v117, v89, 0) && sub_73B9B8((uint64_t)&v117, v89, 1))
          {
            int v77 = 6;
            goto LABEL_311;
          }
          v89 += 1128;
        }
        while (v89 != v88);
        uint64_t v90 = v87;
        do
        {
          if (sub_73B9B8((uint64_t)&v117, v90, 1))
          {
            int v77 = 4;
            goto LABEL_311;
          }
          v90 += 1128;
        }
        while (v90 != v88);
        while (!sub_73B9B8((uint64_t)&v117, v87, 0))
        {
          v87 += 1128;
          if (v87 == v88)
          {
            int v77 = 7;
            goto LABEL_311;
          }
        }
        int v77 = 5;
      }
    }
LABEL_311:
    LODWORD(v113) = v77;
    sub_647E20((uint64_t)v13, &v113);
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v91 = v116;
      if ((void *)v116 == __p)
      {
LABEL_25:
        operator delete(v17);
        goto LABEL_26;
      }
      while (2)
      {
        uint64_t v92 = v91;
        v91 -= 1128;
        int v93 = *(_DWORD *)(v92 - 8);
        if (v93 != 1)
        {
          if (v93) {
            goto LABEL_315;
          }
          if (*(char *)(v92 - 969) < 0)
          {
            operator delete(*(void **)(v92 - 992));
            uint64_t v94 = (void **)(v92 - 1024);
            uint64_t v95 = *(void ***)(v92 - 1024);
            if (v95) {
              goto LABEL_339;
            }
LABEL_320:
            if ((*(char *)(v92 - 1025) & 0x80000000) == 0) {
              goto LABEL_321;
            }
          }
          else
          {
            uint64_t v94 = (void **)(v92 - 1024);
            uint64_t v95 = *(void ***)(v92 - 1024);
            if (!v95) {
              goto LABEL_320;
            }
LABEL_339:
            v97 = (void ***)(v92 - 1016);
            v98 = *(void ***)(v92 - 1016);
            if (v98 == v95)
            {
              char *v97 = v95;
              operator delete(v95);
              if (*(char *)(v92 - 1025) < 0) {
                goto LABEL_346;
              }
LABEL_321:
              if ((*(char *)(v92 - 1049) & 0x80000000) == 0)
              {
LABEL_322:
                if (*(char *)(v92 - 1097) < 0) {
LABEL_348:
                }
                  operator delete(*(void **)(v92 - 1120));
LABEL_315:
                if ((void *)v91 == v17)
                {
                  uint64_t v17 = __p;
                  goto LABEL_25;
                }
                continue;
              }
LABEL_347:
              operator delete(*(void **)(v92 - 1072));
              if (*(char *)(v92 - 1097) < 0) {
                goto LABEL_348;
              }
              goto LABEL_315;
            }
            do
            {
              if (*((char *)v98 - 1) < 0) {
                operator delete(*(v98 - 3));
              }
              v98 -= 3;
            }
            while (v98 != v95);
            unint64_t v99 = *v94;
            char *v97 = v95;
            operator delete(v99);
            if ((*(char *)(v92 - 1025) & 0x80000000) == 0) {
              goto LABEL_321;
            }
          }
LABEL_346:
          operator delete(*(void **)(v92 - 1048));
          if ((*(char *)(v92 - 1049) & 0x80000000) == 0) {
            goto LABEL_322;
          }
          goto LABEL_347;
        }
        break;
      }
      if (*(unsigned char *)(v92 - 16))
      {
        sub_3A6CB8(v92 - 448);
        *(unsigned char *)(v92 - 16) = 0;
      }
      *(void *)(v91 + 640) = off_2438EC8;
      if (*(char *)(v91 + 671) < 0) {
        operator delete(*(void **)(v92 - 480));
      }
      if (*(unsigned char *)(v92 - 496)) {
        *(unsigned char *)(v92 - 496) = 0;
      }
      if (*(char *)(v92 - 513) < 0)
      {
        operator delete(*(void **)(v92 - 536));
        if (*(char *)(v92 - 545) < 0) {
          goto LABEL_350;
        }
LABEL_332:
        if ((*(char *)(v92 - 569) & 0x80000000) == 0) {
          goto LABEL_333;
        }
LABEL_351:
        operator delete(*(void **)(v92 - 592));
        if (*(char *)(v92 - 609) < 0) {
          goto LABEL_352;
        }
LABEL_334:
        if ((*(char *)(v92 - 641) & 0x80000000) == 0) {
          goto LABEL_335;
        }
LABEL_353:
        operator delete(*(void **)(v92 - 664));
        if (*(char *)(v92 - 665) < 0) {
          goto LABEL_354;
        }
LABEL_336:
        int v96 = (unsigned char *)(v92 - 696);
        if (*(unsigned char *)(v92 - 696)) {
LABEL_355:
        }
          unsigned char *v96 = 0;
      }
      else
      {
        if ((*(char *)(v92 - 545) & 0x80000000) == 0) {
          goto LABEL_332;
        }
LABEL_350:
        operator delete(*(void **)(v92 - 568));
        if (*(char *)(v92 - 569) < 0) {
          goto LABEL_351;
        }
LABEL_333:
        if ((*(char *)(v92 - 609) & 0x80000000) == 0) {
          goto LABEL_334;
        }
LABEL_352:
        operator delete(*(void **)(v92 - 632));
        if (*(char *)(v92 - 641) < 0) {
          goto LABEL_353;
        }
LABEL_335:
        if ((*(char *)(v92 - 665) & 0x80000000) == 0) {
          goto LABEL_336;
        }
LABEL_354:
        operator delete(*(void **)(v92 - 688));
        int v96 = (unsigned char *)(v92 - 696);
        if (*(unsigned char *)(v92 - 696)) {
          goto LABEL_355;
        }
      }
      sub_29D95C(v91);
      goto LABEL_315;
    }
LABEL_26:
    v13 += 945;
    if (v13 != v105) {
      continue;
    }
    break;
  }
}

void sub_730D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  unint64_t v10 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  int v15 = va_arg(va2, void *);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  sub_72BBD0((void **)va);
  sub_4B1DB4((void **)va1);
  sub_4B1DB4((void **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_730DFC()
{
  uint64_t v0 = (uint64_t **)__chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_374EF4(*v0);
  sub_4B4210((uint64_t)v8, *v3, v6, (uint64_t)(v3 + 4));
  sub_4B4214((uint64_t)v8, v2, v5);
  return sub_737ADC((uint64_t)v8);
}

void sub_730EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_737ADC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_730EC8()
{
  uint64_t result = (void *)__chkstk_darwin();
  uint64_t v4 = v3;
  LODWORD(v3) = *((unsigned __int8 *)result + 1259);
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = 0;
  if (v3 == 2)
  {
    uint64_t v5 = v2;
    uint64_t v6 = v1;
    uint64_t v7 = result;
    sub_72AEF4((char **)v4, ((char *)v1[1] - (char *)*v1) >> 5);
    sub_103E2B8(v30, *((unsigned __int8 *)v7 + 1259), *v7);
    uint64_t v8 = *v6;
    uint64_t v9 = v6[1];
    if (*v6 != v9)
    {
      do
      {
        uint64_t v10 = sub_45E5CC(v8);
        uint64_t v11 = v10;
        if (*(_DWORD *)(v10 + 88) <= *((_DWORD *)v7 + 363)
          && (!*(unsigned char *)(v10 + 159) || *((unsigned char *)v7 + 26))
          && (!sub_358820(v10) || sub_1041610((uint64_t)v30, v11)))
        {
          sub_6F85DC((const std::string **)(v11 + 64), (uint64_t)(v7 + 125), (uint64_t)__p);
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          unint64_t v12 = *(void *)(v4 + 8);
          if (v12 >= *(void *)(v4 + 16))
          {
            uint64_t v13 = sub_738690((uint64_t *)v4, &v31, v11, (uint64_t)__p);
          }
          else
          {
            sub_738844(v4 + 16, *(void *)(v4 + 8), &v31, v11, (uint64_t)__p);
            uint64_t v13 = v12 + 1120;
            *(void *)(v4 + 8) = v12 + 1120;
          }
          *(void *)(v4 + 8) = v13;
          if (v29 < 0) {
            operator delete(__p[0]);
          }
        }
        v8 += 4;
      }
      while (v8 != v9);
    }
    if (*((unsigned char *)v7 + 27))
    {
      uint64_t v14 = *v5;
      int v15 = v5[1];
      if (*v5 != v15)
      {
        uint64_t v16 = (uint64_t)(v7 + 125);
        do
        {
          uint64_t v17 = **v14 + 424 * (void)v14[1];
          sub_6F85DC((const std::string **)(v17 + 64), v16, (uint64_t)__p);
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          unint64_t v18 = *(void *)(v4 + 8);
          if (v18 >= *(void *)(v4 + 16))
          {
            uint64_t v19 = sub_738690((uint64_t *)v4, &v31, v17, (uint64_t)__p);
          }
          else
          {
            sub_738844(v4 + 16, *(void *)(v4 + 8), &v31, v17, (uint64_t)__p);
            uint64_t v19 = v18 + 1120;
            *(void *)(v4 + 8) = v18 + 1120;
          }
          *(void *)(v4 + 8) = v19;
          if (v29 < 0) {
            operator delete(__p[0]);
          }
          v14 += 19;
        }
        while (v14 != v15);
      }
    }
    else if (*((unsigned char *)v7 + 28))
    {
      int v20 = *v5;
      uint64_t v21 = v5[1];
      if (*v5 != v21)
      {
        uint64_t v22 = (uint64_t)(v7 + 125);
        do
        {
          uint64_t v23 = v20[1];
          uint64_t v24 = **v20;
          uint64_t v25 = v24 + 424 * (void)v23;
          if (*(unsigned char *)(v25 + 312) && sub_1041610((uint64_t)v30, v24 + 424 * (void)v23))
          {
            sub_6F85DC((const std::string **)(v24 + 424 * (void)v23 + 64), v22, (uint64_t)__p);
            uint64_t v31 = 0;
            uint64_t v32 = 0;
            unint64_t v26 = *(void *)(v4 + 8);
            if (v26 >= *(void *)(v4 + 16))
            {
              uint64_t v27 = sub_738690((uint64_t *)v4, &v31, v25, (uint64_t)__p);
            }
            else
            {
              sub_738844(v4 + 16, *(void *)(v4 + 8), &v31, v25, (uint64_t)__p);
              uint64_t v27 = v26 + 1120;
              *(void *)(v4 + 8) = v26 + 1120;
            }
            *(void *)(v4 + 8) = v27;
            if (v29 < 0) {
              operator delete(__p[0]);
            }
          }
          v20 += 19;
        }
        while (v20 != v21);
      }
    }
    return sub_3A6230(v30);
  }
  return result;
}

void sub_7311F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  *(void *)(v16 + 8) = v17;
  if (a15 < 0)
  {
    operator delete(__p);
    sub_3A6230(&a16);
    sub_50E790((void **)v16);
    _Unwind_Resume(a1);
  }
  sub_3A6230(&a16);
  sub_50E790((void **)v16);
  _Unwind_Resume(a1);
}

void sub_731298(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a2 + 1184);
  uint64_t v4 = *(void *)(a2 + 1192);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 152);
      if (v7)
      {
        uint64_t v8 = 0;
        for (unint64_t i = 0; i != v7; ++i)
          v8 += sub_46CCC8((void *)a2, i, a3);
        if (v8 > *(void *)(a1 + 16)) {
          return;
        }
      }
      else if (*(uint64_t *)(a1 + 16) < 0)
      {
        return;
      }
      if (sub_6F2FD8(v3)) {
        break;
      }
      v3 += 160;
      if (v3 == v4) {
        return;
      }
    }
    unint64_t v10 = *(void *)(v3 + 152);
    sub_4AA8E0((char *)&__dst, (long long *)v3);
    sub_738954((uint64_t *)(*(void *)(a2 + 1064) + 336), &__dst, &v32, 1uLL);
    if (v31 < 0)
    {
      operator delete(__p);
      if ((v29 & 0x80000000) == 0)
      {
LABEL_13:
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_20;
      }
    }
    else if ((v29 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v28);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_21;
    }
LABEL_20:
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete(v24);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if (v10 == -1) {
        return;
      }
LABEL_23:
      if (v10 >= *(void *)(sub_51690C((void *)(a2 + 1064), 1uLL) + 24)) {
        return;
      }
      uint64_t v11 = sub_46C8EC((void *)a2, v10);
      sub_2954EC(*(void *)(a1 + 8), *(void *)(v11 + 32), (uint64_t)&__dst);
      sub_2E4B5C((uint64_t)&__dst, &v21);
      if (__dst.__r_.__value_.__l.__size_)
      {
        __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__l.__size_;
        operator delete((void *)__dst.__r_.__value_.__l.__size_);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)v21) >> 2) < 2) {
        goto LABEL_44;
      }
      unint64_t v12 = (_DWORD *)sub_413C0(&v21, 0);
      uint64_t v13 = (_DWORD *)sub_413C0(&v21, 1uLL);
      if (*v13 == *v12)
      {
        unsigned int v14 = v12[1];
        unsigned int v15 = v13[1];
        double j = 0.0;
        if (v14 == v15)
        {
LABEL_37:
          double v18 = (j + 180.0) / 45.0 + 0.5;
          if ((int)v18 <= 0) {
            unsigned int v19 = -(-(int)v18 & 7);
          }
          else {
            unsigned int v19 = (int)v18 & 7;
          }
          if (v19 >= 8) {
            int v20 = "";
          }
          else {
            int v20 = off_243A380[v19];
          }
          std::string::assign((std::string *)(a2 + 7376), v20);
LABEL_44:
          if (v21)
          {
            uint64_t v22 = v21;
            operator delete(v21);
          }
          return;
        }
      }
      else
      {
        unsigned int v15 = v13[1];
        unsigned int v14 = v12[1];
      }
      double v17 = -(double)(*v12 - *v13);
      if (*v13 - *v12 < (*v12 - *v13)) {
        double v17 = (double)(*v13 - *v12);
      }
      for (double j = (atan2((double)v15 - (double)v14, v17) + 1.57079633) * 180.0 / 3.14159265; j >= 180.0; double j = j + -360.0)
        ;
      for (; j < -180.0; double j = j + 360.0)
        ;
      goto LABEL_37;
    }
LABEL_22:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v10 == -1) {
      return;
    }
    goto LABEL_23;
  }
}

void sub_731618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_731674(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x8AB355E008AB4) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 7560 * a2;
  uint64_t v6 = (char *)operator new(7560 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 7560;
    uint64_t v9 = sub_73AF14(v9 - 7560, v4);
  }
  while ((char *)v4 != v2);
  unint64_t v10 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 7560;
      sub_574D4C((uint64_t)v2);
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_73179C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)sub_376F8C(*(void **)a1);
  uint64_t v9 = v8;
  unsigned int v42 = *(_DWORD *)(a2 + 8);
  if (v42 <= 1) {
    uint64_t v41 = *(void *)a2;
  }
  sub_28E4E4(v8, (uint64_t)&v41, (unint64_t)&__str);
  *(void *)a4 = v32;
  *(_DWORD *)(a4 + 8) = v33;
  std::string::operator=((std::string *)(a4 + 120), &__str);
  std::string::operator=((std::string *)(a4 + 168), &v30);
  std::string::operator=((std::string *)(a4 + 144), &v31);
  unint64_t v10 = *(unsigned int *)(a2 + 8);
  int v40 = v10;
  if (v10 <= 1)
  {
    unint64_t v10 = *(void *)a2;
    uint64_t v39 = *(void *)a2;
  }
  *(unsigned char *)(a4 + 402) = sub_28EE68(v9, &v39, v10);
  if ((a3 & 1) == 0)
  {
    unsigned int v38 = *(_DWORD *)(a2 + 8);
    if (v38 <= 1) {
      uint64_t v37 = *(void *)a2;
    }
    sub_28E180(v9, (uint64_t)&v37, (unint64_t)&v27);
    uint64_t v11 = (uint64_t *)v27;
    unint64_t v12 = v28;
    if (v27 != v28)
    {
      do
      {
        if (*((unsigned char *)v11 + 16) == 1)
        {
          sub_29549C(*(void *)(a1 + 8), *v11, (uint64_t)&v23);
          sub_2E4B5C((uint64_t)&v23, v26);
          if (__p)
          {
            char v25 = __p;
            operator delete(__p);
          }
          uint64_t v23 = sub_72B688((unsigned int **)v26, v11[1]);
          LODWORD(__p) = v13;
          uint64_t v14 = (uint64_t)(v11 + 3);
          unint64_t v15 = *(void *)(a4 + 248);
          if (v15 >= *(void *)(a4 + 256))
          {
            uint64_t v16 = sub_737D28((uint64_t *)(a4 + 240), &v23, v14);
          }
          else
          {
            sub_DAA23C(*(void *)(a4 + 248), &v23, v14);
            uint64_t v16 = v15 + 104;
            *(void *)(a4 + 248) = v15 + 104;
          }
          *(void *)(a4 + 248) = v16;
          if (v26[0])
          {
            v26[1] = v26[0];
            operator delete(v26[0]);
          }
        }
        v11 += 6;
      }
      while (v11 != v12);
      uint64_t v11 = (uint64_t *)v27;
    }
    if (v11)
    {
      double v17 = v28;
      double v18 = v11;
      if (v28 != v11)
      {
        do
        {
          unsigned int v19 = (void *)*(v17 - 3);
          if (v19)
          {
            *(v17 - 2) = (uint64_t)v19;
            operator delete(v19);
          }
          v17 -= 6;
        }
        while (v17 != v11);
        double v18 = v27;
      }
      uint64_t v28 = v11;
      operator delete(v18);
    }
  }
  sub_8AC4C((uint64_t)&v36);
  int v20 = (void **)v34;
  if (v34)
  {
    uint64_t v21 = v35;
    uint64_t v22 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      uint64_t v22 = v34;
    }
    unint64_t v35 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_42:
      operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_42;
  }
}

void sub_731A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_731ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    JUMPOUT(0x731AFCLL);
  }
  JUMPOUT(0x731B00);
}

void sub_731AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  unint64_t v10 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_28D1AC((void **)va);
  sub_28ED98((uint64_t)va1);
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point sub_731B18(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4, int a5, uint64_t a6)
{
  uint64_t v12 = (char *)(a6 + 10603);
  uint64_t v13 = sub_45FC7C(a2) - 1;
  BOOL v14 = sub_45FCD8(a2);
  char v15 = v13 != a3 && v14;
  if (a3) {
    BOOL v16 = 1;
  }
  else {
    BOOL v16 = (a5 & 0xFFFFFFFD) == 9;
  }
  char v17 = v16;
  sub_651004(a6, v17);
  sub_651010(a6, v15);
  uint64_t v18 = sub_45FB28(a2, a3);
  *(_DWORD *)(a6 + 128) = *(_DWORD *)(v18 + 128);
  *(_DWORD *)(a6 + 288) = *(_DWORD *)(v18 + 288);
  unsigned int v19 = (int **)sub_46C8FC(a6);
  int v20 = (unsigned __int16 *)((char *)*v19 - **v19);
  unsigned int v21 = *v20;
  if (*((unsigned char *)v19 + 38))
  {
    if (v21 >= 0xB)
    {
      unsigned int v22 = v20[5];
      if (v22)
      {
        int v23 = 2;
LABEL_17:
        BOOL v24 = (*(int *)((char *)*v19 + v22) & v23) != 0;
        goto LABEL_19;
      }
    }
  }
  else if (v21 >= 0xB)
  {
    unsigned int v22 = v20[5];
    if (v22)
    {
      int v23 = 1;
      goto LABEL_17;
    }
  }
  BOOL v24 = 0;
LABEL_19:
  v12[677] = v24;
  sub_725A0(a1 + 1808);
  unint64_t v26 = *a4;
  char v25 = a4[1];
  if (*a4 != v25)
  {
    while (*((_DWORD *)v26 + 26))
    {
      v26 += 47;
      if (v26 == v25) {
        goto LABEL_26;
      }
    }
  }
  if (v26 != v25)
  {
    uint64_t v27 = sub_374DF4(a6);
    unsigned int v28 = *(_DWORD *)(v27 + 112);
    if (v28 == -1) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
LABEL_26:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7190))
  {
    sub_737C74((uint64_t)&qword_24F7018);
    __cxa_guard_release(&qword_24F7190);
  }
  unint64_t v26 = &qword_24F7018;
  uint64_t v27 = sub_374DF4(a6);
  unsigned int v28 = *(_DWORD *)(v27 + 112);
  if (v28 != -1)
  {
LABEL_28:
    unsigned int v41 = v28;
    if (v28 <= 1) {
      uint64_t v40 = *(void *)(v27 + 104);
    }
    sub_73179C(a1, (uint64_t)&v40, 1, a6 + 10200);
  }
LABEL_31:
  int v29 = *(_DWORD *)(v18 + 128);
  if ((v29 + 1) >= 2)
  {
    std::string v30 = sub_DA4FA0(a4, (v29 - 1));
    sub_65101C(a6, (uint64_t)v30);
  }
  if (!a3 && *(_DWORD *)(v27 + 112) == -1) {
    sub_65101C(a6, (uint64_t)v26);
  }
  if (*(_DWORD *)(v18 + 128) == -1) {
    char v31 = 2;
  }
  else {
    char v31 = 1;
  }
  *uint64_t v12 = v31;
  uint64_t v32 = sub_46CAAC(a6);
  unsigned int v33 = *(_DWORD *)(v32 + 112);
  if (v33 != -1)
  {
    int v39 = *(_DWORD *)(v32 + 112);
    if (v33 <= 1) {
      uint64_t v38 = *(void *)(v32 + 104);
    }
    sub_73179C(a1, (uint64_t)&v38, 0, a6 + 10880);
  }
  int v34 = *(_DWORD *)(v18 + 288);
  if ((v34 + 1) >= 2)
  {
    unint64_t v35 = sub_DA4FA0(a4, (v34 - 1));
    sub_64EFD0(a6, (uint64_t)v35);
    int v34 = *(_DWORD *)(v18 + 288);
  }
  if (v34 == -1) {
    char v36 = 2;
  }
  else {
    char v36 = 1;
  }
  v12[680] = v36;
  *(void *)(a1 + 1840) = (unint64_t)(round(sub_72688(a1 + 1808)) + (double)*(unint64_t *)(a1 + 1840));
  return sub_7260C(a1 + 1808);
}

void sub_731E48(_Unwind_Exception *a1)
{
}

void sub_731E64(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "max_search_distance_for_named_street");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)a1);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "enable_congestion_zone_impact");
  uint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 8) = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_8:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "enable_guidance_event_importance_info");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 9) = v7 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 9) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_14:
    }
      operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "show_hidden_incidents");
  uint64_t v8 = sub_58070(a2, (uint64_t)__p);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 10) = v9 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 10) = *(unsigned char *)(a1 + 10) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_20:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "show_encountered_soft_closures");
  unint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 11) = v11 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 11) = *(unsigned char *)(a1 + 11) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_26:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "show_encountered_hard_closures");
  uint64_t v12 = sub_58070(a2, (uint64_t)__p);
  if (v12 && (int v13 = *((_DWORD *)v12 + 12), (v13 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 12) = v13 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_33;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a1 + 12) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_33:
    }
      operator delete(__p[0]);
  }
}

void sub_7321A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7321D4(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  uint64_t v7 = *(void *)a1;
  char v20 = 13;
  uint64_t v18 = 0;
  strcpy((char *)v19, "RouteGuidance");
  BOOL v16 = 0;
  char v17 = 0;
  uint64_t v8 = sub_374CDC(v7, (uint64_t)v19, (uint64_t *)&v16);
  sub_3CB5E0(v8, (uint64_t)__p);
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  sub_7374D4(a1 + 16, __p);
  int v9 = v22;
  if (v22)
  {
    do
    {
      BOOL v14 = *(char **)v9;
      sub_57AC8((uint64_t *)v9 + 5);
      if (v9[39] < 0) {
        operator delete(*((void **)v9 + 2));
      }
      operator delete(v9);
      int v9 = v14;
    }
    while (v14);
  }
  unint64_t v10 = __p[0];
  __p[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  int v11 = (void **)v16;
  if (v16)
  {
    uint64_t v12 = v17;
    int v13 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      int v13 = v16;
    }
    char v17 = v11;
    operator delete(v13);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  sub_4BBDC0(a1 + 32, a3);
  if (*((char *)a4 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1568), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v15 = *a4;
    *(void *)(a1 + 1584) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 1568) = v15;
  }
  operator new();
}

void sub_7328D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_4BCED0(v19);
  _Unwind_Resume(a1);
}

void sub_732E98()
{
}

uint64_t sub_732EC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1800);
  *(void *)(a1 + 1800) = 0;
  if (v2) {
    sub_7385FC(a1 + 1800, v2);
  }
  uint64_t v3 = *(void *)(a1 + 1792);
  *(void *)(a1 + 1792) = 0;
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0) {
      operator delete(*(void **)(v3 + 8));
    }
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 1784);
  *(void *)(a1 + 1784) = 0;
  if (v4) {
    sub_738504(a1 + 1784, v4);
  }
  uint64_t v5 = *(void *)(a1 + 1776);
  *(void *)(a1 + 1776) = 0;
  if (v5)
  {
    if (*(char *)(v5 + 31) < 0) {
      operator delete(*(void **)(v5 + 8));
    }
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 1768);
  *(void *)(a1 + 1768) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1760);
  *(void *)(a1 + 1760) = 0;
  if (v7)
  {
    sub_4BCED0(v7 + 152);
    operator delete();
  }
  uint64_t v8 = *(void *)(a1 + 1752);
  *(void *)(a1 + 1752) = 0;
  if (v8) {
    operator delete();
  }
  uint64_t v9 = *(void *)(a1 + 1744);
  *(void *)(a1 + 1744) = 0;
  if (v9)
  {
    unint64_t v10 = *(std::__shared_weak_count **)(v9 + 1712);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    sub_4BCED0(v9 + 168);
    operator delete();
  }
  uint64_t v11 = *(void *)(a1 + 1736);
  *(void *)(a1 + 1736) = 0;
  if (v11) {
    operator delete();
  }
  uint64_t v12 = *(void *)(a1 + 1728);
  *(void *)(a1 + 1728) = 0;
  if (v12)
  {
    if (*(char *)(v12 + 3471) < 0) {
      operator delete(*(void **)(v12 + 3448));
    }
    sub_4BCED0(v12 + 8);
    operator delete();
  }
  uint64_t v13 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = 0;
  if (v13)
  {
    sub_E6E3BC();
    operator delete();
  }
  BOOL v14 = *(void **)(a1 + 1712);
  *(void *)(a1 + 1712) = 0;
  if (v14)
  {
    sub_5ADD5C(v14);
    operator delete();
  }
  uint64_t v15 = *(void *)(a1 + 1704);
  *(void *)(a1 + 1704) = 0;
  if (v15) {
    operator delete();
  }
  uint64_t v16 = *(void *)(a1 + 1696);
  *(void *)(a1 + 1696) = 0;
  if (v16)
  {
    nullsub_1(v16);
    operator delete();
  }
  uint64_t v17 = *(void *)(a1 + 1688);
  *(void *)(a1 + 1688) = 0;
  if (v17) {
    operator delete();
  }
  uint64_t v18 = *(void *)(a1 + 1680);
  *(void *)(a1 + 1680) = 0;
  if (v18)
  {
    sub_68D2B0(v18);
    operator delete();
  }
  uint64_t v19 = *(void *)(a1 + 1672);
  *(void *)(a1 + 1672) = 0;
  if (v19)
  {
    nullsub_1(v19 + 8272);
    sub_670F0C((void *)(v19 + 2040));
    if (*(char *)(v19 + 1927) < 0) {
      operator delete(*(void **)(v19 + 1904));
    }
    operator delete();
  }
  uint64_t v20 = *(void *)(a1 + 1664);
  *(void *)(a1 + 1664) = 0;
  if (v20) {
    operator delete();
  }
  uint64_t v21 = *(void *)(a1 + 1656);
  *(void *)(a1 + 1656) = 0;
  if (v21) {
    operator delete();
  }
  uint64_t v22 = *(void *)(a1 + 1648);
  *(void *)(a1 + 1648) = 0;
  if (v22)
  {
    sub_5CD594(v22);
    operator delete();
  }
  uint64_t v23 = *(void *)(a1 + 1640);
  *(void *)(a1 + 1640) = 0;
  if (v23)
  {
    BOOL v24 = *(std::__shared_weak_count **)(v23 + 3896);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    char v25 = *(std::__shared_weak_count **)(v23 + 24);
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    operator delete();
  }
  uint64_t v26 = *(void *)(a1 + 1632);
  *(void *)(a1 + 1632) = 0;
  if (v26)
  {
    uint64_t v27 = *(std::__shared_weak_count **)(v26 + 24);
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    operator delete();
  }
  uint64_t v28 = *(void *)(a1 + 1624);
  *(void *)(a1 + 1624) = 0;
  if (v28)
  {
    if (*(char *)(v28 + 1711) < 0)
    {
      operator delete(*(void **)(v28 + 1688));
      sub_4BCED0(v28 + 152);
      if ((*(char *)(v28 + 135) & 0x80000000) == 0)
      {
LABEL_68:
        if ((*(char *)(v28 + 63) & 0x80000000) == 0) {
          goto LABEL_69;
        }
LABEL_85:
        operator delete(*(void **)(v28 + 40));
LABEL_69:
        operator delete();
      }
    }
    else
    {
      sub_4BCED0(v28 + 152);
      if ((*(char *)(v28 + 135) & 0x80000000) == 0) {
        goto LABEL_68;
      }
    }
    operator delete(*(void **)(v28 + 112));
    if ((*(char *)(v28 + 63) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_85;
  }
  uint64_t v29 = *(void *)(a1 + 1616);
  *(void *)(a1 + 1616) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  std::string v30 = *(void **)(a1 + 1608);
  *(void *)(a1 + 1608) = 0;
  if (v30)
  {
    sub_738128(v30);
    operator delete();
  }
  uint64_t v31 = *(void *)(a1 + 1600);
  *(void *)(a1 + 1600) = 0;
  if (v31) {
    operator delete();
  }
  uint64_t v32 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = 0;
  if (v32)
  {
    uint64_t v33 = *(void *)(v32 + 48);
    if (v33)
    {
      sub_4AA6AC(v32 + 48, v33);
      operator delete(*(void **)(v32 + 48));
    }
    operator delete();
  }
  if (*(char *)(a1 + 1591) < 0) {
    operator delete(*(void **)(a1 + 1568));
  }
  sub_4BCED0(a1 + 32);
  return a1;
}

uint64_t sub_7334B0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = (void **)v0;
  uint64_t v7 = v6;
  uint64_t result = sub_725D0((uint64_t)v31);
  char *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  uint64_t v9 = *v4;
  unint64_t v10 = v4[1];
  if (*v4 != v10)
  {
    while (1)
    {
      uint64_t result = sub_460DC0(v9);
      if (!result) {
        break;
      }
      uint64_t result = sub_45FB38(v9);
      if (result) {
        break;
      }
      v9 += 15;
      if (v9 == v10)
      {
        uint64_t v11 = sub_374EF4(*v5);
        sub_733A28();
        uint64_t v12 = *v7;
        if (*v7)
        {
          uint64_t v13 = (uint64_t)v7[1];
          BOOL v14 = *v7;
          if ((uint64_t *)v13 != v12)
          {
            do
              uint64_t v13 = sub_574D4C(v13 - 7560);
            while ((uint64_t *)v13 != v12);
            BOOL v14 = *v7;
          }
          v7[1] = v12;
          operator delete(v14);
          char *v7 = 0;
          v7[1] = 0;
          v7[2] = 0;
        }
        *(_OWORD *)uint64_t v7 = v41;
        v7[2] = v42;
        nullsub_1(v7);
        sub_725A0((uint64_t)v31);
        sub_4B82E4((uint64_t)&v41, *v5, v11, (uint64_t)(v5 + 4));
        sub_4B82E8(&v41, v7);
        v5[244] = (void *)(round(sub_72688((uint64_t)v31)) + (double)(unint64_t)v5[244]);
        sub_725A0((uint64_t)v31);
        sub_7BF724((uint64_t)v5[220], (uint64_t)(v5 + 156), (uint64_t *)v7);
        v5[245] = (void *)(round(sub_72688((uint64_t)v31)) + (double)(unint64_t)v5[245]);
        sub_725A0((uint64_t)v31);
        sub_79CDF4(v5[219], (uint64_t *)v7);
        v5[246] = (void *)(round(sub_72688((uint64_t)v31)) + (double)(unint64_t)v5[246]);
        sub_735AEC((uint64_t)v5, (char ***)v7);
        sub_725A0((uint64_t)v31);
        sub_62B9C4((int)v28, (int)*v5, 2, *((unsigned __int8 *)v5 + 1557), (std::string *)(v5 + 196));
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7010, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7010))
        {
          sub_737844((uint64_t)&unk_24F6E28);
        }
        int v15 = *(unsigned __int8 *)(v2 + 8);
        uint64_t v16 = *(void **)v2;
        sub_5B98B8((uint64_t)v40, (uint64_t)(v5 + 4));
        if (v15) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = &unk_24F6E28;
        }
        sub_573F00(v32, (uint64_t)*v5, (uint64_t)v40, (uint64_t)v17, (uint64_t)v28);
        int64_t v18 = (char *)v4[1] - (char *)*v4;
        if (v18)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = v18 / 120;
          do
          {
            nullsub_1(v32);
            v20 += 120;
            v19 += 7560;
            --v21;
          }
          while (v21);
        }
        v5[251] = (void *)(round(sub_72688((uint64_t)v31)) + (double)(unint64_t)v5[251]);
        int v22 = *((unsigned __int8 *)v5 + 1437);
        sub_725A0((uint64_t)v31);
        if (v22)
        {
          sub_52CE60((uint64_t)v5[221], (uint64_t *)v7);
          uint64_t v23 = *v7;
          BOOL v24 = v7[1];
          if (*v7 != v24 && *((unsigned char *)v5 + 1546))
          {
LABEL_20:
            if (*((unsigned char *)v5 + 25)) {
              sub_6036F0((uint64_t)v5[207], (uint64_t)v23);
            }
            while (1)
            {
              v23 += 945;
              if (v23 == v24) {
                break;
              }
              if (*((unsigned char *)v5 + 1546)) {
                goto LABEL_20;
              }
            }
          }
          double v25 = round(sub_72688((uint64_t)v31));
          uint64_t v26 = (unint64_t *)(v5 + 247);
        }
        else
        {
          sub_52CE60((uint64_t)v5[202], (uint64_t *)v7);
          double v25 = round(sub_72688((uint64_t)v31));
          uint64_t v26 = (unint64_t *)(v5 + 248);
        }
        unint64_t *v26 = (unint64_t)(v25 + (double)*v26);
        if (v39 < 0) {
          operator delete(__p);
        }
        sub_4BCED0((uint64_t)&v37);
        sub_4F2894((uint64_t)&v36);
        uint64_t v27 = v35;
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        if (v33)
        {
          int v34 = v33;
          operator delete(v33);
        }
        sub_7379DC((uint64_t)v40);
        if (v30 < 0) {
          operator delete(v29);
        }
        return sub_737ADC((uint64_t)&v41);
      }
    }
  }
  return result;
}

void sub_733954(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7010);
  if (SLOBYTE(STACK[0x787]) < 0) {
    operator delete((void *)STACK[0x770]);
  }
  sub_737ADC((uint64_t)&STACK[0x28D0]);
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_733A14(_Unwind_Exception *a1)
{
  sub_574530(v1);
  _Unwind_Resume(a1);
}

void sub_733A28()
{
  uint64_t v0 = __chkstk_darwin();
  char v230 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v0;
  uint64_t v8 = v7;
  sub_725D0((uint64_t)v248);
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  sub_7373AC((char **)v8, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5[1] - *v5) >> 3));
  unint64_t v10 = *v3;
  uint64_t v9 = v3[1];
  uint64_t v239 = v8;
  uint64_t v240 = v6;
  uint64_t v231 = v3;
  if (*v3 != v9)
  {
    while (*((_DWORD *)v10 + 26) != 1)
    {
      v10 += 47;
      if (v10 == v9) {
        goto LABEL_6;
      }
    }
  }
  if (v10 == v9)
  {
LABEL_6:
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire))
    {
      unint64_t v10 = &qword_24F7018;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_24F7190))
      {
        sub_737C74((uint64_t)&qword_24F7018);
        __cxa_guard_release(&qword_24F7190);
      }
      unint64_t v10 = &qword_24F7018;
    }
  }
  uint64_t v229 = (uint64_t)v10;
  sub_EE7318((uint64_t)v243, *(void *)v6);
  uint64_t v11 = (void *)*v5;
  v228 = (void *)v5[1];
  if ((void *)*v5 != v228)
  {
    int v232 = 0;
    uint64_t v226 = v6 + 1259;
    uint64_t v227 = (int32x4_t *)(v6 + 2052);
    uint64_t v238 = v6 + 1000;
    while (2)
    {
      ++*(_DWORD *)(v6 + 2024);
      *(_DWORD *)(v6 + 2028) += sub_45FC7C(v11);
      sub_64ACF8((uint64_t)v287, (uint64_t)v11);
      int v13 = sub_45FE24((uint64_t)v11);
      sub_6478F0((uint64_t)v287, v13);
      char v14 = sub_45FE1C((uint64_t)v11);
      sub_6478E8((uint64_t)v287, v14);
      int v15 = (char **)nullsub_1(v287);
      unint64_t v16 = sub_45FC7C(v11);
      sub_72B560(v15, v16);
      uint64_t v17 = *(void *)(v6 + 1640);
      uint64_t v18 = nullsub_1(v287);
      v235 = v11;
      uint64_t v20 = *(void **)v18;
      uint64_t v19 = *(void **)(v18 + 8);
      if (*(void **)v18 != v19)
      {
        do
        {
          sub_73C6DC(v17, v20);
          v20 += 1541;
        }
        while (v20 != v19);
      }
      uint64_t v21 = *(unsigned __int8 *)(v6 + 1554);
      unint64_t v22 = sub_646938(v287);
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          uint64_t v24 = sub_6467E8(v287, i);
          sub_72B9FC(v6, v235, i, v3, v21, v24);
        }
      }
      double v25 = *(void **)v6;
      uint64_t v26 = (uint64_t *)nullsub_1(v287);
      uint64_t v28 = *v26;
      uint64_t v27 = v26[1];
      if (*v26 != v27)
      {
        do
        {
          sub_73D1DC(v28, v25);
          v28 += 12328;
        }
        while (v28 != v27);
      }
      uint64_t v29 = (uint64_t *)nullsub_1(v287);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v236 = v30;
      while (v31 != v30)
      {
        uint64_t v32 = *(void *)(v31 + 536) - *(void *)(v31 + 528);
        unint64_t v33 = v32 >> 2;
        int v34 = *(unsigned char **)(v31 + 1144);
        unint64_t v35 = *(char **)(v31 + 1136);
        unint64_t v36 = (v34 - v35) >> 2;
        unint64_t v37 = (v32 >> 2) - v36;
        if (v32 >> 2 <= v36)
        {
          if (v32 >> 2 >= v36) {
            goto LABEL_45;
          }
          uint64_t v51 = &v35[4 * v33];
          goto LABEL_36;
        }
        uint64_t v38 = *(void *)(v31 + 1152);
        if (v37 <= (v38 - (uint64_t)v34) >> 2)
        {
          memset_pattern16(*(void **)(v31 + 1144), &unk_20B8FB0, 4 * v37);
          uint64_t v51 = &v34[4 * v37];
LABEL_36:
          *(void *)(v31 + 1144) = v51;
          goto LABEL_45;
        }
        if (v32 < 0) {
          sub_2E00();
        }
        unint64_t v39 = v38 - (void)v35;
        unint64_t v40 = (v38 - (uint64_t)v35) >> 1;
        if (v40 > v33) {
          unint64_t v33 = v40;
        }
        BOOL v41 = v39 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v41) {
          unint64_t v42 = v33;
        }
        if (v42 >> 62) {
          sub_188D718();
        }
        unint64_t v43 = v42;
        uint64_t v44 = (char *)operator new(4 * v42);
        size_t v45 = 4 * v37;
        int v46 = v44;
        long long v47 = &v44[4 * v36];
        size_t v233 = v45;
        memset_pattern16(v47, &unk_20B8FB0, v45);
        if (v34 == v35)
        {
          uint64_t v49 = v47;
          size_t v50 = v233;
          goto LABEL_43;
        }
        unint64_t v48 = v34 - 4 - v35;
        if (v48 < 0x2C)
        {
          uint64_t v49 = v47;
          size_t v50 = v233;
          do
          {
LABEL_42:
            int v59 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v49 - 1) = v59;
            v49 -= 4;
          }
          while (v34 != v35);
          goto LABEL_43;
        }
        uint64_t v49 = v47;
        size_t v50 = v233;
        if ((unint64_t)(v35 - v46) < 0x20) {
          goto LABEL_42;
        }
        uint64_t v52 = (v48 >> 2) + 1;
        uint64_t v53 = 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v54 = &v34[-v53];
        uint64_t v49 = &v47[-v53];
        uint64_t v55 = &v46[4 * v36 - 16];
        int v56 = (long long *)(v34 - 16);
        uint64_t v57 = v52 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v58 = *v56;
          *((_OWORD *)v55 - 1) = *(v56 - 1);
          *(_OWORD *)uint64_t v55 = v58;
          v55 -= 32;
          v56 -= 2;
          v57 -= 8;
        }
        while (v57);
        int v34 = v54;
        if (v52 != (v52 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_42;
        }
LABEL_43:
        *(void *)(v31 + 1136) = v49;
        *(void *)(v31 + 1144) = &v47[v50];
        *(void *)(v31 + 1152) = &v46[4 * v43];
        if (v35) {
          operator delete(v35);
        }
LABEL_45:
        int v60 = sub_46CF04(v31);
        uint64_t v61 = *(void *)(v31 + 1144) - *(void *)(v31 + 1136);
        uint64_t v6 = v240;
        if (v61)
        {
          unint64_t v62 = 0;
          int v63 = *(_DWORD *)(v31 + 768);
          uint64_t v64 = v61 >> 2;
          int v65 = v63 / 10 + v60;
          BOOL v66 = v63 < 0;
          int v67 = v63 % 10;
          if (v66) {
            char v68 = -5;
          }
          else {
            char v68 = 5;
          }
          int v69 = v65 + (((103 * (char)(v68 + v67)) >> 15) & 1) + ((103 * (char)(v68 + v67)) >> 10);
          do
          {
            int v70 = sub_4711DC((void *)v31, v62, 0);
            uint64_t v71 = (_DWORD *)sub_5BBCD0((void *)(v31 + 1136), v62);
            if (v70 < 0) {
              char v72 = -5;
            }
            else {
              char v72 = 5;
            }
            int v73 = 103 * (char)(v72 + v70 % 10);
            v69 += v70 / 10 + ((v73 >> 15) & 1) + (v73 >> 10);
            *uint64_t v71 = v69;
            ++v62;
          }
          while (v64 != v62);
        }
        v31 += 12328;
        uint64_t v30 = v236;
      }
      sub_725A0((uint64_t)v248);
      sub_E962D4(*(void *)(v6 + 1728), (uint64_t)v287);
      *(void *)(v6 + 2000) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                + (double)*(unint64_t *)(v6 + 2000));
      uint64_t v74 = (int32x4_t *)sub_E95E3C(*(void *)(v6 + 1728));
      int32x4_t v75 = v227[1];
      *uint64_t v227 = vaddq_s32(*v227, *v74);
      v227[1] = vaddq_s32(v75, v74[1]);
      sub_725A0((uint64_t)v248);
      uint64_t v76 = *(void *)v6;
      v241 = "showSOS";
      *(void *)&long long v242 = 7;
      int v77 = sub_377A30(v76, (char **)&v241);
      if (*((char *)v77 + 23) < 0)
      {
        sub_4200(__p, (void *)*v77, v77[1]);
      }
      else
      {
        long long v78 = *(_OWORD *)v77;
        uint64_t v250 = v77[2];
        *(_OWORD *)__p = v78;
      }
      uint64_t v79 = *(void *)(v6 + 1800);
      int v80 = SHIBYTE(v250);
      __darwin_ct_rune_t v82 = (void **)__p[0];
      int v81 = (int *)__p[1];
      __darwin_ct_rune_t v83 = __p;
      if (v250 >= 0) {
        int v81 = (int *)HIBYTE(v250);
      }
      else {
        __darwin_ct_rune_t v83 = (void **)__p[0];
      }
      if (v81 == (int *)((char *)&def_332C + 1))
      {
        __darwin_ct_rune_t v96 = *(char *)v83;
        __darwin_ct_rune_t v97 = __toupper(49);
        char v95 = v97 == __toupper(v96);
      }
      else
      {
        if (v81 != dword_4) {
          goto LABEL_74;
        }
        __darwin_ct_rune_t v84 = *(char *)v83;
        __darwin_ct_rune_t v85 = __toupper(116);
        if (v85 != __toupper(v84)) {
          goto LABEL_74;
        }
        __darwin_ct_rune_t v86 = __p;
        if (v80 < 0) {
          __darwin_ct_rune_t v86 = v82;
        }
        __darwin_ct_rune_t v87 = *((char *)v86 + 1);
        __darwin_ct_rune_t v88 = __toupper(114);
        if (v88 != __toupper(v87)) {
          goto LABEL_74;
        }
        uint64_t v89 = __p;
        if (v80 < 0) {
          uint64_t v89 = v82;
        }
        __darwin_ct_rune_t v90 = *((char *)v89 + 2);
        __darwin_ct_rune_t v91 = __toupper(117);
        if (v91 != __toupper(v90)) {
          goto LABEL_74;
        }
        uint64_t v92 = __p;
        if (v80 < 0) {
          uint64_t v92 = v82;
        }
        __darwin_ct_rune_t v93 = *((char *)v92 + 3);
        __darwin_ct_rune_t v94 = __toupper(101);
        if (v94 == __toupper(v93)) {
          char v95 = 1;
        }
        else {
LABEL_74:
        }
          char v95 = 0;
      }
      sub_8DA76C(v79, v226, v95, (uint64_t)v287);
      *(void *)(v6 + 1864) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                + (double)*(unint64_t *)(v6 + 1864));
      if (SHIBYTE(v250) < 0) {
        operator delete(__p[0]);
      }
      sub_78A438(*(void *)(v6 + 1744), (uint64_t)v287);
      sub_725A0((uint64_t)v248);
      sub_82B074(*(void ***)(v6 + 1792), v235, v287);
      *(void *)(v6 + 1848) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                + (double)*(unint64_t *)(v6 + 1848));
      nullsub_1(*(void *)(v6 + 1720));
      nullsub_1(v287);
      v98 = (uint64_t *)nullsub_1(v287);
      uint64_t v99 = *v98;
      uint64_t v100 = v98[1];
      if (*v98 != v100)
      {
        int v101 = v232;
        do
        {
          int v102 = *(char **)(v99 + 1064);
          uint64_t v103 = *(char **)(v99 + 1072);
          if (v102 != v103)
          {
            unint64_t v104 = v103 - v102 - 2400;
            if (v104 >= 0x960)
            {
              unint64_t v107 = v104 / 0x960 + 1;
              int v105 = v101 + (v107 & 0xFFFFFFFE);
              uint64_t v106 = &v102[2400 * (v107 & 0x3FFFFFFFFFFFFELL)];
              int v108 = v101;
              uint64_t v109 = v107 & 0x3FFFFFFFFFFFFELL;
              uint64_t v110 = *(_DWORD **)(v99 + 1064);
              do
              {
                _DWORD *v110 = v108;
                v110[600] = v108 + 1;
                v110 += 1200;
                v108 += 2;
                v109 -= 2;
              }
              while (v109);
              if (v107 == (v107 & 0x3FFFFFFFFFFFFELL)) {
                goto LABEL_80;
              }
            }
            else
            {
              int v105 = v101;
              uint64_t v106 = *(char **)(v99 + 1064);
            }
            do
            {
              *(_DWORD *)uint64_t v106 = v105++;
              v106 += 2400;
            }
            while (v106 != v103);
          }
LABEL_80:
          v101 -= 1775253149 * ((unint64_t)(v103 - v102) >> 5);
          v99 += 12328;
        }
        while (v99 != v100);
      }
      int v234 = sub_64AF54(v287);
      if (!*(unsigned char *)(v6 + 1512)
        || (v111 = nullsub_1(v287), int v112 = *(void **)v111, v237 = *(void **)(v111 + 8), *(void **)v111 == v237))
      {
LABEL_91:
        uint64_t v8 = v239;
        unint64_t v113 = sub_646938(v287);
        if (v113)
        {
          for (uint64_t j = 0; j != v113; ++j)
          {
            uint64_t v115 = sub_6467E8(v287, j);
            uint64_t v116 = *(void *)(v115 + 1064);
            uint64_t v117 = *(void *)(v115 + 1072);
            if (v116 != v117)
            {
              unint64_t v118 = v117 - v116 - 2400;
              if (v118 >= 0x960)
              {
                unint64_t v120 = v118 / 0x960 + 1;
                uint64_t v119 = v116 + 2400 * (v120 & 0x3FFFFFFFFFFFFELL);
                uint64_t v121 = v120 & 0x3FFFFFFFFFFFFELL;
                do
                {
                  *(void *)(v116 + 8) = j;
                  *(void *)(v116 + 2408) = j;
                  v116 += 4800;
                  v121 -= 2;
                }
                while (v121);
                if (v120 == (v120 & 0x3FFFFFFFFFFFFELL)) {
                  continue;
                }
              }
              else
              {
                uint64_t v119 = *(void *)(v115 + 1064);
              }
              do
              {
                *(void *)(v119 + 8) = j;
                v119 += 2400;
              }
              while (v119 != v117);
            }
          }
        }
        v149 = *(void **)v6;
        uint64_t v150 = nullsub_1(v287);
        uint64_t v152 = *(int64x2_t **)v150;
        uint64_t v151 = *(int64x2_t **)(v150 + 8);
        if (*(int64x2_t **)v150 != v151)
        {
          do
          {
            sub_73D57C(v152, v149, v238);
            uint64_t v152 = (int64x2_t *)((char *)v152 + 12328);
          }
          while (v152 != v151);
        }
        sub_725A0((uint64_t)v248);
        sub_839504(*(void *)(v6 + 1776), (uint64_t)v287, v238);
        *(void *)(v6 + 1856) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                  + (double)*(unint64_t *)(v6 + 1856));
        sub_725A0((uint64_t)v248);
        sub_7D72E4(*(void *)(v6 + 1784), (uint64_t)v287);
        *(void *)(v6 + 1880) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                  + (double)*(unint64_t *)(v6 + 1880));
        uint64_t v153 = sub_7CF97C(*(void *)(v6 + 1784));
        *(unsigned char *)(v6 + 2048) |= v154;
        *(unsigned char *)(v6 + 2049) |= v155;
        *(_DWORD *)(v6 + 2040) += v153;
        *(_DWORD *)(v6 + 2044) += HIDWORD(v153);
        if ((v230 & 1) == 0)
        {
          sub_725A0((uint64_t)v248);
          nullsub_1(*(void *)(v6 + 1672));
          *(void *)(v6 + 1888) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1888));
        }
        j_nullsub_1(v287);
        sub_657020(*(void *)(v6 + 1664), (uint64_t)v287);
        uint64_t v156 = (uint64_t *)nullsub_1(v287);
        uint64_t v158 = *v156;
        uint64_t v159 = v156[1];
        if (*v156 != v159)
        {
          do
          {
            sub_736FB8(v6, v158, v157);
            v158 += 12328;
          }
          while (v158 != v159);
        }
        sub_4A95B8(*(unsigned char **)(v6 + 1592), (uint64_t)v287);
        sub_725A0((uint64_t)v248);
        uint64_t v160 = *(void *)(v6 + 1712);
        char v251 = 0;
        char v252 = 0;
        long long v263 = 0u;
        long long v264 = 0u;
        long long v265 = 0u;
        v262[0] = 0;
        *(void *)((char *)v262 + 5) = 0;
        long long v253 = 0u;
        long long v254 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v259 = 0u;
        long long v260 = 0u;
        int v261 = 0;
        uint64_t v266 = 0x3FF0000000000000;
        uint64_t v268 = 0;
        uint64_t v269 = 0;
        uint64_t v267 = 0;
        char v270 = 5;
        long long v271 = 0u;
        long long v272 = 0u;
        long long v273 = 0u;
        int v274 = 0x7FFFFFFF;
        uint64_t v279 = 0;
        uint64_t v280 = 0;
        long long v275 = 0u;
        long long v276 = 0u;
        long long v277 = 0u;
        memset(v278, 0, sizeof(v278));
        uint64_t v281 = -1;
        int v282 = 0x7FFFFFFF;
        uint64_t v283 = 0;
        uint64_t v284 = -1;
        int v285 = -1;
        char v286 = 0;
        sub_7765C0(v160, (uint64_t)v287, (uint64_t)__p);
        sub_4BCC2C((uint64_t)__p);
        long long v161 = (uint64_t *)nullsub_1(v287);
        uint64_t v162 = *v161;
        uint64_t v163 = v161[1];
LABEL_142:
        if (v162 == v163)
        {
          *(void *)(v6 + 1872) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1872));
          sub_725A0((uint64_t)v248);
          nullsub_1(*(void *)(v6 + 1696));
          uint64_t v3 = v231;
          *(void *)(v6 + 1896) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1896));
          sub_725A0((uint64_t)v248);
          sub_51E464(*(void *)(v6 + 1608), (uint64_t)v287);
          *(void *)(v6 + 1912) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1912));
          sub_725A0((uint64_t)v248);
          sub_5C3C64(*(void *)(v6 + 1632), (uint64_t)v287);
          *(void *)(v6 + 1920) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1920));
          sub_725A0((uint64_t)v248);
          nullsub_1(*(void *)(v6 + 1736));
          *(void *)(v6 + 1936) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1936));
          sub_725A0((uint64_t)v248);
          nullsub_1(*(void *)(v6 + 1688));
          *(void *)(v6 + 2016) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 2016));
          sub_725A0((uint64_t)v248);
          nullsub_1(*(void *)(v6 + 1624));
          *(void *)(v6 + 1904) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1904));
          sub_725A0((uint64_t)v248);
          sub_5D8100(*(void *)(v6 + 1648), (uint64_t)v287);
          *(void *)(v6 + 1928) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1928));
          sub_725A0((uint64_t)v248);
          sub_70CB2C(*(void *)(v6 + 1704), v287);
          *(void *)(v6 + 1944) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1944));
          sub_725A0((uint64_t)v248);
          sub_4ACDA4(*(void *)(v6 + 1600), v229, v287);
          *(void *)(v6 + 1992) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1992));
          sub_725A0((uint64_t)v248);
          sub_776830(*(uint64_t **)(v6 + 1712), (uint64_t)v287, (uint64_t *)__p);
          sub_648B6C((uint64_t)v287, (uint64_t *)__p);
          v206 = (char *)__p[0];
          if (!__p[0]) {
            goto LABEL_242;
          }
          v207 = (char *)__p[1];
          v208 = __p[0];
          if (__p[1] == __p[0]) {
            goto LABEL_241;
          }
          uint64_t v209 = 0;
          while (2)
          {
            v210 = &v207[v209];
            if (v207[v209 - 8])
            {
              sub_3A6CB8((uint64_t)(v210 - 440));
              *(v210 - 8) = 0;
            }
            *((void *)v210 - 60) = off_2438EC8;
            if (*(v210 - 449) < 0) {
              operator delete(*(void **)&v207[v209 - 472]);
            }
            uint64_t v211 = (void **)&v207[v209];
            int v212 = &v207[v209 - 488];
            if (*v212) {
              *int v212 = 0;
            }
            if ((*((char *)v211 - 505) & 0x80000000) == 0)
            {
              int v213 = (void **)&v207[v209];
              if ((v207[v209 - 537] & 0x80000000) == 0) {
                goto LABEL_226;
              }
LABEL_235:
              operator delete(*(v213 - 70));
              if (*((char *)v213 - 561) < 0) {
                goto LABEL_236;
              }
LABEL_227:
              int v214 = (void **)&v207[v209];
              if ((v207[v209 - 601] & 0x80000000) == 0) {
                goto LABEL_228;
              }
LABEL_237:
              operator delete(*(v214 - 78));
              if (*((char *)v214 - 633) < 0) {
                goto LABEL_238;
              }
LABEL_229:
              uint64_t v215 = (void **)&v207[v209];
              if ((v207[v209 - 657] & 0x80000000) == 0) {
                goto LABEL_230;
              }
LABEL_239:
              operator delete(*(v215 - 85));
              uint64_t v216 = (char *)(v215 - 86);
              if (!*((unsigned char *)v215 - 688)) {
                goto LABEL_232;
              }
LABEL_231:
              *uint64_t v216 = 0;
              goto LABEL_232;
            }
            operator delete(*(void **)&v207[v209 - 528]);
            int v213 = (void **)&v207[v209];
            if (v207[v209 - 537] < 0) {
              goto LABEL_235;
            }
LABEL_226:
            if ((*((char *)v213 - 561) & 0x80000000) == 0) {
              goto LABEL_227;
            }
LABEL_236:
            operator delete(*(void **)&v207[v209 - 584]);
            int v214 = (void **)&v207[v209];
            if (v207[v209 - 601] < 0) {
              goto LABEL_237;
            }
LABEL_228:
            if ((*((char *)v214 - 633) & 0x80000000) == 0) {
              goto LABEL_229;
            }
LABEL_238:
            operator delete(*(v211 - 82));
            uint64_t v215 = (void **)&v207[v209];
            if (v207[v209 - 657] < 0) {
              goto LABEL_239;
            }
LABEL_230:
            uint64_t v216 = (char *)(v215 - 86);
            if (*((unsigned char *)v215 - 688)) {
              goto LABEL_231;
            }
LABEL_232:
            sub_29D95C((uint64_t)(v210 - 1120));
            v209 -= 1120;
            uint64_t v8 = v239;
            if (&v207[v209] != v206) {
              continue;
            }
            break;
          }
          v208 = __p[0];
          uint64_t v3 = v231;
LABEL_241:
          __p[1] = v206;
          operator delete(v208);
LABEL_242:
          *(void *)(v6 + 1872) = (unint64_t)(round(sub_72688((uint64_t)v248))
                                                    + (double)*(unint64_t *)(v6 + 1872));
          uint64_t v217 = (void *)nullsub_1(v287);
          if (*v217 != v217[1])
          {
            uint64_t v218 = *(void *)nullsub_1(v287);
            int v219 = sub_46CF04(v218);
            int v220 = sub_471160((unsigned int *)v218, 0);
            int v221 = sub_471160((unsigned int *)v218, 1);
            uint64_t v222 = *(void *)(v218 + 504);
            v241 = (void *)0x8000000080000000;
            long long v242 = xmmword_20E8160;
            LODWORD(v242) = 0x7FFFFFFF;
            sub_EE731C((uint64_t)v243, v219, v220, v221, v222, (int *)&v241, (uint64_t)__p);
            sub_6478F8((uint64_t)v287, (__n128 *)__p);
          }
          uint64_t v223 = sub_45FE5C((uint64_t)v235);
          uint64_t v224 = *(unsigned __int8 *)(v223 + 23);
          if ((v224 & 0x80u) != 0) {
            uint64_t v224 = *(void *)(v223 + 8);
          }
          if (v224
            && (sub_45FE5C((uint64_t)v235),
                std::operator+<char>(),
                sub_5F3D48((uint64_t)__p, (uint64_t)&v241),
                sub_647AEC(v287, (uint64_t)__p),
                sub_4D4B58((uint64_t)__p),
                SHIBYTE(v242) < 0))
          {
            operator delete(v241);
            unint64_t v225 = *(void *)(v8 + 8);
            if (v225 < *(void *)(v8 + 16)) {
              goto LABEL_10;
            }
LABEL_249:
            uint64_t v12 = sub_73DC30((uint64_t *)v8, (uint64_t)v287);
          }
          else
          {
            unint64_t v225 = *(void *)(v8 + 8);
            if (v225 >= *(void *)(v8 + 16)) {
              goto LABEL_249;
            }
LABEL_10:
            uint64_t v12 = sub_73BD9C(v225, (uint64_t)v287) + 7560;
          }
          v232 += v234;
          *(void *)(v8 + 8) = v12;
          sub_574D4C((uint64_t)v287);
          uint64_t v11 = v235 + 15;
          if (v235 + 15 == v228) {
            goto LABEL_253;
          }
          continue;
        }
        uint64_t v164 = *(void *)(v162 + 7352);
        uint64_t v165 = *(void *)(v162 + 7360);
        if (v164 == v165) {
          goto LABEL_144;
        }
        while (!sub_35876C(v164, 2) || sub_3587DC(v164, 2))
        {
          v164 += 1120;
          if (v164 == v165)
          {
            uint64_t v166 = v165;
            goto LABEL_190;
          }
        }
        if (v164 == v165 || v164 + 1120 == v165)
        {
LABEL_144:
          uint64_t v166 = v164;
        }
        else
        {
          uint64_t v166 = v164;
          do
          {
            if (!sub_35876C(v164 + 1120, 2) || sub_3587DC(v164 + 1120, 2))
            {
              sub_301388((char **)v166, v164 + 1120);
              if (*(unsigned char *)(v164 + 1552))
              {
                uint64_t v179 = *(void *)(v164 + 1544);
                if (!*(unsigned char *)(v166 + 432)) {
                  *(unsigned char *)(v166 + 432) = 1;
                }
                *(void *)(v166 + 424) = v179;
              }
              else if (*(unsigned char *)(v166 + 432))
              {
                *(unsigned char *)(v166 + 432) = 0;
              }
              long long v180 = (void **)(v166 + 440);
              if (*(char *)(v166 + 463) < 0) {
                operator delete(*v180);
              }
              long long v181 = *(_OWORD *)(v164 + 1560);
              *(void *)(v166 + 456) = *(void *)(v164 + 1576);
              *(_OWORD *)long long v180 = v181;
              *(unsigned char *)(v164 + 1583) = 0;
              *(unsigned char *)(v164 + 1560) = 0;
              long long v182 = (void **)(v166 + 464);
              if (*(char *)(v166 + 487) < 0) {
                operator delete(*v182);
              }
              long long v183 = *(_OWORD *)(v164 + 1584);
              *(void *)(v166 + 480) = *(void *)(v164 + 1600);
              *(_OWORD *)long long v182 = v183;
              *(unsigned char *)(v164 + 1607) = 0;
              *(unsigned char *)(v164 + 1584) = 0;
              *(void *)(v166 + 488) = *(void *)(v164 + 1608);
              long long v184 = (void **)(v166 + 496);
              if (*(char *)(v166 + 519) < 0) {
                operator delete(*v184);
              }
              long long v185 = *(_OWORD *)(v164 + 1616);
              *(void *)(v166 + 512) = *(void *)(v164 + 1632);
              *(_OWORD *)long long v184 = v185;
              *(unsigned char *)(v164 + 1639) = 0;
              *(unsigned char *)(v164 + 1616) = 0;
              *(void *)(v166 + 520) = *(void *)(v164 + 1640);
              *(_DWORD *)(v166 + 528) = *(_DWORD *)(v164 + 1648);
              uint64_t v186 = (void **)(v166 + 536);
              if (*(char *)(v166 + 559) < 0) {
                operator delete(*v186);
              }
              long long v187 = *(_OWORD *)(v164 + 1656);
              *(void *)(v166 + 552) = *(void *)(v164 + 1672);
              *(_OWORD *)uint64_t v186 = v187;
              *(unsigned char *)(v164 + 1679) = 0;
              *(unsigned char *)(v164 + 1656) = 0;
              long long v188 = (void **)(v166 + 560);
              if (*(char *)(v166 + 583) < 0) {
                operator delete(*v188);
              }
              long long v189 = *(_OWORD *)(v164 + 1680);
              *(void *)(v166 + 576) = *(void *)(v164 + 1696);
              *(_OWORD *)long long v188 = v189;
              *(unsigned char *)(v164 + 1703) = 0;
              *(unsigned char *)(v164 + 1680) = 0;
              *(_DWORD *)(v166 + 584) = *(_DWORD *)(v164 + 1704);
              uint64_t v190 = (void **)(v166 + 592);
              if (*(char *)(v166 + 615) < 0) {
                operator delete(*v190);
              }
              long long v191 = *(_OWORD *)(v164 + 1712);
              *(void *)(v166 + 608) = *(void *)(v164 + 1728);
              *(_OWORD *)uint64_t v190 = v191;
              *(unsigned char *)(v164 + 1735) = 0;
              *(unsigned char *)(v164 + 1712) = 0;
              char v192 = *(unsigned char *)(v164 + 1740);
              if (v192)
              {
                *(_DWORD *)(v166 + 616) = *(_DWORD *)(v164 + 1736);
                char v192 = 1;
              }
              *(unsigned char *)(v166 + 620) = v192;
              if (*(unsigned char *)(v164 + 1752))
              {
                uint64_t v193 = *(void *)(v164 + 1744);
                if (!*(unsigned char *)(v166 + 632)) {
                  *(unsigned char *)(v166 + 632) = 1;
                }
                *(void *)(v166 + 624) = v193;
              }
              else if (*(unsigned char *)(v166 + 632))
              {
                *(unsigned char *)(v166 + 632) = 0;
              }
              v194 = (void **)(v166 + 648);
              if (*(char *)(v166 + 671) < 0) {
                operator delete(*v194);
              }
              long long v195 = *(_OWORD *)(v164 + 1768);
              *(void *)(v166 + 664) = *(void *)(v164 + 1784);
              *(_OWORD *)v194 = v195;
              *(unsigned char *)(v164 + 1791) = 0;
              *(unsigned char *)(v164 + 1768) = 0;
              *(_WORD *)(v166 + 672) = *(_WORD *)(v164 + 1792);
              uint64_t v196 = v166 + 680;
              if (*(unsigned char *)(v164 + 2232))
              {
                if (*(unsigned char *)(v166 + 1112))
                {
                  sub_4C2350(v196, v164 + 1800);
                }
                else
                {
                  *(unsigned char *)(v166 + 680) = *(unsigned char *)(v164 + 1800);
                  *(void *)(v166 + 688) = 0;
                  *(_OWORD *)(v166 + 696) = 0u;
                  *(_OWORD *)(v166 + 688) = *(_OWORD *)(v164 + 1808);
                  *(void *)(v166 + 704) = *(void *)(v164 + 1824);
                  *(void *)(v164 + 1824) = 0;
                  *(_OWORD *)(v164 + 1808) = 0u;
                  *(void *)(v166 + 728) = 0;
                  *(_OWORD *)(v166 + 712) = 0u;
                  *(void *)(v166 + 712) = *(void *)(v164 + 1832);
                  *(void *)(v166 + 720) = *(void *)(v164 + 1840);
                  *(void *)(v166 + 728) = *(void *)(v164 + 1848);
                  *(void *)(v164 + 1848) = 0;
                  *(_OWORD *)(v164 + 1832) = 0u;
                  *(_DWORD *)(v166 + 736) = *(_DWORD *)(v164 + 1856);
                  *(_OWORD *)(v166 + 752) = 0u;
                  *(void *)(v166 + 744) = 0;
                  *(void *)(v166 + 744) = *(void *)(v164 + 1864);
                  *(void *)(v166 + 752) = *(void *)(v164 + 1872);
                  *(void *)(v166 + 760) = *(void *)(v164 + 1880);
                  *(void *)(v164 + 1880) = 0;
                  *(_OWORD *)(v164 + 1864) = 0u;
                  *(void *)(v166 + 784) = 0;
                  *(_OWORD *)(v166 + 768) = 0u;
                  *(_OWORD *)(v166 + 768) = *(_OWORD *)(v164 + 1888);
                  *(void *)(v166 + 784) = *(void *)(v164 + 1904);
                  *(void *)(v164 + 1904) = 0;
                  *(_OWORD *)(v164 + 1888) = 0u;
                  long long v167 = *(_OWORD *)(v164 + 1912);
                  *(void *)(v166 + 808) = *(void *)(v164 + 1928);
                  *(_OWORD *)(v166 + 792) = v167;
                  *(void *)(v164 + 1912) = 0;
                  *(_OWORD *)(v164 + 1920) = 0u;
                  long long v168 = *(_OWORD *)(v164 + 1952);
                  *(_OWORD *)(v166 + 816) = *(_OWORD *)(v164 + 1936);
                  *(_OWORD *)(v166 + 832) = v168;
                  long long v169 = *(_OWORD *)(v164 + 1968);
                  *(void *)(v166 + 864) = *(void *)(v164 + 1984);
                  *(_OWORD *)(v166 + 848) = v169;
                  *(_OWORD *)(v164 + 1976) = 0u;
                  *(void *)(v164 + 1968) = 0;
                  long long v170 = *(_OWORD *)(v164 + 1992);
                  *(void *)(v166 + 888) = *(void *)(v164 + 2008);
                  *(_OWORD *)(v166 + 872) = v170;
                  *(void *)(v164 + 2008) = 0;
                  *(_OWORD *)(v164 + 1992) = 0u;
                  long long v171 = *(_OWORD *)(v164 + 2016);
                  *(void *)(v166 + 912) = *(void *)(v164 + 2032);
                  *(_OWORD *)(v166 + 896) = v171;
                  *(void *)(v164 + 2032) = 0;
                  *(_OWORD *)(v164 + 2016) = 0u;
                  *(unsigned char *)(v166 + 920) = *(unsigned char *)(v164 + 2040);
                  long long v172 = *(_OWORD *)(v164 + 2048);
                  *(void *)(v166 + 944) = *(void *)(v164 + 2064);
                  *(_OWORD *)(v166 + 928) = v172;
                  *(_OWORD *)(v164 + 2056) = 0u;
                  *(void *)(v164 + 2048) = 0;
                  long long v173 = *(_OWORD *)(v164 + 2072);
                  *(void *)(v166 + 968) = *(void *)(v164 + 2088);
                  *(_OWORD *)(v166 + 952) = v173;
                  *(_OWORD *)(v164 + 2080) = 0u;
                  *(void *)(v164 + 2072) = 0;
                  long long v174 = *(_OWORD *)(v164 + 2096);
                  *(void *)(v166 + 992) = *(void *)(v164 + 2112);
                  *(_OWORD *)(v166 + 976) = v174;
                  *(_OWORD *)(v164 + 2104) = 0u;
                  *(void *)(v164 + 2096) = 0;
                  *(unsigned char *)(v166 + 1000) = *(unsigned char *)(v164 + 2120);
                  long long v175 = *(_OWORD *)(v164 + 2128);
                  *(void *)(v166 + 1024) = *(void *)(v164 + 2144);
                  *(_OWORD *)(v166 + 1008) = v175;
                  *(_OWORD *)(v164 + 2136) = 0u;
                  *(void *)(v164 + 2128) = 0;
                  long long v176 = *(_OWORD *)(v164 + 2152);
                  *(void *)(v166 + 1048) = *(void *)(v164 + 2168);
                  *(_OWORD *)(v166 + 1032) = v176;
                  *(_OWORD *)(v164 + 2160) = 0u;
                  *(void *)(v164 + 2152) = 0;
                  long long v177 = *(_OWORD *)(v164 + 2176);
                  *(void *)(v166 + 1072) = *(void *)(v164 + 2192);
                  *(_OWORD *)(v166 + 1056) = v177;
                  *(_OWORD *)(v164 + 2184) = 0u;
                  *(void *)(v164 + 2176) = 0;
                  *(_WORD *)(v166 + 1080) = *(_WORD *)(v164 + 2200);
                  *(_WORD *)(v166 + 1082) = *(_WORD *)(v164 + 2202);
                  *(void *)(v166 + 1088) = 0;
                  *(_OWORD *)(v166 + 1096) = 0u;
                  *(_OWORD *)(v166 + 1088) = *(_OWORD *)(v164 + 2208);
                  *(void *)(v166 + 1104) = *(void *)(v164 + 2224);
                  *(void *)(v164 + 2224) = 0;
                  *(_OWORD *)(v164 + 2208) = 0u;
                  *(unsigned char *)(v166 + 1112) = 1;
                }
              }
              else if (*(unsigned char *)(v166 + 1112))
              {
                sub_3A6CB8(v196);
                *(unsigned char *)(v166 + 1112) = 0;
              }
              v166 += 1120;
            }
            uint64_t v178 = v164 + 2240;
            v164 += 1120;
          }
          while (v178 != v165);
        }
LABEL_190:
        uint64_t v197 = *(void *)(v162 + 7360);
        if (v166 == v197) {
          goto LABEL_141;
        }
        uint64_t v198 = 0;
        while (1)
        {
          uint64_t v199 = v197 + v198;
          if (*(unsigned char *)(v197 + v198 - 8))
          {
            sub_3A6CB8(v199 - 440);
            *(unsigned char *)(v199 - 8) = 0;
          }
          *(void *)(v199 - 480) = off_2438EC8;
          if (*(char *)(v199 - 449) < 0) {
            operator delete(*(void **)(v197 + v198 - 472));
          }
          uint64_t v200 = v197 + v198;
          v201 = (unsigned char *)(v197 + v198 - 488);
          if (*v201) {
            unsigned char *v201 = 0;
          }
          if (*(char *)(v200 - 505) < 0)
          {
            operator delete(*(void **)(v197 + v198 - 528));
            uint64_t v202 = v197 + v198;
            if ((*(char *)(v197 + v198 - 537) & 0x80000000) == 0)
            {
LABEL_200:
              if ((*(char *)(v202 - 561) & 0x80000000) == 0) {
                goto LABEL_201;
              }
              goto LABEL_210;
            }
          }
          else
          {
            uint64_t v202 = v197 + v198;
            if ((*(char *)(v197 + v198 - 537) & 0x80000000) == 0) {
              goto LABEL_200;
            }
          }
          operator delete(*(void **)(v202 - 560));
          if ((*(char *)(v202 - 561) & 0x80000000) == 0)
          {
LABEL_201:
            uint64_t v203 = v197 + v198;
            if ((*(char *)(v197 + v198 - 601) & 0x80000000) == 0) {
              goto LABEL_202;
            }
            goto LABEL_211;
          }
LABEL_210:
          operator delete(*(void **)(v197 + v198 - 584));
          uint64_t v203 = v197 + v198;
          if ((*(char *)(v197 + v198 - 601) & 0x80000000) == 0)
          {
LABEL_202:
            if ((*(char *)(v203 - 633) & 0x80000000) == 0) {
              goto LABEL_203;
            }
            goto LABEL_212;
          }
LABEL_211:
          operator delete(*(void **)(v203 - 624));
          if ((*(char *)(v203 - 633) & 0x80000000) == 0)
          {
LABEL_203:
            uint64_t v204 = v197 + v198;
            if (*(char *)(v197 + v198 - 657) < 0) {
              goto LABEL_213;
            }
            goto LABEL_204;
          }
LABEL_212:
          operator delete(*(void **)(v200 - 656));
          uint64_t v204 = v197 + v198;
          if (*(char *)(v197 + v198 - 657) < 0)
          {
LABEL_213:
            operator delete(*(void **)(v204 - 680));
            v205 = (unsigned char *)(v204 - 688);
            uint64_t v6 = v240;
            if (!*(unsigned char *)(v204 - 688)) {
              goto LABEL_206;
            }
LABEL_205:
            unsigned char *v205 = 0;
            goto LABEL_206;
          }
LABEL_204:
          v205 = (unsigned char *)(v204 - 688);
          uint64_t v6 = v240;
          if (*(unsigned char *)(v204 - 688)) {
            goto LABEL_205;
          }
LABEL_206:
          sub_29D95C(v199 - 1120);
          v198 -= 1120;
          uint64_t v8 = v239;
          if (v197 + v198 == v166)
          {
            *(void *)(v162 + 7360) = v166;
LABEL_141:
            v162 += 12328;
            goto LABEL_142;
          }
        }
      }
      break;
    }
    while (1)
    {
      if (sub_470ADC(v112))
      {
        uint64_t v122 = *(int **)(sub_40EFE8((uint64_t)v112) + 16);
        unint64_t v123 = (unsigned __int16 *)((char *)v122 - *v122);
        if (*v123 >= 0x11u && (uint64_t v124 = v123[8]) != 0) {
          int v125 = (*(unsigned __int16 *)((char *)v122 + v124) >> 3) & 1;
        }
        else {
          LOBYTE(v125) = 0;
        }
        unint64_t v126 = sub_470ADC(v112);
        if (v126) {
          break;
        }
      }
LABEL_102:
      v112 += 1541;
      uint64_t v6 = v240;
      if (v112 == v237) {
        goto LABEL_91;
      }
    }
    uint64_t v127 = 0;
    unint64_t v128 = 0;
    BOOL v129 = (void **)(v112 + 1507);
    while (1)
    {
      v130 = *(int **)(sub_470B40(v112, v128) + 16);
      v132 = (unsigned __int16 *)((char *)v130 - *v130);
      if (*v132 >= 0x11u && (uint64_t v133 = v132[8]) != 0)
      {
        BOOL v134 = (*(_WORD *)((unsigned char *)v130 + v133) & 8) == 0;
        if ((((v125 == 0) ^ v134) & 1) == 0)
        {
          LOBYTE(v125) = v134;
          unint64_t v135 = (unsigned char *)v112[1508];
          unint64_t v136 = v112[1509];
          if ((unint64_t)v135 >= v136) {
            goto LABEL_117;
          }
          goto LABEL_114;
        }
      }
      else if (!(_BYTE)v125)
      {
        LOBYTE(v125) = 1;
        unint64_t v135 = (unsigned char *)v112[1508];
        unint64_t v136 = v112[1509];
        if ((unint64_t)v135 >= v136)
        {
LABEL_117:
          v138 = *v129;
          uint64_t v139 = (v135 - (unsigned char *)*v129) >> 4;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v141 = v136 - (void)v138;
          if (v141 >> 3 > v140) {
            unint64_t v140 = v141 >> 3;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v142 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142 >> 60) {
            sub_188D718();
          }
          uint64_t v143 = (char *)operator new(16 * v142);
          v144 = &v143[16 * v139];
          *(void *)v144 = v127;
          v144[8] = v125;
          if (v135 == v138)
          {
            char v148 = &v143[16 * v142];
            v112[1507] = v144;
            unint64_t v137 = v144 + 16;
            v112[1508] = v144 + 16;
            v112[1509] = v148;
            if (v138) {
              goto LABEL_128;
            }
          }
          else
          {
            v145 = &v143[16 * v139];
            do
            {
              uint64_t v146 = v145 - 16;
              long long v131 = *((_OWORD *)v135 - 1);
              *((_OWORD *)v145 - 1) = v131;
              v135 -= 16;
              v145 -= 16;
            }
            while (v135 != v138);
            char v147 = &v143[16 * v142];
            v112[1507] = v146;
            unint64_t v137 = v144 + 16;
            v112[1508] = v144 + 16;
            v112[1509] = v147;
            if (v138) {
LABEL_128:
            }
              operator delete(v138);
          }
LABEL_129:
          v112[1508] = v137;
          goto LABEL_130;
        }
LABEL_114:
        *(void *)unint64_t v135 = v127;
        v135[8] = v125;
        unint64_t v137 = v135 + 16;
        goto LABEL_129;
      }
LABEL_130:
      v127 += sub_470F2C(v112, v128++, *(double *)&v131);
      if (v128 == v126) {
        goto LABEL_102;
      }
    }
  }
  int v232 = 0;
LABEL_253:
  *(_DWORD *)(v6 + 2036) = 0;
  *(_DWORD *)(v6 + 2032) = v232;
  sub_725A0((uint64_t)v248);
  sub_5BEE74(*(void *)(v6 + 1632), (uint64_t *)v8);
  *(void *)(v6 + 1920) = (unint64_t)(round(sub_72688((uint64_t)v248)) + (double)*(unint64_t *)(v6 + 1920));
  if (v246)
  {
    long long v247 = v246;
    operator delete(v246);
  }
  if (v244)
  {
    long long v245 = v244;
    operator delete(v244);
  }
}

void sub_735968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
}

void sub_73598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_5ABC24(&a35);
  sub_574530(v35);
  _Unwind_Resume(a1);
}

void sub_735A54()
{
}

void sub_735A70()
{
}

void sub_735AA8()
{
}

void sub_735AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_574D4C((uint64_t)&STACK[0x418]);
  sub_5ABC24(&a35);
  sub_574530(v35);
  _Unwind_Resume(a1);
}

void sub_735AEC(uint64_t a1, char ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return;
  }
  do
  {
    uint64_t v5 = sub_647FB0(v3);
    if (v5) {
      break;
    }
    v3 += 945;
  }
  while (v3 != v2);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    return;
  }
  do
  {
    uint64_t v107 = sub_647E2C(v7);
    if (v107) {
      break;
    }
    v7 += 945;
  }
  while (v7 != v6);
  uint64_t v9 = (uint64_t)*a2;
  uint64_t v8 = a2[1];
  if (*a2 == v8) {
    return;
  }
  do
  {
    unint64_t v10 = (uint64_t *)sub_648B60(v9);
    uint64_t v11 = v10[1];
    v9 += 7560;
  }
  while (v11 == *v10 && v9 != (void)v8);
  int v13 = (uint64_t *)*a2;
  int v105 = (uint64_t *)a2[1];
  if (*a2 == (char **)v105) {
    return;
  }
  if (v5) {
    int v14 = 2;
  }
  else {
    int v14 = 1;
  }
  if (v107) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
  int v100 = v15;
  int v101 = v14;
  if (v11 == *v10) {
    int v16 = 1;
  }
  else {
    int v16 = 2;
  }
  int v102 = v16;
  uint64_t v103 = *v10;
  uint64_t v104 = v10[1];
  while (2)
  {
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_268;
    }
    sub_64BA88(v13, (uint64_t *)&__p);
    sub_64B9F0(v13, (uint64_t *)&v113);
    uint64_t v117 = 0;
    long long v118 = 0uLL;
    uint64_t v18 = (char *)__p;
    uint64_t v19 = (char *)v116;
    if (__p == (void *)v116)
    {
      int v108 = 0;
      uint64_t v110 = 0;
      int v20 = v101;
      goto LABEL_78;
    }
    do
    {
      while (1)
      {
        uint64_t v21 = v118;
        if ((unint64_t)v118 >= *((void *)&v118 + 1)) {
          break;
        }
        *(_DWORD *)(v118 + 1120) = -1;
        uint64_t v22 = v21 + 1128;
        *(void *)&long long v118 = v21 + 1128;
        uint64_t v23 = v21;
        int v24 = *(_DWORD *)(v21 + 1120);
        if (v24 != 1) {
          goto LABEL_34;
        }
LABEL_40:
        if (*(unsigned char *)(v22 - 16))
        {
          sub_3A6CB8(v22 - 448);
          *(unsigned char *)(v22 - 16) = 0;
        }
        *(void *)(v23 + 640) = off_2438EC8;
        if (*(char *)(v23 + 671) < 0) {
          operator delete(*(void **)(v22 - 480));
        }
        if (*(unsigned char *)(v22 - 496)) {
          *(unsigned char *)(v22 - 496) = 0;
        }
        if (*(char *)(v22 - 513) < 0)
        {
          operator delete(*(void **)(v22 - 536));
          if ((*(char *)(v22 - 545) & 0x80000000) == 0)
          {
LABEL_48:
            if ((*(char *)(v22 - 569) & 0x80000000) == 0) {
              goto LABEL_49;
            }
            goto LABEL_56;
          }
        }
        else if ((*(char *)(v22 - 545) & 0x80000000) == 0)
        {
          goto LABEL_48;
        }
        operator delete(*(void **)(v22 - 568));
        if ((*(char *)(v22 - 569) & 0x80000000) == 0)
        {
LABEL_49:
          if ((*(char *)(v22 - 609) & 0x80000000) == 0) {
            goto LABEL_50;
          }
          goto LABEL_57;
        }
LABEL_56:
        operator delete(*(void **)(v22 - 592));
        if ((*(char *)(v22 - 609) & 0x80000000) == 0)
        {
LABEL_50:
          if ((*(char *)(v22 - 641) & 0x80000000) == 0) {
            goto LABEL_51;
          }
          goto LABEL_58;
        }
LABEL_57:
        operator delete(*(void **)(v22 - 632));
        if ((*(char *)(v22 - 641) & 0x80000000) == 0)
        {
LABEL_51:
          if ((*(char *)(v22 - 665) & 0x80000000) == 0) {
            goto LABEL_52;
          }
          goto LABEL_59;
        }
LABEL_58:
        operator delete(*(void **)(v22 - 664));
        if ((*(char *)(v22 - 665) & 0x80000000) == 0)
        {
LABEL_52:
          uint64_t v26 = (unsigned char *)(v22 - 696);
          if (!*(unsigned char *)(v22 - 696)) {
            goto LABEL_30;
          }
LABEL_60:
          unsigned char *v26 = 0;
          goto LABEL_30;
        }
LABEL_59:
        operator delete(*(void **)(v22 - 688));
        uint64_t v26 = (unsigned char *)(v22 - 696);
        if (*(unsigned char *)(v22 - 696)) {
          goto LABEL_60;
        }
LABEL_30:
        sub_29D95C(v23);
LABEL_31:
        sub_4BD34C(v23, (uint64_t)v18);
        *(_DWORD *)(v22 - 8) = 0;
        v18 += 168;
        if (v18 == v19) {
          goto LABEL_61;
        }
      }
      uint64_t v22 = sub_737FA0((uint64_t *)&v117);
      *(void *)&long long v118 = v22;
      uint64_t v23 = v22 - 1128;
      int v24 = *(_DWORD *)(v22 - 8);
      if (v24 == 1) {
        goto LABEL_40;
      }
LABEL_34:
      if (v24) {
        goto LABEL_31;
      }
      *(void *)uint64_t v23 = *(void *)v18;
      std::string::operator=((std::string *)(v22 - 1120), (const std::string *)(v18 + 8));
      long long v25 = *((_OWORD *)v18 + 2);
      *(_DWORD *)(v23 + 48) = *((_DWORD *)v18 + 12);
      *(_OWORD *)(v23 + 32) = v25;
      std::string::operator=((std::string *)(v22 - 1072), (const std::string *)(v18 + 56));
      std::string::operator=((std::string *)(v22 - 1048), (const std::string *)(v18 + 80));
      if (v18 != (char *)v23) {
        sub_69208(v22 - 1024, *((std::string **)v18 + 13), *((std::string **)v18 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v18 + 14) - *((void *)v18 + 13)) >> 3));
      }
      *(_WORD *)(v22 - 1000) = *((_WORD *)v18 + 64);
      std::string::operator=((std::string *)(v22 - 992), (const std::string *)(v18 + 136));
      *(_WORD *)(v22 - 968) = *((_WORD *)v18 + 80);
      *(_DWORD *)(v22 - 8) = 0;
      v18 += 168;
    }
    while (v18 != v19);
LABEL_61:
    uint64_t v27 = (uint64_t)v117;
    int v108 = v117;
    uint64_t v110 = (void *)v118;
    if (v5)
    {
      uint64_t v28 = v118;
      if ((void *)v118 == v117)
      {
        int v20 = 2;
      }
      else
      {
        uint64_t v29 = (uint64_t)v117;
        do
        {
          if (sub_73DD94((uint64_t)&v117, v29, 0) && sub_73DD94((uint64_t)&v117, v29, 1))
          {
            int v20 = 6;
            goto LABEL_78;
          }
          v29 += 1128;
        }
        while (v29 != v28);
        uint64_t v30 = v27;
        do
        {
          if (sub_73DD94((uint64_t)&v117, v30, 1))
          {
            int v20 = 4;
            goto LABEL_78;
          }
          v30 += 1128;
        }
        while (v30 != v28);
        while (!sub_73DD94((uint64_t)&v117, v27, 0))
        {
          v27 += 1128;
          if (v27 == v28)
          {
            int v20 = 7;
            goto LABEL_78;
          }
        }
        int v20 = 5;
      }
    }
    else
    {
      int v20 = 1;
    }
LABEL_78:
    int v112 = v20;
    sub_647DD8(v13, &v112);
    uint64_t v31 = v108;
    if (v108)
    {
      uint64_t v32 = (uint64_t)v110;
      if (v110 == v108)
      {
LABEL_124:
        operator delete(v31);
        goto LABEL_125;
      }
      while (2)
      {
        uint64_t v33 = v32;
        v32 -= 1128;
        int v34 = *(_DWORD *)(v33 - 8);
        if (v34 != 1)
        {
          if (!v34)
          {
            if (*(char *)(v33 - 969) < 0)
            {
              operator delete(*(void **)(v33 - 992));
              unint64_t v35 = (void **)(v33 - 1024);
              unint64_t v36 = *(void ***)(v33 - 1024);
              if (v36) {
                goto LABEL_106;
              }
LABEL_87:
              if ((*(char *)(v33 - 1025) & 0x80000000) == 0) {
                goto LABEL_88;
              }
LABEL_113:
              operator delete(*(void **)(v33 - 1048));
              if (*(char *)(v33 - 1049) < 0) {
                goto LABEL_114;
              }
LABEL_89:
              if (*(char *)(v33 - 1097) < 0) {
LABEL_115:
              }
                operator delete(*(void **)(v33 - 1120));
            }
            else
            {
              unint64_t v35 = (void **)(v33 - 1024);
              unint64_t v36 = *(void ***)(v33 - 1024);
              if (!v36) {
                goto LABEL_87;
              }
LABEL_106:
              uint64_t v38 = *(void ***)(v33 - 1016);
              unint64_t v39 = v36;
              if (v38 != v36)
              {
                do
                {
                  if (*((char *)v38 - 1) < 0) {
                    operator delete(*(v38 - 3));
                  }
                  v38 -= 3;
                }
                while (v38 != v36);
                unint64_t v39 = *v35;
              }
              *(void *)(v33 - 1016) = v36;
              operator delete(v39);
              if (*(char *)(v33 - 1025) < 0) {
                goto LABEL_113;
              }
LABEL_88:
              if ((*(char *)(v33 - 1049) & 0x80000000) == 0) {
                goto LABEL_89;
              }
LABEL_114:
              operator delete(*(void **)(v33 - 1072));
              if (*(char *)(v33 - 1097) < 0) {
                goto LABEL_115;
              }
            }
          }
LABEL_82:
          if ((void *)v32 == v108)
          {
            uint64_t v31 = v108;
            goto LABEL_124;
          }
          continue;
        }
        break;
      }
      if (*(unsigned char *)(v33 - 16))
      {
        sub_3A6CB8(v33 - 448);
        *(unsigned char *)(v33 - 16) = 0;
      }
      *(void *)(v32 + 640) = off_2438EC8;
      if (*(char *)(v32 + 671) < 0) {
        operator delete(*(void **)(v33 - 480));
      }
      if (*(unsigned char *)(v33 - 496)) {
        *(unsigned char *)(v33 - 496) = 0;
      }
      if (*(char *)(v33 - 513) < 0)
      {
        operator delete(*(void **)(v33 - 536));
        if (*(char *)(v33 - 545) < 0) {
          goto LABEL_117;
        }
LABEL_99:
        if ((*(char *)(v33 - 569) & 0x80000000) == 0) {
          goto LABEL_100;
        }
LABEL_118:
        operator delete(*(void **)(v33 - 592));
        if (*(char *)(v33 - 609) < 0) {
          goto LABEL_119;
        }
LABEL_101:
        if ((*(char *)(v33 - 641) & 0x80000000) == 0) {
          goto LABEL_102;
        }
LABEL_120:
        operator delete(*(void **)(v33 - 664));
        if (*(char *)(v33 - 665) < 0) {
          goto LABEL_121;
        }
LABEL_103:
        unint64_t v37 = (unsigned char *)(v33 - 696);
        if (*(unsigned char *)(v33 - 696)) {
LABEL_122:
        }
          unsigned char *v37 = 0;
      }
      else
      {
        if ((*(char *)(v33 - 545) & 0x80000000) == 0) {
          goto LABEL_99;
        }
LABEL_117:
        operator delete(*(void **)(v33 - 568));
        if (*(char *)(v33 - 569) < 0) {
          goto LABEL_118;
        }
LABEL_100:
        if ((*(char *)(v33 - 609) & 0x80000000) == 0) {
          goto LABEL_101;
        }
LABEL_119:
        operator delete(*(void **)(v33 - 632));
        if (*(char *)(v33 - 641) < 0) {
          goto LABEL_120;
        }
LABEL_102:
        if ((*(char *)(v33 - 665) & 0x80000000) == 0) {
          goto LABEL_103;
        }
LABEL_121:
        operator delete(*(void **)(v33 - 688));
        unint64_t v37 = (unsigned char *)(v33 - 696);
        if (*(unsigned char *)(v33 - 696)) {
          goto LABEL_122;
        }
      }
      sub_29D95C(v32);
      goto LABEL_82;
    }
LABEL_125:
    uint64_t v117 = 0;
    long long v118 = 0uLL;
    unint64_t v40 = (char *)v113;
    BOOL v41 = (char *)v114;
    if (v113 == v114)
    {
      uint64_t v109 = 0;
      uint64_t v111 = 0;
      int v42 = v100;
      goto LABEL_175;
    }
    while (2)
    {
      while (2)
      {
        uint64_t v43 = v118;
        if ((unint64_t)v118 < *((void *)&v118 + 1))
        {
          *(_DWORD *)(v118 + 1120) = -1;
          uint64_t v44 = v43 + 1128;
          *(void *)&long long v118 = v43 + 1128;
          uint64_t v45 = v43;
          int v46 = *(_DWORD *)(v43 + 1120);
          if (v46 != 1) {
            goto LABEL_131;
          }
LABEL_137:
          if (*(unsigned char *)(v44 - 16))
          {
            sub_3A6CB8(v44 - 448);
            *(unsigned char *)(v44 - 16) = 0;
          }
          *(void *)(v45 + 640) = off_2438EC8;
          if (*(char *)(v45 + 671) < 0) {
            operator delete(*(void **)(v44 - 480));
          }
          if (*(unsigned char *)(v44 - 496)) {
            *(unsigned char *)(v44 - 496) = 0;
          }
          if (*(char *)(v44 - 513) < 0)
          {
            operator delete(*(void **)(v44 - 536));
            if (*(char *)(v44 - 545) < 0) {
              goto LABEL_152;
            }
LABEL_145:
            if ((*(char *)(v44 - 569) & 0x80000000) == 0) {
              goto LABEL_146;
            }
LABEL_153:
            operator delete(*(void **)(v44 - 592));
            if (*(char *)(v44 - 609) < 0) {
              goto LABEL_154;
            }
LABEL_147:
            if ((*(char *)(v44 - 641) & 0x80000000) == 0) {
              goto LABEL_148;
            }
LABEL_155:
            operator delete(*(void **)(v44 - 664));
            if (*(char *)(v44 - 665) < 0) {
              goto LABEL_156;
            }
LABEL_149:
            unint64_t v48 = (unsigned char *)(v44 - 696);
            if (*(unsigned char *)(v44 - 696)) {
LABEL_157:
            }
              unsigned char *v48 = 0;
          }
          else
          {
            if ((*(char *)(v44 - 545) & 0x80000000) == 0) {
              goto LABEL_145;
            }
LABEL_152:
            operator delete(*(void **)(v44 - 568));
            if (*(char *)(v44 - 569) < 0) {
              goto LABEL_153;
            }
LABEL_146:
            if ((*(char *)(v44 - 609) & 0x80000000) == 0) {
              goto LABEL_147;
            }
LABEL_154:
            operator delete(*(void **)(v44 - 632));
            if (*(char *)(v44 - 641) < 0) {
              goto LABEL_155;
            }
LABEL_148:
            if ((*(char *)(v44 - 665) & 0x80000000) == 0) {
              goto LABEL_149;
            }
LABEL_156:
            operator delete(*(void **)(v44 - 688));
            unint64_t v48 = (unsigned char *)(v44 - 696);
            if (*(unsigned char *)(v44 - 696)) {
              goto LABEL_157;
            }
          }
          sub_29D95C(v45);
LABEL_128:
          sub_4BD34C(v45, (uint64_t)v40);
          *(_DWORD *)(v44 - 8) = 0;
          v40 += 168;
          if (v40 == v41) {
            goto LABEL_158;
          }
          continue;
        }
        break;
      }
      uint64_t v44 = sub_737FA0((uint64_t *)&v117);
      *(void *)&long long v118 = v44;
      uint64_t v45 = v44 - 1128;
      int v46 = *(_DWORD *)(v44 - 8);
      if (v46 == 1) {
        goto LABEL_137;
      }
LABEL_131:
      if (v46) {
        goto LABEL_128;
      }
      *(void *)uint64_t v45 = *(void *)v40;
      std::string::operator=((std::string *)(v44 - 1120), (const std::string *)(v40 + 8));
      long long v47 = *((_OWORD *)v40 + 2);
      *(_DWORD *)(v45 + 48) = *((_DWORD *)v40 + 12);
      *(_OWORD *)(v45 + 32) = v47;
      std::string::operator=((std::string *)(v44 - 1072), (const std::string *)(v40 + 56));
      std::string::operator=((std::string *)(v44 - 1048), (const std::string *)(v40 + 80));
      if (v40 != (char *)v45) {
        sub_69208(v44 - 1024, *((std::string **)v40 + 13), *((std::string **)v40 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v40 + 14) - *((void *)v40 + 13)) >> 3));
      }
      *(_WORD *)(v44 - 1000) = *((_WORD *)v40 + 64);
      std::string::operator=((std::string *)(v44 - 992), (const std::string *)(v40 + 136));
      *(_WORD *)(v44 - 968) = *((_WORD *)v40 + 80);
      *(_DWORD *)(v44 - 8) = 0;
      v40 += 168;
      if (v40 != v41) {
        continue;
      }
      break;
    }
LABEL_158:
    uint64_t v49 = (uint64_t)v117;
    uint64_t v109 = v117;
    uint64_t v111 = (void *)v118;
    if (v107)
    {
      uint64_t v50 = v118;
      if ((void *)v118 == v117)
      {
        int v42 = 2;
      }
      else
      {
        uint64_t v51 = (uint64_t)v117;
        do
        {
          if (sub_73DD94((uint64_t)&v117, v51, 0) && sub_73DD94((uint64_t)&v117, v51, 1))
          {
            int v42 = 6;
            goto LABEL_175;
          }
          v51 += 1128;
        }
        while (v51 != v50);
        uint64_t v52 = v49;
        do
        {
          if (sub_73DD94((uint64_t)&v117, v52, 1))
          {
            int v42 = 4;
            goto LABEL_175;
          }
          v52 += 1128;
        }
        while (v52 != v50);
        while (!sub_73DD94((uint64_t)&v117, v49, 0))
        {
          v49 += 1128;
          if (v49 == v50)
          {
            int v42 = 7;
            goto LABEL_175;
          }
        }
        int v42 = 5;
      }
    }
    else
    {
      int v42 = 1;
    }
LABEL_175:
    int v112 = v42;
    sub_647DFC(v13, &v112);
    uint64_t v53 = v109;
    if (v109)
    {
      uint64_t v54 = (uint64_t)v111;
      if (v111 == v109)
      {
LABEL_221:
        operator delete(v53);
        goto LABEL_222;
      }
      while (2)
      {
        uint64_t v55 = v54;
        v54 -= 1128;
        int v56 = *(_DWORD *)(v55 - 8);
        if (v56 != 1)
        {
          if (!v56)
          {
            if (*(char *)(v55 - 969) < 0)
            {
              operator delete(*(void **)(v55 - 992));
              uint64_t v57 = (void **)(v55 - 1024);
              long long v58 = *(void ***)(v55 - 1024);
              if (v58) {
                goto LABEL_203;
              }
LABEL_184:
              if ((*(char *)(v55 - 1025) & 0x80000000) == 0) {
                goto LABEL_185;
              }
LABEL_210:
              operator delete(*(void **)(v55 - 1048));
              if (*(char *)(v55 - 1049) < 0) {
                goto LABEL_211;
              }
LABEL_186:
              if (*(char *)(v55 - 1097) < 0) {
LABEL_212:
              }
                operator delete(*(void **)(v55 - 1120));
            }
            else
            {
              uint64_t v57 = (void **)(v55 - 1024);
              long long v58 = *(void ***)(v55 - 1024);
              if (!v58) {
                goto LABEL_184;
              }
LABEL_203:
              int v60 = *(void ***)(v55 - 1016);
              uint64_t v61 = v58;
              if (v60 != v58)
              {
                do
                {
                  if (*((char *)v60 - 1) < 0) {
                    operator delete(*(v60 - 3));
                  }
                  v60 -= 3;
                }
                while (v60 != v58);
                uint64_t v61 = *v57;
              }
              *(void *)(v55 - 1016) = v58;
              operator delete(v61);
              if (*(char *)(v55 - 1025) < 0) {
                goto LABEL_210;
              }
LABEL_185:
              if ((*(char *)(v55 - 1049) & 0x80000000) == 0) {
                goto LABEL_186;
              }
LABEL_211:
              operator delete(*(void **)(v55 - 1072));
              if (*(char *)(v55 - 1097) < 0) {
                goto LABEL_212;
              }
            }
          }
LABEL_179:
          if ((void *)v54 == v109)
          {
            uint64_t v53 = v109;
            goto LABEL_221;
          }
          continue;
        }
        break;
      }
      if (*(unsigned char *)(v55 - 16))
      {
        sub_3A6CB8(v55 - 448);
        *(unsigned char *)(v55 - 16) = 0;
      }
      *(void *)(v54 + 640) = off_2438EC8;
      if (*(char *)(v54 + 671) < 0) {
        operator delete(*(void **)(v55 - 480));
      }
      if (*(unsigned char *)(v55 - 496)) {
        *(unsigned char *)(v55 - 496) = 0;
      }
      if (*(char *)(v55 - 513) < 0)
      {
        operator delete(*(void **)(v55 - 536));
        if (*(char *)(v55 - 545) < 0) {
          goto LABEL_214;
        }
LABEL_196:
        if ((*(char *)(v55 - 569) & 0x80000000) == 0) {
          goto LABEL_197;
        }
LABEL_215:
        operator delete(*(void **)(v55 - 592));
        if (*(char *)(v55 - 609) < 0) {
          goto LABEL_216;
        }
LABEL_198:
        if ((*(char *)(v55 - 641) & 0x80000000) == 0) {
          goto LABEL_199;
        }
LABEL_217:
        operator delete(*(void **)(v55 - 664));
        if (*(char *)(v55 - 665) < 0) {
          goto LABEL_218;
        }
LABEL_200:
        int v59 = (unsigned char *)(v55 - 696);
        if (*(unsigned char *)(v55 - 696)) {
LABEL_219:
        }
          unsigned char *v59 = 0;
      }
      else
      {
        if ((*(char *)(v55 - 545) & 0x80000000) == 0) {
          goto LABEL_196;
        }
LABEL_214:
        operator delete(*(void **)(v55 - 568));
        if (*(char *)(v55 - 569) < 0) {
          goto LABEL_215;
        }
LABEL_197:
        if ((*(char *)(v55 - 609) & 0x80000000) == 0) {
          goto LABEL_198;
        }
LABEL_216:
        operator delete(*(void **)(v55 - 632));
        if (*(char *)(v55 - 641) < 0) {
          goto LABEL_217;
        }
LABEL_199:
        if ((*(char *)(v55 - 665) & 0x80000000) == 0) {
          goto LABEL_200;
        }
LABEL_218:
        operator delete(*(void **)(v55 - 688));
        int v59 = (unsigned char *)(v55 - 696);
        if (*(unsigned char *)(v55 - 696)) {
          goto LABEL_219;
        }
      }
      sub_29D95C(v54);
      goto LABEL_179;
    }
LABEL_222:
    unint64_t v62 = (void **)v113;
    if (v113)
    {
      int v63 = v114;
      uint64_t v64 = v113;
      if (v114 == v113)
      {
LABEL_244:
        uint64_t v114 = v62;
        operator delete(v64);
        goto LABEL_245;
      }
      while (2)
      {
        if (*((char *)v63 - 9) < 0)
        {
          operator delete(*(v63 - 4));
          int v65 = (void **)*(v63 - 8);
          if (v65) {
            goto LABEL_233;
          }
LABEL_228:
          if ((*((char *)v63 - 65) & 0x80000000) == 0) {
            goto LABEL_229;
          }
        }
        else
        {
          int v65 = (void **)*(v63 - 8);
          if (!v65) {
            goto LABEL_228;
          }
LABEL_233:
          BOOL v66 = (void **)*(v63 - 7);
          if (v66 == v65)
          {
            *(v63 - 7) = v65;
            operator delete(v65);
            if (*((char *)v63 - 65) < 0) {
              break;
            }
LABEL_229:
            if ((*((char *)v63 - 89) & 0x80000000) == 0)
            {
LABEL_230:
              if (*((char *)v63 - 137) < 0) {
LABEL_242:
              }
                operator delete(*(v63 - 20));
LABEL_225:
              v63 -= 21;
              if (v63 == v62)
              {
                uint64_t v64 = v113;
                goto LABEL_244;
              }
              continue;
            }
LABEL_241:
            operator delete(*(v63 - 14));
            if (*((char *)v63 - 137) < 0) {
              goto LABEL_242;
            }
            goto LABEL_225;
          }
          do
          {
            if (*((char *)v66 - 1) < 0) {
              operator delete(*(v66 - 3));
            }
            v66 -= 3;
          }
          while (v66 != v65);
          int v67 = *(v63 - 8);
          *(v63 - 7) = v65;
          operator delete(v67);
          if ((*((char *)v63 - 65) & 0x80000000) == 0) {
            goto LABEL_229;
          }
        }
        break;
      }
      operator delete(*(v63 - 11));
      if ((*((char *)v63 - 89) & 0x80000000) == 0) {
        goto LABEL_230;
      }
      goto LABEL_241;
    }
LABEL_245:
    char v68 = (void **)__p;
    if (__p)
    {
      int v69 = (void **)v116;
      int v70 = __p;
      if ((void *)v116 == __p)
      {
LABEL_267:
        *(void *)&long long v116 = v68;
        operator delete(v70);
        goto LABEL_268;
      }
      while (2)
      {
        if (*((char *)v69 - 9) < 0)
        {
          operator delete(*(v69 - 4));
          uint64_t v71 = (void **)*(v69 - 8);
          if (v71) {
            goto LABEL_256;
          }
LABEL_251:
          if ((*((char *)v69 - 65) & 0x80000000) == 0) {
            goto LABEL_252;
          }
        }
        else
        {
          uint64_t v71 = (void **)*(v69 - 8);
          if (!v71) {
            goto LABEL_251;
          }
LABEL_256:
          char v72 = (void **)*(v69 - 7);
          if (v72 == v71)
          {
            *(v69 - 7) = v71;
            operator delete(v71);
            if (*((char *)v69 - 65) < 0) {
              break;
            }
LABEL_252:
            if ((*((char *)v69 - 89) & 0x80000000) == 0)
            {
LABEL_253:
              if (*((char *)v69 - 137) < 0) {
LABEL_265:
              }
                operator delete(*(v69 - 20));
LABEL_248:
              v69 -= 21;
              if (v69 == v68)
              {
                int v70 = __p;
                goto LABEL_267;
              }
              continue;
            }
LABEL_264:
            operator delete(*(v69 - 14));
            if (*((char *)v69 - 137) < 0) {
              goto LABEL_265;
            }
            goto LABEL_248;
          }
          do
          {
            if (*((char *)v72 - 1) < 0) {
              operator delete(*(v72 - 3));
            }
            v72 -= 3;
          }
          while (v72 != v71);
          int v73 = *(v69 - 8);
          *(v69 - 7) = v71;
          operator delete(v73);
          if ((*((char *)v69 - 65) & 0x80000000) == 0) {
            goto LABEL_252;
          }
        }
        break;
      }
      operator delete(*(v69 - 11));
      if ((*((char *)v69 - 89) & 0x80000000) == 0) {
        goto LABEL_253;
      }
      goto LABEL_264;
    }
LABEL_268:
    uint64_t v74 = (uint64_t *)sub_648B60((uint64_t)v13);
    uint64_t v117 = 0;
    long long v118 = 0uLL;
    uint64_t v75 = *v74;
    uint64_t v76 = v74[1];
    if (*v74 == v76)
    {
      __p = 0;
      long long v116 = 0uLL;
      int v77 = v102;
      goto LABEL_311;
    }
    while (2)
    {
      uint64_t v78 = v118;
      if ((unint64_t)v118 >= *((void *)&v118 + 1))
      {
        uint64_t v79 = sub_737FA0((uint64_t *)&v117);
        *(void *)&long long v118 = v79;
        uint64_t v80 = v79 - 1128;
        int v81 = *(_DWORD *)(v79 - 8);
        if (v81 == 1) {
          goto LABEL_282;
        }
LABEL_274:
        if (v81) {
          goto LABEL_270;
        }
        if (*(char *)(v79 - 969) < 0)
        {
          operator delete(*(void **)(v79 - 992));
          __darwin_ct_rune_t v82 = (void **)(v79 - 1024);
          __darwin_ct_rune_t v83 = *(void ***)(v79 - 1024);
          if (!v83)
          {
LABEL_277:
            if ((*(char *)(v79 - 1025) & 0x80000000) == 0) {
              goto LABEL_278;
            }
LABEL_291:
            operator delete(*(void **)(v79 - 1048));
            if ((*(char *)(v79 - 1049) & 0x80000000) == 0)
            {
LABEL_279:
              if (*(char *)(v79 - 1097) < 0) {
                goto LABEL_293;
              }
              goto LABEL_270;
            }
LABEL_292:
            operator delete(*(void **)(v79 - 1072));
            if (*(char *)(v79 - 1097) < 0) {
LABEL_293:
            }
              operator delete(*(void **)(v79 - 1120));
LABEL_270:
            sub_4BE9F4(v80, v75);
            goto LABEL_271;
          }
        }
        else
        {
          __darwin_ct_rune_t v82 = (void **)(v79 - 1024);
          __darwin_ct_rune_t v83 = *(void ***)(v79 - 1024);
          if (!v83) {
            goto LABEL_277;
          }
        }
        __darwin_ct_rune_t v84 = (void ***)(v79 - 1016);
        __darwin_ct_rune_t v85 = *(void ***)(v79 - 1016);
        if (v85 == v83)
        {
          *__darwin_ct_rune_t v84 = v83;
          operator delete(v83);
          if (*(char *)(v79 - 1025) < 0) {
            goto LABEL_291;
          }
        }
        else
        {
          do
          {
            if (*((char *)v85 - 1) < 0) {
              operator delete(*(v85 - 3));
            }
            v85 -= 3;
          }
          while (v85 != v83);
          __darwin_ct_rune_t v86 = *v82;
          *__darwin_ct_rune_t v84 = v83;
          operator delete(v86);
          if (*(char *)(v79 - 1025) < 0) {
            goto LABEL_291;
          }
        }
LABEL_278:
        if ((*(char *)(v79 - 1049) & 0x80000000) == 0) {
          goto LABEL_279;
        }
        goto LABEL_292;
      }
      *(_DWORD *)(v118 + 1120) = -1;
      uint64_t v79 = v78 + 1128;
      *(void *)&long long v118 = v78 + 1128;
      uint64_t v80 = v78;
      int v81 = *(_DWORD *)(v78 + 1120);
      if (v81 != 1) {
        goto LABEL_274;
      }
LABEL_282:
      sub_4C9334(v80, v75);
LABEL_271:
      *(_DWORD *)(v79 - 8) = 1;
      v75 += 1120;
      if (v75 != v76) {
        continue;
      }
      break;
    }
    uint64_t v87 = (uint64_t)v117;
    __p = v117;
    long long v116 = v118;
    if (v104 == v103)
    {
      int v77 = 1;
    }
    else
    {
      uint64_t v88 = v118;
      if ((void *)v118 == v117)
      {
        int v77 = 2;
      }
      else
      {
        uint64_t v89 = (uint64_t)v117;
        do
        {
          if (sub_73DD94((uint64_t)&v117, v89, 0) && sub_73DD94((uint64_t)&v117, v89, 1))
          {
            int v77 = 6;
            goto LABEL_311;
          }
          v89 += 1128;
        }
        while (v89 != v88);
        uint64_t v90 = v87;
        do
        {
          if (sub_73DD94((uint64_t)&v117, v90, 1))
          {
            int v77 = 4;
            goto LABEL_311;
          }
          v90 += 1128;
        }
        while (v90 != v88);
        while (!sub_73DD94((uint64_t)&v117, v87, 0))
        {
          v87 += 1128;
          if (v87 == v88)
          {
            int v77 = 7;
            goto LABEL_311;
          }
        }
        int v77 = 5;
      }
    }
LABEL_311:
    LODWORD(v113) = v77;
    sub_647E20((uint64_t)v13, &v113);
    uint64_t v17 = __p;
    if (__p)
    {
      uint64_t v91 = v116;
      if ((void *)v116 == __p)
      {
LABEL_25:
        operator delete(v17);
        goto LABEL_26;
      }
      while (2)
      {
        uint64_t v92 = v91;
        v91 -= 1128;
        int v93 = *(_DWORD *)(v92 - 8);
        if (v93 != 1)
        {
          if (v93) {
            goto LABEL_315;
          }
          if (*(char *)(v92 - 969) < 0)
          {
            operator delete(*(void **)(v92 - 992));
            __darwin_ct_rune_t v94 = (void **)(v92 - 1024);
            char v95 = *(void ***)(v92 - 1024);
            if (v95) {
              goto LABEL_339;
            }
LABEL_320:
            if ((*(char *)(v92 - 1025) & 0x80000000) == 0) {
              goto LABEL_321;
            }
          }
          else
          {
            __darwin_ct_rune_t v94 = (void **)(v92 - 1024);
            char v95 = *(void ***)(v92 - 1024);
            if (!v95) {
              goto LABEL_320;
            }
LABEL_339:
            __darwin_ct_rune_t v97 = (void ***)(v92 - 1016);
            v98 = *(void ***)(v92 - 1016);
            if (v98 == v95)
            {
              char *v97 = v95;
              operator delete(v95);
              if (*(char *)(v92 - 1025) < 0) {
                goto LABEL_346;
              }
LABEL_321:
              if ((*(char *)(v92 - 1049) & 0x80000000) == 0)
              {
LABEL_322:
                if (*(char *)(v92 - 1097) < 0) {
LABEL_348:
                }
                  operator delete(*(void **)(v92 - 1120));
LABEL_315:
                if ((void *)v91 == v17)
                {
                  uint64_t v17 = __p;
                  goto LABEL_25;
                }
                continue;
              }
LABEL_347:
              operator delete(*(void **)(v92 - 1072));
              if (*(char *)(v92 - 1097) < 0) {
                goto LABEL_348;
              }
              goto LABEL_315;
            }
            do
            {
              if (*((char *)v98 - 1) < 0) {
                operator delete(*(v98 - 3));
              }
              v98 -= 3;
            }
            while (v98 != v95);
            uint64_t v99 = *v94;
            char *v97 = v95;
            operator delete(v99);
            if ((*(char *)(v92 - 1025) & 0x80000000) == 0) {
              goto LABEL_321;
            }
          }
LABEL_346:
          operator delete(*(void **)(v92 - 1048));
          if ((*(char *)(v92 - 1049) & 0x80000000) == 0) {
            goto LABEL_322;
          }
          goto LABEL_347;
        }
        break;
      }
      if (*(unsigned char *)(v92 - 16))
      {
        sub_3A6CB8(v92 - 448);
        *(unsigned char *)(v92 - 16) = 0;
      }
      *(void *)(v91 + 640) = off_2438EC8;
      if (*(char *)(v91 + 671) < 0) {
        operator delete(*(void **)(v92 - 480));
      }
      if (*(unsigned char *)(v92 - 496)) {
        *(unsigned char *)(v92 - 496) = 0;
      }
      if (*(char *)(v92 - 513) < 0)
      {
        operator delete(*(void **)(v92 - 536));
        if (*(char *)(v92 - 545) < 0) {
          goto LABEL_350;
        }
LABEL_332:
        if ((*(char *)(v92 - 569) & 0x80000000) == 0) {
          goto LABEL_333;
        }
LABEL_351:
        operator delete(*(void **)(v92 - 592));
        if (*(char *)(v92 - 609) < 0) {
          goto LABEL_352;
        }
LABEL_334:
        if ((*(char *)(v92 - 641) & 0x80000000) == 0) {
          goto LABEL_335;
        }
LABEL_353:
        operator delete(*(void **)(v92 - 664));
        if (*(char *)(v92 - 665) < 0) {
          goto LABEL_354;
        }
LABEL_336:
        __darwin_ct_rune_t v96 = (unsigned char *)(v92 - 696);
        if (*(unsigned char *)(v92 - 696)) {
LABEL_355:
        }
          unsigned char *v96 = 0;
      }
      else
      {
        if ((*(char *)(v92 - 545) & 0x80000000) == 0) {
          goto LABEL_332;
        }
LABEL_350:
        operator delete(*(void **)(v92 - 568));
        if (*(char *)(v92 - 569) < 0) {
          goto LABEL_351;
        }
LABEL_333:
        if ((*(char *)(v92 - 609) & 0x80000000) == 0) {
          goto LABEL_334;
        }
LABEL_352:
        operator delete(*(void **)(v92 - 632));
        if (*(char *)(v92 - 641) < 0) {
          goto LABEL_353;
        }
LABEL_335:
        if ((*(char *)(v92 - 665) & 0x80000000) == 0) {
          goto LABEL_336;
        }
LABEL_354:
        operator delete(*(void **)(v92 - 688));
        __darwin_ct_rune_t v96 = (unsigned char *)(v92 - 696);
        if (*(unsigned char *)(v92 - 696)) {
          goto LABEL_355;
        }
      }
      sub_29D95C(v91);
      goto LABEL_315;
    }
LABEL_26:
    v13 += 945;
    if (v13 != v105) {
      continue;
    }
    break;
  }
}

void sub_736EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  unint64_t v10 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  int v15 = va_arg(va2, void *);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  sub_72BBD0((void **)va);
  sub_4B1DB4((void **)va1);
  sub_4B1DB4((void **)va2);
  _Unwind_Resume(a1);
}

void sub_736FB8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a2 + 1184);
  uint64_t v4 = *(void *)(a2 + 1192);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 152);
      if (v7)
      {
        uint64_t v8 = 0;
        for (unint64_t i = 0; i != v7; ++i)
          v8 += sub_470F2C((void *)a2, i, a3);
        if (v8 > *(void *)(a1 + 16)) {
          return;
        }
      }
      else if (*(uint64_t *)(a1 + 16) < 0)
      {
        return;
      }
      if (sub_6F2FD8(v3)) {
        break;
      }
      v3 += 160;
      if (v3 == v4) {
        return;
      }
    }
    unint64_t v10 = *(void *)(v3 + 152);
    sub_4AA8E0((char *)&__dst, (long long *)v3);
    sub_738954((uint64_t *)(*(void *)(a2 + 1064) + 336), &__dst, &v32, 1uLL);
    if (v31 < 0)
    {
      operator delete(__p);
      if ((v29 & 0x80000000) == 0)
      {
LABEL_13:
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_20;
      }
    }
    else if ((v29 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v28);
    if ((v27 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v25 & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_21;
    }
LABEL_20:
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete(v24);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if (v10 == -1) {
        return;
      }
LABEL_23:
      if (v10 >= *(void *)(sub_51690C((void *)(a2 + 1064), 1uLL) + 24)) {
        return;
      }
      uint64_t v11 = (unsigned int *)sub_470B40((void *)a2, v10);
      sub_2954EC(*(void *)(a1 + 8), (((unint64_t)(v11[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v11[1] << 32) | *v11) ^ 0x1000000000000, (uint64_t)&__dst);
      sub_2E4B5C((uint64_t)&__dst, &v21);
      if (__dst.__r_.__value_.__l.__size_)
      {
        __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__l.__size_;
        operator delete((void *)__dst.__r_.__value_.__l.__size_);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)v21) >> 2) < 2) {
        goto LABEL_44;
      }
      uint64_t v12 = (_DWORD *)sub_413C0(&v21, 0);
      uint64_t v13 = (_DWORD *)sub_413C0(&v21, 1uLL);
      if (*v13 == *v12)
      {
        unsigned int v14 = v12[1];
        unsigned int v15 = v13[1];
        double j = 0.0;
        if (v14 == v15)
        {
LABEL_37:
          double v18 = (j + 180.0) / 45.0 + 0.5;
          if ((int)v18 <= 0) {
            unsigned int v19 = -(-(int)v18 & 7);
          }
          else {
            unsigned int v19 = (int)v18 & 7;
          }
          if (v19 >= 8) {
            int v20 = "";
          }
          else {
            int v20 = off_243A380[v19];
          }
          std::string::assign((std::string *)(a2 + 7376), v20);
LABEL_44:
          if (v21)
          {
            uint64_t v22 = v21;
            operator delete(v21);
          }
          return;
        }
      }
      else
      {
        unsigned int v15 = v13[1];
        unsigned int v14 = v12[1];
      }
      double v17 = -(double)(*v12 - *v13);
      if (*v13 - *v12 < (*v12 - *v13)) {
        double v17 = (double)(*v13 - *v12);
      }
      for (double j = (atan2((double)v15 - (double)v14, v17) + 1.57079633) * 180.0 / 3.14159265; j >= 180.0; double j = j + -360.0)
        ;
      for (; j < -180.0; double j = j + 360.0)
        ;
      goto LABEL_37;
    }
LABEL_22:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v10 == -1) {
      return;
    }
    goto LABEL_23;
  }
}

void sub_737350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_7373AC(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x8AB355E008AB4) {
    sub_2E00();
  }
  uint64_t v4 = (uint64_t)a1[1];
  uint64_t v5 = 7560 * a2;
  uint64_t v6 = (char *)operator new(7560 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - (void)v2];
  if ((char *)v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint64_t)&v6[v4 - (void)v2];
  do
  {
    v4 -= 7560;
    uint64_t v9 = sub_73BD9C(v9 - 7560, v4);
  }
  while ((char *)v4 != v2);
  unint64_t v10 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (char *)v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v10)
  {
    do
    {
      v2 -= 7560;
      sub_574D4C((uint64_t)v2);
    }
    while (v2 != v10);
    uint64_t v2 = v10;
  }
  if (v2)
  {
LABEL_10:
    operator delete(v2);
  }
}

void sub_7374D4(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "max_search_distance_for_named_street");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)a1);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "enable_congestion_zone_impact");
  uint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 8) = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_8:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "enable_guidance_event_importance_info");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 9) = v7 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 9) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_14:
    }
      operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "show_hidden_incidents");
  uint64_t v8 = sub_58070(a2, (uint64_t)__p);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 10) = v9 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 10) = *(unsigned char *)(a1 + 10) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_20:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "show_encountered_soft_closures");
  unint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 11) = v11 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 11) = *(unsigned char *)(a1 + 11) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_26:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "show_encountered_hard_closures");
  uint64_t v12 = sub_58070(a2, (uint64_t)__p);
  if (v12 && (int v13 = *((_DWORD *)v12 + 12), (v13 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 12) = v13 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_33;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 12) = *(unsigned char *)(a1 + 12) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_33:
    }
      operator delete(__p[0]);
  }
}

void sub_737814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_737844(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)a1 = 0x7FFFFFFF;
  *(void *)(a1 + 4) = 0x7FFFFFFF7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = 0x8000000080000000;
  *(_DWORD *)(a1 + 152) = -1;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_DWORD *)(a1 + 196) = -1;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 312) = 0x7FFFFFFF;
  *(void *)(a1 + 316) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 336) = 0x7FFFFFFF;
  *(void *)(a1 + 340) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 360) = 0x7FFFFFFF;
  *(void *)(a1 + 364) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 384) = 0x7FFFFFFF;
  *(void *)(a1 + 388) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 408) = -1;
  char v2 = 16;
  strcpy(__p, "EVRequestContext");
  sub_401FE8(a1 + 416, (long long *)__p);
}

void sub_73799C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_20AAC3C((void **)(v14 + 304), (void **)(v14 + 296), (uint64_t *)(v14 + 288), (uint64_t *)(v14 + 280));
  sub_4026F4((void *)(v14 + 160));
  sub_402628((void *)v14);
  _Unwind_Resume(a1);
}

uint64_t sub_7379DC(uint64_t a1)
{
  char v2 = *(void **)(a1 + 1664);
  if (v2)
  {
    *(void *)(a1 + 1672) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 1591) < 0)
  {
    operator delete(*(void **)(a1 + 1568));
    uint64_t v3 = *(void ***)(a1 + 1544);
    if (!v3) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v3 = *(void ***)(a1 + 1544);
    if (!v3) {
      goto LABEL_22;
    }
  }
  uint64_t v4 = *(void ***)(a1 + 1552);
  int v5 = v3;
  if (v4 != v3)
  {
    uint64_t v6 = *(void ***)(a1 + 1552);
    do
    {
      int v9 = (char *)*(v6 - 3);
      v6 -= 3;
      uint64_t v8 = v9;
      if (v9)
      {
        unint64_t v10 = (char *)*(v4 - 2);
        int v7 = v8;
        if (v10 != v8)
        {
          do
          {
            int v11 = (void *)*((void *)v10 - 9);
            if (v11)
            {
              *((void *)v10 - 8) = v11;
              operator delete(v11);
            }
            uint64_t v12 = (void *)*((void *)v10 - 12);
            if (v12)
            {
              *((void *)v10 - 11) = v12;
              operator delete(v12);
            }
            v10 -= 176;
          }
          while (v10 != v8);
          int v7 = *v6;
        }
        *(v4 - 2) = v8;
        operator delete(v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != v3);
    int v5 = *(void ***)(a1 + 1544);
  }
  *(void *)(a1 + 1552) = v3;
  operator delete(v5);
LABEL_22:

  return sub_4BCED0(a1);
}

uint64_t sub_737ADC(uint64_t a1)
{
  uint64_t v2 = a1 + 1784;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 7056);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_4F2894(a1 + 4872);
  sub_651C4((id **)(a1 + 4856));
  sub_4BCED0(a1 + 3320);
  sub_4BCED0(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 1728);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v5 = *(void ***)(a1 + 1608);
    if (!v5) {
      goto LABEL_17;
    }
LABEL_7:
    uint64_t v6 = *(void ***)(a1 + 1616);
    int v7 = v5;
    if (v6 == v5)
    {
LABEL_16:
      *(void *)(a1 + 1616) = v5;
      operator delete(v7);
      goto LABEL_17;
    }
    while (1)
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        if (*((char *)v6 - 25) < 0) {
LABEL_14:
        }
          operator delete(*(v6 - 6));
      }
      else if (*((char *)v6 - 25) < 0)
      {
        goto LABEL_14;
      }
      v6 -= 6;
      if (v6 == v5)
      {
        int v7 = *(void ***)(a1 + 1608);
        goto LABEL_16;
      }
    }
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  int v5 = *(void ***)(a1 + 1608);
  if (v5) {
    goto LABEL_7;
  }
LABEL_17:
  uint64_t v8 = *(void **)(a1 + 1568);
  if (v8)
  {
    do
    {
      int v9 = (void *)*v8;
      sub_25F44((uint64_t)(v8 + 2));
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  unint64_t v10 = *(void **)(a1 + 1552);
  *(void *)(a1 + 1552) = 0;
  if (v10) {
    operator delete(v10);
  }
  sub_4BCED0(a1 + 16);
  return a1;
}

double sub_737C74(uint64_t a1)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(void *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = -1935635296;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 63) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 100;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 312) = xmmword_20B8E30;
  double result = NAN;
  *(void *)(a1 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 372) = 0;
  return result;
}

uint64_t sub_737D28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v8 = 0x276276276276276;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x276276276276276) {
      sub_188D718();
    }
    int v9 = (char *)operator new(104 * v8);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v21 = (uint64_t)&v9[104 * v4];
  uint64_t v22 = &v9[104 * v8];
  sub_DAA23C(v21, a2, a3);
  uint64_t v10 = v21;
  uint64_t v11 = v21 + 104;
  uint64_t v12 = (char *)*a1;
  int v13 = (char *)a1[1];
  if (v13 == (char *)*a1)
  {
    *a1 = v21;
    a1[1] = v11;
    a1[2] = (uint64_t)v22;
  }
  else
  {
    do
    {
      *(_OWORD *)(v10 - 104) = *(_OWORD *)(v13 - 104);
      long long v14 = *(_OWORD *)(v13 - 88);
      long long v15 = *(_OWORD *)(v13 - 72);
      long long v16 = *(_OWORD *)(v13 - 56);
      *(_DWORD *)(v10 - 41) = *(_DWORD *)(v13 - 41);
      *(_OWORD *)(v10 - 56) = v16;
      *(_OWORD *)(v10 - 72) = v15;
      *(_OWORD *)(v10 - 88) = v14;
      *(void *)(v10 - 24) = 0;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 32) = 0;
      *(_OWORD *)(v10 - 32) = *((_OWORD *)v13 - 2);
      *(void *)(v10 - 16) = *((void *)v13 - 2);
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      int v17 = *((_DWORD *)v13 - 2);
      *(unsigned char *)(v10 - 4) = *(v13 - 4);
      *(_DWORD *)(v10 - 8) = v17;
      v10 -= 104;
      v13 -= 104;
    }
    while (v13 != v12);
    double v18 = (char *)*a1;
    int v13 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = (uint64_t)v22;
    if (v13 != v18)
    {
      do
      {
        unsigned int v19 = (void *)*((void *)v13 - 4);
        if (v19)
        {
          *((void *)v13 - 3) = v19;
          operator delete(v19);
        }
        v13 -= 104;
      }
      while (v13 != v18);
      int v13 = v18;
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v21 + 104;
}

void sub_737F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_737F30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_737F30(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 104;
        *(void *)(a1 + 16) = v2 - 104;
        unint64_t v5 = *(void **)(v2 - 32);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 104;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_737FA0(uint64_t *a1)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = 0x70913F8BCD29C245 * ((uint64_t)&v2[-*a1] >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x3A196B1EDD80E8) {
    sub_2E00();
  }
  if (0xE1227F179A53848ALL * ((a1[2] - (uint64_t)v3) >> 3) > v5) {
    unint64_t v5 = 0xE1227F179A53848ALL * ((a1[2] - (uint64_t)v3) >> 3);
  }
  if ((unint64_t)(0x70913F8BCD29C245 * ((a1[2] - (uint64_t)v3) >> 3)) >= 0x1D0CB58F6EC074) {
    unint64_t v5 = 0x3A196B1EDD80E8;
  }
  if (v5 > 0x3A196B1EDD80E8) {
    sub_188D718();
  }
  uint64_t v6 = 1128 * v5;
  int v7 = (char *)operator new(1128 * v5);
  uint64_t v8 = (uint64_t)&v7[1128 * v4];
  int v9 = &v7[v6];
  *(_DWORD *)(v8 + 1120) = -1;
  uint64_t v10 = v8 + 1128;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
  }
  else
  {
    do
    {
      int v11 = *((_DWORD *)v2 - 2);
      *(_DWORD *)(v8 - 8) = v11;
      v8 -= 1128;
      v2 -= 1128;
      if (v11 == 1)
      {
        uint64_t v8 = sub_4BE9F4(v8, (uint64_t)v2);
      }
      else if (!v11)
      {
        uint64_t v8 = sub_4BD34C(v8, (uint64_t)v2);
      }
    }
    while (v2 != v3);
    uint64_t v12 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (v2 != v12)
    {
      do
      {
        int v13 = *((_DWORD *)v2 - 2);
        v2 -= 1128;
        if (v13 == 1)
        {
          sub_3A6B94((uint64_t)v2);
        }
        else if (!v13)
        {
          sub_4BCFD0((uint64_t)v2);
        }
      }
      while (v2 != v12);
      uint64_t v2 = v12;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v10;
}

void *sub_738128(void *a1)
{
  uint64_t v2 = (void *)a1[247];
  if (v2)
  {
    a1[248] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)a1[244];
  if (v3)
  {
    uint64_t v4 = (void **)a1[245];
    unint64_t v5 = (void *)a1[244];
    if (v4 != v3)
    {
      uint64_t v6 = (void **)a1[245];
      do
      {
        int v9 = (char *)*(v6 - 6);
        v6 -= 6;
        uint64_t v8 = v9;
        if (v9)
        {
          uint64_t v10 = (char *)*(v4 - 5);
          int v7 = v8;
          if (v10 != v8)
          {
            int v11 = (char *)*(v4 - 5);
            do
            {
              int v13 = (void *)*((void *)v11 - 3);
              v11 -= 24;
              uint64_t v12 = v13;
              if (v13)
              {
                *((void *)v10 - 2) = v12;
                operator delete(v12);
              }
              uint64_t v10 = v11;
            }
            while (v11 != v8);
            int v7 = *v6;
          }
          *(v4 - 5) = v8;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = (void *)a1[244];
    }
    a1[245] = v3;
    operator delete(v5);
  }
  long long v14 = (void **)a1[240];
  if (v14)
  {
    do
    {
      unsigned int v19 = (void **)*v14;
      if (*((char *)v14 + 39) < 0) {
        operator delete(v14[2]);
      }
      operator delete(v14);
      long long v14 = v19;
    }
    while (v19);
  }
  long long v15 = (void *)a1[238];
  a1[238] = 0;
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = a1[235];
  if (v16)
  {
    uint64_t v17 = a1[236];
    double v18 = (void *)a1[235];
    if (v17 != v16)
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 24;
      }
      while (v17 != v16);
      double v18 = (void *)a1[235];
    }
    a1[236] = v16;
    operator delete(v18);
  }
  sub_4BCED0((uint64_t)(a1 + 19));
  uint64_t v20 = a1[14];
  if (v20)
  {
    uint64_t v21 = a1[15];
    uint64_t v22 = (void *)a1[14];
    if (v21 != v20)
    {
      uint64_t v23 = a1[15];
      do
      {
        char v25 = *(void **)(v23 - 24);
        v23 -= 24;
        int v24 = v25;
        if (v25)
        {
          *(void *)(v21 - 16) = v24;
          operator delete(v24);
        }
        uint64_t v21 = v23;
      }
      while (v23 != v20);
      uint64_t v22 = (void *)a1[14];
    }
    a1[15] = v20;
    operator delete(v22);
  }
  uint64_t v26 = (void *)a1[7];
  if (v26)
  {
    a1[8] = v26;
    operator delete(v26);
  }
  char v27 = (void *)a1[4];
  if (v27)
  {
    a1[5] = v27;
    operator delete(v27);
  }
  return a1;
}

void *sub_7382EC(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a2);
  uint64_t v4 = (void *)sub_37746C(a2);
  a1[2] = *v4;
  uint64_t v5 = v4[1];
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy(a1 + 4, v4 + 2, 0xF18uLL);
  uint64_t v6 = v4[485];
  a1[487] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  HIBYTE(v19[2]) = 19;
  strcpy((char *)v19, "GuidanceEligibility");
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v7 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&__p);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    int v9 = v17;
    uint64_t v10 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v19[2]) < 0) {
    operator delete(v19[0]);
  }
  a1[488] = v7;
  strcpy((char *)v19, "GuidanceFeatureRegions");
  HIBYTE(v19[2]) = 22;
  __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v11 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&__p);
  uint64_t v12 = (void **)__p;
  if (__p)
  {
    int v13 = v17;
    long long v14 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      long long v14 = __p;
    }
    uint64_t v17 = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v19[2]) < 0) {
    operator delete(v19[0]);
  }
  a1[489] = v11;
  return a1;
}

void sub_7384D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_368744(v18);
  _Unwind_Resume(a1);
}

void sub_738504(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 5992);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 2120);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((*(char *)(a2 + 1951) & 0x80000000) == 0)
      {
LABEL_9:
        operator delete();
      }
    }
    else if ((*(char *)(a2 + 1951) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(*(void **)(a2 + 1928));
    goto LABEL_9;
  }
}

void sub_7385FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[233];
    if (v3)
    {
      a2[234] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[230];
    if (v4)
    {
      a2[231] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)a2[226];
    if (v5)
    {
      a2[227] = v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)a2[223];
    if (v6)
    {
      a2[224] = v6;
      operator delete(v6);
    }
    sub_328138((uint64_t)(a2 + 127));
    operator delete();
  }
}

uint64_t sub_738690(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 5);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x3A83A83A83A83ALL) {
    sub_2E00();
  }
  if (0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5) > v6) {
    unint64_t v6 = 0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5);
  }
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 5) >= 0x1D41D41D41D41DLL) {
    unint64_t v10 = 0x3A83A83A83A83ALL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x3A83A83A83A83ALL) {
      sub_188D718();
    }
    int v11 = (char *)operator new(1120 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v18 = (uint64_t)&v11[1120 * v5];
  unsigned int v19 = &v11[1120 * v10];
  sub_738844((uint64_t)(a1 + 2), v18, a2, a3, a4);
  uint64_t v12 = v18;
  uint64_t v13 = v18 + 1120;
  long long v15 = (char *)*a1;
  long long v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v18;
    a1[1] = v13;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    do
    {
      v14 -= 1120;
      uint64_t v12 = sub_4C09FC(v12 - 1120, (uint64_t)v14);
    }
    while (v14 != v15);
    uint64_t v16 = (char *)*a1;
    long long v14 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v19;
    if (v14 != v16)
    {
      do
      {
        v14 -= 1120;
        sub_3A6B94((uint64_t)v14);
      }
      while (v14 != v16);
      long long v14 = v16;
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v18 + 1120;
}

void sub_738830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A7590((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_738844(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (*((unsigned char *)a3 + 8)) {
    uint64_t v11 = *a3;
  }
  sub_34C720((uint64_t)v10, a4);
  if (*(char *)(a5 + 23) < 0)
  {
    sub_4200(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    uint64_t v9 = *(void *)(a5 + 16);
  }
  sub_60498C(a2, (uint64_t)&v11, (uint64_t)v10, (long long *)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return sub_29D95C((uint64_t)v10);
}

void sub_738918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_73892C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_29D95C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_738954(uint64_t *a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = (std::string *)*a1;
  if (0x86BCA1AF286BCA1BLL * ((v8 - *a1) >> 3) >= a4)
  {
    if (0x86BCA1AF286BCA1BLL * ((a1[1] - (uint64_t)v9) >> 3) >= a4)
    {
      sub_59D630((uint64_t)__str, (uint64_t)a3, v9);
      sub_52FA20((uint64_t)a1, v19);
    }
    else
    {
      uint64_t v16 = (std::string *)((char *)__str + 8 * ((a1[1] - (uint64_t)v9) >> 3));
      sub_59D630((uint64_t)__str, (uint64_t)v16, v9);
      uint64_t v17 = a1[1];
      if (v16 != a3)
      {
        uint64_t v18 = 0;
        do
        {
          sub_4AA8E0((char *)(v17 + v18), (long long *)((char *)v16 + v18));
          v18 += 152;
        }
        while ((std::string *)((char *)v16 + v18) != a3);
        v17 += v18;
      }
      a1[1] = v17;
    }
  }
  else
  {
    if (v9)
    {
      sub_52FA20((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x1AF286BCA1AF286) {
      goto LABEL_25;
    }
    unint64_t v10 = 0x86BCA1AF286BCA1BLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v11;
    if (v12 > 0x1AF286BCA1AF286) {
LABEL_25:
    }
      sub_2E00();
    uint64_t v13 = 152 * v12;
    long long v14 = (char *)operator new(152 * v12);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)&v14[v13];
    if (__str != a3)
    {
      uint64_t v15 = 0;
      do
      {
        sub_4AA8E0(&v14[v15], (long long *)((char *)__str + v15));
        v15 += 152;
      }
      while ((std::string *)((char *)__str + v15) != a3);
      v14 += v15;
    }
    a1[1] = (uint64_t)v14;
  }
}

void sub_738B58(_Unwind_Exception *a1)
{
  sub_5949E0(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_738B84(_Unwind_Exception *a1)
{
  sub_5949E0(v2, v4, v4, v3, v3);
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

uint64_t sub_738BB0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 152) = 0u;
  uint64_t v9 = *(void *)(a2 + 176);
  char v10 = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = 0;
  uint64_t v11 = a1 + 192;
  *(unsigned char *)(a1 + 184) = v10;
  *(void *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v12 = a2 + 192;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v13;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a2 + 264) = 0u;
  uint64_t v14 = *(void *)(a2 + 288);
  *(_OWORD *)(a2 + 280) = 0u;
  *(void *)(a1 + 288) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 296);
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v14;
  long long v15 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = v15;
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 312) = 0u;
  long long v16 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v16;
  *(_OWORD *)(a2 + 336) = 0u;
  *(void *)(a2 + 328) = 0;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(_OWORD *)(a2 + 352) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v17 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v17;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 392) = 0;
  *(_OWORD *)(a2 + 376) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  *(_OWORD *)(a2 + 400) = 0u;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  uint64_t v18 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v18;
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(_OWORD *)(a2 + 424) = 0u;
  uint64_t v19 = *(void *)(a2 + 448);
  *(_OWORD *)(a2 + 440) = 0u;
  *(void *)(a1 + 448) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 456);
  *(unsigned char *)(a1 + 460) = *(unsigned char *)(a2 + 460);
  *(_DWORD *)(a1 + 456) = v19;
  long long v20 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v20;
  *(void *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  long long v21 = *(_OWORD *)(a2 + 488);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = v21;
  *(_OWORD *)(a2 + 496) = 0u;
  *(void *)(a2 + 488) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a2 + 528) = 0;
  *(_OWORD *)(a2 + 512) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  *(_OWORD *)(a2 + 536) = 0u;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0;
  *(_OWORD *)(a2 + 560) = 0u;
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_OWORD *)(a2 + 584) = 0u;
  uint64_t v22 = *(void *)(a2 + 608);
  *(_OWORD *)(a2 + 600) = 0u;
  *(void *)(a1 + 608) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 616);
  *(unsigned char *)(a1 + 620) = *(unsigned char *)(a2 + 620);
  *(_DWORD *)(a1 + 616) = v22;
  long long v23 = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v23;
  *(void *)(a2 + 624) = 0;
  *(_OWORD *)(a2 + 632) = 0u;
  long long v24 = *(_OWORD *)(a2 + 648);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = v24;
  *(_OWORD *)(a2 + 656) = 0u;
  *(void *)(a2 + 648) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  *(_OWORD *)(a2 + 672) = 0u;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(void *)(a2 + 712) = 0;
  *(_OWORD *)(a2 + 696) = 0u;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = 0;
  *(_OWORD *)(a2 + 720) = 0u;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(_OWORD *)(a2 + 744) = 0u;
  uint64_t v25 = *(void *)(a2 + 768);
  *(_OWORD *)(a2 + 760) = 0u;
  *(void *)(a1 + 768) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 776);
  *(unsigned char *)(a1 + 780) = *(unsigned char *)(a2 + 780);
  *(_DWORD *)(a1 + 776) = v25;
  long long v26 = *(_OWORD *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v26;
  *(void *)(a2 + 784) = 0;
  *(_OWORD *)(a2 + 792) = 0u;
  long long v27 = *(_OWORD *)(a2 + 808);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = v27;
  *(_OWORD *)(a2 + 816) = 0u;
  *(void *)(a2 + 808) = 0;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a2 + 848) = 0;
  *(_OWORD *)(a2 + 832) = 0u;
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(void *)(a2 + 872) = 0;
  *(_OWORD *)(a2 + 856) = 0u;
  *(void *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a2 + 896) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)(a2 + 904) = 0u;
  uint64_t v28 = *(void *)(a2 + 928);
  *(_OWORD *)(a2 + 920) = 0u;
  *(void *)(a1 + 928) = v28;
  LODWORD(v28) = *(_DWORD *)(a2 + 936);
  *(unsigned char *)(a1 + 940) = *(unsigned char *)(a2 + 940);
  *(_DWORD *)(a1 + 936) = v28;
  long long v29 = *(_OWORD *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = v29;
  *(void *)(a2 + 944) = 0;
  *(_OWORD *)(a2 + 952) = 0u;
  long long v30 = *(_OWORD *)(a2 + 968);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(_OWORD *)(a1 + 968) = v30;
  *(_OWORD *)(a2 + 976) = 0u;
  *(void *)(a2 + 968) = 0;
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a2 + 1008) = 0;
  *(_OWORD *)(a2 + 992) = 0u;
  *(void *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a2 + 1032) = 0;
  *(_OWORD *)(a2 + 1016) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = 0;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  uint64_t v31 = *(void *)(a2 + 1112);
  *(_OWORD *)(a2 + 1088) = 0u;
  *(_OWORD *)(a2 + 1104) = 0u;
  *(void *)(a1 + 1112) = v31;
  LODWORD(v31) = *(_DWORD *)(a2 + 1120);
  *(unsigned char *)(a1 + 1124) = *(unsigned char *)(a2 + 1124);
  *(_DWORD *)(a1 + 1120) = v31;
  long long v32 = *(_OWORD *)(a2 + 1128);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = v32;
  *(void *)(a2 + 1128) = 0;
  *(void *)(a2 + 1144) = 0;
  *(void *)(a2 + 1136) = 0;
  long long v33 = *(_OWORD *)(a2 + 1152);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(_OWORD *)(a1 + 1152) = v33;
  *(void *)(a2 + 1168) = 0;
  *(void *)(a2 + 1160) = 0;
  *(void *)(a2 + 1152) = 0;
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_DWORD *)(a1 + 1216) = *(_DWORD *)(a2 + 1216);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 1216), (uint64_t *)(a2 + 1184), (void *)(a1 + 1184));
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  long long v34 = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(_OWORD *)(a1 + 1232) = v34;
  *(_OWORD *)(a2 + 1240) = 0u;
  *(void *)(a2 + 1232) = 0;
  *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
  long long v35 = *(_OWORD *)(a2 + 1264);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(_OWORD *)(a1 + 1264) = v35;
  *(_OWORD *)(a2 + 1272) = 0u;
  *(void *)(a2 + 1264) = 0;
  *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  *(_OWORD *)(a1 + 1312) = 0u;
  *(void *)(a1 + 1304) = 0;
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a2 + 1320) = 0;
  *(_OWORD *)(a2 + 1304) = 0u;
  *(void *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a2 + 1344) = 0;
  *(_OWORD *)(a2 + 1328) = 0u;
  sub_4F4498(a1 + 1352, a2 + 1352);
  sub_4F4498(a1 + 1848, a2 + 1848);
  *(void *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  *(void *)(a2 + 2360) = 0;
  *(_OWORD *)(a2 + 2344) = 0u;
  *(void *)(a1 + 2384) = 0;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2368) = *(_OWORD *)(a2 + 2368);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(void *)(a2 + 2384) = 0;
  *(_OWORD *)(a2 + 2368) = 0u;
  sub_5B01C8(a1 + 2392, a2 + 2392);
  *(_OWORD *)(a1 + 7192) = 0u;
  *(void *)(a1 + 7208) = 0;
  *(void *)(a1 + 7192) = *(void *)(a2 + 7192);
  *(void *)(a1 + 7200) = *(void *)(a2 + 7200);
  *(void *)(a1 + 7208) = *(void *)(a2 + 7208);
  *(_OWORD *)(a2 + 7192) = 0u;
  *(void *)(a2 + 7208) = 0;
  uint64_t v36 = *(void *)(a2 + 7216);
  *(_DWORD *)(a1 + 7224) = *(_DWORD *)(a2 + 7224);
  *(void *)(a1 + 7216) = v36;
  long long v37 = *(_OWORD *)(a2 + 7232);
  *(void *)(a1 + 7248) = *(void *)(a2 + 7248);
  *(_OWORD *)(a1 + 7232) = v37;
  *(void *)(a2 + 7248) = 0;
  *(void *)(a2 + 7240) = 0;
  *(void *)(a2 + 7232) = 0;
  uint64_t v38 = *(void *)(a2 + 7272);
  *(_OWORD *)(a1 + 7256) = *(_OWORD *)(a2 + 7256);
  *(void *)(a1 + 7272) = v38;
  *(void *)(a2 + 7272) = 0;
  *(void *)(a2 + 7264) = 0;
  *(void *)(a2 + 7256) = 0;
  *(_DWORD *)(a1 + 7312) = *(_DWORD *)(a2 + 7312);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 7312), (uint64_t *)(a2 + 7280), (void *)(a1 + 7280));
  *(void *)(a1 + 7320) = *(void *)(a2 + 7320);
  long long v39 = *(_OWORD *)(a2 + 7328);
  *(void *)(a1 + 7344) = *(void *)(a2 + 7344);
  *(_OWORD *)(a1 + 7328) = v39;
  *(_OWORD *)(a2 + 7336) = 0u;
  *(void *)(a2 + 7328) = 0;
  *(unsigned char *)(v11 + 7160) = *(unsigned char *)(v12 + 7160);
  long long v40 = *(_OWORD *)(a2 + 7360);
  *(void *)(a1 + 7376) = *(void *)(a2 + 7376);
  *(_OWORD *)(a1 + 7360) = v40;
  *(_OWORD *)(a2 + 7368) = 0u;
  *(void *)(a2 + 7360) = 0;
  *(unsigned char *)(v11 + 7192) = *(unsigned char *)(v12 + 7192);
  *(_OWORD *)(a1 + 7400) = 0u;
  *(void *)(a1 + 7392) = 0;
  *(_OWORD *)(a1 + 7392) = *(_OWORD *)(a2 + 7392);
  *(void *)(a1 + 7408) = *(void *)(a2 + 7408);
  *(void *)(a2 + 7408) = 0;
  *(_OWORD *)(a2 + 7392) = 0u;
  *(_OWORD *)(a1 + 7416) = 0u;
  *(void *)(a1 + 7432) = 0;
  *(void *)(a1 + 7416) = *(void *)(a2 + 7416);
  *(void *)(a1 + 7424) = *(void *)(a2 + 7424);
  *(void *)(a1 + 7432) = *(void *)(a2 + 7432);
  *(_OWORD *)(a2 + 7416) = 0u;
  *(void *)(a2 + 7432) = 0;
  long long v41 = *(_OWORD *)(a2 + 7440);
  *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
  *(_OWORD *)(a1 + 7440) = v41;
  *(void *)(a2 + 7440) = 0;
  *(_OWORD *)(a2 + 7448) = 0u;
  uint64_t v42 = *(void *)(a2 + 7480);
  *(_OWORD *)(a1 + 7464) = *(_OWORD *)(a2 + 7464);
  *(void *)(a1 + 7480) = v42;
  *(_OWORD *)(a2 + 7472) = 0u;
  *(void *)(a2 + 7464) = 0;
  long long v43 = *(_OWORD *)(a2 + 7488);
  *(void *)(a1 + 7504) = *(void *)(a2 + 7504);
  *(_OWORD *)(a1 + 7488) = v43;
  *(void *)(a2 + 7504) = 0;
  *(_OWORD *)(a2 + 7488) = 0u;
  *(_OWORD *)(a1 + 7512) = 0u;
  *(void *)(a1 + 7528) = 0;
  *(void *)(a1 + 7512) = *(void *)(a2 + 7512);
  *(void *)(a1 + 7520) = *(void *)(a2 + 7520);
  *(void *)(a1 + 7528) = *(void *)(a2 + 7528);
  *(_OWORD *)(a2 + 7512) = 0u;
  *(void *)(a2 + 7528) = 0;
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  *(_OWORD *)(a1 + 7536) = *(_OWORD *)(a2 + 7536);
  *(void *)(a1 + 7552) = *(void *)(a2 + 7552);
  *(void *)(a2 + 7552) = 0;
  *(_OWORD *)(a2 + 7536) = 0u;
  return a1;
}

void sub_7394F0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v2)
  {
    uint64_t v5 = (uint64_t)(a2 + 1518);
    do
    {
      if (*((_DWORD *)v2 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      long long v6 = (void *)v2[5];
      HIBYTE(v16) = 5;
      strcpy((char *)__p, "scope");
      uint64_t v7 = sub_561B0(v6, (uint64_t)__p);
      int v8 = *(char *)(v7 + 23);
      if (v8 < 0)
      {
        if (*(void *)(v7 + 8) == 5)
        {
          uint64_t v7 = *(void *)v7;
LABEL_10:
          BOOL v10 = *(_DWORD *)v7 != 1953853298 || *(unsigned char *)(v7 + 4) != 101;
          if ((SHIBYTE(v16) & 0x80000000) == 0) {
            goto LABEL_20;
          }
LABEL_19:
          operator delete(__p[0]);
          goto LABEL_20;
        }
      }
      else if (v8 == 5)
      {
        goto LABEL_10;
      }
      BOOL v10 = 1;
      if (SHIBYTE(v16) < 0) {
        goto LABEL_19;
      }
LABEL_20:
      if (!v10)
      {
        sub_739718(a1, a2, v6, (uint64_t)v18);
        sub_739908(a1, (uint64_t)(v2 + 2), (uint64_t)v18, (uint64_t)__p);
        if (v17) {
          sub_5BCE98(v5, __p, (uint64_t)(v2 + 2));
        }
        uint64_t v11 = v16;
        if (v16)
        {
          do
          {
            uint64_t v13 = *(char **)v11;
            sub_57AC8((uint64_t *)v11 + 5);
            if (v11[39] < 0) {
              operator delete(*((void **)v11 + 2));
            }
            operator delete(v11);
            uint64_t v11 = v13;
          }
          while (v13);
        }
        uint64_t v12 = __p[0];
        __p[0] = 0;
        if (v12) {
          operator delete(v12);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_7396D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_739718(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v19[0] = 0;
  v19[1] = 0;
  HIBYTE(__p[2]) = 21;
  long long v20 = 0;
  strcpy((char *)__p, "feature_polygon_usage");
  int v8 = sub_58070(a3, (uint64_t)__p);
  uint64_t v9 = v8;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_8:
    int v12 = 0;
    goto LABEL_18;
  }
  operator delete(__p[0]);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_3:
  unint64_t v10 = sub_46C760(a2);
  HIBYTE(v17[2]) = 21;
  strcpy((char *)v17, "feature_polygon_usage");
  uint64_t v11 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(a3, (uint64_t)v17);
  sub_739B3C(a1, a2, 0, v10 - 1, v11, (uint64_t)__p);
  *(_OWORD *)char v19 = *(_OWORD *)__p;
  long long v20 = __p[2];
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v17[2]) < 0)
  {
    operator delete(v17[0]);
    int v12 = SHIBYTE(v20);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_5:
      if (v12 == 5)
      {
        uint64_t v13 = v19;
        goto LABEL_12;
      }
LABEL_16:
      *(_OWORD *)a4 = *(_OWORD *)v19;
      *(void *)(a4 + 16) = v20;
      return;
    }
  }
  else
  {
    int v12 = SHIBYTE(v20);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (v19[1] != (char *)dword_4 + 1) {
    goto LABEL_16;
  }
  uint64_t v13 = (void **)v19[0];
LABEL_12:
  int v14 = *(_DWORD *)v13;
  int v15 = *((unsigned __int8 *)v13 + 4);
  if (v14 != 1819438967 || v15 != 100) {
    goto LABEL_16;
  }
LABEL_18:
  sub_739DE0(a1, a2, a4);
  if (v12 < 0) {
    operator delete(v19[0]);
  }
}

void sub_7398C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p)
{
  if (v25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_739908(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  long long v6 = (void *)sub_560F4(*(void **)(a1 + 3912), a2);
  if (sub_58070(v6, a3))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(__dst, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)a3;
      uint64_t v17 = *(void *)(a3 + 16);
    }
  }
  else
  {
    char v15 = 5;
    strcpy((char *)__p, "world");
    uint64_t v7 = sub_58070(v6, (uint64_t)__p);
    uint64_t v8 = 5;
    if (!v7) {
      uint64_t v8 = 0;
    }
    HIBYTE(v17) = v8;
    if (v7) {
      qmemcpy(__dst, "world", 5);
    }
    *(unsigned char *)((unint64_t)__dst | v8) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = (void *)HIBYTE(v17);
  char v10 = HIBYTE(v17);
  if (v17 < 0) {
    uint64_t v9 = __dst[1];
  }
  if (v9)
  {
    char v15 = 15;
    strcpy((char *)__p, "region_template");
    uint64_t v11 = sub_58070(v6, (uint64_t)__p);
    if (v11)
    {
      if (*((_DWORD *)v11 + 12) == 2)
      {
        uint64_t v12 = v11[5];
        if (v12 != a4)
        {
          *(_DWORD *)(a4 + 32) = *(_DWORD *)(v12 + 32);
          sub_5A4DC((void *)a4, *(uint64_t **)(v12 + 16), 0);
        }
      }
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = sub_560F4(v6, (uint64_t)__dst);
    sub_59234((void *)a4, v13);
    char v10 = HIBYTE(v17);
  }
  if (v10 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_739AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_5450C(v21);
  _Unwind_Resume(a1);
}

void sub_739B3C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (__cdecl **a5)(std::stringbuf *__hidden this)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = sub_46C8EC(a2, a3);
  sub_2954EC(*(void *)(a1 + 8), *(void *)(v11 + 32), (uint64_t)v29);
  uint64_t v12 = sub_46C8EC(a2, a4);
  sub_2954EC(*(void *)(a1 + 8), *(void *)(v12 + 32), (uint64_t)v26);
  unint64_t v32 = sub_2E1AA4((uint64_t)v29);
  *(_DWORD *)long long v33 = v13;
  *(void *)&v33[4] = sub_2E40A4((uint64_t)v26);
  int v34 = v14;
  *(_OWORD *)long long v23 = 0u;
  *(_OWORD *)__p = 0u;
  int v25 = 1065353216;
  sub_4BC598((uint64_t)v23, (unsigned int *)&v32, (uint64_t)&v32);
  sub_4BC598((uint64_t)v23, (unsigned int *)&v33[4], (uint64_t)&v33[4]);
  char v15 = (uint64_t **)sub_37B3A0(*(uint64_t **)a1);
  sub_5BC948(v15, (uint64_t)v23, a5, (uint64_t)&v32);
  long long v16 = (void **)v32;
  if (*(char *)(v32 + 23) < 0)
  {
    sub_4200((unsigned char *)a6, *(void **)v32, *(void *)(v32 + 8));
    long long v16 = (void **)v32;
    if (!v32) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v17 = *(_OWORD *)v32;
    *(void *)(a6 + 16) = *(void *)(v32 + 16);
    *(_OWORD *)a6 = v17;
  }
  uint64_t v18 = *(void ***)v33;
  char v19 = v16;
  if (*(void ***)v33 != v16)
  {
    do
    {
      if (*((char *)v18 - 1) < 0) {
        operator delete(*(v18 - 3));
      }
      v18 -= 3;
    }
    while (v18 != v16);
    char v19 = (void *)v32;
  }
  *(void *)long long v33 = v16;
  operator delete(v19);
LABEL_11:
  long long v20 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v21 = (void *)*v20;
      operator delete(v20);
      long long v20 = v21;
    }
    while (v21);
  }
  uint64_t v22 = v23[0];
  v23[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
}

void sub_739D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_object,_Unwind_Exception *a22)
{
  sub_1A668((void **)(v22 - 80));
  sub_12168((uint64_t)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
    long long v24 = exception_object;
    if (!exception_object) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v24 = exception_object;
    if (!exception_object) {
      goto LABEL_3;
    }
  }
  a22 = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_739DE0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_46C8EC(a2, 0);
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v6 + 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 36) << 32), __n);
  unint64_t v7 = sub_46C760(a2);
  uint64_t v8 = sub_46C8EC(a2, v7 - 1);
  sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32), __p);
  uint64_t v9 = HIBYTE(v20);
  unint64_t v10 = __n[1];
  if (v20 >= 0) {
    size_t v11 = HIBYTE(v20);
  }
  else {
    size_t v11 = __n[1];
  }
  unint64_t v12 = v18;
  unsigned __int8 v13 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v12 = (unint64_t)__p[1];
  }
  if (v11 != v12) {
    goto LABEL_18;
  }
  if ((v18 & 0x80u) == 0) {
    int v14 = __p;
  }
  else {
    int v14 = (void **)__p[0];
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v20))
    {
LABEL_15:
      *(_OWORD *)a3 = *(_OWORD *)__n;
      *(void *)(a3 + 16) = v20;
      if ((v13 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    char v15 = __n;
    while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
    {
      char v15 = (size_t *)((char *)v15 + 1);
      int v14 = (void **)((char *)v14 + 1);
      if (!--v9) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  long long v16 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v14, __n[1]))
  {
LABEL_18:
    *(unsigned char *)(a3 + 23) = 5;
    strcpy((char *)a3, "world");
    if ((v13 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a3, v16, v10);
  if ((v18 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v20) < 0) {
    goto LABEL_23;
  }
}

void sub_739F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_739FC0(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 7424) != *(void *)(a1 + 7432)) {
    return;
  }
  uint64_t v4 = sub_3750CC(a2);
  uint64_t v5 = sub_3777C0(a2);
  unint64_t v6 = sub_46C760((void *)a1);
  if (v6)
  {
    unint64_t v7 = v6;
    uint64_t v8 = sub_46C8EC((void *)a1, 0);
    sub_3D63DC(v4, *(unsigned int *)(v8 + 32) | ((unint64_t)*(unsigned __int16 *)(v8 + 36) << 32), __p);
    if (sub_3D4980(v5, (const void **)__p))
    {
      if (SHIBYTE(v28) < 0)
      {
        *(unsigned char *)__p[0] = 0;
        __p[1] = 0;
        unint64_t v9 = *(void *)(a1 + 7432);
        if (v9 < *(void *)(a1 + 7440))
        {
LABEL_8:
          if (SHIBYTE(v28) < 0)
          {
            sub_4200((unsigned char *)v9, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v10 = *(_OWORD *)__p;
            *(void *)(v9 + 16) = v28;
            *(_OWORD *)unint64_t v9 = v10;
          }
          *(void *)(a1 + 7432) = v9 + 24;
          *(void *)(a1 + 7432) = v9 + 24;
          if (SHIBYTE(v28) < 0)
          {
LABEL_16:
            operator delete(__p[0]);
            if (v7 == 1) {
              goto LABEL_17;
            }
            goto LABEL_24;
          }
LABEL_12:
          if (v7 == 1) {
            goto LABEL_17;
          }
LABEL_24:
          uint64_t v13 = 1;
          while (1)
          {
            char v15 = (int **)sub_46C8EC((void *)a1, v13);
            long long v16 = (unsigned __int16 *)((char *)*v15 - **v15);
            if (*v16 >= 0xDu && (uint64_t v17 = v16[6]) != 0) {
              int v18 = *(unsigned __int16 *)((char *)*v15 + v17);
            }
            else {
              int v18 = 0;
            }
            uint64_t v19 = v13 - 1;
            uint64_t v20 = (void *)sub_46C8EC((void *)a1, v19);
            uint64_t v21 = (unsigned __int16 *)(*v20 - *(int *)*v20);
            if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0)
            {
              if (*(unsigned __int16 *)(*v20 + v22) == v18) {
                goto LABEL_42;
              }
            }
            else if (!v18)
            {
LABEL_42:
              unint64_t v25 = *(void *)(a1 + 7432);
              long long v26 = (_OWORD *)(v25 - 24);
              if (v25 >= *(void *)(a1 + 7440))
              {
                int v14 = sub_55C330((char **)(a1 + 7424), (uint64_t)v26);
              }
              else
              {
                if (*(char *)(v25 - 1) < 0)
                {
                  sub_4200(*(unsigned char **)(a1 + 7432), *(void **)(v25 - 24), *(void *)(v25 - 16));
                }
                else
                {
                  *(_OWORD *)unint64_t v25 = *v26;
                  *(void *)(v25 + 16) = *(void *)(v25 - 8);
                }
                int v14 = (char *)(v25 + 24);
                *(void *)(a1 + 7432) = v25 + 24;
              }
              *(void *)(a1 + 7432) = v14;
              goto LABEL_27;
            }
            sub_3D63DC(v4, *((unsigned int *)v15 + 8) | ((unint64_t)*((unsigned __int16 *)v15 + 18) << 32), __p);
            if (!sub_3D4980(v5, (const void **)__p)) {
              goto LABEL_38;
            }
            if ((SHIBYTE(v28) & 0x80000000) == 0) {
              break;
            }
            *(unsigned char *)__p[0] = 0;
            __p[1] = 0;
            unint64_t v23 = *(void *)(a1 + 7432);
            if (v23 < *(void *)(a1 + 7440))
            {
LABEL_39:
              if (SHIBYTE(v28) < 0)
              {
                sub_4200((unsigned char *)v23, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                long long v24 = *(_OWORD *)__p;
                *(void *)(v23 + 16) = v28;
                *(_OWORD *)unint64_t v23 = v24;
              }
              *(void *)(a1 + 7432) = v23 + 24;
              *(void *)(a1 + 7432) = v23 + 24;
              if ((SHIBYTE(v28) & 0x80000000) == 0) {
                goto LABEL_27;
              }
LABEL_52:
              operator delete(__p[0]);
              goto LABEL_27;
            }
LABEL_48:
            *(void *)(a1 + 7432) = sub_55C330((char **)(a1 + 7424), (uint64_t)__p);
            if (SHIBYTE(v28) < 0) {
              goto LABEL_52;
            }
LABEL_27:
            uint64_t v13 = v19 + 2;
            if (v13 == v7) {
              goto LABEL_17;
            }
          }
          LOBYTE(__p[0]) = 0;
          HIBYTE(v28) = 0;
LABEL_38:
          unint64_t v23 = *(void *)(a1 + 7432);
          if (v23 < *(void *)(a1 + 7440)) {
            goto LABEL_39;
          }
          goto LABEL_48;
        }
LABEL_11:
        *(void *)(a1 + 7432) = sub_55C330((char **)(a1 + 7424), (uint64_t)__p);
        if (SHIBYTE(v28) < 0) {
          goto LABEL_16;
        }
        goto LABEL_12;
      }
      LOBYTE(__p[0]) = 0;
      HIBYTE(v28) = 0;
    }
    unint64_t v9 = *(void *)(a1 + 7432);
    if (v9 < *(void *)(a1 + 7440)) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v11 = *(void *)(a1 + 7424);
  for (uint64_t i = *(void *)(a1 + 7432); v11 != i; v11 += 24)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      if (*(void *)(v11 + 8)) {
        goto LABEL_23;
      }
    }
    else if (*(unsigned char *)(v11 + 23))
    {
LABEL_23:
      std::string::operator=((std::string *)(a1 + 7400), (const std::string *)v11);
      return;
    }
  }
}

void sub_73A320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 7432) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_73A360(int64x2_t *a1, void *a2, uint64_t a3)
{
  if (!sub_46C760(a1) || a1[74].i64[0] != a1[74].i64[1]) {
    return;
  }
  unint64_t v6 = (long long *)a1[464].i64[0];
  if (*((char *)v6 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v6, *((void *)v6 + 1));
    uint64_t v8 = a1[464].i64[1];
    if ((*(char *)(v8 - 1) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    sub_4200(&v67, *(void **)(v8 - 24), *(void *)(v8 - 16));
    goto LABEL_8;
  }
  long long v7 = *v6;
  uint64_t v70 = *((void *)v6 + 2);
  long long __dst = v7;
  uint64_t v8 = a1[464].i64[1];
  if (*(char *)(v8 - 1) < 0) {
    goto LABEL_7;
  }
LABEL_5:
  long long v9 = *(_OWORD *)(v8 - 24);
  uint64_t v68 = *(void *)(v8 - 8);
  long long v67 = v9;
LABEL_8:
  uint64_t v10 = HIBYTE(v70);
  unint64_t v11 = *((void *)&__dst + 1);
  if (v70 >= 0) {
    uint64_t v12 = HIBYTE(v70);
  }
  else {
    uint64_t v12 = *((void *)&__dst + 1);
  }
  uint64_t v13 = HIBYTE(v68);
  if (v68 < 0) {
    uint64_t v13 = *((void *)&v67 + 1);
  }
  if (v12 != v13) {
    goto LABEL_24;
  }
  if (v68 >= 0) {
    int v14 = (unsigned __int8 *)&v67;
  }
  else {
    int v14 = (unsigned __int8 *)v67;
  }
  if ((v70 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v70))
    {
LABEL_22:
      long long v65 = __dst;
      uint64_t v66 = v70;
      goto LABEL_25;
    }
    p_dst = (unsigned __int8 *)&__dst;
    while (*p_dst == *v14)
    {
      ++p_dst;
      ++v14;
      if (!--v10) {
        goto LABEL_22;
      }
    }
    goto LABEL_24;
  }
  uint64_t v16 = (void *)__dst;
  if (memcmp((const void *)__dst, v14, *((size_t *)&__dst + 1)))
  {
LABEL_24:
    HIBYTE(v66) = 0;
    LOBYTE(v65) = 0;
    goto LABEL_25;
  }
  sub_4200(&v65, v16, v11);
LABEL_25:
  long long __p = 0uLL;
  uint64_t v52 = 0;
  sub_831D8C(v62, a2, 0, &__p);
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v17 = sub_3750CC(a2);
  unint64_t v18 = sub_46C760(a1);
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v48 = v17;
    uint64_t v20 = a1 + 464;
    while (1)
    {
      uint64_t v21 = sub_46C8EC(a1, (uint64_t)v19);
      uint64_t v22 = sub_4D4928(v20, (unint64_t)v19);
      uint64_t v61 = *(void *)(v21 + 32);
      if (!v19)
      {
        sub_832C78((uint64_t)v62, (unsigned int *)&v61, a3, v22, (uint64_t)&__p);
        uint64_t v49 = 0;
        unint64_t v28 = a1[74].u64[1];
        if (v28 >= a1[75].i64[0]) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }
      uint64_t v23 = sub_46C8EC(a1, (uint64_t)(v19 - 1));
      if (sub_2E79EC(v17, *(void *)(v23 + 32), *(void *)(v21 + 32))) {
        break;
      }
LABEL_71:
      sub_832C78((uint64_t)v62, (unsigned int *)&v61, a3, v22, (uint64_t)&__p);
      if (sub_6F317C((unsigned __int8 *)&__p, (unsigned __int8 *)(a1[74].i64[1] - 160))) {
        goto LABEL_76;
      }
      uint64_t v49 = v19;
      unint64_t v28 = a1[74].u64[1];
      if (v28 >= a1[75].i64[0])
      {
LABEL_74:
        uint64_t v47 = sub_5B07A8(a1 + 74, &__p, &v49);
        goto LABEL_75;
      }
LABEL_73:
      sub_4AA8E0((char *)a1[74].i64[1], &__p);
      *(void *)(v28 + 152) = v49;
      uint64_t v47 = v28 + 160;
      a1[74].i64[1] = v28 + 160;
LABEL_75:
      a1[74].i64[1] = v47;
LABEL_76:
      if (v60 < 0)
      {
        operator delete(v59);
        if ((v58 & 0x80000000) == 0)
        {
LABEL_78:
          if ((v56 & 0x80000000) == 0) {
            goto LABEL_79;
          }
          goto LABEL_83;
        }
      }
      else if ((v58 & 0x80000000) == 0)
      {
        goto LABEL_78;
      }
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_79:
        if (v54 < 0) {
          goto LABEL_29;
        }
        goto LABEL_84;
      }
LABEL_83:
      operator delete(v55);
      if (v54 < 0)
      {
LABEL_29:
        operator delete(v53);
        if (SHIBYTE(v52) < 0) {
          goto LABEL_85;
        }
        goto LABEL_30;
      }
LABEL_84:
      if (SHIBYTE(v52) < 0) {
LABEL_85:
      }
        operator delete((void *)__p);
LABEL_30:
      if (++v19 == (char *)v18) {
        goto LABEL_86;
      }
    }
    long long v24 = (int *)sub_2D5D58(v17, *(unsigned int *)(v23 + 32) | ((unint64_t)*(unsigned __int16 *)(v23 + 36) << 32));
    unint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v25 >= 0x25u && (uint64_t v26 = v25[18]) != 0) {
      long long v27 = (unsigned int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
    }
    else {
      long long v27 = 0;
    }
    sub_2DE69C(v27, &__p);
    long long v29 = (int *)sub_2D5D58(v17, *(unsigned int *)(v21 + 32) | ((unint64_t)*(unsigned __int16 *)(v21 + 36) << 32));
    long long v30 = (unsigned __int16 *)((char *)v29 - *v29);
    if (*v30 >= 0x25u && (uint64_t v31 = v30[18]) != 0) {
      unint64_t v32 = (unsigned int *)((char *)v29 + v31 + *(unsigned int *)((char *)v29 + v31));
    }
    else {
      unint64_t v32 = 0;
    }
    sub_2DE69C(v32, &v49);
    unint64_t v33 = v18;
    int v34 = v20;
    uint64_t v35 = a3;
    uint64_t v36 = *((void *)&__p + 1);
    uint64_t v37 = __p;
    uint64_t v38 = (void **)v49;
    if (*((void *)&__p + 1) - (void)__p == (char *)v50 - (unsigned char *)v49)
    {
      if ((void)__p == *((void *)&__p + 1))
      {
        char v40 = 1;
        if (!v49) {
          goto LABEL_62;
        }
      }
      else
      {
        do
        {
          BOOL v39 = sub_2DE5CC(v37, (uint64_t)v38);
          char v40 = v39;
          v37 += 40;
          v38 += 5;
        }
        while (v37 != v36 && v39);
        uint64_t v38 = (void **)v49;
        if (!v49) {
          goto LABEL_62;
        }
      }
    }
    else
    {
      char v40 = 0;
      if (!v49) {
        goto LABEL_62;
      }
    }
    uint64_t v42 = v50;
    long long v43 = v38;
    if (v50 != v38)
    {
      do
      {
        if (*((char *)v42 - 9) < 0) {
          operator delete(*(v42 - 4));
        }
        v42 -= 5;
      }
      while (v42 != v38);
      long long v43 = v49;
    }
    uint64_t v50 = v38;
    operator delete(v43);
LABEL_62:
    uint64_t v44 = __p;
    if ((void)__p)
    {
      uint64_t v45 = *((void *)&__p + 1);
      int v46 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v45 - 9) < 0) {
            operator delete(*(void **)(v45 - 32));
          }
          v45 -= 40;
        }
        while (v45 != v44);
        int v46 = (void *)__p;
      }
      *((void *)&__p + 1) = v44;
      operator delete(v46);
    }
    a3 = v35;
    uint64_t v20 = v34;
    unint64_t v18 = v33;
    uint64_t v17 = v48;
    if (v40) {
      goto LABEL_30;
    }
    goto LABEL_71;
  }
LABEL_86:
  if ((v64 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v66) & 0x80000000) == 0) {
      goto LABEL_88;
    }
LABEL_92:
    operator delete((void *)v65);
    if ((SHIBYTE(v68) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(v70) & 0x80000000) == 0) {
        return;
      }
LABEL_94:
      operator delete((void *)__dst);
      return;
    }
    goto LABEL_93;
  }
  operator delete(v63);
  if (SHIBYTE(v66) < 0) {
    goto LABEL_92;
  }
LABEL_88:
  if ((SHIBYTE(v68) & 0x80000000) == 0) {
    goto LABEL_89;
  }
LABEL_93:
  operator delete((void *)v67);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_94;
  }
}

void sub_73A8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v43 - 121) < 0)
  {
    operator delete(*(void **)(v43 - 144));
    if (*(char *)(v43 - 89) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v43 - 112));
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v43 - 89) < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_73A9CC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xBAA6550FFBAA6551 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AB355E008AB3) {
    sub_2E00();
  }
  if (0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3);
  }
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= 0x4559AAF004559) {
    unint64_t v6 = 0x8AB355E008AB3;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AB355E008AB3) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(7560 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[7560 * v6];
  uint64_t v9 = sub_738BB0((uint64_t)&v7[7560 * v3], a2);
  uint64_t v10 = v9 + 7560;
  uint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = (uint64_t)v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 7560;
    uint64_t v9 = sub_738BB0(v9 - 7560, (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (uint64_t)v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 7560;
      sub_574D4C((uint64_t)v11);
    }
    while (v11 != v13);
    unint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

BOOL sub_73AB30(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(a2 + 1120))
  {
    sub_4BD34C((uint64_t)v12, a2);
    uint64_t v5 = 160;
    if (!a3) {
      uint64_t v5 = 161;
    }
    char v6 = v12[v5];
    if (v22 < 0) {
      operator delete(__p);
    }
    long long v7 = (void **)v19;
    if (v19)
    {
      uint64_t v8 = v20;
      uint64_t v9 = v19;
      if (v20 != v19)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        uint64_t v9 = v19;
      }
      uint64_t v20 = v7;
      operator delete(v9);
    }
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_24:
        if ((v14 & 0x80000000) == 0) {
          return v6 != 0;
        }
LABEL_28:
        operator delete(v13);
        return v6 != 0;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v15);
    if ((v14 & 0x80000000) == 0) {
      return v6 != 0;
    }
    goto LABEL_28;
  }
  sub_4BE9F4((uint64_t)v12, a2);
  if (!a3)
  {
    if (v25 && v24[1])
    {
      unint64_t v4 = v24;
      goto LABEL_19;
    }
LABEL_29:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (!v25 || !v23[1]) {
    goto LABEL_29;
  }
  unint64_t v4 = v23;
LABEL_19:
  char v6 = *v4;
  sub_3A6B94((uint64_t)v12);
  return v6 != 0;
}

void sub_73ACE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_73ACFC(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a2);
  unint64_t v4 = (void *)sub_37746C(a2);
  a1[2] = *v4;
  uint64_t v5 = v4[1];
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy(a1 + 4, v4 + 2, 0xF18uLL);
  uint64_t v6 = v4[485];
  a1[487] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  HIBYTE(v19[2]) = 19;
  strcpy((char *)v19, "GuidanceEligibility");
  long long __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v7 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&__p);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v17;
    uint64_t v10 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v19[2]) < 0) {
    operator delete(v19[0]);
  }
  a1[488] = v7;
  strcpy((char *)v19, "GuidanceFeatureRegions");
  HIBYTE(v19[2]) = 22;
  long long __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v11 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&__p);
  uint64_t v12 = (void **)__p;
  if (__p)
  {
    uint64_t v13 = v17;
    char v14 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      char v14 = __p;
    }
    uint64_t v17 = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v19[2]) < 0) {
    operator delete(v19[0]);
  }
  a1[489] = v11;
  return a1;
}

void sub_73AEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_368744(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_73AF14(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 152) = 0u;
  uint64_t v9 = *(void *)(a2 + 176);
  char v10 = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = 0;
  uint64_t v11 = a1 + 192;
  *(unsigned char *)(a1 + 184) = v10;
  *(void *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v12 = a2 + 192;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v13;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a2 + 264) = 0u;
  uint64_t v14 = *(void *)(a2 + 288);
  *(_OWORD *)(a2 + 280) = 0u;
  *(void *)(a1 + 288) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 296);
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v14;
  long long v15 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = v15;
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 312) = 0u;
  long long v16 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v16;
  *(_OWORD *)(a2 + 336) = 0u;
  *(void *)(a2 + 328) = 0;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(_OWORD *)(a2 + 352) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v17 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v17;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 392) = 0;
  *(_OWORD *)(a2 + 376) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  *(_OWORD *)(a2 + 400) = 0u;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  uint64_t v18 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v18;
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(_OWORD *)(a2 + 424) = 0u;
  uint64_t v19 = *(void *)(a2 + 448);
  *(_OWORD *)(a2 + 440) = 0u;
  *(void *)(a1 + 448) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 456);
  *(unsigned char *)(a1 + 460) = *(unsigned char *)(a2 + 460);
  *(_DWORD *)(a1 + 456) = v19;
  long long v20 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v20;
  *(void *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  long long v21 = *(_OWORD *)(a2 + 488);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = v21;
  *(_OWORD *)(a2 + 496) = 0u;
  *(void *)(a2 + 488) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a2 + 528) = 0;
  *(_OWORD *)(a2 + 512) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  *(_OWORD *)(a2 + 536) = 0u;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0;
  *(_OWORD *)(a2 + 560) = 0u;
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_OWORD *)(a2 + 584) = 0u;
  uint64_t v22 = *(void *)(a2 + 608);
  *(_OWORD *)(a2 + 600) = 0u;
  *(void *)(a1 + 608) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 616);
  *(unsigned char *)(a1 + 620) = *(unsigned char *)(a2 + 620);
  *(_DWORD *)(a1 + 616) = v22;
  long long v23 = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v23;
  *(void *)(a2 + 624) = 0;
  *(_OWORD *)(a2 + 632) = 0u;
  long long v24 = *(_OWORD *)(a2 + 648);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = v24;
  *(_OWORD *)(a2 + 656) = 0u;
  *(void *)(a2 + 648) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  *(_OWORD *)(a2 + 672) = 0u;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(void *)(a2 + 712) = 0;
  *(_OWORD *)(a2 + 696) = 0u;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = 0;
  *(_OWORD *)(a2 + 720) = 0u;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(_OWORD *)(a2 + 744) = 0u;
  uint64_t v25 = *(void *)(a2 + 768);
  *(_OWORD *)(a2 + 760) = 0u;
  *(void *)(a1 + 768) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 776);
  *(unsigned char *)(a1 + 780) = *(unsigned char *)(a2 + 780);
  *(_DWORD *)(a1 + 776) = v25;
  long long v26 = *(_OWORD *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v26;
  *(void *)(a2 + 784) = 0;
  *(_OWORD *)(a2 + 792) = 0u;
  long long v27 = *(_OWORD *)(a2 + 808);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = v27;
  *(_OWORD *)(a2 + 816) = 0u;
  *(void *)(a2 + 808) = 0;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a2 + 848) = 0;
  *(_OWORD *)(a2 + 832) = 0u;
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(void *)(a2 + 872) = 0;
  *(_OWORD *)(a2 + 856) = 0u;
  *(void *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a2 + 896) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)(a2 + 904) = 0u;
  uint64_t v28 = *(void *)(a2 + 928);
  *(_OWORD *)(a2 + 920) = 0u;
  *(void *)(a1 + 928) = v28;
  LODWORD(v28) = *(_DWORD *)(a2 + 936);
  *(unsigned char *)(a1 + 940) = *(unsigned char *)(a2 + 940);
  *(_DWORD *)(a1 + 936) = v28;
  long long v29 = *(_OWORD *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = v29;
  *(void *)(a2 + 944) = 0;
  *(_OWORD *)(a2 + 952) = 0u;
  long long v30 = *(_OWORD *)(a2 + 968);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(_OWORD *)(a1 + 968) = v30;
  *(_OWORD *)(a2 + 976) = 0u;
  *(void *)(a2 + 968) = 0;
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a2 + 1008) = 0;
  *(_OWORD *)(a2 + 992) = 0u;
  *(void *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a2 + 1032) = 0;
  *(_OWORD *)(a2 + 1016) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = 0;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  uint64_t v31 = *(void *)(a2 + 1112);
  *(_OWORD *)(a2 + 1088) = 0u;
  *(_OWORD *)(a2 + 1104) = 0u;
  *(void *)(a1 + 1112) = v31;
  LODWORD(v31) = *(_DWORD *)(a2 + 1120);
  *(unsigned char *)(a1 + 1124) = *(unsigned char *)(a2 + 1124);
  *(_DWORD *)(a1 + 1120) = v31;
  long long v32 = *(_OWORD *)(a2 + 1128);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = v32;
  *(void *)(a2 + 1128) = 0;
  *(void *)(a2 + 1144) = 0;
  *(void *)(a2 + 1136) = 0;
  long long v33 = *(_OWORD *)(a2 + 1152);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(_OWORD *)(a1 + 1152) = v33;
  *(void *)(a2 + 1168) = 0;
  *(void *)(a2 + 1160) = 0;
  *(void *)(a2 + 1152) = 0;
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_DWORD *)(a1 + 1216) = *(_DWORD *)(a2 + 1216);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 1216), (uint64_t *)(a2 + 1184), (void *)(a1 + 1184));
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  long long v34 = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(_OWORD *)(a1 + 1232) = v34;
  *(_OWORD *)(a2 + 1240) = 0u;
  *(void *)(a2 + 1232) = 0;
  *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
  long long v35 = *(_OWORD *)(a2 + 1264);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(_OWORD *)(a1 + 1264) = v35;
  *(_OWORD *)(a2 + 1272) = 0u;
  *(void *)(a2 + 1264) = 0;
  *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  *(_OWORD *)(a1 + 1312) = 0u;
  *(void *)(a1 + 1304) = 0;
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a2 + 1320) = 0;
  *(_OWORD *)(a2 + 1304) = 0u;
  *(void *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a2 + 1344) = 0;
  *(_OWORD *)(a2 + 1328) = 0u;
  sub_4F4498(a1 + 1352, a2 + 1352);
  sub_4F4498(a1 + 1848, a2 + 1848);
  *(void *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  *(void *)(a2 + 2360) = 0;
  *(_OWORD *)(a2 + 2344) = 0u;
  *(void *)(a1 + 2384) = 0;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2368) = *(_OWORD *)(a2 + 2368);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(void *)(a2 + 2384) = 0;
  *(_OWORD *)(a2 + 2368) = 0u;
  sub_5B01C8(a1 + 2392, a2 + 2392);
  *(_OWORD *)(a1 + 7192) = 0u;
  *(void *)(a1 + 7208) = 0;
  *(void *)(a1 + 7192) = *(void *)(a2 + 7192);
  *(void *)(a1 + 7200) = *(void *)(a2 + 7200);
  *(void *)(a1 + 7208) = *(void *)(a2 + 7208);
  *(_OWORD *)(a2 + 7192) = 0u;
  *(void *)(a2 + 7208) = 0;
  uint64_t v36 = *(void *)(a2 + 7216);
  *(_DWORD *)(a1 + 7224) = *(_DWORD *)(a2 + 7224);
  *(void *)(a1 + 7216) = v36;
  long long v37 = *(_OWORD *)(a2 + 7232);
  *(void *)(a1 + 7248) = *(void *)(a2 + 7248);
  *(_OWORD *)(a1 + 7232) = v37;
  *(void *)(a2 + 7248) = 0;
  *(void *)(a2 + 7240) = 0;
  *(void *)(a2 + 7232) = 0;
  uint64_t v38 = *(void *)(a2 + 7272);
  *(_OWORD *)(a1 + 7256) = *(_OWORD *)(a2 + 7256);
  *(void *)(a1 + 7272) = v38;
  *(void *)(a2 + 7272) = 0;
  *(void *)(a2 + 7264) = 0;
  *(void *)(a2 + 7256) = 0;
  *(_DWORD *)(a1 + 7312) = *(_DWORD *)(a2 + 7312);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 7312), (uint64_t *)(a2 + 7280), (void *)(a1 + 7280));
  *(void *)(a1 + 7320) = *(void *)(a2 + 7320);
  long long v39 = *(_OWORD *)(a2 + 7328);
  *(void *)(a1 + 7344) = *(void *)(a2 + 7344);
  *(_OWORD *)(a1 + 7328) = v39;
  *(_OWORD *)(a2 + 7336) = 0u;
  *(void *)(a2 + 7328) = 0;
  *(unsigned char *)(v11 + 7160) = *(unsigned char *)(v12 + 7160);
  long long v40 = *(_OWORD *)(a2 + 7360);
  *(void *)(a1 + 7376) = *(void *)(a2 + 7376);
  *(_OWORD *)(a1 + 7360) = v40;
  *(_OWORD *)(a2 + 7368) = 0u;
  *(void *)(a2 + 7360) = 0;
  *(unsigned char *)(v11 + 7192) = *(unsigned char *)(v12 + 7192);
  *(_OWORD *)(a1 + 7400) = 0u;
  *(void *)(a1 + 7392) = 0;
  *(_OWORD *)(a1 + 7392) = *(_OWORD *)(a2 + 7392);
  *(void *)(a1 + 7408) = *(void *)(a2 + 7408);
  *(void *)(a2 + 7408) = 0;
  *(_OWORD *)(a2 + 7392) = 0u;
  *(_OWORD *)(a1 + 7416) = 0u;
  *(void *)(a1 + 7432) = 0;
  *(void *)(a1 + 7416) = *(void *)(a2 + 7416);
  *(void *)(a1 + 7424) = *(void *)(a2 + 7424);
  *(void *)(a1 + 7432) = *(void *)(a2 + 7432);
  *(_OWORD *)(a2 + 7416) = 0u;
  *(void *)(a2 + 7432) = 0;
  long long v41 = *(_OWORD *)(a2 + 7440);
  *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
  *(_OWORD *)(a1 + 7440) = v41;
  *(void *)(a2 + 7440) = 0;
  *(_OWORD *)(a2 + 7448) = 0u;
  uint64_t v42 = *(void *)(a2 + 7480);
  *(_OWORD *)(a1 + 7464) = *(_OWORD *)(a2 + 7464);
  *(void *)(a1 + 7480) = v42;
  *(_OWORD *)(a2 + 7472) = 0u;
  *(void *)(a2 + 7464) = 0;
  long long v43 = *(_OWORD *)(a2 + 7488);
  *(void *)(a1 + 7504) = *(void *)(a2 + 7504);
  *(_OWORD *)(a1 + 7488) = v43;
  *(void *)(a2 + 7504) = 0;
  *(_OWORD *)(a2 + 7488) = 0u;
  *(_OWORD *)(a1 + 7512) = 0u;
  *(void *)(a1 + 7528) = 0;
  *(void *)(a1 + 7512) = *(void *)(a2 + 7512);
  *(void *)(a1 + 7520) = *(void *)(a2 + 7520);
  *(void *)(a1 + 7528) = *(void *)(a2 + 7528);
  *(_OWORD *)(a2 + 7512) = 0u;
  *(void *)(a2 + 7528) = 0;
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  *(_OWORD *)(a1 + 7536) = *(_OWORD *)(a2 + 7536);
  *(void *)(a1 + 7552) = *(void *)(a2 + 7552);
  *(void *)(a2 + 7552) = 0;
  *(_OWORD *)(a2 + 7536) = 0u;
  return a1;
}

uint64_t sub_73B854(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xBAA6550FFBAA6551 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AB355E008AB3) {
    sub_2E00();
  }
  if (0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3);
  }
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= 0x4559AAF004559) {
    unint64_t v6 = 0x8AB355E008AB3;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AB355E008AB3) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(7560 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[7560 * v6];
  uint64_t v9 = sub_73AF14((uint64_t)&v7[7560 * v3], a2);
  uint64_t v10 = v9 + 7560;
  uint64_t v12 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = (uint64_t)v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 7560;
    uint64_t v9 = sub_73AF14(v9 - 7560, (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (uint64_t)v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 7560;
      sub_574D4C((uint64_t)v11);
    }
    while (v11 != v13);
    uint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

BOOL sub_73B9B8(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(a2 + 1120))
  {
    sub_4BD34C((uint64_t)v12, a2);
    uint64_t v5 = 160;
    if (!a3) {
      uint64_t v5 = 161;
    }
    char v6 = v12[v5];
    if (v22 < 0) {
      operator delete(__p);
    }
    long long v7 = (void **)v19;
    if (v19)
    {
      uint64_t v8 = v20;
      uint64_t v9 = v19;
      if (v20 != v19)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        uint64_t v9 = v19;
      }
      long long v20 = v7;
      operator delete(v9);
    }
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_24:
        if ((v14 & 0x80000000) == 0) {
          return v6 != 0;
        }
LABEL_28:
        operator delete(v13);
        return v6 != 0;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v15);
    if ((v14 & 0x80000000) == 0) {
      return v6 != 0;
    }
    goto LABEL_28;
  }
  sub_4BE9F4((uint64_t)v12, a2);
  if (!a3)
  {
    if (v25 && v24[1])
    {
      unint64_t v4 = v24;
      goto LABEL_19;
    }
LABEL_29:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (!v25 || !v23[1]) {
    goto LABEL_29;
  }
  unint64_t v4 = v23;
LABEL_19:
  char v6 = *v4;
  sub_3A6B94((uint64_t)v12);
  return v6 != 0;
}

void sub_73BB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_73BB84(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a2);
  unint64_t v4 = (void *)sub_37746C(a2);
  a1[2] = *v4;
  uint64_t v5 = v4[1];
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy(a1 + 4, v4 + 2, 0xF18uLL);
  uint64_t v6 = v4[485];
  a1[487] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  HIBYTE(v19[2]) = 19;
  strcpy((char *)v19, "GuidanceEligibility");
  long long __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v7 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&__p);
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v17;
    uint64_t v10 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v17 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v19[2]) < 0) {
    operator delete(v19[0]);
  }
  a1[488] = v7;
  strcpy((char *)v19, "GuidanceFeatureRegions");
  HIBYTE(v19[2]) = 22;
  long long __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v11 = sub_374CDC((uint64_t)a2, (uint64_t)v19, (uint64_t *)&__p);
  uint64_t v12 = (void **)__p;
  if (__p)
  {
    uint64_t v13 = v17;
    char v14 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      char v14 = __p;
    }
    uint64_t v17 = v12;
    operator delete(v14);
  }
  if (SHIBYTE(v19[2]) < 0) {
    operator delete(v19[0]);
  }
  a1[489] = v11;
  return a1;
}

void sub_73BD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_368744(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_73BD9C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 152) = 0u;
  uint64_t v9 = *(void *)(a2 + 176);
  char v10 = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = 0;
  uint64_t v11 = a1 + 192;
  *(unsigned char *)(a1 + 184) = v10;
  *(void *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v12 = a2 + 192;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  uint64_t v13 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v13;
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a2 + 264) = 0u;
  uint64_t v14 = *(void *)(a2 + 288);
  *(_OWORD *)(a2 + 280) = 0u;
  *(void *)(a1 + 288) = v14;
  LODWORD(v14) = *(_DWORD *)(a2 + 296);
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v14;
  long long v15 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = v15;
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)(a2 + 312) = 0u;
  long long v16 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v16;
  *(_OWORD *)(a2 + 336) = 0u;
  *(void *)(a2 + 328) = 0;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(_OWORD *)(a2 + 352) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v17 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v17;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 392) = 0;
  *(_OWORD *)(a2 + 376) = 0u;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  *(_OWORD *)(a2 + 400) = 0u;
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  uint64_t v18 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v18;
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(_OWORD *)(a2 + 424) = 0u;
  uint64_t v19 = *(void *)(a2 + 448);
  *(_OWORD *)(a2 + 440) = 0u;
  *(void *)(a1 + 448) = v19;
  LODWORD(v19) = *(_DWORD *)(a2 + 456);
  *(unsigned char *)(a1 + 460) = *(unsigned char *)(a2 + 460);
  *(_DWORD *)(a1 + 456) = v19;
  long long v20 = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(_OWORD *)(a1 + 464) = v20;
  *(void *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  long long v21 = *(_OWORD *)(a2 + 488);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(_OWORD *)(a1 + 488) = v21;
  *(_OWORD *)(a2 + 496) = 0u;
  *(void *)(a2 + 488) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a2 + 528) = 0;
  *(_OWORD *)(a2 + 512) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  *(_OWORD *)(a2 + 536) = 0u;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0;
  *(_OWORD *)(a2 + 560) = 0u;
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(_OWORD *)(a2 + 584) = 0u;
  uint64_t v22 = *(void *)(a2 + 608);
  *(_OWORD *)(a2 + 600) = 0u;
  *(void *)(a1 + 608) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 616);
  *(unsigned char *)(a1 + 620) = *(unsigned char *)(a2 + 620);
  *(_DWORD *)(a1 + 616) = v22;
  long long v23 = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = v23;
  *(void *)(a2 + 624) = 0;
  *(_OWORD *)(a2 + 632) = 0u;
  long long v24 = *(_OWORD *)(a2 + 648);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(_OWORD *)(a1 + 648) = v24;
  *(_OWORD *)(a2 + 656) = 0u;
  *(void *)(a2 + 648) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  *(_OWORD *)(a2 + 672) = 0u;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(void *)(a2 + 712) = 0;
  *(_OWORD *)(a2 + 696) = 0u;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = 0;
  *(_OWORD *)(a2 + 720) = 0u;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(_OWORD *)(a2 + 744) = 0u;
  uint64_t v25 = *(void *)(a2 + 768);
  *(_OWORD *)(a2 + 760) = 0u;
  *(void *)(a1 + 768) = v25;
  LODWORD(v25) = *(_DWORD *)(a2 + 776);
  *(unsigned char *)(a1 + 780) = *(unsigned char *)(a2 + 780);
  *(_DWORD *)(a1 + 776) = v25;
  long long v26 = *(_OWORD *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(_OWORD *)(a1 + 784) = v26;
  *(void *)(a2 + 784) = 0;
  *(_OWORD *)(a2 + 792) = 0u;
  long long v27 = *(_OWORD *)(a2 + 808);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = v27;
  *(_OWORD *)(a2 + 816) = 0u;
  *(void *)(a2 + 808) = 0;
  *(void *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a2 + 848) = 0;
  *(_OWORD *)(a2 + 832) = 0u;
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(void *)(a2 + 872) = 0;
  *(_OWORD *)(a2 + 856) = 0u;
  *(void *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a2 + 896) = 0;
  *(_OWORD *)(a2 + 880) = 0u;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)(a2 + 904) = 0u;
  uint64_t v28 = *(void *)(a2 + 928);
  *(_OWORD *)(a2 + 920) = 0u;
  *(void *)(a1 + 928) = v28;
  LODWORD(v28) = *(_DWORD *)(a2 + 936);
  *(unsigned char *)(a1 + 940) = *(unsigned char *)(a2 + 940);
  *(_DWORD *)(a1 + 936) = v28;
  long long v29 = *(_OWORD *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = v29;
  *(void *)(a2 + 944) = 0;
  *(_OWORD *)(a2 + 952) = 0u;
  long long v30 = *(_OWORD *)(a2 + 968);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(_OWORD *)(a1 + 968) = v30;
  *(_OWORD *)(a2 + 976) = 0u;
  *(void *)(a2 + 968) = 0;
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a2 + 1008) = 0;
  *(_OWORD *)(a2 + 992) = 0u;
  *(void *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a2 + 1032) = 0;
  *(_OWORD *)(a2 + 1016) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = 0;
  *(_OWORD *)(a2 + 1064) = 0u;
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1088) = *(_OWORD *)(a2 + 1088);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  uint64_t v31 = *(void *)(a2 + 1112);
  *(_OWORD *)(a2 + 1088) = 0u;
  *(_OWORD *)(a2 + 1104) = 0u;
  *(void *)(a1 + 1112) = v31;
  LODWORD(v31) = *(_DWORD *)(a2 + 1120);
  *(unsigned char *)(a1 + 1124) = *(unsigned char *)(a2 + 1124);
  *(_DWORD *)(a1 + 1120) = v31;
  long long v32 = *(_OWORD *)(a2 + 1128);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(_OWORD *)(a1 + 1128) = v32;
  *(void *)(a2 + 1128) = 0;
  *(void *)(a2 + 1144) = 0;
  *(void *)(a2 + 1136) = 0;
  long long v33 = *(_OWORD *)(a2 + 1152);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(_OWORD *)(a1 + 1152) = v33;
  *(void *)(a2 + 1168) = 0;
  *(void *)(a2 + 1160) = 0;
  *(void *)(a2 + 1152) = 0;
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_DWORD *)(a1 + 1216) = *(_DWORD *)(a2 + 1216);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 1216), (uint64_t *)(a2 + 1184), (void *)(a1 + 1184));
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  long long v34 = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(_OWORD *)(a1 + 1232) = v34;
  *(_OWORD *)(a2 + 1240) = 0u;
  *(void *)(a2 + 1232) = 0;
  *(unsigned char *)(a1 + 1256) = *(unsigned char *)(a2 + 1256);
  long long v35 = *(_OWORD *)(a2 + 1264);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(_OWORD *)(a1 + 1264) = v35;
  *(_OWORD *)(a2 + 1272) = 0u;
  *(void *)(a2 + 1264) = 0;
  *(unsigned char *)(a1 + 1288) = *(unsigned char *)(a2 + 1288);
  *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 1296);
  *(_OWORD *)(a1 + 1312) = 0u;
  *(void *)(a1 + 1304) = 0;
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a2 + 1320) = 0;
  *(_OWORD *)(a2 + 1304) = 0u;
  *(void *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a2 + 1344) = 0;
  *(_OWORD *)(a2 + 1328) = 0u;
  sub_4F4498(a1 + 1352, a2 + 1352);
  sub_4F4498(a1 + 1848, a2 + 1848);
  *(void *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  *(void *)(a2 + 2360) = 0;
  *(_OWORD *)(a2 + 2344) = 0u;
  *(void *)(a1 + 2384) = 0;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2368) = *(_OWORD *)(a2 + 2368);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(void *)(a2 + 2384) = 0;
  *(_OWORD *)(a2 + 2368) = 0u;
  sub_5B01C8(a1 + 2392, a2 + 2392);
  *(_OWORD *)(a1 + 7192) = 0u;
  *(void *)(a1 + 7208) = 0;
  *(void *)(a1 + 7192) = *(void *)(a2 + 7192);
  *(void *)(a1 + 7200) = *(void *)(a2 + 7200);
  *(void *)(a1 + 7208) = *(void *)(a2 + 7208);
  *(_OWORD *)(a2 + 7192) = 0u;
  *(void *)(a2 + 7208) = 0;
  uint64_t v36 = *(void *)(a2 + 7216);
  *(_DWORD *)(a1 + 7224) = *(_DWORD *)(a2 + 7224);
  *(void *)(a1 + 7216) = v36;
  long long v37 = *(_OWORD *)(a2 + 7232);
  *(void *)(a1 + 7248) = *(void *)(a2 + 7248);
  *(_OWORD *)(a1 + 7232) = v37;
  *(void *)(a2 + 7248) = 0;
  *(void *)(a2 + 7240) = 0;
  *(void *)(a2 + 7232) = 0;
  uint64_t v38 = *(void *)(a2 + 7272);
  *(_OWORD *)(a1 + 7256) = *(_OWORD *)(a2 + 7256);
  *(void *)(a1 + 7272) = v38;
  *(void *)(a2 + 7272) = 0;
  *(void *)(a2 + 7264) = 0;
  *(void *)(a2 + 7256) = 0;
  *(_DWORD *)(a1 + 7312) = *(_DWORD *)(a2 + 7312);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 7312), (uint64_t *)(a2 + 7280), (void *)(a1 + 7280));
  *(void *)(a1 + 7320) = *(void *)(a2 + 7320);
  long long v39 = *(_OWORD *)(a2 + 7328);
  *(void *)(a1 + 7344) = *(void *)(a2 + 7344);
  *(_OWORD *)(a1 + 7328) = v39;
  *(_OWORD *)(a2 + 7336) = 0u;
  *(void *)(a2 + 7328) = 0;
  *(unsigned char *)(v11 + 7160) = *(unsigned char *)(v12 + 7160);
  long long v40 = *(_OWORD *)(a2 + 7360);
  *(void *)(a1 + 7376) = *(void *)(a2 + 7376);
  *(_OWORD *)(a1 + 7360) = v40;
  *(_OWORD *)(a2 + 7368) = 0u;
  *(void *)(a2 + 7360) = 0;
  *(unsigned char *)(v11 + 7192) = *(unsigned char *)(v12 + 7192);
  *(_OWORD *)(a1 + 7400) = 0u;
  *(void *)(a1 + 7392) = 0;
  *(_OWORD *)(a1 + 7392) = *(_OWORD *)(a2 + 7392);
  *(void *)(a1 + 7408) = *(void *)(a2 + 7408);
  *(void *)(a2 + 7408) = 0;
  *(_OWORD *)(a2 + 7392) = 0u;
  *(_OWORD *)(a1 + 7416) = 0u;
  *(void *)(a1 + 7432) = 0;
  *(void *)(a1 + 7416) = *(void *)(a2 + 7416);
  *(void *)(a1 + 7424) = *(void *)(a2 + 7424);
  *(void *)(a1 + 7432) = *(void *)(a2 + 7432);
  *(_OWORD *)(a2 + 7416) = 0u;
  *(void *)(a2 + 7432) = 0;
  long long v41 = *(_OWORD *)(a2 + 7440);
  *(void *)(a1 + 7456) = *(void *)(a2 + 7456);
  *(_OWORD *)(a1 + 7440) = v41;
  *(void *)(a2 + 7440) = 0;
  *(_OWORD *)(a2 + 7448) = 0u;
  uint64_t v42 = *(void *)(a2 + 7480);
  *(_OWORD *)(a1 + 7464) = *(_OWORD *)(a2 + 7464);
  *(void *)(a1 + 7480) = v42;
  *(_OWORD *)(a2 + 7472) = 0u;
  *(void *)(a2 + 7464) = 0;
  long long v43 = *(_OWORD *)(a2 + 7488);
  *(void *)(a1 + 7504) = *(void *)(a2 + 7504);
  *(_OWORD *)(a1 + 7488) = v43;
  *(void *)(a2 + 7504) = 0;
  *(_OWORD *)(a2 + 7488) = 0u;
  *(_OWORD *)(a1 + 7512) = 0u;
  *(void *)(a1 + 7528) = 0;
  *(void *)(a1 + 7512) = *(void *)(a2 + 7512);
  *(void *)(a1 + 7520) = *(void *)(a2 + 7520);
  *(void *)(a1 + 7528) = *(void *)(a2 + 7528);
  *(_OWORD *)(a2 + 7512) = 0u;
  *(void *)(a2 + 7528) = 0;
  *(void *)(a1 + 7552) = 0;
  *(_OWORD *)(a1 + 7536) = 0u;
  *(_OWORD *)(a1 + 7536) = *(_OWORD *)(a2 + 7536);
  *(void *)(a1 + 7552) = *(void *)(a2 + 7552);
  *(void *)(a2 + 7552) = 0;
  *(_OWORD *)(a2 + 7536) = 0u;
  return a1;
}

void sub_73C6DC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v2)
  {
    uint64_t v5 = (uint64_t)(a2 + 1518);
    do
    {
      if (*((_DWORD *)v2 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      long long v6 = (void *)v2[5];
      HIBYTE(v16) = 5;
      strcpy((char *)__p, "scope");
      uint64_t v7 = sub_561B0(v6, (uint64_t)__p);
      int v8 = *(char *)(v7 + 23);
      if (v8 < 0)
      {
        if (*(void *)(v7 + 8) == 5)
        {
          uint64_t v7 = *(void *)v7;
LABEL_10:
          BOOL v10 = *(_DWORD *)v7 != 1953853298 || *(unsigned char *)(v7 + 4) != 101;
          if ((SHIBYTE(v16) & 0x80000000) == 0) {
            goto LABEL_20;
          }
LABEL_19:
          operator delete(__p[0]);
          goto LABEL_20;
        }
      }
      else if (v8 == 5)
      {
        goto LABEL_10;
      }
      BOOL v10 = 1;
      if (SHIBYTE(v16) < 0) {
        goto LABEL_19;
      }
LABEL_20:
      if (!v10)
      {
        sub_73C904(a1, a2, v6, (uint64_t)v18);
        sub_73CAF4(a1, (uint64_t)(v2 + 2), (uint64_t)v18, (uint64_t)__p);
        if (v17) {
          sub_5BCE98(v5, __p, (uint64_t)(v2 + 2));
        }
        uint64_t v11 = v16;
        if (v16)
        {
          do
          {
            uint64_t v13 = *(char **)v11;
            sub_57AC8((uint64_t *)v11 + 5);
            if (v11[39] < 0) {
              operator delete(*((void **)v11 + 2));
            }
            operator delete(v11);
            uint64_t v11 = v13;
          }
          while (v13);
        }
        uint64_t v12 = __p[0];
        __p[0] = 0;
        if (v12) {
          operator delete(v12);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_73C8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_73C904(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v19[0] = 0;
  v19[1] = 0;
  HIBYTE(__p[2]) = 21;
  long long v20 = 0;
  strcpy((char *)__p, "feature_polygon_usage");
  int v8 = sub_58070(a3, (uint64_t)__p);
  uint64_t v9 = v8;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_3;
    }
LABEL_8:
    int v12 = 0;
    goto LABEL_18;
  }
  operator delete(__p[0]);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_3:
  unint64_t v10 = sub_470ADC(a2);
  HIBYTE(v17[2]) = 21;
  strcpy((char *)v17, "feature_polygon_usage");
  uint64_t v11 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(a3, (uint64_t)v17);
  sub_73CD28(a1, a2, 0, v10 - 1, v11, (uint64_t)__p);
  *(_OWORD *)char v19 = *(_OWORD *)__p;
  long long v20 = __p[2];
  HIBYTE(__p[2]) = 0;
  LOBYTE(__p[0]) = 0;
  if (SHIBYTE(v17[2]) < 0)
  {
    operator delete(v17[0]);
    int v12 = SHIBYTE(v20);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_5:
      if (v12 == 5)
      {
        uint64_t v13 = v19;
        goto LABEL_12;
      }
LABEL_16:
      *(_OWORD *)a4 = *(_OWORD *)v19;
      *(void *)(a4 + 16) = v20;
      return;
    }
  }
  else
  {
    int v12 = SHIBYTE(v20);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  if (v19[1] != (char *)dword_4 + 1) {
    goto LABEL_16;
  }
  uint64_t v13 = (void **)v19[0];
LABEL_12:
  int v14 = *(_DWORD *)v13;
  int v15 = *((unsigned __int8 *)v13 + 4);
  if (v14 != 1819438967 || v15 != 100) {
    goto LABEL_16;
  }
LABEL_18:
  sub_73CFFC(a1, a2, a4);
  if (v12 < 0) {
    operator delete(v19[0]);
  }
}

void sub_73CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p)
{
  if (v25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_73CAF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  long long v6 = (void *)sub_560F4(*(void **)(a1 + 3912), a2);
  if (sub_58070(v6, a3))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(__dst, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)a3;
      uint64_t v17 = *(void *)(a3 + 16);
    }
  }
  else
  {
    char v15 = 5;
    strcpy((char *)__p, "world");
    uint64_t v7 = sub_58070(v6, (uint64_t)__p);
    uint64_t v8 = 5;
    if (!v7) {
      uint64_t v8 = 0;
    }
    HIBYTE(v17) = v8;
    if (v7) {
      qmemcpy(__dst, "world", 5);
    }
    *(unsigned char *)((unint64_t)__dst | v8) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = (void *)HIBYTE(v17);
  char v10 = HIBYTE(v17);
  if (v17 < 0) {
    uint64_t v9 = __dst[1];
  }
  if (v9)
  {
    char v15 = 15;
    strcpy((char *)__p, "region_template");
    uint64_t v11 = sub_58070(v6, (uint64_t)__p);
    if (v11)
    {
      if (*((_DWORD *)v11 + 12) == 2)
      {
        uint64_t v12 = v11[5];
        if (v12 != a4)
        {
          *(_DWORD *)(a4 + 32) = *(_DWORD *)(v12 + 32);
          sub_5A4DC((void *)a4, *(uint64_t **)(v12 + 16), 0);
        }
      }
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = sub_560F4(v6, (uint64_t)__dst);
    sub_59234((void *)a4, v13);
    char v10 = HIBYTE(v17);
  }
  if (v10 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_73CCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_5450C(v21);
  _Unwind_Resume(a1);
}

void sub_73CD28(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (__cdecl **a5)(std::stringbuf *__hidden this)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = (unsigned int *)sub_470B40(a2, a3);
  sub_2954EC(*(void *)(a1 + 8), (((unint64_t)(v11[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v11[1] << 32) | *v11) ^ 0x1000000000000, (uint64_t)v29);
  uint64_t v12 = (unsigned int *)sub_470B40(a2, a4);
  sub_2954EC(*(void *)(a1 + 8), (((unint64_t)(v12[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v12[1] << 32) | *v12) ^ 0x1000000000000, (uint64_t)v26);
  unint64_t v32 = sub_2E1AA4((uint64_t)v29);
  *(_DWORD *)long long v33 = v13;
  *(void *)&v33[4] = sub_2E40A4((uint64_t)v26);
  int v34 = v14;
  *(_OWORD *)long long v23 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v25 = 1065353216;
  sub_4BC598((uint64_t)v23, (unsigned int *)&v32, (uint64_t)&v32);
  sub_4BC598((uint64_t)v23, (unsigned int *)&v33[4], (uint64_t)&v33[4]);
  char v15 = (uint64_t **)sub_37B3A0(*(uint64_t **)a1);
  sub_5BC948(v15, (uint64_t)v23, a5, (uint64_t)&v32);
  long long v16 = (void **)v32;
  if (*(char *)(v32 + 23) < 0)
  {
    sub_4200((unsigned char *)a6, *(void **)v32, *(void *)(v32 + 8));
    long long v16 = (void **)v32;
    if (!v32) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v17 = *(_OWORD *)v32;
    *(void *)(a6 + 16) = *(void *)(v32 + 16);
    *(_OWORD *)a6 = v17;
  }
  uint64_t v18 = *(void ***)v33;
  char v19 = v16;
  if (*(void ***)v33 != v16)
  {
    do
    {
      if (*((char *)v18 - 1) < 0) {
        operator delete(*(v18 - 3));
      }
      v18 -= 3;
    }
    while (v18 != v16);
    char v19 = (void *)v32;
  }
  *(void *)long long v33 = v16;
  operator delete(v19);
LABEL_11:
  long long v20 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v21 = (void *)*v20;
      operator delete(v20);
      long long v20 = v21;
    }
    while (v21);
  }
  uint64_t v22 = v23[0];
  v23[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
}

void sub_73CF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_Unwind_Exception *exception_object,_Unwind_Exception *a22)
{
  sub_1A668((void **)(v22 - 80));
  sub_12168((uint64_t)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
    long long v24 = exception_object;
    if (!exception_object) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v24 = exception_object;
    if (!exception_object) {
      goto LABEL_3;
    }
  }
  a22 = v24;
  operator delete(v24);
  _Unwind_Resume(a1);
}

void sub_73CFFC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = (unsigned int *)sub_470B40(a2, 0);
  sub_3D63DC(*(void *)(a1 + 8), *v6 | ((unint64_t)(v6[1] & 0x1FFFFFFF) << 32), __n);
  unint64_t v7 = sub_470ADC(a2);
  uint64_t v8 = (unsigned int *)sub_470B40(a2, v7 - 1);
  sub_3D63DC(*(void *)(a1 + 8), *v8 | ((unint64_t)(v8[1] & 0x1FFFFFFF) << 32), __p);
  uint64_t v9 = HIBYTE(v20);
  unint64_t v10 = __n[1];
  if (v20 >= 0) {
    size_t v11 = HIBYTE(v20);
  }
  else {
    size_t v11 = __n[1];
  }
  unint64_t v12 = v18;
  unsigned __int8 v13 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v12 = (unint64_t)__p[1];
  }
  if (v11 != v12) {
    goto LABEL_18;
  }
  if ((v18 & 0x80u) == 0) {
    int v14 = __p;
  }
  else {
    int v14 = (void **)__p[0];
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v20))
    {
LABEL_15:
      *(_OWORD *)a3 = *(_OWORD *)__n;
      *(void *)(a3 + 16) = v20;
      if ((v13 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    char v15 = __n;
    while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
    {
      char v15 = (size_t *)((char *)v15 + 1);
      int v14 = (void **)((char *)v14 + 1);
      if (!--v9) {
        goto LABEL_15;
      }
    }
    goto LABEL_18;
  }
  long long v16 = (void *)__n[0];
  if (memcmp((const void *)__n[0], v14, __n[1]))
  {
LABEL_18:
    *(unsigned char *)(a3 + 23) = 5;
    strcpy((char *)a3, "world");
    if ((v13 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  sub_4200((unsigned char *)a3, v16, v10);
  if ((v18 & 0x80) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete((void *)__n[0]);
    return;
  }
LABEL_22:
  operator delete(__p[0]);
  if (SHIBYTE(v20) < 0) {
    goto LABEL_23;
  }
}

void sub_73D190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_73D1DC(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 7424) != *(void *)(a1 + 7432)) {
    return;
  }
  uint64_t v4 = sub_3750CC(a2);
  uint64_t v5 = sub_3777C0(a2);
  unint64_t v6 = sub_470ADC((void *)a1);
  if (v6)
  {
    unint64_t v7 = v6;
    uint64_t v8 = (unsigned int *)sub_470B40((void *)a1, 0);
    sub_3D63DC(v4, *v8 | ((unint64_t)(v8[1] & 0x1FFFFFFF) << 32), __p);
    if (sub_3D4980(v5, (const void **)__p))
    {
      if (SHIBYTE(v29) < 0)
      {
        *(unsigned char *)__p[0] = 0;
        __p[1] = 0;
        unint64_t v9 = *(void *)(a1 + 7432);
        if (v9 < *(void *)(a1 + 7440))
        {
LABEL_8:
          if (SHIBYTE(v29) < 0)
          {
            sub_4200((unsigned char *)v9, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v10 = *(_OWORD *)__p;
            *(void *)(v9 + 16) = v29;
            *(_OWORD *)unint64_t v9 = v10;
          }
          *(void *)(a1 + 7432) = v9 + 24;
          *(void *)(a1 + 7432) = v9 + 24;
          if (SHIBYTE(v29) < 0)
          {
LABEL_16:
            operator delete(__p[0]);
            if (v7 == 1) {
              goto LABEL_17;
            }
            goto LABEL_24;
          }
LABEL_12:
          if (v7 == 1) {
            goto LABEL_17;
          }
LABEL_24:
          uint64_t v13 = 1;
          while (1)
          {
            char v15 = (unsigned int *)sub_470B40((void *)a1, v13);
            long long v16 = (int *)*((void *)v15 + 1);
            long long v17 = (unsigned __int16 *)((char *)v16 - *v16);
            if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0) {
              int v19 = *(unsigned __int16 *)((char *)v16 + v18);
            }
            else {
              int v19 = 0;
            }
            uint64_t v20 = v13 - 1;
            uint64_t v21 = *(int **)(sub_470B40((void *)a1, v20) + 8);
            uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
            if (*v22 >= 0xDu && (uint64_t v23 = v22[6]) != 0)
            {
              if (*(unsigned __int16 *)((char *)v21 + v23) == v19) {
                goto LABEL_42;
              }
            }
            else if (!v19)
            {
LABEL_42:
              unint64_t v26 = *(void *)(a1 + 7432);
              long long v27 = (_OWORD *)(v26 - 24);
              if (v26 >= *(void *)(a1 + 7440))
              {
                int v14 = sub_55C330((char **)(a1 + 7424), (uint64_t)v27);
              }
              else
              {
                if (*(char *)(v26 - 1) < 0)
                {
                  sub_4200(*(unsigned char **)(a1 + 7432), *(void **)(v26 - 24), *(void *)(v26 - 16));
                }
                else
                {
                  *(_OWORD *)unint64_t v26 = *v27;
                  *(void *)(v26 + 16) = *(void *)(v26 - 8);
                }
                int v14 = (char *)(v26 + 24);
                *(void *)(a1 + 7432) = v26 + 24;
              }
              *(void *)(a1 + 7432) = v14;
              goto LABEL_27;
            }
            sub_3D63DC(v4, *v15 | ((unint64_t)(v15[1] & 0x1FFFFFFF) << 32), __p);
            if (!sub_3D4980(v5, (const void **)__p)) {
              goto LABEL_38;
            }
            if ((SHIBYTE(v29) & 0x80000000) == 0) {
              break;
            }
            *(unsigned char *)__p[0] = 0;
            __p[1] = 0;
            unint64_t v24 = *(void *)(a1 + 7432);
            if (v24 < *(void *)(a1 + 7440))
            {
LABEL_39:
              if (SHIBYTE(v29) < 0)
              {
                sub_4200((unsigned char *)v24, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                long long v25 = *(_OWORD *)__p;
                *(void *)(v24 + 16) = v29;
                *(_OWORD *)unint64_t v24 = v25;
              }
              *(void *)(a1 + 7432) = v24 + 24;
              *(void *)(a1 + 7432) = v24 + 24;
              if ((SHIBYTE(v29) & 0x80000000) == 0) {
                goto LABEL_27;
              }
LABEL_52:
              operator delete(__p[0]);
              goto LABEL_27;
            }
LABEL_48:
            *(void *)(a1 + 7432) = sub_55C330((char **)(a1 + 7424), (uint64_t)__p);
            if (SHIBYTE(v29) < 0) {
              goto LABEL_52;
            }
LABEL_27:
            uint64_t v13 = v20 + 2;
            if (v13 == v7) {
              goto LABEL_17;
            }
          }
          LOBYTE(__p[0]) = 0;
          HIBYTE(v29) = 0;
LABEL_38:
          unint64_t v24 = *(void *)(a1 + 7432);
          if (v24 < *(void *)(a1 + 7440)) {
            goto LABEL_39;
          }
          goto LABEL_48;
        }
LABEL_11:
        *(void *)(a1 + 7432) = sub_55C330((char **)(a1 + 7424), (uint64_t)__p);
        if (SHIBYTE(v29) < 0) {
          goto LABEL_16;
        }
        goto LABEL_12;
      }
      LOBYTE(__p[0]) = 0;
      HIBYTE(v29) = 0;
    }
    unint64_t v9 = *(void *)(a1 + 7432);
    if (v9 < *(void *)(a1 + 7440)) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v11 = *(void *)(a1 + 7424);
  for (uint64_t i = *(void *)(a1 + 7432); v11 != i; v11 += 24)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      if (*(void *)(v11 + 8)) {
        goto LABEL_23;
      }
    }
    else if (*(unsigned char *)(v11 + 23))
    {
LABEL_23:
      std::string::operator=((std::string *)(a1 + 7400), (const std::string *)v11);
      return;
    }
  }
}

void sub_73D53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 7432) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_73D57C(int64x2_t *a1, void *a2, uint64_t a3)
{
  if (!sub_470ADC(a1) || a1[74].i64[0] != a1[74].i64[1]) {
    return;
  }
  unint64_t v6 = (long long *)a1[464].i64[0];
  if (*((char *)v6 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)v6, *((void *)v6 + 1));
    uint64_t v8 = a1[464].i64[1];
    if ((*(char *)(v8 - 1) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    sub_4200(&v67, *(void **)(v8 - 24), *(void *)(v8 - 16));
    goto LABEL_8;
  }
  long long v7 = *v6;
  uint64_t v70 = *((void *)v6 + 2);
  long long __dst = v7;
  uint64_t v8 = a1[464].i64[1];
  if (*(char *)(v8 - 1) < 0) {
    goto LABEL_7;
  }
LABEL_5:
  long long v9 = *(_OWORD *)(v8 - 24);
  uint64_t v68 = *(void *)(v8 - 8);
  long long v67 = v9;
LABEL_8:
  uint64_t v10 = HIBYTE(v70);
  unint64_t v11 = *((void *)&__dst + 1);
  if (v70 >= 0) {
    uint64_t v12 = HIBYTE(v70);
  }
  else {
    uint64_t v12 = *((void *)&__dst + 1);
  }
  uint64_t v13 = HIBYTE(v68);
  if (v68 < 0) {
    uint64_t v13 = *((void *)&v67 + 1);
  }
  if (v12 != v13) {
    goto LABEL_24;
  }
  if (v68 >= 0) {
    int v14 = (unsigned __int8 *)&v67;
  }
  else {
    int v14 = (unsigned __int8 *)v67;
  }
  if ((v70 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v70))
    {
LABEL_22:
      long long v65 = __dst;
      uint64_t v66 = v70;
      goto LABEL_25;
    }
    p_dst = (unsigned __int8 *)&__dst;
    while (*p_dst == *v14)
    {
      ++p_dst;
      ++v14;
      if (!--v10) {
        goto LABEL_22;
      }
    }
    goto LABEL_24;
  }
  uint64_t v16 = (void *)__dst;
  if (memcmp((const void *)__dst, v14, *((size_t *)&__dst + 1)))
  {
LABEL_24:
    HIBYTE(v66) = 0;
    LOBYTE(v65) = 0;
    goto LABEL_25;
  }
  sub_4200(&v65, v16, v11);
LABEL_25:
  long long __p = 0uLL;
  uint64_t v52 = 0;
  sub_839500(v62, a2, 0, &__p);
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v17 = sub_3750CC(a2);
  unint64_t v18 = sub_470ADC(a1);
  if (v18)
  {
    int v19 = 0;
    uint64_t v48 = v17;
    uint64_t v20 = a1 + 464;
    while (1)
    {
      uint64_t v21 = (unsigned int *)sub_470B40(a1, (uint64_t)v19);
      uint64_t v22 = sub_4D4928(v20, (unint64_t)v19);
      unint64_t v61 = (((unint64_t)(v21[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v21[1] << 32) | *v21) ^ 0x1000000000000;
      if (!v19)
      {
        sub_83A464((uint64_t)v62, (unsigned int *)&v61, a3, v22, (uint64_t)&__p);
        uint64_t v49 = 0;
        unint64_t v28 = a1[74].u64[1];
        if (v28 >= a1[75].i64[0]) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }
      uint64_t v23 = (unsigned int *)sub_470B40(a1, (uint64_t)(v19 - 1));
      if (sub_2E79EC(v17, (((unint64_t)(v23[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v23[1] << 32) | *v23) ^ 0x1000000000000, (((unint64_t)(v21[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v21[1] << 32) | *v21) ^ 0x1000000000000))break; {
LABEL_71:
      }
      sub_83A464((uint64_t)v62, (unsigned int *)&v61, a3, v22, (uint64_t)&__p);
      if (sub_6F317C((unsigned __int8 *)&__p, (unsigned __int8 *)(a1[74].i64[1] - 160))) {
        goto LABEL_76;
      }
      uint64_t v49 = v19;
      unint64_t v28 = a1[74].u64[1];
      if (v28 >= a1[75].i64[0])
      {
LABEL_74:
        uint64_t v47 = sub_5B07A8(a1 + 74, &__p, &v49);
        goto LABEL_75;
      }
LABEL_73:
      sub_4AA8E0((char *)a1[74].i64[1], &__p);
      *(void *)(v28 + 152) = v49;
      uint64_t v47 = v28 + 160;
      a1[74].i64[1] = v28 + 160;
LABEL_75:
      a1[74].i64[1] = v47;
LABEL_76:
      if (v60 < 0)
      {
        operator delete(v59);
        if ((v58 & 0x80000000) == 0)
        {
LABEL_78:
          if ((v56 & 0x80000000) == 0) {
            goto LABEL_79;
          }
          goto LABEL_83;
        }
      }
      else if ((v58 & 0x80000000) == 0)
      {
        goto LABEL_78;
      }
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_79:
        if (v54 < 0) {
          goto LABEL_29;
        }
        goto LABEL_84;
      }
LABEL_83:
      operator delete(v55);
      if (v54 < 0)
      {
LABEL_29:
        operator delete(v53);
        if (SHIBYTE(v52) < 0) {
          goto LABEL_85;
        }
        goto LABEL_30;
      }
LABEL_84:
      if (SHIBYTE(v52) < 0) {
LABEL_85:
      }
        operator delete((void *)__p);
LABEL_30:
      if (++v19 == (char *)v18) {
        goto LABEL_86;
      }
    }
    unint64_t v24 = (int *)sub_2D5D58(v17, *v23 | ((unint64_t)(v23[1] & 0x1FFFFFFF) << 32));
    long long v25 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v25 >= 0x25u && (uint64_t v26 = v25[18]) != 0) {
      long long v27 = (unsigned int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
    }
    else {
      long long v27 = 0;
    }
    sub_2DE69C(v27, &__p);
    uint64_t v29 = (int *)sub_2D5D58(v17, *v21 | ((unint64_t)(v21[1] & 0x1FFFFFFF) << 32));
    long long v30 = (unsigned __int16 *)((char *)v29 - *v29);
    if (*v30 >= 0x25u && (uint64_t v31 = v30[18]) != 0) {
      unint64_t v32 = (unsigned int *)((char *)v29 + v31 + *(unsigned int *)((char *)v29 + v31));
    }
    else {
      unint64_t v32 = 0;
    }
    sub_2DE69C(v32, &v49);
    unint64_t v33 = v18;
    int v34 = v20;
    uint64_t v35 = a3;
    uint64_t v36 = *((void *)&__p + 1);
    uint64_t v37 = __p;
    uint64_t v38 = (void **)v49;
    if (*((void *)&__p + 1) - (void)__p == (char *)v50 - (unsigned char *)v49)
    {
      if ((void)__p == *((void *)&__p + 1))
      {
        char v40 = 1;
        if (!v49) {
          goto LABEL_62;
        }
      }
      else
      {
        do
        {
          BOOL v39 = sub_2DE5CC(v37, (uint64_t)v38);
          char v40 = v39;
          v37 += 40;
          v38 += 5;
        }
        while (v37 != v36 && v39);
        uint64_t v38 = (void **)v49;
        if (!v49) {
          goto LABEL_62;
        }
      }
    }
    else
    {
      char v40 = 0;
      if (!v49) {
        goto LABEL_62;
      }
    }
    uint64_t v42 = v50;
    long long v43 = v38;
    if (v50 != v38)
    {
      do
      {
        if (*((char *)v42 - 9) < 0) {
          operator delete(*(v42 - 4));
        }
        v42 -= 5;
      }
      while (v42 != v38);
      long long v43 = v49;
    }
    uint64_t v50 = v38;
    operator delete(v43);
LABEL_62:
    uint64_t v44 = __p;
    if ((void)__p)
    {
      uint64_t v45 = *((void *)&__p + 1);
      int v46 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v45 - 9) < 0) {
            operator delete(*(void **)(v45 - 32));
          }
          v45 -= 40;
        }
        while (v45 != v44);
        int v46 = (void *)__p;
      }
      *((void *)&__p + 1) = v44;
      operator delete(v46);
    }
    a3 = v35;
    uint64_t v20 = v34;
    unint64_t v18 = v33;
    uint64_t v17 = v48;
    if (v40) {
      goto LABEL_30;
    }
    goto LABEL_71;
  }
LABEL_86:
  if ((v64 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v66) & 0x80000000) == 0) {
      goto LABEL_88;
    }
LABEL_92:
    operator delete((void *)v65);
    if ((SHIBYTE(v68) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(v70) & 0x80000000) == 0) {
        return;
      }
LABEL_94:
      operator delete((void *)__dst);
      return;
    }
    goto LABEL_93;
  }
  operator delete(v63);
  if (SHIBYTE(v66) < 0) {
    goto LABEL_92;
  }
LABEL_88:
  if ((SHIBYTE(v68) & 0x80000000) == 0) {
    goto LABEL_89;
  }
LABEL_93:
  operator delete((void *)v67);
  if (SHIBYTE(v70) < 0) {
    goto LABEL_94;
  }
}

void sub_73DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v43 - 121) < 0)
  {
    operator delete(*(void **)(v43 - 144));
    if (*(char *)(v43 - 89) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v43 - 112));
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v43 - 89) < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_73DC30(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xBAA6550FFBAA6551 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AB355E008AB3) {
    sub_2E00();
  }
  if (0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x754CAA1FF754CAA2 * ((a1[2] - *a1) >> 3);
  }
  if (0xBAA6550FFBAA6551 * ((a1[2] - *a1) >> 3) >= 0x4559AAF004559) {
    unint64_t v6 = 0x8AB355E008AB3;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AB355E008AB3) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(7560 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[7560 * v6];
  uint64_t v9 = sub_73BD9C((uint64_t)&v7[7560 * v3], a2);
  uint64_t v10 = v9 + 7560;
  uint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = (uint64_t)v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 7560;
    uint64_t v9 = sub_73BD9C(v9 - 7560, (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (uint64_t)v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 7560;
      sub_574D4C((uint64_t)v11);
    }
    while (v11 != v13);
    unint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

BOOL sub_73DD94(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(_DWORD *)(a2 + 1120))
  {
    sub_4BD34C((uint64_t)v12, a2);
    uint64_t v5 = 160;
    if (!a3) {
      uint64_t v5 = 161;
    }
    char v6 = v12[v5];
    if (v22 < 0) {
      operator delete(__p);
    }
    long long v7 = (void **)v19;
    if (v19)
    {
      uint64_t v8 = v20;
      uint64_t v9 = v19;
      if (v20 != v19)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        uint64_t v9 = v19;
      }
      uint64_t v20 = v7;
      operator delete(v9);
    }
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_24:
        if ((v14 & 0x80000000) == 0) {
          return v6 != 0;
        }
LABEL_28:
        operator delete(v13);
        return v6 != 0;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v15);
    if ((v14 & 0x80000000) == 0) {
      return v6 != 0;
    }
    goto LABEL_28;
  }
  sub_4BE9F4((uint64_t)v12, a2);
  if (!a3)
  {
    if (v25 && v24[1])
    {
      unint64_t v4 = v24;
      goto LABEL_19;
    }
LABEL_29:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (!v25 || !v23[1]) {
    goto LABEL_29;
  }
  unint64_t v4 = v23;
LABEL_19:
  char v6 = *v4;
  sub_3A6B94((uint64_t)v12);
  return v6 != 0;
}

void sub_73DF4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_73DF60()
{
  byte_25A8997 = 1;
  word_25A8980 = 65;
  byte_25A89AF = 1;
  word_25A8998 = 65;
  byte_25A89C7 = 8;
  strcpy((char *)&qword_25A89B0, "any_mode");
  byte_25A89DF = 7;
  strcpy((char *)&dword_25A89C8, "cycling");
  byte_25A89F7 = 7;
  strcpy((char *)&dword_25A89E0, "driving");
  byte_25A8A0F = 7;
  strcpy((char *)&dword_25A89F8, "walking");
  strcpy(&byte_25A8A27, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25A8A10, "\x1B\\toi=lhp\\"");
  byte_25A8A3F = 11;
  qword_25A8A40 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_25A8A48 = xmmword_20B9250;
  strcpy((char *)qword_25A8A40, "\x1B\\toi=x-sampa-internal\\"");
  byte_25A8A6F = 13;
  strcpy((char *)&qword_25A8A58, "\x1B\\tn=address\\"");
  strcpy(&byte_25A8A87, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25A8A70, "\x1B\\tn=nav\\"");
  byte_25A8A9F = 12;
  byte_25A8AB7 = 7;
  strcpy((char *)&dword_25A8AA0, "\x1B\\lang=");
  byte_25A8ACF = 1;
  word_25A8AB8 = 92;
  byte_25A8AE7 = 4;
  strcpy((char *)&qword_25A8AD0, "DEV:");
  byte_25A8AFF = 8;
  strcpy((char *)&qword_25A8AE8, "Continue");
  byte_25A8B17 = 11;
  strcpy((char *)&qword_25A8B00, "Start_Route");
  byte_25A8B2F = 14;
  strcpy((char *)&qword_25A8B18, "Continue_Route");
  byte_25A8B47 = 12;
  strcpy((char *)&qword_25A8B30, "Resume_Route");
  byte_25A8B5F = 18;
  strcpy((char *)&xmmword_25A8B48, "Start_Route_U_Turn");
  byte_25A8B77 = 7;
  strcpy((char *)&dword_25A8B60, "_U_Turn");
  qword_25A8B88 = 0x1300000000000000;
  dword_25A8B80 = 1702131055;
  qword_25A8B78 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25A8B84 + 3) = 1852994900;
  dword_25A8B84 = 1415533919;
  HIDWORD(qword_25A8BA0) = 352321536;
  strcpy((char *)&qword_25A8B90, "Continue_Route_U");
  *(_DWORD *)((char *)&qword_25A8BA0 + 1) = 1852994900;
  strcpy(&byte_25A8BBF, "\tRight_Turn");
  strcpy((char *)&qword_25A8BA8, "Left_Turn");
  strcpy(&byte_25A8BD7, "\nLeft_Turn_At_End");
  byte_25A8BEF = 16;
  byte_25A8C07 = 17;
  strcpy((char *)&xmmword_25A8BF0, "Right_Turn_At_End");
  byte_25A8C1F = 15;
  strcpy((char *)&qword_25A8C08, "Sharp_Left_Turn");
  byte_25A8C37 = 16;
  strcpy((char *)&xmmword_25A8C20, "Sharp_Right_Turn");
  byte_25A8C4F = 16;
  strcpy((char *)&xmmword_25A8C38, "Slight_Left_Turn");
  byte_25A8C67 = 17;
  strcpy((char *)&xmmword_25A8C50, "Slight_Right_Turn");
  strcpy(&byte_25A8C7F, "\tKeep_Right");
  strcpy((char *)&qword_25A8C68, "Keep_Left");
  strcpy(&byte_25A8C97, "\nU_Turn");
  byte_25A8CAF = 6;
  byte_25A8CC7 = 14;
  strcpy((char *)&qword_25A8CB0, "Walking_U_Turn");
  byte_25A8CDF = 20;
  strcpy((char *)&xmmword_25A8CC8, "U_Turn_When_Possible");
  byte_25A8CF7 = 20;
  strcpy((char *)&xmmword_25A8CE0, "U_Turn_At_Roundabout");
  byte_25A8D0F = 11;
  strcpy((char *)&qword_25A8CF8, "Enter_Ferry");
  strcpy(&byte_25A8D27, "\nChange_Ferry");
  strcpy((char *)&qword_25A8D10, "Exit_Ferry");
  strcpy((char *)&xmmword_25A8D40, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25A8D58, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25A8D70, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25A8D88, "End_Of_Navigation");
  strcpy((char *)&xmmword_25A8DA0, "End_Of_Navigation");
  strcpy((char *)&qword_25A8DB8, "Destination");
  strcpy((char *)&xmmword_25A8DD0, "Destination_On_left");
  strcpy((char *)&xmmword_25A8DE8, "Destination_On_Right");
  strcpy((char *)&xmmword_25A8E30, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25A8E78, "Next_Stop_On_Right");
  byte_25A8D3F = 12;
  byte_25A8D57 = 21;
  byte_25A8D6F = 20;
  strcpy((char *)&xmmword_25A8EA8, "Waypoint_Stop_On_Left");
  byte_25A8D87 = 22;
  byte_25A8D9F = 17;
  byte_25A8DB7 = 17;
  byte_25A8DCF = 11;
  byte_25A8DE7 = 19;
  byte_25A8DFF = 20;
  strcpy(&byte_25A8E17, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25A8E00, "First_Stop");
  byte_25A8E2F = 18;
  byte_25A8E47 = 19;
  strcpy(&byte_25A8E5F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25A8E90, "Waypoint_Stop");
  strcpy((char *)&xmmword_25A8EC0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25A8ED8, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25A8E48, "Next_Stop");
  byte_25A8E77 = 17;
  byte_25A8E8F = 18;
  byte_25A8EA7 = 13;
  byte_25A8EBF = 21;
  byte_25A8ED7 = 22;
  byte_25A8EEF = 11;
  byte_25A8F07 = 16;
  strcpy((char *)&xmmword_25A8EF0, "Enter_Roundabout");
  qword_25A8F08 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_25A8F10 = xmmword_20B91C0;
  strcpy((char *)qword_25A8F08, "Walking_Enter_Roundabout");
  byte_25A8F37 = 16;
  strcpy((char *)&xmmword_25A8F20, "Leave_Roundabout");
  byte_25A8F4F = 21;
  strcpy((char *)&xmmword_25A8F38, "Roundabout_First_Exit");
  byte_25A8F67 = 22;
  strcpy((char *)&xmmword_25A8F50, "Roundabout_Second_Exit");
  byte_25A8F7F = 21;
  strcpy((char *)&xmmword_25A8F68, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25A8F80, "Roundabout_Fourth_Exit");
  HIBYTE(word_25A8F96) = 22;
  byte_25A8FAF = 21;
  strcpy((char *)&xmmword_25A8F98, "Roundabout_Fifth_Exit");
  byte_25A8FC7 = 21;
  strcpy((char *)&xmmword_25A8FB0, "Roundabout_Sixth_Exit");
  qword_25A8FC8 = (uint64_t)operator new(0x19uLL);
  xmmword_25A8FD0 = xmmword_20B9250;
  strcpy((char *)qword_25A8FC8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25A8FE0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25A8FF6) = 22;
  byte_25A900F = 21;
  strcpy((char *)&xmmword_25A8FF8, "Roundabout_Ninth_Exit");
  byte_25A9027 = 21;
  strcpy((char *)&xmmword_25A9010, "Roundabout_Tenth_Exit");
  qword_25A9028 = (uint64_t)operator new(0x20uLL);
  xmmword_25A9030 = xmmword_20B91C0;
  strcpy((char *)qword_25A9028, "Roundabout_Eleventh_Exit");
  qword_25A9040 = (uint64_t)operator new(0x19uLL);
  unk_25A9048 = xmmword_20B9250;
  strcpy((char *)qword_25A9040, "Roundabout_Twelfth_Exit");
  qword_25A9058 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_25A9060 = xmmword_20B5EB0;
  strcpy((char *)qword_25A9058, "Roundabout_Thirteenth_Exit");
  qword_25A9070 = (uint64_t)operator new(0x20uLL);
  unk_25A9078 = xmmword_20B5EB0;
  strcpy((char *)qword_25A9070, "Roundabout_Fourteenth_Exit");
  qword_25A9088 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_25A9090 = xmmword_20B8870;
  strcpy((char *)qword_25A9088, "Roundabout_Fifteenth_Exit");
  qword_25A90A0 = (uint64_t)operator new(0x20uLL);
  unk_25A90A8 = xmmword_20B8870;
  strcpy((char *)qword_25A90A0, "Roundabout_Sixteenth_Exit");
  qword_25A90B8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_25A90C0 = xmmword_20B91A0;
  strcpy((char *)qword_25A90B8, "Roundabout_Seventeenth_Exit");
  qword_25A90D0 = (uint64_t)operator new(0x20uLL);
  unk_25A90D8 = xmmword_20B5EB0;
  strcpy((char *)qword_25A90D0, "Roundabout_Eighteenth_Exit");
  qword_25A90E8 = (uint64_t)operator new(0x20uLL);
  xmmword_25A90F0 = xmmword_20B5EB0;
  strcpy((char *)qword_25A90E8, "Roundabout_Nineteenth_Exit");
  byte_25A9117 = 8;
  strcpy((char *)&qword_25A9100, "Off_Ramp");
  byte_25A912F = 16;
  strcpy((char *)&xmmword_25A9118, "Off_Ramp_On_Left");
  byte_25A9147 = 17;
  strcpy((char *)&xmmword_25A9130, "Off_Ramp_On_Right");
  byte_25A915F = 14;
  strcpy((char *)&qword_25A9148, "Change_Highway");
  strcpy((char *)&xmmword_25A9160, "Change_Highway_On_Left");
  HIBYTE(word_25A9176) = 22;
  qword_25A9178 = (uint64_t)operator new(0x19uLL);
  xmmword_25A9180 = xmmword_20B9250;
  strcpy((char *)qword_25A9178, "Change_Highway_On_Right");
  byte_25A91A7 = 5;
  dword_25A9190 = 1735550285;
  byte_25A9194 = 101;
  byte_25A9195 = 0;
  byte_25A91BF = 12;
  strcpy((char *)&qword_25A91A8, "Enter_Detour");
  byte_25A91D7 = 11;
  strcpy((char *)&qword_25A91C0, "Exit_Detour");
  byte_25A91EF = 18;
  strcpy((char *)&xmmword_25A91D8, "Walking_Turnaround");
  qword_25A91F0 = (uint64_t)operator new(0x19uLL);
  unk_25A91F8 = xmmword_20B9250;
  strcpy((char *)qword_25A91F0, "Walking_Turnaround_Sign");
  byte_25A921F = 19;
  strcpy((char *)&xmmword_25A9208, "Distance_Title_List");
  qword_25A9220 = (uint64_t)operator new(0x19uLL);
  unk_25A9228 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25A9220, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_25A924F = 19;
  strcpy((char *)&xmmword_25A9238, "Arrival_Charge_List");
  byte_25A9267 = 15;
  strcpy((char *)&qword_25A9250, "Charge_At_Start");
  strcpy(&byte_25A927F, "\tPass_Street");
  strcpy((char *)&qword_25A9268, "Pass_Exit");
  byte_25A9297 = 11;
  byte_25A92AF = 17;
  strcpy((char *)&xmmword_25A9298, "Pass_Intersection");
  strcpy(&byte_25A92C7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25A92B0, "Next_Exit");
  byte_25A92DF = 15;
  strcpy(&byte_25A92F7, "\t_PrevUTurn");
  strcpy((char *)&qword_25A92E0, "_PrevRoad");
  strcpy(&byte_25A930F, "\nNext_");
  byte_25A9327 = 5;
  byte_25A933F = 15;
  strcpy((char *)&qword_25A9328, "_At_Next_Street");
  byte_25A9357 = 21;
  strcpy((char *)&xmmword_25A9340, "_At_Next_Intersection");
  byte_25A936F = 14;
  strcpy((char *)&qword_25A9358, "Charge_Station");
  byte_25A9387 = 15;
  strcpy((char *)&qword_25A9370, "_Charge_Station");
  BYTE1(qword_25A9398) = 0;
  WORD1(qword_25A9398) = 25856;
  HIDWORD(qword_25A9398) = 335544320;
  strcpy((char *)&qword_25A9388, "_Charge_Station_");
  byte_25A93B7 = 8;
  strcpy((char *)&qword_25A93A0, "_Minimum");
  byte_25A93CF = 15;
  strcpy((char *)&qword_25A93B8, "ExitShield_Sign");
  byte_25A93E7 = 8;
  strcpy((char *)&qword_25A93D0, "Walking_");
  byte_25A93FF = 16;
  strcpy((char *)&xmmword_25A93E8, "Walking_Continue");
  byte_25A9417 = 19;
  strcpy((char *)&xmmword_25A9400, "Walking_Start_Route");
  qword_25A9418 = (uint64_t)operator new(0x20uLL);
  xmmword_25A9420 = xmmword_20B5EB0;
  strcpy((char *)qword_25A9418, "Walking_Start_Route_U_Turn");
  byte_25A9447 = 17;
  strcpy((char *)&xmmword_25A9430, "Walking_Left_Turn");
  byte_25A945F = 18;
  strcpy((char *)&xmmword_25A9448, "Walking_Right_Turn");
  qword_25A9460 = (uint64_t)operator new(0x20uLL);
  unk_25A9468 = xmmword_20B5EB0;
  strcpy((char *)qword_25A9460, "Walking_Turn_At_Roundabout");
  qword_25A9478 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_25A9480 = xmmword_20B91B0;
  strcpy((char *)qword_25A9478, "Walking_U_Turn_When_Possible");
  qword_25A9490 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25A9498 = xmmword_20B9390;
  strcpy((char *)qword_25A9490, "Walking_Roundabout_Exit_Continue");
  qword_25A94A8 = (uint64_t)operator new(0x20uLL);
  xmmword_25A94B0 = xmmword_20B91B0;
  strcpy((char *)qword_25A94A8, "Walking_Roundabout_Exit_Left");
  qword_25A94C0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25A94C8 = xmmword_20B8890;
  strcpy((char *)qword_25A94C0, "Walking_Roundabout_Exit_Right");
  qword_25A94D8 = (uint64_t)operator new(0x20uLL);
  xmmword_25A94E0 = xmmword_20B8870;
  strcpy((char *)qword_25A94D8, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25A94F0 = (uint64_t)v0;
  unk_25A94F8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25A951F = 8;
  strcpy((char *)&qword_25A9508, "Walking_");
  qword_25A9520 = (uint64_t)operator new(0x19uLL);
  unk_25A9528 = v282;
  strcpy((char *)qword_25A9520, "Walking_Sharp_Left_Turn");
  qword_25A9538 = (uint64_t)operator new(0x20uLL);
  xmmword_25A9540 = v281;
  strcpy((char *)qword_25A9538, "Walking_Sharp_Right_Turn");
  qword_25A9550 = (uint64_t)operator new(0x20uLL);
  unk_25A9558 = v281;
  strcpy((char *)qword_25A9550, "Walking_Slight_Left_Turn");
  qword_25A9568 = (uint64_t)operator new(0x20uLL);
  xmmword_25A9570 = v280;
  strcpy((char *)qword_25A9568, "Walking_Slight_Right_Turn");
  byte_25A9597 = 4;
  strcpy((char *)&dword_25A9580, "Exit");
  byte_25A95AF = 4;
  strcpy((char *)&dword_25A9598, "Road");
  byte_25A95C7 = 7;
  strcpy((char *)&dword_25A95B0, "Freeway");
  byte_25A95DF = 12;
  strcpy((char *)&qword_25A95C8, "Intersection");
  byte_25A95F7 = 5;
  strcpy((char *)&dword_25A95E0, "Ferry");
  byte_25A960F = 11;
  strcpy((char *)&qword_25A95F8, "ShuttleName");
  byte_25A9627 = 5;
  strcpy((char *)&dword_25A9610, "Road1");
  strcpy(&byte_25A963F, "\tName");
  strcpy((char *)&qword_25A9628, "Signpost1");
  byte_25A9657 = 4;
  byte_25A966F = 7;
  strcpy((char *)&dword_25A9658, "Address");
  byte_25A9687 = 7;
  strcpy((char *)&dword_25A9670, "Shield1");
  byte_25A969F = 13;
  strcpy((char *)&qword_25A9688, "TowardShield1");
  byte_25A96B7 = 6;
  strcpy((char *)&dword_25A96A0, "Right_");
  byte_25A96CF = 5;
  byte_25A96BC = 95;
  dword_25A96B8 = 1952867660;
  byte_25A96BD = 0;
  strcpy(&byte_25A96E7, "\tOn_Left_");
  strcpy((char *)&qword_25A96D0, "On_Right_");
  byte_25A96FF = 8;
  byte_25A9717 = 12;
  strcpy((char *)&qword_25A9700, "ElevatorName");
  byte_25A972F = 13;
  strcpy((char *)&qword_25A9718, "EscalatorName");
  strcpy(&byte_25A9747, "\nBridgeName");
  strcpy((char *)&qword_25A9730, "StairsName");
  strcpy(&byte_25A975F, "\nTunnelName");
  strcpy(&byte_25A9777, "\nParking");
  byte_25A978F = 7;
  strcpy(&byte_25A97A7, "\t_Escalator");
  strcpy((char *)&qword_25A9790, "_Elevator");
  strcpy(&byte_25A97BF, "\n_ElevatorName");
  byte_25A97D7 = 13;
  byte_25A97EF = 14;
  strcpy((char *)&qword_25A97D8, "_EscalatorName");
  byte_25A9807 = 5;
  strcpy((char *)&qword_25A97F0, "_Road");
  byte_25A981F = 8;
  strcpy((char *)&qword_25A9808, "_Freeway");
  byte_25A9837 = 13;
  strcpy((char *)&qword_25A9820, "_Intersection");
  byte_25A984F = 6;
  strcpy((char *)&dword_25A9838, "_Road1");
  byte_25A9867 = 6;
  strcpy((char *)&dword_25A9850, "_Road2");
  strcpy(&byte_25A987F, "\n_Signpost2");
  strcpy((char *)&qword_25A9868, "_Signpost1");
  strcpy(&byte_25A9897, "\n_Ferry");
  byte_25A98AF = 6;
  byte_25A98C7 = 12;
  strcpy((char *)&qword_25A98B0, "_Ferry_Ferry");
  byte_25A98DF = 12;
  strcpy((char *)&qword_25A98C8, "_ShuttleName");
  qword_25A98E0 = (uint64_t)operator new(0x20uLL);
  unk_25A98E8 = v279;
  strcpy((char *)qword_25A98E0, "_Railway_Shuttle_ShuttleName");
  byte_25A990F = 11;
  strcpy((char *)&qword_25A98F8, "_ExitNumber");
  byte_25A9927 = 5;
  dword_25A9910 = 1769489759;
  byte_25A9914 = 116;
  byte_25A9915 = 0;
  byte_25A993F = 7;
  strcpy((char *)&dword_25A9928, "_StayOn");
  byte_25A9957 = 7;
  strcpy((char *)&dword_25A9940, "_Stairs");
  byte_25A996F = 5;
  strcpy((char *)&dword_25A9958, "_Ramp");
  byte_25A9987 = 11;
  strcpy((char *)&qword_25A9970, "_StairsName");
  strcpy(&byte_25A999F, "\t_Down");
  strcpy((char *)&qword_25A9988, "_RampName");
  byte_25A99B7 = 5;
  byte_25A99CF = 3;
  dword_25A99B8 = 7361887;
  byte_25A99E7 = 7;
  strcpy((char *)&dword_25A99D0, "_Bridge");
  byte_25A99FF = 7;
  strcpy((char *)&dword_25A99E8, "_Tunnel");
  byte_25A9A17 = 11;
  strcpy((char *)&qword_25A9A00, "_Roundabout");
  byte_25A9A2F = 6;
  strcpy((char *)&dword_25A9A18, "_Cross");
  byte_25A9A47 = 8;
  strcpy((char *)&qword_25A9A30, "_Parking");
  byte_25A9A5F = 8;
  strcpy((char *)&qword_25A9A48, "_Shield1");
  byte_25A9A77 = 14;
  strcpy((char *)&qword_25A9A60, "_TowardShield1");
  byte_25A9A8F = 8;
  strcpy((char *)&qword_25A9A78, "_Shield2");
  byte_25A9AA7 = 14;
  strcpy((char *)&qword_25A9A90, "_TowardShield2");
  byte_25A9ABF = 11;
  strcpy((char *)&qword_25A9AA8, "_Direction1");
  byte_25A9AD7 = 11;
  strcpy((char *)&qword_25A9AC0, "_Direction2");
  strcpy(&byte_25A9AEF, "\n_TowardDirection1");
  strcpy((char *)&qword_25A9AD8, "Direction1");
  byte_25A9B07 = 17;
  byte_25A9B1F = 17;
  strcpy((char *)&xmmword_25A9B08, "_TowardDirection2");
  byte_25A9B37 = 16;
  strcpy((char *)&xmmword_25A9B20, "TowardDirection1");
  byte_25A9B4F = 7;
  strcpy((char *)&qword_25A9B38, "_Spoken");
  byte_25A9B67 = 5;
  strcpy((char *)&qword_25A9B50, "_Sign");
  byte_25A9B7F = 15;
  strcpy((char *)&qword_25A9B68, "_Secondary_Sign");
  byte_25A9B97 = 5;
  byte_25A9B84 = 116;
  dword_25A9B80 = 1936280671;
  byte_25A9B85 = 0;
  byte_25A9BAF = 8;
  strcpy((char *)&qword_25A9B98, "_Primary");
  qword_25A9BC0 = 0xF00000000000000;
  strcpy((char *)&qword_25A9BB0, "_Spoken_Primary");
  strcpy(&byte_25A9BDF, "\n_Secondary");
  strcpy((char *)&qword_25A9BC8, "_Secondary");
  strcpy(&byte_25A9BF7, "\n_Spoken_Secondar");
  BYTE1(qword_25A9C08) = 0;
  WORD1(qword_25A9C08) = 0;
  HIDWORD(qword_25A9C08) = 285212672;
  byte_25A9C27 = 13;
  strcpy((char *)&qword_25A9C10, "_To_Secondary");
  BYTE1(qword_25A9C38) = 0;
  WORD1(qword_25A9C38) = 0;
  HIDWORD(qword_25A9C38) = 335544320;
  strcpy((char *)&dword_25A9C28, "_Spoken_To_Secon");
  strcpy(&byte_25A9C57, "\t_ValidDistance");
  strcpy((char *)&qword_25A9C40, "_Distance");
  byte_25A9C6F = 14;
  byte_25A9C87 = 6;
  strcpy((char *)&dword_25A9C70, "_Short");
  byte_25A9C9F = 1;
  word_25A9C88 = 95;
  qword_25A9CA0 = (uint64_t)operator new(0x20uLL);
  unk_25A9CA8 = v281;
  strcpy((char *)qword_25A9CA0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25A9CB8 = (uint64_t)v1;
  xmmword_25A9CC0 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_25A9CE7 = 12;
  strcpy((char *)&qword_25A9CD0, "Chain_Spoken");
  byte_25A9CFF = 15;
  strcpy((char *)&qword_25A9CE8, "Chain_To_Spoken");
  strcpy(&byte_25A9D17, "\nThen_Spoken");
  strcpy((char *)&qword_25A9D00, "And_Spoken");
  byte_25A9D2F = 11;
  byte_25A9D47 = 18;
  strcpy((char *)&xmmword_25A9D30, "Concatenate_Spoken");
  qword_25A9D48 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_25A9D50 = xmmword_20B9240;
  strcpy((char *)qword_25A9D48, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25A9D60 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_25A9D68 = xmmword_20B9260;
  strcpy((char *)qword_25A9D60, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25A9D78 = (uint64_t)operator new(0x40uLL);
  xmmword_25A9D80 = xmmword_20B9A90;
  strcpy((char *)qword_25A9D78, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25A9D90 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_25A9D98 = xmmword_20B9A40;
  strcpy((char *)qword_25A9D90, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25A9DA8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_25A9DB0 = xmmword_20E12D0;
  strcpy((char *)qword_25A9DA8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25A9DC0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25A9DC8 = xmmword_20B9960;
  strcpy((char *)qword_25A9DC0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25A9DD8 = (uint64_t)operator new(0x28uLL);
  xmmword_25A9DE0 = xmmword_20B93A0;
  strcpy((char *)qword_25A9DD8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25A9DF0 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25A9DF8 = xmmword_20E1380;
  strcpy((char *)qword_25A9DF0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25A9E08 = (uint64_t)operator new(0x30uLL);
  xmmword_25A9E10 = xmmword_20B93C0;
  strcpy((char *)qword_25A9E08, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25A9E20 = (uint64_t)operator new(0x38uLL);
  unk_25A9E28 = xmmword_20B9A60;
  strcpy((char *)qword_25A9E20, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25A9E38 = (uint64_t)operator new(0x30uLL);
  xmmword_25A9E40 = xmmword_20E1380;
  strcpy((char *)qword_25A9E38, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25A9E50 = (uint64_t)operator new(0x28uLL);
  unk_25A9E58 = xmmword_20B9960;
  strcpy((char *)qword_25A9E50, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25A9E68 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_25A9E70 = xmmword_20B93D0;
  strcpy((char *)qword_25A9E68, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25A9E80 = (uint64_t)operator new(0x20uLL);
  unk_25A9E88 = v277;
  strcpy((char *)qword_25A9E80, "Walking_Distance_Chain_Spoken");
  qword_25A9E98 = (uint64_t)operator new(0x20uLL);
  xmmword_25A9EA0 = v277;
  strcpy((char *)qword_25A9E98, "Walking_Continue_Chain_Spoken");
  unint64_t v3 = (char *)operator new(0x19uLL);
  qword_25A9EB0 = (uint64_t)v3;
  unk_25A9EB8 = v282;
  *(_OWORD *)unint64_t v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25A9EC8 = (uint64_t)operator new(0x28uLL);
  xmmword_25A9ED0 = v271;
  strcpy((char *)qword_25A9EC8, "Distance_Cross_The_Street_Spoken");
  byte_25A9EF7 = 22;
  strcpy((char *)&xmmword_25A9EE0, "Walking_Continue_Cross");
  byte_25A9F0F = 14;
  strcpy((char *)&qword_25A9EF8, "Continue_Cross");
  byte_25A9F27 = 5;
  strcpy((char *)&dword_25A9F10, "Cross");
  byte_25A9F3F = 19;
  strcpy((char *)&xmmword_25A9F28, "Cross_Street_Spoken");
  byte_25A9F57 = 17;
  strcpy((char *)&xmmword_25A9F40, "Cross_Road_Spoken");
  byte_25A9F6F = 20;
  strcpy((char *)&xmmword_25A9F58, "Use_Crosswalk_Spoken");
  byte_25A9F87 = 15;
  strcpy((char *)&qword_25A9F70, "Distance_Spoken");
  byte_25A9F9F = 19;
  strcpy((char *)&xmmword_25A9F88, "Distance_And_Spoken");
  byte_25A9FB7 = 21;
  strcpy((char *)&xmmword_25A9FA0, "Continue_Stage_Spoken");
  byte_25A9FCF = 13;
  qmemcpy(&qword_25A9FB8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25A9BC0);
  if (qword_25A9BC0 >= 0) {
    size_t v5 = HIBYTE(qword_25A9BC0);
  }
  else {
    size_t v5 = unk_25A9BB8;
  }
  unint64_t v6 = v5 + 13;
  byte_25A9FC5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    qword_25A9FD8 = v5 + 13;
    unk_25A9FE0 = v9 | 0x8000000000000000;
    qword_25A9FD0 = (uint64_t)v10;
    void *v10 = *(void *)"ContinueStage";
    long long v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25A9FD8) = 0;
    WORD1(qword_25A9FD8) = 0;
    HIDWORD(qword_25A9FD8) = 0;
    unk_25A9FE0 = 0;
    byte_25A9FE7 = v5 + 13;
    long long v7 = (char *)&qword_25A9FD8 + 5;
    strcpy((char *)&qword_25A9FD0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    unint64_t v11 = &qword_25A9BB0;
  }
  else {
    unint64_t v11 = (uint64_t *)qword_25A9BB0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25A9807;
  if (byte_25A9807 >= 0) {
    size_t v13 = byte_25A9807;
  }
  else {
    size_t v13 = qword_25A97F8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    void *v18 = qword_25A9FB8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25A9FB8 + 5);
    uint64_t v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25A9FB8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25A9FB8;
    uint64_t v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    int v19 = &qword_25A97F0;
  }
  else {
    int v19 = (uint64_t *)qword_25A97F0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    uint64_t v20 = (const std::string::value_type *)&qword_25A9BB0;
  }
  else {
    uint64_t v20 = (const std::string::value_type *)qword_25A9BB0;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25A9FF8 = v21->__r_.__value_.__r.__words[2];
  xmmword_25A9FE8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25AA017 = 5;
  strcpy((char *)&dword_25AA000, "Merge");
  qword_25AA018 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  unk_25AA020 = xmmword_20B8E90;
  strcpy((char *)qword_25AA018, "Continue_Freeway_Spoken_Primary");
  byte_25AA047 = 8;
  strcpy((char *)&qword_25AA030, "Starting");
  byte_25AA05F = 14;
  strcpy((char *)&qword_25AA048, "Starting_Route");
  byte_25AA077 = 14;
  strcpy((char *)&qword_25AA060, "Resuming_Route");
  byte_25AA08F = 16;
  strcpy((char *)&xmmword_25AA078, "Continuing_Route");
  byte_25AA0A7 = 9;
  word_25AA098 = 112;
  qword_25AA090 = *(void *)&v266[48];
  strcpy(&byte_25AA0BF, "\nEnding");
  strcpy((char *)&word_25AA0B0, "op");
  qword_25AA0A8 = *(void *)&v270[0];
  byte_25AA0D7 = 6;
  strcpy((char *)&qword_25AA0D8, "_Destination");
  byte_25AA0EF = 12;
  byte_25AA107 = 15;
  strcpy((char *)&qword_25AA0F0, "_At_Destination");
  std::operator+<char>();
  qword_25AA120 = (uint64_t)operator new(0x20uLL);
  unk_25AA128 = v281;
  strcpy((char *)qword_25AA120, "Spoken_Ending_At_Parking");
  qword_25AA138 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_25AA140 = xmmword_20B9800;
  strcpy((char *)qword_25AA138, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25AA150, "Sign_Ending_At_Parking");
  HIBYTE(word_25AA166) = 22;
  byte_25AA17F = 4;
  strcpy((char *)&dword_25AA168, "Home");
  byte_25AA197 = 4;
  strcpy((char *)&dword_25AA180, "Work");
  byte_25AA1AF = 8;
  strcpy((char *)&qword_25AA198, "Business");
  byte_25AA1C7 = 4;
  strcpy((char *)&dword_25AA1B0, "Name");
  byte_25AA1DF = 13;
  strcpy((char *)&qword_25AA1C8, "Other_Contact");
  byte_25AA1F7 = 11;
  strcpy((char *)&qword_25AA1E0, "ContactHome");
  byte_25AA20F = 11;
  *(_DWORD *)((char *)&qword_25AA1F8 + 7) = 1802661719;
  byte_25AA227 = 7;
  *(int *)((char *)&dword_25AA210 + 3) = 1936942450;
  dword_25AA210 = 1919181889;
  strcpy((char *)&xmmword_25AA228, "Discoverability_Prompt");
  HIBYTE(word_25AA23E) = 22;
  byte_25AA257 = 6;
  dword_25AA240 = 1634878303;
  word_25AA244 = 26739;
  byte_25AA26F = 8;
  qword_25AA258 = 0x697269535F6F4E5FLL;
  byte_25AA287 = 9;
  strcpy((char *)&qword_25AA270, "_CityName");
  byte_25AA29F = 8;
  qword_25AA288 = 0x636972656E65475FLL;
  int v23 = byte_25AA047;
  if (byte_25AA047 >= 0) {
    size_t v24 = byte_25AA047;
  }
  else {
    size_t v24 = qword_25AA038;
  }
  LODWORD(v272) = byte_25A9387;
  if (byte_25A9387 >= 0) {
    size_t v25 = byte_25A9387;
  }
  else {
    size_t v25 = unk_25A9378;
  }
  qword_25AA1F8 = *(void *)"ContactWork";
  byte_25AA203 = 0;
  byte_25AA217 = 0;
  byte_25AA246 = 0;
  byte_25AA260 = 0;
  byte_25AA290 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    long long v27 = &qword_25AA2A0;
    qword_25AA2A8 = 0;
    unk_25AA2B0 = 0;
    qword_25AA2A0 = 0;
    byte_25AA2B7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  long long v27 = (uint64_t *)operator new(v90 + 1);
  qword_25AA2A8 = v25 + v24;
  unk_25AA2B0 = v91 | 0x8000000000000000;
  qword_25AA2A0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      unint64_t v28 = &qword_25AA030;
    }
    else {
      unint64_t v28 = (uint64_t *)qword_25AA030;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  uint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      long long v30 = &qword_25A9370;
    }
    else {
      long long v30 = (uint64_t *)qword_25A9370;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25AA0EF;
  if (byte_25AA0EF >= 0) {
    size_t v32 = byte_25AA0EF;
  }
  else {
    size_t v32 = qword_25AA0E0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    int v34 = &qword_25AA2B8;
    qword_25AA2C0 = 0;
    unk_25AA2C8 = 0;
    qword_25AA2B8 = 0;
    byte_25AA2CF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  int v34 = (uint64_t *)operator new(v92 + 1);
  qword_25AA2C0 = v32 + v24;
  unk_25AA2C8 = v93 | 0x8000000000000000;
  qword_25AA2B8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      uint64_t v35 = &qword_25AA030;
    }
    else {
      uint64_t v35 = (uint64_t *)qword_25AA030;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  uint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25AA0D8;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25AA0D8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25AA2D0 = (uint64_t)operator new(0x19uLL);
  unk_25AA2D8 = v282;
  strcpy((char *)qword_25AA2D0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    uint64_t v38 = &qword_25AA2E8;
    qword_25AA2F0 = 0;
    unk_25AA2F8 = 0;
    qword_25AA2E8 = 0;
    byte_25AA2FF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_25AA2F0 = v32 + v24;
  unk_25AA2F8 = v95 | 0x8000000000000000;
  qword_25AA2E8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      BOOL v39 = &qword_25AA030;
    }
    else {
      BOOL v39 = (uint64_t *)qword_25AA030;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  char v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      long long v41 = &qword_25AA0D8;
    }
    else {
      long long v41 = (uint64_t *)qword_25AA0D8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25AA300, "{NewBatteryPercentage}");
  HIBYTE(word_25AA316) = 22;
  qword_25AA318 = (uint64_t)operator new(0x20uLL);
  xmmword_25AA320 = v275;
  strcpy((char *)qword_25AA318, "{OriginalBatteryPercentage}");
  byte_25AA347 = 19;
  strcpy((char *)&xmmword_25AA330, "_Arrival_Percentage");
  int v42 = byte_25AA0D7;
  if (byte_25AA0D7 >= 0) {
    size_t v43 = byte_25AA0D7;
  }
  else {
    size_t v43 = qword_25AA0C8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      int v46 = &qword_25AA0C0;
    }
    else {
      int v46 = (uint64_t *)qword_25AA0C0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      uint64_t v48 = &qword_25A9370;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25A9370;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  uint64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25AA358 = v49->__r_.__value_.__r.__words[2];
  xmmword_25AA348 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25AA0D7;
  if (byte_25AA0D7 >= 0) {
    size_t v52 = byte_25AA0D7;
  }
  else {
    size_t v52 = qword_25AA0C8;
  }
  int v53 = byte_25A9387;
  if (byte_25A9387 >= 0) {
    size_t v54 = byte_25A9387;
  }
  else {
    size_t v54 = unk_25A9378;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    char v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  char v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      uint64_t v57 = &qword_25AA0C0;
    }
    else {
      uint64_t v57 = (uint64_t *)qword_25AA0C0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  char v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_25A9370;
    }
    else {
      int v59 = (uint64_t *)qword_25A9370;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25A93B7 >= 0) {
    char v60 = (const std::string::value_type *)&qword_25A93A0;
  }
  else {
    char v60 = (const std::string::value_type *)qword_25A93A0;
  }
  if (byte_25A93B7 >= 0) {
    std::string::size_type v61 = byte_25A93B7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25A93A8;
  }
  unint64_t v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  char v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25AA370 = v64->__r_.__value_.__r.__words[2];
  xmmword_25AA360 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25AA0D7;
  if (byte_25AA0D7 >= 0) {
    size_t v67 = byte_25AA0D7;
  }
  else {
    size_t v67 = qword_25AA0C8;
  }
  int v68 = byte_25A9387;
  if (byte_25A9387 >= 0) {
    size_t v69 = byte_25A9387;
  }
  else {
    size_t v69 = unk_25A9378;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      char v72 = &qword_25AA0C0;
    }
    else {
      char v72 = (uint64_t *)qword_25AA0C0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  int v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      uint64_t v74 = &qword_25A9370;
    }
    else {
      uint64_t v74 = (uint64_t *)qword_25A9370;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  uint64_t v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25AA388 = v75->__r_.__value_.__r.__words[2];
  xmmword_25AA378 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25AA0D7;
  if (byte_25AA0D7 >= 0) {
    size_t v78 = byte_25AA0D7;
  }
  else {
    size_t v78 = qword_25AA0C8;
  }
  int v79 = byte_25A9387;
  if (byte_25A9387 >= 0) {
    size_t v80 = byte_25A9387;
  }
  else {
    size_t v80 = unk_25A9378;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25AA398 = 0;
    unk_25AA3A0 = 0;
    qword_25AA390 = 0;
    __darwin_ct_rune_t v82 = &qword_25AA390;
    byte_25AA3A7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  __darwin_ct_rune_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_25AA398 = v80 + v78;
  unk_25AA3A0 = v103 | 0x8000000000000000;
  qword_25AA390 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      __darwin_ct_rune_t v83 = &qword_25AA0C0;
    }
    else {
      __darwin_ct_rune_t v83 = (uint64_t *)qword_25AA0C0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  __darwin_ct_rune_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      __darwin_ct_rune_t v85 = &qword_25A9370;
    }
    else {
      __darwin_ct_rune_t v85 = (uint64_t *)qword_25A9370;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25AA3A7;
  if (byte_25AA3A7 >= 0) {
    size_t v87 = byte_25AA3A7;
  }
  else {
    size_t v87 = qword_25AA398;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25AA3B0 = v87 + 5;
    unk_25AA3B8 = v105 | 0x8000000000000000;
    qword_25AA3A8 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25AA3A8;
    qword_25AA3B0 = 0;
    unk_25AA3B8 = 0;
    qword_25AA3A8 = 0;
    byte_25AA3BF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_25AA390;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_25AA390;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25AA0D7;
  if (byte_25AA0D7 >= 0) {
    size_t v108 = byte_25AA0D7;
  }
  else {
    size_t v108 = qword_25AA0C8;
  }
  int v109 = byte_25A9387;
  if (byte_25A9387 >= 0) {
    size_t v110 = byte_25A9387;
  }
  else {
    size_t v110 = unk_25A9378;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  int v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      unint64_t v113 = &qword_25AA0C0;
    }
    else {
      unint64_t v113 = (uint64_t *)qword_25AA0C0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_25A9370;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_25A9370;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25AA3D0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25AA3C0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25AA3D0);
  if (qword_25AA3D0 >= 0) {
    size_t v119 = HIBYTE(qword_25AA3D0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25AA3C0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    uint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_25AA3E0 = v119 + 6;
    unk_25AA3E8 = v125 | 0x8000000000000000;
    qword_25AA3D8 = (uint64_t)v121;
  }
  else
  {
    uint64_t v121 = &qword_25AA3D8;
    qword_25AA3E0 = 0;
    unk_25AA3E8 = 0;
    qword_25AA3D8 = 0;
    byte_25AA3EF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    unint64_t v126 = &xmmword_25AA3C0;
  }
  else {
    unint64_t v126 = (long long *)xmmword_25AA3C0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25AA0D7;
  if (byte_25AA0D7 >= 0) {
    size_t v128 = byte_25AA0D7;
  }
  else {
    size_t v128 = qword_25AA0C8;
  }
  int v129 = byte_25A9387;
  if (byte_25A9387 >= 0) {
    size_t v130 = byte_25A9387;
  }
  else {
    size_t v130 = unk_25A9378;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_25AA0C0;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_25AA0C0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  BOOL v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      unint64_t v135 = &qword_25A9370;
    }
    else {
      unint64_t v135 = (uint64_t *)qword_25A9370;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25A9B4F >= 0) {
    unint64_t v136 = (const std::string::value_type *)&qword_25A9B38;
  }
  else {
    unint64_t v136 = (const std::string::value_type *)qword_25A9B38;
  }
  if (byte_25A9B4F >= 0) {
    std::string::size_type v137 = byte_25A9B4F;
  }
  else {
    std::string::size_type v137 = unk_25A9B40;
  }
  v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25AA400 = v138->__r_.__value_.__r.__words[2];
  xmmword_25AA3F0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25AA0D7;
  if (byte_25AA0D7 >= 0) {
    size_t v141 = byte_25AA0D7;
  }
  else {
    size_t v141 = qword_25AA0C8;
  }
  int v142 = byte_25A9387;
  if (byte_25A9387 >= 0) {
    size_t v143 = byte_25A9387;
  }
  else {
    size_t v143 = unk_25A9378;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      uint64_t v146 = &qword_25AA0C0;
    }
    else {
      uint64_t v146 = (uint64_t *)qword_25AA0C0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  char v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      char v148 = &qword_25A9370;
    }
    else {
      char v148 = (uint64_t *)qword_25A9370;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25A93B7 >= 0) {
    v149 = (const std::string::value_type *)&qword_25A93A0;
  }
  else {
    v149 = (const std::string::value_type *)qword_25A93A0;
  }
  if (byte_25A93B7 >= 0) {
    std::string::size_type v150 = byte_25A93B7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25A93A8;
  }
  uint64_t v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25A9B4F >= 0) {
    uint64_t v153 = (const std::string::value_type *)&qword_25A9B38;
  }
  else {
    uint64_t v153 = (const std::string::value_type *)qword_25A9B38;
  }
  if (byte_25A9B4F >= 0) {
    std::string::size_type v154 = byte_25A9B4F;
  }
  else {
    std::string::size_type v154 = unk_25A9B40;
  }
  char v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25AA418 = v155->__r_.__value_.__r.__words[2];
  xmmword_25AA408 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25AA437 = 16;
  strcpy((char *)&xmmword_25AA420, "Use_NACS_Adapter");
  byte_25AA44F = 16;
  strcpy(byte_25AA438, "Start_Route_Sign");
  qword_25AA450 = (uint64_t)operator new(0x20uLL);
  unk_25AA458 = v278;
  strcpy((char *)qword_25AA450, "Start_Route_Spoken_Primary");
  int v157 = byte_25A8AE7;
  if (byte_25A8AE7 >= 0) {
    size_t v158 = byte_25A8AE7;
  }
  else {
    size_t v158 = qword_25A8AD8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_25AA468;
    qword_25AA470 = 0;
    unk_25AA478 = 0;
    qword_25AA468 = 0;
    byte_25AA47F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      long long v167 = &qword_25A8AD0;
    }
    else {
      long long v167 = (uint64_t *)qword_25A8AD0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_25AA470 = v158 + 27;
  unk_25AA478 = v166 | 0x8000000000000000;
  qword_25AA468 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25AA497, "\t_Two_Lanes");
  strcpy((char *)&qword_25AA480, "_One_Lane");
  strcpy(&byte_25AA4AF, "\n_Three_Lanes");
  byte_25AA4C7 = 12;
  byte_25AA4DF = 11;
  strcpy((char *)&qword_25AA4C8, "_Four_Lanes");
  byte_25AA4F7 = 11;
  strcpy((char *)&qword_25AA4E0, "_Five_Lanes");
  strcpy(&byte_25AA50F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25AA4F8, "_Six_Lanes");
  byte_25AA527 = 12;
  byte_25AA53F = 12;
  strcpy((char *)&qword_25AA528, "_Eight_Lanes");
  byte_25AA557 = 12;
  strcpy((char *)&qword_25AA540, "_Second_Lane");
  byte_25AA56F = 11;
  strcpy((char *)&qword_25AA558, "_Third_Lane");
  byte_25AA587 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25AA570, "_Second_Third_Lanes");
  byte_25AA59F = 4;
  strcpy((char *)&dword_25AA588, "Left");
  byte_25AA5B7 = 5;
  byte_25AA5A4 = 116;
  dword_25AA5A0 = 1751607634;
  byte_25AA5A5 = 0;
  byte_25AA5CF = 6;
  strcpy((char *)&dword_25AA5B8, "Middle");
  BYTE1(qword_25AA5E0) = 0;
  WORD1(qword_25AA5E0) = 0;
  HIDWORD(qword_25AA5E0) = 0x10000000;
  strcpy((char *)dword_25AA5D0, "Left_Second_Lane");
  BYTE1(qword_25AA5F8) = 0;
  WORD1(qword_25AA5F8) = 0;
  HIDWORD(qword_25AA5F8) = 285212672;
  strcpy((char *)&dword_25AA5E8, "Right_Second_Lan");
  qword_25AA610 = 0xF00000000000000;
  strcpy((char *)&dword_25AA600, "Left_Third_Lane");
  qword_25AA628 = 0x1000000000000000;
  byte_25AA61C = 116;
  dword_25AA618 = 1751607634;
  dword_25AA624 = 1701732684;
  unk_25AA61D = *(void *)"_Third_Lane";
  long long v168 = (char *)operator new(0x19uLL);
  qword_25AA630 = (uint64_t)v168;
  unk_25AA638 = v282;
  *(_DWORD *)long long v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  long long v169 = (char *)operator new(0x20uLL);
  qword_25AA648 = (uint64_t)v169;
  xmmword_25AA650 = v281;
  *(_DWORD *)long long v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_25AA677 = 5;
  strcpy((char *)&dword_25AA660, "_Stay");
  byte_25AA68F = 13;
  strcpy((char *)&qword_25AA678, "Continue_Sign");
  byte_25AA6A7 = 8;
  strcpy((char *)&qword_25AA690, "Continue");
  int v170 = byte_25A9B67;
  if (byte_25A9B67 >= 0) {
    size_t v171 = byte_25A9B67;
  }
  else {
    size_t v171 = qword_25A9B58;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    long long v176 = operator new(v174 + 1);
    qword_25AA6B0 = v171 + 8;
    qword_25AA6B8 = v175 | 0x8000000000000000;
    qword_25AA6A8 = (uint64_t)v176;
    *long long v176 = 0x65756E69746E6F43;
    long long v173 = v176 + 1;
  }
  else
  {
    qword_25AA6B8 = 0;
    HIBYTE(qword_25AA6B8) = v171 + 8;
    qword_25AA6A8 = 0x65756E69746E6F43;
    qword_25AA6B0 = 0;
    long long v173 = &qword_25AA6B0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    long long v177 = &qword_25A9B50;
  }
  else {
    long long v177 = (uint64_t *)qword_25A9B50;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25A9BC0);
  if (qword_25A9BC0 >= 0) {
    size_t v179 = HIBYTE(qword_25A9BC0);
  }
  else {
    size_t v179 = unk_25A9BB8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    long long v184 = operator new(v182 + 1);
    qword_25AA6C8 = v179 + 8;
    qword_25AA6D0 = v183 | 0x8000000000000000;
    qword_25AA6C0 = (uint64_t)v184;
    *long long v184 = qword_25AA690;
    long long v181 = v184 + 1;
  }
  else
  {
    qword_25AA6D0 = 0;
    HIBYTE(qword_25AA6D0) = v179 + 8;
    qword_25AA6C0 = qword_25AA690;
    qword_25AA6C8 = 0;
    long long v181 = &qword_25AA6C8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    long long v185 = &qword_25A9BB0;
  }
  else {
    long long v185 = (uint64_t *)qword_25A9BB0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25AA6D8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25AA707 = 13;
  strcpy((char *)&qword_25AA6F0, "{instruction}");
  byte_25AA71F = 20;
  strcpy(byte_25AA708, "{primaryInstruction}");
  strcpy((char *)&xmmword_25AA720, "{secondaryInstruction}");
  HIBYTE(word_25AA736) = 22;
  qword_25AA738 = (uint64_t)operator new(0x20uLL);
  unk_25AA740 = v280;
  strcpy((char *)qword_25AA738, "{andSecondaryInstruction}");
  qword_25AA750 = (uint64_t)operator new(0x20uLL);
  unk_25AA758 = v281;
  strcpy((char *)qword_25AA750, "{toSecondaryInstruction}");
  byte_25AA77F = 21;
  strcpy(byte_25AA768, "{continueInstruction}");
  qword_25AA780 = (uint64_t)operator new(0x20uLL);
  unk_25AA788 = v278;
  strcpy((char *)qword_25AA780, "{thenSecondaryInstruction}");
  byte_25AA7AF = 14;
  strcpy((char *)&qword_25AA798, "{instruction1}");
  byte_25AA7C7 = 14;
  strcpy((char *)&qword_25AA7B0, "{instruction2}");
  strcpy(&byte_25AA7DF, "\n{nextDistance}");
  strcpy((char *)&qword_25AA7C8, "{distance}");
  byte_25AA7F7 = 14;
  byte_25AA80F = 16;
  strcpy(byte_25AA7F8, "{valid_distance}");
  strcpy(&byte_25AA827, "\n{valid_distance}");
  strcpy((char *)&qword_25AA810, "{distance}");
  byte_25AA83F = 16;
  byte_25AA857 = 15;
  strcpy((char *)&qword_25AA840, "{ClimbDistance}");
  byte_25AA86F = 17;
  strcpy(byte_25AA858, "{DescentDistance}");
  byte_25AA887 = 13;
  strcpy((char *)&qword_25AA870, "{nonBrkSpace}");
  byte_25AA89F = 9;
  strcpy((char *)&qword_25AA888, "{newLine}");
  byte_25AA8B7 = 6;
  word_25AA8A4 = -24382;
  dword_25AA8A0 = -1211981630;
  byte_25AA8A6 = 0;
  byte_25AA8CF = 2;
  word_25AA8B8 = -24382;
  byte_25AA8BA = 0;
  byte_25AA8E7 = 1;
  word_25AA8D0 = 10;
  byte_25AA8FF = 1;
  word_25AA8E8 = 32;
  byte_25AA917 = 2;
  strcpy((char *)&word_25AA900, "\n\n");
  strcpy(&byte_25AA92F, "\t{TowardShield1}");
  strcpy((char *)&qword_25AA918, "{Shield1}");
  byte_25AA947 = 15;
  strcpy(&byte_25AA95F, "\t{TowardShield2}");
  strcpy((char *)&qword_25AA948, "{Shield2}");
  byte_25AA977 = 15;
  byte_25AA98F = 12;
  strcpy((char *)&qword_25AA978, "{Direction1}");
  byte_25AA9A7 = 12;
  strcpy((char *)&qword_25AA990, "{Direction2}");
  byte_25AA9BF = 18;
  strcpy(byte_25AA9A8, "{TowardDirection1}");
  byte_25AA9D7 = 18;
  strcpy((char *)&xmmword_25AA9C0, "{TowardDirection2}");
  byte_25AA9EF = 7;
  strcpy((char *)&dword_25AA9D8, "{Icon1}");
  byte_25AAA07 = 7;
  strcpy((char *)&dword_25AA9F0, "{Icon2}");
  byte_25AAA08[23] = 14;
  strcpy(byte_25AAA08, "{Intersection}");
  byte_25AAA37 = 6;
  strcpy((char *)&xmmword_25AAA20, "{Road}");
  byte_25AAA4F = 7;
  strcpy((char *)&dword_25AAA38, "{Road1}");
  byte_25AAA67 = 7;
  strcpy((char *)&xmmword_25AAA50, "{Road2}");
  strcpy(&byte_25AAA7F, "\n{Freeway}");
  strcpy((char *)&xmmword_25AAA68, "{Elevator}");
  strcpy(&byte_25AAA97, "\t{Ferry}");
  byte_25AAAAF = 7;
  byte_25AAAC7 = 13;
  strcpy((char *)&xmmword_25AAAB0, "{ShuttleName}");
  byte_25AAADF = 11;
  strcpy((char *)&xmmword_25AAAC8, "{Signpost1}");
  byte_25AAAF7 = 11;
  strcpy((char *)&xmmword_25AAAE0, "{Signpost2}");
  byte_25AAB0F = 12;
  strcpy((char *)&xmmword_25AAAF8, "{ExitNumber}");
  strcpy(&byte_25AAB27, "\t{Name}");
  strcpy((char *)&xmmword_25AAB10, "{Address}");
  byte_25AAB3F = 6;
  byte_25AAB57 = 11;
  strcpy((char *)&xmmword_25AAB40, "{PlaceName}");
  byte_25AAB6F = 14;
  strcpy((char *)&xmmword_25AAB58, "{ElevatorName}");
  byte_25AAB87 = 15;
  strcpy((char *)&xmmword_25AAB70, "{EscalatorName}");
  byte_25AAB9F = 12;
  strcpy((char *)&xmmword_25AAB88, "{StairsName}");
  strcpy(&byte_25AABB7, "\n{BridgeName}");
  strcpy((char *)&xmmword_25AABA0, "{RampName}");
  byte_25AABCF = 12;
  byte_25AABE7 = 12;
  strcpy((char *)&xmmword_25AABD0, "{TunnelName}");
  byte_25AABFF = 13;
  strcpy((char *)&xmmword_25AABE8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25AAA08;
  *(_OWORD *)int v285 = xmmword_25AAA20;
  *(void *)&v285[16] = unk_25AAA30;
  *(_OWORD *)char v286 = *(_OWORD *)&dword_25AAA38;
  *(void *)v287 = unk_25AAA48;
  *(_OWORD *)&v287[8] = xmmword_25AAA50;
  uint64_t v288 = unk_25AAA60;
  *(_OWORD *)v289 = xmmword_25AAA68;
  uint64_t v290 = unk_25AAA78;
  uint64_t v292 = unk_25AAA90;
  long long v291 = xmmword_25AAA80;
  long long v293 = xmmword_25AAA98;
  uint64_t v294 = unk_25AAAA8;
  uint64_t v296 = unk_25AAAC0;
  long long __p = xmmword_25AAAB0;
  long long v297 = xmmword_25AAAC8;
  uint64_t v298 = unk_25AAAD8;
  uint64_t v300 = unk_25AAAF0;
  long long v299 = xmmword_25AAAE0;
  long long v301 = xmmword_25AAAF8;
  long long v303 = xmmword_25AAB10;
  uint64_t v302 = unk_25AAB08;
  uint64_t v304 = unk_25AAB20;
  long long v305 = xmmword_25AAB28;
  long long v307 = xmmword_25AAB40;
  uint64_t v306 = unk_25AAB38;
  uint64_t v308 = unk_25AAB50;
  long long v309 = xmmword_25AAB58;
  long long v311 = xmmword_25AAB70;
  uint64_t v310 = unk_25AAB68;
  uint64_t v312 = unk_25AAB80;
  long long v313 = xmmword_25AAB88;
  long long v315 = xmmword_25AABA0;
  uint64_t v314 = unk_25AAB98;
  uint64_t v316 = unk_25AABB0;
  long long v317 = xmmword_25AABB8;
  long long v319 = xmmword_25AABD0;
  uint64_t v318 = unk_25AABC8;
  uint64_t v320 = unk_25AABE0;
  uint64_t v322 = unk_25AABF8;
  long long v321 = xmmword_25AABE8;
  sub_4BDC0C(qword_25AAC00, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25AAC18 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25AAC20 = v282;
  strcpy((char *)qword_25AAC18, "From_User_Location_List");
  byte_25AAC47 = 20;
  strcpy(&algn_25AAC20[16], "Origin_Waypoint_List");
  qword_25AAC48 = (uint64_t)operator new(0x20uLL);
  unk_25AAC50 = v278;
  strcpy((char *)qword_25AAC48, "Intermediate_Waypoint_List");
  unk_25AAC60 = operator new(0x20uLL);
  unk_25AAC68 = v280;
  strcpy(unk_25AAC60, "Destination_Waypoint_List");
  byte_25AAC8F = 15;
  strcpy(byte_25AAC78, "{toDestination}");
  byte_25AACA7 = 13;
  strcpy((char *)&xmmword_25AAC90, "{Destination}");
  byte_25AACBF = 7;
  strcpy(byte_25AACA8, "To_Home");
  byte_25AACD7 = 14;
  strcpy(byte_25AACC0, "To_ContactHome");
  byte_25AACEF = 7;
  strcpy(byte_25AACD8, "To_Work");
  byte_25AAD07 = 14;
  strcpy(byte_25AACF0, "To_ContactWork");
  strcpy(&byte_25AAD1F, "\nTo_Business");
  strcpy(byte_25AAD08, "To_Address");
  byte_25AAD37 = 11;
  byte_25AAD4F = 16;
  strcpy(byte_25AAD38, "To_Other_Contact");
  strcpy(&byte_25AAD67, "\tTo_ContactSchool");
  strcpy(byte_25AAD50, "To_School");
  byte_25AAD7F = 16;
  byte_25AAD97 = 17;
  strcpy(byte_25AAD80, "To_PersonLocation");
  qword_25AAD98 = (uint64_t)operator new(0x20uLL);
  unk_25AADA0 = v279;
  strcpy((char *)qword_25AAD98, "To_ContactCustomLabelAddress");
  byte_25AADC7 = 7;
  strcpy((char *)&dword_25AADB0, "At_Home");
  byte_25AADDF = 14;
  strcpy((char *)&qword_25AADC8, "At_ContactHome");
  byte_25AADF7 = 7;
  strcpy((char *)&dword_25AADE0, "At_Work");
  byte_25AAE0F = 14;
  strcpy((char *)&qword_25AADF8, "At_ContactWork");
  strcpy(&byte_25AAE27, "\nAt_Business");
  strcpy((char *)&qword_25AAE10, "At_Address");
  byte_25AAE3F = 11;
  byte_25AAE57 = 16;
  strcpy(byte_25AAE40, "At_Other_Contact");
  byte_25AAE6F = 4;
  strcpy((char *)&dword_25AAE58, "Home");
  byte_25AAE87 = 11;
  strcpy((char *)&qword_25AAE70 + 7, "Home");
  qword_25AAE70 = *(void *)&v266[16];
  byte_25AAE9F = 4;
  strcpy((char *)&dword_25AAE88, "Work");
  byte_25AAEB7 = 11;
  strcpy((char *)&qword_25AAEA0 + 7, "Work");
  qword_25AAEA0 = *(void *)v266;
  byte_25AAECF = 7;
  strcpy((char *)&dword_25AAEB8, "Address");
  byte_25AAEE7 = 8;
  strcpy((char *)&qword_25AAED0, "Business");
  byte_25AAEFF = 13;
  qword_25AAEE8 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_25AAEE8 + 5) = *(void *)&v266[32];
  byte_25AAEF5 = 0;
  byte_25AAF17 = 6;
  strcpy((char *)&dword_25AAF00, "School");
  byte_25AAF2F = 13;
  strcpy((char *)&qword_25AAF18, "ContactSchool");
  byte_25AAF47 = 14;
  strcpy((char *)&qword_25AAF30, "PersonLocation");
  qword_25AAF48 = (uint64_t)operator new(0x20uLL);
  xmmword_25AAF50 = v280;
  strcpy((char *)qword_25AAF48, "ContactCustomLabelAddress");
  if (byte_25AACA7 < 0)
  {
    sub_4200(&xmmword_25AAF60, (void *)xmmword_25AAC90, *((unint64_t *)&xmmword_25AAC90 + 1));
  }
  else
  {
    xmmword_25AAF60 = xmmword_25AAC90;
    qword_25AAF70 = unk_25AACA0;
  }
  byte_25AAF8F = 16;
  strcpy((char *)&xmmword_25AAF78, "{PrevExitNumber}");
  byte_25AAFA7 = 10;
  strcpy((char *)&qword_25AAF90, "{PrevRoad}");
  qword_25AAFA8 = (uint64_t)operator new(0x20uLL);
  unk_25AAFB0 = v281;
  strcpy((char *)qword_25AAFA8, "{RouteTotalExpectedTime}");
  byte_25AAFD7 = 18;
  strcpy(byte_25AAFC0, "{ChargePercentage}");
  qword_25AAFD8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AAFE0 = v275;
  strcpy((char *)qword_25AAFD8, "{RemainingChargePercentage}");
  byte_25AB007 = 16;
  strcpy(&algn_25AAFE0[16], "{ChargeDuration}");
  byte_25AB01F = 15;
  strcpy((char *)&qword_25AB008, "{ConnectorType}");
  byte_25AB037 = 19;
  strcpy(byte_25AB020, "{ChargeStationName}");
  byte_25AB04F = 7;
  strcpy((char *)&dword_25AB038, "{Power}");
  byte_25AB067 = 13;
  strcpy((char *)&qword_25AB050, "{VehicleName}");
  byte_25AB07F = 18;
  strcpy((char *)&xmmword_25AB068, "{AreaIncidentName}");
  byte_25AB097 = 14;
  strcpy((char *)&qword_25AB080, "{AreaIncident}");
  byte_25AB0AF = 16;
  strcpy((char *)&xmmword_25AB098, "{AffectedRegion}");
  byte_25AB0C7 = 21;
  strcpy(byte_25AB0B0, "{AreaIncidentWeblink}");
  byte_25AB0DF = 20;
  strcpy((char *)&xmmword_25AB0C8, "{AreaIncidentAgency}");
  byte_25AB0F7 = 11;
  strcpy((char *)&qword_25AB0E0, "{IssueTime}");
  byte_25AB10F = 12;
  strcpy((char *)&qword_25AB0F8, "{UpdateTime}");
  byte_25AB127 = 11;
  strcpy((char *)&qword_25AB110, "{IssueDate}");
  byte_25AB13F = 12;
  strcpy((char *)&qword_25AB128, "{UpdateDate}");
  qword_25AB140 = (uint64_t)operator new(0x20uLL);
  unk_25AB148 = v281;
  strcpy((char *)qword_25AB140, "{AreaIncidentDataSource}");
  byte_25AB16F = 13;
  strcpy((char *)&qword_25AB158, "{AreaHectare}");
  byte_25AB187 = 10;
  strcpy((char *)&qword_25AB170, "{AreaAcre}");
  qword_25AB188 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AB190 = v277;
  strcpy((char *)qword_25AB188, "{WildfirePercentageContained}");
  qword_25AB1A0 = (uint64_t)operator new(0x28uLL);
  unk_25AB1A8 = v270[2];
  strcpy((char *)qword_25AB1A0, "{WildfireExpectedContainmentDate}");
  qword_25AB1B8 = (uint64_t)operator new(0x20uLL);
  unk_25AB1C0 = v279;
  strcpy((char *)qword_25AB1B8, "{ServerRecommendedRouteName}");
  qword_25AB1D0 = (uint64_t)operator new(0x20uLL);
  unk_25AB1D8 = v279;
  strcpy((char *)qword_25AB1D0, "{ServerNonRecommendedRoute1}");
  qword_25AB1E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AB1F0 = v279;
  strcpy((char *)qword_25AB1E8, "{ServerNonRecommendedRoute2}");
  byte_25AB217 = 12;
  strcpy((char *)&qword_25AB200, "{ClientDest}");
  byte_25AB22F = 6;
  strcpy((char *)&dword_25AB218, "{Name}");
  qword_25AB230 = (uint64_t)operator new(0x20uLL);
  unk_25AB238 = v270[1];
  strcpy((char *)qword_25AB230, "ProactiveAlert_FasterRouteTitle");
  qword_25AB248 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AB250 = v278;
  strcpy((char *)qword_25AB248, "ProactiveAlert_RoadClosure");
  qword_25AB260 = (uint64_t)operator new(0x30uLL);
  unk_25AB268 = v273;
  strcpy((char *)qword_25AB260, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25AB278 = (uint64_t)operator new(0x28uLL);
  unk_25AB280 = v276;
  strcpy((char *)qword_25AB278, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25AB290 = (uint64_t)operator new(0x28uLL);
  unk_25AB298 = v276;
  strcpy((char *)qword_25AB290, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25AB2A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AB2B0 = v276;
  strcpy((char *)qword_25AB2A8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25AB2C0 = (uint64_t)operator new(0x30uLL);
  unk_25AB2C8 = xmmword_20B93B0;
  strcpy((char *)qword_25AB2C0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25AB2EF = 17;
  strcpy(byte_25AB2D8, "Proactive_Driving");
  strcpy(&byte_25AB307, "\n{RouteName}");
  strcpy((char *)&qword_25AB2F0, "_RouteName");
  byte_25AB31F = 11;
  qword_25AB320 = (uint64_t)operator new(0x28uLL);
  unk_25AB328 = v270[2];
  strcpy((char *)qword_25AB320, "Pass_Traffic_Light_Spoken_Primary");
  qword_25AB338 = (uint64_t)operator new(0x20uLL);
  unk_25AB340 = v277;
  strcpy((char *)qword_25AB338, "Pass_Stop_Sign_Spoken_Primary");
  unk_25AB350 = operator new(0x20uLL);
  unk_25AB358 = v270[0];
  strcpy(unk_25AB350, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25AB37F, "\nBannerBody");
  strcpy(byte_25AB368, "BannerHead");
  strcpy(&byte_25AB397, "\nBannerDescription");
  byte_25AB3AF = 17;
  strcpy(&byte_25AB3C7, "\n_Incident");
  strcpy((char *)&qword_25AB3B0, "VoiceAlert");
  strcpy(&byte_25AB3DF, "\t_Area_Incident");
  byte_25AB3F7 = 14;
  byte_25AB40F = 15;
  strcpy((char *)&qword_25AB3F8, "_Area_Incidents");
  strcpy(&byte_25AB427, "\t_Crash");
  strcpy((char *)&qword_25AB410, "_Accident");
  byte_25AB43F = 6;
  byte_25AB457 = 16;
  strcpy((char *)&xmmword_25AB440, "_Congestion_Zone");
  strcpy(&byte_25AB46F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25AB458, "_Toll_Zone");
  byte_25AB487 = 19;
  BYTE1(qword_25AB498) = 116;
  WORD1(qword_25AB498) = 0;
  HIDWORD(qword_25AB498) = 301989888;
  strcpy(byte_25AB4A0, "_Construction");
  strcpy((char *)&qword_25AB488, "_Incident_Accide");
  byte_25AB4B7 = 13;
  byte_25AB4CF = 7;
  strcpy((char *)&dword_25AB4B8, "_Hazard");
  byte_25AB4E7 = 12;
  strcpy((char *)&qword_25AB4D0, "_LaneClosure");
  byte_25AB4FF = 12;
  strcpy((char *)&qword_25AB4E8, "_LaneTrailer");
  qmemcpy(&byte_25AB517, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25AB500, "_Shoulder");
  qword_25AB528 = 0x1500007200000000;
  *(void *)algn_25AB524 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25AB530, "_Causing_Traffic_Delay");
  HIBYTE(word_25AB546) = 22;
  byte_25AB55F = 6;
  strcpy((char *)&dword_25AB548, "_Timed");
  byte_25AB577 = 12;
  strcpy((char *)&qword_25AB560, "_HasDistance");
  byte_25AB58F = 8;
  strcpy((char *)&qword_25AB578, "_Closure");
  strcpy(&byte_25AB5A7, "\n_BadRoad");
  strcpy((char *)&qword_25AB590, "_NoReroute");
  byte_25AB5BF = 8;
  byte_25AB5D7 = 12;
  strcpy((char *)&qword_25AB5C0, "_TollTrailer");
  byte_25AB5EF = 12;
  strcpy((char *)&qword_25AB5D8, "_BestTrailer");
  byte_25AB607 = 8;
  strcpy((char *)&qword_25AB5F0, "_Trailer");
  byte_25AB61F = 18;
  strcpy((char *)&xmmword_25AB608, "_Secondary_Trailer");
  byte_25AB637 = 8;
  strcpy((char *)&qword_25AB620, "_Savings");
  byte_25AB64F = 8;
  strcpy((char *)&qword_25AB638, "_AltRoad");
  byte_25AB667 = 6;
  strcpy((char *)&dword_25AB650, "_Named");
  byte_25AB67F = 6;
  strcpy((char *)&dword_25AB668, "_NAMED");
  byte_25AB697 = 22;
  strcpy((char *)&xmmword_25AB680, "_Named_Suggested_Route");
  qword_25AB6B0 = 0x1000000000000000;
  xmmword_25AB6A0 = xmmword_20E81D0;
  byte_25AB6CF = 11;
  strcpy((char *)&qword_25AB6B8, "_Speed_Trap");
  byte_25AB6E7 = 4;
  strcpy((char *)&dword_25AB6D0, "_UGI");
  byte_25AB6FF = 12;
  strcpy((char *)&qword_25AB6E8, "_Safer_Route");
  qword_25AB700 = (uint64_t)operator new(0x20uLL);
  unk_25AB708 = v270[1];
  strcpy((char *)qword_25AB700, "BlockedRouteByBlockingIncident_");
  qword_25AB718 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25AB720 = xmmword_20B9280;
  strcpy((char *)qword_25AB718, "BlockedRouteByManeuverRestriction_");
  qword_25AB730 = (uint64_t)operator new(0x20uLL);
  unk_25AB738 = v270[0];
  strcpy((char *)qword_25AB730, "BlockedRouteByTimeRestriction_");
  qword_25AB748 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AB750 = xmmword_20B8FD0;
  strcpy((char *)qword_25AB748, "SuggestRouteToAvoidBlockingIncident_");
  qword_25AB760 = (uint64_t)operator new(0x30uLL);
  unk_25AB768 = xmmword_20B9380;
  strcpy((char *)qword_25AB760, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25AB778 = (uint64_t)operator new(0x30uLL);
  unk_25AB780 = xmmword_20B93E0;
  strcpy((char *)qword_25AB778, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25AB7A7 = 1;
  word_25AB790 = 95;
  strcpy((char *)&xmmword_25AB7A8, "IncidentsCausingDelay_");
  HIBYTE(word_25AB7BE) = 22;
  qword_25AB7C0 = (uint64_t)operator new(0x19uLL);
  unk_25AB7C8 = v282;
  strcpy((char *)qword_25AB7C0, "NonVotableRoadIncident_");
  byte_25AB7EF = 20;
  strcpy(byte_25AB7D8, "VotableRoadIncident_");
  byte_25AB807 = 13;
  strcpy((char *)&qword_25AB7F0, "AreaIncident_");
  byte_25AB81F = 15;
  strcpy((char *)&qword_25AB808, "CongestionZone_");
  qword_25AB820 = (uint64_t)operator new(0x20uLL);
  unk_25AB828 = v281;
  strcpy((char *)qword_25AB820, "EVModifiedChargingStops_");
  byte_25AB84F = 13;
  strcpy((char *)&qword_25AB838, "EVDisconnect_");
  byte_25AB867 = 12;
  strcpy((char *)&qword_25AB850, "EVReconnect_");
  qword_25AB868 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AB870 = v279;
  strcpy((char *)qword_25AB868, "EVOfflineToOnlineTransition_");
  byte_25AB897 = 13;
  strcpy((char *)&qword_25AB880, "EVOfflineSAR_");
  byte_25AB8AF = 21;
  strcpy((char *)&xmmword_25AB898, "EVTowingNotSupported_");
  byte_25AB8C7 = 18;
  strcpy(algn_25AB8B0, "EVInfeasibleRoute_");
  qword_25AB8C8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25AB8D0 = xmmword_20B8DF0;
  strcpy((char *)qword_25AB8C8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25AB8E0 = (uint64_t)operator new(0x40uLL);
  unk_25AB8E8 = xmmword_20B98C0;
  strcpy((char *)qword_25AB8E0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25AB8F8 = (uint64_t)operator new(0x30uLL);
  unk_25AB900 = v274;
  strcpy((char *)qword_25AB8F8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_25AB910 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_25AB918 = xmmword_20B9A80;
  strcpy((char *)qword_25AB910, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25AB928 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25AB930 = v273;
  strcpy((char *)qword_25AB928, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  uint64_t v186 = operator new(0x30uLL);
  qword_25AB940 = (uint64_t)v186;
  unk_25AB948 = v274;
  *uint64_t v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25AB958 = (uint64_t)operator new(0x28uLL);
  unk_25AB960 = v272;
  strcpy((char *)qword_25AB958, "SuggestDetourWithHigherArrivalSOC_");
  long long v187 = operator new(0x30uLL);
  qword_25AB970 = (uint64_t)v187;
  unk_25AB978 = *(_OWORD *)&v266[48];
  *long long v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_25AB988 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AB990 = v276;
  strcpy((char *)qword_25AB988, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25AB9A0 = (uint64_t)operator new(0x28uLL);
  unk_25AB9A8 = v269;
  strcpy((char *)qword_25AB9A0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25AB9B8 = (uint64_t)operator new(0x20uLL);
  unk_25AB9C0 = v281;
  strcpy((char *)qword_25AB9B8, "OfflineToOnlineNewRoute_");
  qword_25AB9D0 = (uint64_t)operator new(0x40uLL);
  unk_25AB9D8 = xmmword_20B98C0;
  strcpy((char *)qword_25AB9D0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25AB9FF = 20;
  strcpy(byte_25AB9E8, "LPR_OFFLINE_REROUTE_");
  byte_25ABA17 = 16;
  strcpy((char *)&xmmword_25ABA00, "LPR_OFFLINE_SAR_");
  byte_25ABA2F = 20;
  strcpy(byte_25ABA18, "LPR_OFFLINE_REROUTE_");
  byte_25ABA47 = 16;
  strcpy((char *)&xmmword_25ABA30, "LPR_OFFLINE_SAR_");
  byte_25ABA5F = 19;
  strcpy(byte_25ABA48, "SuggestFasterRoute_");
  qword_25ABA60 = (char *)operator new(0x20uLL);
  xmmword_25ABA68 = v280;
  strcpy(qword_25ABA60, "AreaIncidentSaferReroute_");
  byte_25ABA8F = 12;
  strcpy((char *)&qword_25ABA78, "_Remove_Stop");
  byte_25ABAA7 = 13;
  strcpy((char *)&qword_25ABA90, "_Remove_Stops");
  strcpy(&byte_25ABABF, "\t_Add_Stops");
  strcpy((char *)&qword_25ABAA8, "_Add_Stop");
  strcpy(&byte_25ABAD7, "\n_Change_Route");
  byte_25ABAEF = 13;
  byte_25ABB07 = 15;
  strcpy((char *)&qword_25ABAF0, "_Different_Stop");
  byte_25ABB1F = 16;
  strcpy((char *)&xmmword_25ABB08, "_Different_Stops");
  byte_25ABB37 = 15;
  strcpy((char *)&qword_25ABB20, "_EV_Remove_Stop");
  byte_25ABB4F = 16;
  strcpy((char *)&xmmword_25ABB38, "_EV_Remove_Stops");
  byte_25ABB67 = 12;
  strcpy((char *)&qword_25ABB50, "_EV_Add_Stop");
  byte_25ABB7F = 13;
  strcpy((char *)&qword_25ABB68, "_EV_Add_Stops");
  byte_25ABB97 = 15;
  strcpy((char *)&qword_25ABB80, "_EV_Low_Battery");
  byte_25ABBAF = 14;
  strcpy((char *)&qword_25ABB98, "_EV_Infeasible");
  byte_25ABBC7 = 15;
  strcpy((char *)&qword_25ABBB0, "_EV_Last_Chance");
  qword_25ABBC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25ABBD0 = v281;
  strcpy((char *)qword_25ABBC8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25ABAC8;
  qword_25ABBE0 = (uint64_t)operator new(0x20uLL);
  unk_25ABBE8 = v280;
  strcpy((char *)qword_25ABBE0, "_EV_Low_Battery_Add_Stops");
  qword_25ABBF8 = (uint64_t)operator new(0x19uLL);
  unk_25ABC00 = v282;
  strcpy((char *)qword_25ABBF8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25ABAD7;
  if (byte_25ABAD7 >= 0) {
    size_t v190 = byte_25ABAD7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    uint64_t v196 = (char *)operator new(v194 + 1);
    qword_25ABC18 = v190 + 14;
    unk_25ABC20 = v195 | 0x8000000000000000;
    qword_25ABC10 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25ABC18) = 0;
    WORD1(qword_25ABC18) = 0;
    HIDWORD(qword_25ABC18) = 0;
    unk_25ABC20 = 0;
    byte_25ABC27 = v190 + 14;
    strcpy((char *)&qword_25ABC10, "_EV_Infe");
    char v192 = (char *)&qword_25ABC18 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25ABAC0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  uint64_t v198 = (char *)operator new(0x20uLL);
  qword_25ABC28 = (uint64_t)v198;
  *(_OWORD *)algn_25ABC30 = v281;
  *(void *)uint64_t v198 = qword_25ABBB0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25ABBB0 + 7);
  *(void *)(v198 + 15) = qword_25ABAA8;
  v198[23] = word_25ABAB0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    uint64_t v200 = (uint64_t *)operator new(v201 + 1);
    qword_25ABC48 = v190 + 15;
    unk_25ABC50 = v202 | 0x8000000000000000;
    qword_25ABC40 = (uint64_t)v200;
  }
  else
  {
    uint64_t v200 = &qword_25ABC40;
    qword_25ABC48 = 0;
    unk_25ABC50 = 0;
    qword_25ABC40 = 0;
    byte_25ABC57 = v190 + 15;
  }
  uint64_t *v200 = qword_25ABBB0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25ABBB0 + 7);
  uint64_t v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_25ABAC0;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_25ABAC0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25ABC6F = 17;
  strcpy((char *)&xmmword_25ABC58, "_EV_Forced_Detour");
  qword_25ABC70 = (uint64_t)operator new(0x20uLL);
  unk_25ABC78 = v280;
  strcpy((char *)qword_25ABC70, "_EV_Higher_Arrival_Charge");
  qword_25ABC88 = (uint64_t)operator new(0x28uLL);
  unk_25ABC90 = xmmword_20B8FD0;
  strcpy((char *)qword_25ABC88, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25ABCB7 = 16;
  strcpy(byte_25ABCA0, "_EV_Out_Of_Range");
  qword_25ABCB8 = (uint64_t)operator new(0x20uLL);
  unk_25ABCC0 = v275;
  strcpy((char *)qword_25ABCB8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25ABCD0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25ABCE6) = 22;
  qword_25ABCE8 = (uint64_t)operator new(0x19uLL);
  unk_25ABCF0 = v282;
  strcpy((char *)qword_25ABCE8, "_EV_Forced_Modify_Stops");
  byte_25ABD17 = 19;
  strcpy(byte_25ABD00, "_EV_Forced_Add_Stop");
  byte_25ABD2F = 20;
  strcpy((char *)&xmmword_25ABD18, "_EV_Forced_Add_Stops");
  byte_25ABD47 = 21;
  strcpy(byte_25ABD30, "_EV_Battery_Info_Lost");
  qword_25ABD48 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25ABD50 = v280;
  strcpy((char *)qword_25ABD48, "_EV_Battery_Info_Restored");
  qword_25ABD60 = (uint64_t)operator new(0x20uLL);
  unk_25ABD68 = v281;
  strcpy((char *)qword_25ABD60, "_EV_Towing_Not_Supported");
  qword_25ABD78 = (uint64_t)operator new(0x28uLL);
  unk_25ABD80 = v271;
  strcpy((char *)qword_25ABD78, "_EV_Offline_to_Online_Transition");
  byte_25ABDA7 = 15;
  strcpy((char *)&qword_25ABD90, "_EV_Offline_SAR");
  qword_25ABDA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25ABDB0 = v279;
  strcpy((char *)qword_25ABDA8, "_Offline_to_Online_New_Route");
  byte_25ABDD7 = 12;
  strcpy((char *)&qword_25ABDC0, "BannerButton");
  byte_25ABDEF = 8;
  strcpy((char *)&qword_25ABDD8, "_Dismiss");
  byte_25ABE07 = 3;
  word_25ABDF0 = 20319;
  byte_25ABDF2 = 75;
  byte_25ABDF3 = 0;
  byte_25ABE1F = 11;
  strcpy((char *)&qword_25ABE08, "_Still_Here");
  byte_25ABE37 = 8;
  strcpy((char *)&qword_25ABE20, "_Cleared");
  qmemcpy(&byte_25ABE4F, "\nBannerButton", 13);
  strcpy((char *)&qword_25ABE38, "_No_Thanks");
  uint64_t v205 = qword_25ABDC8;
  qword_25ABE60 = 0x1400000000000000;
  *(void *)algn_25ABE5C = 0x7373696D7369445FLL;
  qword_25ABE78 = 0xF00000000000000;
  qword_25ABE70 = 0x4B4F5F6E6F7474;
  int v206 = byte_25ABB67;
  if (byte_25ABB67 >= 0) {
    size_t v207 = byte_25ABB67;
  }
  else {
    size_t v207 = qword_25ABB58;
  }
  unint64_t v208 = v207 + 12;
  qword_25ABE68 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    int v212 = (char *)operator new(v210 + 1);
    qword_25ABE88 = v207 + 12;
    unk_25ABE90 = v211 | 0x8000000000000000;
    qword_25ABE80 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)int v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25ABE88) = 0;
    HIWORD(qword_25ABE88) = 0;
    unk_25ABE90 = 0;
    byte_25ABE97 = v207 + 12;
    strcpy((char *)&qword_25ABE80, "BannerButton");
    uint64_t v209 = (char *)&qword_25ABE88 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_25ABB50;
  }
  else {
    int v213 = (uint64_t *)qword_25ABB50;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25ABB7F;
  if (byte_25ABB7F >= 0) {
    size_t v215 = byte_25ABB7F;
  }
  else {
    size_t v215 = unk_25ABB70;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    int v220 = (char *)operator new(v218 + 1);
    qword_25ABEA0 = v215 + 12;
    unk_25ABEA8 = v219 | 0x8000000000000000;
    qword_25ABE98 = (uint64_t)v220;
    *(void *)int v220 = qword_25ABDC0;
    *((_DWORD *)v220 + 2) = qword_25ABDC8;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_25ABEA0 = 0;
    unk_25ABEA8 = 0;
    byte_25ABEAF = v215 + 12;
    LODWORD(qword_25ABEA0) = qword_25ABDC8;
    qword_25ABE98 = qword_25ABDC0;
    uint64_t v217 = (char *)&qword_25ABEA0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_25ABB68;
  }
  else {
    int v221 = (uint64_t *)qword_25ABB68;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25ABB37;
  if (byte_25ABB37 >= 0) {
    size_t v223 = byte_25ABB37;
  }
  else {
    size_t v223 = unk_25ABB28;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_25ABEB8 = v223 + 12;
    unk_25ABEC0 = v227 | 0x8000000000000000;
    qword_25ABEB0 = (uint64_t)v228;
    *(void *)v228 = qword_25ABDC0;
    *((_DWORD *)v228 + 2) = qword_25ABDC8;
    unint64_t v225 = v228 + 12;
  }
  else
  {
    qword_25ABEB8 = 0;
    unk_25ABEC0 = 0;
    byte_25ABEC7 = v223 + 12;
    LODWORD(qword_25ABEB8) = qword_25ABDC8;
    qword_25ABEB0 = qword_25ABDC0;
    unint64_t v225 = (char *)&qword_25ABEB8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    uint64_t v229 = &qword_25ABB20;
  }
  else {
    uint64_t v229 = (uint64_t *)qword_25ABB20;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25ABDD7;
  if (byte_25ABDD7 >= 0) {
    size_t v231 = byte_25ABDD7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25ABB4F;
  if (byte_25ABB4F >= 0) {
    size_t v233 = byte_25ABB4F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25ABB38 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_25ABEC8;
    qword_25ABED0 = 0;
    unk_25ABED8 = 0;
    qword_25ABEC8 = 0;
    byte_25ABEDF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_25ABED0 = v233 + v231;
  unk_25ABED8 = v243 | 0x8000000000000000;
  qword_25ABEC8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      uint64_t v236 = &qword_25ABDC0;
    }
    else {
      uint64_t v236 = (uint64_t *)qword_25ABDC0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      uint64_t v238 = &xmmword_25ABB38;
    }
    else {
      uint64_t v238 = (long long *)xmmword_25ABB38;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    uint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_25ABEE8 = v231 + 11;
    unk_25ABEF0 = v245 | 0x8000000000000000;
    qword_25ABEE0 = (uint64_t)v240;
  }
  else
  {
    uint64_t v240 = &qword_25ABEE0;
    qword_25ABEE8 = 0;
    unk_25ABEF0 = 0;
    qword_25ABEE0 = 0;
    byte_25ABEF7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25ABEE0 + 7) = *(_DWORD *)((char *)&qword_25ABE08 + 7);
      qword_25ABEE0 = qword_25ABE08;
      BYTE3(qword_25ABEE8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    long long v246 = &qword_25ABDC0;
  }
  else {
    long long v246 = (uint64_t *)qword_25ABDC0;
  }
  memmove(v240, v246, v231);
  long long v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25ABE08 + 7);
  *(void *)long long v247 = qword_25ABE08;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    long long v249 = &qword_25ABEF8;
    qword_25ABF00 = 0;
    unk_25ABF08 = 0;
    qword_25ABEF8 = 0;
    byte_25ABF0F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  long long v249 = (uint64_t *)operator new(v264 + 1);
  qword_25ABF00 = v231 + 8;
  unk_25ABF08 = v265 | 0x8000000000000000;
  qword_25ABEF8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      uint64_t v250 = &qword_25ABDC0;
    }
    else {
      uint64_t v250 = (uint64_t *)qword_25ABDC0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  char v251 = (char *)v249 + v231;
  *(void *)char v251 = qword_25ABE20;
  v251[8] = 0;
  int v252 = byte_25ABE4F;
  if (byte_25ABE4F >= 0) {
    size_t v253 = byte_25ABE4F;
  }
  else {
    size_t v253 = qword_25ABE40;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    long long v255 = &qword_25ABF10;
    qword_25ABF18 = 0;
    unk_25ABF20 = 0;
    qword_25ABF10 = 0;
    byte_25ABF27 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  long long v255 = (uint64_t *)operator new(v262 + 1);
  qword_25ABF18 = v253 + v231;
  unk_25ABF20 = v263 | 0x8000000000000000;
  qword_25ABF10 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      long long v256 = &qword_25ABDC0;
    }
    else {
      long long v256 = (uint64_t *)qword_25ABDC0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  long long v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      long long v258 = &qword_25ABE38;
    }
    else {
      long long v258 = (uint64_t *)qword_25ABE38;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25ABF3F, "\n{newroute}");
  strcpy((char *)&qword_25ABF28, "{roadname}");
  strcpy(&byte_25ABF57, "\n{count}");
  byte_25ABF6F = 7;
  strcpy(&byte_25ABF87, "\n{dur}");
  strcpy((char *)&qword_25ABF70, "{duration}");
  byte_25ABF9F = 5;
  qword_25ABFA0 = (uint64_t)operator new(0x20uLL);
  unk_25ABFA8 = v278;
  strcpy((char *)qword_25ABFA0, "{PleaseProceedWithCaution}");
  byte_25ABFCF = 15;
  strcpy((char *)&qword_25ABFB8, "{UserRouteName}");
  byte_25ABFE7 = 20;
  strcpy((char *)&xmmword_25ABFD0, "{SuggestedRouteName}");
  byte_25ABFFF = 18;
  strcpy(byte_25ABFE8, "Speed_Camera_Ahead");
  qword_25AC000 = (uint64_t)operator new(0x20uLL);
  unk_25AC008 = v277;
  strcpy((char *)qword_25AC000, "Red_Light_Camera_Ahead_Spoken");
  qword_25AC018 = (uint64_t)operator new(0x20uLL);
  unk_25AC020 = v277;
  strcpy((char *)qword_25AC018, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25AC030 = (uint64_t)operator new(0x28uLL);
  unk_25AC038 = v272;
  strcpy((char *)qword_25AC030, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25AC048 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AC050 = v267;
  strcpy((char *)qword_25AC048, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25AC060 = (uint64_t)operator new(0x20uLL);
  unk_25AC068 = v279;
  strcpy((char *)qword_25AC060, "Camera_Ahead_Multiple_Spoken");
  qword_25AC078 = (uint64_t)operator new(0x30uLL);
  unk_25AC080 = v268;
  strcpy((char *)qword_25AC078, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25AC090 = (char *)operator new(0x30uLL);
  strcpy(qword_25AC090, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25AC0BF = 16;
  xmmword_25AC098 = v268;
  strcpy(byte_25AC0A8, "_Speed_Limit_Mph");
  byte_25AC0D7 = 16;
  strcpy(byte_25AC0C0, "_Speed_Limit_Kph");
  byte_25AC0EF = 11;
  strcpy((char *)&qword_25AC0D8, "Watch_Speed");
  byte_25AC107 = 4;
  strcpy((char *)&dword_25AC0F0, "_One");
  byte_25AC11F = 4;
  strcpy((char *)&dword_25AC108, "_Two");
  byte_25AC137 = 4;
  strcpy((char *)&dword_25AC120, "_Few");
  byte_25AC14F = 5;
  strcpy((char *)&dword_25AC138, "_Many");
  byte_25AC167 = 6;
  strcpy((char *)&dword_25AC150, "_Other");
  byte_25AC17F = 4;
  strcpy((char *)&dword_25AC168, "_ONE");
  byte_25AC197 = 7;
  strcpy((char *)&dword_25AC180, "{Speed}");
  byte_25AC1AF = 8;
  strcpy((char *)&qword_25AC198, "Dismount");
  byte_25AC1C7 = 4;
  strcpy((char *)&dword_25AC1B0, "Walk");
  byte_25AC1DF = 5;
  strcpy((char *)&dword_25AC1C8, "Mount");
  byte_25AC1F7 = 7;
  strcpy((char *)&dword_25AC1E0, "Remount");
  strcpy(&byte_25AC20F, "\t_Crosswalk");
  strcpy((char *)&qword_25AC1F8, "Walk_Road");
  strcpy(&byte_25AC227, "\n_PLURAL");
  byte_25AC23F = 7;
  strcpy(&byte_25AC257, "\n{description1}");
  strcpy((char *)&qword_25AC240, "_SECONDARY");
  byte_25AC26F = 14;
  byte_25AC287 = 14;
  strcpy((char *)&qword_25AC270, "{description2}");
  byte_25AC29F = 21;
  strcpy((char *)&xmmword_25AC288, "TWO_ROAD_DESCRIPTIONS");
  byte_25AC2B7 = 17;
  strcpy((char *)&xmmword_25AC2A0, "{SlopePercentage}");
  byte_25AC2CF = 15;
  strcpy((char *)&qword_25AC2B8, "_Protected_Lane");
  strcpy(&byte_25AC2E7, "\n_Paved_Path");
  strcpy((char *)&qword_25AC2D0, "_Bike_Path");
  byte_25AC2FF = 11;
  byte_25AC317 = 15;
  strcpy((char *)&qword_25AC300, "_Dedicated_Lane");
  byte_25AC32F = 12;
  strcpy((char *)&qword_25AC318, "_Shared_Path");
  strcpy(&byte_25AC347, "\n_UnnamedRoad");
  strcpy((char *)&qword_25AC330, "_Bike_Lane");
  byte_25AC35F = 12;
  byte_25AC377 = 5;
  strcpy((char *)&dword_25AC360, "_Path");
  byte_25AC38F = 6;
  strcpy((char *)&dword_25AC378, "_Trail");
  strcpy(&byte_25AC3A7, "\t_Plaza");
  strcpy((char *)&qword_25AC390, "_Sidewalk");
  byte_25AC3BF = 6;
  byte_25AC3D7 = 15;
  strcpy((char *)&qword_25AC3C0, "_Moving_Walkway");
  byte_25AC3EF = 14;
  strcpy((char *)&qword_25AC3D8, "Two_Stage_Turn");
  byte_25AC407 = 16;
  strcpy((char *)&xmmword_25AC3F0, "{OptionalPeriod}");
  byte_25AC41F = 18;
  strcpy((char *)&xmmword_25AC408, "Advisory_Separator");
  byte_25AC437 = 6;
  strcpy((char *)&dword_25AC420, "Period");
  byte_25AC44F = 21;
  strcpy((char *)&xmmword_25AC438, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25AC450, "Advisory_Title_Notices");
  HIBYTE(word_25AC466) = 22;
  byte_25AC47F = 7;
  strcpy((char *)&dword_25AC468, "_DETAIL");
  byte_25AC497 = 17;
  strcpy((char *)&xmmword_25AC480, "_LONG_REGION_LIST");
  byte_25AC4AF = 16;
  strcpy((char *)&xmmword_25AC498, "Advisory_Grouped");
  byte_25AC4C7 = 11;
  strcpy((char *)&qword_25AC4B0, "_Advisories");
  qword_25AC4C8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AC4D0 = v275;
  strcpy((char *)qword_25AC4C8, "Advisory_WILDFIRE_METADATA_");
  byte_25AC4F7 = 8;
  strcpy((char *)&qword_25AC4E0, "Advisory");
  byte_25AC50F = 13;
  strcpy((char *)&qword_25AC4F8, "MPR_NUM_STOPS");
  byte_25AC527 = 17;
  strcpy(algn_25AC510, "EV_CHARGE_STATION");
  byte_25AC53F = 11;
  strcpy((char *)&qword_25AC528, "_NAMED_CITY");
  byte_25AC557 = 5;
  strcpy((char *)&dword_25AC540, "_Stop");
  strcpy(&byte_25AC56F, "\n{StopsCount}");
  strcpy((char *)&qword_25AC558, "{CityName}");
  byte_25AC587 = 12;
  byte_25AC59F = 11;
  strcpy((char *)&qword_25AC588, "_With_Other");
  byte_25AC5B7 = 15;
  strcpy((char *)&qword_25AC5A0, "{DepartureTime}");
  qword_25AC5B8 = (uint64_t)operator new(0x28uLL);
  unk_25AC5C0 = v276;
  strcpy((char *)qword_25AC5B8, "Ending_Charge_Station_Port_Availability");
  qword_25AC5D0 = (uint64_t)operator new(0x28uLL);
  unk_25AC5D8 = v269;
  strcpy((char *)qword_25AC5D0, "Ending_Charge_Station_No_Availability");
  qword_25AC5E8 = (uint64_t)operator new(0x28uLL);
  unk_25AC5F0 = v272;
  strcpy((char *)qword_25AC5E8, "Ending_Charge_Station_No_Real_Time");
  byte_25AC617 = 16;
  strcpy(byte_25AC600, "{AvailablePorts}");
  byte_25AC62F = 12;
  strcpy((char *)&qword_25AC618, "{TotalPorts}");
  byte_25AC647 = 14;
  strcpy((char *)&qword_25AC630, "{ManeuverIcon}");
  qword_25AC648 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25AC650 = xmmword_20B9A60;
  strcpy((char *)qword_25AC648, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25AC660 = (uint64_t)operator new(0x20uLL);
  unk_25AC668 = v275;
  strcpy((char *)qword_25AC660, "Walking_Destination_Unnamed");
  qword_25AC678 = (uint64_t)operator new(0x20uLL);
  unk_25AC680 = v277;
  strcpy((char *)qword_25AC678, "TrafficDelay_Label_Title_Sign");
  qword_25AC690 = (uint64_t)operator new(0x20uLL);
  unk_25AC698 = v279;
  strcpy((char *)qword_25AC690, "Special_Guidance_Instruction");
  byte_25AC6BF = 2;
  strcpy((char *)&word_25AC6A8, "CZ");
  byte_25AC6D7 = 3;
  dword_25AC6C0 = 5919811;
  unk_25AC6EF = 3;
  dword_25AC6D8 = 6243649;
  byte_25AC707 = 0;
  byte_25AC71F = 7;
  strcpy((char *)&dword_25AC708, "TRANSIT");
  byte_25AC737 = 7;
  strcpy((char *)&dword_25AC720, "OFFLINE");
  qword_25AC738 = (uint64_t)operator new(0x28uLL);
  unk_25AC740 = v267;
  strcpy((char *)qword_25AC738, "Advisory_Card_French_Climate_Law_Title");
  qword_25AC750 = (uint64_t)operator new(0x30uLL);
  unk_25AC758 = xmmword_20B93C0;
  strcpy((char *)qword_25AC750, "Advisory_Card_French_Climate_Law_Details");
  qword_25AC768 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25AC770 = v273;
  strcpy((char *)qword_25AC768, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25AC780 = (uint64_t)operator new(0x20uLL);
  unk_25AC788 = v279;
  strcpy((char *)qword_25AC780, "{ClimateLawLearnMoreWeblink}");
  byte_25AC7AF = 3;
  dword_25AC798 = 4280902;
  qword_25AC7B0 = (uint64_t)operator new(0x70uLL);
  unk_25AC7B8 = xmmword_20E81E0;
  strcpy((char *)qword_25AC7B0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)int v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25AC7F8 = 0u;
  xmmword_25AC808 = 0u;
  dword_25AC818 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25AC7F8, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25AC7F8, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25AC7F8, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25AC7F8, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  qword_25AC7D0 = 0;
  qword_25AC7D8 = 0;
  qword_25AC7C8 = 0;
  long long v259 = operator new(9uLL);
  *(void *)long long v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_25AC7C8 = (uint64_t)v259;
  qword_25AC7D0 = (uint64_t)(v259 + 9);
  qword_25AC7D8 = (uint64_t)(v259 + 9);
  qword_25AC7E0 = 0;
  qword_25AC7E8 = 0;
  unk_25AC7F0 = 0;
  long long v260 = (char *)operator new(9uLL);
  qword_25AC7E8 = (uint64_t)(v260 + 9);
  unk_25AC7F0 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)long long v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_25AC7E0 = (uint64_t)v260;
  return result;
}

void sub_745CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

uint64_t sub_746004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = a6 + 1;
  int v12 = sub_760668((void *)a1, a3, a6 + 1);
  memcpy(v12 + 4, (const void *)a4, 0x76CuLL);
  if (*(char *)(a4 + 1927) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1936), *(void **)(a4 + 1904), *(void *)(a4 + 1912));
  }
  else
  {
    long long v13 = *(_OWORD *)(a4 + 1904);
    *(void *)(a1 + 1952) = *(void *)(a4 + 1920);
    *(_OWORD *)(a1 + 1936) = v13;
  }
  long long v14 = *(_OWORD *)(a4 + 1928);
  long long v15 = *(_OWORD *)(a4 + 1960);
  *(_OWORD *)(a1 + 1976) = *(_OWORD *)(a4 + 1944);
  *(_OWORD *)(a1 + 1992) = v15;
  *(_OWORD *)(a1 + 1960) = v14;
  long long v16 = *(_OWORD *)(a4 + 1976);
  long long v17 = *(_OWORD *)(a4 + 1992);
  long long v18 = *(_OWORD *)(a4 + 2008);
  *(_OWORD *)(a1 + 2050) = *(_OWORD *)(a4 + 2018);
  *(_OWORD *)(a1 + 2024) = v17;
  *(_OWORD *)(a1 + 2040) = v18;
  *(_OWORD *)(a1 + 2008) = v16;
  *(void *)(a1 + 2072) = *(void *)(a5 + 504);
  *(_DWORD *)(a1 + 2080) = sub_46CF0C((unsigned int *)a5, 0);
  *(_DWORD *)(a1 + 2088) = 0x7FFFFFFF;
  *(void *)(a1 + 2092) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 2104) = 0;
  *(_DWORD *)(a1 + 2112) = 0x7FFFFFFF;
  *(void *)(a1 + 2116) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 2128) = 0;
  char v19 = *(unsigned char *)(a1 + 1961);
  if (v19)
  {
    char v19 = 0;
    if (*(void *)(a5 + 10104) != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a5 + 10112) != 0x7FFFFFFFFFFFFFFFLL) {
      char v19 = *(void *)(a5 + 10144) != *(void *)(a5 + 10152);
    }
  }
  *(unsigned char *)(a1 + 2136) = v19;
  uint64_t v20 = sub_64F444(a5);
  if (*(char *)(v20 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2144), *(void **)v20, *(void *)(v20 + 8));
  }
  else
  {
    long long v21 = *(_OWORD *)v20;
    *(void *)(a1 + 2160) = *(void *)(v20 + 16);
    *(_OWORD *)(a1 + 2144) = v21;
  }
  uint64_t v22 = sub_64F450(a5);
  if (*(char *)(v22 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2168), *(void **)v22, *(void *)(v22 + 8));
  }
  else
  {
    long long v23 = *(_OWORD *)v22;
    *(void *)(a1 + 2184) = *(void *)(v22 + 16);
    *(_OWORD *)(a1 + 2168) = v23;
  }
  uint64_t v24 = sub_64F45C(a5);
  if (*(char *)(v24 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2192), *(void **)v24, *(void *)(v24 + 8));
  }
  else
  {
    long long v25 = *(_OWORD *)v24;
    *(void *)(a1 + 2208) = *(void *)(v24 + 16);
    *(_OWORD *)(a1 + 2192) = v25;
  }
  uint64_t v26 = sub_64F468(a5);
  if (*(char *)(v26 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2216), *(void **)v26, *(void *)(v26 + 8));
  }
  else
  {
    long long v27 = *(_OWORD *)v26;
    *(void *)(a1 + 2232) = *(void *)(v26 + 16);
    *(_OWORD *)(a1 + 2216) = v27;
  }
  uint64_t v28 = sub_64F474(a5);
  if (*(char *)(v28 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2240), *(void **)v28, *(void *)(v28 + 8));
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    *(void *)(a1 + 2256) = *(void *)(v28 + 16);
    *(_OWORD *)(a1 + 2240) = v29;
  }
  *(unsigned char *)(a1 + 2264) = 0;
  *(unsigned char *)(a1 + 2265) = sub_64F234(a5);
  *(unsigned char *)(a1 + 2266) = sub_64F240(a5);
  *(unsigned char *)(a1 + 2267) = sub_64F24C(a5);
  *(unsigned char *)(a1 + 2268) = sub_64F348(a5);
  long long v30 = (long long *)sub_374DF4(a5);
  sub_3B1DC8(a1 + 2272, v30);
  int v31 = (long long *)sub_46CAAC(a5);
  sub_3B1DC8(a1 + 2408, v31);
  BOOL v32 = *(_DWORD *)(a1 + 2408) != 0x7FFFFFFF && sub_40A45C((int *)(a1 + 2416));
  *(unsigned char *)(a1 + 2544) = v32;
  if (!*(unsigned char *)(a5 + 12216) || (uint64_t v33 = *(void *)(a3 + 1456), v34 = *(void *)(a3 + 1464), v33 == v34))
  {
    BOOL v36 = 0;
  }
  else
  {
    uint64_t v35 = v33 + 4;
    do
    {
      BOOL v36 = *(_DWORD *)(v35 - 4) == 1;
      BOOL v37 = *(_DWORD *)(v35 - 4) == 1 || v35 == v34;
      v35 += 4;
    }
    while (!v37);
  }
  *(unsigned char *)(a1 + 2545) = v36;
  strcpy((char *)v50, "GuidanceFeatureRegions");
  BYTE7(v50[1]) = 22;
  long long __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v38 = sub_374CDC(a2, (uint64_t)v50, (uint64_t *)&__p);
  BOOL v39 = sub_746610(a5 + 12184, a3, v38);
  char v40 = (void **)__p;
  if (__p)
  {
    long long v41 = v48;
    int v42 = __p;
    if (v48 != __p)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      int v42 = __p;
    }
    uint64_t v48 = v40;
    operator delete(v42);
  }
  if (SBYTE7(v50[1]) < 0) {
    operator delete(*(void **)&v50[0]);
  }
  *(unsigned char *)(a1 + 2546) = v39;
  sub_4BBDC0(a1 + 2552, a3);
  *(_DWORD *)(a1 + 4088) = -1;
  char v43 = *(unsigned char *)(sub_64EFB8(a5) + 368);
  if (v43) {
    char v43 = sub_64F234(a5) ^ 1;
  }
  *(unsigned char *)(a1 + 4092) = v43;
  *(_DWORD *)(a1 + 4088) = v11;
  if (sub_64F210(a5))
  {
    unint64_t v44 = (uint64_t *)nullsub_1(a3 + 1232);
    uint64_t v45 = sub_64EE80(a5);
    sub_3FB100((uint64_t)v50, v44, v45);
    *(_OWORD *)(a1 + 2088) = v50[0];
    *(void *)(a1 + 2104) = *(void *)&v50[1];
    sub_64EDB4((_DWORD *)a5, (uint64_t)v50);
    *(_OWORD *)(a1 + 2112) = v50[0];
    *(void *)(a1 + 2128) = *(void *)&v50[1];
    *(unsigned char *)(a1 + 2264) = sub_40A45C((int *)(a1 + 2112));
  }
  return a1;
}

void sub_746494(_Unwind_Exception *a1)
{
  sub_74687C(v1);
  _Unwind_Resume(a1);
}

void sub_7464A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_4BCED0(v23);
  sub_45E914(v25);
  sub_45E914(v24);
  if (v22[2263] < 0)
  {
    operator delete(*v26);
    if ((v22[2239] & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v22[2239] & 0x80000000) == 0)
  {
LABEL_3:
    if (v22[2215] < 0) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  operator delete(*a9);
  if (v22[2215] < 0)
  {
LABEL_4:
    operator delete(*a10);
    if ((v22[2191] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  if ((v22[2191] & 0x80000000) == 0)
  {
LABEL_5:
    if (v22[2167] < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*a11);
  if (v22[2167] < 0)
  {
LABEL_6:
    operator delete(*a12);
    if ((v22[1959] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  if ((v22[1959] & 0x80000000) == 0)
  {
LABEL_7:
    sub_74687C((uint64_t)v22);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*a13);
  sub_74687C((uint64_t)v22);
  _Unwind_Resume(a1);
}

BOOL sub_746610(uint64_t a1, uint64_t a2, void *a3)
{
  std::string __dst = (char *)operator new(0x20uLL);
  long long v18 = xmmword_20B8E90;
  long long v22 = xmmword_20B8E90;
  strcpy(__dst, "siri_supported_incident_reports");
  qmemcpy(v17, "incident_reportssiri_supported_i", sizeof(v17));
  size_t v5 = sub_58070(a3, (uint64_t)&__dst);
  unint64_t v6 = v5;
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_3;
    }
    return 0;
  }
  operator delete(__dst);
  if (!v6) {
    return 0;
  }
LABEL_3:
  long long v7 = operator new(0x20uLL);
  std::string __dst = (char *)v7;
  long long v22 = v18;
  _OWORD *v7 = v17[1];
  *(_OWORD *)((char *)v7 + 15) = v17[0];
  *((unsigned char *)v7 + 31) = 0;
  uint64_t v8 = (void *)sub_560F4(a3, (uint64_t)&__dst);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__dst);
    unsigned int v9 = *(_DWORD *)(a2 + 1000) - 1;
    if (v9 <= 0x31) {
      goto LABEL_5;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(a2 + 1000) - 1;
    if (v9 <= 0x31)
    {
LABEL_5:
      unint64_t v10 = *(void *)&aAr_1[8 * v9];
      goto LABEL_11;
    }
  }
  unint64_t v10 = 0x400000000646E75;
LABEL_11:
  __src = (char *)v10;
  unint64_t v13 = HIBYTE(v10);
  uint64_t v14 = v13 ^ 7;
  HIBYTE(v22) = v13 ^ 7;
  memcpy(&__dst, &__src, v13 ^ 7);
  *((unsigned char *)&__dst + v14) = 0;
  if (!sub_58070(v8, (uint64_t)&__dst))
  {
    BOOL v11 = 0;
    goto LABEL_18;
  }
  long long v15 = (void *)sub_560F4(v8, (uint64_t)&__dst);
  __src = (char *)operator new(0x28uLL);
  long long v20 = xmmword_20E12D0;
  strcpy(__src, "mention_siri_in_discoverability_prompt");
  long long v16 = sub_58070(v15, (uint64_t)&__src);
  if (v16)
  {
    BOOL v11 = *((_DWORD *)v16 + 12) == 4;
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v11 = 0;
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  operator delete(__src);
LABEL_18:
  if ((SHIBYTE(v22) & 0x80000000) == 0) {
    return v11;
  }
  operator delete(__dst);
  return v11;
}

void sub_746820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v20 - 33) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v20 - 33) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v20 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t sub_74687C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      int v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_7468F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_746004(a1, a2, a3, a4, a5, a6);
}

void *sub_7468F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(unsigned char *)(a1 + 2136))
  {
    if (*(unsigned char *)(a1 + 2544)) {
      sub_746C34(a1, (uint64_t)v14);
    }
    else {
      sub_746E2C(a1, (uint64_t)v14);
    }
    unint64_t v4 = a2[1];
    if (v4 >= a2[2])
    {
      uint64_t v5 = sub_7572F4(a2, (uint64_t)v14);
    }
    else
    {
      sub_599644(a2[1], (uint64_t)v14);
      uint64_t v5 = v4 + 1080;
      a2[1] = v4 + 1080;
    }
    a2[1] = v5;
    sub_52F1E8((uint64_t)v14);
  }
  if (*(unsigned char *)(a1 + 2544)) {
    sub_747020(a1, (uint64_t)v14);
  }
  else {
    sub_747218(a1, (uint64_t)v14);
  }
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
    uint64_t v7 = sub_7572F4(a2, (uint64_t)v14);
  }
  else
  {
    sub_599644(a2[1], (uint64_t)v14);
    uint64_t v7 = v6 + 1080;
    a2[1] = v6 + 1080;
  }
  a2[1] = v7;
  if (*(unsigned char *)(a1 + 2544))
  {
    uint64_t v8 = *(unsigned char **)(a1 + 2448);
    if (v8 != *(unsigned char **)(a1 + 2456))
    {
      if (*v8) {
        sub_74740C(a1, 0, (uint64_t)v13);
      }
    }
    sub_7476B8(a1, (uint64_t)v13);
  }
  if (*(unsigned char *)(a1 + 2063)) {
    sub_7479D8(a1, (uint64_t)v13);
  }
  else {
    sub_747B14(a1, (uint64_t)v13);
  }
  unint64_t v9 = a2[1];
  if (v9 >= a2[2])
  {
    BOOL v11 = sub_7576B4((void **)a2, (uint64_t)v13);
  }
  else
  {
    sub_7574DC(v9, (uint64_t)v13);
    BOOL v11 = (void *)(v10 + 1080);
  }
  a2[1] = (uint64_t)v11;
  sub_52F1E8((uint64_t)v13);
  return sub_52F1E8((uint64_t)v14);
}

void sub_746B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  sub_52F1E8((uint64_t)&STACK[0x440]);
  sub_591E78(v2);
  _Unwind_Resume(a1);
}

void sub_746BF0(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_746C04(_Unwind_Exception *a1)
{
  sub_52F1E8((uint64_t)&STACK[0x440]);
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_746C20(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_746C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7607E0(&v17, a1, a1 + 2168);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    uint64_t v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_7606A0((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      BOOL v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = (void **)v17;
  if (v17)
  {
    uint64_t v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 19);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_746DC0(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_746DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_746DF0(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_746E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_746E18(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_746E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7606B0(&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    uint64_t v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_7606A0((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      BOOL v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = (void **)v17;
  if (v17)
  {
    uint64_t v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 18);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_746FB4(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_746FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_746FE4(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_746FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_74700C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_747020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7607E4(a1 + 2168, (uint64_t)&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    uint64_t v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_760A9C((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      BOOL v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = (void **)v17;
  if (v17)
  {
    uint64_t v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 20);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_7471AC(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_7471C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_7471DC(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_7471F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_747204(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_747218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7606B4(a1, (uint64_t)&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    uint64_t v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_760A9C((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      BOOL v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  unint64_t v13 = (void **)v17;
  if (v17)
  {
    uint64_t v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 23);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_7473A0(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_7473B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_7473D0(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_7473E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7473F8(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74740C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(unsigned __int8 **)(a1 + 2448);
  sub_760FD4(*v6, *((_DWORD *)v6 + 1) != 0x7FFFFFFF, (uint64_t)&v21);
  sub_7C43EC(a3, &v21, 0);
  uint64_t v7 = v24;
  if (v24)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  unint64_t v9 = __p;
  long long __p = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void **)v21;
  if (v21)
  {
    BOOL v11 = (void **)v22;
    int v12 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      int v12 = v21;
    }
    long long v22 = v10;
    operator delete(v12);
  }
  sub_638638(a3, (long long *)(a1 + 2408));
  if (a2) {
    int v13 = 22;
  }
  else {
    int v13 = 21;
  }
  sub_63841C(a3, v13);
  long long v21 = 0;
  sub_638408(a3, (void *)(a1 + 2072), &v21);
  sub_7C43E4(a3, *(unsigned __int8 *)(a1 + 451));
  int v14 = sub_62CBA8((unsigned int *)(a1 + 32), *v6);
  __int16 v15 = -1;
  char v16 = -1;
  long long v17 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  char v20 = 0;
  sub_524ADC((uint64_t)&v21, (uint64_t)&v14, 0);
  sub_638E7C();
}

void sub_747630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_4D9814((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    sub_52F1E8(v17);
    _Unwind_Resume(a1);
  }
  sub_52F1E8(v17);
  _Unwind_Resume(a1);
}

void sub_7476B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_760D14((uint64_t)&v23);
  sub_7C43EC(a2, &v23, 0);
  unint64_t v4 = v26;
  if (v26)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v23;
  if (v23)
  {
    uint64_t v8 = (void **)v24;
    unint64_t v9 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v23;
    }
    uint64_t v24 = v7;
    operator delete(v9);
  }
  sub_760AAC(*(unsigned __int8 *)(a1 + 2053), (uint64_t)&v23);
  sub_7C481C(a2, (uint64_t)&v23);
  uint64_t v10 = v26;
  if (v26)
  {
    do
    {
      BOOL v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  int v13 = (void **)v23;
  if (v23)
  {
    int v14 = (void **)v24;
    __int16 v15 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      __int16 v15 = v23;
    }
    uint64_t v24 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 24);
  uint64_t v23 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v23);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  sub_638638(a2, (long long *)(a1 + 2408));
  int v16 = *(_DWORD *)(a1 + 1588);
  __int16 v17 = -1;
  char v18 = -1;
  uint64_t v19 = 0;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  char v22 = 0;
  sub_524ADC((uint64_t)&v23, (uint64_t)&v16, 0);
  sub_638E7C();
}

void sub_747934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_4D9814((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    sub_52F1E8(v17);
    _Unwind_Resume(a1);
  }
  sub_52F1E8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_7479D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_761270((uint64_t)&v11);
  sub_7C43EC(a2, &v11, 0);
  unint64_t v4 = v14;
  if (v14)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v11;
  if (v11)
  {
    uint64_t v8 = v12;
    unint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v11;
    }
    int v12 = v7;
    operator delete(v9);
  }
  sub_63841C(a2, 15);
  BOOL v11 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v11);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  return sub_7C43DC(a2, 94);
}

void sub_747AD8(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_747AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_747B00(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_747B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_761260((uint64_t)&v11);
  sub_7C43EC(a2, &v11, 0);
  unint64_t v4 = v14;
  if (v14)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v11;
  if (v11)
  {
    uint64_t v8 = v12;
    unint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v11;
    }
    int v12 = v7;
    operator delete(v9);
  }
  sub_63841C(a2, 15);
  BOOL v11 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v11);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  return sub_7C43DC(a2, 17);
}

void sub_747C14(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_747C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_747C3C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void *sub_747C50@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((unsigned char *)result + 2544))
  {
    sub_747D28((uint64_t)result, v6);
    unint64_t v3 = a2[1];
    if (v3 >= a2[2])
    {
      uint64_t v5 = sub_757810(a2, (uint64_t)v6);
    }
    else
    {
      sub_5AA6B0(v3, (uint64_t)v6);
      uint64_t v5 = v4 + 816;
    }
    a2[1] = v5;
    return sub_52F090(v6);
  }
  return result;
}

void sub_747CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F090((uint64_t *)va);
  sub_591DA0(v2);
  _Unwind_Resume(a1);
}

void sub_747D14(_Unwind_Exception *a1)
{
  sub_591DA0(v1);
  _Unwind_Resume(a1);
}

double sub_747D28@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5A9D64((uint64_t)a2);
  uint64_t v4 = sub_37D0C0(a1 + 3784);
  uint64_t v5 = *(unsigned char **)v4;
  unint64_t v6 = *(unsigned char **)(v4 + 8);
  if (*(unsigned char **)v4 != v6)
  {
    while (*v5 != 10)
    {
      v5 += 12;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
LABEL_20:
    sub_760D14((uint64_t)&v62);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    sub_6370D4(&v66, &v62, 1, &v56);
    sub_638778(a2, (uint64_t)&v66);
    int v16 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = v69;
    if (v69)
    {
      do
      {
        char v18 = (void *)*v17;
        sub_4F4B48((uint64_t)(v17 + 2));
        operator delete(v17);
        uint64_t v17 = v18;
      }
      while (v18);
    }
    uint64_t v19 = __p;
    long long __p = 0;
    if (v19) {
      operator delete(v19);
    }
    uint64_t v20 = (void **)v66;
    if (v66)
    {
      uint64_t v21 = v67;
      char v22 = v66;
      if (v67 != v66)
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*(v21 - 3));
          }
          v21 -= 3;
        }
        while (v21 != v20);
        char v22 = v66;
      }
      size_t v67 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v57;
    if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = v65;
    if (v65)
    {
      do
      {
        long long v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        uint64_t v24 = v25;
      }
      while (v25);
    }
    uint64_t v26 = v64;
    char v64 = 0;
    if (v26) {
      operator delete(v26);
    }
    long long v27 = (void **)v62;
    if (v62)
    {
      uint64_t v28 = v63;
      long long v29 = v62;
      if (v63 == v62) {
        goto LABEL_94;
      }
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
LABEL_93:
      long long v29 = v62;
LABEL_94:
      long long v63 = v27;
      operator delete(v29);
      goto LABEL_95;
    }
    goto LABEL_95;
  }
LABEL_4:
  uint64_t v7 = *(unsigned char **)(a1 + 2448);
  uint64_t v8 = *(unsigned char **)(a1 + 2456);
  if (v7 != v8)
  {
    while (*v7 == 10)
    {
      v7 += 12;
      if (v7 == v8) {
        goto LABEL_7;
      }
    }
    goto LABEL_20;
  }
LABEL_7:
  sub_760E74((uint64_t)&v62);
  uint64_t v60 = 0;
  std::string::size_type v61 = 0;
  sub_6370D4(&v66, &v62, 1, &v60);
  sub_638778(a2, (uint64_t)&v66);
  unint64_t v9 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v69;
  if (v69)
  {
    do
    {
      BOOL v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  int v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  int v13 = (void **)v66;
  if (v66)
  {
    int v14 = v67;
    __int16 v15 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      __int16 v15 = v66;
    }
    size_t v67 = v13;
    operator delete(v15);
  }
  long long v30 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  int v31 = v65;
  if (v65)
  {
    do
    {
      BOOL v32 = (void *)*v31;
      sub_4F4B48((uint64_t)(v31 + 2));
      operator delete(v31);
      int v31 = v32;
    }
    while (v32);
  }
  uint64_t v33 = v64;
  char v64 = 0;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v34 = (void **)v62;
  if (v62)
  {
    uint64_t v35 = v63;
    BOOL v36 = v62;
    if (v63 != v62)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      BOOL v36 = v62;
    }
    long long v63 = v34;
    operator delete(v36);
  }
  LODWORD(v66) = 19;
  sub_6387E4((uint64_t)a2, (int *)&v66);
  sub_760D14((uint64_t)&v62);
  uint64_t v58 = 0;
  int v59 = 0;
  sub_6370D4(&v66, &v62, 1, &v58);
  sub_638778(a2, (uint64_t)&v66);
  BOOL v37 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  uint64_t v38 = v69;
  if (v69)
  {
    do
    {
      BOOL v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      uint64_t v38 = v39;
    }
    while (v39);
  }
  char v40 = __p;
  long long __p = 0;
  if (v40) {
    operator delete(v40);
  }
  long long v41 = (void **)v66;
  if (v66)
  {
    int v42 = v67;
    char v43 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      char v43 = v66;
    }
    size_t v67 = v41;
    operator delete(v43);
  }
  unint64_t v44 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  uint64_t v45 = v65;
  if (v65)
  {
    do
    {
      int v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      uint64_t v45 = v46;
    }
    while (v46);
  }
  uint64_t v47 = v64;
  char v64 = 0;
  if (v47) {
    operator delete(v47);
  }
  long long v27 = (void **)v62;
  if (v62)
  {
    uint64_t v48 = v63;
    long long v29 = v62;
    if (v63 == v62) {
      goto LABEL_94;
    }
    do
    {
      if (*((char *)v48 - 1) < 0) {
        operator delete(*(v48 - 3));
      }
      v48 -= 3;
    }
    while (v48 != v27);
    goto LABEL_93;
  }
LABEL_95:
  sub_760AAC(*(unsigned __int8 *)(a1 + 2053), (uint64_t)&v66);
  sub_638E00((uint64_t)a2, (uint64_t)&v66);
  uint64_t v49 = v69;
  if (v69)
  {
    do
    {
      long long v50 = (void *)*v49;
      sub_4F4B48((uint64_t)(v49 + 2));
      operator delete(v49);
      uint64_t v49 = v50;
    }
    while (v50);
  }
  int v51 = __p;
  long long __p = 0;
  if (v51) {
    operator delete(v51);
  }
  size_t v52 = (void **)v66;
  if (v66)
  {
    int v53 = v67;
    size_t v54 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v53 - 1) < 0) {
          operator delete(*(v53 - 3));
        }
        v53 -= 3;
      }
      while (v53 != v52);
      size_t v54 = v66;
    }
    size_t v67 = v52;
    operator delete(v54);
  }
  sub_63841C((uint64_t)a2, 83);
  *(void *)&double result = sub_638638((uint64_t)a2, (long long *)(a1 + 2408)).n128_u64[0];
  return result;
}

void sub_7483A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void *);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  sub_4F31D0((void **)va2);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_74844C(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_748460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_4D4880((void **)va);
  sub_52F090(v16);
  _Unwind_Resume(a1);
}

void sub_74847C(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_748490(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7484A4(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[141].n128_u8[8])
  {
    if (sub_62D404((uint64_t)&a1[159].n128_i64[1]) && a1[247].n128_u8[11])
    {
      sub_74B954((uint64_t)a1, (uint64_t)v110);
    }
    else if (a1[141].n128_u8[9])
    {
      sub_74BBF4(a1, (uint64_t)v110);
    }
    else
    {
      sub_74B738(a1, (uint64_t)v110);
    }
  }
  else
  {
    sub_748E0C((uint64_t)a1, (uint64_t)v110);
  }
  unint64_t v4 = a2[1];
  if (v4 >= a2[2])
  {
    uint64_t v5 = sub_75796C(a2, (uint64_t)v110);
  }
  else
  {
    sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v110);
    uint64_t v5 = v4 + 408;
    a2[1] = v4 + 408;
  }
  a2[1] = v5;
  if (a1[133].n128_u8[8])
  {
    if (a1[159].n128_u8[0]) {
      sub_7490E0((uint64_t)a1, (uint64_t)v97);
    }
    else {
      sub_749258((uint64_t)a1, (uint64_t)v97);
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2])
    {
      uint64_t v7 = sub_75796C(a2, (uint64_t)v97);
    }
    else
    {
      sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v97);
      uint64_t v7 = v6 + 408;
      a2[1] = v6 + 408;
    }
    a2[1] = v7;
    if (__p)
    {
      int v109 = __p;
      operator delete(__p);
    }
    if (v106)
    {
      int v107 = v106;
      operator delete(v106);
    }
    uint64_t v8 = (void **)v104;
    if (v104)
    {
      uint64_t v9 = v105;
      uint64_t v10 = v104;
      if (v105 != v104)
      {
        do
          uint64_t v9 = sub_4F31D0(v9 - 13);
        while (v9 != v8);
        uint64_t v10 = v104;
      }
      uint64_t v105 = v8;
      operator delete(v10);
    }
    if (v102)
    {
      uint64_t v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      uint64_t v101 = v100;
      operator delete(v100);
    }
    BOOL v11 = v98;
    if (v98)
    {
      uint64_t v12 = (uint64_t)v99;
      uint64_t v13 = v98;
      if (v99 != v98)
      {
        do
          uint64_t v12 = sub_4D4B58(v12 - 160);
        while ((void *)v12 != v11);
        uint64_t v13 = v98;
      }
      uint64_t v99 = v11;
      operator delete(v13);
    }
  }
  if (a1[159].n128_u8[0]) {
    sub_7493CC((uint64_t)a1, (uint64_t)v97);
  }
  else {
    sub_749540((uint64_t)a1, (uint64_t)v97);
  }
  unint64_t v14 = a2[1];
  if (v14 >= a2[2])
  {
    uint64_t v15 = sub_75796C(a2, (uint64_t)v97);
  }
  else
  {
    sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v97);
    uint64_t v15 = v14 + 408;
    a2[1] = v14 + 408;
  }
  a2[1] = v15;
  if (a1[159].n128_u8[0])
  {
    sub_7496B4((uint64_t)a1, (uint64_t)&v64);
    unint64_t v16 = a2[1];
    if (v16 >= a2[2])
    {
      uint64_t v26 = sub_757E08(a2, (uint64_t)&v64);
      long long v27 = v92;
      a2[1] = v26;
      if (v27)
      {
        uint64_t v93 = v27;
        operator delete(v27);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v16 = v64;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)v65;
      *(void *)(v16 + 24) = v66;
      v65[0] = 0;
      v65[1] = 0;
      long long v17 = v69;
      long long v18 = v67;
      *(_OWORD *)(v16 + 48) = v68;
      *(_OWORD *)(v16 + 64) = v17;
      *(_OWORD *)(v16 + 32) = v18;
      uint64_t v19 = v72;
      long long v20 = v71;
      *(_OWORD *)(v16 + 80) = v70;
      *(_OWORD *)(v16 + 96) = v20;
      *(void *)(v16 + 112) = v19;
      *(void *)(v16 + 120) = 0;
      *(void *)(v16 + 128) = 0;
      *(void *)(v16 + 136) = 0;
      *(_OWORD *)(v16 + 120) = *(_OWORD *)v73;
      *(void *)(v16 + 136) = v74;
      *(void *)(v16 + 144) = 0;
      uint64_t v66 = 0;
      v73[0] = 0;
      v73[1] = 0;
      *(void *)(v16 + 152) = 0;
      *(void *)(v16 + 160) = 0;
      *(_OWORD *)(v16 + 144) = *(_OWORD *)v75;
      *(void *)(v16 + 160) = v76;
      v75[1] = 0;
      uint64_t v76 = 0;
      uint64_t v74 = 0;
      v75[0] = 0;
      *(_OWORD *)(v16 + 168) = v77;
      *(_DWORD *)(v16 + 192) = v79;
      if (v79 <= 1) {
        *(void *)(v16 + 184) = v78;
      }
      *(_OWORD *)(v16 + 200) = v80;
      long long v21 = v81;
      uint64_t v22 = v83;
      *(_OWORD *)(v16 + 232) = v82;
      *(_OWORD *)(v16 + 216) = v21;
      *(void *)(v16 + 248) = v22;
      *(void *)(v16 + 256) = 0;
      *(void *)(v16 + 264) = 0;
      *(void *)(v16 + 272) = 0;
      *(_OWORD *)(v16 + 256) = *(_OWORD *)v84;
      *(void *)(v16 + 272) = v85;
      v84[0] = 0;
      v84[1] = 0;
      *(unsigned char *)(v16 + 280) = v86;
      *(void *)(v16 + 288) = 0;
      *(void *)(v16 + 296) = 0;
      *(void *)(v16 + 304) = 0;
      *(_OWORD *)(v16 + 288) = *(_OWORD *)v87;
      *(void *)(v16 + 304) = v88;
      uint64_t v85 = 0;
      v87[0] = 0;
      v87[1] = 0;
      uint64_t v88 = 0;
      long long v23 = *(_OWORD *)v89;
      *(_OWORD *)(v16 + 321) = *(_OWORD *)&v89[9];
      *(_OWORD *)(v16 + 312) = v23;
      long long v24 = v90;
      *(_DWORD *)(v16 + 356) = v91;
      *(_OWORD *)(v16 + 340) = v24;
      *(void *)(v16 + 360) = 0;
      *(void *)(v16 + 368) = 0;
      *(void *)(v16 + 376) = 0;
      *(void *)(v16 + 360) = v92;
      *(void *)(v16 + 368) = v93;
      *(void *)(v16 + 376) = v94;
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      long long v25 = v95;
      *(_DWORD *)(v16 + 400) = v96;
      *(_OWORD *)(v16 + 384) = v25;
      a2[1] = v16 + 408;
    }
    if (v87[0])
    {
      v87[1] = v87[0];
      operator delete(v87[0]);
    }
    uint64_t v28 = (void **)v84[0];
    if (v84[0])
    {
      long long v29 = (void **)v84[1];
      long long v30 = v84[0];
      if (v84[1] != v84[0])
      {
        do
          long long v29 = sub_4F31D0(v29 - 13);
        while (v29 != v28);
        long long v30 = v84[0];
      }
      v84[1] = v28;
      operator delete(v30);
    }
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
    if (v73[0])
    {
      v73[1] = v73[0];
      operator delete(v73[0]);
    }
    int v31 = v65[0];
    if (v65[0])
    {
      BOOL v32 = v65[1];
      uint64_t v33 = v65[0];
      if (v65[1] != v65[0])
      {
        do
          BOOL v32 = (void *)sub_4D4B58((uint64_t)v32 - 160);
        while (v32 != v31);
        uint64_t v33 = v65[0];
      }
      v65[1] = v31;
      operator delete(v33);
    }
  }
  if (a1[128].n128_u8[15]) {
    sub_749838((uint64_t)a1, (uint64_t)&v64);
  }
  else {
    sub_7499AC((uint64_t)a1, (uint64_t)&v64);
  }
  unint64_t v34 = a2[1];
  if (v34 >= a2[2])
  {
    uint64_t v44 = sub_757E08(a2, (uint64_t)&v64);
    uint64_t v45 = v92;
    a2[1] = v44;
    if (v45)
    {
      uint64_t v93 = v45;
      operator delete(v45);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v34 = v64;
    *(void *)(v34 + 16) = 0;
    *(void *)(v34 + 24) = 0;
    *(void *)(v34 + 8) = 0;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)v65;
    *(void *)(v34 + 24) = v66;
    v65[0] = 0;
    v65[1] = 0;
    long long v35 = v69;
    long long v36 = v67;
    *(_OWORD *)(v34 + 48) = v68;
    *(_OWORD *)(v34 + 64) = v35;
    *(_OWORD *)(v34 + 32) = v36;
    uint64_t v37 = v72;
    long long v38 = v71;
    *(_OWORD *)(v34 + 80) = v70;
    *(_OWORD *)(v34 + 96) = v38;
    *(void *)(v34 + 112) = v37;
    *(void *)(v34 + 120) = 0;
    *(void *)(v34 + 128) = 0;
    *(void *)(v34 + 136) = 0;
    *(_OWORD *)(v34 + 120) = *(_OWORD *)v73;
    *(void *)(v34 + 136) = v74;
    *(void *)(v34 + 144) = 0;
    uint64_t v66 = 0;
    v73[0] = 0;
    v73[1] = 0;
    *(void *)(v34 + 152) = 0;
    *(void *)(v34 + 160) = 0;
    *(_OWORD *)(v34 + 144) = *(_OWORD *)v75;
    *(void *)(v34 + 160) = v76;
    v75[1] = 0;
    uint64_t v76 = 0;
    uint64_t v74 = 0;
    v75[0] = 0;
    *(_OWORD *)(v34 + 168) = v77;
    *(_DWORD *)(v34 + 192) = v79;
    if (v79 <= 1) {
      *(void *)(v34 + 184) = v78;
    }
    *(_OWORD *)(v34 + 200) = v80;
    long long v39 = v81;
    uint64_t v40 = v83;
    *(_OWORD *)(v34 + 232) = v82;
    *(_OWORD *)(v34 + 216) = v39;
    *(void *)(v34 + 248) = v40;
    *(void *)(v34 + 256) = 0;
    *(void *)(v34 + 264) = 0;
    *(void *)(v34 + 272) = 0;
    *(_OWORD *)(v34 + 256) = *(_OWORD *)v84;
    *(void *)(v34 + 272) = v85;
    v84[0] = 0;
    v84[1] = 0;
    *(unsigned char *)(v34 + 280) = v86;
    *(void *)(v34 + 288) = 0;
    *(void *)(v34 + 296) = 0;
    *(void *)(v34 + 304) = 0;
    *(_OWORD *)(v34 + 288) = *(_OWORD *)v87;
    *(void *)(v34 + 304) = v88;
    uint64_t v85 = 0;
    v87[0] = 0;
    v87[1] = 0;
    uint64_t v88 = 0;
    long long v41 = *(_OWORD *)v89;
    *(_OWORD *)(v34 + 321) = *(_OWORD *)&v89[9];
    *(_OWORD *)(v34 + 312) = v41;
    long long v42 = v90;
    *(_DWORD *)(v34 + 356) = v91;
    *(_OWORD *)(v34 + 340) = v42;
    *(void *)(v34 + 360) = 0;
    *(void *)(v34 + 368) = 0;
    *(void *)(v34 + 376) = 0;
    *(void *)(v34 + 360) = v92;
    *(void *)(v34 + 368) = v93;
    *(void *)(v34 + 376) = v94;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    long long v43 = v95;
    *(_DWORD *)(v34 + 400) = v96;
    *(_OWORD *)(v34 + 384) = v43;
    a2[1] = v34 + 408;
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  int v46 = (void **)v84[0];
  if (v84[0])
  {
    uint64_t v47 = (void **)v84[1];
    uint64_t v48 = v84[0];
    if (v84[1] != v84[0])
    {
      do
        uint64_t v47 = sub_4F31D0(v47 - 13);
      while (v47 != v46);
      uint64_t v48 = v84[0];
    }
    v84[1] = v46;
    operator delete(v48);
  }
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  uint64_t v49 = v65[0];
  if (v65[0])
  {
    long long v50 = v65[1];
    int v51 = v65[0];
    if (v65[1] != v65[0])
    {
      do
        long long v50 = (void *)sub_4D4B58((uint64_t)v50 - 160);
      while (v50 != v49);
      int v51 = v65[0];
    }
    v65[1] = v49;
    operator delete(v51);
  }
  if (__p)
  {
    int v109 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    int v107 = v106;
    operator delete(v106);
  }
  size_t v52 = (void **)v104;
  if (v104)
  {
    int v53 = v105;
    size_t v54 = v104;
    if (v105 != v104)
    {
      do
        int v53 = sub_4F31D0(v53 - 13);
      while (v53 != v52);
      size_t v54 = v104;
    }
    uint64_t v105 = v52;
    operator delete(v54);
  }
  if (v102)
  {
    uint64_t v103 = v102;
    operator delete(v102);
  }
  if (v100)
  {
    uint64_t v101 = v100;
    operator delete(v100);
  }
  unint64_t v55 = v98;
  if (v98)
  {
    uint64_t v56 = (uint64_t)v99;
    uint64_t v57 = v98;
    if (v99 != v98)
    {
      do
        uint64_t v56 = sub_4D4B58(v56 - 160);
      while ((void *)v56 != v55);
      uint64_t v57 = v98;
    }
    uint64_t v99 = v55;
    operator delete(v57);
  }
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  if (v119)
  {
    unint64_t v120 = v119;
    operator delete(v119);
  }
  uint64_t v58 = (void **)v117;
  if (v117)
  {
    int v59 = v118;
    uint64_t v60 = v117;
    if (v118 != v117)
    {
      do
        int v59 = sub_4F31D0(v59 - 13);
      while (v59 != v58);
      uint64_t v60 = v117;
    }
    int v118 = v58;
    operator delete(v60);
  }
  if (v115)
  {
    long long v116 = v115;
    operator delete(v115);
  }
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
  std::string::size_type v61 = v111;
  if (v111)
  {
    uint64_t v62 = (uint64_t)v112;
    long long v63 = v111;
    if (v112 != v111)
    {
      do
        uint64_t v62 = sub_4D4B58(v62 - 160);
      while ((void *)v62 != v61);
      long long v63 = v111;
    }
    int v112 = v61;
    operator delete(v63);
  }
}

void sub_748D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_639B78(&a9);
  sub_639B78(&a60);
  sub_639B78(&STACK[0x330]);
  sub_591DFC(v60);
  _Unwind_Resume(a1);
}

void sub_748DF8(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_748E0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 2552;
  if (sub_62D3D4((unsigned char *)(a1 + 2552)))
  {
    int v5 = *(unsigned __int8 *)(a1 + 4074);
    BOOL v6 = *(_DWORD *)(a1 + 4088) == 1;
    int v7 = *(unsigned __int8 *)(a1 + 2266);
    int v8 = *(unsigned __int8 *)(a1 + 2265);
    int v9 = *(unsigned __int8 *)(a1 + 2268);
    BOOL v10 = sub_62D444(v4);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 2545);
    unint64_t v12 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
    int v13 = 0x1000000;
    if (!v10 || !v6) {
      int v13 = 0;
    }
    LODWORD(v35) = v13 | (v7 << 16) | (v8 << 8) | v9;
    WORD2(v35) = (v12 | (v11 << 32)) >> 32;
    sub_762C0C(a1, v5, &v35, (uint64_t)&v36);
  }
  else
  {
    BOOL v14 = *(_DWORD *)(a1 + 4088) == 1;
    int v15 = *(unsigned __int8 *)(a1 + 2266);
    int v16 = *(unsigned __int8 *)(a1 + 2265);
    int v17 = *(unsigned __int8 *)(a1 + 2268);
    BOOL v18 = sub_62D444(v4);
    uint64_t v19 = *(unsigned __int8 *)(a1 + 2545);
    unint64_t v20 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
    int v21 = 0x1000000;
    if (!v18 || !v14) {
      int v21 = 0;
    }
    LODWORD(v35) = v21 | (v15 << 16) | (v16 << 8) | v17;
    WORD2(v35) = (v20 | (v19 << 32)) >> 32;
    sub_761950((void *)a1, (uint64_t)&v35, (uint64_t)&v36);
  }
  sub_639258(a2, (uint64_t)&v36, 0, 0, 1);
  if (sub_62D404(v4) && *(unsigned char *)(a1 + 3963))
  {
    int v22 = *(_DWORD *)(a1 + 4088);
    BOOL v23 = sub_62D444(v4);
    if (v22 == 1 && v23)
    {
      int v25 = 61;
    }
    else
    {
      if (*(unsigned char *)(a1 + 2266)) {
        int v33 = 54;
      }
      else {
        int v33 = 53;
      }
      if (*(unsigned char *)(a1 + 2266)) {
        int v34 = 55;
      }
      else {
        int v34 = 56;
      }
      if (*(unsigned char *)(a1 + 2265)) {
        int v25 = v34;
      }
      else {
        int v25 = v33;
      }
    }
  }
  else
  {
    int v25 = 53;
  }
  sub_63841C(a2, v25);
  uint64_t v35 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v35);
  sub_6396EC(a2, *(unsigned char *)(a1 + 2545));
  sub_6389F0(a2, *(_DWORD *)(a1 + 4088));
  uint64_t v26 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  long long v27 = v39;
  if (v39)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      long long v27 = v28;
    }
    while (v28);
  }
  long long v29 = __p;
  long long __p = 0;
  if (v29) {
    operator delete(v29);
  }
  long long v30 = (void **)v36;
  if (v36)
  {
    int v31 = v37;
    BOOL v32 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v31 - 1) < 0) {
          operator delete(*(v31 - 3));
        }
        v31 -= 3;
      }
      while (v31 != v30);
      BOOL v32 = v36;
    }
    uint64_t v37 = v30;
    operator delete(v32);
  }
}

void sub_7490AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7490E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765DCC(a1 + 2168, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 65);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_74921C(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749230(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_749258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765908(a1, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 64);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_749390(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_7493A4(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_7493B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7493CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7662B4((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 66);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_749504(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749518(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74952C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_749540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766114(a1, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 67);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_749678(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74968C(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_7496A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

double sub_7496B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7663E4(*(unsigned __int8 *)(a1 + 2054), (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 68);
  unint64_t v12 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v12);
  *(void *)&double result = sub_638638(a2, (long long *)(a1 + 2408)).n128_u64[0];
  return result;
}

void sub_7497FC(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_749824(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_749838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766748((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 69);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_749970(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749984(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7499AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766618((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 69);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_749AE4(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749AF8(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_749B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_749B20(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = 2267;
  if (a2) {
    uint64_t v6 = 2268;
  }
  if (*(unsigned char *)(a1 + v6))
  {
    sub_74A700(a1, a2, a3);
  }
  else
  {
    uint64_t v137 = 0;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v134 = 0u;
    int v138 = 1065353216;
    char v139 = 1;
    sub_5A9D64((uint64_t)a3);
    if ((a2 & 1) != 0 || !*(unsigned char *)(a1 + 4092))
    {
      sub_63553C((uint64_t)&xmmword_25AEE00, (uint64_t)v121);
      uint64_t v10 = v134;
      if ((void)v134)
      {
        uint64_t v11 = *((void *)&v134 + 1);
        unint64_t v12 = (void *)v134;
        if (*((void *)&v134 + 1) != (void)v134)
        {
          do
          {
            if (*(char *)(v11 - 1) < 0) {
              operator delete(*(void **)(v11 - 24));
            }
            v11 -= 24;
          }
          while (v11 != v10);
          unint64_t v12 = (void *)v134;
        }
        *((void *)&v134 + 1) = v10;
        operator delete(v12);
      }
      long long v134 = *(_OWORD *)v121;
      *(void *)&long long v135 = v122;
      v121[1] = 0;
      uint64_t v122 = 0;
      v121[0] = 0;
      if (v137)
      {
        int v13 = (void *)*((void *)&v136 + 1);
        if (*((void *)&v136 + 1))
        {
          do
          {
            BOOL v14 = (void *)*v13;
            sub_4F4B48((uint64_t)(v13 + 2));
            operator delete(v13);
            int v13 = v14;
          }
          while (v14);
        }
        *((void *)&v136 + 1) = 0;
        uint64_t v15 = v136;
        if ((void)v136)
        {
          uint64_t v16 = 0;
          do
            *(void *)(*((void *)&v135 + 1) + 8 * v16++) = 0;
          while (v15 != v16);
        }
        uint64_t v137 = 0;
      }
      int v17 = __p;
      long long __p = 0;
      BOOL v18 = (void *)*((void *)&v135 + 1);
      *((void *)&v135 + 1) = v17;
      if (v18) {
        operator delete(v18);
      }
      unint64_t v19 = v124;
      unint64_t v20 = v125;
      unint64_t v124 = 0;
      *((void *)&v136 + 1) = v125;
      uint64_t v137 = v126;
      int v138 = v127;
      *(void *)&long long v136 = v19;
      if (v126)
      {
        unint64_t v21 = v125[1];
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v21 >= v19) {
            v21 %= v19;
          }
        }
        else
        {
          v21 &= v19 - 1;
        }
        *(void *)(*((void *)&v135 + 1) + 8 * v21) = (char *)&v136 + 8;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        char v139 = v128;
      }
      else
      {
        char v139 = v128;
        if (v125)
        {
          do
          {
            int v22 = (void *)*v20;
            sub_4F4B48((uint64_t)(v20 + 2));
            operator delete(v20);
            unint64_t v20 = v22;
          }
          while (v22);
        }
      }
      BOOL v23 = __p;
      long long __p = 0;
      if (v23) {
        operator delete(v23);
      }
      long long v24 = (void **)v121[0];
      if (v121[0])
      {
        int v25 = (void **)v121[1];
        uint64_t v26 = v121[0];
        if (v121[1] != v121[0])
        {
          do
          {
            if (*((char *)v25 - 1) < 0) {
              operator delete(*(v25 - 3));
            }
            v25 -= 3;
          }
          while (v25 != v24);
          uint64_t v26 = v121[0];
        }
        v121[1] = v24;
        operator delete(v26);
      }
      sub_63841C((uint64_t)a3, 26);
      int v27 = 0;
    }
    else
    {
      sub_6352AC((uint64_t)v121, (uint64_t)&qword_25AEAB8);
      uint64_t v7 = v134;
      if ((void)v134)
      {
        uint64_t v8 = *((void *)&v134 + 1);
        int v9 = (void *)v134;
        if (*((void *)&v134 + 1) != (void)v134)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0) {
              operator delete(*(void **)(v8 - 24));
            }
            v8 -= 24;
          }
          while (v8 != v7);
          int v9 = (void *)v134;
        }
        *((void *)&v134 + 1) = v7;
        operator delete(v9);
      }
      long long v134 = *(_OWORD *)v121;
      *(void *)&long long v135 = v122;
      v121[1] = 0;
      uint64_t v122 = 0;
      v121[0] = 0;
      if (v137)
      {
        uint64_t v28 = (void *)*((void *)&v136 + 1);
        if (*((void *)&v136 + 1))
        {
          do
          {
            long long v29 = (void *)*v28;
            sub_4F4B48((uint64_t)(v28 + 2));
            operator delete(v28);
            uint64_t v28 = v29;
          }
          while (v29);
        }
        *((void *)&v136 + 1) = 0;
        uint64_t v30 = v136;
        if ((void)v136)
        {
          uint64_t v31 = 0;
          do
            *(void *)(*((void *)&v135 + 1) + 8 * v31++) = 0;
          while (v30 != v31);
        }
        uint64_t v137 = 0;
      }
      BOOL v32 = __p;
      long long __p = 0;
      int v33 = (void *)*((void *)&v135 + 1);
      *((void *)&v135 + 1) = v32;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v34 = v124;
      uint64_t v35 = v125;
      unint64_t v124 = 0;
      *((void *)&v136 + 1) = v125;
      uint64_t v137 = v126;
      int v138 = v127;
      *(void *)&long long v136 = v34;
      if (v126)
      {
        unint64_t v36 = v125[1];
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v36 >= v34) {
            v36 %= v34;
          }
        }
        else
        {
          v36 &= v34 - 1;
        }
        *(void *)(*((void *)&v135 + 1) + 8 * v36) = (char *)&v136 + 8;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        char v139 = v128;
      }
      else
      {
        char v139 = v128;
        if (v125)
        {
          do
          {
            uint64_t v37 = (void *)*v35;
            sub_4F4B48((uint64_t)(v35 + 2));
            operator delete(v35);
            uint64_t v35 = v37;
          }
          while (v37);
        }
      }
      long long v38 = __p;
      long long __p = 0;
      if (v38) {
        operator delete(v38);
      }
      long long v39 = (void **)v121[0];
      if (v121[0])
      {
        uint64_t v40 = (void **)v121[1];
        long long v41 = v121[0];
        if (v121[1] != v121[0])
        {
          do
          {
            if (*((char *)v40 - 1) < 0) {
              operator delete(*(v40 - 3));
            }
            v40 -= 3;
          }
          while (v40 != v39);
          long long v41 = v121[0];
        }
        v121[1] = v39;
        operator delete(v41);
      }
      sub_63841C((uint64_t)a3, 28);
      int v27 = 1;
    }
    sub_638E00((uint64_t)a3, (uint64_t)&v134);
    sub_6389F0((uint64_t)a3, *(_DWORD *)(a1 + 4088) - (a2 ^ 1));
    uint64_t v42 = 2265;
    if (a2)
    {
      uint64_t v42 = 2266;
      int v43 = 3;
    }
    else
    {
      int v43 = 1;
    }
    if (*(unsigned char *)(a1 + v42)) {
      int v44 = 2;
    }
    else {
      int v44 = v43;
    }
    sub_6389F8((uint64_t)a3, v44);
    sub_63553C((uint64_t)&xmmword_25AEE00, (uint64_t)&v130);
    uint64_t v119 = 0;
    unint64_t v120 = 0;
    sub_6370D4(v121, &v130, 1, &v119);
    uint64_t v45 = v120;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    sub_638778(a3, (uint64_t)v121);
    if ((v27 | a2) == 1 && *(unsigned char *)(a1 + 2264))
    {
      LODWORD(v110) = 19;
      sub_6387E4((uint64_t)a3, (int *)&v110);
      sub_63553C((uint64_t)&dword_25AE878, (uint64_t)&v115);
      uint64_t v108 = 0;
      int v109 = 0;
      sub_6370D4(&v110, &v115, 1, &v108);
      int v46 = v109;
      if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      sub_638778(a3, (uint64_t)&v110);
      LODWORD(v99) = 18;
      sub_6387E4((uint64_t)a3, (int *)&v99);
      uint64_t v47 = 1116;
      if (v27) {
        uint64_t v47 = 1128;
      }
      sub_6352AC((uint64_t)&v104, (uint64_t)&word_25AC820[v47]);
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      sub_6370D4(&v99, &v104, 1, &v97);
      uint64_t v48 = v98;
      if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      sub_638778(a3, (uint64_t)&v99);
      uint64_t v49 = 2272;
      if (a2) {
        uint64_t v49 = 2408;
      }
      sub_638638((uint64_t)a3, (long long *)(a1 + v49));
      uint64_t v50 = 2112;
      if (v27) {
        uint64_t v50 = 2088;
      }
      __n128 v51 = sub_63874C((uint64_t)a3, (__n128 *)(a1 + v50));
      size_t v52 = v103;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v52->__on_zero_shared)(v52, v51);
        std::__shared_weak_count::__release_weak(v52);
      }
      int v53 = v102;
      if (v102)
      {
        do
        {
          size_t v54 = (void *)*v53;
          sub_4F4B48((uint64_t)(v53 + 2));
          operator delete(v53);
          int v53 = v54;
        }
        while (v54);
      }
      unint64_t v55 = v101;
      uint64_t v101 = 0;
      if (v55) {
        operator delete(v55);
      }
      uint64_t v56 = (void **)v99;
      if (v99)
      {
        uint64_t v57 = v100;
        uint64_t v58 = v99;
        if (v100 != v99)
        {
          do
          {
            if (*((char *)v57 - 1) < 0) {
              operator delete(*(v57 - 3));
            }
            v57 -= 3;
          }
          while (v57 != v56);
          uint64_t v58 = v99;
        }
        uint64_t v100 = v56;
        operator delete(v58);
      }
      int v59 = v107;
      if (v107)
      {
        do
        {
          uint64_t v60 = (void *)*v59;
          sub_4F4B48((uint64_t)(v59 + 2));
          operator delete(v59);
          int v59 = v60;
        }
        while (v60);
      }
      std::string::size_type v61 = v106;
      uint64_t v106 = 0;
      if (v61) {
        operator delete(v61);
      }
      uint64_t v62 = (void **)v104;
      if (v104)
      {
        long long v63 = v105;
        int v64 = v104;
        if (v105 != v104)
        {
          do
          {
            if (*((char *)v63 - 1) < 0) {
              operator delete(*(v63 - 3));
            }
            v63 -= 3;
          }
          while (v63 != v62);
          int v64 = v104;
        }
        uint64_t v105 = v62;
        operator delete(v64);
      }
      long long v65 = v114;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v65->__on_zero_shared)(v65, v51);
        std::__shared_weak_count::__release_weak(v65);
      }
      uint64_t v66 = v113;
      if (v113)
      {
        do
        {
          long long v67 = (void *)*v66;
          sub_4F4B48((uint64_t)(v66 + 2));
          operator delete(v66);
          uint64_t v66 = v67;
        }
        while (v67);
      }
      long long v68 = v112;
      int v112 = 0;
      if (v68) {
        operator delete(v68);
      }
      long long v69 = (void **)v110;
      if (v110)
      {
        long long v70 = v111;
        long long v71 = v110;
        if (v111 != v110)
        {
          do
          {
            if (*((char *)v70 - 1) < 0) {
              operator delete(*(v70 - 3));
            }
            v70 -= 3;
          }
          while (v70 != v69);
          long long v71 = v110;
        }
        unint64_t v111 = v69;
        operator delete(v71);
      }
      uint64_t v72 = v118;
      if (v118)
      {
        do
        {
          int v73 = (void *)*v72;
          sub_4F4B48((uint64_t)(v72 + 2));
          operator delete(v72);
          uint64_t v72 = v73;
        }
        while (v73);
      }
      uint64_t v74 = v117;
      long long v117 = 0;
      if (v74) {
        operator delete(v74);
      }
      uint64_t v75 = (void **)v115;
      if (v115)
      {
        uint64_t v76 = v116;
        long long v77 = v115;
        if (v116 != v115)
        {
          do
          {
            if (*((char *)v76 - 1) < 0) {
              operator delete(*(v76 - 3));
            }
            v76 -= 3;
          }
          while (v76 != v75);
          long long v77 = v115;
        }
        long long v116 = v75;
        operator delete(v77);
      }
    }
    uint64_t v78 = v129;
    if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    unsigned int v79 = v125;
    if (v125)
    {
      do
      {
        long long v80 = (void *)*v79;
        sub_4F4B48((uint64_t)(v79 + 2));
        operator delete(v79);
        unsigned int v79 = v80;
      }
      while (v80);
    }
    long long v81 = __p;
    long long __p = 0;
    if (v81) {
      operator delete(v81);
    }
    long long v82 = (void **)v121[0];
    if (v121[0])
    {
      uint64_t v83 = (void **)v121[1];
      __darwin_ct_rune_t v84 = v121[0];
      if (v121[1] != v121[0])
      {
        do
        {
          if (*((char *)v83 - 1) < 0) {
            operator delete(*(v83 - 3));
          }
          v83 -= 3;
        }
        while (v83 != v82);
        __darwin_ct_rune_t v84 = v121[0];
      }
      v121[1] = v82;
      operator delete(v84);
    }
    uint64_t v85 = v133;
    if (v133)
    {
      do
      {
        char v86 = (void *)*v85;
        sub_4F4B48((uint64_t)(v85 + 2));
        operator delete(v85);
        uint64_t v85 = v86;
      }
      while (v86);
    }
    size_t v87 = v132;
    v132 = 0;
    if (v87) {
      operator delete(v87);
    }
    uint64_t v88 = v130;
    if (v130)
    {
      uint64_t v89 = v131;
      long long v90 = v130;
      if (v131 != v130)
      {
        do
        {
          if (*((char *)v89 - 1) < 0) {
            operator delete(*(v89 - 3));
          }
          v89 -= 3;
        }
        while (v89 != v88);
        long long v90 = v130;
      }
      unint64_t v131 = v88;
      operator delete(v90);
    }
    int v91 = (void *)*((void *)&v136 + 1);
    if (*((void *)&v136 + 1))
    {
      do
      {
        uint64_t v92 = (void *)*v91;
        sub_4F4B48((uint64_t)(v91 + 2));
        operator delete(v91);
        int v91 = v92;
      }
      while (v92);
    }
    uint64_t v93 = (void *)*((void *)&v135 + 1);
    *((void *)&v135 + 1) = 0;
    if (v93) {
      operator delete(v93);
    }
    uint64_t v94 = v134;
    if ((void)v134)
    {
      uint64_t v95 = *((void *)&v134 + 1);
      int v96 = (void *)v134;
      if (*((void *)&v134 + 1) != (void)v134)
      {
        do
        {
          if (*(char *)(v95 - 1) < 0) {
            operator delete(*(void **)(v95 - 24));
          }
          v95 -= 24;
        }
        while (v95 != v94);
        int v96 = (void *)v134;
      }
      *((void *)&v134 + 1) = v94;
      operator delete(v96);
    }
  }
}

void sub_74A61C(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  sub_4D4880((void **)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_74A700(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = 2144;
  if (a2) {
    uint64_t v6 = 2168;
  }
  sub_761C80((const std::string *)(a1 + v6), (uint64_t)&v192);
  sub_5A9D64((uint64_t)a3);
  sub_63841C((uint64_t)a3, 27);
  sub_638E00((uint64_t)a3, (uint64_t)&v192);
  sub_6389F0((uint64_t)a3, *(_DWORD *)(a1 + 4088) - (a2 ^ 1));
  uint64_t v7 = 2265;
  if (a2)
  {
    uint64_t v7 = 2266;
    int v8 = 3;
  }
  else
  {
    int v8 = 1;
  }
  if (*(unsigned char *)(a1 + v7)) {
    int v9 = 2;
  }
  else {
    int v9 = v8;
  }
  sub_6389F8((uint64_t)a3, v9);
  int v10 = byte_25AED6F;
  if (byte_25AED6F >= 0) {
    size_t v11 = byte_25AED6F;
  }
  else {
    size_t v11 = qword_25AED60;
  }
  int v12 = byte_25ADA37;
  if (byte_25ADA37 >= 0) {
    size_t v13 = byte_25ADA37;
  }
  else {
    size_t v13 = qword_25ADA28;
  }
  unint64_t v14 = v13 + v11;
  if (v13 + v11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 <= 0x16)
  {
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v184) = v13 + v11;
    if (!v11) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v43 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v43 = v14 | 7;
  }
  uint64_t v44 = v43 + 1;
  p_dst = (void **)operator new(v43 + 1);
  unint64_t v184 = v44 | 0x8000000000000000;
  std::string __dst = p_dst;
  uint64_t v183 = (void **)(v13 + v11);
  if (v11)
  {
LABEL_18:
    if (v10 >= 0) {
      uint64_t v16 = &qword_25AED58;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25AED58;
    }
    memmove(p_dst, v16, v11);
  }
LABEL_22:
  int v17 = (char *)p_dst + v11;
  if (v13)
  {
    if (v12 >= 0) {
      BOOL v18 = &qword_25ADA20;
    }
    else {
      BOOL v18 = (uint64_t *)qword_25ADA20;
    }
    memmove(v17, v18, v13);
  }
  v17[v13] = 0;
  sub_6352AC((uint64_t)&v188, (uint64_t)&__dst);
  if (SHIBYTE(v184) < 0) {
    operator delete(__dst);
  }
  uint64_t v19 = 2216;
  if (a2) {
    uint64_t v19 = 2240;
  }
  sub_6358A0((uint64_t)&v188, &xmmword_25AE9B0, (const std::string *)(a1 + v19));
  long long v181 = 0;
  uint64_t v180 = 0;
  sub_6370D4(&__dst, &v188, 1, &v180);
  unint64_t v20 = v181;
  if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  sub_638778(a3, (uint64_t)&__dst);
  if (a2)
  {
    LODWORD(v171) = 19;
    sub_6387E4((uint64_t)a3, (int *)&v171);
    sub_63553C((uint64_t)&dword_25AE878, (uint64_t)&v176);
    int v170 = 0;
    uint64_t v169 = 0;
    sub_6370D4(&v171, &v176, 1, &v169);
    unint64_t v21 = v170;
    if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    sub_638778(a3, (uint64_t)&v171);
    LODWORD(v160) = 18;
    sub_6387E4((uint64_t)a3, (int *)&v160);
    sub_6352AC((uint64_t)&v165, (uint64_t)&unk_25AD0D8);
    unint64_t v159 = 0;
    uint64_t v158 = 0;
    sub_6370D4(&v160, &v165, 1, &v158);
    int v22 = v159;
    if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    sub_638778(a3, (uint64_t)&v160);
    LODWORD(v149) = 19;
    sub_6387E4((uint64_t)a3, (int *)&v149);
    sub_63553C((uint64_t)&dword_25AE890, (uint64_t)&v154);
    uint64_t v147 = 0;
    char v148 = 0;
    sub_6370D4(&v149, &v154, 1, &v147);
    BOOL v23 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    sub_638778(a3, (uint64_t)&v149);
    LODWORD(__p) = 18;
    sub_6387E4((uint64_t)a3, (int *)&__p);
    int v24 = byte_25AE217;
    if (byte_25AE217 >= 0) {
      size_t v25 = byte_25AE217;
    }
    else {
      size_t v25 = *((void *)&xmmword_25AE200 + 1);
    }
    int v26 = byte_25ADA07;
    if (byte_25ADA07 >= 0) {
      size_t v27 = byte_25ADA07;
    }
    else {
      size_t v27 = qword_25AD9F8;
    }
    unint64_t v28 = v27 + v25;
    if (v27 + v25 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v28 > 0x16)
    {
      uint64_t v45 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v45 = v28 | 7;
      }
      uint64_t v46 = v45 + 1;
      p_p = (char *)operator new(v45 + 1);
      int v138 = (void **)(v27 + v25);
      unint64_t v139 = v46 | 0x8000000000000000;
      long long __p = p_p;
      if (!v25) {
        goto LABEL_57;
      }
    }
    else
    {
      int v138 = 0;
      unint64_t v139 = 0;
      long long __p = 0;
      p_p = (char *)&__p;
      HIBYTE(v139) = v27 + v25;
      if (!v25)
      {
LABEL_57:
        uint64_t v31 = &p_p[v25];
        if (v27)
        {
          if (v26 >= 0) {
            BOOL v32 = &qword_25AD9F0;
          }
          else {
            BOOL v32 = (uint64_t *)qword_25AD9F0;
          }
          memmove(v31, v32, v27);
        }
        v31[v27] = 0;
        sub_6352AC((uint64_t)&v143, (uint64_t)&__p);
        if (SHIBYTE(v139) < 0) {
          operator delete(__p);
        }
        uint64_t v135 = 0;
        long long v136 = 0;
        sub_6370D4(&__p, &v143, 1, &v135);
        int v33 = v136;
        if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        sub_638778(a3, (uint64_t)&__p);
        LODWORD(v126) = 17;
        sub_6387E4((uint64_t)a3, (int *)&v126);
        sub_63553C((uint64_t)&unk_25AEE90, (uint64_t)&v131);
        uint64_t v124 = 0;
        uint64_t v125 = 0;
        sub_6370D4(&v126, &v131, 1, &v124);
        unint64_t v34 = v125;
        if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        sub_638778(a3, (uint64_t)&v126);
        sub_638638((uint64_t)a3, (long long *)(a1 + 2408));
        __n128 v35 = sub_63874C((uint64_t)a3, (__n128 *)(a1 + 2112));
        unint64_t v36 = v130;
        if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v35);
          std::__shared_weak_count::__release_weak(v36);
        }
        uint64_t v37 = v129;
        if (v129)
        {
          do
          {
            long long v38 = (void *)*v37;
            sub_4F4B48((uint64_t)(v37 + 2));
            operator delete(v37);
            uint64_t v37 = v38;
          }
          while (v38);
        }
        long long v39 = v128;
        char v128 = 0;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v40 = (void **)v126;
        if (v126)
        {
          long long v41 = v127;
          uint64_t v42 = v126;
          if (v127 != v126)
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 3;
            }
            while (v41 != v40);
            uint64_t v42 = v126;
          }
          int v127 = v40;
          operator delete(v42);
        }
        uint64_t v47 = v134;
        if (v134)
        {
          do
          {
            uint64_t v48 = (void *)*v47;
            sub_4F4B48((uint64_t)(v47 + 2));
            operator delete(v47);
            uint64_t v47 = v48;
          }
          while (v48);
        }
        uint64_t v49 = v133;
        uint64_t v133 = 0;
        if (v49) {
          operator delete(v49);
        }
        uint64_t v50 = (void **)v131;
        if (v131)
        {
          __n128 v51 = v132;
          size_t v52 = v131;
          if (v132 != v131)
          {
            do
            {
              if (*((char *)v51 - 1) < 0) {
                operator delete(*(v51 - 3));
              }
              v51 -= 3;
            }
            while (v51 != v50);
            size_t v52 = v131;
          }
          v132 = v50;
          operator delete(v52);
        }
        int v53 = v142;
        if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v53->__on_zero_shared)(v53, v35);
          std::__shared_weak_count::__release_weak(v53);
        }
        size_t v54 = v141;
        if (v141)
        {
          do
          {
            unint64_t v55 = (void *)*v54;
            sub_4F4B48((uint64_t)(v54 + 2));
            operator delete(v54);
            size_t v54 = v55;
          }
          while (v55);
        }
        uint64_t v56 = v140;
        int v140 = 0;
        if (v56) {
          operator delete(v56);
        }
        uint64_t v57 = (void **)__p;
        if (__p)
        {
          uint64_t v58 = v138;
          int v59 = __p;
          if (v138 != __p)
          {
            do
            {
              if (*((char *)v58 - 1) < 0) {
                operator delete(*(v58 - 3));
              }
              v58 -= 3;
            }
            while (v58 != v57);
            int v59 = __p;
          }
          int v138 = v57;
          operator delete(v59);
        }
        uint64_t v60 = v146;
        if (v146)
        {
          do
          {
            std::string::size_type v61 = (void *)*v60;
            sub_4F4B48((uint64_t)(v60 + 2));
            operator delete(v60);
            uint64_t v60 = v61;
          }
          while (v61);
        }
        uint64_t v62 = v145;
        v145 = 0;
        if (v62) {
          operator delete(v62);
        }
        long long v63 = (void **)v143;
        if (v143)
        {
          int v64 = v144;
          long long v65 = v143;
          if (v144 != v143)
          {
            do
            {
              if (*((char *)v64 - 1) < 0) {
                operator delete(*(v64 - 3));
              }
              v64 -= 3;
            }
            while (v64 != v63);
            long long v65 = v143;
          }
          unint64_t v144 = v63;
          operator delete(v65);
        }
        uint64_t v66 = v153;
        if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v35);
          std::__shared_weak_count::__release_weak(v66);
        }
        long long v67 = v152;
        if (v152)
        {
          do
          {
            long long v68 = (void *)*v67;
            sub_4F4B48((uint64_t)(v67 + 2));
            operator delete(v67);
            long long v67 = v68;
          }
          while (v68);
        }
        long long v69 = v151;
        uint64_t v151 = 0;
        if (v69) {
          operator delete(v69);
        }
        long long v70 = (void **)v149;
        if (v149)
        {
          long long v71 = v150;
          uint64_t v72 = v149;
          if (v150 != v149)
          {
            do
            {
              if (*((char *)v71 - 1) < 0) {
                operator delete(*(v71 - 3));
              }
              v71 -= 3;
            }
            while (v71 != v70);
            uint64_t v72 = v149;
          }
          std::string::size_type v150 = v70;
          operator delete(v72);
        }
        int v73 = v157;
        if (v157)
        {
          do
          {
            uint64_t v74 = (void *)*v73;
            sub_4F4B48((uint64_t)(v73 + 2));
            operator delete(v73);
            int v73 = v74;
          }
          while (v74);
        }
        uint64_t v75 = v156;
        long long v156 = 0;
        if (v75) {
          operator delete(v75);
        }
        uint64_t v76 = (void **)v154;
        if (v154)
        {
          long long v77 = v155;
          uint64_t v78 = v154;
          if (v155 != v154)
          {
            do
            {
              if (*((char *)v77 - 1) < 0) {
                operator delete(*(v77 - 3));
              }
              v77 -= 3;
            }
            while (v77 != v76);
            uint64_t v78 = v154;
          }
          char v155 = v76;
          operator delete(v78);
        }
        unsigned int v79 = v164;
        if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v79->__on_zero_shared)(v79, v35);
          std::__shared_weak_count::__release_weak(v79);
        }
        long long v80 = v163;
        if (v163)
        {
          do
          {
            long long v81 = (void *)*v80;
            sub_4F4B48((uint64_t)(v80 + 2));
            operator delete(v80);
            long long v80 = v81;
          }
          while (v81);
        }
        long long v82 = v162;
        uint64_t v162 = 0;
        if (v82) {
          operator delete(v82);
        }
        uint64_t v83 = (void **)v160;
        if (v160)
        {
          __darwin_ct_rune_t v84 = v161;
          uint64_t v85 = v160;
          if (v161 != v160)
          {
            do
            {
              if (*((char *)v84 - 1) < 0) {
                operator delete(*(v84 - 3));
              }
              v84 -= 3;
            }
            while (v84 != v83);
            uint64_t v85 = v160;
          }
          uint64_t v161 = v83;
          operator delete(v85);
        }
        char v86 = v168;
        if (v168)
        {
          do
          {
            size_t v87 = (void *)*v86;
            sub_4F4B48((uint64_t)(v86 + 2));
            operator delete(v86);
            char v86 = v87;
          }
          while (v87);
        }
        uint64_t v88 = v167;
        long long v167 = 0;
        if (v88) {
          operator delete(v88);
        }
        uint64_t v89 = (void **)v165;
        if (v165)
        {
          long long v90 = v166;
          int v91 = v165;
          if (v166 != v165)
          {
            do
            {
              if (*((char *)v90 - 1) < 0) {
                operator delete(*(v90 - 3));
              }
              v90 -= 3;
            }
            while (v90 != v89);
            int v91 = v165;
          }
          uint64_t v166 = v89;
          operator delete(v91);
        }
        uint64_t v92 = v175;
        if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v92->__on_zero_shared)(v92, v35);
          std::__shared_weak_count::__release_weak(v92);
        }
        uint64_t v93 = v174;
        if (v174)
        {
          do
          {
            uint64_t v94 = (void *)*v93;
            sub_4F4B48((uint64_t)(v93 + 2));
            operator delete(v93);
            uint64_t v93 = v94;
          }
          while (v94);
        }
        uint64_t v95 = v173;
        long long v173 = 0;
        if (v95) {
          operator delete(v95);
        }
        int v96 = (void **)v171;
        if (v171)
        {
          uint64_t v97 = v172;
          uint64_t v98 = v171;
          if (v172 != v171)
          {
            do
            {
              if (*((char *)v97 - 1) < 0) {
                operator delete(*(v97 - 3));
              }
              v97 -= 3;
            }
            while (v97 != v96);
            uint64_t v98 = v171;
          }
          unint64_t v172 = v96;
          operator delete(v98);
        }
        uint64_t v99 = v179;
        if (v179)
        {
          do
          {
            uint64_t v100 = (void *)*v99;
            sub_4F4B48((uint64_t)(v99 + 2));
            operator delete(v99);
            uint64_t v99 = v100;
          }
          while (v100);
        }
        uint64_t v101 = v178;
        int v178 = 0;
        if (v101) {
          operator delete(v101);
        }
        uint64_t v102 = (void **)v176;
        if (v176)
        {
          uint64_t v103 = v177;
          uint64_t v104 = v176;
          if (v177 != v176)
          {
            do
            {
              if (*((char *)v103 - 1) < 0) {
                operator delete(*(v103 - 3));
              }
              v103 -= 3;
            }
            while (v103 != v102);
            uint64_t v104 = v176;
          }
          long long v177 = v102;
          operator delete(v104);
        }
        goto LABEL_213;
      }
    }
    if (v24 >= 0) {
      uint64_t v30 = &xmmword_25AE200;
    }
    else {
      uint64_t v30 = (long long *)xmmword_25AE200;
    }
    memmove(p_p, v30, v25);
    goto LABEL_57;
  }
LABEL_213:
  uint64_t v105 = v187;
  if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  uint64_t v106 = v186;
  if (v186)
  {
    do
    {
      int v107 = (void *)*v106;
      sub_4F4B48((uint64_t)(v106 + 2));
      operator delete(v106);
      uint64_t v106 = v107;
    }
    while (v107);
  }
  uint64_t v108 = v185;
  long long v185 = 0;
  if (v108) {
    operator delete(v108);
  }
  int v109 = __dst;
  if (__dst)
  {
    size_t v110 = v183;
    unint64_t v111 = __dst;
    if (v183 != __dst)
    {
      do
      {
        if (*((char *)v110 - 1) < 0) {
          operator delete(*(v110 - 3));
        }
        v110 -= 3;
      }
      while (v110 != v109);
      unint64_t v111 = __dst;
    }
    uint64_t v183 = v109;
    operator delete(v111);
  }
  int v112 = v191;
  if (v191)
  {
    do
    {
      unint64_t v113 = (void *)*v112;
      sub_4F4B48((uint64_t)(v112 + 2));
      operator delete(v112);
      int v112 = v113;
    }
    while (v113);
  }
  uint64_t v114 = v190;
  size_t v190 = 0;
  if (v114) {
    operator delete(v114);
  }
  uint64_t v115 = v188;
  if (v188)
  {
    long long v116 = v189;
    long long v117 = v188;
    if (v189 != v188)
    {
      do
      {
        if (*((char *)v116 - 1) < 0) {
          operator delete(*(v116 - 3));
        }
        v116 -= 3;
      }
      while (v116 != v115);
      long long v117 = v188;
    }
    int v189 = v115;
    operator delete(v117);
  }
  int v118 = v195;
  if (v195)
  {
    do
    {
      uint64_t v119 = (void *)*v118;
      sub_4F4B48((uint64_t)(v118 + 2));
      operator delete(v118);
      int v118 = v119;
    }
    while (v119);
  }
  unint64_t v120 = v194;
  uint64_t v194 = 0;
  if (v120) {
    operator delete(v120);
  }
  uint64_t v121 = v192;
  if (v192)
  {
    uint64_t v122 = v193;
    uint64_t v123 = v192;
    if (v193 != v192)
    {
      do
      {
        if (*((char *)v122 - 1) < 0) {
          operator delete(*(v122 - 3));
        }
        v122 -= 3;
      }
      while (v122 != v121);
      uint64_t v123 = v192;
    }
    char v193 = v121;
    operator delete(v123);
  }
}

void sub_74B568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_14A84((uint64_t)&a9);
  sub_4D4880(&a24);
  sub_4F31D0(&__p);
  sub_4D4880(&a48);
  sub_4F31D0(&a59);
  sub_4D4880(&a72);
  sub_4F31D0((void **)&STACK[0x250]);
  sub_4D4880((void **)&STACK[0x2B8]);
  sub_4F31D0((void **)&STACK[0x310]);
  sub_4D4880((void **)&STACK[0x378]);
  sub_4F31D0((void **)&STACK[0x3D0]);
  sub_4D4880((void **)(v73 - 232));
  sub_52F090(v72);
  sub_4D4880((void **)(v73 - 160));
  _Unwind_Resume(a1);
}

void sub_74B714(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  sub_4D4880((void **)(v2 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_74B738@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t)&a1[137];
  BOOL v5 = a1[255].n128_u32[2] == 1;
  int v6 = a1[141].n128_u8[10];
  int v7 = a1[141].n128_u8[9];
  int v8 = a1[141].n128_u8[12];
  BOOL v9 = sub_62D444((uint64_t)&a1[159].n128_i64[1]);
  uint64_t v10 = a1[159].n128_u8[1];
  unint64_t v11 = (unint64_t)a1[159].n128_u8[2] << 40;
  int v12 = 0x1000000;
  if (!v9 || !v5) {
    int v12 = 0;
  }
  int v22 = v12 | (v6 << 16) | (v7 << 8) | v8;
  __int16 v23 = (v11 | (v10 << 32)) >> 32;
  sub_761E88(a1, v4, (unsigned __int8 *)&v22, (uint64_t)&v24);
  sub_639258(a2, (uint64_t)&v24, 0, 0, 1);
  size_t v13 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v14 = v27;
  if (v27)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p;
  long long __p = 0;
  if (v16) {
    operator delete(v16);
  }
  int v17 = (void **)v24;
  if (v24)
  {
    BOOL v18 = v25;
    uint64_t v19 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = v24;
    }
    size_t v25 = v17;
    operator delete(v19);
  }
  sub_638450(a2, a1[130].n128_i32[0]);
  sub_63874C(a2, a1 + 132);
  if (a1[141].n128_u8[10]) {
    int v20 = 57;
  }
  else {
    int v20 = 58;
  }
  sub_63841C(a2, v20);
  int v24 = 0;
  sub_638408(a2, &a1[129].n128_u64[1], &v24);
  return sub_6396EC(a2, a1[159].n128_i8[1]);
}

void sub_74B918(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74B92C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_74B940(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74B954(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 2192;
  uint64_t v5 = a1 + 2552;
  int v6 = *(unsigned __int8 *)(a1 + 4074);
  BOOL v7 = *(_DWORD *)(a1 + 4088) == 1;
  int v8 = *(unsigned __int8 *)(a1 + 2266);
  int v9 = *(unsigned __int8 *)(a1 + 2265);
  int v10 = *(unsigned __int8 *)(a1 + 2268);
  BOOL v11 = sub_62D444(a1 + 2552);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 2545);
  unint64_t v13 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
  int v14 = 0x1000000;
  if (!v11 || !v7) {
    int v14 = 0;
  }
  LODWORD(v28) = v14 | (v8 << 16) | (v9 << 8) | v10;
  WORD2(v28) = (v13 | (v12 << 32)) >> 32;
  sub_764020(a1, v4, v6, (unsigned __int8 *)&v28, (uint64_t)&v29);
  sub_639258(a2, (uint64_t)&v29, 0, 0, 1);
  sub_638450(a2, *(_DWORD *)(a1 + 2080));
  sub_63874C(a2, (__n128 *)(a1 + 2112));
  if (sub_62D404(v5) && *(unsigned char *)(a1 + 3963))
  {
    int v15 = *(_DWORD *)(a1 + 4088);
    BOOL v16 = sub_62D444(v5);
    if (v15 == 1 && v16)
    {
      if (*(unsigned char *)(a1 + 2268)) {
        int v18 = 63;
      }
      else {
        int v18 = 62;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 2268)) {
        int v26 = 57;
      }
      else {
        int v26 = 58;
      }
      if (*(unsigned char *)(a1 + 2268)) {
        int v27 = 59;
      }
      else {
        int v27 = 60;
      }
      if (*(unsigned char *)(a1 + 2265)) {
        int v18 = v27;
      }
      else {
        int v18 = v26;
      }
    }
  }
  else
  {
    int v18 = 53;
  }
  sub_63841C(a2, v18);
  uint64_t v28 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v28);
  sub_6389F0(a2, *(_DWORD *)(a1 + 4088));
  sub_638638(a2, (long long *)(a1 + 2408));
  sub_6396EC(a2, *(unsigned char *)(a1 + 2545));
  uint64_t v19 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  int v20 = v32;
  if (v32)
  {
    do
    {
      unint64_t v21 = (void *)*v20;
      sub_4F4B48((uint64_t)(v20 + 2));
      operator delete(v20);
      int v20 = v21;
    }
    while (v21);
  }
  int v22 = __p;
  long long __p = 0;
  if (v22) {
    operator delete(v22);
  }
  __int16 v23 = (void **)v29;
  if (v29)
  {
    int v24 = v30;
    size_t v25 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v23);
      size_t v25 = v29;
    }
    uint64_t v30 = v23;
    operator delete(v25);
  }
}

void sub_74BBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_74BBF4@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  sub_7654CC((uint64_t)a1, a1[141].n128_u8[12], (uint64_t)&a1[137], (uint64_t)&v13);
  sub_639258(a2, (uint64_t)&v13, 0, 0, 1);
  uint64_t v4 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v16;
  if (v16)
  {
    do
    {
      int v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  BOOL v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v13;
  if (v13)
  {
    int v9 = v14;
    int v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      int v10 = v13;
    }
    int v14 = v8;
    operator delete(v10);
  }
  sub_638450(a2, a1[130].n128_i32[0]);
  sub_63874C(a2, a1 + 132);
  if (a1[141].n128_u8[10]) {
    int v11 = 59;
  }
  else {
    int v11 = 60;
  }
  sub_63841C(a2, v11);
  unint64_t v13 = 0;
  return sub_638408(a2, &a1[129].n128_u64[1], &v13);
}

void sub_74BD58(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74BD6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_74BD80(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_74BD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = a6 + 1;
  uint64_t v12 = sub_760668((void *)a1, a3, a6 + 1);
  memcpy(v12 + 4, (const void *)a4, 0x76CuLL);
  if (*(char *)(a4 + 1927) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1936), *(void **)(a4 + 1904), *(void *)(a4 + 1912));
  }
  else
  {
    long long v13 = *(_OWORD *)(a4 + 1904);
    *(void *)(a1 + 1952) = *(void *)(a4 + 1920);
    *(_OWORD *)(a1 + 1936) = v13;
  }
  long long v14 = *(_OWORD *)(a4 + 1928);
  long long v15 = *(_OWORD *)(a4 + 1960);
  *(_OWORD *)(a1 + 1976) = *(_OWORD *)(a4 + 1944);
  *(_OWORD *)(a1 + 1992) = v15;
  *(_OWORD *)(a1 + 1960) = v14;
  long long v16 = *(_OWORD *)(a4 + 1976);
  long long v17 = *(_OWORD *)(a4 + 1992);
  long long v18 = *(_OWORD *)(a4 + 2008);
  *(_OWORD *)(a1 + 2050) = *(_OWORD *)(a4 + 2018);
  *(_OWORD *)(a1 + 2024) = v17;
  *(_OWORD *)(a1 + 2040) = v18;
  *(_OWORD *)(a1 + 2008) = v16;
  *(void *)(a1 + 2072) = *(void *)(a5 + 504);
  *(_DWORD *)(a1 + 2080) = sub_46E120((unsigned int *)a5, 0);
  *(_DWORD *)(a1 + 2088) = 0x7FFFFFFF;
  *(void *)(a1 + 2092) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 2104) = 0;
  *(_DWORD *)(a1 + 2112) = 0x7FFFFFFF;
  *(void *)(a1 + 2116) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 2128) = 0;
  char v19 = *(unsigned char *)(a1 + 1961);
  if (v19)
  {
    char v19 = 0;
    if (*(void *)(a5 + 10104) != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a5 + 10112) != 0x7FFFFFFFFFFFFFFFLL) {
      char v19 = *(void *)(a5 + 10144) != *(void *)(a5 + 10152);
    }
  }
  *(unsigned char *)(a1 + 2136) = v19;
  uint64_t v20 = sub_64F444(a5);
  if (*(char *)(v20 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2144), *(void **)v20, *(void *)(v20 + 8));
  }
  else
  {
    long long v21 = *(_OWORD *)v20;
    *(void *)(a1 + 2160) = *(void *)(v20 + 16);
    *(_OWORD *)(a1 + 2144) = v21;
  }
  uint64_t v22 = sub_64F450(a5);
  if (*(char *)(v22 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2168), *(void **)v22, *(void *)(v22 + 8));
  }
  else
  {
    long long v23 = *(_OWORD *)v22;
    *(void *)(a1 + 2184) = *(void *)(v22 + 16);
    *(_OWORD *)(a1 + 2168) = v23;
  }
  uint64_t v24 = sub_64F45C(a5);
  if (*(char *)(v24 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2192), *(void **)v24, *(void *)(v24 + 8));
  }
  else
  {
    long long v25 = *(_OWORD *)v24;
    *(void *)(a1 + 2208) = *(void *)(v24 + 16);
    *(_OWORD *)(a1 + 2192) = v25;
  }
  uint64_t v26 = sub_64F468(a5);
  if (*(char *)(v26 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2216), *(void **)v26, *(void *)(v26 + 8));
  }
  else
  {
    long long v27 = *(_OWORD *)v26;
    *(void *)(a1 + 2232) = *(void *)(v26 + 16);
    *(_OWORD *)(a1 + 2216) = v27;
  }
  uint64_t v28 = sub_64F474(a5);
  if (*(char *)(v28 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2240), *(void **)v28, *(void *)(v28 + 8));
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    *(void *)(a1 + 2256) = *(void *)(v28 + 16);
    *(_OWORD *)(a1 + 2240) = v29;
  }
  *(unsigned char *)(a1 + 2264) = 0;
  *(unsigned char *)(a1 + 2265) = sub_64F234(a5);
  *(unsigned char *)(a1 + 2266) = sub_64F240(a5);
  *(unsigned char *)(a1 + 2267) = sub_64F24C(a5);
  *(unsigned char *)(a1 + 2268) = sub_64F348(a5);
  uint64_t v30 = (long long *)sub_374DF4(a5);
  sub_3B1DC8(a1 + 2272, v30);
  uint64_t v31 = (long long *)sub_46CAAC(a5);
  sub_3B1DC8(a1 + 2408, v31);
  BOOL v32 = *(_DWORD *)(a1 + 2408) != 0x7FFFFFFF && sub_40A45C((int *)(a1 + 2416));
  *(unsigned char *)(a1 + 2544) = v32;
  if (!*(unsigned char *)(a5 + 12216) || (uint64_t v33 = *(void *)(a3 + 1456), v34 = *(void *)(a3 + 1464), v33 == v34))
  {
    BOOL v36 = 0;
  }
  else
  {
    uint64_t v35 = v33 + 4;
    do
    {
      BOOL v36 = *(_DWORD *)(v35 - 4) == 1;
      BOOL v37 = *(_DWORD *)(v35 - 4) == 1 || v35 == v34;
      v35 += 4;
    }
    while (!v37);
  }
  *(unsigned char *)(a1 + 2545) = v36;
  strcpy((char *)v50, "GuidanceFeatureRegions");
  BYTE7(v50[1]) = 22;
  long long __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  long long v38 = sub_374CDC(a2, (uint64_t)v50, (uint64_t *)&__p);
  BOOL v39 = sub_746610(a5 + 12184, a3, v38);
  uint64_t v40 = (void **)__p;
  if (__p)
  {
    long long v41 = v48;
    uint64_t v42 = __p;
    if (v48 != __p)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      uint64_t v42 = __p;
    }
    uint64_t v48 = v40;
    operator delete(v42);
  }
  if (SBYTE7(v50[1]) < 0) {
    operator delete(*(void **)&v50[0]);
  }
  *(unsigned char *)(a1 + 2546) = v39;
  sub_4BBDC0(a1 + 2552, a3);
  *(_DWORD *)(a1 + 4088) = -1;
  char v43 = *(unsigned char *)(sub_64EFB8(a5) + 368);
  if (v43) {
    char v43 = sub_64F234(a5) ^ 1;
  }
  *(unsigned char *)(a1 + 4092) = v43;
  *(_DWORD *)(a1 + 4088) = v11;
  if (sub_651028((void *)a5))
  {
    uint64_t v44 = (uint64_t *)nullsub_1(a3 + 1232);
    uint64_t v45 = sub_64EE80(a5);
    sub_3FB100((uint64_t)v50, v44, v45);
    *(_OWORD *)(a1 + 2088) = v50[0];
    *(void *)(a1 + 2104) = *(void *)&v50[1];
    sub_64EDB4((_DWORD *)a5, (uint64_t)v50);
    *(_OWORD *)(a1 + 2112) = v50[0];
    *(void *)(a1 + 2128) = *(void *)&v50[1];
    *(unsigned char *)(a1 + 2264) = sub_40A45C((int *)(a1 + 2112));
  }
  return a1;
}

void sub_74C224(_Unwind_Exception *a1)
{
  sub_74687C(v1);
  _Unwind_Resume(a1);
}

void sub_74C238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_4BCED0(v23);
  sub_45E914(v25);
  sub_45E914(v24);
  if (v22[2263] < 0)
  {
    operator delete(*v26);
    if ((v22[2239] & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v22[2239] & 0x80000000) == 0)
  {
LABEL_3:
    if (v22[2215] < 0) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  operator delete(*a9);
  if (v22[2215] < 0)
  {
LABEL_4:
    operator delete(*a10);
    if ((v22[2191] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  if ((v22[2191] & 0x80000000) == 0)
  {
LABEL_5:
    if (v22[2167] < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*a11);
  if (v22[2167] < 0)
  {
LABEL_6:
    operator delete(*a12);
    if ((v22[1959] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  if ((v22[1959] & 0x80000000) == 0)
  {
LABEL_7:
    sub_74687C((uint64_t)v22);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*a13);
  sub_74687C((uint64_t)v22);
  _Unwind_Resume(a1);
}

uint64_t sub_74C3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_74BD94(a1, a2, a3, a4, a5, a6);
}

void *sub_74C3A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(unsigned char *)(a1 + 2136))
  {
    if (*(unsigned char *)(a1 + 2544)) {
      sub_74C6E4(a1, (uint64_t)v14);
    }
    else {
      sub_74C8DC(a1, (uint64_t)v14);
    }
    unint64_t v4 = a2[1];
    if (v4 >= a2[2])
    {
      uint64_t v5 = sub_7572F4(a2, (uint64_t)v14);
    }
    else
    {
      sub_599644(a2[1], (uint64_t)v14);
      uint64_t v5 = v4 + 1080;
      a2[1] = v4 + 1080;
    }
    a2[1] = v5;
    sub_52F1E8((uint64_t)v14);
  }
  if (*(unsigned char *)(a1 + 2544)) {
    sub_74CAD0(a1, (uint64_t)v14);
  }
  else {
    sub_74CCC8(a1, (uint64_t)v14);
  }
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
    uint64_t v7 = sub_7572F4(a2, (uint64_t)v14);
  }
  else
  {
    sub_599644(a2[1], (uint64_t)v14);
    uint64_t v7 = v6 + 1080;
    a2[1] = v6 + 1080;
  }
  a2[1] = v7;
  if (*(unsigned char *)(a1 + 2544))
  {
    int v8 = *(unsigned char **)(a1 + 2448);
    if (v8 != *(unsigned char **)(a1 + 2456))
    {
      if (*v8) {
        sub_74CEBC(a1, 0, (uint64_t)v13);
      }
    }
    sub_74D168(a1, (uint64_t)v13);
  }
  if (*(unsigned char *)(a1 + 2063)) {
    sub_74D488(a1, (uint64_t)v13);
  }
  else {
    sub_74D5C4(a1, (uint64_t)v13);
  }
  unint64_t v9 = a2[1];
  if (v9 >= a2[2])
  {
    int v11 = sub_7576B4((void **)a2, (uint64_t)v13);
  }
  else
  {
    sub_7574DC(v9, (uint64_t)v13);
    int v11 = (void *)(v10 + 1080);
  }
  a2[1] = (uint64_t)v11;
  sub_52F1E8((uint64_t)v13);
  return sub_52F1E8((uint64_t)v14);
}

void sub_74C638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  sub_52F1E8((uint64_t)&STACK[0x440]);
  sub_591E78(v2);
  _Unwind_Resume(a1);
}

void sub_74C6A0(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_74C6B4(_Unwind_Exception *a1)
{
  sub_52F1E8((uint64_t)&STACK[0x440]);
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_74C6D0(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_74C6E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7607E0(&v17, a1, a1 + 2168);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_7606A0((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 19);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_74C870(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74C884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_74C8A0(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74C8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_74C8C8(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_74C8DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7606B0(&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_7606A0((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 18);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_74CA64(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74CA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_74CA94(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74CAA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_74CABC(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_74CAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7607E4(a1 + 2168, (uint64_t)&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_760A9C((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 20);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_74CC5C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74CC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_74CC8C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74CCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_74CCB4(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_74CCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7606B4(a1, (uint64_t)&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_760A9C((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 23);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_74CE50(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74CE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_74CE80(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74CE94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_74CEA8(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74CEBC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(unsigned __int8 **)(a1 + 2448);
  sub_760FD4(*v6, *((_DWORD *)v6 + 1) != 0x7FFFFFFF, (uint64_t)&v21);
  sub_7C43EC(a3, &v21, 0);
  uint64_t v7 = v24;
  if (v24)
  {
    do
    {
      int v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  unint64_t v9 = __p;
  long long __p = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void **)v21;
  if (v21)
  {
    int v11 = (void **)v22;
    uint64_t v12 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v21;
    }
    uint64_t v22 = v10;
    operator delete(v12);
  }
  sub_638638(a3, (long long *)(a1 + 2408));
  if (a2) {
    int v13 = 22;
  }
  else {
    int v13 = 21;
  }
  sub_63841C(a3, v13);
  long long v21 = 0;
  sub_638408(a3, (void *)(a1 + 2072), &v21);
  sub_7C43E4(a3, *(unsigned __int8 *)(a1 + 451));
  int v14 = sub_62CBA8((unsigned int *)(a1 + 32), *v6);
  __int16 v15 = -1;
  char v16 = -1;
  long long v17 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  char v20 = 0;
  sub_524ADC((uint64_t)&v21, (uint64_t)&v14, 0);
  sub_638E7C();
}

void sub_74D0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_4D9814((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    sub_52F1E8(v17);
    _Unwind_Resume(a1);
  }
  sub_52F1E8(v17);
  _Unwind_Resume(a1);
}

void sub_74D168(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_760D14((uint64_t)&v23);
  sub_7C43EC(a2, &v23, 0);
  unint64_t v4 = v26;
  if (v26)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v23;
  if (v23)
  {
    int v8 = (void **)v24;
    unint64_t v9 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v23;
    }
    uint64_t v24 = v7;
    operator delete(v9);
  }
  sub_760AAC(*(unsigned __int8 *)(a1 + 2053), (uint64_t)&v23);
  sub_7C481C(a2, (uint64_t)&v23);
  uint64_t v10 = v26;
  if (v26)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  int v13 = (void **)v23;
  if (v23)
  {
    int v14 = (void **)v24;
    __int16 v15 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      __int16 v15 = v23;
    }
    uint64_t v24 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 24);
  uint64_t v23 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v23);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  sub_638638(a2, (long long *)(a1 + 2408));
  int v16 = *(_DWORD *)(a1 + 1588);
  __int16 v17 = -1;
  char v18 = -1;
  uint64_t v19 = 0;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  char v22 = 0;
  sub_524ADC((uint64_t)&v23, (uint64_t)&v16, 0);
  sub_638E7C();
}

void sub_74D3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_4D9814((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    sub_52F1E8(v17);
    _Unwind_Resume(a1);
  }
  sub_52F1E8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_74D488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_761270((uint64_t)&v11);
  sub_7C43EC(a2, &v11, 0);
  unint64_t v4 = v14;
  if (v14)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v11;
  if (v11)
  {
    int v8 = v12;
    unint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v11;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  sub_63841C(a2, 15);
  int v11 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v11);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  return sub_7C43DC(a2, 94);
}

void sub_74D588(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74D59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_74D5B0(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_74D5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_761260((uint64_t)&v11);
  sub_7C43EC(a2, &v11, 0);
  unint64_t v4 = v14;
  if (v14)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v11;
  if (v11)
  {
    int v8 = v12;
    unint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v11;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  sub_63841C(a2, 15);
  int v11 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v11);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  return sub_7C43DC(a2, 17);
}

void sub_74D6C4(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_74D6D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_74D6EC(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void *sub_74D700@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((unsigned char *)result + 2544))
  {
    sub_74D7D8((uint64_t)result, v6);
    unint64_t v3 = a2[1];
    if (v3 >= a2[2])
    {
      uint64_t v5 = sub_757810(a2, (uint64_t)v6);
    }
    else
    {
      sub_5AA6B0(v3, (uint64_t)v6);
      uint64_t v5 = v4 + 816;
    }
    a2[1] = v5;
    return sub_52F090(v6);
  }
  return result;
}

void sub_74D7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F090((uint64_t *)va);
  sub_591DA0(v2);
  _Unwind_Resume(a1);
}

void sub_74D7C4(_Unwind_Exception *a1)
{
  sub_591DA0(v1);
  _Unwind_Resume(a1);
}

double sub_74D7D8@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5A9D64((uint64_t)a2);
  uint64_t v4 = sub_37D0C0(a1 + 3784);
  uint64_t v5 = *(unsigned char **)v4;
  unint64_t v6 = *(unsigned char **)(v4 + 8);
  if (*(unsigned char **)v4 != v6)
  {
    while (*v5 != 10)
    {
      v5 += 12;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
LABEL_20:
    sub_760D14((uint64_t)&v62);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    sub_6370D4(&v66, &v62, 1, &v56);
    sub_638778(a2, (uint64_t)&v66);
    int v16 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = v69;
    if (v69)
    {
      do
      {
        char v18 = (void *)*v17;
        sub_4F4B48((uint64_t)(v17 + 2));
        operator delete(v17);
        uint64_t v17 = v18;
      }
      while (v18);
    }
    uint64_t v19 = __p;
    long long __p = 0;
    if (v19) {
      operator delete(v19);
    }
    uint64_t v20 = (void **)v66;
    if (v66)
    {
      uint64_t v21 = v67;
      char v22 = v66;
      if (v67 != v66)
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*(v21 - 3));
          }
          v21 -= 3;
        }
        while (v21 != v20);
        char v22 = v66;
      }
      long long v67 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v57;
    if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = v65;
    if (v65)
    {
      do
      {
        long long v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        uint64_t v24 = v25;
      }
      while (v25);
    }
    uint64_t v26 = v64;
    int v64 = 0;
    if (v26) {
      operator delete(v26);
    }
    long long v27 = (void **)v62;
    if (v62)
    {
      uint64_t v28 = v63;
      long long v29 = v62;
      if (v63 == v62) {
        goto LABEL_94;
      }
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
LABEL_93:
      long long v29 = v62;
LABEL_94:
      long long v63 = v27;
      operator delete(v29);
      goto LABEL_95;
    }
    goto LABEL_95;
  }
LABEL_4:
  uint64_t v7 = *(unsigned char **)(a1 + 2448);
  int v8 = *(unsigned char **)(a1 + 2456);
  if (v7 != v8)
  {
    while (*v7 == 10)
    {
      v7 += 12;
      if (v7 == v8) {
        goto LABEL_7;
      }
    }
    goto LABEL_20;
  }
LABEL_7:
  sub_760E74((uint64_t)&v62);
  uint64_t v60 = 0;
  std::string::size_type v61 = 0;
  sub_6370D4(&v66, &v62, 1, &v60);
  sub_638778(a2, (uint64_t)&v66);
  unint64_t v9 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v69;
  if (v69)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  int v13 = (void **)v66;
  if (v66)
  {
    int v14 = v67;
    __int16 v15 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      __int16 v15 = v66;
    }
    long long v67 = v13;
    operator delete(v15);
  }
  uint64_t v30 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v31 = v65;
  if (v65)
  {
    do
    {
      BOOL v32 = (void *)*v31;
      sub_4F4B48((uint64_t)(v31 + 2));
      operator delete(v31);
      uint64_t v31 = v32;
    }
    while (v32);
  }
  uint64_t v33 = v64;
  int v64 = 0;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v34 = (void **)v62;
  if (v62)
  {
    uint64_t v35 = v63;
    BOOL v36 = v62;
    if (v63 != v62)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      BOOL v36 = v62;
    }
    long long v63 = v34;
    operator delete(v36);
  }
  LODWORD(v66) = 19;
  sub_6387E4((uint64_t)a2, (int *)&v66);
  sub_760D14((uint64_t)&v62);
  uint64_t v58 = 0;
  int v59 = 0;
  sub_6370D4(&v66, &v62, 1, &v58);
  sub_638778(a2, (uint64_t)&v66);
  BOOL v37 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  long long v38 = v69;
  if (v69)
  {
    do
    {
      BOOL v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      long long v38 = v39;
    }
    while (v39);
  }
  uint64_t v40 = __p;
  long long __p = 0;
  if (v40) {
    operator delete(v40);
  }
  long long v41 = (void **)v66;
  if (v66)
  {
    uint64_t v42 = v67;
    char v43 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      char v43 = v66;
    }
    long long v67 = v41;
    operator delete(v43);
  }
  uint64_t v44 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  uint64_t v45 = v65;
  if (v65)
  {
    do
    {
      uint64_t v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      uint64_t v45 = v46;
    }
    while (v46);
  }
  uint64_t v47 = v64;
  int v64 = 0;
  if (v47) {
    operator delete(v47);
  }
  long long v27 = (void **)v62;
  if (v62)
  {
    uint64_t v48 = v63;
    long long v29 = v62;
    if (v63 == v62) {
      goto LABEL_94;
    }
    do
    {
      if (*((char *)v48 - 1) < 0) {
        operator delete(*(v48 - 3));
      }
      v48 -= 3;
    }
    while (v48 != v27);
    goto LABEL_93;
  }
LABEL_95:
  sub_760AAC(*(unsigned __int8 *)(a1 + 2053), (uint64_t)&v66);
  sub_638E00((uint64_t)a2, (uint64_t)&v66);
  uint64_t v49 = v69;
  if (v69)
  {
    do
    {
      uint64_t v50 = (void *)*v49;
      sub_4F4B48((uint64_t)(v49 + 2));
      operator delete(v49);
      uint64_t v49 = v50;
    }
    while (v50);
  }
  __n128 v51 = __p;
  long long __p = 0;
  if (v51) {
    operator delete(v51);
  }
  size_t v52 = (void **)v66;
  if (v66)
  {
    int v53 = v67;
    size_t v54 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v53 - 1) < 0) {
          operator delete(*(v53 - 3));
        }
        v53 -= 3;
      }
      while (v53 != v52);
      size_t v54 = v66;
    }
    long long v67 = v52;
    operator delete(v54);
  }
  sub_63841C((uint64_t)a2, 83);
  *(void *)&double result = sub_638638((uint64_t)a2, (long long *)(a1 + 2408)).n128_u64[0];
  return result;
}

void sub_74DE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void *);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  sub_4F31D0((void **)va2);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_74DEFC(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_74DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_4D4880((void **)va);
  sub_52F090(v16);
  _Unwind_Resume(a1);
}

void sub_74DF2C(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_74DF40(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_74DF54(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[141].n128_u8[8])
  {
    if (sub_62D404((uint64_t)&a1[159].n128_i64[1]) && a1[247].n128_u8[11])
    {
      sub_751404((uint64_t)a1, (uint64_t)v110);
    }
    else if (a1[141].n128_u8[9])
    {
      sub_7516A4(a1, (uint64_t)v110);
    }
    else
    {
      sub_7511E8(a1, (uint64_t)v110);
    }
  }
  else
  {
    sub_74E8BC((uint64_t)a1, (uint64_t)v110);
  }
  unint64_t v4 = a2[1];
  if (v4 >= a2[2])
  {
    uint64_t v5 = sub_75796C(a2, (uint64_t)v110);
  }
  else
  {
    sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v110);
    uint64_t v5 = v4 + 408;
    a2[1] = v4 + 408;
  }
  a2[1] = v5;
  if (a1[133].n128_u8[8])
  {
    if (a1[159].n128_u8[0]) {
      sub_74EB90((uint64_t)a1, (uint64_t)v97);
    }
    else {
      sub_74ED08((uint64_t)a1, (uint64_t)v97);
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2])
    {
      uint64_t v7 = sub_75796C(a2, (uint64_t)v97);
    }
    else
    {
      sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v97);
      uint64_t v7 = v6 + 408;
      a2[1] = v6 + 408;
    }
    a2[1] = v7;
    if (__p)
    {
      int v109 = __p;
      operator delete(__p);
    }
    if (v106)
    {
      int v107 = v106;
      operator delete(v106);
    }
    uint64_t v8 = (void **)v104;
    if (v104)
    {
      uint64_t v9 = v105;
      uint64_t v10 = v104;
      if (v105 != v104)
      {
        do
          uint64_t v9 = sub_4F31D0(v9 - 13);
        while (v9 != v8);
        uint64_t v10 = v104;
      }
      uint64_t v105 = v8;
      operator delete(v10);
    }
    if (v102)
    {
      uint64_t v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      uint64_t v101 = v100;
      operator delete(v100);
    }
    int v11 = v98;
    if (v98)
    {
      uint64_t v12 = (uint64_t)v99;
      uint64_t v13 = v98;
      if (v99 != v98)
      {
        do
          uint64_t v12 = sub_4D4B58(v12 - 160);
        while ((void *)v12 != v11);
        uint64_t v13 = v98;
      }
      uint64_t v99 = v11;
      operator delete(v13);
    }
  }
  if (a1[159].n128_u8[0]) {
    sub_74EE7C((uint64_t)a1, (uint64_t)v97);
  }
  else {
    sub_74EFF0((uint64_t)a1, (uint64_t)v97);
  }
  unint64_t v14 = a2[1];
  if (v14 >= a2[2])
  {
    uint64_t v15 = sub_75796C(a2, (uint64_t)v97);
  }
  else
  {
    sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v97);
    uint64_t v15 = v14 + 408;
    a2[1] = v14 + 408;
  }
  a2[1] = v15;
  if (a1[159].n128_u8[0])
  {
    sub_74F164((uint64_t)a1, (uint64_t)&v64);
    unint64_t v16 = a2[1];
    if (v16 >= a2[2])
    {
      uint64_t v26 = sub_757E08(a2, (uint64_t)&v64);
      long long v27 = v92;
      a2[1] = v26;
      if (v27)
      {
        uint64_t v93 = v27;
        operator delete(v27);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v16 = v64;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)v65;
      *(void *)(v16 + 24) = v66;
      v65[0] = 0;
      v65[1] = 0;
      long long v17 = v69;
      long long v18 = v67;
      *(_OWORD *)(v16 + 48) = v68;
      *(_OWORD *)(v16 + 64) = v17;
      *(_OWORD *)(v16 + 32) = v18;
      uint64_t v19 = v72;
      long long v20 = v71;
      *(_OWORD *)(v16 + 80) = v70;
      *(_OWORD *)(v16 + 96) = v20;
      *(void *)(v16 + 112) = v19;
      *(void *)(v16 + 120) = 0;
      *(void *)(v16 + 128) = 0;
      *(void *)(v16 + 136) = 0;
      *(_OWORD *)(v16 + 120) = *(_OWORD *)v73;
      *(void *)(v16 + 136) = v74;
      *(void *)(v16 + 144) = 0;
      uint64_t v66 = 0;
      v73[0] = 0;
      v73[1] = 0;
      *(void *)(v16 + 152) = 0;
      *(void *)(v16 + 160) = 0;
      *(_OWORD *)(v16 + 144) = *(_OWORD *)v75;
      *(void *)(v16 + 160) = v76;
      v75[1] = 0;
      uint64_t v76 = 0;
      uint64_t v74 = 0;
      v75[0] = 0;
      *(_OWORD *)(v16 + 168) = v77;
      *(_DWORD *)(v16 + 192) = v79;
      if (v79 <= 1) {
        *(void *)(v16 + 184) = v78;
      }
      *(_OWORD *)(v16 + 200) = v80;
      long long v21 = v81;
      uint64_t v22 = v83;
      *(_OWORD *)(v16 + 232) = v82;
      *(_OWORD *)(v16 + 216) = v21;
      *(void *)(v16 + 248) = v22;
      *(void *)(v16 + 256) = 0;
      *(void *)(v16 + 264) = 0;
      *(void *)(v16 + 272) = 0;
      *(_OWORD *)(v16 + 256) = *(_OWORD *)v84;
      *(void *)(v16 + 272) = v85;
      v84[0] = 0;
      v84[1] = 0;
      *(unsigned char *)(v16 + 280) = v86;
      *(void *)(v16 + 288) = 0;
      *(void *)(v16 + 296) = 0;
      *(void *)(v16 + 304) = 0;
      *(_OWORD *)(v16 + 288) = *(_OWORD *)v87;
      *(void *)(v16 + 304) = v88;
      uint64_t v85 = 0;
      v87[0] = 0;
      v87[1] = 0;
      uint64_t v88 = 0;
      long long v23 = *(_OWORD *)v89;
      *(_OWORD *)(v16 + 321) = *(_OWORD *)&v89[9];
      *(_OWORD *)(v16 + 312) = v23;
      long long v24 = v90;
      *(_DWORD *)(v16 + 356) = v91;
      *(_OWORD *)(v16 + 340) = v24;
      *(void *)(v16 + 360) = 0;
      *(void *)(v16 + 368) = 0;
      *(void *)(v16 + 376) = 0;
      *(void *)(v16 + 360) = v92;
      *(void *)(v16 + 368) = v93;
      *(void *)(v16 + 376) = v94;
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      long long v25 = v95;
      *(_DWORD *)(v16 + 400) = v96;
      *(_OWORD *)(v16 + 384) = v25;
      a2[1] = v16 + 408;
    }
    if (v87[0])
    {
      v87[1] = v87[0];
      operator delete(v87[0]);
    }
    uint64_t v28 = (void **)v84[0];
    if (v84[0])
    {
      long long v29 = (void **)v84[1];
      uint64_t v30 = v84[0];
      if (v84[1] != v84[0])
      {
        do
          long long v29 = sub_4F31D0(v29 - 13);
        while (v29 != v28);
        uint64_t v30 = v84[0];
      }
      v84[1] = v28;
      operator delete(v30);
    }
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
    if (v73[0])
    {
      v73[1] = v73[0];
      operator delete(v73[0]);
    }
    uint64_t v31 = v65[0];
    if (v65[0])
    {
      BOOL v32 = v65[1];
      uint64_t v33 = v65[0];
      if (v65[1] != v65[0])
      {
        do
          BOOL v32 = (void *)sub_4D4B58((uint64_t)v32 - 160);
        while (v32 != v31);
        uint64_t v33 = v65[0];
      }
      v65[1] = v31;
      operator delete(v33);
    }
  }
  if (a1[128].n128_u8[15]) {
    sub_74F2E8((uint64_t)a1, (uint64_t)&v64);
  }
  else {
    sub_74F45C((uint64_t)a1, (uint64_t)&v64);
  }
  unint64_t v34 = a2[1];
  if (v34 >= a2[2])
  {
    uint64_t v44 = sub_757E08(a2, (uint64_t)&v64);
    uint64_t v45 = v92;
    a2[1] = v44;
    if (v45)
    {
      uint64_t v93 = v45;
      operator delete(v45);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v34 = v64;
    *(void *)(v34 + 16) = 0;
    *(void *)(v34 + 24) = 0;
    *(void *)(v34 + 8) = 0;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)v65;
    *(void *)(v34 + 24) = v66;
    v65[0] = 0;
    v65[1] = 0;
    long long v35 = v69;
    long long v36 = v67;
    *(_OWORD *)(v34 + 48) = v68;
    *(_OWORD *)(v34 + 64) = v35;
    *(_OWORD *)(v34 + 32) = v36;
    uint64_t v37 = v72;
    long long v38 = v71;
    *(_OWORD *)(v34 + 80) = v70;
    *(_OWORD *)(v34 + 96) = v38;
    *(void *)(v34 + 112) = v37;
    *(void *)(v34 + 120) = 0;
    *(void *)(v34 + 128) = 0;
    *(void *)(v34 + 136) = 0;
    *(_OWORD *)(v34 + 120) = *(_OWORD *)v73;
    *(void *)(v34 + 136) = v74;
    *(void *)(v34 + 144) = 0;
    uint64_t v66 = 0;
    v73[0] = 0;
    v73[1] = 0;
    *(void *)(v34 + 152) = 0;
    *(void *)(v34 + 160) = 0;
    *(_OWORD *)(v34 + 144) = *(_OWORD *)v75;
    *(void *)(v34 + 160) = v76;
    v75[1] = 0;
    uint64_t v76 = 0;
    uint64_t v74 = 0;
    v75[0] = 0;
    *(_OWORD *)(v34 + 168) = v77;
    *(_DWORD *)(v34 + 192) = v79;
    if (v79 <= 1) {
      *(void *)(v34 + 184) = v78;
    }
    *(_OWORD *)(v34 + 200) = v80;
    long long v39 = v81;
    uint64_t v40 = v83;
    *(_OWORD *)(v34 + 232) = v82;
    *(_OWORD *)(v34 + 216) = v39;
    *(void *)(v34 + 248) = v40;
    *(void *)(v34 + 256) = 0;
    *(void *)(v34 + 264) = 0;
    *(void *)(v34 + 272) = 0;
    *(_OWORD *)(v34 + 256) = *(_OWORD *)v84;
    *(void *)(v34 + 272) = v85;
    v84[0] = 0;
    v84[1] = 0;
    *(unsigned char *)(v34 + 280) = v86;
    *(void *)(v34 + 288) = 0;
    *(void *)(v34 + 296) = 0;
    *(void *)(v34 + 304) = 0;
    *(_OWORD *)(v34 + 288) = *(_OWORD *)v87;
    *(void *)(v34 + 304) = v88;
    uint64_t v85 = 0;
    v87[0] = 0;
    v87[1] = 0;
    uint64_t v88 = 0;
    long long v41 = *(_OWORD *)v89;
    *(_OWORD *)(v34 + 321) = *(_OWORD *)&v89[9];
    *(_OWORD *)(v34 + 312) = v41;
    long long v42 = v90;
    *(_DWORD *)(v34 + 356) = v91;
    *(_OWORD *)(v34 + 340) = v42;
    *(void *)(v34 + 360) = 0;
    *(void *)(v34 + 368) = 0;
    *(void *)(v34 + 376) = 0;
    *(void *)(v34 + 360) = v92;
    *(void *)(v34 + 368) = v93;
    *(void *)(v34 + 376) = v94;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    long long v43 = v95;
    *(_DWORD *)(v34 + 400) = v96;
    *(_OWORD *)(v34 + 384) = v43;
    a2[1] = v34 + 408;
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  uint64_t v46 = (void **)v84[0];
  if (v84[0])
  {
    uint64_t v47 = (void **)v84[1];
    uint64_t v48 = v84[0];
    if (v84[1] != v84[0])
    {
      do
        uint64_t v47 = sub_4F31D0(v47 - 13);
      while (v47 != v46);
      uint64_t v48 = v84[0];
    }
    v84[1] = v46;
    operator delete(v48);
  }
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  uint64_t v49 = v65[0];
  if (v65[0])
  {
    uint64_t v50 = v65[1];
    __n128 v51 = v65[0];
    if (v65[1] != v65[0])
    {
      do
        uint64_t v50 = (void *)sub_4D4B58((uint64_t)v50 - 160);
      while (v50 != v49);
      __n128 v51 = v65[0];
    }
    v65[1] = v49;
    operator delete(v51);
  }
  if (__p)
  {
    int v109 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    int v107 = v106;
    operator delete(v106);
  }
  size_t v52 = (void **)v104;
  if (v104)
  {
    int v53 = v105;
    size_t v54 = v104;
    if (v105 != v104)
    {
      do
        int v53 = sub_4F31D0(v53 - 13);
      while (v53 != v52);
      size_t v54 = v104;
    }
    uint64_t v105 = v52;
    operator delete(v54);
  }
  if (v102)
  {
    uint64_t v103 = v102;
    operator delete(v102);
  }
  if (v100)
  {
    uint64_t v101 = v100;
    operator delete(v100);
  }
  unint64_t v55 = v98;
  if (v98)
  {
    uint64_t v56 = (uint64_t)v99;
    uint64_t v57 = v98;
    if (v99 != v98)
    {
      do
        uint64_t v56 = sub_4D4B58(v56 - 160);
      while ((void *)v56 != v55);
      uint64_t v57 = v98;
    }
    uint64_t v99 = v55;
    operator delete(v57);
  }
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  if (v119)
  {
    unint64_t v120 = v119;
    operator delete(v119);
  }
  uint64_t v58 = (void **)v117;
  if (v117)
  {
    int v59 = v118;
    uint64_t v60 = v117;
    if (v118 != v117)
    {
      do
        int v59 = sub_4F31D0(v59 - 13);
      while (v59 != v58);
      uint64_t v60 = v117;
    }
    int v118 = v58;
    operator delete(v60);
  }
  if (v115)
  {
    long long v116 = v115;
    operator delete(v115);
  }
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
  std::string::size_type v61 = v111;
  if (v111)
  {
    uint64_t v62 = (uint64_t)v112;
    long long v63 = v111;
    if (v112 != v111)
    {
      do
        uint64_t v62 = sub_4D4B58(v62 - 160);
      while ((void *)v62 != v61);
      long long v63 = v111;
    }
    int v112 = v61;
    operator delete(v63);
  }
}

void sub_74E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_639B78(&a9);
  sub_639B78(&a60);
  sub_639B78(&STACK[0x330]);
  sub_591DFC(v60);
  _Unwind_Resume(a1);
}

void sub_74E8A8(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_74E8BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 2552;
  if (sub_62D3D4((unsigned char *)(a1 + 2552)))
  {
    int v5 = *(unsigned __int8 *)(a1 + 4074);
    BOOL v6 = *(_DWORD *)(a1 + 4088) == 1;
    int v7 = *(unsigned __int8 *)(a1 + 2266);
    int v8 = *(unsigned __int8 *)(a1 + 2265);
    int v9 = *(unsigned __int8 *)(a1 + 2268);
    BOOL v10 = sub_62D444(v4);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 2545);
    unint64_t v12 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
    int v13 = 0x1000000;
    if (!v10 || !v6) {
      int v13 = 0;
    }
    LODWORD(v35) = v13 | (v7 << 16) | (v8 << 8) | v9;
    WORD2(v35) = (v12 | (v11 << 32)) >> 32;
    sub_762C0C(a1, v5, &v35, (uint64_t)&v36);
  }
  else
  {
    BOOL v14 = *(_DWORD *)(a1 + 4088) == 1;
    int v15 = *(unsigned __int8 *)(a1 + 2266);
    int v16 = *(unsigned __int8 *)(a1 + 2265);
    int v17 = *(unsigned __int8 *)(a1 + 2268);
    BOOL v18 = sub_62D444(v4);
    uint64_t v19 = *(unsigned __int8 *)(a1 + 2545);
    unint64_t v20 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
    int v21 = 0x1000000;
    if (!v18 || !v14) {
      int v21 = 0;
    }
    LODWORD(v35) = v21 | (v15 << 16) | (v16 << 8) | v17;
    WORD2(v35) = (v20 | (v19 << 32)) >> 32;
    sub_761950((void *)a1, (uint64_t)&v35, (uint64_t)&v36);
  }
  sub_639258(a2, (uint64_t)&v36, 0, 0, 1);
  if (sub_62D404(v4) && *(unsigned char *)(a1 + 3963))
  {
    int v22 = *(_DWORD *)(a1 + 4088);
    BOOL v23 = sub_62D444(v4);
    if (v22 == 1 && v23)
    {
      int v25 = 61;
    }
    else
    {
      if (*(unsigned char *)(a1 + 2266)) {
        int v33 = 54;
      }
      else {
        int v33 = 53;
      }
      if (*(unsigned char *)(a1 + 2266)) {
        int v34 = 55;
      }
      else {
        int v34 = 56;
      }
      if (*(unsigned char *)(a1 + 2265)) {
        int v25 = v34;
      }
      else {
        int v25 = v33;
      }
    }
  }
  else
  {
    int v25 = 53;
  }
  sub_63841C(a2, v25);
  uint64_t v35 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v35);
  sub_6396EC(a2, *(unsigned char *)(a1 + 2545));
  sub_6389F0(a2, *(_DWORD *)(a1 + 4088));
  uint64_t v26 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  long long v27 = v39;
  if (v39)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      long long v27 = v28;
    }
    while (v28);
  }
  long long v29 = __p;
  long long __p = 0;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = (void **)v36;
  if (v36)
  {
    uint64_t v31 = v37;
    BOOL v32 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v31 - 1) < 0) {
          operator delete(*(v31 - 3));
        }
        v31 -= 3;
      }
      while (v31 != v30);
      BOOL v32 = v36;
    }
    uint64_t v37 = v30;
    operator delete(v32);
  }
}

void sub_74EB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_74EB90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765DCC(a1 + 2168, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 65);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_74ECCC(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74ECE0(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74ECF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_74ED08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765908(a1, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 64);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_74EE40(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74EE54(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74EE68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_74EE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7662B4((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 66);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_74EFB4(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74EFC8(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74EFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_74EFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766114(a1, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 67);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_74F128(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74F13C(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74F150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

double sub_74F164@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7663E4(*(unsigned __int8 *)(a1 + 2054), (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 68);
  unint64_t v12 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v12);
  *(void *)&double result = sub_638638(a2, (long long *)(a1 + 2408)).n128_u64[0];
  return result;
}

void sub_74F2AC(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74F2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_74F2D4(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_74F2E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766748((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 69);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_74F420(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74F434(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74F448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_74F45C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766618((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 69);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_74F594(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74F5A8(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_74F5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_74F5D0(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = 2267;
  if (a2) {
    uint64_t v6 = 2268;
  }
  if (*(unsigned char *)(a1 + v6))
  {
    sub_7501B0(a1, a2, a3);
  }
  else
  {
    uint64_t v137 = 0;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v134 = 0u;
    int v138 = 1065353216;
    char v139 = 1;
    sub_5A9D64((uint64_t)a3);
    if ((a2 & 1) != 0 || !*(unsigned char *)(a1 + 4092))
    {
      sub_63553C((uint64_t)&xmmword_25AEE00, (uint64_t)v121);
      uint64_t v10 = v134;
      if ((void)v134)
      {
        uint64_t v11 = *((void *)&v134 + 1);
        unint64_t v12 = (void *)v134;
        if (*((void *)&v134 + 1) != (void)v134)
        {
          do
          {
            if (*(char *)(v11 - 1) < 0) {
              operator delete(*(void **)(v11 - 24));
            }
            v11 -= 24;
          }
          while (v11 != v10);
          unint64_t v12 = (void *)v134;
        }
        *((void *)&v134 + 1) = v10;
        operator delete(v12);
      }
      long long v134 = *(_OWORD *)v121;
      *(void *)&long long v135 = v122;
      v121[1] = 0;
      uint64_t v122 = 0;
      v121[0] = 0;
      if (v137)
      {
        int v13 = (void *)*((void *)&v136 + 1);
        if (*((void *)&v136 + 1))
        {
          do
          {
            BOOL v14 = (void *)*v13;
            sub_4F4B48((uint64_t)(v13 + 2));
            operator delete(v13);
            int v13 = v14;
          }
          while (v14);
        }
        *((void *)&v136 + 1) = 0;
        uint64_t v15 = v136;
        if ((void)v136)
        {
          uint64_t v16 = 0;
          do
            *(void *)(*((void *)&v135 + 1) + 8 * v16++) = 0;
          while (v15 != v16);
        }
        uint64_t v137 = 0;
      }
      int v17 = __p;
      long long __p = 0;
      BOOL v18 = (void *)*((void *)&v135 + 1);
      *((void *)&v135 + 1) = v17;
      if (v18) {
        operator delete(v18);
      }
      unint64_t v19 = v124;
      unint64_t v20 = v125;
      unint64_t v124 = 0;
      *((void *)&v136 + 1) = v125;
      uint64_t v137 = v126;
      int v138 = v127;
      *(void *)&long long v136 = v19;
      if (v126)
      {
        unint64_t v21 = v125[1];
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v21 >= v19) {
            v21 %= v19;
          }
        }
        else
        {
          v21 &= v19 - 1;
        }
        *(void *)(*((void *)&v135 + 1) + 8 * v21) = (char *)&v136 + 8;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        char v139 = v128;
      }
      else
      {
        char v139 = v128;
        if (v125)
        {
          do
          {
            int v22 = (void *)*v20;
            sub_4F4B48((uint64_t)(v20 + 2));
            operator delete(v20);
            unint64_t v20 = v22;
          }
          while (v22);
        }
      }
      BOOL v23 = __p;
      long long __p = 0;
      if (v23) {
        operator delete(v23);
      }
      long long v24 = (void **)v121[0];
      if (v121[0])
      {
        int v25 = (void **)v121[1];
        uint64_t v26 = v121[0];
        if (v121[1] != v121[0])
        {
          do
          {
            if (*((char *)v25 - 1) < 0) {
              operator delete(*(v25 - 3));
            }
            v25 -= 3;
          }
          while (v25 != v24);
          uint64_t v26 = v121[0];
        }
        v121[1] = v24;
        operator delete(v26);
      }
      sub_63841C((uint64_t)a3, 26);
      int v27 = 0;
    }
    else
    {
      sub_6352AC((uint64_t)v121, (uint64_t)&qword_25AEAB8);
      uint64_t v7 = v134;
      if ((void)v134)
      {
        uint64_t v8 = *((void *)&v134 + 1);
        int v9 = (void *)v134;
        if (*((void *)&v134 + 1) != (void)v134)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0) {
              operator delete(*(void **)(v8 - 24));
            }
            v8 -= 24;
          }
          while (v8 != v7);
          int v9 = (void *)v134;
        }
        *((void *)&v134 + 1) = v7;
        operator delete(v9);
      }
      long long v134 = *(_OWORD *)v121;
      *(void *)&long long v135 = v122;
      v121[1] = 0;
      uint64_t v122 = 0;
      v121[0] = 0;
      if (v137)
      {
        uint64_t v28 = (void *)*((void *)&v136 + 1);
        if (*((void *)&v136 + 1))
        {
          do
          {
            long long v29 = (void *)*v28;
            sub_4F4B48((uint64_t)(v28 + 2));
            operator delete(v28);
            uint64_t v28 = v29;
          }
          while (v29);
        }
        *((void *)&v136 + 1) = 0;
        uint64_t v30 = v136;
        if ((void)v136)
        {
          uint64_t v31 = 0;
          do
            *(void *)(*((void *)&v135 + 1) + 8 * v31++) = 0;
          while (v30 != v31);
        }
        uint64_t v137 = 0;
      }
      BOOL v32 = __p;
      long long __p = 0;
      int v33 = (void *)*((void *)&v135 + 1);
      *((void *)&v135 + 1) = v32;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v34 = v124;
      uint64_t v35 = v125;
      unint64_t v124 = 0;
      *((void *)&v136 + 1) = v125;
      uint64_t v137 = v126;
      int v138 = v127;
      *(void *)&long long v136 = v34;
      if (v126)
      {
        unint64_t v36 = v125[1];
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v36 >= v34) {
            v36 %= v34;
          }
        }
        else
        {
          v36 &= v34 - 1;
        }
        *(void *)(*((void *)&v135 + 1) + 8 * v36) = (char *)&v136 + 8;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        char v139 = v128;
      }
      else
      {
        char v139 = v128;
        if (v125)
        {
          do
          {
            uint64_t v37 = (void *)*v35;
            sub_4F4B48((uint64_t)(v35 + 2));
            operator delete(v35);
            uint64_t v35 = v37;
          }
          while (v37);
        }
      }
      long long v38 = __p;
      long long __p = 0;
      if (v38) {
        operator delete(v38);
      }
      long long v39 = (void **)v121[0];
      if (v121[0])
      {
        uint64_t v40 = (void **)v121[1];
        long long v41 = v121[0];
        if (v121[1] != v121[0])
        {
          do
          {
            if (*((char *)v40 - 1) < 0) {
              operator delete(*(v40 - 3));
            }
            v40 -= 3;
          }
          while (v40 != v39);
          long long v41 = v121[0];
        }
        v121[1] = v39;
        operator delete(v41);
      }
      sub_63841C((uint64_t)a3, 28);
      int v27 = 1;
    }
    sub_638E00((uint64_t)a3, (uint64_t)&v134);
    sub_6389F0((uint64_t)a3, *(_DWORD *)(a1 + 4088) - (a2 ^ 1));
    uint64_t v42 = 2265;
    if (a2)
    {
      uint64_t v42 = 2266;
      int v43 = 3;
    }
    else
    {
      int v43 = 1;
    }
    if (*(unsigned char *)(a1 + v42)) {
      int v44 = 2;
    }
    else {
      int v44 = v43;
    }
    sub_6389F8((uint64_t)a3, v44);
    sub_63553C((uint64_t)&xmmword_25AEE00, (uint64_t)&v130);
    uint64_t v119 = 0;
    unint64_t v120 = 0;
    sub_6370D4(v121, &v130, 1, &v119);
    uint64_t v45 = v120;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    sub_638778(a3, (uint64_t)v121);
    if ((v27 | a2) == 1 && *(unsigned char *)(a1 + 2264))
    {
      LODWORD(v110) = 19;
      sub_6387E4((uint64_t)a3, (int *)&v110);
      sub_63553C((uint64_t)&dword_25AE878, (uint64_t)&v115);
      uint64_t v108 = 0;
      int v109 = 0;
      sub_6370D4(&v110, &v115, 1, &v108);
      uint64_t v46 = v109;
      if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      sub_638778(a3, (uint64_t)&v110);
      LODWORD(v99) = 18;
      sub_6387E4((uint64_t)a3, (int *)&v99);
      uint64_t v47 = 1116;
      if (v27) {
        uint64_t v47 = 1128;
      }
      sub_6352AC((uint64_t)&v104, (uint64_t)&word_25AC820[v47]);
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      sub_6370D4(&v99, &v104, 1, &v97);
      uint64_t v48 = v98;
      if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      sub_638778(a3, (uint64_t)&v99);
      uint64_t v49 = 2272;
      if (a2) {
        uint64_t v49 = 2408;
      }
      sub_638638((uint64_t)a3, (long long *)(a1 + v49));
      uint64_t v50 = 2112;
      if (v27) {
        uint64_t v50 = 2088;
      }
      __n128 v51 = sub_63874C((uint64_t)a3, (__n128 *)(a1 + v50));
      size_t v52 = v103;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v52->__on_zero_shared)(v52, v51);
        std::__shared_weak_count::__release_weak(v52);
      }
      int v53 = v102;
      if (v102)
      {
        do
        {
          size_t v54 = (void *)*v53;
          sub_4F4B48((uint64_t)(v53 + 2));
          operator delete(v53);
          int v53 = v54;
        }
        while (v54);
      }
      unint64_t v55 = v101;
      uint64_t v101 = 0;
      if (v55) {
        operator delete(v55);
      }
      uint64_t v56 = (void **)v99;
      if (v99)
      {
        uint64_t v57 = v100;
        uint64_t v58 = v99;
        if (v100 != v99)
        {
          do
          {
            if (*((char *)v57 - 1) < 0) {
              operator delete(*(v57 - 3));
            }
            v57 -= 3;
          }
          while (v57 != v56);
          uint64_t v58 = v99;
        }
        uint64_t v100 = v56;
        operator delete(v58);
      }
      int v59 = v107;
      if (v107)
      {
        do
        {
          uint64_t v60 = (void *)*v59;
          sub_4F4B48((uint64_t)(v59 + 2));
          operator delete(v59);
          int v59 = v60;
        }
        while (v60);
      }
      std::string::size_type v61 = v106;
      uint64_t v106 = 0;
      if (v61) {
        operator delete(v61);
      }
      uint64_t v62 = (void **)v104;
      if (v104)
      {
        long long v63 = v105;
        int v64 = v104;
        if (v105 != v104)
        {
          do
          {
            if (*((char *)v63 - 1) < 0) {
              operator delete(*(v63 - 3));
            }
            v63 -= 3;
          }
          while (v63 != v62);
          int v64 = v104;
        }
        uint64_t v105 = v62;
        operator delete(v64);
      }
      long long v65 = v114;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v65->__on_zero_shared)(v65, v51);
        std::__shared_weak_count::__release_weak(v65);
      }
      uint64_t v66 = v113;
      if (v113)
      {
        do
        {
          long long v67 = (void *)*v66;
          sub_4F4B48((uint64_t)(v66 + 2));
          operator delete(v66);
          uint64_t v66 = v67;
        }
        while (v67);
      }
      long long v68 = v112;
      int v112 = 0;
      if (v68) {
        operator delete(v68);
      }
      long long v69 = (void **)v110;
      if (v110)
      {
        long long v70 = v111;
        long long v71 = v110;
        if (v111 != v110)
        {
          do
          {
            if (*((char *)v70 - 1) < 0) {
              operator delete(*(v70 - 3));
            }
            v70 -= 3;
          }
          while (v70 != v69);
          long long v71 = v110;
        }
        unint64_t v111 = v69;
        operator delete(v71);
      }
      uint64_t v72 = v118;
      if (v118)
      {
        do
        {
          uint64_t v73 = (void *)*v72;
          sub_4F4B48((uint64_t)(v72 + 2));
          operator delete(v72);
          uint64_t v72 = v73;
        }
        while (v73);
      }
      uint64_t v74 = v117;
      long long v117 = 0;
      if (v74) {
        operator delete(v74);
      }
      uint64_t v75 = (void **)v115;
      if (v115)
      {
        uint64_t v76 = v116;
        long long v77 = v115;
        if (v116 != v115)
        {
          do
          {
            if (*((char *)v76 - 1) < 0) {
              operator delete(*(v76 - 3));
            }
            v76 -= 3;
          }
          while (v76 != v75);
          long long v77 = v115;
        }
        long long v116 = v75;
        operator delete(v77);
      }
    }
    uint64_t v78 = v129;
    if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    unsigned int v79 = v125;
    if (v125)
    {
      do
      {
        long long v80 = (void *)*v79;
        sub_4F4B48((uint64_t)(v79 + 2));
        operator delete(v79);
        unsigned int v79 = v80;
      }
      while (v80);
    }
    long long v81 = __p;
    long long __p = 0;
    if (v81) {
      operator delete(v81);
    }
    long long v82 = (void **)v121[0];
    if (v121[0])
    {
      uint64_t v83 = (void **)v121[1];
      __darwin_ct_rune_t v84 = v121[0];
      if (v121[1] != v121[0])
      {
        do
        {
          if (*((char *)v83 - 1) < 0) {
            operator delete(*(v83 - 3));
          }
          v83 -= 3;
        }
        while (v83 != v82);
        __darwin_ct_rune_t v84 = v121[0];
      }
      v121[1] = v82;
      operator delete(v84);
    }
    uint64_t v85 = v133;
    if (v133)
    {
      do
      {
        char v86 = (void *)*v85;
        sub_4F4B48((uint64_t)(v85 + 2));
        operator delete(v85);
        uint64_t v85 = v86;
      }
      while (v86);
    }
    size_t v87 = v132;
    v132 = 0;
    if (v87) {
      operator delete(v87);
    }
    uint64_t v88 = v130;
    if (v130)
    {
      uint64_t v89 = v131;
      long long v90 = v130;
      if (v131 != v130)
      {
        do
        {
          if (*((char *)v89 - 1) < 0) {
            operator delete(*(v89 - 3));
          }
          v89 -= 3;
        }
        while (v89 != v88);
        long long v90 = v130;
      }
      unint64_t v131 = v88;
      operator delete(v90);
    }
    int v91 = (void *)*((void *)&v136 + 1);
    if (*((void *)&v136 + 1))
    {
      do
      {
        uint64_t v92 = (void *)*v91;
        sub_4F4B48((uint64_t)(v91 + 2));
        operator delete(v91);
        int v91 = v92;
      }
      while (v92);
    }
    uint64_t v93 = (void *)*((void *)&v135 + 1);
    *((void *)&v135 + 1) = 0;
    if (v93) {
      operator delete(v93);
    }
    uint64_t v94 = v134;
    if ((void)v134)
    {
      uint64_t v95 = *((void *)&v134 + 1);
      int v96 = (void *)v134;
      if (*((void *)&v134 + 1) != (void)v134)
      {
        do
        {
          if (*(char *)(v95 - 1) < 0) {
            operator delete(*(void **)(v95 - 24));
          }
          v95 -= 24;
        }
        while (v95 != v94);
        int v96 = (void *)v134;
      }
      *((void *)&v134 + 1) = v94;
      operator delete(v96);
    }
  }
}

void sub_7500CC(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  sub_4D4880((void **)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_7501B0(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = 2144;
  if (a2) {
    uint64_t v6 = 2168;
  }
  sub_761C80((const std::string *)(a1 + v6), (uint64_t)&v192);
  sub_5A9D64((uint64_t)a3);
  sub_63841C((uint64_t)a3, 27);
  sub_638E00((uint64_t)a3, (uint64_t)&v192);
  sub_6389F0((uint64_t)a3, *(_DWORD *)(a1 + 4088) - (a2 ^ 1));
  uint64_t v7 = 2265;
  if (a2)
  {
    uint64_t v7 = 2266;
    int v8 = 3;
  }
  else
  {
    int v8 = 1;
  }
  if (*(unsigned char *)(a1 + v7)) {
    int v9 = 2;
  }
  else {
    int v9 = v8;
  }
  sub_6389F8((uint64_t)a3, v9);
  int v10 = byte_25AED6F;
  if (byte_25AED6F >= 0) {
    size_t v11 = byte_25AED6F;
  }
  else {
    size_t v11 = qword_25AED60;
  }
  int v12 = byte_25ADA37;
  if (byte_25ADA37 >= 0) {
    size_t v13 = byte_25ADA37;
  }
  else {
    size_t v13 = qword_25ADA28;
  }
  unint64_t v14 = v13 + v11;
  if (v13 + v11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 <= 0x16)
  {
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v184) = v13 + v11;
    if (!v11) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v43 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v43 = v14 | 7;
  }
  uint64_t v44 = v43 + 1;
  p_dst = (void **)operator new(v43 + 1);
  unint64_t v184 = v44 | 0x8000000000000000;
  std::string __dst = p_dst;
  uint64_t v183 = (void **)(v13 + v11);
  if (v11)
  {
LABEL_18:
    if (v10 >= 0) {
      uint64_t v16 = &qword_25AED58;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25AED58;
    }
    memmove(p_dst, v16, v11);
  }
LABEL_22:
  int v17 = (char *)p_dst + v11;
  if (v13)
  {
    if (v12 >= 0) {
      BOOL v18 = &qword_25ADA20;
    }
    else {
      BOOL v18 = (uint64_t *)qword_25ADA20;
    }
    memmove(v17, v18, v13);
  }
  v17[v13] = 0;
  sub_6352AC((uint64_t)&v188, (uint64_t)&__dst);
  if (SHIBYTE(v184) < 0) {
    operator delete(__dst);
  }
  uint64_t v19 = 2216;
  if (a2) {
    uint64_t v19 = 2240;
  }
  sub_6358A0((uint64_t)&v188, &xmmword_25AE9B0, (const std::string *)(a1 + v19));
  long long v181 = 0;
  uint64_t v180 = 0;
  sub_6370D4(&__dst, &v188, 1, &v180);
  unint64_t v20 = v181;
  if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  sub_638778(a3, (uint64_t)&__dst);
  if (a2)
  {
    LODWORD(v171) = 19;
    sub_6387E4((uint64_t)a3, (int *)&v171);
    sub_63553C((uint64_t)&dword_25AE878, (uint64_t)&v176);
    int v170 = 0;
    uint64_t v169 = 0;
    sub_6370D4(&v171, &v176, 1, &v169);
    unint64_t v21 = v170;
    if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    sub_638778(a3, (uint64_t)&v171);
    LODWORD(v160) = 18;
    sub_6387E4((uint64_t)a3, (int *)&v160);
    sub_6352AC((uint64_t)&v165, (uint64_t)&unk_25AD0D8);
    unint64_t v159 = 0;
    uint64_t v158 = 0;
    sub_6370D4(&v160, &v165, 1, &v158);
    int v22 = v159;
    if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    sub_638778(a3, (uint64_t)&v160);
    LODWORD(v149) = 19;
    sub_6387E4((uint64_t)a3, (int *)&v149);
    sub_63553C((uint64_t)&dword_25AE890, (uint64_t)&v154);
    uint64_t v147 = 0;
    char v148 = 0;
    sub_6370D4(&v149, &v154, 1, &v147);
    BOOL v23 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    sub_638778(a3, (uint64_t)&v149);
    LODWORD(__p) = 18;
    sub_6387E4((uint64_t)a3, (int *)&__p);
    int v24 = byte_25AE217;
    if (byte_25AE217 >= 0) {
      size_t v25 = byte_25AE217;
    }
    else {
      size_t v25 = *((void *)&xmmword_25AE200 + 1);
    }
    int v26 = byte_25ADA07;
    if (byte_25ADA07 >= 0) {
      size_t v27 = byte_25ADA07;
    }
    else {
      size_t v27 = qword_25AD9F8;
    }
    unint64_t v28 = v27 + v25;
    if (v27 + v25 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v28 > 0x16)
    {
      uint64_t v45 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v45 = v28 | 7;
      }
      uint64_t v46 = v45 + 1;
      p_p = (char *)operator new(v45 + 1);
      int v138 = (void **)(v27 + v25);
      unint64_t v139 = v46 | 0x8000000000000000;
      long long __p = p_p;
      if (!v25) {
        goto LABEL_57;
      }
    }
    else
    {
      int v138 = 0;
      unint64_t v139 = 0;
      long long __p = 0;
      p_p = (char *)&__p;
      HIBYTE(v139) = v27 + v25;
      if (!v25)
      {
LABEL_57:
        uint64_t v31 = &p_p[v25];
        if (v27)
        {
          if (v26 >= 0) {
            BOOL v32 = &qword_25AD9F0;
          }
          else {
            BOOL v32 = (uint64_t *)qword_25AD9F0;
          }
          memmove(v31, v32, v27);
        }
        v31[v27] = 0;
        sub_6352AC((uint64_t)&v143, (uint64_t)&__p);
        if (SHIBYTE(v139) < 0) {
          operator delete(__p);
        }
        uint64_t v135 = 0;
        long long v136 = 0;
        sub_6370D4(&__p, &v143, 1, &v135);
        int v33 = v136;
        if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        sub_638778(a3, (uint64_t)&__p);
        LODWORD(v126) = 17;
        sub_6387E4((uint64_t)a3, (int *)&v126);
        sub_63553C((uint64_t)&unk_25AEE90, (uint64_t)&v131);
        uint64_t v124 = 0;
        uint64_t v125 = 0;
        sub_6370D4(&v126, &v131, 1, &v124);
        unint64_t v34 = v125;
        if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        sub_638778(a3, (uint64_t)&v126);
        sub_638638((uint64_t)a3, (long long *)(a1 + 2408));
        __n128 v35 = sub_63874C((uint64_t)a3, (__n128 *)(a1 + 2112));
        unint64_t v36 = v130;
        if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v35);
          std::__shared_weak_count::__release_weak(v36);
        }
        uint64_t v37 = v129;
        if (v129)
        {
          do
          {
            long long v38 = (void *)*v37;
            sub_4F4B48((uint64_t)(v37 + 2));
            operator delete(v37);
            uint64_t v37 = v38;
          }
          while (v38);
        }
        long long v39 = v128;
        char v128 = 0;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v40 = (void **)v126;
        if (v126)
        {
          long long v41 = v127;
          uint64_t v42 = v126;
          if (v127 != v126)
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 3;
            }
            while (v41 != v40);
            uint64_t v42 = v126;
          }
          int v127 = v40;
          operator delete(v42);
        }
        uint64_t v47 = v134;
        if (v134)
        {
          do
          {
            uint64_t v48 = (void *)*v47;
            sub_4F4B48((uint64_t)(v47 + 2));
            operator delete(v47);
            uint64_t v47 = v48;
          }
          while (v48);
        }
        uint64_t v49 = v133;
        uint64_t v133 = 0;
        if (v49) {
          operator delete(v49);
        }
        uint64_t v50 = (void **)v131;
        if (v131)
        {
          __n128 v51 = v132;
          size_t v52 = v131;
          if (v132 != v131)
          {
            do
            {
              if (*((char *)v51 - 1) < 0) {
                operator delete(*(v51 - 3));
              }
              v51 -= 3;
            }
            while (v51 != v50);
            size_t v52 = v131;
          }
          v132 = v50;
          operator delete(v52);
        }
        int v53 = v142;
        if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v53->__on_zero_shared)(v53, v35);
          std::__shared_weak_count::__release_weak(v53);
        }
        size_t v54 = v141;
        if (v141)
        {
          do
          {
            unint64_t v55 = (void *)*v54;
            sub_4F4B48((uint64_t)(v54 + 2));
            operator delete(v54);
            size_t v54 = v55;
          }
          while (v55);
        }
        uint64_t v56 = v140;
        int v140 = 0;
        if (v56) {
          operator delete(v56);
        }
        uint64_t v57 = (void **)__p;
        if (__p)
        {
          uint64_t v58 = v138;
          int v59 = __p;
          if (v138 != __p)
          {
            do
            {
              if (*((char *)v58 - 1) < 0) {
                operator delete(*(v58 - 3));
              }
              v58 -= 3;
            }
            while (v58 != v57);
            int v59 = __p;
          }
          int v138 = v57;
          operator delete(v59);
        }
        uint64_t v60 = v146;
        if (v146)
        {
          do
          {
            std::string::size_type v61 = (void *)*v60;
            sub_4F4B48((uint64_t)(v60 + 2));
            operator delete(v60);
            uint64_t v60 = v61;
          }
          while (v61);
        }
        uint64_t v62 = v145;
        v145 = 0;
        if (v62) {
          operator delete(v62);
        }
        long long v63 = (void **)v143;
        if (v143)
        {
          int v64 = v144;
          long long v65 = v143;
          if (v144 != v143)
          {
            do
            {
              if (*((char *)v64 - 1) < 0) {
                operator delete(*(v64 - 3));
              }
              v64 -= 3;
            }
            while (v64 != v63);
            long long v65 = v143;
          }
          unint64_t v144 = v63;
          operator delete(v65);
        }
        uint64_t v66 = v153;
        if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v35);
          std::__shared_weak_count::__release_weak(v66);
        }
        long long v67 = v152;
        if (v152)
        {
          do
          {
            long long v68 = (void *)*v67;
            sub_4F4B48((uint64_t)(v67 + 2));
            operator delete(v67);
            long long v67 = v68;
          }
          while (v68);
        }
        long long v69 = v151;
        uint64_t v151 = 0;
        if (v69) {
          operator delete(v69);
        }
        long long v70 = (void **)v149;
        if (v149)
        {
          long long v71 = v150;
          uint64_t v72 = v149;
          if (v150 != v149)
          {
            do
            {
              if (*((char *)v71 - 1) < 0) {
                operator delete(*(v71 - 3));
              }
              v71 -= 3;
            }
            while (v71 != v70);
            uint64_t v72 = v149;
          }
          std::string::size_type v150 = v70;
          operator delete(v72);
        }
        uint64_t v73 = v157;
        if (v157)
        {
          do
          {
            uint64_t v74 = (void *)*v73;
            sub_4F4B48((uint64_t)(v73 + 2));
            operator delete(v73);
            uint64_t v73 = v74;
          }
          while (v74);
        }
        uint64_t v75 = v156;
        long long v156 = 0;
        if (v75) {
          operator delete(v75);
        }
        uint64_t v76 = (void **)v154;
        if (v154)
        {
          long long v77 = v155;
          uint64_t v78 = v154;
          if (v155 != v154)
          {
            do
            {
              if (*((char *)v77 - 1) < 0) {
                operator delete(*(v77 - 3));
              }
              v77 -= 3;
            }
            while (v77 != v76);
            uint64_t v78 = v154;
          }
          char v155 = v76;
          operator delete(v78);
        }
        unsigned int v79 = v164;
        if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v79->__on_zero_shared)(v79, v35);
          std::__shared_weak_count::__release_weak(v79);
        }
        long long v80 = v163;
        if (v163)
        {
          do
          {
            long long v81 = (void *)*v80;
            sub_4F4B48((uint64_t)(v80 + 2));
            operator delete(v80);
            long long v80 = v81;
          }
          while (v81);
        }
        long long v82 = v162;
        uint64_t v162 = 0;
        if (v82) {
          operator delete(v82);
        }
        uint64_t v83 = (void **)v160;
        if (v160)
        {
          __darwin_ct_rune_t v84 = v161;
          uint64_t v85 = v160;
          if (v161 != v160)
          {
            do
            {
              if (*((char *)v84 - 1) < 0) {
                operator delete(*(v84 - 3));
              }
              v84 -= 3;
            }
            while (v84 != v83);
            uint64_t v85 = v160;
          }
          uint64_t v161 = v83;
          operator delete(v85);
        }
        char v86 = v168;
        if (v168)
        {
          do
          {
            size_t v87 = (void *)*v86;
            sub_4F4B48((uint64_t)(v86 + 2));
            operator delete(v86);
            char v86 = v87;
          }
          while (v87);
        }
        uint64_t v88 = v167;
        long long v167 = 0;
        if (v88) {
          operator delete(v88);
        }
        uint64_t v89 = (void **)v165;
        if (v165)
        {
          long long v90 = v166;
          int v91 = v165;
          if (v166 != v165)
          {
            do
            {
              if (*((char *)v90 - 1) < 0) {
                operator delete(*(v90 - 3));
              }
              v90 -= 3;
            }
            while (v90 != v89);
            int v91 = v165;
          }
          uint64_t v166 = v89;
          operator delete(v91);
        }
        uint64_t v92 = v175;
        if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v92->__on_zero_shared)(v92, v35);
          std::__shared_weak_count::__release_weak(v92);
        }
        uint64_t v93 = v174;
        if (v174)
        {
          do
          {
            uint64_t v94 = (void *)*v93;
            sub_4F4B48((uint64_t)(v93 + 2));
            operator delete(v93);
            uint64_t v93 = v94;
          }
          while (v94);
        }
        uint64_t v95 = v173;
        long long v173 = 0;
        if (v95) {
          operator delete(v95);
        }
        int v96 = (void **)v171;
        if (v171)
        {
          uint64_t v97 = v172;
          uint64_t v98 = v171;
          if (v172 != v171)
          {
            do
            {
              if (*((char *)v97 - 1) < 0) {
                operator delete(*(v97 - 3));
              }
              v97 -= 3;
            }
            while (v97 != v96);
            uint64_t v98 = v171;
          }
          unint64_t v172 = v96;
          operator delete(v98);
        }
        uint64_t v99 = v179;
        if (v179)
        {
          do
          {
            uint64_t v100 = (void *)*v99;
            sub_4F4B48((uint64_t)(v99 + 2));
            operator delete(v99);
            uint64_t v99 = v100;
          }
          while (v100);
        }
        uint64_t v101 = v178;
        int v178 = 0;
        if (v101) {
          operator delete(v101);
        }
        uint64_t v102 = (void **)v176;
        if (v176)
        {
          uint64_t v103 = v177;
          uint64_t v104 = v176;
          if (v177 != v176)
          {
            do
            {
              if (*((char *)v103 - 1) < 0) {
                operator delete(*(v103 - 3));
              }
              v103 -= 3;
            }
            while (v103 != v102);
            uint64_t v104 = v176;
          }
          long long v177 = v102;
          operator delete(v104);
        }
        goto LABEL_213;
      }
    }
    if (v24 >= 0) {
      uint64_t v30 = &xmmword_25AE200;
    }
    else {
      uint64_t v30 = (long long *)xmmword_25AE200;
    }
    memmove(p_p, v30, v25);
    goto LABEL_57;
  }
LABEL_213:
  uint64_t v105 = v187;
  if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  uint64_t v106 = v186;
  if (v186)
  {
    do
    {
      int v107 = (void *)*v106;
      sub_4F4B48((uint64_t)(v106 + 2));
      operator delete(v106);
      uint64_t v106 = v107;
    }
    while (v107);
  }
  uint64_t v108 = v185;
  long long v185 = 0;
  if (v108) {
    operator delete(v108);
  }
  int v109 = __dst;
  if (__dst)
  {
    size_t v110 = v183;
    unint64_t v111 = __dst;
    if (v183 != __dst)
    {
      do
      {
        if (*((char *)v110 - 1) < 0) {
          operator delete(*(v110 - 3));
        }
        v110 -= 3;
      }
      while (v110 != v109);
      unint64_t v111 = __dst;
    }
    uint64_t v183 = v109;
    operator delete(v111);
  }
  int v112 = v191;
  if (v191)
  {
    do
    {
      unint64_t v113 = (void *)*v112;
      sub_4F4B48((uint64_t)(v112 + 2));
      operator delete(v112);
      int v112 = v113;
    }
    while (v113);
  }
  uint64_t v114 = v190;
  size_t v190 = 0;
  if (v114) {
    operator delete(v114);
  }
  uint64_t v115 = v188;
  if (v188)
  {
    long long v116 = v189;
    long long v117 = v188;
    if (v189 != v188)
    {
      do
      {
        if (*((char *)v116 - 1) < 0) {
          operator delete(*(v116 - 3));
        }
        v116 -= 3;
      }
      while (v116 != v115);
      long long v117 = v188;
    }
    int v189 = v115;
    operator delete(v117);
  }
  int v118 = v195;
  if (v195)
  {
    do
    {
      uint64_t v119 = (void *)*v118;
      sub_4F4B48((uint64_t)(v118 + 2));
      operator delete(v118);
      int v118 = v119;
    }
    while (v119);
  }
  unint64_t v120 = v194;
  uint64_t v194 = 0;
  if (v120) {
    operator delete(v120);
  }
  uint64_t v121 = v192;
  if (v192)
  {
    uint64_t v122 = v193;
    uint64_t v123 = v192;
    if (v193 != v192)
    {
      do
      {
        if (*((char *)v122 - 1) < 0) {
          operator delete(*(v122 - 3));
        }
        v122 -= 3;
      }
      while (v122 != v121);
      uint64_t v123 = v192;
    }
    char v193 = v121;
    operator delete(v123);
  }
}

void sub_751018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_14A84((uint64_t)&a9);
  sub_4D4880(&a24);
  sub_4F31D0(&__p);
  sub_4D4880(&a48);
  sub_4F31D0(&a59);
  sub_4D4880(&a72);
  sub_4F31D0((void **)&STACK[0x250]);
  sub_4D4880((void **)&STACK[0x2B8]);
  sub_4F31D0((void **)&STACK[0x310]);
  sub_4D4880((void **)&STACK[0x378]);
  sub_4F31D0((void **)&STACK[0x3D0]);
  sub_4D4880((void **)(v73 - 232));
  sub_52F090(v72);
  sub_4D4880((void **)(v73 - 160));
  _Unwind_Resume(a1);
}

void sub_7511C4(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  sub_4D4880((void **)(v2 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_7511E8@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t)&a1[137];
  BOOL v5 = a1[255].n128_u32[2] == 1;
  int v6 = a1[141].n128_u8[10];
  int v7 = a1[141].n128_u8[9];
  int v8 = a1[141].n128_u8[12];
  BOOL v9 = sub_62D444((uint64_t)&a1[159].n128_i64[1]);
  uint64_t v10 = a1[159].n128_u8[1];
  unint64_t v11 = (unint64_t)a1[159].n128_u8[2] << 40;
  int v12 = 0x1000000;
  if (!v9 || !v5) {
    int v12 = 0;
  }
  int v22 = v12 | (v6 << 16) | (v7 << 8) | v8;
  __int16 v23 = (v11 | (v10 << 32)) >> 32;
  sub_761E88(a1, v4, (unsigned __int8 *)&v22, (uint64_t)&v24);
  sub_639258(a2, (uint64_t)&v24, 0, 0, 1);
  size_t v13 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v14 = v27;
  if (v27)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p;
  long long __p = 0;
  if (v16) {
    operator delete(v16);
  }
  int v17 = (void **)v24;
  if (v24)
  {
    BOOL v18 = v25;
    uint64_t v19 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = v24;
    }
    size_t v25 = v17;
    operator delete(v19);
  }
  sub_638450(a2, a1[130].n128_i32[0]);
  sub_63874C(a2, a1 + 132);
  if (a1[141].n128_u8[10]) {
    int v20 = 57;
  }
  else {
    int v20 = 58;
  }
  sub_63841C(a2, v20);
  int v24 = 0;
  sub_638408(a2, &a1[129].n128_u64[1], &v24);
  return sub_6396EC(a2, a1[159].n128_i8[1]);
}

void sub_7513C8(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_7513DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7513F0(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_751404(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 2192;
  uint64_t v5 = a1 + 2552;
  int v6 = *(unsigned __int8 *)(a1 + 4074);
  BOOL v7 = *(_DWORD *)(a1 + 4088) == 1;
  int v8 = *(unsigned __int8 *)(a1 + 2266);
  int v9 = *(unsigned __int8 *)(a1 + 2265);
  int v10 = *(unsigned __int8 *)(a1 + 2268);
  BOOL v11 = sub_62D444(a1 + 2552);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 2545);
  unint64_t v13 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
  int v14 = 0x1000000;
  if (!v11 || !v7) {
    int v14 = 0;
  }
  LODWORD(v28) = v14 | (v8 << 16) | (v9 << 8) | v10;
  WORD2(v28) = (v13 | (v12 << 32)) >> 32;
  sub_764020(a1, v4, v6, (unsigned __int8 *)&v28, (uint64_t)&v29);
  sub_639258(a2, (uint64_t)&v29, 0, 0, 1);
  sub_638450(a2, *(_DWORD *)(a1 + 2080));
  sub_63874C(a2, (__n128 *)(a1 + 2112));
  if (sub_62D404(v5) && *(unsigned char *)(a1 + 3963))
  {
    int v15 = *(_DWORD *)(a1 + 4088);
    BOOL v16 = sub_62D444(v5);
    if (v15 == 1 && v16)
    {
      if (*(unsigned char *)(a1 + 2268)) {
        int v18 = 63;
      }
      else {
        int v18 = 62;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 2268)) {
        int v26 = 57;
      }
      else {
        int v26 = 58;
      }
      if (*(unsigned char *)(a1 + 2268)) {
        int v27 = 59;
      }
      else {
        int v27 = 60;
      }
      if (*(unsigned char *)(a1 + 2265)) {
        int v18 = v27;
      }
      else {
        int v18 = v26;
      }
    }
  }
  else
  {
    int v18 = 53;
  }
  sub_63841C(a2, v18);
  uint64_t v28 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v28);
  sub_6389F0(a2, *(_DWORD *)(a1 + 4088));
  sub_638638(a2, (long long *)(a1 + 2408));
  sub_6396EC(a2, *(unsigned char *)(a1 + 2545));
  uint64_t v19 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  int v20 = v32;
  if (v32)
  {
    do
    {
      unint64_t v21 = (void *)*v20;
      sub_4F4B48((uint64_t)(v20 + 2));
      operator delete(v20);
      int v20 = v21;
    }
    while (v21);
  }
  int v22 = __p;
  long long __p = 0;
  if (v22) {
    operator delete(v22);
  }
  __int16 v23 = (void **)v29;
  if (v29)
  {
    int v24 = v30;
    size_t v25 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v23);
      size_t v25 = v29;
    }
    uint64_t v30 = v23;
    operator delete(v25);
  }
}

void sub_751670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7516A4@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  sub_7654CC((uint64_t)a1, a1[141].n128_u8[12], (uint64_t)&a1[137], (uint64_t)&v13);
  sub_639258(a2, (uint64_t)&v13, 0, 0, 1);
  uint64_t v4 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v16;
  if (v16)
  {
    do
    {
      int v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  BOOL v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v13;
  if (v13)
  {
    int v9 = v14;
    int v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      int v10 = v13;
    }
    int v14 = v8;
    operator delete(v10);
  }
  sub_638450(a2, a1[130].n128_i32[0]);
  sub_63874C(a2, a1 + 132);
  if (a1[141].n128_u8[10]) {
    int v11 = 59;
  }
  else {
    int v11 = 60;
  }
  sub_63841C(a2, v11);
  unint64_t v13 = 0;
  return sub_638408(a2, &a1[129].n128_u64[1], &v13);
}

void sub_751808(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_75181C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_751830(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_751844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = a6 + 1;
  uint64_t v12 = sub_760668((void *)a1, a3, a6 + 1);
  memcpy(v12 + 4, (const void *)a4, 0x76CuLL);
  if (*(char *)(a4 + 1927) < 0)
  {
    sub_4200((unsigned char *)(a1 + 1936), *(void **)(a4 + 1904), *(void *)(a4 + 1912));
  }
  else
  {
    long long v13 = *(_OWORD *)(a4 + 1904);
    *(void *)(a1 + 1952) = *(void *)(a4 + 1920);
    *(_OWORD *)(a1 + 1936) = v13;
  }
  long long v14 = *(_OWORD *)(a4 + 1928);
  long long v15 = *(_OWORD *)(a4 + 1960);
  *(_OWORD *)(a1 + 1976) = *(_OWORD *)(a4 + 1944);
  *(_OWORD *)(a1 + 1992) = v15;
  *(_OWORD *)(a1 + 1960) = v14;
  long long v16 = *(_OWORD *)(a4 + 1976);
  long long v17 = *(_OWORD *)(a4 + 1992);
  long long v18 = *(_OWORD *)(a4 + 2008);
  *(_OWORD *)(a1 + 2050) = *(_OWORD *)(a4 + 2018);
  *(_OWORD *)(a1 + 2024) = v17;
  *(_OWORD *)(a1 + 2040) = v18;
  *(_OWORD *)(a1 + 2008) = v16;
  *(void *)(a1 + 2072) = *(void *)(a5 + 504);
  *(_DWORD *)(a1 + 2080) = sub_471160((unsigned int *)a5, 0);
  *(_DWORD *)(a1 + 2088) = 0x7FFFFFFF;
  *(void *)(a1 + 2092) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 2104) = 0;
  *(_DWORD *)(a1 + 2112) = 0x7FFFFFFF;
  *(void *)(a1 + 2116) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 2128) = 0;
  char v19 = *(unsigned char *)(a1 + 1961);
  if (v19)
  {
    char v19 = 0;
    if (*(void *)(a5 + 10104) != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a5 + 10112) != 0x7FFFFFFFFFFFFFFFLL) {
      char v19 = *(void *)(a5 + 10144) != *(void *)(a5 + 10152);
    }
  }
  *(unsigned char *)(a1 + 2136) = v19;
  uint64_t v20 = sub_64F444(a5);
  if (*(char *)(v20 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2144), *(void **)v20, *(void *)(v20 + 8));
  }
  else
  {
    long long v21 = *(_OWORD *)v20;
    *(void *)(a1 + 2160) = *(void *)(v20 + 16);
    *(_OWORD *)(a1 + 2144) = v21;
  }
  uint64_t v22 = sub_64F450(a5);
  if (*(char *)(v22 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2168), *(void **)v22, *(void *)(v22 + 8));
  }
  else
  {
    long long v23 = *(_OWORD *)v22;
    *(void *)(a1 + 2184) = *(void *)(v22 + 16);
    *(_OWORD *)(a1 + 2168) = v23;
  }
  uint64_t v24 = sub_64F45C(a5);
  if (*(char *)(v24 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2192), *(void **)v24, *(void *)(v24 + 8));
  }
  else
  {
    long long v25 = *(_OWORD *)v24;
    *(void *)(a1 + 2208) = *(void *)(v24 + 16);
    *(_OWORD *)(a1 + 2192) = v25;
  }
  uint64_t v26 = sub_64F468(a5);
  if (*(char *)(v26 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2216), *(void **)v26, *(void *)(v26 + 8));
  }
  else
  {
    long long v27 = *(_OWORD *)v26;
    *(void *)(a1 + 2232) = *(void *)(v26 + 16);
    *(_OWORD *)(a1 + 2216) = v27;
  }
  uint64_t v28 = sub_64F474(a5);
  if (*(char *)(v28 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 2240), *(void **)v28, *(void *)(v28 + 8));
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    *(void *)(a1 + 2256) = *(void *)(v28 + 16);
    *(_OWORD *)(a1 + 2240) = v29;
  }
  *(unsigned char *)(a1 + 2264) = 0;
  *(unsigned char *)(a1 + 2265) = sub_64F234(a5);
  *(unsigned char *)(a1 + 2266) = sub_64F240(a5);
  *(unsigned char *)(a1 + 2267) = sub_64F24C(a5);
  *(unsigned char *)(a1 + 2268) = sub_64F348(a5);
  uint64_t v30 = (long long *)sub_374DF4(a5);
  sub_3B1DC8(a1 + 2272, v30);
  uint64_t v31 = (long long *)sub_46CAAC(a5);
  sub_3B1DC8(a1 + 2408, v31);
  BOOL v32 = *(_DWORD *)(a1 + 2408) != 0x7FFFFFFF && sub_40A45C((int *)(a1 + 2416));
  *(unsigned char *)(a1 + 2544) = v32;
  if (!*(unsigned char *)(a5 + 12216) || (uint64_t v33 = *(void *)(a3 + 1456), v34 = *(void *)(a3 + 1464), v33 == v34))
  {
    BOOL v36 = 0;
  }
  else
  {
    uint64_t v35 = v33 + 4;
    do
    {
      BOOL v36 = *(_DWORD *)(v35 - 4) == 1;
      BOOL v37 = *(_DWORD *)(v35 - 4) == 1 || v35 == v34;
      v35 += 4;
    }
    while (!v37);
  }
  *(unsigned char *)(a1 + 2545) = v36;
  strcpy((char *)v50, "GuidanceFeatureRegions");
  BYTE7(v50[1]) = 22;
  long long __p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  long long v38 = sub_374CDC(a2, (uint64_t)v50, (uint64_t *)&__p);
  BOOL v39 = sub_746610(a5 + 12184, a3, v38);
  uint64_t v40 = (void **)__p;
  if (__p)
  {
    long long v41 = v48;
    uint64_t v42 = __p;
    if (v48 != __p)
    {
      do
      {
        if (*((char *)v41 - 1) < 0) {
          operator delete(*(v41 - 3));
        }
        v41 -= 3;
      }
      while (v41 != v40);
      uint64_t v42 = __p;
    }
    uint64_t v48 = v40;
    operator delete(v42);
  }
  if (SBYTE7(v50[1]) < 0) {
    operator delete(*(void **)&v50[0]);
  }
  *(unsigned char *)(a1 + 2546) = v39;
  sub_4BBDC0(a1 + 2552, a3);
  *(_DWORD *)(a1 + 4088) = -1;
  char v43 = *(unsigned char *)(sub_64EFB8(a5) + 368);
  if (v43) {
    char v43 = sub_64F234(a5) ^ 1;
  }
  *(unsigned char *)(a1 + 4092) = v43;
  *(_DWORD *)(a1 + 4088) = v11;
  if (sub_64F210(a5))
  {
    uint64_t v44 = (uint64_t *)nullsub_1(a3 + 1232);
    uint64_t v45 = sub_64EE80(a5);
    sub_3FB100((uint64_t)v50, v44, v45);
    *(_OWORD *)(a1 + 2088) = v50[0];
    *(void *)(a1 + 2104) = *(void *)&v50[1];
    sub_64EDB4((_DWORD *)a5, (uint64_t)v50);
    *(_OWORD *)(a1 + 2112) = v50[0];
    *(void *)(a1 + 2128) = *(void *)&v50[1];
    *(unsigned char *)(a1 + 2264) = sub_40A45C((int *)(a1 + 2112));
  }
  return a1;
}

void sub_751CD4(_Unwind_Exception *a1)
{
  sub_74687C(v1);
  _Unwind_Resume(a1);
}

void sub_751CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_4BCED0(v23);
  sub_45E914(v25);
  sub_45E914(v24);
  if (v22[2263] < 0)
  {
    operator delete(*v26);
    if ((v22[2239] & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v22[2239] & 0x80000000) == 0)
  {
LABEL_3:
    if (v22[2215] < 0) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  operator delete(*a9);
  if (v22[2215] < 0)
  {
LABEL_4:
    operator delete(*a10);
    if ((v22[2191] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  if ((v22[2191] & 0x80000000) == 0)
  {
LABEL_5:
    if (v22[2167] < 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*a11);
  if (v22[2167] < 0)
  {
LABEL_6:
    operator delete(*a12);
    if ((v22[1959] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  if ((v22[1959] & 0x80000000) == 0)
  {
LABEL_7:
    sub_74687C((uint64_t)v22);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*a13);
  sub_74687C((uint64_t)v22);
  _Unwind_Resume(a1);
}

uint64_t sub_751E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_751844(a1, a2, a3, a4, a5, a6);
}

void *sub_751E58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(unsigned char *)(a1 + 2136))
  {
    if (*(unsigned char *)(a1 + 2544)) {
      sub_752194(a1, (uint64_t)v14);
    }
    else {
      sub_75238C(a1, (uint64_t)v14);
    }
    unint64_t v4 = a2[1];
    if (v4 >= a2[2])
    {
      uint64_t v5 = sub_7572F4(a2, (uint64_t)v14);
    }
    else
    {
      sub_599644(a2[1], (uint64_t)v14);
      uint64_t v5 = v4 + 1080;
      a2[1] = v4 + 1080;
    }
    a2[1] = v5;
    sub_52F1E8((uint64_t)v14);
  }
  if (*(unsigned char *)(a1 + 2544)) {
    sub_752580(a1, (uint64_t)v14);
  }
  else {
    sub_752778(a1, (uint64_t)v14);
  }
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
    uint64_t v7 = sub_7572F4(a2, (uint64_t)v14);
  }
  else
  {
    sub_599644(a2[1], (uint64_t)v14);
    uint64_t v7 = v6 + 1080;
    a2[1] = v6 + 1080;
  }
  a2[1] = v7;
  if (*(unsigned char *)(a1 + 2544))
  {
    int v8 = *(unsigned char **)(a1 + 2448);
    if (v8 != *(unsigned char **)(a1 + 2456))
    {
      if (*v8) {
        sub_75296C(a1, 0, (uint64_t)v13);
      }
    }
    sub_752C18(a1, (uint64_t)v13);
  }
  if (*(unsigned char *)(a1 + 2063)) {
    sub_752F38(a1, (uint64_t)v13);
  }
  else {
    sub_753074(a1, (uint64_t)v13);
  }
  unint64_t v9 = a2[1];
  if (v9 >= a2[2])
  {
    int v11 = sub_7576B4((void **)a2, (uint64_t)v13);
  }
  else
  {
    sub_7574DC(v9, (uint64_t)v13);
    int v11 = (void *)(v10 + 1080);
  }
  a2[1] = (uint64_t)v11;
  sub_52F1E8((uint64_t)v13);
  return sub_52F1E8((uint64_t)v14);
}

void sub_7520E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F1E8((uint64_t)va);
  sub_52F1E8((uint64_t)&STACK[0x440]);
  sub_591E78(v2);
  _Unwind_Resume(a1);
}

void sub_752150(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_752164(_Unwind_Exception *a1)
{
  sub_52F1E8((uint64_t)&STACK[0x440]);
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

void sub_752180(_Unwind_Exception *a1)
{
  sub_591E78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_752194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7607E0(&v17, a1, a1 + 2168);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_7606A0((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 19);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_752320(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_752350(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_752378(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_75238C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7606B0(&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_7606A0((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 18);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_752514(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_752544(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_75256C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_752580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7607E4(a1 + 2168, (uint64_t)&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_760A9C((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 20);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_75270C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_75273C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_752764(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_752778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7606B4(a1, (uint64_t)&v17);
  sub_7C43EC(a2, &v17, 0);
  unint64_t v4 = v20;
  if (v20)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v17;
  if (v17)
  {
    int v8 = v18;
    unint64_t v9 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v17;
    }
    long long v18 = v7;
    operator delete(v9);
  }
  sub_760A9C((uint64_t)&v17);
  sub_7C481C(a2, (uint64_t)&v17);
  uint64_t v10 = v20;
  if (v20)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = (void **)v17;
  if (v17)
  {
    long long v14 = v18;
    long long v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      long long v15 = v17;
    }
    long long v18 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 23);
  long long v17 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v17);
  return sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
}

void sub_752900(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_52F1E8(v2);
  _Unwind_Resume(a1);
}

void sub_752930(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_752944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_752958(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_75296C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(unsigned __int8 **)(a1 + 2448);
  sub_760FD4(*v6, *((_DWORD *)v6 + 1) != 0x7FFFFFFF, (uint64_t)&v21);
  sub_7C43EC(a3, &v21, 0);
  uint64_t v7 = v24;
  if (v24)
  {
    do
    {
      int v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  unint64_t v9 = __p;
  long long __p = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void **)v21;
  if (v21)
  {
    int v11 = (void **)v22;
    uint64_t v12 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v21;
    }
    uint64_t v22 = v10;
    operator delete(v12);
  }
  sub_638638(a3, (long long *)(a1 + 2408));
  if (a2) {
    int v13 = 22;
  }
  else {
    int v13 = 21;
  }
  sub_63841C(a3, v13);
  long long v21 = 0;
  sub_638408(a3, (void *)(a1 + 2072), &v21);
  sub_7C43E4(a3, *(unsigned __int8 *)(a1 + 451));
  int v14 = sub_62CBA8((unsigned int *)(a1 + 32), *v6);
  __int16 v15 = -1;
  char v16 = -1;
  long long v17 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  char v20 = 0;
  sub_524ADC((uint64_t)&v21, (uint64_t)&v14, 0);
  sub_638E7C();
}

void sub_752B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_4D9814((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    sub_52F1E8(v17);
    _Unwind_Resume(a1);
  }
  sub_52F1E8(v17);
  _Unwind_Resume(a1);
}

void sub_752C18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_760D14((uint64_t)&v23);
  sub_7C43EC(a2, &v23, 0);
  unint64_t v4 = v26;
  if (v26)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v23;
  if (v23)
  {
    int v8 = (void **)v24;
    unint64_t v9 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v23;
    }
    uint64_t v24 = v7;
    operator delete(v9);
  }
  sub_760AAC(*(unsigned __int8 *)(a1 + 2053), (uint64_t)&v23);
  sub_7C481C(a2, (uint64_t)&v23);
  uint64_t v10 = v26;
  if (v26)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  int v13 = (void **)v23;
  if (v23)
  {
    int v14 = (void **)v24;
    __int16 v15 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      __int16 v15 = v23;
    }
    uint64_t v24 = v13;
    operator delete(v15);
  }
  sub_63841C(a2, 24);
  uint64_t v23 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v23);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  sub_638638(a2, (long long *)(a1 + 2408));
  int v16 = *(_DWORD *)(a1 + 1588);
  __int16 v17 = -1;
  char v18 = -1;
  uint64_t v19 = 0;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  char v22 = 0;
  sub_524ADC((uint64_t)&v23, (uint64_t)&v16, 0);
  sub_638E7C();
}

void sub_752E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_4D9814((uint64_t)&a17);
  if (a16 < 0)
  {
    operator delete(__p);
    sub_52F1E8(v17);
    _Unwind_Resume(a1);
  }
  sub_52F1E8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_752F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_761270((uint64_t)&v11);
  sub_7C43EC(a2, &v11, 0);
  unint64_t v4 = v14;
  if (v14)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v11;
  if (v11)
  {
    int v8 = v12;
    unint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v11;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  sub_63841C(a2, 15);
  int v11 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v11);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  return sub_7C43DC(a2, 94);
}

void sub_753038(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_75304C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_753060(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_753074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_761260((uint64_t)&v11);
  sub_7C43EC(a2, &v11, 0);
  unint64_t v4 = v14;
  if (v14)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      sub_4F4B48((uint64_t)(v4 + 2));
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p;
  long long __p = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)v11;
  if (v11)
  {
    int v8 = v12;
    unint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = v11;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  sub_63841C(a2, 15);
  int v11 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v11);
  sub_7C43E4(a2, *(unsigned __int8 *)(a1 + 450));
  return sub_7C43DC(a2, 17);
}

void sub_753174(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void sub_753188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_75319C(_Unwind_Exception *a1)
{
  sub_52F1E8(v1);
  _Unwind_Resume(a1);
}

void *sub_7531B0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((unsigned char *)result + 2544))
  {
    sub_753288((uint64_t)result, v6);
    unint64_t v3 = a2[1];
    if (v3 >= a2[2])
    {
      uint64_t v5 = sub_757810(a2, (uint64_t)v6);
    }
    else
    {
      sub_5AA6B0(v3, (uint64_t)v6);
      uint64_t v5 = v4 + 816;
    }
    a2[1] = v5;
    return sub_52F090(v6);
  }
  return result;
}

void sub_753258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52F090((uint64_t *)va);
  sub_591DA0(v2);
  _Unwind_Resume(a1);
}

void sub_753274(_Unwind_Exception *a1)
{
  sub_591DA0(v1);
  _Unwind_Resume(a1);
}

double sub_753288@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5A9D64((uint64_t)a2);
  uint64_t v4 = sub_37D0C0(a1 + 3784);
  uint64_t v5 = *(unsigned char **)v4;
  unint64_t v6 = *(unsigned char **)(v4 + 8);
  if (*(unsigned char **)v4 != v6)
  {
    while (*v5 != 10)
    {
      v5 += 12;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
LABEL_20:
    sub_760D14((uint64_t)&v62);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    sub_6370D4(&v66, &v62, 1, &v56);
    sub_638778(a2, (uint64_t)&v66);
    int v16 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = v69;
    if (v69)
    {
      do
      {
        char v18 = (void *)*v17;
        sub_4F4B48((uint64_t)(v17 + 2));
        operator delete(v17);
        uint64_t v17 = v18;
      }
      while (v18);
    }
    uint64_t v19 = __p;
    long long __p = 0;
    if (v19) {
      operator delete(v19);
    }
    uint64_t v20 = (void **)v66;
    if (v66)
    {
      uint64_t v21 = v67;
      char v22 = v66;
      if (v67 != v66)
      {
        do
        {
          if (*((char *)v21 - 1) < 0) {
            operator delete(*(v21 - 3));
          }
          v21 -= 3;
        }
        while (v21 != v20);
        char v22 = v66;
      }
      long long v67 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v57;
    if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v24 = v65;
    if (v65)
    {
      do
      {
        long long v25 = (void *)*v24;
        sub_4F4B48((uint64_t)(v24 + 2));
        operator delete(v24);
        uint64_t v24 = v25;
      }
      while (v25);
    }
    uint64_t v26 = v64;
    int v64 = 0;
    if (v26) {
      operator delete(v26);
    }
    long long v27 = (void **)v62;
    if (v62)
    {
      uint64_t v28 = v63;
      long long v29 = v62;
      if (v63 == v62) {
        goto LABEL_94;
      }
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
LABEL_93:
      long long v29 = v62;
LABEL_94:
      long long v63 = v27;
      operator delete(v29);
      goto LABEL_95;
    }
    goto LABEL_95;
  }
LABEL_4:
  uint64_t v7 = *(unsigned char **)(a1 + 2448);
  int v8 = *(unsigned char **)(a1 + 2456);
  if (v7 != v8)
  {
    while (*v7 == 10)
    {
      v7 += 12;
      if (v7 == v8) {
        goto LABEL_7;
      }
    }
    goto LABEL_20;
  }
LABEL_7:
  sub_760E74((uint64_t)&v62);
  uint64_t v60 = 0;
  std::string::size_type v61 = 0;
  sub_6370D4(&v66, &v62, 1, &v60);
  sub_638778(a2, (uint64_t)&v66);
  unint64_t v9 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v69;
  if (v69)
  {
    do
    {
      int v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  long long __p = 0;
  if (v12) {
    operator delete(v12);
  }
  int v13 = (void **)v66;
  if (v66)
  {
    int v14 = v67;
    __int16 v15 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      __int16 v15 = v66;
    }
    long long v67 = v13;
    operator delete(v15);
  }
  uint64_t v30 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v31 = v65;
  if (v65)
  {
    do
    {
      BOOL v32 = (void *)*v31;
      sub_4F4B48((uint64_t)(v31 + 2));
      operator delete(v31);
      uint64_t v31 = v32;
    }
    while (v32);
  }
  uint64_t v33 = v64;
  int v64 = 0;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v34 = (void **)v62;
  if (v62)
  {
    uint64_t v35 = v63;
    BOOL v36 = v62;
    if (v63 != v62)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      BOOL v36 = v62;
    }
    long long v63 = v34;
    operator delete(v36);
  }
  LODWORD(v66) = 19;
  sub_6387E4((uint64_t)a2, (int *)&v66);
  sub_760D14((uint64_t)&v62);
  uint64_t v58 = 0;
  int v59 = 0;
  sub_6370D4(&v66, &v62, 1, &v58);
  sub_638778(a2, (uint64_t)&v66);
  BOOL v37 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  long long v38 = v69;
  if (v69)
  {
    do
    {
      BOOL v39 = (void *)*v38;
      sub_4F4B48((uint64_t)(v38 + 2));
      operator delete(v38);
      long long v38 = v39;
    }
    while (v39);
  }
  uint64_t v40 = __p;
  long long __p = 0;
  if (v40) {
    operator delete(v40);
  }
  long long v41 = (void **)v66;
  if (v66)
  {
    uint64_t v42 = v67;
    char v43 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v42 - 1) < 0) {
          operator delete(*(v42 - 3));
        }
        v42 -= 3;
      }
      while (v42 != v41);
      char v43 = v66;
    }
    long long v67 = v41;
    operator delete(v43);
  }
  uint64_t v44 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  uint64_t v45 = v65;
  if (v65)
  {
    do
    {
      uint64_t v46 = (void *)*v45;
      sub_4F4B48((uint64_t)(v45 + 2));
      operator delete(v45);
      uint64_t v45 = v46;
    }
    while (v46);
  }
  uint64_t v47 = v64;
  int v64 = 0;
  if (v47) {
    operator delete(v47);
  }
  long long v27 = (void **)v62;
  if (v62)
  {
    uint64_t v48 = v63;
    long long v29 = v62;
    if (v63 == v62) {
      goto LABEL_94;
    }
    do
    {
      if (*((char *)v48 - 1) < 0) {
        operator delete(*(v48 - 3));
      }
      v48 -= 3;
    }
    while (v48 != v27);
    goto LABEL_93;
  }
LABEL_95:
  sub_760AAC(*(unsigned __int8 *)(a1 + 2053), (uint64_t)&v66);
  sub_638E00((uint64_t)a2, (uint64_t)&v66);
  uint64_t v49 = v69;
  if (v69)
  {
    do
    {
      uint64_t v50 = (void *)*v49;
      sub_4F4B48((uint64_t)(v49 + 2));
      operator delete(v49);
      uint64_t v49 = v50;
    }
    while (v50);
  }
  __n128 v51 = __p;
  long long __p = 0;
  if (v51) {
    operator delete(v51);
  }
  size_t v52 = (void **)v66;
  if (v66)
  {
    int v53 = v67;
    size_t v54 = v66;
    if (v67 != v66)
    {
      do
      {
        if (*((char *)v53 - 1) < 0) {
          operator delete(*(v53 - 3));
        }
        v53 -= 3;
      }
      while (v53 != v52);
      size_t v54 = v66;
    }
    long long v67 = v52;
    operator delete(v54);
  }
  sub_63841C((uint64_t)a2, 83);
  *(void *)&double result = sub_638638((uint64_t)a2, (long long *)(a1 + 2408)).n128_u64[0];
  return result;
}

void sub_753900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void *);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  sub_4F31D0((void **)va2);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  sub_52F090(v3);
  _Unwind_Resume(a1);
}

void sub_7539AC(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7539C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_4D4880((void **)va);
  sub_52F090(v16);
  _Unwind_Resume(a1);
}

void sub_7539DC(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_7539F0(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  _Unwind_Resume(a1);
}

void sub_753A04(__n128 *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[141].n128_u8[8])
  {
    if (sub_62D404((uint64_t)&a1[159].n128_i64[1]) && a1[247].n128_u8[11])
    {
      sub_756EB4((uint64_t)a1, (uint64_t)v110);
    }
    else if (a1[141].n128_u8[9])
    {
      sub_757154(a1, (uint64_t)v110);
    }
    else
    {
      sub_756C98(a1, (uint64_t)v110);
    }
  }
  else
  {
    sub_75436C((uint64_t)a1, (uint64_t)v110);
  }
  unint64_t v4 = a2[1];
  if (v4 >= a2[2])
  {
    uint64_t v5 = sub_75796C(a2, (uint64_t)v110);
  }
  else
  {
    sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v110);
    uint64_t v5 = v4 + 408;
    a2[1] = v4 + 408;
  }
  a2[1] = v5;
  if (a1[133].n128_u8[8])
  {
    if (a1[159].n128_u8[0]) {
      sub_754640((uint64_t)a1, (uint64_t)v97);
    }
    else {
      sub_7547B8((uint64_t)a1, (uint64_t)v97);
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2])
    {
      uint64_t v7 = sub_75796C(a2, (uint64_t)v97);
    }
    else
    {
      sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v97);
      uint64_t v7 = v6 + 408;
      a2[1] = v6 + 408;
    }
    a2[1] = v7;
    if (__p)
    {
      int v109 = __p;
      operator delete(__p);
    }
    if (v106)
    {
      int v107 = v106;
      operator delete(v106);
    }
    uint64_t v8 = (void **)v104;
    if (v104)
    {
      uint64_t v9 = v105;
      uint64_t v10 = v104;
      if (v105 != v104)
      {
        do
          uint64_t v9 = sub_4F31D0(v9 - 13);
        while (v9 != v8);
        uint64_t v10 = v104;
      }
      uint64_t v105 = v8;
      operator delete(v10);
    }
    if (v102)
    {
      uint64_t v103 = v102;
      operator delete(v102);
    }
    if (v100)
    {
      uint64_t v101 = v100;
      operator delete(v100);
    }
    int v11 = v98;
    if (v98)
    {
      uint64_t v12 = (uint64_t)v99;
      uint64_t v13 = v98;
      if (v99 != v98)
      {
        do
          uint64_t v12 = sub_4D4B58(v12 - 160);
        while ((void *)v12 != v11);
        uint64_t v13 = v98;
      }
      uint64_t v99 = v11;
      operator delete(v13);
    }
  }
  if (a1[159].n128_u8[0]) {
    sub_75492C((uint64_t)a1, (uint64_t)v97);
  }
  else {
    sub_754AA0((uint64_t)a1, (uint64_t)v97);
  }
  unint64_t v14 = a2[1];
  if (v14 >= a2[2])
  {
    uint64_t v15 = sub_75796C(a2, (uint64_t)v97);
  }
  else
  {
    sub_757B28((uint64_t)(a2 + 2), a2[1], (uint64_t)v97);
    uint64_t v15 = v14 + 408;
    a2[1] = v14 + 408;
  }
  a2[1] = v15;
  if (a1[159].n128_u8[0])
  {
    sub_754C14((uint64_t)a1, (uint64_t)&v64);
    unint64_t v16 = a2[1];
    if (v16 >= a2[2])
    {
      uint64_t v26 = sub_757E08(a2, (uint64_t)&v64);
      long long v27 = v92;
      a2[1] = v26;
      if (v27)
      {
        uint64_t v93 = v27;
        operator delete(v27);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v16 = v64;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 8) = 0;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)v65;
      *(void *)(v16 + 24) = v66;
      v65[0] = 0;
      v65[1] = 0;
      long long v17 = v69;
      long long v18 = v67;
      *(_OWORD *)(v16 + 48) = v68;
      *(_OWORD *)(v16 + 64) = v17;
      *(_OWORD *)(v16 + 32) = v18;
      uint64_t v19 = v72;
      long long v20 = v71;
      *(_OWORD *)(v16 + 80) = v70;
      *(_OWORD *)(v16 + 96) = v20;
      *(void *)(v16 + 112) = v19;
      *(void *)(v16 + 120) = 0;
      *(void *)(v16 + 128) = 0;
      *(void *)(v16 + 136) = 0;
      *(_OWORD *)(v16 + 120) = *(_OWORD *)v73;
      *(void *)(v16 + 136) = v74;
      *(void *)(v16 + 144) = 0;
      uint64_t v66 = 0;
      v73[0] = 0;
      v73[1] = 0;
      *(void *)(v16 + 152) = 0;
      *(void *)(v16 + 160) = 0;
      *(_OWORD *)(v16 + 144) = *(_OWORD *)v75;
      *(void *)(v16 + 160) = v76;
      v75[1] = 0;
      uint64_t v76 = 0;
      uint64_t v74 = 0;
      v75[0] = 0;
      *(_OWORD *)(v16 + 168) = v77;
      *(_DWORD *)(v16 + 192) = v79;
      if (v79 <= 1) {
        *(void *)(v16 + 184) = v78;
      }
      *(_OWORD *)(v16 + 200) = v80;
      long long v21 = v81;
      uint64_t v22 = v83;
      *(_OWORD *)(v16 + 232) = v82;
      *(_OWORD *)(v16 + 216) = v21;
      *(void *)(v16 + 248) = v22;
      *(void *)(v16 + 256) = 0;
      *(void *)(v16 + 264) = 0;
      *(void *)(v16 + 272) = 0;
      *(_OWORD *)(v16 + 256) = *(_OWORD *)v84;
      *(void *)(v16 + 272) = v85;
      v84[0] = 0;
      v84[1] = 0;
      *(unsigned char *)(v16 + 280) = v86;
      *(void *)(v16 + 288) = 0;
      *(void *)(v16 + 296) = 0;
      *(void *)(v16 + 304) = 0;
      *(_OWORD *)(v16 + 288) = *(_OWORD *)v87;
      *(void *)(v16 + 304) = v88;
      uint64_t v85 = 0;
      v87[0] = 0;
      v87[1] = 0;
      uint64_t v88 = 0;
      long long v23 = *(_OWORD *)v89;
      *(_OWORD *)(v16 + 321) = *(_OWORD *)&v89[9];
      *(_OWORD *)(v16 + 312) = v23;
      long long v24 = v90;
      *(_DWORD *)(v16 + 356) = v91;
      *(_OWORD *)(v16 + 340) = v24;
      *(void *)(v16 + 360) = 0;
      *(void *)(v16 + 368) = 0;
      *(void *)(v16 + 376) = 0;
      *(void *)(v16 + 360) = v92;
      *(void *)(v16 + 368) = v93;
      *(void *)(v16 + 376) = v94;
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      long long v25 = v95;
      *(_DWORD *)(v16 + 400) = v96;
      *(_OWORD *)(v16 + 384) = v25;
      a2[1] = v16 + 408;
    }
    if (v87[0])
    {
      v87[1] = v87[0];
      operator delete(v87[0]);
    }
    uint64_t v28 = (void **)v84[0];
    if (v84[0])
    {
      long long v29 = (void **)v84[1];
      uint64_t v30 = v84[0];
      if (v84[1] != v84[0])
      {
        do
          long long v29 = sub_4F31D0(v29 - 13);
        while (v29 != v28);
        uint64_t v30 = v84[0];
      }
      v84[1] = v28;
      operator delete(v30);
    }
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
    if (v73[0])
    {
      v73[1] = v73[0];
      operator delete(v73[0]);
    }
    uint64_t v31 = v65[0];
    if (v65[0])
    {
      BOOL v32 = v65[1];
      uint64_t v33 = v65[0];
      if (v65[1] != v65[0])
      {
        do
          BOOL v32 = (void *)sub_4D4B58((uint64_t)v32 - 160);
        while (v32 != v31);
        uint64_t v33 = v65[0];
      }
      v65[1] = v31;
      operator delete(v33);
    }
  }
  if (a1[128].n128_u8[15]) {
    sub_754D98((uint64_t)a1, (uint64_t)&v64);
  }
  else {
    sub_754F0C((uint64_t)a1, (uint64_t)&v64);
  }
  unint64_t v34 = a2[1];
  if (v34 >= a2[2])
  {
    uint64_t v44 = sub_757E08(a2, (uint64_t)&v64);
    uint64_t v45 = v92;
    a2[1] = v44;
    if (v45)
    {
      uint64_t v93 = v45;
      operator delete(v45);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v34 = v64;
    *(void *)(v34 + 16) = 0;
    *(void *)(v34 + 24) = 0;
    *(void *)(v34 + 8) = 0;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)v65;
    *(void *)(v34 + 24) = v66;
    v65[0] = 0;
    v65[1] = 0;
    long long v35 = v69;
    long long v36 = v67;
    *(_OWORD *)(v34 + 48) = v68;
    *(_OWORD *)(v34 + 64) = v35;
    *(_OWORD *)(v34 + 32) = v36;
    uint64_t v37 = v72;
    long long v38 = v71;
    *(_OWORD *)(v34 + 80) = v70;
    *(_OWORD *)(v34 + 96) = v38;
    *(void *)(v34 + 112) = v37;
    *(void *)(v34 + 120) = 0;
    *(void *)(v34 + 128) = 0;
    *(void *)(v34 + 136) = 0;
    *(_OWORD *)(v34 + 120) = *(_OWORD *)v73;
    *(void *)(v34 + 136) = v74;
    *(void *)(v34 + 144) = 0;
    uint64_t v66 = 0;
    v73[0] = 0;
    v73[1] = 0;
    *(void *)(v34 + 152) = 0;
    *(void *)(v34 + 160) = 0;
    *(_OWORD *)(v34 + 144) = *(_OWORD *)v75;
    *(void *)(v34 + 160) = v76;
    v75[1] = 0;
    uint64_t v76 = 0;
    uint64_t v74 = 0;
    v75[0] = 0;
    *(_OWORD *)(v34 + 168) = v77;
    *(_DWORD *)(v34 + 192) = v79;
    if (v79 <= 1) {
      *(void *)(v34 + 184) = v78;
    }
    *(_OWORD *)(v34 + 200) = v80;
    long long v39 = v81;
    uint64_t v40 = v83;
    *(_OWORD *)(v34 + 232) = v82;
    *(_OWORD *)(v34 + 216) = v39;
    *(void *)(v34 + 248) = v40;
    *(void *)(v34 + 256) = 0;
    *(void *)(v34 + 264) = 0;
    *(void *)(v34 + 272) = 0;
    *(_OWORD *)(v34 + 256) = *(_OWORD *)v84;
    *(void *)(v34 + 272) = v85;
    v84[0] = 0;
    v84[1] = 0;
    *(unsigned char *)(v34 + 280) = v86;
    *(void *)(v34 + 288) = 0;
    *(void *)(v34 + 296) = 0;
    *(void *)(v34 + 304) = 0;
    *(_OWORD *)(v34 + 288) = *(_OWORD *)v87;
    *(void *)(v34 + 304) = v88;
    uint64_t v85 = 0;
    v87[0] = 0;
    v87[1] = 0;
    uint64_t v88 = 0;
    long long v41 = *(_OWORD *)v89;
    *(_OWORD *)(v34 + 321) = *(_OWORD *)&v89[9];
    *(_OWORD *)(v34 + 312) = v41;
    long long v42 = v90;
    *(_DWORD *)(v34 + 356) = v91;
    *(_OWORD *)(v34 + 340) = v42;
    *(void *)(v34 + 360) = 0;
    *(void *)(v34 + 368) = 0;
    *(void *)(v34 + 376) = 0;
    *(void *)(v34 + 360) = v92;
    *(void *)(v34 + 368) = v93;
    *(void *)(v34 + 376) = v94;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    long long v43 = v95;
    *(_DWORD *)(v34 + 400) = v96;
    *(_OWORD *)(v34 + 384) = v43;
    a2[1] = v34 + 408;
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  uint64_t v46 = (void **)v84[0];
  if (v84[0])
  {
    uint64_t v47 = (void **)v84[1];
    uint64_t v48 = v84[0];
    if (v84[1] != v84[0])
    {
      do
        uint64_t v47 = sub_4F31D0(v47 - 13);
      while (v47 != v46);
      uint64_t v48 = v84[0];
    }
    v84[1] = v46;
    operator delete(v48);
  }
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  uint64_t v49 = v65[0];
  if (v65[0])
  {
    uint64_t v50 = v65[1];
    __n128 v51 = v65[0];
    if (v65[1] != v65[0])
    {
      do
        uint64_t v50 = (void *)sub_4D4B58((uint64_t)v50 - 160);
      while (v50 != v49);
      __n128 v51 = v65[0];
    }
    v65[1] = v49;
    operator delete(v51);
  }
  if (__p)
  {
    int v109 = __p;
    operator delete(__p);
  }
  if (v106)
  {
    int v107 = v106;
    operator delete(v106);
  }
  size_t v52 = (void **)v104;
  if (v104)
  {
    int v53 = v105;
    size_t v54 = v104;
    if (v105 != v104)
    {
      do
        int v53 = sub_4F31D0(v53 - 13);
      while (v53 != v52);
      size_t v54 = v104;
    }
    uint64_t v105 = v52;
    operator delete(v54);
  }
  if (v102)
  {
    uint64_t v103 = v102;
    operator delete(v102);
  }
  if (v100)
  {
    uint64_t v101 = v100;
    operator delete(v100);
  }
  unint64_t v55 = v98;
  if (v98)
  {
    uint64_t v56 = (uint64_t)v99;
    uint64_t v57 = v98;
    if (v99 != v98)
    {
      do
        uint64_t v56 = sub_4D4B58(v56 - 160);
      while ((void *)v56 != v55);
      uint64_t v57 = v98;
    }
    uint64_t v99 = v55;
    operator delete(v57);
  }
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  if (v119)
  {
    unint64_t v120 = v119;
    operator delete(v119);
  }
  uint64_t v58 = (void **)v117;
  if (v117)
  {
    int v59 = v118;
    uint64_t v60 = v117;
    if (v118 != v117)
    {
      do
        int v59 = sub_4F31D0(v59 - 13);
      while (v59 != v58);
      uint64_t v60 = v117;
    }
    int v118 = v58;
    operator delete(v60);
  }
  if (v115)
  {
    long long v116 = v115;
    operator delete(v115);
  }
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
  std::string::size_type v61 = v111;
  if (v111)
  {
    uint64_t v62 = (uint64_t)v112;
    long long v63 = v111;
    if (v112 != v111)
    {
      do
        uint64_t v62 = sub_4D4B58(v62 - 160);
      while ((void *)v62 != v61);
      long long v63 = v111;
    }
    int v112 = v61;
    operator delete(v63);
  }
}

void sub_7542C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  sub_639B78(&a9);
  sub_639B78(&a60);
  sub_639B78(&STACK[0x330]);
  sub_591DFC(v60);
  _Unwind_Resume(a1);
}

void sub_754358(_Unwind_Exception *a1)
{
  sub_591DFC(v1);
  _Unwind_Resume(a1);
}

void sub_75436C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 2552;
  if (sub_62D3D4((unsigned char *)(a1 + 2552)))
  {
    int v5 = *(unsigned __int8 *)(a1 + 4074);
    BOOL v6 = *(_DWORD *)(a1 + 4088) == 1;
    int v7 = *(unsigned __int8 *)(a1 + 2266);
    int v8 = *(unsigned __int8 *)(a1 + 2265);
    int v9 = *(unsigned __int8 *)(a1 + 2268);
    BOOL v10 = sub_62D444(v4);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 2545);
    unint64_t v12 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
    int v13 = 0x1000000;
    if (!v10 || !v6) {
      int v13 = 0;
    }
    LODWORD(v35) = v13 | (v7 << 16) | (v8 << 8) | v9;
    WORD2(v35) = (v12 | (v11 << 32)) >> 32;
    sub_762C0C(a1, v5, &v35, (uint64_t)&v36);
  }
  else
  {
    BOOL v14 = *(_DWORD *)(a1 + 4088) == 1;
    int v15 = *(unsigned __int8 *)(a1 + 2266);
    int v16 = *(unsigned __int8 *)(a1 + 2265);
    int v17 = *(unsigned __int8 *)(a1 + 2268);
    BOOL v18 = sub_62D444(v4);
    uint64_t v19 = *(unsigned __int8 *)(a1 + 2545);
    unint64_t v20 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
    int v21 = 0x1000000;
    if (!v18 || !v14) {
      int v21 = 0;
    }
    LODWORD(v35) = v21 | (v15 << 16) | (v16 << 8) | v17;
    WORD2(v35) = (v20 | (v19 << 32)) >> 32;
    sub_761950((void *)a1, (uint64_t)&v35, (uint64_t)&v36);
  }
  sub_639258(a2, (uint64_t)&v36, 0, 0, 1);
  if (sub_62D404(v4) && *(unsigned char *)(a1 + 3963))
  {
    int v22 = *(_DWORD *)(a1 + 4088);
    BOOL v23 = sub_62D444(v4);
    if (v22 == 1 && v23)
    {
      int v25 = 61;
    }
    else
    {
      if (*(unsigned char *)(a1 + 2266)) {
        int v33 = 54;
      }
      else {
        int v33 = 53;
      }
      if (*(unsigned char *)(a1 + 2266)) {
        int v34 = 55;
      }
      else {
        int v34 = 56;
      }
      if (*(unsigned char *)(a1 + 2265)) {
        int v25 = v34;
      }
      else {
        int v25 = v33;
      }
    }
  }
  else
  {
    int v25 = 53;
  }
  sub_63841C(a2, v25);
  uint64_t v35 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v35);
  sub_6396EC(a2, *(unsigned char *)(a1 + 2545));
  sub_6389F0(a2, *(_DWORD *)(a1 + 4088));
  uint64_t v26 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  long long v27 = v39;
  if (v39)
  {
    do
    {
      uint64_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      long long v27 = v28;
    }
    while (v28);
  }
  long long v29 = __p;
  long long __p = 0;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = (void **)v36;
  if (v36)
  {
    uint64_t v31 = v37;
    BOOL v32 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v31 - 1) < 0) {
          operator delete(*(v31 - 3));
        }
        v31 -= 3;
      }
      while (v31 != v30);
      BOOL v32 = v36;
    }
    uint64_t v37 = v30;
    operator delete(v32);
  }
}

void sub_75460C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_754640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765DCC(a1 + 2168, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 65);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_75477C(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754790(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_7547A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7547B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765908(a1, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 64);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_7548F0(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754904(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_75492C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7662B4((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 66);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_754A64(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754A78(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_754AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766114(a1, (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 67);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_754BD8(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754BEC(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

double sub_754C14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_7663E4(*(unsigned __int8 *)(a1 + 2054), (uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 68);
  unint64_t v12 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v12);
  *(void *)&double result = sub_638638(a2, (long long *)(a1 + 2408)).n128_u64[0];
  return result;
}

void sub_754D5C(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_754D84(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_754D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766748((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 69);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_754ED0(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754EE4(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_754EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_754F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_766618((uint64_t)&v12);
  sub_639258(a2, (uint64_t)&v12, 0, 0, 1);
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = v15;
  if (v15)
  {
    do
    {
      BOOL v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  int v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v12;
  if (v12)
  {
    int v9 = v13;
    BOOL v10 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      BOOL v10 = v12;
    }
    int v13 = v8;
    operator delete(v10);
  }
  sub_63841C(a2, 69);
  unint64_t v12 = 0;
  return sub_638408(a2, (void *)(a1 + 2072), &v12);
}

void sub_755044(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_755058(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_75506C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_755080(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = 2267;
  if (a2) {
    uint64_t v6 = 2268;
  }
  if (*(unsigned char *)(a1 + v6))
  {
    sub_755C60(a1, a2, a3);
  }
  else
  {
    uint64_t v137 = 0;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v134 = 0u;
    int v138 = 1065353216;
    char v139 = 1;
    sub_5A9D64((uint64_t)a3);
    if ((a2 & 1) != 0 || !*(unsigned char *)(a1 + 4092))
    {
      sub_63553C((uint64_t)&xmmword_25AEE00, (uint64_t)v121);
      uint64_t v10 = v134;
      if ((void)v134)
      {
        uint64_t v11 = *((void *)&v134 + 1);
        unint64_t v12 = (void *)v134;
        if (*((void *)&v134 + 1) != (void)v134)
        {
          do
          {
            if (*(char *)(v11 - 1) < 0) {
              operator delete(*(void **)(v11 - 24));
            }
            v11 -= 24;
          }
          while (v11 != v10);
          unint64_t v12 = (void *)v134;
        }
        *((void *)&v134 + 1) = v10;
        operator delete(v12);
      }
      long long v134 = *(_OWORD *)v121;
      *(void *)&long long v135 = v122;
      v121[1] = 0;
      uint64_t v122 = 0;
      v121[0] = 0;
      if (v137)
      {
        int v13 = (void *)*((void *)&v136 + 1);
        if (*((void *)&v136 + 1))
        {
          do
          {
            BOOL v14 = (void *)*v13;
            sub_4F4B48((uint64_t)(v13 + 2));
            operator delete(v13);
            int v13 = v14;
          }
          while (v14);
        }
        *((void *)&v136 + 1) = 0;
        uint64_t v15 = v136;
        if ((void)v136)
        {
          uint64_t v16 = 0;
          do
            *(void *)(*((void *)&v135 + 1) + 8 * v16++) = 0;
          while (v15 != v16);
        }
        uint64_t v137 = 0;
      }
      int v17 = __p;
      long long __p = 0;
      BOOL v18 = (void *)*((void *)&v135 + 1);
      *((void *)&v135 + 1) = v17;
      if (v18) {
        operator delete(v18);
      }
      unint64_t v19 = v124;
      unint64_t v20 = v125;
      unint64_t v124 = 0;
      *((void *)&v136 + 1) = v125;
      uint64_t v137 = v126;
      int v138 = v127;
      *(void *)&long long v136 = v19;
      if (v126)
      {
        unint64_t v21 = v125[1];
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v21 >= v19) {
            v21 %= v19;
          }
        }
        else
        {
          v21 &= v19 - 1;
        }
        *(void *)(*((void *)&v135 + 1) + 8 * v21) = (char *)&v136 + 8;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        char v139 = v128;
      }
      else
      {
        char v139 = v128;
        if (v125)
        {
          do
          {
            int v22 = (void *)*v20;
            sub_4F4B48((uint64_t)(v20 + 2));
            operator delete(v20);
            unint64_t v20 = v22;
          }
          while (v22);
        }
      }
      BOOL v23 = __p;
      long long __p = 0;
      if (v23) {
        operator delete(v23);
      }
      long long v24 = (void **)v121[0];
      if (v121[0])
      {
        int v25 = (void **)v121[1];
        uint64_t v26 = v121[0];
        if (v121[1] != v121[0])
        {
          do
          {
            if (*((char *)v25 - 1) < 0) {
              operator delete(*(v25 - 3));
            }
            v25 -= 3;
          }
          while (v25 != v24);
          uint64_t v26 = v121[0];
        }
        v121[1] = v24;
        operator delete(v26);
      }
      sub_63841C((uint64_t)a3, 26);
      int v27 = 0;
    }
    else
    {
      sub_6352AC((uint64_t)v121, (uint64_t)&qword_25AEAB8);
      uint64_t v7 = v134;
      if ((void)v134)
      {
        uint64_t v8 = *((void *)&v134 + 1);
        int v9 = (void *)v134;
        if (*((void *)&v134 + 1) != (void)v134)
        {
          do
          {
            if (*(char *)(v8 - 1) < 0) {
              operator delete(*(void **)(v8 - 24));
            }
            v8 -= 24;
          }
          while (v8 != v7);
          int v9 = (void *)v134;
        }
        *((void *)&v134 + 1) = v7;
        operator delete(v9);
      }
      long long v134 = *(_OWORD *)v121;
      *(void *)&long long v135 = v122;
      v121[1] = 0;
      uint64_t v122 = 0;
      v121[0] = 0;
      if (v137)
      {
        uint64_t v28 = (void *)*((void *)&v136 + 1);
        if (*((void *)&v136 + 1))
        {
          do
          {
            long long v29 = (void *)*v28;
            sub_4F4B48((uint64_t)(v28 + 2));
            operator delete(v28);
            uint64_t v28 = v29;
          }
          while (v29);
        }
        *((void *)&v136 + 1) = 0;
        uint64_t v30 = v136;
        if ((void)v136)
        {
          uint64_t v31 = 0;
          do
            *(void *)(*((void *)&v135 + 1) + 8 * v31++) = 0;
          while (v30 != v31);
        }
        uint64_t v137 = 0;
      }
      BOOL v32 = __p;
      long long __p = 0;
      int v33 = (void *)*((void *)&v135 + 1);
      *((void *)&v135 + 1) = v32;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v34 = v124;
      uint64_t v35 = v125;
      unint64_t v124 = 0;
      *((void *)&v136 + 1) = v125;
      uint64_t v137 = v126;
      int v138 = v127;
      *(void *)&long long v136 = v34;
      if (v126)
      {
        unint64_t v36 = v125[1];
        if ((v34 & (v34 - 1)) != 0)
        {
          if (v36 >= v34) {
            v36 %= v34;
          }
        }
        else
        {
          v36 &= v34 - 1;
        }
        *(void *)(*((void *)&v135 + 1) + 8 * v36) = (char *)&v136 + 8;
        uint64_t v125 = 0;
        uint64_t v126 = 0;
        char v139 = v128;
      }
      else
      {
        char v139 = v128;
        if (v125)
        {
          do
          {
            uint64_t v37 = (void *)*v35;
            sub_4F4B48((uint64_t)(v35 + 2));
            operator delete(v35);
            uint64_t v35 = v37;
          }
          while (v37);
        }
      }
      long long v38 = __p;
      long long __p = 0;
      if (v38) {
        operator delete(v38);
      }
      long long v39 = (void **)v121[0];
      if (v121[0])
      {
        uint64_t v40 = (void **)v121[1];
        long long v41 = v121[0];
        if (v121[1] != v121[0])
        {
          do
          {
            if (*((char *)v40 - 1) < 0) {
              operator delete(*(v40 - 3));
            }
            v40 -= 3;
          }
          while (v40 != v39);
          long long v41 = v121[0];
        }
        v121[1] = v39;
        operator delete(v41);
      }
      sub_63841C((uint64_t)a3, 28);
      int v27 = 1;
    }
    sub_638E00((uint64_t)a3, (uint64_t)&v134);
    sub_6389F0((uint64_t)a3, *(_DWORD *)(a1 + 4088) - (a2 ^ 1));
    uint64_t v42 = 2265;
    if (a2)
    {
      uint64_t v42 = 2266;
      int v43 = 3;
    }
    else
    {
      int v43 = 1;
    }
    if (*(unsigned char *)(a1 + v42)) {
      int v44 = 2;
    }
    else {
      int v44 = v43;
    }
    sub_6389F8((uint64_t)a3, v44);
    sub_63553C((uint64_t)&xmmword_25AEE00, (uint64_t)&v130);
    uint64_t v119 = 0;
    unint64_t v120 = 0;
    sub_6370D4(v121, &v130, 1, &v119);
    uint64_t v45 = v120;
    if (v120 && !atomic_fetch_add(&v120->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    sub_638778(a3, (uint64_t)v121);
    if ((v27 | a2) == 1 && *(unsigned char *)(a1 + 2264))
    {
      LODWORD(v110) = 19;
      sub_6387E4((uint64_t)a3, (int *)&v110);
      sub_63553C((uint64_t)&dword_25AE878, (uint64_t)&v115);
      uint64_t v108 = 0;
      int v109 = 0;
      sub_6370D4(&v110, &v115, 1, &v108);
      uint64_t v46 = v109;
      if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      sub_638778(a3, (uint64_t)&v110);
      LODWORD(v99) = 18;
      sub_6387E4((uint64_t)a3, (int *)&v99);
      uint64_t v47 = 1116;
      if (v27) {
        uint64_t v47 = 1128;
      }
      sub_6352AC((uint64_t)&v104, (uint64_t)&word_25AC820[v47]);
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      sub_6370D4(&v99, &v104, 1, &v97);
      uint64_t v48 = v98;
      if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      sub_638778(a3, (uint64_t)&v99);
      uint64_t v49 = 2272;
      if (a2) {
        uint64_t v49 = 2408;
      }
      sub_638638((uint64_t)a3, (long long *)(a1 + v49));
      uint64_t v50 = 2112;
      if (v27) {
        uint64_t v50 = 2088;
      }
      __n128 v51 = sub_63874C((uint64_t)a3, (__n128 *)(a1 + v50));
      size_t v52 = v103;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v52->__on_zero_shared)(v52, v51);
        std::__shared_weak_count::__release_weak(v52);
      }
      int v53 = v102;
      if (v102)
      {
        do
        {
          size_t v54 = (void *)*v53;
          sub_4F4B48((uint64_t)(v53 + 2));
          operator delete(v53);
          int v53 = v54;
        }
        while (v54);
      }
      unint64_t v55 = v101;
      uint64_t v101 = 0;
      if (v55) {
        operator delete(v55);
      }
      uint64_t v56 = (void **)v99;
      if (v99)
      {
        uint64_t v57 = v100;
        uint64_t v58 = v99;
        if (v100 != v99)
        {
          do
          {
            if (*((char *)v57 - 1) < 0) {
              operator delete(*(v57 - 3));
            }
            v57 -= 3;
          }
          while (v57 != v56);
          uint64_t v58 = v99;
        }
        uint64_t v100 = v56;
        operator delete(v58);
      }
      int v59 = v107;
      if (v107)
      {
        do
        {
          uint64_t v60 = (void *)*v59;
          sub_4F4B48((uint64_t)(v59 + 2));
          operator delete(v59);
          int v59 = v60;
        }
        while (v60);
      }
      std::string::size_type v61 = v106;
      uint64_t v106 = 0;
      if (v61) {
        operator delete(v61);
      }
      uint64_t v62 = (void **)v104;
      if (v104)
      {
        long long v63 = v105;
        int v64 = v104;
        if (v105 != v104)
        {
          do
          {
            if (*((char *)v63 - 1) < 0) {
              operator delete(*(v63 - 3));
            }
            v63 -= 3;
          }
          while (v63 != v62);
          int v64 = v104;
        }
        uint64_t v105 = v62;
        operator delete(v64);
      }
      long long v65 = v114;
      if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v65->__on_zero_shared)(v65, v51);
        std::__shared_weak_count::__release_weak(v65);
      }
      uint64_t v66 = v113;
      if (v113)
      {
        do
        {
          long long v67 = (void *)*v66;
          sub_4F4B48((uint64_t)(v66 + 2));
          operator delete(v66);
          uint64_t v66 = v67;
        }
        while (v67);
      }
      long long v68 = v112;
      int v112 = 0;
      if (v68) {
        operator delete(v68);
      }
      long long v69 = (void **)v110;
      if (v110)
      {
        long long v70 = v111;
        long long v71 = v110;
        if (v111 != v110)
        {
          do
          {
            if (*((char *)v70 - 1) < 0) {
              operator delete(*(v70 - 3));
            }
            v70 -= 3;
          }
          while (v70 != v69);
          long long v71 = v110;
        }
        unint64_t v111 = v69;
        operator delete(v71);
      }
      uint64_t v72 = v118;
      if (v118)
      {
        do
        {
          uint64_t v73 = (void *)*v72;
          sub_4F4B48((uint64_t)(v72 + 2));
          operator delete(v72);
          uint64_t v72 = v73;
        }
        while (v73);
      }
      uint64_t v74 = v117;
      long long v117 = 0;
      if (v74) {
        operator delete(v74);
      }
      uint64_t v75 = (void **)v115;
      if (v115)
      {
        uint64_t v76 = v116;
        long long v77 = v115;
        if (v116 != v115)
        {
          do
          {
            if (*((char *)v76 - 1) < 0) {
              operator delete(*(v76 - 3));
            }
            v76 -= 3;
          }
          while (v76 != v75);
          long long v77 = v115;
        }
        long long v116 = v75;
        operator delete(v77);
      }
    }
    uint64_t v78 = v129;
    if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    unsigned int v79 = v125;
    if (v125)
    {
      do
      {
        long long v80 = (void *)*v79;
        sub_4F4B48((uint64_t)(v79 + 2));
        operator delete(v79);
        unsigned int v79 = v80;
      }
      while (v80);
    }
    long long v81 = __p;
    long long __p = 0;
    if (v81) {
      operator delete(v81);
    }
    long long v82 = (void **)v121[0];
    if (v121[0])
    {
      uint64_t v83 = (void **)v121[1];
      __darwin_ct_rune_t v84 = v121[0];
      if (v121[1] != v121[0])
      {
        do
        {
          if (*((char *)v83 - 1) < 0) {
            operator delete(*(v83 - 3));
          }
          v83 -= 3;
        }
        while (v83 != v82);
        __darwin_ct_rune_t v84 = v121[0];
      }
      v121[1] = v82;
      operator delete(v84);
    }
    uint64_t v85 = v133;
    if (v133)
    {
      do
      {
        char v86 = (void *)*v85;
        sub_4F4B48((uint64_t)(v85 + 2));
        operator delete(v85);
        uint64_t v85 = v86;
      }
      while (v86);
    }
    size_t v87 = v132;
    v132 = 0;
    if (v87) {
      operator delete(v87);
    }
    uint64_t v88 = v130;
    if (v130)
    {
      uint64_t v89 = v131;
      long long v90 = v130;
      if (v131 != v130)
      {
        do
        {
          if (*((char *)v89 - 1) < 0) {
            operator delete(*(v89 - 3));
          }
          v89 -= 3;
        }
        while (v89 != v88);
        long long v90 = v130;
      }
      unint64_t v131 = v88;
      operator delete(v90);
    }
    int v91 = (void *)*((void *)&v136 + 1);
    if (*((void *)&v136 + 1))
    {
      do
      {
        uint64_t v92 = (void *)*v91;
        sub_4F4B48((uint64_t)(v91 + 2));
        operator delete(v91);
        int v91 = v92;
      }
      while (v92);
    }
    uint64_t v93 = (void *)*((void *)&v135 + 1);
    *((void *)&v135 + 1) = 0;
    if (v93) {
      operator delete(v93);
    }
    uint64_t v94 = v134;
    if ((void)v134)
    {
      uint64_t v95 = *((void *)&v134 + 1);
      int v96 = (void *)v134;
      if (*((void *)&v134 + 1) != (void)v134)
      {
        do
        {
          if (*(char *)(v95 - 1) < 0) {
            operator delete(*(void **)(v95 - 24));
          }
          v95 -= 24;
        }
        while (v95 != v94);
        int v96 = (void *)v134;
      }
      *((void *)&v134 + 1) = v94;
      operator delete(v96);
    }
  }
}

void sub_755B7C(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  sub_4D4880((void **)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_755C60(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = 2144;
  if (a2) {
    uint64_t v6 = 2168;
  }
  sub_761C80((const std::string *)(a1 + v6), (uint64_t)&v192);
  sub_5A9D64((uint64_t)a3);
  sub_63841C((uint64_t)a3, 27);
  sub_638E00((uint64_t)a3, (uint64_t)&v192);
  sub_6389F0((uint64_t)a3, *(_DWORD *)(a1 + 4088) - (a2 ^ 1));
  uint64_t v7 = 2265;
  if (a2)
  {
    uint64_t v7 = 2266;
    int v8 = 3;
  }
  else
  {
    int v8 = 1;
  }
  if (*(unsigned char *)(a1 + v7)) {
    int v9 = 2;
  }
  else {
    int v9 = v8;
  }
  sub_6389F8((uint64_t)a3, v9);
  int v10 = byte_25AED6F;
  if (byte_25AED6F >= 0) {
    size_t v11 = byte_25AED6F;
  }
  else {
    size_t v11 = qword_25AED60;
  }
  int v12 = byte_25ADA37;
  if (byte_25ADA37 >= 0) {
    size_t v13 = byte_25ADA37;
  }
  else {
    size_t v13 = qword_25ADA28;
  }
  unint64_t v14 = v13 + v11;
  if (v13 + v11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 <= 0x16)
  {
    unint64_t v184 = 0;
    uint64_t v183 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v184) = v13 + v11;
    if (!v11) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  uint64_t v43 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v43 = v14 | 7;
  }
  uint64_t v44 = v43 + 1;
  p_dst = (void **)operator new(v43 + 1);
  unint64_t v184 = v44 | 0x8000000000000000;
  std::string __dst = p_dst;
  uint64_t v183 = (void **)(v13 + v11);
  if (v11)
  {
LABEL_18:
    if (v10 >= 0) {
      uint64_t v16 = &qword_25AED58;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25AED58;
    }
    memmove(p_dst, v16, v11);
  }
LABEL_22:
  int v17 = (char *)p_dst + v11;
  if (v13)
  {
    if (v12 >= 0) {
      BOOL v18 = &qword_25ADA20;
    }
    else {
      BOOL v18 = (uint64_t *)qword_25ADA20;
    }
    memmove(v17, v18, v13);
  }
  v17[v13] = 0;
  sub_6352AC((uint64_t)&v188, (uint64_t)&__dst);
  if (SHIBYTE(v184) < 0) {
    operator delete(__dst);
  }
  uint64_t v19 = 2216;
  if (a2) {
    uint64_t v19 = 2240;
  }
  sub_6358A0((uint64_t)&v188, &xmmword_25AE9B0, (const std::string *)(a1 + v19));
  long long v181 = 0;
  uint64_t v180 = 0;
  sub_6370D4(&__dst, &v188, 1, &v180);
  unint64_t v20 = v181;
  if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  sub_638778(a3, (uint64_t)&__dst);
  if (a2)
  {
    LODWORD(v171) = 19;
    sub_6387E4((uint64_t)a3, (int *)&v171);
    sub_63553C((uint64_t)&dword_25AE878, (uint64_t)&v176);
    int v170 = 0;
    uint64_t v169 = 0;
    sub_6370D4(&v171, &v176, 1, &v169);
    unint64_t v21 = v170;
    if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    sub_638778(a3, (uint64_t)&v171);
    LODWORD(v160) = 18;
    sub_6387E4((uint64_t)a3, (int *)&v160);
    sub_6352AC((uint64_t)&v165, (uint64_t)&unk_25AD0D8);
    unint64_t v159 = 0;
    uint64_t v158 = 0;
    sub_6370D4(&v160, &v165, 1, &v158);
    int v22 = v159;
    if (v159 && !atomic_fetch_add(&v159->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    sub_638778(a3, (uint64_t)&v160);
    LODWORD(v149) = 19;
    sub_6387E4((uint64_t)a3, (int *)&v149);
    sub_63553C((uint64_t)&dword_25AE890, (uint64_t)&v154);
    uint64_t v147 = 0;
    char v148 = 0;
    sub_6370D4(&v149, &v154, 1, &v147);
    BOOL v23 = v148;
    if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    sub_638778(a3, (uint64_t)&v149);
    LODWORD(__p) = 18;
    sub_6387E4((uint64_t)a3, (int *)&__p);
    int v24 = byte_25AE217;
    if (byte_25AE217 >= 0) {
      size_t v25 = byte_25AE217;
    }
    else {
      size_t v25 = *((void *)&xmmword_25AE200 + 1);
    }
    int v26 = byte_25ADA07;
    if (byte_25ADA07 >= 0) {
      size_t v27 = byte_25ADA07;
    }
    else {
      size_t v27 = qword_25AD9F8;
    }
    unint64_t v28 = v27 + v25;
    if (v27 + v25 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v28 > 0x16)
    {
      uint64_t v45 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v45 = v28 | 7;
      }
      uint64_t v46 = v45 + 1;
      p_p = (char *)operator new(v45 + 1);
      int v138 = (void **)(v27 + v25);
      unint64_t v139 = v46 | 0x8000000000000000;
      long long __p = p_p;
      if (!v25) {
        goto LABEL_57;
      }
    }
    else
    {
      int v138 = 0;
      unint64_t v139 = 0;
      long long __p = 0;
      p_p = (char *)&__p;
      HIBYTE(v139) = v27 + v25;
      if (!v25)
      {
LABEL_57:
        uint64_t v31 = &p_p[v25];
        if (v27)
        {
          if (v26 >= 0) {
            BOOL v32 = &qword_25AD9F0;
          }
          else {
            BOOL v32 = (uint64_t *)qword_25AD9F0;
          }
          memmove(v31, v32, v27);
        }
        v31[v27] = 0;
        sub_6352AC((uint64_t)&v143, (uint64_t)&__p);
        if (SHIBYTE(v139) < 0) {
          operator delete(__p);
        }
        uint64_t v135 = 0;
        long long v136 = 0;
        sub_6370D4(&__p, &v143, 1, &v135);
        int v33 = v136;
        if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        sub_638778(a3, (uint64_t)&__p);
        LODWORD(v126) = 17;
        sub_6387E4((uint64_t)a3, (int *)&v126);
        sub_63553C((uint64_t)&unk_25AEE90, (uint64_t)&v131);
        uint64_t v124 = 0;
        uint64_t v125 = 0;
        sub_6370D4(&v126, &v131, 1, &v124);
        unint64_t v34 = v125;
        if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        sub_638778(a3, (uint64_t)&v126);
        sub_638638((uint64_t)a3, (long long *)(a1 + 2408));
        __n128 v35 = sub_63874C((uint64_t)a3, (__n128 *)(a1 + 2112));
        unint64_t v36 = v130;
        if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v35);
          std::__shared_weak_count::__release_weak(v36);
        }
        uint64_t v37 = v129;
        if (v129)
        {
          do
          {
            long long v38 = (void *)*v37;
            sub_4F4B48((uint64_t)(v37 + 2));
            operator delete(v37);
            uint64_t v37 = v38;
          }
          while (v38);
        }
        long long v39 = v128;
        char v128 = 0;
        if (v39) {
          operator delete(v39);
        }
        uint64_t v40 = (void **)v126;
        if (v126)
        {
          long long v41 = v127;
          uint64_t v42 = v126;
          if (v127 != v126)
          {
            do
            {
              if (*((char *)v41 - 1) < 0) {
                operator delete(*(v41 - 3));
              }
              v41 -= 3;
            }
            while (v41 != v40);
            uint64_t v42 = v126;
          }
          int v127 = v40;
          operator delete(v42);
        }
        uint64_t v47 = v134;
        if (v134)
        {
          do
          {
            uint64_t v48 = (void *)*v47;
            sub_4F4B48((uint64_t)(v47 + 2));
            operator delete(v47);
            uint64_t v47 = v48;
          }
          while (v48);
        }
        uint64_t v49 = v133;
        uint64_t v133 = 0;
        if (v49) {
          operator delete(v49);
        }
        uint64_t v50 = (void **)v131;
        if (v131)
        {
          __n128 v51 = v132;
          size_t v52 = v131;
          if (v132 != v131)
          {
            do
            {
              if (*((char *)v51 - 1) < 0) {
                operator delete(*(v51 - 3));
              }
              v51 -= 3;
            }
            while (v51 != v50);
            size_t v52 = v131;
          }
          v132 = v50;
          operator delete(v52);
        }
        int v53 = v142;
        if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v53->__on_zero_shared)(v53, v35);
          std::__shared_weak_count::__release_weak(v53);
        }
        size_t v54 = v141;
        if (v141)
        {
          do
          {
            unint64_t v55 = (void *)*v54;
            sub_4F4B48((uint64_t)(v54 + 2));
            operator delete(v54);
            size_t v54 = v55;
          }
          while (v55);
        }
        uint64_t v56 = v140;
        int v140 = 0;
        if (v56) {
          operator delete(v56);
        }
        uint64_t v57 = (void **)__p;
        if (__p)
        {
          uint64_t v58 = v138;
          int v59 = __p;
          if (v138 != __p)
          {
            do
            {
              if (*((char *)v58 - 1) < 0) {
                operator delete(*(v58 - 3));
              }
              v58 -= 3;
            }
            while (v58 != v57);
            int v59 = __p;
          }
          int v138 = v57;
          operator delete(v59);
        }
        uint64_t v60 = v146;
        if (v146)
        {
          do
          {
            std::string::size_type v61 = (void *)*v60;
            sub_4F4B48((uint64_t)(v60 + 2));
            operator delete(v60);
            uint64_t v60 = v61;
          }
          while (v61);
        }
        uint64_t v62 = v145;
        v145 = 0;
        if (v62) {
          operator delete(v62);
        }
        long long v63 = (void **)v143;
        if (v143)
        {
          int v64 = v144;
          long long v65 = v143;
          if (v144 != v143)
          {
            do
            {
              if (*((char *)v64 - 1) < 0) {
                operator delete(*(v64 - 3));
              }
              v64 -= 3;
            }
            while (v64 != v63);
            long long v65 = v143;
          }
          unint64_t v144 = v63;
          operator delete(v65);
        }
        uint64_t v66 = v153;
        if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v35);
          std::__shared_weak_count::__release_weak(v66);
        }
        long long v67 = v152;
        if (v152)
        {
          do
          {
            long long v68 = (void *)*v67;
            sub_4F4B48((uint64_t)(v67 + 2));
            operator delete(v67);
            long long v67 = v68;
          }
          while (v68);
        }
        long long v69 = v151;
        uint64_t v151 = 0;
        if (v69) {
          operator delete(v69);
        }
        long long v70 = (void **)v149;
        if (v149)
        {
          long long v71 = v150;
          uint64_t v72 = v149;
          if (v150 != v149)
          {
            do
            {
              if (*((char *)v71 - 1) < 0) {
                operator delete(*(v71 - 3));
              }
              v71 -= 3;
            }
            while (v71 != v70);
            uint64_t v72 = v149;
          }
          std::string::size_type v150 = v70;
          operator delete(v72);
        }
        uint64_t v73 = v157;
        if (v157)
        {
          do
          {
            uint64_t v74 = (void *)*v73;
            sub_4F4B48((uint64_t)(v73 + 2));
            operator delete(v73);
            uint64_t v73 = v74;
          }
          while (v74);
        }
        uint64_t v75 = v156;
        long long v156 = 0;
        if (v75) {
          operator delete(v75);
        }
        uint64_t v76 = (void **)v154;
        if (v154)
        {
          long long v77 = v155;
          uint64_t v78 = v154;
          if (v155 != v154)
          {
            do
            {
              if (*((char *)v77 - 1) < 0) {
                operator delete(*(v77 - 3));
              }
              v77 -= 3;
            }
            while (v77 != v76);
            uint64_t v78 = v154;
          }
          char v155 = v76;
          operator delete(v78);
        }
        unsigned int v79 = v164;
        if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v79->__on_zero_shared)(v79, v35);
          std::__shared_weak_count::__release_weak(v79);
        }
        long long v80 = v163;
        if (v163)
        {
          do
          {
            long long v81 = (void *)*v80;
            sub_4F4B48((uint64_t)(v80 + 2));
            operator delete(v80);
            long long v80 = v81;
          }
          while (v81);
        }
        long long v82 = v162;
        uint64_t v162 = 0;
        if (v82) {
          operator delete(v82);
        }
        uint64_t v83 = (void **)v160;
        if (v160)
        {
          __darwin_ct_rune_t v84 = v161;
          uint64_t v85 = v160;
          if (v161 != v160)
          {
            do
            {
              if (*((char *)v84 - 1) < 0) {
                operator delete(*(v84 - 3));
              }
              v84 -= 3;
            }
            while (v84 != v83);
            uint64_t v85 = v160;
          }
          uint64_t v161 = v83;
          operator delete(v85);
        }
        char v86 = v168;
        if (v168)
        {
          do
          {
            size_t v87 = (void *)*v86;
            sub_4F4B48((uint64_t)(v86 + 2));
            operator delete(v86);
            char v86 = v87;
          }
          while (v87);
        }
        uint64_t v88 = v167;
        long long v167 = 0;
        if (v88) {
          operator delete(v88);
        }
        uint64_t v89 = (void **)v165;
        if (v165)
        {
          long long v90 = v166;
          int v91 = v165;
          if (v166 != v165)
          {
            do
            {
              if (*((char *)v90 - 1) < 0) {
                operator delete(*(v90 - 3));
              }
              v90 -= 3;
            }
            while (v90 != v89);
            int v91 = v165;
          }
          uint64_t v166 = v89;
          operator delete(v91);
        }
        uint64_t v92 = v175;
        if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v92->__on_zero_shared)(v92, v35);
          std::__shared_weak_count::__release_weak(v92);
        }
        uint64_t v93 = v174;
        if (v174)
        {
          do
          {
            uint64_t v94 = (void *)*v93;
            sub_4F4B48((uint64_t)(v93 + 2));
            operator delete(v93);
            uint64_t v93 = v94;
          }
          while (v94);
        }
        uint64_t v95 = v173;
        long long v173 = 0;
        if (v95) {
          operator delete(v95);
        }
        int v96 = (void **)v171;
        if (v171)
        {
          uint64_t v97 = v172;
          uint64_t v98 = v171;
          if (v172 != v171)
          {
            do
            {
              if (*((char *)v97 - 1) < 0) {
                operator delete(*(v97 - 3));
              }
              v97 -= 3;
            }
            while (v97 != v96);
            uint64_t v98 = v171;
          }
          unint64_t v172 = v96;
          operator delete(v98);
        }
        uint64_t v99 = v179;
        if (v179)
        {
          do
          {
            uint64_t v100 = (void *)*v99;
            sub_4F4B48((uint64_t)(v99 + 2));
            operator delete(v99);
            uint64_t v99 = v100;
          }
          while (v100);
        }
        uint64_t v101 = v178;
        int v178 = 0;
        if (v101) {
          operator delete(v101);
        }
        uint64_t v102 = (void **)v176;
        if (v176)
        {
          uint64_t v103 = v177;
          uint64_t v104 = v176;
          if (v177 != v176)
          {
            do
            {
              if (*((char *)v103 - 1) < 0) {
                operator delete(*(v103 - 3));
              }
              v103 -= 3;
            }
            while (v103 != v102);
            uint64_t v104 = v176;
          }
          long long v177 = v102;
          operator delete(v104);
        }
        goto LABEL_213;
      }
    }
    if (v24 >= 0) {
      uint64_t v30 = &xmmword_25AE200;
    }
    else {
      uint64_t v30 = (long long *)xmmword_25AE200;
    }
    memmove(p_p, v30, v25);
    goto LABEL_57;
  }
LABEL_213:
  uint64_t v105 = v187;
  if (v187 && !atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  uint64_t v106 = v186;
  if (v186)
  {
    do
    {
      int v107 = (void *)*v106;
      sub_4F4B48((uint64_t)(v106 + 2));
      operator delete(v106);
      uint64_t v106 = v107;
    }
    while (v107);
  }
  uint64_t v108 = v185;
  long long v185 = 0;
  if (v108) {
    operator delete(v108);
  }
  int v109 = __dst;
  if (__dst)
  {
    size_t v110 = v183;
    unint64_t v111 = __dst;
    if (v183 != __dst)
    {
      do
      {
        if (*((char *)v110 - 1) < 0) {
          operator delete(*(v110 - 3));
        }
        v110 -= 3;
      }
      while (v110 != v109);
      unint64_t v111 = __dst;
    }
    uint64_t v183 = v109;
    operator delete(v111);
  }
  int v112 = v191;
  if (v191)
  {
    do
    {
      unint64_t v113 = (void *)*v112;
      sub_4F4B48((uint64_t)(v112 + 2));
      operator delete(v112);
      int v112 = v113;
    }
    while (v113);
  }
  uint64_t v114 = v190;
  size_t v190 = 0;
  if (v114) {
    operator delete(v114);
  }
  uint64_t v115 = v188;
  if (v188)
  {
    long long v116 = v189;
    long long v117 = v188;
    if (v189 != v188)
    {
      do
      {
        if (*((char *)v116 - 1) < 0) {
          operator delete(*(v116 - 3));
        }
        v116 -= 3;
      }
      while (v116 != v115);
      long long v117 = v188;
    }
    int v189 = v115;
    operator delete(v117);
  }
  int v118 = v195;
  if (v195)
  {
    do
    {
      uint64_t v119 = (void *)*v118;
      sub_4F4B48((uint64_t)(v118 + 2));
      operator delete(v118);
      int v118 = v119;
    }
    while (v119);
  }
  unint64_t v120 = v194;
  uint64_t v194 = 0;
  if (v120) {
    operator delete(v120);
  }
  uint64_t v121 = v192;
  if (v192)
  {
    uint64_t v122 = v193;
    uint64_t v123 = v192;
    if (v193 != v192)
    {
      do
      {
        if (*((char *)v122 - 1) < 0) {
          operator delete(*(v122 - 3));
        }
        v122 -= 3;
      }
      while (v122 != v121);
      uint64_t v123 = v192;
    }
    char v193 = v121;
    operator delete(v123);
  }
}

void sub_756AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_14A84((uint64_t)&a9);
  sub_4D4880(&a24);
  sub_4F31D0(&__p);
  sub_4D4880(&a48);
  sub_4F31D0(&a59);
  sub_4D4880(&a72);
  sub_4F31D0((void **)&STACK[0x250]);
  sub_4D4880((void **)&STACK[0x2B8]);
  sub_4F31D0((void **)&STACK[0x310]);
  sub_4D4880((void **)&STACK[0x378]);
  sub_4F31D0((void **)&STACK[0x3D0]);
  sub_4D4880((void **)(v73 - 232));
  sub_52F090(v72);
  sub_4D4880((void **)(v73 - 160));
  _Unwind_Resume(a1);
}

void sub_756C74(_Unwind_Exception *a1)
{
  sub_52F090(v1);
  sub_4D4880((void **)(v2 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_756C98@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t)&a1[137];
  BOOL v5 = a1[255].n128_u32[2] == 1;
  int v6 = a1[141].n128_u8[10];
  int v7 = a1[141].n128_u8[9];
  int v8 = a1[141].n128_u8[12];
  BOOL v9 = sub_62D444((uint64_t)&a1[159].n128_i64[1]);
  uint64_t v10 = a1[159].n128_u8[1];
  unint64_t v11 = (unint64_t)a1[159].n128_u8[2] << 40;
  int v12 = 0x1000000;
  if (!v9 || !v5) {
    int v12 = 0;
  }
  int v22 = v12 | (v6 << 16) | (v7 << 8) | v8;
  __int16 v23 = (v11 | (v10 << 32)) >> 32;
  sub_761E88(a1, v4, (unsigned __int8 *)&v22, (uint64_t)&v24);
  sub_639258(a2, (uint64_t)&v24, 0, 0, 1);
  size_t v13 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v14 = v27;
  if (v27)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      sub_4F4B48((uint64_t)(v14 + 2));
      operator delete(v14);
      unint64_t v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = __p;
  long long __p = 0;
  if (v16) {
    operator delete(v16);
  }
  int v17 = (void **)v24;
  if (v24)
  {
    BOOL v18 = v25;
    uint64_t v19 = v24;
    if (v25 != v24)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      uint64_t v19 = v24;
    }
    size_t v25 = v17;
    operator delete(v19);
  }
  sub_638450(a2, a1[130].n128_i32[0]);
  sub_63874C(a2, a1 + 132);
  if (a1[141].n128_u8[10]) {
    int v20 = 57;
  }
  else {
    int v20 = 58;
  }
  sub_63841C(a2, v20);
  int v24 = 0;
  sub_638408(a2, &a1[129].n128_u64[1], &v24);
  return sub_6396EC(a2, a1[159].n128_i8[1]);
}

void sub_756E78(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_756E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_756EA0(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_756EB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 2192;
  uint64_t v5 = a1 + 2552;
  int v6 = *(unsigned __int8 *)(a1 + 4074);
  BOOL v7 = *(_DWORD *)(a1 + 4088) == 1;
  int v8 = *(unsigned __int8 *)(a1 + 2266);
  int v9 = *(unsigned __int8 *)(a1 + 2265);
  int v10 = *(unsigned __int8 *)(a1 + 2268);
  BOOL v11 = sub_62D444(a1 + 2552);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 2545);
  unint64_t v13 = (unint64_t)*(unsigned __int8 *)(a1 + 2546) << 40;
  int v14 = 0x1000000;
  if (!v11 || !v7) {
    int v14 = 0;
  }
  LODWORD(v28) = v14 | (v8 << 16) | (v9 << 8) | v10;
  WORD2(v28) = (v13 | (v12 << 32)) >> 32;
  sub_764020(a1, v4, v6, (unsigned __int8 *)&v28, (uint64_t)&v29);
  sub_639258(a2, (uint64_t)&v29, 0, 0, 1);
  sub_638450(a2, *(_DWORD *)(a1 + 2080));
  sub_63874C(a2, (__n128 *)(a1 + 2112));
  if (sub_62D404(v5) && *(unsigned char *)(a1 + 3963))
  {
    int v15 = *(_DWORD *)(a1 + 4088);
    BOOL v16 = sub_62D444(v5);
    if (v15 == 1 && v16)
    {
      if (*(unsigned char *)(a1 + 2268)) {
        int v18 = 63;
      }
      else {
        int v18 = 62;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 2268)) {
        int v26 = 57;
      }
      else {
        int v26 = 58;
      }
      if (*(unsigned char *)(a1 + 2268)) {
        int v27 = 59;
      }
      else {
        int v27 = 60;
      }
      if (*(unsigned char *)(a1 + 2265)) {
        int v18 = v27;
      }
      else {
        int v18 = v26;
      }
    }
  }
  else
  {
    int v18 = 53;
  }
  sub_63841C(a2, v18);
  uint64_t v28 = 0;
  sub_638408(a2, (void *)(a1 + 2072), &v28);
  sub_6389F0(a2, *(_DWORD *)(a1 + 4088));
  sub_638638(a2, (long long *)(a1 + 2408));
  sub_6396EC(a2, *(unsigned char *)(a1 + 2545));
  uint64_t v19 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  int v20 = v32;
  if (v32)
  {
    do
    {
      unint64_t v21 = (void *)*v20;
      sub_4F4B48((uint64_t)(v20 + 2));
      operator delete(v20);
      int v20 = v21;
    }
    while (v21);
  }
  int v22 = __p;
  long long __p = 0;
  if (v22) {
    operator delete(v22);
  }
  __int16 v23 = (void **)v29;
  if (v29)
  {
    int v24 = v30;
    size_t v25 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v23);
      size_t v25 = v29;
    }
    uint64_t v30 = v23;
    operator delete(v25);
  }
}

void sub_757120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_639B78(v2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_757154@<X0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  sub_7654CC((uint64_t)a1, a1[141].n128_u8[12], (uint64_t)&a1[137], (uint64_t)&v13);
  sub_639258(a2, (uint64_t)&v13, 0, 0, 1);
  uint64_t v4 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = v16;
  if (v16)
  {
    do
    {
      int v6 = (void *)*v5;
      sub_4F4B48((uint64_t)(v5 + 2));
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  BOOL v7 = __p;
  long long __p = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v13;
  if (v13)
  {
    int v9 = v14;
    int v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      int v10 = v13;
    }
    int v14 = v8;
    operator delete(v10);
  }
  sub_638450(a2, a1[130].n128_i32[0]);
  sub_63874C(a2, a1 + 132);
  if (a1[141].n128_u8[10]) {
    int v11 = 59;
  }
  else {
    int v11 = 60;
  }
  sub_63841C(a2, v11);
  unint64_t v13 = 0;
  return sub_638408(a2, &a1[129].n128_u64[1], &v13);
}

void sub_7572B8(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

void sub_7572CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0((void **)va);
  _Unwind_Resume(a1);
}

void sub_7572E0(_Unwind_Exception *a1)
{
  sub_639B78(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_7572F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x1A8C536FE1A8C537 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x3CAE759203CAE7) {
    sub_2E00();
  }
  if (0x3518A6DFC3518A6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x3518A6DFC3518A6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x1A8C536FE1A8C537 * ((a1[2] - *a1) >> 3)) >= 0x1E573AC901E573) {
    unint64_t v6 = 0x3CAE759203CAE7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x3CAE759203CAE7) {
      sub_188D718();
    }
    BOOL v7 = (char *)operator new(1080 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[1080 * v3];
  int v15 = &v7[1080 * v6];
  sub_599644(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 1080;
  int v11 = (char *)*a1;
  int v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 1080;
      sub_7574DC(v8 - 1080, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (char *)*a1;
    int v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 1080;
        sub_52F1E8((uint64_t)v10);
      }
      while (v10 != v12);
      int v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 1080;
}

void sub_757474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_757488((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_757488(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1080;
    sub_52F1E8(i - 1080);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_7574DC(uint64_t a1, uint64_t a2)
{
  sub_5AA6B0(a1, a2);
  uint64_t v4 = *(void *)(a2 + 816);
  *(_DWORD *)(v3 + 824) = *(_DWORD *)(a2 + 824);
  *(void *)(v3 + 816) = v4;
  *(void *)(v3 + 832) = 0;
  *(_OWORD *)(v3 + 840) = 0u;
  *(_OWORD *)(v3 + 832) = *(_OWORD *)(a2 + 832);
  *(void *)(v3 + 848) = *(void *)(a2 + 848);
  *(void *)(a2 + 848) = 0;
  *(_OWORD *)(a2 + 832) = 0u;
  *(_DWORD *)(v3 + 856) = *(_DWORD *)(a2 + 856);
  *(unsigned char *)(v3 + 864) = *(unsigned char *)(a2 + 864);
  *(_DWORD *)(v3 + 872) = *(_DWORD *)(a2 + 872);
  long long v5 = *(_OWORD *)(a2 + 880);
  *(void *)(v3 + 896) = *(void *)(a2 + 896);
  *(_OWORD *)(v3 + 880) = v5;
  *(_OWORD *)(a2 + 888) = 0u;
  *(void *)(a2 + 880) = 0;
  long long v6 = *(_OWORD *)(a2 + 904);
  *(void *)(v3 + 920) = *(void *)(a2 + 920);
  *(_OWORD *)(v3 + 904) = v6;
  *(_OWORD *)(a2 + 912) = 0u;
  *(void *)(a2 + 904) = 0;
  *(void *)(v3 + 944) = 0;
  *(_OWORD *)(v3 + 928) = 0u;
  *(_OWORD *)(v3 + 928) = *(_OWORD *)(a2 + 928);
  *(void *)(v3 + 944) = *(void *)(a2 + 944);
  uint64_t v7 = *(void *)(a2 + 952);
  *(_OWORD *)(a2 + 928) = 0u;
  *(_OWORD *)(a2 + 944) = 0u;
  *(void *)(v3 + 952) = v7;
  *(void *)(v3 + 960) = *(void *)(a2 + 960);
  *(void *)(a2 + 960) = 0;
  uint64_t v8 = *(void *)(a2 + 968);
  *(void *)(v3 + 968) = v8;
  uint64_t v9 = *(void *)(a2 + 976);
  *(void *)(v3 + 976) = v9;
  *(_DWORD *)(v3 + 984) = *(_DWORD *)(a2 + 984);
  if (v9)
  {
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(v3 + 960);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
    *(void *)(v7 + 8 * v10) = v3 + 968;
    *(void *)(a2 + 968) = 0;
    *(void *)(a2 + 976) = 0;
  }
  *(unsigned char *)(v3 + 992) = *(unsigned char *)(a2 + 992);
  *(_DWORD *)(v3 + 1000) = *(_DWORD *)(a2 + 1000);
  *(_OWORD *)(v3 + 1016) = 0uLL;
  *(void *)(v3 + 1008) = 0;
  *(_OWORD *)(v3 + 1008) = *(_OWORD *)(a2 + 1008);
  *(void *)(v3 + 1024) = *(void *)(a2 + 1024);
  uint64_t v12 = *(void *)(a2 + 1032);
  *(_OWORD *)(a2 + 1008) = 0uLL;
  *(_OWORD *)(a2 + 1024) = 0uLL;
  *(void *)(v3 + 1032) = v12;
  *(void *)(v3 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a2 + 1040) = 0;
  uint64_t v13 = *(void *)(a2 + 1048);
  *(void *)(v3 + 1048) = v13;
  uint64_t v14 = *(void *)(a2 + 1056);
  *(void *)(v3 + 1056) = v14;
  *(_DWORD *)(v3 + 1064) = *(_DWORD *)(a2 + 1064);
  if (v14)
  {
    unint64_t v15 = *(void *)(v13 + 8);
    unint64_t v16 = *(void *)(v3 + 1040);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(v12 + 8 * v15) = v3 + 1048;
    *(void *)(a2 + 1048) = 0;
    *(void *)(a2 + 1056) = 0;
  }
  *(unsigned char *)(v3 + 1072) = *(unsigned char *)(a2 + 1072);
}

void *sub_7576B4(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x1A8C536FE1A8C537 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x3CAE759203CAE7) {
    sub_2E00();
  }
  if (0x3518A6DFC3518A6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x3518A6DFC3518A6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x1A8C536FE1A8C537 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x1E573AC901E573) {
    unint64_t v6 = 0x3CAE759203CAE7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x3CAE759203CAE7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(1080 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[1080 * v6];
  sub_7574DC((uint64_t)&v7[1080 * v3], a2);
  unint64_t v10 = v9 + 1080;
  uint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 1080;
    sub_7574DC((uint64_t)(v9 - 1080), (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 1080;
      sub_52F1E8((uint64_t)v11);
    }
    while (v11 != v13);
    unint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

uint64_t sub_757810(void *a1, uint64_t a2)
{
  unint64_t v3 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x50505050505050) {
    sub_2E00();
  }
  if (0xF5F5F5F5F5F5F5F6 * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xF5F5F5F5F5F5F5F6 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x28282828282828) {
    unint64_t v6 = 0x50505050505050;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x50505050505050) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(816 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[816 * v6];
  sub_5AA6B0((uint64_t)&v7[816 * v3], a2);
  uint64_t v10 = v9 + 816;
  uint64_t v12 = (void *)*a1;
  unint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 102;
    sub_5AA6B0(v9 - 816, (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (void *)*a1;
  unint64_t v11 = (void *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 102;
      sub_52F090(v11);
    }
    while (v11 != v13);
    unint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

uint64_t sub_75796C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xA0A0A0A0A0A0A0) {
    sub_2E00();
  }
  if (0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 3);
  }
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 3) >= 0x50505050505050) {
    unint64_t v6 = 0xA0A0A0A0A0A0A0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xA0A0A0A0A0A0A0) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(408 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v15 = (uint64_t)&v7[408 * v3];
  unint64_t v16 = &v7[408 * v6];
  sub_757B28((uint64_t)(a1 + 2), v15, a2);
  uint64_t v8 = v15;
  uint64_t v9 = v15 + 408;
  unint64_t v11 = (void *)*a1;
  uint64_t v10 = (void *)a1[1];
  if (v10 == (void *)*a1)
  {
    *a1 = v15;
    a1[1] = v9;
    a1[2] = (uint64_t)v16;
  }
  else
  {
    do
    {
      v8 -= 408;
      v10 -= 51;
      sub_757C94((uint64_t)(a1 + 2), v8, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (void *)*a1;
    uint64_t v10 = (void *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v16;
    if (v10 != v12)
    {
      do
      {
        uint64_t v13 = (void *)*(v10 - 6);
        if (v13)
        {
          *(v10 - 5) = v13;
          operator delete(v13);
        }
        v10 -= 51;
        sub_4F32CC(v10);
      }
      while (v10 != v12);
      uint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v15 + 408;
}

void sub_757B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_757C24((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_757B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_594F34(a2, a3);
  long long v5 = *(_OWORD *)(a3 + 340);
  *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
  *(_OWORD *)(a2 + 340) = v5;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 360) = 0;
  uint64_t v7 = *(unsigned char **)(a3 + 360);
  unint64_t v6 = *(unsigned char **)(a3 + 368);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a2 + 360) = v9;
    *(void *)(a2 + 368) = v9;
    uint64_t v10 = &v9[4 * (v8 >> 2)];
    *(void *)(a2 + 376) = v10;
    memcpy(v9, v7, v8 - 3);
    *(void *)(a2 + 368) = v10;
  }
  __n128 result = *(__n128 *)(a3 + 384);
  *(_DWORD *)(a2 + 400) = *(_DWORD *)(a3 + 400);
  *(__n128 *)(a2 + 384) = result;
  return result;
}

void sub_757C00(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[46] = v4;
    operator delete(v4);
  }
  sub_4F32CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_757C24(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void *)(i - 408);
    *(void *)(a1 + 16) = i - 408;
    long long v5 = *(void **)(i - 48);
    if (v5)
    {
      *(void *)(i - 40) = v5;
      operator delete(v5);
    }
    sub_4F32CC(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_757C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  long long v3 = *(_OWORD *)(a3 + 32);
  long long v4 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 32) = v3;
  long long v5 = *(_OWORD *)(a3 + 96);
  uint64_t v6 = *(void *)(a3 + 112);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 96) = v5;
  *(void *)(a2 + 112) = v6;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a3 + 120);
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)(a3 + 144);
  *(void *)(a2 + 160) = *(void *)(a3 + 160);
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a3 + 168);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a3 + 192);
  if (*(_DWORD *)(a3 + 192) <= 1u) {
    *(void *)(a2 + 184) = *(void *)(a3 + 184);
  }
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a3 + 200);
  long long v7 = *(_OWORD *)(a3 + 216);
  uint64_t v8 = *(void *)(a3 + 248);
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
  *(_OWORD *)(a2 + 216) = v7;
  *(void *)(a2 + 248) = v8;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = *(_OWORD *)(a3 + 256);
  *(void *)(a2 + 272) = *(void *)(a3 + 272);
  *(void *)(a3 + 264) = 0;
  *(void *)(a3 + 272) = 0;
  *(void *)(a3 + 256) = 0;
  *(unsigned char *)(a2 + 280) = *(unsigned char *)(a3 + 280);
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 288) = 0;
  *(_OWORD *)(a2 + 288) = *(_OWORD *)(a3 + 288);
  *(void *)(a2 + 304) = *(void *)(a3 + 304);
  *(void *)(a3 + 288) = 0;
  *(void *)(a3 + 296) = 0;
  *(void *)(a3 + 304) = 0;
  long long v9 = *(_OWORD *)(a3 + 312);
  *(_OWORD *)(a2 + 321) = *(_OWORD *)(a3 + 321);
  *(_OWORD *)(a2 + 312) = v9;
  long long v10 = *(_OWORD *)(a3 + 340);
  *(_DWORD *)(a2 + 356) = *(_DWORD *)(a3 + 356);
  *(_OWORD *)(a2 + 340) = v10;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 360) = 0;
  uint64_t v11 = *(void *)(a3 + 368);
  *(void *)(a2 + 360) = *(void *)(a3 + 360);
  *(void *)(a2 + 368) = v11;
  *(void *)(a2 + 376) = *(void *)(a3 + 376);
  *(void *)(a3 + 360) = 0;
  *(void *)(a3 + 368) = 0;
  *(void *)(a3 + 376) = 0;
  __n128 result = *(__n128 *)(a3 + 384);
  *(_DWORD *)(a2 + 400) = *(_DWORD *)(a3 + 400);
  *(__n128 *)(a2 + 384) = result;
  return result;
}

uint64_t sub_757E08(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xA0A0A0A0A0A0A0) {
    sub_2E00();
  }
  if (0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xF5F5F5F5F5F5F5F6 * ((a1[2] - *a1) >> 3);
  }
  if (0xFAFAFAFAFAFAFAFBLL * ((a1[2] - *a1) >> 3) >= 0x50505050505050) {
    unint64_t v6 = 0xA0A0A0A0A0A0A0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xA0A0A0A0A0A0A0) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(408 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[408 * v3];
  long long v9 = &v7[408 * v6];
  sub_757C94((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 408;
  uint64_t v12 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    v8 -= 408;
    v11 -= 51;
    sub_757C94((uint64_t)(a1 + 2), v8, (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      uint64_t v14 = (void *)*(v11 - 6);
      if (v14)
      {
        *(v11 - 5) = v14;
        operator delete(v14);
      }
      v11 -= 51;
      sub_4F32CC(v11);
    }
    while (v11 != v13);
    uint64_t v11 = v13;
  }
  if (v11) {
LABEL_20:
  }
    operator delete(v11);
  return v10;
}

double sub_757F94()
{
  byte_25AC837 = 1;
  word_25AC820[0] = 65;
  byte_25AC84F = 1;
  word_25AC838 = 65;
  byte_25AC867 = 8;
  strcpy((char *)&qword_25AC850, "any_mode");
  byte_25AC87F = 7;
  strcpy((char *)&dword_25AC868, "cycling");
  byte_25AC897 = 7;
  strcpy((char *)&dword_25AC880, "driving");
  byte_25AC8AF = 7;
  strcpy((char *)&dword_25AC898, "walking");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)int v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)__p, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25B0698 = 0u;
  *(_OWORD *)&qword_25B06A8 = 0u;
  dword_25B06B8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B0698, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25B0698, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25B0698, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25B0698, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(__p[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_383:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_384;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_383;
  }
LABEL_4:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_384:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_5:
  strcpy(&byte_25AC8C7, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25AC8B0, "\x1B\\toi=lhp\\"");
  byte_25AC8DF = 11;
  qword_25AC8E0 = (char *)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  xmmword_25AC8E8 = xmmword_20B9250;
  strcpy(qword_25AC8E0, "\x1B\\toi=x-sampa-internal\\"");
  byte_25AC90F = 13;
  strcpy((char *)&qword_25AC8F8, "\x1B\\tn=address\\"");
  strcpy(&byte_25AC927, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25AC910, "\x1B\\tn=nav\\"");
  byte_25AC93F = 12;
  byte_25AC957 = 7;
  strcpy((char *)&dword_25AC940, "\x1B\\lang=");
  byte_25AC96F = 1;
  word_25AC958 = 92;
  byte_25AC987 = 4;
  strcpy((char *)&qword_25AC970, "DEV:");
  byte_25AC99F = 8;
  strcpy((char *)&qword_25AC988, "Continue");
  byte_25AC9B7 = 11;
  strcpy((char *)&qword_25AC9A0, "Start_Route");
  byte_25AC9CF = 14;
  strcpy((char *)&qword_25AC9B8, "Continue_Route");
  byte_25AC9E7 = 12;
  strcpy((char *)&qword_25AC9D0, "Resume_Route");
  byte_25AC9FF = 18;
  strcpy((char *)&xmmword_25AC9E8, "Start_Route_U_Turn");
  byte_25ACA17 = 7;
  strcpy((char *)&dword_25ACA00, "_U_Turn");
  qword_25ACA28 = 0x1300000000000000;
  qmemcpy(&unk_25ACA30, "Continue_Route", 14);
  qword_25ACA18 = *(void *)"Resume_Route";
  unk_25ACA20 = 0x545F555F6574756FLL;
  unk_25ACA27 = 1852994900;
  qword_25ACA40 = 0x1500000000000000;
  strcpy(byte_25ACA48, "Left_Turn");
  unk_25ACA3E = 1415533919;
  *(_DWORD *)((char *)&qword_25ACA40 + 1) = 1852994900;
  strcpy(&byte_25ACA5F, "\tRight_Turn");
  strcpy(&byte_25ACA77, "\nLeft_Turn_At_End");
  byte_25ACA8F = 16;
  byte_25ACAA7 = 17;
  strcpy((char *)&xmmword_25ACA90, "Right_Turn_At_End");
  byte_25ACABF = 15;
  strcpy((char *)&qword_25ACAA8, "Sharp_Left_Turn");
  byte_25ACAD7 = 16;
  strcpy((char *)&xmmword_25ACAC0, "Sharp_Right_Turn");
  byte_25ACAEF = 16;
  strcpy((char *)&xmmword_25ACAD8, "Slight_Left_Turn");
  byte_25ACB07 = 17;
  strcpy((char *)&xmmword_25ACAF0, "Slight_Right_Turn");
  strcpy(&byte_25ACB1F, "\tKeep_Right");
  strcpy((char *)&qword_25ACB08, "Keep_Left");
  strcpy(&byte_25ACB37, "\nU_Turn");
  byte_25ACB4F = 6;
  byte_25ACB67 = 14;
  strcpy((char *)&qword_25ACB50, "Walking_U_Turn");
  byte_25ACB7F = 20;
  strcpy((char *)&xmmword_25ACB68, "U_Turn_When_Possible");
  byte_25ACB97 = 20;
  strcpy((char *)&xmmword_25ACB80, "U_Turn_At_Roundabout");
  byte_25ACBAF = 11;
  strcpy((char *)&qword_25ACB98, "Enter_Ferry");
  strcpy(&byte_25ACBC7, "\nChange_Ferry");
  strcpy((char *)&qword_25ACBB0, "Exit_Ferry");
  byte_25ACBDF = 12;
  byte_25ACBF7 = 21;
  strcpy((char *)&xmmword_25ACBE0, "Enter_Railway_Shuttle");
  byte_25ACC0F = 20;
  strcpy((char *)&xmmword_25ACBF8, "Exit_Railway_Shuttle");
  byte_25ACC27 = 22;
  strcpy((char *)&xmmword_25ACC10, "Change_Railway_Shuttle");
  byte_25ACC3F = 17;
  strcpy((char *)&xmmword_25ACC28, "End_Of_Navigation");
  byte_25ACC57 = 17;
  strcpy((char *)&xmmword_25ACC40, "End_Of_Navigation");
  byte_25ACC6F = 11;
  strcpy((char *)&qword_25ACC58, "Destination");
  byte_25ACC87 = 19;
  strcpy((char *)&xmmword_25ACC70, "Destination_On_left");
  byte_25ACC9F = 20;
  strcpy((char *)&xmmword_25ACC88, "Destination_On_Right");
  strcpy(&byte_25ACCB7, "\nFirst_Stop_On_left");
  *(void *)&v269[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25ACCA0, "First_Stop");
  byte_25ACCCF = 18;
  byte_25ACCE7 = 19;
  strcpy((char *)&xmmword_25ACCD0, "First_Stop_On_Right");
  strcpy(&byte_25ACCFF, "\tNext_Stop_On_left");
  *(void *)&v265[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25ACCE8, "Next_Stop");
  byte_25ACD17 = 17;
  byte_25ACD2F = 18;
  strcpy((char *)&xmmword_25ACD18, "Next_Stop_On_Right");
  byte_25ACD47 = 13;
  strcpy((char *)&qword_25ACD30, "Waypoint_Stop");
  byte_25ACD5F = 21;
  strcpy((char *)&xmmword_25ACD48, "Waypoint_Stop_On_Left");
  byte_25ACD77 = 22;
  strcpy((char *)&xmmword_25ACD60, "Waypoint_Stop_On_Right");
  byte_25ACD8F = 11;
  strcpy((char *)&qword_25ACD78, "Roundabout_");
  byte_25ACDA7 = 16;
  strcpy((char *)&xmmword_25ACD90, "Enter_Roundabout");
  qword_25ACDA8 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  unk_25ACDB0 = xmmword_20B91C0;
  strcpy((char *)qword_25ACDA8, "Walking_Enter_Roundabout");
  byte_25ACDD7 = 16;
  strcpy(byte_25ACDC0, "Leave_Roundabout");
  byte_25ACDEF = 21;
  strcpy((char *)&xmmword_25ACDD8, "Roundabout_First_Exit");
  byte_25ACE07 = 22;
  strcpy(byte_25ACDF0, "Roundabout_Second_Exit");
  byte_25ACE1F = 21;
  strcpy((char *)&xmmword_25ACE08, "Roundabout_Third_Exit");
  strcpy(byte_25ACE20, "Roundabout_Fourth_Exit");
  HIBYTE(word_25ACE36) = 22;
  byte_25ACE4F = 21;
  strcpy((char *)&xmmword_25ACE38, "Roundabout_Fifth_Exit");
  byte_25ACE67 = 21;
  strcpy(byte_25ACE50, "Roundabout_Sixth_Exit");
  qword_25ACE68 = (uint64_t)operator new(0x19uLL);
  unk_25ACE70 = xmmword_20B9250;
  strcpy((char *)qword_25ACE68, "Roundabout_Seventh_Exit");
  strcpy(byte_25ACE80, "Roundabout_Eighth_Exit");
  HIBYTE(word_25ACE96) = 22;
  byte_25ACEAF = 21;
  strcpy((char *)&xmmword_25ACE98, "Roundabout_Ninth_Exit");
  byte_25ACEC7 = 21;
  strcpy(byte_25ACEB0, "Roundabout_Tenth_Exit");
  qword_25ACEC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25ACED0 = xmmword_20B91C0;
  strcpy((char *)qword_25ACEC8, "Roundabout_Eleventh_Exit");
  qword_25ACEE0 = (uint64_t)operator new(0x19uLL);
  unk_25ACEE8 = xmmword_20B9250;
  strcpy((char *)qword_25ACEE0, "Roundabout_Twelfth_Exit");
  qword_25ACEF8 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  unk_25ACF00 = xmmword_20B5EB0;
  strcpy((char *)qword_25ACEF8, "Roundabout_Thirteenth_Exit");
  qword_25ACF10 = (uint64_t)operator new(0x20uLL);
  unk_25ACF18 = xmmword_20B5EB0;
  strcpy((char *)qword_25ACF10, "Roundabout_Fourteenth_Exit");
  qword_25ACF28 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  *(_OWORD *)algn_25ACF30 = xmmword_20B8870;
  strcpy((char *)qword_25ACF28, "Roundabout_Fifteenth_Exit");
  qword_25ACF40 = (uint64_t)operator new(0x20uLL);
  unk_25ACF48 = xmmword_20B8870;
  strcpy((char *)qword_25ACF40, "Roundabout_Sixteenth_Exit");
  qword_25ACF58 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  unk_25ACF60 = xmmword_20B91A0;
  strcpy((char *)qword_25ACF58, "Roundabout_Seventeenth_Exit");
  qword_25ACF70 = (uint64_t)operator new(0x20uLL);
  unk_25ACF78 = xmmword_20B5EB0;
  strcpy((char *)qword_25ACF70, "Roundabout_Eighteenth_Exit");
  qword_25ACF88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25ACF90 = xmmword_20B5EB0;
  strcpy((char *)qword_25ACF88, "Roundabout_Nineteenth_Exit");
  byte_25ACFB7 = 8;
  strcpy((char *)&qword_25ACFA0, "Off_Ramp");
  byte_25ACFCF = 16;
  strcpy((char *)&xmmword_25ACFB8, "Off_Ramp_On_Left");
  byte_25ACFE7 = 17;
  strcpy(algn_25ACFD0, "Off_Ramp_On_Right");
  byte_25ACFFF = 14;
  strcpy((char *)&qword_25ACFE8, "Change_Highway");
  strcpy(byte_25AD000, "Change_Highway_On_Left");
  HIBYTE(word_25AD016) = 22;
  qword_25AD018 = (uint64_t)operator new(0x19uLL);
  unk_25AD020 = xmmword_20B9250;
  strcpy((char *)qword_25AD018, "Change_Highway_On_Right");
  byte_25AD047 = 5;
  strcpy((char *)&dword_25AD030, "Merge");
  byte_25AD05F = 12;
  strcpy((char *)&qword_25AD048, "Enter_Detour");
  byte_25AD077 = 11;
  strcpy((char *)&qword_25AD060, "Exit_Detour");
  byte_25AD08F = 18;
  strcpy((char *)&xmmword_25AD078, "Walking_Turnaround");
  qword_25AD090 = (uint64_t)operator new(0x19uLL);
  unk_25AD098 = xmmword_20B9250;
  strcpy((char *)qword_25AD090, "Walking_Turnaround_Sign");
  byte_25AD0BF = 19;
  strcpy(byte_25AD0A8, "Distance_Title_List");
  unk_25AD0C0 = operator new(0x19uLL);
  unk_25AD0C8 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy(unk_25AD0C0, "Cross_The_Street_Spoken");
  *(void *)&long long v271 = *(void *)"t_Spoken";
  byte_25AD0EF = 19;
  strcpy(byte_25AD0D8, "Arrival_Charge_List");
  byte_25AD107 = 15;
  strcpy(byte_25AD0F0, "Charge_At_Start");
  strcpy(&byte_25AD11F, "\tPass_Street");
  strcpy(byte_25AD108, "Pass_Exit");
  byte_25AD137 = 11;
  byte_25AD14F = 17;
  strcpy(byte_25AD138, "Pass_Intersection");
  strcpy(&byte_25AD167, "\t_PrevExitNumber");
  strcpy(byte_25AD150, "Next_Exit");
  byte_25AD17F = 15;
  strcpy(&byte_25AD197, "\t_PrevUTurn");
  strcpy(byte_25AD180, "_PrevRoad");
  strcpy(&byte_25AD1AF, "\nNext_");
  byte_25AD1C7 = 5;
  byte_25AD1DF = 15;
  strcpy(byte_25AD1C8, "_At_Next_Street");
  byte_25AD1F7 = 21;
  strcpy(byte_25AD1E0, "_At_Next_Intersection");
  byte_25AD20F = 14;
  strcpy((char *)&qword_25AD1F8, "Charge_Station");
  byte_25AD227 = 15;
  strcpy((char *)&qword_25AD210, "_Charge_Station");
  BYTE1(qword_25AD238) = 0;
  WORD1(qword_25AD238) = 25856;
  HIDWORD(qword_25AD238) = 335544320;
  strcpy((char *)&qword_25AD228, "_Charge_Station_");
  byte_25AD257 = 8;
  strcpy((char *)&qword_25AD240, "_Minimum");
  byte_25AD26F = 15;
  strcpy((char *)&qword_25AD258, "ExitShield_Sign");
  byte_25AD287 = 8;
  strcpy((char *)&qword_25AD270, "Walking_");
  byte_25AD29F = 16;
  strcpy((char *)&xmmword_25AD288, "Walking_Continue");
  byte_25AD2B7 = 19;
  strcpy((char *)&xmmword_25AD2A0, "Walking_Start_Route");
  qword_25AD2B8 = (uint64_t)operator new(0x20uLL);
  unk_25AD2C0 = xmmword_20B5EB0;
  strcpy((char *)qword_25AD2B8, "Walking_Start_Route_U_Turn");
  byte_25AD2E7 = 17;
  strcpy(byte_25AD2D0, "Walking_Left_Turn");
  byte_25AD2FF = 18;
  strcpy((char *)&xmmword_25AD2E8, "Walking_Right_Turn");
  qword_25AD300 = (uint64_t)operator new(0x20uLL);
  unk_25AD308 = xmmword_20B5EB0;
  strcpy((char *)qword_25AD300, "Walking_Turn_At_Roundabout");
  qword_25AD318 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  unk_25AD320 = xmmword_20B91B0;
  strcpy((char *)qword_25AD318, "Walking_U_Turn_When_Possible");
  qword_25AD330 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9390;
  unk_25AD338 = xmmword_20B9390;
  strcpy((char *)qword_25AD330, "Walking_Roundabout_Exit_Continue");
  qword_25AD348 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AD350 = xmmword_20B91B0;
  strcpy((char *)qword_25AD348, "Walking_Roundabout_Exit_Left");
  qword_25AD360 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25AD368 = xmmword_20B8890;
  strcpy((char *)qword_25AD360, "Walking_Roundabout_Exit_Right");
  qword_25AD378 = (uint64_t)operator new(0x20uLL);
  unk_25AD380 = xmmword_20B8870;
  strcpy((char *)qword_25AD378, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25AD390 = (uint64_t)v0;
  unk_25AD398 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25AD3BF = 8;
  strcpy((char *)&qword_25AD3A8, "Walking_");
  qword_25AD3C0 = (uint64_t)operator new(0x19uLL);
  unk_25AD3C8 = v282;
  strcpy((char *)qword_25AD3C0, "Walking_Sharp_Left_Turn");
  qword_25AD3D8 = (uint64_t)operator new(0x20uLL);
  unk_25AD3E0 = v281;
  strcpy((char *)qword_25AD3D8, "Walking_Sharp_Right_Turn");
  qword_25AD3F0 = (uint64_t)operator new(0x20uLL);
  unk_25AD3F8 = v281;
  strcpy((char *)qword_25AD3F0, "Walking_Slight_Left_Turn");
  qword_25AD408 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AD410 = v280;
  strcpy((char *)qword_25AD408, "Walking_Slight_Right_Turn");
  byte_25AD437 = 4;
  strcpy((char *)&dword_25AD420, "Exit");
  byte_25AD44F = 4;
  strcpy((char *)&dword_25AD438, "Road");
  byte_25AD467 = 7;
  strcpy((char *)&dword_25AD450, "Freeway");
  byte_25AD47F = 12;
  strcpy((char *)&qword_25AD468, "Intersection");
  byte_25AD497 = 5;
  strcpy((char *)&dword_25AD480, "Ferry");
  byte_25AD4AF = 11;
  strcpy((char *)&qword_25AD498, "ShuttleName");
  byte_25AD4C7 = 5;
  strcpy((char *)&dword_25AD4B0, "Road1");
  strcpy(&byte_25AD4DF, "\tName");
  strcpy((char *)&qword_25AD4C8, "Signpost1");
  byte_25AD4F7 = 4;
  byte_25AD50F = 7;
  strcpy((char *)&dword_25AD4F8, "Address");
  byte_25AD527 = 7;
  strcpy((char *)&dword_25AD510, "Shield1");
  byte_25AD53F = 13;
  strcpy((char *)&qword_25AD528, "TowardShield1");
  byte_25AD557 = 6;
  strcpy((char *)&dword_25AD540, "Right_");
  byte_25AD56F = 5;
  strcpy((char *)&dword_25AD558, "Left_");
  strcpy(&byte_25AD587, "\tOn_Left_");
  strcpy((char *)&qword_25AD570, "On_Right_");
  byte_25AD59F = 8;
  byte_25AD5B7 = 12;
  strcpy((char *)&qword_25AD5A0, "ElevatorName");
  byte_25AD5CF = 13;
  strcpy((char *)&qword_25AD5B8, "EscalatorName");
  strcpy(&byte_25AD5E7, "\nBridgeName");
  strcpy((char *)&qword_25AD5D0, "StairsName");
  strcpy(&byte_25AD5FF, "\nTunnelName");
  strcpy(&byte_25AD617, "\nParking");
  byte_25AD62F = 7;
  strcpy(&byte_25AD647, "\t_Escalator");
  strcpy((char *)&qword_25AD630, "_Elevator");
  strcpy(&byte_25AD65F, "\n_ElevatorName");
  byte_25AD677 = 13;
  byte_25AD68F = 14;
  strcpy((char *)&qword_25AD678, "_EscalatorName");
  byte_25AD6A7 = 5;
  strcpy((char *)&qword_25AD690, "_Road");
  byte_25AD6BF = 8;
  strcpy((char *)&qword_25AD6A8, "_Freeway");
  byte_25AD6D7 = 13;
  strcpy((char *)&qword_25AD6C0, "_Intersection");
  byte_25AD6EF = 6;
  strcpy((char *)&dword_25AD6D8, "_Road1");
  byte_25AD707 = 6;
  strcpy((char *)&dword_25AD6F0, "_Road2");
  strcpy(&byte_25AD71F, "\n_Signpost2");
  strcpy((char *)&qword_25AD708, "_Signpost1");
  strcpy(&byte_25AD737, "\n_Ferry");
  byte_25AD74F = 6;
  byte_25AD767 = 12;
  strcpy((char *)&qword_25AD750, "_Ferry_Ferry");
  byte_25AD77F = 12;
  strcpy((char *)&qword_25AD768, "_ShuttleName");
  qword_25AD780 = (uint64_t)operator new(0x20uLL);
  unk_25AD788 = v279;
  strcpy((char *)qword_25AD780, "_Railway_Shuttle_ShuttleName");
  byte_25AD7AF = 11;
  strcpy((char *)&qword_25AD798, "_ExitNumber");
  byte_25AD7C7 = 5;
  strcpy((char *)&dword_25AD7B0, "_Exit");
  byte_25AD7DF = 7;
  strcpy((char *)&dword_25AD7C8, "_StayOn");
  byte_25AD7F7 = 7;
  strcpy((char *)&dword_25AD7E0, "_Stairs");
  byte_25AD80F = 5;
  strcpy((char *)&dword_25AD7F8, "_Ramp");
  byte_25AD827 = 11;
  strcpy((char *)&qword_25AD810, "_StairsName");
  strcpy(&byte_25AD83F, "\t_Down");
  strcpy((char *)&qword_25AD828, "_RampName");
  byte_25AD857 = 5;
  byte_25AD86F = 3;
  dword_25AD858 = 7361887;
  byte_25AD887 = 7;
  strcpy((char *)&dword_25AD870, "_Bridge");
  byte_25AD89F = 7;
  strcpy((char *)&dword_25AD888, "_Tunnel");
  byte_25AD8B7 = 11;
  strcpy((char *)&qword_25AD8A0, "_Roundabout");
  byte_25AD8CF = 6;
  strcpy((char *)&dword_25AD8B8, "_Cross");
  byte_25AD8E7 = 8;
  strcpy((char *)&qword_25AD8D0, "_Parking");
  byte_25AD8FF = 8;
  strcpy((char *)&qword_25AD8E8, "_Shield1");
  byte_25AD917 = 14;
  strcpy((char *)&qword_25AD900, "_TowardShield1");
  byte_25AD92F = 8;
  strcpy((char *)&qword_25AD918, "_Shield2");
  byte_25AD947 = 14;
  strcpy((char *)&qword_25AD930, "_TowardShield2");
  byte_25AD95F = 11;
  strcpy((char *)&qword_25AD948, "_Direction1");
  byte_25AD977 = 11;
  strcpy((char *)&qword_25AD960, "_Direction2");
  strcpy(&byte_25AD98F, "\n_TowardDirection1");
  strcpy((char *)&qword_25AD978, "Direction1");
  byte_25AD9A7 = 17;
  byte_25AD9BF = 17;
  strcpy((char *)&xmmword_25AD9A8, "_TowardDirection2");
  byte_25AD9D7 = 16;
  strcpy((char *)&xmmword_25AD9C0, "TowardDirection1");
  byte_25AD9EF = 7;
  strcpy((char *)&qword_25AD9D8, "_Spoken");
  byte_25ADA07 = 5;
  strcpy((char *)&qword_25AD9F0, "_Sign");
  byte_25ADA1F = 15;
  strcpy((char *)&qword_25ADA08, "_Secondary_Sign");
  byte_25ADA37 = 5;
  strcpy((char *)&qword_25ADA20, "_List");
  byte_25ADA4F = 8;
  strcpy((char *)&qword_25ADA38, "_Primary");
  qword_25ADA60 = 0xF00000000000000;
  strcpy((char *)&qword_25ADA50, "_Spoken_Primary");
  strcpy(&byte_25ADA7F, "\n_Secondary");
  strcpy((char *)&qword_25ADA68, "_Secondary");
  strcpy(&byte_25ADA97, "\n_Spoken_Secondar");
  BYTE1(qword_25ADAA8) = 0;
  WORD1(qword_25ADAA8) = 0;
  HIDWORD(qword_25ADAA8) = 285212672;
  byte_25ADAC7 = 13;
  strcpy((char *)&qword_25ADAB0, "_To_Secondary");
  BYTE1(qword_25ADAD8) = 0;
  WORD1(qword_25ADAD8) = 0;
  HIDWORD(qword_25ADAD8) = 335544320;
  strcpy((char *)&dword_25ADAC8, "_Spoken_To_Secon");
  strcpy(&byte_25ADAF7, "\t_ValidDistance");
  strcpy((char *)&qword_25ADAE0, "_Distance");
  byte_25ADB0F = 14;
  byte_25ADB27 = 6;
  strcpy((char *)&dword_25ADB10, "_Short");
  byte_25ADB3F = 1;
  word_25ADB28 = 95;
  qword_25ADB40 = (uint64_t)operator new(0x20uLL);
  unk_25ADB48 = v281;
  strcpy((char *)qword_25ADB40, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25ADB58 = (uint64_t)v1;
  unk_25ADB60 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  *(void *)(v1 + 15) = v271;
  v1[23] = 0;
  byte_25ADB87 = 12;
  strcpy((char *)&qword_25ADB70, "Chain_Spoken");
  byte_25ADB9F = 15;
  strcpy((char *)&qword_25ADB88, "Chain_To_Spoken");
  strcpy(&byte_25ADBB7, "\nThen_Spoken");
  strcpy((char *)&qword_25ADBA0, "And_Spoken");
  byte_25ADBCF = 11;
  byte_25ADBE7 = 18;
  strcpy(algn_25ADBD0, "Concatenate_Spoken");
  qword_25ADBE8 = (uint64_t)operator new(0x28uLL);
  long long v268 = xmmword_20B9240;
  *(_OWORD *)algn_25ADBF0 = xmmword_20B9240;
  strcpy((char *)qword_25ADBE8, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25ADC00 = (uint64_t)operator new(0x28uLL);
  v269[1] = xmmword_20B9260;
  unk_25ADC08 = xmmword_20B9260;
  strcpy((char *)qword_25ADC00, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25ADC18 = (uint64_t)operator new(0x40uLL);
  unk_25ADC20 = xmmword_20B9A90;
  strcpy((char *)qword_25ADC18, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25ADC30 = (uint64_t)operator new(0x30uLL);
  long long v267 = xmmword_20B9A40;
  unk_25ADC38 = xmmword_20B9A40;
  strcpy((char *)qword_25ADC30, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25ADC48 = (uint64_t)operator new(0x28uLL);
  long long v266 = xmmword_20E12D0;
  *(_OWORD *)algn_25ADC50 = xmmword_20E12D0;
  strcpy((char *)qword_25ADC48, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25ADC60 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25ADC68 = xmmword_20B9960;
  strcpy((char *)qword_25ADC60, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25ADC78 = (uint64_t)operator new(0x28uLL);
  unk_25ADC80 = xmmword_20B93A0;
  strcpy((char *)qword_25ADC78, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25ADC90 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25ADC98 = xmmword_20E1380;
  strcpy((char *)qword_25ADC90, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25ADCA8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25ADCB0 = xmmword_20B93C0;
  strcpy((char *)qword_25ADCA8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25ADCC0 = (uint64_t)operator new(0x38uLL);
  unk_25ADCC8 = xmmword_20B9A60;
  strcpy((char *)qword_25ADCC0, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25ADCD8 = (uint64_t)operator new(0x30uLL);
  unk_25ADCE0 = xmmword_20E1380;
  strcpy((char *)qword_25ADCD8, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25ADCF0 = (uint64_t)operator new(0x28uLL);
  unk_25ADCF8 = xmmword_20B9960;
  strcpy((char *)qword_25ADCF0, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25ADD08 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  *(_OWORD *)algn_25ADD10 = xmmword_20B93D0;
  strcpy((char *)qword_25ADD08, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25ADD20 = (uint64_t)operator new(0x20uLL);
  unk_25ADD28 = v277;
  strcpy((char *)qword_25ADD20, "Walking_Distance_Chain_Spoken");
  qword_25ADD38 = (uint64_t)operator new(0x20uLL);
  unk_25ADD40 = v277;
  strcpy((char *)qword_25ADD38, "Walking_Continue_Chain_Spoken");
  uint64_t v2 = (char *)operator new(0x19uLL);
  qword_25ADD50 = (uint64_t)v2;
  unk_25ADD58 = v282;
  *(_OWORD *)uint64_t v2 = v272;
  *(void *)(v2 + 15) = v271;
  v2[23] = 0;
  unk_25ADD68 = operator new(0x28uLL);
  unk_25ADD70 = v270;
  strcpy(unk_25ADD68, "Distance_Cross_The_Street_Spoken");
  strcpy(byte_25ADD80, "Walking_Continue_Cross");
  HIBYTE(word_25ADD96) = 22;
  byte_25ADDAF = 14;
  strcpy(byte_25ADD98, "Continue_Cross");
  byte_25ADDC7 = 5;
  strcpy(byte_25ADDB0, "Cross");
  byte_25ADDDF = 19;
  strcpy(byte_25ADDC8, "Cross_Street_Spoken");
  byte_25ADDF7 = 17;
  strcpy(byte_25ADDE0, "Cross_Road_Spoken");
  byte_25ADE0F = 20;
  strcpy(byte_25ADDF8, "Use_Crosswalk_Spoken");
  byte_25ADE27 = 15;
  strcpy(byte_25ADE10, "Distance_Spoken");
  byte_25ADE3F = 19;
  strcpy(byte_25ADE28, "Distance_And_Spoken");
  byte_25ADE57 = 21;
  strcpy(byte_25ADE40, "Continue_Stage_Spoken");
  byte_25ADE6F = 13;
  qmemcpy(&qword_25ADE58, "ContinueStage", 13);
  int v3 = SHIBYTE(qword_25ADA60);
  if (qword_25ADA60 >= 0) {
    size_t v4 = HIBYTE(qword_25ADA60);
  }
  else {
    size_t v4 = unk_25ADA58;
  }
  unint64_t v5 = v4 + 13;
  byte_25ADE65 = 0;
  if (v4 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    long long v9 = (char *)operator new(v7 + 1);
    qword_25ADE78 = v4 + 13;
    unk_25ADE80 = v8 | 0x8000000000000000;
    qword_25ADE70 = (uint64_t)v9;
    qmemcpy(v9, "ContinueStage", 13);
    unint64_t v6 = v9 + 13;
  }
  else
  {
    BYTE1(qword_25ADE78) = 0;
    WORD1(qword_25ADE78) = 0;
    HIDWORD(qword_25ADE78) = 0;
    unk_25ADE80 = 0;
    byte_25ADE87 = v4 + 13;
    strcpy((char *)&qword_25ADE70, "Continue");
    unint64_t v6 = (char *)&qword_25ADE78 + 5;
    if (!v4) {
      goto LABEL_19;
    }
  }
  if (v3 >= 0) {
    uint64_t v10 = &qword_25ADA50;
  }
  else {
    uint64_t v10 = (uint64_t *)qword_25ADA50;
  }
  memmove(v6, v10, v4);
LABEL_19:
  v6[v4] = 0;
  int v11 = byte_25AD6A7;
  if (byte_25AD6A7 >= 0) {
    size_t v12 = byte_25AD6A7;
  }
  else {
    size_t v12 = qword_25AD698;
  }
  unint64_t v13 = v12 + 13;
  if (v12 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v17 = operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v12 + 13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    void *v17 = qword_25ADE58;
    *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)&qword_25ADE58 + 5);
    uint64_t v14 = (char *)v17 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25ADE58 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25ADE58;
    uint64_t v14 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v12) {
      goto LABEL_33;
    }
  }
  if (v11 >= 0) {
    int v18 = &qword_25AD690;
  }
  else {
    int v18 = (uint64_t *)qword_25AD690;
  }
  memmove(v14, v18, v12);
LABEL_33:
  v14[v12] = 0;
  if (v3 >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_25ADA50;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_25ADA50;
  }
  int v20 = std::string::append(&__dst, v19, v4);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  qword_25ADE98 = v20->__r_.__value_.__r.__words[2];
  xmmword_25ADE88 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25ADEB7 = 5;
  strcpy((char *)&dword_25ADEA0, "Merge");
  qword_25ADEB8 = (uint64_t)operator new(0x20uLL);
  long long v271 = xmmword_20B8E90;
  unk_25ADEC0 = xmmword_20B8E90;
  strcpy((char *)qword_25ADEB8, "Continue_Freeway_Spoken_Primary");
  byte_25ADEE7 = 8;
  strcpy((char *)&qword_25ADED0, "Starting");
  byte_25ADEFF = 14;
  strcpy((char *)&qword_25ADEE8, "Starting_Route");
  byte_25ADF17 = 14;
  strcpy((char *)&qword_25ADF00, "Resuming_Route");
  byte_25ADF2F = 16;
  strcpy((char *)&xmmword_25ADF18, "Continuing_Route");
  byte_25ADF47 = 9;
  word_25ADF38 = 112;
  qword_25ADF30 = *(void *)&v265[48];
  strcpy(&byte_25ADF5F, "\nEnding");
  strcpy((char *)&word_25ADF50, "op");
  qword_25ADF48 = *(void *)&v269[0];
  byte_25ADF77 = 6;
  strcpy((char *)&qword_25ADF78, "_Destination");
  byte_25ADF8F = 12;
  byte_25ADFA7 = 15;
  strcpy((char *)&qword_25ADF90, "_At_Destination");
  std::operator+<char>();
  qword_25ADFC0 = (uint64_t)operator new(0x20uLL);
  unk_25ADFC8 = v281;
  strcpy((char *)qword_25ADFC0, "Spoken_Ending_At_Parking");
  qword_25ADFD8 = (uint64_t)operator new(0x20uLL);
  v269[0] = xmmword_20B9800;
  xmmword_25ADFE0 = xmmword_20B9800;
  strcpy((char *)qword_25ADFD8, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25ADFF0, "Sign_Ending_At_Parking");
  HIBYTE(word_25AE006) = 22;
  byte_25AE01F = 4;
  strcpy((char *)&dword_25AE008, "Home");
  byte_25AE037 = 4;
  strcpy((char *)&dword_25AE020, "Work");
  byte_25AE04F = 8;
  strcpy((char *)&qword_25AE038, "Business");
  byte_25AE067 = 4;
  strcpy((char *)&dword_25AE050, "Name");
  byte_25AE07F = 13;
  strcpy((char *)&qword_25AE068, "Other_Contact");
  byte_25AE097 = 11;
  strcpy((char *)&qword_25AE080, "ContactHome");
  byte_25AE0AF = 11;
  *(_DWORD *)((char *)&qword_25AE098 + 7) = 1802661719;
  byte_25AE0C7 = 7;
  *(int *)((char *)&dword_25AE0B0 + 3) = 1936942450;
  dword_25AE0B0 = 1919181889;
  strcpy((char *)&xmmword_25AE0C8, "Discoverability_Prompt");
  HIBYTE(word_25AE0DE) = 22;
  byte_25AE0F7 = 6;
  dword_25AE0E0 = 1634878303;
  word_25AE0E4 = 26739;
  byte_25AE10F = 8;
  qword_25AE0F8 = 0x697269535F6F4E5FLL;
  byte_25AE127 = 9;
  strcpy((char *)&qword_25AE110, "_CityName");
  byte_25AE13F = 8;
  qword_25AE128 = 0x636972656E65475FLL;
  int v22 = byte_25ADEE7;
  if (byte_25ADEE7 >= 0) {
    size_t v23 = byte_25ADEE7;
  }
  else {
    size_t v23 = qword_25ADED8;
  }
  LODWORD(v272) = byte_25AD227;
  if (byte_25AD227 >= 0) {
    size_t v24 = byte_25AD227;
  }
  else {
    size_t v24 = unk_25AD218;
  }
  qword_25AE098 = *(void *)"ContactWork";
  byte_25AE0A3 = 0;
  byte_25AE0B7 = 0;
  byte_25AE0E6 = 0;
  byte_25AE100 = 0;
  byte_25AE130 = 0;
  unint64_t v25 = v24 + v23;
  if (v24 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v265 = *(void *)"ContactWork";
  *(void *)&v265[16] = *(void *)"ContactHome";
  *(void *)&v265[32] = *(void *)"_Contact";
  *(void *)&v265[48] = *(void *)"Other_Contact";
  if (v25 <= 0x16)
  {
    int v26 = &qword_25AE140;
    qword_25AE148 = 0;
    unk_25AE150 = 0;
    qword_25AE140 = 0;
    byte_25AE157 = v24 + v23;
    if (!v23) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }
  uint64_t v89 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v89 = v25 | 7;
  }
  uint64_t v90 = v89 + 1;
  int v26 = (uint64_t *)operator new(v89 + 1);
  qword_25AE148 = v24 + v23;
  unk_25AE150 = v90 | 0x8000000000000000;
  qword_25AE140 = (uint64_t)v26;
  if (v23)
  {
LABEL_47:
    if (v22 >= 0) {
      int v27 = &qword_25ADED0;
    }
    else {
      int v27 = (uint64_t *)qword_25ADED0;
    }
    memmove(v26, v27, v23);
  }
LABEL_51:
  uint64_t v28 = (char *)v26 + v23;
  if (v24)
  {
    if ((int)v272 >= 0) {
      long long v29 = &qword_25AD210;
    }
    else {
      long long v29 = (uint64_t *)qword_25AD210;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  int v30 = byte_25ADF8F;
  if (byte_25ADF8F >= 0) {
    size_t v31 = byte_25ADF8F;
  }
  else {
    size_t v31 = qword_25ADF80;
  }
  unint64_t v32 = v31 + v23;
  if (v31 + v23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v32 <= 0x16)
  {
    int v33 = &qword_25AE158;
    qword_25AE160 = 0;
    unk_25AE168 = 0;
    qword_25AE158 = 0;
    byte_25AE16F = v31 + v23;
    if (!v23) {
      goto LABEL_66;
    }
    goto LABEL_62;
  }
  uint64_t v91 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v91 = v32 | 7;
  }
  uint64_t v92 = v91 + 1;
  int v33 = (uint64_t *)operator new(v91 + 1);
  qword_25AE160 = v31 + v23;
  unk_25AE168 = v92 | 0x8000000000000000;
  qword_25AE158 = (uint64_t)v33;
  if (v23)
  {
LABEL_62:
    if (v22 >= 0) {
      unint64_t v34 = &qword_25ADED0;
    }
    else {
      unint64_t v34 = (uint64_t *)qword_25ADED0;
    }
    memmove(v33, v34, v23);
  }
LABEL_66:
  __n128 v35 = (char *)v33 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      unint64_t v36 = &qword_25ADF78;
    }
    else {
      unint64_t v36 = (uint64_t *)qword_25ADF78;
    }
    memmove(v35, v36, v31);
  }
  v35[v31] = 0;
  qword_25AE170 = (uint64_t)operator new(0x19uLL);
  unk_25AE178 = v282;
  strcpy((char *)qword_25AE170, "{ChargeStationCityName}");
  if (v32 < 0x17)
  {
    uint64_t v37 = &qword_25AE188;
    qword_25AE190 = 0;
    unk_25AE198 = 0;
    qword_25AE188 = 0;
    byte_25AE19F = v31 + v23;
    if (!v23) {
      goto LABEL_77;
    }
    goto LABEL_73;
  }
  uint64_t v93 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v32 | 7) != 0x17) {
    uint64_t v93 = v32 | 7;
  }
  uint64_t v94 = v93 + 1;
  uint64_t v37 = (uint64_t *)operator new(v93 + 1);
  qword_25AE190 = v31 + v23;
  unk_25AE198 = v94 | 0x8000000000000000;
  qword_25AE188 = (uint64_t)v37;
  if (v23)
  {
LABEL_73:
    if (v22 >= 0) {
      long long v38 = &qword_25ADED0;
    }
    else {
      long long v38 = (uint64_t *)qword_25ADED0;
    }
    memmove(v37, v38, v23);
  }
LABEL_77:
  long long v39 = (char *)v37 + v23;
  if (v31)
  {
    if (v30 >= 0) {
      uint64_t v40 = &qword_25ADF78;
    }
    else {
      uint64_t v40 = (uint64_t *)qword_25ADF78;
    }
    memmove(v39, v40, v31);
  }
  v39[v31] = 0;
  strcpy((char *)&xmmword_25AE1A0, "{NewBatteryPercentage}");
  HIBYTE(word_25AE1B6) = 22;
  qword_25AE1B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25AE1C0 = v275;
  strcpy((char *)qword_25AE1B8, "{OriginalBatteryPercentage}");
  byte_25AE1E7 = 19;
  strcpy((char *)&xmmword_25AE1D0, "_Arrival_Percentage");
  int v41 = byte_25ADF77;
  if (byte_25ADF77 >= 0) {
    size_t v42 = byte_25ADF77;
  }
  else {
    size_t v42 = qword_25ADF68;
  }
  unint64_t v43 = v42 + v24;
  if (v42 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v43 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42 + v24;
    if (!v42) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  uint64_t v95 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v43 | 7) != 0x17) {
    uint64_t v95 = v43 | 7;
  }
  uint64_t v96 = v95 + 1;
  p_dst = (char *)operator new(v95 + 1);
  __dst.__r_.__value_.__l.__size_ = v42 + v24;
  __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v42)
  {
LABEL_88:
    if (v41 >= 0) {
      uint64_t v45 = &qword_25ADF60;
    }
    else {
      uint64_t v45 = (uint64_t *)qword_25ADF60;
    }
    memmove(p_dst, v45, v42);
  }
LABEL_92:
  uint64_t v46 = &p_dst[v42];
  if (v24)
  {
    if ((int)v272 >= 0) {
      uint64_t v47 = &qword_25AD210;
    }
    else {
      uint64_t v47 = (uint64_t *)qword_25AD210;
    }
    memmove(v46, v47, v24);
  }
  v46[v24] = 0;
  uint64_t v48 = std::string::append(&__dst, "_Percentage");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  qword_25AE1F8 = v48->__r_.__value_.__r.__words[2];
  xmmword_25AE1E8 = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v50 = byte_25ADF77;
  if (byte_25ADF77 >= 0) {
    size_t v51 = byte_25ADF77;
  }
  else {
    size_t v51 = qword_25ADF68;
  }
  int v52 = byte_25AD227;
  if (byte_25AD227 >= 0) {
    size_t v53 = byte_25AD227;
  }
  else {
    size_t v53 = unk_25AD218;
  }
  unint64_t v54 = v53 + v51;
  if (v53 + v51 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v54 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v55 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v53 + v51;
    if (!v51) {
      goto LABEL_112;
    }
    goto LABEL_108;
  }
  uint64_t v97 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v54 | 7) != 0x17) {
    uint64_t v97 = v54 | 7;
  }
  uint64_t v98 = v97 + 1;
  unint64_t v55 = (char *)operator new(v97 + 1);
  v283.__r_.__value_.__l.__size_ = v53 + v51;
  v283.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  if (v51)
  {
LABEL_108:
    if (v50 >= 0) {
      uint64_t v56 = &qword_25ADF60;
    }
    else {
      uint64_t v56 = (uint64_t *)qword_25ADF60;
    }
    memmove(v55, v56, v51);
  }
LABEL_112:
  uint64_t v57 = &v55[v51];
  if (v53)
  {
    if (v52 >= 0) {
      uint64_t v58 = &qword_25AD210;
    }
    else {
      uint64_t v58 = (uint64_t *)qword_25AD210;
    }
    memmove(v57, v58, v53);
  }
  v57[v53] = 0;
  if (byte_25AD257 >= 0) {
    int v59 = (const std::string::value_type *)&qword_25AD240;
  }
  else {
    int v59 = (const std::string::value_type *)qword_25AD240;
  }
  if (byte_25AD257 >= 0) {
    std::string::size_type v60 = byte_25AD257;
  }
  else {
    std::string::size_type v60 = *(void *)&byte_25AD248;
  }
  std::string::size_type v61 = std::string::append(&v283, v59, v60);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  long long v63 = std::string::append(&__dst, "_Percentage");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  unk_25AE210 = *((void *)&v63->__r_.__value_.__l + 2);
  xmmword_25AE200 = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_125;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_125:
  int v65 = byte_25ADF77;
  if (byte_25ADF77 >= 0) {
    size_t v66 = byte_25ADF77;
  }
  else {
    size_t v66 = qword_25ADF68;
  }
  int v67 = byte_25AD227;
  if (byte_25AD227 >= 0) {
    size_t v68 = byte_25AD227;
  }
  else {
    size_t v68 = unk_25AD218;
  }
  unint64_t v69 = v68 + v66;
  if (v68 + v66 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v69 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    long long v70 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v68 + v66;
    if (!v66) {
      goto LABEL_138;
    }
    goto LABEL_134;
  }
  uint64_t v99 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v69 | 7) != 0x17) {
    uint64_t v99 = v69 | 7;
  }
  uint64_t v100 = v99 + 1;
  long long v70 = (char *)operator new(v99 + 1);
  __dst.__r_.__value_.__l.__size_ = v68 + v66;
  __dst.__r_.__value_.__r.__words[2] = v100 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  if (v66)
  {
LABEL_134:
    if (v65 >= 0) {
      long long v71 = &qword_25ADF60;
    }
    else {
      long long v71 = (uint64_t *)qword_25ADF60;
    }
    memmove(v70, v71, v66);
  }
LABEL_138:
  uint64_t v72 = &v70[v66];
  if (v68)
  {
    if (v67 >= 0) {
      uint64_t v73 = &qword_25AD210;
    }
    else {
      uint64_t v73 = (uint64_t *)qword_25AD210;
    }
    memmove(v72, v73, v68);
  }
  v72[v68] = 0;
  uint64_t v74 = std::string::append(&__dst, "_Duration");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  qword_25AE228 = v74->__r_.__value_.__r.__words[2];
  xmmword_25AE218 = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v76 = byte_25ADF77;
  if (byte_25ADF77 >= 0) {
    size_t v77 = byte_25ADF77;
  }
  else {
    size_t v77 = qword_25ADF68;
  }
  int v78 = byte_25AD227;
  if (byte_25AD227 >= 0) {
    size_t v79 = byte_25AD227;
  }
  else {
    size_t v79 = unk_25AD218;
  }
  unint64_t v80 = v79 + v77;
  if (v79 + v77 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v80 <= 0x16)
  {
    qword_25AE238 = 0;
    unk_25AE240 = 0;
    qword_25AE230 = 0;
    long long v81 = &qword_25AE230;
    byte_25AE247 = v79 + v77;
    if (!v77) {
      goto LABEL_158;
    }
    goto LABEL_154;
  }
  uint64_t v101 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v80 | 7) != 0x17) {
    uint64_t v101 = v80 | 7;
  }
  uint64_t v102 = v101 + 1;
  long long v81 = (uint64_t *)operator new(v101 + 1);
  qword_25AE238 = v79 + v77;
  unk_25AE240 = v102 | 0x8000000000000000;
  qword_25AE230 = (uint64_t)v81;
  if (v77)
  {
LABEL_154:
    if (v76 >= 0) {
      long long v82 = &qword_25ADF60;
    }
    else {
      long long v82 = (uint64_t *)qword_25ADF60;
    }
    memmove(v81, v82, v77);
  }
LABEL_158:
  uint64_t v83 = (char *)v81 + v77;
  if (v79)
  {
    if (v78 >= 0) {
      __darwin_ct_rune_t v84 = &qword_25AD210;
    }
    else {
      __darwin_ct_rune_t v84 = (uint64_t *)qword_25AD210;
    }
    memmove(v83, v84, v79);
  }
  v83[v79] = 0;
  int v85 = byte_25AE247;
  if (byte_25AE247 >= 0) {
    size_t v86 = byte_25AE247;
  }
  else {
    size_t v86 = qword_25AE238;
  }
  unint64_t v87 = v86 + 5;
  if (v86 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v87 >= 0x17)
  {
    uint64_t v103 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v87 | 7) != 0x17) {
      uint64_t v103 = v87 | 7;
    }
    uint64_t v104 = v103 + 1;
    uint64_t v88 = (uint64_t *)operator new(v103 + 1);
    qword_25AE250 = v86 + 5;
    unk_25AE258 = v104 | 0x8000000000000000;
    qword_25AE248 = (uint64_t)v88;
  }
  else
  {
    uint64_t v88 = &qword_25AE248;
    qword_25AE250 = 0;
    unk_25AE258 = 0;
    qword_25AE248 = 0;
    byte_25AE25F = v86 + 5;
    if (!v86) {
      goto LABEL_205;
    }
  }
  if (v85 >= 0) {
    uint64_t v105 = &qword_25AE230;
  }
  else {
    uint64_t v105 = (uint64_t *)qword_25AE230;
  }
  memmove(v88, v105, v86);
LABEL_205:
  strcpy((char *)v88 + v86, "_Name");
  int v106 = byte_25ADF77;
  if (byte_25ADF77 >= 0) {
    size_t v107 = byte_25ADF77;
  }
  else {
    size_t v107 = qword_25ADF68;
  }
  int v108 = byte_25AD227;
  if (byte_25AD227 >= 0) {
    size_t v109 = byte_25AD227;
  }
  else {
    size_t v109 = unk_25AD218;
  }
  unint64_t v110 = v109 + v107;
  if (v109 + v107 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v110 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v111 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v109 + v107;
    if (!v107) {
      goto LABEL_218;
    }
    goto LABEL_214;
  }
  uint64_t v121 = (v110 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v110 | 7) != 0x17) {
    uint64_t v121 = v110 | 7;
  }
  uint64_t v122 = v121 + 1;
  unint64_t v111 = (char *)operator new(v121 + 1);
  __dst.__r_.__value_.__l.__size_ = v109 + v107;
  __dst.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
  if (v107)
  {
LABEL_214:
    if (v106 >= 0) {
      int v112 = &qword_25ADF60;
    }
    else {
      int v112 = (uint64_t *)qword_25ADF60;
    }
    memmove(v111, v112, v107);
  }
LABEL_218:
  unint64_t v113 = &v111[v107];
  if (v109)
  {
    if (v108 >= 0) {
      uint64_t v114 = &qword_25AD210;
    }
    else {
      uint64_t v114 = (uint64_t *)qword_25AD210;
    }
    memmove(v113, v114, v109);
  }
  v113[v109] = 0;
  uint64_t v115 = std::string::append(&__dst, "_Connector_Type");
  long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  qword_25AE270 = v115->__r_.__value_.__r.__words[2];
  xmmword_25AE260 = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v117 = SHIBYTE(qword_25AE270);
  if (qword_25AE270 >= 0) {
    size_t v118 = HIBYTE(qword_25AE270);
  }
  else {
    size_t v118 = *((void *)&xmmword_25AE260 + 1);
  }
  unint64_t v119 = v118 + 6;
  if (v118 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v119 >= 0x17)
  {
    uint64_t v123 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17) {
      uint64_t v123 = v119 | 7;
    }
    uint64_t v124 = v123 + 1;
    unint64_t v120 = (uint64_t *)operator new(v123 + 1);
    qword_25AE280 = v118 + 6;
    unk_25AE288 = v124 | 0x8000000000000000;
    qword_25AE278 = (uint64_t)v120;
  }
  else
  {
    unint64_t v120 = &qword_25AE278;
    qword_25AE280 = 0;
    unk_25AE288 = 0;
    qword_25AE278 = 0;
    byte_25AE28F = v118 + 6;
    if (!v118) {
      goto LABEL_243;
    }
  }
  if (v117 >= 0) {
    uint64_t v125 = &xmmword_25AE260;
  }
  else {
    uint64_t v125 = (long long *)xmmword_25AE260;
  }
  memmove(v120, v125, v118);
LABEL_243:
  strcpy((char *)v120 + v118, "_Power");
  int v126 = byte_25ADF77;
  if (byte_25ADF77 >= 0) {
    size_t v127 = byte_25ADF77;
  }
  else {
    size_t v127 = qword_25ADF68;
  }
  int v128 = byte_25AD227;
  if (byte_25AD227 >= 0) {
    size_t v129 = byte_25AD227;
  }
  else {
    size_t v129 = unk_25AD218;
  }
  unint64_t v130 = v129 + v127;
  if (v129 + v127 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v130 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v131 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v129 + v127;
    if (!v127) {
      goto LABEL_256;
    }
    goto LABEL_252;
  }
  uint64_t v160 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v130 | 7) != 0x17) {
    uint64_t v160 = v130 | 7;
  }
  uint64_t v161 = v160 + 1;
  unint64_t v131 = (char *)operator new(v160 + 1);
  __dst.__r_.__value_.__l.__size_ = v129 + v127;
  __dst.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
  if (v127)
  {
LABEL_252:
    if (v126 >= 0) {
      v132 = &qword_25ADF60;
    }
    else {
      v132 = (uint64_t *)qword_25ADF60;
    }
    memmove(v131, v132, v127);
  }
LABEL_256:
  uint64_t v133 = &v131[v127];
  if (v129)
  {
    if (v128 >= 0) {
      long long v134 = &qword_25AD210;
    }
    else {
      long long v134 = (uint64_t *)qword_25AD210;
    }
    memmove(v133, v134, v129);
  }
  v133[v129] = 0;
  if (byte_25AD9EF >= 0) {
    uint64_t v135 = (const std::string::value_type *)&qword_25AD9D8;
  }
  else {
    uint64_t v135 = (const std::string::value_type *)qword_25AD9D8;
  }
  if (byte_25AD9EF >= 0) {
    std::string::size_type v136 = byte_25AD9EF;
  }
  else {
    std::string::size_type v136 = unk_25AD9E0;
  }
  uint64_t v137 = std::string::append(&__dst, v135, v136);
  long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  qword_25AE2A0 = v137->__r_.__value_.__r.__words[2];
  xmmword_25AE290 = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v139 = byte_25ADF77;
  if (byte_25ADF77 >= 0) {
    size_t v140 = byte_25ADF77;
  }
  else {
    size_t v140 = qword_25ADF68;
  }
  int v141 = byte_25AD227;
  if (byte_25AD227 >= 0) {
    size_t v142 = byte_25AD227;
  }
  else {
    size_t v142 = unk_25AD218;
  }
  unint64_t v143 = v142 + v140;
  if (v142 + v140 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v143 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v144 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v142 + v140;
    if (!v140) {
      goto LABEL_282;
    }
    goto LABEL_278;
  }
  uint64_t v162 = (v143 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v143 | 7) != 0x17) {
    uint64_t v162 = v143 | 7;
  }
  uint64_t v163 = v162 + 1;
  unint64_t v144 = (char *)operator new(v162 + 1);
  v283.__r_.__value_.__l.__size_ = v142 + v140;
  v283.__r_.__value_.__r.__words[2] = v163 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
  if (v140)
  {
LABEL_278:
    if (v139 >= 0) {
      v145 = &qword_25ADF60;
    }
    else {
      v145 = (uint64_t *)qword_25ADF60;
    }
    memmove(v144, v145, v140);
  }
LABEL_282:
  uint64_t v146 = &v144[v140];
  if (v142)
  {
    if (v141 >= 0) {
      uint64_t v147 = &qword_25AD210;
    }
    else {
      uint64_t v147 = (uint64_t *)qword_25AD210;
    }
    memmove(v146, v147, v142);
  }
  v146[v142] = 0;
  if (byte_25AD257 >= 0) {
    char v148 = (const std::string::value_type *)&qword_25AD240;
  }
  else {
    char v148 = (const std::string::value_type *)qword_25AD240;
  }
  if (byte_25AD257 >= 0) {
    std::string::size_type v149 = byte_25AD257;
  }
  else {
    std::string::size_type v149 = *(void *)&byte_25AD248;
  }
  std::string::size_type v150 = std::string::append(&v283, v148, v149);
  long long v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v151;
  v150->__r_.__value_.__l.__size_ = 0;
  v150->__r_.__value_.__r.__words[2] = 0;
  v150->__r_.__value_.__r.__words[0] = 0;
  if (byte_25AD9EF >= 0) {
    long long v152 = (const std::string::value_type *)&qword_25AD9D8;
  }
  else {
    long long v152 = (const std::string::value_type *)qword_25AD9D8;
  }
  if (byte_25AD9EF >= 0) {
    std::string::size_type v153 = byte_25AD9EF;
  }
  else {
    std::string::size_type v153 = unk_25AD9E0;
  }
  std::string::size_type v154 = std::string::append(&__dst, v152, v153);
  long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
  qword_25AE2B8 = v154->__r_.__value_.__r.__words[2];
  xmmword_25AE2A8 = v155;
  v154->__r_.__value_.__l.__size_ = 0;
  v154->__r_.__value_.__r.__words[2] = 0;
  v154->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_301;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_301;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_301:
  byte_25AE2D7 = 16;
  strcpy((char *)&xmmword_25AE2C0, "Use_NACS_Adapter");
  byte_25AE2EF = 16;
  strcpy(byte_25AE2D8, "Start_Route_Sign");
  qword_25AE2F0 = (uint64_t)operator new(0x20uLL);
  unk_25AE2F8 = v278;
  strcpy((char *)qword_25AE2F0, "Start_Route_Spoken_Primary");
  int v156 = byte_25AC987;
  if (byte_25AC987 >= 0) {
    size_t v157 = byte_25AC987;
  }
  else {
    size_t v157 = qword_25AC978;
  }
  unint64_t v158 = v157 + 27;
  if (v157 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v158 <= 0x16)
  {
    unint64_t v159 = &qword_25AE308;
    qword_25AE310 = 0;
    unk_25AE318 = 0;
    qword_25AE308 = 0;
    byte_25AE31F = v157 + 27;
LABEL_318:
    if (v156 >= 0) {
      uint64_t v166 = &qword_25AC970;
    }
    else {
      uint64_t v166 = (uint64_t *)qword_25AC970;
    }
    memmove(v159, v166, v157);
    goto LABEL_322;
  }
  uint64_t v164 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v158 | 7) != 0x17) {
    uint64_t v164 = v158 | 7;
  }
  uint64_t v165 = v164 + 1;
  unint64_t v159 = (uint64_t *)operator new(v164 + 1);
  qword_25AE310 = v157 + 27;
  unk_25AE318 = v165 | 0x8000000000000000;
  qword_25AE308 = (uint64_t)v159;
  if (v157) {
    goto LABEL_318;
  }
LABEL_322:
  strcpy((char *)v159 + v157, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25AE337, "\t_Two_Lanes");
  strcpy((char *)&qword_25AE320, "_One_Lane");
  strcpy(&byte_25AE34F, "\n_Three_Lanes");
  byte_25AE367 = 12;
  byte_25AE37F = 11;
  strcpy((char *)&qword_25AE368, "_Four_Lanes");
  byte_25AE397 = 11;
  strcpy((char *)&qword_25AE380, "_Five_Lanes");
  strcpy(&byte_25AE3AF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25AE398, "_Six_Lanes");
  byte_25AE3C7 = 12;
  byte_25AE3DF = 12;
  strcpy((char *)&qword_25AE3C8, "_Eight_Lanes");
  byte_25AE3F7 = 12;
  strcpy((char *)&qword_25AE3E0, "_Second_Lane");
  byte_25AE40F = 11;
  strcpy((char *)&qword_25AE3F8, "_Third_Lane");
  byte_25AE427 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25AE410, "_Second_Third_Lanes");
  byte_25AE43F = 4;
  strcpy((char *)&dword_25AE428, "Left");
  byte_25AE457 = 5;
  byte_25AE444 = 116;
  dword_25AE440 = 1751607634;
  byte_25AE445 = 0;
  byte_25AE46F = 6;
  strcpy((char *)&dword_25AE458, "Middle");
  BYTE1(qword_25AE480) = 0;
  WORD1(qword_25AE480) = 0;
  HIDWORD(qword_25AE480) = 0x10000000;
  strcpy((char *)dword_25AE470, "Left_Second_Lane");
  BYTE1(qword_25AE498) = 0;
  WORD1(qword_25AE498) = 0;
  HIDWORD(qword_25AE498) = 285212672;
  strcpy((char *)&dword_25AE488, "Right_Second_Lan");
  qword_25AE4B0 = 0xF00000000000000;
  strcpy((char *)&dword_25AE4A0, "Left_Third_Lane");
  qword_25AE4C8 = 0x1000000000000000;
  byte_25AE4BC = 116;
  dword_25AE4B8 = 1751607634;
  dword_25AE4C4 = 1701732684;
  unk_25AE4BD = *(void *)"_Third_Lane";
  long long v167 = (char *)operator new(0x19uLL);
  qword_25AE4D0 = (uint64_t)v167;
  unk_25AE4D8 = v282;
  *(_DWORD *)long long v167 = 1952867660;
  strcpy(v167 + 19, "anes");
  *(_OWORD *)(v167 + 4) = v272;
  long long v168 = (char *)operator new(0x20uLL);
  qword_25AE4E8 = (uint64_t)v168;
  xmmword_25AE4F0 = v281;
  *(_DWORD *)long long v168 = 1751607634;
  v168[4] = 116;
  strcpy(v168 + 20, "anes");
  *(_OWORD *)(v168 + 5) = v272;
  byte_25AE517 = 5;
  strcpy((char *)&dword_25AE500, "_Stay");
  byte_25AE52F = 13;
  strcpy((char *)&qword_25AE518, "Continue_Sign");
  byte_25AE547 = 8;
  strcpy((char *)&qword_25AE530, "Continue");
  int v169 = byte_25ADA07;
  if (byte_25ADA07 >= 0) {
    size_t v170 = byte_25ADA07;
  }
  else {
    size_t v170 = qword_25AD9F8;
  }
  unint64_t v171 = v170 + 8;
  if (v170 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v171 >= 0x17)
  {
    uint64_t v173 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v171 | 7) != 0x17) {
      uint64_t v173 = v171 | 7;
    }
    uint64_t v174 = v173 + 1;
    uint64_t v175 = operator new(v173 + 1);
    qword_25AE550 = v170 + 8;
    qword_25AE558 = v174 | 0x8000000000000000;
    qword_25AE548 = (uint64_t)v175;
    *uint64_t v175 = 0x65756E69746E6F43;
    unint64_t v172 = v175 + 1;
  }
  else
  {
    qword_25AE558 = 0;
    HIBYTE(qword_25AE558) = v170 + 8;
    qword_25AE548 = 0x65756E69746E6F43;
    qword_25AE550 = 0;
    unint64_t v172 = &qword_25AE550;
    if (!v170) {
      goto LABEL_336;
    }
  }
  if (v169 >= 0) {
    long long v176 = &qword_25AD9F0;
  }
  else {
    long long v176 = (uint64_t *)qword_25AD9F0;
  }
  memmove(v172, v176, v170);
LABEL_336:
  *((unsigned char *)v172 + v170) = 0;
  int v177 = SHIBYTE(qword_25ADA60);
  if (qword_25ADA60 >= 0) {
    size_t v178 = HIBYTE(qword_25ADA60);
  }
  else {
    size_t v178 = unk_25ADA58;
  }
  unint64_t v179 = v178 + 8;
  if (v178 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v179 >= 0x17)
  {
    uint64_t v181 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17) {
      uint64_t v181 = v179 | 7;
    }
    uint64_t v182 = v181 + 1;
    uint64_t v183 = operator new(v181 + 1);
    qword_25AE568 = v178 + 8;
    qword_25AE570 = v182 | 0x8000000000000000;
    qword_25AE560 = (uint64_t)v183;
    *uint64_t v183 = qword_25AE530;
    uint64_t v180 = v183 + 1;
  }
  else
  {
    qword_25AE570 = 0;
    HIBYTE(qword_25AE570) = v178 + 8;
    qword_25AE560 = qword_25AE530;
    qword_25AE568 = 0;
    uint64_t v180 = &qword_25AE568;
    if (!v178) {
      goto LABEL_350;
    }
  }
  if (v177 >= 0) {
    unint64_t v184 = &qword_25ADA50;
  }
  else {
    unint64_t v184 = (uint64_t *)qword_25ADA50;
  }
  memmove(v180, v184, v178);
LABEL_350:
  *((unsigned char *)v180 + v178) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(__p[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&v295, "SE");
  sub_4BDC0C(qword_25AE578, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_352:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_353;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_352;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_353:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_354:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_355;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_355:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_356;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_356:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_395:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_396;
  }
LABEL_394:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_395;
  }
LABEL_357:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_358;
  }
LABEL_396:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_358:
  byte_25AE5A7 = 13;
  strcpy((char *)&qword_25AE590, "{instruction}");
  byte_25AE5BF = 20;
  strcpy(byte_25AE5A8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25AE5C0, "{secondaryInstruction}");
  HIBYTE(word_25AE5D6) = 22;
  qword_25AE5D8 = (uint64_t)operator new(0x20uLL);
  unk_25AE5E0 = v280;
  strcpy((char *)qword_25AE5D8, "{andSecondaryInstruction}");
  qword_25AE5F0 = (uint64_t)operator new(0x20uLL);
  unk_25AE5F8 = v281;
  strcpy((char *)qword_25AE5F0, "{toSecondaryInstruction}");
  byte_25AE61F = 21;
  strcpy(byte_25AE608, "{continueInstruction}");
  qword_25AE620 = (uint64_t)operator new(0x20uLL);
  unk_25AE628 = v278;
  strcpy((char *)qword_25AE620, "{thenSecondaryInstruction}");
  byte_25AE64F = 14;
  strcpy((char *)&qword_25AE638, "{instruction1}");
  byte_25AE667 = 14;
  strcpy((char *)&qword_25AE650, "{instruction2}");
  strcpy(&byte_25AE67F, "\n{nextDistance}");
  strcpy((char *)&qword_25AE668, "{distance}");
  byte_25AE697 = 14;
  byte_25AE6AF = 16;
  strcpy(byte_25AE698, "{valid_distance}");
  strcpy(&byte_25AE6C7, "\n{valid_distance}");
  strcpy((char *)&qword_25AE6B0, "{distance}");
  byte_25AE6DF = 16;
  byte_25AE6F7 = 15;
  strcpy((char *)&qword_25AE6E0, "{ClimbDistance}");
  byte_25AE70F = 17;
  strcpy(byte_25AE6F8, "{DescentDistance}");
  byte_25AE727 = 13;
  strcpy((char *)&qword_25AE710, "{nonBrkSpace}");
  byte_25AE73F = 9;
  strcpy((char *)&qword_25AE728, "{newLine}");
  byte_25AE757 = 6;
  word_25AE744 = -24382;
  dword_25AE740 = -1211981630;
  byte_25AE746 = 0;
  byte_25AE76F = 2;
  word_25AE758 = -24382;
  byte_25AE75A = 0;
  byte_25AE787 = 1;
  word_25AE770 = 10;
  byte_25AE79F = 1;
  word_25AE788 = 32;
  byte_25AE7B7 = 2;
  strcpy((char *)&word_25AE7A0, "\n\n");
  strcpy(&byte_25AE7CF, "\t{TowardShield1}");
  strcpy((char *)&qword_25AE7B8, "{Shield1}");
  byte_25AE7E7 = 15;
  strcpy(&byte_25AE7FF, "\t{TowardShield2}");
  strcpy((char *)&qword_25AE7E8, "{Shield2}");
  byte_25AE817 = 15;
  byte_25AE82F = 12;
  strcpy((char *)&qword_25AE818, "{Direction1}");
  byte_25AE847 = 12;
  strcpy((char *)&qword_25AE830, "{Direction2}");
  byte_25AE85F = 18;
  strcpy(byte_25AE848, "{TowardDirection1}");
  byte_25AE877 = 18;
  strcpy((char *)&xmmword_25AE860, "{TowardDirection2}");
  byte_25AE88F = 7;
  strcpy((char *)&dword_25AE878, "{Icon1}");
  byte_25AE8A7 = 7;
  strcpy((char *)&dword_25AE890, "{Icon2}");
  byte_25AE8A8[23] = 14;
  strcpy(byte_25AE8A8, "{Intersection}");
  byte_25AE8D7 = 6;
  strcpy((char *)&xmmword_25AE8C0, "{Road}");
  byte_25AE8EF = 7;
  strcpy((char *)&dword_25AE8D8, "{Road1}");
  byte_25AE907 = 7;
  strcpy((char *)&xmmword_25AE8F0, "{Road2}");
  strcpy(&byte_25AE91F, "\n{Freeway}");
  strcpy((char *)&xmmword_25AE908, "{Elevator}");
  strcpy(&byte_25AE937, "\t{Ferry}");
  byte_25AE94F = 7;
  byte_25AE967 = 13;
  strcpy((char *)&xmmword_25AE950, "{ShuttleName}");
  byte_25AE97F = 11;
  strcpy((char *)&xmmword_25AE968, "{Signpost1}");
  byte_25AE997 = 11;
  strcpy((char *)&xmmword_25AE980, "{Signpost2}");
  byte_25AE9AF = 12;
  strcpy((char *)&xmmword_25AE998, "{ExitNumber}");
  strcpy(&byte_25AE9C7, "\t{Name}");
  strcpy((char *)&xmmword_25AE9B0, "{Address}");
  byte_25AE9DF = 6;
  byte_25AE9F7 = 11;
  strcpy((char *)&xmmword_25AE9E0, "{PlaceName}");
  byte_25AEA0F = 14;
  strcpy((char *)&xmmword_25AE9F8, "{ElevatorName}");
  byte_25AEA27 = 15;
  strcpy((char *)&xmmword_25AEA10, "{EscalatorName}");
  byte_25AEA3F = 12;
  strcpy((char *)&xmmword_25AEA28, "{StairsName}");
  strcpy(&byte_25AEA57, "\n{BridgeName}");
  strcpy((char *)&xmmword_25AEA40, "{RampName}");
  byte_25AEA6F = 12;
  byte_25AEA87 = 12;
  strcpy((char *)&xmmword_25AEA70, "{TunnelName}");
  byte_25AEA9F = 13;
  strcpy((char *)&xmmword_25AEA88, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25AE8A8;
  *(_OWORD *)int v285 = xmmword_25AE8C0;
  *(void *)&v285[16] = unk_25AE8D0;
  *(_OWORD *)char v286 = *(_OWORD *)&dword_25AE8D8;
  *(void *)v287 = unk_25AE8E8;
  *(_OWORD *)&v287[8] = xmmword_25AE8F0;
  uint64_t v288 = unk_25AE900;
  *(_OWORD *)long long __p = xmmword_25AE908;
  uint64_t v290 = unk_25AE918;
  uint64_t v292 = unk_25AE930;
  long long v291 = xmmword_25AE920;
  long long v293 = xmmword_25AE938;
  uint64_t v294 = unk_25AE948;
  uint64_t v296 = unk_25AE960;
  long long v295 = xmmword_25AE950;
  long long v297 = xmmword_25AE968;
  uint64_t v298 = unk_25AE978;
  uint64_t v300 = unk_25AE990;
  long long v299 = xmmword_25AE980;
  long long v301 = xmmword_25AE998;
  long long v303 = xmmword_25AE9B0;
  uint64_t v302 = unk_25AE9A8;
  uint64_t v304 = unk_25AE9C0;
  long long v305 = xmmword_25AE9C8;
  long long v307 = xmmword_25AE9E0;
  uint64_t v306 = unk_25AE9D8;
  uint64_t v308 = unk_25AE9F0;
  long long v309 = xmmword_25AE9F8;
  long long v311 = xmmword_25AEA10;
  uint64_t v310 = unk_25AEA08;
  uint64_t v312 = unk_25AEA20;
  long long v313 = xmmword_25AEA28;
  long long v315 = xmmword_25AEA40;
  uint64_t v314 = unk_25AEA38;
  uint64_t v316 = unk_25AEA50;
  long long v317 = xmmword_25AEA58;
  long long v319 = xmmword_25AEA70;
  uint64_t v318 = unk_25AEA68;
  uint64_t v320 = unk_25AEA80;
  uint64_t v322 = unk_25AEA98;
  long long v321 = xmmword_25AEA88;
  sub_4BDC0C(qword_25AEAA0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_360:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_361;
      }
      goto LABEL_399;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_360;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_408;
  }
LABEL_407:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_409;
  }
LABEL_408:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_410;
  }
LABEL_409:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_411;
  }
LABEL_410:
  operator delete((void *)v295);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_374;
    }
    goto LABEL_412;
  }
LABEL_411:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_374:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_413;
  }
LABEL_412:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_375:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_376;
    }
    goto LABEL_414;
  }
LABEL_413:
  operator delete(__p[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_376:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_377;
    }
    goto LABEL_415;
  }
LABEL_414:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_377:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_378;
    }
LABEL_416:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_379;
    }
    goto LABEL_417;
  }
LABEL_415:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_416;
  }
LABEL_378:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_379;
  }
LABEL_417:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_379:
  qword_25AEAB8 = (uint64_t)operator new(0x19uLL);
  unk_25AEAC0 = v282;
  strcpy((char *)qword_25AEAB8, "From_User_Location_List");
  byte_25AEAE7 = 20;
  strcpy(byte_25AEAD0, "Origin_Waypoint_List");
  qword_25AEAE8 = (uint64_t)operator new(0x20uLL);
  unk_25AEAF0 = v278;
  strcpy((char *)qword_25AEAE8, "Intermediate_Waypoint_List");
  unk_25AEB00 = operator new(0x20uLL);
  unk_25AEB08 = v280;
  strcpy(unk_25AEB00, "Destination_Waypoint_List");
  byte_25AEB2F = 15;
  strcpy(byte_25AEB18, "{toDestination}");
  byte_25AEB47 = 13;
  strcpy((char *)&xmmword_25AEB30, "{Destination}");
  byte_25AEB5F = 7;
  strcpy(byte_25AEB48, "To_Home");
  byte_25AEB77 = 14;
  strcpy(byte_25AEB60, "To_ContactHome");
  byte_25AEB8F = 7;
  strcpy(byte_25AEB78, "To_Work");
  byte_25AEBA7 = 14;
  strcpy(byte_25AEB90, "To_ContactWork");
  strcpy(&byte_25AEBBF, "\nTo_Business");
  strcpy(byte_25AEBA8, "To_Address");
  byte_25AEBD7 = 11;
  byte_25AEBEF = 16;
  strcpy(byte_25AEBD8, "To_Other_Contact");
  strcpy(&byte_25AEC07, "\tTo_ContactSchool");
  strcpy(byte_25AEBF0, "To_School");
  byte_25AEC1F = 16;
  byte_25AEC37 = 17;
  strcpy(byte_25AEC20, "To_PersonLocation");
  qword_25AEC38 = (uint64_t)operator new(0x20uLL);
  unk_25AEC40 = v279;
  strcpy((char *)qword_25AEC38, "To_ContactCustomLabelAddress");
  byte_25AEC67 = 7;
  strcpy((char *)&dword_25AEC50, "At_Home");
  byte_25AEC7F = 14;
  strcpy((char *)&qword_25AEC68, "At_ContactHome");
  byte_25AEC97 = 7;
  strcpy((char *)&dword_25AEC80, "At_Work");
  byte_25AECAF = 14;
  strcpy((char *)&qword_25AEC98, "At_ContactWork");
  strcpy(&byte_25AECC7, "\nAt_Business");
  strcpy((char *)&qword_25AECB0, "At_Address");
  byte_25AECDF = 11;
  byte_25AECF7 = 16;
  strcpy(byte_25AECE0, "At_Other_Contact");
  byte_25AED0F = 4;
  strcpy((char *)&dword_25AECF8, "Home");
  byte_25AED27 = 11;
  strcpy((char *)&qword_25AED10 + 7, "Home");
  qword_25AED10 = *(void *)&v265[16];
  byte_25AED3F = 4;
  strcpy((char *)&dword_25AED28, "Work");
  byte_25AED57 = 11;
  strcpy((char *)&qword_25AED40 + 7, "Work");
  qword_25AED40 = *(void *)v265;
  byte_25AED6F = 7;
  strcpy((char *)&qword_25AED58, "Address");
  byte_25AED87 = 8;
  strcpy((char *)&qword_25AED70, "Business");
  byte_25AED9F = 13;
  qword_25AED88 = *(void *)&v265[48];
  *(uint64_t *)((char *)&qword_25AED88 + 5) = *(void *)&v265[32];
  byte_25AED95 = 0;
  byte_25AEDB7 = 6;
  strcpy((char *)&dword_25AEDA0, "School");
  byte_25AEDCF = 13;
  strcpy((char *)&qword_25AEDB8, "ContactSchool");
  byte_25AEDE7 = 14;
  strcpy((char *)&qword_25AEDD0, "PersonLocation");
  qword_25AEDE8 = (uint64_t)operator new(0x20uLL);
  xmmword_25AEDF0 = v280;
  strcpy((char *)qword_25AEDE8, "ContactCustomLabelAddress");
  if (byte_25AEB47 < 0)
  {
    sub_4200(&xmmword_25AEE00, (void *)xmmword_25AEB30, *((unint64_t *)&xmmword_25AEB30 + 1));
  }
  else
  {
    xmmword_25AEE00 = xmmword_25AEB30;
    qword_25AEE10 = unk_25AEB40;
  }
  byte_25AEE2F = 16;
  strcpy((char *)&xmmword_25AEE18, "{PrevExitNumber}");
  byte_25AEE47 = 10;
  strcpy((char *)&qword_25AEE30, "{PrevRoad}");
  qword_25AEE48 = (uint64_t)operator new(0x20uLL);
  unk_25AEE50 = v281;
  strcpy((char *)qword_25AEE48, "{RouteTotalExpectedTime}");
  byte_25AEE77 = 18;
  strcpy(byte_25AEE60, "{ChargePercentage}");
  qword_25AEE78 = (uint64_t)operator new(0x20uLL);
  unk_25AEE80 = v275;
  strcpy((char *)qword_25AEE78, "{RemainingChargePercentage}");
  byte_25AEEA7 = 16;
  strcpy(byte_25AEE90, "{ChargeDuration}");
  byte_25AEEBF = 15;
  strcpy((char *)&qword_25AEEA8, "{ConnectorType}");
  byte_25AEED7 = 19;
  strcpy(byte_25AEEC0, "{ChargeStationName}");
  byte_25AEEEF = 7;
  strcpy((char *)&dword_25AEED8, "{Power}");
  byte_25AEF07 = 13;
  strcpy((char *)&qword_25AEEF0, "{VehicleName}");
  byte_25AEF1F = 18;
  strcpy((char *)&xmmword_25AEF08, "{AreaIncidentName}");
  byte_25AEF37 = 14;
  strcpy((char *)&qword_25AEF20, "{AreaIncident}");
  byte_25AEF4F = 16;
  strcpy((char *)&xmmword_25AEF38, "{AffectedRegion}");
  byte_25AEF67 = 21;
  strcpy(byte_25AEF50, "{AreaIncidentWeblink}");
  byte_25AEF7F = 20;
  strcpy((char *)&xmmword_25AEF68, "{AreaIncidentAgency}");
  byte_25AEF97 = 11;
  strcpy((char *)&qword_25AEF80, "{IssueTime}");
  byte_25AEFAF = 12;
  strcpy((char *)&qword_25AEF98, "{UpdateTime}");
  byte_25AEFC7 = 11;
  strcpy((char *)&qword_25AEFB0, "{IssueDate}");
  byte_25AEFDF = 12;
  strcpy((char *)&qword_25AEFC8, "{UpdateDate}");
  qword_25AEFE0 = (uint64_t)operator new(0x20uLL);
  unk_25AEFE8 = v281;
  strcpy((char *)qword_25AEFE0, "{AreaIncidentDataSource}");
  byte_25AF00F = 13;
  strcpy((char *)&qword_25AEFF8, "{AreaHectare}");
  byte_25AF027 = 10;
  strcpy((char *)&qword_25AF010, "{AreaAcre}");
  qword_25AF028 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AF030 = v277;
  strcpy((char *)qword_25AF028, "{WildfirePercentageContained}");
  qword_25AF040 = (uint64_t)operator new(0x28uLL);
  unk_25AF048 = v269[1];
  strcpy((char *)qword_25AF040, "{WildfireExpectedContainmentDate}");
  qword_25AF058 = (uint64_t)operator new(0x20uLL);
  unk_25AF060 = v279;
  strcpy((char *)qword_25AF058, "{ServerRecommendedRouteName}");
  qword_25AF070 = (uint64_t)operator new(0x20uLL);
  unk_25AF078 = v279;
  strcpy((char *)qword_25AF070, "{ServerNonRecommendedRoute1}");
  qword_25AF088 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AF090 = v279;
  strcpy((char *)qword_25AF088, "{ServerNonRecommendedRoute2}");
  byte_25AF0B7 = 12;
  strcpy((char *)&qword_25AF0A0, "{ClientDest}");
  byte_25AF0CF = 6;
  strcpy((char *)&dword_25AF0B8, "{Name}");
  qword_25AF0D0 = (uint64_t)operator new(0x20uLL);
  unk_25AF0D8 = v271;
  strcpy((char *)qword_25AF0D0, "ProactiveAlert_FasterRouteTitle");
  qword_25AF0E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AF0F0 = v278;
  strcpy((char *)qword_25AF0E8, "ProactiveAlert_RoadClosure");
  qword_25AF100 = (uint64_t)operator new(0x30uLL);
  unk_25AF108 = v273;
  strcpy((char *)qword_25AF100, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25AF118 = (uint64_t)operator new(0x28uLL);
  unk_25AF120 = v276;
  strcpy((char *)qword_25AF118, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25AF130 = (uint64_t)operator new(0x28uLL);
  unk_25AF138 = v276;
  strcpy((char *)qword_25AF130, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25AF148 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AF150 = v276;
  strcpy((char *)qword_25AF148, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25AF160 = (uint64_t)operator new(0x30uLL);
  unk_25AF168 = xmmword_20B93B0;
  strcpy((char *)qword_25AF160, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25AF18F = 17;
  strcpy(byte_25AF178, "Proactive_Driving");
  strcpy(&byte_25AF1A7, "\n{RouteName}");
  strcpy((char *)&qword_25AF190, "_RouteName");
  byte_25AF1BF = 11;
  qword_25AF1C0 = (uint64_t)operator new(0x28uLL);
  unk_25AF1C8 = v269[1];
  strcpy((char *)qword_25AF1C0, "Pass_Traffic_Light_Spoken_Primary");
  qword_25AF1D8 = (uint64_t)operator new(0x20uLL);
  unk_25AF1E0 = v277;
  strcpy((char *)qword_25AF1D8, "Pass_Stop_Sign_Spoken_Primary");
  unk_25AF1F0 = operator new(0x20uLL);
  unk_25AF1F8 = v269[0];
  strcpy(unk_25AF1F0, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25AF21F, "\nBannerBody");
  strcpy(byte_25AF208, "BannerHead");
  strcpy(&byte_25AF237, "\nBannerDescription");
  byte_25AF24F = 17;
  strcpy(&byte_25AF267, "\n_Incident");
  strcpy((char *)&qword_25AF250, "VoiceAlert");
  strcpy(&byte_25AF27F, "\t_Area_Incident");
  byte_25AF297 = 14;
  byte_25AF2AF = 15;
  strcpy((char *)&qword_25AF298, "_Area_Incidents");
  strcpy(&byte_25AF2C7, "\t_Crash");
  strcpy((char *)&qword_25AF2B0, "_Accident");
  byte_25AF2DF = 6;
  byte_25AF2F7 = 16;
  strcpy((char *)&xmmword_25AF2E0, "_Congestion_Zone");
  strcpy(&byte_25AF30F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25AF2F8, "_Toll_Zone");
  byte_25AF327 = 19;
  BYTE1(qword_25AF338) = 116;
  WORD1(qword_25AF338) = 0;
  HIDWORD(qword_25AF338) = 301989888;
  strcpy(byte_25AF340, "_Construction");
  strcpy((char *)&qword_25AF328, "_Incident_Accide");
  byte_25AF357 = 13;
  byte_25AF36F = 7;
  strcpy((char *)&dword_25AF358, "_Hazard");
  byte_25AF387 = 12;
  strcpy((char *)&qword_25AF370, "_LaneClosure");
  byte_25AF39F = 12;
  strcpy((char *)&qword_25AF388, "_LaneTrailer");
  qmemcpy(&byte_25AF3B7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25AF3A0, "_Shoulder");
  qword_25AF3C8 = 0x1500007200000000;
  *(void *)algn_25AF3C4 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25AF3D0, "_Causing_Traffic_Delay");
  HIBYTE(word_25AF3E6) = 22;
  byte_25AF3FF = 6;
  strcpy((char *)&dword_25AF3E8, "_Timed");
  byte_25AF417 = 12;
  strcpy((char *)&qword_25AF400, "_HasDistance");
  byte_25AF42F = 8;
  strcpy((char *)&qword_25AF418, "_Closure");
  strcpy(&byte_25AF447, "\n_BadRoad");
  strcpy((char *)&qword_25AF430, "_NoReroute");
  byte_25AF45F = 8;
  byte_25AF477 = 12;
  strcpy((char *)&qword_25AF460, "_TollTrailer");
  byte_25AF48F = 12;
  strcpy((char *)&qword_25AF478, "_BestTrailer");
  byte_25AF4A7 = 8;
  strcpy((char *)&qword_25AF490, "_Trailer");
  byte_25AF4BF = 18;
  strcpy((char *)&xmmword_25AF4A8, "_Secondary_Trailer");
  byte_25AF4D7 = 8;
  strcpy((char *)&qword_25AF4C0, "_Savings");
  byte_25AF4EF = 8;
  strcpy((char *)&qword_25AF4D8, "_AltRoad");
  byte_25AF507 = 6;
  strcpy((char *)&dword_25AF4F0, "_Named");
  byte_25AF51F = 6;
  strcpy((char *)&dword_25AF508, "_NAMED");
  byte_25AF537 = 22;
  strcpy((char *)&xmmword_25AF520, "_Named_Suggested_Route");
  qword_25AF550 = 0x1000000000000000;
  xmmword_25AF540 = xmmword_20E81D0;
  byte_25AF56F = 11;
  strcpy((char *)&qword_25AF558, "_Speed_Trap");
  byte_25AF587 = 4;
  strcpy((char *)&dword_25AF570, "_UGI");
  byte_25AF59F = 12;
  strcpy((char *)&qword_25AF588, "_Safer_Route");
  qword_25AF5A0 = (uint64_t)operator new(0x20uLL);
  unk_25AF5A8 = v271;
  strcpy((char *)qword_25AF5A0, "BlockedRouteByBlockingIncident_");
  qword_25AF5B8 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25AF5C0 = xmmword_20B9280;
  strcpy((char *)qword_25AF5B8, "BlockedRouteByManeuverRestriction_");
  qword_25AF5D0 = (uint64_t)operator new(0x20uLL);
  unk_25AF5D8 = v269[0];
  strcpy((char *)qword_25AF5D0, "BlockedRouteByTimeRestriction_");
  qword_25AF5E8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AF5F0 = xmmword_20B8FD0;
  strcpy((char *)qword_25AF5E8, "SuggestRouteToAvoidBlockingIncident_");
  qword_25AF600 = (uint64_t)operator new(0x30uLL);
  unk_25AF608 = xmmword_20B9380;
  strcpy((char *)qword_25AF600, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25AF618 = (uint64_t)operator new(0x30uLL);
  unk_25AF620 = xmmword_20B93E0;
  strcpy((char *)qword_25AF618, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25AF647 = 1;
  word_25AF630 = 95;
  strcpy((char *)&xmmword_25AF648, "IncidentsCausingDelay_");
  HIBYTE(word_25AF65E) = 22;
  qword_25AF660 = (uint64_t)operator new(0x19uLL);
  unk_25AF668 = v282;
  strcpy((char *)qword_25AF660, "NonVotableRoadIncident_");
  byte_25AF68F = 20;
  strcpy(byte_25AF678, "VotableRoadIncident_");
  byte_25AF6A7 = 13;
  strcpy((char *)&qword_25AF690, "AreaIncident_");
  byte_25AF6BF = 15;
  strcpy((char *)&qword_25AF6A8, "CongestionZone_");
  qword_25AF6C0 = (uint64_t)operator new(0x20uLL);
  unk_25AF6C8 = v281;
  strcpy((char *)qword_25AF6C0, "EVModifiedChargingStops_");
  byte_25AF6EF = 13;
  strcpy((char *)&qword_25AF6D8, "EVDisconnect_");
  byte_25AF707 = 12;
  strcpy((char *)&qword_25AF6F0, "EVReconnect_");
  qword_25AF708 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AF710 = v279;
  strcpy((char *)qword_25AF708, "EVOfflineToOnlineTransition_");
  byte_25AF737 = 13;
  strcpy((char *)&qword_25AF720, "EVOfflineSAR_");
  byte_25AF74F = 21;
  strcpy((char *)&xmmword_25AF738, "EVTowingNotSupported_");
  byte_25AF767 = 18;
  strcpy(algn_25AF750, "EVInfeasibleRoute_");
  qword_25AF768 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25AF770 = xmmword_20B8DF0;
  strcpy((char *)qword_25AF768, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25AF780 = (uint64_t)operator new(0x40uLL);
  unk_25AF788 = xmmword_20B98C0;
  strcpy((char *)qword_25AF780, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25AF798 = (uint64_t)operator new(0x30uLL);
  unk_25AF7A0 = v274;
  strcpy((char *)qword_25AF798, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v269, "InfeasibleRoute_ngStopsForEVInfe", sizeof(v269));
  qword_25AF7B0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v265[50] = 0;
  *(_DWORD *)&v265[52] = 0;
  *(void *)&v265[56] = 0x8000000000000030;
  unk_25AF7B8 = xmmword_20B9A80;
  strcpy((char *)qword_25AF7B0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v265, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25AF7C8 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25AF7D0 = v273;
  strcpy((char *)qword_25AF7C8, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  long long v185 = operator new(0x30uLL);
  qword_25AF7E0 = (uint64_t)v185;
  unk_25AF7E8 = v274;
  *long long v185 = *(_OWORD *)"SuggestRouteAddingStopsForEVInfeasibleRoute_";
  v185[1] = v269[1];
  *(_OWORD *)((char *)v185 + 28) = v269[0];
  *((unsigned char *)v185 + 44) = 0;
  qword_25AF7F8 = (uint64_t)operator new(0x28uLL);
  unk_25AF800 = v272;
  strcpy((char *)qword_25AF7F8, "SuggestDetourWithHigherArrivalSOC_");
  uint64_t v186 = operator new(0x30uLL);
  qword_25AF810 = (uint64_t)v186;
  unk_25AF818 = *(_OWORD *)&v265[48];
  *uint64_t v186 = *(_OWORD *)&v265[32];
  v186[1] = *(_OWORD *)&v265[16];
  *(_OWORD *)((char *)v186 + 30) = *(_OWORD *)v265;
  *((unsigned char *)v186 + 46) = 0;
  qword_25AF828 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AF830 = v276;
  strcpy((char *)qword_25AF828, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25AF840 = (uint64_t)operator new(0x28uLL);
  unk_25AF848 = v268;
  strcpy((char *)qword_25AF840, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25AF858 = (uint64_t)operator new(0x20uLL);
  unk_25AF860 = v281;
  strcpy((char *)qword_25AF858, "OfflineToOnlineNewRoute_");
  qword_25AF870 = (uint64_t)operator new(0x40uLL);
  unk_25AF878 = xmmword_20B98C0;
  strcpy((char *)qword_25AF870, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25AF89F = 20;
  strcpy(byte_25AF888, "LPR_OFFLINE_REROUTE_");
  byte_25AF8B7 = 16;
  strcpy((char *)&xmmword_25AF8A0, "LPR_OFFLINE_SAR_");
  byte_25AF8CF = 20;
  strcpy(byte_25AF8B8, "LPR_OFFLINE_REROUTE_");
  byte_25AF8E7 = 16;
  strcpy((char *)&xmmword_25AF8D0, "LPR_OFFLINE_SAR_");
  byte_25AF8FF = 19;
  strcpy(byte_25AF8E8, "SuggestFasterRoute_");
  qword_25AF900 = (char *)operator new(0x20uLL);
  xmmword_25AF908 = v280;
  strcpy(qword_25AF900, "AreaIncidentSaferReroute_");
  byte_25AF92F = 12;
  strcpy((char *)&qword_25AF918, "_Remove_Stop");
  byte_25AF947 = 13;
  strcpy((char *)&qword_25AF930, "_Remove_Stops");
  strcpy(&byte_25AF95F, "\t_Add_Stops");
  strcpy((char *)&qword_25AF948, "_Add_Stop");
  strcpy(&byte_25AF977, "\n_Change_Route");
  byte_25AF98F = 13;
  byte_25AF9A7 = 15;
  strcpy((char *)&qword_25AF990, "_Different_Stop");
  byte_25AF9BF = 16;
  strcpy((char *)&xmmword_25AF9A8, "_Different_Stops");
  byte_25AF9D7 = 15;
  strcpy((char *)&qword_25AF9C0, "_EV_Remove_Stop");
  byte_25AF9EF = 16;
  strcpy((char *)&xmmword_25AF9D8, "_EV_Remove_Stops");
  byte_25AFA07 = 12;
  strcpy((char *)&qword_25AF9F0, "_EV_Add_Stop");
  byte_25AFA1F = 13;
  strcpy((char *)&qword_25AFA08, "_EV_Add_Stops");
  byte_25AFA37 = 15;
  strcpy((char *)&qword_25AFA20, "_EV_Low_Battery");
  byte_25AFA4F = 14;
  strcpy((char *)&qword_25AFA38, "_EV_Infeasible");
  byte_25AFA67 = 15;
  strcpy((char *)&qword_25AFA50, "_EV_Last_Chance");
  qword_25AFA68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AFA70 = v281;
  strcpy((char *)qword_25AFA68, "_EV_Low_Battery_Add_Stop");
  uint64_t v187 = qword_25AF968;
  qword_25AFA80 = (uint64_t)operator new(0x20uLL);
  unk_25AFA88 = v280;
  strcpy((char *)qword_25AFA80, "_EV_Low_Battery_Add_Stops");
  qword_25AFA98 = (uint64_t)operator new(0x19uLL);
  unk_25AFAA0 = v282;
  strcpy((char *)qword_25AFA98, "_EV_Infeasible_Add_Stop");
  int v188 = byte_25AF977;
  if (byte_25AF977 >= 0) {
    size_t v189 = byte_25AF977;
  }
  else {
    size_t v189 = v187;
  }
  unint64_t v190 = v189 + 14;
  if (v189 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v190 >= 0x17)
  {
    uint64_t v193 = (v190 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v190 | 7) != 0x17) {
      uint64_t v193 = v190 | 7;
    }
    uint64_t v194 = v193 + 1;
    uint64_t v195 = (char *)operator new(v193 + 1);
    qword_25AFAB8 = v189 + 14;
    unk_25AFAC0 = v194 | 0x8000000000000000;
    qword_25AFAB0 = (uint64_t)v195;
    qmemcpy(v195, "_EV_Infeasible", 14);
    unint64_t v191 = v195 + 14;
  }
  else
  {
    BYTE1(qword_25AFAB8) = 0;
    WORD1(qword_25AFAB8) = 0;
    HIDWORD(qword_25AFAB8) = 0;
    unk_25AFAC0 = 0;
    byte_25AFAC7 = v189 + 14;
    strcpy((char *)&qword_25AFAB0, "_EV_Infe");
    unint64_t v191 = (char *)&qword_25AFAB8 + 6;
    if (!v189)
    {
      char v192 = 1;
      goto LABEL_433;
    }
  }
  if (v188 >= 0) {
    uint64_t v196 = (uint64_t)&qword_25AF960;
  }
  else {
    uint64_t v196 = 0x6F74535F6464415FLL;
  }
  memmove(v191, (const void *)v196, v189);
  char v192 = 0;
LABEL_433:
  v191[v189] = 0;
  uint64_t v197 = (char *)operator new(0x20uLL);
  qword_25AFAC8 = (uint64_t)v197;
  *(_OWORD *)algn_25AFAD0 = v281;
  *(void *)uint64_t v197 = qword_25AFA50;
  *(void *)(v197 + 7) = *(uint64_t *)((char *)&qword_25AFA50 + 7);
  *(void *)(v197 + 15) = qword_25AF948;
  v197[23] = word_25AF950;
  v197[24] = 0;
  unint64_t v198 = v189 + 15;
  if (v189 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v198 > 0x16)
  {
    uint64_t v200 = (v198 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v198 | 7) != 0x17) {
      uint64_t v200 = v198 | 7;
    }
    uint64_t v201 = v200 + 1;
    unint64_t v199 = (uint64_t *)operator new(v200 + 1);
    qword_25AFAE8 = v189 + 15;
    unk_25AFAF0 = v201 | 0x8000000000000000;
    qword_25AFAE0 = (uint64_t)v199;
  }
  else
  {
    unint64_t v199 = &qword_25AFAE0;
    qword_25AFAE8 = 0;
    unk_25AFAF0 = 0;
    qword_25AFAE0 = 0;
    byte_25AFAF7 = v189 + 15;
  }
  uint64_t *v199 = qword_25AFA50;
  *(uint64_t *)((char *)v199 + 7) = *(uint64_t *)((char *)&qword_25AFA50 + 7);
  uint64_t v202 = (char *)v199 + 15;
  if ((v192 & 1) == 0)
  {
    if (v188 >= 0) {
      uint64_t v203 = &qword_25AF960;
    }
    else {
      uint64_t v203 = (uint64_t *)qword_25AF960;
    }
    memmove((char *)v199 + 15, v203, v189);
  }
  v202[v189] = 0;
  byte_25AFB0F = 17;
  strcpy((char *)&xmmword_25AFAF8, "_EV_Forced_Detour");
  qword_25AFB10 = (uint64_t)operator new(0x20uLL);
  unk_25AFB18 = v280;
  strcpy((char *)qword_25AFB10, "_EV_Higher_Arrival_Charge");
  qword_25AFB28 = (uint64_t)operator new(0x28uLL);
  unk_25AFB30 = xmmword_20B8FD0;
  strcpy((char *)qword_25AFB28, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25AFB57 = 16;
  strcpy(byte_25AFB40, "_EV_Out_Of_Range");
  qword_25AFB58 = (uint64_t)operator new(0x20uLL);
  unk_25AFB60 = v275;
  strcpy((char *)qword_25AFB58, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25AFB70, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25AFB86) = 22;
  qword_25AFB88 = (uint64_t)operator new(0x19uLL);
  unk_25AFB90 = v282;
  strcpy((char *)qword_25AFB88, "_EV_Forced_Modify_Stops");
  byte_25AFBB7 = 19;
  strcpy(byte_25AFBA0, "_EV_Forced_Add_Stop");
  byte_25AFBCF = 20;
  strcpy((char *)&xmmword_25AFBB8, "_EV_Forced_Add_Stops");
  byte_25AFBE7 = 21;
  strcpy(byte_25AFBD0, "_EV_Battery_Info_Lost");
  qword_25AFBE8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AFBF0 = v280;
  strcpy((char *)qword_25AFBE8, "_EV_Battery_Info_Restored");
  qword_25AFC00 = (uint64_t)operator new(0x20uLL);
  unk_25AFC08 = v281;
  strcpy((char *)qword_25AFC00, "_EV_Towing_Not_Supported");
  qword_25AFC18 = (uint64_t)operator new(0x28uLL);
  unk_25AFC20 = v270;
  strcpy((char *)qword_25AFC18, "_EV_Offline_to_Online_Transition");
  byte_25AFC47 = 15;
  strcpy((char *)&qword_25AFC30, "_EV_Offline_SAR");
  qword_25AFC48 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25AFC50 = v279;
  strcpy((char *)qword_25AFC48, "_Offline_to_Online_New_Route");
  byte_25AFC77 = 12;
  strcpy((char *)&qword_25AFC60, "BannerButton");
  byte_25AFC8F = 8;
  strcpy((char *)&qword_25AFC78, "_Dismiss");
  byte_25AFCA7 = 3;
  word_25AFC90 = 20319;
  byte_25AFC92 = 75;
  byte_25AFC93 = 0;
  byte_25AFCBF = 11;
  strcpy((char *)&qword_25AFCA8, "_Still_Here");
  byte_25AFCD7 = 8;
  strcpy((char *)&qword_25AFCC0, "_Cleared");
  qmemcpy(&byte_25AFCEF, "\nBannerButton", 13);
  strcpy((char *)&qword_25AFCD8, "_No_Thanks");
  uint64_t v204 = qword_25AFC68;
  qword_25AFD00 = 0x1400000000000000;
  *(void *)algn_25AFCFC = 0x7373696D7369445FLL;
  qword_25AFD18 = 0xF00000000000000;
  qword_25AFD10 = 0x4B4F5F6E6F7474;
  int v205 = byte_25AFA07;
  if (byte_25AFA07 >= 0) {
    size_t v206 = byte_25AFA07;
  }
  else {
    size_t v206 = qword_25AF9F8;
  }
  unint64_t v207 = v206 + 12;
  qword_25AFD08 = *(void *)"BannerButton";
  if (v206 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v207 >= 0x17)
  {
    uint64_t v209 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17) {
      uint64_t v209 = v207 | 7;
    }
    uint64_t v210 = v209 + 1;
    uint64_t v211 = (char *)operator new(v209 + 1);
    qword_25AFD28 = v206 + 12;
    unk_25AFD30 = v210 | 0x8000000000000000;
    qword_25AFD20 = (uint64_t)v211;
    *((_DWORD *)v211 + 2) = 1852798068;
    *(void *)uint64_t v211 = *(void *)"BannerButton";
    unint64_t v208 = v211 + 12;
  }
  else
  {
    BYTE5(qword_25AFD28) = 0;
    HIWORD(qword_25AFD28) = 0;
    unk_25AFD30 = 0;
    byte_25AFD37 = v206 + 12;
    strcpy((char *)&qword_25AFD20, "BannerButton");
    unint64_t v208 = (char *)&qword_25AFD28 + 4;
    if (!v206) {
      goto LABEL_458;
    }
  }
  if (v205 >= 0) {
    int v212 = &qword_25AF9F0;
  }
  else {
    int v212 = (uint64_t *)qword_25AF9F0;
  }
  memmove(v208, v212, v206);
LABEL_458:
  v208[v206] = 0;
  int v213 = byte_25AFA1F;
  if (byte_25AFA1F >= 0) {
    size_t v214 = byte_25AFA1F;
  }
  else {
    size_t v214 = unk_25AFA10;
  }
  unint64_t v215 = v214 + 12;
  if (v214 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v215 >= 0x17)
  {
    uint64_t v217 = (v215 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v215 | 7) != 0x17) {
      uint64_t v217 = v215 | 7;
    }
    uint64_t v218 = v217 + 1;
    uint64_t v219 = (char *)operator new(v217 + 1);
    qword_25AFD40 = v214 + 12;
    unk_25AFD48 = v218 | 0x8000000000000000;
    qword_25AFD38 = (uint64_t)v219;
    *(void *)uint64_t v219 = qword_25AFC60;
    *((_DWORD *)v219 + 2) = qword_25AFC68;
    unint64_t v216 = v219 + 12;
  }
  else
  {
    qword_25AFD40 = 0;
    unk_25AFD48 = 0;
    byte_25AFD4F = v214 + 12;
    LODWORD(qword_25AFD40) = qword_25AFC68;
    qword_25AFD38 = qword_25AFC60;
    unint64_t v216 = (char *)&qword_25AFD40 + 4;
    if (!v214) {
      goto LABEL_472;
    }
  }
  if (v213 >= 0) {
    int v220 = &qword_25AFA08;
  }
  else {
    int v220 = (uint64_t *)qword_25AFA08;
  }
  memmove(v216, v220, v214);
LABEL_472:
  v216[v214] = 0;
  int v221 = byte_25AF9D7;
  if (byte_25AF9D7 >= 0) {
    size_t v222 = byte_25AF9D7;
  }
  else {
    size_t v222 = unk_25AF9C8;
  }
  unint64_t v223 = v222 + 12;
  if (v222 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v223 >= 0x17)
  {
    uint64_t v225 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v223 | 7) != 0x17) {
      uint64_t v225 = v223 | 7;
    }
    uint64_t v226 = v225 + 1;
    uint64_t v227 = (char *)operator new(v225 + 1);
    qword_25AFD58 = v222 + 12;
    unk_25AFD60 = v226 | 0x8000000000000000;
    qword_25AFD50 = (uint64_t)v227;
    *(void *)uint64_t v227 = qword_25AFC60;
    *((_DWORD *)v227 + 2) = qword_25AFC68;
    unint64_t v224 = v227 + 12;
  }
  else
  {
    qword_25AFD58 = 0;
    unk_25AFD60 = 0;
    byte_25AFD67 = v222 + 12;
    LODWORD(qword_25AFD58) = qword_25AFC68;
    qword_25AFD50 = qword_25AFC60;
    unint64_t v224 = (char *)&qword_25AFD58 + 4;
    if (!v222) {
      goto LABEL_486;
    }
  }
  if (v221 >= 0) {
    v228 = &qword_25AF9C0;
  }
  else {
    v228 = (uint64_t *)qword_25AF9C0;
  }
  memmove(v224, v228, v222);
LABEL_486:
  v224[v222] = 0;
  int v229 = byte_25AFC77;
  if (byte_25AFC77 >= 0) {
    size_t v230 = byte_25AFC77;
  }
  else {
    size_t v230 = v204;
  }
  int v231 = byte_25AF9EF;
  if (byte_25AF9EF >= 0) {
    size_t v232 = byte_25AF9EF;
  }
  else {
    size_t v232 = *((void *)&xmmword_25AF9D8 + 1);
  }
  unint64_t v233 = v232 + v230;
  if (v232 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v233 <= 0x16)
  {
    unint64_t v234 = &qword_25AFD68;
    qword_25AFD70 = 0;
    unk_25AFD78 = 0;
    qword_25AFD68 = 0;
    byte_25AFD7F = v232 + v230;
    if (!v230) {
      goto LABEL_499;
    }
    goto LABEL_495;
  }
  uint64_t v241 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v233 | 7) != 0x17) {
    uint64_t v241 = v233 | 7;
  }
  uint64_t v242 = v241 + 1;
  unint64_t v234 = (uint64_t *)operator new(v241 + 1);
  qword_25AFD70 = v232 + v230;
  unk_25AFD78 = v242 | 0x8000000000000000;
  qword_25AFD68 = (uint64_t)v234;
  if (v230)
  {
LABEL_495:
    if (v229 >= 0) {
      v235 = &qword_25AFC60;
    }
    else {
      v235 = (uint64_t *)qword_25AFC60;
    }
    memmove(v234, v235, v230);
  }
LABEL_499:
  uint64_t v236 = (char *)v234 + v230;
  if (v232)
  {
    if (v231 >= 0) {
      v237 = &xmmword_25AF9D8;
    }
    else {
      v237 = (long long *)xmmword_25AF9D8;
    }
    memmove(v236, v237, v232);
  }
  v236[v232] = 0;
  unint64_t v238 = v230 + 11;
  if (v230 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v238 >= 0x17)
  {
    uint64_t v243 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v238 | 7) != 0x17) {
      uint64_t v243 = v238 | 7;
    }
    uint64_t v244 = v243 + 1;
    unint64_t v239 = (uint64_t *)operator new(v243 + 1);
    qword_25AFD88 = v230 + 11;
    unk_25AFD90 = v244 | 0x8000000000000000;
    qword_25AFD80 = (uint64_t)v239;
  }
  else
  {
    unint64_t v239 = &qword_25AFD80;
    qword_25AFD88 = 0;
    unk_25AFD90 = 0;
    qword_25AFD80 = 0;
    byte_25AFD97 = v230 + 11;
    if (!v230)
    {
      *(_DWORD *)((char *)&qword_25AFD80 + 7) = *(_DWORD *)((char *)&qword_25AFCA8 + 7);
      qword_25AFD80 = qword_25AFCA8;
      BYTE3(qword_25AFD88) = 0;
      LOBYTE(v240) = 8;
      goto LABEL_520;
    }
  }
  if (v229 >= 0) {
    uint64_t v245 = &qword_25AFC60;
  }
  else {
    uint64_t v245 = (uint64_t *)qword_25AFC60;
  }
  memmove(v239, v245, v230);
  long long v246 = (char *)v239 + v230;
  int v247 = *(_DWORD *)((char *)&qword_25AFCA8 + 7);
  *(void *)long long v246 = qword_25AFCA8;
  *(_DWORD *)(v246 + 7) = v247;
  v246[11] = 0;
  unint64_t v240 = v230 + 8;
  if (v230 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v240 <= 0x16)
  {
LABEL_520:
    int v248 = &qword_25AFD98;
    qword_25AFDA0 = 0;
    unk_25AFDA8 = 0;
    qword_25AFD98 = 0;
    byte_25AFDAF = v240;
    if (!v230) {
      goto LABEL_525;
    }
    goto LABEL_521;
  }
  uint64_t v263 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v240 | 7) != 0x17) {
    uint64_t v263 = v240 | 7;
  }
  uint64_t v264 = v263 + 1;
  int v248 = (uint64_t *)operator new(v263 + 1);
  qword_25AFDA0 = v230 + 8;
  unk_25AFDA8 = v264 | 0x8000000000000000;
  qword_25AFD98 = (uint64_t)v248;
  if (v230)
  {
LABEL_521:
    if (v229 >= 0) {
      long long v249 = &qword_25AFC60;
    }
    else {
      long long v249 = (uint64_t *)qword_25AFC60;
    }
    memmove(v248, v249, v230);
  }
LABEL_525:
  uint64_t v250 = (char *)v248 + v230;
  *(void *)uint64_t v250 = qword_25AFCC0;
  v250[8] = 0;
  int v251 = byte_25AFCEF;
  if (byte_25AFCEF >= 0) {
    size_t v252 = byte_25AFCEF;
  }
  else {
    size_t v252 = qword_25AFCE0;
  }
  unint64_t v253 = v252 + v230;
  if (v252 + v230 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v253 <= 0x16)
  {
    unint64_t v254 = &qword_25AFDB0;
    qword_25AFDB8 = 0;
    unk_25AFDC0 = 0;
    qword_25AFDB0 = 0;
    byte_25AFDC7 = v252 + v230;
    if (!v230) {
      goto LABEL_535;
    }
    goto LABEL_531;
  }
  uint64_t v261 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v253 | 7) != 0x17) {
    uint64_t v261 = v253 | 7;
  }
  uint64_t v262 = v261 + 1;
  unint64_t v254 = (uint64_t *)operator new(v261 + 1);
  qword_25AFDB8 = v252 + v230;
  unk_25AFDC0 = v262 | 0x8000000000000000;
  qword_25AFDB0 = (uint64_t)v254;
  if (v230)
  {
LABEL_531:
    if (v229 >= 0) {
      long long v255 = &qword_25AFC60;
    }
    else {
      long long v255 = (uint64_t *)qword_25AFC60;
    }
    memmove(v254, v255, v230);
  }
LABEL_535:
  long long v256 = (char *)v254 + v230;
  if (v252)
  {
    if (v251 >= 0) {
      long long v257 = &qword_25AFCD8;
    }
    else {
      long long v257 = (uint64_t *)qword_25AFCD8;
    }
    memmove(v256, v257, v252);
  }
  v256[v252] = 0;
  strcpy(&byte_25AFDDF, "\n{newroute}");
  strcpy((char *)&qword_25AFDC8, "{roadname}");
  strcpy(&byte_25AFDF7, "\n{count}");
  byte_25AFE0F = 7;
  strcpy(&byte_25AFE27, "\n{dur}");
  strcpy((char *)&qword_25AFE10, "{duration}");
  byte_25AFE3F = 5;
  qword_25AFE40 = (uint64_t)operator new(0x20uLL);
  unk_25AFE48 = v278;
  strcpy((char *)qword_25AFE40, "{PleaseProceedWithCaution}");
  byte_25AFE6F = 15;
  strcpy((char *)&qword_25AFE58, "{UserRouteName}");
  byte_25AFE87 = 20;
  strcpy((char *)&xmmword_25AFE70, "{SuggestedRouteName}");
  byte_25AFE9F = 18;
  strcpy(byte_25AFE88, "Speed_Camera_Ahead");
  qword_25AFEA0 = (uint64_t)operator new(0x20uLL);
  unk_25AFEA8 = v277;
  strcpy((char *)qword_25AFEA0, "Red_Light_Camera_Ahead_Spoken");
  qword_25AFEB8 = (uint64_t)operator new(0x20uLL);
  unk_25AFEC0 = v277;
  strcpy((char *)qword_25AFEB8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25AFED0 = (uint64_t)operator new(0x28uLL);
  unk_25AFED8 = v272;
  strcpy((char *)qword_25AFED0, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25AFEE8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25AFEF0 = v266;
  strcpy((char *)qword_25AFEE8, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25AFF00 = (uint64_t)operator new(0x20uLL);
  unk_25AFF08 = v279;
  strcpy((char *)qword_25AFF00, "Camera_Ahead_Multiple_Spoken");
  qword_25AFF18 = (uint64_t)operator new(0x30uLL);
  unk_25AFF20 = v267;
  strcpy((char *)qword_25AFF18, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25AFF30 = (char *)operator new(0x30uLL);
  strcpy(qword_25AFF30, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25AFF5F = 16;
  xmmword_25AFF38 = v267;
  strcpy(byte_25AFF48, "_Speed_Limit_Mph");
  byte_25AFF77 = 16;
  strcpy(byte_25AFF60, "_Speed_Limit_Kph");
  byte_25AFF8F = 11;
  strcpy((char *)&qword_25AFF78, "Watch_Speed");
  byte_25AFFA7 = 4;
  strcpy((char *)&dword_25AFF90, "_One");
  byte_25AFFBF = 4;
  strcpy((char *)&dword_25AFFA8, "_Two");
  byte_25AFFD7 = 4;
  strcpy((char *)&dword_25AFFC0, "_Few");
  byte_25AFFEF = 5;
  strcpy((char *)&dword_25AFFD8, "_Many");
  byte_25B0007 = 6;
  strcpy((char *)&dword_25AFFF0, "_Other");
  byte_25B001F = 4;
  strcpy((char *)&dword_25B0008, "_ONE");
  byte_25B0037 = 7;
  strcpy((char *)&dword_25B0020, "{Speed}");
  byte_25B004F = 8;
  strcpy((char *)&qword_25B0038, "Dismount");
  byte_25B0067 = 4;
  strcpy((char *)&dword_25B0050, "Walk");
  byte_25B007F = 5;
  strcpy((char *)&dword_25B0068, "Mount");
  byte_25B0097 = 7;
  strcpy((char *)&dword_25B0080, "Remount");
  strcpy(&byte_25B00AF, "\t_Crosswalk");
  strcpy((char *)&qword_25B0098, "Walk_Road");
  strcpy(&byte_25B00C7, "\n_PLURAL");
  byte_25B00DF = 7;
  strcpy(&byte_25B00F7, "\n{description1}");
  strcpy((char *)&qword_25B00E0, "_SECONDARY");
  byte_25B010F = 14;
  byte_25B0127 = 14;
  strcpy((char *)&qword_25B0110, "{description2}");
  byte_25B013F = 21;
  strcpy((char *)&xmmword_25B0128, "TWO_ROAD_DESCRIPTIONS");
  byte_25B0157 = 17;
  strcpy((char *)&xmmword_25B0140, "{SlopePercentage}");
  byte_25B016F = 15;
  strcpy((char *)&qword_25B0158, "_Protected_Lane");
  strcpy(&byte_25B0187, "\n_Paved_Path");
  strcpy((char *)&qword_25B0170, "_Bike_Path");
  byte_25B019F = 11;
  byte_25B01B7 = 15;
  strcpy((char *)&qword_25B01A0, "_Dedicated_Lane");
  byte_25B01CF = 12;
  strcpy((char *)&qword_25B01B8, "_Shared_Path");
  strcpy(&byte_25B01E7, "\n_UnnamedRoad");
  strcpy((char *)&qword_25B01D0, "_Bike_Lane");
  byte_25B01FF = 12;
  byte_25B0217 = 5;
  strcpy((char *)&dword_25B0200, "_Path");
  byte_25B022F = 6;
  strcpy((char *)&dword_25B0218, "_Trail");
  strcpy(&byte_25B0247, "\t_Plaza");
  strcpy((char *)&qword_25B0230, "_Sidewalk");
  byte_25B025F = 6;
  byte_25B0277 = 15;
  strcpy((char *)&qword_25B0260, "_Moving_Walkway");
  byte_25B028F = 14;
  strcpy((char *)&qword_25B0278, "Two_Stage_Turn");
  byte_25B02A7 = 16;
  strcpy((char *)&xmmword_25B0290, "{OptionalPeriod}");
  byte_25B02BF = 18;
  strcpy((char *)&xmmword_25B02A8, "Advisory_Separator");
  byte_25B02D7 = 6;
  strcpy((char *)&dword_25B02C0, "Period");
  byte_25B02EF = 21;
  strcpy((char *)&xmmword_25B02D8, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25B02F0, "Advisory_Title_Notices");
  HIBYTE(word_25B0306) = 22;
  byte_25B031F = 7;
  strcpy((char *)&dword_25B0308, "_DETAIL");
  byte_25B0337 = 17;
  strcpy((char *)&xmmword_25B0320, "_LONG_REGION_LIST");
  byte_25B034F = 16;
  strcpy((char *)&xmmword_25B0338, "Advisory_Grouped");
  byte_25B0367 = 11;
  strcpy((char *)&qword_25B0350, "_Advisories");
  qword_25B0368 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B0370 = v275;
  strcpy((char *)qword_25B0368, "Advisory_WILDFIRE_METADATA_");
  byte_25B0397 = 8;
  strcpy((char *)&qword_25B0380, "Advisory");
  byte_25B03AF = 13;
  strcpy((char *)&qword_25B0398, "MPR_NUM_STOPS");
  byte_25B03C7 = 17;
  strcpy(algn_25B03B0, "EV_CHARGE_STATION");
  byte_25B03DF = 11;
  strcpy((char *)&qword_25B03C8, "_NAMED_CITY");
  byte_25B03F7 = 5;
  strcpy((char *)&dword_25B03E0, "_Stop");
  strcpy(&byte_25B040F, "\n{StopsCount}");
  strcpy((char *)&qword_25B03F8, "{CityName}");
  byte_25B0427 = 12;
  byte_25B043F = 11;
  strcpy((char *)&qword_25B0428, "_With_Other");
  byte_25B0457 = 15;
  strcpy((char *)&qword_25B0440, "{DepartureTime}");
  qword_25B0458 = (uint64_t)operator new(0x28uLL);
  unk_25B0460 = v276;
  strcpy((char *)qword_25B0458, "Ending_Charge_Station_Port_Availability");
  qword_25B0470 = (uint64_t)operator new(0x28uLL);
  unk_25B0478 = v268;
  strcpy((char *)qword_25B0470, "Ending_Charge_Station_No_Availability");
  qword_25B0488 = (uint64_t)operator new(0x28uLL);
  unk_25B0490 = v272;
  strcpy((char *)qword_25B0488, "Ending_Charge_Station_No_Real_Time");
  byte_25B04B7 = 16;
  strcpy(byte_25B04A0, "{AvailablePorts}");
  byte_25B04CF = 12;
  strcpy((char *)&qword_25B04B8, "{TotalPorts}");
  byte_25B04E7 = 14;
  strcpy((char *)&qword_25B04D0, "{ManeuverIcon}");
  qword_25B04E8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25B04F0 = xmmword_20B9A60;
  strcpy((char *)qword_25B04E8, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25B0500 = (uint64_t)operator new(0x20uLL);
  unk_25B0508 = v275;
  strcpy((char *)qword_25B0500, "Walking_Destination_Unnamed");
  qword_25B0518 = (uint64_t)operator new(0x20uLL);
  unk_25B0520 = v277;
  strcpy((char *)qword_25B0518, "TrafficDelay_Label_Title_Sign");
  qword_25B0530 = (uint64_t)operator new(0x20uLL);
  unk_25B0538 = v279;
  strcpy((char *)qword_25B0530, "Special_Guidance_Instruction");
  byte_25B055F = 2;
  strcpy((char *)&word_25B0548, "CZ");
  byte_25B0577 = 3;
  dword_25B0560 = 5919811;
  unk_25B058F = 3;
  dword_25B0578 = 6243649;
  byte_25B05A7 = 0;
  byte_25B05BF = 7;
  strcpy((char *)&dword_25B05A8, "TRANSIT");
  byte_25B05D7 = 7;
  strcpy((char *)&dword_25B05C0, "OFFLINE");
  qword_25B05D8 = (uint64_t)operator new(0x28uLL);
  unk_25B05E0 = v266;
  strcpy((char *)qword_25B05D8, "Advisory_Card_French_Climate_Law_Title");
  qword_25B05F0 = (uint64_t)operator new(0x30uLL);
  unk_25B05F8 = xmmword_20B93C0;
  strcpy((char *)qword_25B05F0, "Advisory_Card_French_Climate_Law_Details");
  qword_25B0608 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25B0610 = v273;
  strcpy((char *)qword_25B0608, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25B0620 = (uint64_t)operator new(0x20uLL);
  unk_25B0628 = v279;
  strcpy((char *)qword_25B0620, "{ClimateLawLearnMoreWeblink}");
  byte_25B064F = 3;
  dword_25B0638 = 4280902;
  qword_25B0650 = (uint64_t)operator new(0x70uLL);
  unk_25B0658 = xmmword_20E81E0;
  strcpy((char *)qword_25B0650, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  qword_25B0668 = 0;
  unk_25B0670 = 0;
  qword_25B0678 = 0;
  long long v258 = (char *)operator new(9uLL);
  *(void *)long long v258 = 0x4020C000103050DLL;
  v258[8] = 6;
  qword_25B0668 = (uint64_t)v258;
  unk_25B0670 = v258 + 9;
  qword_25B0678 = (uint64_t)(v258 + 9);
  qword_25B0680 = 0;
  qword_25B0688 = 0;
  unk_25B0690 = 0;
  long long v259 = (char *)operator new(9uLL);
  qword_25B0688 = (uint64_t)(v259 + 9);
  unk_25B0690 = v259 + 9;
  double result = 1.10224369e-279;
  *(void *)long long v259 = 0x604020C00010305;
  v259[8] = 13;
  qword_25B0680 = (uint64_t)v259;
  return result;
}

void sub_75FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

void sub_760008(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(*(void *)a1 + 1096);
  uint64_t v5 = *(void *)(*(void *)a1 + 1104);
  uint64_t v6 = *(void *)(*(void *)a1 + 1112);
  if (v5 == v6)
  {
    int v8 = 0;
    int v9 = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
  }
  else
  {
    if (a2 == 0xFFFFFFFFLL || a2 >= (unint64_t)((v6 - v5) >> 2)) {
      uint64_t v7 = (_DWORD *)(v6 - 4);
    }
    else {
      uint64_t v7 = (_DWORD *)sub_766878((void *)(*(void *)a1 + 1104), a2);
    }
    int v8 = BYTE1(*v7);
    int v9 = HIBYTE(*v7);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    if (v4 > 7)
    {
LABEL_91:
      if ((SHIBYTE(v46) & 0x80000000) == 0) {
        return;
      }
LABEL_96:
      operator delete(v44);
      return;
    }
  }
  uint64_t v10 = 0;
  switch(v4)
  {
    case 0u:
      int v11 = sub_1D740((char **)a3, (uint64_t)&v44);
      size_t v12 = v11;
      *(void *)(a3 + 8) = v11;
      unint64_t v13 = (char **)(a3 + 8);
      if ((unint64_t)v11 >= *(void *)(a3 + 16)) {
        goto LABEL_14;
      }
      if (byte_25B1E77 < 0)
      {
        sub_4200(v11, (void *)xmmword_25B1E60, *((unint64_t *)&xmmword_25B1E60 + 1));
      }
      else
      {
        long long v14 = xmmword_25B1E60;
        *((void *)v11 + 2) = unk_25B1E70;
        *(_OWORD *)int v11 = v14;
      }
      uint64_t v16 = v12 + 24;
      void *v13 = v16;
      int v17 = (char **)(a3 + 8);
      if ((unint64_t)v16 < *(void *)(a3 + 16)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    case 1u:
      unint64_t v13 = (char **)(a3 + 8);
LABEL_14:
      uint64_t v15 = sub_1D740((char **)a3, (uint64_t)&xmmword_25B1E60);
      uint64_t v16 = v15;
      void *v13 = v15;
      if (v4) {
        goto LABEL_91;
      }
      int v17 = (char **)(a3 + 8);
      if ((unint64_t)v15 >= *(void *)(a3 + 16))
      {
LABEL_18:
        int v18 = sub_1D740((char **)a3, (uint64_t)&xmmword_25B1E48);
        uint64_t v19 = v18;
        void *v17 = v18;
        if (v4) {
          goto LABEL_91;
        }
        int v20 = (char **)(a3 + 8);
        if ((unint64_t)v18 < *(void *)(a3 + 16))
        {
LABEL_30:
          if (byte_25B1EEF < 0)
          {
            sub_4200(v19, (void *)xmmword_25B1ED8, *((unint64_t *)&xmmword_25B1ED8 + 1));
          }
          else
          {
            long long v24 = xmmword_25B1ED8;
            *((void *)v19 + 2) = unk_25B1EE8;
            *(_OWORD *)uint64_t v19 = v24;
          }
          int v26 = v19 + 24;
          *int v20 = v26;
          long long v21 = (char **)(a3 + 8);
          if ((unint64_t)v26 >= *(void *)(a3 + 16)) {
            goto LABEL_40;
          }
LABEL_34:
          if (byte_25B1ED7 < 0)
          {
            sub_4200(v26, (void *)xmmword_25B1EC0, *((unint64_t *)&xmmword_25B1EC0 + 1));
          }
          else
          {
            long long v27 = xmmword_25B1EC0;
            *((void *)v26 + 2) = unk_25B1ED0;
            *(_OWORD *)int v26 = v27;
          }
          uint64_t v28 = v26 + 24;
          *long long v21 = v28;
          goto LABEL_41;
        }
      }
      else
      {
LABEL_26:
        if (byte_25B1E5F < 0)
        {
          sub_4200(v16, (void *)xmmword_25B1E48, *((unint64_t *)&xmmword_25B1E48 + 1));
        }
        else
        {
          long long v23 = xmmword_25B1E48;
          *((void *)v16 + 2) = unk_25B1E58;
          *(_OWORD *)uint64_t v16 = v23;
        }
        uint64_t v19 = v16 + 24;
        void *v17 = v19;
        int v20 = (char **)(a3 + 8);
        if ((unint64_t)v19 < *(void *)(a3 + 16)) {
          goto LABEL_30;
        }
      }
LABEL_32:
      unint64_t v25 = sub_1D740((char **)a3, (uint64_t)&xmmword_25B1ED8);
      int v26 = v25;
      *int v20 = v25;
      if (v4) {
        goto LABEL_91;
      }
      long long v21 = (char **)(a3 + 8);
      if ((unint64_t)v25 < *(void *)(a3 + 16)) {
        goto LABEL_34;
      }
LABEL_40:
      uint64_t v28 = sub_1D740((char **)a3, (uint64_t)&xmmword_25B1EC0);
      *long long v21 = v28;
      if (v4) {
        goto LABEL_91;
      }
LABEL_41:
      int v22 = (char **)(a3 + 8);
      if ((unint64_t)v28 >= *(void *)(a3 + 16))
      {
LABEL_44:
        uint64_t v10 = sub_1D740((char **)a3, (uint64_t)&xmmword_25B1EA8);
        *int v22 = v10;
        if (v4) {
          goto LABEL_91;
        }
      }
      else
      {
        if (byte_25B1EBF < 0)
        {
          sub_4200(v28, (void *)xmmword_25B1EA8, *((unint64_t *)&xmmword_25B1EA8 + 1));
        }
        else
        {
          long long v29 = xmmword_25B1EA8;
          *((void *)v28 + 2) = unk_25B1EB8;
          *(_OWORD *)uint64_t v28 = v29;
        }
        uint64_t v10 = v28 + 24;
        *int v22 = v10;
      }
LABEL_48:
      int v30 = &qword_25B1EF0;
      if (!v9) {
        int v30 = (uint64_t *)&v44;
      }
      size_t v31 = (char *)&v46 + 7;
      if (v9) {
        size_t v31 = &byte_25B1F07;
      }
      if (v8) {
        int v30 = &qword_25B1E78;
      }
      char v32 = *v31;
      char v33 = byte_25B1E8F;
      if (!v8) {
        char v33 = v32;
      }
      if ((v33 & 0x80) == 0)
      {
        *(_OWORD *)long long __p = *(_OWORD *)v30;
        uint64_t v43 = v30[2];
        if ((unint64_t)v10 < *(void *)(a3 + 16)) {
          goto LABEL_58;
        }
LABEL_65:
        *(void *)(a3 + 8) = sub_1D740((char **)a3, (uint64_t)__p);
        if (SHIBYTE(v43) < 0) {
          goto LABEL_70;
        }
LABEL_66:
        if (v4) {
          goto LABEL_91;
        }
        goto LABEL_71;
      }
      __n128 v35 = &v45;
      if (v9) {
        __n128 v35 = &qword_25B1EF8;
      }
      if (v8) {
        __n128 v35 = &qword_25B1E80;
      }
      sub_4200(__p, (void *)*v30, *v35);
      uint64_t v10 = *(char **)(a3 + 8);
      if ((unint64_t)v10 >= *(void *)(a3 + 16)) {
        goto LABEL_65;
      }
LABEL_58:
      if (SHIBYTE(v43) < 0)
      {
        sub_4200(v10, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v34 = *(_OWORD *)__p;
        *((void *)v10 + 2) = v43;
        *(_OWORD *)uint64_t v10 = v34;
      }
      *(void *)(a3 + 8) = v10 + 24;
      *(void *)(a3 + 8) = v10 + 24;
      if ((SHIBYTE(v43) & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_70:
      operator delete(__p[0]);
      if (v4) {
        goto LABEL_91;
      }
LABEL_71:
      if (v8) {
        unint64_t v36 = &qword_25B1E78;
      }
      else {
        unint64_t v36 = (uint64_t *)&v44;
      }
      uint64_t v37 = (char *)&v46 + 7;
      if (v8) {
        uint64_t v37 = &byte_25B1E8F;
      }
      if (v9) {
        unint64_t v36 = &qword_25B1EF0;
      }
      char v38 = byte_25B1F07;
      if (!v9) {
        char v38 = *v37;
      }
      if (v38 < 0)
      {
        long long v39 = &v45;
        if (v8) {
          long long v39 = &qword_25B1E80;
        }
        if (v9) {
          long long v39 = &qword_25B1EF8;
        }
        sub_4200(__p, (void *)*v36, *v39);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)v36;
        uint64_t v43 = v36[2];
      }
      unint64_t v40 = *(void *)(a3 + 8);
      if (v40 >= *(void *)(a3 + 16))
      {
        *(void *)(a3 + 8) = sub_1D740((char **)a3, (uint64_t)__p);
        if ((SHIBYTE(v43) & 0x80000000) == 0) {
          goto LABEL_91;
        }
      }
      else
      {
        if (SHIBYTE(v43) < 0)
        {
          sub_4200(*(unsigned char **)(a3 + 8), __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long v41 = *(_OWORD *)__p;
          *(void *)(v40 + 16) = v43;
          *(_OWORD *)unint64_t v40 = v41;
        }
        *(void *)(a3 + 8) = v40 + 24;
        *(void *)(a3 + 8) = v40 + 24;
        if ((SHIBYTE(v43) & 0x80000000) == 0) {
          goto LABEL_91;
        }
      }
      operator delete(__p[0]);
      if (SHIBYTE(v46) < 0) {
        goto LABEL_96;
      }
      return;
    case 2u:
      int v17 = (char **)(a3 + 8);
      goto LABEL_18;
    case 3u:
      int v20 = (char **)(a3 + 8);
      goto LABEL_32;
    case 4u:
      long long v21 = (char **)(a3 + 8);
      goto LABEL_40;
    case 5u:
      int v22 = (char **)(a3 + 8);
      goto LABEL_44;
    case 6u:
      goto LABEL_48;
    case 7u:
      goto LABEL_71;
    default:
      goto LABEL_91;
  }
}

void sub_7605AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *int v22 = v21;
  if ((a20 & 0x80000000) == 0)
  {
    sub_1A668(v20);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_1A668(v20);
  _Unwind_Resume(a1);
}

void *sub_760668(void *a1, uint64_t a2, unsigned int a3)
{
  *a1 = a2;
  sub_760008((uint64_t)a1, a3, (uint64_t)(a1 + 1));
  return a1;
}

uint64_t sub_7606A0@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&xmmword_25B1E30);
}

void sub_7606B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 56) = 1065353216;
  *(unsigned char *)(a2 + 64) = 1;
  int v3 = *(long long **)(a1 + 8);
  for (i = *(long long **)(a1 + 16); v3 != i; int v3 = (long long *)((char *)v3 + 24))
  {
    if (*((char *)v3 + 23) < 0)
    {
      sub_4200(&__p, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (byte_25B1847 >= 0) {
        uint64_t v7 = (const std::string::value_type *)&qword_25B1830;
      }
      else {
        uint64_t v7 = (const std::string::value_type *)qword_25B1830;
      }
      if (byte_25B1847 >= 0) {
        std::string::size_type v8 = byte_25B1847;
      }
      else {
        std::string::size_type v8 = qword_25B1838;
      }
      std::string::append(&__p, v7, v8);
    }
    sub_635560(a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_7607A8(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_7607BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4880(v14);
  _Unwind_Resume(a1);
}

void sub_7607E4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    int v4 = byte_25B209F;
    if (byte_25B209F >= 0) {
      size_t v5 = byte_25B209F;
    }
    else {
      size_t v5 = qword_25B2090;
    }
    int v6 = byte_25B1847;
    if (byte_25B1847 >= 0) {
      size_t v7 = byte_25B1847;
    }
    else {
      size_t v7 = qword_25B1838;
    }
    unint64_t v8 = v7 + v5;
    if (v7 + v5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v8 > 0x16)
      {
        uint64_t v17 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v17 = v8 | 7;
        }
        uint64_t v18 = v17 + 1;
        p_dst = (void **)operator new(v17 + 1);
        size_t v28 = v7 + v5;
        unint64_t v29 = v18 | 0x8000000000000000;
        std::string __dst = p_dst;
        if (!v5) {
          goto LABEL_31;
        }
      }
      else
      {
        size_t v28 = 0;
        unint64_t v29 = 0;
        std::string __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v29) = v7 + v5;
        if (!v5)
        {
LABEL_31:
          int v20 = (char *)p_dst + v5;
          if (v7)
          {
            if (v6 >= 0) {
              uint64_t v21 = &qword_25B1830;
            }
            else {
              uint64_t v21 = (uint64_t *)qword_25B1830;
            }
            memmove(v20, v21, v7);
          }
          v20[v7] = 0;
          sub_6352AC(a2, (uint64_t)&__dst);
          if (SHIBYTE(v29) < 0) {
            operator delete(__dst);
          }
          sub_6358A0(a2, &xmmword_25B2D00, (const std::string *)a1);
          return;
        }
      }
      if (v4 >= 0) {
        uint64_t v19 = &qword_25B2088;
      }
      else {
        uint64_t v19 = (uint64_t *)qword_25B2088;
      }
      memmove(p_dst, v19, v5);
      goto LABEL_31;
    }
LABEL_54:
    sub_188D690();
  }
  int v11 = byte_25B2087;
  if (byte_25B2087 >= 0) {
    size_t v12 = byte_25B2087;
  }
  else {
    size_t v12 = qword_25B2078;
  }
  int v13 = byte_25B1847;
  if (byte_25B1847 >= 0) {
    size_t v14 = byte_25B1847;
  }
  else {
    size_t v14 = qword_25B1838;
  }
  unint64_t v15 = v14 + v12;
  if (v14 + v12 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_54;
  }
  if (v15 > 0x16)
  {
    uint64_t v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v22 = v15 | 7;
    }
    uint64_t v23 = v22 + 1;
    uint64_t v16 = (void **)operator new(v22 + 1);
    size_t v28 = v14 + v12;
    unint64_t v29 = v23 | 0x8000000000000000;
    std::string __dst = v16;
    if (!v12) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  size_t v28 = 0;
  unint64_t v29 = 0;
  std::string __dst = 0;
  uint64_t v16 = (void **)&__dst;
  HIBYTE(v29) = v14 + v12;
  if (v12)
  {
LABEL_42:
    if (v11 >= 0) {
      long long v24 = &qword_25B2070;
    }
    else {
      long long v24 = (uint64_t *)qword_25B2070;
    }
    memmove(v16, v24, v12);
  }
LABEL_46:
  unint64_t v25 = (char *)v16 + v12;
  if (v14)
  {
    if (v13 >= 0) {
      int v26 = &qword_25B1830;
    }
    else {
      int v26 = (uint64_t *)qword_25B1830;
    }
    memmove(v25, v26, v14);
  }
  v25[v14] = 0;
  sub_6352AC(a2, (uint64_t)&__dst);
  if (SHIBYTE(v29) < 0) {
    operator delete(__dst);
  }
}

void sub_760A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_760A9C@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&qword_25B1DA0);
}

void sub_760AAC(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1)
  {
    int v3 = byte_25B2057;
    if (byte_25B2057 >= 0) {
      size_t v4 = byte_25B2057;
    }
    else {
      size_t v4 = *((void *)&xmmword_25B2040 + 1);
    }
    int v5 = byte_25B1847;
    if (byte_25B1847 >= 0) {
      size_t v6 = byte_25B1847;
    }
    else {
      size_t v6 = qword_25B1838;
    }
    unint64_t v7 = v6 + v4;
    if (v6 + v4 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v7 > 0x16)
    {
      uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v17 = v7 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (void **)operator new(v17 + 1);
      size_t v24 = v6 + v4;
      unint64_t v25 = v18 | 0x8000000000000000;
      std::string __dst = p_dst;
      if (!v4) {
        goto LABEL_38;
      }
    }
    else
    {
      size_t v24 = 0;
      unint64_t v25 = 0;
      std::string __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v25) = v6 + v4;
      if (!v4) {
        goto LABEL_38;
      }
    }
    if (v3 >= 0) {
      uint64_t v19 = &xmmword_25B2040;
    }
    else {
      uint64_t v19 = (long long *)xmmword_25B2040;
    }
    memmove(p_dst, v19, v4);
LABEL_38:
    unint64_t v15 = (char *)p_dst + v4;
    if (v6)
    {
      if (v5 >= 0) {
        int v20 = &qword_25B1830;
      }
      else {
        int v20 = (uint64_t *)qword_25B1830;
      }
      memmove(v15, v20, v6);
    }
    goto LABEL_43;
  }
  int v9 = byte_25B203F;
  if (byte_25B203F >= 0) {
    size_t v10 = byte_25B203F;
  }
  else {
    size_t v10 = *((void *)&xmmword_25B2028 + 1);
  }
  int v11 = byte_25B1847;
  if (byte_25B1847 >= 0) {
    size_t v6 = byte_25B1847;
  }
  else {
    size_t v6 = qword_25B1838;
  }
  unint64_t v12 = v6 + v10;
  if (v6 + v10 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v12 > 0x16)
  {
    uint64_t v21 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v21 = v12 | 7;
    }
    uint64_t v22 = v21 + 1;
    int v13 = (void **)operator new(v21 + 1);
    size_t v24 = v6 + v10;
    unint64_t v25 = v22 | 0x8000000000000000;
    std::string __dst = v13;
    if (!v10) {
      goto LABEL_25;
    }
  }
  else
  {
    size_t v24 = 0;
    unint64_t v25 = 0;
    std::string __dst = 0;
    int v13 = (void **)&__dst;
    HIBYTE(v25) = v6 + v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v9 >= 0) {
    size_t v14 = &xmmword_25B2028;
  }
  else {
    size_t v14 = (long long *)xmmword_25B2028;
  }
  memmove(v13, v14, v10);
LABEL_25:
  unint64_t v15 = (char *)v13 + v10;
  if (v6)
  {
    if (v11 >= 0) {
      uint64_t v16 = &qword_25B1830;
    }
    else {
      uint64_t v16 = (uint64_t *)qword_25B1830;
    }
    memmove(v15, v16, v6);
  }
LABEL_43:
  v15[v6] = 0;
  sub_6352AC(a2, (uint64_t)&__dst);
  if (SHIBYTE(v25) < 0) {
    operator delete(__dst);
  }
}

void sub_760CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_760D14(uint64_t a1@<X8>)
{
  int v2 = byte_25B206F;
  if (byte_25B206F >= 0) {
    size_t v3 = byte_25B206F;
  }
  else {
    size_t v3 = *((void *)&xmmword_25B2058 + 1);
  }
  int v4 = byte_25B1847;
  if (byte_25B1847 >= 0) {
    size_t v5 = byte_25B1847;
  }
  else {
    size_t v5 = qword_25B1838;
  }
  unint64_t v6 = v5 + v3;
  if (v5 + v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 <= 0x16)
  {
    size_t v14 = 0;
    unint64_t v15 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v15) = v5 + v3;
    if (!v3) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  size_t v14 = v5 + v3;
  unint64_t v15 = v9 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v3)
  {
LABEL_14:
    if (v2 >= 0) {
      size_t v10 = &xmmword_25B2058;
    }
    else {
      size_t v10 = (long long *)xmmword_25B2058;
    }
    memmove(p_dst, v10, v3);
  }
LABEL_18:
  int v11 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0) {
      unint64_t v12 = &qword_25B1830;
    }
    else {
      unint64_t v12 = (uint64_t *)qword_25B1830;
    }
    memmove(v11, v12, v5);
  }
  v11[v5] = 0;
  sub_6352AC(a1, (uint64_t)&__dst);
  if (SHIBYTE(v15) < 0) {
    operator delete(__dst);
  }
}

void sub_760E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_760E74(uint64_t a1@<X8>)
{
  int v2 = byte_25B2117;
  if (byte_25B2117 >= 0) {
    size_t v3 = byte_25B2117;
  }
  else {
    size_t v3 = *((void *)&xmmword_25B2100 + 1);
  }
  int v4 = byte_25B1847;
  if (byte_25B1847 >= 0) {
    size_t v5 = byte_25B1847;
  }
  else {
    size_t v5 = qword_25B1838;
  }
  unint64_t v6 = v5 + v3;
  if (v5 + v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 <= 0x16)
  {
    size_t v14 = 0;
    unint64_t v15 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v15) = v5 + v3;
    if (!v3) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v8 = v6 | 7;
  }
  uint64_t v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  size_t v14 = v5 + v3;
  unint64_t v15 = v9 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v3)
  {
LABEL_14:
    if (v2 >= 0) {
      size_t v10 = &xmmword_25B2100;
    }
    else {
      size_t v10 = (long long *)xmmword_25B2100;
    }
    memmove(p_dst, v10, v3);
  }
LABEL_18:
  int v11 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0) {
      unint64_t v12 = &qword_25B1830;
    }
    else {
      unint64_t v12 = (uint64_t *)qword_25B1830;
    }
    memmove(v11, v12, v5);
  }
  v11[v5] = 0;
  sub_6352AC(a1, (uint64_t)&__dst);
  if (SHIBYTE(v15) < 0) {
    operator delete(__dst);
  }
}

void sub_760FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_760FD4(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5 = 636;
  if (a2) {
    uint64_t v5 = 642;
  }
  unint64_t v6 = &qword_25B20B8;
  if (!a2) {
    unint64_t v6 = (uint64_t *)&xmmword_25B20A0;
  }
  unint64_t v7 = (char *)&qword_25B20B0 + 7;
  if (a2) {
    unint64_t v7 = &byte_25B20CF;
  }
  if (*v7 < 0)
  {
    uint64_t v8 = *(void **)&dword_25B16B0[v5];
    uint64_t v9 = 636;
    if (a2) {
      uint64_t v9 = 642;
    }
    sub_4200(__p, v8, *(void *)&dword_25B16B0[v9 + 2]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v6;
    uint64_t v23 = v6[2];
  }
  int v10 = SHIBYTE(v23);
  if (v23 >= 0) {
    size_t v11 = HIBYTE(v23);
  }
  else {
    size_t v11 = (size_t)__p[1];
  }
  int v12 = byte_25B1847;
  if (byte_25B1847 >= 0) {
    size_t v13 = byte_25B1847;
  }
  else {
    size_t v13 = qword_25B1838;
  }
  unint64_t v14 = v13 + v11;
  if (v13 + v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v14 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + v11;
    if (!v11) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  uint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v19 = v14 | 7;
  }
  uint64_t v20 = v19 + 1;
  p_dst = (std::string *)operator new(v19 + 1);
  __dst.__r_.__value_.__l.__size_ = v13 + v11;
  __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v11)
  {
LABEL_21:
    if (v10 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    memmove(p_dst, v16, v11);
  }
LABEL_25:
  uint64_t v17 = (char *)p_dst + v11;
  if (v13)
  {
    if (v12 >= 0) {
      uint64_t v18 = &qword_25B1830;
    }
    else {
      uint64_t v18 = (uint64_t *)qword_25B1830;
    }
    memmove(v17, v18, v13);
  }
  v17[v13] = 0;
  sub_6352AC(a3, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_8A1C0(a1, (char *)&__dst);
  sub_6358A0(a3, (long long *)&qword_25B2CE8, &__dst);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      return;
    }
LABEL_40:
    operator delete(__p[0]);
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23) < 0) {
    goto LABEL_40;
  }
}

void sub_7611E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4880(v21);
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_761260@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&unk_25B2118);
}

uint64_t sub_761270@<X0>(uint64_t a1@<X8>)
{
  return sub_6352AC(a1, (uint64_t)&qword_25B0ED0);
}

void sub_761280(uint64_t a1, int a2, uint64_t a3)
{
  if (byte_25B1F08[23] < 0)
  {
    sub_4200(&__dst, *(void **)byte_25B1F08, *(unint64_t *)&byte_25B1F08[8]);
    if (*(unsigned char *)(*(void *)a1 + 1512))
    {
LABEL_3:
      if (byte_25B1F37 < 0)
      {
        sub_4200(__p, (void *)xmmword_25B1F20, *((unint64_t *)&xmmword_25B1F20 + 1));
      }
      else
      {
        *(_OWORD *)std::string __p = xmmword_25B1F20;
        uint64_t v42 = unk_25B1F30;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::string __dst = *(std::string *)byte_25B1F08;
    if (*(unsigned char *)(*(void *)a1 + 1512)) {
      goto LABEL_3;
    }
  }
  HIBYTE(v42) = 0;
  LOBYTE(__p[0]) = 0;
LABEL_8:
  if (v42 >= 0) {
    unint64_t v6 = __p;
  }
  else {
    unint64_t v6 = (void **)__p[0];
  }
  if (v42 >= 0) {
    std::string::size_type v7 = HIBYTE(v42);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(&__dst, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v42) < 0)
  {
    operator delete(__p[0]);
    if (a2) {
      goto LABEL_16;
    }
  }
  else if (a2)
  {
LABEL_16:
    HIBYTE(v42) = 0;
    LOBYTE(__p[0]) = 0;
    goto LABEL_21;
  }
  if (byte_25B1F4F < 0)
  {
    sub_4200(__p, (void *)xmmword_25B1F38, *((unint64_t *)&xmmword_25B1F38 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_25B1F38;
    uint64_t v42 = unk_25B1F48;
  }
LABEL_21:
  if (v42 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v42 >= 0) {
    std::string::size_type v9 = HIBYTE(v42);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(&__dst, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  sub_6352AC((uint64_t)&v46, (uint64_t)&__dst);
  uint64_t v39 = 0;
  unint64_t v40 = 0;
  sub_6370D4(__p, &v46, 1, &v39);
  int v10 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (!sub_637EBC(a3))
  {
    sub_63733C(a3, 14);
    uint64_t v16 = (std::__shared_weak_count *)operator new(0x80uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
    sub_59540C((uint64_t)&v36, (uint64_t)&v16[1], (uint64_t)__p);
    uint64_t v37 = &v16[1].__vftable;
    char v38 = v16;
    sub_637344(a3, (uint64_t *)&v37);
    uint64_t v17 = v38;
    if (v38) {
      goto LABEL_49;
    }
    goto LABEL_51;
  }
  size_t v11 = operator new(0x80uLL);
  v11[1] = 0;
  v11[2] = 0;
  *size_t v11 = off_243A0E0;
  uint64_t v12 = (uint64_t)(v11 + 3);
  sub_59540C((uint64_t)&v35, (uint64_t)(v11 + 3), a3);
  *(void *)&long long v36 = v11 + 3;
  *((void *)&v36 + 1) = v11;
  while (sub_637EBC(v12))
  {
    sub_637D8C(v12, &v35);
    long long v13 = v35;
    long long v35 = 0uLL;
    unint64_t v14 = (std::__shared_weak_count *)*((void *)&v36 + 1);
    long long v36 = v13;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      unint64_t v15 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (!*((void *)&v35 + 1)) {
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v15 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (!*((void *)&v35 + 1)) {
        goto LABEL_34;
      }
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_34:
    uint64_t v12 = v36;
  }
  uint64_t v18 = (std::__shared_weak_count *)operator new(0x80uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)off_243A0E0;
  sub_59540C((uint64_t)&v35, (uint64_t)&v18[1], (uint64_t)__p);
  char v33 = &v18[1].__vftable;
  long long v34 = v18;
  sub_637344(v12, (uint64_t *)&v33);
  uint64_t v19 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  sub_63733C(v36, 14);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
LABEL_49:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_51:
  uint64_t v20 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = v44;
  if (v44)
  {
    do
    {
      uint64_t v22 = (void *)*v21;
      sub_4F4B48((uint64_t)(v21 + 2));
      operator delete(v21);
      uint64_t v21 = v22;
    }
    while (v22);
  }
  uint64_t v23 = v43;
  uint64_t v43 = 0;
  if (v23) {
    operator delete(v23);
  }
  size_t v24 = (void **)__p[0];
  if (__p[0])
  {
    unint64_t v25 = (void **)__p[1];
    int v26 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      int v26 = __p[0];
    }
    __p[1] = v24;
    operator delete(v26);
  }
  long long v27 = v49;
  if (v49)
  {
    do
    {
      size_t v28 = (void *)*v27;
      sub_4F4B48((uint64_t)(v27 + 2));
      operator delete(v27);
      long long v27 = v28;
    }
    while (v28);
  }
  unint64_t v29 = v48;
  uint64_t v48 = 0;
  if (v29) {
    operator delete(v29);
  }
  int v30 = v46;
  if (v46)
  {
    size_t v31 = v47;
    char v32 = v46;
    if (v47 != v46)
    {
      do
      {
        if (*((char *)v31 - 1) < 0) {
          operator delete(*(v31 - 3));
        }
        v31 -= 3;
      }
      while (v31 != v30);
      char v32 = v46;
    }
    uint64_t v47 = v30;
    operator delete(v32);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_76183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 41) < 0)
  {
    operator delete(*(void **)(v24 - 64));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_761950(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v30 = 0u;
  *(_OWORD *)size_t v28 = 0u;
  int v32 = 1065353216;
  char v33 = 1;
  memset(&v27, 0, sizeof(v27));
  if (*(unsigned char *)(*a1 + 1176) == 2)
  {
    if (byte_25B10C7 >= 0) {
      unint64_t v6 = (const std::string::value_type *)&qword_25B10B0;
    }
    else {
      unint64_t v6 = (const std::string::value_type *)qword_25B10B0;
    }
    if (byte_25B10C7 >= 0) {
      std::string::size_type v7 = byte_25B10C7;
    }
    else {
      std::string::size_type v7 = *(void *)&byte_25B10B8;
    }
    std::string::append(&v27, v6, v7);
  }
  if (byte_25B1D27 >= 0) {
    uint64_t v8 = (const std::string::value_type *)&qword_25B1D10;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)qword_25B1D10;
  }
  if (byte_25B1D27 >= 0) {
    std::string::size_type v9 = byte_25B1D27;
  }
  else {
    std::string::size_type v9 = qword_25B1D18;
  }
  std::string::append(&v27, v8, v9);
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  while (v10 != v11)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      sub_4200(&__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v27;
    }
    if (*(char *)(v10 + 23) < 0)
    {
      if (*(void *)(v10 + 8))
      {
LABEL_25:
        if (byte_25B197F >= 0) {
          uint64_t v12 = (const std::string::value_type *)&qword_25B1968;
        }
        else {
          uint64_t v12 = (const std::string::value_type *)qword_25B1968;
        }
        if (byte_25B197F >= 0) {
          std::string::size_type v13 = byte_25B197F;
        }
        else {
          std::string::size_type v13 = unk_25B1970;
        }
        std::string::append(&__dst, v12, v13);
        int v14 = *(char *)(v10 + 23);
        if (v14 >= 0) {
          unint64_t v15 = (const std::string::value_type *)v10;
        }
        else {
          unint64_t v15 = *(const std::string::value_type **)v10;
        }
        if (v14 >= 0) {
          std::string::size_type v16 = *(unsigned __int8 *)(v10 + 23);
        }
        else {
          std::string::size_type v16 = *(void *)(v10 + 8);
        }
        std::string::append(&__dst, v15, v16);
      }
    }
    else if (*(unsigned char *)(v10 + 23))
    {
      goto LABEL_25;
    }
    sub_635560((uint64_t)v28, (uint64_t)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v10 += 24;
  }
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_6370D4(a3, v28, 1, &v24);
  uint64_t v17 = v25;
  if (!v25 || atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*(unsigned char *)(a2 + 4)) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(unsigned char *)(a2 + 4)) {
LABEL_43:
  }
    sub_761280((uint64_t)a1, *(unsigned __int8 *)(a2 + 5), a3);
LABEL_44:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (void *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    do
    {
      uint64_t v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      uint64_t v18 = v19;
    }
    while (v19);
  }
  uint64_t v20 = __p[1];
  __p[1] = 0;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = (void **)v28[0];
  if (v28[0])
  {
    uint64_t v22 = (void **)v28[1];
    uint64_t v23 = v28[0];
    if (v28[1] != v28[0])
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v28[0];
    }
    v28[1] = v21;
    operator delete(v23);
  }
}

void sub_761BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  sub_4F31D0(v23);
  if ((a22 & 0x80000000) == 0)
  {
    sub_4D4880(&a23);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_4D4880(&a23);
  _Unwind_Resume(a1);
}

std::string *sub_761C80@<X0>(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  int v3 = byte_25B0B87;
  if (byte_25B0B87 >= 0) {
    size_t v4 = byte_25B0B87;
  }
  else {
    size_t v4 = qword_25B0B78;
  }
  int v5 = byte_25B107F;
  if (byte_25B107F >= 0) {
    size_t v6 = byte_25B107F;
  }
  else {
    size_t v6 = qword_25B1070;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6 + v4;
    if (!v4) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v10 = v7 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v6 + v4;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v4)
  {
LABEL_14:
    if (v3 >= 0) {
      uint64_t v12 = &qword_25B0B70;
    }
    else {
      uint64_t v12 = (uint64_t *)qword_25B0B70;
    }
    memmove(p_dst, v12, v4);
  }
LABEL_18:
  std::string::size_type v13 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      int v14 = &qword_25B1068;
    }
    else {
      int v14 = (uint64_t *)qword_25B1068;
    }
    memmove(v13, v14, v6);
  }
  v13[v6] = 0;
  if (byte_25B1877 >= 0) {
    unint64_t v15 = (const std::string::value_type *)&qword_25B1860;
  }
  else {
    unint64_t v15 = (const std::string::value_type *)qword_25B1860;
  }
  if (byte_25B1877 >= 0) {
    std::string::size_type v16 = byte_25B1877;
  }
  else {
    std::string::size_type v16 = unk_25B1868;
  }
  uint64_t v17 = std::string::append(&__dst, v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_6352AC(a2, (uint64_t)__p);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return sub_6358A0(a2, &xmmword_25B2D00, a1);
    }
LABEL_33:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return sub_6358A0(a2, &xmmword_25B2D00, a1);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
  return sub_6358A0(a2, &xmmword_25B2D00, a1);
}

void sub_761E40(_Unwind_Exception *a1)
{
  sub_4D4880(v1);
  _Unwind_Resume(a1);
}

void sub_761E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_761E88(void *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  sub_761950(a1, (uint64_t)a3, (uint64_t)&v42);
  uint64_t v8 = nullsub_1(&v42);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  sub_8A6F8((char *)&v47, *(void *)v8, *(void *)(v8 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3));
  sub_5954B0((uint64_t)&v50, v8 + 24);
  char v52 = *(unsigned char *)(v8 + 64);
  std::string::size_type v9 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v45;
  if (v45)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_4F4B48((uint64_t)(v10 + 2));
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v12 = __p;
  std::string __p = 0;
  if (v12) {
    operator delete(v12);
  }
  std::string::size_type v13 = (void **)v42;
  if (v42)
  {
    int v14 = v43;
    unint64_t v15 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      unint64_t v15 = v42;
    }
    uint64_t v43 = v13;
    operator delete(v15);
  }
  sub_7622FC(a3[2], a2, 1, (uint64_t)&v42);
  uint64_t v16 = nullsub_1(&v42);
  long long v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  sub_8A6F8((char *)&v36, *(void *)v16, *(void *)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3));
  sub_5954B0((uint64_t)&v39, v16 + 24);
  char v41 = *(unsigned char *)(v16 + 64);
  uint64_t v17 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = v45;
  if (v45)
  {
    do
    {
      uint64_t v19 = (void *)*v18;
      sub_4F4B48((uint64_t)(v18 + 2));
      operator delete(v18);
      long long v18 = v19;
    }
    while (v19);
  }
  uint64_t v20 = __p;
  std::string __p = 0;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = (void **)v42;
  if (v42)
  {
    std::string::size_type v22 = v43;
    uint64_t v23 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v22 - 1) < 0) {
          operator delete(*(v22 - 3));
        }
        v22 -= 3;
      }
      while (v22 != v21);
      uint64_t v23 = v42;
    }
    uint64_t v43 = v21;
    operator delete(v23);
  }
  sub_6376A0(a4, &v47, 14, &v36, 1);
  if (a3[4]) {
    sub_761280((uint64_t)a1, a3[5], a4);
  }
  uint64_t v24 = v40;
  if (v40)
  {
    do
    {
      unint64_t v25 = (void *)*v24;
      sub_4F4B48((uint64_t)(v24 + 2));
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  int v26 = v39;
  uint64_t v39 = 0;
  if (v26) {
    operator delete(v26);
  }
  std::string v27 = (void **)v36;
  if (v36)
  {
    size_t v28 = v37;
    unint64_t v29 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      unint64_t v29 = v36;
    }
    uint64_t v37 = v27;
    operator delete(v29);
  }
  long long v30 = v51;
  if (v51)
  {
    do
    {
      uint64_t v31 = (void *)*v30;
      sub_4F4B48((uint64_t)(v30 + 2));
      operator delete(v30);
      long long v30 = v31;
    }
    while (v31);
  }
  int v32 = v50;
  int v50 = 0;
  if (v32) {
    operator delete(v32);
  }
  char v33 = v47;
  if (v47)
  {
    long long v34 = v48;
    long long v35 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v34 - 1) < 0) {
          operator delete(*(v34 - 3));
        }
        v34 -= 3;
      }
      while (v34 != v33);
      long long v35 = v47;
    }
    uint64_t v48 = v33;
    operator delete(v35);
  }
}

void sub_76223C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4F31D0(v2);
  sub_4D4880((void **)va);
  sub_4D4880((void **)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_762268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (v4)
  {
    sub_20AAD1C((uint64_t)va, v4);
    sub_4F31D0((void **)va1);
    sub_4D4880((void **)(v2 - 136));
    _Unwind_Resume(a1);
  }
  sub_4F31D0((void **)va1);
  sub_4D4880((void **)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_7622FC(int a1@<W1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v65 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v64 = 0u;
  *(_OWORD *)long long v62 = 0u;
  int v66 = 1065353216;
  char v67 = 1;
  if (a1)
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    if (v6)
    {
      if (byte_25B1F67 < 0)
      {
        sub_4200(&__dst, (void *)xmmword_25B1F50, *((unint64_t *)&xmmword_25B1F50 + 1));
      }
      else
      {
        long long __dst = xmmword_25B1F50;
        int64_t v61 = unk_25B1F60;
      }
    }
    else
    {
      HIBYTE(v61) = 0;
      LOBYTE(__dst) = 0;
    }
    int v33 = byte_25B1F97;
    if (byte_25B1F97 >= 0) {
      size_t v34 = byte_25B1F97;
    }
    else {
      size_t v34 = qword_25B1F88;
    }
    int v35 = SHIBYTE(v61);
    if (v61 >= 0) {
      size_t v36 = HIBYTE(v61);
    }
    else {
      size_t v36 = *((void *)&__dst + 1);
    }
    unint64_t v37 = v36 + v34;
    if (v36 + v34 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v37 > 0x16)
    {
      uint64_t v47 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17) {
        uint64_t v47 = v37 | 7;
      }
      uint64_t v48 = v47 + 1;
      uint64_t v38 = (char *)operator new(v47 + 1);
      v58.__r_.__value_.__l.__size_ = v36 + v34;
      v58.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      if (!v34)
      {
LABEL_77:
        unint64_t v40 = &v38[v34];
        if (v36)
        {
          if (v35 >= 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (long long *)__dst;
          }
          memmove(v40, p_dst, v36);
        }
        v40[v36] = 0;
        if (byte_25B18A7 >= 0) {
          uint64_t v42 = (const std::string::value_type *)&qword_25B1890;
        }
        else {
          uint64_t v42 = (const std::string::value_type *)qword_25B1890;
        }
        if (byte_25B18A7 >= 0) {
          std::string::size_type v43 = byte_25B18A7;
        }
        else {
          std::string::size_type v43 = qword_25B1898;
        }
        uint64_t v44 = std::string::append(&v58, v42, v43);
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        sub_6351E8((char **)v62, (uint64_t)&v59);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v59.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_90;
          }
        }
        else if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_90:
          sub_635850((uint64_t)v62, &qword_25B1FB0, (const std::string *)a2);
          goto LABEL_91;
        }
        operator delete(v58.__r_.__value_.__l.__data_);
        goto LABEL_90;
      }
    }
    else
    {
      memset(&v58, 0, sizeof(v58));
      uint64_t v38 = (char *)&v58;
      *((unsigned char *)&v58.__r_.__value_.__s + 23) = v36 + v34;
      if (!v34) {
        goto LABEL_77;
      }
    }
    if (v33 >= 0) {
      uint64_t v39 = &qword_25B1F80;
    }
    else {
      uint64_t v39 = (uint64_t *)qword_25B1F80;
    }
    memmove(v38, v39, v34);
    goto LABEL_77;
  }
  if (!a3)
  {
    int v16 = byte_25B1FAF;
    if (byte_25B1FAF >= 0) {
      size_t v17 = byte_25B1FAF;
    }
    else {
      size_t v17 = qword_25B1FA0;
    }
    int v18 = byte_25B1F7F;
    if (byte_25B1F7F >= 0) {
      size_t v19 = byte_25B1F7F;
    }
    else {
      size_t v19 = qword_25B1F70;
    }
    unint64_t v20 = v19 + v17;
    if (v19 + v17 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v20 > 0x16)
    {
      uint64_t v31 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17) {
        uint64_t v31 = v20 | 7;
      }
      uint64_t v32 = v31 + 1;
      uint64_t v21 = (char *)operator new(v31 + 1);
      v59.__r_.__value_.__l.__size_ = v19 + v17;
      v59.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      if (!v17)
      {
LABEL_40:
        uint64_t v23 = &v21[v17];
        if (v19)
        {
          if (v18 >= 0) {
            uint64_t v24 = &qword_25B1F68;
          }
          else {
            uint64_t v24 = (uint64_t *)qword_25B1F68;
          }
          memmove(v23, v24, v19);
        }
        v23[v19] = 0;
        if (byte_25B18A7 >= 0) {
          unint64_t v25 = (const std::string::value_type *)&qword_25B1890;
        }
        else {
          unint64_t v25 = (const std::string::value_type *)qword_25B1890;
        }
        if (byte_25B18A7 >= 0) {
          std::string::size_type v26 = byte_25B18A7;
        }
        else {
          std::string::size_type v26 = qword_25B1898;
        }
        std::string v27 = std::string::append(&v59, v25, v26);
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        int64_t v61 = v27->__r_.__value_.__r.__words[2];
        long long __dst = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        sub_635560((uint64_t)v62, (uint64_t)&__dst);
        if (SHIBYTE(v61) < 0)
        {
          operator delete((void *)__dst);
          if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_102;
          }
        }
        else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_102;
        }
        uint64_t v46 = (void *)v59.__r_.__value_.__r.__words[0];
        goto LABEL_101;
      }
    }
    else
    {
      memset(&v59, 0, sizeof(v59));
      uint64_t v21 = (char *)&v59;
      *((unsigned char *)&v59.__r_.__value_.__s + 23) = v19 + v17;
      if (!v17) {
        goto LABEL_40;
      }
    }
    if (v16 >= 0) {
      std::string::size_type v22 = &qword_25B1F98;
    }
    else {
      std::string::size_type v22 = (uint64_t *)qword_25B1F98;
    }
    memmove(v21, v22, v17);
    goto LABEL_40;
  }
  int v7 = byte_25B1FAF;
  if (byte_25B1FAF >= 0) {
    size_t v8 = byte_25B1FAF;
  }
  else {
    size_t v8 = qword_25B1FA0;
  }
  int v9 = byte_25B18A7;
  if (byte_25B18A7 >= 0) {
    size_t v10 = byte_25B18A7;
  }
  else {
    size_t v10 = qword_25B1898;
  }
  unint64_t v11 = v10 + v8;
  if (v10 + v8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v11 > 0x16)
  {
    uint64_t v29 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v29 = v11 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v12 = (long long *)operator new(v29 + 1);
    *((void *)&__dst + 1) = v10 + v8;
    int64_t v61 = v30 | 0x8000000000000000;
    *(void *)&long long __dst = v12;
    if (!v8) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  int64_t v61 = 0;
  long long __dst = 0uLL;
  uint64_t v12 = &__dst;
  HIBYTE(v61) = v10 + v8;
  if (v8)
  {
LABEL_17:
    if (v7 >= 0) {
      uint64_t v13 = &qword_25B1F98;
    }
    else {
      uint64_t v13 = (uint64_t *)qword_25B1F98;
    }
    memmove(v12, v13, v8);
  }
LABEL_21:
  int v14 = (char *)v12 + v8;
  if (v10)
  {
    if (v9 >= 0) {
      unint64_t v15 = &qword_25B1890;
    }
    else {
      unint64_t v15 = (uint64_t *)qword_25B1890;
    }
    memmove(v14, v15, v10);
  }
  v14[v10] = 0;
  sub_635560((uint64_t)v62, (uint64_t)&__dst);
LABEL_91:
  if (SHIBYTE(v61) < 0)
  {
    uint64_t v46 = (void *)__dst;
LABEL_101:
    operator delete(v46);
  }
LABEL_102:
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  sub_6370D4(a4, v62, 1, &v56);
  uint64_t v49 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  int v50 = (void *)*((void *)&v64 + 1);
  if (*((void *)&v64 + 1))
  {
    do
    {
      size_t v51 = (void *)*v50;
      sub_4F4B48((uint64_t)(v50 + 2));
      operator delete(v50);
      int v50 = v51;
    }
    while (v51);
  }
  char v52 = __p[1];
  __p[1] = 0;
  if (v52) {
    operator delete(v52);
  }
  size_t v53 = (void **)v62[0];
  if (v62[0])
  {
    unint64_t v54 = (void **)v62[1];
    unint64_t v55 = v62[0];
    if (v62[1] != v62[0])
    {
      do
      {
        if (*((char *)v54 - 1) < 0) {
          operator delete(*(v54 - 3));
        }
        v54 -= 3;
      }
      while (v54 != v53);
      unint64_t v55 = v62[0];
    }
    v62[1] = v53;
    operator delete(v55);
  }
}

void sub_76289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7628B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    sub_4D4880(&a32);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a32);
  _Unwind_Resume(a1);
}

void sub_7629B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  *(_OWORD *)unint64_t v20 = 0u;
  int v24 = 1065353216;
  char v25 = 1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  while (v3 != v4)
  {
    if (byte_25B1D40[23] < 0) {
      sub_4200(&__dst, *(void **)byte_25B1D40, *(unint64_t *)&byte_25B1D40[8]);
    }
    else {
      std::string __dst = *(std::string *)byte_25B1D40;
    }
    if (*(char *)(v3 + 23) < 0)
    {
      if (*(void *)(v3 + 8))
      {
LABEL_11:
        if (byte_25B197F >= 0) {
          int v5 = (const std::string::value_type *)&qword_25B1968;
        }
        else {
          int v5 = (const std::string::value_type *)qword_25B1968;
        }
        if (byte_25B197F >= 0) {
          std::string::size_type v6 = byte_25B197F;
        }
        else {
          std::string::size_type v6 = unk_25B1970;
        }
        std::string::append(&__dst, v5, v6);
        int v7 = *(char *)(v3 + 23);
        if (v7 >= 0) {
          size_t v8 = (const std::string::value_type *)v3;
        }
        else {
          size_t v8 = *(const std::string::value_type **)v3;
        }
        if (v7 >= 0) {
          std::string::size_type v9 = *(unsigned __int8 *)(v3 + 23);
        }
        else {
          std::string::size_type v9 = *(void *)(v3 + 8);
        }
        std::string::append(&__dst, v8, v9);
      }
    }
    else if (*(unsigned char *)(v3 + 23))
    {
      goto LABEL_11;
    }
    sub_635560((uint64_t)v20, (uint64_t)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v3 += 24;
  }
  uint64_t v17 = 0;
  int v18 = 0;
  sub_6370D4(a2, v20, 1, &v17);
  size_t v10 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unint64_t v11 = (void *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      sub_4F4B48((uint64_t)(v11 + 2));
      operator delete(v11);
      unint64_t v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = __p[1];
  __p[1] = 0;
  if (v13) {
    operator delete(v13);
  }
  int v14 = (void **)v20[0];
  if (v20[0])
  {
    unint64_t v15 = (void **)v20[1];
    int v16 = v20[0];
    if (v20[1] != v20[0])
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      int v16 = v20[0];
    }
    v20[1] = v14;
    operator delete(v16);
  }
}

void sub_762BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void sub_762BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_762BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_4D4880(&a18);
  _Unwind_Resume(a1);
}

void sub_762C0C(uint64_t a1@<X0>, int a2@<W1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  if (a3[3])
  {
    sub_763274(a4);
    return;
  }
  uint64_t v7 = a1;
  uint64_t v77 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v74 = 0u;
  int v78 = 1065353216;
  char v79 = 1;
  if (a2) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *(unsigned char *)(*(void *)a1 + 1524) == 0;
  }
  int v9 = !v8;
  BOOL v10 = a3[1] == 0;
  uint64_t v11 = 1704;
  if (a2 == 11) {
    uint64_t v11 = 1680;
  }
  uint64_t v12 = &xmmword_25B1D58;
  if (a2 == 11) {
    uint64_t v12 = &xmmword_25B1D40;
  }
  BOOL v13 = (v9 & v10) == 0;
  if ((v9 & v10) != 0) {
    uint64_t v14 = 1656;
  }
  else {
    uint64_t v14 = v11;
  }
  if (v13) {
    unint64_t v15 = (uint64_t *)v12;
  }
  else {
    unint64_t v15 = &qword_25B1D28;
  }
  if (*((char *)v15 + 23) < 0) {
    sub_4200(&v73, *(void **)((char *)dword_25B16B0 + v14), v15[1]);
  }
  else {
    std::string v73 = *(std::string *)v15;
  }
  if (byte_25B1DCF >= 0) {
    int v16 = (const std::string::value_type *)&qword_25B1DB8;
  }
  else {
    int v16 = (const std::string::value_type *)qword_25B1DB8;
  }
  if (byte_25B1DCF >= 0) {
    std::string::size_type v17 = byte_25B1DCF;
  }
  else {
    std::string::size_type v17 = qword_25B1DC0;
  }
  std::string::append(&v73, v16, v17);
  sub_635560((uint64_t)&v74, (uint64_t)&v73);
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  sub_6370D4(a4, &v74, 1, &v71);
  int v18 = v72;
  if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (a3[2])
    {
LABEL_33:
      BOOL v19 = (a2 & 0xFFFFFFFD) != 9 && a3[1] == 0;
      int v20 = !v19;
      uint64_t v21 = 438;
      if (!v19) {
        uint64_t v21 = 432;
      }
      long long v22 = &qword_25B1D88;
      if (!v19) {
        long long v22 = &qword_25B1D70;
      }
      uint64_t v23 = &byte_25B1D9F;
      if (!v19) {
        uint64_t v23 = &byte_25B1D87;
      }
      if (*v23 < 0)
      {
        BOOL v8 = v20 == 0;
        uint64_t v24 = 438;
        if (!v8) {
          uint64_t v24 = 432;
        }
        sub_4200(&v69, *(void **)&dword_25B16B0[v21], *(void *)&dword_25B16B0[v24 + 2]);
      }
      else
      {
        long long v69 = *(_OWORD *)v22;
        uint64_t v70 = v22[2];
      }
      uint64_t v66 = 0;
      long long v65 = 0u;
      *(_OWORD *)long long v63 = 0u;
      *(_OWORD *)long long v64 = 0u;
      int v67 = 1065353216;
      char v68 = 1;
      int v25 = SHIBYTE(v70);
      if (v70 >= 0) {
        size_t v26 = HIBYTE(v70);
      }
      else {
        size_t v26 = *((void *)&v69 + 1);
      }
      int v27 = byte_25B1DCF;
      if (byte_25B1DCF >= 0) {
        size_t v28 = byte_25B1DCF;
      }
      else {
        size_t v28 = qword_25B1DC0;
      }
      unint64_t v29 = v28 + v26;
      if (v28 + v26 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v29 > 0x16)
      {
        uint64_t v42 = v7;
        uint64_t v43 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v43 = v29 | 7;
        }
        uint64_t v44 = v43 + 1;
        p_dst = (void **)operator new(v43 + 1);
        std::string v58 = (void **)(v28 + v26);
        unint64_t v59 = v44 | 0x8000000000000000;
        std::string __dst = p_dst;
        uint64_t v7 = v42;
        if (!v26) {
          goto LABEL_65;
        }
      }
      else
      {
        std::string v58 = 0;
        unint64_t v59 = 0;
        std::string __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v59) = v28 + v26;
        if (!v26)
        {
LABEL_65:
          uint64_t v32 = (char *)p_dst + v26;
          if (v28)
          {
            if (v27 >= 0) {
              int v33 = &qword_25B1DB8;
            }
            else {
              int v33 = (uint64_t *)qword_25B1DB8;
            }
            memmove(v32, v33, v28);
          }
          v32[v28] = 0;
          sub_635560((uint64_t)v63, (uint64_t)&__dst);
          if (SHIBYTE(v59) < 0) {
            operator delete(__dst);
          }
          uint64_t v34 = nullsub_1(a4);
          sub_6376A0(&__dst, v34, 14, v63, 1);
          sub_63DAA4(a4, (uint64_t)&__dst);
          int v35 = v62;
          if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
          size_t v36 = v61;
          if (v61)
          {
            do
            {
              unint64_t v37 = (void *)*v36;
              sub_4F4B48((uint64_t)(v36 + 2));
              operator delete(v36);
              size_t v36 = v37;
            }
            while (v37);
          }
          uint64_t v38 = __p;
          std::string __p = 0;
          if (v38) {
            operator delete(v38);
          }
          uint64_t v39 = __dst;
          if (__dst)
          {
            unint64_t v40 = v58;
            char v41 = __dst;
            if (v58 != __dst)
            {
              do
              {
                if (*((char *)v40 - 1) < 0) {
                  operator delete(*(v40 - 3));
                }
                v40 -= 3;
              }
              while (v40 != v39);
              char v41 = __dst;
            }
            std::string v58 = v39;
            operator delete(v41);
          }
          sub_6379F0(a4, a3[2]);
          long long v45 = (void *)*((void *)&v65 + 1);
          if (*((void *)&v65 + 1))
          {
            do
            {
              uint64_t v46 = (void *)*v45;
              sub_4F4B48((uint64_t)(v45 + 2));
              operator delete(v45);
              long long v45 = v46;
            }
            while (v46);
          }
          uint64_t v47 = v64[1];
          v64[1] = 0;
          if (v47) {
            operator delete(v47);
          }
          uint64_t v48 = (void **)v63[0];
          if (v63[0])
          {
            uint64_t v49 = (void **)v63[1];
            int v50 = v63[0];
            if (v63[1] != v63[0])
            {
              do
              {
                if (*((char *)v49 - 1) < 0) {
                  operator delete(*(v49 - 3));
                }
                v49 -= 3;
              }
              while (v49 != v48);
              int v50 = v63[0];
            }
            v63[1] = v48;
            operator delete(v50);
          }
          if (SHIBYTE(v70) < 0) {
            operator delete((void *)v69);
          }
          goto LABEL_105;
        }
      }
      if (v25 >= 0) {
        uint64_t v31 = &v69;
      }
      else {
        uint64_t v31 = (long long *)v69;
      }
      memmove(p_dst, v31, v26);
      goto LABEL_65;
    }
  }
  else if (a3[2])
  {
    goto LABEL_33;
  }
LABEL_105:
  sub_6379E8(a4, 1);
  if (a3[4]) {
    sub_761280(v7, a3[5], a4);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  size_t v51 = (void *)*((void *)&v76 + 1);
  if (*((void *)&v76 + 1))
  {
    do
    {
      char v52 = (void *)*v51;
      sub_4F4B48((uint64_t)(v51 + 2));
      operator delete(v51);
      size_t v51 = v52;
    }
    while (v52);
  }
  size_t v53 = (void *)*((void *)&v75 + 1);
  *((void *)&v75 + 1) = 0;
  if (v53) {
    operator delete(v53);
  }
  uint64_t v54 = v74;
  if ((void)v74)
  {
    uint64_t v55 = *((void *)&v74 + 1);
    uint64_t v56 = (void *)v74;
    if (*((void *)&v74 + 1) != (void)v74)
    {
      do
      {
        if (*(char *)(v55 - 1) < 0) {
          operator delete(*(void **)(v55 - 24));
        }
        v55 -= 24;
      }
      while (v55 != v54);
      uint64_t v56 = (void *)v74;
    }
    *((void *)&v74 + 1) = v54;
    operator delete(v56);
  }
}

void sub_7631D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43)
{
  sub_4F31D0(v43);
  if (*(char *)(v44 - 185) < 0) {
    operator delete(*(void **)(v44 - 208));
  }
  sub_4D4880((void **)(v44 - 176));
  _Unwind_Resume(a1);
}

void sub_763274(uint64_t a1@<X8>)
{
  uint64_t v28 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v27 = 0u;
  *(_OWORD *)int v25 = 0u;
  int v29 = 1065353216;
  char v30 = 1;
  int v2 = byte_25B1D87;
  if (byte_25B1D87 >= 0) {
    size_t v3 = byte_25B1D87;
  }
  else {
    size_t v3 = qword_25B1D78;
  }
  int v4 = byte_25B1DCF;
  if (byte_25B1DCF >= 0) {
    size_t v5 = byte_25B1DCF;
  }
  else {
    size_t v5 = qword_25B1DC0;
  }
  unint64_t v6 = v5 + v3;
  if (v5 + v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 <= 0x16)
  {
    size_t v23 = 0;
    unint64_t v24 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v24) = v5 + v3;
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v18 = v6 | 7;
  }
  uint64_t v19 = v18 + 1;
  p_dst = (void **)operator new(v18 + 1);
  size_t v23 = v5 + v3;
  unint64_t v24 = v19 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (v3)
  {
LABEL_10:
    if (v2 >= 0) {
      BOOL v8 = &qword_25B1D70;
    }
    else {
      BOOL v8 = (uint64_t *)qword_25B1D70;
    }
    memmove(p_dst, v8, v3);
  }
LABEL_14:
  int v9 = (char *)p_dst + v3;
  if (v5)
  {
    if (v4 >= 0) {
      BOOL v10 = &qword_25B1DB8;
    }
    else {
      BOOL v10 = (uint64_t *)qword_25B1DB8;
    }
    memmove(v9, v10, v5);
  }
  v9[v5] = 0;
  sub_635560((uint64_t)v25, (uint64_t)&__dst);
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst);
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_6370D4(a1, v25, 1, &v20);
  uint64_t v11 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_6379F0(a1, 1);
  uint64_t v12 = (void *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1))
  {
    do
    {
      BOOL v13 = (void *)*v12;
      sub_4F4B48((uint64_t)(v12 + 2));
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  uint64_t v14 = __p[1];
  __p[1] = 0;
  if (v14) {
    operator delete(v14);
  }
  unint64_t v15 = (void **)v25[0];
  if (v25[0])
  {
    int v16 = (void **)v25[1];
    std::string::size_type v17 = v25[0];
    if (v25[1] != v25[0])
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      std::string::size_type v17 = v25[0];
    }
    v25[1] = v15;
    operator delete(v17);
  }
}

void sub_7634C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4F31D0(v7);
  sub_4D4880((void **)va);
  _Unwind_Resume(a1);
}

void sub_7634E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_7634FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_4D4880(&a18);
    _Unwind_Resume(a1);
  }
  sub_4D4880(&a18);
  _Unwind_Resume(a1);
}

void sub_763534(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v112 = 0;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v109 = 0u;
  int v113 = 1065353216;
  char v114 = 1;
  int v3 = byte_25B1D87;
  if (byte_25B1D87 >= 0) {
    size_t v4 = byte_25B1D87;
  }
  else {
    size_t v4 = qword_25B1D78;
  }
  int v5 = byte_25B1DCF;
  if (byte_25B1DCF >= 0) {
    size_t v6 = byte_25B1DCF;
  }
  else {
    size_t v6 = qword_25B1DC0;
  }
  unint64_t v7 = v6 + v4;
  if (v6 + v4 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v7 <= 0x16)
  {
    __p[0] = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(__p[0]) = v6 + v4;
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v34 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17) {
    uint64_t v34 = v7 | 7;
  }
  uint64_t v35 = v34 + 1;
  p_dst = (long long *)operator new(v34 + 1);
  *((void *)&__dst + 1) = v6 + v4;
  __p[0] = (void *)(v35 | 0x8000000000000000);
  *(void *)&long long __dst = p_dst;
  if (v4)
  {
LABEL_10:
    if (v3 >= 0) {
      uint64_t v11 = &qword_25B1D70;
    }
    else {
      uint64_t v11 = (uint64_t *)qword_25B1D70;
    }
    memmove(p_dst, v11, v4);
  }
LABEL_14:
  uint64_t v12 = (char *)p_dst + v4;
  if (v6)
  {
    if (v5 >= 0) {
      BOOL v13 = &qword_25B1DB8;
    }
    else {
      BOOL v13 = (uint64_t *)qword_25B1DB8;
    }
    memmove(v12, v13, v6);
  }
  v12[v6] = 0;
  sub_635560((uint64_t)&v109, (uint64_t)&__dst);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v106 = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v103 = 0u;
  int v107 = 1065353216;
  char v108 = 1;
  int v14 = byte_25B1FAF;
  if (byte_25B1FAF >= 0) {
    size_t v15 = byte_25B1FAF;
  }
  else {
    size_t v15 = qword_25B1FA0;
  }
  int v16 = byte_25B2027;
  if (byte_25B2027 >= 0) {
    size_t v17 = byte_25B2027;
  }
  else {
    size_t v17 = *((void *)&xmmword_25B2010 + 1);
  }
  unint64_t v18 = v17 + v15;
  if (v17 + v15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v18 <= 0x16)
  {
    memset(&v102, 0, sizeof(v102));
    uint64_t v19 = (char *)&v102;
    *((unsigned char *)&v102.__r_.__value_.__s + 23) = v17 + v15;
    if (!v15) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  uint64_t v36 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v18 | 7) != 0x17) {
    uint64_t v36 = v18 | 7;
  }
  uint64_t v37 = v36 + 1;
  uint64_t v19 = (char *)operator new(v36 + 1);
  v102.__r_.__value_.__l.__size_ = v17 + v15;
  v102.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  if (v15)
  {
LABEL_30:
    if (v14 >= 0) {
      uint64_t v20 = &qword_25B1F98;
    }
    else {
      uint64_t v20 = (uint64_t *)qword_25B1F98;
    }
    memmove(v19, v20, v15);
  }
LABEL_34:
  uint64_t v21 = &v19[v15];
  if (v17)
  {
    if (v16 >= 0) {
      long long v22 = &xmmword_25B2010;
    }
    else {
      long long v22 = (long long *)xmmword_25B2010;
    }
    memmove(v21, v22, v17);
  }
  v21[v17] = 0;
  if (byte_25B18A7 >= 0) {
    size_t v23 = (const std::string::value_type *)&qword_25B1890;
  }
  else {
    size_t v23 = (const std::string::value_type *)qword_25B1890;
  }
  if (byte_25B18A7 >= 0) {
    std::string::size_type v24 = byte_25B18A7;
  }
  else {
    std::string::size_type v24 = qword_25B1898;
  }
  int v25 = std::string::append(&v102, v23, v24);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __p[0] = (void *)v25->__r_.__value_.__r.__words[2];
  long long __dst = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  sub_635560((uint64_t)&v103, (uint64_t)&__dst);
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(v102.__r_.__value_.__l.__data_);
LABEL_47:
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  sub_6370D4(&__dst, &v103, 1, &v89);
  long long v27 = (char *)operator new(0x80uLL);
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)long long v27 = off_243A0E0;
  *(_OWORD *)(v27 + 24) = __dst;
  long long __dst = 0uLL;
  int v29 = __p[0];
  uint64_t v28 = __p[1];
  uint64_t v31 = (void *)*((void *)&v93 + 1);
  unint64_t v30 = v93;
  __p[1] = 0;
  *(void *)&long long v93 = 0;
  __p[0] = 0;
  *((void *)v27 + 5) = v29;
  *((void *)v27 + 6) = v28;
  *(_OWORD *)(v27 + 56) = __PAIR128__((unint64_t)v31, v30);
  uint64_t v32 = v94;
  *((void *)v27 + 9) = v94;
  *((_DWORD *)v27 + 20) = v95;
  if (v32)
  {
    unint64_t v33 = v31[1];
    if ((v30 & (v30 - 1)) != 0)
    {
      if (v33 >= v30) {
        v33 %= v30;
      }
    }
    else
    {
      v33 &= v30 - 1;
    }
    uint64_t v31 = 0;
    v28[v33] = v27 + 64;
    *((void *)&v93 + 1) = 0;
    uint64_t v94 = 0;
  }
  v27[88] = v96;
  *((_DWORD *)v27 + 24) = v97;
  *(_OWORD *)(v27 + 104) = v98;
  long long v98 = 0uLL;
  *((_WORD *)v27 + 60) = v99;
  uint64_t v100 = v27 + 24;
  uint64_t v101 = (std::__shared_weak_count *)v27;
  if (v31)
  {
    do
    {
      uint64_t v38 = (void *)*v31;
      sub_4F4B48((uint64_t)(v31 + 2));
      operator delete(v31);
      uint64_t v31 = v38;
    }
    while (v38);
  }
  uint64_t v39 = __p[1];
  __p[1] = 0;
  if (v39) {
    operator delete(v39);
  }
  uint64_t v40 = __dst;
  if ((void)__dst)
  {
    uint64_t v41 = *((void *)&__dst + 1);
    uint64_t v42 = (void *)__dst;
    if (*((void *)&__dst + 1) != (void)__dst)
    {
      do
      {
        if (*(char *)(v41 - 1) < 0) {
          operator delete(*(void **)(v41 - 24));
        }
        v41 -= 24;
      }
      while (v41 != v40);
      uint64_t v42 = (void *)__dst;
    }
    *((void *)&__dst + 1) = v40;
    operator delete(v42);
  }
  uint64_t v43 = v90;
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (a1)
    {
LABEL_78:
      uint64_t v94 = 0;
      long long v93 = 0u;
      long long __dst = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v95 = 1065353216;
      char v96 = 1;
      uint64_t v44 = *(unsigned __int8 *)(a2 + 23);
      if ((v44 & 0x80u) != 0) {
        uint64_t v44 = *(void *)(a2 + 8);
      }
      if (v44)
      {
        if (byte_25B1F50[23] < 0) {
          sub_4200(&v102, *(void **)byte_25B1F50, *(unint64_t *)&byte_25B1F50[8]);
        }
        else {
          std::string v102 = *(std::string *)byte_25B1F50;
        }
      }
      else
      {
        *((unsigned char *)&v102.__r_.__value_.__s + 23) = 0;
        v102.__r_.__value_.__s.__data_[0] = 0;
      }
      int v46 = byte_25B1F97;
      if (byte_25B1F97 >= 0) {
        size_t v47 = byte_25B1F97;
      }
      else {
        size_t v47 = qword_25B1F88;
      }
      int v48 = SHIBYTE(v102.__r_.__value_.__r.__words[2]);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v102.__r_.__value_.__l.__size_;
      }
      unint64_t v50 = size + v47;
      if (size + v47 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v50 > 0x16)
      {
        uint64_t v66 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17) {
          uint64_t v66 = v50 | 7;
        }
        uint64_t v67 = v66 + 1;
        size_t v51 = (char *)operator new(v66 + 1);
        v86.__r_.__value_.__l.__size_ = size + v47;
        v86.__r_.__value_.__r.__words[2] = v67 | 0x8000000000000000;
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        if (!v47)
        {
LABEL_105:
          size_t v53 = &v51[v47];
          if (size)
          {
            if (v48 >= 0) {
              uint64_t v54 = &v102;
            }
            else {
              uint64_t v54 = (std::string *)v102.__r_.__value_.__r.__words[0];
            }
            memmove(v53, v54, size);
          }
          v53[size] = 0;
          if (byte_25B18A7 >= 0) {
            uint64_t v55 = (const std::string::value_type *)&qword_25B1890;
          }
          else {
            uint64_t v55 = (const std::string::value_type *)qword_25B1890;
          }
          if (byte_25B18A7 >= 0) {
            std::string::size_type v56 = byte_25B18A7;
          }
          else {
            std::string::size_type v56 = qword_25B1898;
          }
          uint64_t v57 = std::string::append(&v86, v55, v56);
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          std::string::size_type v88 = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)unint64_t v87 = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          sub_6351E8((char **)&__dst, (uint64_t)v87);
          if (SHIBYTE(v88) < 0)
          {
            operator delete(v87[0]);
            if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_118;
            }
          }
          else if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_118;
          }
          operator delete(v86.__r_.__value_.__l.__data_);
LABEL_118:
          sub_635850((uint64_t)&__dst, &qword_25B1FB0, (const std::string *)a2);
          __darwin_ct_rune_t v84 = v100;
          int v85 = v101;
          if (v101) {
            atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_6370D4(a3, &__dst, 14, &v84);
          unint64_t v59 = v85;
          if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
            if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_124;
            }
          }
          else if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_124:
            std::string::size_type v60 = (void *)*((void *)&v93 + 1);
            if (*((void *)&v93 + 1))
            {
              do
              {
                int64_t v61 = (void *)*v60;
                sub_4F4B48((uint64_t)(v60 + 2));
                operator delete(v60);
                std::string::size_type v60 = v61;
              }
              while (v61);
            }
            long long v62 = __p[1];
            __p[1] = 0;
            if (v62) {
              operator delete(v62);
            }
            uint64_t v63 = __dst;
            if ((void)__dst)
            {
              uint64_t v64 = *((void *)&__dst + 1);
              long long v65 = (void *)__dst;
              if (*((void *)&__dst + 1) != (void)__dst)
              {
                do
                {
                  if (*(char *)(v64 - 1) < 0) {
                    operator delete(*(void **)(v64 - 24));
                  }
                  v64 -= 24;
                }
                while (v64 != v63);
                long long v65 = (void *)__dst;
              }
              *((void *)&__dst + 1) = v63;
              operator delete(v65);
            }
            goto LABEL_140;
          }
          operator delete(v102.__r_.__value_.__l.__data_);
          goto LABEL_124;
        }
      }
      else
      {
        memset(&v86, 0, sizeof(v86));
        size_t v51 = (char *)&v86;
        *((unsigned char *)&v86.__r_.__value_.__s + 23) = size + v47;
        if (!v47) {
          goto LABEL_105;
        }
      }
      if (v46 >= 0) {
        char v52 = &qword_25B1F80;
      }
      else {
        char v52 = (uint64_t *)qword_25B1F80;
      }
      memmove(v51, v52, v47);
      goto LABEL_105;
    }
  }
  else if (a1)
  {
    goto LABEL_78;
  }
  long long v82 = v100;
  uint64_t v83 = v101;
  if (v101) {
    atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(a3, &v109, 14, &v82);
  long long v45 = v83;
  if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  sub_6379F0(a3, 1);
LABEL_140:
  char v68 = v101;
  if (v101 && !atomic_fetch_add(&v101->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  long long v69 = (void *)*((void *)&v105 + 1);
  if (*((void *)&v105 + 1))
  {
    do
    {
      uint64_t v70 = (void *)*v69;
      sub_4F4B48((uint64_t)(v69 + 2));
      operator delete(v69);
      long long v69 = v70;
    }
    while (v70);
  }
  uint64_t v71 = (void *)*((void *)&v104 + 1);
  *((void *)&v104 + 1) = 0;
  if (v71) {
    operator delete(v71);
  }
  uint64_t v72 = v103;
  if ((void)v103)
  {
    uint64_t v73 = *((void *)&v103 + 1);
    long long v74 = (void *)v103;
    if (*((void *)&v103 + 1) != (void)v103)
    {
      do
      {
        if (*(char *)(v73 - 1) < 0) {
          operator delete(*(void **)(v73 - 24));
        }
        v73 -= 24;
      }
      while (v73 != v72);
      long long v74 = (void *)v103;
    }
    *((void *)&v103 + 1) = v72;
    operator delete(v74);
  }
  long long v75 = (void *)*((void *)&v111 + 1);
  if (*((void *)&v111 + 1))
  {
    do
    {
      long long v76 = (void *)*v75;
      sub_4F4B48((uint64_t)(v75 + 2));
      operator delete(v75);
      long long v75 = v76;
    }
    while (v76);
  }
  uint64_t v77 = (void *)*((void *)&v110 + 1);
  *((void *)&v110 + 1) = 0;
  if (v77) {
    operator delete(v77);
  }
  uint64_t v78 = v109;
  if ((void)v109)
  {
    uint64_t v79 = *((void *)&v109 + 1);
    unint64_t v80 = (void *)v109;
    if (*((void *)&v109 + 1) != (void)v109)
    {
      do
      {
        if (*(char *)(v79 - 1) < 0) {
          operator delete(*(void **)(v79 - 24));
        }
        v79 -= 24;
      }
      while (v79 != v78);
      unint64_t v80 = (void *)v109;
    }
    *((void *)&v109 + 1) = v78;
    operator delete(v80);
  }
}

void sub_763EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  sub_4D4880(&a29);
  sub_14A84((uint64_t)&a46);
  sub_4D4880((void **)(v53 - 256));
  sub_4D4880((void **)(v53 - 176));
  _Unwind_Resume(a1);
}

void sub_76400C(_Unwind_Exception *a1)
{
  sub_4D4880((void **)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_764020(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  if (a4[3])
  {
    int v8 = *a4;
    sub_763534(v8, a2, a5);
    return;
  }
  uint64_t v204 = 0;
  long long v202 = 0u;
  long long v203 = 0u;
  long long v201 = 0u;
  int v205 = 1065353216;
  char v206 = 1;
  if (a3) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = *(unsigned char *)(*(void *)a1 + 1524) == 0;
  }
  int v12 = !v11;
  BOOL v13 = a4[1] == 0;
  uint64_t v14 = 1704;
  if (a3 == 11) {
    uint64_t v14 = 1680;
  }
  size_t v15 = &xmmword_25B1D58;
  if (a3 == 11) {
    size_t v15 = &xmmword_25B1D40;
  }
  BOOL v16 = (v12 & v13) == 0;
  if ((v12 & v13) != 0) {
    uint64_t v17 = 1656;
  }
  else {
    uint64_t v17 = v14;
  }
  if (v16) {
    unint64_t v18 = (uint64_t *)v15;
  }
  else {
    unint64_t v18 = &qword_25B1D28;
  }
  if (*((char *)v18 + 23) < 0) {
    sub_4200(&v200, *(void **)((char *)dword_25B16B0 + v17), v18[1]);
  }
  else {
    std::string v200 = *(std::string *)v18;
  }
  uint64_t v159 = a1;
  uint64_t v161 = a4;
  if (byte_25B1DCF >= 0) {
    uint64_t v19 = (const std::string::value_type *)&qword_25B1DB8;
  }
  else {
    uint64_t v19 = (const std::string::value_type *)qword_25B1DB8;
  }
  if (byte_25B1DCF >= 0) {
    std::string::size_type v20 = byte_25B1DCF;
  }
  else {
    std::string::size_type v20 = qword_25B1DC0;
  }
  std::string::append(&v200, v19, v20);
  sub_635560((uint64_t)&v201, (uint64_t)&v200);
  *(void *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_DWORD *)(a5 + 56) = 1065353216;
  *(unsigned char *)(a5 + 64) = 1;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = 0;
  *(_WORD *)(a5 + 96) = 0;
  uint64_t v197 = 0;
  long long v195 = 0u;
  long long v196 = 0u;
  long long v194 = 0u;
  int v198 = 1065353216;
  char v199 = 1;
  int v21 = byte_25B1FAF;
  if (byte_25B1FAF >= 0) {
    size_t v22 = byte_25B1FAF;
  }
  else {
    size_t v22 = qword_25B1FA0;
  }
  int v23 = byte_25B2027;
  if (byte_25B2027 >= 0) {
    size_t v24 = byte_25B2027;
  }
  else {
    size_t v24 = *((void *)&xmmword_25B2010 + 1);
  }
  unint64_t v25 = v24 + v22;
  uint64_t v160 = a5;
  if (v24 + v22 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v25 <= 0x16)
  {
    *(void *)&long long v174 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    BYTE7(v174) = v24 + v22;
    if (!v22) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  uint64_t v43 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v43 = v25 | 7;
  }
  uint64_t v44 = v43 + 1;
  p_dst = (long long *)operator new(v43 + 1);
  *((void *)&__dst + 1) = v24 + v22;
  *(void *)&long long v174 = v44 | 0x8000000000000000;
  *(void *)&long long __dst = p_dst;
  if (v22)
  {
LABEL_39:
    if (v21 >= 0) {
      long long v27 = &qword_25B1F98;
    }
    else {
      long long v27 = (uint64_t *)qword_25B1F98;
    }
    memmove(p_dst, v27, v22);
  }
LABEL_43:
  uint64_t v28 = (char *)p_dst + v22;
  if (v24)
  {
    if (v23 >= 0) {
      int v29 = &xmmword_25B2010;
    }
    else {
      int v29 = (long long *)xmmword_25B2010;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  if (byte_25B18A7 >= 0) {
    unint64_t v30 = (const std::string::value_type *)&qword_25B1890;
  }
  else {
    unint64_t v30 = (const std::string::value_type *)qword_25B1890;
  }
  if (byte_25B18A7 >= 0) {
    std::string::size_type v31 = byte_25B18A7;
  }
  else {
    std::string::size_type v31 = qword_25B1898;
  }
  uint64_t v32 = v160;
  unint64_t v33 = std::string::append((std::string *)&__dst, v30, v31);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  unint64_t v182 = v33->__r_.__value_.__r.__words[2];
  long long __p = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  sub_635560((uint64_t)&v194, (uint64_t)&__p);
  uint64_t v35 = v161;
  if (SHIBYTE(v182) < 0)
  {
    operator delete((void *)__p);
    if ((SBYTE7(v174) & 0x80000000) == 0) {
      goto LABEL_56;
    }
  }
  else if ((SBYTE7(v174) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete((void *)__dst);
LABEL_56:
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  sub_6370D4(&__p, &v194, 1, &v179);
  uint64_t v36 = (char *)operator new(0x80uLL);
  *((void *)v36 + 1) = 0;
  *((void *)v36 + 2) = 0;
  *(void *)uint64_t v36 = off_243A0E0;
  *(_OWORD *)(v36 + 24) = __p;
  long long __p = 0uLL;
  unint64_t v38 = v182;
  uint64_t v37 = v183;
  unint64_t v39 = v184;
  uint64_t v40 = v185;
  uint64_t v183 = 0;
  unint64_t v184 = 0;
  unint64_t v182 = 0;
  *((void *)v36 + 5) = v38;
  *((void *)v36 + 6) = v37;
  *((void *)v36 + 7) = v39;
  *((void *)v36 + 8) = v40;
  uint64_t v41 = v186;
  *((void *)v36 + 9) = v186;
  *((_DWORD *)v36 + 20) = v187;
  if (v41)
  {
    unint64_t v42 = v40[1];
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v42 >= v39) {
        v42 %= v39;
      }
    }
    else
    {
      v42 &= v39 - 1;
    }
    uint64_t v40 = 0;
    v37[v42] = v36 + 64;
    long long v185 = 0;
    uint64_t v186 = 0;
  }
  v36[88] = v188;
  *((_DWORD *)v36 + 24) = v189;
  *(_OWORD *)(v36 + 104) = v190;
  long long v190 = 0uLL;
  *((_WORD *)v36 + 60) = v191;
  char v192 = v36 + 24;
  uint64_t v193 = (std::__shared_weak_count *)v36;
  if (v40)
  {
    do
    {
      long long v45 = (void *)*v40;
      sub_4F4B48((uint64_t)(v40 + 2));
      operator delete(v40);
      uint64_t v40 = v45;
    }
    while (v45);
  }
  int v46 = v183;
  uint64_t v183 = 0;
  if (v46) {
    operator delete(v46);
  }
  uint64_t v47 = __p;
  if ((void)__p)
  {
    uint64_t v48 = *((void *)&__p + 1);
    uint64_t v49 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
      {
        if (*(char *)(v48 - 1) < 0) {
          operator delete(*(void **)(v48 - 24));
        }
        v48 -= 24;
      }
      while (v48 != v47);
      uint64_t v49 = (void *)__p;
    }
    *((void *)&__p + 1) = v47;
    operator delete(v49);
  }
  unint64_t v50 = v180;
  if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    if (*v161)
    {
LABEL_83:
      uint64_t v176 = 0;
      long long v174 = 0u;
      long long v175 = 0u;
      long long __dst = 0u;
      int v177 = 1065353216;
      char v178 = 1;
      uint64_t v51 = *(unsigned __int8 *)(a2 + 23);
      if ((v51 & 0x80u) != 0) {
        uint64_t v51 = *(void *)(a2 + 8);
      }
      if (v51)
      {
        if (byte_25B1F50[23] < 0)
        {
          sub_4200(v171, *(void **)byte_25B1F50, *(unint64_t *)&byte_25B1F50[8]);
        }
        else
        {
          *(_OWORD *)unint64_t v171 = *(_OWORD *)byte_25B1F50;
          uint64_t v172 = *(void *)&byte_25B1F50[16];
        }
      }
      else
      {
        HIBYTE(v172) = 0;
        LOBYTE(v171[0]) = 0;
      }
      int v57 = byte_25B1F97;
      if (byte_25B1F97 >= 0) {
        size_t v58 = byte_25B1F97;
      }
      else {
        size_t v58 = qword_25B1F88;
      }
      int v59 = SHIBYTE(v172);
      if (v172 >= 0) {
        size_t v60 = HIBYTE(v172);
      }
      else {
        size_t v60 = (size_t)v171[1];
      }
      unint64_t v61 = v60 + v58;
      if (v60 + v58 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      if (v61 > 0x16)
      {
        uint64_t v77 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17) {
          uint64_t v77 = v61 | 7;
        }
        uint64_t v78 = v77 + 1;
        long long v62 = (char *)operator new(v77 + 1);
        v170.__r_.__value_.__l.__size_ = v60 + v58;
        v170.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
        v170.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
        uint64_t v32 = v160;
        if (!v58)
        {
LABEL_119:
          uint64_t v64 = &v62[v58];
          if (v60)
          {
            if (v59 >= 0) {
              long long v65 = v171;
            }
            else {
              long long v65 = (void **)v171[0];
            }
            memmove(v64, v65, v60);
          }
          v64[v60] = 0;
          if (byte_25B18A7 >= 0) {
            uint64_t v66 = (const std::string::value_type *)&qword_25B1890;
          }
          else {
            uint64_t v66 = (const std::string::value_type *)qword_25B1890;
          }
          if (byte_25B18A7 >= 0) {
            std::string::size_type v67 = byte_25B18A7;
          }
          else {
            std::string::size_type v67 = qword_25B1898;
          }
          char v68 = std::string::append(&v170, v66, v67);
          uint64_t v35 = v161;
          long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
          unint64_t v182 = v68->__r_.__value_.__r.__words[2];
          long long __p = v69;
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          sub_6351E8((char **)&__dst, (uint64_t)&__p);
          if (SHIBYTE(v182) < 0)
          {
            operator delete((void *)__p);
            if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_132;
            }
          }
          else if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_132:
            sub_635850((uint64_t)&__dst, &qword_25B1FB0, (const std::string *)a2);
            long long v168 = v192;
            int v169 = v193;
            if (v193) {
              atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_6370D4(&__p, &__dst, 14, &v168);
            uint64_t v70 = (char *)operator new(0x80uLL);
            *((void *)v70 + 1) = 0;
            *((void *)v70 + 2) = 0;
            *(void *)uint64_t v70 = off_243A0E0;
            *(_OWORD *)(v70 + 24) = __p;
            long long __p = 0uLL;
            unint64_t v72 = v182;
            uint64_t v71 = v183;
            unint64_t v73 = v184;
            long long v74 = v185;
            uint64_t v183 = 0;
            unint64_t v184 = 0;
            unint64_t v182 = 0;
            *((void *)v70 + 5) = v72;
            *((void *)v70 + 6) = v71;
            *((void *)v70 + 7) = v73;
            *((void *)v70 + 8) = v74;
            uint64_t v75 = v186;
            *((void *)v70 + 9) = v186;
            *((_DWORD *)v70 + 20) = v187;
            if (v75)
            {
              unint64_t v76 = v74[1];
              if ((v73 & (v73 - 1)) != 0)
              {
                if (v76 >= v73) {
                  v76 %= v73;
                }
              }
              else
              {
                v76 &= v73 - 1;
              }
              long long v74 = 0;
              v71[v76] = v70 + 64;
              long long v185 = 0;
              uint64_t v186 = 0;
            }
            v70[88] = v188;
            *((_DWORD *)v70 + 24) = v189;
            *(_OWORD *)(v70 + 104) = v190;
            long long v190 = 0uLL;
            *((_WORD *)v70 + 60) = v191;
            v170.__r_.__value_.__r.__words[0] = (std::string::size_type)(v70 + 24);
            v170.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
            if (v74)
            {
              do
              {
                uint64_t v79 = (void *)*v74;
                sub_4F4B48((uint64_t)(v74 + 2));
                operator delete(v74);
                long long v74 = v79;
              }
              while (v79);
            }
            unint64_t v80 = v183;
            uint64_t v183 = 0;
            if (v80) {
              operator delete(v80);
            }
            uint64_t v81 = __p;
            if ((void)__p)
            {
              uint64_t v82 = *((void *)&__p + 1);
              uint64_t v83 = (void *)__p;
              if (*((void *)&__p + 1) != (void)__p)
              {
                do
                {
                  if (*(char *)(v82 - 1) < 0) {
                    operator delete(*(void **)(v82 - 24));
                  }
                  v82 -= 24;
                }
                while (v82 != v81);
                uint64_t v83 = (void *)__p;
              }
              *((void *)&__p + 1) = v81;
              operator delete(v83);
            }
            __darwin_ct_rune_t v84 = v169;
            if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
            long long v167 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
            if (v170.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v170.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            sub_6370D4(&__p, &v201, 14, &v167);
            sub_63DAA4(v32, (uint64_t)&__p);
            int v85 = (std::__shared_weak_count *)*((void *)&v190 + 1);
            if (*((void *)&v190 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
            std::string v86 = v185;
            if (v185)
            {
              do
              {
                unint64_t v87 = (void *)*v86;
                sub_4F4B48((uint64_t)(v86 + 2));
                operator delete(v86);
                std::string v86 = v87;
              }
              while (v87);
            }
            std::string::size_type v88 = v183;
            uint64_t v183 = 0;
            if (v88) {
              operator delete(v88);
            }
            uint64_t v89 = __p;
            if ((void)__p)
            {
              uint64_t v90 = *((void *)&__p + 1);
              uint64_t v91 = (void *)__p;
              if (*((void *)&__p + 1) != (void)__p)
              {
                do
                {
                  if (*(char *)(v90 - 1) < 0) {
                    operator delete(*(void **)(v90 - 24));
                  }
                  v90 -= 24;
                }
                while (v90 != v89);
                uint64_t v91 = (void *)__p;
              }
              *((void *)&__p + 1) = v89;
              operator delete(v91);
            }
            uint64_t v92 = (std::__shared_weak_count *)*((void *)&v167 + 1);
            if (*((void *)&v167 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v167 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
            size_t size = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
            if (v170.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(v170.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
            if (SHIBYTE(v172) < 0) {
              operator delete(v171[0]);
            }
            uint64_t v94 = (void *)*((void *)&v175 + 1);
            if (*((void *)&v175 + 1))
            {
              do
              {
                int v95 = (void *)*v94;
                sub_4F4B48((uint64_t)(v94 + 2));
                operator delete(v94);
                uint64_t v94 = v95;
              }
              while (v95);
            }
            char v96 = (void *)*((void *)&v174 + 1);
            *((void *)&v174 + 1) = 0;
            if (v96) {
              operator delete(v96);
            }
            uint64_t v97 = __dst;
            if (!(void)__dst) {
              goto LABEL_298;
            }
            uint64_t v98 = *((void *)&__dst + 1);
            __int16 v99 = (void *)__dst;
            if (*((void *)&__dst + 1) == (void)__dst) {
              goto LABEL_297;
            }
            do
            {
              if (*(char *)(v98 - 1) < 0) {
                operator delete(*(void **)(v98 - 24));
              }
              v98 -= 24;
            }
            while (v98 != v97);
            goto LABEL_296;
          }
          operator delete(v170.__r_.__value_.__l.__data_);
          goto LABEL_132;
        }
      }
      else
      {
        memset(&v170, 0, sizeof(v170));
        long long v62 = (char *)&v170;
        *((unsigned char *)&v170.__r_.__value_.__s + 23) = v60 + v58;
        if (!v58) {
          goto LABEL_119;
        }
      }
      if (v57 >= 0) {
        uint64_t v63 = &qword_25B1F80;
      }
      else {
        uint64_t v63 = (uint64_t *)qword_25B1F80;
      }
      memmove(v62, v63, v58);
      goto LABEL_119;
    }
  }
  else if (*v161)
  {
    goto LABEL_83;
  }
  if (!v161[2])
  {
    uint64_t v162 = v192;
    uint64_t v163 = v193;
    if (v193) {
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_6370D4(&__p, &v201, 14, &v162);
    sub_63DAA4(v160, (uint64_t)&__p);
    uint64_t v100 = (std::__shared_weak_count *)*((void *)&v190 + 1);
    if (*((void *)&v190 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
    uint64_t v101 = v185;
    if (v185)
    {
      do
      {
        std::string v102 = (void *)*v101;
        sub_4F4B48((uint64_t)(v101 + 2));
        operator delete(v101);
        uint64_t v101 = v102;
      }
      while (v102);
    }
    long long v103 = v183;
    uint64_t v183 = 0;
    if (v103) {
      operator delete(v103);
    }
    uint64_t v104 = __p;
    if ((void)__p)
    {
      uint64_t v105 = *((void *)&__p + 1);
      uint64_t v106 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v105 - 1) < 0) {
            operator delete(*(void **)(v105 - 24));
          }
          v105 -= 24;
        }
        while (v105 != v104);
        uint64_t v106 = (void *)__p;
      }
      *((void *)&__p + 1) = v104;
      operator delete(v106);
    }
    unint64_t v158 = v163;
    if (v163 && !atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
    goto LABEL_298;
  }
  uint64_t v176 = 0;
  long long v174 = 0u;
  long long v175 = 0u;
  long long __dst = 0u;
  int v177 = 1065353216;
  char v178 = 1;
  BOOL v52 = (a3 & 0xFFFFFFFD) != 9 && v161[1] == 0;
  int v53 = !v52;
  uint64_t v54 = 438;
  if (!v52) {
    uint64_t v54 = 432;
  }
  uint64_t v55 = &qword_25B1D88;
  if (!v52) {
    uint64_t v55 = &qword_25B1D70;
  }
  std::string::size_type v56 = &byte_25B1D9F;
  if (!v52) {
    std::string::size_type v56 = &byte_25B1D87;
  }
  if (*v56 < 0)
  {
    BOOL v11 = v53 == 0;
    uint64_t v107 = 438;
    if (!v11) {
      uint64_t v107 = 432;
    }
    sub_4200(v171, *(void **)&dword_25B16B0[v54], *(void *)&dword_25B16B0[v107 + 2]);
  }
  else
  {
    *(_OWORD *)unint64_t v171 = *(_OWORD *)v55;
    uint64_t v172 = v55[2];
  }
  int v108 = SHIBYTE(v172);
  if (v172 >= 0) {
    size_t v109 = HIBYTE(v172);
  }
  else {
    size_t v109 = (size_t)v171[1];
  }
  int v110 = byte_25B1DCF;
  if (byte_25B1DCF >= 0) {
    size_t v111 = byte_25B1DCF;
  }
  else {
    size_t v111 = qword_25B1DC0;
  }
  unint64_t v112 = v111 + v109;
  if (v111 + v109 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v112 > 0x16)
  {
    uint64_t v114 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v112 | 7) != 0x17) {
      uint64_t v114 = v112 | 7;
    }
    uint64_t v115 = v114 + 1;
    p_p = (char *)operator new(v114 + 1);
    *((void *)&__p + 1) = v111 + v109;
    unint64_t v182 = v115 | 0x8000000000000000;
    *(void *)&long long __p = p_p;
    uint64_t v35 = v161;
  }
  else
  {
    unint64_t v182 = 0;
    long long __p = 0uLL;
    p_p = (char *)&__p;
    HIBYTE(v182) = v111 + v109;
  }
  if (v109)
  {
    if (v108 >= 0) {
      long long v116 = v171;
    }
    else {
      long long v116 = (void **)v171[0];
    }
    memmove(p_p, v116, v109);
  }
  int v117 = &p_p[v109];
  if (v111)
  {
    if (v110 >= 0) {
      size_t v118 = &qword_25B1DB8;
    }
    else {
      size_t v118 = (uint64_t *)qword_25B1DB8;
    }
    memmove(v117, v118, v111);
  }
  v117[v111] = 0;
  sub_635560((uint64_t)&__dst, (uint64_t)&__p);
  if (SHIBYTE(v182) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v165 = v192;
  uint64_t v166 = v193;
  if (v193) {
    atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_6370D4(&__p, &__dst, 14, &v165);
  unint64_t v119 = (char *)operator new(0x80uLL);
  *((void *)v119 + 1) = 0;
  *((void *)v119 + 2) = 0;
  *(void *)unint64_t v119 = off_243A0E0;
  *(_OWORD *)(v119 + 24) = __p;
  long long __p = 0uLL;
  unint64_t v121 = v182;
  unint64_t v120 = v183;
  unint64_t v122 = v184;
  uint64_t v123 = v185;
  uint64_t v183 = 0;
  unint64_t v184 = 0;
  unint64_t v182 = 0;
  *((void *)v119 + 5) = v121;
  *((void *)v119 + 6) = v120;
  *((void *)v119 + 7) = v122;
  *((void *)v119 + 8) = v123;
  uint64_t v124 = v186;
  *((void *)v119 + 9) = v186;
  *((_DWORD *)v119 + 20) = v187;
  if (v124)
  {
    unint64_t v125 = v123[1];
    if ((v122 & (v122 - 1)) != 0)
    {
      if (v125 >= v122) {
        v125 %= v122;
      }
    }
    else
    {
      v125 &= v122 - 1;
    }
    uint64_t v123 = 0;
    v120[v125] = v119 + 64;
    long long v185 = 0;
    uint64_t v186 = 0;
  }
  v119[88] = v188;
  *((_DWORD *)v119 + 24) = v189;
  *(_OWORD *)(v119 + 104) = v190;
  long long v190 = 0uLL;
  *((_WORD *)v119 + 60) = v191;
  v170.__r_.__value_.__r.__words[0] = (std::string::size_type)(v119 + 24);
  v170.__r_.__value_.__l.__size_ = (std::string::size_type)v119;
  if (v123)
  {
    do
    {
      int v126 = (void *)*v123;
      sub_4F4B48((uint64_t)(v123 + 2));
      operator delete(v123);
      uint64_t v123 = v126;
    }
    while (v126);
  }
  size_t v127 = v183;
  uint64_t v183 = 0;
  if (v127) {
    operator delete(v127);
  }
  uint64_t v128 = __p;
  if ((void)__p)
  {
    uint64_t v129 = *((void *)&__p + 1);
    unint64_t v130 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
      {
        if (*(char *)(v129 - 1) < 0) {
          operator delete(*(void **)(v129 - 24));
        }
        v129 -= 24;
      }
      while (v129 != v128);
      unint64_t v130 = (void *)__p;
    }
    *((void *)&__p + 1) = v128;
    operator delete(v130);
  }
  unint64_t v131 = v166;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v131);
  }
  long long v164 = *(_OWORD *)&v170.__r_.__value_.__l.__data_;
  if (v170.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v170.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  sub_6370D4(&__p, &v201, 14, &v164);
  sub_63DAA4(v160, (uint64_t)&__p);
  v132 = (std::__shared_weak_count *)*((void *)&v190 + 1);
  if (*((void *)&v190 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
    std::__shared_weak_count::__release_weak(v132);
  }
  uint64_t v133 = v185;
  if (v185)
  {
    do
    {
      long long v134 = (void *)*v133;
      sub_4F4B48((uint64_t)(v133 + 2));
      operator delete(v133);
      uint64_t v133 = v134;
    }
    while (v134);
  }
  uint64_t v135 = v183;
  uint64_t v183 = 0;
  if (v135) {
    operator delete(v135);
  }
  uint64_t v136 = __p;
  if ((void)__p)
  {
    uint64_t v137 = *((void *)&__p + 1);
    long long v138 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
      {
        if (*(char *)(v137 - 1) < 0) {
          operator delete(*(void **)(v137 - 24));
        }
        v137 -= 24;
      }
      while (v137 != v136);
      long long v138 = (void *)__p;
    }
    *((void *)&__p + 1) = v136;
    operator delete(v138);
  }
  int v139 = (std::__shared_weak_count *)*((void *)&v164 + 1);
  if (*((void *)&v164 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
  }
  sub_6379F0(v160, 1);
  size_t v140 = (std::__shared_weak_count *)v170.__r_.__value_.__l.__size_;
  if (v170.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v170.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
    std::__shared_weak_count::__release_weak(v140);
  }
  if (SHIBYTE(v172) < 0) {
    operator delete(v171[0]);
  }
  int v141 = (void *)*((void *)&v175 + 1);
  if (*((void *)&v175 + 1))
  {
    do
    {
      size_t v142 = (void *)*v141;
      sub_4F4B48((uint64_t)(v141 + 2));
      operator delete(v141);
      int v141 = v142;
    }
    while (v142);
  }
  unint64_t v143 = (void *)*((void *)&v174 + 1);
  *((void *)&v174 + 1) = 0;
  if (v143) {
    operator delete(v143);
  }
  uint64_t v97 = __dst;
  if ((void)__dst)
  {
    uint64_t v144 = *((void *)&__dst + 1);
    __int16 v99 = (void *)__dst;
    if (*((void *)&__dst + 1) == (void)__dst) {
      goto LABEL_297;
    }
    do
    {
      if (*(char *)(v144 - 1) < 0) {
        operator delete(*(void **)(v144 - 24));
      }
      v144 -= 24;
    }
    while (v144 != v97);
LABEL_296:
    __int16 v99 = (void *)__dst;
LABEL_297:
    *((void *)&__dst + 1) = v97;
    operator delete(v99);
  }
LABEL_298:
  sub_6379E8(v32, 1);
  if (v35[4]) {
    sub_761280(v159, v35[5], v32);
  }
  v145 = v193;
  if (v193 && !atomic_fetch_add(&v193->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
  }
  uint64_t v146 = (void *)*((void *)&v196 + 1);
  if (*((void *)&v196 + 1))
  {
    do
    {
      uint64_t v147 = (void *)*v146;
      sub_4F4B48((uint64_t)(v146 + 2));
      operator delete(v146);
      uint64_t v146 = v147;
    }
    while (v147);
  }
  char v148 = (void *)*((void *)&v195 + 1);
  *((void *)&v195 + 1) = 0;
  if (v148) {
    operator delete(v148);
  }
  uint64_t v149 = v194;
  if ((void)v194)
  {
    uint64_t v150 = *((void *)&v194 + 1);
    long long v151 = (void *)v194;
    if (*((void *)&v194 + 1) != (void)v194)
    {
      do
      {
        if (*(char *)(v150 - 1) < 0) {
          operator delete(*(void **)(v150 - 24));
        }
        v150 -= 24;
      }
      while (v150 != v149);
      long long v151 = (void *)v194;
    }
    *((void *)&v194 + 1) = v149;
    operator delete(v151);
  }
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
  long long v152 = (void *)*((void *)&v203 + 1);
  if (*((void *)&v203 + 1))
  {
    do
    {
      std::string::size_type v153 = (void *)*v152;
      sub_4F4B48((uint64_t)(v152 + 2));
      operator delete(v152);
      long long v152 = v153;
    }
    while (v153);
  }
  std::string::size_type v154 = (void *)*((void *)&v202 + 1);
  *((void *)&v202 + 1) = 0;
  if (v154) {
    operator delete(v154);
  }
  uint64_t v155 = v201;
  if ((void)v201)
  {
    uint64_t v156 = *((void *)&v201 + 1);
    size_t v157 = (void *)v201;
    if (*((void *)&v201 + 1) != (void)v201)
    {
      do
      {
        if (*(char *)(v156 - 1) < 0) {
          operator delete(*(void **)(v156 - 24));
        }
        v156 -= 24;
      }
      while (v156 != v155);
      size_t v157 = (void *)v201;
    }
    *((void *)&v201 + 1) = v155;
    operator delete(v157);
  }
}

void sub_76531C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,void *a57)
{
  sub_4D4880(&a29);
  sub_14A84((uint64_t)&a55);
  sub_4D4880(&a57);
  sub_4F31D0(a10);
  if (*(char *)(v57 - 185) < 0) {
    operator delete(*(void **)(v57 - 208));
  }
  sub_4D4880((void **)(v57 - 176));
  _Unwind_Resume(a1);
}

void sub_7654BC()
{
  if ((*(char *)(v0 - 185) & 0x80000000) == 0) {
    JUMPOUT(0x7654ACLL);
  }
  JUMPOUT(0x7654A4);
}

void sub_7654CC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_7629B0(a1, (uint64_t)&v41);
  uint64_t v7 = nullsub_1(&v41);
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  sub_8A6F8((char *)&v46, *(void *)v7, *(void *)(v7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3));
  sub_5954B0((uint64_t)&v49, v7 + 24);
  char v51 = *(unsigned char *)(v7 + 64);
  int v8 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = v44;
  if (v44)
  {
    do
    {
      BOOL v10 = (void *)*v9;
      sub_4F4B48((uint64_t)(v9 + 2));
      operator delete(v9);
      int v9 = v10;
    }
    while (v10);
  }
  BOOL v11 = __p;
  long long __p = 0;
  if (v11) {
    operator delete(v11);
  }
  int v12 = (void **)v41;
  if (v41)
  {
    BOOL v13 = v42;
    uint64_t v14 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = v41;
    }
    unint64_t v42 = v12;
    operator delete(v14);
  }
  sub_7622FC(a2, a3, 0, (uint64_t)&v41);
  uint64_t v15 = nullsub_1(&v41);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  sub_8A6F8((char *)&v35, *(void *)v15, *(void *)(v15 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3));
  sub_5954B0((uint64_t)&v38, v15 + 24);
  char v40 = *(unsigned char *)(v15 + 64);
  BOOL v16 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = v44;
  if (v44)
  {
    do
    {
      unint64_t v18 = (void *)*v17;
      sub_4F4B48((uint64_t)(v17 + 2));
      operator delete(v17);
      uint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = __p;
  long long __p = 0;
  if (v19) {
    operator delete(v19);
  }
  std::string::size_type v20 = (void **)v41;
  if (v41)
  {
    int v21 = v42;
    size_t v22 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      size_t v22 = v41;
    }
    unint64_t v42 = v20;
    operator delete(v22);
  }
  sub_6376A0(a4, &v46, 14, &v35, 1);
  int v23 = v39;
  if (v39)
  {
    do
    {
      size_t v24 = (void *)*v23;
      sub_4F4B48((uint64_t)(v23 + 2));
      operator delete(v23);
      int v23 = v24;
    }
    while (v24);
  }
  unint64_t v25 = v38;
  unint64_t v38 = 0;
  if (v25) {
    operator delete(v25);
  }
  long long v26 = (void **)v35;
  if (v35)
  {
    long long v27 = v36;
    uint64_t v28 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v26);
      uint64_t v28 = v35;
    }
    uint64_t v36 = v26;
    operator delete(v28);
  }
  int v29 = v50;
  if (v50)
  {
    do
    {
      unint64_t v30 = (void *)*v29;
      sub_4F4B48((uint64_t)(v29 + 2));
      operator delete(v29);
      int v29 = v30;
    }
    while (v30);
  }
  std::string::size_type v31 = v49;
  uint64_t v49 = 0;
  if (v31) {
    operator delete(v31);
  }
  uint64_t v32 = v46;
  if (v46)
  {
    unint64_t v33 = v47;
    long long v34 = v46;
    if (v47 != v46)
    {
      do
      {
        if (*((char *)v33 - 1) < 0) {
          operator delete(*(v33 - 3));
        }
        v33 -= 3;
      }
      while (v33 != v32);
      long long v34 = v46;
    }
    uint64_t v47 = v32;
    operator delete(v34);
  }
}

void sub_765858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4880((void **)va);
  sub_4D4880((void **)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_765874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (v4)
  {
    sub_20AAD1C((uint64_t)va, v4);
    sub_4F31D0((void **)va1);
    sub_4D4880((void **)(v2 - 120));
    _Unwind_Resume(a1);
  }
  sub_4F31D0((void **)va1);
  sub_4D4880((void **)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_765908(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765AA8(a1, (uint64_t)&qword_25B1E00, (uint64_t)&__p);
  sub_6353E0((uint64_t)&v17, (std::string **)&__p);
  int v3 = (void **)__p;
  if (__p)
  {
    uint64_t v4 = v16;
    int v5 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      int v5 = __p;
    }
    BOOL v16 = v3;
    operator delete(v5);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_6370D4(a2, &v17, 1, &v13);
  uint64_t v6 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = v20;
  if (v20)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void **)v17;
  if (v17)
  {
    uint64_t v11 = v18;
    uint64_t v12 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = v17;
    }
    unint64_t v18 = v10;
    operator delete(v12);
  }
}

void sub_765A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_765A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_765AA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); v3 != i; v3 += 24)
  {
    if (*(char *)(a2 + 23) < 0) {
      sub_4200(&__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    int v7 = *(char *)(v3 + 23);
    uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
    if (v7 < 0)
    {
      if (!*(void *)(v3 + 8)) {
        goto LABEL_66;
      }
    }
    else if (!*(unsigned char *)(v3 + 23))
    {
      goto LABEL_66;
    }
    int v9 = *(unsigned __int8 *)(v3 + 23);
    size_t v10 = *(void *)(v3 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v3 + 8);
    }
    uint64_t v12 = byte_25B1F07;
    if (byte_25B1F07 < 0) {
      uint64_t v12 = qword_25B1EF8;
    }
    if (v11 == v12)
    {
      if (byte_25B1F07 >= 0) {
        uint64_t v13 = &qword_25B1EF0;
      }
      else {
        uint64_t v13 = (uint64_t *)qword_25B1EF0;
      }
      if ((v7 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v3, v13, *(void *)(v3 + 8))) {
          goto LABEL_66;
        }
      }
      else
      {
        if (!*(unsigned char *)(v3 + 23)) {
          goto LABEL_66;
        }
        uint64_t v14 = 0;
        while (*(unsigned __int8 *)(v3 + v14) == *((unsigned __int8 *)v13 + v14))
        {
          if (v8 == ++v14) {
            goto LABEL_66;
          }
        }
      }
    }
    uint64_t v15 = byte_25B1EA7;
    if (byte_25B1EA7 < 0) {
      uint64_t v15 = qword_25B1E98;
    }
    if (v11 == v15)
    {
      if (byte_25B1EA7 >= 0) {
        BOOL v16 = &qword_25B1E90;
      }
      else {
        BOOL v16 = (uint64_t *)qword_25B1E90;
      }
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v3, v16, v10)) {
          goto LABEL_66;
        }
      }
      else
      {
        if (!v9) {
          goto LABEL_66;
        }
        uint64_t v17 = 0;
        while (*(unsigned __int8 *)(v3 + v17) == *((unsigned __int8 *)v16 + v17))
        {
          if (v8 == ++v17) {
            goto LABEL_66;
          }
        }
      }
    }
    uint64_t v18 = byte_25B1E8F;
    if (byte_25B1E8F < 0) {
      uint64_t v18 = qword_25B1E80;
    }
    if (v11 == v18)
    {
      if (byte_25B1E8F >= 0) {
        uint64_t v19 = &qword_25B1E78;
      }
      else {
        uint64_t v19 = (uint64_t *)qword_25B1E78;
      }
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v3, v19, v10)) {
          goto LABEL_66;
        }
      }
      else
      {
        if (!v9) {
          goto LABEL_66;
        }
        uint64_t v20 = 0;
        while (*(unsigned __int8 *)(v3 + v20) == *((unsigned __int8 *)v19 + v20))
        {
          if (v8 == ++v20) {
            goto LABEL_66;
          }
        }
      }
    }
    if (byte_25B197F >= 0) {
      int v21 = (const std::string::value_type *)&qword_25B1968;
    }
    else {
      int v21 = (const std::string::value_type *)qword_25B1968;
    }
    if (byte_25B197F >= 0) {
      std::string::size_type v22 = byte_25B197F;
    }
    else {
      std::string::size_type v22 = unk_25B1970;
    }
    std::string::append(&__p, v21, v22);
    int v23 = *(char *)(v3 + 23);
    if (v23 >= 0) {
      size_t v24 = (const std::string::value_type *)v3;
    }
    else {
      size_t v24 = *(const std::string::value_type **)v3;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(v3 + 23);
    }
    else {
      std::string::size_type v25 = *(void *)(v3 + 8);
    }
    std::string::append(&__p, v24, v25);
LABEL_66:
    unint64_t v26 = *(void *)(a3 + 8);
    if (v26 < *(void *)(a3 + 16))
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_4200(*(unsigned char **)(a3 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v26 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v26 = v27;
      }
      *(void *)(a3 + 8) = v26 + 24;
      *(void *)(a3 + 8) = v26 + 24;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        continue;
      }
LABEL_73:
      operator delete(__p.__r_.__value_.__l.__data_);
      continue;
    }
    *(void *)(a3 + 8) = sub_1D740((char **)a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_73;
    }
  }
}

void sub_765D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 8) = v15;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1A668((void **)v14);
  _Unwind_Resume(a1);
}

void sub_765DCC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  uint64_t v5 = 1236;
  if (!v4) {
    uint64_t v5 = 1224;
  }
  uint64_t v6 = &qword_25B1068;
  if (!v4) {
    uint64_t v6 = &qword_25B1050;
  }
  int v7 = &byte_25B107F;
  if (!v4) {
    int v7 = &byte_25B1067;
  }
  if (*v7 < 0)
  {
    if (v4) {
      uint64_t v8 = (unint64_t *)&qword_25B1070;
    }
    else {
      uint64_t v8 = (unint64_t *)&unk_25B1058;
    }
    sub_4200(v36, *(void **)&word_25B06C0[v5], *v8);
  }
  else
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v6;
    uint64_t v37 = v6[2];
  }
  int v9 = byte_25B1E17;
  if (byte_25B1E17 >= 0) {
    size_t v10 = byte_25B1E17;
  }
  else {
    size_t v10 = qword_25B1E08;
  }
  int v11 = SHIBYTE(v37);
  if (v37 >= 0) {
    size_t v12 = HIBYTE(v37);
  }
  else {
    size_t v12 = (size_t)v36[1];
  }
  unint64_t v13 = v12 + v10;
  if (v12 + v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v13 <= 0x16)
  {
    size_t v30 = 0;
    unint64_t v31 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v31) = v12 + v10;
    if (!v10) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  uint64_t v25 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v25 = v13 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_dst = (void **)operator new(v25 + 1);
  size_t v30 = v12 + v10;
  unint64_t v31 = v26 | 0x8000000000000000;
  long long __dst = p_dst;
  if (v10)
  {
LABEL_24:
    if (v9 >= 0) {
      uint64_t v15 = &qword_25B1E00;
    }
    else {
      uint64_t v15 = (uint64_t *)qword_25B1E00;
    }
    memmove(p_dst, v15, v10);
  }
LABEL_28:
  BOOL v16 = (char *)p_dst + v10;
  if (v12)
  {
    if (v11 >= 0) {
      uint64_t v17 = v36;
    }
    else {
      uint64_t v17 = (void **)v36[0];
    }
    memmove(v16, v17, v12);
  }
  v16[v12] = 0;
  sub_6352AC((uint64_t)&v32, (uint64_t)&__dst);
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst);
  }
  sub_635850((uint64_t)&v32, &xmmword_25B2D00, (const std::string *)a1);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  sub_6370D4(a2, &v32, 1, &v27);
  uint64_t v18 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v35;
  if (v35)
  {
    do
    {
      uint64_t v20 = (void *)*v19;
      sub_4F4B48((uint64_t)(v19 + 2));
      operator delete(v19);
      uint64_t v19 = v20;
    }
    while (v20);
  }
  int v21 = __p;
  std::string __p = 0;
  if (v21) {
    operator delete(v21);
  }
  std::string::size_type v22 = (void **)v32;
  if (v32)
  {
    int v23 = v33;
    size_t v24 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      size_t v24 = v32;
    }
    unint64_t v33 = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
}

void sub_7660A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if ((a31 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_766114(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_765AA8(a1, (uint64_t)&qword_25B1DA0, (uint64_t)&__p);
  sub_6353E0((uint64_t)&v17, (std::string **)&__p);
  uint64_t v3 = (void **)__p;
  if (__p)
  {
    uint64_t v4 = v16;
    uint64_t v5 = __p;
    if (v16 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = __p;
    }
    BOOL v16 = v3;
    operator delete(v5);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_6370D4(a2, &v17, 1, &v13);
  uint64_t v6 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = v20;
  if (v20)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      sub_4F4B48((uint64_t)(v7 + 2));
      operator delete(v7);
      int v7 = v8;
    }
    while (v8);
  }
  int v9 = v19;
  uint64_t v19 = 0;
  if (v9) {
    operator delete(v9);
  }
  size_t v10 = (void **)v17;
  if (v17)
  {
    int v11 = v18;
    size_t v12 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      size_t v12 = v17;
    }
    uint64_t v18 = v10;
    operator delete(v12);
  }
}

void sub_766284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_7662A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_7662B4(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25B1DA0);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    int v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_7663C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_7663E4(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1)
  {
    sub_6352AC((uint64_t)&v19, (uint64_t)&xmmword_25B20E8);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_6370D4(a2, &v19, 1, &v17);
    uint64_t v3 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = v22;
    if (v22)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        sub_4F4B48((uint64_t)(v4 + 2));
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    uint64_t v6 = __p;
    std::string __p = 0;
    if (v6) {
      operator delete(v6);
    }
    int v7 = (void **)v19;
    if (v19)
    {
      uint64_t v8 = v20;
      uint64_t v9 = v19;
      if (v20 == v19) {
        goto LABEL_29;
      }
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
LABEL_28:
      uint64_t v9 = v19;
LABEL_29:
      uint64_t v20 = v7;
      operator delete(v9);
    }
  }
  else
  {
    sub_6352AC((uint64_t)&v19, (uint64_t)&xmmword_25B20D0);
    uint64_t v15 = 0;
    BOOL v16 = 0;
    sub_6370D4(a2, &v19, 1, &v15);
    size_t v10 = v16;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    int v11 = v22;
    if (v22)
    {
      do
      {
        size_t v12 = (void *)*v11;
        sub_4F4B48((uint64_t)(v11 + 2));
        operator delete(v11);
        int v11 = v12;
      }
      while (v12);
    }
    uint64_t v13 = __p;
    std::string __p = 0;
    if (v13) {
      operator delete(v13);
    }
    int v7 = (void **)v19;
    if (v19)
    {
      uint64_t v14 = v20;
      uint64_t v9 = v19;
      if (v20 == v19) {
        goto LABEL_29;
      }
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v7);
      goto LABEL_28;
    }
  }
}

void sub_7665DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_7665FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_766618(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25B2130);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_76672C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

void sub_766748(uint64_t a1@<X8>)
{
  sub_6352AC((uint64_t)&v11, (uint64_t)&qword_25B2148);
  uint64_t v9 = 0;
  size_t v10 = 0;
  sub_6370D4(a1, &v11, 1, &v9);
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = v14;
  if (v14)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      sub_4F4B48((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = __p;
  std::string __p = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)v11;
  if (v11)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v11;
    }
    size_t v12 = v6;
    operator delete(v8);
  }
}

void sub_76685C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_4D4880((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_766878(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v10 = &v15;
    }
    else {
      size_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_7669A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

double sub_766A88()
{
  byte_25B06D7 = 1;
  word_25B06C0[0] = 65;
  byte_25B06EF = 1;
  word_25B06D8 = 65;
  strcpy(&byte_25B0707, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25B06F0, "\x1B\\toi=lhp\\"");
  byte_25B071F = 11;
  qword_25B0720 = (uint64_t)operator new(0x19uLL);
  long long v280 = xmmword_20B9250;
  unk_25B0728 = xmmword_20B9250;
  strcpy((char *)qword_25B0720, "\x1B\\toi=x-sampa-internal\\"");
  byte_25B074F = 13;
  strcpy((char *)&qword_25B0738, "\x1B\\tn=address\\"");
  strcpy(&byte_25B0767, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25B0750, "\x1B\\tn=nav\\"");
  byte_25B077F = 12;
  byte_25B0797 = 7;
  strcpy((char *)&dword_25B0780, "\x1B\\lang=");
  byte_25B07AF = 1;
  word_25B0798 = 92;
  byte_25B07C7 = 4;
  strcpy((char *)&qword_25B07B0, "DEV:");
  byte_25B07DF = 8;
  strcpy((char *)&qword_25B07C8, "Continue");
  byte_25B07F7 = 11;
  strcpy((char *)&qword_25B07E0, "Start_Route");
  byte_25B080F = 14;
  strcpy((char *)&qword_25B07F8, "Continue_Route");
  byte_25B0827 = 12;
  strcpy((char *)&qword_25B0810, "Resume_Route");
  byte_25B083F = 18;
  strcpy((char *)&xmmword_25B0828, "Start_Route_U_Turn");
  byte_25B0857 = 7;
  strcpy((char *)&dword_25B0840, "_U_Turn");
  qword_25B0868 = 0x1300000000000000;
  qmemcpy(&unk_25B0870, "Continue_Route", 14);
  dword_25B0860 = 1702131055;
  qword_25B0858 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25B0864 + 3) = 1852994900;
  dword_25B0864 = 1415533919;
  qword_25B0880 = 0x1500000000000000;
  strcpy(byte_25B0888, "Left_Turn");
  unk_25B087E = 1415533919;
  *(_DWORD *)((char *)&qword_25B0880 + 1) = 1852994900;
  strcpy(&byte_25B089F, "\tRight_Turn");
  strcpy(&byte_25B08B7, "\nLeft_Turn_At_End");
  byte_25B08CF = 16;
  byte_25B08E7 = 17;
  strcpy((char *)&xmmword_25B08D0, "Right_Turn_At_End");
  byte_25B08FF = 15;
  strcpy((char *)&qword_25B08E8, "Sharp_Left_Turn");
  byte_25B0917 = 16;
  strcpy((char *)&xmmword_25B0900, "Sharp_Right_Turn");
  byte_25B092F = 16;
  strcpy((char *)&xmmword_25B0918, "Slight_Left_Turn");
  byte_25B0947 = 17;
  strcpy((char *)&xmmword_25B0930, "Slight_Right_Turn");
  strcpy(&byte_25B095F, "\tKeep_Right");
  strcpy((char *)&qword_25B0948, "Keep_Left");
  strcpy(&byte_25B0977, "\nU_Turn");
  byte_25B098F = 6;
  byte_25B09A7 = 14;
  strcpy((char *)&qword_25B0990, "Walking_U_Turn");
  byte_25B09BF = 20;
  strcpy((char *)&xmmword_25B09A8, "U_Turn_When_Possible");
  byte_25B09D7 = 20;
  strcpy((char *)&xmmword_25B09C0, "U_Turn_At_Roundabout");
  byte_25B09EF = 11;
  strcpy((char *)&qword_25B09D8, "Enter_Ferry");
  strcpy(&byte_25B0A07, "\nChange_Ferry");
  strcpy((char *)&qword_25B09F0, "Exit_Ferry");
  strcpy((char *)&xmmword_25B0A20, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25B0A38, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25B0A50, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25B0A68, "End_Of_Navigation");
  strcpy((char *)&xmmword_25B0A80, "End_Of_Navigation");
  strcpy((char *)&qword_25B0A98, "Destination");
  strcpy((char *)&xmmword_25B0AB0, "Destination_On_left");
  strcpy((char *)&xmmword_25B0AC8, "Destination_On_Right");
  strcpy((char *)&xmmword_25B0B10, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25B0B58, "Next_Stop_On_Right");
  byte_25B0A1F = 12;
  byte_25B0A37 = 21;
  byte_25B0A4F = 20;
  strcpy((char *)&xmmword_25B0B88, "Waypoint_Stop_On_Left");
  byte_25B0A67 = 22;
  byte_25B0A7F = 17;
  byte_25B0A97 = 17;
  byte_25B0AAF = 11;
  byte_25B0AC7 = 19;
  byte_25B0ADF = 20;
  strcpy(&byte_25B0AF7, "\nFirst_Stop_On_left");
  *(void *)&v268[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25B0AE0, "First_Stop");
  byte_25B0B0F = 18;
  byte_25B0B27 = 19;
  strcpy(&byte_25B0B3F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25B0B70, "Waypoint_Stop");
  strcpy((char *)&xmmword_25B0BA0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25B0BB8, "Roundabout_");
  *(void *)&v264[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25B0B28, "Next_Stop");
  byte_25B0B57 = 17;
  byte_25B0B6F = 18;
  byte_25B0B87 = 13;
  byte_25B0B9F = 21;
  byte_25B0BB7 = 22;
  byte_25B0BCF = 11;
  byte_25B0BE7 = 16;
  strcpy((char *)&xmmword_25B0BD0, "Enter_Roundabout");
  qword_25B0BE8 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91C0;
  xmmword_25B0BF0 = xmmword_20B91C0;
  strcpy((char *)qword_25B0BE8, "Walking_Enter_Roundabout");
  byte_25B0C17 = 16;
  strcpy((char *)&xmmword_25B0C00, "Leave_Roundabout");
  byte_25B0C2F = 21;
  strcpy((char *)&xmmword_25B0C18, "Roundabout_First_Exit");
  byte_25B0C47 = 22;
  strcpy((char *)&xmmword_25B0C30, "Roundabout_Second_Exit");
  byte_25B0C5F = 21;
  strcpy((char *)&xmmword_25B0C48, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25B0C60, "Roundabout_Fourth_Exit");
  HIBYTE(word_25B0C76) = 22;
  byte_25B0C8F = 21;
  strcpy((char *)&xmmword_25B0C78, "Roundabout_Fifth_Exit");
  byte_25B0CA7 = 21;
  strcpy((char *)&xmmword_25B0C90, "Roundabout_Sixth_Exit");
  qword_25B0CA8 = (uint64_t)operator new(0x19uLL);
  xmmword_25B0CB0 = xmmword_20B9250;
  strcpy((char *)qword_25B0CA8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25B0CC0, "Roundabout_Eighth_Exit");
  HIBYTE(word_25B0CD6) = 22;
  byte_25B0CEF = 21;
  strcpy((char *)&xmmword_25B0CD8, "Roundabout_Ninth_Exit");
  byte_25B0D07 = 21;
  strcpy((char *)&xmmword_25B0CF0, "Roundabout_Tenth_Exit");
  qword_25B0D08 = (uint64_t)operator new(0x20uLL);
  xmmword_25B0D10 = xmmword_20B91C0;
  strcpy((char *)qword_25B0D08, "Roundabout_Eleventh_Exit");
  qword_25B0D20 = (uint64_t)operator new(0x19uLL);
  unk_25B0D28 = xmmword_20B9250;
  strcpy((char *)qword_25B0D20, "Roundabout_Twelfth_Exit");
  qword_25B0D38 = (uint64_t)operator new(0x20uLL);
  long long v276 = xmmword_20B5EB0;
  xmmword_25B0D40 = xmmword_20B5EB0;
  strcpy((char *)qword_25B0D38, "Roundabout_Thirteenth_Exit");
  qword_25B0D50 = (uint64_t)operator new(0x20uLL);
  unk_25B0D58 = xmmword_20B5EB0;
  strcpy((char *)qword_25B0D50, "Roundabout_Fourteenth_Exit");
  qword_25B0D68 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B8870;
  xmmword_25B0D70 = xmmword_20B8870;
  strcpy((char *)qword_25B0D68, "Roundabout_Fifteenth_Exit");
  qword_25B0D80 = (uint64_t)operator new(0x20uLL);
  unk_25B0D88 = xmmword_20B8870;
  strcpy((char *)qword_25B0D80, "Roundabout_Sixteenth_Exit");
  qword_25B0D98 = (uint64_t)operator new(0x20uLL);
  long long v273 = xmmword_20B91A0;
  xmmword_25B0DA0 = xmmword_20B91A0;
  strcpy((char *)qword_25B0D98, "Roundabout_Seventeenth_Exit");
  qword_25B0DB0 = (uint64_t)operator new(0x20uLL);
  unk_25B0DB8 = xmmword_20B5EB0;
  strcpy((char *)qword_25B0DB0, "Roundabout_Eighteenth_Exit");
  qword_25B0DC8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B0DD0 = xmmword_20B5EB0;
  strcpy((char *)qword_25B0DC8, "Roundabout_Nineteenth_Exit");
  byte_25B0DF7 = 8;
  strcpy((char *)&qword_25B0DE0, "Off_Ramp");
  byte_25B0E0F = 16;
  strcpy((char *)&xmmword_25B0DF8, "Off_Ramp_On_Left");
  byte_25B0E27 = 17;
  strcpy((char *)&xmmword_25B0E10, "Off_Ramp_On_Right");
  byte_25B0E3F = 14;
  strcpy((char *)&qword_25B0E28, "Change_Highway");
  strcpy((char *)&xmmword_25B0E40, "Change_Highway_On_Left");
  HIBYTE(word_25B0E56) = 22;
  qword_25B0E58 = (uint64_t)operator new(0x19uLL);
  xmmword_25B0E60 = xmmword_20B9250;
  strcpy((char *)qword_25B0E58, "Change_Highway_On_Right");
  byte_25B0E87 = 5;
  dword_25B0E70 = 1735550285;
  byte_25B0E74 = 101;
  byte_25B0E75 = 0;
  byte_25B0E9F = 12;
  strcpy((char *)&qword_25B0E88, "Enter_Detour");
  byte_25B0EB7 = 11;
  strcpy((char *)&qword_25B0EA0, "Exit_Detour");
  byte_25B0ECF = 18;
  strcpy((char *)&xmmword_25B0EB8, "Walking_Turnaround");
  qword_25B0ED0 = (uint64_t)operator new(0x19uLL);
  unk_25B0ED8 = xmmword_20B9250;
  strcpy((char *)qword_25B0ED0, "Walking_Turnaround_Sign");
  byte_25B0EFF = 19;
  strcpy((char *)&xmmword_25B0EE8, "Distance_Title_List");
  qword_25B0F00 = (uint64_t)operator new(0x19uLL);
  unk_25B0F08 = xmmword_20B9250;
  long long v270 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25B0F00, "Cross_The_Street_Spoken");
  *(void *)&v268[1] = *(void *)"t_Spoken";
  byte_25B0F2F = 19;
  strcpy((char *)&xmmword_25B0F18, "Arrival_Charge_List");
  byte_25B0F47 = 15;
  strcpy((char *)&qword_25B0F30, "Charge_At_Start");
  strcpy(&byte_25B0F5F, "\tPass_Street");
  strcpy((char *)&qword_25B0F48, "Pass_Exit");
  byte_25B0F77 = 11;
  byte_25B0F8F = 17;
  strcpy((char *)&xmmword_25B0F78, "Pass_Intersection");
  strcpy(&byte_25B0FA7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25B0F90, "Next_Exit");
  byte_25B0FBF = 15;
  strcpy(&byte_25B0FD7, "\t_PrevUTurn");
  strcpy((char *)&qword_25B0FC0, "_PrevRoad");
  strcpy(&byte_25B0FEF, "\nNext_");
  byte_25B1007 = 5;
  byte_25B101F = 15;
  strcpy((char *)&qword_25B1008, "_At_Next_Street");
  byte_25B1037 = 21;
  strcpy((char *)&xmmword_25B1020, "_At_Next_Intersection");
  byte_25B104F = 14;
  strcpy((char *)&qword_25B1038, "Charge_Station");
  byte_25B1067 = 15;
  strcpy((char *)&qword_25B1050, "_Charge_Station");
  unk_25B1079 = 0;
  unk_25B107A = 25856;
  unk_25B107C = 335544320;
  strcpy((char *)&qword_25B1068, "_Charge_Station_");
  byte_25B1097 = 8;
  strcpy((char *)&qword_25B1080, "_Minimum");
  byte_25B10AF = 15;
  strcpy((char *)&qword_25B1098, "ExitShield_Sign");
  byte_25B10C7 = 8;
  strcpy((char *)&qword_25B10B0, "Walking_");
  byte_25B10DF = 16;
  strcpy((char *)&xmmword_25B10C8, "Walking_Continue");
  byte_25B10F7 = 19;
  strcpy((char *)&xmmword_25B10E0, "Walking_Start_Route");
  qword_25B10F8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B1100 = xmmword_20B5EB0;
  strcpy((char *)qword_25B10F8, "Walking_Start_Route_U_Turn");
  byte_25B1127 = 17;
  strcpy((char *)&xmmword_25B1110, "Walking_Left_Turn");
  byte_25B113F = 18;
  strcpy((char *)&xmmword_25B1128, "Walking_Right_Turn");
  qword_25B1140 = (uint64_t)operator new(0x20uLL);
  unk_25B1148 = xmmword_20B5EB0;
  strcpy((char *)qword_25B1140, "Walking_Turn_At_Roundabout");
  qword_25B1158 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B91B0;
  xmmword_25B1160 = xmmword_20B91B0;
  strcpy((char *)qword_25B1158, "Walking_U_Turn_When_Possible");
  qword_25B1170 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9390;
  unk_25B1178 = xmmword_20B9390;
  strcpy((char *)qword_25B1170, "Walking_Roundabout_Exit_Continue");
  qword_25B1188 = (uint64_t)operator new(0x20uLL);
  xmmword_25B1190 = xmmword_20B91B0;
  strcpy((char *)qword_25B1188, "Walking_Roundabout_Exit_Left");
  qword_25B11A0 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B8890;
  unk_25B11A8 = xmmword_20B8890;
  strcpy((char *)qword_25B11A0, "Walking_Roundabout_Exit_Right");
  qword_25B11B8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B11C0 = xmmword_20B8870;
  strcpy((char *)qword_25B11B8, "Walking_End_Of_Navigation");
  long long v272 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25B11D0 = (uint64_t)v0;
  unk_25B11D8 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v272;
  v0[25] = 0;
  byte_25B11FF = 8;
  strcpy((char *)&qword_25B11E8, "Walking_");
  qword_25B1200 = (uint64_t)operator new(0x19uLL);
  unk_25B1208 = v280;
  strcpy((char *)qword_25B1200, "Walking_Sharp_Left_Turn");
  qword_25B1218 = (uint64_t)operator new(0x20uLL);
  xmmword_25B1220 = v279;
  strcpy((char *)qword_25B1218, "Walking_Sharp_Right_Turn");
  qword_25B1230 = (uint64_t)operator new(0x20uLL);
  unk_25B1238 = v279;
  strcpy((char *)qword_25B1230, "Walking_Slight_Left_Turn");
  qword_25B1248 = (uint64_t)operator new(0x20uLL);
  xmmword_25B1250 = v278;
  strcpy((char *)qword_25B1248, "Walking_Slight_Right_Turn");
  byte_25B1277 = 4;
  strcpy((char *)&dword_25B1260, "Exit");
  byte_25B128F = 4;
  strcpy((char *)&dword_25B1278, "Road");
  byte_25B12A7 = 7;
  strcpy((char *)&dword_25B1290, "Freeway");
  byte_25B12BF = 12;
  strcpy((char *)&qword_25B12A8, "Intersection");
  byte_25B12D7 = 5;
  strcpy((char *)&dword_25B12C0, "Ferry");
  byte_25B12EF = 11;
  strcpy((char *)&qword_25B12D8, "ShuttleName");
  byte_25B1307 = 5;
  strcpy((char *)&dword_25B12F0, "Road1");
  strcpy(&byte_25B131F, "\tName");
  strcpy((char *)&qword_25B1308, "Signpost1");
  byte_25B1337 = 4;
  byte_25B134F = 7;
  strcpy((char *)&dword_25B1338, "Address");
  byte_25B1367 = 7;
  strcpy((char *)&dword_25B1350, "Shield1");
  byte_25B137F = 13;
  strcpy((char *)&qword_25B1368, "TowardShield1");
  byte_25B1397 = 6;
  strcpy((char *)&dword_25B1380, "Right_");
  byte_25B13AF = 5;
  byte_25B139C = 95;
  dword_25B1398 = 1952867660;
  byte_25B139D = 0;
  strcpy(&byte_25B13C7, "\tOn_Left_");
  strcpy((char *)&qword_25B13B0, "On_Right_");
  byte_25B13DF = 8;
  byte_25B13F7 = 12;
  strcpy((char *)&qword_25B13E0, "ElevatorName");
  byte_25B140F = 13;
  strcpy((char *)&qword_25B13F8, "EscalatorName");
  strcpy(&byte_25B1427, "\nBridgeName");
  strcpy((char *)&qword_25B1410, "StairsName");
  strcpy(&byte_25B143F, "\nTunnelName");
  strcpy(&byte_25B1457, "\nParking");
  byte_25B146F = 7;
  strcpy(&byte_25B1487, "\t_Escalator");
  strcpy((char *)&qword_25B1470, "_Elevator");
  strcpy(&byte_25B149F, "\n_ElevatorName");
  byte_25B14B7 = 13;
  byte_25B14CF = 14;
  strcpy((char *)&qword_25B14B8, "_EscalatorName");
  byte_25B14E7 = 5;
  strcpy((char *)&qword_25B14D0, "_Road");
  byte_25B14FF = 8;
  strcpy((char *)&qword_25B14E8, "_Freeway");
  byte_25B1517 = 13;
  strcpy((char *)&qword_25B1500, "_Intersection");
  byte_25B152F = 6;
  strcpy((char *)&dword_25B1518, "_Road1");
  byte_25B1547 = 6;
  strcpy((char *)&dword_25B1530, "_Road2");
  strcpy(&byte_25B155F, "\n_Signpost2");
  strcpy((char *)&qword_25B1548, "_Signpost1");
  strcpy(&byte_25B1577, "\n_Ferry");
  byte_25B158F = 6;
  byte_25B15A7 = 12;
  strcpy((char *)&qword_25B1590, "_Ferry_Ferry");
  byte_25B15BF = 12;
  strcpy((char *)&qword_25B15A8, "_ShuttleName");
  qword_25B15C0 = (uint64_t)operator new(0x20uLL);
  unk_25B15C8 = v277;
  strcpy((char *)qword_25B15C0, "_Railway_Shuttle_ShuttleName");
  byte_25B15EF = 11;
  strcpy((char *)&qword_25B15D8, "_ExitNumber");
  byte_25B1607 = 5;
  dword_25B15F0 = 1769489759;
  byte_25B15F4 = 116;
  byte_25B15F5 = 0;
  byte_25B161F = 7;
  strcpy((char *)&dword_25B1608, "_StayOn");
  byte_25B1637 = 7;
  strcpy((char *)&dword_25B1620, "_Stairs");
  byte_25B164F = 5;
  strcpy((char *)&dword_25B1638, "_Ramp");
  byte_25B1667 = 11;
  strcpy((char *)&qword_25B1650, "_StairsName");
  strcpy(&byte_25B167F, "\t_Down");
  strcpy((char *)&qword_25B1668, "_RampName");
  byte_25B1697 = 5;
  byte_25B16AF = 3;
  dword_25B1698 = 7361887;
  byte_25B16C7 = 7;
  strcpy((char *)dword_25B16B0, "_Bridge");
  byte_25B16DF = 7;
  strcpy((char *)&dword_25B16C8, "_Tunnel");
  byte_25B16F7 = 11;
  strcpy((char *)&qword_25B16E0, "_Roundabout");
  byte_25B170F = 6;
  strcpy((char *)&dword_25B16F8, "_Cross");
  byte_25B1727 = 8;
  strcpy((char *)&qword_25B1710, "_Parking");
  byte_25B173F = 8;
  strcpy((char *)&qword_25B1728, "_Shield1");
  byte_25B1757 = 14;
  strcpy((char *)&qword_25B1740, "_TowardShield1");
  byte_25B176F = 8;
  strcpy((char *)&qword_25B1758, "_Shield2");
  byte_25B1787 = 14;
  strcpy((char *)&qword_25B1770, "_TowardShield2");
  byte_25B179F = 11;
  strcpy((char *)&qword_25B1788, "_Direction1");
  byte_25B17B7 = 11;
  strcpy((char *)&qword_25B17A0, "_Direction2");
  strcpy(&byte_25B17CF, "\n_TowardDirection1");
  strcpy((char *)&qword_25B17B8, "Direction1");
  byte_25B17E7 = 17;
  byte_25B17FF = 17;
  strcpy((char *)&xmmword_25B17E8, "_TowardDirection2");
  byte_25B1817 = 16;
  strcpy((char *)&xmmword_25B1800, "TowardDirection1");
  byte_25B182F = 7;
  strcpy((char *)&qword_25B1818, "_Spoken");
  byte_25B1847 = 5;
  strcpy((char *)&qword_25B1830, "_Sign");
  byte_25B185F = 15;
  strcpy((char *)&qword_25B1848, "_Secondary_Sign");
  byte_25B1877 = 5;
  strcpy((char *)&qword_25B1860, "_List");
  byte_25B188F = 8;
  strcpy((char *)&qword_25B1878, "_Primary");
  unk_25B18A0 = 0xF00000000000000;
  strcpy(byte_25B18A8, "_Secondary");
  strcpy((char *)&qword_25B1890, "_Spoken_Primary");
  strcpy(&byte_25B18BF, "\n_Secondary");
  strcpy(&byte_25B18D7, "\n_Spoken_Secondar");
  BYTE1(qword_25B18E8) = 0;
  WORD1(qword_25B18E8) = 0;
  HIDWORD(qword_25B18E8) = 285212672;
  byte_25B1907 = 13;
  strcpy((char *)&qword_25B18F0, "_To_Secondary");
  BYTE1(qword_25B1918) = 0;
  WORD1(qword_25B1918) = 0;
  HIDWORD(qword_25B1918) = 335544320;
  strcpy((char *)&dword_25B1908, "_Spoken_To_Secon");
  strcpy(&byte_25B1937, "\t_ValidDistance");
  strcpy((char *)&qword_25B1920, "_Distance");
  byte_25B194F = 14;
  byte_25B1967 = 6;
  strcpy((char *)&dword_25B1950, "_Short");
  byte_25B197F = 1;
  LOWORD(qword_25B1968) = 95;
  qword_25B1980 = (uint64_t)operator new(0x20uLL);
  unk_25B1988 = v279;
  strcpy((char *)qword_25B1980, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25B1998 = (uint64_t)v1;
  xmmword_25B19A0 = v280;
  *(_OWORD *)uint64_t v1 = v270;
  uint64_t v2 = *(void *)&v268[1];
  *(void *)(v1 + 15) = *(void *)&v268[1];
  v1[23] = 0;
  byte_25B19C7 = 12;
  strcpy((char *)&qword_25B19B0, "Chain_Spoken");
  byte_25B19DF = 15;
  strcpy((char *)&qword_25B19C8, "Chain_To_Spoken");
  strcpy(&byte_25B19F7, "\nThen_Spoken");
  strcpy((char *)&qword_25B19E0, "And_Spoken");
  byte_25B1A0F = 11;
  byte_25B1A27 = 18;
  strcpy((char *)&xmmword_25B1A10, "Concatenate_Spoken");
  qword_25B1A28 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20B9240;
  xmmword_25B1A30 = xmmword_20B9240;
  strcpy((char *)qword_25B1A28, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25B1A40 = (uint64_t)operator new(0x28uLL);
  v268[2] = xmmword_20B9260;
  unk_25B1A48 = xmmword_20B9260;
  strcpy((char *)qword_25B1A40, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25B1A58 = (uint64_t)operator new(0x40uLL);
  xmmword_25B1A60 = xmmword_20B9A90;
  strcpy((char *)qword_25B1A58, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25B1A70 = (uint64_t)operator new(0x30uLL);
  long long v266 = xmmword_20B9A40;
  unk_25B1A78 = xmmword_20B9A40;
  strcpy((char *)qword_25B1A70, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25B1A88 = (uint64_t)operator new(0x28uLL);
  long long v265 = xmmword_20E12D0;
  xmmword_25B1A90 = xmmword_20E12D0;
  strcpy((char *)qword_25B1A88, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25B1AA0 = (uint64_t)operator new(0x28uLL);
  long long v274 = xmmword_20B9960;
  unk_25B1AA8 = xmmword_20B9960;
  strcpy((char *)qword_25B1AA0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B1AB8 = (uint64_t)operator new(0x28uLL);
  xmmword_25B1AC0 = xmmword_20B93A0;
  strcpy((char *)qword_25B1AB8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B1AD0 = (uint64_t)operator new(0x30uLL);
  long long v272 = xmmword_20E1380;
  unk_25B1AD8 = xmmword_20E1380;
  strcpy((char *)qword_25B1AD0, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B1AE8 = (uint64_t)operator new(0x30uLL);
  xmmword_25B1AF0 = xmmword_20B93C0;
  strcpy((char *)qword_25B1AE8, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B1B00 = (uint64_t)operator new(0x38uLL);
  unk_25B1B08 = xmmword_20B9A60;
  strcpy((char *)qword_25B1B00, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B1B18 = (uint64_t)operator new(0x30uLL);
  xmmword_25B1B20 = xmmword_20E1380;
  strcpy((char *)qword_25B1B18, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B1B30 = (uint64_t)operator new(0x28uLL);
  unk_25B1B38 = xmmword_20B9960;
  strcpy((char *)qword_25B1B30, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25B1B48 = (uint64_t)operator new(0x30uLL);
  long long v271 = xmmword_20B93D0;
  xmmword_25B1B50 = xmmword_20B93D0;
  strcpy((char *)qword_25B1B48, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25B1B60 = (uint64_t)operator new(0x20uLL);
  unk_25B1B68 = v275;
  strcpy((char *)qword_25B1B60, "Walking_Distance_Chain_Spoken");
  qword_25B1B78 = (uint64_t)operator new(0x20uLL);
  xmmword_25B1B80 = v275;
  strcpy((char *)qword_25B1B78, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25B1B90 = (uint64_t)v3;
  unk_25B1B98 = v280;
  *(_OWORD *)uint64_t v3 = v270;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25B1BA8 = (uint64_t)operator new(0x28uLL);
  xmmword_25B1BB0 = v269;
  strcpy((char *)qword_25B1BA8, "Distance_Cross_The_Street_Spoken");
  byte_25B1BD7 = 22;
  strcpy((char *)&xmmword_25B1BC0, "Walking_Continue_Cross");
  byte_25B1BEF = 14;
  strcpy((char *)&qword_25B1BD8, "Continue_Cross");
  byte_25B1C07 = 5;
  strcpy((char *)&dword_25B1BF0, "Cross");
  byte_25B1C1F = 19;
  strcpy((char *)&xmmword_25B1C08, "Cross_Street_Spoken");
  byte_25B1C37 = 17;
  strcpy((char *)&xmmword_25B1C20, "Cross_Road_Spoken");
  byte_25B1C4F = 20;
  strcpy((char *)&xmmword_25B1C38, "Use_Crosswalk_Spoken");
  byte_25B1C67 = 15;
  strcpy((char *)&qword_25B1C50, "Distance_Spoken");
  byte_25B1C7F = 19;
  strcpy((char *)&xmmword_25B1C68, "Distance_And_Spoken");
  byte_25B1C97 = 21;
  strcpy((char *)&xmmword_25B1C80, "Continue_Stage_Spoken");
  byte_25B1CAF = 13;
  qmemcpy(&qword_25B1C98, "ContinueStage", 13);
  int v4 = byte_25B18A7;
  if (byte_25B18A7 >= 0) {
    size_t v5 = byte_25B18A7;
  }
  else {
    size_t v5 = qword_25B1898;
  }
  unint64_t v6 = v5 + 13;
  byte_25B1CA5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v10 = operator new(v8 + 1);
    qword_25B1CB8 = v5 + 13;
    unk_25B1CC0 = v9 | 0x8000000000000000;
    qword_25B1CB0 = (uint64_t)v10;
    void *v10 = *(void *)"ContinueStage";
    long long v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25B1CB8) = 0;
    WORD1(qword_25B1CB8) = 0;
    HIDWORD(qword_25B1CB8) = 0;
    unk_25B1CC0 = 0;
    byte_25B1CC7 = v5 + 13;
    long long v7 = (char *)&qword_25B1CB8 + 5;
    strcpy((char *)&qword_25B1CB0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    int v11 = &qword_25B1890;
  }
  else {
    int v11 = (uint64_t *)qword_25B1890;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25B14E7;
  if (byte_25B14E7 >= 0) {
    size_t v13 = byte_25B14E7;
  }
  else {
    size_t v13 = qword_25B14D8;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    std::string v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    void *v18 = qword_25B1C98;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25B1C98 + 5);
    std::string v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25B1C98 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25B1C98;
    std::string v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    long long v19 = &qword_25B14D0;
  }
  else {
    long long v19 = (uint64_t *)qword_25B14D0;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    std::string::size_type v20 = (const std::string::value_type *)&qword_25B1890;
  }
  else {
    std::string::size_type v20 = (const std::string::value_type *)qword_25B1890;
  }
  int v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25B1CD8 = v21->__r_.__value_.__r.__words[2];
  xmmword_25B1CC8 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25B1CF7 = 5;
  strcpy((char *)&dword_25B1CE0, "Merge");
  qword_25B1CF8 = (uint64_t)operator new(0x20uLL);
  v268[1] = xmmword_20B8E90;
  unk_25B1D00 = xmmword_20B8E90;
  strcpy((char *)qword_25B1CF8, "Continue_Freeway_Spoken_Primary");
  byte_25B1D27 = 8;
  strcpy((char *)&qword_25B1D10, "Starting");
  byte_25B1D3F = 14;
  strcpy((char *)&qword_25B1D28, "Starting_Route");
  byte_25B1D40[23] = 14;
  strcpy(byte_25B1D40, "Resuming_Route");
  byte_25B1D6F = 16;
  strcpy((char *)&xmmword_25B1D58, "Continuing_Route");
  byte_25B1D87 = 9;
  LOWORD(qword_25B1D78) = 112;
  qword_25B1D70 = *(void *)&v264[48];
  strcpy(&byte_25B1D9F, "\nEnding");
  strcpy((char *)&word_25B1D90, "op");
  qword_25B1D88 = *(void *)&v268[0];
  byte_25B1DB7 = 6;
  strcpy((char *)&qword_25B1DB8, "_Destination");
  byte_25B1DCF = 12;
  byte_25B1DE7 = 15;
  strcpy((char *)&qword_25B1DD0, "_At_Destination");
  std::operator+<char>();
  qword_25B1E00 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)&qword_25B1E08 = v279;
  strcpy((char *)qword_25B1E00, "Spoken_Ending_At_Parking");
  qword_25B1E18 = (uint64_t)operator new(0x20uLL);
  v268[0] = xmmword_20B9800;
  xmmword_25B1E20 = xmmword_20B9800;
  strcpy((char *)qword_25B1E18, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25B1E30, "Sign_Ending_At_Parking");
  HIBYTE(word_25B1E46) = 22;
  byte_25B1E5F = 4;
  strcpy((char *)&xmmword_25B1E48, "Home");
  byte_25B1E77 = 4;
  strcpy((char *)&xmmword_25B1E60, "Work");
  byte_25B1E8F = 8;
  strcpy((char *)&qword_25B1E78, "Business");
  byte_25B1EA7 = 4;
  strcpy((char *)&qword_25B1E90, "Name");
  byte_25B1EBF = 13;
  strcpy((char *)&xmmword_25B1EA8, "Other_Contact");
  byte_25B1ED7 = 11;
  strcpy((char *)&xmmword_25B1EC0, "ContactHome");
  byte_25B1EEF = 11;
  *(_DWORD *)((char *)&xmmword_25B1ED8 + 7) = 1802661719;
  byte_25B1F07 = 7;
  *(_DWORD *)((char *)&qword_25B1EF0 + 3) = 1936942450;
  LODWORD(qword_25B1EF0) = 1919181889;
  strcpy(byte_25B1F08, "Discoverability_Prompt");
  byte_25B1F08[23] = 22;
  byte_25B1F37 = 6;
  LODWORD(xmmword_25B1F20) = 1634878303;
  WORD2(xmmword_25B1F20) = 26739;
  byte_25B1F4F = 8;
  *(void *)&xmmword_25B1F38 = 0x697269535F6F4E5FLL;
  byte_25B1F50[23] = 9;
  strcpy(byte_25B1F50, "_CityName");
  byte_25B1F7F = 8;
  qword_25B1F68 = 0x636972656E65475FLL;
  int v23 = byte_25B1D27;
  if (byte_25B1D27 >= 0) {
    size_t v24 = byte_25B1D27;
  }
  else {
    size_t v24 = qword_25B1D18;
  }
  LODWORD(v270) = byte_25B1067;
  if (byte_25B1067 >= 0) {
    size_t v25 = byte_25B1067;
  }
  else {
    size_t v25 = unk_25B1058;
  }
  *(void *)&xmmword_25B1ED8 = *(void *)"ContactWork";
  BYTE11(xmmword_25B1ED8) = 0;
  HIBYTE(qword_25B1EF0) = 0;
  BYTE6(xmmword_25B1F20) = 0;
  BYTE8(xmmword_25B1F38) = 0;
  LOBYTE(qword_25B1F70) = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)uint64_t v264 = *(void *)"ContactWork";
  *(void *)&v264[16] = *(void *)"ContactHome";
  *(void *)&v264[32] = *(void *)"_Contact";
  *(void *)&v264[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    uint64_t v27 = &qword_25B1F80;
    qword_25B1F88 = 0;
    unk_25B1F90 = 0;
    qword_25B1F80 = 0;
    byte_25B1F97 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  uint64_t v27 = (uint64_t *)operator new(v90 + 1);
  qword_25B1F88 = v25 + v24;
  unk_25B1F90 = v91 | 0x8000000000000000;
  qword_25B1F80 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_25B1D10;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25B1D10;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  int v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v270 >= 0) {
      size_t v30 = &qword_25B1050;
    }
    else {
      size_t v30 = (uint64_t *)qword_25B1050;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25B1DCF;
  if (byte_25B1DCF >= 0) {
    size_t v32 = byte_25B1DCF;
  }
  else {
    size_t v32 = qword_25B1DC0;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    long long v34 = &qword_25B1F98;
    qword_25B1FA0 = 0;
    unk_25B1FA8 = 0;
    qword_25B1F98 = 0;
    byte_25B1FAF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  long long v34 = (uint64_t *)operator new(v92 + 1);
  qword_25B1FA0 = v32 + v24;
  unk_25B1FA8 = v93 | 0x8000000000000000;
  qword_25B1F98 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      uint64_t v35 = &qword_25B1D10;
    }
    else {
      uint64_t v35 = (uint64_t *)qword_25B1D10;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  uint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25B1DB8;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25B1DB8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  *(void *)&qword_25B1FB0 = operator new(0x19uLL);
  unk_25B1FB8 = v280;
  strcpy((char *)qword_25B1FB0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    unint64_t v38 = &qword_25B1FC8;
    qword_25B1FD0 = 0;
    unk_25B1FD8 = 0;
    qword_25B1FC8 = 0;
    byte_25B1FDF = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  unint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_25B1FD0 = v32 + v24;
  unk_25B1FD8 = v95 | 0x8000000000000000;
  qword_25B1FC8 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      unint64_t v39 = &qword_25B1D10;
    }
    else {
      unint64_t v39 = (uint64_t *)qword_25B1D10;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  char v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v41 = &qword_25B1DB8;
    }
    else {
      uint64_t v41 = (uint64_t *)qword_25B1DB8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25B1FE0, "{NewBatteryPercentage}");
  HIBYTE(word_25B1FF6) = 22;
  qword_25B1FF8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B2000 = v273;
  strcpy((char *)qword_25B1FF8, "{OriginalBatteryPercentage}");
  byte_25B2027 = 19;
  strcpy((char *)&xmmword_25B2010, "_Arrival_Percentage");
  int v42 = byte_25B1DB7;
  if (byte_25B1DB7 >= 0) {
    size_t v43 = byte_25B1DB7;
  }
  else {
    size_t v43 = qword_25B1DA8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      int v46 = &qword_25B1DA0;
    }
    else {
      int v46 = (uint64_t *)qword_25B1DA0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  uint64_t v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v270 >= 0) {
      uint64_t v48 = &qword_25B1050;
    }
    else {
      uint64_t v48 = (uint64_t *)qword_25B1050;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  uint64_t v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  unk_25B2038 = *((void *)&v49->__r_.__value_.__l + 2);
  xmmword_25B2028 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25B1DB7;
  if (byte_25B1DB7 >= 0) {
    size_t v52 = byte_25B1DB7;
  }
  else {
    size_t v52 = qword_25B1DA8;
  }
  int v53 = byte_25B1067;
  if (byte_25B1067 >= 0) {
    size_t v54 = byte_25B1067;
  }
  else {
    size_t v54 = unk_25B1058;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    std::string::size_type v56 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  std::string::size_type v56 = (char *)operator new(v98 + 1);
  v281.__r_.__value_.__l.__size_ = v54 + v52;
  v281.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      uint64_t v57 = &qword_25B1DA0;
    }
    else {
      uint64_t v57 = (uint64_t *)qword_25B1DA0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  size_t v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_25B1050;
    }
    else {
      int v59 = (uint64_t *)qword_25B1050;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25B1097 >= 0) {
    size_t v60 = (const std::string::value_type *)&qword_25B1080;
  }
  else {
    size_t v60 = (const std::string::value_type *)qword_25B1080;
  }
  if (byte_25B1097 >= 0) {
    std::string::size_type v61 = byte_25B1097;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25B1088;
  }
  long long v62 = std::string::append(&v281, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  uint64_t v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  unk_25B2050 = *((void *)&v64->__r_.__value_.__l + 2);
  xmmword_25B2040 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25B1DB7;
  if (byte_25B1DB7 >= 0) {
    size_t v67 = byte_25B1DB7;
  }
  else {
    size_t v67 = qword_25B1DA8;
  }
  int v68 = byte_25B1067;
  if (byte_25B1067 >= 0) {
    size_t v69 = byte_25B1067;
  }
  else {
    size_t v69 = unk_25B1058;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  uint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      unint64_t v72 = &qword_25B1DA0;
    }
    else {
      unint64_t v72 = (uint64_t *)qword_25B1DA0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  unint64_t v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      long long v74 = &qword_25B1050;
    }
    else {
      long long v74 = (uint64_t *)qword_25B1050;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  uint64_t v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  unk_25B2068 = *((void *)&v75->__r_.__value_.__l + 2);
  xmmword_25B2058 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25B1DB7;
  if (byte_25B1DB7 >= 0) {
    size_t v78 = byte_25B1DB7;
  }
  else {
    size_t v78 = qword_25B1DA8;
  }
  int v79 = byte_25B1067;
  if (byte_25B1067 >= 0) {
    size_t v80 = byte_25B1067;
  }
  else {
    size_t v80 = unk_25B1058;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25B2078 = 0;
    unk_25B2080 = 0;
    qword_25B2070 = 0;
    uint64_t v82 = &qword_25B2070;
    byte_25B2087 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  uint64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_25B2078 = v80 + v78;
  unk_25B2080 = v103 | 0x8000000000000000;
  qword_25B2070 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      uint64_t v83 = &qword_25B1DA0;
    }
    else {
      uint64_t v83 = (uint64_t *)qword_25B1DA0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  __darwin_ct_rune_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      int v85 = &qword_25B1050;
    }
    else {
      int v85 = (uint64_t *)qword_25B1050;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25B2087;
  if (byte_25B2087 >= 0) {
    size_t v87 = byte_25B2087;
  }
  else {
    size_t v87 = qword_25B2078;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25B2090 = v87 + 5;
    unk_25B2098 = v105 | 0x8000000000000000;
    qword_25B2088 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25B2088;
    qword_25B2090 = 0;
    unk_25B2098 = 0;
    qword_25B2088 = 0;
    byte_25B209F = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_25B2070;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_25B2070;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25B1DB7;
  if (byte_25B1DB7 >= 0) {
    size_t v108 = byte_25B1DB7;
  }
  else {
    size_t v108 = qword_25B1DA8;
  }
  int v109 = byte_25B1067;
  if (byte_25B1067 >= 0) {
    size_t v110 = byte_25B1067;
  }
  else {
    size_t v110 = unk_25B1058;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  unint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      int v113 = &qword_25B1DA0;
    }
    else {
      int v113 = (uint64_t *)qword_25B1DA0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_25B1050;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_25B1050;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25B20B0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25B20A0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25B20B0);
  if (qword_25B20B0 >= 0) {
    size_t v119 = HIBYTE(qword_25B20B0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25B20A0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    unint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_25B20C0 = v119 + 6;
    unk_25B20C8 = v125 | 0x8000000000000000;
    qword_25B20B8 = (uint64_t)v121;
  }
  else
  {
    unint64_t v121 = &qword_25B20B8;
    qword_25B20C0 = 0;
    unk_25B20C8 = 0;
    qword_25B20B8 = 0;
    byte_25B20CF = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_25B20A0;
  }
  else {
    int v126 = (long long *)xmmword_25B20A0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25B1DB7;
  if (byte_25B1DB7 >= 0) {
    size_t v128 = byte_25B1DB7;
  }
  else {
    size_t v128 = qword_25B1DA8;
  }
  int v129 = byte_25B1067;
  if (byte_25B1067 >= 0) {
    size_t v130 = byte_25B1067;
  }
  else {
    size_t v130 = unk_25B1058;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_25B1DA0;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_25B1DA0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  long long v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_25B1050;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_25B1050;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25B182F >= 0) {
    uint64_t v136 = (const std::string::value_type *)&qword_25B1818;
  }
  else {
    uint64_t v136 = (const std::string::value_type *)qword_25B1818;
  }
  if (byte_25B182F >= 0) {
    std::string::size_type v137 = byte_25B182F;
  }
  else {
    std::string::size_type v137 = unk_25B1820;
  }
  long long v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25B20E0 = v138->__r_.__value_.__r.__words[2];
  xmmword_25B20D0 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25B1DB7;
  if (byte_25B1DB7 >= 0) {
    size_t v141 = byte_25B1DB7;
  }
  else {
    size_t v141 = qword_25B1DA8;
  }
  int v142 = byte_25B1067;
  if (byte_25B1067 >= 0) {
    size_t v143 = byte_25B1067;
  }
  else {
    size_t v143 = unk_25B1058;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v281, 0, sizeof(v281));
    v145 = (char *)&v281;
    *((unsigned char *)&v281.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v281.__r_.__value_.__l.__size_ = v143 + v141;
  v281.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v281.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      uint64_t v146 = &qword_25B1DA0;
    }
    else {
      uint64_t v146 = (uint64_t *)qword_25B1DA0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  uint64_t v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      char v148 = &qword_25B1050;
    }
    else {
      char v148 = (uint64_t *)qword_25B1050;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25B1097 >= 0) {
    uint64_t v149 = (const std::string::value_type *)&qword_25B1080;
  }
  else {
    uint64_t v149 = (const std::string::value_type *)qword_25B1080;
  }
  if (byte_25B1097 >= 0) {
    std::string::size_type v150 = byte_25B1097;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25B1088;
  }
  long long v151 = std::string::append(&v281, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25B182F >= 0) {
    std::string::size_type v153 = (const std::string::value_type *)&qword_25B1818;
  }
  else {
    std::string::size_type v153 = (const std::string::value_type *)qword_25B1818;
  }
  if (byte_25B182F >= 0) {
    std::string::size_type v154 = byte_25B182F;
  }
  else {
    std::string::size_type v154 = unk_25B1820;
  }
  uint64_t v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25B20F8 = v155->__r_.__value_.__r.__words[2];
  xmmword_25B20E8 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v281.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v281.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25B2117 = 16;
  strcpy((char *)&xmmword_25B2100, "Use_NACS_Adapter");
  byte_25B212F = 16;
  strcpy(byte_25B2118, "Start_Route_Sign");
  qword_25B2130 = (uint64_t)operator new(0x20uLL);
  unk_25B2138 = v276;
  strcpy((char *)qword_25B2130, "Start_Route_Spoken_Primary");
  int v157 = byte_25B07C7;
  if (byte_25B07C7 >= 0) {
    size_t v158 = byte_25B07C7;
  }
  else {
    size_t v158 = qword_25B07B8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_25B2148;
    qword_25B2150 = 0;
    unk_25B2158 = 0;
    qword_25B2148 = 0;
    byte_25B215F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      long long v167 = &qword_25B07B0;
    }
    else {
      long long v167 = (uint64_t *)qword_25B07B0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_25B2150 = v158 + 27;
  unk_25B2158 = v166 | 0x8000000000000000;
  qword_25B2148 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25B2177, "\t_Two_Lanes");
  strcpy((char *)&qword_25B2160, "_One_Lane");
  strcpy(&byte_25B218F, "\n_Three_Lanes");
  byte_25B21A7 = 12;
  byte_25B21BF = 11;
  strcpy((char *)&qword_25B21A8, "_Four_Lanes");
  byte_25B21D7 = 11;
  strcpy((char *)&qword_25B21C0, "_Five_Lanes");
  strcpy(&byte_25B21EF, "\n_Seven_Lanes");
  strcpy((char *)&qword_25B21D8, "_Six_Lanes");
  byte_25B2207 = 12;
  byte_25B221F = 12;
  strcpy((char *)&qword_25B2208, "_Eight_Lanes");
  byte_25B2237 = 12;
  strcpy((char *)&qword_25B2220, "_Second_Lane");
  byte_25B224F = 11;
  strcpy((char *)&qword_25B2238, "_Third_Lane");
  byte_25B2267 = 19;
  long long v270 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25B2250, "_Second_Third_Lanes");
  byte_25B227F = 4;
  strcpy((char *)&dword_25B2268, "Left");
  byte_25B2297 = 5;
  byte_25B2284 = 116;
  dword_25B2280 = 1751607634;
  byte_25B2285 = 0;
  byte_25B22AF = 6;
  strcpy((char *)&dword_25B2298, "Middle");
  BYTE1(qword_25B22C0) = 0;
  WORD1(qword_25B22C0) = 0;
  HIDWORD(qword_25B22C0) = 0x10000000;
  strcpy((char *)dword_25B22B0, "Left_Second_Lane");
  BYTE1(qword_25B22D8) = 0;
  WORD1(qword_25B22D8) = 0;
  HIDWORD(qword_25B22D8) = 285212672;
  strcpy((char *)&dword_25B22C8, "Right_Second_Lan");
  qword_25B22F0 = 0xF00000000000000;
  strcpy((char *)&dword_25B22E0, "Left_Third_Lane");
  qword_25B2308 = 0x1000000000000000;
  byte_25B22FC = 116;
  dword_25B22F8 = 1751607634;
  dword_25B2304 = 1701732684;
  unk_25B22FD = *(void *)"_Third_Lane";
  long long v168 = (char *)operator new(0x19uLL);
  qword_25B2310 = (uint64_t)v168;
  unk_25B2318 = v280;
  *(_DWORD *)long long v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v270;
  int v169 = (char *)operator new(0x20uLL);
  qword_25B2328 = (uint64_t)v169;
  xmmword_25B2330 = v279;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v270;
  byte_25B2357 = 5;
  strcpy((char *)&dword_25B2340, "_Stay");
  byte_25B236F = 13;
  strcpy((char *)&qword_25B2358, "Continue_Sign");
  byte_25B2387 = 8;
  strcpy((char *)&qword_25B2370, "Continue");
  int v170 = byte_25B1847;
  if (byte_25B1847 >= 0) {
    size_t v171 = byte_25B1847;
  }
  else {
    size_t v171 = qword_25B1838;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    uint64_t v176 = operator new(v174 + 1);
    qword_25B2390 = v171 + 8;
    qword_25B2398 = v175 | 0x8000000000000000;
    qword_25B2388 = (uint64_t)v176;
    *uint64_t v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_25B2398 = 0;
    HIBYTE(qword_25B2398) = v171 + 8;
    qword_25B2388 = 0x65756E69746E6F43;
    qword_25B2390 = 0;
    uint64_t v173 = &qword_25B2390;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_25B1830;
  }
  else {
    int v177 = (uint64_t *)qword_25B1830;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = byte_25B18A7;
  if (byte_25B18A7 >= 0) {
    size_t v179 = byte_25B18A7;
  }
  else {
    size_t v179 = qword_25B1898;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    unint64_t v184 = operator new(v182 + 1);
    qword_25B23A8 = v179 + 8;
    qword_25B23B0 = v183 | 0x8000000000000000;
    qword_25B23A0 = (uint64_t)v184;
    *unint64_t v184 = qword_25B2370;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25B23B0 = 0;
    HIBYTE(qword_25B23B0) = v179 + 8;
    qword_25B23A0 = qword_25B2370;
    qword_25B23A8 = 0;
    uint64_t v181 = &qword_25B23A8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    long long v185 = &qword_25B1890;
  }
  else {
    long long v185 = (uint64_t *)qword_25B1890;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  HIBYTE(v284) = 2;
  strcpy((char *)&v283, "SW");
  HIBYTE(v286) = 1;
  LOWORD(v285[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy((char *)&v287, "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25B23B8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_352:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25B23E7 = 13;
  strcpy((char *)&qword_25B23D0, "{instruction}");
  byte_25B23FF = 20;
  strcpy(byte_25B23E8, "{primaryInstruction}");
  strcpy((char *)&xmmword_25B2400, "{secondaryInstruction}");
  HIBYTE(word_25B2416) = 22;
  qword_25B2418 = (uint64_t)operator new(0x20uLL);
  unk_25B2420 = v278;
  strcpy((char *)qword_25B2418, "{andSecondaryInstruction}");
  qword_25B2430 = (uint64_t)operator new(0x20uLL);
  unk_25B2438 = v279;
  strcpy((char *)qword_25B2430, "{toSecondaryInstruction}");
  byte_25B245F = 21;
  strcpy(byte_25B2448, "{continueInstruction}");
  qword_25B2460 = (uint64_t)operator new(0x20uLL);
  unk_25B2468 = v276;
  strcpy((char *)qword_25B2460, "{thenSecondaryInstruction}");
  byte_25B248F = 14;
  strcpy((char *)&qword_25B2478, "{instruction1}");
  byte_25B24A7 = 14;
  strcpy((char *)&qword_25B2490, "{instruction2}");
  strcpy(&byte_25B24BF, "\n{nextDistance}");
  strcpy((char *)&qword_25B24A8, "{distance}");
  byte_25B24D7 = 14;
  byte_25B24EF = 16;
  strcpy(byte_25B24D8, "{valid_distance}");
  strcpy(&byte_25B2507, "\n{valid_distance}");
  strcpy((char *)&qword_25B24F0, "{distance}");
  byte_25B251F = 16;
  byte_25B2537 = 15;
  strcpy((char *)&qword_25B2520, "{ClimbDistance}");
  byte_25B254F = 17;
  strcpy(byte_25B2538, "{DescentDistance}");
  byte_25B2567 = 13;
  strcpy((char *)&qword_25B2550, "{nonBrkSpace}");
  byte_25B257F = 9;
  strcpy((char *)&qword_25B2568, "{newLine}");
  byte_25B2597 = 6;
  word_25B2584 = -24382;
  dword_25B2580 = -1211981630;
  byte_25B2586 = 0;
  byte_25B25AF = 2;
  word_25B2598 = -24382;
  byte_25B259A = 0;
  byte_25B25C7 = 1;
  word_25B25B0 = 10;
  byte_25B25DF = 1;
  word_25B25C8 = 32;
  byte_25B25F7 = 2;
  strcpy((char *)&word_25B25E0, "\n\n");
  strcpy(&byte_25B260F, "\t{TowardShield1}");
  strcpy((char *)&qword_25B25F8, "{Shield1}");
  byte_25B2627 = 15;
  strcpy(&byte_25B263F, "\t{TowardShield2}");
  strcpy((char *)&qword_25B2628, "{Shield2}");
  byte_25B2657 = 15;
  byte_25B266F = 12;
  strcpy((char *)&qword_25B2658, "{Direction1}");
  byte_25B2687 = 12;
  strcpy((char *)&qword_25B2670, "{Direction2}");
  byte_25B269F = 18;
  strcpy((char *)&xmmword_25B2688, "{TowardDirection1}");
  byte_25B26B7 = 18;
  strcpy((char *)&xmmword_25B26A0, "{TowardDirection2}");
  byte_25B26CF = 7;
  strcpy((char *)&dword_25B26B8, "{Icon1}");
  byte_25B26E7 = 7;
  strcpy((char *)&dword_25B26D0, "{Icon2}");
  byte_25B26E8[23] = 14;
  strcpy(byte_25B26E8, "{Intersection}");
  byte_25B2717 = 6;
  strcpy((char *)&xmmword_25B2700, "{Road}");
  byte_25B272F = 7;
  strcpy((char *)&dword_25B2718, "{Road1}");
  byte_25B2747 = 7;
  strcpy((char *)&xmmword_25B2730, "{Road2}");
  strcpy(&byte_25B275F, "\n{Freeway}");
  strcpy((char *)&qword_25B2748, "{Elevator}");
  strcpy(&byte_25B2777, "\t{Ferry}");
  byte_25B278F = 7;
  byte_25B27A7 = 13;
  strcpy((char *)&xmmword_25B2790, "{ShuttleName}");
  byte_25B27BF = 11;
  strcpy((char *)&xmmword_25B27A8, "{Signpost1}");
  byte_25B27D7 = 11;
  strcpy((char *)&xmmword_25B27C0, "{Signpost2}");
  byte_25B27EF = 12;
  strcpy((char *)&xmmword_25B27D8, "{ExitNumber}");
  strcpy(&byte_25B2807, "\t{Name}");
  strcpy((char *)&xmmword_25B27F0, "{Address}");
  byte_25B281F = 6;
  byte_25B2837 = 11;
  strcpy((char *)&xmmword_25B2820, "{PlaceName}");
  byte_25B284F = 14;
  strcpy((char *)&xmmword_25B2838, "{ElevatorName}");
  byte_25B2867 = 15;
  strcpy((char *)&xmmword_25B2850, "{EscalatorName}");
  byte_25B287F = 12;
  strcpy((char *)&xmmword_25B2868, "{StairsName}");
  strcpy(&byte_25B2897, "\n{BridgeName}");
  strcpy((char *)&xmmword_25B2880, "{RampName}");
  byte_25B28AF = 12;
  byte_25B28C7 = 12;
  strcpy((char *)&xmmword_25B28B0, "{TunnelName}");
  byte_25B28DF = 13;
  strcpy((char *)&xmmword_25B28C8, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25B26E8;
  long long v283 = xmmword_25B2700;
  uint64_t v284 = unk_25B2710;
  *(_OWORD *)int v285 = *(_OWORD *)&dword_25B2718;
  uint64_t v286 = unk_25B2728;
  long long v287 = xmmword_25B2730;
  uint64_t v288 = unk_25B2740;
  *(_OWORD *)v289 = *(_OWORD *)&qword_25B2748;
  uint64_t v290 = unk_25B2758;
  uint64_t v292 = unk_25B2770;
  long long v291 = xmmword_25B2760;
  long long v293 = *(_OWORD *)&dword_25B2778;
  uint64_t v294 = unk_25B2788;
  uint64_t v296 = unk_25B27A0;
  long long __p = xmmword_25B2790;
  long long v297 = xmmword_25B27A8;
  uint64_t v298 = unk_25B27B8;
  uint64_t v300 = unk_25B27D0;
  long long v299 = xmmword_25B27C0;
  long long v301 = xmmword_25B27D8;
  long long v303 = xmmword_25B27F0;
  uint64_t v302 = unk_25B27E8;
  uint64_t v304 = unk_25B2800;
  long long v305 = xmmword_25B2808;
  long long v307 = xmmword_25B2820;
  uint64_t v306 = unk_25B2818;
  uint64_t v308 = unk_25B2830;
  long long v309 = xmmword_25B2838;
  long long v311 = xmmword_25B2850;
  uint64_t v310 = unk_25B2848;
  uint64_t v312 = unk_25B2860;
  long long v313 = xmmword_25B2868;
  long long v315 = xmmword_25B2880;
  uint64_t v314 = unk_25B2878;
  uint64_t v316 = unk_25B2890;
  long long v317 = xmmword_25B2898;
  long long v319 = xmmword_25B28B0;
  uint64_t v318 = unk_25B28A8;
  uint64_t v320 = unk_25B28C0;
  uint64_t v322 = unk_25B28D8;
  long long v321 = xmmword_25B28C8;
  sub_4BDC0C(qword_25B28E0, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((SHIBYTE(v286) & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete((void *)v287);
  if ((SHIBYTE(v286) & 0x80000000) == 0)
  {
LABEL_373:
    if ((SHIBYTE(v284) & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete((void *)v283);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v285[0]);
  if (SHIBYTE(v284) < 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25B28F8 = (uint64_t)operator new(0x19uLL);
  unk_25B2900 = v280;
  strcpy((char *)qword_25B28F8, "From_User_Location_List");
  byte_25B2927 = 20;
  strcpy(byte_25B2910, "Origin_Waypoint_List");
  qword_25B2928 = (uint64_t)operator new(0x20uLL);
  unk_25B2930 = v276;
  strcpy((char *)qword_25B2928, "Intermediate_Waypoint_List");
  unk_25B2940 = operator new(0x20uLL);
  unk_25B2948 = v278;
  strcpy(unk_25B2940, "Destination_Waypoint_List");
  byte_25B296F = 15;
  strcpy(byte_25B2958, "{toDestination}");
  byte_25B2987 = 13;
  strcpy((char *)&xmmword_25B2970, "{Destination}");
  byte_25B299F = 7;
  strcpy(byte_25B2988, "To_Home");
  byte_25B29B7 = 14;
  strcpy(byte_25B29A0, "To_ContactHome");
  byte_25B29CF = 7;
  strcpy(byte_25B29B8, "To_Work");
  byte_25B29E7 = 14;
  strcpy(byte_25B29D0, "To_ContactWork");
  strcpy(&byte_25B29FF, "\nTo_Business");
  strcpy(byte_25B29E8, "To_Address");
  byte_25B2A17 = 11;
  byte_25B2A2F = 16;
  strcpy(byte_25B2A18, "To_Other_Contact");
  strcpy(&byte_25B2A47, "\tTo_ContactSchool");
  strcpy(byte_25B2A30, "To_School");
  byte_25B2A5F = 16;
  byte_25B2A77 = 17;
  strcpy(byte_25B2A60, "To_PersonLocation");
  qword_25B2A78 = (uint64_t)operator new(0x20uLL);
  unk_25B2A80 = v277;
  strcpy((char *)qword_25B2A78, "To_ContactCustomLabelAddress");
  byte_25B2AA7 = 7;
  strcpy((char *)&dword_25B2A90, "At_Home");
  byte_25B2ABF = 14;
  strcpy((char *)&qword_25B2AA8, "At_ContactHome");
  byte_25B2AD7 = 7;
  strcpy((char *)&dword_25B2AC0, "At_Work");
  byte_25B2AEF = 14;
  strcpy((char *)&qword_25B2AD8, "At_ContactWork");
  strcpy(&byte_25B2B07, "\nAt_Business");
  strcpy((char *)&qword_25B2AF0, "At_Address");
  byte_25B2B1F = 11;
  byte_25B2B37 = 16;
  strcpy(byte_25B2B20, "At_Other_Contact");
  byte_25B2B4F = 4;
  strcpy((char *)&dword_25B2B38, "Home");
  byte_25B2B67 = 11;
  strcpy((char *)&qword_25B2B50 + 7, "Home");
  qword_25B2B50 = *(void *)&v264[16];
  byte_25B2B7F = 4;
  strcpy((char *)&dword_25B2B68, "Work");
  byte_25B2B97 = 11;
  strcpy((char *)&qword_25B2B80 + 7, "Work");
  qword_25B2B80 = *(void *)v264;
  byte_25B2BAF = 7;
  strcpy((char *)&dword_25B2B98, "Address");
  byte_25B2BC7 = 8;
  strcpy((char *)&qword_25B2BB0, "Business");
  byte_25B2BDF = 13;
  qword_25B2BC8 = *(void *)&v264[48];
  *(uint64_t *)((char *)&qword_25B2BC8 + 5) = *(void *)&v264[32];
  byte_25B2BD5 = 0;
  byte_25B2BF7 = 6;
  strcpy((char *)&dword_25B2BE0, "School");
  byte_25B2C0F = 13;
  strcpy((char *)&qword_25B2BF8, "ContactSchool");
  byte_25B2C27 = 14;
  strcpy((char *)&qword_25B2C10, "PersonLocation");
  qword_25B2C28 = (uint64_t)operator new(0x20uLL);
  xmmword_25B2C30 = v278;
  strcpy((char *)qword_25B2C28, "ContactCustomLabelAddress");
  if (byte_25B2987 < 0)
  {
    sub_4200(&xmmword_25B2C40, (void *)xmmword_25B2970, *((unint64_t *)&xmmword_25B2970 + 1));
  }
  else
  {
    xmmword_25B2C40 = xmmword_25B2970;
    qword_25B2C50 = unk_25B2980;
  }
  byte_25B2C6F = 16;
  strcpy((char *)&xmmword_25B2C58, "{PrevExitNumber}");
  byte_25B2C87 = 10;
  strcpy((char *)&qword_25B2C70, "{PrevRoad}");
  qword_25B2C88 = (uint64_t)operator new(0x20uLL);
  unk_25B2C90 = v279;
  strcpy((char *)qword_25B2C88, "{RouteTotalExpectedTime}");
  byte_25B2CB7 = 18;
  strcpy(byte_25B2CA0, "{ChargePercentage}");
  qword_25B2CB8 = (uint64_t)operator new(0x20uLL);
  unk_25B2CC0 = v273;
  strcpy((char *)qword_25B2CB8, "{RemainingChargePercentage}");
  byte_25B2CE7 = 16;
  strcpy(byte_25B2CD0, "{ChargeDuration}");
  byte_25B2CFF = 15;
  strcpy((char *)&qword_25B2CE8, "{ConnectorType}");
  byte_25B2D17 = 19;
  strcpy((char *)&xmmword_25B2D00, "{ChargeStationName}");
  byte_25B2D2F = 7;
  strcpy((char *)&dword_25B2D18, "{Power}");
  byte_25B2D47 = 13;
  strcpy((char *)&qword_25B2D30, "{VehicleName}");
  byte_25B2D5F = 18;
  strcpy((char *)&xmmword_25B2D48, "{AreaIncidentName}");
  byte_25B2D77 = 14;
  strcpy((char *)&qword_25B2D60, "{AreaIncident}");
  byte_25B2D8F = 16;
  strcpy((char *)&xmmword_25B2D78, "{AffectedRegion}");
  byte_25B2DA7 = 21;
  strcpy(byte_25B2D90, "{AreaIncidentWeblink}");
  byte_25B2DBF = 20;
  strcpy((char *)&xmmword_25B2DA8, "{AreaIncidentAgency}");
  byte_25B2DD7 = 11;
  strcpy((char *)&qword_25B2DC0, "{IssueTime}");
  byte_25B2DEF = 12;
  strcpy((char *)&qword_25B2DD8, "{UpdateTime}");
  byte_25B2E07 = 11;
  strcpy((char *)&qword_25B2DF0, "{IssueDate}");
  byte_25B2E1F = 12;
  strcpy((char *)&qword_25B2E08, "{UpdateDate}");
  qword_25B2E20 = (uint64_t)operator new(0x20uLL);
  unk_25B2E28 = v279;
  strcpy((char *)qword_25B2E20, "{AreaIncidentDataSource}");
  byte_25B2E4F = 13;
  strcpy((char *)&qword_25B2E38, "{AreaHectare}");
  byte_25B2E67 = 10;
  strcpy((char *)&qword_25B2E50, "{AreaAcre}");
  qword_25B2E68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B2E70 = v275;
  strcpy((char *)qword_25B2E68, "{WildfirePercentageContained}");
  qword_25B2E80 = (uint64_t)operator new(0x28uLL);
  unk_25B2E88 = v268[2];
  strcpy((char *)qword_25B2E80, "{WildfireExpectedContainmentDate}");
  qword_25B2E98 = (uint64_t)operator new(0x20uLL);
  unk_25B2EA0 = v277;
  strcpy((char *)qword_25B2E98, "{ServerRecommendedRouteName}");
  qword_25B2EB0 = (uint64_t)operator new(0x20uLL);
  unk_25B2EB8 = v277;
  strcpy((char *)qword_25B2EB0, "{ServerNonRecommendedRoute1}");
  qword_25B2EC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B2ED0 = v277;
  strcpy((char *)qword_25B2EC8, "{ServerNonRecommendedRoute2}");
  byte_25B2EF7 = 12;
  strcpy((char *)&qword_25B2EE0, "{ClientDest}");
  byte_25B2F0F = 6;
  strcpy((char *)&dword_25B2EF8, "{Name}");
  qword_25B2F10 = (uint64_t)operator new(0x20uLL);
  unk_25B2F18 = v268[1];
  strcpy((char *)qword_25B2F10, "ProactiveAlert_FasterRouteTitle");
  qword_25B2F28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B2F30 = v276;
  strcpy((char *)qword_25B2F28, "ProactiveAlert_RoadClosure");
  qword_25B2F40 = (uint64_t)operator new(0x30uLL);
  unk_25B2F48 = v271;
  strcpy((char *)qword_25B2F40, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25B2F58 = (uint64_t)operator new(0x28uLL);
  unk_25B2F60 = v274;
  strcpy((char *)qword_25B2F58, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25B2F70 = (uint64_t)operator new(0x28uLL);
  unk_25B2F78 = v274;
  strcpy((char *)qword_25B2F70, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25B2F88 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B2F90 = v274;
  strcpy((char *)qword_25B2F88, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25B2FA0 = (uint64_t)operator new(0x30uLL);
  unk_25B2FA8 = xmmword_20B93B0;
  strcpy((char *)qword_25B2FA0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25B2FCF = 17;
  strcpy(byte_25B2FB8, "Proactive_Driving");
  strcpy(&byte_25B2FE7, "\n{RouteName}");
  strcpy((char *)&qword_25B2FD0, "_RouteName");
  byte_25B2FFF = 11;
  qword_25B3000 = (uint64_t)operator new(0x28uLL);
  unk_25B3008 = v268[2];
  strcpy((char *)qword_25B3000, "Pass_Traffic_Light_Spoken_Primary");
  qword_25B3018 = (uint64_t)operator new(0x20uLL);
  unk_25B3020 = v275;
  strcpy((char *)qword_25B3018, "Pass_Stop_Sign_Spoken_Primary");
  unk_25B3030 = operator new(0x20uLL);
  unk_25B3038 = v268[0];
  strcpy(unk_25B3030, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25B305F, "\nBannerBody");
  strcpy(byte_25B3048, "BannerHead");
  strcpy(&byte_25B3077, "\nBannerDescription");
  byte_25B308F = 17;
  strcpy(&byte_25B30A7, "\n_Incident");
  strcpy((char *)&qword_25B3090, "VoiceAlert");
  strcpy(&byte_25B30BF, "\t_Area_Incident");
  byte_25B30D7 = 14;
  byte_25B30EF = 15;
  strcpy((char *)&qword_25B30D8, "_Area_Incidents");
  strcpy(&byte_25B3107, "\t_Crash");
  strcpy((char *)&qword_25B30F0, "_Accident");
  byte_25B311F = 6;
  byte_25B3137 = 16;
  strcpy((char *)&xmmword_25B3120, "_Congestion_Zone");
  strcpy(&byte_25B314F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25B3138, "_Toll_Zone");
  byte_25B3167 = 19;
  BYTE1(qword_25B3178) = 116;
  WORD1(qword_25B3178) = 0;
  HIDWORD(qword_25B3178) = 301989888;
  strcpy(byte_25B3180, "_Construction");
  strcpy((char *)&qword_25B3168, "_Incident_Accide");
  byte_25B3197 = 13;
  byte_25B31AF = 7;
  strcpy((char *)&dword_25B3198, "_Hazard");
  byte_25B31C7 = 12;
  strcpy((char *)&qword_25B31B0, "_LaneClosure");
  byte_25B31DF = 12;
  strcpy((char *)&qword_25B31C8, "_LaneTrailer");
  qmemcpy(&byte_25B31F7, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25B31E0, "_Shoulder");
  qword_25B3208 = 0x1500007200000000;
  *(void *)algn_25B3204 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25B3210, "_Causing_Traffic_Delay");
  HIBYTE(word_25B3226) = 22;
  byte_25B323F = 6;
  strcpy((char *)&dword_25B3228, "_Timed");
  byte_25B3257 = 12;
  strcpy((char *)&qword_25B3240, "_HasDistance");
  byte_25B326F = 8;
  strcpy((char *)&qword_25B3258, "_Closure");
  strcpy(&byte_25B3287, "\n_BadRoad");
  strcpy((char *)&qword_25B3270, "_NoReroute");
  byte_25B329F = 8;
  byte_25B32B7 = 12;
  strcpy((char *)&qword_25B32A0, "_TollTrailer");
  byte_25B32CF = 12;
  strcpy((char *)&qword_25B32B8, "_BestTrailer");
  byte_25B32E7 = 8;
  strcpy((char *)&qword_25B32D0, "_Trailer");
  byte_25B32FF = 18;
  strcpy((char *)&xmmword_25B32E8, "_Secondary_Trailer");
  byte_25B3317 = 8;
  strcpy((char *)&qword_25B3300, "_Savings");
  byte_25B332F = 8;
  strcpy((char *)&qword_25B3318, "_AltRoad");
  byte_25B3347 = 6;
  strcpy((char *)&dword_25B3330, "_Named");
  byte_25B335F = 6;
  strcpy((char *)&dword_25B3348, "_NAMED");
  byte_25B3377 = 22;
  strcpy((char *)&xmmword_25B3360, "_Named_Suggested_Route");
  qword_25B3390 = 0x1000000000000000;
  xmmword_25B3380 = xmmword_20E81D0;
  byte_25B33AF = 11;
  strcpy((char *)&qword_25B3398, "_Speed_Trap");
  byte_25B33C7 = 4;
  strcpy((char *)&dword_25B33B0, "_UGI");
  byte_25B33DF = 12;
  strcpy((char *)&qword_25B33C8, "_Safer_Route");
  qword_25B33E0 = (uint64_t)operator new(0x20uLL);
  unk_25B33E8 = v268[1];
  strcpy((char *)qword_25B33E0, "BlockedRouteByBlockingIncident_");
  qword_25B33F8 = (uint64_t)operator new(0x28uLL);
  long long v270 = xmmword_20B9280;
  unk_25B3400 = xmmword_20B9280;
  strcpy((char *)qword_25B33F8, "BlockedRouteByManeuverRestriction_");
  qword_25B3410 = (uint64_t)operator new(0x20uLL);
  unk_25B3418 = v268[0];
  strcpy((char *)qword_25B3410, "BlockedRouteByTimeRestriction_");
  qword_25B3428 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B3430 = xmmword_20B8FD0;
  strcpy((char *)qword_25B3428, "SuggestRouteToAvoidBlockingIncident_");
  qword_25B3440 = (uint64_t)operator new(0x30uLL);
  unk_25B3448 = xmmword_20B9380;
  strcpy((char *)qword_25B3440, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25B3458 = (uint64_t)operator new(0x30uLL);
  unk_25B3460 = xmmword_20B93E0;
  strcpy((char *)qword_25B3458, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25B3487 = 1;
  word_25B3470 = 95;
  strcpy((char *)&xmmword_25B3488, "IncidentsCausingDelay_");
  HIBYTE(word_25B349E) = 22;
  qword_25B34A0 = (uint64_t)operator new(0x19uLL);
  unk_25B34A8 = v280;
  strcpy((char *)qword_25B34A0, "NonVotableRoadIncident_");
  byte_25B34CF = 20;
  strcpy(byte_25B34B8, "VotableRoadIncident_");
  byte_25B34E7 = 13;
  strcpy((char *)&qword_25B34D0, "AreaIncident_");
  byte_25B34FF = 15;
  strcpy((char *)&qword_25B34E8, "CongestionZone_");
  qword_25B3500 = (uint64_t)operator new(0x20uLL);
  unk_25B3508 = v279;
  strcpy((char *)qword_25B3500, "EVModifiedChargingStops_");
  byte_25B352F = 13;
  strcpy((char *)&qword_25B3518, "EVDisconnect_");
  byte_25B3547 = 12;
  strcpy((char *)&qword_25B3530, "EVReconnect_");
  qword_25B3548 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B3550 = v277;
  strcpy((char *)qword_25B3548, "EVOfflineToOnlineTransition_");
  byte_25B3577 = 13;
  strcpy((char *)&qword_25B3560, "EVOfflineSAR_");
  byte_25B358F = 21;
  strcpy((char *)&xmmword_25B3578, "EVTowingNotSupported_");
  byte_25B35A7 = 18;
  strcpy(algn_25B3590, "EVInfeasibleRoute_");
  qword_25B35A8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25B35B0 = xmmword_20B8DF0;
  strcpy((char *)qword_25B35A8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25B35C0 = (uint64_t)operator new(0x40uLL);
  unk_25B35C8 = xmmword_20B98C0;
  strcpy((char *)qword_25B35C0, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25B35D8 = (uint64_t)operator new(0x30uLL);
  unk_25B35E0 = v272;
  strcpy((char *)qword_25B35D8, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v268, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v268));
  qword_25B35F0 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v264[50] = 0;
  *(_DWORD *)&v264[52] = 0;
  *(void *)&v264[56] = 0x8000000000000030;
  unk_25B35F8 = xmmword_20B9A80;
  strcpy((char *)qword_25B35F0, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v264, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25B3608 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25B3610 = v271;
  strcpy((char *)qword_25B3608, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  uint64_t v186 = operator new(0x30uLL);
  qword_25B3620 = (uint64_t)v186;
  unk_25B3628 = v272;
  *uint64_t v186 = v268[2];
  v186[1] = v268[1];
  *(_OWORD *)((char *)v186 + 28) = v268[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25B3638 = (uint64_t)operator new(0x28uLL);
  unk_25B3640 = v270;
  strcpy((char *)qword_25B3638, "SuggestDetourWithHigherArrivalSOC_");
  int v187 = operator new(0x30uLL);
  qword_25B3650 = (uint64_t)v187;
  unk_25B3658 = *(_OWORD *)&v264[48];
  *int v187 = *(_OWORD *)&v264[32];
  v187[1] = *(_OWORD *)&v264[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v264;
  *((unsigned char *)v187 + 46) = 0;
  qword_25B3668 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B3670 = v274;
  strcpy((char *)qword_25B3668, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25B3680 = (uint64_t)operator new(0x28uLL);
  unk_25B3688 = v267;
  strcpy((char *)qword_25B3680, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25B3698 = (uint64_t)operator new(0x20uLL);
  unk_25B36A0 = v279;
  strcpy((char *)qword_25B3698, "OfflineToOnlineNewRoute_");
  qword_25B36B0 = (uint64_t)operator new(0x40uLL);
  unk_25B36B8 = xmmword_20B98C0;
  strcpy((char *)qword_25B36B0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25B36DF = 20;
  strcpy(byte_25B36C8, "LPR_OFFLINE_REROUTE_");
  byte_25B36F7 = 16;
  strcpy((char *)&xmmword_25B36E0, "LPR_OFFLINE_SAR_");
  byte_25B370F = 20;
  strcpy(byte_25B36F8, "LPR_OFFLINE_REROUTE_");
  byte_25B3727 = 16;
  strcpy((char *)&xmmword_25B3710, "LPR_OFFLINE_SAR_");
  byte_25B373F = 19;
  strcpy(byte_25B3728, "SuggestFasterRoute_");
  qword_25B3740 = (char *)operator new(0x20uLL);
  xmmword_25B3748 = v278;
  strcpy(qword_25B3740, "AreaIncidentSaferReroute_");
  byte_25B376F = 12;
  strcpy((char *)&qword_25B3758, "_Remove_Stop");
  byte_25B3787 = 13;
  strcpy((char *)&qword_25B3770, "_Remove_Stops");
  strcpy(&byte_25B379F, "\t_Add_Stops");
  strcpy((char *)&qword_25B3788, "_Add_Stop");
  strcpy(&byte_25B37B7, "\n_Change_Route");
  byte_25B37CF = 13;
  byte_25B37E7 = 15;
  strcpy((char *)&qword_25B37D0, "_Different_Stop");
  byte_25B37FF = 16;
  strcpy((char *)&xmmword_25B37E8, "_Different_Stops");
  byte_25B3817 = 15;
  strcpy((char *)&qword_25B3800, "_EV_Remove_Stop");
  byte_25B382F = 16;
  strcpy((char *)&xmmword_25B3818, "_EV_Remove_Stops");
  byte_25B3847 = 12;
  strcpy((char *)&qword_25B3830, "_EV_Add_Stop");
  byte_25B385F = 13;
  strcpy((char *)&qword_25B3848, "_EV_Add_Stops");
  byte_25B3877 = 15;
  strcpy((char *)&qword_25B3860, "_EV_Low_Battery");
  byte_25B388F = 14;
  strcpy((char *)&qword_25B3878, "_EV_Infeasible");
  byte_25B38A7 = 15;
  strcpy((char *)&qword_25B3890, "_EV_Last_Chance");
  qword_25B38A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B38B0 = v279;
  strcpy((char *)qword_25B38A8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25B37A8;
  qword_25B38C0 = (uint64_t)operator new(0x20uLL);
  unk_25B38C8 = v278;
  strcpy((char *)qword_25B38C0, "_EV_Low_Battery_Add_Stops");
  qword_25B38D8 = (uint64_t)operator new(0x19uLL);
  unk_25B38E0 = v280;
  strcpy((char *)qword_25B38D8, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25B37B7;
  if (byte_25B37B7 >= 0) {
    size_t v190 = byte_25B37B7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    long long v196 = (char *)operator new(v194 + 1);
    qword_25B38F8 = v190 + 14;
    unk_25B3900 = v195 | 0x8000000000000000;
    qword_25B38F0 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25B38F8) = 0;
    WORD1(qword_25B38F8) = 0;
    HIDWORD(qword_25B38F8) = 0;
    unk_25B3900 = 0;
    byte_25B3907 = v190 + 14;
    strcpy((char *)&qword_25B38F0, "_EV_Infe");
    char v192 = (char *)&qword_25B38F8 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25B37A0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  int v198 = (char *)operator new(0x20uLL);
  qword_25B3908 = (uint64_t)v198;
  *(_OWORD *)algn_25B3910 = v279;
  *(void *)int v198 = qword_25B3890;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25B3890 + 7);
  *(void *)(v198 + 15) = qword_25B3788;
  v198[23] = word_25B3790;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    std::string v200 = (uint64_t *)operator new(v201 + 1);
    qword_25B3928 = v190 + 15;
    unk_25B3930 = v202 | 0x8000000000000000;
    qword_25B3920 = (uint64_t)v200;
  }
  else
  {
    std::string v200 = &qword_25B3920;
    qword_25B3928 = 0;
    unk_25B3930 = 0;
    qword_25B3920 = 0;
    byte_25B3937 = v190 + 15;
  }
  uint64_t *v200 = qword_25B3890;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25B3890 + 7);
  long long v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_25B37A0;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_25B37A0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25B394F = 17;
  strcpy((char *)&xmmword_25B3938, "_EV_Forced_Detour");
  qword_25B3950 = (uint64_t)operator new(0x20uLL);
  unk_25B3958 = v278;
  strcpy((char *)qword_25B3950, "_EV_Higher_Arrival_Charge");
  qword_25B3968 = (uint64_t)operator new(0x28uLL);
  unk_25B3970 = xmmword_20B8FD0;
  strcpy((char *)qword_25B3968, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25B3997 = 16;
  strcpy(byte_25B3980, "_EV_Out_Of_Range");
  qword_25B3998 = (uint64_t)operator new(0x20uLL);
  unk_25B39A0 = v273;
  strcpy((char *)qword_25B3998, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25B39B0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25B39C6) = 22;
  qword_25B39C8 = (uint64_t)operator new(0x19uLL);
  unk_25B39D0 = v280;
  strcpy((char *)qword_25B39C8, "_EV_Forced_Modify_Stops");
  byte_25B39F7 = 19;
  strcpy(byte_25B39E0, "_EV_Forced_Add_Stop");
  byte_25B3A0F = 20;
  strcpy((char *)&xmmword_25B39F8, "_EV_Forced_Add_Stops");
  byte_25B3A27 = 21;
  strcpy(byte_25B3A10, "_EV_Battery_Info_Lost");
  qword_25B3A28 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B3A30 = v278;
  strcpy((char *)qword_25B3A28, "_EV_Battery_Info_Restored");
  qword_25B3A40 = (uint64_t)operator new(0x20uLL);
  unk_25B3A48 = v279;
  strcpy((char *)qword_25B3A40, "_EV_Towing_Not_Supported");
  qword_25B3A58 = (uint64_t)operator new(0x28uLL);
  unk_25B3A60 = v269;
  strcpy((char *)qword_25B3A58, "_EV_Offline_to_Online_Transition");
  byte_25B3A87 = 15;
  strcpy((char *)&qword_25B3A70, "_EV_Offline_SAR");
  qword_25B3A88 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B3A90 = v277;
  strcpy((char *)qword_25B3A88, "_Offline_to_Online_New_Route");
  byte_25B3AB7 = 12;
  strcpy((char *)&qword_25B3AA0, "BannerButton");
  byte_25B3ACF = 8;
  strcpy((char *)&qword_25B3AB8, "_Dismiss");
  byte_25B3AE7 = 3;
  word_25B3AD0 = 20319;
  byte_25B3AD2 = 75;
  byte_25B3AD3 = 0;
  byte_25B3AFF = 11;
  strcpy((char *)&qword_25B3AE8, "_Still_Here");
  byte_25B3B17 = 8;
  strcpy((char *)&qword_25B3B00, "_Cleared");
  qmemcpy(&byte_25B3B2F, "\nBannerButton", 13);
  strcpy((char *)&qword_25B3B18, "_No_Thanks");
  uint64_t v205 = qword_25B3AA8;
  qword_25B3B40 = 0x1400000000000000;
  *(void *)algn_25B3B3C = 0x7373696D7369445FLL;
  qword_25B3B58 = 0xF00000000000000;
  qword_25B3B50 = 0x4B4F5F6E6F7474;
  int v206 = byte_25B3847;
  if (byte_25B3847 >= 0) {
    size_t v207 = byte_25B3847;
  }
  else {
    size_t v207 = qword_25B3838;
  }
  unint64_t v208 = v207 + 12;
  qword_25B3B48 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    int v212 = (char *)operator new(v210 + 1);
    qword_25B3B68 = v207 + 12;
    unk_25B3B70 = v211 | 0x8000000000000000;
    qword_25B3B60 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)int v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25B3B68) = 0;
    HIWORD(qword_25B3B68) = 0;
    unk_25B3B70 = 0;
    byte_25B3B77 = v207 + 12;
    strcpy((char *)&qword_25B3B60, "BannerButton");
    uint64_t v209 = (char *)&qword_25B3B68 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_25B3830;
  }
  else {
    int v213 = (uint64_t *)qword_25B3830;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25B385F;
  if (byte_25B385F >= 0) {
    size_t v215 = byte_25B385F;
  }
  else {
    size_t v215 = unk_25B3850;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    int v220 = (char *)operator new(v218 + 1);
    qword_25B3B80 = v215 + 12;
    unk_25B3B88 = v219 | 0x8000000000000000;
    qword_25B3B78 = (uint64_t)v220;
    *(void *)int v220 = qword_25B3AA0;
    *((_DWORD *)v220 + 2) = qword_25B3AA8;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_25B3B80 = 0;
    unk_25B3B88 = 0;
    byte_25B3B8F = v215 + 12;
    LODWORD(qword_25B3B80) = qword_25B3AA8;
    qword_25B3B78 = qword_25B3AA0;
    uint64_t v217 = (char *)&qword_25B3B80 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_25B3848;
  }
  else {
    int v221 = (uint64_t *)qword_25B3848;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25B3817;
  if (byte_25B3817 >= 0) {
    size_t v223 = byte_25B3817;
  }
  else {
    size_t v223 = unk_25B3808;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_25B3B98 = v223 + 12;
    unk_25B3BA0 = v227 | 0x8000000000000000;
    qword_25B3B90 = (uint64_t)v228;
    *(void *)v228 = qword_25B3AA0;
    *((_DWORD *)v228 + 2) = qword_25B3AA8;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_25B3B98 = 0;
    unk_25B3BA0 = 0;
    byte_25B3BA7 = v223 + 12;
    LODWORD(qword_25B3B98) = qword_25B3AA8;
    qword_25B3B90 = qword_25B3AA0;
    uint64_t v225 = (char *)&qword_25B3B98 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_25B3800;
  }
  else {
    int v229 = (uint64_t *)qword_25B3800;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25B3AB7;
  if (byte_25B3AB7 >= 0) {
    size_t v231 = byte_25B3AB7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25B382F;
  if (byte_25B382F >= 0) {
    size_t v233 = byte_25B382F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25B3818 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_25B3BA8;
    qword_25B3BB0 = 0;
    unk_25B3BB8 = 0;
    qword_25B3BA8 = 0;
    byte_25B3BBF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_25B3BB0 = v233 + v231;
  unk_25B3BB8 = v243 | 0x8000000000000000;
  qword_25B3BA8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      uint64_t v236 = &qword_25B3AA0;
    }
    else {
      uint64_t v236 = (uint64_t *)qword_25B3AA0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_25B3818;
    }
    else {
      unint64_t v238 = (long long *)xmmword_25B3818;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_25B3BC8 = v231 + 11;
    unk_25B3BD0 = v245 | 0x8000000000000000;
    qword_25B3BC0 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_25B3BC0;
    qword_25B3BC8 = 0;
    unk_25B3BD0 = 0;
    qword_25B3BC0 = 0;
    byte_25B3BD7 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25B3BC0 + 7) = *(_DWORD *)((char *)&qword_25B3AE8 + 7);
      qword_25B3BC0 = qword_25B3AE8;
      BYTE3(qword_25B3BC8) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    long long v246 = &qword_25B3AA0;
  }
  else {
    long long v246 = (uint64_t *)qword_25B3AA0;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25B3AE8 + 7);
  *(void *)int v247 = qword_25B3AE8;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    long long v249 = &qword_25B3BD8;
    qword_25B3BE0 = 0;
    unk_25B3BE8 = 0;
    qword_25B3BD8 = 0;
    byte_25B3BEF = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v262 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v262 = v241 | 7;
  }
  uint64_t v263 = v262 + 1;
  long long v249 = (uint64_t *)operator new(v262 + 1);
  qword_25B3BE0 = v231 + 8;
  unk_25B3BE8 = v263 | 0x8000000000000000;
  qword_25B3BD8 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      uint64_t v250 = &qword_25B3AA0;
    }
    else {
      uint64_t v250 = (uint64_t *)qword_25B3AA0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_25B3B00;
  v251[8] = 0;
  int v252 = byte_25B3B2F;
  if (byte_25B3B2F >= 0) {
    size_t v253 = byte_25B3B2F;
  }
  else {
    size_t v253 = qword_25B3B20;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    long long v255 = &qword_25B3BF0;
    qword_25B3BF8 = 0;
    unk_25B3C00 = 0;
    qword_25B3BF0 = 0;
    byte_25B3C07 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v260 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v260 = v254 | 7;
  }
  uint64_t v261 = v260 + 1;
  long long v255 = (uint64_t *)operator new(v260 + 1);
  qword_25B3BF8 = v253 + v231;
  unk_25B3C00 = v261 | 0x8000000000000000;
  qword_25B3BF0 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      long long v256 = &qword_25B3AA0;
    }
    else {
      long long v256 = (uint64_t *)qword_25B3AA0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  long long v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      long long v258 = &qword_25B3B18;
    }
    else {
      long long v258 = (uint64_t *)qword_25B3B18;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25B3C1F, "\n{newroute}");
  strcpy((char *)&qword_25B3C08, "{roadname}");
  strcpy(&byte_25B3C37, "\n{count}");
  byte_25B3C4F = 7;
  strcpy(&byte_25B3C67, "\n{dur}");
  strcpy((char *)&qword_25B3C50, "{duration}");
  byte_25B3C7F = 5;
  qword_25B3C80 = (uint64_t)operator new(0x20uLL);
  unk_25B3C88 = v276;
  strcpy((char *)qword_25B3C80, "{PleaseProceedWithCaution}");
  byte_25B3CAF = 15;
  strcpy((char *)&qword_25B3C98, "{UserRouteName}");
  byte_25B3CC7 = 20;
  strcpy((char *)&xmmword_25B3CB0, "{SuggestedRouteName}");
  byte_25B3CDF = 18;
  strcpy(byte_25B3CC8, "Speed_Camera_Ahead");
  qword_25B3CE0 = (uint64_t)operator new(0x20uLL);
  unk_25B3CE8 = v275;
  strcpy((char *)qword_25B3CE0, "Red_Light_Camera_Ahead_Spoken");
  qword_25B3CF8 = (uint64_t)operator new(0x20uLL);
  unk_25B3D00 = v275;
  strcpy((char *)qword_25B3CF8, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25B3D10 = (uint64_t)operator new(0x28uLL);
  unk_25B3D18 = v270;
  strcpy((char *)qword_25B3D10, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25B3D28 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B3D30 = v265;
  strcpy((char *)qword_25B3D28, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25B3D40 = (uint64_t)operator new(0x20uLL);
  unk_25B3D48 = v277;
  strcpy((char *)qword_25B3D40, "Camera_Ahead_Multiple_Spoken");
  qword_25B3D58 = (uint64_t)operator new(0x30uLL);
  unk_25B3D60 = v266;
  strcpy((char *)qword_25B3D58, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25B3D70 = (char *)operator new(0x30uLL);
  strcpy(qword_25B3D70, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25B3D9F = 16;
  xmmword_25B3D78 = v266;
  strcpy(byte_25B3D88, "_Speed_Limit_Mph");
  byte_25B3DB7 = 16;
  strcpy(byte_25B3DA0, "_Speed_Limit_Kph");
  byte_25B3DCF = 11;
  strcpy((char *)&qword_25B3DB8, "Watch_Speed");
  byte_25B3DE7 = 4;
  strcpy((char *)&dword_25B3DD0, "_One");
  byte_25B3DFF = 4;
  strcpy((char *)&dword_25B3DE8, "_Two");
  byte_25B3E17 = 4;
  strcpy((char *)&dword_25B3E00, "_Few");
  byte_25B3E2F = 5;
  strcpy((char *)&dword_25B3E18, "_Many");
  byte_25B3E47 = 6;
  strcpy((char *)&dword_25B3E30, "_Other");
  byte_25B3E5F = 4;
  strcpy((char *)&dword_25B3E48, "_ONE");
  byte_25B3E77 = 7;
  strcpy((char *)&dword_25B3E60, "{Speed}");
  byte_25B3E8F = 8;
  strcpy((char *)&qword_25B3E78, "Dismount");
  byte_25B3EA7 = 4;
  strcpy((char *)&dword_25B3E90, "Walk");
  byte_25B3EBF = 5;
  strcpy((char *)&dword_25B3EA8, "Mount");
  byte_25B3ED7 = 7;
  strcpy((char *)&dword_25B3EC0, "Remount");
  strcpy(&byte_25B3EEF, "\t_Crosswalk");
  strcpy((char *)&qword_25B3ED8, "Walk_Road");
  strcpy(&byte_25B3F07, "\n_PLURAL");
  byte_25B3F1F = 7;
  strcpy(&byte_25B3F37, "\n{description1}");
  strcpy((char *)&qword_25B3F20, "_SECONDARY");
  byte_25B3F4F = 14;
  byte_25B3F67 = 14;
  strcpy((char *)&qword_25B3F50, "{description2}");
  byte_25B3F7F = 21;
  strcpy((char *)&xmmword_25B3F68, "TWO_ROAD_DESCRIPTIONS");
  byte_25B3F97 = 17;
  strcpy((char *)&xmmword_25B3F80, "{SlopePercentage}");
  byte_25B3FAF = 15;
  strcpy((char *)&qword_25B3F98, "_Protected_Lane");
  strcpy(&byte_25B3FC7, "\n_Paved_Path");
  strcpy((char *)&qword_25B3FB0, "_Bike_Path");
  byte_25B3FDF = 11;
  byte_25B3FF7 = 15;
  strcpy((char *)&qword_25B3FE0, "_Dedicated_Lane");
  byte_25B400F = 12;
  strcpy((char *)&qword_25B3FF8, "_Shared_Path");
  strcpy(&byte_25B4027, "\n_UnnamedRoad");
  strcpy((char *)&qword_25B4010, "_Bike_Lane");
  byte_25B403F = 12;
  byte_25B4057 = 5;
  strcpy((char *)&dword_25B4040, "_Path");
  byte_25B406F = 6;
  strcpy((char *)&dword_25B4058, "_Trail");
  strcpy(&byte_25B4087, "\t_Plaza");
  strcpy((char *)&qword_25B4070, "_Sidewalk");
  byte_25B409F = 6;
  byte_25B40B7 = 15;
  strcpy((char *)&qword_25B40A0, "_Moving_Walkway");
  byte_25B40CF = 14;
  strcpy((char *)&qword_25B40B8, "Two_Stage_Turn");
  byte_25B40E7 = 16;
  strcpy((char *)&xmmword_25B40D0, "{OptionalPeriod}");
  byte_25B40FF = 18;
  strcpy((char *)&xmmword_25B40E8, "Advisory_Separator");
  byte_25B4117 = 6;
  strcpy((char *)&dword_25B4100, "Period");
  byte_25B412F = 21;
  strcpy((char *)&xmmword_25B4118, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25B4130, "Advisory_Title_Notices");
  HIBYTE(word_25B4146) = 22;
  byte_25B415F = 7;
  strcpy((char *)&dword_25B4148, "_DETAIL");
  byte_25B4177 = 17;
  strcpy((char *)&xmmword_25B4160, "_LONG_REGION_LIST");
  byte_25B418F = 16;
  strcpy((char *)&xmmword_25B4178, "Advisory_Grouped");
  byte_25B41A7 = 11;
  strcpy((char *)&qword_25B4190, "_Advisories");
  qword_25B41A8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B41B0 = v273;
  strcpy((char *)qword_25B41A8, "Advisory_WILDFIRE_METADATA_");
  byte_25B41D7 = 8;
  strcpy((char *)&qword_25B41C0, "Advisory");
  byte_25B41EF = 13;
  strcpy((char *)&qword_25B41D8, "MPR_NUM_STOPS");
  byte_25B4207 = 17;
  strcpy(algn_25B41F0, "EV_CHARGE_STATION");
  byte_25B421F = 11;
  strcpy((char *)&qword_25B4208, "_NAMED_CITY");
  byte_25B4237 = 5;
  strcpy((char *)&dword_25B4220, "_Stop");
  strcpy(&byte_25B424F, "\n{StopsCount}");
  strcpy((char *)&qword_25B4238, "{CityName}");
  byte_25B4267 = 12;
  byte_25B427F = 11;
  strcpy((char *)&qword_25B4268, "_With_Other");
  byte_25B4297 = 15;
  strcpy((char *)&qword_25B4280, "{DepartureTime}");
  qword_25B4298 = (uint64_t)operator new(0x28uLL);
  unk_25B42A0 = v274;
  strcpy((char *)qword_25B4298, "Ending_Charge_Station_Port_Availability");
  qword_25B42B0 = (uint64_t)operator new(0x28uLL);
  unk_25B42B8 = v267;
  strcpy((char *)qword_25B42B0, "Ending_Charge_Station_No_Availability");
  qword_25B42C8 = (uint64_t)operator new(0x28uLL);
  unk_25B42D0 = v270;
  strcpy((char *)qword_25B42C8, "Ending_Charge_Station_No_Real_Time");
  byte_25B42F7 = 16;
  strcpy(byte_25B42E0, "{AvailablePorts}");
  byte_25B430F = 12;
  strcpy((char *)&qword_25B42F8, "{TotalPorts}");
  byte_25B4327 = 14;
  strcpy((char *)&qword_25B4310, "{ManeuverIcon}");
  qword_25B4328 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25B4330 = xmmword_20B9A60;
  strcpy((char *)qword_25B4328, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25B4340 = (uint64_t)operator new(0x20uLL);
  unk_25B4348 = v273;
  strcpy((char *)qword_25B4340, "Walking_Destination_Unnamed");
  qword_25B4358 = (uint64_t)operator new(0x20uLL);
  unk_25B4360 = v275;
  strcpy((char *)qword_25B4358, "TrafficDelay_Label_Title_Sign");
  qword_25B4370 = (uint64_t)operator new(0x20uLL);
  unk_25B4378 = v277;
  strcpy((char *)qword_25B4370, "Special_Guidance_Instruction");
  byte_25B439F = 2;
  strcpy((char *)&word_25B4388, "CZ");
  byte_25B43B7 = 3;
  dword_25B43A0 = 5919811;
  unk_25B43CF = 3;
  dword_25B43B8 = 6243649;
  byte_25B43E7 = 0;
  byte_25B43FF = 7;
  strcpy((char *)&dword_25B43E8, "TRANSIT");
  byte_25B4417 = 7;
  strcpy((char *)&dword_25B4400, "OFFLINE");
  qword_25B4418 = (uint64_t)operator new(0x28uLL);
  unk_25B4420 = v265;
  strcpy((char *)qword_25B4418, "Advisory_Card_French_Climate_Law_Title");
  qword_25B4430 = (uint64_t)operator new(0x30uLL);
  unk_25B4438 = xmmword_20B93C0;
  strcpy((char *)qword_25B4430, "Advisory_Card_French_Climate_Law_Details");
  qword_25B4448 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25B4450 = v271;
  strcpy((char *)qword_25B4448, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25B4460 = (uint64_t)operator new(0x20uLL);
  unk_25B4468 = v277;
  strcpy((char *)qword_25B4460, "{ClimateLawLearnMoreWeblink}");
  byte_25B448F = 3;
  dword_25B4478 = 4280902;
  qword_25B4490 = (uint64_t)operator new(0x70uLL);
  unk_25B4498 = xmmword_20E81E0;
  strcpy((char *)qword_25B4490, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  return *(double *)"ut-2021-climat-et-resilience-convention-citoyenne-climat";
}

void sub_76E548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_37:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_38:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_39:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_40:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_41:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_42:
                if (a72 < 0)
                {
LABEL_43:
                  operator delete(a71);
                  if (a70 < 0)
                  {
LABEL_44:
                    operator delete(a65);
                    _Unwind_Resume(a1);
                  }
LABEL_45:
                  _Unwind_Resume(a1);
                }
LABEL_35:
                if (a70 < 0) {
                  goto LABEL_44;
                }
                goto LABEL_45;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0) {
                goto LABEL_43;
              }
              goto LABEL_35;
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_42;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_39;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_37;
  }
  goto LABEL_29;
}

uint64_t *sub_76E81C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = sub_3750CC(a2);
  a1[1] = a3;
  sub_3EAFD4(a1 + 2, a2, *(unsigned __int8 *)(a3 + 1227));
  sub_73ACFC(a1 + 7, a2);
  sub_103E2B8(a1 + 497, *(unsigned __int8 *)(a3 + 1227), a2);
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "RouteIncidentMatcher");
  std::string v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v18, (uint64_t *)&v15);
  sub_3CB370(v6, 0, 0, __p);
  sub_7705EC((uint64_t)(a1 + 1144), __p);
  long long v7 = v20;
  if (v20)
  {
    do
    {
      int v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      long long v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v15;
  if (v15)
  {
    size_t v10 = v16;
    int v11 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v15;
    }
    uint64_t v16 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  size_t v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 4u, *(_DWORD *)(a3 + 968), a1 + 1145);
  sub_3CDA7C(a1 + 1147, (uint64_t)a2);
  return a1;
}

void sub_76E9D8(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_3A6230(v2);
  sub_76EA70(v1);
  _Unwind_Resume(a1);
}

void sub_76E9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3A6230(v20);
  sub_76EA70(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_76EA70(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 3896);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_76EB44(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = sub_46C760(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    sub_76ED30(a1, a2, (uint64_t *)&v19);
    sub_77B0F4(a3, a3[1], (uint64_t)v19, (uint64_t)v20, 0xAF8AF8AF8AF8AF8BLL * ((v20 - (unsigned char *)v19) >> 5));
    sub_76F2FC();
    sub_77B0F4(a3, a3[1], (uint64_t)__p, (uint64_t)v18, 0xAF8AF8AF8AF8AF8BLL * ((v18 - (unsigned char *)__p) >> 5));
    uint64_t v16 = a2;
    sub_76FCB4(a3, (uint64_t *)&v16);
    unint64_t v7 = a3[1];
    unint64_t v8 = 126 - 2 * __clz(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v7 - *a3) >> 5));
    if (v7 == *a3) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8;
    }
    sub_77B498(*a3, v7, (uint64_t)&v16, v9, 1);
    size_t v10 = __p;
    if (__p)
    {
      int v11 = v18;
      int v12 = __p;
      if (v18 != __p)
      {
        do
          int v11 = (unsigned char *)sub_3A6B94((uint64_t)(v11 - 1120));
        while (v11 != v10);
        int v12 = __p;
      }
      std::string v18 = v10;
      operator delete(v12);
    }
    size_t v13 = v19;
    if (v19)
    {
      unint64_t v14 = v20;
      std::string v15 = v19;
      if (v20 != v19)
      {
        do
          unint64_t v14 = (unsigned char *)sub_3A6B94((uint64_t)(v14 - 1120));
        while (v14 != v13);
        std::string v15 = v19;
      }
      std::string::size_type v20 = v13;
      operator delete(v15);
    }
  }
}

void sub_76ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  size_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  sub_50E790(v3);
  _Unwind_Resume(a1);
}

void sub_76ECFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_50E790((void **)va);
  sub_50E790(v6);
  _Unwind_Resume(a1);
}

void sub_76ED1C(_Unwind_Exception *a1)
{
  sub_50E790(v1);
  _Unwind_Resume(a1);
}

void sub_76ED30(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 1453))
  {
    uint64_t v40 = a1 + 9152;
    int v5 = *(unsigned __int8 *)(a1 + 9152);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v5)
    {
      sub_3EC020(a1 + 16, a2, &v55);
      long long v52 = 0u;
      long long v53 = 0u;
      int v54 = 1065353216;
      uint64_t v7 = v55;
      uint64_t v8 = v56;
      if (v55 != v56)
      {
        do
        {
          sub_24AFC((uint64_t)&v52, *v7 + 40, *v7 + 40);
          v7 += 5;
        }
        while (v7 != v8);
        uint64_t v9 = v55;
        for (uint64_t i = v56; v9 != i; v9 += 5)
        {
          size_t v10 = (void *)(*(void *)(a1 + 8) + 1032);
          LODWORD(v48[0]) = 0;
          if ((sub_3D063C(a1 + 9176, v9, v10, v48) & 1) == 0)
          {
            if ((uint64_t v12 = *v9, !*(unsigned char *)(v40 + 2))
              || *(_DWORD *)v9[1]
              || ((v13 = *(_DWORD *)(v12 + 144), int v14 = *(_DWORD *)(a1 + 9156), v15 = sub_46CF04((uint64_t)a2), v14 < 0)
                ? (char v16 = -5)
                : (char v16 = 5),
                  (int v17 = 103 * (char)(v16 + v14 % 10),
                   (int)(v14 / 10 + v13 + ((v17 >> 15) & 1) + (v17 >> 10)) >= v15)
               || *(unsigned char *)v9[4] != 1))
            {
              uint64_t v51 = sub_46CE10(a2, 0, 1, *(unsigned int *)v9[1], 0, v11);
              sub_6F85DC((const std::string **)(v12 + 64), *(void *)(a1 + 8) + 968, (uint64_t)v49);
              unint64_t v18 = a3[1];
              if (v18 >= a3[2])
              {
                uint64_t v19 = sub_77DAC8(a3, &v51, v12, (uint64_t)v49, (int *)v9[1]);
              }
              else
              {
                sub_77DC84((uint64_t)(a3 + 2), a3[1], &v51, v12, (uint64_t)v49, (int *)v9[1]);
                uint64_t v19 = v18 + 1120;
                a3[1] = v18 + 1120;
              }
              a3[1] = v19;
              uint64_t v43 = *v9;
              long long v45 = 0;
              int v46 = 0;
              long long __p = 0;
              int v21 = (unsigned char *)v9[1];
              std::string::size_type v20 = (unsigned char *)v9[2];
              int64_t v22 = v20 - v21;
              if (v20 != v21)
              {
                if (v22 < 0) {
                  sub_2E00();
                }
                long long __p = operator new(v20 - v21);
                long long v45 = __p;
                int v23 = (char *)__p + 16 * (v22 >> 4);
                int v46 = v23;
                memcpy(__p, v21, v22);
                long long v45 = v23;
              }
              uint64_t v47 = v9[4];
              sub_76FE40(a1, &v43, (uint64_t)v48);
              sub_4C2164(v19 - 440, (uint64_t)v48);
              sub_3A6CB8((uint64_t)v48);
              if (__p)
              {
                long long v45 = __p;
                operator delete(__p);
              }
              if (!*(unsigned char *)(v19 - 8))
              {
                exception = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              if (sub_6044E4(v19 - 440))
              {
                uint64_t v24 = *(void *)(a1 + 9160);
                strcpy((char *)v48, "Wildfire_area_incident");
                HIBYTE(v48[2]) = 22;
                size_t v25 = (const std::string *)sub_8D7730(v24, (uint64_t)v48);
                std::string::operator=((std::string *)(v19 - 680), v25);
                if (SHIBYTE(v48[2]) < 0) {
                  operator delete(v48[0]);
                }
              }
              uint64_t v26 = *(void *)a1;
              uint64_t v27 = sub_46C8EC(a2, *(unsigned int *)v9[1]);
              sub_2954EC(v26, *(void *)(v27 + 32), (uint64_t)v48);
              sub_2E4B5C((uint64_t)v48, v42);
              if (v48[1])
              {
                v48[2] = v48[1];
                operator delete(v48[1]);
              }
              uint64_t v28 = v19 - 1120;
              uint64_t v29 = *(void *)v42[0];
              *(_DWORD *)(v28 + 36) = *((_DWORD *)v42[0] + 2);
              *(void *)(v28 + 28) = v29;
              if (v42[0])
              {
                v42[1] = v42[0];
                operator delete(v42[0]);
              }
              if (v50 < 0) {
                operator delete(v49[0]);
              }
            }
          }
        }
      }
      uint64_t v30 = sub_77DD98(*a3, a3[1], a3);
      uint64_t v31 = a3[1];
      if (v31 != v30)
      {
        while (v31 != v30)
        {
          v31 -= 1120;
          sub_3A6B94(v31);
        }
        a3[1] = v30;
      }
      size_t v32 = (void **)v53;
      if ((void)v53)
      {
        do
        {
          uint64_t v37 = (void **)*v32;
          if (*((char *)v32 + 39) < 0) {
            operator delete(v32[2]);
          }
          operator delete(v32);
          size_t v32 = v37;
        }
        while (v37);
      }
      unint64_t v33 = (void *)v52;
      *(void *)&long long v52 = 0;
      if (v33) {
        operator delete(v33);
      }
      long long v34 = v55;
      if (v55)
      {
        uint64_t v35 = v56;
        uint64_t v36 = v55;
        if (v56 != v55)
        {
          do
          {
            unint64_t v38 = (void *)*(v35 - 4);
            if (v38)
            {
              *(v35 - 3) = v38;
              operator delete(v38);
            }
            v35 -= 5;
          }
          while (v35 != v34);
          uint64_t v36 = v55;
        }
        std::string::size_type v56 = v34;
        operator delete(v36);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_76F234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_3A4C2C(v27 - 160);
  sub_3EE4A4((void **)(v27 - 112));
  sub_50E790(v26);
  _Unwind_Resume(a1);
}

void sub_76F2FC()
{
  uint64_t v0 = __chkstk_darwin();
  int v4 = v3;
  if (!*(unsigned char *)(v0 + 9153))
  {
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    return;
  }
  int v5 = v1;
  uint64_t v6 = v0;
  long long v96 = 0u;
  long long v97 = 0u;
  int v98 = 1065353216;
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = 0;
  uint64_t v72 = sub_487A58(v2);
  int v95 = sub_46CF04((uint64_t)v5);
  sub_46B058();
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  sub_46B060();
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  uint64_t v75 = 0;
  uint64_t v76 = (uint64_t)v8;
  uint64_t v71 = v11;
  uint64_t v68 = (uint64_t)(v4 + 2);
  size_t v69 = v5;
  unint64_t v70 = v13;
  unint64_t v73 = v4;
  while (1)
  {
    if (v8)
    {
      unint64_t v15 = sub_46C760(v8);
      BOOL v16 = v10 < v15;
      if (!v12)
      {
        if (v10 >= v15) {
          goto LABEL_103;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_103;
      }
      BOOL v16 = 0;
    }
    unint64_t v17 = sub_46C760(v12);
    if (v14 >= v17 || !v16) {
      break;
    }
    uint64_t v19 = sub_46C8EC(v8, v10);
    if (v19 == sub_46C8EC(v12, v14)) {
      goto LABEL_103;
    }
LABEL_17:
    std::string::size_type v20 = (int **)sub_46C8EC(v8, v10);
    uint64_t v22 = sub_46CCC8(v8, v10, v21);
    int v23 = (unsigned __int16 *)((char *)*v20 - **v20);
    uint64_t v74 = v22;
    if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
      uint64_t v25 = *(unsigned int *)((char *)*v20 + v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v77 = (uint64_t)v20;
    unint64_t v26 = (unint64_t)v20[4];
    uint64_t v27 = (void **)operator new(0x20uLL);
    *uint64_t v27 = off_243A3D0;
    v27[1] = &v95;
    v27[2] = (void *)v6;
    v27[3] = (void *)v72;
    uint64_t v105 = v27;
    sub_3EAFD8(v6 + 16, v26, (uint64_t)&v102, &v93);
    uint64_t v28 = v77;
    if (v105 == (void **)&v102)
    {
      ((void (*)(void ***))v102[4])(&v102);
    }
    else if (v105)
    {
      (*((void (**)(void))*v105 + 5))();
    }
    int v29 = sub_46E19C(v5, v10, 0);
    if (v29 < 0) {
      char v30 = -5;
    }
    else {
      char v30 = 5;
    }
    v95 += v29 / 10
         + (((103 * (char)(v30 + v29 % 10)) >> 15) & 1)
         + ((103 * (char)(v30 + v29 % 10)) >> 10);
    uint64_t v31 = v93;
    size_t v32 = v94;
    if (v93 != v94)
    {
      double v33 = (double)v25;
      while (1)
      {
        long long v34 = v31[1];
        uint64_t v35 = **v31;
        uint64_t v36 = v35 + 424 * (void)v34;
        if (sub_35884C(v36))
        {
          if (!*(unsigned char *)(v6 + 47)) {
            goto LABEL_31;
          }
          uint64_t v37 = *(void *)(v6 + 8) + 1032;
          LODWORD(v102) = 1;
          if (sub_3D00D4(v6 + 9176, v35 + 424 * (void)v34, v37, &v102)) {
            goto LABEL_31;
          }
        }
        if (*(_DWORD *)(v35 + 424 * (void)v34 + 88) == 13 && !*(unsigned char *)(*(void *)(v6 + 8) + 1451)) {
          goto LABEL_31;
        }
        BOOL v38 = sub_358820(v35 + 424 * (void)v34);
        if (v10) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38;
        }
        if (v39)
        {
          sub_24AFC((uint64_t)&v96, v35 + 424 * (void)v34 + 40, v35 + 424 * (void)v34 + 40);
          goto LABEL_31;
        }
        uint64_t v40 = v35 + 424 * (void)v34;
        int v41 = *(unsigned __int8 *)(v40 + 159);
        int v42 = *(_DWORD *)(v40 + 160);
        if (v41) {
          BOOL v43 = v42 == 0;
        }
        else {
          BOOL v43 = 0;
        }
        if (v43) {
          goto LABEL_31;
        }
        uint64_t v44 = v35 + 424 * (void)v34 + 40;
        if (sub_13A8C(&v96, v44)) {
          goto LABEL_31;
        }
        sub_2954EC(*(void *)v6, *(void *)(v28 + 32), (uint64_t)v90);
        double v45 = (double)sub_46CACC(v76, v10) / 1000000000.0 * v33;
        if (v45 >= 0.0)
        {
          if (v45 >= 4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45) + 1;
        }
        else
        {
          if (v45 <= -4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45);
          if (v46 >= 1) {
            --v46;
          }
        }
        double v45 = (double)(v46 >> 1);
LABEL_54:
        double v47 = (double)sub_46CB48(v76, v10) / 1000000000.0 * v33;
        if (v47 >= 0.0)
        {
          if (v47 < 4.50359963e15)
          {
            uint64_t v48 = (uint64_t)(v47 + v47) + 1;
LABEL_61:
            double v47 = (double)(v48 >> 1);
          }
        }
        else if (v47 > -4.50359963e15)
        {
          uint64_t v48 = (uint64_t)(v47 + v47);
          if (v48 >= 1) {
            --v48;
          }
          goto LABEL_61;
        }
        uint64_t v99 = 0x7FEFFFFFFFFFFFFFLL;
        v78[0] = (void *)-1;
        LODWORD(v78[1]) = 0x7FFFFFFF;
        uint64_t v102 = (void **)(v35 + 424 * (void)v34 + 28);
        uint64_t v103 = &v99;
        uint64_t v104 = v78;
        sub_77F46C((uint64_t)v90, (uint64_t)&v102);
        v88[0] = 0;
        uint64_t v100 = 0x7FEFFFFFFFFFFFFFLL;
        double v101 = 0.0;
        uint64_t v102 = v78;
        uint64_t v103 = &v100;
        uint64_t v104 = (void **)&v101;
        uint64_t v105 = v88;
        sub_77F6DC((uint64_t)v90, (double **)&v102);
        double v49 = 0.0;
        if (*(double *)v88 != 0.0)
        {
          double v49 = v101 / *(double *)v88;
          if (v101 / *(double *)v88 > 1.0) {
            double v49 = 1.0;
          }
        }
        uint64_t v50 = (uint64_t)v45;
        double v51 = v49 * v33;
        uint64_t v52 = (uint64_t)(v51 + v51);
        uint64_t v53 = v52 - 1;
        if (v52 < 1) {
          uint64_t v53 = (uint64_t)(v51 + v51);
        }
        uint64_t v54 = v53 >> 1;
        if (v51 > -4.50359963e15) {
          double v55 = (double)v54;
        }
        else {
          double v55 = v51;
        }
        double v56 = (double)((v52 + 1) >> 1);
        if (v51 >= 4.50359963e15) {
          double v56 = v51;
        }
        if (v51 >= 0.0) {
          double v57 = v56;
        }
        else {
          double v57 = v55;
        }
        BOOL v58 = __OFSUB__((uint64_t)v57, v50);
        uint64_t v59 = (uint64_t)v57 - v50;
        BOOL v60 = v59 < 0 == v58 && (uint64_t)v57 <= (uint64_t)v47;
        uint64_t v28 = v77;
        if (!v60) {
          goto LABEL_91;
        }
        double v101 = *(double *)&v59;
        sub_6F85DC((const std::string **)(v35 + 424 * (void)v34 + 64), *(void *)(v6 + 8) + 968, (uint64_t)v88);
        sub_770080((uint64_t *)v6, v77, (uint64_t)v78);
        uint64_t v102 = (void **)(*(void *)&v101 + v75);
        LODWORD(v100) = v10;
        unint64_t v61 = v73[1];
        if (v61 >= v73[2])
        {
          uint64_t v62 = sub_77F94C(v73, (uint64_t *)&v102, v36, (uint64_t)v88, (long long *)v78, (int *)&v100, (uint64_t *)&v101);
          v73[1] = v62;
          uint64_t v63 = v44;
          if (!*(unsigned char *)(v6 + 47)) {
            goto LABEL_85;
          }
LABEL_84:
          sub_650170(&v102, v69, 0);
          sub_7702A4(v6 + 56, &v102, v62 - 1120);
          sub_5752F4((uint64_t)&v102);
          goto LABEL_85;
        }
        sub_77FB20(v68, v73[1], (uint64_t *)&v102, v36, (uint64_t)v88, (long long *)v78, (int *)&v100, (uint64_t *)&v101);
        uint64_t v62 = v61 + 1120;
        v73[1] = v61 + 1120;
        v73[1] = v61 + 1120;
        uint64_t v63 = v44;
        if (*(unsigned char *)(v6 + 47)) {
          goto LABEL_84;
        }
LABEL_85:
        sub_24AFC((uint64_t)&v96, v63, v63);
        if (v87 < 0)
        {
          operator delete(v86);
          if ((v85 & 0x80000000) == 0)
          {
LABEL_87:
            if ((v83 & 0x80000000) == 0) {
              goto LABEL_88;
            }
            goto LABEL_95;
          }
        }
        else if ((v85 & 0x80000000) == 0)
        {
          goto LABEL_87;
        }
        operator delete(v84);
        if ((v83 & 0x80000000) == 0)
        {
LABEL_88:
          if (v81 < 0) {
            goto LABEL_96;
          }
          goto LABEL_89;
        }
LABEL_95:
        operator delete(v82);
        if (v81 < 0)
        {
LABEL_96:
          operator delete(v80);
          if (v79 < 0)
          {
LABEL_97:
            operator delete(v78[0]);
            if (v89 < 0)
            {
LABEL_98:
              operator delete(v88[0]);
              uint64_t v64 = __p;
              if (!__p) {
                goto LABEL_31;
              }
LABEL_92:
              uint64_t v92 = v64;
              operator delete(v64);
              goto LABEL_31;
            }
            goto LABEL_91;
          }
          goto LABEL_90;
        }
LABEL_89:
        if (v79 < 0) {
          goto LABEL_97;
        }
LABEL_90:
        if (v89 < 0) {
          goto LABEL_98;
        }
LABEL_91:
        uint64_t v64 = __p;
        if (__p) {
          goto LABEL_92;
        }
LABEL_31:
        v31 += 2;
        if (v31 == v32)
        {
          uint64_t v31 = v93;
          int v5 = v69;
          uint64_t v8 = (void *)v76;
          break;
        }
      }
    }
    unint64_t v14 = v70;
    if (v31)
    {
      uint64_t v94 = v31;
      operator delete(v31);
    }
    v75 += v74;
    ++v10;
    uint64_t v12 = v71;
  }
  if ((v16 ^ (v14 < v17))) {
    goto LABEL_17;
  }
LABEL_103:
  long long v65 = (void **)v97;
  if ((void)v97)
  {
    do
    {
      size_t v67 = (void **)*v65;
      if (*((char *)v65 + 39) < 0) {
        operator delete(v65[2]);
      }
      operator delete(v65);
      long long v65 = v67;
    }
    while (v67);
  }
  int v66 = (void *)v96;
  *(void *)&long long v96 = 0;
  if (v66) {
    operator delete(v66);
  }
}

void sub_76FB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_50E790(v55);
  sub_3A4C2C((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_76FC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a51)
  {
    operator delete(a51);
    sub_50E790(a18);
    sub_3A4C2C(&a55);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x76FB90);
}

void sub_76FC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51) {
    JUMPOUT(0x76FC94);
  }
  JUMPOUT(0x76FB90);
}

uint64_t *sub_76FCB4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (*result != v4)
  {
    uint64_t v5 = *a2;
    while (1)
    {
      double result = (uint64_t *)sub_46CFFC(v5, *(unsigned __int8 *)(v3 + 620));
      if (result) {
        break;
      }
      v3 += 1120;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        goto LABEL_6;
      }
    }
    if (v3 != v4)
    {
      for (uint64_t i = v3 + 1120; i != v4; i += 1120)
      {
        double result = (uint64_t *)sub_46CFFC(v5, *(unsigned __int8 *)(i + 620));
        if ((result & 1) == 0)
        {
          double result = (uint64_t *)sub_4C1EE0(v3, i);
          v3 += 1120;
        }
      }
    }
  }
LABEL_6:
  uint64_t v6 = v2[1];
  if (v3 != v6)
  {
    while (v6 != v3)
    {
      v6 -= 1120;
      double result = (uint64_t *)sub_3A6B94(v6);
    }
    v2[1] = v3;
  }
  return result;
}

uint64_t sub_76FDCC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      sub_3A6B94((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_76FE40(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (const std::string **)a2[4];
  sub_6F85DC(v6 + 8, *(void *)(a1 + 8) + 968, (uint64_t)&v15);
  sub_6F85DC(v6 + 1, *(void *)(a1 + 8) + 968, (uint64_t)v13);
  sub_6F85DC(v6 + 4, *(void *)(a1 + 8) + 968, (uint64_t)v11);
  if (SHIBYTE(v14) < 0)
  {
    sub_4200(v7, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    uint64_t v8 = v14;
  }
  if (SHIBYTE(v12) < 0)
  {
    sub_4200(&__p, v11[0], (unint64_t)v11[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v11;
    uint64_t v10 = v12;
  }
  sub_6040C8(a3, (uint64_t)v6, &v15, (long long *)v7);
  if (SHIBYTE(v10) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
LABEL_9:
  sub_77E12C(a2[1], a2[2], (uint64_t *)(a3 + 408), *(void *)(a3 + 416), a1);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_11:
      if ((v16 & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete((void *)v15);
      return;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v13[0]);
  if (v16 < 0) {
    goto LABEL_17;
  }
}

void sub_76FFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

void sub_770080(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 32);
  sub_58E730(*a1, v5, 1u, &v22);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
  uint64_t v7 = (int *)sub_2D5D58(*a1, v6);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x25u && (uint64_t v9 = v8[18]) != 0) {
    uint64_t v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    uint64_t v10 = 0;
  }
  sub_2DE69C(v10, &__p);
  sub_3D63DC(*a1, v6, v18);
  sub_5F2D5C((uint64_t)__dst, (long long *)v18, *(unsigned char *)(a1[1] + 1414));
  sub_6F60AC((unsigned __int16 *)__dst, (uint64_t *)&v22, (uint64_t *)&__p, a1[1] + 968, a3);
  if (v17 < 0)
  {
    operator delete(__dst[0]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_7:
      double v11 = (void **)__p;
      if (__p) {
        goto LABEL_8;
      }
LABEL_18:
      unint64_t v13 = v22;
      if (!v22) {
        return;
      }
      goto LABEL_19;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v18[0]);
  double v11 = (void **)__p;
  if (!__p) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v12 = v21;
  if (v21 == v11)
  {
    double v21 = v11;
    operator delete(v11);
    unint64_t v13 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    if (*((char *)v12 - 9) < 0) {
      operator delete(*(v12 - 4));
    }
    v12 -= 5;
  }
  while (v12 != v11);
  double v21 = v11;
  operator delete(__p);
  unint64_t v13 = v22;
  if (v22)
  {
LABEL_19:
    uint64_t v14 = (uint64_t)v23;
    long long v15 = v13;
    if (v23 != v13)
    {
      do
        uint64_t v14 = sub_2DF404(v14 - 144);
      while ((void *)v14 != v13);
      long long v15 = v22;
    }
    int v23 = v13;
    operator delete(v15);
  }
}

void sub_770230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    sub_2DE7D0(&a23);
    sub_53BD98((void **)(v23 - 56));
    _Unwind_Resume(a1);
  }
  sub_2DE7D0(&a23);
  sub_53BD98((void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void sub_770290(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_7702A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v3)
  {
    uint64_t v23 = a3 + 640;
    do
    {
      if (*((_DWORD *)v3 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      uint64_t v7 = (void *)v3[5];
      HIBYTE(__p[2]) = 5;
      strcpy((char *)__p, "scope");
      uint64_t v8 = sub_561B0(v7, (uint64_t)__p);
      int v9 = *(char *)(v8 + 23);
      if (v9 < 0)
      {
        if (*(void *)(v8 + 8) == 8)
        {
          uint64_t v8 = *(void *)v8;
LABEL_10:
          BOOL v10 = *(void *)v8 != 0x746E656469636E69;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          operator delete(__p[0]);
          goto LABEL_12;
        }
      }
      else if (v9 == 8)
      {
        goto LABEL_10;
      }
      BOOL v10 = 1;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (!v10)
      {
        if (!*(unsigned char *)(a3 + 620)) {
          return;
        }
        uint64_t v11 = *(unsigned int *)(a3 + 616);
        HIBYTE(__p[2]) = 21;
        strcpy((char *)__p, "feature_polygon_usage");
        uint64_t v12 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(v7, (uint64_t)__p);
        sub_5BC4C4(a1, a2, v11, v11, v12, (uint64_t)v25);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          int v13 = SHIBYTE(v26);
          if (SHIBYTE(v26) < 0) {
            goto LABEL_21;
          }
LABEL_16:
          if (v13 == 5)
          {
            uint64_t v14 = v25;
LABEL_23:
            int v15 = *(_DWORD *)v14;
            int v16 = *((unsigned __int8 *)v14 + 4);
            if (v15 == 1819438967 && v16 == 100)
            {
              uint64_t v18 = sub_46C8EC(a2, v11);
              sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v18 + 32) | ((unint64_t)*(unsigned __int16 *)(v18 + 36) << 32), __p);
              if (SHIBYTE(v26) < 0) {
                operator delete(v25[0]);
              }
              *(_OWORD *)uint64_t v25 = *(_OWORD *)__p;
              unint64_t v26 = __p[2];
            }
          }
        }
        else
        {
          int v13 = SHIBYTE(v26);
          if ((SHIBYTE(v26) & 0x80000000) == 0) {
            goto LABEL_16;
          }
LABEL_21:
          if (v25[1] == (char *)dword_4 + 1)
          {
            uint64_t v14 = (void **)v25[0];
            goto LABEL_23;
          }
        }
        sub_5BC290(a1, (uint64_t)(v3 + 2), (uint64_t)v25, (uint64_t)__p);
        if (__p[3])
        {
          sub_77FD0C(v23, __p, (uint64_t)(v3 + 2));
          char v19 = (char *)__p[2];
          if (!__p[2]) {
            goto LABEL_35;
          }
        }
        else
        {
          char v19 = (char *)__p[2];
          if (!__p[2])
          {
LABEL_35:
            std::string::size_type v20 = __p[0];
            __p[0] = 0;
            if (v20) {
              operator delete(v20);
            }
            if (SHIBYTE(v26) < 0) {
              operator delete(v25[0]);
            }
            goto LABEL_3;
          }
        }
        do
        {
          double v21 = *(char **)v19;
          sub_57AC8((uint64_t *)v19 + 5);
          if (v19[39] < 0) {
            operator delete(*((void **)v19 + 2));
          }
          operator delete(v19);
          char v19 = v21;
        }
        while (v21);
        goto LABEL_35;
      }
LABEL_3:
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_7705A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7705EC(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_area_incidents");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "enable_traffic_incidents");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "enable_filter_local_long_lived_area_incidents");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "long_lived_area_incident_timespan_s");
  double v7 = sub_5C7E8(a2, (uint64_t)__p) * 10.0;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_15:
  *(_DWORD *)(a1 + 4) = (int)v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_7707E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_770810(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = sub_3750CC(a2);
  a1[1] = a3;
  sub_3EAFD4(a1 + 2, a2, *(unsigned __int8 *)(a3 + 1227));
  sub_73ACFC(a1 + 7, a2);
  sub_103E2B8(a1 + 497, *(unsigned __int8 *)(a3 + 1227), a2);
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "RouteIncidentMatcher");
  int v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)v18, (uint64_t *)&v15);
  sub_3CB370(v6, 0, 0, __p);
  sub_773270((uint64_t)(a1 + 1144), __p);
  double v7 = v20;
  if (v20)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      double v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void **)v15;
  if (v15)
  {
    BOOL v10 = v16;
    uint64_t v11 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v15;
    }
    int v16 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  int v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 4u, *(_DWORD *)(a3 + 968), a1 + 1145);
  sub_3CE568(a1 + 1147, (uint64_t)a2);
  return a1;
}

void sub_7709CC(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_3A6230(v2);
  sub_76EA70(v1);
  _Unwind_Resume(a1);
}

void sub_7709F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3A6230(v20);
  sub_76EA70(v19);
  _Unwind_Resume(a1);
}

void sub_770A68(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8 = sub_46C760(a2);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v8)
  {
    sub_770C54(a1, a2, (uint64_t *)&v21);
    sub_77B0F4(a4, a4[1], (uint64_t)v21, (uint64_t)v22, 0xAF8AF8AF8AF8AF8BLL * ((v22 - (unsigned char *)v21) >> 5));
    sub_771220(a1, a2, a3, (uint64_t *)&__p);
    sub_77B0F4(a4, a4[1], (uint64_t)__p, (uint64_t)v20, 0xAF8AF8AF8AF8AF8BLL * ((v20 - (unsigned char *)__p) >> 5));
    uint64_t v18 = a2;
    sub_76FCB4(a4, (uint64_t *)&v18);
    unint64_t v9 = a4[1];
    unint64_t v10 = 126 - 2 * __clz(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v9 - *a4) >> 5));
    if (v9 == *a4) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_77B498(*a4, v9, (uint64_t)&v18, v11, 1);
    uint64_t v12 = __p;
    if (__p)
    {
      int v13 = v20;
      uint64_t v14 = __p;
      if (v20 != __p)
      {
        do
          int v13 = (unsigned char *)sub_3A6B94((uint64_t)(v13 - 1120));
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      std::string::size_type v20 = v12;
      operator delete(v14);
    }
    int v15 = v21;
    if (v21)
    {
      int v16 = v22;
      uint64_t v17 = v21;
      if (v22 != v21)
      {
        do
          int v16 = (unsigned char *)sub_3A6B94((uint64_t)(v16 - 1120));
        while (v16 != v15);
        uint64_t v17 = v21;
      }
      uint64_t v22 = v15;
      operator delete(v17);
    }
  }
}

void sub_770BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  BOOL v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  sub_50E790(v3);
  _Unwind_Resume(a1);
}

void sub_770C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_50E790((void **)va);
  sub_50E790(v6);
  _Unwind_Resume(a1);
}

void sub_770C40(_Unwind_Exception *a1)
{
  sub_50E790(v1);
  _Unwind_Resume(a1);
}

void sub_770C54(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 1453))
  {
    uint64_t v40 = a1 + 9152;
    int v5 = *(unsigned __int8 *)(a1 + 9152);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v5)
    {
      sub_3EE518(a1 + 16, (uint64_t)a2, &v55);
      long long v52 = 0u;
      long long v53 = 0u;
      int v54 = 1065353216;
      uint64_t v7 = v55;
      uint64_t v8 = v56;
      if (v55 != v56)
      {
        do
        {
          sub_24AFC((uint64_t)&v52, *v7 + 40, *v7 + 40);
          v7 += 5;
        }
        while (v7 != v8);
        unint64_t v9 = v55;
        for (uint64_t i = v56; v9 != i; v9 += 5)
        {
          unint64_t v10 = (void *)(*(void *)(a1 + 8) + 1032);
          LODWORD(v48[0]) = 0;
          if ((sub_3D0894(a1 + 9176, v9, v10, v48) & 1) == 0)
          {
            if ((uint64_t v12 = *v9, !*(unsigned char *)(v40 + 2))
              || *(_DWORD *)v9[1]
              || ((v13 = *(_DWORD *)(v12 + 144), int v14 = *(_DWORD *)(a1 + 9156), v15 = sub_46CF04((uint64_t)a2), v14 < 0)
                ? (char v16 = -5)
                : (char v16 = 5),
                  (int v17 = 103 * (char)(v16 + v14 % 10),
                   (int)(v14 / 10 + v13 + ((v17 >> 15) & 1) + (v17 >> 10)) >= v15)
               || *(unsigned char *)v9[4] != 1))
            {
              uint64_t v51 = sub_46CE10(a2, 0, 1, *(unsigned int *)v9[1], 0, v11);
              sub_6F85DC((const std::string **)(v12 + 64), *(void *)(a1 + 8) + 968, (uint64_t)v49);
              unint64_t v18 = a3[1];
              if (v18 >= a3[2])
              {
                uint64_t v19 = sub_77DAC8(a3, &v51, v12, (uint64_t)v49, (int *)v9[1]);
              }
              else
              {
                sub_77DC84((uint64_t)(a3 + 2), a3[1], &v51, v12, (uint64_t)v49, (int *)v9[1]);
                uint64_t v19 = v18 + 1120;
                a3[1] = v18 + 1120;
              }
              a3[1] = v19;
              uint64_t v43 = *v9;
              double v45 = 0;
              uint64_t v46 = 0;
              long long __p = 0;
              double v21 = (unsigned char *)v9[1];
              std::string::size_type v20 = (unsigned char *)v9[2];
              int64_t v22 = v20 - v21;
              if (v20 != v21)
              {
                if (v22 < 0) {
                  sub_2E00();
                }
                long long __p = operator new(v20 - v21);
                double v45 = __p;
                uint64_t v23 = (char *)__p + 16 * (v22 >> 4);
                uint64_t v46 = v23;
                memcpy(__p, v21, v22);
                double v45 = v23;
              }
              uint64_t v47 = v9[4];
              sub_772CE0(a1, &v43, (uint64_t)v48);
              sub_4C2164(v19 - 440, (uint64_t)v48);
              sub_3A6CB8((uint64_t)v48);
              if (__p)
              {
                double v45 = __p;
                operator delete(__p);
              }
              if (!*(unsigned char *)(v19 - 8))
              {
                exception = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              if (sub_6044E4(v19 - 440))
              {
                uint64_t v24 = *(void *)(a1 + 9160);
                strcpy((char *)v48, "Wildfire_area_incident");
                HIBYTE(v48[2]) = 22;
                uint64_t v25 = (const std::string *)sub_8D7730(v24, (uint64_t)v48);
                std::string::operator=((std::string *)(v19 - 680), v25);
                if (SHIBYTE(v48[2]) < 0) {
                  operator delete(v48[0]);
                }
              }
              uint64_t v26 = *(void *)a1;
              uint64_t v27 = sub_46C8EC(a2, *(unsigned int *)v9[1]);
              sub_2954EC(v26, *(void *)(v27 + 32), (uint64_t)v48);
              sub_2E4B5C((uint64_t)v48, v42);
              if (v48[1])
              {
                v48[2] = v48[1];
                operator delete(v48[1]);
              }
              uint64_t v28 = v19 - 1120;
              uint64_t v29 = *(void *)v42[0];
              *(_DWORD *)(v28 + 36) = *((_DWORD *)v42[0] + 2);
              *(void *)(v28 + 28) = v29;
              if (v42[0])
              {
                v42[1] = v42[0];
                operator delete(v42[0]);
              }
              if (v50 < 0) {
                operator delete(v49[0]);
              }
            }
          }
        }
      }
      uint64_t v30 = sub_77DD98(*a3, a3[1], a3);
      uint64_t v31 = a3[1];
      if (v31 != v30)
      {
        while (v31 != v30)
        {
          v31 -= 1120;
          sub_3A6B94(v31);
        }
        a3[1] = v30;
      }
      size_t v32 = (void **)v53;
      if ((void)v53)
      {
        do
        {
          uint64_t v37 = (void **)*v32;
          if (*((char *)v32 + 39) < 0) {
            operator delete(v32[2]);
          }
          operator delete(v32);
          size_t v32 = v37;
        }
        while (v37);
      }
      double v33 = (void *)v52;
      *(void *)&long long v52 = 0;
      if (v33) {
        operator delete(v33);
      }
      long long v34 = v55;
      if (v55)
      {
        uint64_t v35 = v56;
        uint64_t v36 = v55;
        if (v56 != v55)
        {
          do
          {
            BOOL v38 = (void *)*(v35 - 4);
            if (v38)
            {
              *(v35 - 3) = v38;
              operator delete(v38);
            }
            v35 -= 5;
          }
          while (v35 != v34);
          uint64_t v36 = v55;
        }
        double v56 = v34;
        operator delete(v36);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_771158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_3A4C2C(v27 - 160);
  sub_3EE4A4((void **)(v27 - 112));
  sub_50E790(v26);
  _Unwind_Resume(a1);
}

void sub_771220(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (!*(unsigned char *)(a1 + 9153))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  *(_OWORD *)int v86 = 0u;
  *(_OWORD *)char v87 = 0u;
  int v88 = 1065353216;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v70 = sub_487A58(a3);
  int v85 = sub_46CF04((uint64_t)a2);
  sub_46B058();
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  sub_46B060();
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  uint64_t v74 = 0;
  uint64_t v75 = (uint64_t)v8;
  size_t v69 = v11;
  uint64_t v67 = (uint64_t)(a4 + 2);
  unint64_t v68 = v13;
  uint64_t v72 = a4;
  uint64_t v71 = a2;
  while (1)
  {
    if (v8)
    {
      unint64_t v15 = sub_46C760(v8);
      BOOL v16 = v10 < v15;
      if (!v12)
      {
        if (v10 >= v15) {
          goto LABEL_103;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_103;
      }
      BOOL v16 = 0;
    }
    unint64_t v17 = sub_46C760(v12);
    if (v14 >= v17 || !v16) {
      break;
    }
    uint64_t v19 = sub_46C8EC(v8, v10);
    if (v19 == sub_46C8EC(v12, v14)) {
      goto LABEL_103;
    }
LABEL_17:
    std::string::size_type v20 = (int **)sub_46C8EC(v8, v10);
    uint64_t v22 = sub_46CCC8(v8, v10, v21);
    uint64_t v23 = (unsigned __int16 *)((char *)*v20 - **v20);
    uint64_t v73 = v22;
    if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
      uint64_t v25 = *(unsigned int *)((char *)*v20 + v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v76 = (uint64_t)v20;
    unint64_t v26 = (unint64_t)v20[4];
    uint64_t v27 = (long long *)operator new(0x20uLL);
    *(void *)uint64_t v27 = off_243A450;
    *((void *)v27 + 1) = &v85;
    *((void *)v27 + 2) = a1;
    *((void *)v27 + 3) = v70;
    int v95 = v27;
    sub_3EAFD8(a1 + 16, v26, (uint64_t)&v93, &v83);
    uint64_t v28 = v76;
    if (v95 == &v93)
    {
      (*(void (**)(long long *))(v93 + 32))(&v93);
    }
    else if (v95)
    {
      (*(void (**)(void))(*(void *)v95 + 40))();
    }
    int v29 = sub_46E19C(a2, v10, 0);
    if (v29 < 0) {
      char v30 = -5;
    }
    else {
      char v30 = 5;
    }
    v85 += v29 / 10
         + (((103 * (char)(v30 + v29 % 10)) >> 15) & 1)
         + ((103 * (char)(v30 + v29 % 10)) >> 10);
    uint64_t v31 = v83;
    size_t v32 = v84;
    if (v83 != v84)
    {
      double v33 = (double)v25;
      while (1)
      {
        long long v34 = v31[1];
        uint64_t v35 = **v31;
        uint64_t v36 = v35 + 424 * (void)v34;
        if (sub_35884C(v36))
        {
          if (!*(unsigned char *)(a1 + 47)) {
            goto LABEL_31;
          }
          uint64_t v37 = *(void *)(a1 + 8) + 1032;
          LODWORD(v93) = 1;
          if (sub_3D02E8(a1 + 9176, v35 + 424 * (void)v34, v37, &v93)) {
            goto LABEL_31;
          }
        }
        if (*(_DWORD *)(v35 + 424 * (void)v34 + 88) == 13 && !*(unsigned char *)(*(void *)(a1 + 8) + 1451)) {
          goto LABEL_31;
        }
        BOOL v38 = sub_358820(v35 + 424 * (void)v34);
        if (v10) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38;
        }
        if (v39)
        {
          sub_24AFC((uint64_t)v86, v35 + 424 * (void)v34 + 40, v35 + 424 * (void)v34 + 40);
          goto LABEL_31;
        }
        uint64_t v40 = v35 + 424 * (void)v34;
        int v41 = *(unsigned __int8 *)(v40 + 159);
        int v42 = *(_DWORD *)(v40 + 160);
        if (v41) {
          BOOL v43 = v42 == 0;
        }
        else {
          BOOL v43 = 0;
        }
        if (v43) {
          goto LABEL_31;
        }
        uint64_t v44 = v35 + 424 * (void)v34 + 40;
        if (sub_13A8C(v86, v44)) {
          goto LABEL_31;
        }
        sub_2954EC(*(void *)a1, *(void *)(v28 + 32), (uint64_t)v80);
        double v45 = (double)sub_46CACC(v75, v10) / 1000000000.0 * v33;
        if (v45 >= 0.0)
        {
          if (v45 >= 4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45) + 1;
        }
        else
        {
          if (v45 <= -4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45);
          if (v46 >= 1) {
            --v46;
          }
        }
        double v45 = (double)(v46 >> 1);
LABEL_54:
        double v47 = (double)sub_46CB48(v75, v10) / 1000000000.0 * v33;
        if (v47 >= 0.0)
        {
          if (v47 < 4.50359963e15)
          {
            uint64_t v48 = (uint64_t)(v47 + v47) + 1;
LABEL_61:
            double v47 = (double)(v48 >> 1);
          }
        }
        else if (v47 > -4.50359963e15)
        {
          uint64_t v48 = (uint64_t)(v47 + v47);
          if (v48 >= 1) {
            --v48;
          }
          goto LABEL_61;
        }
        uint64_t v89 = 0x7FEFFFFFFFFFFFFFLL;
        uint64_t v77 = (void *)-1;
        int v78 = 0x7FFFFFFF;
        *(void *)&long long v93 = v35 + 424 * (void)v34 + 28;
        *((void *)&v93 + 1) = &v89;
        uint64_t v94 = &v77;
        sub_77F46C((uint64_t)v80, (uint64_t)&v93);
        double v91 = 0.0;
        double v92 = 0.0;
        uint64_t v90 = 0x7FEFFFFFFFFFFFFFLL;
        *(void *)&long long v93 = &v77;
        *((void *)&v93 + 1) = &v90;
        uint64_t v94 = (void **)&v91;
        int v95 = (long long *)&v92;
        sub_77F6DC((uint64_t)v80, (double **)&v93);
        double v49 = 0.0;
        if (v92 != 0.0)
        {
          double v49 = v91 / v92;
          if (v91 / v92 > 1.0) {
            double v49 = 1.0;
          }
        }
        uint64_t v50 = (uint64_t)v45;
        double v51 = v49 * v33;
        uint64_t v52 = (uint64_t)(v51 + v51);
        uint64_t v53 = v52 - 1;
        if (v52 < 1) {
          uint64_t v53 = (uint64_t)(v51 + v51);
        }
        uint64_t v54 = v53 >> 1;
        if (v51 > -4.50359963e15) {
          double v55 = (double)v54;
        }
        else {
          double v55 = v51;
        }
        double v56 = (double)((v52 + 1) >> 1);
        if (v51 >= 4.50359963e15) {
          double v56 = v51;
        }
        if (v51 >= 0.0) {
          double v57 = v56;
        }
        else {
          double v57 = v55;
        }
        BOOL v58 = __OFSUB__((uint64_t)v57, v50);
        uint64_t v59 = (uint64_t)v57 - v50;
        BOOL v60 = v59 < 0 == v58 && (uint64_t)v57 <= (uint64_t)v47;
        uint64_t v28 = v76;
        if (!v60) {
          goto LABEL_91;
        }
        double v92 = *(double *)&v59;
        sub_6F85DC((const std::string **)(v35 + 424 * (void)v34 + 64), *(void *)(a1 + 8) + 968, (uint64_t)&v77);
        sub_77304C((uint64_t *)a1, v76, (uint64_t)&v93);
        *(void *)&double v91 = *(void *)&v92 + v74;
        LODWORD(v90) = v10;
        unint64_t v61 = v72[1];
        if (v61 >= v72[2])
        {
          uint64_t v62 = sub_77F94C(v72, (uint64_t *)&v91, v36, (uint64_t)&v77, &v93, (int *)&v90, (uint64_t *)&v92);
        }
        else
        {
          sub_77FB20(v67, v72[1], (uint64_t *)&v91, v36, (uint64_t)&v77, &v93, (int *)&v90, (uint64_t *)&v92);
          uint64_t v62 = v61 + 1120;
          v72[1] = v61 + 1120;
        }
        v72[1] = v62;
        if (*(unsigned char *)(a1 + 47)) {
          sub_7702A4(a1 + 56, v71, v62 - 1120);
        }
        sub_24AFC((uint64_t)v86, v44, v44);
        if (v103 < 0)
        {
          operator delete(v102);
          if ((v101 & 0x80000000) == 0)
          {
LABEL_87:
            if ((v99 & 0x80000000) == 0) {
              goto LABEL_88;
            }
            goto LABEL_95;
          }
        }
        else if ((v101 & 0x80000000) == 0)
        {
          goto LABEL_87;
        }
        operator delete(v100);
        if ((v99 & 0x80000000) == 0)
        {
LABEL_88:
          if (v97 < 0) {
            goto LABEL_96;
          }
          goto LABEL_89;
        }
LABEL_95:
        operator delete(v98);
        if (v97 < 0)
        {
LABEL_96:
          operator delete(v96);
          if (SHIBYTE(v94) < 0)
          {
LABEL_97:
            operator delete((void *)v93);
            if (v79 < 0)
            {
LABEL_98:
              operator delete(v77);
              uint64_t v63 = __p;
              if (!__p) {
                goto LABEL_31;
              }
LABEL_92:
              uint64_t v82 = v63;
              operator delete(v63);
              goto LABEL_31;
            }
            goto LABEL_91;
          }
          goto LABEL_90;
        }
LABEL_89:
        if (SHIBYTE(v94) < 0) {
          goto LABEL_97;
        }
LABEL_90:
        if (v79 < 0) {
          goto LABEL_98;
        }
LABEL_91:
        uint64_t v63 = __p;
        if (__p) {
          goto LABEL_92;
        }
LABEL_31:
        v31 += 2;
        if (v31 == v32)
        {
          uint64_t v31 = v83;
          a2 = v71;
          uint64_t v8 = (void *)v75;
          break;
        }
      }
    }
    unint64_t v14 = v68;
    if (v31)
    {
      __darwin_ct_rune_t v84 = v31;
      operator delete(v31);
    }
    v74 += v73;
    ++v10;
    uint64_t v12 = v69;
  }
  if ((v16 ^ (v14 < v17))) {
    goto LABEL_17;
  }
LABEL_103:
  uint64_t v64 = (void **)v87[0];
  if (v87[0])
  {
    do
    {
      int v66 = (void **)*v64;
      if (*((char *)v64 + 39) < 0) {
        operator delete(v64[2]);
      }
      operator delete(v64);
      uint64_t v64 = v66;
    }
    while (v66);
  }
  long long v65 = v86[0];
  v86[0] = 0;
  if (v65) {
    operator delete(v65);
  }
}

void sub_7719F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_50E790(v47);
  sub_3A4C2C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_771B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a31)
  {
    operator delete(a31);
    sub_50E790(a17);
    sub_3A4C2C(&a35);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x771A58);
}

void sub_771B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31) {
    JUMPOUT(0x771B5CLL);
  }
  JUMPOUT(0x771A58);
}

double sub_771B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = nullsub_1(a2);
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void **)(v5 + 8);
  if (*(void **)v5 == v8) {
    return result;
  }
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  while (2)
  {
    sub_770A68(a1, v7, a3, (uint64_t *)&v23);
    unint64_t v9 = (void **)(v7 + 919);
    uint64_t v10 = v7[919];
    if (!v10) {
      goto LABEL_4;
    }
    uint64_t v11 = v7[920];
    uint64_t v12 = (void *)v7[919];
    if (v11 == v10) {
      goto LABEL_3;
    }
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v11 + v13;
      if (*(unsigned char *)(v11 + v13 - 8))
      {
        sub_3A6CB8(v14 - 440);
        *(unsigned char *)(v14 - 8) = 0;
      }
      *(void *)(v14 - 480) = off_2438EC8;
      if (*(char *)(v14 - 449) < 0) {
        operator delete(*(void **)(v11 + v13 - 472));
      }
      uint64_t v15 = v11 + v13;
      BOOL v16 = (unsigned char *)(v11 + v13 - 488);
      if (*v16) {
        *BOOL v16 = 0;
      }
      if (*(char *)(v15 - 505) < 0)
      {
        operator delete(*(void **)(v11 + v13 - 528));
        uint64_t v17 = v11 + v13;
        if ((*(char *)(v11 + v13 - 537) & 0x80000000) == 0)
        {
LABEL_16:
          if ((*(char *)(v17 - 561) & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v17 = v11 + v13;
        if ((*(char *)(v11 + v13 - 537) & 0x80000000) == 0) {
          goto LABEL_16;
        }
      }
      operator delete(*(void **)(v17 - 560));
      if ((*(char *)(v17 - 561) & 0x80000000) == 0)
      {
LABEL_17:
        uint64_t v18 = v11 + v13;
        if ((*(char *)(v11 + v13 - 601) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_27;
      }
LABEL_26:
      operator delete(*(void **)(v11 + v13 - 584));
      uint64_t v18 = v11 + v13;
      if ((*(char *)(v11 + v13 - 601) & 0x80000000) == 0)
      {
LABEL_18:
        if ((*(char *)(v18 - 633) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_28;
      }
LABEL_27:
      operator delete(*(void **)(v18 - 624));
      if ((*(char *)(v18 - 633) & 0x80000000) == 0)
      {
LABEL_19:
        uint64_t v19 = v11 + v13;
        if ((*(char *)(v11 + v13 - 657) & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v15 - 656));
      uint64_t v19 = v11 + v13;
      if ((*(char *)(v11 + v13 - 657) & 0x80000000) == 0)
      {
LABEL_20:
        std::string::size_type v20 = (unsigned char *)(v19 - 688);
        if (!*(unsigned char *)(v19 - 688)) {
          goto LABEL_22;
        }
LABEL_21:
        *std::string::size_type v20 = 0;
        goto LABEL_22;
      }
LABEL_29:
      operator delete(*(void **)(v19 - 680));
      std::string::size_type v20 = (unsigned char *)(v19 - 688);
      if (*(unsigned char *)(v19 - 688)) {
        goto LABEL_21;
      }
LABEL_22:
      sub_29D95C(v14 - 1120);
      v13 -= 1120;
    }
    while (v11 + v13 != v10);
    uint64_t v12 = *v9;
    a1 = v21;
    a3 = v22;
LABEL_3:
    v7[920] = v10;
    operator delete(v12);
LABEL_4:
    double result = *(double *)&v23;
    *(_OWORD *)unint64_t v9 = v23;
    v7[921] = v24;
    v7 += 1541;
    if (v7 != v8) {
      continue;
    }
    return result;
  }
}

void sub_771DEC(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  long long __p = &v26;
  while (v5 != v6)
  {
    int v7 = sub_358690(v5, 0);
    if (*(_DWORD *)(v5 + 88)) {
      int v8 = 0;
    }
    else {
      int v8 = v7;
    }
    if (v8 == 1)
    {
      p_p = (void **)v5;
      sub_2A98DC((void ***)&__p, &p_p);
    }
    v5 += 1120;
  }
  long long __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  p_p = &__p;
  while (v10 != v9)
  {
    int v11 = sub_358690(v10, 0);
    if (*(_DWORD *)(v10 + 88)) {
      int v12 = 0;
    }
    else {
      int v12 = v11;
    }
    if (v12 == 1)
    {
      double v33 = (void *)v10;
      sub_2A98DC(&p_p, &v33);
    }
    v10 += 1120;
  }
  unint64_t v13 = 126 - 2 * __clz((v27 - (unsigned char *)v26) >> 3);
  if (v27 == v26) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_77FF68((uint64_t)v26, v27, (uint64_t)&p_p, v14, 1);
  unint64_t v15 = 126 - 2 * __clz((v24 - (unsigned char *)__p) >> 3);
  if (v24 == __p) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  sub_77FF68((uint64_t)__p, v24, (uint64_t)&p_p, v16, 1);
  p_p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  size_t v32 = v27;
  double v33 = v26;
  char v30 = v24;
  uint64_t v31 = __p;
  p_p_p = &p_p;
  sub_781B40(&v33, &v32, &v31, &v30, (void ***)&p_p_p);
  uint64_t v17 = p_p;
  uint64_t v18 = p_p;
  if (p_p != v21)
  {
    uint64_t v19 = p_p + 1;
    uint64_t v18 = p_p;
    if (p_p + 1 != v21)
    {
      uint64_t v18 = p_p;
      do
      {
        if (*((unsigned char *)*v18 + 432) && (!*((unsigned char *)*v19 + 432) || *((void *)*v19 + 53) < *((void *)*v18 + 53))) {
          uint64_t v18 = v19;
        }
        ++v19;
      }
      while (v19 != v21);
    }
  }
  if (v18 != v21)
  {
    *(void *)a3 = *v18;
    *(unsigned char *)(a3 + 8) = 1;
    if (!v17) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 8) = 0;
  if (v17)
  {
LABEL_34:
    uint64_t v21 = v17;
    operator delete(v17);
  }
LABEL_35:
  if (__p)
  {
    uint64_t v24 = (char *)__p;
    operator delete(__p);
  }
  if (v26)
  {
    uint64_t v27 = (char *)v26;
    operator delete(v26);
  }
}

void sub_772020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v18 = a13;
    if (!a13)
    {
LABEL_3:
      uint64_t v19 = a16;
      if (!a16) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v18 = a13;
    if (!a13) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  uint64_t v19 = a16;
  if (!a16) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_7720A4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  uint64_t v6 = (uint64_t *)nullsub_1(a2);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = *(void *)(v7 + 7352);
      uint64_t v10 = *(void *)(v7 + 7360);
      while (v9 != v10)
      {
        if (sub_605454(v9))
        {
          if (sub_77D38C(__p, v9 + 40))
          {
            uint64_t v21 = (long long *)(v9 + 40);
            int v11 = sub_77D5BC((uint64_t)__p, v9 + 40, (uint64_t)&unk_20F06E0, &v21);
            sub_605758((uint64_t)(v11 + 5), v9);
          }
          else
          {
            uint64_t v21 = (long long *)(v9 + 40);
            int v12 = sub_77D5BC((uint64_t)__p, v9 + 40, (uint64_t)&unk_20F06E0, &v21);
            sub_4C9334((uint64_t)(v12 + 5), v9);
          }
        }
        v9 += 1120;
      }
      v7 += 12328;
    }
    while (v7 != v8);
  }
  unint64_t v13 = (uint64_t *)v19;
  if ((void)v19)
  {
    do
    {
      while (1)
      {
        sub_7722D4(a1, a2, (unsigned char *)v13 + 40);
        sub_7725FC(a1, a2, (uint64_t)(v13 + 5));
        unint64_t v14 = a3[1];
        if (v14 < a3[2]) {
          break;
        }
        a3[1] = sub_5A73FC(a3, (uint64_t)(v13 + 5));
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          goto LABEL_16;
        }
      }
      sub_4BE9F4(a3[1], (uint64_t)(v13 + 5));
      a3[1] = v14 + 1120;
      a3[1] = v14 + 1120;
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
LABEL_16:
    unint64_t v15 = (void **)v19;
    if ((void)v19)
    {
      do
      {
        uint64_t v17 = (void **)*v15;
        sub_3A6B94((uint64_t)(v15 + 5));
        if (*((char *)v15 + 39) < 0) {
          operator delete(v15[2]);
        }
        operator delete(v15);
        unint64_t v15 = v17;
      }
      while (v17);
    }
  }
  uint64_t v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_772288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_76FDCC((uint64_t)&a9);
  sub_50E790(v9);
  _Unwind_Resume(a1);
}

void sub_7722D4(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (uint64_t *)nullsub_1(a2);
  uint64_t v8 = sub_40EFE8(*v7);
  sub_2954EC(v6, *(void *)(v8 + 32), (uint64_t)&v27);
  sub_2E4B5C((uint64_t)&v27, v29);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v9 = (uint64_t *)nullsub_1(a2);
  int v10 = sub_46CABC(*v9);
  sub_32F08((uint64_t *)v29, 1, 0, &v27, 1.0);
  sub_32F08((uint64_t *)&v27, 0, 0, v26, fmin((double)(1000000000 - v10) / 1000000000.0, 1.0));
  if (v27)
  {
    __p[0] = v27;
    operator delete(v27);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  *(_OWORD *)int v29 = *(_OWORD *)v26;
  uint64_t v30 = *(void *)&v26[16];
  char v14 = sub_6054D8((uint64_t)a3, *(_DWORD **)v26, *(double *)v26, v11, v12, v13);
  if (!a3[1112])
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  a3[1080] = v14;
  a3[1081] = 1;
  uint64_t v15 = *a1;
  uint64_t v16 = nullsub_1(a2);
  uint64_t v17 = sub_46C8FC(*(void *)(v16 + 8) - 12328);
  sub_2954EC(v15, *(void *)(v17 + 32), (uint64_t)&v27);
  sub_2E4B5C((uint64_t)&v27, v26);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v18 = nullsub_1(a2);
  unsigned int v19 = sub_46CAC4(*(void *)(v18 + 8) - 12328);
  sub_31854((uint64_t *)v26, 0, &v27, 0.0, (double)v19 / 1000000000.0);
  if (*(void *)v26)
  {
    *(void *)&char v26[8] = *(void *)v26;
    operator delete(*(void **)v26);
  }
  *(void *)unint64_t v26 = v27;
  *(_OWORD *)&char v26[8] = *(_OWORD *)__p;
  char v23 = sub_6054D8((uint64_t)a3, (_DWORD *)__p[0] - 3, *(double *)__p, v20, v21, v22);
  if (!a3[1112])
  {
    uint64_t v25 = __cxa_allocate_exception(8uLL);
    *uint64_t v25 = &off_2439078;
  }
  a3[1082] = v23;
  a3[1083] = 1;
  if (*(void *)v26)
  {
    *(void *)&char v26[8] = *(void *)v26;
    operator delete(*(void **)v26);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_772580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_7725FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 1112))
  {
LABEL_84:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v5 = *(unsigned char **)(a3 + 768);
  uint64_t v6 = *(unsigned char **)(a3 + 776);
  if (v5 == v6) {
    return;
  }
  while (*v5 != 6)
  {
    v5 += 80;
    if (v5 == v6) {
      goto LABEL_21;
    }
  }
  if (v5 != v6)
  {
    sub_772F20((uint64_t)a1, (uint64_t)v5, (uint64_t)&v33);
    if (!*(unsigned char *)(a3 + 1112))
    {
      uint64_t v31 = __cxa_allocate_exception(8uLL);
      void *v31 = &off_2439078;
    }
    *(unsigned char *)(a3 + 1000) = (_BYTE)v33;
    uint64_t v8 = (void **)(a3 + 1008);
    if (*(char *)(a3 + 1031) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = v34;
    *(void *)(a3 + 1024) = v35;
    HIBYTE(v35) = 0;
    LOBYTE(v34) = 0;
    uint64_t v9 = (void **)(a3 + 1032);
    if (*(char *)(a3 + 1055) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)uint64_t v9 = __p;
    *(void *)(a3 + 1048) = v37;
    HIBYTE(v37) = 0;
    LOBYTE(__p) = 0;
    int v10 = (void **)(a3 + 1056);
    if (*(char *)(a3 + 1079) < 0)
    {
      operator delete(*v10);
      int v11 = SHIBYTE(v37);
      *(_OWORD *)int v10 = v38;
      *(void *)(a3 + 1072) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      if (v11 < 0)
      {
        operator delete((void *)__p);
        if (SHIBYTE(v35) < 0) {
          goto LABEL_20;
        }
      }
      else if (SHIBYTE(v35) < 0)
      {
        goto LABEL_20;
      }
    }
    else
    {
      *(_OWORD *)int v10 = v38;
      *(void *)(a3 + 1072) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      if (SHIBYTE(v35) < 0)
      {
LABEL_20:
        operator delete((void *)v34);
        if (!*(unsigned char *)(a3 + 1112)) {
          goto LABEL_84;
        }
        goto LABEL_21;
      }
    }
    if (!*(unsigned char *)(a3 + 1112)) {
      goto LABEL_84;
    }
  }
LABEL_21:
  if (!*(unsigned char *)(a3 + 1081) || !*(unsigned char *)(a3 + 1083)) {
    goto LABEL_84;
  }
  double v12 = *(unsigned char **)(a3 + 768);
  double v13 = *(unsigned char **)(a3 + 776);
  char v14 = v12;
  if (v12 != v13)
  {
    char v14 = *(unsigned char **)(a3 + 768);
    while (*v14 != 5)
    {
      v14 += 80;
      if (v14 == v13) {
        goto LABEL_33;
      }
    }
  }
  if (*(unsigned char *)(a3 + 1082) || v14 == v13 || *(unsigned char *)(a3 + 1080))
  {
LABEL_33:
    uint64_t v16 = *(unsigned char **)(a3 + 768);
    if (v12 != v13)
    {
      uint64_t v16 = *(unsigned char **)(a3 + 768);
      while (*v16 != 3)
      {
        v16 += 80;
        if (v16 == v13) {
          goto LABEL_43;
        }
      }
    }
    if (!*(unsigned char *)(a3 + 1080) || *(unsigned char *)(a3 + 1082) || v16 == v13)
    {
LABEL_43:
      uint64_t v18 = *(unsigned char **)(a3 + 768);
      if (v12 != v13)
      {
        uint64_t v18 = *(unsigned char **)(a3 + 768);
        while (*v18 != 2)
        {
          v18 += 80;
          if (v18 == v13) {
            goto LABEL_53;
          }
        }
      }
      if (!*(unsigned char *)(a3 + 1082) || *(unsigned char *)(a3 + 1080) || v18 == v13)
      {
LABEL_53:
        double v20 = *(unsigned char **)(a3 + 768);
        if (v12 != v13)
        {
          double v20 = *(unsigned char **)(a3 + 768);
          while (*v20 != 4)
          {
            v20 += 80;
            if (v20 == v13)
            {
LABEL_66:
              while (v12 != v13)
              {
                if (*v12 == 1)
                {
                  if (v12 == v13) {
                    return;
                  }
                  sub_772F20((uint64_t)a1, (uint64_t)v12, (uint64_t)&v33);
                  if (!*(unsigned char *)(a3 + 1112))
                  {
                    size_t v32 = __cxa_allocate_exception(8uLL);
                    *size_t v32 = &off_2439078;
                  }
                  goto LABEL_72;
                }
                v12 += 80;
              }
              return;
            }
          }
        }
        if (v20 == v13) {
          goto LABEL_66;
        }
        uint64_t v21 = nullsub_1(a2);
        double v22 = *(void **)v21;
        char v23 = *(void **)(v21 + 8);
        if (*(void **)v21 != v23)
        {
          do
          {
            sub_46C77C(v22, &v33);
            BOOL v24 = sub_77AA10(v33, v34, *((void **)&v34 + 1), v35, a1, a3);
            if (v24) {
              break;
            }
            v22 += 1541;
          }
          while (v22 != v23);
          if (v24)
          {
            double v12 = *(unsigned char **)(a3 + 768);
            double v13 = *(unsigned char **)(a3 + 776);
            goto LABEL_66;
          }
        }
        sub_772F20((uint64_t)a1, (uint64_t)v20, (uint64_t)&v33);
        if (!*(unsigned char *)(a3 + 1112))
        {
          uint64_t v25 = __cxa_allocate_exception(8uLL);
          *uint64_t v25 = &off_2439078;
        }
      }
      else
      {
        sub_772F20((uint64_t)a1, (uint64_t)v18, (uint64_t)&v33);
        if (!*(unsigned char *)(a3 + 1112))
        {
          unsigned int v19 = __cxa_allocate_exception(8uLL);
          void *v19 = &off_2439078;
        }
      }
    }
    else
    {
      sub_772F20((uint64_t)a1, (uint64_t)v16, (uint64_t)&v33);
      if (!*(unsigned char *)(a3 + 1112))
      {
        uint64_t v17 = __cxa_allocate_exception(8uLL);
        void *v17 = &off_2439078;
      }
    }
  }
  else
  {
    sub_772F20((uint64_t)a1, (uint64_t)v14, (uint64_t)&v33);
    if (!*(unsigned char *)(a3 + 1112))
    {
      uint64_t v15 = __cxa_allocate_exception(8uLL);
      *uint64_t v15 = &off_2439078;
    }
  }
LABEL_72:
  *(unsigned char *)(a3 + 920) = (_BYTE)v33;
  unint64_t v26 = (void **)(a3 + 928);
  if (*(char *)(a3 + 951) < 0) {
    operator delete(*v26);
  }
  *(_OWORD *)unint64_t v26 = v34;
  *(void *)(a3 + 944) = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  uint64_t v27 = (void **)(a3 + 952);
  if (*(char *)(a3 + 975) < 0) {
    operator delete(*v27);
  }
  *(_OWORD *)uint64_t v27 = __p;
  *(void *)(a3 + 968) = v37;
  HIBYTE(v37) = 0;
  LOBYTE(__p) = 0;
  uint64_t v28 = (void **)(a3 + 976);
  if (*(char *)(a3 + 999) < 0)
  {
    operator delete(*v28);
    int v29 = SHIBYTE(v37);
    *(_OWORD *)uint64_t v28 = v38;
    *(void *)(a3 + 992) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    if (v29 < 0)
    {
      operator delete((void *)__p);
      if (SHIBYTE(v35) < 0) {
        goto LABEL_81;
      }
    }
    else if (SHIBYTE(v35) < 0)
    {
LABEL_81:
      operator delete((void *)v34);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v28 = v38;
    *(void *)(a3 + 992) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_81;
    }
  }
}

void sub_772C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_772C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_772C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_772CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_772CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_772CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_772CE0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (const std::string **)a2[4];
  sub_6F85DC(v6 + 8, *(void *)(a1 + 8) + 968, (uint64_t)&v15);
  sub_6F85DC(v6 + 1, *(void *)(a1 + 8) + 968, (uint64_t)v13);
  sub_6F85DC(v6 + 4, *(void *)(a1 + 8) + 968, (uint64_t)v11);
  if (SHIBYTE(v14) < 0)
  {
    sub_4200(v7, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    uint64_t v8 = v14;
  }
  if (SHIBYTE(v12) < 0)
  {
    sub_4200(&__p, v11[0], (unint64_t)v11[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v11;
    uint64_t v10 = v12;
  }
  sub_6040C8(a3, (uint64_t)v6, &v15, (long long *)v7);
  if (SHIBYTE(v10) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
LABEL_9:
  sub_781CF4(a2[1], a2[2], (uint64_t *)(a3 + 408), *(void *)(a3 + 416), a1);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_11:
      if ((v16 & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete((void *)v15);
      return;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v13[0]);
  if (v16 < 0) {
    goto LABEL_17;
  }
}

void sub_772E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

double sub_772F20@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v6 = a3 + 8;
  *(_WORD *)(a3 + 31) = 0;
  *(_WORD *)(a3 + 55) = 0;
  *(unsigned char *)(a3 + 79) = 0;
  *(unsigned char *)a3 = *(unsigned char *)a2;
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    sub_6F85DC((const std::string **)(a2 + 8), *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)uint64_t v6 = v11;
    *(void *)(v6 + 16) = v12;
  }
  if (*(void *)(a2 + 32) != *(void *)(a2 + 40))
  {
    sub_6F85DC((const std::string **)(a2 + 32), *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)(a3 + 32) = v11;
    *(void *)(a3 + 48) = v12;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = (const std::string **)(a2 + 56);
  if (v8 != v9)
  {
    sub_6F85DC(v10, *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)(a3 + 56) = v11;
    *(void *)(a3 + 72) = v12;
  }
  return result;
}

void sub_773010(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_773024(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_773038(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_77304C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 32);
  sub_58E730(*a1, v5, 1u, &v22);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
  uint64_t v7 = (int *)sub_2D5D58(*a1, v6);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x25u && (uint64_t v9 = v8[18]) != 0) {
    uint64_t v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    uint64_t v10 = 0;
  }
  sub_2DE69C(v10, &__p);
  sub_3D63DC(*a1, v6, v18);
  sub_5F2D5C((uint64_t)__dst, (long long *)v18, *(unsigned char *)(a1[1] + 1414));
  sub_6F60AC((unsigned __int16 *)__dst, (uint64_t *)&v22, (uint64_t *)&__p, a1[1] + 968, a3);
  if (v17 < 0)
  {
    operator delete(__dst[0]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_7:
      long long v11 = (void **)__p;
      if (__p) {
        goto LABEL_8;
      }
LABEL_18:
      double v13 = v22;
      if (!v22) {
        return;
      }
      goto LABEL_19;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v18[0]);
  long long v11 = (void **)__p;
  if (!__p) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v12 = v21;
  if (v21 == v11)
  {
    uint64_t v21 = v11;
    operator delete(v11);
    double v13 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    if (*((char *)v12 - 9) < 0) {
      operator delete(*(v12 - 4));
    }
    v12 -= 5;
  }
  while (v12 != v11);
  uint64_t v21 = v11;
  operator delete(__p);
  double v13 = v22;
  if (v22)
  {
LABEL_19:
    uint64_t v14 = (uint64_t)v23;
    long long v15 = v13;
    if (v23 != v13)
    {
      do
        uint64_t v14 = sub_2DF404(v14 - 144);
      while ((void *)v14 != v13);
      long long v15 = v22;
    }
    char v23 = v13;
    operator delete(v15);
  }
}

void sub_7731FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    sub_2DE7D0(&a23);
    sub_53BD98((void **)(v23 - 56));
    _Unwind_Resume(a1);
  }
  sub_2DE7D0(&a23);
  sub_53BD98((void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void sub_77325C(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_773270(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_area_incidents");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "enable_traffic_incidents");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "enable_filter_local_long_lived_area_incidents");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "long_lived_area_incident_timespan_s");
  double v7 = sub_5C7E8(a2, (uint64_t)__p) * 10.0;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_15:
  *(_DWORD *)(a1 + 4) = (int)v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_77346C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_773494(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = sub_3750CC(a2);
  a1[1] = a3;
  sub_3EAFD4(a1 + 2, a2, *(unsigned __int8 *)(a3 + 98));
  sub_73ACFC(a1 + 7, a2);
  sub_103E2B8(a1 + 497, *(unsigned __int8 *)(a3 + 98), a2);
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "RouteIncidentMatcher");
  long long v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)v18, (uint64_t *)&v15);
  sub_3CB370(v6, 0, 0, __p);
  sub_774CA8((uint64_t)(a1 + 1144), __p);
  double v7 = v20;
  if (v20)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      double v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v15;
  if (v15)
  {
    uint64_t v10 = v16;
    long long v11 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      long long v11 = v15;
    }
    char v16 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  double v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 4u, *(_DWORD *)a3, a1 + 1145);
  sub_3CDA7C(a1 + 1147, (uint64_t)a2);
  return a1;
}

void sub_773650(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_3A6230(v2);
  sub_76EA70(v1);
  _Unwind_Resume(a1);
}

void sub_773674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3A6230(v20);
  sub_76EA70(v19);
  _Unwind_Resume(a1);
}

void sub_7736EC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = sub_46C760(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6)
  {
    sub_7738D8(a1, a2, (uint64_t *)&v19);
    sub_77B0F4(a3, a3[1], (uint64_t)v19, (uint64_t)v20, 0xAF8AF8AF8AF8AF8BLL * ((v20 - (unsigned char *)v19) >> 5));
    sub_773EA0();
    sub_77B0F4(a3, a3[1], (uint64_t)__p, (uint64_t)v18, 0xAF8AF8AF8AF8AF8BLL * ((v18 - (unsigned char *)__p) >> 5));
    char v16 = a2;
    sub_76FCB4(a3, (uint64_t *)&v16);
    unint64_t v7 = a3[1];
    unint64_t v8 = 126 - 2 * __clz(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v7 - *a3) >> 5));
    if (v7 == *a3) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8;
    }
    sub_77B498(*a3, v7, (uint64_t)&v16, v9, 1);
    uint64_t v10 = __p;
    if (__p)
    {
      long long v11 = v18;
      uint64_t v12 = __p;
      if (v18 != __p)
      {
        do
          long long v11 = (unsigned char *)sub_3A6B94((uint64_t)(v11 - 1120));
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      uint64_t v18 = v10;
      operator delete(v12);
    }
    double v13 = v19;
    if (v19)
    {
      uint64_t v14 = v20;
      long long v15 = v19;
      if (v20 != v19)
      {
        do
          uint64_t v14 = (unsigned char *)sub_3A6B94((uint64_t)(v14 - 1120));
        while (v14 != v13);
        long long v15 = v19;
      }
      double v20 = v13;
      operator delete(v15);
    }
  }
}

void sub_773878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  BOOL v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  sub_50E790(v3);
  _Unwind_Resume(a1);
}

void sub_7738A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_50E790((void **)va);
  sub_50E790(v6);
  _Unwind_Resume(a1);
}

void sub_7738C4(_Unwind_Exception *a1)
{
  sub_50E790(v1);
  _Unwind_Resume(a1);
}

void sub_7738D8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 105))
  {
    uint64_t v40 = a1 + 9152;
    int v5 = *(unsigned __int8 *)(a1 + 9152);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v5)
    {
      sub_3EC020(a1 + 16, a2, &v55);
      long long v52 = 0u;
      long long v53 = 0u;
      int v54 = 1065353216;
      uint64_t v7 = v55;
      uint64_t v8 = v56;
      if (v55 != v56)
      {
        do
        {
          sub_24AFC((uint64_t)&v52, *v7 + 40, *v7 + 40);
          v7 += 5;
        }
        while (v7 != v8);
        uint64_t v9 = v55;
        for (uint64_t i = v56; v9 != i; v9 += 5)
        {
          uint64_t v10 = (void *)(*(void *)(a1 + 8) + 64);
          LODWORD(v48[0]) = 0;
          if ((sub_3D063C(a1 + 9176, v9, v10, v48) & 1) == 0)
          {
            if ((uint64_t v12 = *v9, !*(unsigned char *)(v40 + 2))
              || *(_DWORD *)v9[1]
              || ((v13 = *(_DWORD *)(v12 + 144), int v14 = *(_DWORD *)(a1 + 9156), v15 = sub_46CF04((uint64_t)a2), v14 < 0)
                ? (char v16 = -5)
                : (char v16 = 5),
                  (int v17 = 103 * (char)(v16 + v14 % 10),
                   (int)(v14 / 10 + v13 + ((v17 >> 15) & 1) + (v17 >> 10)) >= v15)
               || *(unsigned char *)v9[4] != 1))
            {
              uint64_t v51 = sub_46CE10(a2, 0, 1, *(unsigned int *)v9[1], 0, v11);
              sub_6F85DC((const std::string **)(v12 + 64), *(void *)(a1 + 8), (uint64_t)v49);
              unint64_t v18 = a3[1];
              if (v18 >= a3[2])
              {
                uint64_t v19 = sub_77DAC8(a3, &v51, v12, (uint64_t)v49, (int *)v9[1]);
              }
              else
              {
                sub_77DC84((uint64_t)(a3 + 2), a3[1], &v51, v12, (uint64_t)v49, (int *)v9[1]);
                uint64_t v19 = v18 + 1120;
                a3[1] = v18 + 1120;
              }
              a3[1] = v19;
              uint64_t v43 = *v9;
              double v45 = 0;
              uint64_t v46 = 0;
              long long __p = 0;
              uint64_t v21 = (unsigned char *)v9[1];
              double v20 = (unsigned char *)v9[2];
              int64_t v22 = v20 - v21;
              if (v20 != v21)
              {
                if (v22 < 0) {
                  sub_2E00();
                }
                long long __p = operator new(v20 - v21);
                double v45 = __p;
                uint64_t v23 = (char *)__p + 16 * (v22 >> 4);
                uint64_t v46 = v23;
                memcpy(__p, v21, v22);
                double v45 = v23;
              }
              uint64_t v47 = v9[4];
              sub_774854(a1, &v43, (uint64_t)v48);
              sub_4C2164(v19 - 440, (uint64_t)v48);
              sub_3A6CB8((uint64_t)v48);
              if (__p)
              {
                double v45 = __p;
                operator delete(__p);
              }
              if (!*(unsigned char *)(v19 - 8))
              {
                exception = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              if (sub_6044E4(v19 - 440))
              {
                uint64_t v24 = *(void *)(a1 + 9160);
                strcpy((char *)v48, "Wildfire_area_incident");
                HIBYTE(v48[2]) = 22;
                uint64_t v25 = (const std::string *)sub_8D7730(v24, (uint64_t)v48);
                std::string::operator=((std::string *)(v19 - 680), v25);
                if (SHIBYTE(v48[2]) < 0) {
                  operator delete(v48[0]);
                }
              }
              uint64_t v26 = *(void *)a1;
              uint64_t v27 = sub_46C8EC(a2, *(unsigned int *)v9[1]);
              sub_2954EC(v26, *(void *)(v27 + 32), (uint64_t)v48);
              sub_2E4B5C((uint64_t)v48, v42);
              if (v48[1])
              {
                v48[2] = v48[1];
                operator delete(v48[1]);
              }
              uint64_t v28 = v19 - 1120;
              uint64_t v29 = *(void *)v42[0];
              *(_DWORD *)(v28 + 36) = *((_DWORD *)v42[0] + 2);
              *(void *)(v28 + 28) = v29;
              if (v42[0])
              {
                v42[1] = v42[0];
                operator delete(v42[0]);
              }
              if (v50 < 0) {
                operator delete(v49[0]);
              }
            }
          }
        }
      }
      uint64_t v30 = sub_77DD98(*a3, a3[1], a3);
      uint64_t v31 = a3[1];
      if (v31 != v30)
      {
        while (v31 != v30)
        {
          v31 -= 1120;
          sub_3A6B94(v31);
        }
        a3[1] = v30;
      }
      size_t v32 = (void **)v53;
      if ((void)v53)
      {
        do
        {
          uint64_t v37 = (void **)*v32;
          if (*((char *)v32 + 39) < 0) {
            operator delete(v32[2]);
          }
          operator delete(v32);
          size_t v32 = v37;
        }
        while (v37);
      }
      double v33 = (void *)v52;
      *(void *)&long long v52 = 0;
      if (v33) {
        operator delete(v33);
      }
      long long v34 = v55;
      if (v55)
      {
        unint64_t v35 = v56;
        uint64_t v36 = v55;
        if (v56 != v55)
        {
          do
          {
            long long v38 = (void *)*(v35 - 4);
            if (v38)
            {
              *(v35 - 3) = v38;
              operator delete(v38);
            }
            v35 -= 5;
          }
          while (v35 != v34);
          uint64_t v36 = v55;
        }
        double v56 = v34;
        operator delete(v36);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_773DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_3A4C2C(v27 - 160);
  sub_3EE4A4((void **)(v27 - 112));
  sub_50E790(v26);
  _Unwind_Resume(a1);
}

void sub_773EA0()
{
  uint64_t v0 = __chkstk_darwin();
  BOOL v4 = v3;
  if (!*(unsigned char *)(v0 + 9153))
  {
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    return;
  }
  int v5 = v1;
  uint64_t v6 = v0;
  long long v96 = 0u;
  long long v97 = 0u;
  int v98 = 1065353216;
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = 0;
  uint64_t v72 = sub_487A58(v2);
  int v95 = sub_46CF04((uint64_t)v5);
  sub_46B058();
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  sub_46B060();
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  uint64_t v75 = 0;
  uint64_t v76 = (uint64_t)v8;
  uint64_t v71 = v11;
  uint64_t v68 = (uint64_t)(v4 + 2);
  size_t v69 = v5;
  unint64_t v70 = v13;
  uint64_t v73 = v4;
  while (1)
  {
    if (v8)
    {
      unint64_t v15 = sub_46C760(v8);
      BOOL v16 = v10 < v15;
      if (!v12)
      {
        if (v10 >= v15) {
          goto LABEL_103;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_103;
      }
      BOOL v16 = 0;
    }
    unint64_t v17 = sub_46C760(v12);
    if (v14 >= v17 || !v16) {
      break;
    }
    uint64_t v19 = sub_46C8EC(v8, v10);
    if (v19 == sub_46C8EC(v12, v14)) {
      goto LABEL_103;
    }
LABEL_17:
    double v20 = (int **)sub_46C8EC(v8, v10);
    uint64_t v22 = sub_46CCC8(v8, v10, v21);
    uint64_t v23 = (unsigned __int16 *)((char *)*v20 - **v20);
    uint64_t v74 = v22;
    if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
      uint64_t v25 = *(unsigned int *)((char *)*v20 + v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v77 = (uint64_t)v20;
    unint64_t v26 = (unint64_t)v20[4];
    uint64_t v27 = (void **)operator new(0x20uLL);
    *uint64_t v27 = off_243A4D0;
    v27[1] = &v95;
    v27[2] = (void *)v6;
    v27[3] = (void *)v72;
    uint64_t v105 = v27;
    sub_3EAFD8(v6 + 16, v26, (uint64_t)&v102, &v93);
    uint64_t v28 = v77;
    if (v105 == (void **)&v102)
    {
      ((void (*)(void ***))v102[4])(&v102);
    }
    else if (v105)
    {
      (*((void (**)(void))*v105 + 5))();
    }
    int v29 = sub_46E19C(v5, v10, 0);
    if (v29 < 0) {
      char v30 = -5;
    }
    else {
      char v30 = 5;
    }
    v95 += v29 / 10
         + (((103 * (char)(v30 + v29 % 10)) >> 15) & 1)
         + ((103 * (char)(v30 + v29 % 10)) >> 10);
    uint64_t v31 = v93;
    size_t v32 = v94;
    if (v93 != v94)
    {
      double v33 = (double)v25;
      while (1)
      {
        long long v34 = v31[1];
        uint64_t v35 = **v31;
        uint64_t v36 = v35 + 424 * (void)v34;
        if (sub_35884C(v36))
        {
          if (!*(unsigned char *)(v6 + 47)) {
            goto LABEL_31;
          }
          uint64_t v37 = *(void *)(v6 + 8) + 64;
          LODWORD(v102) = 1;
          if (sub_3D00D4(v6 + 9176, v35 + 424 * (void)v34, v37, &v102)) {
            goto LABEL_31;
          }
        }
        if (*(_DWORD *)(v35 + 424 * (void)v34 + 88) == 13 && !*(unsigned char *)(*(void *)(v6 + 8) + 104)) {
          goto LABEL_31;
        }
        BOOL v38 = sub_358820(v35 + 424 * (void)v34);
        if (v10) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38;
        }
        if (v39)
        {
          sub_24AFC((uint64_t)&v96, v35 + 424 * (void)v34 + 40, v35 + 424 * (void)v34 + 40);
          goto LABEL_31;
        }
        uint64_t v40 = v35 + 424 * (void)v34;
        int v41 = *(unsigned __int8 *)(v40 + 159);
        int v42 = *(_DWORD *)(v40 + 160);
        if (v41) {
          BOOL v43 = v42 == 0;
        }
        else {
          BOOL v43 = 0;
        }
        if (v43) {
          goto LABEL_31;
        }
        uint64_t v44 = v35 + 424 * (void)v34 + 40;
        if (sub_13A8C(&v96, v44)) {
          goto LABEL_31;
        }
        sub_2954EC(*(void *)v6, *(void *)(v28 + 32), (uint64_t)v90);
        double v45 = (double)sub_46CACC(v76, v10) / 1000000000.0 * v33;
        if (v45 >= 0.0)
        {
          if (v45 >= 4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45) + 1;
        }
        else
        {
          if (v45 <= -4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45);
          if (v46 >= 1) {
            --v46;
          }
        }
        double v45 = (double)(v46 >> 1);
LABEL_54:
        double v47 = (double)sub_46CB48(v76, v10) / 1000000000.0 * v33;
        if (v47 >= 0.0)
        {
          if (v47 < 4.50359963e15)
          {
            uint64_t v48 = (uint64_t)(v47 + v47) + 1;
LABEL_61:
            double v47 = (double)(v48 >> 1);
          }
        }
        else if (v47 > -4.50359963e15)
        {
          uint64_t v48 = (uint64_t)(v47 + v47);
          if (v48 >= 1) {
            --v48;
          }
          goto LABEL_61;
        }
        uint64_t v99 = 0x7FEFFFFFFFFFFFFFLL;
        v78[0] = (void *)-1;
        LODWORD(v78[1]) = 0x7FFFFFFF;
        uint64_t v102 = (void **)(v35 + 424 * (void)v34 + 28);
        char v103 = &v99;
        uint64_t v104 = v78;
        sub_77F46C((uint64_t)v90, (uint64_t)&v102);
        v88[0] = 0;
        uint64_t v100 = 0x7FEFFFFFFFFFFFFFLL;
        double v101 = 0.0;
        uint64_t v102 = v78;
        char v103 = &v100;
        uint64_t v104 = (void **)&v101;
        uint64_t v105 = v88;
        sub_77F6DC((uint64_t)v90, (double **)&v102);
        double v49 = 0.0;
        if (*(double *)v88 != 0.0)
        {
          double v49 = v101 / *(double *)v88;
          if (v101 / *(double *)v88 > 1.0) {
            double v49 = 1.0;
          }
        }
        uint64_t v50 = (uint64_t)v45;
        double v51 = v49 * v33;
        uint64_t v52 = (uint64_t)(v51 + v51);
        uint64_t v53 = v52 - 1;
        if (v52 < 1) {
          uint64_t v53 = (uint64_t)(v51 + v51);
        }
        uint64_t v54 = v53 >> 1;
        if (v51 > -4.50359963e15) {
          double v55 = (double)v54;
        }
        else {
          double v55 = v51;
        }
        double v56 = (double)((v52 + 1) >> 1);
        if (v51 >= 4.50359963e15) {
          double v56 = v51;
        }
        if (v51 >= 0.0) {
          double v57 = v56;
        }
        else {
          double v57 = v55;
        }
        BOOL v58 = __OFSUB__((uint64_t)v57, v50);
        uint64_t v59 = (uint64_t)v57 - v50;
        BOOL v60 = v59 < 0 == v58 && (uint64_t)v57 <= (uint64_t)v47;
        uint64_t v28 = v77;
        if (!v60) {
          goto LABEL_91;
        }
        double v101 = *(double *)&v59;
        sub_6F85DC((const std::string **)(v35 + 424 * (void)v34 + 64), *(void *)(v6 + 8), (uint64_t)v88);
        sub_774A88((uint64_t *)v6, v77, (uint64_t)v78);
        uint64_t v102 = (void **)(*(void *)&v101 + v75);
        LODWORD(v100) = v10;
        unint64_t v61 = v73[1];
        if (v61 >= v73[2])
        {
          uint64_t v62 = sub_77F94C(v73, (uint64_t *)&v102, v36, (uint64_t)v88, (long long *)v78, (int *)&v100, (uint64_t *)&v101);
          v73[1] = v62;
          uint64_t v63 = v44;
          if (!*(unsigned char *)(v6 + 47)) {
            goto LABEL_85;
          }
LABEL_84:
          sub_650170(&v102, v69, 0);
          sub_7702A4(v6 + 56, &v102, v62 - 1120);
          sub_5752F4((uint64_t)&v102);
          goto LABEL_85;
        }
        sub_77FB20(v68, v73[1], (uint64_t *)&v102, v36, (uint64_t)v88, (long long *)v78, (int *)&v100, (uint64_t *)&v101);
        uint64_t v62 = v61 + 1120;
        v73[1] = v61 + 1120;
        v73[1] = v61 + 1120;
        uint64_t v63 = v44;
        if (*(unsigned char *)(v6 + 47)) {
          goto LABEL_84;
        }
LABEL_85:
        sub_24AFC((uint64_t)&v96, v63, v63);
        if (v87 < 0)
        {
          operator delete(v86);
          if ((v85 & 0x80000000) == 0)
          {
LABEL_87:
            if ((v83 & 0x80000000) == 0) {
              goto LABEL_88;
            }
            goto LABEL_95;
          }
        }
        else if ((v85 & 0x80000000) == 0)
        {
          goto LABEL_87;
        }
        operator delete(v84);
        if ((v83 & 0x80000000) == 0)
        {
LABEL_88:
          if (v81 < 0) {
            goto LABEL_96;
          }
          goto LABEL_89;
        }
LABEL_95:
        operator delete(v82);
        if (v81 < 0)
        {
LABEL_96:
          operator delete(v80);
          if (v79 < 0)
          {
LABEL_97:
            operator delete(v78[0]);
            if (v89 < 0)
            {
LABEL_98:
              operator delete(v88[0]);
              uint64_t v64 = __p;
              if (!__p) {
                goto LABEL_31;
              }
LABEL_92:
              double v92 = v64;
              operator delete(v64);
              goto LABEL_31;
            }
            goto LABEL_91;
          }
          goto LABEL_90;
        }
LABEL_89:
        if (v79 < 0) {
          goto LABEL_97;
        }
LABEL_90:
        if (v89 < 0) {
          goto LABEL_98;
        }
LABEL_91:
        uint64_t v64 = __p;
        if (__p) {
          goto LABEL_92;
        }
LABEL_31:
        v31 += 2;
        if (v31 == v32)
        {
          uint64_t v31 = v93;
          int v5 = v69;
          uint64_t v8 = (void *)v76;
          break;
        }
      }
    }
    unint64_t v14 = v70;
    if (v31)
    {
      uint64_t v94 = v31;
      operator delete(v31);
    }
    v75 += v74;
    ++v10;
    uint64_t v12 = v71;
  }
  if ((v16 ^ (v14 < v17))) {
    goto LABEL_17;
  }
LABEL_103:
  long long v65 = (void **)v97;
  if ((void)v97)
  {
    do
    {
      uint64_t v67 = (void **)*v65;
      if (*((char *)v65 + 39) < 0) {
        operator delete(v65[2]);
      }
      operator delete(v65);
      long long v65 = v67;
    }
    while (v67);
  }
  int v66 = (void *)v96;
  *(void *)&long long v96 = 0;
  if (v66) {
    operator delete(v66);
  }
}

void sub_7746B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_50E790(v55);
  sub_3A4C2C((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_774810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a51)
  {
    operator delete(a51);
    sub_50E790(a18);
    sub_3A4C2C(&a55);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x774730);
}

void sub_774824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51) {
    JUMPOUT(0x774834);
  }
  JUMPOUT(0x774730);
}

void sub_774854(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (const std::string **)a2[4];
  sub_6F85DC(v6 + 8, *(void *)(a1 + 8), (uint64_t)&v15);
  sub_6F85DC(v6 + 1, *(void *)(a1 + 8), (uint64_t)v13);
  sub_6F85DC(v6 + 4, *(void *)(a1 + 8), (uint64_t)v11);
  if (SHIBYTE(v14) < 0)
  {
    sub_4200(v7, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    uint64_t v8 = v14;
  }
  if (SHIBYTE(v12) < 0)
  {
    sub_4200(&__p, v11[0], (unint64_t)v11[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v11;
    uint64_t v10 = v12;
  }
  sub_6040C8(a3, (uint64_t)v6, &v15, (long long *)v7);
  if (SHIBYTE(v10) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
LABEL_9:
  sub_782124(a2[1], a2[2], (uint64_t *)(a3 + 408), *(void *)(a3 + 416), a1);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_11:
      if ((v16 & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete((void *)v15);
      return;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v13[0]);
  if (v16 < 0) {
    goto LABEL_17;
  }
}

void sub_7749BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

void sub_774A88(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 32);
  sub_58E730(*a1, v5, 1u, &v22);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
  uint64_t v7 = (int *)sub_2D5D58(*a1, v6);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x25u && (uint64_t v9 = v8[18]) != 0) {
    uint64_t v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    uint64_t v10 = 0;
  }
  sub_2DE69C(v10, &__p);
  sub_3D63DC(*a1, v6, v18);
  sub_5F2D5C((uint64_t)__dst, (long long *)v18, *(unsigned char *)(a1[1] + 106));
  sub_6F60AC((unsigned __int16 *)__dst, (uint64_t *)&v22, (uint64_t *)&__p, a1[1], a3);
  if (v17 < 0)
  {
    operator delete(__dst[0]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_7:
      double v11 = (void **)__p;
      if (__p) {
        goto LABEL_8;
      }
LABEL_18:
      unint64_t v13 = v22;
      if (!v22) {
        return;
      }
      goto LABEL_19;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v18[0]);
  double v11 = (void **)__p;
  if (!__p) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v12 = v21;
  if (v21 == v11)
  {
    double v21 = v11;
    operator delete(v11);
    unint64_t v13 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    if (*((char *)v12 - 9) < 0) {
      operator delete(*(v12 - 4));
    }
    v12 -= 5;
  }
  while (v12 != v11);
  double v21 = v11;
  operator delete(__p);
  unint64_t v13 = v22;
  if (v22)
  {
LABEL_19:
    uint64_t v14 = (uint64_t)v23;
    long long v15 = v13;
    if (v23 != v13)
    {
      do
        uint64_t v14 = sub_2DF404(v14 - 144);
      while ((void *)v14 != v13);
      long long v15 = v22;
    }
    uint64_t v23 = v13;
    operator delete(v15);
  }
}

void sub_774C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    sub_2DE7D0(&a23);
    sub_53BD98((void **)(v23 - 56));
    _Unwind_Resume(a1);
  }
  sub_2DE7D0(&a23);
  sub_53BD98((void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void sub_774C94(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_774CA8(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_area_incidents");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "enable_traffic_incidents");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "enable_filter_local_long_lived_area_incidents");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "long_lived_area_incident_timespan_s");
  double v7 = sub_5C7E8(a2, (uint64_t)__p) * 10.0;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_15:
  *(_DWORD *)(a1 + 4) = (int)v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_774EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_774ECC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v3)
  {
    uint64_t v23 = a3 + 640;
    do
    {
      if (*((_DWORD *)v3 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      double v7 = (void *)v3[5];
      HIBYTE(__p[2]) = 5;
      strcpy((char *)__p, "scope");
      uint64_t v8 = sub_561B0(v7, (uint64_t)__p);
      int v9 = *(char *)(v8 + 23);
      if (v9 < 0)
      {
        if (*(void *)(v8 + 8) == 8)
        {
          uint64_t v8 = *(void *)v8;
LABEL_10:
          BOOL v10 = *(void *)v8 != 0x746E656469636E69;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          operator delete(__p[0]);
          goto LABEL_12;
        }
      }
      else if (v9 == 8)
      {
        goto LABEL_10;
      }
      BOOL v10 = 1;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (!v10)
      {
        if (!*(unsigned char *)(a3 + 620)) {
          return;
        }
        uint64_t v11 = *(unsigned int *)(a3 + 616);
        HIBYTE(__p[2]) = 21;
        strcpy((char *)__p, "feature_polygon_usage");
        uint64_t v12 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(v7, (uint64_t)__p);
        sub_73CD28(a1, a2, v11, v11, v12, (uint64_t)v25);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          int v13 = SHIBYTE(v26);
          if (SHIBYTE(v26) < 0) {
            goto LABEL_21;
          }
LABEL_16:
          if (v13 == 5)
          {
            uint64_t v14 = v25;
LABEL_23:
            int v15 = *(_DWORD *)v14;
            int v16 = *((unsigned __int8 *)v14 + 4);
            if (v15 == 1819438967 && v16 == 100)
            {
              unint64_t v18 = (unsigned int *)sub_470B40(a2, v11);
              sub_3D63DC(*(void *)(a1 + 8), *v18 | ((unint64_t)(v18[1] & 0x1FFFFFFF) << 32), __p);
              if (SHIBYTE(v26) < 0) {
                operator delete(v25[0]);
              }
              *(_OWORD *)uint64_t v25 = *(_OWORD *)__p;
              unint64_t v26 = __p[2];
            }
          }
        }
        else
        {
          int v13 = SHIBYTE(v26);
          if ((SHIBYTE(v26) & 0x80000000) == 0) {
            goto LABEL_16;
          }
LABEL_21:
          if (v25[1] == (char *)dword_4 + 1)
          {
            uint64_t v14 = (void **)v25[0];
            goto LABEL_23;
          }
        }
        sub_73CAF4(a1, (uint64_t)(v3 + 2), (uint64_t)v25, (uint64_t)__p);
        if (__p[3])
        {
          sub_77FD0C(v23, __p, (uint64_t)(v3 + 2));
          char v19 = (char *)__p[2];
          if (!__p[2]) {
            goto LABEL_35;
          }
        }
        else
        {
          char v19 = (char *)__p[2];
          if (!__p[2])
          {
LABEL_35:
            double v20 = __p[0];
            __p[0] = 0;
            if (v20) {
              operator delete(v20);
            }
            if (SHIBYTE(v26) < 0) {
              operator delete(v25[0]);
            }
            goto LABEL_3;
          }
        }
        do
        {
          double v21 = *(char **)v19;
          sub_57AC8((uint64_t *)v19 + 5);
          if (v19[39] < 0) {
            operator delete(*((void **)v19 + 2));
          }
          operator delete(v19);
          char v19 = v21;
        }
        while (v21);
        goto LABEL_35;
      }
LABEL_3:
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_7751CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_775214(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = sub_3750CC(a2);
  a1[1] = a3;
  sub_3EBD64(a1 + 2, a2, *(unsigned __int8 *)(a3 + 1227));
  sub_73BB84(a1 + 7, a2);
  sub_103E2B8(a1 + 497, *(unsigned __int8 *)(a3 + 1227), a2);
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "RouteIncidentMatcher");
  int v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)v18, (uint64_t *)&v15);
  sub_3CB370(v6, 2, 0, __p);
  sub_777A44((uint64_t)(a1 + 1144), __p);
  double v7 = v20;
  if (v20)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      double v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void **)v15;
  if (v15)
  {
    BOOL v10 = v16;
    uint64_t v11 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v15;
    }
    int v16 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  int v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 4u, *(_DWORD *)(a3 + 968), a1 + 1145);
  sub_3CEF38(a1 + 1147, (uint64_t)a2);
  return a1;
}

void sub_7753D0(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_3A6230(v2);
  sub_76EA70(v1);
  _Unwind_Resume(a1);
}

void sub_7753F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3A6230(v20);
  sub_76EA70(v19);
  _Unwind_Resume(a1);
}

void sub_77546C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8 = sub_470ADC(a2);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v8)
  {
    sub_775658(a1, a2, (uint64_t *)&v21);
    sub_77B0F4(a4, a4[1], (uint64_t)v21, (uint64_t)v22, 0xAF8AF8AF8AF8AF8BLL * ((v22 - (unsigned char *)v21) >> 5));
    sub_775C3C(a1, a2, a3, (uint64_t *)&__p);
    sub_77B0F4(a4, a4[1], (uint64_t)__p, (uint64_t)v20, 0xAF8AF8AF8AF8AF8BLL * ((v20 - (unsigned char *)__p) >> 5));
    unint64_t v18 = a2;
    sub_76FCB4(a4, (uint64_t *)&v18);
    unint64_t v9 = a4[1];
    unint64_t v10 = 126 - 2 * __clz(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v9 - *a4) >> 5));
    if (v9 == *a4) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_77B498(*a4, v9, (uint64_t)&v18, v11, 1);
    uint64_t v12 = __p;
    if (__p)
    {
      int v13 = v20;
      uint64_t v14 = __p;
      if (v20 != __p)
      {
        do
          int v13 = (unsigned char *)sub_3A6B94((uint64_t)(v13 - 1120));
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      double v20 = v12;
      operator delete(v14);
    }
    int v15 = v21;
    if (v21)
    {
      int v16 = v22;
      uint64_t v17 = v21;
      if (v22 != v21)
      {
        do
          int v16 = (unsigned char *)sub_3A6B94((uint64_t)(v16 - 1120));
        while (v16 != v15);
        uint64_t v17 = v21;
      }
      uint64_t v22 = v15;
      operator delete(v17);
    }
  }
}

void sub_7755F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  BOOL v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  sub_50E790(v3);
  _Unwind_Resume(a1);
}

void sub_775624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_50E790((void **)va);
  sub_50E790(v6);
  _Unwind_Resume(a1);
}

void sub_775644(_Unwind_Exception *a1)
{
  sub_50E790(v1);
  _Unwind_Resume(a1);
}

void sub_775658(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 1453))
  {
    uint64_t v40 = a1 + 9152;
    int v5 = *(unsigned __int8 *)(a1 + 9152);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v5)
    {
      sub_3F0824(a1 + 16, (uint64_t)a2, &v55);
      long long v52 = 0u;
      long long v53 = 0u;
      int v54 = 1065353216;
      uint64_t v7 = v55;
      uint64_t v8 = v56;
      if (v55 != v56)
      {
        do
        {
          sub_24AFC((uint64_t)&v52, *v7 + 40, *v7 + 40);
          v7 += 5;
        }
        while (v7 != v8);
        unint64_t v9 = v55;
        for (uint64_t i = v56; v9 != i; v9 += 5)
        {
          unint64_t v10 = (void *)(*(void *)(a1 + 8) + 1032);
          LODWORD(v48[0]) = 0;
          if ((sub_3D0AEC(a1 + 9176, v9, v10, v48) & 1) == 0)
          {
            if ((uint64_t v12 = *v9, !*(unsigned char *)(v40 + 2))
              || *(_DWORD *)v9[1]
              || ((v13 = *(_DWORD *)(v12 + 144), int v14 = *(_DWORD *)(a1 + 9156), v15 = sub_46CF04((uint64_t)a2), v14 < 0)
                ? (char v16 = -5)
                : (char v16 = 5),
                  (int v17 = 103 * (char)(v16 + v14 % 10),
                   (int)(v14 / 10 + v13 + ((v17 >> 15) & 1) + (v17 >> 10)) >= v15)
               || *(unsigned char *)v9[4] != 1))
            {
              uint64_t v51 = sub_471074(a2, 0, 1, *(unsigned int *)v9[1], 0, v11);
              sub_6FAEF8((const std::string **)(v12 + 64), *(void *)(a1 + 8) + 968, (uint64_t)v49);
              unint64_t v18 = a3[1];
              if (v18 >= a3[2])
              {
                uint64_t v19 = sub_77DAC8(a3, &v51, v12, (uint64_t)v49, (int *)v9[1]);
              }
              else
              {
                sub_77DC84((uint64_t)(a3 + 2), a3[1], &v51, v12, (uint64_t)v49, (int *)v9[1]);
                uint64_t v19 = v18 + 1120;
                a3[1] = v18 + 1120;
              }
              a3[1] = v19;
              uint64_t v43 = *v9;
              double v45 = 0;
              uint64_t v46 = 0;
              long long __p = 0;
              double v21 = (unsigned char *)v9[1];
              double v20 = (unsigned char *)v9[2];
              int64_t v22 = v20 - v21;
              if (v20 != v21)
              {
                if (v22 < 0) {
                  sub_2E00();
                }
                long long __p = operator new(v20 - v21);
                double v45 = __p;
                uint64_t v23 = (char *)__p + 16 * (v22 >> 4);
                uint64_t v46 = v23;
                memcpy(__p, v21, v22);
                double v45 = v23;
              }
              uint64_t v47 = v9[4];
              sub_77749C(a1, &v43, (uint64_t)v48);
              sub_4C2164(v19 - 440, (uint64_t)v48);
              sub_3A6CB8((uint64_t)v48);
              if (__p)
              {
                double v45 = __p;
                operator delete(__p);
              }
              if (!*(unsigned char *)(v19 - 8))
              {
                exception = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              if (sub_6044E4(v19 - 440))
              {
                uint64_t v24 = *(void *)(a1 + 9160);
                strcpy((char *)v48, "Wildfire_area_incident");
                HIBYTE(v48[2]) = 22;
                uint64_t v25 = (const std::string *)sub_8D7730(v24, (uint64_t)v48);
                std::string::operator=((std::string *)(v19 - 680), v25);
                if (SHIBYTE(v48[2]) < 0) {
                  operator delete(v48[0]);
                }
              }
              uint64_t v26 = *(void *)a1;
              uint64_t v27 = (unsigned int *)sub_470B40(a2, *(unsigned int *)v9[1]);
              sub_2954EC(v26, (((unint64_t)(v27[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v27[1] << 32) | *v27) ^ 0x1000000000000, (uint64_t)v48);
              sub_2E4B5C((uint64_t)v48, v42);
              if (v48[1])
              {
                v48[2] = v48[1];
                operator delete(v48[1]);
              }
              uint64_t v28 = v19 - 1120;
              uint64_t v29 = *(void *)v42[0];
              *(_DWORD *)(v28 + 36) = *((_DWORD *)v42[0] + 2);
              *(void *)(v28 + 28) = v29;
              if (v42[0])
              {
                v42[1] = v42[0];
                operator delete(v42[0]);
              }
              if (v50 < 0) {
                operator delete(v49[0]);
              }
            }
          }
        }
      }
      uint64_t v30 = sub_77DD98(*a3, a3[1], a3);
      uint64_t v31 = a3[1];
      if (v31 != v30)
      {
        while (v31 != v30)
        {
          v31 -= 1120;
          sub_3A6B94(v31);
        }
        a3[1] = v30;
      }
      size_t v32 = (void **)v53;
      if ((void)v53)
      {
        do
        {
          uint64_t v37 = (void **)*v32;
          if (*((char *)v32 + 39) < 0) {
            operator delete(v32[2]);
          }
          operator delete(v32);
          size_t v32 = v37;
        }
        while (v37);
      }
      double v33 = (void *)v52;
      *(void *)&long long v52 = 0;
      if (v33) {
        operator delete(v33);
      }
      long long v34 = v55;
      if (v55)
      {
        uint64_t v35 = v56;
        uint64_t v36 = v55;
        if (v56 != v55)
        {
          do
          {
            BOOL v38 = (void *)*(v35 - 4);
            if (v38)
            {
              *(v35 - 3) = v38;
              operator delete(v38);
            }
            v35 -= 5;
          }
          while (v35 != v34);
          uint64_t v36 = v55;
        }
        double v56 = v34;
        operator delete(v36);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_775B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_3A4C2C(v27 - 160);
  sub_3EE4A4((void **)(v27 - 112));
  sub_50E790(v26);
  _Unwind_Resume(a1);
}

void sub_775C3C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (!*(unsigned char *)(a1 + 9153))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  *(_OWORD *)int v88 = 0u;
  *(_OWORD *)char v89 = 0u;
  int v90 = 1065353216;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v72 = sub_487A58(a3);
  int v87 = sub_46CF04((uint64_t)a2);
  sub_46B058();
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  sub_46FF18();
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  uint64_t v77 = 0;
  uint64_t v78 = (uint64_t)v8;
  uint64_t v71 = v11;
  uint64_t v69 = (uint64_t)(a4 + 2);
  unint64_t v70 = v13;
  uint64_t v73 = a2;
  uint64_t v74 = a4;
  while (1)
  {
    if (v8)
    {
      unint64_t v15 = sub_470ADC(v8);
      BOOL v16 = v10 < v15;
      if (!v12)
      {
        if (v10 >= v15) {
          goto LABEL_103;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_103;
      }
      BOOL v16 = 0;
    }
    unint64_t v17 = sub_470ADC(v12);
    if (v14 >= v17 || !v16) {
      break;
    }
    uint64_t v19 = sub_470B40(v8, v10);
    if (v19 == sub_470B40(v12, v14)) {
      goto LABEL_103;
    }
LABEL_17:
    double v20 = (unsigned int *)sub_470B40(v8, v10);
    uint64_t v22 = sub_470F2C(v8, v10, v21);
    uint64_t v23 = (int *)*((void *)v20 + 1);
    uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
    uint64_t v75 = v22;
    if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0) {
      uint64_t v26 = *(unsigned int *)((char *)v23 + v25);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v76 = v20;
    uint64_t v29 = v20;
    uint64_t v27 = *v20;
    unsigned int v28 = v29[1];
    uint64_t v30 = (long long *)operator new(0x20uLL);
    *(void *)uint64_t v30 = off_243A550;
    *((void *)v30 + 1) = &v87;
    *((void *)v30 + 2) = a1;
    *((void *)v30 + 3) = v72;
    long long v97 = v30;
    sub_3EBD68(a1 + 16, (((unint64_t)(v28 & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v28 << 32) | v27) ^ 0x1000000000000, (uint64_t)&v95, &v85);
    if (v97 == &v95)
    {
      (*(void (**)(long long *))(v95 + 32))(&v95);
    }
    else if (v97)
    {
      (*(void (**)(void))(*(void *)v97 + 40))();
    }
    int v31 = sub_4711DC(a2, v10, 0);
    if (v31 < 0) {
      char v32 = -5;
    }
    else {
      char v32 = 5;
    }
    v87 += v31 / 10
         + (((103 * (char)(v32 + v31 % 10)) >> 15) & 1)
         + ((103 * (char)(v32 + v31 % 10)) >> 10);
    double v33 = v85;
    long long v34 = v86;
    if (v85 != v86)
    {
      double v35 = (double)v26;
      while (1)
      {
        uint64_t v36 = v33[1];
        uint64_t v37 = **v33;
        uint64_t v38 = v37 + 424 * (void)v36;
        if (sub_35884C(v38))
        {
          if (!*(unsigned char *)(a1 + 47)) {
            goto LABEL_31;
          }
          uint64_t v39 = *(void *)(a1 + 8) + 1032;
          LODWORD(v95) = 1;
          if (sub_3D0404(a1 + 9176, v37 + 424 * (void)v36, v39, &v95)) {
            goto LABEL_31;
          }
        }
        if (*(_DWORD *)(v37 + 424 * (void)v36 + 88) == 13 && !*(unsigned char *)(*(void *)(a1 + 8) + 1451)) {
          goto LABEL_31;
        }
        BOOL v40 = sub_358820(v37 + 424 * (void)v36);
        if (v10) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = v40;
        }
        if (v41)
        {
          sub_24AFC((uint64_t)v88, v37 + 424 * (void)v36 + 40, v37 + 424 * (void)v36 + 40);
          goto LABEL_31;
        }
        uint64_t v42 = v37 + 424 * (void)v36;
        int v43 = *(unsigned __int8 *)(v42 + 159);
        int v44 = *(_DWORD *)(v42 + 160);
        if (v43) {
          BOOL v45 = v44 == 0;
        }
        else {
          BOOL v45 = 0;
        }
        if (v45) {
          goto LABEL_31;
        }
        uint64_t v46 = v37 + 424 * (void)v36 + 40;
        if (sub_13A8C(v88, v46)) {
          goto LABEL_31;
        }
        sub_2954EC(*(void *)a1, (((unint64_t)(v76[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v76[1] << 32) | *v76) ^ 0x1000000000000, (uint64_t)v82);
        double v47 = (double)sub_46CACC(v78, v10) / 1000000000.0 * v35;
        if (v47 >= 0.0)
        {
          if (v47 >= 4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v48 = (uint64_t)(v47 + v47) + 1;
        }
        else
        {
          if (v47 <= -4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v48 = (uint64_t)(v47 + v47);
          if (v48 >= 1) {
            --v48;
          }
        }
        double v47 = (double)(v48 >> 1);
LABEL_54:
        double v49 = (double)sub_470DAC(v78, v10) / 1000000000.0 * v35;
        if (v49 >= 0.0)
        {
          if (v49 < 4.50359963e15)
          {
            uint64_t v50 = (uint64_t)(v49 + v49) + 1;
LABEL_61:
            double v49 = (double)(v50 >> 1);
          }
        }
        else if (v49 > -4.50359963e15)
        {
          uint64_t v50 = (uint64_t)(v49 + v49);
          if (v50 >= 1) {
            --v50;
          }
          goto LABEL_61;
        }
        uint64_t v91 = 0x7FEFFFFFFFFFFFFFLL;
        char v79 = (void *)-1;
        int v80 = 0x7FFFFFFF;
        *(void *)&long long v95 = v37 + 424 * (void)v36 + 28;
        *((void *)&v95 + 1) = &v91;
        long long v96 = &v79;
        sub_77F46C((uint64_t)v82, (uint64_t)&v95);
        double v93 = 0.0;
        double v94 = 0.0;
        uint64_t v92 = 0x7FEFFFFFFFFFFFFFLL;
        *(void *)&long long v95 = &v79;
        *((void *)&v95 + 1) = &v92;
        long long v96 = (void **)&v93;
        long long v97 = (long long *)&v94;
        sub_77F6DC((uint64_t)v82, (double **)&v95);
        double v51 = 0.0;
        if (v94 != 0.0)
        {
          double v51 = v93 / v94;
          if (v93 / v94 > 1.0) {
            double v51 = 1.0;
          }
        }
        uint64_t v52 = (uint64_t)v47;
        double v53 = v51 * v35;
        uint64_t v54 = (uint64_t)(v53 + v53);
        uint64_t v55 = v54 - 1;
        if (v54 < 1) {
          uint64_t v55 = (uint64_t)(v53 + v53);
        }
        uint64_t v56 = v55 >> 1;
        if (v53 > -4.50359963e15) {
          double v57 = (double)v56;
        }
        else {
          double v57 = v53;
        }
        double v58 = (double)((v54 + 1) >> 1);
        if (v53 >= 4.50359963e15) {
          double v58 = v53;
        }
        if (v53 >= 0.0) {
          double v59 = v58;
        }
        else {
          double v59 = v57;
        }
        BOOL v60 = __OFSUB__((uint64_t)v59, v52);
        uint64_t v61 = (uint64_t)v59 - v52;
        if (v61 < 0 != v60 || (uint64_t)v59 > (uint64_t)v49) {
          goto LABEL_91;
        }
        double v94 = *(double *)&v61;
        sub_6FAEF8((const std::string **)(v37 + 424 * (void)v36 + 64), *(void *)(a1 + 8) + 968, (uint64_t)&v79);
        sub_777808((uint64_t *)a1, v76, (uint64_t)&v95);
        *(void *)&double v93 = *(void *)&v94 + v77;
        LODWORD(v92) = v10;
        unint64_t v63 = v74[1];
        if (v63 >= v74[2])
        {
          uint64_t v64 = sub_77F94C(v74, (uint64_t *)&v93, v38, (uint64_t)&v79, &v95, (int *)&v92, (uint64_t *)&v94);
        }
        else
        {
          sub_77FB20(v69, v74[1], (uint64_t *)&v93, v38, (uint64_t)&v79, &v95, (int *)&v92, (uint64_t *)&v94);
          uint64_t v64 = v63 + 1120;
          v74[1] = v63 + 1120;
        }
        v74[1] = v64;
        if (*(unsigned char *)(a1 + 47)) {
          sub_774ECC(a1 + 56, v73, v64 - 1120);
        }
        sub_24AFC((uint64_t)v88, v46, v46);
        if (v105 < 0)
        {
          operator delete(v104);
          if ((v103 & 0x80000000) == 0)
          {
LABEL_87:
            if ((v101 & 0x80000000) == 0) {
              goto LABEL_88;
            }
            goto LABEL_95;
          }
        }
        else if ((v103 & 0x80000000) == 0)
        {
          goto LABEL_87;
        }
        operator delete(v102);
        if ((v101 & 0x80000000) == 0)
        {
LABEL_88:
          if (v99 < 0) {
            goto LABEL_96;
          }
          goto LABEL_89;
        }
LABEL_95:
        operator delete(v100);
        if (v99 < 0)
        {
LABEL_96:
          operator delete(v98);
          if (SHIBYTE(v96) < 0)
          {
LABEL_97:
            operator delete((void *)v95);
            if (v81 < 0)
            {
LABEL_98:
              operator delete(v79);
              long long v65 = __p;
              if (!__p) {
                goto LABEL_31;
              }
LABEL_92:
              __darwin_ct_rune_t v84 = v65;
              operator delete(v65);
              goto LABEL_31;
            }
            goto LABEL_91;
          }
          goto LABEL_90;
        }
LABEL_89:
        if (SHIBYTE(v96) < 0) {
          goto LABEL_97;
        }
LABEL_90:
        if (v81 < 0) {
          goto LABEL_98;
        }
LABEL_91:
        long long v65 = __p;
        if (__p) {
          goto LABEL_92;
        }
LABEL_31:
        v33 += 2;
        if (v33 == v34)
        {
          double v33 = v85;
          a2 = v73;
          uint64_t v8 = (void *)v78;
          break;
        }
      }
    }
    unint64_t v14 = v70;
    if (v33)
    {
      int v86 = v33;
      operator delete(v33);
    }
    v77 += v75;
    ++v10;
    uint64_t v12 = v71;
  }
  if ((v16 ^ (v14 < v17))) {
    goto LABEL_17;
  }
LABEL_103:
  int v66 = (void **)v89[0];
  if (v89[0])
  {
    do
    {
      uint64_t v68 = (void **)*v66;
      if (*((char *)v66 + 39) < 0) {
        operator delete(v66[2]);
      }
      operator delete(v66);
      int v66 = v68;
    }
    while (v68);
  }
  uint64_t v67 = v88[0];
  v88[0] = 0;
  if (v67) {
    operator delete(v67);
  }
}

void sub_776434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_50E790(v47);
  sub_3A4C2C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_77657C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a31)
  {
    operator delete(a31);
    sub_50E790(a16);
    sub_3A4C2C(&a35);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x77649CLL);
}

void sub_776590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31) {
    JUMPOUT(0x7765A0);
  }
  JUMPOUT(0x77649CLL);
}

double sub_7765C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = nullsub_1(a2);
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void **)(v5 + 8);
  if (*(void **)v5 == v8) {
    return result;
  }
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  while (2)
  {
    sub_77546C(a1, v7, a3, (uint64_t *)&v23);
    unint64_t v9 = (void **)(v7 + 919);
    uint64_t v10 = v7[919];
    if (!v10) {
      goto LABEL_4;
    }
    uint64_t v11 = v7[920];
    uint64_t v12 = (void *)v7[919];
    if (v11 == v10) {
      goto LABEL_3;
    }
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v11 + v13;
      if (*(unsigned char *)(v11 + v13 - 8))
      {
        sub_3A6CB8(v14 - 440);
        *(unsigned char *)(v14 - 8) = 0;
      }
      *(void *)(v14 - 480) = off_2438EC8;
      if (*(char *)(v14 - 449) < 0) {
        operator delete(*(void **)(v11 + v13 - 472));
      }
      uint64_t v15 = v11 + v13;
      BOOL v16 = (unsigned char *)(v11 + v13 - 488);
      if (*v16) {
        *BOOL v16 = 0;
      }
      if (*(char *)(v15 - 505) < 0)
      {
        operator delete(*(void **)(v11 + v13 - 528));
        uint64_t v17 = v11 + v13;
        if ((*(char *)(v11 + v13 - 537) & 0x80000000) == 0)
        {
LABEL_16:
          if ((*(char *)(v17 - 561) & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v17 = v11 + v13;
        if ((*(char *)(v11 + v13 - 537) & 0x80000000) == 0) {
          goto LABEL_16;
        }
      }
      operator delete(*(void **)(v17 - 560));
      if ((*(char *)(v17 - 561) & 0x80000000) == 0)
      {
LABEL_17:
        uint64_t v18 = v11 + v13;
        if ((*(char *)(v11 + v13 - 601) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_27;
      }
LABEL_26:
      operator delete(*(void **)(v11 + v13 - 584));
      uint64_t v18 = v11 + v13;
      if ((*(char *)(v11 + v13 - 601) & 0x80000000) == 0)
      {
LABEL_18:
        if ((*(char *)(v18 - 633) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_28;
      }
LABEL_27:
      operator delete(*(void **)(v18 - 624));
      if ((*(char *)(v18 - 633) & 0x80000000) == 0)
      {
LABEL_19:
        uint64_t v19 = v11 + v13;
        if ((*(char *)(v11 + v13 - 657) & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v15 - 656));
      uint64_t v19 = v11 + v13;
      if ((*(char *)(v11 + v13 - 657) & 0x80000000) == 0)
      {
LABEL_20:
        double v20 = (unsigned char *)(v19 - 688);
        if (!*(unsigned char *)(v19 - 688)) {
          goto LABEL_22;
        }
LABEL_21:
        *double v20 = 0;
        goto LABEL_22;
      }
LABEL_29:
      operator delete(*(void **)(v19 - 680));
      double v20 = (unsigned char *)(v19 - 688);
      if (*(unsigned char *)(v19 - 688)) {
        goto LABEL_21;
      }
LABEL_22:
      sub_29D95C(v14 - 1120);
      v13 -= 1120;
    }
    while (v11 + v13 != v10);
    uint64_t v12 = *v9;
    a1 = v21;
    a3 = v22;
LABEL_3:
    v7[920] = v10;
    operator delete(v12);
LABEL_4:
    double result = *(double *)&v23;
    *(_OWORD *)unint64_t v9 = v23;
    v7[921] = v24;
    v7 += 1541;
    if (v7 != v8) {
      continue;
    }
    return result;
  }
}

void sub_776830(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  BOOL v6 = (uint64_t *)nullsub_1(a2);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = *(void *)(v7 + 7352);
      uint64_t v10 = *(void *)(v7 + 7360);
      while (v9 != v10)
      {
        if (sub_605454(v9))
        {
          if (sub_77D38C(__p, v9 + 40))
          {
            uint64_t v21 = (long long *)(v9 + 40);
            uint64_t v11 = sub_77D5BC((uint64_t)__p, v9 + 40, (uint64_t)&unk_20F06E0, &v21);
            sub_605758((uint64_t)(v11 + 5), v9);
          }
          else
          {
            uint64_t v21 = (long long *)(v9 + 40);
            uint64_t v12 = sub_77D5BC((uint64_t)__p, v9 + 40, (uint64_t)&unk_20F06E0, &v21);
            sub_4C9334((uint64_t)(v12 + 5), v9);
          }
        }
        v9 += 1120;
      }
      v7 += 12328;
    }
    while (v7 != v8);
  }
  uint64_t v13 = (uint64_t *)v19;
  if ((void)v19)
  {
    do
    {
      while (1)
      {
        sub_776A60(a1, a2, (unsigned char *)v13 + 40);
        sub_776DB8(a1, a2, (uint64_t)(v13 + 5));
        unint64_t v14 = a3[1];
        if (v14 < a3[2]) {
          break;
        }
        a3[1] = sub_5A73FC(a3, (uint64_t)(v13 + 5));
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          goto LABEL_16;
        }
      }
      sub_4BE9F4(a3[1], (uint64_t)(v13 + 5));
      a3[1] = v14 + 1120;
      a3[1] = v14 + 1120;
      uint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
LABEL_16:
    uint64_t v15 = (void **)v19;
    if ((void)v19)
    {
      do
      {
        uint64_t v17 = (void **)*v15;
        sub_3A6B94((uint64_t)(v15 + 5));
        if (*((char *)v15 + 39) < 0) {
          operator delete(v15[2]);
        }
        operator delete(v15);
        uint64_t v15 = v17;
      }
      while (v17);
    }
  }
  BOOL v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_776A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_76FDCC((uint64_t)&a9);
  sub_50E790(v9);
  _Unwind_Resume(a1);
}

void sub_776A60(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (uint64_t *)nullsub_1(a2);
  uint64_t v8 = (unsigned int *)sub_40EFE8(*v7);
  sub_2954EC(v6, (((unint64_t)(v8[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v8[1] << 32) | *v8) ^ 0x1000000000000, (uint64_t)&v27);
  sub_2E4B5C((uint64_t)&v27, v29);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v9 = (uint64_t *)nullsub_1(a2);
  int v10 = sub_46CABC(*v9);
  sub_32F08((uint64_t *)v29, 1, 0, &v27, 1.0);
  sub_32F08((uint64_t *)&v27, 0, 0, v26, fmin((double)(1000000000 - v10) / 1000000000.0, 1.0));
  if (v27)
  {
    __p[0] = v27;
    operator delete(v27);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v26;
  uint64_t v30 = *(void *)&v26[16];
  char v14 = sub_6054D8((uint64_t)a3, *(_DWORD **)v26, *(double *)v26, v11, v12, v13);
  if (!a3[1112])
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  a3[1080] = v14;
  a3[1081] = 1;
  uint64_t v15 = *a1;
  uint64_t v16 = nullsub_1(a2);
  uint64_t v17 = (unsigned int *)sub_470B50(*(void *)(v16 + 8) - 12328);
  sub_2954EC(v15, (((unint64_t)(v17[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v17[1] << 32) | *v17) ^ 0x1000000000000, (uint64_t)&v27);
  sub_2E4B5C((uint64_t)&v27, v26);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v18 = nullsub_1(a2);
  unsigned int v19 = sub_46CAC4(*(void *)(v18 + 8) - 12328);
  sub_31854((uint64_t *)v26, 0, &v27, 0.0, (double)v19 / 1000000000.0);
  if (*(void *)v26)
  {
    *(void *)&char v26[8] = *(void *)v26;
    operator delete(*(void **)v26);
  }
  *(void *)uint64_t v26 = v27;
  *(_OWORD *)&char v26[8] = *(_OWORD *)__p;
  char v23 = sub_6054D8((uint64_t)a3, (_DWORD *)__p[0] - 3, *(double *)__p, v20, v21, v22);
  if (!a3[1112])
  {
    uint64_t v25 = __cxa_allocate_exception(8uLL);
    *uint64_t v25 = &off_2439078;
  }
  a3[1082] = v23;
  a3[1083] = 1;
  if (*(void *)v26)
  {
    *(void *)&char v26[8] = *(void *)v26;
    operator delete(*(void **)v26);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_776D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_776DB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 1112))
  {
LABEL_84:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v5 = *(unsigned char **)(a3 + 768);
  uint64_t v6 = *(unsigned char **)(a3 + 776);
  if (v5 == v6) {
    return;
  }
  while (*v5 != 6)
  {
    v5 += 80;
    if (v5 == v6) {
      goto LABEL_21;
    }
  }
  if (v5 != v6)
  {
    sub_7776DC((uint64_t)a1, (uint64_t)v5, (uint64_t)&v33);
    if (!*(unsigned char *)(a3 + 1112))
    {
      int v31 = __cxa_allocate_exception(8uLL);
      void *v31 = &off_2439078;
    }
    *(unsigned char *)(a3 + 1000) = (_BYTE)v33;
    uint64_t v8 = (void **)(a3 + 1008);
    if (*(char *)(a3 + 1031) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = v34;
    *(void *)(a3 + 1024) = v35;
    HIBYTE(v35) = 0;
    LOBYTE(v34) = 0;
    uint64_t v9 = (void **)(a3 + 1032);
    if (*(char *)(a3 + 1055) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)uint64_t v9 = __p;
    *(void *)(a3 + 1048) = v37;
    HIBYTE(v37) = 0;
    LOBYTE(__p) = 0;
    int v10 = (void **)(a3 + 1056);
    if (*(char *)(a3 + 1079) < 0)
    {
      operator delete(*v10);
      int v11 = SHIBYTE(v37);
      *(_OWORD *)int v10 = v38;
      *(void *)(a3 + 1072) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      if (v11 < 0)
      {
        operator delete((void *)__p);
        if (SHIBYTE(v35) < 0) {
          goto LABEL_20;
        }
      }
      else if (SHIBYTE(v35) < 0)
      {
        goto LABEL_20;
      }
    }
    else
    {
      *(_OWORD *)int v10 = v38;
      *(void *)(a3 + 1072) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      if (SHIBYTE(v35) < 0)
      {
LABEL_20:
        operator delete((void *)v34);
        if (!*(unsigned char *)(a3 + 1112)) {
          goto LABEL_84;
        }
        goto LABEL_21;
      }
    }
    if (!*(unsigned char *)(a3 + 1112)) {
      goto LABEL_84;
    }
  }
LABEL_21:
  if (!*(unsigned char *)(a3 + 1081) || !*(unsigned char *)(a3 + 1083)) {
    goto LABEL_84;
  }
  double v12 = *(unsigned char **)(a3 + 768);
  double v13 = *(unsigned char **)(a3 + 776);
  char v14 = v12;
  if (v12 != v13)
  {
    char v14 = *(unsigned char **)(a3 + 768);
    while (*v14 != 5)
    {
      v14 += 80;
      if (v14 == v13) {
        goto LABEL_33;
      }
    }
  }
  if (*(unsigned char *)(a3 + 1082) || v14 == v13 || *(unsigned char *)(a3 + 1080))
  {
LABEL_33:
    uint64_t v16 = *(unsigned char **)(a3 + 768);
    if (v12 != v13)
    {
      uint64_t v16 = *(unsigned char **)(a3 + 768);
      while (*v16 != 3)
      {
        v16 += 80;
        if (v16 == v13) {
          goto LABEL_43;
        }
      }
    }
    if (!*(unsigned char *)(a3 + 1080) || *(unsigned char *)(a3 + 1082) || v16 == v13)
    {
LABEL_43:
      uint64_t v18 = *(unsigned char **)(a3 + 768);
      if (v12 != v13)
      {
        uint64_t v18 = *(unsigned char **)(a3 + 768);
        while (*v18 != 2)
        {
          v18 += 80;
          if (v18 == v13) {
            goto LABEL_53;
          }
        }
      }
      if (!*(unsigned char *)(a3 + 1082) || *(unsigned char *)(a3 + 1080) || v18 == v13)
      {
LABEL_53:
        double v20 = *(unsigned char **)(a3 + 768);
        if (v12 != v13)
        {
          double v20 = *(unsigned char **)(a3 + 768);
          while (*v20 != 4)
          {
            v20 += 80;
            if (v20 == v13)
            {
LABEL_66:
              while (v12 != v13)
              {
                if (*v12 == 1)
                {
                  if (v12 == v13) {
                    return;
                  }
                  sub_7776DC((uint64_t)a1, (uint64_t)v12, (uint64_t)&v33);
                  if (!*(unsigned char *)(a3 + 1112))
                  {
                    char v32 = __cxa_allocate_exception(8uLL);
                    *char v32 = &off_2439078;
                  }
                  goto LABEL_72;
                }
                v12 += 80;
              }
              return;
            }
          }
        }
        if (v20 == v13) {
          goto LABEL_66;
        }
        uint64_t v21 = nullsub_1(a2);
        double v22 = *(void **)v21;
        char v23 = *(void **)(v21 + 8);
        if (*(void **)v21 != v23)
        {
          do
          {
            sub_470AF8(v22, &v33);
            BOOL v24 = sub_77AC44(v33, v34, *((void **)&v34 + 1), v35, a1, a3);
            if (v24) {
              break;
            }
            v22 += 1541;
          }
          while (v22 != v23);
          if (v24)
          {
            double v12 = *(unsigned char **)(a3 + 768);
            double v13 = *(unsigned char **)(a3 + 776);
            goto LABEL_66;
          }
        }
        sub_7776DC((uint64_t)a1, (uint64_t)v20, (uint64_t)&v33);
        if (!*(unsigned char *)(a3 + 1112))
        {
          uint64_t v25 = __cxa_allocate_exception(8uLL);
          *uint64_t v25 = &off_2439078;
        }
      }
      else
      {
        sub_7776DC((uint64_t)a1, (uint64_t)v18, (uint64_t)&v33);
        if (!*(unsigned char *)(a3 + 1112))
        {
          unsigned int v19 = __cxa_allocate_exception(8uLL);
          void *v19 = &off_2439078;
        }
      }
    }
    else
    {
      sub_7776DC((uint64_t)a1, (uint64_t)v16, (uint64_t)&v33);
      if (!*(unsigned char *)(a3 + 1112))
      {
        uint64_t v17 = __cxa_allocate_exception(8uLL);
        void *v17 = &off_2439078;
      }
    }
  }
  else
  {
    sub_7776DC((uint64_t)a1, (uint64_t)v14, (uint64_t)&v33);
    if (!*(unsigned char *)(a3 + 1112))
    {
      uint64_t v15 = __cxa_allocate_exception(8uLL);
      *uint64_t v15 = &off_2439078;
    }
  }
LABEL_72:
  *(unsigned char *)(a3 + 920) = (_BYTE)v33;
  uint64_t v26 = (void **)(a3 + 928);
  if (*(char *)(a3 + 951) < 0) {
    operator delete(*v26);
  }
  *(_OWORD *)uint64_t v26 = v34;
  *(void *)(a3 + 944) = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  uint64_t v27 = (void **)(a3 + 952);
  if (*(char *)(a3 + 975) < 0) {
    operator delete(*v27);
  }
  *(_OWORD *)uint64_t v27 = __p;
  *(void *)(a3 + 968) = v37;
  HIBYTE(v37) = 0;
  LOBYTE(__p) = 0;
  unsigned int v28 = (void **)(a3 + 976);
  if (*(char *)(a3 + 999) < 0)
  {
    operator delete(*v28);
    int v29 = SHIBYTE(v37);
    *(_OWORD *)unsigned int v28 = v38;
    *(void *)(a3 + 992) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    if (v29 < 0)
    {
      operator delete((void *)__p);
      if (SHIBYTE(v35) < 0) {
        goto LABEL_81;
      }
    }
    else if (SHIBYTE(v35) < 0)
    {
LABEL_81:
      operator delete((void *)v34);
    }
  }
  else
  {
    *(_OWORD *)unsigned int v28 = v38;
    *(void *)(a3 + 992) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_81;
    }
  }
}

void sub_777424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_777438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_777460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_777474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_777488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77749C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (const std::string **)a2[4];
  sub_6FAEF8(v6 + 8, *(void *)(a1 + 8) + 968, (uint64_t)&v15);
  sub_6FAEF8(v6 + 1, *(void *)(a1 + 8) + 968, (uint64_t)v13);
  sub_6FAEF8(v6 + 4, *(void *)(a1 + 8) + 968, (uint64_t)v11);
  if (SHIBYTE(v14) < 0)
  {
    sub_4200(v7, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    uint64_t v8 = v14;
  }
  if (SHIBYTE(v12) < 0)
  {
    sub_4200(&__p, v11[0], (unint64_t)v11[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v11;
    uint64_t v10 = v12;
  }
  sub_6040C8(a3, (uint64_t)v6, &v15, (long long *)v7);
  if (SHIBYTE(v10) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
LABEL_9:
  sub_782628(a2[1], a2[2], (uint64_t *)(a3 + 408), *(void *)(a3 + 416), a1);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_11:
      if ((v16 & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete((void *)v15);
      return;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v13[0]);
  if (v16 < 0) {
    goto LABEL_17;
  }
}

void sub_777610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

double sub_7776DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v6 = a3 + 8;
  *(_WORD *)(a3 + 31) = 0;
  *(_WORD *)(a3 + 55) = 0;
  *(unsigned char *)(a3 + 79) = 0;
  *(unsigned char *)a3 = *(unsigned char *)a2;
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    sub_6FAEF8((const std::string **)(a2 + 8), *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)uint64_t v6 = v11;
    *(void *)(v6 + 16) = v12;
  }
  if (*(void *)(a2 + 32) != *(void *)(a2 + 40))
  {
    sub_6FAEF8((const std::string **)(a2 + 32), *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)(a3 + 32) = v11;
    *(void *)(a3 + 48) = v12;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = (const std::string **)(a2 + 56);
  if (v8 != v9)
  {
    sub_6FAEF8(v10, *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)(a3 + 56) = v11;
    *(void *)(a3 + 72) = v12;
  }
  return result;
}

void sub_7777CC(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_7777E0(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_7777F4(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_777808(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (unsigned __int16)a2[1];
  sub_58E730(*a1, (v5 | ((((unint64_t)(a2[1] & 0x20000000) >> 29) & 1) << 48) | (v6 << 32)) ^ 0x1000000000000, 1u, &v23);
  unint64_t v7 = v5 | (v6 << 32);
  uint64_t v8 = (int *)sub_2D5D58(*a1, v7);
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x25u && (uint64_t v10 = v9[18]) != 0) {
    long long v11 = (unsigned int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  }
  else {
    long long v11 = 0;
  }
  sub_2DE69C(v11, &__p);
  sub_3D63DC(*a1, v7, v19);
  sub_5F2D5C((uint64_t)__dst, (long long *)v19, *(unsigned char *)(a1[1] + 1414));
  sub_6F8CDC((uint64_t)__dst, (unsigned __int8 **)&v23, (uint64_t *)&__p, a1[1] + 968, a3);
  if (v18 < 0)
  {
    operator delete(__dst[0]);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_7:
      uint64_t v12 = (void **)__p;
      if (__p) {
        goto LABEL_8;
      }
LABEL_18:
      uint64_t v14 = v23;
      if (!v23) {
        return;
      }
      goto LABEL_19;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v19[0]);
  uint64_t v12 = (void **)__p;
  if (!__p) {
    goto LABEL_18;
  }
LABEL_8:
  double v13 = v22;
  if (v22 == v12)
  {
    double v22 = v12;
    operator delete(v12);
    uint64_t v14 = v23;
    if (!v23) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    if (*((char *)v13 - 9) < 0) {
      operator delete(*(v13 - 4));
    }
    v13 -= 5;
  }
  while (v13 != v12);
  double v22 = v12;
  operator delete(__p);
  uint64_t v14 = v23;
  if (v23)
  {
LABEL_19:
    uint64_t v15 = (uint64_t)v24;
    char v16 = v14;
    if (v24 != v14)
    {
      do
        uint64_t v15 = sub_2DF404(v15 - 144);
      while ((void *)v15 != v14);
      char v16 = v23;
    }
    BOOL v24 = v14;
    operator delete(v16);
  }
}

void sub_7779D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    sub_2DE7D0(&a23);
    sub_53BD98((void **)(v23 - 56));
    _Unwind_Resume(a1);
  }
  sub_2DE7D0(&a23);
  sub_53BD98((void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void sub_777A30(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_777A44(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_area_incidents");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "enable_traffic_incidents");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "enable_filter_local_long_lived_area_incidents");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "long_lived_area_incident_timespan_s");
  double v7 = sub_5C7E8(a2, (uint64_t)__p) * 10.0;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_15:
  *(_DWORD *)(a1 + 4) = (int)v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_777C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_777C68(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 3904) + 16);
  if (v3)
  {
    uint64_t v23 = a3 + 640;
    do
    {
      if (*((_DWORD *)v3 + 12) != 2)
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      double v7 = (void *)v3[5];
      HIBYTE(__p[2]) = 5;
      strcpy((char *)__p, "scope");
      uint64_t v8 = sub_561B0(v7, (uint64_t)__p);
      int v9 = *(char *)(v8 + 23);
      if (v9 < 0)
      {
        if (*(void *)(v8 + 8) == 8)
        {
          uint64_t v8 = *(void *)v8;
LABEL_10:
          BOOL v10 = *(void *)v8 != 0x746E656469636E69;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          operator delete(__p[0]);
          goto LABEL_12;
        }
      }
      else if (v9 == 8)
      {
        goto LABEL_10;
      }
      BOOL v10 = 1;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_11;
      }
LABEL_12:
      if (!v10)
      {
        if (!*(unsigned char *)(a3 + 620)) {
          return;
        }
        uint64_t v11 = *(unsigned int *)(a3 + 616);
        HIBYTE(__p[2]) = 21;
        strcpy((char *)__p, "feature_polygon_usage");
        uint64_t v12 = (void (__cdecl **)(std::stringbuf *__hidden))sub_561B0(v7, (uint64_t)__p);
        sub_739B3C(a1, a2, v11, v11, v12, (uint64_t)v25);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          int v13 = SHIBYTE(v26);
          if (SHIBYTE(v26) < 0) {
            goto LABEL_21;
          }
LABEL_16:
          if (v13 == 5)
          {
            uint64_t v14 = v25;
LABEL_23:
            int v15 = *(_DWORD *)v14;
            int v16 = *((unsigned __int8 *)v14 + 4);
            if (v15 == 1819438967 && v16 == 100)
            {
              uint64_t v18 = sub_46C8EC(a2, v11);
              sub_3D63DC(*(void *)(a1 + 8), *(unsigned int *)(v18 + 32) | ((unint64_t)*(unsigned __int16 *)(v18 + 36) << 32), __p);
              if (SHIBYTE(v26) < 0) {
                operator delete(v25[0]);
              }
              *(_OWORD *)uint64_t v25 = *(_OWORD *)__p;
              uint64_t v26 = __p[2];
            }
          }
        }
        else
        {
          int v13 = SHIBYTE(v26);
          if ((SHIBYTE(v26) & 0x80000000) == 0) {
            goto LABEL_16;
          }
LABEL_21:
          if (v25[1] == (char *)dword_4 + 1)
          {
            uint64_t v14 = (void **)v25[0];
            goto LABEL_23;
          }
        }
        sub_739908(a1, (uint64_t)(v3 + 2), (uint64_t)v25, (uint64_t)__p);
        if (__p[3])
        {
          sub_77FD0C(v23, __p, (uint64_t)(v3 + 2));
          unsigned int v19 = (char *)__p[2];
          if (!__p[2]) {
            goto LABEL_35;
          }
        }
        else
        {
          unsigned int v19 = (char *)__p[2];
          if (!__p[2])
          {
LABEL_35:
            char v20 = __p[0];
            __p[0] = 0;
            if (v20) {
              operator delete(v20);
            }
            if (SHIBYTE(v26) < 0) {
              operator delete(v25[0]);
            }
            goto LABEL_3;
          }
        }
        do
        {
          uint64_t v21 = *(char **)v19;
          sub_57AC8((uint64_t *)v19 + 5);
          if (v19[39] < 0) {
            operator delete(*((void **)v19 + 2));
          }
          operator delete(v19);
          unsigned int v19 = v21;
        }
        while (v21);
        goto LABEL_35;
      }
LABEL_3:
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_777F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_777FB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = sub_3750CC(a2);
  a1[1] = a3;
  sub_3EA6A0(a1 + 2, a2, *(unsigned __int8 *)(a3 + 1227));
  sub_7382EC(a1 + 7, a2);
  sub_103E2B8(a1 + 497, *(unsigned __int8 *)(a3 + 1227), a2);
  HIBYTE(v18[2]) = 20;
  strcpy((char *)v18, "RouteIncidentMatcher");
  int v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)v18, (uint64_t *)&v15);
  sub_3CB370(v6, 3, 0, __p);
  sub_77A758((uint64_t)(a1 + 1144), __p);
  double v7 = v20;
  if (v20)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      double v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void **)v15;
  if (v15)
  {
    BOOL v10 = v16;
    uint64_t v11 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v15;
    }
    int v16 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v18[2]) < 0) {
    operator delete(v18[0]);
  }
  int v13 = (uint64_t *)sub_374EF4(a2);
  sub_688A04(v13, 4u, *(_DWORD *)(a3 + 968), a1 + 1145);
  sub_3CF908(a1 + 1147, (uint64_t)a2);
  return a1;
}

void sub_77816C(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_3A6230(v2);
  sub_76EA70(v1);
  _Unwind_Resume(a1);
}

void sub_778190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_3A6230(v20);
  sub_76EA70(v19);
  _Unwind_Resume(a1);
}

void sub_778208(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8 = sub_46C760(a2);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v8)
  {
    sub_7783F4(a1, a2, (uint64_t *)&v21);
    sub_77B0F4(a4, a4[1], (uint64_t)v21, (uint64_t)v22, 0xAF8AF8AF8AF8AF8BLL * ((v22 - (unsigned char *)v21) >> 5));
    sub_7789C0(a1, a2, a3, (uint64_t *)&__p);
    sub_77B0F4(a4, a4[1], (uint64_t)__p, (uint64_t)v20, 0xAF8AF8AF8AF8AF8BLL * ((v20 - (unsigned char *)__p) >> 5));
    uint64_t v18 = a2;
    sub_76FCB4(a4, (uint64_t *)&v18);
    unint64_t v9 = a4[1];
    unint64_t v10 = 126 - 2 * __clz(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v9 - *a4) >> 5));
    if (v9 == *a4) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_77B498(*a4, v9, (uint64_t)&v18, v11, 1);
    uint64_t v12 = __p;
    if (__p)
    {
      int v13 = v20;
      uint64_t v14 = __p;
      if (v20 != __p)
      {
        do
          int v13 = (unsigned char *)sub_3A6B94((uint64_t)(v13 - 1120));
        while (v13 != v12);
        uint64_t v14 = __p;
      }
      char v20 = v12;
      operator delete(v14);
    }
    int v15 = v21;
    if (v21)
    {
      int v16 = v22;
      uint64_t v17 = v21;
      if (v22 != v21)
      {
        do
          int v16 = (unsigned char *)sub_3A6B94((uint64_t)(v16 - 1120));
        while (v16 != v15);
        uint64_t v17 = v21;
      }
      double v22 = v15;
      operator delete(v17);
    }
  }
}

void sub_778394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  BOOL v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_50E790((void **)va);
  sub_50E790((void **)va1);
  sub_50E790(v3);
  _Unwind_Resume(a1);
}

void sub_7783C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_50E790((void **)va);
  sub_50E790(v6);
  _Unwind_Resume(a1);
}

void sub_7783E0(_Unwind_Exception *a1)
{
  sub_50E790(v1);
  _Unwind_Resume(a1);
}

void sub_7783F4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 1453))
  {
    uint64_t v40 = a1 + 9152;
    int v5 = *(unsigned __int8 *)(a1 + 9152);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v5)
    {
      sub_3F2B60(a1 + 16, (uint64_t)a2, &v55);
      long long v52 = 0u;
      long long v53 = 0u;
      int v54 = 1065353216;
      uint64_t v7 = v55;
      uint64_t v8 = v56;
      if (v55 != v56)
      {
        do
        {
          sub_24AFC((uint64_t)&v52, *v7 + 40, *v7 + 40);
          v7 += 5;
        }
        while (v7 != v8);
        unint64_t v9 = v55;
        for (uint64_t i = v56; v9 != i; v9 += 5)
        {
          unint64_t v10 = (void *)(*(void *)(a1 + 8) + 1032);
          LODWORD(v48[0]) = 0;
          if ((sub_3D0D44(a1 + 9176, v9, v10, v48) & 1) == 0)
          {
            if ((uint64_t v12 = *v9, !*(unsigned char *)(v40 + 2))
              || *(_DWORD *)v9[1]
              || ((v13 = *(_DWORD *)(v12 + 144), int v14 = *(_DWORD *)(a1 + 9156), v15 = sub_46CF04((uint64_t)a2), v14 < 0)
                ? (char v16 = -5)
                : (char v16 = 5),
                  (int v17 = 103 * (char)(v16 + v14 % 10),
                   (int)(v14 / 10 + v13 + ((v17 >> 15) & 1) + (v17 >> 10)) >= v15)
               || *(unsigned char *)v9[4] != 1))
            {
              uint64_t v51 = sub_46CE10(a2, 0, 1, *(unsigned int *)v9[1], 0, v11);
              sub_6F57B4((const std::string **)(v12 + 64), *(void *)(a1 + 8) + 968, (uint64_t)v49);
              unint64_t v18 = a3[1];
              if (v18 >= a3[2])
              {
                uint64_t v19 = sub_77DAC8(a3, &v51, v12, (uint64_t)v49, (int *)v9[1]);
              }
              else
              {
                sub_77DC84((uint64_t)(a3 + 2), a3[1], &v51, v12, (uint64_t)v49, (int *)v9[1]);
                uint64_t v19 = v18 + 1120;
                a3[1] = v18 + 1120;
              }
              a3[1] = v19;
              uint64_t v43 = *v9;
              BOOL v45 = 0;
              uint64_t v46 = 0;
              long long __p = 0;
              uint64_t v21 = (unsigned char *)v9[1];
              char v20 = (unsigned char *)v9[2];
              int64_t v22 = v20 - v21;
              if (v20 != v21)
              {
                if (v22 < 0) {
                  sub_2E00();
                }
                long long __p = operator new(v20 - v21);
                BOOL v45 = __p;
                uint64_t v23 = (char *)__p + 16 * (v22 >> 4);
                uint64_t v46 = v23;
                memcpy(__p, v21, v22);
                BOOL v45 = v23;
              }
              uint64_t v47 = v9[4];
              sub_77A1C8(a1, &v43, (uint64_t)v48);
              sub_4C2164(v19 - 440, (uint64_t)v48);
              sub_3A6CB8((uint64_t)v48);
              if (__p)
              {
                BOOL v45 = __p;
                operator delete(__p);
              }
              if (!*(unsigned char *)(v19 - 8))
              {
                exception = __cxa_allocate_exception(8uLL);
                void *exception = &off_2439078;
              }
              if (sub_6044E4(v19 - 440))
              {
                uint64_t v24 = *(void *)(a1 + 9160);
                strcpy((char *)v48, "Wildfire_area_incident");
                HIBYTE(v48[2]) = 22;
                uint64_t v25 = (const std::string *)sub_8D7730(v24, (uint64_t)v48);
                std::string::operator=((std::string *)(v19 - 680), v25);
                if (SHIBYTE(v48[2]) < 0) {
                  operator delete(v48[0]);
                }
              }
              uint64_t v26 = *(void *)a1;
              uint64_t v27 = sub_46C8EC(a2, *(unsigned int *)v9[1]);
              sub_2954EC(v26, *(void *)(v27 + 32), (uint64_t)v48);
              sub_2E4B5C((uint64_t)v48, v42);
              if (v48[1])
              {
                v48[2] = v48[1];
                operator delete(v48[1]);
              }
              uint64_t v28 = v19 - 1120;
              uint64_t v29 = *(void *)v42[0];
              *(_DWORD *)(v28 + 36) = *((_DWORD *)v42[0] + 2);
              *(void *)(v28 + 28) = v29;
              if (v42[0])
              {
                v42[1] = v42[0];
                operator delete(v42[0]);
              }
              if (v50 < 0) {
                operator delete(v49[0]);
              }
            }
          }
        }
      }
      uint64_t v30 = sub_77DD98(*a3, a3[1], a3);
      uint64_t v31 = a3[1];
      if (v31 != v30)
      {
        while (v31 != v30)
        {
          v31 -= 1120;
          sub_3A6B94(v31);
        }
        a3[1] = v30;
      }
      char v32 = (void **)v53;
      if ((void)v53)
      {
        do
        {
          uint64_t v37 = (void **)*v32;
          if (*((char *)v32 + 39) < 0) {
            operator delete(v32[2]);
          }
          operator delete(v32);
          char v32 = v37;
        }
        while (v37);
      }
      double v33 = (void *)v52;
      *(void *)&long long v52 = 0;
      if (v33) {
        operator delete(v33);
      }
      long long v34 = v55;
      if (v55)
      {
        unint64_t v35 = v56;
        uint64_t v36 = v55;
        if (v56 != v55)
        {
          do
          {
            long long v38 = (void *)*(v35 - 4);
            if (v38)
            {
              *(v35 - 3) = v38;
              operator delete(v38);
            }
            v35 -= 5;
          }
          while (v35 != v34);
          uint64_t v36 = v55;
        }
        uint64_t v56 = v34;
        operator delete(v36);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_7788F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_3A4C2C(v27 - 160);
  sub_3EE4A4((void **)(v27 - 112));
  sub_50E790(v26);
  _Unwind_Resume(a1);
}

void sub_7789C0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (!*(unsigned char *)(a1 + 9153))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  *(_OWORD *)int v86 = 0u;
  *(_OWORD *)int v87 = 0u;
  int v88 = 1065353216;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v70 = sub_487A58(a3);
  int v85 = sub_46CF04((uint64_t)a2);
  sub_46B058();
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  sub_46B060();
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  uint64_t v74 = 0;
  uint64_t v75 = (uint64_t)v8;
  uint64_t v69 = v11;
  uint64_t v67 = (uint64_t)(a4 + 2);
  unint64_t v68 = v13;
  uint64_t v72 = a4;
  uint64_t v71 = a2;
  while (1)
  {
    if (v8)
    {
      unint64_t v15 = sub_46C760(v8);
      BOOL v16 = v10 < v15;
      if (!v12)
      {
        if (v10 >= v15) {
          goto LABEL_103;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_103;
      }
      BOOL v16 = 0;
    }
    unint64_t v17 = sub_46C760(v12);
    if (v14 >= v17 || !v16) {
      break;
    }
    uint64_t v19 = sub_46C8EC(v8, v10);
    if (v19 == sub_46C8EC(v12, v14)) {
      goto LABEL_103;
    }
LABEL_17:
    char v20 = (int **)sub_46C8EC(v8, v10);
    uint64_t v22 = sub_46CCC8(v8, v10, v21);
    uint64_t v23 = (unsigned __int16 *)((char *)*v20 - **v20);
    uint64_t v73 = v22;
    if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
      uint64_t v25 = *(unsigned int *)((char *)*v20 + v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v76 = (uint64_t)v20;
    unint64_t v26 = (unint64_t)v20[4];
    uint64_t v27 = (long long *)operator new(0x20uLL);
    *(void *)uint64_t v27 = off_243A5D0;
    *((void *)v27 + 1) = &v85;
    *((void *)v27 + 2) = a1;
    *((void *)v27 + 3) = v70;
    long long v95 = v27;
    sub_3EA6A4(a1 + 16, v26, (uint64_t)&v93, &v83);
    uint64_t v28 = v76;
    if (v95 == &v93)
    {
      (*(void (**)(long long *))(v93 + 32))(&v93);
    }
    else if (v95)
    {
      (*(void (**)(void))(*(void *)v95 + 40))();
    }
    int v29 = sub_46CF88(a2, v10, 0);
    if (v29 < 0) {
      char v30 = -5;
    }
    else {
      char v30 = 5;
    }
    v85 += v29 / 10
         + (((103 * (char)(v30 + v29 % 10)) >> 15) & 1)
         + ((103 * (char)(v30 + v29 % 10)) >> 10);
    uint64_t v31 = v83;
    char v32 = v84;
    if (v83 != v84)
    {
      double v33 = (double)v25;
      while (1)
      {
        long long v34 = v31[1];
        uint64_t v35 = **v31;
        uint64_t v36 = v35 + 424 * (void)v34;
        if (sub_35884C(v36))
        {
          if (!*(unsigned char *)(a1 + 47)) {
            goto LABEL_31;
          }
          uint64_t v37 = *(void *)(a1 + 8) + 1032;
          LODWORD(v93) = 1;
          if (sub_3D0520(a1 + 9176, v35 + 424 * (void)v34, v37, &v93)) {
            goto LABEL_31;
          }
        }
        if (*(_DWORD *)(v35 + 424 * (void)v34 + 88) == 13 && !*(unsigned char *)(*(void *)(a1 + 8) + 1451)) {
          goto LABEL_31;
        }
        BOOL v38 = sub_358820(v35 + 424 * (void)v34);
        if (v10) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38;
        }
        if (v39)
        {
          sub_24AFC((uint64_t)v86, v35 + 424 * (void)v34 + 40, v35 + 424 * (void)v34 + 40);
          goto LABEL_31;
        }
        uint64_t v40 = v35 + 424 * (void)v34;
        int v41 = *(unsigned __int8 *)(v40 + 159);
        int v42 = *(_DWORD *)(v40 + 160);
        if (v41) {
          BOOL v43 = v42 == 0;
        }
        else {
          BOOL v43 = 0;
        }
        if (v43) {
          goto LABEL_31;
        }
        uint64_t v44 = v35 + 424 * (void)v34 + 40;
        if (sub_13A8C(v86, v44)) {
          goto LABEL_31;
        }
        sub_2954EC(*(void *)a1, *(void *)(v28 + 32), (uint64_t)v80);
        double v45 = (double)sub_46CACC(v75, v10) / 1000000000.0 * v33;
        if (v45 >= 0.0)
        {
          if (v45 >= 4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45) + 1;
        }
        else
        {
          if (v45 <= -4.50359963e15) {
            goto LABEL_54;
          }
          uint64_t v46 = (uint64_t)(v45 + v45);
          if (v46 >= 1) {
            --v46;
          }
        }
        double v45 = (double)(v46 >> 1);
LABEL_54:
        double v47 = (double)sub_46CB48(v75, v10) / 1000000000.0 * v33;
        if (v47 >= 0.0)
        {
          if (v47 < 4.50359963e15)
          {
            uint64_t v48 = (uint64_t)(v47 + v47) + 1;
LABEL_61:
            double v47 = (double)(v48 >> 1);
          }
        }
        else if (v47 > -4.50359963e15)
        {
          uint64_t v48 = (uint64_t)(v47 + v47);
          if (v48 >= 1) {
            --v48;
          }
          goto LABEL_61;
        }
        uint64_t v89 = 0x7FEFFFFFFFFFFFFFLL;
        uint64_t v77 = (void *)-1;
        int v78 = 0x7FFFFFFF;
        *(void *)&long long v93 = v35 + 424 * (void)v34 + 28;
        *((void *)&v93 + 1) = &v89;
        double v94 = &v77;
        sub_77F46C((uint64_t)v80, (uint64_t)&v93);
        double v91 = 0.0;
        double v92 = 0.0;
        uint64_t v90 = 0x7FEFFFFFFFFFFFFFLL;
        *(void *)&long long v93 = &v77;
        *((void *)&v93 + 1) = &v90;
        double v94 = (void **)&v91;
        long long v95 = (long long *)&v92;
        sub_77F6DC((uint64_t)v80, (double **)&v93);
        double v49 = 0.0;
        if (v92 != 0.0)
        {
          double v49 = v91 / v92;
          if (v91 / v92 > 1.0) {
            double v49 = 1.0;
          }
        }
        uint64_t v50 = (uint64_t)v45;
        double v51 = v49 * v33;
        uint64_t v52 = (uint64_t)(v51 + v51);
        uint64_t v53 = v52 - 1;
        if (v52 < 1) {
          uint64_t v53 = (uint64_t)(v51 + v51);
        }
        uint64_t v54 = v53 >> 1;
        if (v51 > -4.50359963e15) {
          double v55 = (double)v54;
        }
        else {
          double v55 = v51;
        }
        double v56 = (double)((v52 + 1) >> 1);
        if (v51 >= 4.50359963e15) {
          double v56 = v51;
        }
        if (v51 >= 0.0) {
          double v57 = v56;
        }
        else {
          double v57 = v55;
        }
        BOOL v58 = __OFSUB__((uint64_t)v57, v50);
        uint64_t v59 = (uint64_t)v57 - v50;
        BOOL v60 = v59 < 0 == v58 && (uint64_t)v57 <= (uint64_t)v47;
        uint64_t v28 = v76;
        if (!v60) {
          goto LABEL_91;
        }
        double v92 = *(double *)&v59;
        sub_6F57B4((const std::string **)(v35 + 424 * (void)v34 + 64), *(void *)(a1 + 8) + 968, (uint64_t)&v77);
        sub_77A534((uint64_t *)a1, v76, (uint64_t)&v93);
        *(void *)&double v91 = *(void *)&v92 + v74;
        LODWORD(v90) = v10;
        unint64_t v61 = v72[1];
        if (v61 >= v72[2])
        {
          uint64_t v62 = sub_77F94C(v72, (uint64_t *)&v91, v36, (uint64_t)&v77, &v93, (int *)&v90, (uint64_t *)&v92);
        }
        else
        {
          sub_77FB20(v67, v72[1], (uint64_t *)&v91, v36, (uint64_t)&v77, &v93, (int *)&v90, (uint64_t *)&v92);
          uint64_t v62 = v61 + 1120;
          v72[1] = v61 + 1120;
        }
        v72[1] = v62;
        if (*(unsigned char *)(a1 + 47)) {
          sub_777C68(a1 + 56, v71, v62 - 1120);
        }
        sub_24AFC((uint64_t)v86, v44, v44);
        if (v103 < 0)
        {
          operator delete(v102);
          if ((v101 & 0x80000000) == 0)
          {
LABEL_87:
            if ((v99 & 0x80000000) == 0) {
              goto LABEL_88;
            }
            goto LABEL_95;
          }
        }
        else if ((v101 & 0x80000000) == 0)
        {
          goto LABEL_87;
        }
        operator delete(v100);
        if ((v99 & 0x80000000) == 0)
        {
LABEL_88:
          if (v97 < 0) {
            goto LABEL_96;
          }
          goto LABEL_89;
        }
LABEL_95:
        operator delete(v98);
        if (v97 < 0)
        {
LABEL_96:
          operator delete(v96);
          if (SHIBYTE(v94) < 0)
          {
LABEL_97:
            operator delete((void *)v93);
            if (v79 < 0)
            {
LABEL_98:
              operator delete(v77);
              unint64_t v63 = __p;
              if (!__p) {
                goto LABEL_31;
              }
LABEL_92:
              uint64_t v82 = v63;
              operator delete(v63);
              goto LABEL_31;
            }
            goto LABEL_91;
          }
          goto LABEL_90;
        }
LABEL_89:
        if (SHIBYTE(v94) < 0) {
          goto LABEL_97;
        }
LABEL_90:
        if (v79 < 0) {
          goto LABEL_98;
        }
LABEL_91:
        unint64_t v63 = __p;
        if (__p) {
          goto LABEL_92;
        }
LABEL_31:
        v31 += 2;
        if (v31 == v32)
        {
          uint64_t v31 = v83;
          a2 = v71;
          uint64_t v8 = (void *)v75;
          break;
        }
      }
    }
    unint64_t v14 = v68;
    if (v31)
    {
      __darwin_ct_rune_t v84 = v31;
      operator delete(v31);
    }
    v74 += v73;
    ++v10;
    uint64_t v12 = v69;
  }
  if ((v16 ^ (v14 < v17))) {
    goto LABEL_17;
  }
LABEL_103:
  uint64_t v64 = (void **)v87[0];
  if (v87[0])
  {
    do
    {
      int v66 = (void **)*v64;
      if (*((char *)v64 + 39) < 0) {
        operator delete(v64[2]);
      }
      operator delete(v64);
      uint64_t v64 = v66;
    }
    while (v66);
  }
  long long v65 = v86[0];
  v86[0] = 0;
  if (v65) {
    operator delete(v65);
  }
}

void sub_779190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_50E790(v47);
  sub_3A4C2C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_7792D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a31)
  {
    operator delete(a31);
    sub_50E790(a17);
    sub_3A4C2C(&a35);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x7791F8);
}

void sub_7792EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a31) {
    JUMPOUT(0x7792FCLL);
  }
  JUMPOUT(0x7791F8);
}

double sub_77931C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = nullsub_1(a2);
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void **)(v5 + 8);
  if (*(void **)v5 == v8) {
    return result;
  }
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  while (2)
  {
    sub_778208(a1, v7, a3, (uint64_t *)&v23);
    unint64_t v9 = (void **)(v7 + 919);
    uint64_t v10 = v7[919];
    if (!v10) {
      goto LABEL_4;
    }
    uint64_t v11 = v7[920];
    uint64_t v12 = (void *)v7[919];
    if (v11 == v10) {
      goto LABEL_3;
    }
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v11 + v13;
      if (*(unsigned char *)(v11 + v13 - 8))
      {
        sub_3A6CB8(v14 - 440);
        *(unsigned char *)(v14 - 8) = 0;
      }
      *(void *)(v14 - 480) = off_2438EC8;
      if (*(char *)(v14 - 449) < 0) {
        operator delete(*(void **)(v11 + v13 - 472));
      }
      uint64_t v15 = v11 + v13;
      BOOL v16 = (unsigned char *)(v11 + v13 - 488);
      if (*v16) {
        *BOOL v16 = 0;
      }
      if (*(char *)(v15 - 505) < 0)
      {
        operator delete(*(void **)(v11 + v13 - 528));
        uint64_t v17 = v11 + v13;
        if ((*(char *)(v11 + v13 - 537) & 0x80000000) == 0)
        {
LABEL_16:
          if ((*(char *)(v17 - 561) & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v17 = v11 + v13;
        if ((*(char *)(v11 + v13 - 537) & 0x80000000) == 0) {
          goto LABEL_16;
        }
      }
      operator delete(*(void **)(v17 - 560));
      if ((*(char *)(v17 - 561) & 0x80000000) == 0)
      {
LABEL_17:
        uint64_t v18 = v11 + v13;
        if ((*(char *)(v11 + v13 - 601) & 0x80000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_27;
      }
LABEL_26:
      operator delete(*(void **)(v11 + v13 - 584));
      uint64_t v18 = v11 + v13;
      if ((*(char *)(v11 + v13 - 601) & 0x80000000) == 0)
      {
LABEL_18:
        if ((*(char *)(v18 - 633) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_28;
      }
LABEL_27:
      operator delete(*(void **)(v18 - 624));
      if ((*(char *)(v18 - 633) & 0x80000000) == 0)
      {
LABEL_19:
        uint64_t v19 = v11 + v13;
        if ((*(char *)(v11 + v13 - 657) & 0x80000000) == 0) {
          goto LABEL_20;
        }
        goto LABEL_29;
      }
LABEL_28:
      operator delete(*(void **)(v15 - 656));
      uint64_t v19 = v11 + v13;
      if ((*(char *)(v11 + v13 - 657) & 0x80000000) == 0)
      {
LABEL_20:
        char v20 = (unsigned char *)(v19 - 688);
        if (!*(unsigned char *)(v19 - 688)) {
          goto LABEL_22;
        }
LABEL_21:
        *char v20 = 0;
        goto LABEL_22;
      }
LABEL_29:
      operator delete(*(void **)(v19 - 680));
      char v20 = (unsigned char *)(v19 - 688);
      if (*(unsigned char *)(v19 - 688)) {
        goto LABEL_21;
      }
LABEL_22:
      sub_29D95C(v14 - 1120);
      v13 -= 1120;
    }
    while (v11 + v13 != v10);
    uint64_t v12 = *v9;
    a1 = v21;
    a3 = v22;
LABEL_3:
    v7[920] = v10;
    operator delete(v12);
LABEL_4:
    double result = *(double *)&v23;
    *(_OWORD *)unint64_t v9 = v23;
    v7[921] = v24;
    v7 += 1541;
    if (v7 != v8) {
      continue;
    }
    return result;
  }
}

void sub_77958C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)long long __p = 0u;
  long long v19 = 0u;
  int v20 = 1065353216;
  BOOL v6 = (uint64_t *)nullsub_1(a2);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 != v8)
  {
    do
    {
      uint64_t v9 = *(void *)(v7 + 7352);
      uint64_t v10 = *(void *)(v7 + 7360);
      while (v9 != v10)
      {
        if (sub_605454(v9))
        {
          if (sub_77D38C(__p, v9 + 40))
          {
            uint64_t v21 = (long long *)(v9 + 40);
            uint64_t v11 = sub_77D5BC((uint64_t)__p, v9 + 40, (uint64_t)&unk_20F06E0, &v21);
            sub_605758((uint64_t)(v11 + 5), v9);
          }
          else
          {
            uint64_t v21 = (long long *)(v9 + 40);
            uint64_t v12 = sub_77D5BC((uint64_t)__p, v9 + 40, (uint64_t)&unk_20F06E0, &v21);
            sub_4C9334((uint64_t)(v12 + 5), v9);
          }
        }
        v9 += 1120;
      }
      v7 += 12328;
    }
    while (v7 != v8);
  }
  uint64_t v13 = (uint64_t *)v19;
  if ((void)v19)
  {
    do
    {
      while (1)
      {
        sub_7797BC(a1, a2, (unsigned char *)v13 + 40);
        sub_779AE4(a1, a2, (uint64_t)(v13 + 5));
        unint64_t v14 = a3[1];
        if (v14 < a3[2]) {
          break;
        }
        a3[1] = sub_5A73FC(a3, (uint64_t)(v13 + 5));
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          goto LABEL_16;
        }
      }
      sub_4BE9F4(a3[1], (uint64_t)(v13 + 5));
      a3[1] = v14 + 1120;
      a3[1] = v14 + 1120;
      uint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
LABEL_16:
    uint64_t v15 = (void **)v19;
    if ((void)v19)
    {
      do
      {
        uint64_t v17 = (void **)*v15;
        sub_3A6B94((uint64_t)(v15 + 5));
        if (*((char *)v15 + 39) < 0) {
          operator delete(v15[2]);
        }
        operator delete(v15);
        uint64_t v15 = v17;
      }
      while (v17);
    }
  }
  BOOL v16 = __p[0];
  __p[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_779770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_76FDCC((uint64_t)&a9);
  sub_50E790(v9);
  _Unwind_Resume(a1);
}

void sub_7797BC(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (uint64_t *)nullsub_1(a2);
  uint64_t v8 = sub_40EFE8(*v7);
  sub_2954EC(v6, *(void *)(v8 + 32), (uint64_t)&v27);
  sub_2E4B5C((uint64_t)&v27, v29);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v9 = (uint64_t *)nullsub_1(a2);
  int v10 = sub_46CABC(*v9);
  sub_32F08((uint64_t *)v29, 1, 0, &v27, 1.0);
  sub_32F08((uint64_t *)&v27, 0, 0, v26, fmin((double)(1000000000 - v10) / 1000000000.0, 1.0));
  if (v27)
  {
    __p[0] = v27;
    operator delete(v27);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  *(_OWORD *)int v29 = *(_OWORD *)v26;
  uint64_t v30 = *(void *)&v26[16];
  char v14 = sub_6054D8((uint64_t)a3, *(_DWORD **)v26, *(double *)v26, v11, v12, v13);
  if (!a3[1112])
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  a3[1080] = v14;
  a3[1081] = 1;
  uint64_t v15 = *a1;
  uint64_t v16 = nullsub_1(a2);
  uint64_t v17 = sub_46C8FC(*(void *)(v16 + 8) - 12328);
  sub_2954EC(v15, *(void *)(v17 + 32), (uint64_t)&v27);
  sub_2E4B5C((uint64_t)&v27, v26);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v18 = nullsub_1(a2);
  unsigned int v19 = sub_46CAC4(*(void *)(v18 + 8) - 12328);
  sub_31854((uint64_t *)v26, 0, &v27, 0.0, (double)v19 / 1000000000.0);
  if (*(void *)v26)
  {
    *(void *)&char v26[8] = *(void *)v26;
    operator delete(*(void **)v26);
  }
  *(void *)unint64_t v26 = v27;
  *(_OWORD *)&char v26[8] = *(_OWORD *)__p;
  char v23 = sub_6054D8((uint64_t)a3, (_DWORD *)__p[0] - 3, *(double *)__p, v20, v21, v22);
  if (!a3[1112])
  {
    uint64_t v25 = __cxa_allocate_exception(8uLL);
    *uint64_t v25 = &off_2439078;
  }
  a3[1082] = v23;
  a3[1083] = 1;
  if (*(void *)v26)
  {
    *(void *)&char v26[8] = *(void *)v26;
    operator delete(*(void **)v26);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
}

void sub_779A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_779AE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 1112))
  {
LABEL_84:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v5 = *(unsigned char **)(a3 + 768);
  uint64_t v6 = *(unsigned char **)(a3 + 776);
  if (v5 == v6) {
    return;
  }
  while (*v5 != 6)
  {
    v5 += 80;
    if (v5 == v6) {
      goto LABEL_21;
    }
  }
  if (v5 != v6)
  {
    sub_77A408((uint64_t)a1, (uint64_t)v5, (uint64_t)&v33);
    if (!*(unsigned char *)(a3 + 1112))
    {
      uint64_t v31 = __cxa_allocate_exception(8uLL);
      void *v31 = &off_2439078;
    }
    *(unsigned char *)(a3 + 1000) = (_BYTE)v33;
    uint64_t v8 = (void **)(a3 + 1008);
    if (*(char *)(a3 + 1031) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = v34;
    *(void *)(a3 + 1024) = v35;
    HIBYTE(v35) = 0;
    LOBYTE(v34) = 0;
    uint64_t v9 = (void **)(a3 + 1032);
    if (*(char *)(a3 + 1055) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)uint64_t v9 = __p;
    *(void *)(a3 + 1048) = v37;
    HIBYTE(v37) = 0;
    LOBYTE(__p) = 0;
    int v10 = (void **)(a3 + 1056);
    if (*(char *)(a3 + 1079) < 0)
    {
      operator delete(*v10);
      int v11 = SHIBYTE(v37);
      *(_OWORD *)int v10 = v38;
      *(void *)(a3 + 1072) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      if (v11 < 0)
      {
        operator delete((void *)__p);
        if (SHIBYTE(v35) < 0) {
          goto LABEL_20;
        }
      }
      else if (SHIBYTE(v35) < 0)
      {
        goto LABEL_20;
      }
    }
    else
    {
      *(_OWORD *)int v10 = v38;
      *(void *)(a3 + 1072) = v39;
      HIBYTE(v39) = 0;
      LOBYTE(v38) = 0;
      if (SHIBYTE(v35) < 0)
      {
LABEL_20:
        operator delete((void *)v34);
        if (!*(unsigned char *)(a3 + 1112)) {
          goto LABEL_84;
        }
        goto LABEL_21;
      }
    }
    if (!*(unsigned char *)(a3 + 1112)) {
      goto LABEL_84;
    }
  }
LABEL_21:
  if (!*(unsigned char *)(a3 + 1081) || !*(unsigned char *)(a3 + 1083)) {
    goto LABEL_84;
  }
  double v12 = *(unsigned char **)(a3 + 768);
  double v13 = *(unsigned char **)(a3 + 776);
  char v14 = v12;
  if (v12 != v13)
  {
    char v14 = *(unsigned char **)(a3 + 768);
    while (*v14 != 5)
    {
      v14 += 80;
      if (v14 == v13) {
        goto LABEL_33;
      }
    }
  }
  if (*(unsigned char *)(a3 + 1082) || v14 == v13 || *(unsigned char *)(a3 + 1080))
  {
LABEL_33:
    uint64_t v16 = *(unsigned char **)(a3 + 768);
    if (v12 != v13)
    {
      uint64_t v16 = *(unsigned char **)(a3 + 768);
      while (*v16 != 3)
      {
        v16 += 80;
        if (v16 == v13) {
          goto LABEL_43;
        }
      }
    }
    if (!*(unsigned char *)(a3 + 1080) || *(unsigned char *)(a3 + 1082) || v16 == v13)
    {
LABEL_43:
      uint64_t v18 = *(unsigned char **)(a3 + 768);
      if (v12 != v13)
      {
        uint64_t v18 = *(unsigned char **)(a3 + 768);
        while (*v18 != 2)
        {
          v18 += 80;
          if (v18 == v13) {
            goto LABEL_53;
          }
        }
      }
      if (!*(unsigned char *)(a3 + 1082) || *(unsigned char *)(a3 + 1080) || v18 == v13)
      {
LABEL_53:
        double v20 = *(unsigned char **)(a3 + 768);
        if (v12 != v13)
        {
          double v20 = *(unsigned char **)(a3 + 768);
          while (*v20 != 4)
          {
            v20 += 80;
            if (v20 == v13)
            {
LABEL_66:
              while (v12 != v13)
              {
                if (*v12 == 1)
                {
                  if (v12 == v13) {
                    return;
                  }
                  sub_77A408((uint64_t)a1, (uint64_t)v12, (uint64_t)&v33);
                  if (!*(unsigned char *)(a3 + 1112))
                  {
                    char v32 = __cxa_allocate_exception(8uLL);
                    *char v32 = &off_2439078;
                  }
                  goto LABEL_72;
                }
                v12 += 80;
              }
              return;
            }
          }
        }
        if (v20 == v13) {
          goto LABEL_66;
        }
        uint64_t v21 = nullsub_1(a2);
        double v22 = *(void **)v21;
        char v23 = *(void **)(v21 + 8);
        if (*(void **)v21 != v23)
        {
          do
          {
            sub_46C77C(v22, &v33);
            BOOL v24 = sub_77AEC0(v33, v34, *((void **)&v34 + 1), v35, a1, a3);
            if (v24) {
              break;
            }
            v22 += 1541;
          }
          while (v22 != v23);
          if (v24)
          {
            double v12 = *(unsigned char **)(a3 + 768);
            double v13 = *(unsigned char **)(a3 + 776);
            goto LABEL_66;
          }
        }
        sub_77A408((uint64_t)a1, (uint64_t)v20, (uint64_t)&v33);
        if (!*(unsigned char *)(a3 + 1112))
        {
          uint64_t v25 = __cxa_allocate_exception(8uLL);
          *uint64_t v25 = &off_2439078;
        }
      }
      else
      {
        sub_77A408((uint64_t)a1, (uint64_t)v18, (uint64_t)&v33);
        if (!*(unsigned char *)(a3 + 1112))
        {
          unsigned int v19 = __cxa_allocate_exception(8uLL);
          void *v19 = &off_2439078;
        }
      }
    }
    else
    {
      sub_77A408((uint64_t)a1, (uint64_t)v16, (uint64_t)&v33);
      if (!*(unsigned char *)(a3 + 1112))
      {
        uint64_t v17 = __cxa_allocate_exception(8uLL);
        void *v17 = &off_2439078;
      }
    }
  }
  else
  {
    sub_77A408((uint64_t)a1, (uint64_t)v14, (uint64_t)&v33);
    if (!*(unsigned char *)(a3 + 1112))
    {
      uint64_t v15 = __cxa_allocate_exception(8uLL);
      *uint64_t v15 = &off_2439078;
    }
  }
LABEL_72:
  *(unsigned char *)(a3 + 920) = (_BYTE)v33;
  unint64_t v26 = (void **)(a3 + 928);
  if (*(char *)(a3 + 951) < 0) {
    operator delete(*v26);
  }
  *(_OWORD *)unint64_t v26 = v34;
  *(void *)(a3 + 944) = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  uint64_t v27 = (void **)(a3 + 952);
  if (*(char *)(a3 + 975) < 0) {
    operator delete(*v27);
  }
  *(_OWORD *)uint64_t v27 = __p;
  *(void *)(a3 + 968) = v37;
  HIBYTE(v37) = 0;
  LOBYTE(__p) = 0;
  uint64_t v28 = (void **)(a3 + 976);
  if (*(char *)(a3 + 999) < 0)
  {
    operator delete(*v28);
    int v29 = SHIBYTE(v37);
    *(_OWORD *)uint64_t v28 = v38;
    *(void *)(a3 + 992) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    if (v29 < 0)
    {
      operator delete((void *)__p);
      if (SHIBYTE(v35) < 0) {
        goto LABEL_81;
      }
    }
    else if (SHIBYTE(v35) < 0)
    {
LABEL_81:
      operator delete((void *)v34);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v28 = v38;
    *(void *)(a3 + 992) = v39;
    HIBYTE(v39) = 0;
    LOBYTE(v38) = 0;
    if (SHIBYTE(v35) < 0) {
      goto LABEL_81;
    }
  }
}

void sub_77A150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77A164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77A178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77A18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77A1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77A1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_77A1C8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (const std::string **)a2[4];
  sub_6F57B4(v6 + 8, *(void *)(a1 + 8) + 968, (uint64_t)&v15);
  sub_6F57B4(v6 + 1, *(void *)(a1 + 8) + 968, (uint64_t)v13);
  sub_6F57B4(v6 + 4, *(void *)(a1 + 8) + 968, (uint64_t)v11);
  if (SHIBYTE(v14) < 0)
  {
    sub_4200(v7, v13[0], (unint64_t)v13[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v13;
    uint64_t v8 = v14;
  }
  if (SHIBYTE(v12) < 0)
  {
    sub_4200(&__p, v11[0], (unint64_t)v11[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v11;
    uint64_t v10 = v12;
  }
  sub_6040C8(a3, (uint64_t)v6, &v15, (long long *)v7);
  if (SHIBYTE(v10) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v7[0]);
LABEL_9:
  sub_782B30(a2[1], a2[2], (uint64_t *)(a3 + 408), *(void *)(a3 + 416), a1);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_11:
      if ((v16 & 0x80000000) == 0) {
        return;
      }
LABEL_17:
      operator delete((void *)v15);
      return;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v13[0]);
  if (v16 < 0) {
    goto LABEL_17;
  }
}

void sub_77A33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

double sub_77A408@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v6 = a3 + 8;
  *(_WORD *)(a3 + 31) = 0;
  *(_WORD *)(a3 + 55) = 0;
  *(unsigned char *)(a3 + 79) = 0;
  *(unsigned char *)a3 = *(unsigned char *)a2;
  if (*(void *)(a2 + 8) != *(void *)(a2 + 16))
  {
    sub_6F57B4((const std::string **)(a2 + 8), *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)uint64_t v6 = v11;
    *(void *)(v6 + 16) = v12;
  }
  if (*(void *)(a2 + 32) != *(void *)(a2 + 40))
  {
    sub_6F57B4((const std::string **)(a2 + 32), *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)(a3 + 32) = v11;
    *(void *)(a3 + 48) = v12;
  }
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v10 = (const std::string **)(a2 + 56);
  if (v8 != v9)
  {
    sub_6F57B4(v10, *(void *)(a1 + 8) + 968, (uint64_t)&v11);
    double result = *(double *)&v11;
    *(_OWORD *)(a3 + 56) = v11;
    *(void *)(a3 + 72) = v12;
  }
  return result;
}

void sub_77A4F8(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_77A50C(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_77A520(_Unwind_Exception *a1)
{
  sub_4BD84C(v1);
  _Unwind_Resume(a1);
}

void sub_77A534(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 32);
  sub_58E730(*a1, v5, 1u, &v22);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
  uint64_t v7 = (int *)sub_2D5D58(*a1, v6);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x25u && (uint64_t v9 = v8[18]) != 0) {
    uint64_t v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    uint64_t v10 = 0;
  }
  sub_2DE69C(v10, &__p);
  sub_3D63DC(*a1, v6, v18);
  sub_5F2D5C((uint64_t)__dst, (long long *)v18, *(unsigned char *)(a1[1] + 1414));
  sub_6F33CC((uint64_t)__dst, (unsigned __int8 **)&v22, (uint64_t *)&__p, a1[1] + 968, a3);
  if (v17 < 0)
  {
    operator delete(__dst[0]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_7:
      long long v11 = (void **)__p;
      if (__p) {
        goto LABEL_8;
      }
LABEL_18:
      double v13 = v22;
      if (!v22) {
        return;
      }
      goto LABEL_19;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v18[0]);
  long long v11 = (void **)__p;
  if (!__p) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v12 = v21;
  if (v21 == v11)
  {
    uint64_t v21 = v11;
    operator delete(v11);
    double v13 = v22;
    if (!v22) {
      return;
    }
    goto LABEL_19;
  }
  do
  {
    if (*((char *)v12 - 9) < 0) {
      operator delete(*(v12 - 4));
    }
    v12 -= 5;
  }
  while (v12 != v11);
  uint64_t v21 = v11;
  operator delete(__p);
  double v13 = v22;
  if (v22)
  {
LABEL_19:
    uint64_t v14 = (uint64_t)v23;
    long long v15 = v13;
    if (v23 != v13)
    {
      do
        uint64_t v14 = sub_2DF404(v14 - 144);
      while ((void *)v14 != v13);
      long long v15 = v22;
    }
    char v23 = v13;
    operator delete(v15);
  }
}

void sub_77A6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    sub_2DE7D0(&a23);
    sub_53BD98((void **)(v23 - 56));
    _Unwind_Resume(a1);
  }
  sub_2DE7D0(&a23);
  sub_53BD98((void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void sub_77A744(_Unwind_Exception *a1)
{
  sub_53BD98((void **)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_77A758(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_area_incidents");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "enable_traffic_incidents");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "enable_filter_local_long_lived_area_incidents");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "long_lived_area_incident_timespan_s");
  double v7 = sub_5C7E8(a2, (uint64_t)__p) * 10.0;
  if (v7 >= 0.0)
  {
    if (v7 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    if (v7 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v8 = (uint64_t)(v7 + v7);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_15:
  *(_DWORD *)(a1 + 4) = (int)v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_77A954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_77A97C(uint64_t a1)
{
  if (*(char *)(a1 + 255) < 0)
  {
    operator delete(*(void **)(a1 + 232));
    if ((*(char *)(a1 + 231) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 207) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 231) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 208));
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v2 = a1;
    return sub_30328C(v2);
  }
LABEL_9:
  operator delete(*(void **)(a1 + 184));
  uint64_t v2 = a1;

  return sub_30328C(v2);
}

BOOL sub_77AA10(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a1)
  {
    if (a3)
    {
      do
      {
        unint64_t v12 = sub_46C760(a1);
        unint64_t v13 = sub_46C760(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return 0;
          }
        }
        else
        {
          uint64_t v14 = sub_46C8EC(a1, a2);
          if (v14 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v15 = sub_46C8EC(a1, a2);
        sub_2954EC(*a5, *(void *)(v15 + 32), (uint64_t)v42);
        unint64_t v40 = sub_2E1AA4((uint64_t)v42);
        int v41 = v16;
        char v21 = sub_6054D8(a6, &v40, v17, v18, v19, v20);
        if (__p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }
        ++a2;
      }
      while ((v21 & 1) != 0);
      return 1;
    }
    else
    {
      while (1)
      {
        unint64_t v22 = sub_46C760(a1);
        BOOL v23 = a2 >= v22;
        BOOL result = a2 < v22;
        if (v23) {
          break;
        }
        uint64_t v25 = sub_46C8EC(a1, a2);
        sub_2954EC(*a5, *(void *)(v25 + 32), (uint64_t)v42);
        unint64_t v40 = sub_2E1AA4((uint64_t)v42);
        int v41 = v26;
        char v31 = sub_6054D8(a6, &v40, v27, v28, v29, v30);
        if (__p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }
        ++a2;
        if ((v31 & 1) == 0) {
          return 1;
        }
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v32 = sub_46C760(a3);
      BOOL v23 = a4 >= v32;
      BOOL result = a4 < v32;
      if (v23) {
        break;
      }
      uint64_t v33 = sub_46C8EC(0, a2);
      sub_2954EC(*a5, *(void *)(v33 + 32), (uint64_t)v42);
      unint64_t v40 = sub_2E1AA4((uint64_t)v42);
      int v41 = v34;
      char v39 = sub_6054D8(a6, &v40, v35, v36, v37, v38);
      if (__p)
      {
        uint64_t v44 = __p;
        operator delete(__p);
      }
      ++a2;
      if ((v39 & 1) == 0) {
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_77AC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_77AC44(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a1)
  {
    if (a3)
    {
      do
      {
        unint64_t v12 = sub_470ADC(a1);
        unint64_t v13 = sub_470ADC(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return 0;
          }
        }
        else
        {
          uint64_t v14 = sub_470B40(a1, a2);
          if (v14 == sub_470B40(a3, a4)) {
            return 0;
          }
        }
        uint64_t v15 = (unsigned int *)sub_470B40(a1, a2);
        sub_2954EC(*a5, (((unint64_t)(v15[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v15[1] << 32) | *v15) ^ 0x1000000000000, (uint64_t)v42);
        unint64_t v40 = sub_2E1AA4((uint64_t)v42);
        int v41 = v16;
        char v21 = sub_6054D8(a6, &v40, v17, v18, v19, v20);
        if (__p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }
        ++a2;
      }
      while ((v21 & 1) != 0);
      return 1;
    }
    else
    {
      while (1)
      {
        unint64_t v22 = sub_470ADC(a1);
        BOOL v23 = a2 >= v22;
        BOOL result = a2 < v22;
        if (v23) {
          break;
        }
        uint64_t v25 = (unsigned int *)sub_470B40(a1, a2);
        sub_2954EC(*a5, (((unint64_t)(v25[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v25[1] << 32) | *v25) ^ 0x1000000000000, (uint64_t)v42);
        unint64_t v40 = sub_2E1AA4((uint64_t)v42);
        int v41 = v26;
        char v31 = sub_6054D8(a6, &v40, v27, v28, v29, v30);
        if (__p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }
        ++a2;
        if ((v31 & 1) == 0) {
          return 1;
        }
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v32 = sub_470ADC(a3);
      BOOL v23 = a4 >= v32;
      BOOL result = a4 < v32;
      if (v23) {
        break;
      }
      uint64_t v33 = (unsigned int *)sub_470B40(0, a2);
      sub_2954EC(*a5, (((unint64_t)(v33[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v33[1] << 32) | *v33) ^ 0x1000000000000, (uint64_t)v42);
      unint64_t v40 = sub_2E1AA4((uint64_t)v42);
      int v41 = v34;
      char v39 = sub_6054D8(a6, &v40, v35, v36, v37, v38);
      if (__p)
      {
        uint64_t v44 = __p;
        operator delete(__p);
      }
      ++a2;
      if ((v39 & 1) == 0) {
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_77AE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_77AEC0(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a1)
  {
    if (a3)
    {
      do
      {
        unint64_t v12 = sub_46C760(a1);
        unint64_t v13 = sub_46C760(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return 0;
          }
        }
        else
        {
          uint64_t v14 = sub_46C8EC(a1, a2);
          if (v14 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v15 = sub_46C8EC(a1, a2);
        sub_2954EC(*a5, *(void *)(v15 + 32), (uint64_t)v42);
        unint64_t v40 = sub_2E1AA4((uint64_t)v42);
        int v41 = v16;
        char v21 = sub_6054D8(a6, &v40, v17, v18, v19, v20);
        if (__p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }
        ++a2;
      }
      while ((v21 & 1) != 0);
      return 1;
    }
    else
    {
      while (1)
      {
        unint64_t v22 = sub_46C760(a1);
        BOOL v23 = a2 >= v22;
        BOOL result = a2 < v22;
        if (v23) {
          break;
        }
        uint64_t v25 = sub_46C8EC(a1, a2);
        sub_2954EC(*a5, *(void *)(v25 + 32), (uint64_t)v42);
        unint64_t v40 = sub_2E1AA4((uint64_t)v42);
        int v41 = v26;
        char v31 = sub_6054D8(a6, &v40, v27, v28, v29, v30);
        if (__p)
        {
          uint64_t v44 = __p;
          operator delete(__p);
        }
        ++a2;
        if ((v31 & 1) == 0) {
          return 1;
        }
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v32 = sub_46C760(a3);
      BOOL v23 = a4 >= v32;
      BOOL result = a4 < v32;
      if (v23) {
        break;
      }
      uint64_t v33 = sub_46C8EC(0, a2);
      sub_2954EC(*a5, *(void *)(v33 + 32), (uint64_t)v42);
      unint64_t v40 = sub_2E1AA4((uint64_t)v42);
      int v41 = v34;
      char v39 = sub_6054D8(a6, &v40, v35, v36, v37, v38);
      if (__p)
      {
        uint64_t v44 = __p;
        operator delete(__p);
      }
      ++a2;
      if ((v39 & 1) == 0) {
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_77B0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_77B0F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 1120;
  uint64_t v7 = *a1 + 1120 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[1];
  if ((uint64_t)(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v11 - v12) >> 5)) >= a5)
  {
    if ((uint64_t)(0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v12 - v7) >> 5)) >= a5)
    {
      uint64_t v18 = a3 + 1120 * a5;
      uint64_t v20 = a1[1];
    }
    else
    {
      uint64_t v18 = a3 + 32 * ((uint64_t)(v12 - v7) >> 5);
      if (v18 == a4)
      {
        uint64_t v20 = a1[1];
        a1[1] = v12;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
      else
      {
        uint64_t v19 = 0;
        do
        {
          sub_4BE9F4(v12 + v19, v18 + v19);
          v19 += 1120;
        }
        while (v18 + v19 != a4);
        uint64_t v20 = v12 + v19;
        a1[1] = v12 + v19;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
    }
    uint64_t v21 = v7 + 1120 * a5;
    unint64_t v22 = v20 - 1120 * a5;
    uint64_t v23 = v20;
    if (v22 < v12)
    {
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = sub_4C09FC(v23, v22);
        v22 += 1120;
        uint64_t v23 = v24 + 1120;
      }
      while (v22 < v12);
    }
    a1[1] = v23;
    if (v20 != v21)
    {
      uint64_t v25 = v20 - 1120;
      uint64_t v26 = 32 * ((v20 - v21) >> 5);
      do
      {
        sub_4C1EE0(v25, 1120 * v6 + v5 - 1120 + v26);
        v25 -= 1120;
        v26 -= 1120;
      }
      while (v26);
    }
    if (v18 != v9)
    {
      uint64_t v27 = v7;
      do
      {
        sub_4C9334(v27, v9);
        v9 += 1120;
        v27 += 1120;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x5075075075075075 * ((uint64_t)(v12 - v5) >> 5);
  if (v13 > 0x3A83A83A83A83ALL) {
    sub_2E00();
  }
  unint64_t v14 = 0xAF8AF8AF8AF8AF8BLL * ((v11 - v5) >> 5);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x1D41D41D41D41DLL) {
    unint64_t v15 = 0x3A83A83A83A83ALL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x3A83A83A83A83ALL) {
      sub_188D718();
    }
    int v16 = (char *)operator new(1120 * v15);
  }
  else
  {
    int v16 = 0;
  }
  uint64_t v29 = (uint64_t)&v16[1120 * v6];
  uint64_t v38 = v29;
  char v39 = &v16[1120 * v15];
  uint64_t v30 = 1120 * a5;
  uint64_t v31 = v29 + 1120 * a5;
  do
  {
    sub_4BE9F4(v29, v9);
    v29 += 1120;
    v9 += 1120;
    v30 -= 1120;
  }
  while (v30);
  uint64_t v28 = v38;
  uint64_t v32 = *a1;
  uint64_t v33 = v38;
  if (*a1 != v7)
  {
    uint64_t v34 = v7;
    uint64_t v33 = v38;
    do
    {
      v33 -= 1120;
      v34 -= 1120;
      sub_4C09FC(v33, v34);
    }
    while (v34 != v32);
  }
  uint64_t v35 = a1[1];
  if (v35 != v7)
  {
    do
    {
      sub_4C09FC(v31, v7);
      v7 += 1120;
      v31 += 1120;
    }
    while (v7 != v35);
    uint64_t v7 = a1[1];
  }
  double v36 = (void *)*a1;
  *a1 = v33;
  a1[1] = v31;
  a1[2] = (uint64_t)v39;
  while ((void *)v7 != v36)
  {
    v7 -= 1120;
    sub_3A6B94(v7);
  }
  if (v36) {
    operator delete(v36);
  }
  return v28;
}

void sub_77B480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A7590((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77B498(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v25 = a2;
  unint64_t v26 = result;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - v10;
    unint64_t v13 = 0xAF8AF8AF8AF8AF8BLL * ((v9 - v10) >> 5);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v25 = v9 - 1120;
          BOOL result = sub_604EA8(v9 - 1120, v10);
          if (result) {
            BOOL result = sub_77B7B8((uint64_t *)&v26, (uint64_t *)&v25);
          }
          break;
        case 3uLL:
          unint64_t v25 = v9 - 1120;
          BOOL result = sub_77C2E8(v10, v10 + 1120, v9 - 1120);
          break;
        case 4uLL:
          unint64_t v25 = v9 - 1120;
          BOOL result = sub_77CB14(v10, v10 + 1120, v10 + 2240, v9 - 1120);
          break;
        case 5uLL:
          unint64_t v25 = v9 - 1120;
          BOOL result = sub_77CC40(v10, v10 + 1120, v10 + 2240, v10 + 3360, v9 - 1120);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 26879)
    {
      if (a5) {
        return sub_77B844(v10, v9);
      }
      else {
        return sub_77BD98(v10, v9);
      }
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 1120;
    if ((unint64_t)v12 > 0x23000)
    {
      sub_77C2E8(v10, v10 + 1120 * (v13 >> 1), v15);
      uint64_t v16 = 1120 * v14;
      uint64_t v17 = 1120 * v14 - 1120;
      unint64_t v18 = v25;
      sub_77C2E8(v26 + 1120, v26 + v17, v25 - 2240);
      sub_77C2E8(v26 + 2240, v26 + v16 + 1120, v18 - 3360);
      sub_77C2E8(v26 + v17, v26 + v16, v26 + v16 + 1120);
      unint64_t v24 = v26 + v16;
      sub_77B7B8((uint64_t *)&v26, (uint64_t *)&v24);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_77C2E8(v10 + 1120 * (v13 >> 1), v10, v15);
      if (a5)
      {
LABEL_14:
        uint64_t v9 = v25;
        unint64_t v20 = sub_77C660(v26, v25);
        if ((v22 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_15;
      }
    }
    char v19 = sub_604EA8(v26 - 1120, v26);
    uint64_t v9 = v25;
    if ((v19 & 1) == 0)
    {
      BOOL result = sub_77C480(v26, v25);
      uint64_t v10 = result;
      goto LABEL_22;
    }
    unint64_t v20 = sub_77C660(v26, v25);
    if ((v21 & 1) == 0) {
      goto LABEL_20;
    }
LABEL_15:
    int v23 = sub_77C84C(v26, v20);
    uint64_t v10 = v20 + 1120;
    BOOL result = sub_77C84C(v20 + 1120, v9);
    if (result)
    {
      if (v23) {
        return result;
      }
      unint64_t v25 = v20;
      uint64_t v10 = v26;
      uint64_t v9 = v20;
      ++v11;
    }
    else
    {
      if (!v23)
      {
LABEL_20:
        BOOL result = sub_77B498(v26, v20, a3, -v11, a5 & 1);
        uint64_t v10 = v20 + 1120;
LABEL_22:
        a5 = 0;
        unint64_t v26 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      unint64_t v26 = v20 + 1120;
      ++v11;
    }
  }
  if (v10 != v9) {
    return sub_77CDAC(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_77B7B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_4C09FC((uint64_t)v5, *a1);
  sub_4C1EE0(v2, v3);
  sub_4C1EE0(v3, (uint64_t)v5);
  return sub_3A6B94((uint64_t)v5);
}

uint64_t sub_77B844(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 1120;
    if (result + 1120 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v8 = v6;
        uint64_t v6 = v4;
        BOOL result = sub_604EA8(v4, v8);
        if (result)
        {
          sub_4C09FC((uint64_t)v41, v6);
          uint64_t v9 = v5;
          do
          {
            uint64_t v10 = v3 + v9;
            sub_301388((char **)(v3 + v9 + 1120), v3 + v9);
            if (*(unsigned char *)(v3 + v9 + 432))
            {
              if (!*(unsigned char *)(v3 + v9 + 1552)) {
                *(unsigned char *)(v10 + 1552) = 1;
              }
              *(void *)(v10 + 1544) = *(void *)(v10 + 424);
            }
            else if (*(unsigned char *)(v3 + v9 + 1552))
            {
              *(unsigned char *)(v10 + 1552) = 0;
            }
            uint64_t v11 = v3 + v9;
            uint64_t v12 = (void **)(v3 + v9 + 1560);
            if (*(char *)(v3 + v9 + 1583) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 440);
            *(void *)(v3 + v9 + 1576) = *(void *)(v11 + 456);
            *(unsigned char *)(v11 + 463) = 0;
            *(unsigned char *)(v11 + 440) = 0;
            uint64_t v13 = v11 + 1584;
            if (*(char *)(v11 + 1607) < 0) {
              operator delete(*(void **)v13);
            }
            uint64_t v14 = v11 + 464;
            uint64_t v15 = v3 + v9;
            *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
            *(void *)(v13 + 16) = *(void *)(v14 + 16);
            *(unsigned char *)(v15 + 487) = 0;
            *(unsigned char *)uint64_t v14 = 0;
            *(void *)(v15 + 1608) = *(void *)(v3 + v9 + 488);
            uint64_t v16 = (void **)(v3 + v9 + 1616);
            if (*(char *)(v3 + v9 + 1639) < 0) {
              operator delete(*v16);
            }
            *(_OWORD *)uint64_t v16 = *(_OWORD *)(v15 + 496);
            *(void *)(v3 + v9 + 1632) = *(void *)(v15 + 512);
            *(unsigned char *)(v15 + 519) = 0;
            *(unsigned char *)(v15 + 496) = 0;
            *(void *)(v15 + 1640) = *(void *)(v15 + 520);
            *(_DWORD *)(v15 + 1648) = *(_DWORD *)(v15 + 528);
            uint64_t v17 = v15 + 1656;
            if (*(char *)(v15 + 1679) < 0) {
              operator delete(*(void **)v17);
            }
            uint64_t v18 = v15 + 536;
            uint64_t v19 = v3 + v9;
            *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
            *(void *)(v17 + 16) = *(void *)(v18 + 16);
            *(unsigned char *)(v3 + v9 + 559) = 0;
            *(unsigned char *)uint64_t v18 = 0;
            unint64_t v20 = (void **)(v3 + v9 + 1680);
            if (*(char *)(v3 + v9 + 1703) < 0) {
              operator delete(*v20);
            }
            *(_OWORD *)unint64_t v20 = *(_OWORD *)(v19 + 560);
            *(void *)(v3 + v9 + 1696) = *(void *)(v19 + 576);
            *(unsigned char *)(v19 + 583) = 0;
            *(unsigned char *)(v19 + 560) = 0;
            *(_DWORD *)(v19 + 1704) = *(_DWORD *)(v19 + 584);
            char v21 = (void **)(v19 + 1712);
            if (*(char *)(v19 + 1735) < 0) {
              operator delete(*v21);
            }
            uint64_t v22 = v3 + v9;
            *(_OWORD *)char v21 = *(_OWORD *)(v3 + v9 + 592);
            *(void *)(v19 + 1728) = *(void *)(v3 + v9 + 608);
            *(unsigned char *)(v22 + 615) = 0;
            *(unsigned char *)(v22 + 592) = 0;
            char v23 = *(unsigned char *)(v3 + v9 + 620);
            if (v23)
            {
              *(_DWORD *)(v22 + 1736) = *(_DWORD *)(v22 + 616);
              char v23 = 1;
            }
            *(unsigned char *)(v22 + 1740) = v23;
            if (*(unsigned char *)(v22 + 632))
            {
              if (!*(unsigned char *)(v22 + 1752)) {
                *(unsigned char *)(v22 + 1752) = 1;
              }
              *(void *)(v22 + 1744) = *(void *)(v3 + v9 + 624);
            }
            else if (*(unsigned char *)(v22 + 1752))
            {
              *(unsigned char *)(v22 + 1752) = 0;
            }
            uint64_t v24 = v3 + v9;
            unint64_t v25 = (void **)(v3 + v9 + 1768);
            if (*(char *)(v3 + v9 + 1791) < 0) {
              operator delete(*v25);
            }
            *(void *)(v3 + v9 + 1784) = *(void *)(v24 + 664);
            *(_OWORD *)unint64_t v25 = *(_OWORD *)(v24 + 648);
            *(unsigned char *)(v24 + 671) = 0;
            *(unsigned char *)(v24 + 648) = 0;
            *(_WORD *)(v24 + 1792) = *(_WORD *)(v24 + 672);
            unint64_t v26 = (unsigned char *)(v24 + 1800);
            if (*(unsigned char *)(v24 + 1112))
            {
              uint64_t v27 = v3 + v9;
              uint64_t v28 = (unsigned char *)(v3 + v9 + 680);
              if (*(unsigned char *)(v3 + v9 + 2232))
              {
                sub_4C2350((uint64_t)v26, (uint64_t)v28);
              }
              else
              {
                unsigned char *v26 = *v28;
                *(_OWORD *)(v27 + 1808) = *(_OWORD *)(v27 + 688);
                *(void *)(v27 + 1824) = *(void *)(v27 + 704);
                *(_OWORD *)(v27 + 688) = 0u;
                *(void *)(v27 + 704) = 0;
                *(_OWORD *)(v27 + 1832) = *(_OWORD *)(v27 + 712);
                *(void *)(v27 + 1848) = *(void *)(v27 + 728);
                *(void *)(v27 + 728) = 0;
                *(_OWORD *)(v27 + 712) = 0u;
                *(_DWORD *)(v27 + 1856) = *(_DWORD *)(v27 + 736);
                *(_OWORD *)(v27 + 1872) = 0u;
                *(_OWORD *)(v27 + 1864) = *(_OWORD *)(v27 + 744);
                *(void *)(v27 + 1880) = *(void *)(v27 + 760);
                *(_OWORD *)(v27 + 744) = 0u;
                *(void *)(v27 + 760) = 0;
                *(_OWORD *)(v27 + 1896) = 0u;
                *(_OWORD *)(v27 + 1888) = *(_OWORD *)(v27 + 768);
                *(void *)(v27 + 1904) = *(void *)(v27 + 784);
                *(_OWORD *)(v27 + 768) = 0u;
                *(void *)(v27 + 784) = 0;
                long long v29 = *(_OWORD *)(v27 + 792);
                *(void *)(v27 + 1928) = *(void *)(v27 + 808);
                *(_OWORD *)(v27 + 1912) = v29;
                *(void *)(v27 + 808) = 0;
                *(_OWORD *)(v27 + 792) = 0u;
                long long v30 = *(_OWORD *)(v27 + 816);
                *(_OWORD *)(v27 + 1952) = *(_OWORD *)(v27 + 832);
                *(_OWORD *)(v27 + 1936) = v30;
                long long v31 = *(_OWORD *)(v27 + 848);
                *(void *)(v27 + 1984) = *(void *)(v27 + 864);
                *(_OWORD *)(v27 + 1968) = v31;
                *(void *)(v27 + 864) = 0;
                *(_OWORD *)(v27 + 848) = 0u;
                long long v32 = *(_OWORD *)(v27 + 872);
                *(void *)(v27 + 2008) = *(void *)(v27 + 888);
                *(_OWORD *)(v27 + 1992) = v32;
                *(void *)(v27 + 888) = 0;
                *(_OWORD *)(v27 + 872) = 0u;
                long long v33 = *(_OWORD *)(v27 + 896);
                *(void *)(v27 + 2032) = *(void *)(v27 + 912);
                *(_OWORD *)(v27 + 2016) = v33;
                *(void *)(v27 + 912) = 0;
                *(_OWORD *)(v27 + 896) = 0u;
                *(unsigned char *)(v27 + 2040) = *(unsigned char *)(v27 + 920);
                long long v34 = *(_OWORD *)(v27 + 928);
                *(void *)(v27 + 2064) = *(void *)(v27 + 944);
                *(_OWORD *)(v27 + 2048) = v34;
                *(void *)(v27 + 944) = 0;
                *(_OWORD *)(v27 + 928) = 0u;
                long long v35 = *(_OWORD *)(v27 + 952);
                *(void *)(v27 + 2088) = *(void *)(v27 + 968);
                *(_OWORD *)(v27 + 2072) = v35;
                *(void *)(v27 + 968) = 0;
                *(_OWORD *)(v27 + 952) = 0u;
                long long v36 = *(_OWORD *)(v27 + 976);
                *(void *)(v27 + 2112) = *(void *)(v27 + 992);
                *(_OWORD *)(v27 + 2096) = v36;
                *(void *)(v27 + 992) = 0;
                *(_OWORD *)(v27 + 976) = 0u;
                *(unsigned char *)(v27 + 2120) = *(unsigned char *)(v27 + 1000);
                long long v37 = *(_OWORD *)(v27 + 1008);
                *(void *)(v27 + 2144) = *(void *)(v27 + 1024);
                *(_OWORD *)(v27 + 2128) = v37;
                *(void *)(v27 + 1024) = 0;
                *(_OWORD *)(v27 + 1008) = 0u;
                long long v38 = *(_OWORD *)(v27 + 1032);
                *(void *)(v27 + 2168) = *(void *)(v27 + 1048);
                *(_OWORD *)(v27 + 2152) = v38;
                *(void *)(v27 + 1048) = 0;
                *(_OWORD *)(v27 + 1032) = 0u;
                long long v39 = *(_OWORD *)(v27 + 1056);
                *(void *)(v27 + 2192) = *(void *)(v27 + 1072);
                *(_OWORD *)(v27 + 2176) = v39;
                *(void *)(v27 + 1072) = 0;
                *(_OWORD *)(v27 + 1056) = 0u;
                *(_WORD *)(v27 + 2200) = *(_WORD *)(v27 + 1080);
                *(_WORD *)(v27 + 2202) = *(_WORD *)(v27 + 1082);
                *(_OWORD *)(v27 + 2216) = 0u;
                *(_OWORD *)(v27 + 2208) = *(_OWORD *)(v27 + 1088);
                *(void *)(v27 + 2224) = *(void *)(v27 + 1104);
                *(_OWORD *)(v27 + 1088) = 0u;
                *(void *)(v27 + 1104) = 0;
                *(unsigned char *)(v27 + 2232) = 1;
              }
            }
            else if (*(unsigned char *)(v3 + v9 + 2232))
            {
              sub_3A6CB8((uint64_t)v26);
              *(unsigned char *)(v3 + v9 + 2232) = 0;
            }
            if (!v9)
            {
              uint64_t v7 = v3;
              goto LABEL_5;
            }
            char v40 = sub_604EA8((uint64_t)v41, v3 + v9 - 1120);
            v9 -= 1120;
          }
          while ((v40 & 1) != 0);
          uint64_t v7 = v3 + v9 + 1120;
LABEL_5:
          sub_4C1EE0(v7, (uint64_t)v41);
          BOOL result = sub_3A6B94((uint64_t)v41);
        }
        uint64_t v4 = v6 + 1120;
        v5 += 1120;
      }
      while (v6 + 1120 != a2);
    }
  }
  return result;
}

void sub_77BD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77BD98(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 1120;
    if (result + 1120 != a2)
    {
      uint64_t v5 = result + 559;
      do
      {
        uint64_t v6 = v3;
        uint64_t v3 = v4;
        BOOL result = sub_604EA8(v4, v6);
        if (result)
        {
          sub_4C09FC((uint64_t)v29, v3);
          uint64_t v7 = v5;
          do
          {
            sub_301388((char **)(v7 + 561), v7 - 559);
            if (*(unsigned char *)(v7 - 127))
            {
              if (!*(unsigned char *)(v7 + 993)) {
                *(unsigned char *)(v7 + 993) = 1;
              }
              *(void *)(v7 + 985) = *(void *)(v7 - 135);
            }
            else if (*(unsigned char *)(v7 + 993))
            {
              *(unsigned char *)(v7 + 993) = 0;
            }
            uint64_t v8 = (void **)(v7 + 1001);
            if (*(char *)(v7 + 1024) < 0) {
              operator delete(*v8);
            }
            *(_OWORD *)uint64_t v8 = *(_OWORD *)(v7 - 119);
            *(void *)(v7 + 1017) = *(void *)(v7 - 103);
            *(unsigned char *)(v7 - 96) = 0;
            *(unsigned char *)(v7 - 119) = 0;
            uint64_t v9 = (void **)(v7 + 1025);
            if (*(char *)(v7 + 1048) < 0) {
              operator delete(*v9);
            }
            *(_OWORD *)uint64_t v9 = *(_OWORD *)(v7 - 95);
            *(void *)(v7 + 1041) = *(void *)(v7 - 79);
            *(unsigned char *)(v7 - 72) = 0;
            *(unsigned char *)(v7 - 95) = 0;
            *(void *)(v7 + 1049) = *(void *)(v7 - 71);
            uint64_t v10 = (void **)(v7 + 1057);
            if (*(char *)(v7 + 1080) < 0) {
              operator delete(*v10);
            }
            *(_OWORD *)uint64_t v10 = *(_OWORD *)(v7 - 63);
            *(void *)(v7 + 1073) = *(void *)(v7 - 47);
            *(unsigned char *)(v7 - 40) = 0;
            *(unsigned char *)(v7 - 63) = 0;
            *(void *)(v7 + 1081) = *(void *)(v7 - 39);
            *(_DWORD *)(v7 + 1089) = *(_DWORD *)(v7 - 31);
            uint64_t v11 = (void **)(v7 + 1097);
            if (*(char *)(v7 + 1120) < 0) {
              operator delete(*v11);
            }
            *(_OWORD *)uint64_t v11 = *(_OWORD *)(v7 - 23);
            *(void *)(v7 + 1113) = *(void *)(v7 - 7);
            *(unsigned char *)uint64_t v7 = 0;
            *(unsigned char *)(v7 - 23) = 0;
            uint64_t v12 = (void **)(v7 + 1121);
            if (*(char *)(v7 + 1144) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v7 + 1);
            *(void *)(v7 + 1137) = *(void *)(v7 + 17);
            *(unsigned char *)(v7 + 24) = 0;
            *(unsigned char *)(v7 + 1) = 0;
            *(_DWORD *)(v7 + 1145) = *(_DWORD *)(v7 + 25);
            uint64_t v13 = (void **)(v7 + 1153);
            if (*(char *)(v7 + 1176) < 0) {
              operator delete(*v13);
            }
            *(_OWORD *)uint64_t v13 = *(_OWORD *)(v7 + 33);
            *(void *)(v7 + 1169) = *(void *)(v7 + 49);
            *(unsigned char *)(v7 + 56) = 0;
            *(unsigned char *)(v7 + 33) = 0;
            char v14 = *(unsigned char *)(v7 + 61);
            if (v14)
            {
              *(_DWORD *)(v7 + 1177) = *(_DWORD *)(v7 + 57);
              char v14 = 1;
            }
            *(unsigned char *)(v7 + 1181) = v14;
            if (*(unsigned char *)(v7 + 73))
            {
              if (!*(unsigned char *)(v7 + 1193)) {
                *(unsigned char *)(v7 + 1193) = 1;
              }
              *(void *)(v7 + 1185) = *(void *)(v7 + 65);
            }
            else if (*(unsigned char *)(v7 + 1193))
            {
              *(unsigned char *)(v7 + 1193) = 0;
            }
            uint64_t v15 = (void **)(v7 + 1209);
            if (*(char *)(v7 + 1232) < 0) {
              operator delete(*v15);
            }
            *(_OWORD *)uint64_t v15 = *(_OWORD *)(v7 + 89);
            *(void *)(v7 + 1225) = *(void *)(v7 + 105);
            *(unsigned char *)(v7 + 112) = 0;
            *(unsigned char *)(v7 + 89) = 0;
            *(_WORD *)(v7 + 1233) = *(_WORD *)(v7 + 113);
            uint64_t v16 = v7 + 1241;
            if (*(unsigned char *)(v7 + 553))
            {
              if (*(unsigned char *)(v7 + 1673))
              {
                sub_4C2350(v16, v7 + 121);
              }
              else
              {
                *(unsigned char *)(v7 + 1241) = *(unsigned char *)(v7 + 121);
                *(_OWORD *)(v7 + 1257) = 0u;
                *(_OWORD *)(v7 + 1249) = *(_OWORD *)(v7 + 129);
                *(void *)(v7 + 1265) = *(void *)(v7 + 145);
                *(_OWORD *)(v7 + 129) = 0u;
                *(void *)(v7 + 145) = 0;
                *(_OWORD *)(v7 + 1281) = 0u;
                *(_OWORD *)(v7 + 1273) = *(_OWORD *)(v7 + 153);
                *(void *)(v7 + 1289) = *(void *)(v7 + 169);
                *(void *)(v7 + 169) = 0;
                *(_OWORD *)(v7 + 153) = 0u;
                *(_DWORD *)(v7 + 1297) = *(_DWORD *)(v7 + 177);
                *(_OWORD *)(v7 + 1313) = 0u;
                *(_OWORD *)(v7 + 1305) = *(_OWORD *)(v7 + 185);
                *(void *)(v7 + 1321) = *(void *)(v7 + 201);
                *(_OWORD *)(v7 + 185) = 0u;
                *(void *)(v7 + 201) = 0;
                *(_OWORD *)(v7 + 1337) = 0u;
                *(_OWORD *)(v7 + 1329) = *(_OWORD *)(v7 + 209);
                *(void *)(v7 + 1345) = *(void *)(v7 + 225);
                *(_OWORD *)(v7 + 209) = 0u;
                *(void *)(v7 + 225) = 0;
                long long v17 = *(_OWORD *)(v7 + 233);
                *(void *)(v7 + 1369) = *(void *)(v7 + 249);
                *(_OWORD *)(v7 + 1353) = v17;
                *(void *)(v7 + 249) = 0;
                *(_OWORD *)(v7 + 233) = 0u;
                long long v18 = *(_OWORD *)(v7 + 273);
                *(_OWORD *)(v7 + 1377) = *(_OWORD *)(v7 + 257);
                *(_OWORD *)(v7 + 1393) = v18;
                long long v19 = *(_OWORD *)(v7 + 289);
                *(void *)(v7 + 1425) = *(void *)(v7 + 305);
                *(_OWORD *)(v7 + 1409) = v19;
                *(void *)(v7 + 305) = 0;
                *(_OWORD *)(v7 + 289) = 0u;
                long long v20 = *(_OWORD *)(v7 + 313);
                *(void *)(v7 + 1449) = *(void *)(v7 + 329);
                *(_OWORD *)(v7 + 1433) = v20;
                *(void *)(v7 + 329) = 0;
                *(_OWORD *)(v7 + 313) = 0u;
                long long v21 = *(_OWORD *)(v7 + 337);
                *(void *)(v7 + 1473) = *(void *)(v7 + 353);
                *(_OWORD *)(v7 + 1457) = v21;
                *(void *)(v7 + 353) = 0;
                *(_OWORD *)(v7 + 337) = 0u;
                *(unsigned char *)(v7 + 1481) = *(unsigned char *)(v7 + 361);
                long long v22 = *(_OWORD *)(v7 + 369);
                *(void *)(v7 + 1505) = *(void *)(v7 + 385);
                *(_OWORD *)(v7 + 1489) = v22;
                *(void *)(v7 + 385) = 0;
                *(_OWORD *)(v7 + 369) = 0u;
                long long v23 = *(_OWORD *)(v7 + 393);
                *(void *)(v7 + 1529) = *(void *)(v7 + 409);
                *(_OWORD *)(v7 + 1513) = v23;
                *(void *)(v7 + 409) = 0;
                *(_OWORD *)(v7 + 393) = 0u;
                long long v24 = *(_OWORD *)(v7 + 417);
                *(void *)(v7 + 1553) = *(void *)(v7 + 433);
                *(_OWORD *)(v7 + 1537) = v24;
                *(void *)(v7 + 433) = 0;
                *(_OWORD *)(v7 + 417) = 0u;
                *(unsigned char *)(v7 + 1561) = *(unsigned char *)(v7 + 441);
                long long v25 = *(_OWORD *)(v7 + 449);
                *(void *)(v7 + 1585) = *(void *)(v7 + 465);
                *(_OWORD *)(v7 + 1569) = v25;
                *(void *)(v7 + 465) = 0;
                *(_OWORD *)(v7 + 449) = 0u;
                long long v26 = *(_OWORD *)(v7 + 473);
                *(void *)(v7 + 1609) = *(void *)(v7 + 489);
                *(_OWORD *)(v7 + 1593) = v26;
                *(void *)(v7 + 489) = 0;
                *(_OWORD *)(v7 + 473) = 0u;
                long long v27 = *(_OWORD *)(v7 + 497);
                *(void *)(v7 + 1633) = *(void *)(v7 + 513);
                *(_OWORD *)(v7 + 1617) = v27;
                *(void *)(v7 + 513) = 0;
                *(_OWORD *)(v7 + 497) = 0u;
                *(_WORD *)(v7 + 1641) = *(_WORD *)(v7 + 521);
                *(_WORD *)(v7 + 1643) = *(_WORD *)(v7 + 523);
                *(_OWORD *)(v7 + 1657) = 0u;
                *(_OWORD *)(v7 + 1649) = *(_OWORD *)(v7 + 529);
                *(void *)(v7 + 1665) = *(void *)(v7 + 545);
                *(void *)(v7 + 529) = 0;
                *(void *)(v7 + 537) = 0;
                *(void *)(v7 + 545) = 0;
                *(unsigned char *)(v7 + 1673) = 1;
              }
            }
            else if (*(unsigned char *)(v7 + 1673))
            {
              sub_3A6CB8(v16);
              *(unsigned char *)(v7 + 1673) = 0;
            }
            char v28 = sub_604EA8((uint64_t)v29, v7 - 1679);
            v7 -= 1120;
          }
          while ((v28 & 1) != 0);
          sub_4C1EE0(v7 + 561, (uint64_t)v29);
          BOOL result = sub_3A6B94((uint64_t)v29);
        }
        uint64_t v4 = v3 + 1120;
        v5 += 1120;
      }
      while (v3 + 1120 != a2);
    }
  }
  return result;
}

void sub_77C2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77C2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = sub_604EA8(a2, a1);
  uint64_t result = sub_604EA8(a3, a2);
  if ((v6 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    sub_4C09FC((uint64_t)v9, a2);
    sub_4C1EE0(a2, a3);
    sub_4C1EE0(a3, (uint64_t)v9);
    sub_3A6B94((uint64_t)v9);
    if (!sub_604EA8(a2, a1)) {
      return 1;
    }
    sub_4C09FC((uint64_t)v9, a1);
    sub_4C1EE0(a1, a2);
    uint64_t v8 = a2;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_4C09FC((uint64_t)v9, a1);
    sub_4C1EE0(a1, a2);
    sub_4C1EE0(a2, (uint64_t)v9);
    sub_3A6B94((uint64_t)v9);
    if (!sub_604EA8(a3, a2)) {
      return 1;
    }
    sub_4C09FC((uint64_t)v9, a2);
    sub_4C1EE0(a2, a3);
    uint64_t v8 = a3;
LABEL_9:
    sub_4C1EE0(v8, (uint64_t)v9);
    sub_3A6B94((uint64_t)v9);
    return 2;
  }
  sub_4C09FC((uint64_t)v9, a1);
  sub_4C1EE0(a1, a3);
  sub_4C1EE0(a3, (uint64_t)v9);
  sub_3A6B94((uint64_t)v9);
  return 1;
}

unint64_t sub_77C480(uint64_t a1, unint64_t a2)
{
  sub_4C09FC((uint64_t)v8, a1);
  if (sub_604EA8((uint64_t)v8, a2 - 1120))
  {
    unint64_t v4 = a1;
    do
      v4 += 1120;
    while ((sub_604EA8((uint64_t)v8, v4) & 1) == 0);
  }
  else
  {
    unint64_t v5 = a1 + 1120;
    do
    {
      unint64_t v4 = v5;
      if (v5 >= a2) {
        break;
      }
      int v6 = sub_604EA8((uint64_t)v8, v5);
      unint64_t v5 = v4 + 1120;
    }
    while (!v6);
  }
  if (v4 < a2)
  {
    do
      a2 -= 1120;
    while ((sub_604EA8((uint64_t)v8, a2) & 1) != 0);
  }
  while (v4 < a2)
  {
    sub_4C09FC((uint64_t)v9, v4);
    sub_4C1EE0(v4, a2);
    sub_4C1EE0(a2, (uint64_t)v9);
    sub_3A6B94((uint64_t)v9);
    do
      v4 += 1120;
    while (!sub_604EA8((uint64_t)v8, v4));
    do
      a2 -= 1120;
    while ((sub_604EA8((uint64_t)v8, a2) & 1) != 0);
  }
  if (v4 - 1120 != a1) {
    sub_4C1EE0(a1, v4 - 1120);
  }
  sub_4C1EE0(v4 - 1120, (uint64_t)v8);
  sub_3A6B94((uint64_t)v8);
  return v4;
}

void sub_77C5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77C660(uint64_t a1, unint64_t a2)
{
  sub_4C09FC((uint64_t)v11, a1);
  uint64_t v4 = 0;
  do
  {
    char v5 = sub_604EA8(a1 + v4 + 1120, (uint64_t)v11);
    v4 += 1120;
  }
  while ((v5 & 1) != 0);
  unint64_t v6 = a1 + v4;
  if (v4 == 1120)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      a2 -= 1120;
    }
    while ((sub_604EA8(a2, (uint64_t)v11) & 1) == 0);
  }
  else
  {
    do
      a2 -= 1120;
    while (!sub_604EA8(a2, (uint64_t)v11));
  }
  if (v6 >= a2)
  {
    uint64_t v9 = v6 - 1120;
    if (v6 - 1120 == a1) {
      goto LABEL_18;
    }
LABEL_17:
    sub_4C1EE0(a1, v9);
    goto LABEL_18;
  }
  unint64_t v7 = a1 + v4;
  unint64_t v8 = a2;
  do
  {
    sub_4C09FC((uint64_t)v12, v7);
    sub_4C1EE0(v7, v8);
    sub_4C1EE0(v8, (uint64_t)v12);
    sub_3A6B94((uint64_t)v12);
    do
      v7 += 1120;
    while ((sub_604EA8(v7, (uint64_t)v11) & 1) != 0);
    do
      v8 -= 1120;
    while (!sub_604EA8(v8, (uint64_t)v11));
  }
  while (v7 < v8);
  uint64_t v9 = v7 - 1120;
  if (v9 != a1) {
    goto LABEL_17;
  }
LABEL_18:
  sub_4C1EE0(v9, (uint64_t)v11);
  sub_3A6B94((uint64_t)v11);
  return v9;
}

void sub_77C7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C7FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77C838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77C84C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0xAF8AF8AF8AF8AF8BLL * ((a2 - a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v5 = a2 - 1120;
      if (sub_604EA8(a2 - 1120, a1))
      {
        sub_4C09FC((uint64_t)v13, a1);
        sub_4C1EE0(a1, v5);
        sub_4C1EE0(v5, (uint64_t)v13);
        goto LABEL_21;
      }
      return v4;
    case 3uLL:
      sub_77C2E8(a1, a1 + 1120, a2 - 1120);
      return v4;
    case 4uLL:
      sub_77CB14(a1, a1 + 1120, a1 + 2240, a2 - 1120);
      return v4;
    case 5uLL:
      sub_77CC40(a1, a1 + 1120, a1 + 2240, a1 + 3360, a2 - 1120);
      return v4;
    default:
      uint64_t v6 = a1 + 2240;
      sub_77C2E8(a1, a1 + 1120, a1 + 2240);
      uint64_t v7 = a1 + 3360;
      if (a1 + 3360 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (!sub_604EA8(v7, v6))
  {
LABEL_14:
    uint64_t v6 = v7;
    v8 += 1120;
    v7 += 1120;
    if (v7 == a2) {
      return 1;
    }
  }
  sub_4C09FC((uint64_t)v13, v7);
  uint64_t v10 = v8;
  while (1)
  {
    sub_4C1EE0(a1 + v10 + 3360, a1 + v10 + 2240);
    if (v10 == -2240) {
      break;
    }
    char v11 = sub_604EA8((uint64_t)v13, a1 + v10 + 1120);
    v10 -= 1120;
    if ((v11 & 1) == 0)
    {
      sub_4C1EE0(a1 + v10 + 3360, (uint64_t)v13);
      if (++v9 != 8) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
  }
  sub_4C1EE0(a1, (uint64_t)v13);
  if (++v9 != 8)
  {
LABEL_13:
    sub_3A6B94((uint64_t)v13);
    goto LABEL_14;
  }
LABEL_20:
  BOOL v4 = v7 + 1120 == a2;
LABEL_21:
  sub_3A6B94((uint64_t)v13);
  return v4;
}

void sub_77CAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77CB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_77C2E8(a1, a2, a3);
  uint64_t result = sub_604EA8(a4, a3);
  if (result)
  {
    sub_4C09FC((uint64_t)v9, a3);
    sub_4C1EE0(a3, a4);
    sub_4C1EE0(a4, (uint64_t)v9);
    sub_3A6B94((uint64_t)v9);
    uint64_t result = sub_604EA8(a3, a2);
    if (result)
    {
      sub_4C09FC((uint64_t)v9, a2);
      sub_4C1EE0(a2, a3);
      sub_4C1EE0(a3, (uint64_t)v9);
      sub_3A6B94((uint64_t)v9);
      uint64_t result = sub_604EA8(a2, a1);
      if (result)
      {
        sub_4C09FC((uint64_t)v9, a1);
        sub_4C1EE0(a1, a2);
        sub_4C1EE0(a2, (uint64_t)v9);
        return sub_3A6B94((uint64_t)v9);
      }
    }
  }
  return result;
}

uint64_t sub_77CC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_77CB14(a1, a2, a3, a4);
  uint64_t result = sub_604EA8(a5, a4);
  if (result)
  {
    sub_4C09FC((uint64_t)v11, a4);
    sub_4C1EE0(a4, a5);
    sub_4C1EE0(a5, (uint64_t)v11);
    sub_3A6B94((uint64_t)v11);
    uint64_t result = sub_604EA8(a4, a3);
    if (result)
    {
      sub_4C09FC((uint64_t)v11, a3);
      sub_4C1EE0(a3, a4);
      sub_4C1EE0(a4, (uint64_t)v11);
      sub_3A6B94((uint64_t)v11);
      uint64_t result = sub_604EA8(a3, a2);
      if (result)
      {
        sub_4C09FC((uint64_t)v11, a2);
        sub_4C1EE0(a2, a3);
        sub_4C1EE0(a3, (uint64_t)v11);
        sub_3A6B94((uint64_t)v11);
        uint64_t result = sub_604EA8(a2, a1);
        if (result)
        {
          sub_4C09FC((uint64_t)v11, a1);
          sub_4C1EE0(a1, a2);
          sub_4C1EE0(a2, (uint64_t)v11);
          return sub_3A6B94((uint64_t)v11);
        }
      }
    }
  }
  return result;
}

uint64_t sub_77CDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 1120;
    if (a2 - a1 >= 1121)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 1120 * v10;
      do
      {
        sub_77CF58(a1, a4, v9, v12);
        v12 -= 1120;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (sub_604EA8(v14, a1))
        {
          sub_4C09FC((uint64_t)v18, v14);
          sub_4C1EE0(v14, a1);
          sub_4C1EE0(a1, (uint64_t)v18);
          sub_3A6B94((uint64_t)v18);
          sub_77CF58(a1, a4, v9, a1);
        }
        v14 += 1120;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 1121)
    {
      unint64_t v15 = v8 / 0x460uLL;
      do
      {
        sub_77D0F4(a1, v6, a4, v15);
        v6 -= 1120;
      }
      while (v15-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_77CF58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAF8AF8AF8AF8AF8BLL * ((a4 - result) >> 5)))
    {
      uint64_t v9 = (0x5F15F15F15F15F16 * ((a4 - result) >> 5)) | 1;
      uint64_t v10 = result + 1120 * v9;
      uint64_t v11 = 0x5F15F15F15F15F16 * ((a4 - result) >> 5) + 2;
      if (v11 < a3 && sub_604EA8(result + 1120 * v9, v10 + 1120))
      {
        v10 += 1120;
        uint64_t v9 = v11;
      }
      uint64_t result = sub_604EA8(v10, v5);
      if ((result & 1) == 0)
      {
        sub_4C09FC((uint64_t)v14, v5);
        do
        {
          uint64_t v12 = v10;
          sub_4C1EE0(v5, v10);
          if (v7 < v9) {
            break;
          }
          uint64_t v13 = (2 * v9) | 1;
          uint64_t v10 = v6 + 1120 * v13;
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            uint64_t v9 = v13;
          }
          else if (sub_604EA8(v6 + 1120 * v13, v10 + 1120))
          {
            v10 += 1120;
          }
          else
          {
            uint64_t v9 = v13;
          }
          uint64_t v5 = v12;
        }
        while (!sub_604EA8(v10, (uint64_t)v14));
        sub_4C1EE0(v12, (uint64_t)v14);
        return sub_3A6B94((uint64_t)v14);
      }
    }
  }
  return result;
}

void sub_77D0E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77D0F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    sub_4C09FC((uint64_t)v15, result);
    uint64_t v8 = 0;
    uint64_t v9 = v4 >> 1;
    uint64_t v10 = v7;
    do
    {
      uint64_t v11 = v10 + 1120 * v8 + 1120;
      uint64_t v12 = (2 * v8) | 1;
      uint64_t v13 = 2 * v8 + 2;
      if (v13 < a4 && sub_604EA8(v10 + 1120 * v8 + 1120, v10 + 1120 * v8 + 2240))
      {
        v11 += 1120;
        uint64_t v12 = v13;
      }
      sub_4C1EE0(v10, v11);
      uint64_t v10 = v11;
      uint64_t v8 = v12;
    }
    while (v12 <= v9);
    if (v11 == a2 - 1120)
    {
      sub_4C1EE0(v11, (uint64_t)v15);
    }
    else
    {
      sub_4C1EE0(v11, a2 - 1120);
      sub_4C1EE0(a2 - 1120, (uint64_t)v15);
      sub_77D28C(v7, v11 + 1120, a3, 0xAF8AF8AF8AF8AF8BLL * ((v11 + 1120 - v7) >> 5));
    }
    return sub_3A6B94((uint64_t)v15);
  }
  return result;
}

void sub_77D264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77D278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77D28C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = result;
    unint64_t v5 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v6 = result + 1120 * v5;
    uint64_t v7 = a2 - 1120;
    uint64_t result = sub_604EA8(v6, a2 - 1120);
    if (result)
    {
      sub_4C09FC((uint64_t)v9, v7);
      do
      {
        uint64_t v8 = v6;
        sub_4C1EE0(v7, v6);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = v4 + 1120 * v5;
        uint64_t v7 = v8;
      }
      while ((sub_604EA8(v6, (uint64_t)v9) & 1) != 0);
      sub_4C1EE0(v8, (uint64_t)v9);
      return sub_3A6B94((uint64_t)v9);
    }
  }
  return result;
}

void sub_77D378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A6B94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_77D38C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_77D5BC(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  long long v26 = operator new(0x488uLL);
  long long v27 = v26;
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  char v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200((unsigned char *)v26 + 16, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *((_OWORD *)v26 + 1) = v29;
  }
  bzero(v27 + 5, 0x460uLL);
  sub_4BE498((uint64_t)(v27 + 5));
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        long long v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        long long v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        long long v32 = *(void **)(*(void *)a1 + 8 * v11);
        long long v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      long long v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      long long v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *long long v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  long long v32 = *(void **)(*(void *)a1 + 8 * v4);
  long long v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *long long v33 = *v32;
  *long long v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_77DA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_77DA70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_77DA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_77DA70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_77DA48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_77DA70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_77DA70(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_3A6B94(v2 + 40);
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_77DAC8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v6 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 5);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x3A83A83A83A83ALL) {
    sub_2E00();
  }
  if (0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5) > v7) {
    unint64_t v7 = 0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5);
  }
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 5) >= 0x1D41D41D41D41DLL) {
    unint64_t v12 = 0x3A83A83A83A83ALL;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x3A83A83A83A83ALL) {
      sub_188D718();
    }
    uint8x8_t v13 = (char *)operator new(1120 * v12);
  }
  else
  {
    uint8x8_t v13 = 0;
  }
  uint64_t v20 = (uint64_t)&v13[1120 * v6];
  uint64_t v21 = &v13[1120 * v12];
  sub_77DC84((uint64_t)(a1 + 2), v20, a2, a3, a4, a5);
  uint64_t v14 = v20;
  uint64_t v15 = v20 + 1120;
  uint64_t v17 = (char *)*a1;
  char v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v15;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      v16 -= 1120;
      uint64_t v14 = sub_4C09FC(v14 - 1120, (uint64_t)v16);
    }
    while (v16 != v17);
    unint64_t v18 = (char *)*a1;
    char v16 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v21;
    if (v16 != v18)
    {
      do
      {
        v16 -= 1120;
        sub_3A6B94((uint64_t)v16);
      }
      while (v16 != v18);
      char v16 = v18;
    }
  }
  if (v16) {
    operator delete(v16);
  }
  return v20 + 1120;
}

void sub_77DC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A7590((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77DC84(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int *a6)
{
  char v14 = 1;
  uint64_t v13 = *a3;
  sub_34C720((uint64_t)v12, a4);
  if (*(char *)(a5 + 23) < 0)
  {
    sub_4200(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a5;
    uint64_t v11 = *(void *)(a5 + 16);
  }
  sub_604BF4(a2, (uint64_t)&v13, (uint64_t)v12, (long long *)__p, *a6);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  return sub_29D95C((uint64_t)v12);
}

void sub_77DD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_29D95C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77DD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_29D95C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_77DD98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = a3;
  uint64_t v4 = sub_77DF88(a1, a2, &v22);
  uint64_t v5 = v4;
  uint64_t v6 = v4 + 1120;
  if (v4 != a2 && v6 != a2)
  {
    uint64_t v9 = v4;
    while (1)
    {
      uint64_t v10 = v6;
      if (sub_6054A8(v6))
      {
        uint64_t v11 = *v22;
        uint64_t v12 = v22[1];
        if (*v22 != v12) {
          break;
        }
      }
LABEL_7:
      sub_4C1EE0(v5, v10);
      v5 += 1120;
LABEL_8:
      uint64_t v6 = v10 + 1120;
      uint64_t v9 = v10;
      if (v10 + 1120 == a2) {
        return v5;
      }
    }
    while (1)
    {
      if (sub_605050(v11, v10) && sub_6054A8(v11))
      {
        if (!*(unsigned char *)(v11 + 1112) || !*(unsigned char *)(v9 + 2232))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        uint64_t v13 = *(unsigned __int8 *)(v11 + 871);
        if ((v13 & 0x80u) == 0) {
          uint64_t v14 = *(unsigned __int8 *)(v11 + 871);
        }
        else {
          uint64_t v14 = *(void *)(v11 + 856);
        }
        uint64_t v15 = *(unsigned __int8 *)(v9 + 1991);
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(v9 + 1976);
        }
        if (v14 == v15)
        {
          if (v16 >= 0) {
            uint64_t v17 = (unsigned __int8 *)(v9 + 1968);
          }
          else {
            uint64_t v17 = *(unsigned __int8 **)(v9 + 1968);
          }
          if ((v13 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v11 + 848), v17, *(void *)(v11 + 856))) {
              goto LABEL_32;
            }
          }
          else
          {
            if (!*(unsigned char *)(v11 + 871))
            {
LABEL_32:
              int v19 = *(_DWORD *)(v11 + 220);
              int v20 = *(_DWORD *)(v9 + 1340);
              if (v19 > v20 || v19 == v20 && (sub_604EA8(v11, v10) & 1) != 0)
              {
                if (v11 != v22[1]) {
                  goto LABEL_8;
                }
                goto LABEL_7;
              }
              goto LABEL_13;
            }
            uint64_t v18 = 0;
            while (*(unsigned __int8 *)(v11 + v18 + 848) == v17[v18])
            {
              if (v13 == ++v18) {
                goto LABEL_32;
              }
            }
          }
        }
      }
LABEL_13:
      v11 += 1120;
      if (v11 == v12)
      {
        if (v12 != v22[1]) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
  }
  return v5;
}

uint64_t sub_77DF88(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      if (!sub_6054A8(v3)) {
        goto LABEL_5;
      }
      uint64_t v6 = **a3;
      uint64_t v7 = (*a3)[1];
      if (v6 == v7) {
        goto LABEL_5;
      }
      do
      {
        if (!sub_605050(v6, v3) || !sub_6054A8(v6)) {
          goto LABEL_10;
        }
        if (!*(unsigned char *)(v6 + 1112) || !*(unsigned char *)(v3 + 1112))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        uint64_t v8 = *(unsigned __int8 *)(v6 + 871);
        if ((v8 & 0x80u) == 0) {
          uint64_t v9 = *(unsigned __int8 *)(v6 + 871);
        }
        else {
          uint64_t v9 = *(void *)(v6 + 856);
        }
        uint64_t v10 = *(unsigned __int8 *)(v3 + 871);
        int v11 = (char)v10;
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *(void *)(v3 + 856);
        }
        if (v9 != v10) {
          goto LABEL_10;
        }
        if (v11 >= 0) {
          uint64_t v12 = (unsigned __int8 *)(v3 + 848);
        }
        else {
          uint64_t v12 = *(unsigned __int8 **)(v3 + 848);
        }
        if ((v8 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v6 + 848), v12, *(void *)(v6 + 856))) {
            goto LABEL_10;
          }
        }
        else if (*(unsigned char *)(v6 + 871))
        {
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v6 + v13 + 848) == v12[v13])
          {
            if (v8 == ++v13) {
              goto LABEL_29;
            }
          }
          goto LABEL_10;
        }
LABEL_29:
        int v14 = *(_DWORD *)(v6 + 220);
        int v15 = *(_DWORD *)(v3 + 220);
        if (v14 > v15 || v14 == v15 && (sub_604EA8(v6, v3) & 1) != 0) {
          goto LABEL_4;
        }
LABEL_10:
        v6 += 1120;
      }
      while (v6 != v7);
      uint64_t v6 = v7;
LABEL_4:
      if (v6 != (*a3)[1]) {
        return v3;
      }
LABEL_5:
      v3 += 1120;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

uint64_t *sub_77E12C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 16)
    {
      sub_77E220(&v18, i, (uint64_t)v11);
      uint64_t v9 = sub_77E434(a3, a4, (uint64_t)v11);
      if (v17 < 0)
      {
        operator delete(__p);
        if ((v15 & 0x80000000) == 0)
        {
LABEL_6:
          if (v13 < 0) {
            goto LABEL_10;
          }
          goto LABEL_3;
        }
      }
      else if ((v15 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v14);
      if (v13 < 0) {
LABEL_10:
      }
        operator delete(v12);
LABEL_3:
      a4 = (uint64_t)(v9 + 256);
      sub_30328C((uint64_t)v11);
    }
  }
  return a3;
}

void sub_77E20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_77A97C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_77E220(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(const std::string ***)(a2 + 8);
  sub_6F85DC(v5 + 6, *(void *)(*a1 + 8) + 968, (uint64_t)&v14);
  sub_6F85DC(v5 + 9, *(void *)(v4 + 8) + 968, (uint64_t)v12);
  sub_6F85DC(v5 + 12, *(void *)(v4 + 8) + 968, (uint64_t)v10);
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(v6, v12[0], (unint64_t)v12[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v12;
    uint64_t v7 = v13;
  }
  if (SHIBYTE(v11) < 0)
  {
    sub_4200(&__p, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v10;
    uint64_t v9 = v11;
  }
  sub_603F50(a3, (uint64_t)v5, &v14, (long long *)v6);
  if (SHIBYTE(v9) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v6[0]);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v10[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete((void *)v14);
    return;
  }
LABEL_16:
  operator delete(v12[0]);
  if (v15 < 0) {
    goto LABEL_17;
  }
}

void sub_77E380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

char *sub_77E434(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (a2 - *a1) >> 8;
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v18 = ((uint64_t)(v6 - v7) >> 8) + 1;
    if (HIBYTE(v18)) {
      sub_2E00();
    }
    uint64_t v19 = v9 - v7;
    if (v19 >> 7 > v18) {
      unint64_t v18 = v19 >> 7;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFF00) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    int8x8_t v38 = a1 + 2;
    if (v20)
    {
      if (HIBYTE(v20)) {
        sub_188D718();
      }
      uint64_t v21 = (char *)operator new(v20 << 8);
    }
    else
    {
      uint64_t v21 = 0;
    }
    unint64_t v35 = v21;
    unint64_t v36 = &v21[256 * v8];
    *(void *)&long long v37 = v36;
    *((void *)&v37 + 1) = &v21[256 * v20];
    sub_77E964(&v35, a3);
    uint64_t v27 = (uint64_t)v36;
    sub_605BA0(v10, (uint64_t)v4, (uint64_t)v4, *a1, *a1, (uint64_t)v36, (uint64_t)v36);
    unint64_t v36 = (char *)v28;
    uint64_t v29 = sub_77EF74(v10, (uint64_t)v4, a1[1], v37);
    uint64_t v30 = (void *)*a1;
    uint64_t v31 = *((void *)&v37 + 1);
    long long v32 = *(_OWORD *)(a1 + 1);
    *a1 = (uint64_t)v36;
    a1[1] = v29;
    a1[2] = v31;
    long long v37 = v32;
    unint64_t v35 = v30;
    unint64_t v36 = (char *)v30;
    uint64_t v33 = v32;
    if ((void *)v32 == v30)
    {
      if (!v30) {
        return (char *)v27;
      }
      goto LABEL_23;
    }
    while (1)
    {
      *(void *)&long long v37 = v33 - 256;
      if (*(char *)(v33 - 1) < 0)
      {
        operator delete(*(void **)(v33 - 24));
        if ((*(char *)(v33 - 25) & 0x80000000) == 0)
        {
LABEL_29:
          if (*(char *)(v33 - 49) < 0) {
            goto LABEL_33;
          }
          goto LABEL_26;
        }
      }
      else if ((*(char *)(v33 - 25) & 0x80000000) == 0)
      {
        goto LABEL_29;
      }
      operator delete(*(void **)(v33 - 48));
      if (*(char *)(v33 - 49) < 0) {
LABEL_33:
      }
        operator delete(*(void **)(v33 - 72));
LABEL_26:
      sub_30328C(v33 - 256);
      uint64_t v33 = v37;
      if ((void *)v37 == v30)
      {
        uint64_t v30 = v35;
        if (!v35) {
          return (char *)v27;
        }
LABEL_23:
        operator delete(v30);
        return (char *)v27;
      }
    }
  }
  if (a2 == v6)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(a2 + 40) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(void *)(a2 + 64) = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
    *(void *)(a2 + 88) = *(void *)(a3 + 88);
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
    *(void *)(a2 + 112) = *(void *)(a3 + 112);
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    long long v22 = *(_OWORD *)(a3 + 120);
    *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
    *(_OWORD *)(a2 + 120) = v22;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 152) = 0;
    *(_OWORD *)(a2 + 152) = *(_OWORD *)(a3 + 152);
    *(void *)(a2 + 168) = *(void *)(a3 + 168);
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 168) = 0;
    *(unsigned char *)(a2 + 176) = *(unsigned char *)(a3 + 176);
    uint64_t v23 = v7 + (v8 << 8);
    long long v24 = *(_OWORD *)(a3 + 184);
    *(void *)(v23 + 200) = *(void *)(a3 + 200);
    *(_OWORD *)(v23 + 184) = v24;
    *(void *)(a3 + 192) = 0;
    *(void *)(a3 + 200) = 0;
    *(void *)(a3 + 184) = 0;
    long long v25 = *(_OWORD *)(a3 + 208);
    *(void *)(v23 + 224) = *(void *)(a3 + 224);
    *(_OWORD *)(v23 + 208) = v25;
    *(void *)(a3 + 216) = 0;
    *(void *)(a3 + 224) = 0;
    *(void *)(a3 + 208) = 0;
    long long v26 = *(_OWORD *)(a3 + 232);
    *(void *)(v23 + 248) = *(void *)(a3 + 248);
    *(_OWORD *)(v23 + 232) = v26;
    *(void *)(a3 + 240) = 0;
    *(void *)(a3 + 248) = 0;
    *(void *)(a3 + 232) = 0;
    a1[1] = a2 + 256;
  }
  else
  {
    sub_77E800((uint64_t)a1, a2, v6, a2 + 256);
    sub_3061BC((uint64_t)v4, a3);
    uint64_t v11 = v7 + (v8 << 8);
    uint64_t v12 = (void **)(v11 + 184);
    if (v4[207] < 0) {
      operator delete(*v12);
    }
    long long v13 = *(_OWORD *)(a3 + 184);
    *(void *)(v11 + 200) = *(void *)(a3 + 200);
    *(_OWORD *)uint64_t v12 = v13;
    *(unsigned char *)(a3 + 207) = 0;
    *(unsigned char *)(a3 + 184) = 0;
    uint64_t v14 = v11 + 208;
    if (v4[231] < 0) {
      operator delete(*(void **)v14);
    }
    long long v15 = *(_OWORD *)(a3 + 208);
    *(void *)(v14 + 16) = *(void *)(a3 + 224);
    *(_OWORD *)uint64_t v14 = v15;
    *(unsigned char *)(a3 + 231) = 0;
    *(unsigned char *)(a3 + 208) = 0;
    int v16 = (void **)(v7 + (v8 << 8) + 232);
    if (v4[255] < 0) {
      operator delete(*v16);
    }
    long long v17 = *(_OWORD *)(a3 + 232);
    *(void *)(v7 + (v8 << 8) + 248) = *(void *)(a3 + 248);
    *(_OWORD *)int v16 = v17;
    *(unsigned char *)(a3 + 255) = 0;
    *(unsigned char *)(a3 + 232) = 0;
  }
  return v4;
}

void sub_77E7EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_605CF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77E800(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(void *)(v8 + 64) = *(void *)(v9 + 64);
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 64) = 0;
      *(void *)(v8 + 72) = 0;
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 88) = 0;
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v9 + 72);
      *(void *)(v8 + 88) = *(void *)(v9 + 88);
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 88) = 0;
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 112) = 0;
      *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
      *(void *)(v8 + 112) = *(void *)(v9 + 112);
      *(void *)(v9 + 96) = 0;
      *(void *)(v9 + 104) = 0;
      *(void *)(v9 + 112) = 0;
      long long v10 = *(_OWORD *)(v9 + 120);
      *(_OWORD *)(v8 + 136) = *(_OWORD *)(v9 + 136);
      *(_OWORD *)(v8 + 120) = v10;
      *(void *)(v8 + 160) = 0;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 152) = 0;
      *(_OWORD *)(v8 + 152) = *(_OWORD *)(v9 + 152);
      *(void *)(v8 + 168) = *(void *)(v9 + 168);
      *(void *)(v9 + 152) = 0;
      *(void *)(v9 + 160) = 0;
      *(void *)(v9 + 168) = 0;
      *(unsigned char *)(v8 + 176) = *(unsigned char *)(v9 + 176);
      long long v11 = *(_OWORD *)(v9 + 184);
      *(void *)(v8 + 200) = *(void *)(v9 + 200);
      *(_OWORD *)(v8 + 184) = v11;
      *(void *)(v9 + 192) = 0;
      *(void *)(v9 + 200) = 0;
      *(void *)(v9 + 184) = 0;
      long long v12 = *(_OWORD *)(v9 + 208);
      *(void *)(v8 + 224) = *(void *)(v9 + 224);
      *(_OWORD *)(v8 + 208) = v12;
      *(void *)(v9 + 216) = 0;
      *(void *)(v9 + 224) = 0;
      *(void *)(v9 + 208) = 0;
      long long v13 = *(_OWORD *)(v9 + 232);
      *(void *)(v8 + 248) = *(void *)(v9 + 248);
      *(_OWORD *)(v8 + 232) = v13;
      *(void *)(v9 + 240) = 0;
      *(void *)(v9 + 248) = 0;
      *(void *)(v9 + 232) = 0;
      v8 += 256;
      v9 += 256;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_77EC28(a2, v7, v6);
}

__n128 sub_77E964(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_15;
  }
  unint64_t v5 = a1[1];
  uint64_t v6 = v5 - *a1;
  if (v5 <= *a1)
  {
    if (v4 == *a1) {
      unint64_t v13 = 1;
    }
    else {
      unint64_t v13 = (v4 - *a1) >> 7;
    }
    uint64_t v26 = a1[4];
    if (HIBYTE(v13)) {
      sub_188D718();
    }
    *(void *)&long long v24 = operator new(v13 << 8);
    *((void *)&v24 + 1) = v24 + (v13 >> 2 << 8);
    *(void *)&long long v25 = *((void *)&v24 + 1);
    *((void *)&v25 + 1) = v24 + (v13 << 8);
    sub_77EE2C((uint64_t)&v24, v5, (uint64_t)(v4 - v5) >> 8);
    uint64_t v14 = (void *)*a1;
    uint64_t v15 = a1[1];
    long long v16 = v24;
    long long v17 = v25;
    *(void *)&long long v24 = *a1;
    *((void *)&v24 + 1) = v15;
    long long v18 = *((_OWORD *)a1 + 1);
    *(_OWORD *)a1 = v16;
    *((_OWORD *)a1 + 1) = v17;
    long long v25 = v18;
    uint64_t v19 = v18;
    if ((void)v18 == v15)
    {
      if (!v14) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    while (1)
    {
      *(void *)&long long v25 = v19 - 256;
      if (*(char *)(v19 - 1) < 0)
      {
        operator delete(*(void **)(v19 - 24));
        if ((*(char *)(v19 - 25) & 0x80000000) == 0)
        {
LABEL_19:
          if (*(char *)(v19 - 49) < 0) {
            goto LABEL_23;
          }
          goto LABEL_16;
        }
      }
      else if ((*(char *)(v19 - 25) & 0x80000000) == 0)
      {
        goto LABEL_19;
      }
      operator delete(*(void **)(v19 - 48));
      if (*(char *)(v19 - 49) < 0) {
LABEL_23:
      }
        operator delete(*(void **)(v19 - 72));
LABEL_16:
      sub_30328C(v19 - 256);
      uint64_t v19 = v25;
      if ((void)v25 == v15)
      {
        uint64_t v14 = (void *)v24;
        if (!(void)v24)
        {
LABEL_14:
          uint64_t v4 = a1[2];
          goto LABEL_15;
        }
LABEL_13:
        operator delete(v14);
        goto LABEL_14;
      }
    }
  }
  uint64_t v7 = v6 >> 8;
  BOOL v8 = v6 >> 8 < -1;
  uint64_t v9 = (v6 >> 8) + 2;
  if (v8) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = v7 + 1;
  }
  unint64_t v11 = v10 >> 1 << 8;
  sub_77ED40(a1[1], v4, v5 - v11);
  uint64_t v4 = v12;
  a1[1] -= v11;
  a1[2] = v12;
LABEL_15:
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(v4 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(v4 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(v4 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(v4 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v20 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 120) = v20;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 168) = 0;
  *(void *)(v4 + 152) = 0;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(v4 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(unsigned char *)(v4 + 176) = *(unsigned char *)(a2 + 176);
  long long v21 = *(_OWORD *)(a2 + 184);
  *(void *)(v4 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)(v4 + 184) = v21;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 184) = 0;
  long long v22 = *(_OWORD *)(a2 + 208);
  *(void *)(v4 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(v4 + 208) = v22;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 208) = 0;
  __n128 result = *(__n128 *)(a2 + 232);
  *(void *)(v4 + 248) = *(void *)(a2 + 248);
  *(__n128 *)(v4 + 232) = result;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 232) = 0;
  a1[2] += 256;
  return result;
}

void sub_77EC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_77EC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v8 = a2 + v6;
      uint64_t v9 = a3 + v6;
      sub_3061BC(a3 + v6 - 256, a2 + v6 - 256);
      unint64_t v10 = (void **)(a3 + v6 - 72);
      if (*(char *)(a3 + v6 - 49) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(_OWORD *)(v8 - 72);
      *(void *)(v9 - 56) = *(void *)(v8 - 56);
      *(_OWORD *)unint64_t v10 = v11;
      *(unsigned char *)(v8 - 49) = 0;
      *(unsigned char *)(v8 - 72) = 0;
      uint64_t v12 = (void **)(v9 - 48);
      if (*(char *)(v9 - 25) < 0) {
        operator delete(*v12);
      }
      unint64_t v13 = (long long *)(v8 - 48);
      uint64_t v14 = a2 + v6;
      long long v15 = *v13;
      *(void *)(v9 - 32) = *((void *)v13 + 2);
      *(_OWORD *)uint64_t v12 = v15;
      *(unsigned char *)(a2 + v6 - 25) = 0;
      *(unsigned char *)unint64_t v13 = 0;
      long long v16 = (void **)(a3 + v6 - 24);
      if (*(char *)(a3 + v6 - 1) < 0) {
        operator delete(*v16);
      }
      long long v7 = *(_OWORD *)(v14 - 24);
      *(void *)(a3 + v6 - 8) = *(void *)(v14 - 8);
      *(_OWORD *)long long v16 = v7;
      *(unsigned char *)(v14 - 1) = 0;
      *(unsigned char *)(v14 - 24) = 0;
      v6 -= 256;
    }
    while (a2 + v6 != a1);
  }
  return a2;
}

uint64_t sub_77ED40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_3061BC(a3, v4);
      long long v7 = (void **)(a3 + 184);
      if (*(char *)(a3 + 207) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v4 + 184);
      *(void *)(a3 + 200) = *(void *)(v4 + 200);
      *(_OWORD *)long long v7 = v8;
      *(unsigned char *)(v4 + 207) = 0;
      *(unsigned char *)(v4 + 184) = 0;
      uint64_t v9 = (void **)(a3 + 208);
      if (*(char *)(a3 + 231) < 0) {
        operator delete(*v9);
      }
      long long v10 = *(_OWORD *)(v4 + 208);
      *(void *)(a3 + 224) = *(void *)(v4 + 224);
      *(_OWORD *)uint64_t v9 = v10;
      *(unsigned char *)(v4 + 231) = 0;
      *(unsigned char *)(v4 + 208) = 0;
      long long v11 = (void **)(a3 + 232);
      if (*(char *)(a3 + 255) < 0) {
        operator delete(*v11);
      }
      long long v6 = *(_OWORD *)(v4 + 232);
      *(void *)(a3 + 248) = *(void *)(v4 + 248);
      *(_OWORD *)long long v11 = v6;
      *(unsigned char *)(v4 + 255) = 0;
      *(unsigned char *)(v4 + 232) = 0;
      a3 += 256;
      v4 += 256;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_77EE2C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (a3)
  {
    uint64_t v4 = v3 + (a3 << 8);
    do
    {
      *(void *)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      *(void *)(v3 + 32) = 0;
      *(void *)(v3 + 40) = 0;
      *(_OWORD *)(v3 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(v3 + 40) = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(v3 + 48) = 0;
      *(void *)(v3 + 56) = 0;
      *(void *)(v3 + 64) = 0;
      *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
      *(void *)(v3 + 64) = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(void *)(v3 + 72) = 0;
      *(void *)(v3 + 80) = 0;
      *(void *)(v3 + 88) = 0;
      *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 72);
      *(void *)(v3 + 88) = *(void *)(a2 + 88);
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)(v3 + 96) = 0;
      *(void *)(v3 + 104) = 0;
      *(void *)(v3 + 112) = 0;
      *(_OWORD *)(v3 + 96) = *(_OWORD *)(a2 + 96);
      *(void *)(v3 + 112) = *(void *)(a2 + 112);
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      long long v5 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(v3 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(v3 + 120) = v5;
      *(void *)(v3 + 160) = 0;
      *(void *)(v3 + 168) = 0;
      *(void *)(v3 + 152) = 0;
      *(_OWORD *)(v3 + 152) = *(_OWORD *)(a2 + 152);
      *(void *)(v3 + 168) = *(void *)(a2 + 168);
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(v3 + 176) = *(unsigned char *)(a2 + 176);
      long long v6 = *(_OWORD *)(a2 + 184);
      *(void *)(v3 + 200) = *(void *)(a2 + 200);
      *(_OWORD *)(v3 + 184) = v6;
      *(void *)(a2 + 192) = 0;
      *(void *)(a2 + 200) = 0;
      *(void *)(a2 + 184) = 0;
      long long v7 = *(_OWORD *)(a2 + 208);
      *(void *)(v3 + 224) = *(void *)(a2 + 224);
      *(_OWORD *)(v3 + 208) = v7;
      *(void *)(a2 + 216) = 0;
      *(void *)(a2 + 224) = 0;
      *(void *)(a2 + 208) = 0;
      long long v8 = *(_OWORD *)(a2 + 232);
      *(void *)(v3 + 248) = *(void *)(a2 + 248);
      *(_OWORD *)(v3 + 232) = v8;
      *(void *)(a2 + 240) = 0;
      *(void *)(a2 + 248) = 0;
      *(void *)(a2 + 232) = 0;
      v3 += 256;
      a2 += 256;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16) = v3;
  return result;
}

uint64_t sub_77EF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 256)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(result + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 0;
    *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(result + 64) = *(void *)(a2 + 64);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(result + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    *(void *)(result + 112) = 0;
    *(_OWORD *)(result + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(result + 112) = *(void *)(a2 + 112);
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    long long v5 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(result + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(result + 120) = v5;
    *(void *)(result + 160) = 0;
    *(void *)(result + 168) = 0;
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 152) = *(_OWORD *)(a2 + 152);
    *(void *)(result + 168) = *(void *)(a2 + 168);
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(result + 176) = *(unsigned char *)(a2 + 176);
    long long v6 = *(_OWORD *)(a2 + 184);
    *(void *)(result + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(result + 184) = v6;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 184) = 0;
    long long v7 = *(_OWORD *)(a2 + 208);
    *(void *)(result + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(result + 208) = v7;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 208) = 0;
    long long v8 = *(_OWORD *)(a2 + 232);
    *(void *)(result + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(result + 232) = v8;
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 232) = 0;
    result += 256;
  }
  return result;
}

void sub_77F0B8()
{
}

__n128 sub_77F0CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_243A3D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_77F120(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243A3D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_77F158(uint64_t a1, uint64_t a2)
{
  return sub_77F1DC(a1 + 8, a2);
}

uint64_t sub_77F160(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_26GuidanceRequestInform"
                     "ationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_26GuidanceRe"
                                "questInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_77F1D0()
{
}

BOOL sub_77F1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = sub_358690(a2, 0);
  BOOL result = 0;
  if (v5)
  {
    BOOL result = sub_358898(a2, **(_DWORD **)a1);
    if (result)
    {
      BOOL result = 0;
      unsigned int v7 = *(_DWORD *)(a2 + 88);
      BOOL v8 = v7 != 13 && v7 > *(_DWORD *)(*(void *)(v4 + 8) + 1420);
      BOOL v9 = v8;
      if (v7 != 9 && !v9)
      {
        BOOL result = 1;
        if (sub_358820(a2) && !sub_1041610(v4 + 3976, a2))
        {
          long long v10 = *(unsigned __int8 ***)(a1 + 16);
          v12[0] = &v11;
          v12[1] = a2 + 40;
          if (!sub_77F2BC(v10, (uint64_t)v12)) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_77F2BC(unsigned __int8 **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  size_t v5 = *(void *)(v4 + 8);
  if (*(char *)(v4 + 23) >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v4 + 8);
  }
  if ((*(unsigned char *)(v4 + 23) & 0x80) != 0)
  {
    while (1)
    {
      uint64_t v9 = v3[23];
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *((void *)v3 + 1);
      }
      if (v6 == v9)
      {
        char v11 = v10 >= 0 ? v3 : *(unsigned __int8 **)v3;
        if (!memcmp(*(const void **)v4, v11, v5)) {
          break;
        }
      }
      v3 += 80;
      if (v3 == v2) {
        return 0;
      }
    }
    return 1;
  }
  else if (*(unsigned char *)(v4 + 23))
  {
    do
    {
      uint64_t v12 = v3[23];
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *((void *)v3 + 1);
      }
      if (v6 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = v3;
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)v3;
        }
        long long v15 = *(unsigned __int8 **)(a2 + 8);
        uint64_t v16 = *(unsigned __int8 *)(v4 + 23);
        while (*v15 == *v14)
        {
          ++v15;
          ++v14;
          if (!--v16) {
            return 1;
          }
        }
      }
      BOOL result = 0;
      v3 += 80;
    }
    while (v3 != v2);
  }
  else
  {
    uint64_t v7 = v3[23];
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)v3 + 1);
    }
    if (v7 == *(unsigned __int8 *)(v4 + 23))
    {
      return 1;
    }
    else
    {
      for (uint64_t i = v3 + 80; ; i += 80)
      {
        BOOL result = i != v2;
        if (i == v2) {
          break;
        }
        uint64_t v18 = i[23];
        if ((v18 & 0x80u) != 0) {
          uint64_t v18 = *((void *)i + 1);
        }
        if (v6 == v18) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_77F46C(uint64_t a1, uint64_t a2)
{
  sub_2E51EC(a1, (uint64_t)v15);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v4)
    {
      unint64_t v5 = *(void *)(v4 - 8);
      uint64_t v6 = sub_2964C4(*(void *)a1, v5, 1);
      uint64_t v7 = &v6[*(unsigned __int16 *)&v6[-*(int *)v6 + 4]];
      uint64_t v8 = (uint64_t)&v7[4 * HIDWORD(v5) + *(unsigned int *)v7];
      uint64_t v9 = (int *)(v8 + 4 + *(unsigned int *)(v8 + 4));
      uint64_t v10 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
      char v11 = (unsigned int *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6));
      LODWORD(v11) = *(unsigned int *)((char *)v11 + *v11);
      *(void *)&v13[0] = *(void *)a1;
      memset((char *)v13 + 8, 0, 40);
      *(void *)&long long v14 = __PAIR64__(v11, v10);
      BYTE8(v14) = 0;
      return sub_77F594((uint64_t)v15, (uint64_t)v13, a2);
    }
LABEL_6:
    long long v14 = 0u;
    memset(v13, 0, sizeof(v13));
    return sub_77F594((uint64_t)v15, (uint64_t)v13, a2);
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    goto LABEL_6;
  }
  *(void *)&v13[0] = *(void *)a1;
  memset((char *)v13 + 8, 0, 40);
  *(void *)&long long v14 = -1;
  BYTE8(v14) = 1;
  return sub_77F594((uint64_t)v15, (uint64_t)v13, a2);
}

uint64_t sub_77F594(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 48) != *(_DWORD *)(a2 + 48) || *(_DWORD *)(result + 52) != *(_DWORD *)(a2 + 52))
  {
    long long v6 = *(_OWORD *)(result + 16);
    v18[0] = *(_OWORD *)result;
    v18[1] = v6;
    long long v7 = *(_OWORD *)(result + 48);
    v18[2] = *(_OWORD *)(result + 32);
    long long v19 = v7;
    if (*(unsigned char *)(result + 56))
    {
      BOOL result = sub_2E7608(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL result = sub_2E74E8(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
LABEL_8:
    if (*(_DWORD *)(v5 + 52) != *(_DWORD *)(a2 + 52))
    {
      while (1)
      {
LABEL_9:
        unint64_t v16 = sub_2E1BC0((uint64_t)v18);
        int v17 = v8;
        unint64_t v14 = sub_2E1BC0(v5);
        int v15 = v9;
        sub_457FB8(a3, &v16, &v14, v10, v11, v12, v13);
        if (*(unsigned char *)(v5 + 56))
        {
          sub_2E7608(v5);
          if (!BYTE8(v19)) {
            goto LABEL_13;
          }
LABEL_15:
          BOOL result = sub_2E7608((uint64_t)v18);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
        else
        {
          sub_2E74E8(v5);
          if (BYTE8(v19)) {
            goto LABEL_15;
          }
LABEL_13:
          BOOL result = sub_2E74E8((uint64_t)v18);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_77F6DC(uint64_t a1, double **a2)
{
  sub_2E51EC(a1, (uint64_t)v15);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v4)
    {
      unint64_t v5 = *(void *)(v4 - 8);
      long long v6 = sub_2964C4(*(void *)a1, v5, 1);
      long long v7 = &v6[*(unsigned __int16 *)&v6[-*(int *)v6 + 4]];
      uint64_t v8 = (uint64_t)&v7[4 * HIDWORD(v5) + *(unsigned int *)v7];
      int v9 = (int *)(v8 + 4 + *(unsigned int *)(v8 + 4));
      uint64_t v10 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
      double v11 = (unsigned int *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6));
      LODWORD(v11) = *(unsigned int *)((char *)v11 + *v11);
      *(void *)&v13[0] = *(void *)a1;
      memset((char *)v13 + 8, 0, 40);
      *(void *)&long long v14 = __PAIR64__(v11, v10);
      BYTE8(v14) = 0;
      return sub_77F804((uint64_t)v15, (uint64_t)v13, a2);
    }
LABEL_6:
    long long v14 = 0u;
    memset(v13, 0, sizeof(v13));
    return sub_77F804((uint64_t)v15, (uint64_t)v13, a2);
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    goto LABEL_6;
  }
  *(void *)&v13[0] = *(void *)a1;
  memset((char *)v13 + 8, 0, 40);
  *(void *)&long long v14 = -1;
  BYTE8(v14) = 1;
  return sub_77F804((uint64_t)v15, (uint64_t)v13, a2);
}

uint64_t sub_77F804(uint64_t result, uint64_t a2, double **a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 48) != *(_DWORD *)(a2 + 48) || *(_DWORD *)(result + 52) != *(_DWORD *)(a2 + 52))
  {
    long long v6 = *(_OWORD *)(result + 16);
    v15[0] = *(_OWORD *)result;
    v15[1] = v6;
    long long v7 = *(_OWORD *)(result + 48);
    v15[2] = *(_OWORD *)(result + 32);
    long long v16 = v7;
    if (*(unsigned char *)(result + 56))
    {
      BOOL result = sub_2E7608(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
    else
    {
      BOOL result = sub_2E74E8(result);
      if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(a2 + 48)) {
        goto LABEL_9;
      }
    }
LABEL_8:
    if (*(_DWORD *)(v5 + 52) != *(_DWORD *)(a2 + 52))
    {
      while (1)
      {
LABEL_9:
        unint64_t v13 = sub_2E1BC0((uint64_t)v15);
        int v14 = v8;
        unint64_t v11 = sub_2E1BC0(v5);
        int v12 = v9;
        sub_4582C8(a3, (uint64_t)&v13, (unsigned int *)&v11, v10);
        if (*(unsigned char *)(v5 + 56))
        {
          sub_2E7608(v5);
          if (!BYTE8(v16)) {
            goto LABEL_13;
          }
LABEL_15:
          BOOL result = sub_2E7608((uint64_t)v15);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
        else
        {
          sub_2E74E8(v5);
          if (BYTE8(v16)) {
            goto LABEL_15;
          }
LABEL_13:
          BOOL result = sub_2E74E8((uint64_t)v15);
          if (*(_DWORD *)(v5 + 48) == *(_DWORD *)(a2 + 48)) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_77F94C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, long long *a5, int *a6, uint64_t *a7)
{
  unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 5);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x3A83A83A83A83ALL) {
    sub_2E00();
  }
  if (0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5) > v9) {
    unint64_t v9 = 0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 5);
  }
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 5) >= 0x1D41D41D41D41DLL) {
    unint64_t v16 = 0x3A83A83A83A83ALL;
  }
  else {
    unint64_t v16 = v9;
  }
  if (v16)
  {
    if (v16 > 0x3A83A83A83A83ALL) {
      sub_188D718();
    }
    int v17 = (char *)operator new(1120 * v16);
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v24 = (uint64_t)&v17[1120 * v8];
  long long v25 = &v17[1120 * v16];
  sub_77FB20((uint64_t)(a1 + 2), v24, a2, a3, a4, a5, a6, a7);
  uint64_t v18 = v24;
  uint64_t v19 = v24 + 1120;
  long long v21 = (char *)*a1;
  long long v20 = (char *)a1[1];
  if (v20 == (char *)*a1)
  {
    *a1 = v24;
    a1[1] = v19;
    a1[2] = (uint64_t)v25;
  }
  else
  {
    do
    {
      v20 -= 1120;
      uint64_t v18 = sub_4C09FC(v18 - 1120, (uint64_t)v20);
    }
    while (v20 != v21);
    long long v22 = (char *)*a1;
    long long v20 = (char *)a1[1];
    *a1 = v18;
    a1[1] = v19;
    a1[2] = (uint64_t)v25;
    if (v20 != v22)
    {
      do
      {
        v20 -= 1120;
        sub_3A6B94((uint64_t)v20);
      }
      while (v20 != v22);
      long long v20 = v22;
    }
  }
  if (v20) {
    operator delete(v20);
  }
  return v24 + 1120;
}

void sub_77FB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5A7590((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_77FB20(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, long long *a6, int *a7, uint64_t *a8)
{
  char v31 = 1;
  uint64_t v30 = *a3;
  sub_34C720((uint64_t)v27, a4);
  if (*(char *)(a5 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a5;
    uint64_t v26 = *(void *)(a5 + 16);
  }
  sub_4AA8E0((char *)v15, a6);
  int v13 = *a7;
  char v29 = 1;
  uint64_t v28 = *a8;
  sub_604EA4(a2, (uint64_t)&v30, (uint64_t)v27, (long long *)__dst, (long long *)v15, v13, (uint64_t)&v28);
  if (v29) {
    char v29 = 0;
  }
  if (v24 < 0)
  {
    operator delete(__p);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v21);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_17:
    operator delete(v15[0]);
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return sub_29D95C((uint64_t)v27);
    }
LABEL_18:
    operator delete(__dst[0]);
    return sub_29D95C((uint64_t)v27);
  }
LABEL_16:
  operator delete(v17);
  if (v16 < 0) {
    goto LABEL_17;
  }
LABEL_11:
  if (SHIBYTE(v26) < 0) {
    goto LABEL_18;
  }
  return sub_29D95C((uint64_t)v27);
}

void sub_77FCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_77FCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  if (*(unsigned char *)(v36 - 80)) {
    *(unsigned char *)(v36 - 80) = 0;
  }
  sub_4A50F4((uint64_t)&a10);
  if (a34 < 0) {
    operator delete(__p);
  }
  sub_29D95C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_77FD0C(uint64_t a1, void *a2, uint64_t a3)
{
  int v4 = *(char *)(a3 + 23);
  if (v4 < 0)
  {
    if (*(void *)(a3 + 8) != 24) {
      goto LABEL_13;
    }
    uint64_t v5 = *(uint64_t **)a3;
  }
  else
  {
    uint64_t v5 = (uint64_t *)a3;
    if (v4 != 24) {
      goto LABEL_13;
    }
  }
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  if (v6 != 0x6E65675F72657375 || v7 != 0x695F646574617265 || v8 != 0x73746E656469636ELL)
  {
LABEL_13:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v17);
      unint64_t v11 = sub_188FC78(v17, (uint64_t)"Got unhandled feature_key: ", 27);
      int v12 = *(char *)(a3 + 23);
      if (v12 >= 0) {
        uint64_t v13 = a3;
      }
      else {
        uint64_t v13 = *(void *)a3;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v14 = *(void *)(a3 + 8);
      }
      sub_188FC78(v11, v13, v14);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v16 < 0) {
        operator delete(__p);
      }
      if (v18 < 0) {
        operator delete((void *)v17[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return;
  }

  sub_4BE604(a1, a2);
}

void sub_77FF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_77FF68(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v10 = (uint64_t *)result;
LABEL_2:
  char v46 = (uint64_t *)(a2 - 8);
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    double v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v36 = *((void *)a2 - 1);
          uint64_t v37 = *v11;
          int v38 = *(char *)(*v11 + 63);
          int v39 = *(char *)(v36 + 63);
          if (v39 >= 0) {
            size_t v40 = *(unsigned __int8 *)(v36 + 63);
          }
          else {
            size_t v40 = *(void *)(v36 + 48);
          }
          if (v39 >= 0) {
            uint64_t v41 = (const void *)(v36 + 40);
          }
          else {
            uint64_t v41 = *(const void **)(v36 + 40);
          }
          if (v38 >= 0) {
            size_t v42 = *(unsigned __int8 *)(*v11 + 63);
          }
          else {
            size_t v42 = *(void *)(*v11 + 48);
          }
          if (v38 >= 0) {
            unint64_t v43 = (const void *)(*v11 + 40);
          }
          else {
            unint64_t v43 = *(const void **)(*v11 + 40);
          }
          if (v42 >= v40) {
            size_t v44 = v40;
          }
          else {
            size_t v44 = v42;
          }
          BOOL result = memcmp(v41, v43, v44);
          BOOL v45 = v40 < v42;
          if (result) {
            BOOL v45 = (int)result < 0;
          }
          if (v45)
          {
            *unint64_t v11 = v36;
            *((void *)a2 - 1) = v37;
          }
          break;
        case 3uLL:
          BOOL result = sub_78068C(v11, v11 + 1, v46);
          break;
        case 4uLL:
          BOOL result = sub_7810C4(v11, v11 + 1, v11 + 2, v46);
          break;
        case 5uLL:
          BOOL result = sub_781278(v11, v11 + 1, v11 + 2, v11 + 3, v46);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (uint64_t)sub_7814B0((char *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_78068C(v11, &v11[v15 >> 1], v46);
      char v18 = &v11[v16];
      sub_78068C(v11 + 1, v18 - 1, (uint64_t *)a2 - 2);
      sub_78068C(v11 + 2, &v11[v16 + 1], (uint64_t *)a2 - 3);
      sub_78068C(v18 - 1, v17, &v11[v16 + 1]);
      uint64_t v19 = *v11;
      *unint64_t v11 = *v18;
      uint64_t *v18 = v19;
      if (a5) {
        goto LABEL_31;
      }
    }
    else
    {
      sub_78068C(&v11[v15 >> 1], v11, v46);
      if (a5) {
        goto LABEL_31;
      }
    }
    uint64_t v20 = *(v11 - 1);
    int v21 = *(char *)(*v11 + 63);
    char v24 = *(const void **)(v20 + 40);
    uint64_t v22 = v20 + 40;
    uint64_t v23 = v24;
    int v25 = *(char *)(v22 + 23);
    if (v25 >= 0) {
      size_t v26 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      size_t v26 = *(void *)(v22 + 8);
    }
    if (v25 >= 0) {
      uint64_t v27 = (const void *)v22;
    }
    else {
      uint64_t v27 = v23;
    }
    if (v21 >= 0) {
      size_t v28 = *(unsigned __int8 *)(*v11 + 63);
    }
    else {
      size_t v28 = *(void *)(*v11 + 48);
    }
    if (v21 >= 0) {
      char v29 = (const void *)(*v11 + 40);
    }
    else {
      char v29 = *(const void **)(*v11 + 40);
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    int v31 = memcmp(v27, v29, v30);
    BOOL v32 = v26 < v28;
    if (v31) {
      BOOL v32 = v31 < 0;
    }
    if (!v32)
    {
      BOOL result = (uint64_t)sub_7808BC(v11, (uint64_t *)a2);
      unint64_t v11 = (uint64_t *)result;
      goto LABEL_36;
    }
LABEL_31:
    uint64_t v33 = sub_780B5C(v11, a2);
    if ((v34 & 1) == 0) {
      goto LABEL_34;
    }
    BOOL v35 = sub_780DE0(v11, v33);
    unint64_t v11 = v33 + 1;
    BOOL result = sub_780DE0(v33 + 1, (uint64_t *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v33;
      if (v35) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v35)
    {
LABEL_34:
      BOOL result = sub_77FF68(v10, v33, a3, -v13, a5 & 1);
      unint64_t v11 = v33 + 1;
LABEL_36:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_7803E4(v11, (uint64_t *)a2);
  }
  else
  {
    return (uint64_t)sub_780554(v11, a2);
  }
}

uint64_t *sub_7803E4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    int v4 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v5 = 0;
      char v6 = result;
      do
      {
        uint64_t v9 = *v6;
        uint64_t v8 = v6[1];
        char v6 = v4;
        int v10 = *(char *)(v9 + 63);
        int v11 = *(char *)(v8 + 63);
        if (v11 >= 0) {
          size_t v12 = *(unsigned __int8 *)(v8 + 63);
        }
        else {
          size_t v12 = *(void *)(v8 + 48);
        }
        if (v11 >= 0) {
          uint64_t v13 = (const void *)(v8 + 40);
        }
        else {
          uint64_t v13 = *(const void **)(v8 + 40);
        }
        if (v10 >= 0) {
          size_t v14 = *(unsigned __int8 *)(v9 + 63);
        }
        else {
          size_t v14 = *(void *)(v9 + 48);
        }
        if (v10 >= 0) {
          unint64_t v15 = (const void *)(v9 + 40);
        }
        else {
          unint64_t v15 = *(const void **)(v9 + 40);
        }
        if (v14 >= v12) {
          size_t v16 = v12;
        }
        else {
          size_t v16 = v14;
        }
        BOOL result = (uint64_t *)memcmp(v13, v15, v16);
        BOOL v17 = v12 < v14;
        if (result) {
          BOOL v17 = (int)result < 0;
        }
        if (v17)
        {
          uint64_t v18 = v5;
          do
          {
            *(uint64_t *)((char *)v3 + v18 + 8) = v9;
            if (!v18)
            {
              uint64_t v7 = v3;
              goto LABEL_5;
            }
            uint64_t v9 = *(uint64_t *)((char *)v3 + v18 - 8);
            int v19 = *(char *)(v9 + 63);
            int v20 = *(char *)(v8 + 63);
            if (v20 >= 0) {
              size_t v21 = *(unsigned __int8 *)(v8 + 63);
            }
            else {
              size_t v21 = *(void *)(v8 + 48);
            }
            if (v20 >= 0) {
              uint64_t v22 = (const void *)(v8 + 40);
            }
            else {
              uint64_t v22 = *(const void **)(v8 + 40);
            }
            if (v19 >= 0) {
              size_t v23 = *(unsigned __int8 *)(v9 + 63);
            }
            else {
              size_t v23 = *(void *)(v9 + 48);
            }
            if (v19 >= 0) {
              char v24 = (const void *)(v9 + 40);
            }
            else {
              char v24 = *(const void **)(v9 + 40);
            }
            if (v23 >= v21) {
              size_t v25 = v21;
            }
            else {
              size_t v25 = v23;
            }
            BOOL result = (uint64_t *)memcmp(v22, v24, v25);
            BOOL v26 = v21 < v23;
            if (result) {
              BOOL v26 = (int)result < 0;
            }
            v18 -= 8;
          }
          while (v26);
          uint64_t v7 = (uint64_t *)((char *)v3 + v18 + 8);
LABEL_5:
          uint64_t *v7 = v8;
        }
        int v4 = v6 + 1;
        v5 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

void *sub_780554(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    while (v3 + 1 != a2)
    {
      uint64_t v5 = *v3;
      uint64_t v4 = v3[1];
      ++v3;
      int v6 = *(char *)(v5 + 63);
      int v7 = *(char *)(v4 + 63);
      if (v7 >= 0) {
        size_t v8 = *(unsigned __int8 *)(v4 + 63);
      }
      else {
        size_t v8 = *(void *)(v4 + 48);
      }
      if (v7 >= 0) {
        uint64_t v9 = (const void *)(v4 + 40);
      }
      else {
        uint64_t v9 = *(const void **)(v4 + 40);
      }
      if (v6 >= 0) {
        size_t v10 = *(unsigned __int8 *)(v5 + 63);
      }
      else {
        size_t v10 = *(void *)(v5 + 48);
      }
      if (v6 >= 0) {
        int v11 = (const void *)(v5 + 40);
      }
      else {
        int v11 = *(const void **)(v5 + 40);
      }
      if (v10 >= v8) {
        size_t v12 = v8;
      }
      else {
        size_t v12 = v10;
      }
      BOOL result = (void *)memcmp(v9, v11, v12);
      BOOL v13 = v8 < v10;
      if (result) {
        BOOL v13 = (int)result < 0;
      }
      if (v13)
      {
        size_t v14 = v3;
        do
        {
          *size_t v14 = v5;
          uint64_t v5 = *(v14 - 2);
          int v15 = *(char *)(v5 + 63);
          int v16 = *(char *)(v4 + 63);
          if (v16 >= 0) {
            size_t v17 = *(unsigned __int8 *)(v4 + 63);
          }
          else {
            size_t v17 = *(void *)(v4 + 48);
          }
          if (v16 >= 0) {
            uint64_t v18 = (const void *)(v4 + 40);
          }
          else {
            uint64_t v18 = *(const void **)(v4 + 40);
          }
          if (v15 >= 0) {
            size_t v19 = *(unsigned __int8 *)(v5 + 63);
          }
          else {
            size_t v19 = *(void *)(v5 + 48);
          }
          if (v15 >= 0) {
            int v20 = (const void *)(v5 + 40);
          }
          else {
            int v20 = *(const void **)(v5 + 40);
          }
          if (v19 >= v17) {
            size_t v21 = v17;
          }
          else {
            size_t v21 = v19;
          }
          BOOL result = (void *)memcmp(v18, v20, v21);
          BOOL v22 = v17 < v19;
          if (result) {
            BOOL v22 = (int)result < 0;
          }
          --v14;
        }
        while (v22);
        *size_t v14 = v4;
      }
    }
  }
  return result;
}

uint64_t sub_78068C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 40;
  uint64_t v7 = *a2;
  int v8 = *(char *)(*a1 + 63);
  int v9 = *(char *)(*a2 + 63);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(*a2 + 63);
  }
  else {
    size_t v10 = *(void *)(*a2 + 48);
  }
  if (v9 >= 0) {
    int v11 = (const void *)(*a2 + 40);
  }
  else {
    int v11 = *(const void **)(*a2 + 40);
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v5 + 63);
  }
  else {
    size_t v12 = *(void *)(v5 + 48);
  }
  if (v8 >= 0) {
    BOOL v13 = (const void *)(*a1 + 40);
  }
  else {
    BOOL v13 = *(const void **)(*a1 + 40);
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  else {
    BOOL v16 = v10 < v12;
  }
  uint64_t v17 = *a3;
  int v18 = *(char *)(*a3 + 63);
  if (v18 >= 0) {
    size_t v19 = *(unsigned __int8 *)(*a3 + 63);
  }
  else {
    size_t v19 = *(void *)(*a3 + 48);
  }
  if (v18 >= 0) {
    int v20 = (const void *)(*a3 + 40);
  }
  else {
    int v20 = *(const void **)(*a3 + 40);
  }
  if (v10 >= v19) {
    size_t v21 = v19;
  }
  else {
    size_t v21 = v10;
  }
  int v22 = memcmp(v20, v11, v21);
  BOOL v23 = v19 < v10;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (v16)
  {
    if (v23)
    {
      *a1 = v17;
      *a3 = v5;
      return 1;
    }
    *a1 = v7;
    *a2 = v5;
    uint64_t v35 = *a3;
    int v36 = *(char *)(v5 + 63);
    int v37 = *(char *)(*a3 + 63);
    if (v37 >= 0) {
      size_t v38 = *(unsigned __int8 *)(*a3 + 63);
    }
    else {
      size_t v38 = *(void *)(*a3 + 48);
    }
    if (v37 >= 0) {
      int v39 = (const void *)(*a3 + 40);
    }
    else {
      int v39 = *(const void **)(*a3 + 40);
    }
    if (v36 >= 0) {
      size_t v40 = *(unsigned __int8 *)(v5 + 63);
    }
    else {
      size_t v40 = *(void *)(v5 + 48);
    }
    if (v36 >= 0) {
      uint64_t v41 = (const void *)v6;
    }
    else {
      uint64_t v41 = *(const void **)(v5 + 40);
    }
    if (v40 >= v38) {
      size_t v42 = v38;
    }
    else {
      size_t v42 = v40;
    }
    int v43 = memcmp(v39, v41, v42);
    BOOL v44 = v38 < v40;
    if (v43) {
      BOOL v44 = v43 < 0;
    }
    if (!v44) {
      return 1;
    }
    *a2 = v35;
    *a3 = v5;
    return 2;
  }
  if (v23)
  {
    *a2 = v17;
    *a3 = v7;
    uint64_t v24 = *a2;
    uint64_t v25 = *a1;
    int v26 = *(char *)(*a1 + 63);
    int v27 = *(char *)(*a2 + 63);
    if (v27 >= 0) {
      size_t v28 = *(unsigned __int8 *)(*a2 + 63);
    }
    else {
      size_t v28 = *(void *)(*a2 + 48);
    }
    if (v27 >= 0) {
      char v29 = (const void *)(*a2 + 40);
    }
    else {
      char v29 = *(const void **)(*a2 + 40);
    }
    if (v26 >= 0) {
      size_t v30 = *(unsigned __int8 *)(*a1 + 63);
    }
    else {
      size_t v30 = *(void *)(*a1 + 48);
    }
    if (v26 >= 0) {
      int v31 = (const void *)(*a1 + 40);
    }
    else {
      int v31 = *(const void **)(*a1 + 40);
    }
    if (v30 >= v28) {
      size_t v32 = v28;
    }
    else {
      size_t v32 = v30;
    }
    int v33 = memcmp(v29, v31, v32);
    BOOL v34 = v28 < v30;
    if (v33) {
      BOOL v34 = v33 < 0;
    }
    if (!v34) {
      return 1;
    }
    *a1 = v24;
    *a2 = v25;
    return 2;
  }
  return 0;
}

uint64_t *sub_7808BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *(a2 - 1);
  uint64_t v6 = *a1 + 40;
  int v9 = *(const void **)(v5 + 40);
  uint64_t v7 = v5 + 40;
  int v8 = v9;
  int v10 = *(char *)(v7 + 23);
  int v11 = *(char *)(*a1 + 63);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(*a1 + 63);
  }
  else {
    size_t v12 = *(void *)(*a1 + 48);
  }
  if (v11 >= 0) {
    BOOL v13 = (const void *)(*a1 + 40);
  }
  else {
    BOOL v13 = *(const void **)(*a1 + 40);
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    size_t v14 = *(void *)(v7 + 8);
  }
  if (v10 >= 0) {
    int v15 = (const void *)v7;
  }
  else {
    int v15 = v8;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
    size_t v19 = a1;
    do
    {
      uint64_t v20 = v19[1];
      ++v19;
      size_t v21 = (const void *)(v20 + 40);
      int v22 = *(const void **)(v20 + 40);
      size_t v23 = *(unsigned __int8 *)(v20 + 63);
      size_t v24 = *(void *)(v20 + 48);
      if ((v23 & 0x80u) == 0) {
        size_t v25 = v23;
      }
      else {
        size_t v25 = v24;
      }
      if ((v23 & 0x80u) == 0) {
        int v26 = v21;
      }
      else {
        int v26 = v22;
      }
      if (v25 >= v12) {
        size_t v27 = v12;
      }
      else {
        size_t v27 = v25;
      }
      int v28 = memcmp(v13, v26, v27);
      BOOL v29 = v12 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
    }
    while (!v29);
  }
  else
  {
    size_t v30 = a1 + 1;
    do
    {
      size_t v19 = v30;
      if (v30 >= v2) {
        break;
      }
      ++v30;
      int v31 = *(char *)(*v19 + 63);
      if (v31 >= 0) {
        size_t v32 = *(unsigned __int8 *)(*v19 + 63);
      }
      else {
        size_t v32 = *(void *)(*v19 + 48);
      }
      if (v31 >= 0) {
        int v33 = (const void *)(*v19 + 40);
      }
      else {
        int v33 = *(const void **)(*v19 + 40);
      }
      if (v32 >= v12) {
        size_t v34 = v12;
      }
      else {
        size_t v34 = v32;
      }
      int v35 = memcmp(v13, v33, v34);
      BOOL v36 = v12 < v32;
      if (v35) {
        BOOL v36 = v35 < 0;
      }
    }
    while (!v36);
  }
  if (v19 < v2)
  {
    do
    {
      uint64_t v37 = *--v2;
      size_t v38 = (const void *)(v37 + 40);
      int v39 = *(const void **)(v37 + 40);
      size_t v40 = *(unsigned __int8 *)(v37 + 63);
      size_t v41 = *(void *)(v37 + 48);
      if ((v40 & 0x80u) == 0) {
        size_t v42 = v40;
      }
      else {
        size_t v42 = v41;
      }
      if ((v40 & 0x80u) == 0) {
        int v43 = v38;
      }
      else {
        int v43 = v39;
      }
      if (v42 >= v12) {
        size_t v44 = v12;
      }
      else {
        size_t v44 = v42;
      }
      int v45 = memcmp(v13, v43, v44);
      BOOL v46 = v12 < v42;
      if (v45) {
        BOOL v46 = v45 < 0;
      }
    }
    while (v46);
  }
  if (v19 < v2)
  {
    uint64_t v47 = *v19;
    uint64_t v48 = *v2;
    do
    {
      uint64_t *v19 = v48;
      uint64_t *v2 = v47;
      int v49 = *(char *)(v4 + 63);
      if (v49 >= 0) {
        size_t v50 = *(unsigned __int8 *)(v4 + 63);
      }
      else {
        size_t v50 = *(void *)(v4 + 48);
      }
      if (v49 >= 0) {
        double v51 = (const void *)v6;
      }
      else {
        double v51 = *(const void **)(v4 + 40);
      }
      do
      {
        uint64_t v52 = v19[1];
        ++v19;
        uint64_t v47 = v52;
        size_t v53 = *(unsigned __int8 *)(v52 + 63);
        uint64_t v54 = (const void *)(v52 + 40);
        double v55 = *(const void **)(v52 + 40);
        size_t v56 = *(void *)(v52 + 48);
        if ((v53 & 0x80u) == 0) {
          size_t v57 = v53;
        }
        else {
          size_t v57 = v56;
        }
        if ((v53 & 0x80u) == 0) {
          BOOL v58 = v54;
        }
        else {
          BOOL v58 = v55;
        }
        if (v57 >= v50) {
          size_t v59 = v50;
        }
        else {
          size_t v59 = v57;
        }
        int v60 = memcmp(v51, v58, v59);
        BOOL v61 = v50 < v57;
        if (v60) {
          BOOL v61 = v60 < 0;
        }
      }
      while (!v61);
      do
      {
        uint64_t v62 = *--v2;
        uint64_t v48 = v62;
        size_t v63 = *(unsigned __int8 *)(v62 + 63);
        uint64_t v64 = (const void *)(v62 + 40);
        long long v65 = *(const void **)(v62 + 40);
        size_t v66 = *(void *)(v62 + 48);
        if ((v63 & 0x80u) == 0) {
          size_t v67 = v63;
        }
        else {
          size_t v67 = v66;
        }
        if ((v63 & 0x80u) == 0) {
          unint64_t v68 = v64;
        }
        else {
          unint64_t v68 = v65;
        }
        if (v67 >= v50) {
          size_t v69 = v50;
        }
        else {
          size_t v69 = v67;
        }
        int v70 = memcmp(v51, v68, v69);
        BOOL v71 = v50 < v67;
        if (v70) {
          BOOL v71 = v70 < 0;
        }
      }
      while (v71);
    }
    while (v19 < v2);
  }
  if (v19 - 1 != a1) {
    *a1 = *(v19 - 1);
  }
  *(v19 - 1) = v4;
  return v19;
}

void *sub_780B5C(void *a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  int v6 = *(char *)(*a1 + 63);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(*a1 + 63);
  }
  else {
    size_t v7 = *(void *)(*a1 + 48);
  }
  uint64_t v65 = *a1 + 40;
  if (v6 >= 0) {
    int v8 = (const void *)(*a1 + 40);
  }
  else {
    int v8 = *(const void **)(*a1 + 40);
  }
  do
  {
    uint64_t v9 = a1[v4 + 1];
    int v10 = *(char *)(v9 + 63);
    if (v10 >= 0) {
      size_t v11 = *(unsigned __int8 *)(v9 + 63);
    }
    else {
      size_t v11 = *(void *)(v9 + 48);
    }
    if (v10 >= 0) {
      size_t v12 = (const void *)(v9 + 40);
    }
    else {
      size_t v12 = *(const void **)(v9 + 40);
    }
    if (v7 >= v11) {
      size_t v13 = v11;
    }
    else {
      size_t v13 = v7;
    }
    int v14 = memcmp(v12, v8, v13);
    BOOL v15 = v11 < v7;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    ++v4;
  }
  while (v15);
  unint64_t v16 = (unint64_t)&a1[v4];
  int v17 = &a1[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v16 >= (unint64_t)a2) {
        break;
      }
      uint64_t v28 = *--a2;
      BOOL v29 = (const void *)(v28 + 40);
      size_t v30 = *(const void **)(v28 + 40);
      size_t v31 = *(unsigned __int8 *)(v28 + 63);
      size_t v32 = *(void *)(v28 + 48);
      if ((v31 & 0x80u) == 0) {
        size_t v33 = v31;
      }
      else {
        size_t v33 = v32;
      }
      if ((v31 & 0x80u) == 0) {
        size_t v34 = v29;
      }
      else {
        size_t v34 = v30;
      }
      if (v7 >= v33) {
        size_t v35 = v33;
      }
      else {
        size_t v35 = v7;
      }
      int v36 = memcmp(v34, v8, v35);
      BOOL v37 = v33 < v7;
      if (v36) {
        BOOL v37 = v36 < 0;
      }
    }
    while (!v37);
  }
  else
  {
    do
    {
      uint64_t v18 = *--a2;
      size_t v19 = (const void *)(v18 + 40);
      uint64_t v20 = *(const void **)(v18 + 40);
      size_t v21 = *(unsigned __int8 *)(v18 + 63);
      size_t v22 = *(void *)(v18 + 48);
      if ((v21 & 0x80u) == 0) {
        size_t v23 = v21;
      }
      else {
        size_t v23 = v22;
      }
      if ((v21 & 0x80u) == 0) {
        size_t v24 = v19;
      }
      else {
        size_t v24 = v20;
      }
      if (v7 >= v23) {
        size_t v25 = v23;
      }
      else {
        size_t v25 = v7;
      }
      int v26 = memcmp(v24, v8, v25);
      BOOL v27 = v23 < v7;
      if (v26) {
        BOOL v27 = v26 < 0;
      }
    }
    while (!v27);
  }
  if (v16 < (unint64_t)a2)
  {
    uint64_t v38 = *a2;
    int v39 = &a1[v4];
    size_t v40 = a2;
    do
    {
      void *v39 = v38;
      void *v40 = v9;
      int v41 = *(char *)(v5 + 63);
      if (v41 >= 0) {
        size_t v42 = *(unsigned __int8 *)(v5 + 63);
      }
      else {
        size_t v42 = *(void *)(v5 + 48);
      }
      if (v41 >= 0) {
        int v43 = (const void *)v65;
      }
      else {
        int v43 = *(const void **)(v5 + 40);
      }
      do
      {
        uint64_t v44 = v39[1];
        ++v39;
        uint64_t v9 = v44;
        size_t v45 = *(unsigned __int8 *)(v44 + 63);
        BOOL v46 = (const void *)(v44 + 40);
        uint64_t v47 = *(const void **)(v44 + 40);
        size_t v48 = *(void *)(v44 + 48);
        if ((v45 & 0x80u) == 0) {
          size_t v49 = v45;
        }
        else {
          size_t v49 = v48;
        }
        if ((v45 & 0x80u) == 0) {
          size_t v50 = v46;
        }
        else {
          size_t v50 = v47;
        }
        if (v42 >= v49) {
          size_t v51 = v49;
        }
        else {
          size_t v51 = v42;
        }
        int v52 = memcmp(v50, v43, v51);
        BOOL v53 = v49 < v42;
        if (v52) {
          BOOL v53 = v52 < 0;
        }
      }
      while (v53);
      do
      {
        uint64_t v54 = *--v40;
        uint64_t v38 = v54;
        size_t v55 = *(unsigned __int8 *)(v54 + 63);
        size_t v56 = (const void *)(v54 + 40);
        size_t v57 = *(const void **)(v54 + 40);
        size_t v58 = *(void *)(v54 + 48);
        if ((v55 & 0x80u) == 0) {
          size_t v59 = v55;
        }
        else {
          size_t v59 = v58;
        }
        if ((v55 & 0x80u) == 0) {
          int v60 = v56;
        }
        else {
          int v60 = v57;
        }
        if (v42 >= v59) {
          size_t v61 = v59;
        }
        else {
          size_t v61 = v42;
        }
        int v62 = memcmp(v60, v43, v61);
        BOOL v63 = v59 < v42;
        if (v62) {
          BOOL v63 = v62 < 0;
        }
      }
      while (!v63);
    }
    while (v39 < v40);
    int v17 = v39 - 1;
  }
  if (v17 != a1) {
    *a1 = *v17;
  }
  void *v17 = v5;
  return v17;
}

BOOL sub_780DE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      int v8 = *(char *)(*a1 + 63);
      int v9 = *(char *)(v6 + 63);
      if (v9 >= 0) {
        size_t v10 = *(unsigned __int8 *)(v6 + 63);
      }
      else {
        size_t v10 = *(void *)(v6 + 48);
      }
      if (v9 >= 0) {
        size_t v11 = (const void *)(v6 + 40);
      }
      else {
        size_t v11 = *(const void **)(v6 + 40);
      }
      if (v8 >= 0) {
        size_t v12 = *(unsigned __int8 *)(*a1 + 63);
      }
      else {
        size_t v12 = *(void *)(*a1 + 48);
      }
      if (v8 >= 0) {
        size_t v13 = (const void *)(*a1 + 40);
      }
      else {
        size_t v13 = *(const void **)(*a1 + 40);
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      int v15 = memcmp(v11, v13, v14);
      BOOL v16 = v10 < v12;
      if (v15) {
        BOOL v16 = v15 < 0;
      }
      if (v16)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_78068C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_7810C4(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_781278(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v17 = a1 + 2;
      sub_78068C(a1, a1 + 1, a1 + 2);
      uint64_t v18 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      uint64_t v44 = a2;
      break;
  }
  while (1)
  {
    uint64_t v22 = *v18;
    uint64_t v23 = *v18 + 40;
    uint64_t v24 = *v17;
    int v25 = *(char *)(v24 + 63);
    int v26 = *(char *)(*v18 + 63);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(*v18 + 63);
    }
    else {
      size_t v27 = *(void *)(*v18 + 48);
    }
    if (v26 >= 0) {
      uint64_t v28 = (const void *)(*v18 + 40);
    }
    else {
      uint64_t v28 = *(const void **)(*v18 + 40);
    }
    if (v25 >= 0) {
      size_t v29 = *(unsigned __int8 *)(v24 + 63);
    }
    else {
      size_t v29 = *(void *)(v24 + 48);
    }
    if (v25 >= 0) {
      size_t v30 = (const void *)(v24 + 40);
    }
    else {
      size_t v30 = *(const void **)(v24 + 40);
    }
    if (v29 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v29;
    }
    int v32 = memcmp(v28, v30, v31);
    BOOL v33 = v27 < v29;
    if (v32) {
      BOOL v33 = v32 < 0;
    }
    if (v33) {
      break;
    }
    size_t v21 = v44;
LABEL_24:
    int v17 = v18;
    v19 += 8;
    if (++v18 == v21) {
      return 1;
    }
  }
  uint64_t v34 = v19;
  while (1)
  {
    *(uint64_t *)((char *)a1 + v34 + 24) = v24;
    if (v34 == -16) {
      break;
    }
    uint64_t v24 = *(uint64_t *)((char *)a1 + v34 + 8);
    int v35 = *(char *)(v24 + 63);
    int v36 = *(char *)(v22 + 63);
    if (v36 >= 0) {
      size_t v37 = *(unsigned __int8 *)(v22 + 63);
    }
    else {
      size_t v37 = *(void *)(v22 + 48);
    }
    if (v36 >= 0) {
      uint64_t v38 = (const void *)v23;
    }
    else {
      uint64_t v38 = *(const void **)(v22 + 40);
    }
    if (v35 >= 0) {
      size_t v39 = *(unsigned __int8 *)(v24 + 63);
    }
    else {
      size_t v39 = *(void *)(v24 + 48);
    }
    if (v35 >= 0) {
      size_t v40 = (const void *)(v24 + 40);
    }
    else {
      size_t v40 = *(const void **)(v24 + 40);
    }
    if (v39 >= v37) {
      size_t v41 = v37;
    }
    else {
      size_t v41 = v39;
    }
    int v42 = memcmp(v38, v40, v41);
    BOOL v43 = v37 < v39;
    if (v42) {
      BOOL v43 = v42 < 0;
    }
    v34 -= 8;
    if (!v43)
    {
      size_t v21 = v44;
      *(uint64_t *)((char *)a1 + v34 + 24) = v22;
      if (++v20 != 8) {
        goto LABEL_24;
      }
      return v18 + 1 == v21;
    }
  }
  size_t v21 = v44;
  *a1 = v22;
  if (++v20 != 8) {
    goto LABEL_24;
  }
  return v18 + 1 == v21;
}

uint64_t sub_7810C4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  sub_78068C(a1, a2, a3);
  uint64_t v8 = *a4;
  uint64_t v9 = *a3;
  int v10 = *(char *)(*a3 + 63);
  int v11 = *(char *)(*a4 + 63);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(*a4 + 63);
  }
  else {
    size_t v12 = *(void *)(*a4 + 48);
  }
  if (v11 >= 0) {
    size_t v13 = (const void *)(*a4 + 40);
  }
  else {
    size_t v13 = *(const void **)(*a4 + 40);
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(*a3 + 63);
  }
  else {
    size_t v14 = *(void *)(*a3 + 48);
  }
  if (v10 >= 0) {
    int v15 = (const void *)(*a3 + 40);
  }
  else {
    int v15 = *(const void **)(*a3 + 40);
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  uint64_t result = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (result) {
    BOOL v18 = (int)result < 0;
  }
  if (v18)
  {
    *a3 = v8;
    *a4 = v9;
    uint64_t v19 = *a3;
    uint64_t v20 = *a2;
    int v21 = *(char *)(*a2 + 63);
    int v22 = *(char *)(*a3 + 63);
    if (v22 >= 0) {
      size_t v23 = *(unsigned __int8 *)(*a3 + 63);
    }
    else {
      size_t v23 = *(void *)(*a3 + 48);
    }
    if (v22 >= 0) {
      uint64_t v24 = (const void *)(*a3 + 40);
    }
    else {
      uint64_t v24 = *(const void **)(*a3 + 40);
    }
    if (v21 >= 0) {
      size_t v25 = *(unsigned __int8 *)(*a2 + 63);
    }
    else {
      size_t v25 = *(void *)(*a2 + 48);
    }
    if (v21 >= 0) {
      int v26 = (const void *)(*a2 + 40);
    }
    else {
      int v26 = *(const void **)(*a2 + 40);
    }
    if (v25 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v25;
    }
    uint64_t result = memcmp(v24, v26, v27);
    BOOL v28 = v23 < v25;
    if (result) {
      BOOL v28 = (int)result < 0;
    }
    if (v28)
    {
      *a2 = v19;
      *a3 = v20;
      uint64_t v29 = *a2;
      uint64_t v30 = *a1;
      int v31 = *(char *)(*a1 + 63);
      int v32 = *(char *)(*a2 + 63);
      if (v32 >= 0) {
        size_t v33 = *(unsigned __int8 *)(*a2 + 63);
      }
      else {
        size_t v33 = *(void *)(*a2 + 48);
      }
      if (v32 >= 0) {
        uint64_t v34 = (const void *)(*a2 + 40);
      }
      else {
        uint64_t v34 = *(const void **)(*a2 + 40);
      }
      if (v31 >= 0) {
        size_t v35 = *(unsigned __int8 *)(*a1 + 63);
      }
      else {
        size_t v35 = *(void *)(*a1 + 48);
      }
      if (v31 >= 0) {
        int v36 = (const void *)(*a1 + 40);
      }
      else {
        int v36 = *(const void **)(*a1 + 40);
      }
      if (v35 >= v33) {
        size_t v37 = v33;
      }
      else {
        size_t v37 = v35;
      }
      uint64_t result = memcmp(v34, v36, v37);
      BOOL v38 = v33 < v35;
      if (result) {
        BOOL v38 = (int)result < 0;
      }
      if (v38)
      {
        *a1 = v29;
        *a2 = v30;
      }
    }
  }
  return result;
}

uint64_t sub_781278(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_7810C4(a1, a2, a3, a4);
  uint64_t v10 = *a5;
  uint64_t v11 = *a4;
  int v12 = *(char *)(*a4 + 63);
  int v13 = *(char *)(*a5 + 63);
  if (v13 >= 0) {
    size_t v14 = *(unsigned __int8 *)(*a5 + 63);
  }
  else {
    size_t v14 = *(void *)(*a5 + 48);
  }
  if (v13 >= 0) {
    int v15 = (const void *)(*a5 + 40);
  }
  else {
    int v15 = *(const void **)(*a5 + 40);
  }
  if (v12 >= 0) {
    size_t v16 = *(unsigned __int8 *)(*a4 + 63);
  }
  else {
    size_t v16 = *(void *)(*a4 + 48);
  }
  if (v12 >= 0) {
    int v17 = (const void *)(*a4 + 40);
  }
  else {
    int v17 = *(const void **)(*a4 + 40);
  }
  if (v16 >= v14) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v16;
  }
  uint64_t result = memcmp(v15, v17, v18);
  BOOL v20 = v14 < v16;
  if (result) {
    BOOL v20 = (int)result < 0;
  }
  if (v20)
  {
    *a4 = v10;
    *a5 = v11;
    uint64_t v21 = *a4;
    uint64_t v22 = *a3;
    int v23 = *(char *)(*a3 + 63);
    int v24 = *(char *)(*a4 + 63);
    if (v24 >= 0) {
      size_t v25 = *(unsigned __int8 *)(*a4 + 63);
    }
    else {
      size_t v25 = *(void *)(*a4 + 48);
    }
    if (v24 >= 0) {
      int v26 = (const void *)(*a4 + 40);
    }
    else {
      int v26 = *(const void **)(*a4 + 40);
    }
    if (v23 >= 0) {
      size_t v27 = *(unsigned __int8 *)(*a3 + 63);
    }
    else {
      size_t v27 = *(void *)(*a3 + 48);
    }
    if (v23 >= 0) {
      BOOL v28 = (const void *)(*a3 + 40);
    }
    else {
      BOOL v28 = *(const void **)(*a3 + 40);
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    uint64_t result = memcmp(v26, v28, v29);
    BOOL v30 = v25 < v27;
    if (result) {
      BOOL v30 = (int)result < 0;
    }
    if (v30)
    {
      *a3 = v21;
      *a4 = v22;
      uint64_t v31 = *a3;
      uint64_t v32 = *a2;
      int v33 = *(char *)(*a2 + 63);
      int v34 = *(char *)(*a3 + 63);
      if (v34 >= 0) {
        size_t v35 = *(unsigned __int8 *)(*a3 + 63);
      }
      else {
        size_t v35 = *(void *)(*a3 + 48);
      }
      if (v34 >= 0) {
        int v36 = (const void *)(*a3 + 40);
      }
      else {
        int v36 = *(const void **)(*a3 + 40);
      }
      if (v33 >= 0) {
        size_t v37 = *(unsigned __int8 *)(*a2 + 63);
      }
      else {
        size_t v37 = *(void *)(*a2 + 48);
      }
      if (v33 >= 0) {
        BOOL v38 = (const void *)(*a2 + 40);
      }
      else {
        BOOL v38 = *(const void **)(*a2 + 40);
      }
      if (v37 >= v35) {
        size_t v39 = v35;
      }
      else {
        size_t v39 = v37;
      }
      uint64_t result = memcmp(v36, v38, v39);
      BOOL v40 = v35 < v37;
      if (result) {
        BOOL v40 = (int)result < 0;
      }
      if (v40)
      {
        *a2 = v31;
        *a3 = v32;
        uint64_t v41 = *a2;
        uint64_t v42 = *a1;
        int v43 = *(char *)(*a1 + 63);
        int v44 = *(char *)(*a2 + 63);
        if (v44 >= 0) {
          size_t v45 = *(unsigned __int8 *)(*a2 + 63);
        }
        else {
          size_t v45 = *(void *)(*a2 + 48);
        }
        if (v44 >= 0) {
          BOOL v46 = (const void *)(*a2 + 40);
        }
        else {
          BOOL v46 = *(const void **)(*a2 + 40);
        }
        if (v43 >= 0) {
          size_t v47 = *(unsigned __int8 *)(*a1 + 63);
        }
        else {
          size_t v47 = *(void *)(*a1 + 48);
        }
        if (v43 >= 0) {
          size_t v48 = (const void *)(*a1 + 40);
        }
        else {
          size_t v48 = *(const void **)(*a1 + 40);
        }
        if (v47 >= v45) {
          size_t v49 = v45;
        }
        else {
          size_t v49 = v47;
        }
        uint64_t result = memcmp(v46, v48, v49);
        BOOL v50 = v45 < v47;
        if (result) {
          BOOL v50 = (int)result < 0;
        }
        if (v50)
        {
          *a1 = v41;
          *a2 = v42;
        }
      }
    }
  }
  return result;
}

char *sub_7814B0(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[8 * v10];
      do
      {
        sub_78175C((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v48 = a4;
    int v13 = v6;
    if (v6 != a3)
    {
      uint64_t v50 = v8;
      size_t v14 = v6;
      do
      {
        uint64_t v15 = *(void *)v6;
        uint64_t v16 = *(void *)a1;
        int v17 = *(char *)(*(void *)a1 + 63);
        int v18 = *(char *)(*(void *)v6 + 63);
        if (v18 >= 0) {
          size_t v19 = *(unsigned __int8 *)(*(void *)v6 + 63);
        }
        else {
          size_t v19 = *(void *)(*(void *)v6 + 48);
        }
        if (v18 >= 0) {
          BOOL v20 = (const void *)(*(void *)v6 + 40);
        }
        else {
          BOOL v20 = *(const void **)(*(void *)v6 + 40);
        }
        if (v17 >= 0) {
          size_t v21 = *(unsigned __int8 *)(*(void *)a1 + 63);
        }
        else {
          size_t v21 = *(void *)(*(void *)a1 + 48);
        }
        if (v17 >= 0) {
          uint64_t v22 = (const void *)(*(void *)a1 + 40);
        }
        else {
          uint64_t v22 = *(const void **)(*(void *)a1 + 40);
        }
        if (v21 >= v19) {
          size_t v23 = v19;
        }
        else {
          size_t v23 = v21;
        }
        int v24 = memcmp(v20, v22, v23);
        BOOL v25 = v19 < v21;
        if (v24) {
          BOOL v25 = v24 < 0;
        }
        if (v25)
        {
          *(void *)uint64_t v6 = v16;
          *(void *)a1 = v15;
          sub_78175C((uint64_t)a1, v48, v9, a1);
        }
        v6 += 8;
      }
      while (v6 != a3);
      int v13 = a3;
      uint64_t v6 = v14;
      uint64_t v8 = v50;
    }
    if (v8 < 9)
    {
      return v13;
    }
    else
    {
      size_t v47 = v13;
      uint64_t v26 = (unint64_t)v8 >> 3;
      do
      {
        while (1)
        {
          uint64_t v28 = 0;
          uint64_t v49 = *(void *)a1;
          size_t v51 = v6;
          size_t v29 = a1;
          do
          {
            uint64_t v30 = (uint64_t)&v29[v28 + 1];
            uint64_t v31 = (2 * v28) | 1;
            uint64_t v32 = 2 * v28 + 2;
            if (v32 < v26)
            {
              uint64_t v33 = v29[v28 + 2];
              int v36 = *(const void **)(v33 + 40);
              uint64_t v34 = v33 + 40;
              size_t v35 = v36;
              int v37 = *(char *)(v34 + 23);
              int v38 = *(char *)(*(void *)v30 + 63);
              if (v38 >= 0) {
                size_t v39 = *(unsigned __int8 *)(*(void *)v30 + 63);
              }
              else {
                size_t v39 = *(void *)(*(void *)v30 + 48);
              }
              if (v38 >= 0) {
                BOOL v40 = (const void *)(*(void *)v30 + 40);
              }
              else {
                BOOL v40 = *(const void **)(*(void *)v30 + 40);
              }
              if (v37 >= 0) {
                size_t v41 = *(unsigned __int8 *)(v34 + 23);
              }
              else {
                size_t v41 = *(void *)(v34 + 8);
              }
              if (v37 >= 0) {
                uint64_t v42 = (const void *)v34;
              }
              else {
                uint64_t v42 = v35;
              }
              if (v41 >= v39) {
                size_t v43 = v39;
              }
              else {
                size_t v43 = v41;
              }
              int v44 = memcmp(v40, v42, v43);
              BOOL v45 = v39 < v41;
              if (v44) {
                BOOL v45 = v44 < 0;
              }
              if (v45)
              {
                v30 += 8;
                uint64_t v31 = v32;
              }
            }
            *size_t v29 = *(void *)v30;
            size_t v29 = (void *)v30;
            uint64_t v28 = v31;
          }
          while (v31 <= (uint64_t)((unint64_t)(v26 - 2) >> 1));
          uint64_t v6 = v51 - 8;
          if ((char *)v30 == v51 - 8) {
            break;
          }
          *(void *)uint64_t v30 = *(void *)v6;
          *(void *)uint64_t v6 = v49;
          sub_7819FC((uint64_t)a1, v30 + 8, v48, (v30 + 8 - (uint64_t)a1) >> 3);
          BOOL v27 = v26-- <= 2;
          if (v27) {
            return v47;
          }
        }
        *(void *)uint64_t v30 = v49;
        BOOL v27 = v26-- <= 2;
      }
      while (!v27);
      return v47;
    }
  }
  return a3;
}

uint64_t sub_78175C(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v60 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v7 = a3;
      uint64_t v8 = ((uint64_t)a4 - result) >> 2;
      uint64_t v9 = v8 + 1;
      unint64_t v10 = (void *)(result + 8 * (v8 + 1));
      uint64_t v11 = v8 + 2;
      uint64_t v12 = *v10;
      uint64_t v58 = result;
      if (v8 + 2 < a3)
      {
        uint64_t v13 = v10[1];
        int v14 = *(char *)(v13 + 63);
        int v15 = *(char *)(v12 + 63);
        if (v15 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v12 + 63);
        }
        else {
          size_t v16 = *(void *)(v12 + 48);
        }
        if (v15 >= 0) {
          int v17 = (const void *)(v12 + 40);
        }
        else {
          int v17 = *(const void **)(v12 + 40);
        }
        if (v14 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v13 + 63);
        }
        else {
          size_t v18 = *(void *)(v13 + 48);
        }
        if (v14 >= 0) {
          size_t v19 = (const void *)(v13 + 40);
        }
        else {
          size_t v19 = *(const void **)(v13 + 40);
        }
        if (v18 >= v16) {
          size_t v20 = v16;
        }
        else {
          size_t v20 = v18;
        }
        int v21 = memcmp(v17, v19, v20);
        BOOL v22 = v16 >= v18;
        uint64_t v6 = v58;
        BOOL v23 = !v22;
        if (v21) {
          BOOL v23 = v21 < 0;
        }
        if (v23)
        {
          uint64_t v12 = v13;
          ++v10;
          uint64_t v9 = v11;
        }
      }
      uint64_t v24 = *v5;
      int v25 = *(char *)(*v5 + 63);
      uint64_t v28 = *(const void **)(v12 + 40);
      uint64_t v27 = v12 + 40;
      uint64_t v26 = v28;
      int v29 = *(char *)(v27 + 23);
      if (v29 >= 0) {
        size_t v30 = *(unsigned __int8 *)(v27 + 23);
      }
      else {
        size_t v30 = *(void *)(v27 + 8);
      }
      if (v29 >= 0) {
        uint64_t v31 = (const void *)v27;
      }
      else {
        uint64_t v31 = v26;
      }
      if (v25 >= 0) {
        size_t v32 = *(unsigned __int8 *)(*v5 + 63);
      }
      else {
        size_t v32 = *(void *)(*v5 + 48);
      }
      uint64_t v59 = *v5 + 40;
      if (v25 >= 0) {
        uint64_t v33 = (const void *)(*v5 + 40);
      }
      else {
        uint64_t v33 = *(const void **)(*v5 + 40);
      }
      if (v32 >= v30) {
        size_t v34 = v30;
      }
      else {
        size_t v34 = v32;
      }
      uint64_t result = memcmp(v31, v33, v34);
      BOOL v35 = v30 < v32;
      if (result) {
        BOOL v35 = (int)result < 0;
      }
      if (!v35)
      {
        uint64_t v36 = *v10;
        uint64_t v57 = v7;
        do
        {
          *uint64_t v5 = v36;
          uint64_t v5 = v10;
          if (v60 < v9) {
            break;
          }
          uint64_t v45 = (2 * v9) | 1;
          unint64_t v10 = (void *)(v6 + 8 * v45);
          uint64_t v46 = 2 * v9 + 2;
          uint64_t v36 = *v10;
          if (v46 < v7)
          {
            uint64_t v47 = v10[1];
            int v48 = *(char *)(v47 + 63);
            int v49 = *(char *)(v36 + 63);
            if (v49 >= 0) {
              size_t v50 = *(unsigned __int8 *)(v36 + 63);
            }
            else {
              size_t v50 = *(void *)(v36 + 48);
            }
            if (v49 >= 0) {
              size_t v51 = (const void *)(v36 + 40);
            }
            else {
              size_t v51 = *(const void **)(v36 + 40);
            }
            if (v48 >= 0) {
              size_t v52 = *(unsigned __int8 *)(v47 + 63);
            }
            else {
              size_t v52 = *(void *)(v47 + 48);
            }
            if (v48 >= 0) {
              BOOL v53 = (const void *)(v47 + 40);
            }
            else {
              BOOL v53 = *(const void **)(v47 + 40);
            }
            if (v52 >= v50) {
              size_t v54 = v50;
            }
            else {
              size_t v54 = v52;
            }
            int v55 = memcmp(v51, v53, v54);
            BOOL v56 = v50 < v52;
            if (v55) {
              BOOL v56 = v55 < 0;
            }
            if (v56)
            {
              uint64_t v36 = v47;
              ++v10;
            }
            uint64_t v7 = v57;
            uint64_t v6 = v58;
            if (v56) {
              uint64_t v45 = v46;
            }
          }
          int v37 = *(char *)(v24 + 63);
          int v38 = *(char *)(v36 + 63);
          unint64_t v39 = v38 >= 0 ? *(unsigned __int8 *)(v36 + 63) : *(void *)(v36 + 48);
          BOOL v40 = v38 >= 0 ? (const void *)(v36 + 40) : *(const void **)(v36 + 40);
          unint64_t v41 = v37 >= 0 ? *(unsigned __int8 *)(v24 + 63) : *(void *)(v24 + 48);
          uint64_t v42 = v37 >= 0 ? (const void *)v59 : *(const void **)(v24 + 40);
          size_t v43 = v41 >= v39 ? v39 : v41;
          uint64_t result = memcmp(v40, v42, v43);
          BOOL v44 = v39 < v41;
          if (result) {
            BOOL v44 = (int)result < 0;
          }
          uint64_t v9 = v45;
        }
        while (!v44);
        *uint64_t v5 = v24;
      }
    }
  }
  return result;
}

uint64_t sub_7819FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v8 = (void *)(a2 - 8);
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v10 = *v7;
    int v11 = *(char *)(v9 + 63);
    int v12 = *(char *)(*v7 + 63);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(*v7 + 63);
    }
    else {
      size_t v13 = *(void *)(*v7 + 48);
    }
    if (v12 >= 0) {
      int v14 = (const void *)(*v7 + 40);
    }
    else {
      int v14 = *(const void **)(*v7 + 40);
    }
    if (v11 >= 0) {
      size_t v15 = *(unsigned __int8 *)(v9 + 63);
    }
    else {
      size_t v15 = *(void *)(v9 + 48);
    }
    if (v11 >= 0) {
      size_t v16 = (const void *)(v9 + 40);
    }
    else {
      size_t v16 = *(const void **)(v9 + 40);
    }
    if (v15 >= v13) {
      size_t v17 = v13;
    }
    else {
      size_t v17 = v15;
    }
    uint64_t result = memcmp(v14, v16, v17);
    BOOL v18 = v13 < v15;
    if (result) {
      BOOL v18 = (int)result < 0;
    }
    if (v18)
    {
      do
      {
        void *v8 = v10;
        uint64_t v8 = v7;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (void *)(v5 + 8 * v6);
        uint64_t v10 = *v7;
        int v19 = *(char *)(v9 + 63);
        int v20 = *(char *)(*v7 + 63);
        unint64_t v21 = v20 >= 0 ? *(unsigned __int8 *)(*v7 + 63) : *(void *)(*v7 + 48);
        BOOL v22 = v20 >= 0 ? (const void *)(*v7 + 40) : *(const void **)(*v7 + 40);
        unint64_t v23 = v19 >= 0 ? *(unsigned __int8 *)(v9 + 63) : *(void *)(v9 + 48);
        uint64_t v24 = v19 >= 0 ? (const void *)(v9 + 40) : *(const void **)(v9 + 40);
        size_t v25 = v23 >= v21 ? v21 : v23;
        uint64_t result = memcmp(v22, v24, v25);
        BOOL v26 = v21 < v23;
        if (result) {
          BOOL v26 = (int)result < 0;
        }
      }
      while (v26);
      void *v8 = v9;
    }
  }
  return result;
}

void *sub_781B40(void **a1, void *a2, void *a3, void *a4, void ***a5)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (void *)*a2;
  if (*a1 == (void *)*a2) {
    return v5;
  }
  for (uint64_t i = (void *)*a3; *a3 != *a4; uint64_t i = (void *)*a3)
  {
    int v11 = *(char *)(*i + 63);
    int v12 = *(char *)(*v5 + 63);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(*v5 + 63);
    }
    else {
      size_t v13 = *(void *)(*v5 + 48);
    }
    if (v12 >= 0) {
      int v14 = (const void *)(*v5 + 40);
    }
    else {
      int v14 = *(const void **)(*v5 + 40);
    }
    if (v11 >= 0) {
      size_t v15 = *(unsigned __int8 *)(*i + 63);
    }
    else {
      size_t v15 = *(void *)(*i + 48);
    }
    if (v11 >= 0) {
      size_t v16 = (const void *)(*i + 40);
    }
    else {
      size_t v16 = *(const void **)(*i + 40);
    }
    if (v15 >= v13) {
      size_t v17 = v13;
    }
    else {
      size_t v17 = v15;
    }
    int v18 = memcmp(v14, v16, v17);
    BOOL v19 = v13 < v15;
    if (v18) {
      BOOL v19 = v18 < 0;
    }
    if (v19)
    {
      sub_2A98DC(a5, v5);
      uint64_t i = *a1;
      int v20 = a1;
    }
    else
    {
      int v21 = memcmp(v16, v14, v17);
      BOOL v22 = v21 < 0;
      if (!v21) {
        BOOL v22 = v15 < v13;
      }
      int v20 = a3;
      if (!v22)
      {
        *a1 = v5 + 1;
        uint64_t i = (void *)*a3;
        int v20 = a3;
      }
    }
    *int v20 = i + 1;
    uint64_t v5 = *a1;
    unint64_t v6 = (void *)*a2;
    if (*a1 == (void *)*a2) {
      return v5;
    }
  }
  uint64_t v27 = *a5;
  if (v5 == v6) {
    return v5;
  }
  unint64_t v23 = v5;
  do
    sub_2A98DC(&v27, v23++);
  while (v23 != v6);
  return v6;
}

uint64_t *sub_781CF4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 16)
    {
      sub_781DE8(&v18, i, (uint64_t)v11);
      uint64_t v9 = sub_77E434(a3, a4, (uint64_t)v11);
      if (v17 < 0)
      {
        operator delete(__p);
        if ((v15 & 0x80000000) == 0)
        {
LABEL_6:
          if (v13 < 0) {
            goto LABEL_10;
          }
          goto LABEL_3;
        }
      }
      else if ((v15 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v14);
      if (v13 < 0) {
LABEL_10:
      }
        operator delete(v12);
LABEL_3:
      a4 = (uint64_t)(v9 + 256);
      sub_30328C((uint64_t)v11);
    }
  }
  return a3;
}

void sub_781DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_77A97C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_781DE8(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(const std::string ***)(a2 + 8);
  sub_6F85DC(v5 + 6, *(void *)(*a1 + 8) + 968, (uint64_t)&v14);
  sub_6F85DC(v5 + 9, *(void *)(v4 + 8) + 968, (uint64_t)v12);
  sub_6F85DC(v5 + 12, *(void *)(v4 + 8) + 968, (uint64_t)v10);
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(v6, v12[0], (unint64_t)v12[1]);
  }
  else
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v12;
    uint64_t v7 = v13;
  }
  if (SHIBYTE(v11) < 0)
  {
    sub_4200(&__p, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v10;
    uint64_t v9 = v11;
  }
  sub_603F50(a3, (uint64_t)v5, &v14, (long long *)v6);
  if (SHIBYTE(v9) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v6[0]);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v10[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete((void *)v14);
    return;
  }
LABEL_16:
  operator delete(v12[0]);
  if (v15 < 0) {
    goto LABEL_17;
  }
}

void sub_781F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

void sub_782000()
{
}

__n128 sub_782014(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_243A450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_782068(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243A450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_7820A0(uint64_t a1, uint64_t a2)
{
  return sub_77F1DC(a1 + 8, a2);
}

uint64_t sub_7820A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11DrivingModeEEENS0_26GuidanceReques"
                     "tInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11DrivingModeEEENS0_26Gui"
                                "danceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRK"
                                "NS_4data8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11DrivingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11DrivingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_782118()
{
}

uint64_t *sub_782124(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 16)
    {
      sub_782218(&v18, i, (uint64_t)v11);
      uint64_t v9 = sub_77E434(a3, a4, (uint64_t)v11);
      if (v17 < 0)
      {
        operator delete(__p);
        if ((v15 & 0x80000000) == 0)
        {
LABEL_6:
          if (v13 < 0) {
            goto LABEL_10;
          }
          goto LABEL_3;
        }
      }
      else if ((v15 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v14);
      if (v13 < 0) {
LABEL_10:
      }
        operator delete(v12);
LABEL_3:
      a4 = (uint64_t)(v9 + 256);
      sub_30328C((uint64_t)v11);
    }
  }
  return a3;
}

void sub_782204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_77A97C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_782218(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(const std::string ***)(a2 + 8);
  sub_6F85DC(v5 + 6, *(void *)(*a1 + 8), (uint64_t)&v14);
  sub_6F85DC(v5 + 9, *(void *)(v4 + 8), (uint64_t)v12);
  sub_6F85DC(v5 + 12, *(void *)(v4 + 8), (uint64_t)v10);
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(v6, v12[0], (unint64_t)v12[1]);
  }
  else
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v12;
    uint64_t v7 = v13;
  }
  if (SHIBYTE(v11) < 0)
  {
    sub_4200(&__p, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v10;
    uint64_t v9 = v11;
  }
  sub_603F50(a3, (uint64_t)v5, &v14, (long long *)v6);
  if (SHIBYTE(v9) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v6[0]);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v10[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete((void *)v14);
    return;
  }
LABEL_16:
  operator delete(v12[0]);
  if (v15 < 0) {
    goto LABEL_17;
  }
}

void sub_78236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

void sub_782424()
{
}

__n128 sub_782438(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_243A4D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_78248C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243A4D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_7824C4(uint64_t a1, uint64_t a2)
{
  return sub_782548(a1 + 8, a2);
}

uint64_t sub_7824CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_29ETAGuidanceRequestInf"
                     "ormationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_29ETAGuidanc"
                                "eRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4"
                                "data8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_29ETAGuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_8RouteLegINS0_11DrivingModeEEENS0_29ETAGuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_78253C()
{
}

BOOL sub_782548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = sub_358690(a2, 0);
  BOOL result = 0;
  if (v5)
  {
    BOOL result = sub_358898(a2, **(_DWORD **)a1);
    if (result)
    {
      BOOL result = 0;
      unsigned int v7 = *(_DWORD *)(a2 + 88);
      BOOL v8 = v7 != 13 && v7 > *(_DWORD *)(*(void *)(v4 + 8) + 100);
      BOOL v9 = v8;
      if (v7 != 9 && !v9)
      {
        BOOL result = 1;
        if (sub_358820(a2) && !sub_1041610(v4 + 3976, a2))
        {
          uint64_t v10 = *(unsigned __int8 ***)(a1 + 16);
          v12[0] = &v11;
          v12[1] = a2 + 40;
          if (!sub_77F2BC(v10, (uint64_t)v12)) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_782628(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 16)
    {
      sub_78271C(&v18, i, (uint64_t)v11);
      BOOL v9 = sub_77E434(a3, a4, (uint64_t)v11);
      if (v17 < 0)
      {
        operator delete(__p);
        if ((v15 & 0x80000000) == 0)
        {
LABEL_6:
          if (v13 < 0) {
            goto LABEL_10;
          }
          goto LABEL_3;
        }
      }
      else if ((v15 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v14);
      if (v13 < 0) {
LABEL_10:
      }
        operator delete(v12);
LABEL_3:
      a4 = (uint64_t)(v9 + 256);
      sub_30328C((uint64_t)v11);
    }
  }
  return a3;
}

void sub_782708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_77A97C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_78271C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  int v5 = *(const std::string ***)(a2 + 8);
  sub_6FAEF8(v5 + 6, *(void *)(*a1 + 8) + 968, (uint64_t)&v14);
  sub_6FAEF8(v5 + 9, *(void *)(v4 + 8) + 968, (uint64_t)v12);
  sub_6FAEF8(v5 + 12, *(void *)(v4 + 8) + 968, (uint64_t)v10);
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(v6, v12[0], (unint64_t)v12[1]);
  }
  else
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v12;
    uint64_t v7 = v13;
  }
  if (SHIBYTE(v11) < 0)
  {
    sub_4200(&__p, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v10;
    uint64_t v9 = v11;
  }
  sub_603F50(a3, (uint64_t)v5, &v14, (long long *)v6);
  if (SHIBYTE(v9) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v6[0]);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v10[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete((void *)v14);
    return;
  }
LABEL_16:
  operator delete(v12[0]);
  if (v15 < 0) {
    goto LABEL_17;
  }
}

void sub_78287C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

void sub_782934()
{
}

__n128 sub_782948(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_243A550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_78299C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243A550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_7829D4(uint64_t a1, uint64_t a2)
{
  return sub_782A58(a1 + 8, a2);
}

uint64_t sub_7829DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11WalkingModeEEENS0_26GuidanceReques"
                     "tInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11WalkingModeEEENS0_26Gui"
                                "danceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRK"
                                "NS_4data8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11WalkingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11WalkingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_782A4C()
{
}

uint64_t sub_782A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = sub_358690(a2, 2);
  if (result)
  {
    uint64_t result = sub_358898(a2, **(_DWORD **)a1);
    if (result)
    {
      uint64_t result = 0;
      unsigned int v6 = *(_DWORD *)(a2 + 88);
      BOOL v7 = v6 != 13 && v6 > *(_DWORD *)(*(void *)(v4 + 8) + 1420);
      BOOL v8 = v7;
      if (v6 != 9 && !v8)
      {
        uint64_t result = 1;
        if (sub_358820(a2) && !sub_1041610(v4 + 3976, a2))
        {
          uint64_t v9 = *(unsigned __int8 ***)(a1 + 16);
          v11[0] = &v10;
          v11[1] = a2 + 40;
          if (!sub_77F2BC(v9, (uint64_t)v11)) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_782B30(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 16)
    {
      sub_782C24(&v18, i, (uint64_t)v11);
      uint64_t v9 = sub_77E434(a3, a4, (uint64_t)v11);
      if (v17 < 0)
      {
        operator delete(__p);
        if ((v15 & 0x80000000) == 0)
        {
LABEL_6:
          if (v13 < 0) {
            goto LABEL_10;
          }
          goto LABEL_3;
        }
      }
      else if ((v15 & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v14);
      if (v13 < 0) {
LABEL_10:
      }
        operator delete(v12);
LABEL_3:
      a4 = (uint64_t)(v9 + 256);
      sub_30328C((uint64_t)v11);
    }
  }
  return a3;
}

void sub_782C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_77A97C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_782C24(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  int v5 = *(const std::string ***)(a2 + 8);
  sub_6F57B4(v5 + 6, *(void *)(*a1 + 8) + 968, (uint64_t)&v14);
  sub_6F57B4(v5 + 9, *(void *)(v4 + 8) + 968, (uint64_t)v12);
  sub_6F57B4(v5 + 12, *(void *)(v4 + 8) + 968, (uint64_t)v10);
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(v6, v12[0], (unint64_t)v12[1]);
  }
  else
  {
    *(_OWORD *)unsigned int v6 = *(_OWORD *)v12;
    uint64_t v7 = v13;
  }
  if (SHIBYTE(v11) < 0)
  {
    sub_4200(&__p, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v10;
    uint64_t v9 = v11;
  }
  sub_603F50(a3, (uint64_t)v5, &v14, (long long *)v6);
  if (SHIBYTE(v9) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v6[0]);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v10[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete((void *)v14);
    return;
  }
LABEL_16:
  operator delete(v12[0]);
  if (v15 < 0) {
    goto LABEL_17;
  }
}

void sub_782D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a25);
  if ((*(char *)(v30 - 33) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v30 - 56));
  _Unwind_Resume(exception_object);
}

void sub_782E3C()
{
}

__n128 sub_782E50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_243A5D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_782EA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243A5D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_782EDC(uint64_t a1, uint64_t a2)
{
  return sub_782F60(a1 + 8, a2);
}

uint64_t sub_782EE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11CyclingModeEEENS0_26GuidanceReques"
                     "tInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11CyclingModeEEENS0_26Gui"
                                "danceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRK"
                                "NS_4data8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11CyclingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing20RouteIncidentMatcherINS0_14GuidedRouteLegINS0_11CyclingModeEEENS0_26GuidanceRequestInformationEE22find_traffic_incidentsERKS4_RKNS0_19SessionStateContextEEUlRKNS_4data8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_782F54()
{
}

uint64_t sub_782F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = sub_358690(a2, 3);
  if (result)
  {
    uint64_t result = sub_358898(a2, **(_DWORD **)a1);
    if (result)
    {
      uint64_t result = 0;
      unsigned int v6 = *(_DWORD *)(a2 + 88);
      BOOL v7 = v6 != 13 && v6 > *(_DWORD *)(*(void *)(v4 + 8) + 1420);
      BOOL v8 = v7;
      if (v6 != 9 && !v8)
      {
        uint64_t result = 1;
        if (sub_358820(a2) && !sub_1041610(v4 + 3976, a2))
        {
          uint64_t v9 = *(unsigned __int8 ***)(a1 + 16);
          v11[0] = &v10;
          v11[1] = a2 + 40;
          if (!sub_77F2BC(v9, (uint64_t)v11)) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

double sub_783038()
{
  byte_25B44BF = 1;
  word_25B44A8 = 65;
  byte_25B44D7 = 1;
  word_25B44C0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25B4568 = 0u;
  *(_OWORD *)&qword_25B4578 = 0u;
  dword_25B4588 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B4568, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25B4568, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25B4568, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25B4568, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25B44EF = 8;
  strcpy((char *)&qword_25B44D8, "any_mode");
  byte_25B4507 = 7;
  strcpy((char *)&dword_25B44F0, "cycling");
  byte_25B451F = 7;
  strcpy((char *)&dword_25B4508, "driving");
  byte_25B4537 = 7;
  strcpy((char *)&dword_25B4520, "walking");
  qword_25B4540 = 0;
  qword_25B4548 = 0;
  qword_25B4538 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25B4538 = (uint64_t)v0;
  qword_25B4540 = (uint64_t)(v0 + 9);
  qword_25B4548 = (uint64_t)(v0 + 9);
  qword_25B4550 = 0;
  qword_25B4558 = 0;
  unk_25B4560 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25B4558 = (uint64_t)(v1 + 9);
  unk_25B4560 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25B4550 = (uint64_t)v1;
  return result;
}

void sub_783300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25B4578) {
    sub_20AAD6C((void **)qword_25B4578);
  }
  int v37 = (void *)xmmword_25B4568;
  *(void *)&xmmword_25B4568 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_7833A0(int a1@<W1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_46B058();
  int v5 = v4;
  unint64_t v7 = v6;
  if (a1) {
    int v8 = 3;
  }
  else {
    int v8 = 2;
  }
  while (1)
  {
    sub_46B060();
    char v10 = v9;
    unint64_t v12 = v11;
    if (v5)
    {
      unint64_t v13 = sub_46C760(v5);
      BOOL v14 = v7 < v13;
      if (!v10)
      {
        if (v7 >= v13) {
          goto LABEL_21;
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (!v9) {
        goto LABEL_21;
      }
      BOOL v14 = 0;
    }
    unint64_t v15 = sub_46C760(v10);
    if (v12 >= v15 || !v14) {
      break;
    }
    uint64_t v17 = sub_46C8EC(v5, v7);
    if (v17 == sub_46C8EC(v10, v12)) {
      goto LABEL_21;
    }
LABEL_18:
    uint64_t v18 = *(void *)(sub_46C8EC(v5, v7) + 32);
    uint64_t v19 = sub_46C8EC(v5, v7);
    unint64_t v30 = *(unsigned int *)(v19 + 32) | ((unint64_t)*(unsigned __int16 *)(v19 + 36) << 32);
    uint64_t v31 = &v30;
    if ((v18 & 0xFF000000000000) != 0)
    {
      int v20 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = v8;
      int v29 = 1000000000 - sub_46CB48((uint64_t)v5, v7);
      char v28 = 0;
      sub_63957C((uint64_t)(v20 + 3), &v31, &v29, &v28);
      uint64_t v31 = &v30;
      int v21 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = a1;
      int v29 = 1000000000 - sub_46CACC((uint64_t)v5, v7);
    }
    else
    {
      BOOL v22 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = 2;
      int v29 = sub_46CACC((uint64_t)v5, v7);
      char v28 = 0;
      sub_63957C((uint64_t)(v22 + 3), &v31, &v29, &v28);
      uint64_t v31 = &v30;
      int v21 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = 0;
      int v29 = sub_46CB48((uint64_t)v5, v7);
    }
    char v28 = 0;
    sub_63957C((uint64_t)(v21 + 3), &v31, &v29, &v28);
    ++v7;
  }
  if ((v14 ^ (v12 < v15))) {
    goto LABEL_18;
  }
LABEL_21:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v24 = i[3];
    size_t v25 = (unsigned int *)i[4];
    unint64_t v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v24) >> 2));
    if (v25 == (unsigned int *)v24) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v26;
    }
    sub_7843F4(v24, v25, (uint64_t)&v31, v27, 1);
  }
}

void sub_78369C(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_7836B0(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_7836C4(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_7836D8(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_7836EC(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783700(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783714(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783728(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_78373C(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783750(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783764(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783778(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_78378C(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_7837A0(int a1@<W1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_46B058();
  int v5 = v4;
  unint64_t v7 = v6;
  if (a1) {
    int v8 = 3;
  }
  else {
    int v8 = 2;
  }
  while (1)
  {
    sub_46B060();
    char v10 = v9;
    unint64_t v12 = v11;
    if (v5)
    {
      unint64_t v13 = sub_46C760(v5);
      BOOL v14 = v7 < v13;
      if (!v10)
      {
        if (v7 >= v13) {
          goto LABEL_21;
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (!v9) {
        goto LABEL_21;
      }
      BOOL v14 = 0;
    }
    unint64_t v15 = sub_46C760(v10);
    if (v12 >= v15 || !v14) {
      break;
    }
    uint64_t v17 = sub_46C8EC(v5, v7);
    if (v17 == sub_46C8EC(v10, v12)) {
      goto LABEL_21;
    }
LABEL_18:
    uint64_t v18 = *(void *)(sub_46C8EC(v5, v7) + 32);
    uint64_t v19 = sub_46C8EC(v5, v7);
    unint64_t v30 = *(unsigned int *)(v19 + 32) | ((unint64_t)*(unsigned __int16 *)(v19 + 36) << 32);
    uint64_t v31 = &v30;
    if ((v18 & 0xFF000000000000) != 0)
    {
      int v20 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = v8;
      int v29 = 1000000000 - sub_46CB48((uint64_t)v5, v7);
      char v28 = 0;
      sub_63957C((uint64_t)(v20 + 3), &v31, &v29, &v28);
      uint64_t v31 = &v30;
      int v21 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = a1;
      int v29 = 1000000000 - sub_46CACC((uint64_t)v5, v7);
    }
    else
    {
      BOOL v22 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = 2;
      int v29 = sub_46CACC((uint64_t)v5, v7);
      char v28 = 0;
      sub_63957C((uint64_t)(v22 + 3), &v31, &v29, &v28);
      uint64_t v31 = &v30;
      int v21 = sub_785870(a2, &v30, (uint64_t)&unk_20F06E0, (uint64_t **)&v31);
      LODWORD(v31) = 0;
      int v29 = sub_46CB48((uint64_t)v5, v7);
    }
    char v28 = 0;
    sub_63957C((uint64_t)(v21 + 3), &v31, &v29, &v28);
    ++v7;
  }
  if ((v14 ^ (v12 < v15))) {
    goto LABEL_18;
  }
LABEL_21:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v24 = i[3];
    size_t v25 = (unsigned int *)i[4];
    unint64_t v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v24) >> 2));
    if (v25 == (unsigned int *)v24) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v26;
    }
    sub_7843F4(v24, v25, (uint64_t)&v31, v27, 1);
  }
}

void sub_783A9C(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783AB0(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783AC4(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783AD8(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783AEC(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B00(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B14(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B28(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B3C(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B50(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B64(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B78(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783B8C(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783BA0(int a1@<W1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_46B058();
  int v5 = v4;
  unint64_t v7 = v6;
  if (a1) {
    int v8 = 3;
  }
  else {
    int v8 = 2;
  }
  int v28 = v8;
  while (1)
  {
    sub_46FF18();
    char v10 = v9;
    unint64_t v12 = v11;
    if (v5)
    {
      unint64_t v13 = sub_470ADC(v5);
      BOOL v14 = v7 < v13;
      if (!v10)
      {
        if (v7 >= v13) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
    }
    else
    {
      if (!v9) {
        goto LABEL_22;
      }
      BOOL v14 = 0;
    }
    unint64_t v15 = sub_470ADC(v10);
    if (v12 >= v15 || !v14) {
      break;
    }
    uint64_t v17 = sub_470B40(v5, v7);
    if (v17 == sub_470B40(v10, v12)) {
      goto LABEL_22;
    }
LABEL_19:
    int v18 = *(_DWORD *)(sub_470B40(v5, v7) + 4);
    uint64_t v19 = (unsigned int *)sub_470B40(v5, v7);
    unint64_t v31 = *v19 | ((unint64_t)(v19[1] & 0x1FFFFFFF) << 32);
    size_t v32 = &v31;
    if ((v18 & 0x20000000) != 0)
    {
      BOOL v22 = sub_785870(a2, &v31, (uint64_t)&unk_20F06E0, (uint64_t **)&v32);
      LODWORD(v32) = 2;
      int v30 = sub_46CACC((uint64_t)v5, v7);
      char v29 = 0;
      sub_63957C((uint64_t)(v22 + 3), &v32, &v30, &v29);
      size_t v32 = &v31;
      int v21 = sub_785870(a2, &v31, (uint64_t)&unk_20F06E0, (uint64_t **)&v32);
      LODWORD(v32) = 0;
      int v30 = sub_470DAC((uint64_t)v5, v7);
    }
    else
    {
      int v20 = sub_785870(a2, &v31, (uint64_t)&unk_20F06E0, (uint64_t **)&v32);
      LODWORD(v32) = v28;
      int v30 = 1000000000 - sub_470DAC((uint64_t)v5, v7);
      char v29 = 0;
      sub_63957C((uint64_t)(v20 + 3), &v32, &v30, &v29);
      size_t v32 = &v31;
      int v21 = sub_785870(a2, &v31, (uint64_t)&unk_20F06E0, (uint64_t **)&v32);
      LODWORD(v32) = a1;
      int v30 = 1000000000 - sub_46CACC((uint64_t)v5, v7);
    }
    char v29 = 0;
    sub_63957C((uint64_t)(v21 + 3), &v32, &v30, &v29);
    ++v7;
  }
  if ((v14 ^ (v12 < v15))) {
    goto LABEL_19;
  }
LABEL_22:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v24 = i[3];
    size_t v25 = (unsigned int *)i[4];
    unint64_t v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - v24) >> 2));
    if (v25 == (unsigned int *)v24) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v26;
    }
    sub_7843F4(v24, v25, (uint64_t)&v32, v27, 1);
  }
}

void sub_783E98(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783EAC(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783EC0(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783ED4(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783EE8(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783EFC(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783F10(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783F24(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783F38(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783F4C(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783F60(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783F74(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_783F88(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_783F9C(int *a1, void *a2, unint64_t a3)
{
  unint64_t v6 = (unint64_t)*(unsigned __int8 *)(sub_46C8EC(a2, a3) + 38) << 48;
  unint64_t v7 = (void *)sub_46C8EC(a2, a3);
  uint64_t v9 = (unsigned __int16 *)(*v7 - *(int *)*v7);
  double v10 = 0.0;
  if (*v9 >= 9u)
  {
    uint64_t v11 = v9[4];
    if (v11)
    {
      LODWORD(v8) = *(_DWORD *)(*v7 + v11);
      double v10 = (double)v8;
    }
  }
  if (v6) {
    int v12 = 1000000000 - a1[1];
  }
  else {
    int v12 = *a1;
  }
  double v13 = v10 * ((double)(v12 - sub_46CACC((uint64_t)a2, a3)) / 1000000000.0);
  if (v13 >= 0.0)
  {
    if (v13 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v13 + v13) + 1;
      return (uint64_t)(double)(v14 >> 1);
    }
  }
  else if (v13 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v13 + v13);
    if (v14 >= 1) {
      --v14;
    }
    return (uint64_t)(double)(v14 >> 1);
  }
  return (uint64_t)v13;
}

uint64_t sub_7840B4(int *a1, void *a2, unint64_t a3)
{
  int v6 = *(_DWORD *)(sub_470B40(a2, a3) + 4);
  unint64_t v7 = *(int **)(sub_470B40(a2, a3) + 8);
  uint64_t v9 = (unsigned __int16 *)((char *)v7 - *v7);
  double v10 = 0.0;
  if (*v9 >= 9u)
  {
    uint64_t v11 = v9[4];
    if (v11)
    {
      LODWORD(v8) = *(int *)((char *)v7 + v11);
      double v10 = (double)v8;
    }
  }
  if ((v6 & 0x20000000) != 0) {
    int v12 = *a1;
  }
  else {
    int v12 = 1000000000 - a1[1];
  }
  double v13 = v10 * ((double)(v12 - sub_46CACC((uint64_t)a2, a3)) / 1000000000.0);
  if (v13 >= 0.0)
  {
    if (v13 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v13 + v13) + 1;
      return (uint64_t)(double)(v14 >> 1);
    }
  }
  else if (v13 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v13 + v13);
    if (v14 >= 1) {
      --v14;
    }
    return (uint64_t)(double)(v14 >> 1);
  }
  return (uint64_t)v13;
}

uint64_t sub_7841C8(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t v6 = (unint64_t)*(unsigned __int8 *)(sub_46C8EC(a2, a3) + 38) << 48;
  unint64_t v7 = (void *)sub_46C8EC(a2, a3);
  uint64_t v9 = (unsigned __int16 *)(*v7 - *(int *)*v7);
  double v10 = 0.0;
  if (*v9 >= 9u)
  {
    uint64_t v11 = v9[4];
    if (v11)
    {
      LODWORD(v8) = *(_DWORD *)(*v7 + v11);
      double v10 = (double)v8;
    }
  }
  if (v6) {
    int v12 = 1000000000 - *a1;
  }
  else {
    int v12 = a1[1];
  }
  double v13 = v10 * ((double)(v12 - sub_46CACC((uint64_t)a2, a3)) / 1000000000.0);
  if (v13 >= 0.0)
  {
    if (v13 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v13 + v13) + 1;
      return (uint64_t)(double)(v14 >> 1);
    }
  }
  else if (v13 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v13 + v13);
    if (v14 >= 1) {
      --v14;
    }
    return (uint64_t)(double)(v14 >> 1);
  }
  return (uint64_t)v13;
}

uint64_t sub_7842E0(_DWORD *a1, void *a2, unint64_t a3)
{
  int v6 = *(_DWORD *)(sub_470B40(a2, a3) + 4);
  unint64_t v7 = *(int **)(sub_470B40(a2, a3) + 8);
  uint64_t v9 = (unsigned __int16 *)((char *)v7 - *v7);
  double v10 = 0.0;
  if (*v9 >= 9u)
  {
    uint64_t v11 = v9[4];
    if (v11)
    {
      LODWORD(v8) = *(int *)((char *)v7 + v11);
      double v10 = (double)v8;
    }
  }
  if ((v6 & 0x20000000) != 0) {
    int v12 = a1[1];
  }
  else {
    int v12 = 1000000000 - *a1;
  }
  double v13 = v10 * ((double)(v12 - sub_46CACC((uint64_t)a2, a3)) / 1000000000.0);
  if (v13 >= 0.0)
  {
    if (v13 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v13 + v13) + 1;
      return (uint64_t)(double)(v14 >> 1);
    }
  }
  else if (v13 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v13 + v13);
    if (v14 >= 1) {
      --v14;
    }
    return (uint64_t)(double)(v14 >> 1);
  }
  return (uint64_t)v13;
}

uint64_t sub_7843F4(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  double v10 = (unsigned int *)result;
LABEL_2:
  uint64_t v11 = (unint64_t *)(a2 - 3);
  uint64_t v12 = (uint64_t)v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    double v10 = (unsigned int *)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)a2 - v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v12) >> 2);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v29 = *(_DWORD *)(v12 + 4);
          unsigned int v30 = *(a2 - 2);
          if (v30 < v29 || v30 == v29 && *(_DWORD *)v11 < *(_DWORD *)v12)
          {
            int v74 = *(_DWORD *)(v12 + 8);
            unint64_t v71 = *(void *)v12;
            unint64_t v31 = *v11;
            *(unsigned char *)(v12 + 8) = *((unsigned char *)a2 - 4);
            *(void *)uint64_t v12 = v31;
            *uint64_t v11 = v71;
            *((unsigned char *)a2 - 4) = v74;
          }
          break;
        case 3uLL:
          double result = sub_784A3C((unint64_t *)v12, (unint64_t *)(v12 + 12), (unint64_t *)(a2 - 3));
          break;
        case 4uLL:
          size_t v32 = (unint64_t *)(v12 + 12);
          uint64_t v33 = (unint64_t *)(v12 + 24);
          double result = sub_784A3C((unint64_t *)v12, (unint64_t *)(v12 + 12), (unint64_t *)(v12 + 24));
          unsigned int v34 = *(_DWORD *)(v12 + 28);
          unsigned int v35 = *(a2 - 2);
          if (v35 < v34 || v35 == v34 && *(_DWORD *)v11 < *(_DWORD *)v33)
          {
            char v36 = *(_DWORD *)(v12 + 32);
            unint64_t v37 = *v33;
            char v38 = *((unsigned char *)a2 - 4);
            *uint64_t v33 = *v11;
            *(unsigned char *)(v12 + 32) = v38;
            *uint64_t v11 = v37;
            *((unsigned char *)a2 - 4) = v36;
            unsigned int v39 = *(_DWORD *)(v12 + 16);
            unsigned int v40 = *(_DWORD *)(v12 + 28);
            if (v40 < v39 || v40 == v39 && *(_DWORD *)v33 < *(_DWORD *)v32)
            {
              char v41 = *(_DWORD *)(v12 + 20);
              unint64_t v42 = *v32;
              *size_t v32 = *v33;
              *(unsigned char *)(v12 + 20) = *(unsigned char *)(v12 + 32);
              *uint64_t v33 = v42;
              *(unsigned char *)(v12 + 32) = v41;
              unsigned int v43 = *(_DWORD *)(v12 + 4);
              unsigned int v44 = *(_DWORD *)(v12 + 16);
              if (v44 < v43 || v44 == v43 && *(_DWORD *)(v12 + 12) < *(_DWORD *)v12)
              {
                int v75 = *(_DWORD *)(v12 + 8);
                unint64_t v72 = *(void *)v12;
                *(void *)uint64_t v12 = *v32;
                *(unsigned char *)(v12 + 8) = *(unsigned char *)(v12 + 20);
                *size_t v32 = v72;
                *(unsigned char *)(v12 + 20) = v75;
              }
            }
          }
          break;
        case 5uLL:
          double result = sub_7852DC(v12, v12 + 12, v12 + 24, (unint64_t *)(v12 + 36), (unint64_t *)(a2 - 3));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 287)
    {
      uint64_t v45 = (unsigned int *)(v12 + 12);
      BOOL v47 = (unsigned int *)v12 == a2 || v45 == a2;
      if (a5)
      {
        if (v47) {
          return result;
        }
        uint64_t v48 = 0;
        uint64_t v49 = v12;
        while (2)
        {
          uint64_t v50 = v49;
          uint64_t v49 = (uint64_t)v45;
          unsigned int v51 = *(_DWORD *)(v50 + 4);
          unsigned int v52 = *(_DWORD *)(v50 + 16);
          if (v52 < v51)
          {
            int v53 = *(_DWORD *)v49;
            goto LABEL_53;
          }
          if (v52 == v51)
          {
            int v53 = *(_DWORD *)v49;
            if (*(_DWORD *)v49 < *(_DWORD *)v50)
            {
LABEL_53:
              int v54 = *(_DWORD *)(v50 + 20);
              *(void *)uint64_t v49 = *(void *)v50;
              *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
              uint64_t v55 = v12;
              if (v50 != v12)
              {
                uint64_t v56 = v48;
                while (1)
                {
                  uint64_t v57 = v12 + v56;
                  uint64_t v58 = (_DWORD *)(v12 + v56 - 12);
                  unsigned int v59 = *(_DWORD *)(v12 + v56 - 8);
                  if (v52 >= v59)
                  {
                    if (v52 != v59)
                    {
                      uint64_t v55 = v12 + v56;
                      goto LABEL_47;
                    }
                    if (v53 >= *v58) {
                      break;
                    }
                  }
                  v50 -= 12;
                  *(void *)uint64_t v57 = *(void *)v58;
                  *(unsigned char *)(v57 + 8) = *(unsigned char *)(v12 + v56 - 4);
                  v56 -= 12;
                  if (!v56)
                  {
                    uint64_t v55 = v12;
                    goto LABEL_47;
                  }
                }
                uint64_t v55 = v50;
              }
LABEL_47:
              *(_DWORD *)uint64_t v55 = v53;
              *(_DWORD *)(v55 + 4) = v52;
              *(unsigned char *)(v55 + 8) = v54;
            }
          }
          uint64_t v45 = (unsigned int *)(v49 + 12);
          v48 += 12;
          if ((unsigned int *)(v49 + 12) == a2) {
            return result;
          }
          continue;
        }
      }
      if (v47) {
        return result;
      }
      while (2)
      {
        BOOL v63 = v10;
        double v10 = v45;
        unsigned int v64 = v63[1];
        unsigned int v65 = v63[4];
        if (v65 >= v64)
        {
          if (v65 == v64)
          {
            signed int v66 = *v10;
            if ((int)*v10 < (int)*v63) {
              goto LABEL_82;
            }
          }
        }
        else
        {
          signed int v66 = *v10;
LABEL_82:
          unsigned int v67 = v63[5];
          do
          {
            do
            {
              unint64_t v68 = v63;
              *(void *)(v63 + 3) = *(void *)v63;
              *((unsigned char *)v63 + 20) = *((unsigned char *)v63 + 8);
              v63 -= 3;
              unsigned int v69 = *(v68 - 2);
            }
            while (v65 < v69);
          }
          while (v65 == v69 && v66 < (int)*(v68 - 3));
          *unint64_t v68 = v66;
          v68[1] = v65;
          *((unsigned char *)v68 + 8) = v67;
        }
        uint64_t v45 = v10 + 3;
        if (v10 + 3 == a2) {
          return result;
        }
        continue;
      }
    }
    if (v14 == 1) {
      break;
    }
    unint64_t v17 = v16 >> 1;
    unint64_t v18 = v12 + 12 * (v16 >> 1);
    if ((unint64_t)v15 < 0x601)
    {
      sub_784A3C((unint64_t *)v18, (unint64_t *)v12, (unint64_t *)(a2 - 3));
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_784A3C((unint64_t *)v12, (unint64_t *)v18, (unint64_t *)(a2 - 3));
      uint64_t v19 = 12 * v17;
      int v20 = (unint64_t *)(12 * v17 + v12 - 12);
      sub_784A3C((unint64_t *)(v12 + 12), v20, (unint64_t *)a2 - 3);
      int v21 = (unint64_t *)(v12 + 24);
      BOOL v22 = (unint64_t *)(v12 + 12 + v19);
      sub_784A3C(v21, v22, (unint64_t *)(a2 - 9));
      sub_784A3C(v20, (unint64_t *)v18, v22);
      unsigned int v73 = v10[2];
      uint64_t v70 = *(void *)v10;
      unint64_t v23 = *(void *)v18;
      *((unsigned char *)v10 + 8) = *(unsigned char *)(v18 + 8);
      *(void *)double v10 = v23;
      *(unsigned char *)(v18 + 8) = v73;
      *(void *)unint64_t v18 = v70;
      if (a5) {
        goto LABEL_15;
      }
    }
    unsigned int v24 = v10[1];
    unsigned int v25 = *(v10 - 2);
    if (v25 >= v24 && (v25 != v24 || (int)*(v10 - 3) >= (int)*v10))
    {
      double result = (uint64_t)sub_784BCC(v10, a2);
      uint64_t v12 = result;
      goto LABEL_20;
    }
LABEL_15:
    unint64_t v26 = (unsigned int *)sub_784D6C(v10, a2);
    if ((v27 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v28 = sub_784F6C((uint64_t)v10, v26);
    uint64_t v12 = (uint64_t)(v26 + 3);
    double result = sub_784F6C((uint64_t)(v26 + 3), a2);
    if (result)
    {
      a4 = -v14;
      a2 = v26;
      if (v28) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v28)
    {
LABEL_18:
      double result = sub_7843F4(v10, v26, a3, -v14, a5 & 1);
      uint64_t v12 = (uint64_t)(v26 + 3);
LABEL_20:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if ((unsigned int *)v12 != a2)
  {
    unint64_t v60 = (v16 - 2) >> 1;
    unint64_t v61 = v60 + 1;
    int v62 = (_DWORD *)(v12 + 12 * v60);
    do
    {
      sub_785538(v12, a3, v16, v62);
      v62 -= 3;
      --v61;
    }
    while (v61);
    return (uint64_t)sub_785698((char *)v12, (char *)a2);
  }
  return result;
}

uint64_t sub_784A3C(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unsigned int v3 = *((_DWORD *)a1 + 1);
  unsigned int v4 = *((_DWORD *)a2 + 1);
  if (v4 < v3 || v4 == v3 && *(_DWORD *)a2 < *(_DWORD *)a1)
  {
    unsigned int v5 = *((_DWORD *)a3 + 1);
    if (v5 < v4 || v5 == v4 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      int v6 = *((_DWORD *)a1 + 2);
      unint64_t v7 = *a1;
      char v8 = *((unsigned char *)a3 + 8);
      *a1 = *a3;
      *((unsigned char *)a1 + 8) = v8;
      *a3 = v7;
      *((unsigned char *)a3 + 8) = v6;
      return 1;
    }
    char v19 = *((_DWORD *)a1 + 2);
    unint64_t v20 = *a1;
    char v21 = *((unsigned char *)a2 + 8);
    *a1 = *a2;
    *((unsigned char *)a1 + 8) = v21;
    *a2 = v20;
    *((unsigned char *)a2 + 8) = v19;
    unint64_t v22 = HIDWORD(v20);
    unsigned int v23 = *((_DWORD *)a3 + 1);
    if (v23 < v22 || v23 == v22 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      int v24 = *((_DWORD *)a2 + 2);
      unint64_t v25 = *a2;
      char v26 = *((unsigned char *)a3 + 8);
      *a2 = *a3;
      *((unsigned char *)a2 + 8) = v26;
      *a3 = v25;
      *((unsigned char *)a3 + 8) = v24;
      return 2;
    }
  }
  else
  {
    unsigned int v10 = *((_DWORD *)a3 + 1);
    if (v10 >= v4 && (v10 != v4 || *(_DWORD *)a3 >= *(_DWORD *)a2)) {
      return 0;
    }
    char v11 = *((_DWORD *)a2 + 2);
    unint64_t v12 = *a2;
    char v13 = *((unsigned char *)a3 + 8);
    *a2 = *a3;
    *((unsigned char *)a2 + 8) = v13;
    *a3 = v12;
    *((unsigned char *)a3 + 8) = v11;
    unsigned int v14 = *((_DWORD *)a1 + 1);
    unsigned int v15 = *((_DWORD *)a2 + 1);
    if (v15 < v14 || v15 == v14 && *(_DWORD *)a2 < *(_DWORD *)a1)
    {
      int v16 = *((_DWORD *)a1 + 2);
      unint64_t v17 = *a1;
      char v18 = *((unsigned char *)a2 + 8);
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = v18;
      *a2 = v17;
      *((unsigned char *)a2 + 8) = v16;
      return 2;
    }
  }
  return 1;
}

unsigned int *sub_784BCC(unsigned int *a1, unsigned int *a2)
{
  int v2 = *a1;
  unsigned int v3 = a1[1];
  unsigned int v4 = *(a2 - 2);
  if (v3 < v4 || v3 == v4 && v2 < (int)*(a2 - 3))
  {
    unsigned int v5 = a1[4];
    if (v3 >= v5)
    {
      char v8 = a1 + 7;
      do
      {
        if (v3 == v5 && v2 < (int)*(v8 - 4)) {
          break;
        }
        unsigned int v9 = *v8;
        v8 += 3;
        unsigned int v5 = v9;
      }
      while (v3 >= v9);
      uint64_t i = v8 - 4;
    }
    else
    {
      uint64_t i = a1 + 3;
    }
  }
  else
  {
    for (uint64_t i = a1 + 3; i < a2; i += 3)
    {
      unsigned int v7 = i[1];
      if (v3 < v7 || v3 == v7 && v2 < (int)*i) {
        break;
      }
    }
  }
  if (i < a2)
  {
    for (double j = a2 - 5; v3 < v4 || v3 == v4 && v2 < (int)j[2]; j -= 3)
    {
      unsigned int v11 = *j;
      unsigned int v4 = v11;
    }
    a2 = j + 2;
  }
  unsigned int v12 = a1[2];
  while (i < a2)
  {
    unsigned int v22 = i[2];
    uint64_t v21 = *(void *)i;
    uint64_t v13 = *(void *)a2;
    *((unsigned char *)i + 8) = *((unsigned char *)a2 + 8);
    *(void *)uint64_t i = v13;
    *((unsigned char *)a2 + 8) = v22;
    *(void *)a2 = v21;
    unsigned int v14 = i[4];
    if (v3 >= v14)
    {
      unsigned int v15 = i + 7;
      do
      {
        if (v3 == v14 && v2 < (int)*(v15 - 4)) {
          break;
        }
        unsigned int v16 = *v15;
        v15 += 3;
        unsigned int v14 = v16;
      }
      while (v3 >= v16);
      uint64_t i = v15 - 4;
    }
    else
    {
      i += 3;
    }
    unint64_t v17 = a2 - 3;
    do
    {
      do
      {
        a2 = v17;
        unsigned int v18 = v17[1];
        v17 -= 3;
      }
      while (v3 < v18);
    }
    while (v3 == v18 && v2 < (int)*a2);
  }
  if (i - 3 != a1)
  {
    uint64_t v19 = *(void *)(i - 3);
    *((unsigned char *)a1 + 8) = *((unsigned char *)i - 4);
    *(void *)a1 = v19;
  }
  *(i - 3) = v2;
  *(i - 2) = v3;
  *((unsigned char *)i - 4) = v12;
  return i;
}

unint64_t sub_784D6C(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  unsigned int v4 = a1[1];
  int v5 = a1[2];
  while (1)
  {
    unsigned int v6 = a1[v2 + 4];
    if (v6 >= v4 && (v6 != v4 || a1[v2 + 3] >= v3)) {
      break;
    }
    v2 += 3;
  }
  unint64_t v7 = (unint64_t)&a1[v2 + 3];
  if (v2 * 4)
  {
    unsigned int v8 = *(a2 - 2);
    if (v8 < v4)
    {
      a2 -= 3;
      unint64_t v9 = (unint64_t)&a1[v2 + 3];
      if (v7 >= (unint64_t)a2) {
        goto LABEL_32;
      }
LABEL_20:
      unsigned int v14 = a2;
      do
      {
        while (1)
        {
          int v28 = *(_DWORD *)(v9 + 8);
          uint64_t v27 = *(void *)v9;
          uint64_t v15 = *(void *)v14;
          *(unsigned char *)(v9 + 8) = *((unsigned char *)v14 + 8);
          *(void *)unint64_t v9 = v15;
          *((unsigned char *)v14 + 8) = v28;
          *(void *)unsigned int v14 = v27;
          unint64_t v16 = v9 + 12;
          do
          {
            do
            {
              unint64_t v9 = v16;
              unsigned int v17 = *(_DWORD *)(v16 + 4);
              v16 += 12;
            }
            while (v17 < v4);
          }
          while (v17 == v4 && *(_DWORD *)v9 < v3);
          unsigned int v18 = *(v14 - 2);
          if (v18 >= v4) {
            break;
          }
          v14 -= 3;
          if (v9 >= (unint64_t)v14) {
            goto LABEL_32;
          }
        }
        uint64_t v19 = v14 - 5;
        do
        {
          if (v18 == v4 && (int)v19[2] < v3) {
            break;
          }
          unsigned int v20 = *v19;
          v19 -= 3;
          unsigned int v18 = v20;
        }
        while (v20 >= v4);
        unsigned int v14 = v19 + 2;
      }
      while (v9 < (unint64_t)v14);
      goto LABEL_32;
    }
    unsigned int v12 = a2 - 5;
    do
    {
      if (v8 == v4 && (int)v12[2] < v3) {
        break;
      }
      unsigned int v13 = *v12;
      v12 -= 3;
      unsigned int v8 = v13;
    }
    while (v13 >= v4);
    a2 = v12 + 2;
LABEL_19:
    unint64_t v9 = v7;
    if (v7 >= (unint64_t)a2) {
      goto LABEL_32;
    }
    goto LABEL_20;
  }
  if (v7 >= (unint64_t)a2) {
    goto LABEL_19;
  }
  unint64_t v10 = (unint64_t)(a2 - 3);
  unsigned int v11 = *(a2 - 2);
  if (v11 < v4)
  {
LABEL_12:
    a2 = (_DWORD *)v10;
    unint64_t v9 = v7;
    if (v7 >= v10) {
      goto LABEL_32;
    }
    goto LABEL_20;
  }
  unsigned int v23 = a2 - 5;
  do
  {
    char v26 = v23 + 2;
    if (v11 != v4)
    {
      if (v7 >= (unint64_t)v26) {
        goto LABEL_12;
      }
      goto LABEL_40;
    }
    if (*v26 < v3 || v7 >= (unint64_t)v26) {
      break;
    }
LABEL_40:
    v10 -= 12;
    unsigned int v25 = *v23;
    v23 -= 3;
    unsigned int v11 = v25;
  }
  while (v25 >= v4);
  a2 = v23 + 2;
  unint64_t v9 = v7;
  if (v7 < (unint64_t)a2) {
    goto LABEL_20;
  }
LABEL_32:
  if ((_DWORD *)(v9 - 12) != a1)
  {
    uint64_t v21 = *(void *)(v9 - 12);
    *((unsigned char *)a1 + 8) = *(unsigned char *)(v9 - 4);
    *(void *)a1 = v21;
  }
  *(_DWORD *)(v9 - 12) = v3;
  *(_DWORD *)(v9 - 8) = v4;
  *(unsigned char *)(v9 - 4) = v5;
  return v9 - 12;
}

BOOL sub_784F6C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v19 = (unint64_t *)(a2 - 3);
      unsigned int v20 = *(_DWORD *)(a1 + 4);
      unsigned int v21 = *(a2 - 2);
      if (v21 < v20 || v21 == v20 && *(_DWORD *)v19 < *(_DWORD *)a1)
      {
        int v22 = *(_DWORD *)(a1 + 8);
        unint64_t v23 = *(void *)a1;
        char v24 = *((unsigned char *)a2 - 4);
        *(void *)a1 = *v19;
        *(unsigned char *)(a1 + 8) = v24;
        unint64_t *v19 = v23;
        *((unsigned char *)a2 - 4) = v22;
      }
      return result;
    case 3uLL:
      sub_784A3C((unint64_t *)a1, (unint64_t *)(a1 + 12), (unint64_t *)(a2 - 3));
      return 1;
    case 4uLL:
      unsigned int v25 = (unint64_t *)(a1 + 12);
      char v26 = (unint64_t *)(a1 + 24);
      uint64_t v27 = (unint64_t *)(a2 - 3);
      sub_784A3C((unint64_t *)a1, (unint64_t *)(a1 + 12), (unint64_t *)(a1 + 24));
      unsigned int v28 = *(_DWORD *)(a1 + 28);
      unsigned int v29 = *(a2 - 2);
      if (v29 < v28 || v29 == v28 && *(_DWORD *)v27 < *(_DWORD *)v26)
      {
        char v30 = *(_DWORD *)(a1 + 32);
        unint64_t v31 = *v26;
        char v32 = *((unsigned char *)a2 - 4);
        unint64_t *v26 = *v27;
        *(unsigned char *)(a1 + 32) = v32;
        *uint64_t v27 = v31;
        *((unsigned char *)a2 - 4) = v30;
        unsigned int v33 = *(_DWORD *)(a1 + 16);
        unsigned int v34 = *(_DWORD *)(a1 + 28);
        if (v34 < v33 || v34 == v33 && *(_DWORD *)v26 < *(_DWORD *)v25)
        {
          char v35 = *(_DWORD *)(a1 + 20);
          unint64_t v36 = *v25;
          *unsigned int v25 = *v26;
          *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 32);
          unint64_t *v26 = v36;
          *(unsigned char *)(a1 + 32) = v35;
          unsigned int v37 = *(_DWORD *)(a1 + 4);
          unsigned int v38 = *(_DWORD *)(a1 + 16);
          if (v38 < v37 || v38 == v37 && *(_DWORD *)(a1 + 12) < *(_DWORD *)a1)
          {
            int v39 = *(_DWORD *)(a1 + 8);
            unint64_t v40 = *(void *)a1;
            *(void *)a1 = *v25;
            *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 20);
            *unsigned int v25 = v40;
            *(unsigned char *)(a1 + 20) = v39;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_7852DC(a1, a1 + 12, a1 + 24, (unint64_t *)(a1 + 36), (unint64_t *)(a2 - 3));
      return 1;
    default:
      unsigned int v6 = (_DWORD *)(a1 + 24);
      sub_784A3C((unint64_t *)a1, (unint64_t *)(a1 + 12), (unint64_t *)(a1 + 24));
      unint64_t v7 = (_DWORD *)(a1 + 36);
      if ((_DWORD *)(a1 + 36) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    unsigned int v11 = v6[1];
    unsigned int v12 = v7[1];
    if (v12 < v11) {
      break;
    }
    if (v12 == v11)
    {
      int v13 = *v7;
      if (*v7 < *v6) {
        goto LABEL_10;
      }
    }
LABEL_7:
    unsigned int v6 = v7;
    v8 += 12;
    v7 += 3;
    if (v7 == a2) {
      return 1;
    }
  }
  int v13 = *v7;
LABEL_10:
  int v14 = v7[2];
  *(void *)unint64_t v7 = *(void *)v6;
  *((unsigned char *)v7 + 8) = *((unsigned char *)v6 + 8);
  uint64_t v10 = a1;
  if (v6 != (_DWORD *)a1)
  {
    uint64_t v15 = v8;
    while (1)
    {
      uint64_t v16 = a1 + v15;
      unsigned int v17 = (_DWORD *)(a1 + v15 + 12);
      unsigned int v18 = *(_DWORD *)(a1 + v15 + 16);
      if (v12 >= v18)
      {
        if (v12 != v18)
        {
          uint64_t v10 = (uint64_t)v6;
          goto LABEL_6;
        }
        if (v13 >= *v17) {
          break;
        }
      }
      v6 -= 3;
      *(void *)(v16 + 24) = *(void *)v17;
      *(unsigned char *)(v16 + 32) = *(unsigned char *)(a1 + v15 + 20);
      v15 -= 12;
      if (v15 == -24)
      {
        uint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = a1 + v15 + 24;
  }
LABEL_6:
  *(_DWORD *)uint64_t v10 = v13;
  *(_DWORD *)(v10 + 4) = v12;
  *(unsigned char *)(v10 + 8) = v14;
  if (++v9 != 8) {
    goto LABEL_7;
  }
  return v7 + 3 == a2;
}

uint64_t sub_7852DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_784A3C((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unsigned int v11 = *(_DWORD *)(a3 + 4);
  unsigned int v12 = *((_DWORD *)a4 + 1);
  if (v12 < v11 || v12 == v11 && *(_DWORD *)a4 < *(_DWORD *)a3)
  {
    char v13 = *(_DWORD *)(a3 + 8);
    unint64_t v14 = *(void *)a3;
    char v15 = *((unsigned char *)a4 + 8);
    *(void *)a3 = *a4;
    *(unsigned char *)(a3 + 8) = v15;
    *a4 = v14;
    *((unsigned char *)a4 + 8) = v13;
    unsigned int v16 = *(_DWORD *)(a2 + 4);
    unsigned int v17 = *(_DWORD *)(a3 + 4);
    if (v17 < v16 || v17 == v16 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      char v18 = *(_DWORD *)(a2 + 8);
      unint64_t v19 = *(void *)a2;
      char v20 = *(unsigned char *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *(unsigned char *)(a2 + 8) = v20;
      *(void *)a3 = v19;
      *(unsigned char *)(a3 + 8) = v18;
      unsigned int v21 = *(_DWORD *)(a1 + 4);
      unsigned int v22 = *(_DWORD *)(a2 + 4);
      if (v22 < v21 || v22 == v21 && *(_DWORD *)a2 < *(_DWORD *)a1)
      {
        int v23 = *(_DWORD *)(a1 + 8);
        unint64_t v24 = *(void *)a1;
        char v25 = *(unsigned char *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v25;
        *(void *)a2 = v24;
        *(unsigned char *)(a2 + 8) = v23;
      }
    }
  }
  unsigned int v26 = *((_DWORD *)a4 + 1);
  unsigned int v27 = *((_DWORD *)a5 + 1);
  if (v27 < v26 || v27 == v26 && *(_DWORD *)a5 < *(_DWORD *)a4)
  {
    char v28 = *((_DWORD *)a4 + 2);
    unint64_t v29 = *a4;
    char v30 = *((unsigned char *)a5 + 8);
    *a4 = *a5;
    *((unsigned char *)a4 + 8) = v30;
    *a5 = v29;
    *((unsigned char *)a5 + 8) = v28;
    unsigned int v31 = *(_DWORD *)(a3 + 4);
    unsigned int v32 = *((_DWORD *)a4 + 1);
    if (v32 < v31 || v32 == v31 && *(_DWORD *)a4 < *(_DWORD *)a3)
    {
      char v33 = *(_DWORD *)(a3 + 8);
      unint64_t v34 = *(void *)a3;
      char v35 = *((unsigned char *)a4 + 8);
      *(void *)a3 = *a4;
      *(unsigned char *)(a3 + 8) = v35;
      *a4 = v34;
      *((unsigned char *)a4 + 8) = v33;
      unsigned int v36 = *(_DWORD *)(a2 + 4);
      unsigned int v37 = *(_DWORD *)(a3 + 4);
      if (v37 < v36 || v37 == v36 && *(_DWORD *)a3 < *(_DWORD *)a2)
      {
        char v38 = *(_DWORD *)(a2 + 8);
        unint64_t v39 = *(void *)a2;
        char v40 = *(unsigned char *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *(unsigned char *)(a2 + 8) = v40;
        *(void *)a3 = v39;
        *(unsigned char *)(a3 + 8) = v38;
        unsigned int v41 = *(_DWORD *)(a1 + 4);
        unsigned int v42 = *(_DWORD *)(a2 + 4);
        if (v42 < v41 || v42 == v41 && *(_DWORD *)a2 < *(_DWORD *)a1)
        {
          int v43 = *(_DWORD *)(a1 + 8);
          unint64_t v44 = *(void *)a1;
          char v45 = *(unsigned char *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = v45;
          *(void *)a2 = v44;
          *(unsigned char *)(a2 + 8) = v43;
        }
      }
    }
  }
  return result;
}

uint64_t sub_785538(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      unsigned int v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        unsigned int v7 = *((_DWORD *)v6 + 4);
        unsigned int v8 = *(_DWORD *)(result + 12 * v5 + 4);
        if (v8 < v7 || v8 == v7 && *(_DWORD *)v6 < *((_DWORD *)v6 + 3))
        {
          unsigned int v6 = (uint64_t *)((char *)v6 + 12);
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      unsigned int v9 = a4[1];
      unsigned int v10 = *((_DWORD *)v6 + 1);
      BOOL v11 = v10 == v9;
      if (v10 >= v9)
      {
        int v12 = *a4;
        if (!v11 || *(_DWORD *)v6 >= v12)
        {
          int v13 = a4[2];
          char v14 = *((unsigned char *)v6 + 8);
          *(void *)a4 = *v6;
          *((unsigned char *)a4 + 8) = v14;
          if (v4 >= v5)
          {
            while (1)
            {
              uint64_t v17 = 2 * v5;
              uint64_t v5 = (2 * v5) | 1;
              char v15 = (uint64_t *)(result + 12 * v5);
              uint64_t v18 = v17 + 2;
              if (v18 < a3)
              {
                unsigned int v19 = *((_DWORD *)v15 + 4);
                unsigned int v20 = *(_DWORD *)(result + 12 * v5 + 4);
                if (v20 < v19 || v20 == v19 && *(_DWORD *)v15 < *((_DWORD *)v15 + 3))
                {
                  char v15 = (uint64_t *)((char *)v15 + 12);
                  uint64_t v5 = v18;
                }
              }
              unsigned int v21 = *((_DWORD *)v15 + 1);
              if (v21 < v9 || v21 == v9 && *(_DWORD *)v15 < v12) {
                break;
              }
              uint64_t v16 = *v15;
              *((unsigned char *)v6 + 8) = *((unsigned char *)v15 + 8);
              uint64_t *v6 = v16;
              unsigned int v6 = v15;
              if (v4 < v5) {
                goto LABEL_14;
              }
            }
          }
          char v15 = v6;
LABEL_14:
          *(_DWORD *)char v15 = v12;
          *((_DWORD *)v15 + 1) = v9;
          *((unsigned char *)v15 + 8) = v13;
        }
      }
    }
  }
  return result;
}

char *sub_785698(char *result, char *a2)
{
  if (a2 - result >= 13)
  {
    int64_t v2 = (a2 - result) / 0xCuLL;
    do
    {
      uint64_t v4 = 0;
      uint64_t v27 = *(void *)result;
      int v28 = *((_DWORD *)result + 2);
      uint64_t v5 = result;
      do
      {
        unsigned int v7 = v5;
        uint64_t v8 = v4 + 1;
        v5 += 12 * v4 + 12;
        uint64_t v9 = 2 * v4;
        uint64_t v4 = (2 * v4) | 1;
        int64_t v10 = v9 + 2;
        if (v10 < v2)
        {
          unsigned int v11 = *((_DWORD *)v5 + 4);
          unsigned int v12 = *(_DWORD *)&v7[12 * v8 + 4];
          if (v12 < v11 || v12 == v11 && *(_DWORD *)v5 < *((_DWORD *)v5 + 3))
          {
            v5 += 12;
            uint64_t v4 = v10;
          }
        }
        uint64_t v6 = *(void *)v5;
        v7[8] = v5[8];
        *(void *)unsigned int v7 = v6;
      }
      while (v4 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 12;
      if (v5 == a2)
      {
        v5[8] = v28;
        *(void *)uint64_t v5 = v27;
      }
      else
      {
        uint64_t v13 = *(void *)a2;
        v5[8] = a2[8];
        *(void *)uint64_t v5 = v13;
        *(void *)a2 = v27;
        a2[8] = v28;
        uint64_t v14 = v5 - result + 12;
        if (v14 >= 13)
        {
          unint64_t v15 = v14 / 0xCuLL - 2;
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = &result[12 * (v15 >> 1)];
          unsigned int v18 = *((_DWORD *)v5 + 1);
          unsigned int v19 = *((_DWORD *)v17 + 1);
          if (v19 < v18)
          {
            int v20 = *(_DWORD *)v5;
LABEL_17:
            int v21 = *((_DWORD *)v5 + 2);
            char v22 = v17[8];
            *(void *)uint64_t v5 = *(void *)v17;
            v5[8] = v22;
            if (v15 >= 2)
            {
              while (1)
              {
                unint64_t v25 = v16 - 1;
                unint64_t v16 = (v16 - 1) >> 1;
                int v23 = &result[12 * v16];
                unsigned int v26 = *((_DWORD *)v23 + 1);
                if (v26 >= v18 && (v26 != v18 || *(_DWORD *)v23 >= v20)) {
                  break;
                }
                uint64_t v24 = *(void *)v23;
                v17[8] = v23[8];
                *(void *)uint64_t v17 = v24;
                uint64_t v17 = &result[12 * v16];
                if (v25 <= 1) {
                  goto LABEL_19;
                }
              }
            }
            int v23 = v17;
LABEL_19:
            *(_DWORD *)int v23 = v20;
            *((_DWORD *)v23 + 1) = v18;
            v23[8] = v21;
            continue;
          }
          if (v19 == v18)
          {
            int v20 = *(_DWORD *)v5;
            if (*(_DWORD *)v17 < *(_DWORD *)v5) {
              goto LABEL_17;
            }
          }
        }
      }
    }
    while (v2-- > 2);
  }
  return result;
}

void *sub_785870(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == v7 && *((_DWORD *)v14 + 5) == HIDWORD(v7)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  unsigned int v19 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v20 = **a4;
  v14[4] = 0;
  v14[5] = 0;
  v14[2] = v20;
  v14[3] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v14 = *v24;
LABEL_69:
      *uint64_t v24 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v10));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *v19;
  void *v19 = v14;
  *(void *)(v23 + 8 * v4) = v19;
  if (*v14)
  {
    unint64_t v33 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_785BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_785BE8()
{
  byte_25B45A7 = 1;
  word_25B4590 = 65;
  byte_25B45BF = 1;
  word_25B45A8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25B45F0 = 0u;
  *(_OWORD *)&qword_25B4600 = 0u;
  dword_25B4610 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B45F0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25B45F0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25B45F0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25B45F0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25B45C8 = 0;
  qword_25B45D0 = 0;
  qword_25B45C0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25B45C0 = (uint64_t)v0;
  qword_25B45C8 = (uint64_t)(v0 + 9);
  qword_25B45D0 = (uint64_t)(v0 + 9);
  qword_25B45D8 = 0;
  qword_25B45E0 = 0;
  unk_25B45E8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25B45E0 = (uint64_t)(v1 + 9);
  unk_25B45E8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25B45D8 = (uint64_t)v1;
  return result;
}

void sub_785E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25B4600) {
    sub_20AADB0((void **)qword_25B4600);
  }
  unsigned int v37 = (void *)xmmword_25B45F0;
  *(void *)&xmmword_25B45F0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_785EC4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  unsigned int v18 = a1[1];
  if (*a1 != v18)
  {
    do
    {
      uint64_t v2 = nullsub_1(v1);
      char v4 = *(void **)v2;
      int v3 = *(void **)(v2 + 8);
      unsigned int v19 = v3;
      while (v4 != v3)
      {
        uint64_t v20 = v4;
        sub_786530(v4, (uint64_t)&v52);
        int v5 = (long long *)v53;
        if (v53)
        {
          while (1)
          {
            sub_4AA8E0((char *)v21, v5 + 1);
            char v7 = (unsigned char *)*((void *)v5 + 21);
            uint64_t v6 = (unsigned char *)*((void *)v5 + 22);
            int64_t v8 = v6 - v7;
            if (v6 == v7)
            {
              char v10 = 0;
              unint64_t v9 = 0;
              if ((SHIBYTE(v22) & 0x80000000) == 0) {
                goto LABEL_13;
              }
            }
            else
            {
              if (v8 < 0) {
                sub_2E00();
              }
              unint64_t v9 = (char *)operator new(v6 - v7);
              char v10 = &v9[16 * (v8 >> 4)];
              memcpy(v9, v7, v8);
              if ((SHIBYTE(v22) & 0x80000000) == 0)
              {
LABEL_13:
                *(_OWORD *)std::string __dst = *(_OWORD *)v21;
                uint64_t v36 = v22;
                goto LABEL_16;
              }
            }
            sub_4200(__dst, v21[0], (unint64_t)v21[1]);
LABEL_16:
            uint64_t v37 = v23;
            if (SHIBYTE(v25) < 0)
            {
              sub_4200(&v38, (void *)v24, *((unint64_t *)&v24 + 1));
            }
            else
            {
              long long v38 = v24;
              uint64_t v39 = v25;
            }
            uint64_t v40 = v26;
            int v41 = v27;
            if (SHIBYTE(v29) < 0)
            {
              sub_4200(&v42, (void *)v28, *((unint64_t *)&v28 + 1));
            }
            else
            {
              long long v42 = v28;
              uint64_t v43 = v29;
            }
            if (SHIBYTE(v31) < 0)
            {
              sub_4200(&v44, (void *)v30, *((unint64_t *)&v30 + 1));
            }
            else
            {
              long long v44 = v30;
              uint64_t v45 = v31;
            }
            int v46 = v32;
            if (SHIBYTE(v34) < 0)
            {
              sub_4200(&v47, (void *)v33, *((unint64_t *)&v33 + 1));
            }
            else
            {
              long long v47 = v33;
              uint64_t v48 = v34;
            }
            long long __p = 0;
            uint64_t v50 = 0;
            unsigned int v51 = 0;
            int64_t v11 = v10 - v9;
            if (v10 != v9)
            {
              if (v11 < 0) {
                sub_2E00();
              }
              uint8x8_t v12 = (char *)operator new(v10 - v9);
              char v13 = &v12[16 * (v11 >> 4)];
              long long __p = v12;
              unsigned int v51 = v13;
              memcpy(v12, v9, v11);
              uint64_t v50 = v13;
            }
            sub_64A5F0(v1, (uint64_t)__dst);
            if (__p)
            {
              uint64_t v50 = __p;
              operator delete(__p);
            }
            if (SHIBYTE(v48) < 0)
            {
              operator delete((void *)v47);
              if ((SHIBYTE(v45) & 0x80000000) == 0)
              {
LABEL_35:
                if ((SHIBYTE(v43) & 0x80000000) == 0) {
                  goto LABEL_36;
                }
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(v45) & 0x80000000) == 0)
            {
              goto LABEL_35;
            }
            operator delete((void *)v44);
            if ((SHIBYTE(v43) & 0x80000000) == 0)
            {
LABEL_36:
              if ((SHIBYTE(v39) & 0x80000000) == 0) {
                goto LABEL_37;
              }
              goto LABEL_49;
            }
LABEL_48:
            operator delete((void *)v42);
            if ((SHIBYTE(v39) & 0x80000000) == 0)
            {
LABEL_37:
              if ((SHIBYTE(v36) & 0x80000000) == 0) {
                goto LABEL_38;
              }
              goto LABEL_50;
            }
LABEL_49:
            operator delete((void *)v38);
            if ((SHIBYTE(v36) & 0x80000000) == 0)
            {
LABEL_38:
              if (!v9) {
                goto LABEL_40;
              }
LABEL_39:
              operator delete(v9);
              goto LABEL_40;
            }
LABEL_50:
            operator delete(__dst[0]);
            if (v9) {
              goto LABEL_39;
            }
LABEL_40:
            if (SHIBYTE(v34) < 0)
            {
              operator delete((void *)v33);
              if ((SHIBYTE(v31) & 0x80000000) == 0)
              {
LABEL_42:
                if ((SHIBYTE(v29) & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_54;
              }
            }
            else if ((SHIBYTE(v31) & 0x80000000) == 0)
            {
              goto LABEL_42;
            }
            operator delete((void *)v30);
            if ((SHIBYTE(v29) & 0x80000000) == 0)
            {
LABEL_43:
              if ((SHIBYTE(v25) & 0x80000000) == 0) {
                goto LABEL_44;
              }
              goto LABEL_55;
            }
LABEL_54:
            operator delete((void *)v28);
            if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
LABEL_44:
              if (SHIBYTE(v22) < 0) {
                goto LABEL_56;
              }
              goto LABEL_9;
            }
LABEL_55:
            operator delete((void *)v24);
            if (SHIBYTE(v22) < 0) {
LABEL_56:
            }
              operator delete(v21[0]);
LABEL_9:
            int v5 = *(long long **)v5;
            if (!v5)
            {
              int v14 = v53;
              if (!v53) {
                break;
              }
LABEL_61:
              unint64_t v16 = *(char **)v14;
              uint64_t v17 = (void *)*((void *)v14 + 21);
              if (v17)
              {
                *((void *)v14 + 22) = v17;
                operator delete(v17);
              }
              if (v14[167] < 0)
              {
                operator delete(*((void **)v14 + 18));
                if (v14[135] < 0) {
                  goto LABEL_70;
                }
LABEL_65:
                if ((v14[111] & 0x80000000) == 0) {
                  goto LABEL_66;
                }
LABEL_71:
                operator delete(*((void **)v14 + 11));
                if (v14[71] < 0) {
                  goto LABEL_72;
                }
LABEL_67:
                if (v14[39] < 0) {
LABEL_73:
                }
                  operator delete(*((void **)v14 + 2));
              }
              else
              {
                if ((v14[135] & 0x80000000) == 0) {
                  goto LABEL_65;
                }
LABEL_70:
                operator delete(*((void **)v14 + 14));
                if (v14[111] < 0) {
                  goto LABEL_71;
                }
LABEL_66:
                if ((v14[71] & 0x80000000) == 0) {
                  goto LABEL_67;
                }
LABEL_72:
                operator delete(*((void **)v14 + 6));
                if (v14[39] < 0) {
                  goto LABEL_73;
                }
              }
              operator delete(v14);
              int v14 = v16;
              if (!v16) {
                break;
              }
              goto LABEL_61;
            }
          }
        }
        unint64_t v15 = v52;
        unsigned int v52 = 0;
        if (v15) {
          operator delete(v15);
        }
        char v4 = v20 + 1541;
        int v3 = v19;
      }
      v1 += 945;
    }
    while (v1 != v18);
  }
}

void sub_786340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
  {
    operator delete(__p);
    if (!v61) {
      goto LABEL_6;
    }
  }
  else if (!v61)
  {
LABEL_6:
    if (a55 < 0)
    {
      operator delete(a50);
      if ((a48 & 0x80000000) == 0)
      {
LABEL_8:
        if ((a42 & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_18;
      }
    }
    else if ((a48 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(a43);
    if ((a42 & 0x80000000) == 0)
    {
LABEL_9:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(a37);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_10:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(a29);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_11:
      unsigned int v64 = *(void **)(v62 - 112);
      if (v64) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
LABEL_20:
    operator delete(a22);
    unsigned int v64 = *(void **)(v62 - 112);
    if (v64)
    {
      do
      {
LABEL_12:
        unsigned int v65 = (void *)*v64;
        sub_7895C8((uint64_t)(v64 + 2));
        operator delete(v64);
        unsigned int v64 = v65;
      }
      while (v65);
    }
LABEL_13:
    signed int v66 = *(void **)(v62 - 128);
    *(void *)(v62 - 128) = 0;
    if (v66) {
      operator delete(v66);
    }
    _Unwind_Resume(a1);
  }
  operator delete(v61);
  goto LABEL_6;
}

void sub_786520()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x7864B4);
  }
  JUMPOUT(0x786498);
}

void sub_786530(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_7833A0(0, (uint64_t)v60);
  sub_78818C(a1, (uint64_t)v59);
  sub_46B058();
  char v4 = v3;
  unint64_t v6 = v5;
  for (uint64_t i = 0; ; i += sub_46CCC8(v4, v6++, *(double *)&v17))
  {
    sub_46B060();
    int64_t v8 = v7;
    unint64_t v10 = v9;
    if (v4)
    {
      unint64_t v11 = sub_46C760(v4);
      BOOL v12 = v6 < v11;
      if (!v8)
      {
        if (v6 >= v11) {
          goto LABEL_56;
        }
        goto LABEL_15;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_56;
      }
      BOOL v12 = 0;
    }
    unint64_t v13 = sub_46C760(v8);
    if (v10 >= v13 || !v12) {
      break;
    }
    uint64_t v15 = sub_46C8EC(v4, v6);
    if (v15 == sub_46C8EC(v8, v10)) {
      goto LABEL_56;
    }
LABEL_15:
    uint64_t v16 = sub_46C8EC(v4, v6);
    unint64_t v58 = *(unsigned int *)(v16 + 32) | ((unint64_t)*(unsigned __int16 *)(v16 + 36) << 32);
    if (sub_36F918(v59, &v58))
    {
      __dst[0] = &v58;
      unsigned int v18 = sub_785870((uint64_t)v60, &v58, (uint64_t)&unk_20F06E0, (uint64_t **)__dst);
      sub_788398(v4, v6, v18 + 3, (uint64_t)&v56);
      unsigned int v19 = v56;
      uint64_t v43 = v57;
      if (v56 != v57)
      {
        unint64_t v45 = v6;
        while (1)
        {
          v62[0] = (long long *)&v58;
          uint64_t v20 = sub_788A9C((uint64_t)v59, &v58, (uint64_t)&unk_20F06E0, (void **)v62);
          sub_4AA8E0((char *)__dst, (long long *)(v20 + 3));
          v62[0] = (long long *)__dst;
          float v21 = sub_788E64(a2, (unsigned __int8 *)__dst, (uint64_t)&unk_20F06E0, v62);
          uint64_t v22 = sub_783F9C(v19, v4, v45) + i;
          uint64_t v23 = sub_7841C8(v19, v4, v45) + i;
          uint64_t v24 = v21[21];
          unint64_t v25 = v21[22];
          if (v24 != v25 && *(void *)(v25 - 8) == v22) {
            break;
          }
          unint64_t v26 = v21[23];
          if (v25 < v26)
          {
            sub_2F99CC((void *)v21[22], v22, v23);
            v21[22] = v25 + 16;
            v21[22] = v25 + 16;
            if ((v55 & 0x80000000) == 0) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }
          uint64_t v27 = (uint64_t)(v25 - v24) >> 4;
          if ((unint64_t)(v27 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v28 = v26 - v24;
          uint64_t v29 = v28 >> 3;
          if (v28 >> 3 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            if (v30 >> 60) {
              sub_188D718();
            }
            uint64_t v31 = operator new(16 * v30);
          }
          else
          {
            uint64_t v31 = 0;
          }
          int v32 = sub_2F99CC(&v31[2 * v27], v22, v23);
          uint64_t v34 = (char *)v21[21];
          long long v33 = (char *)v21[22];
          char v35 = v32;
          if (v33 != v34)
          {
            do
            {
              long long v17 = *((_OWORD *)v33 - 1);
              *((_OWORD *)v35 - 1) = v17;
              v35 -= 2;
              v33 -= 16;
            }
            while (v33 != v34);
            long long v33 = (char *)v21[21];
          }
          uint64_t v36 = v32 + 2;
          v21[21] = v35;
          v21[22] = v32 + 2;
          v21[23] = &v31[2 * v30];
          if (v33) {
            operator delete(v33);
          }
          v21[22] = v36;
          if (v55 < 0) {
            goto LABEL_25;
          }
LABEL_26:
          if (v53 < 0)
          {
            operator delete(v52);
            if ((v51 & 0x80000000) == 0)
            {
LABEL_28:
              if ((v49 & 0x80000000) == 0) {
                goto LABEL_29;
              }
              goto LABEL_33;
            }
          }
          else if ((v51 & 0x80000000) == 0)
          {
            goto LABEL_28;
          }
          operator delete(v50);
          if ((v49 & 0x80000000) == 0)
          {
LABEL_29:
            if (v47 < 0) {
              goto LABEL_34;
            }
            goto LABEL_18;
          }
LABEL_33:
          operator delete(v48);
          if (v47 < 0) {
LABEL_34:
          }
            operator delete(__dst[0]);
LABEL_18:
          v19 += 2;
          if (v19 == v43)
          {
            unsigned int v19 = v56;
            unint64_t v6 = v45;
            goto LABEL_53;
          }
        }
        *(void *)(v25 - 8) = v23;
        if ((v55 & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(__p);
        goto LABEL_26;
      }
LABEL_53:
      if (v19)
      {
        uint64_t v57 = v19;
        operator delete(v19);
      }
    }
  }
  if ((v12 ^ (v10 < v13))) {
    goto LABEL_15;
  }
LABEL_56:
  sub_789680((int)v59, (void **)v59[2]);
  uint64_t v37 = (void *)v59[0];
  v59[0] = 0;
  if (v37) {
    operator delete(v37);
  }
  long long v38 = v61;
  if (v61)
  {
    do
    {
      uint64_t v40 = (void *)*v38;
      int v41 = (void *)v38[3];
      if (v41)
      {
        v38[4] = v41;
        operator delete(v41);
      }
      operator delete(v38);
      long long v38 = v40;
    }
    while (v40);
  }
  uint64_t v39 = (void *)v60[0];
  v60[0] = 0;
  if (v39) {
    operator delete(v39);
  }
}

void sub_786988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  sub_7885B0(v35 - 184);
  sub_3AB00(v35 - 144);
  sub_786A3C(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_786A3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      sub_7895C8((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_786A9C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  unsigned int v18 = a1[1];
  if (*a1 != v18)
  {
    do
    {
      uint64_t v2 = nullsub_1(v1);
      char v4 = *(void **)v2;
      int v3 = *(void **)(v2 + 8);
      unsigned int v19 = v3;
      while (v4 != v3)
      {
        uint64_t v20 = v4;
        sub_787108(v4, (uint64_t)&v52);
        unint64_t v5 = (long long *)v53;
        if (v53)
        {
          while (1)
          {
            sub_4AA8E0((char *)v21, v5 + 1);
            char v7 = (unsigned char *)*((void *)v5 + 21);
            unint64_t v6 = (unsigned char *)*((void *)v5 + 22);
            int64_t v8 = v6 - v7;
            if (v6 == v7)
            {
              unint64_t v10 = 0;
              unint64_t v9 = 0;
              if ((SHIBYTE(v22) & 0x80000000) == 0) {
                goto LABEL_13;
              }
            }
            else
            {
              if (v8 < 0) {
                sub_2E00();
              }
              unint64_t v9 = (char *)operator new(v6 - v7);
              unint64_t v10 = &v9[16 * (v8 >> 4)];
              memcpy(v9, v7, v8);
              if ((SHIBYTE(v22) & 0x80000000) == 0)
              {
LABEL_13:
                *(_OWORD *)std::string __dst = *(_OWORD *)v21;
                uint64_t v36 = v22;
                goto LABEL_16;
              }
            }
            sub_4200(__dst, v21[0], (unint64_t)v21[1]);
LABEL_16:
            uint64_t v37 = v23;
            if (SHIBYTE(v25) < 0)
            {
              sub_4200(&v38, (void *)v24, *((unint64_t *)&v24 + 1));
            }
            else
            {
              long long v38 = v24;
              uint64_t v39 = v25;
            }
            uint64_t v40 = v26;
            int v41 = v27;
            if (SHIBYTE(v29) < 0)
            {
              sub_4200(&v42, (void *)v28, *((unint64_t *)&v28 + 1));
            }
            else
            {
              long long v42 = v28;
              uint64_t v43 = v29;
            }
            if (SHIBYTE(v31) < 0)
            {
              sub_4200(&v44, (void *)v30, *((unint64_t *)&v30 + 1));
            }
            else
            {
              long long v44 = v30;
              uint64_t v45 = v31;
            }
            int v46 = v32;
            if (SHIBYTE(v34) < 0)
            {
              sub_4200(&v47, (void *)v33, *((unint64_t *)&v33 + 1));
            }
            else
            {
              long long v47 = v33;
              uint64_t v48 = v34;
            }
            long long __p = 0;
            uint64_t v50 = 0;
            char v51 = 0;
            int64_t v11 = v10 - v9;
            if (v10 != v9)
            {
              if (v11 < 0) {
                sub_2E00();
              }
              BOOL v12 = (char *)operator new(v10 - v9);
              unint64_t v13 = &v12[16 * (v11 >> 4)];
              long long __p = v12;
              char v51 = v13;
              memcpy(v12, v9, v11);
              uint64_t v50 = v13;
            }
            sub_6485E4(v1, (uint64_t)__dst);
            if (__p)
            {
              uint64_t v50 = __p;
              operator delete(__p);
            }
            if (SHIBYTE(v48) < 0)
            {
              operator delete((void *)v47);
              if ((SHIBYTE(v45) & 0x80000000) == 0)
              {
LABEL_35:
                if ((SHIBYTE(v43) & 0x80000000) == 0) {
                  goto LABEL_36;
                }
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(v45) & 0x80000000) == 0)
            {
              goto LABEL_35;
            }
            operator delete((void *)v44);
            if ((SHIBYTE(v43) & 0x80000000) == 0)
            {
LABEL_36:
              if ((SHIBYTE(v39) & 0x80000000) == 0) {
                goto LABEL_37;
              }
              goto LABEL_49;
            }
LABEL_48:
            operator delete((void *)v42);
            if ((SHIBYTE(v39) & 0x80000000) == 0)
            {
LABEL_37:
              if ((SHIBYTE(v36) & 0x80000000) == 0) {
                goto LABEL_38;
              }
              goto LABEL_50;
            }
LABEL_49:
            operator delete((void *)v38);
            if ((SHIBYTE(v36) & 0x80000000) == 0)
            {
LABEL_38:
              if (!v9) {
                goto LABEL_40;
              }
LABEL_39:
              operator delete(v9);
              goto LABEL_40;
            }
LABEL_50:
            operator delete(__dst[0]);
            if (v9) {
              goto LABEL_39;
            }
LABEL_40:
            if (SHIBYTE(v34) < 0)
            {
              operator delete((void *)v33);
              if ((SHIBYTE(v31) & 0x80000000) == 0)
              {
LABEL_42:
                if ((SHIBYTE(v29) & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_54;
              }
            }
            else if ((SHIBYTE(v31) & 0x80000000) == 0)
            {
              goto LABEL_42;
            }
            operator delete((void *)v30);
            if ((SHIBYTE(v29) & 0x80000000) == 0)
            {
LABEL_43:
              if ((SHIBYTE(v25) & 0x80000000) == 0) {
                goto LABEL_44;
              }
              goto LABEL_55;
            }
LABEL_54:
            operator delete((void *)v28);
            if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
LABEL_44:
              if (SHIBYTE(v22) < 0) {
                goto LABEL_56;
              }
              goto LABEL_9;
            }
LABEL_55:
            operator delete((void *)v24);
            if (SHIBYTE(v22) < 0) {
LABEL_56:
            }
              operator delete(v21[0]);
LABEL_9:
            unint64_t v5 = *(long long **)v5;
            if (!v5)
            {
              int v14 = v53;
              if (!v53) {
                break;
              }
LABEL_61:
              uint64_t v16 = *(char **)v14;
              long long v17 = (void *)*((void *)v14 + 21);
              if (v17)
              {
                *((void *)v14 + 22) = v17;
                operator delete(v17);
              }
              if (v14[167] < 0)
              {
                operator delete(*((void **)v14 + 18));
                if (v14[135] < 0) {
                  goto LABEL_70;
                }
LABEL_65:
                if ((v14[111] & 0x80000000) == 0) {
                  goto LABEL_66;
                }
LABEL_71:
                operator delete(*((void **)v14 + 11));
                if (v14[71] < 0) {
                  goto LABEL_72;
                }
LABEL_67:
                if (v14[39] < 0) {
LABEL_73:
                }
                  operator delete(*((void **)v14 + 2));
              }
              else
              {
                if ((v14[135] & 0x80000000) == 0) {
                  goto LABEL_65;
                }
LABEL_70:
                operator delete(*((void **)v14 + 14));
                if (v14[111] < 0) {
                  goto LABEL_71;
                }
LABEL_66:
                if ((v14[71] & 0x80000000) == 0) {
                  goto LABEL_67;
                }
LABEL_72:
                operator delete(*((void **)v14 + 6));
                if (v14[39] < 0) {
                  goto LABEL_73;
                }
              }
              operator delete(v14);
              int v14 = v16;
              if (!v16) {
                break;
              }
              goto LABEL_61;
            }
          }
        }
        uint64_t v15 = v52;
        unsigned int v52 = 0;
        if (v15) {
          operator delete(v15);
        }
        char v4 = v20 + 1541;
        int v3 = v19;
      }
      v1 += 945;
    }
    while (v1 != v18);
  }
}

void sub_786F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
  {
    operator delete(__p);
    if (!v61) {
      goto LABEL_6;
    }
  }
  else if (!v61)
  {
LABEL_6:
    if (a55 < 0)
    {
      operator delete(a50);
      if ((a48 & 0x80000000) == 0)
      {
LABEL_8:
        if ((a42 & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_18;
      }
    }
    else if ((a48 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(a43);
    if ((a42 & 0x80000000) == 0)
    {
LABEL_9:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(a37);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_10:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(a29);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_11:
      unsigned int v64 = *(void **)(v62 - 112);
      if (v64) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
LABEL_20:
    operator delete(a22);
    unsigned int v64 = *(void **)(v62 - 112);
    if (v64)
    {
      do
      {
LABEL_12:
        unsigned int v65 = (void *)*v64;
        sub_7895C8((uint64_t)(v64 + 2));
        operator delete(v64);
        unsigned int v64 = v65;
      }
      while (v65);
    }
LABEL_13:
    signed int v66 = *(void **)(v62 - 128);
    *(void *)(v62 - 128) = 0;
    if (v66) {
      operator delete(v66);
    }
    _Unwind_Resume(a1);
  }
  operator delete(v61);
  goto LABEL_6;
}

void sub_7870F8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x78708CLL);
  }
  JUMPOUT(0x787070);
}

void sub_787108(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_7837A0(0, (uint64_t)v60);
  sub_789738(a1, (uint64_t)v59);
  sub_46B058();
  char v4 = v3;
  unint64_t v6 = v5;
  for (uint64_t i = 0; ; i += sub_46CCC8(v4, v6++, *(double *)&v17))
  {
    sub_46B060();
    int64_t v8 = v7;
    unint64_t v10 = v9;
    if (v4)
    {
      unint64_t v11 = sub_46C760(v4);
      BOOL v12 = v6 < v11;
      if (!v8)
      {
        if (v6 >= v11) {
          goto LABEL_56;
        }
        goto LABEL_15;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_56;
      }
      BOOL v12 = 0;
    }
    unint64_t v13 = sub_46C760(v8);
    if (v10 >= v13 || !v12) {
      break;
    }
    uint64_t v15 = sub_46C8EC(v4, v6);
    if (v15 == sub_46C8EC(v8, v10)) {
      goto LABEL_56;
    }
LABEL_15:
    uint64_t v16 = sub_46C8EC(v4, v6);
    unint64_t v58 = *(unsigned int *)(v16 + 32) | ((unint64_t)*(unsigned __int16 *)(v16 + 36) << 32);
    if (sub_36F918(v59, &v58))
    {
      __dst[0] = &v58;
      unsigned int v18 = sub_785870((uint64_t)v60, &v58, (uint64_t)&unk_20F06E0, (uint64_t **)__dst);
      sub_789944(v4, v6, v18 + 3, (uint64_t)&v56);
      unsigned int v19 = v56;
      uint64_t v43 = v57;
      if (v56 != v57)
      {
        unint64_t v45 = v6;
        while (1)
        {
          v62[0] = (long long *)&v58;
          uint64_t v20 = sub_788A9C((uint64_t)v59, &v58, (uint64_t)&unk_20F06E0, (void **)v62);
          sub_4AA8E0((char *)__dst, (long long *)(v20 + 3));
          v62[0] = (long long *)__dst;
          float v21 = sub_788E64(a2, (unsigned __int8 *)__dst, (uint64_t)&unk_20F06E0, v62);
          uint64_t v22 = sub_783F9C(v19, v4, v45) + i;
          uint64_t v23 = sub_7841C8(v19, v4, v45) + i;
          uint64_t v24 = v21[21];
          unint64_t v25 = v21[22];
          if (v24 != v25 && *(void *)(v25 - 8) == v22) {
            break;
          }
          unint64_t v26 = v21[23];
          if (v25 < v26)
          {
            sub_2F99CC((void *)v21[22], v22, v23);
            v21[22] = v25 + 16;
            v21[22] = v25 + 16;
            if ((v55 & 0x80000000) == 0) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }
          uint64_t v27 = (uint64_t)(v25 - v24) >> 4;
          if ((unint64_t)(v27 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v28 = v26 - v24;
          uint64_t v29 = v28 >> 3;
          if (v28 >> 3 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            if (v30 >> 60) {
              sub_188D718();
            }
            uint64_t v31 = operator new(16 * v30);
          }
          else
          {
            uint64_t v31 = 0;
          }
          int v32 = sub_2F99CC(&v31[2 * v27], v22, v23);
          uint64_t v34 = (char *)v21[21];
          long long v33 = (char *)v21[22];
          uint64_t v35 = v32;
          if (v33 != v34)
          {
            do
            {
              long long v17 = *((_OWORD *)v33 - 1);
              *((_OWORD *)v35 - 1) = v17;
              v35 -= 2;
              v33 -= 16;
            }
            while (v33 != v34);
            long long v33 = (char *)v21[21];
          }
          uint64_t v36 = v32 + 2;
          v21[21] = v35;
          v21[22] = v32 + 2;
          v21[23] = &v31[2 * v30];
          if (v33) {
            operator delete(v33);
          }
          v21[22] = v36;
          if (v55 < 0) {
            goto LABEL_25;
          }
LABEL_26:
          if (v53 < 0)
          {
            operator delete(v52);
            if ((v51 & 0x80000000) == 0)
            {
LABEL_28:
              if ((v49 & 0x80000000) == 0) {
                goto LABEL_29;
              }
              goto LABEL_33;
            }
          }
          else if ((v51 & 0x80000000) == 0)
          {
            goto LABEL_28;
          }
          operator delete(v50);
          if ((v49 & 0x80000000) == 0)
          {
LABEL_29:
            if (v47 < 0) {
              goto LABEL_34;
            }
            goto LABEL_18;
          }
LABEL_33:
          operator delete(v48);
          if (v47 < 0) {
LABEL_34:
          }
            operator delete(__dst[0]);
LABEL_18:
          v19 += 2;
          if (v19 == v43)
          {
            unsigned int v19 = v56;
            unint64_t v6 = v45;
            goto LABEL_53;
          }
        }
        *(void *)(v25 - 8) = v23;
        if ((v55 & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(__p);
        goto LABEL_26;
      }
LABEL_53:
      if (v19)
      {
        uint64_t v57 = v19;
        operator delete(v19);
      }
    }
  }
  if ((v12 ^ (v10 < v13))) {
    goto LABEL_15;
  }
LABEL_56:
  sub_789680((int)v59, (void **)v59[2]);
  uint64_t v37 = (void *)v59[0];
  v59[0] = 0;
  if (v37) {
    operator delete(v37);
  }
  long long v38 = v61;
  if (v61)
  {
    do
    {
      uint64_t v40 = (void *)*v38;
      int v41 = (void *)v38[3];
      if (v41)
      {
        v38[4] = v41;
        operator delete(v41);
      }
      operator delete(v38);
      long long v38 = v40;
    }
    while (v40);
  }
  uint64_t v39 = (void *)v60[0];
  v60[0] = 0;
  if (v39) {
    operator delete(v39);
  }
}

void sub_787560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  sub_7885B0(v35 - 184);
  sub_3AB00(v35 - 144);
  sub_786A3C(a11);
  _Unwind_Resume(a1);
}

void sub_787614(uint64_t **a1)
{
  uint64_t v1 = *a1;
  unsigned int v18 = a1[1];
  if (*a1 != v18)
  {
    do
    {
      uint64_t v2 = nullsub_1(v1);
      char v4 = *(void **)v2;
      int v3 = *(void **)(v2 + 8);
      unsigned int v19 = v3;
      while (v4 != v3)
      {
        uint64_t v20 = v4;
        sub_787C80(v4, (uint64_t)&v52);
        unint64_t v5 = (long long *)v53;
        if (v53)
        {
          while (1)
          {
            sub_4AA8E0((char *)v21, v5 + 1);
            char v7 = (unsigned char *)*((void *)v5 + 21);
            unint64_t v6 = (unsigned char *)*((void *)v5 + 22);
            int64_t v8 = v6 - v7;
            if (v6 == v7)
            {
              unint64_t v10 = 0;
              unint64_t v9 = 0;
              if ((SHIBYTE(v22) & 0x80000000) == 0) {
                goto LABEL_13;
              }
            }
            else
            {
              if (v8 < 0) {
                sub_2E00();
              }
              unint64_t v9 = (char *)operator new(v6 - v7);
              unint64_t v10 = &v9[16 * (v8 >> 4)];
              memcpy(v9, v7, v8);
              if ((SHIBYTE(v22) & 0x80000000) == 0)
              {
LABEL_13:
                *(_OWORD *)std::string __dst = *(_OWORD *)v21;
                uint64_t v36 = v22;
                goto LABEL_16;
              }
            }
            sub_4200(__dst, v21[0], (unint64_t)v21[1]);
LABEL_16:
            uint64_t v37 = v23;
            if (SHIBYTE(v25) < 0)
            {
              sub_4200(&v38, (void *)v24, *((unint64_t *)&v24 + 1));
            }
            else
            {
              long long v38 = v24;
              uint64_t v39 = v25;
            }
            uint64_t v40 = v26;
            int v41 = v27;
            if (SHIBYTE(v29) < 0)
            {
              sub_4200(&v42, (void *)v28, *((unint64_t *)&v28 + 1));
            }
            else
            {
              long long v42 = v28;
              uint64_t v43 = v29;
            }
            if (SHIBYTE(v31) < 0)
            {
              sub_4200(&v44, (void *)v30, *((unint64_t *)&v30 + 1));
            }
            else
            {
              long long v44 = v30;
              uint64_t v45 = v31;
            }
            int v46 = v32;
            if (SHIBYTE(v34) < 0)
            {
              sub_4200(&v47, (void *)v33, *((unint64_t *)&v33 + 1));
            }
            else
            {
              long long v47 = v33;
              uint64_t v48 = v34;
            }
            long long __p = 0;
            uint64_t v50 = 0;
            char v51 = 0;
            int64_t v11 = v10 - v9;
            if (v10 != v9)
            {
              if (v11 < 0) {
                sub_2E00();
              }
              BOOL v12 = (char *)operator new(v10 - v9);
              unint64_t v13 = &v12[16 * (v11 >> 4)];
              long long __p = v12;
              char v51 = v13;
              memcpy(v12, v9, v11);
              uint64_t v50 = v13;
            }
            sub_64BB20(v1, (uint64_t)__dst);
            if (__p)
            {
              uint64_t v50 = __p;
              operator delete(__p);
            }
            if (SHIBYTE(v48) < 0)
            {
              operator delete((void *)v47);
              if ((SHIBYTE(v45) & 0x80000000) == 0)
              {
LABEL_35:
                if ((SHIBYTE(v43) & 0x80000000) == 0) {
                  goto LABEL_36;
                }
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(v45) & 0x80000000) == 0)
            {
              goto LABEL_35;
            }
            operator delete((void *)v44);
            if ((SHIBYTE(v43) & 0x80000000) == 0)
            {
LABEL_36:
              if ((SHIBYTE(v39) & 0x80000000) == 0) {
                goto LABEL_37;
              }
              goto LABEL_49;
            }
LABEL_48:
            operator delete((void *)v42);
            if ((SHIBYTE(v39) & 0x80000000) == 0)
            {
LABEL_37:
              if ((SHIBYTE(v36) & 0x80000000) == 0) {
                goto LABEL_38;
              }
              goto LABEL_50;
            }
LABEL_49:
            operator delete((void *)v38);
            if ((SHIBYTE(v36) & 0x80000000) == 0)
            {
LABEL_38:
              if (!v9) {
                goto LABEL_40;
              }
LABEL_39:
              operator delete(v9);
              goto LABEL_40;
            }
LABEL_50:
            operator delete(__dst[0]);
            if (v9) {
              goto LABEL_39;
            }
LABEL_40:
            if (SHIBYTE(v34) < 0)
            {
              operator delete((void *)v33);
              if ((SHIBYTE(v31) & 0x80000000) == 0)
              {
LABEL_42:
                if ((SHIBYTE(v29) & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_54;
              }
            }
            else if ((SHIBYTE(v31) & 0x80000000) == 0)
            {
              goto LABEL_42;
            }
            operator delete((void *)v30);
            if ((SHIBYTE(v29) & 0x80000000) == 0)
            {
LABEL_43:
              if ((SHIBYTE(v25) & 0x80000000) == 0) {
                goto LABEL_44;
              }
              goto LABEL_55;
            }
LABEL_54:
            operator delete((void *)v28);
            if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
LABEL_44:
              if (SHIBYTE(v22) < 0) {
                goto LABEL_56;
              }
              goto LABEL_9;
            }
LABEL_55:
            operator delete((void *)v24);
            if (SHIBYTE(v22) < 0) {
LABEL_56:
            }
              operator delete(v21[0]);
LABEL_9:
            unint64_t v5 = *(long long **)v5;
            if (!v5)
            {
              int v14 = v53;
              if (!v53) {
                break;
              }
LABEL_61:
              uint64_t v16 = *(char **)v14;
              long long v17 = (void *)*((void *)v14 + 21);
              if (v17)
              {
                *((void *)v14 + 22) = v17;
                operator delete(v17);
              }
              if (v14[167] < 0)
              {
                operator delete(*((void **)v14 + 18));
                if (v14[135] < 0) {
                  goto LABEL_70;
                }
LABEL_65:
                if ((v14[111] & 0x80000000) == 0) {
                  goto LABEL_66;
                }
LABEL_71:
                operator delete(*((void **)v14 + 11));
                if (v14[71] < 0) {
                  goto LABEL_72;
                }
LABEL_67:
                if (v14[39] < 0) {
LABEL_73:
                }
                  operator delete(*((void **)v14 + 2));
              }
              else
              {
                if ((v14[135] & 0x80000000) == 0) {
                  goto LABEL_65;
                }
LABEL_70:
                operator delete(*((void **)v14 + 14));
                if (v14[111] < 0) {
                  goto LABEL_71;
                }
LABEL_66:
                if ((v14[71] & 0x80000000) == 0) {
                  goto LABEL_67;
                }
LABEL_72:
                operator delete(*((void **)v14 + 6));
                if (v14[39] < 0) {
                  goto LABEL_73;
                }
              }
              operator delete(v14);
              int v14 = v16;
              if (!v16) {
                break;
              }
              goto LABEL_61;
            }
          }
        }
        uint64_t v15 = v52;
        unsigned int v52 = 0;
        if (v15) {
          operator delete(v15);
        }
        char v4 = v20 + 1541;
        int v3 = v19;
      }
      v1 += 945;
    }
    while (v1 != v18);
  }
}

void sub_787A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
  {
    operator delete(__p);
    if (!v61) {
      goto LABEL_6;
    }
  }
  else if (!v61)
  {
LABEL_6:
    if (a55 < 0)
    {
      operator delete(a50);
      if ((a48 & 0x80000000) == 0)
      {
LABEL_8:
        if ((a42 & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_18;
      }
    }
    else if ((a48 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(a43);
    if ((a42 & 0x80000000) == 0)
    {
LABEL_9:
      if ((a34 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(a37);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_10:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(a29);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_11:
      unsigned int v64 = *(void **)(v62 - 112);
      if (v64) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
LABEL_20:
    operator delete(a22);
    unsigned int v64 = *(void **)(v62 - 112);
    if (v64)
    {
      do
      {
LABEL_12:
        unsigned int v65 = (void *)*v64;
        sub_7895C8((uint64_t)(v64 + 2));
        operator delete(v64);
        unsigned int v64 = v65;
      }
      while (v65);
    }
LABEL_13:
    signed int v66 = *(void **)(v62 - 128);
    *(void *)(v62 - 128) = 0;
    if (v66) {
      operator delete(v66);
    }
    _Unwind_Resume(a1);
  }
  operator delete(v61);
  goto LABEL_6;
}

void sub_787C70()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x787C04);
  }
  JUMPOUT(0x787BE8);
}

void sub_787C80(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_783BA0(0, (uint64_t)v60);
  sub_789B5C(a1, (uint64_t)v59);
  sub_46B058();
  char v4 = v3;
  unint64_t v6 = v5;
  for (uint64_t i = 0; ; i += sub_470F2C(v4, v6++, *(double *)&v17))
  {
    sub_46FF18();
    int64_t v8 = v7;
    unint64_t v10 = v9;
    if (v4)
    {
      unint64_t v11 = sub_470ADC(v4);
      BOOL v12 = v6 < v11;
      if (!v8)
      {
        if (v6 >= v11) {
          goto LABEL_56;
        }
        goto LABEL_15;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_56;
      }
      BOOL v12 = 0;
    }
    unint64_t v13 = sub_470ADC(v8);
    if (v10 >= v13 || !v12) {
      break;
    }
    uint64_t v15 = sub_470B40(v4, v6);
    if (v15 == sub_470B40(v8, v10)) {
      goto LABEL_56;
    }
LABEL_15:
    uint64_t v16 = (unsigned int *)sub_470B40(v4, v6);
    unint64_t v58 = *v16 | ((unint64_t)(v16[1] & 0x1FFFFFFF) << 32);
    if (sub_36F918(v59, &v58))
    {
      __dst[0] = &v58;
      unsigned int v18 = sub_785870((uint64_t)v60, &v58, (uint64_t)&unk_20F06E0, (uint64_t **)__dst);
      sub_789D68(v4, v6, v18 + 3, (uint64_t)&v56);
      unsigned int v19 = v56;
      uint64_t v43 = v57;
      if (v56 != v57)
      {
        unint64_t v45 = v6;
        while (1)
        {
          v62[0] = (long long *)&v58;
          uint64_t v20 = sub_788A9C((uint64_t)v59, &v58, (uint64_t)&unk_20F06E0, (void **)v62);
          sub_4AA8E0((char *)__dst, (long long *)(v20 + 3));
          v62[0] = (long long *)__dst;
          float v21 = sub_788E64(a2, (unsigned __int8 *)__dst, (uint64_t)&unk_20F06E0, v62);
          uint64_t v22 = sub_7840B4(v19, v4, v45) + i;
          uint64_t v23 = sub_7842E0(v19, v4, v45) + i;
          uint64_t v24 = v21[21];
          unint64_t v25 = v21[22];
          if (v24 != v25 && *(void *)(v25 - 8) == v22) {
            break;
          }
          unint64_t v26 = v21[23];
          if (v25 < v26)
          {
            sub_2F99CC((void *)v21[22], v22, v23);
            v21[22] = v25 + 16;
            v21[22] = v25 + 16;
            if ((v55 & 0x80000000) == 0) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }
          uint64_t v27 = (uint64_t)(v25 - v24) >> 4;
          if ((unint64_t)(v27 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v28 = v26 - v24;
          uint64_t v29 = v28 >> 3;
          if (v28 >> 3 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          if (v30)
          {
            if (v30 >> 60) {
              sub_188D718();
            }
            uint64_t v31 = operator new(16 * v30);
          }
          else
          {
            uint64_t v31 = 0;
          }
          int v32 = sub_2F99CC(&v31[2 * v27], v22, v23);
          uint64_t v34 = (char *)v21[21];
          long long v33 = (char *)v21[22];
          uint64_t v35 = v32;
          if (v33 != v34)
          {
            do
            {
              long long v17 = *((_OWORD *)v33 - 1);
              *((_OWORD *)v35 - 1) = v17;
              v35 -= 2;
              v33 -= 16;
            }
            while (v33 != v34);
            long long v33 = (char *)v21[21];
          }
          uint64_t v36 = v32 + 2;
          v21[21] = v35;
          v21[22] = v32 + 2;
          v21[23] = &v31[2 * v30];
          if (v33) {
            operator delete(v33);
          }
          v21[22] = v36;
          if (v55 < 0) {
            goto LABEL_25;
          }
LABEL_26:
          if (v53 < 0)
          {
            operator delete(v52);
            if ((v51 & 0x80000000) == 0)
            {
LABEL_28:
              if ((v49 & 0x80000000) == 0) {
                goto LABEL_29;
              }
              goto LABEL_33;
            }
          }
          else if ((v51 & 0x80000000) == 0)
          {
            goto LABEL_28;
          }
          operator delete(v50);
          if ((v49 & 0x80000000) == 0)
          {
LABEL_29:
            if (v47 < 0) {
              goto LABEL_34;
            }
            goto LABEL_18;
          }
LABEL_33:
          operator delete(v48);
          if (v47 < 0) {
LABEL_34:
          }
            operator delete(__dst[0]);
LABEL_18:
          v19 += 2;
          if (v19 == v43)
          {
            unsigned int v19 = v56;
            unint64_t v6 = v45;
            goto LABEL_53;
          }
        }
        *(void *)(v25 - 8) = v23;
        if ((v55 & 0x80000000) == 0) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(__p);
        goto LABEL_26;
      }
LABEL_53:
      if (v19)
      {
        uint64_t v57 = v19;
        operator delete(v19);
      }
    }
  }
  if ((v12 ^ (v10 < v13))) {
    goto LABEL_15;
  }
LABEL_56:
  sub_789680((int)v59, (void **)v59[2]);
  uint64_t v37 = (void *)v59[0];
  v59[0] = 0;
  if (v37) {
    operator delete(v37);
  }
  long long v38 = v61;
  if (v61)
  {
    do
    {
      uint64_t v40 = (void *)*v38;
      int v41 = (void *)v38[3];
      if (v41)
      {
        v38[4] = v41;
        operator delete(v41);
      }
      operator delete(v38);
      long long v38 = v40;
    }
    while (v40);
  }
  uint64_t v39 = (void *)v60[0];
  v60[0] = 0;
  if (v39) {
    operator delete(v39);
  }
}

void sub_7880D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  sub_7885B0(v35 - 184);
  sub_3AB00(v35 - 144);
  sub_786A3C(a11);
  _Unwind_Resume(a1);
}

void sub_78818C(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = a1[149] - a1[148];
  if (v3)
  {
    unint64_t v5 = 0;
    unint64_t v6 = a1 + 148;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5);
    do
    {
      uint64_t v8 = sub_4A65E4(v6, v5);
      sub_4AA8E0((char *)__dst, (long long *)v8);
      if (!sub_6F2FD8((uint64_t)__dst)) {
        goto LABEL_11;
      }
      unint64_t v9 = *(void *)(v8 + 152);
      if (v5 + 1 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[149] - a1[148]) >> 5))
      {
        unint64_t v10 = sub_46C760(a1);
        if (v9 <= v10) {
          unint64_t v11 = v10;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v9 < v10) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v13 = *(void *)(sub_4A65E4(v6, v5 + 1) + 152);
        if (v9 <= v13) {
          unint64_t v11 = v13;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v9 < v13)
        {
          do
          {
LABEL_10:
            uint64_t v12 = sub_46C8EC(a1, v9);
            unint64_t v14 = *(unsigned int *)(v12 + 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 36) << 32);
            sub_7885EC(a2, &v14, &v14, (long long *)__dst);
            ++v9;
          }
          while (v11 != v9);
        }
      }
LABEL_11:
      if (v24 < 0)
      {
        operator delete(__p);
        if ((v22 & 0x80000000) == 0)
        {
LABEL_13:
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_14;
          }
          goto LABEL_19;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_14:
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_20;
      }
LABEL_19:
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_15:
        if (v16 < 0) {
          goto LABEL_21;
        }
        goto LABEL_3;
      }
LABEL_20:
      operator delete(v17);
      if (v16 < 0) {
LABEL_21:
      }
        operator delete(__dst[0]);
LABEL_3:
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_788348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  sub_7885B0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_788398@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (!*(unsigned char *)(sub_46C8EC(a1, a2) + 38))
  {
    unsigned int v10 = sub_46CACC((uint64_t)a1, a2);
    uint64_t result = sub_46CB48((uint64_t)a1, a2);
    unsigned int v11 = result;
    unint64_t v15 = -1;
    unint64_t v12 = *a3;
    if (*a3 >= a3[1]) {
      return result;
    }
    goto LABEL_5;
  }
  int v8 = sub_46CB48((uint64_t)a1, a2);
  uint64_t result = sub_46CACC((uint64_t)a1, a2);
  unsigned int v10 = 1000000000 - v8;
  unsigned int v11 = 1000000000 - result;
  unint64_t v15 = -1;
  unint64_t v12 = *a3;
  if (*a3 < a3[1])
  {
LABEL_5:
    unsigned int v13 = -1;
    do
    {
      unsigned int v14 = *(_DWORD *)(v12 + 4);
      if (v14 >= v10)
      {
        if (v14 > v11) {
          return result;
        }
        if (*(unsigned char *)(v12 + 8))
        {
          if (v13 < 0x3B9ACA01)
          {
            HIDWORD(v15) = *(_DWORD *)(v12 + 4);
            uint64_t result = (uint64_t)sub_29603C((void **)a4, &v15);
            unint64_t v15 = -1;
LABEL_13:
            unsigned int v13 = -1;
          }
        }
        else
        {
          if (v10 == v14)
          {
            if (*(_DWORD *)v12 == 2)
            {
              unint64_t v15 = *(void *)&v10 | 0xFFFFFFFF00000000;
              *(unsigned char *)(v12 + 8) = 1;
              unsigned int v13 = v10;
            }
            goto LABEL_7;
          }
          if (v10 < v14 && v14 < v11)
          {
            if (v13 > 0x3B9ACA00 && v12 != *a3)
            {
              unsigned int v13 = *(_DWORD *)(v12 - 8);
              unint64_t v15 = *(void *)&v13 | 0xFFFFFFFF00000000;
            }
            *(unsigned char *)(v12 + 8) = 1;
            goto LABEL_7;
          }
          if (v14 == v11 && !*(_DWORD *)v12)
          {
            if (v13 <= 0x3B9ACA00) {
              goto LABEL_28;
            }
            if (v12 != *a3)
            {
              unsigned int v13 = *(_DWORD *)(v12 - 8);
              unint64_t v15 = *(void *)&v13 | 0xFFFFFFFF00000000;
            }
            if (v13 < 0x3B9ACA01)
            {
LABEL_28:
              if (v13 < v11)
              {
                HIDWORD(v15) = v11;
                uint64_t result = (uint64_t)sub_29603C((void **)a4, &v15);
              }
            }
            unint64_t v15 = -1;
            *(unsigned char *)(v12 + 8) = 1;
            goto LABEL_13;
          }
        }
      }
LABEL_7:
      v12 += 12;
    }
    while (v12 < a3[1]);
  }
  return result;
}

void sub_788594(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7885B0(uint64_t a1)
{
  sub_789680(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *sub_7885EC(uint64_t a1, void *a2, void *a3, long long *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ (v10 >> 33);
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    unsigned int v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t result = (void *)*v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = result[1];
            if (v18 == v11)
            {
              if (*((_DWORD *)result + 4) == v8 && *((_DWORD *)result + 5) == HIDWORD(v8)) {
                return result;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = result[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)result + 4) == v8 && *((_DWORD *)result + 5) == HIDWORD(v8)) {
              return result;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_31:
  uint64_t v34 = operator new(0xB0uLL);
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = v11;
  *((void *)v34 + 2) = *a3;
  sub_4AA8E0((char *)v34 + 24, a4);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v24 = 1;
    if (v12 >= 3) {
      BOOL v24 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v12);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        char v22 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v23 = v34;
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v11;
        char v22 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v23 = v34;
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v11;
      char v22 = *(void **)(*(void *)a1 + 8 * (v32 & v11));
      uint64_t v23 = v34;
      if (v22) {
        goto LABEL_34;
      }
    }
LABEL_58:
    *uint64_t v23 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v34;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v34)
    {
      unint64_t v33 = *(void *)(*(void *)v34 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v33 >= v12) {
          v33 %= v12;
        }
      }
      else
      {
        v33 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v33) = v34;
    }
    goto LABEL_69;
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v23 = v34;
  if (!v22) {
    goto LABEL_58;
  }
LABEL_34:
  *uint64_t v23 = *v22;
  *char v22 = v34;
LABEL_69:
  uint64_t result = v34;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_78898C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (a10) {
    sub_7889C0(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_7889C0(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 175) < 0)
    {
      operator delete(__p[19]);
      if ((*((char *)__p + 143) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*((char *)__p + 119) & 0x80000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((*((char *)__p + 143) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(__p[15]);
    if ((*((char *)__p + 119) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*((char *)__p + 79) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_15:
      operator delete(__p[7]);
      if (*((char *)__p + 47) < 0) {
        goto LABEL_16;
      }
LABEL_7:
      uint64_t v3 = __p;
LABEL_9:
      operator delete(v3);
      return;
    }
LABEL_14:
    operator delete(__p[12]);
    if ((*((char *)__p + 79) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)__p + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_16:
      operator delete(__p[3]);
      uint64_t v3 = __p;
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (__p) {
    goto LABEL_7;
  }
}

void *sub_788A9C(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = __ROR8__(*a2, 32);
  unint64_t v9 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
  unint64_t v10 = v9 ^ (v9 >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint8x8_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t result = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = result[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)result + 4) == v7 && *((_DWORD *)result + 5) == HIDWORD(v7)) {
                return result;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = result[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)result + 4) == v7 && *((_DWORD *)result + 5) == HIDWORD(v7)) {
              return result;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_31:
  unint64_t v33 = operator new(0xB0uLL);
  *unint64_t v33 = 0;
  v33[1] = v10;
  v33[2] = **a4;
  sub_6F30A4((uint64_t)(v33 + 3));
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v27) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v27)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v27 < 3uLL || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < *(void *)&v27) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        float v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v22 = v33;
        if (v21) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        float v21 = *(void **)(*(void *)a1 + 8 * v10);
        char v22 = v33;
        if (v21) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v10;
      float v21 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      char v22 = v33;
      if (v21) {
        goto LABEL_34;
      }
    }
LABEL_58:
    *char v22 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v33;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v33)
    {
      unint64_t v32 = *(void *)(*v33 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v32 >= v11) {
          v32 %= v11;
        }
      }
      else
      {
        v32 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v32) = v33;
    }
    goto LABEL_69;
  }
  float v21 = *(void **)(*(void *)a1 + 8 * v4);
  char v22 = v33;
  if (!v21) {
    goto LABEL_58;
  }
LABEL_34:
  *char v22 = *v21;
  *float v21 = v33;
LABEL_69:
  uint64_t result = v33;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_788E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (a10) {
    sub_7889C0(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_788E64(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_78923C(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint8x8_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unsigned int v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v14 + 1);
            if (v16 == v10)
            {
              if (sub_6F317C((unsigned __int8 *)v14 + 16, a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unsigned int v14 = *(void **)v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (sub_6F317C((unsigned __int8 *)v14 + 16, a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unsigned int v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  unint64_t v32 = operator new(0xC0uLL);
  *(void *)unint64_t v32 = 0;
  *((void *)v32 + 1) = v10;
  sub_4AA8E0((char *)v32 + 16, *a4);
  *((void *)v32 + 21) = 0;
  *((void *)v32 + 22) = 0;
  *((void *)v32 + 23) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        float v19 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        float v20 = v32;
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        float v19 = *(void **)(*(void *)a1 + 8 * v10);
        float v20 = v32;
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      float v19 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      float v20 = v32;
      if (v19) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *float v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v32;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v32)
    {
      unint64_t v30 = *(void *)(*(void *)v32 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v30 >= v11) {
          v30 %= v11;
        }
      }
      else
      {
        v30 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v32;
    }
    goto LABEL_61;
  }
  float v19 = *(void **)(*(void *)a1 + 8 * v4);
  float v20 = v32;
  if (!v19) {
    goto LABEL_50;
  }
LABEL_26:
  *float v20 = *v19;
  void *v19 = v32;
LABEL_61:
  unsigned int v14 = v32;
  ++*v8;
  return v14;
}

void sub_7891CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7891F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7891E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7891F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_7891F4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_7895C8((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_78923C(uint64_t a1, uint64_t a2)
{
  unint64_t v14 = 0;
  sub_6F3150((char *)a2, (uint64_t)v12);
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(__p, v12[0], (unint64_t)v12[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v12;
    uint64_t v16 = v13;
  }
  if (v16 >= 0) {
    uint64_t v3 = (uint64_t *)__p;
  }
  else {
    uint64_t v3 = (uint64_t *)__p[0];
  }
  if (v16 >= 0) {
    unint64_t v4 = HIBYTE(v16);
  }
  else {
    unint64_t v4 = (unint64_t)__p[1];
  }
  unint64_t v5 = sub_B128((uint64_t)&v17, v3, v4);
  unint64_t v6 = v5;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    unint64_t v7 = v6 + 2654435769u;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v7 = v5 + 2654435769u;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  operator delete(v12[0]);
LABEL_12:
  __p[0] = *(void **)(a2 + 24);
  unint64_t v8 = (sub_1132F20((uint64_t)__p) + 2654435769 + (v7 << 6) + (v7 >> 2)) ^ v7;
  unint64_t v14 = v8;
  sub_6F3178(v12, a2);
  if (SHIBYTE(v13) < 0)
  {
    sub_4200(__p, v12[0], (unint64_t)v12[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v12;
    uint64_t v16 = v13;
  }
  if (v16 >= 0) {
    unint64_t v9 = (uint64_t *)__p;
  }
  else {
    unint64_t v9 = (uint64_t *)__p[0];
  }
  if (v16 >= 0) {
    unint64_t v10 = HIBYTE(v16);
  }
  else {
    unint64_t v10 = (unint64_t)__p[1];
  }
  unint64_t v14 = (sub_B128((uint64_t)&v17, v9, v10) + 2654435769u + (v8 << 6) + (v8 >> 2)) ^ v8;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_27:
    operator delete(v12[0]);
    goto LABEL_25;
  }
  if (SHIBYTE(v13) < 0) {
    goto LABEL_27;
  }
LABEL_25:
  sub_789410(&v14, (int *)(a2 + 64));
  return (*(unsigned int *)(a2 + 120) + 2654435769 + (v14 << 6) + (v14 >> 2)) ^ v14;
}

void sub_7893E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_789410(void *a1, int *a2)
{
  unsigned int v7 = *a2;
  if (*((char *)a2 + 31) < 0)
  {
    sub_4200(&v8, *((void **)a2 + 1), *((void *)a2 + 2));
    if ((*((char *)a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 2);
    uint64_t v9 = *((void *)a2 + 3);
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v10 = *((_OWORD *)a2 + 2);
      uint64_t v11 = *((void *)a2 + 6);
      goto LABEL_6;
    }
  }
  sub_4200(&v10, *((void **)a2 + 4), *((void *)a2 + 5));
LABEL_6:
  if (SHIBYTE(v9) < 0)
  {
    sub_4200(__p, (void *)v8, *((unint64_t *)&v8 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = v8;
    uint64_t v13 = v9;
  }
  if (v13 >= 0) {
    unint64_t v4 = (uint64_t *)__p;
  }
  else {
    unint64_t v4 = (uint64_t *)__p[0];
  }
  if (v13 >= 0) {
    unint64_t v5 = HIBYTE(v13);
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  unint64_t v6 = sub_B128((uint64_t)&v14, v4, v5);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  *a1 ^= ((((v7 + 2654435769) << 6) + (((unint64_t)v7 + 2654435769u) >> 2) + v6 + 2654435769u) ^ (v7 + 2654435769))
       + (*a1 << 6)
       + (*a1 >> 2)
       + 2654435769u;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete((void *)v8);
    return;
  }
  operator delete((void *)v10);
  if (SHIBYTE(v9) < 0) {
    goto LABEL_21;
  }
}

void sub_789594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4AA598((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7895A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_7895C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return;
  }
LABEL_13:
  uint64_t v3 = *(void **)a1;

  operator delete(v3);
}

void sub_789680(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 175) < 0)
      {
        operator delete(v2[19]);
        if ((*((char *)v2 + 143) & 0x80000000) == 0)
        {
LABEL_6:
          if ((*((char *)v2 + 119) & 0x80000000) == 0) {
            goto LABEL_7;
          }
          goto LABEL_12;
        }
      }
      else if ((*((char *)v2 + 143) & 0x80000000) == 0)
      {
        goto LABEL_6;
      }
      operator delete(v2[15]);
      if ((*((char *)v2 + 119) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*((char *)v2 + 79) & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
LABEL_12:
      operator delete(v2[12]);
      if ((*((char *)v2 + 79) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v2 + 47) < 0) {
          goto LABEL_14;
        }
        goto LABEL_3;
      }
LABEL_13:
      operator delete(v2[7]);
      if (*((char *)v2 + 47) < 0) {
LABEL_14:
      }
        operator delete(v2[3]);
LABEL_3:
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_789738(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = a1[149] - a1[148];
  if (v3)
  {
    unint64_t v5 = 0;
    unint64_t v6 = a1 + 148;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5);
    do
    {
      uint64_t v8 = sub_4A65E4(v6, v5);
      sub_4AA8E0((char *)__dst, (long long *)v8);
      if (!sub_6F2FD8((uint64_t)__dst)) {
        goto LABEL_11;
      }
      unint64_t v9 = *(void *)(v8 + 152);
      if (v5 + 1 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[149] - a1[148]) >> 5))
      {
        unint64_t v10 = sub_46C760(a1);
        if (v9 <= v10) {
          unint64_t v11 = v10;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v9 < v10) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v13 = *(void *)(sub_4A65E4(v6, v5 + 1) + 152);
        if (v9 <= v13) {
          unint64_t v11 = v13;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v9 < v13)
        {
          do
          {
LABEL_10:
            uint64_t v12 = sub_46C8EC(a1, v9);
            unint64_t v14 = *(unsigned int *)(v12 + 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 36) << 32);
            sub_7885EC(a2, &v14, &v14, (long long *)__dst);
            ++v9;
          }
          while (v11 != v9);
        }
      }
LABEL_11:
      if (v24 < 0)
      {
        operator delete(__p);
        if ((v22 & 0x80000000) == 0)
        {
LABEL_13:
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_14;
          }
          goto LABEL_19;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_14:
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_20;
      }
LABEL_19:
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_15:
        if (v16 < 0) {
          goto LABEL_21;
        }
        goto LABEL_3;
      }
LABEL_20:
      operator delete(v17);
      if (v16 < 0) {
LABEL_21:
      }
        operator delete(__dst[0]);
LABEL_3:
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_7898F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  sub_7885B0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_789944@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (!*(unsigned char *)(sub_46C8EC(a1, a2) + 38))
  {
    unsigned int v10 = sub_46CACC((uint64_t)a1, a2);
    uint64_t result = sub_46CB48((uint64_t)a1, a2);
    unsigned int v11 = result;
    unint64_t v15 = -1;
    unint64_t v12 = *a3;
    if (*a3 >= a3[1]) {
      return result;
    }
    goto LABEL_5;
  }
  int v8 = sub_46CB48((uint64_t)a1, a2);
  uint64_t result = sub_46CACC((uint64_t)a1, a2);
  unsigned int v10 = 1000000000 - v8;
  unsigned int v11 = 1000000000 - result;
  unint64_t v15 = -1;
  unint64_t v12 = *a3;
  if (*a3 < a3[1])
  {
LABEL_5:
    unsigned int v13 = -1;
    do
    {
      unsigned int v14 = *(_DWORD *)(v12 + 4);
      if (v14 >= v10)
      {
        if (v14 > v11) {
          return result;
        }
        if (*(unsigned char *)(v12 + 8))
        {
          if (v13 < 0x3B9ACA01)
          {
            HIDWORD(v15) = *(_DWORD *)(v12 + 4);
            uint64_t result = (uint64_t)sub_29603C((void **)a4, &v15);
            unint64_t v15 = -1;
LABEL_13:
            unsigned int v13 = -1;
          }
        }
        else
        {
          if (v10 == v14)
          {
            if (*(_DWORD *)v12 == 2)
            {
              unint64_t v15 = *(void *)&v10 | 0xFFFFFFFF00000000;
              *(unsigned char *)(v12 + 8) = 1;
              unsigned int v13 = v10;
            }
            goto LABEL_7;
          }
          if (v10 < v14 && v14 < v11)
          {
            if (v13 > 0x3B9ACA00 && v12 != *a3)
            {
              unsigned int v13 = *(_DWORD *)(v12 - 8);
              unint64_t v15 = *(void *)&v13 | 0xFFFFFFFF00000000;
            }
            *(unsigned char *)(v12 + 8) = 1;
            goto LABEL_7;
          }
          if (v14 == v11 && !*(_DWORD *)v12)
          {
            if (v13 <= 0x3B9ACA00) {
              goto LABEL_28;
            }
            if (v12 != *a3)
            {
              unsigned int v13 = *(_DWORD *)(v12 - 8);
              unint64_t v15 = *(void *)&v13 | 0xFFFFFFFF00000000;
            }
            if (v13 < 0x3B9ACA01)
            {
LABEL_28:
              if (v13 < v11)
              {
                HIDWORD(v15) = v11;
                uint64_t result = (uint64_t)sub_29603C((void **)a4, &v15);
              }
            }
            unint64_t v15 = -1;
            *(unsigned char *)(v12 + 8) = 1;
            goto LABEL_13;
          }
        }
      }
LABEL_7:
      v12 += 12;
    }
    while (v12 < a3[1]);
  }
  return result;
}

void sub_789B40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_789B5C(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = a1[149] - a1[148];
  if (v3)
  {
    unint64_t v5 = 0;
    unint64_t v6 = a1 + 148;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5);
    do
    {
      uint64_t v8 = sub_4A65E4(v6, v5);
      sub_4AA8E0((char *)__dst, (long long *)v8);
      if (!sub_6F2FD8((uint64_t)__dst)) {
        goto LABEL_11;
      }
      unint64_t v9 = *(void *)(v8 + 152);
      if (v5 + 1 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[149] - a1[148]) >> 5))
      {
        unint64_t v10 = sub_470ADC(a1);
        if (v9 <= v10) {
          unint64_t v11 = v10;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v9 < v10) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v13 = *(void *)(sub_4A65E4(v6, v5 + 1) + 152);
        if (v9 <= v13) {
          unint64_t v11 = v13;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v9 < v13)
        {
          do
          {
LABEL_10:
            unint64_t v12 = (unsigned int *)sub_470B40(a1, v9);
            unint64_t v14 = *v12 | ((unint64_t)(v12[1] & 0x1FFFFFFF) << 32);
            sub_7885EC(a2, &v14, &v14, (long long *)__dst);
            ++v9;
          }
          while (v11 != v9);
        }
      }
LABEL_11:
      if (v24 < 0)
      {
        operator delete(__p);
        if ((v22 & 0x80000000) == 0)
        {
LABEL_13:
          if ((v20 & 0x80000000) == 0) {
            goto LABEL_14;
          }
          goto LABEL_19;
        }
      }
      else if ((v22 & 0x80000000) == 0)
      {
        goto LABEL_13;
      }
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_14:
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_20;
      }
LABEL_19:
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_15:
        if (v16 < 0) {
          goto LABEL_21;
        }
        goto LABEL_3;
      }
LABEL_20:
      operator delete(v17);
      if (v16 < 0) {
LABEL_21:
      }
        operator delete(__dst[0]);
LABEL_3:
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_789D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4A50F4((uint64_t)va);
  sub_7885B0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_789D68@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((*(unsigned char *)(sub_470B40(a1, a2) + 7) & 0x20) != 0)
  {
    unsigned int v10 = sub_46CACC((uint64_t)a1, a2);
    uint64_t result = sub_470DAC((uint64_t)a1, a2);
    unsigned int v11 = result;
    unint64_t v15 = -1;
    unint64_t v12 = *a3;
    if (*a3 >= a3[1]) {
      return result;
    }
    goto LABEL_5;
  }
  int v8 = sub_470DAC((uint64_t)a1, a2);
  uint64_t result = sub_46CACC((uint64_t)a1, a2);
  unsigned int v10 = 1000000000 - v8;
  unsigned int v11 = 1000000000 - result;
  unint64_t v15 = -1;
  unint64_t v12 = *a3;
  if (*a3 < a3[1])
  {
LABEL_5:
    unsigned int v13 = -1;
    do
    {
      unsigned int v14 = *(_DWORD *)(v12 + 4);
      if (v14 >= v10)
      {
        if (v14 > v11) {
          return result;
        }
        if (*(unsigned char *)(v12 + 8))
        {
          if (v13 < 0x3B9ACA01)
          {
            HIDWORD(v15) = *(_DWORD *)(v12 + 4);
            uint64_t result = (uint64_t)sub_29603C((void **)a4, &v15);
            unint64_t v15 = -1;
LABEL_13:
            unsigned int v13 = -1;
          }
        }
        else
        {
          if (v10 == v14)
          {
            if (*(_DWORD *)v12 == 2)
            {
              unint64_t v15 = *(void *)&v10 | 0xFFFFFFFF00000000;
              *(unsigned char *)(v12 + 8) = 1;
              unsigned int v13 = v10;
            }
            goto LABEL_7;
          }
          if (v10 < v14 && v14 < v11)
          {
            if (v13 > 0x3B9ACA00 && v12 != *a3)
            {
              unsigned int v13 = *(_DWORD *)(v12 - 8);
              unint64_t v15 = *(void *)&v13 | 0xFFFFFFFF00000000;
            }
            *(unsigned char *)(v12 + 8) = 1;
            goto LABEL_7;
          }
          if (v14 == v11 && !*(_DWORD *)v12)
          {
            if (v13 <= 0x3B9ACA00) {
              goto LABEL_28;
            }
            if (v12 != *a3)
            {
              unsigned int v13 = *(_DWORD *)(v12 - 8);
              unint64_t v15 = *(void *)&v13 | 0xFFFFFFFF00000000;
            }
            if (v13 < 0x3B9ACA01)
            {
LABEL_28:
              if (v13 < v11)
              {
                HIDWORD(v15) = v11;
                uint64_t result = (uint64_t)sub_29603C((void **)a4, &v15);
              }
            }
            unint64_t v15 = -1;
            *(unsigned char *)(v12 + 8) = 1;
            goto LABEL_13;
          }
        }
      }
LABEL_7:
      v12 += 12;
    }
    while (v12 < a3[1]);
  }
  return result;
}

void sub_789F64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_789F80()
{
  byte_25B462F = 1;
  word_25B4618 = 65;
  byte_25B4647 = 1;
  word_25B4630 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25B46D8 = 0u;
  *(_OWORD *)&qword_25B46E8 = 0u;
  dword_25B46F8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B46D8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25B46D8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25B46D8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25B46D8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25B465F = 8;
  strcpy((char *)&qword_25B4648, "any_mode");
  byte_25B4677 = 7;
  strcpy((char *)&dword_25B4660, "cycling");
  byte_25B468F = 7;
  strcpy((char *)&dword_25B4678, "driving");
  byte_25B46A7 = 7;
  strcpy((char *)&dword_25B4690, "walking");
  qword_25B46B0 = 0;
  qword_25B46B8 = 0;
  qword_25B46A8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25B46A8 = (uint64_t)v0;
  qword_25B46B0 = (uint64_t)(v0 + 9);
  qword_25B46B8 = (uint64_t)(v0 + 9);
  qword_25B46C0 = 0;
  qword_25B46C8 = 0;
  unk_25B46D0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25B46C8 = (uint64_t)(v1 + 9);
  unk_25B46D0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25B46C0 = (uint64_t)v1;
  return result;
}

void sub_78A248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25B46E8) {
    sub_20AADF4((void **)qword_25B46E8);
  }
  uint64_t v37 = (void *)xmmword_25B46D8;
  *(void *)&xmmword_25B46D8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_78A2E8(uint64_t a1, void *a2, void *a3)
{
  sub_78A6C0(a1, a2, a3);

  sub_78AB68(a1, a2, a3);
}

void sub_78A338(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  char v4 = *(void **)v3;
  int v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    int64x2_t v6 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    do
    {
      int64x2_t v7 = v6;
      sub_78A4C8(a1, &v7, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_78A3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  char v4 = *(void **)v3;
  int v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    int64x2_t v6 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    do
    {
      int64x2_t v7 = v6;
      sub_78A6C0(a1, &v7, v4);
      sub_78AB68(a1, &v7, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_78A438(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  char v4 = *(uint64_t **)v3;
  int v5 = *(uint64_t **)(v3 + 8);
  if (*(uint64_t **)v3 != v5)
  {
    int64x2_t v6 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    do
    {
      int64x2_t v7 = v6;
      sub_78AD60(a1, &v7, v4);
      if (*(unsigned char *)(a1 + 80)) {
        sub_795EC4(v4);
      }
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_78A4C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1254];
  uint64_t v4 = a3[1255];
  if (v3 != v4)
  {
    int v8 = a3 + 1251;
    uint64_t v9 = a1 + 88;
    do
    {
      uint64_t v10 = sub_64F5D0((uint64_t)a3);
      if (sub_490BEC(a2))
      {
        uint64_t v12 = *(void *)(v3 + 8);
        if (v10 - v12 >= *a2 - a2[1])
        {
          unint64_t v27 = *(void *)(v3 + 24);
          uint64_t v28 = v12;
          goto LABEL_17;
        }
        uint64_t v13 = *(void *)(v3 + 8);
        uint64_t v14 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v13, v14);
        uint64_t v16 = v13 - v14;
        if ((v16 < 0) ^ v15 | (v16 == 0))
        {
LABEL_8:
          unint64_t v17 = *(void *)(v3 + 24);
          unint64_t v27 = v17;
          uint64_t v28 = 0;
          uint64_t v18 = v13;
          if (v13 >= 1) {
            goto LABEL_14;
          }
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(v3 + 8);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v13, v19);
        uint64_t v16 = v13 - v19;
        if ((v16 < 0) ^ v15 | (v16 == 0)) {
          goto LABEL_8;
        }
      }
      unint64_t v17 = *(void *)(v3 + 24);
      unint64_t v27 = v17;
      uint64_t v28 = v16;
      uint64_t v18 = v13 - v16;
      if (v13 - v16 >= 1)
      {
LABEL_14:
        uint64_t v20 = 0;
        do
        {
          if (!v17) {
            break;
          }
          v20 += sub_46CCC8(a3, v17, v11);
          unint64_t v17 = --v27;
        }
        while (v20 < v18);
      }
LABEL_17:
      sub_63BB70(8, v9, __p);
      char v25 = 8;
      BOOL v21 = (uint64_t *)(v3 + 16);
      char v22 = (uint64_t *)(v3 + 32);
      unint64_t v23 = a3[1252];
      if (v23 >= a3[1253])
      {
        uint64_t v24 = sub_78C3E0(v8, &v25, &v28, v21, (uint64_t *)&v27, v22, (uint64_t)__p);
      }
      else
      {
        sub_63B7EC(a3[1252], 8, &v28, v21, v27, *v22, (uint64_t)__p, 1);
        uint64_t v24 = v23 + 616;
        a3[1252] = v23 + 616;
      }
      a3[1252] = v24;
      *(unsigned char *)(v24 - 40) = 0;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v3 += 616;
    }
    while (v3 != v4);
  }
}

void sub_78A698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_78A6C0(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = a3[916];
    uint64_t v5 = a3[917];
    if (v4 != v5)
    {
      BOOL v7 = 0;
      unint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v39 = (void **)(a3 + 1254);
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3);
      do
      {
        unint64_t v11 = v9;
        unint64_t v9 = v10;
        while (1)
        {
          uint64_t v12 = v4 + 24 * v11;
          int v14 = *(_DWORD *)(v12 + 16);
          uint64_t v13 = (int *)(v12 + 16);
          if ((v14 & 0xFFFFFFFE) == 2)
          {
            if (!v7) {
              unint64_t v8 = v11;
            }
            if (v11 < v9)
            {
              uint64_t v36 = (int *)(v4 + 24 * v11 + 16);
              while (1)
              {
                int v37 = *v36;
                v36 += 6;
                if ((v37 & 0xFFFFFFFE) != 2) {
                  break;
                }
                if (v9 == ++v11) {
                  goto LABEL_39;
                }
              }
            }
            if (v11 != v9)
            {
              BOOL v7 = 1;
              unint64_t v9 = v11;
              goto LABEL_28;
            }
LABEL_39:
            sub_78C688(a1, v8, v9 - 1, a3, 1, (uint64_t)&v40);
            unint64_t v28 = a3[1255];
            if (v28 < a3[1256]) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
          if (!v7)
          {
            BOOL v7 = 0;
            unint64_t v9 = v11 + 1;
            goto LABEL_28;
          }
          unint64_t v15 = v11;
          if (v11 < v9)
          {
            unint64_t v15 = v11;
            while (1)
            {
              int v16 = *v13;
              v13 += 6;
              if ((v16 & 0xFFFFFFFE) == 2) {
                break;
              }
              if (v9 == ++v15) {
                goto LABEL_21;
              }
            }
          }
          if (v15 == v9) {
            break;
          }
          uint64_t v17 = sub_650F84((uint64_t)a3, v15);
          uint64_t v18 = sub_650F84((uint64_t)a3, v11);
          uint64_t v19 = *(void *)(a1 + 16);
          BOOL v7 = v17 - v18 <= v19;
          if (v17 - v18 > v19)
          {
            sub_78C688(a1, v8, v11, a3, 0, (uint64_t)&v40);
            unint64_t v20 = a3[1255];
            if (v20 >= a3[1256])
            {
              unint64_t v26 = sub_78CC68(v39, (uint64_t)&v40);
              unint64_t v27 = (void *)__p;
              a3[1255] = v26;
              if (v27)
              {
                *((void *)&__p + 1) = v27;
                operator delete(v27);
              }
            }
            else
            {
              long long v21 = v40;
              long long v22 = v42;
              uint64_t v23 = v43;
              *(_OWORD *)(v20 + 16) = v41;
              *(_OWORD *)(v20 + 32) = v22;
              *(_OWORD *)unint64_t v20 = v21;
              *(void *)(v20 + 48) = v23;
              *(void *)(v20 + 56) = 0;
              *(_OWORD *)(v20 + 64) = 0u;
              *(_OWORD *)(v20 + 56) = *(_OWORD *)v44;
              *(void *)(v20 + 72) = v45;
              *(_OWORD *)long long v44 = 0u;
              uint64_t v45 = 0;
              sub_571CE4(v20 + 80, v46);
              *(void *)(v20 + 568) = 0;
              *(_OWORD *)(v20 + 552) = 0u;
              *(_OWORD *)(v20 + 552) = __p;
              *(void *)(v20 + 568) = v48;
              long long __p = 0uLL;
              uint64_t v48 = 0;
              uint64_t v24 = v51;
              long long v25 = v50;
              *(_OWORD *)(v20 + 576) = v49;
              *(_OWORD *)(v20 + 592) = v25;
              *(void *)(v20 + 608) = v24;
              a3[1255] = v20 + 616;
            }
            sub_510298((uint64_t)v46);
            if (v44[0])
            {
              v44[1] = v44[0];
              operator delete(v44[0]);
            }
          }
          uint64_t v4 = a3[916];
          unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a3[917] - v4) >> 3);
          unint64_t v11 = v15;
          if (v15 >= v9) {
            goto LABEL_42;
          }
        }
LABEL_21:
        sub_78C688(a1, v8, v11, a3, 0, (uint64_t)&v40);
        unint64_t v28 = a3[1255];
        if (v28 < a3[1256])
        {
LABEL_22:
          long long v29 = v40;
          long long v30 = v42;
          uint64_t v31 = v43;
          *(_OWORD *)(v28 + 16) = v41;
          *(_OWORD *)(v28 + 32) = v30;
          *(_OWORD *)unint64_t v28 = v29;
          *(void *)(v28 + 48) = v31;
          *(void *)(v28 + 56) = 0;
          *(_OWORD *)(v28 + 64) = 0u;
          *(_OWORD *)(v28 + 56) = *(_OWORD *)v44;
          *(void *)(v28 + 72) = v45;
          *(_OWORD *)long long v44 = 0u;
          uint64_t v45 = 0;
          sub_571CE4(v28 + 80, v46);
          *(void *)(v28 + 568) = 0;
          *(_OWORD *)(v28 + 552) = 0u;
          *(_OWORD *)(v28 + 552) = __p;
          *(void *)(v28 + 568) = v48;
          long long __p = 0uLL;
          uint64_t v48 = 0;
          uint64_t v32 = v51;
          long long v33 = v50;
          *(_OWORD *)(v28 + 576) = v49;
          *(_OWORD *)(v28 + 592) = v33;
          *(void *)(v28 + 608) = v32;
          a3[1255] = v28 + 616;
          goto LABEL_25;
        }
LABEL_23:
        uint64_t v34 = sub_78CC68(v39, (uint64_t)&v40);
        uint64_t v35 = (void *)__p;
        a3[1255] = v34;
        if (v35)
        {
          *((void *)&__p + 1) = v35;
          operator delete(v35);
        }
LABEL_25:
        sub_510298((uint64_t)v46);
        if (v44[0])
        {
          v44[1] = v44[0];
          operator delete(v44[0]);
        }
        BOOL v7 = 1;
LABEL_28:
        uint64_t v4 = a3[916];
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a3[917] - v4) >> 3);
      }
      while (v9 < v10);
LABEL_42:
      *(void *)&long long v40 = sub_64F5D0((uint64_t)a3);
      sub_78B3E8(a1, a2, &v40, (uint64_t *)v39);
    }
  }
}

void sub_78AB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_50E1E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_78AB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_50E1E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_78AB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_50E1E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_78AB68(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1254];
  uint64_t v4 = a3[1255];
  if (v3 != v4)
  {
    unint64_t v8 = a3 + 1251;
    uint64_t v9 = a1 + 88;
    do
    {
      uint64_t v10 = sub_64F5D0((uint64_t)a3);
      if (sub_490BEC(a2))
      {
        uint64_t v12 = *(void *)(v3 + 8);
        if (v10 - v12 >= *a2 - a2[1])
        {
          unint64_t v27 = *(void *)(v3 + 24);
          uint64_t v28 = v12;
          goto LABEL_17;
        }
        uint64_t v13 = *(void *)(v3 + 8);
        uint64_t v14 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v13, v14);
        uint64_t v16 = v13 - v14;
        if ((v16 < 0) ^ v15 | (v16 == 0))
        {
LABEL_8:
          unint64_t v17 = *(void *)(v3 + 24);
          unint64_t v27 = v17;
          uint64_t v28 = 0;
          uint64_t v18 = v13;
          if (v13 >= 1) {
            goto LABEL_14;
          }
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(v3 + 8);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v13, v19);
        uint64_t v16 = v13 - v19;
        if ((v16 < 0) ^ v15 | (v16 == 0)) {
          goto LABEL_8;
        }
      }
      unint64_t v17 = *(void *)(v3 + 24);
      unint64_t v27 = v17;
      uint64_t v28 = v16;
      uint64_t v18 = v13 - v16;
      if (v13 - v16 >= 1)
      {
LABEL_14:
        uint64_t v20 = 0;
        do
        {
          if (!v17) {
            break;
          }
          v20 += sub_46CCC8(a3, v17, v11);
          unint64_t v17 = --v27;
        }
        while (v20 < v18);
      }
LABEL_17:
      sub_63BB70(8, v9, __p);
      char v25 = 8;
      long long v21 = (uint64_t *)(v3 + 16);
      long long v22 = (uint64_t *)(v3 + 32);
      unint64_t v23 = a3[1252];
      if (v23 >= a3[1253])
      {
        uint64_t v24 = sub_78C3E0(v8, &v25, &v28, v21, (uint64_t *)&v27, v22, (uint64_t)__p);
      }
      else
      {
        sub_63B7EC(a3[1252], 8, &v28, v21, v27, *v22, (uint64_t)__p, 1);
        uint64_t v24 = v23 + 616;
        a3[1252] = v23 + 616;
      }
      a3[1252] = v24;
      *(unsigned char *)(v24 - 40) = 0;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v3 += 616;
    }
    while (v3 != v4);
  }
}

void sub_78AD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_78AD60(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1254];
  uint64_t v4 = a3[1255];
  if (v3 != v4)
  {
    unint64_t v8 = a3 + 1251;
    uint64_t v9 = a1 + 88;
    do
    {
      uint64_t v10 = sub_64F5D0((uint64_t)a3);
      if (sub_490BEC(a2))
      {
        uint64_t v12 = *(void *)(v3 + 8);
        if (v10 - v12 >= *a2 - a2[1])
        {
          unint64_t v27 = *(void *)(v3 + 24);
          uint64_t v28 = v12;
          goto LABEL_17;
        }
        uint64_t v13 = *(void *)(v3 + 8);
        uint64_t v14 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v13, v14);
        uint64_t v16 = v13 - v14;
        if ((v16 < 0) ^ v15 | (v16 == 0))
        {
LABEL_8:
          unint64_t v17 = *(void *)(v3 + 24);
          unint64_t v27 = v17;
          uint64_t v28 = 0;
          uint64_t v18 = v13;
          if (v13 >= 1) {
            goto LABEL_14;
          }
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(v3 + 8);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v13, v19);
        uint64_t v16 = v13 - v19;
        if ((v16 < 0) ^ v15 | (v16 == 0)) {
          goto LABEL_8;
        }
      }
      unint64_t v17 = *(void *)(v3 + 24);
      unint64_t v27 = v17;
      uint64_t v28 = v16;
      uint64_t v18 = v13 - v16;
      if (v13 - v16 >= 1)
      {
LABEL_14:
        uint64_t v20 = 0;
        do
        {
          if (!v17) {
            break;
          }
          v20 += sub_470F2C(a3, v17, v11);
          unint64_t v17 = --v27;
        }
        while (v20 < v18);
      }
LABEL_17:
      sub_63BB70(8, v9, __p);
      char v25 = 8;
      long long v21 = (uint64_t *)(v3 + 16);
      long long v22 = (uint64_t *)(v3 + 32);
      unint64_t v23 = a3[1252];
      if (v23 >= a3[1253])
      {
        uint64_t v24 = sub_78C3E0(v8, &v25, &v28, v21, (uint64_t *)&v27, v22, (uint64_t)__p);
      }
      else
      {
        sub_63B7EC(a3[1252], 8, &v28, v21, v27, *v22, (uint64_t)__p, 1);
        uint64_t v24 = v23 + 616;
        a3[1252] = v23 + 616;
      }
      a3[1252] = v24;
      *(unsigned char *)(v24 - 40) = 0;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v3 += 616;
    }
    while (v3 != v4);
  }
}

void sub_78AF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_78AF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  uint64_t v14 = 0;
  BOOL v15 = operator new(0x20uLL);
  long long v16 = xmmword_20B91A0;
  strcpy((char *)v15, "RouteLineStyleInfoPopulator");
  long long __p = 0;
  uint64_t v13 = 0;
  int64x2_t v6 = sub_374CDC(a2, (uint64_t)&v15, (uint64_t *)&__p);
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 48) = 0x7FFFFFFF;
  *(void *)(a1 + 68) = -1;
  *(_DWORD *)(a1 + 76) = -1;
  sub_78B63C(a1 + 8, v6);
  BOOL v7 = (void **)__p;
  if (__p)
  {
    unint64_t v8 = v13;
    uint64_t v9 = __p;
    if (v13 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15);
  }
  sub_725694(a1 + 88, a2);
  sub_4BBDC0(a1 + 168, a3);
  uint64_t v10 = (uint64_t *)sub_374EF4(*(uint64_t **)a1);
  sub_688A04(v10, 3u, *(_DWORD *)(a3 + 968), (uint64_t *)(a1 + 1704));
  return a1;
}

void sub_78B0AC(_Unwind_Exception *a1)
{
  sub_4BCED0(v1);
  _Unwind_Resume(a1);
}

void sub_78B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_78B0E8(uint64_t a1, _DWORD *a2, int *a3)
{
  BOOL v7 = *(char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    double v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v7[-*(void *)a1];
    uint64_t v13 = v12 >> 3;
    unint64_t v14 = (v12 >> 3) + 1;
    if (v14 >> 61) {
      sub_2E00();
    }
    uint64_t v15 = v6 - (void)v11;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    BOOL v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v16) {
      unint64_t v17 = v14;
    }
    if (v17 >> 61) {
      sub_188D718();
    }
    uint64_t v18 = 8 * v17;
    uint64_t v19 = operator new(8 * v17);
    int v20 = *a3;
    long long v21 = &v19[8 * v13];
    *long long v21 = *a2;
    v21[1] = v20;
    uint64_t v10 = v21 + 2;
    if (v7 != v11)
    {
      unint64_t v22 = v7 - v11 - 8;
      if (v22 < 0x58) {
        goto LABEL_23;
      }
      if ((unint64_t)(&v7[-v12] - v19) < 0x20) {
        goto LABEL_23;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v8 = &v7[-v24];
      long long v21 = (_DWORD *)((char *)v21 - v24);
      char v25 = &v19[8 * v13 - 16];
      unint64_t v26 = v7 - 16;
      uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *char v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        do
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v21 - 1) = v29;
          v21 -= 2;
        }
        while (v8 != v11);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = &v19[v18];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    int v9 = *a3;
    *(_DWORD *)BOOL v7 = *a2;
    *((_DWORD *)v7 + 1) = v9;
    uint64_t v10 = v7 + 8;
  }
  *(void *)(a1 + 8) = v10;
  return v10 - 2;
}

BOOL sub_78B25C(uint64_t a1, void *a2)
{
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v12 = 1065353216;
  if (*(unsigned char *)(a1 + 52))
  {
    int v9 = 0;
    sub_78BFB4((uint64_t)v10, &v9, &v9);
  }
  if (*(unsigned char *)(a1 + 53))
  {
    int v9 = 1;
    sub_78BFB4((uint64_t)v10, &v9, &v9);
  }
  if (*(unsigned char *)(a1 + 54))
  {
    int v9 = 2;
    sub_78BFB4((uint64_t)v10, &v9, &v9);
  }
  if (*(unsigned char *)(a1 + 55))
  {
    int v9 = 3;
    sub_78BFB4((uint64_t)v10, &v9, &v9);
  }
  if (__p[1])
  {
    BOOL v4 = (double)sub_63B200(a2 + 73, (uint64_t)v10) / (double)(uint64_t)(a2[2] - a2[1]) >= *(double *)(a1 + 56);
    uint64_t v5 = __p[0];
    if (!__p[0]) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v4 = 0;
    uint64_t v5 = __p[0];
    if (!__p[0]) {
      goto LABEL_12;
    }
  }
  do
  {
    unint64_t v6 = (void *)*v5;
    operator delete(v5);
    uint64_t v5 = v6;
  }
  while (v6);
LABEL_12:
  BOOL v7 = v10[0];
  v10[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  return v4;
}

void sub_78B384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_78B398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_78B3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_78B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_78B3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_78B3E8(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  uint64_t v6 = a4[1];
  if (*a4 == v6) {
    goto LABEL_26;
  }
  uint64_t v10 = a4[1];
  while (1)
  {
    if (!sub_490BEC(a2) || *a3 - *(void *)(v5 + 8) < *a2 - a2[1])
    {
      int v11 = *(_DWORD *)(v5 + 80);
      int v12 = *(_DWORD *)(a1 + 48);
      BOOL v13 = sub_78B25C(a1, (void *)v5);
      if (v11 < v12 || !v13) {
        break;
      }
    }
    v5 += 616;
    if (v5 == v6) {
      goto LABEL_27;
    }
  }
  if (v5 != v6)
  {
    if (v5 + 616 != v6)
    {
      uint64_t v10 = v5;
      do
      {
        if (sub_490BEC(a2) && *a3 - *(void *)(v5 + 624) >= *a2 - a2[1]
          || ((int v18 = *(_DWORD *)(v5 + 696),
               int v19 = *(_DWORD *)(a1 + 48),
               BOOL v20 = sub_78B25C(a1, (void *)(v5 + 616)),
               v18 >= v19)
            ? (BOOL v21 = !v20)
            : (BOOL v21 = 1),
              !v21))
        {
          long long v22 = *(_OWORD *)(v5 + 616);
          long long v23 = *(_OWORD *)(v5 + 632);
          long long v24 = *(_OWORD *)(v5 + 648);
          *(void *)(v10 + 48) = *(void *)(v5 + 664);
          *(_OWORD *)(v10 + 16) = v23;
          *(_OWORD *)(v10 + 32) = v24;
          *(_OWORD *)uint64_t v10 = v22;
          char v25 = *(void **)(v10 + 56);
          if (v25)
          {
            *(void *)(v10 + 64) = v25;
            operator delete(v25);
            *(void *)(v10 + 56) = 0;
            *(void *)(v10 + 64) = 0;
            *(void *)(v10 + 72) = 0;
          }
          *(_OWORD *)(v10 + 56) = *(_OWORD *)(v5 + 672);
          *(void *)(v10 + 72) = *(void *)(v5 + 688);
          *(void *)(v5 + 672) = 0;
          *(void *)(v5 + 680) = 0;
          *(void *)(v5 + 688) = 0;
          sub_5729B0(v10 + 80, (uint64_t *)(v5 + 696));
          unint64_t v26 = (void *)(v10 + 552);
          uint64_t v27 = *(void **)(v10 + 552);
          if (v27)
          {
            *(void *)(v10 + 560) = v27;
            operator delete(v27);
            void *v26 = 0;
            *(void *)(v10 + 560) = 0;
            *(void *)(v10 + 568) = 0;
          }
          *(_OWORD *)unint64_t v26 = *(_OWORD *)(v5 + 1168);
          *(void *)(v10 + 568) = *(void *)(v5 + 1184);
          *(void *)(v5 + 1184) = 0;
          *(_OWORD *)(v5 + 1168) = 0u;
          long long v15 = *(_OWORD *)(v5 + 1192);
          long long v16 = *(_OWORD *)(v5 + 1208);
          *(void *)(v10 + 608) = *(void *)(v5 + 1224);
          *(_OWORD *)(v10 + 576) = v15;
          *(_OWORD *)(v10 + 592) = v16;
          v10 += 616;
        }
        uint64_t v17 = v5 + 1232;
        v5 += 616;
      }
      while (v17 != v6);
      goto LABEL_27;
    }
LABEL_26:
    uint64_t v10 = v5;
  }
LABEL_27:
  long long v28 = (long long *)a4[1];
  if ((long long *)v10 != v28)
  {
    sub_78C2E0(v28, (long long *)a4[1], v10);
    uint64_t v30 = v29;
    uint64_t v31 = a4[1];
    if (v31 != v29)
    {
      uint64_t v32 = v31 - 560;
      do
      {
        uint64_t v34 = *(void **)(v32 + 496);
        if (v34)
        {
          *(void *)(v32 + 504) = v34;
          operator delete(v34);
        }
        sub_510298(v32 + 24);
        uint64_t v35 = *(void **)v32;
        if (*(void *)v32)
        {
          *(void *)(v32 + 8) = v35;
          operator delete(v35);
        }
        uint64_t v33 = v32 - 56;
        v32 -= 616;
      }
      while (v33 != v30);
    }
    a4[1] = v30;
  }
}

void sub_78B63C(uint64_t a1, void *a2)
{
  uint64_t v27 = (char *)operator new(0x20uLL);
  long long v28 = xmmword_20B8E90;
  strcpy(v27, "enable_traffic_delays_detection");
  BOOL v4 = sub_58070(a2, (uint64_t)&v27);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  operator delete(v27);
LABEL_7:
  uint64_t v27 = (char *)operator new(0x20uLL);
  long long v28 = xmmword_20B9800;
  strcpy(v27, "max_traffic_delay_gap_distance");
  sub_5C8A4(a2, (uint64_t)&v27, (uint64_t *)(a1 + 8));
  if (SHIBYTE(v28) < 0) {
    operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x28uLL);
  long long v28 = xmmword_20B93A0;
  strcpy(v27, "traffic_delay_camera_ahead_distance");
  sub_5C8A4(a2, (uint64_t)&v27, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v28) < 0) {
    operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x28uLL);
  long long v28 = xmmword_20B9960;
  strcpy(v27, "traffic_delay_label_style_attribute_key");
  uint64_t v6 = sub_58070(a2, (uint64_t)&v27);
  if (v6 && *((_DWORD *)v6 + 12) == 1)
  {
    *(_DWORD *)(a1 + 24) = *((double *)v6 + 5);
    if (SHIBYTE(v28) < 0) {
      goto LABEL_16;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24);
    if (SHIBYTE(v28) < 0) {
LABEL_16:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x30uLL);
  long long v28 = xmmword_20B9A80;
  strcpy(v27, "traffic_delay_label_style_attribute_slow_value");
  BOOL v7 = sub_58070(a2, (uint64_t)&v27);
  if (v7 && *((_DWORD *)v7 + 12) == 1)
  {
    *(_DWORD *)(a1 + 28) = *((double *)v7 + 5);
    if (SHIBYTE(v28) < 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28);
    if (SHIBYTE(v28) < 0) {
LABEL_22:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x38uLL);
  long long v28 = xmmword_20B9A60;
  strcpy(v27, "traffic_delay_label_style_attribute_medium_value");
  unint64_t v8 = sub_58070(a2, (uint64_t)&v27);
  if (v8 && *((_DWORD *)v8 + 12) == 1)
  {
    *(_DWORD *)(a1 + 32) = *((double *)v8 + 5);
    if (SHIBYTE(v28) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32);
    if (SHIBYTE(v28) < 0) {
LABEL_28:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x28uLL);
  long long v28 = xmmword_20B9240;
  strcpy(v27, "traffic_delay_label_artwork_shield_id");
  int v9 = sub_58070(a2, (uint64_t)&v27);
  if (v9 && *((_DWORD *)v9 + 12) == 1)
  {
    *(_DWORD *)(a1 + 36) = *((double *)v9 + 5);
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 36);
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  operator delete(v27);
LABEL_35:
  uint64_t v27 = (char *)operator new(0x20uLL);
  long long v28 = xmmword_20B91B0;
  strcpy(v27, "traffic_delay_min_delay_time");
  sub_5D498(a2, (uint64_t)&v27, (_DWORD *)(a1 + 40));
  if (SHIBYTE(v28) < 0) {
    operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x20uLL);
  long long v28 = xmmword_20B8E90;
  strcpy(v27, "enable_lane_guidance_animations");
  uint64_t v10 = sub_58070(a2, (uint64_t)&v27);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 56) = v11 == 4;
    if (SHIBYTE(v28) < 0) {
      goto LABEL_42;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 56) != 0;
    if (SHIBYTE(v28) < 0) {
LABEL_42:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x28uLL);
  long long v28 = xmmword_20B9390;
  strcpy(v27, "lg_animation_style_attribute_key");
  int v12 = sub_58070(a2, (uint64_t)&v27);
  if (v12 && *((_DWORD *)v12 + 12) == 1)
  {
    *(_DWORD *)(a1 + 60) = *((double *)v12 + 5);
    if (SHIBYTE(v28) < 0) {
      goto LABEL_48;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 60);
    if (SHIBYTE(v28) < 0) {
LABEL_48:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x38uLL);
  long long v28 = xmmword_20B99F0;
  strcpy(v27, "lg_animation_style_attribute_bifurcation_left_value");
  BOOL v13 = sub_58070(a2, (uint64_t)&v27);
  if (v13 && *((_DWORD *)v13 + 12) == 1)
  {
    *(_DWORD *)(a1 + 64) = *((double *)v13 + 5);
    if (SHIBYTE(v28) < 0) {
      goto LABEL_54;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 64);
    if (SHIBYTE(v28) < 0) {
LABEL_54:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x38uLL);
  long long v28 = xmmword_20B9AC0;
  strcpy(v27, "lg_animation_style_attribute_bifurcation_right_value");
  unint64_t v14 = sub_58070(a2, (uint64_t)&v27);
  if (v14 && *((_DWORD *)v14 + 12) == 1)
  {
    *(_DWORD *)(a1 + 68) = *((double *)v14 + 5);
    if (SHIBYTE(v28) < 0) {
      goto LABEL_60;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a1 + 68);
    if (SHIBYTE(v28) < 0) {
LABEL_60:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x28uLL);
  long long v28 = xmmword_20B9240;
  strcpy(v27, "prefer_traffic_delay_on_freeway_roads");
  long long v15 = sub_58070(a2, (uint64_t)&v27);
  if (v15 && (int v16 = *((_DWORD *)v15 + 12), (v16 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 44) = v16 == 4;
    if (SHIBYTE(v28) < 0) {
      goto LABEL_66;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 44) = *(unsigned char *)(a1 + 44) != 0;
    if (SHIBYTE(v28) < 0) {
LABEL_66:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x30uLL);
  long long v28 = xmmword_20E1380;
  strcpy(v27, "prefer_traffic_delay_on_major_arterial_roads");
  uint64_t v17 = sub_58070(a2, (uint64_t)&v27);
  if (v17 && (int v18 = *((_DWORD *)v17 + 12), (v18 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 45) = v18 == 4;
    if (SHIBYTE(v28) < 0) {
      goto LABEL_72;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 45) = *(unsigned char *)(a1 + 45) != 0;
    if (SHIBYTE(v28) < 0) {
LABEL_72:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x30uLL);
  long long v28 = xmmword_20E1380;
  strcpy(v27, "prefer_traffic_delay_on_minor_arterial_roads");
  int v19 = sub_58070(a2, (uint64_t)&v27);
  if (v19 && (int v20 = *((_DWORD *)v19 + 12), (v20 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 46) = v20 == 4;
    if (SHIBYTE(v28) < 0) {
      goto LABEL_78;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 46) = *(unsigned char *)(a1 + 46) != 0;
    if (SHIBYTE(v28) < 0) {
LABEL_78:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x28uLL);
  long long v28 = xmmword_20B93A0;
  strcpy(v27, "prefer_traffic_delay_on_local_roads");
  BOOL v21 = sub_58070(a2, (uint64_t)&v27);
  if (v21 && (int v22 = *((_DWORD *)v21 + 12), (v22 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 47) = v22 == 4;
    if (SHIBYTE(v28) < 0) {
      goto LABEL_84;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 47) = *(unsigned char *)(a1 + 47) != 0;
    if (SHIBYTE(v28) < 0) {
LABEL_84:
    }
      operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x30uLL);
  long long v28 = xmmword_20B9A80;
  strcpy(v27, "traffic_delay_desired_road_type_coverage_ratio");
  long long v23 = sub_58070(a2, (uint64_t)&v27);
  long long v24 = (void *)(a1 + 48);
  if (v23)
  {
    long long v24 = v23 + 5;
    if (*((_DWORD *)v23 + 12) != 1) {
      long long v24 = (void *)(a1 + 48);
    }
  }
  *(void *)(a1 + 48) = *v24;
  if (SHIBYTE(v28) < 0) {
    operator delete(v27);
  }
  uint64_t v27 = (char *)operator new(0x28uLL);
  long long v28 = xmmword_20E12D0;
  strcpy(v27, "enable_line_traversal_direction_arrows");
  char v25 = sub_58070(a2, (uint64_t)&v27);
  if (v25 && (int v26 = *((_DWORD *)v25 + 12), (v26 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 72) = v26 == 4;
    if (SHIBYTE(v28) < 0) {
      goto LABEL_96;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a1 + 72) != 0;
    if (SHIBYTE(v28) < 0) {
LABEL_96:
    }
      operator delete(v27);
  }
}

void sub_78BF54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_78BFB4(uint64_t a1, int *a2, _DWORD *a3)
{
  int v6 = *a2;
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v8 <= v7) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v6) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v6) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v3) {
              break;
            }
          }
          int v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  long long v15 = operator new(0x18uLL);
  *long long v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = *a3;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    int v19 = *(void **)(*(void *)a1 + 8 * v3);
    if (v19)
    {
LABEL_26:
      *long long v15 = *v19;
LABEL_61:
      void *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        unint64_t v3 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        int v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v7;
        uint64_t v18 = *(void *)a1;
        int v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
      uint64_t v18 = *(void *)a1;
      int v19 = *(void **)(*(void *)a1 + 8 * v3);
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *long long v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_78C2CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

long long *sub_78C2E0(long long *a1, long long *a2, uint64_t a3)
{
  BOOL v4 = a1;
  if (a1 != a2)
  {
    do
    {
      long long v9 = *v4;
      long long v10 = v4[1];
      long long v11 = v4[2];
      *(void *)(a3 + 48) = *((void *)v4 + 6);
      *(_OWORD *)(a3 + 16) = v10;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)a3 = v9;
      unint64_t v12 = *(void **)(a3 + 56);
      if (v12)
      {
        *(void *)(a3 + 64) = v12;
        operator delete(v12);
        *(void *)(a3 + 56) = 0;
        *(void *)(a3 + 64) = 0;
        *(void *)(a3 + 72) = 0;
      }
      *(_OWORD *)(a3 + 56) = *(long long *)((char *)v4 + 56);
      *(void *)(a3 + 72) = *((void *)v4 + 9);
      *((void *)v4 + 7) = 0;
      *((void *)v4 + 8) = 0;
      *((void *)v4 + 9) = 0;
      uint64_t v13 = v4 + 5;
      sub_5729B0(a3 + 80, (uint64_t *)v13);
      unint64_t v14 = *(void **)(a3 + 552);
      if (v14)
      {
        *(void *)(a3 + 560) = v14;
        operator delete(v14);
        *(void *)(a3 + 552) = 0;
        *(void *)(a3 + 560) = 0;
        *(void *)(a3 + 568) = 0;
      }
      uint64_t v6 = *((void *)v13 + 60);
      *(void *)(a3 + 552) = *((void *)v13 + 59);
      *(void *)(a3 + 560) = v6;
      *(void *)(a3 + 568) = *((void *)v13 + 61);
      *((void *)v13 + 59) = 0;
      *((void *)v13 + 60) = 0;
      *((void *)v13 + 61) = 0;
      long long v7 = v13[31];
      long long v8 = v13[32];
      *(void *)(a3 + 608) = *((void *)v13 + 66);
      *(_OWORD *)(a3 + 576) = v7;
      *(_OWORD *)(a3 + 592) = v8;
      a3 += 616;
      BOOL v4 = (long long *)((char *)v13 + 536);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_78C3E0(uint64_t *a1, char *a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v8 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x6A63BD81A98EF6) {
    sub_2E00();
  }
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v9) {
    unint64_t v9 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL) {
    unint64_t v16 = 0x6A63BD81A98EF6;
  }
  else {
    unint64_t v16 = v9;
  }
  if (v16)
  {
    if (v16 > 0x6A63BD81A98EF6) {
      sub_188D718();
    }
    float v17 = (char *)operator new(616 * v16);
  }
  else
  {
    float v17 = 0;
  }
  uint64_t v38 = (uint64_t)&v17[616 * v8];
  uint64_t v39 = &v17[616 * v16];
  sub_63B7EC(v38, *a2, a3, a4, *a5, *a6, a7, 1);
  uint64_t v18 = v38 + 616;
  BOOL v20 = (char *)*a1;
  int v19 = (char *)a1[1];
  if (v19 == (char *)*a1)
  {
    *a1 = v38;
    a1[1] = v18;
    a1[2] = (uint64_t)v39;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = v38 + v21;
      uint64_t v23 = v38 + v21 - 616;
      unint64_t v24 = &v19[v21];
      long long v25 = *(_OWORD *)&v19[v21 - 616];
      long long v26 = *(_OWORD *)&v19[v21 - 600];
      long long v27 = *(_OWORD *)&v19[v21 - 584];
      *(void *)(v23 + 48) = *(void *)&v19[v21 - 568];
      *(_OWORD *)(v23 + 16) = v26;
      *(_OWORD *)(v23 + 32) = v27;
      *(_OWORD *)uint64_t v23 = v25;
      uint64_t v28 = v38 + v21 - 560;
      uint64_t v29 = (uint64_t)&v19[v21 - 560];
      *(void *)uint64_t v28 = 0;
      *(_OWORD *)(v28 + 8) = 0u;
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      *(void *)(v38 + v21 - 544) = *(void *)&v19[v21 - 544];
      *(void *)(v29 + 16) = 0;
      *(_OWORD *)uint64_t v29 = 0u;
      sub_571CE4(v38 + v21 - 536, (uint64_t *)&v19[v21 - 536]);
      *(void *)(v22 - 64) = 0;
      *(void *)(v22 - 56) = 0;
      *(void *)(v22 - 48) = 0;
      *(_OWORD *)(v22 - 64) = *(_OWORD *)&v19[v21 - 64];
      *(void *)(v22 - 48) = *(void *)&v19[v21 - 48];
      *((void *)v24 - 8) = 0;
      *((void *)v24 - 7) = 0;
      *((void *)v24 - 6) = 0;
      long long v30 = *(_OWORD *)&v19[v21 - 40];
      long long v31 = *(_OWORD *)&v19[v21 - 24];
      *(void *)(v22 - 8) = *(void *)&v19[v21 - 8];
      *(_OWORD *)(v22 - 24) = v31;
      *(_OWORD *)(v22 - 40) = v30;
      v21 -= 616;
    }
    while (&v19[v21] != v20);
    uint64_t v32 = (char *)*a1;
    int v19 = (char *)a1[1];
    *a1 = v38 + v21;
    a1[1] = v18;
    a1[2] = (uint64_t)v39;
    if (v19 != v32)
    {
      uint64_t v33 = v19 - 560;
      do
      {
        uint64_t v35 = (void *)*((void *)v33 + 62);
        if (v35)
        {
          *((void *)v33 + 63) = v35;
          operator delete(v35);
        }
        sub_510298((uint64_t)(v33 + 24));
        uint64_t v36 = *(void **)v33;
        if (*(void *)v33)
        {
          *((void *)v33 + 1) = v36;
          operator delete(v36);
        }
        uint64_t v34 = v33 - 56;
        v33 -= 616;
      }
      while (v34 != v32);
      int v19 = v32;
    }
  }
  if (v19) {
    operator delete(v19);
  }
  return v38 + 616;
}

void sub_78C674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7079FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_78C688@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v41 = sub_650F84((uint64_t)a4, a2);
  if (a5)
  {
    uint64_t v40 = sub_64F5D0((uint64_t)a4);
    uint64_t v12 = sub_650F98((uint64_t)a4, a2);
    unint64_t v13 = sub_46C760(a4) - 1;
  }
  else
  {
    uint64_t v40 = sub_650F84((uint64_t)a4, a3);
    uint64_t v12 = sub_650F98((uint64_t)a4, a2);
    unint64_t v13 = sub_650F98((uint64_t)a4, a3);
  }
  sub_63B374(a6, &v41, &v40, 1);
  *(unsigned char *)(a6 + 576) = 0;
  *(void *)(a6 + 24) = v12;
  *(void *)(a6 + 32) = v13;
  uint64_t v15 = sub_46CE8C(a4, v12, v14);
  *(void *)(a6 + 40) = v41 - v15;
  uint64_t v17 = sub_46CE10(a4, v12, 1, v13, 0, v16);
  *(void *)(a6 + 48) = v40 - (v17 + v15);
  sub_78CF10((void **)a1, a2, a3, a4, a5, (uint64_t)&v36);
  unint64_t v52 = 0x8000000080000000;
  sub_5F3B34((uint64_t)&v54);
  sub_5F3B34((uint64_t)v57);
  *(_DWORD *)((char *)v60 + 3) = -1;
  LODWORD(v60[0]) = -1;
  memset((char *)v60 + 7, 0, 26);
  memset(&v61, 0, sizeof(v61));
  char v62 = 0;
  unsigned int v64 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v52 = v36;
  int v59 = -1;
  int v53 = v37;
  v42[0] = 0;
  v42[1] = 0;
  uint64_t v43 = 0;
  uint64_t v18 = 40;
  if (v37 == 2) {
    uint64_t v18 = 36;
  }
  int v28 = *(_DWORD *)(a1 + v18);
  sub_78B0E8((uint64_t)v42, (_DWORD *)(a1 + 32), &v28);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)long long __p = *(_OWORD *)v42;
  unsigned int v64 = v43;
  int v19 = sub_8D7730(*(void *)(a1 + 1704), (uint64_t)&qword_25B8398);
  if (*((char *)v19 + 23) < 0)
  {
    sub_4200(__dst, (void *)*v19, v19[1]);
  }
  else
  {
    long long v20 = *(_OWORD *)v19;
    uint64_t v35 = v19[2];
    *(_OWORD *)std::string __dst = v20;
  }
  uint64_t v21 = v55;
  if ((unint64_t)v55 >= v56)
  {
    uint64_t v23 = sub_1D740(&v54, (uint64_t)__dst);
  }
  else
  {
    if (SHIBYTE(v35) < 0)
    {
      sub_4200(v55, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      long long v22 = *(_OWORD *)__dst;
      *((void *)v55 + 2) = v35;
      *uint64_t v21 = v22;
    }
    uint64_t v23 = (char *)v21 + 24;
  }
  char v55 = v23;
  sub_5F3D48((uint64_t)v42, (uint64_t)&qword_25B7C90);
  sub_4D90B4((uint64_t)v57, (uint64_t)v42);
  sub_4D4B58((uint64_t)v42);
  sub_5F657C(v57, (uint64_t)&qword_25B7C90, SHIDWORD(v52));
  int v28 = *(_DWORD *)(a1 + 44);
  __int16 v29 = -1;
  char v30 = -1;
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  char v33 = 0;
  sub_524ADC((uint64_t)v42, (uint64_t)&v28, 0);
  sub_4F377C((uint64_t)&v58, (uint64_t)v42);
  v60[0] = v46;
  if (SHIBYTE(v60[3]) < 0) {
    operator delete((void *)v60[1]);
  }
  *(_OWORD *)&v60[1] = *(_OWORD *)v47;
  v60[3] = v48;
  HIBYTE(v48) = 0;
  LOBYTE(v47[0]) = 0;
  LOBYTE(v60[4]) = v49;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v61.__r_.__value_.__l.__data_);
    std::string v61 = v50;
    *((unsigned char *)&v50.__r_.__value_.__s + 23) = 0;
    v50.__r_.__value_.__s.__data_[0] = 0;
    char v62 = v51;
    if (SHIBYTE(v48) < 0)
    {
      operator delete(v47[0]);
      int v24 = v45;
      if (v45 == 1) {
        goto LABEL_21;
      }
    }
    else
    {
      int v24 = v45;
      if (v45 == 1) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    std::string v61 = v50;
    *((unsigned char *)&v50.__r_.__value_.__s + 23) = 0;
    v50.__r_.__value_.__s.__data_[0] = 0;
    char v62 = v51;
    int v24 = v45;
    if (v45 == 1)
    {
LABEL_21:
      long long v25 = v42[1];
      if (!v42[1]) {
        goto LABEL_29;
      }
      uint64_t v43 = v42[1];
      goto LABEL_28;
    }
  }
  if (!v24 && v44 < 0)
  {
    long long v25 = v42[1];
LABEL_28:
    operator delete(v25);
  }
LABEL_29:
  if (v33 < 0) {
    operator delete(*(void **)((char *)&v31 + 1));
  }
  *(void *)(a6 + 80) = v52;
  *(_DWORD *)(a6 + 88) = v53;
  sub_52FD00(a6 + 96, (uint64_t)&v54);
  sub_52FD00(a6 + 256, (uint64_t)v57);
  sub_4F39B8(a6 + 416, &v58);
  *(void *)(a6 + 456) = v60[0];
  std::string::operator=((std::string *)(a6 + 464), (const std::string *)&v60[1]);
  *(unsigned char *)(a6 + 488) = v60[4];
  std::string::operator=((std::string *)(a6 + 496), &v61);
  *(unsigned char *)(a6 + 520) = v62;
  if ((unint64_t *)(a6 + 80) != &v52) {
    sub_326C0((void *)(a6 + 528), (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  }
  long long v26 = v39;
  *(_OWORD *)(a6 + 584) = v38;
  *(_OWORD *)(a6 + 600) = v26;
  if (SHIBYTE(v35) < 0) {
    operator delete(__dst[0]);
  }
  return sub_510298((uint64_t)&v52);
}

void sub_78CB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_510298((uint64_t)&a51);
  sub_50E1E8(v54);
  _Unwind_Resume(a1);
}

char *sub_78CC68(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x4FCACE213F2B3885 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6A63BD81A98EF6) {
    sub_2E00();
  }
  if (0x9F959C427E56710ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9F959C427E56710ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x4FCACE213F2B3885 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x3531DEC0D4C77BLL) {
    unint64_t v6 = 0x6A63BD81A98EF6;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x6A63BD81A98EF6) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(616 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  unint64_t v9 = &v7[616 * v3];
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  long long v10 = &v7[616 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = *(void *)(a2 + 72);
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  sub_571CE4((uint64_t)(v9 + 80), (uint64_t *)(a2 + 80));
  long long v11 = 0uLL;
  long long v12 = *(_OWORD *)(a2 + 552);
  long long v13 = *(_OWORD *)(a2 + 576);
  long long v14 = *(_OWORD *)(a2 + 592);
  *((_OWORD *)v9 + 35) = 0u;
  *((_OWORD *)v9 + 36) = v13;
  *(_OWORD *)(v9 + 552) = v12;
  *((void *)v9 + 71) = *(void *)(a2 + 568);
  *(_OWORD *)(a2 + 552) = 0u;
  *(void *)(a2 + 568) = 0;
  *((_OWORD *)v9 + 37) = v14;
  *((void *)v9 + 76) = *(void *)(a2 + 608);
  uint64_t v15 = v9 + 616;
  uint64_t v17 = (char *)*a1;
  double v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v15;
    a1[2] = v10;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      int v19 = &v9[v18];
      uint64_t v20 = (uint64_t)&v9[v18 - 616];
      uint64_t v21 = &v16[v18];
      long long v22 = *(_OWORD *)&v16[v18 - 616];
      long long v23 = *(_OWORD *)&v16[v18 - 600];
      long long v24 = *(_OWORD *)&v16[v18 - 584];
      *(void *)(v20 + 48) = *(void *)&v16[v18 - 568];
      *(_OWORD *)(v20 + 16) = v23;
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)uint64_t v20 = v22;
      uint64_t v25 = (uint64_t)&v9[v18 - 560];
      uint64_t v26 = (uint64_t)&v16[v18 - 560];
      *(void *)uint64_t v25 = 0;
      *(_OWORD *)(v25 + 8) = v11;
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(void *)&v9[v18 - 544] = *(void *)&v16[v18 - 544];
      *(void *)(v26 + 16) = 0;
      *(_OWORD *)uint64_t v26 = v11;
      sub_571CE4((uint64_t)&v9[v18 - 536], (uint64_t *)&v16[v18 - 536]);
      long long v11 = 0uLL;
      *((void *)v19 - 8) = 0;
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v16[v18 - 64];
      *((void *)v19 - 6) = *(void *)&v16[v18 - 48];
      *((void *)v21 - 8) = 0;
      *((void *)v21 - 7) = 0;
      *((void *)v21 - 6) = 0;
      long long v27 = *(_OWORD *)&v16[v18 - 40];
      long long v28 = *(_OWORD *)&v16[v18 - 24];
      *((void *)v19 - 1) = *(void *)&v16[v18 - 8];
      *(_OWORD *)(v19 - 24) = v28;
      *(_OWORD *)(v19 - 40) = v27;
      v18 -= 616;
    }
    while (&v16[v18] != v17);
    double v16 = (char *)*a1;
    __int16 v29 = (char *)a1[1];
    *a1 = &v9[v18];
    a1[1] = v15;
    a1[2] = v10;
    if (v29 == v16)
    {
      double v16 = v29;
      if (!v29) {
        return v9 + 616;
      }
      goto LABEL_23;
    }
    char v30 = v29 - 560;
    do
    {
      uint64_t v32 = (void *)*((void *)v30 + 62);
      if (v32)
      {
        *((void *)v30 + 63) = v32;
        operator delete(v32);
      }
      sub_510298((uint64_t)(v30 + 24));
      char v33 = *(void **)v30;
      if (*(void *)v30)
      {
        *((void *)v30 + 1) = v33;
        operator delete(v33);
      }
      long long v31 = v30 - 56;
      v30 -= 616;
    }
    while (v31 != v16);
  }
  if (v16) {
LABEL_23:
  }
    operator delete(v16);
  return v9 + 616;
}

void sub_78CF10(void **a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0x8000000080000000;
  *(_OWORD *)(a6 + 16) = 0u;
  long long v10 = (void *)(a6 + 16);
  *(_OWORD *)(a6 + 32) = 0u;
  sub_71D718(v56, *a1);
  int v51 = a5;
  if (a5) {
    unint64_t v11 = a2 + 1;
  }
  else {
    unint64_t v11 = a3;
  }
  if (v11 > a2)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    int v54 = 0;
    int v14 = 0;
    int v15 = 0;
    unint64_t v50 = v11;
    while (1)
    {
      uint64_t v21 = a4[916] + 24 * a2;
      int v23 = *(_DWORD *)(v21 + 16);
      long long v22 = (_DWORD *)(v21 + 16);
      if ((v23 & 0xFFFFFFFE) == 2) {
        break;
      }
LABEL_13:
      if (++a2 == v11) {
        goto LABEL_71;
      }
    }
    unint64_t v24 = sub_650F98((uint64_t)a4, a2);
    if (v51)
    {
      unint64_t v25 = sub_46C760(a4) - 1;
      int v52 = v14;
      int v53 = v15;
      if (v24 <= v25) {
        goto LABEL_19;
      }
      goto LABEL_6;
    }
    unint64_t v25 = sub_650F98((uint64_t)a4, a2 + 1);
    int v52 = v14;
    int v53 = v15;
    if (v24 > v25)
    {
LABEL_6:
      int v16 = 0;
      int v17 = 0;
LABEL_7:
      v54 += v16;
      int v18 = v16 - v17;
      int v14 = v52;
      int v15 = v53;
      int v19 = v18 + v53;
      int v20 = v18 + v52;
      if (*v22 != 2) {
        int v20 = v52;
      }
      if (*v22 == 3) {
        int v15 = v19;
      }
      else {
        int v14 = v20;
      }
      unint64_t v12 = v24;
      unint64_t v13 = v25;
      unint64_t v11 = v50;
      goto LABEL_13;
    }
LABEL_19:
    int v17 = 0;
    int v16 = 0;
    if (a2) {
      BOOL v26 = v12 == v24;
    }
    else {
      BOOL v26 = 1;
    }
    uint64_t v28 = !v26 && v13 == v24;
    uint64_t v55 = v28;
    unint64_t v29 = v24;
    while (1)
    {
      int v30 = sub_46E19C(a4, v29, 1);
      int v31 = sub_46E19C(a4, v29, 0);
      if (v30 <= v31) {
        break;
      }
LABEL_29:
      if (++v29 > v25) {
        goto LABEL_7;
      }
    }
    if (v29 == v24 || v29 == v25)
    {
      uint64_t v35 = a4[916];
      uint64_t v36 = a4[917];
      if (v35 == v36) {
        goto LABEL_44;
      }
      uint64_t v37 = 0;
      do
      {
        if ((*(_DWORD *)(v35 + 16) & 0xFFFFFFFE) == 2 && *(void *)(v35 + 8) == v29) {
          ++v37;
        }
        v35 += 24;
      }
      while (v35 != v36);
      uint64_t v38 = v37;
      if (!v37)
      {
LABEL_44:
        uint64_t v37 = 0;
        uint64_t v38 = 1;
      }
      unint64_t v39 = v38 + v55;
      if (v29 == v24) {
        unint64_t v40 = v39;
      }
      else {
        unint64_t v40 = v37 + 1;
      }
      double v32 = (double)v40;
      double v33 = (double)v30 / (double)v40;
      if (v33 >= 0.0) {
        goto LABEL_34;
      }
    }
    else
    {
      double v32 = (double)1uLL;
      double v33 = (double)v30 / (double)1uLL;
      if (v33 >= 0.0)
      {
LABEL_34:
        if (v33 >= 4.50359963e15) {
          goto LABEL_53;
        }
        uint64_t v34 = (uint64_t)(v33 + v33) + 1;
        goto LABEL_52;
      }
    }
    if (v33 <= -4.50359963e15) {
      goto LABEL_53;
    }
    uint64_t v34 = (uint64_t)(v33 + v33);
    if (v34 >= 1) {
      --v34;
    }
LABEL_52:
    double v33 = (double)(v34 >> 1);
LABEL_53:
    double v41 = (double)v31 / v32;
    if (v41 >= 0.0)
    {
      double v42 = 4.50359963e15;
      if (v41 >= 4.50359963e15) {
        goto LABEL_61;
      }
      double v42 = v41 + v41;
      uint64_t v43 = (uint64_t)(v41 + v41) + 1;
    }
    else
    {
      double v42 = -4.50359963e15;
      if (v41 <= -4.50359963e15) {
        goto LABEL_61;
      }
      double v42 = v41 + v41;
      uint64_t v43 = (uint64_t)(v41 + v41);
      if (v43 >= 1) {
        --v43;
      }
    }
    double v41 = (double)(v43 >> 1);
LABEL_61:
    double v44 = (double)sub_46CCC8(a4, v29, v42) / v32;
    if (v44 >= 0.0)
    {
      if (v44 < 4.50359963e15)
      {
        uint64_t v45 = (uint64_t)(v44 + v44) + 1;
LABEL_68:
        double v44 = (double)(v45 >> 1);
      }
    }
    else if (v44 > -4.50359963e15)
    {
      uint64_t v45 = (uint64_t)(v44 + v44);
      if (v45 >= 1) {
        --v45;
      }
      goto LABEL_68;
    }
    uint64_t v46 = (int **)sub_46C8EC(a4, v29);
    int v47 = sub_71DF98((uint64_t)v56, v46);
    sub_63B2C0(v10, v47, (uint64_t)v44);
    v17 += (int)v33;
    v16 += (int)v41;
    goto LABEL_29;
  }
  int v15 = 0;
  int v14 = 0;
  int v54 = 0;
LABEL_71:
  if (v14 > v15) {
    int v48 = 2;
  }
  else {
    int v48 = 3;
  }
  *(_DWORD *)a6 = v14 + v15;
  *(_DWORD *)(a6 + 4) = v54;
  *(_DWORD *)(a6 + 8) = v48;
  if (v57 < 0) {
    operator delete((void *)v56[11]);
  }
}

void sub_78D304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_78D334()
{
  byte_25B4717 = 1;
  word_25B4700 = 65;
  byte_25B472F = 1;
  word_25B4718 = 65;
  strcpy(&byte_25B4747, "\n\x1B\\toi=orth\\"");
  strcpy((char *)&qword_25B4730, "\x1B\\toi=lhp\\"");
  byte_25B475F = 11;
  qword_25B4760 = (uint64_t)operator new(0x19uLL);
  long long v282 = xmmword_20B9250;
  unk_25B4768 = xmmword_20B9250;
  strcpy((char *)qword_25B4760, "\x1B\\toi=x-sampa-internal\\"");
  byte_25B478F = 13;
  strcpy((char *)&qword_25B4778, "\x1B\\tn=address\\"");
  strcpy(&byte_25B47A7, "\t\x1B\\tn=normal\\"");
  strcpy((char *)&qword_25B4790, "\x1B\\tn=nav\\"");
  byte_25B47BF = 12;
  byte_25B47D7 = 7;
  strcpy((char *)&dword_25B47C0, "\x1B\\lang=");
  byte_25B47EF = 1;
  word_25B47D8 = 92;
  byte_25B4807 = 4;
  strcpy((char *)&qword_25B47F0, "DEV:");
  byte_25B481F = 8;
  strcpy((char *)&qword_25B4808, "Continue");
  byte_25B4837 = 11;
  strcpy((char *)&qword_25B4820, "Start_Route");
  byte_25B484F = 14;
  strcpy((char *)&qword_25B4838, "Continue_Route");
  byte_25B4867 = 12;
  strcpy((char *)&qword_25B4850, "Resume_Route");
  byte_25B487F = 18;
  strcpy((char *)&xmmword_25B4868, "Start_Route_U_Turn");
  byte_25B4897 = 7;
  strcpy((char *)&dword_25B4880, "_U_Turn");
  qword_25B48A8 = 0x1300000000000000;
  qmemcpy(&unk_25B48B0, "Continue_Route", 14);
  dword_25B48A0 = 1702131055;
  qword_25B4898 = *(void *)"Resume_Route";
  *(int *)((char *)&dword_25B48A4 + 3) = 1852994900;
  dword_25B48A4 = 1415533919;
  qword_25B48C0 = 0x1500000000000000;
  strcpy(byte_25B48C8, "Left_Turn");
  unk_25B48BE = 1415533919;
  *(_DWORD *)((char *)&qword_25B48C0 + 1) = 1852994900;
  strcpy(&byte_25B48DF, "\tRight_Turn");
  strcpy(&byte_25B48F7, "\nLeft_Turn_At_End");
  byte_25B490F = 16;
  byte_25B4927 = 17;
  strcpy((char *)&xmmword_25B4910, "Right_Turn_At_End");
  byte_25B493F = 15;
  strcpy((char *)&qword_25B4928, "Sharp_Left_Turn");
  byte_25B4957 = 16;
  strcpy((char *)&xmmword_25B4940, "Sharp_Right_Turn");
  byte_25B496F = 16;
  strcpy((char *)&xmmword_25B4958, "Slight_Left_Turn");
  byte_25B4987 = 17;
  strcpy((char *)&xmmword_25B4970, "Slight_Right_Turn");
  strcpy(&byte_25B499F, "\tKeep_Right");
  strcpy((char *)&qword_25B4988, "Keep_Left");
  strcpy(&byte_25B49B7, "\nU_Turn");
  byte_25B49CF = 6;
  byte_25B49E7 = 14;
  strcpy((char *)&qword_25B49D0, "Walking_U_Turn");
  byte_25B49FF = 20;
  strcpy((char *)&xmmword_25B49E8, "U_Turn_When_Possible");
  byte_25B4A17 = 20;
  strcpy((char *)&xmmword_25B4A00, "U_Turn_At_Roundabout");
  byte_25B4A2F = 11;
  strcpy((char *)&qword_25B4A18, "Enter_Ferry");
  strcpy(&byte_25B4A47, "\nChange_Ferry");
  strcpy((char *)&qword_25B4A30, "Exit_Ferry");
  strcpy((char *)&xmmword_25B4A60, "Enter_Railway_Shuttle");
  strcpy((char *)&xmmword_25B4A78, "Exit_Railway_Shuttle");
  strcpy((char *)&xmmword_25B4A90, "Change_Railway_Shuttle");
  strcpy((char *)&xmmword_25B4AA8, "End_Of_Navigation");
  strcpy((char *)&xmmword_25B4AC0, "End_Of_Navigation");
  strcpy((char *)&qword_25B4AD8, "Destination");
  strcpy((char *)&xmmword_25B4AF0, "Destination_On_left");
  strcpy((char *)&xmmword_25B4B08, "Destination_On_Right");
  strcpy((char *)&xmmword_25B4B50, "First_Stop_On_Right");
  strcpy((char *)&xmmword_25B4B98, "Next_Stop_On_Right");
  byte_25B4A5F = 12;
  byte_25B4A77 = 21;
  byte_25B4A8F = 20;
  strcpy((char *)&xmmword_25B4BC8, "Waypoint_Stop_On_Left");
  byte_25B4AA7 = 22;
  byte_25B4ABF = 17;
  byte_25B4AD7 = 17;
  byte_25B4AEF = 11;
  byte_25B4B07 = 19;
  byte_25B4B1F = 20;
  strcpy(&byte_25B4B37, "\nFirst_Stop_On_left");
  *(void *)&v270[0] = *(void *)"First_Stop";
  strcpy((char *)&qword_25B4B20, "First_Stop");
  byte_25B4B4F = 18;
  byte_25B4B67 = 19;
  strcpy(&byte_25B4B7F, "\tNext_Stop_On_left");
  strcpy((char *)&qword_25B4BB0, "Waypoint_Stop");
  strcpy((char *)&xmmword_25B4BE0, "Waypoint_Stop_On_Right");
  strcpy((char *)&qword_25B4BF8, "Roundabout_");
  *(void *)&v266[48] = *(void *)"Next_Stop";
  strcpy((char *)&qword_25B4B68, "Next_Stop");
  byte_25B4B97 = 17;
  byte_25B4BAF = 18;
  byte_25B4BC7 = 13;
  byte_25B4BDF = 21;
  byte_25B4BF7 = 22;
  byte_25B4C0F = 11;
  byte_25B4C27 = 16;
  strcpy((char *)&xmmword_25B4C10, "Enter_Roundabout");
  qword_25B4C28 = (uint64_t)operator new(0x20uLL);
  long long v281 = xmmword_20B91C0;
  xmmword_25B4C30 = xmmword_20B91C0;
  strcpy((char *)qword_25B4C28, "Walking_Enter_Roundabout");
  byte_25B4C57 = 16;
  strcpy((char *)&xmmword_25B4C40, "Leave_Roundabout");
  byte_25B4C6F = 21;
  strcpy((char *)&xmmword_25B4C58, "Roundabout_First_Exit");
  byte_25B4C87 = 22;
  strcpy((char *)&xmmword_25B4C70, "Roundabout_Second_Exit");
  byte_25B4C9F = 21;
  strcpy((char *)&xmmword_25B4C88, "Roundabout_Third_Exit");
  strcpy((char *)&xmmword_25B4CA0, "Roundabout_Fourth_Exit");
  HIBYTE(word_25B4CB6) = 22;
  byte_25B4CCF = 21;
  strcpy((char *)&xmmword_25B4CB8, "Roundabout_Fifth_Exit");
  byte_25B4CE7 = 21;
  strcpy((char *)&xmmword_25B4CD0, "Roundabout_Sixth_Exit");
  qword_25B4CE8 = (uint64_t)operator new(0x19uLL);
  xmmword_25B4CF0 = xmmword_20B9250;
  strcpy((char *)qword_25B4CE8, "Roundabout_Seventh_Exit");
  strcpy((char *)&xmmword_25B4D00, "Roundabout_Eighth_Exit");
  HIBYTE(word_25B4D16) = 22;
  byte_25B4D2F = 21;
  strcpy((char *)&xmmword_25B4D18, "Roundabout_Ninth_Exit");
  byte_25B4D47 = 21;
  strcpy((char *)&xmmword_25B4D30, "Roundabout_Tenth_Exit");
  qword_25B4D48 = (uint64_t)operator new(0x20uLL);
  xmmword_25B4D50 = xmmword_20B91C0;
  strcpy((char *)qword_25B4D48, "Roundabout_Eleventh_Exit");
  qword_25B4D60 = (uint64_t)operator new(0x19uLL);
  unk_25B4D68 = xmmword_20B9250;
  strcpy((char *)qword_25B4D60, "Roundabout_Twelfth_Exit");
  qword_25B4D78 = (uint64_t)operator new(0x20uLL);
  long long v278 = xmmword_20B5EB0;
  xmmword_25B4D80 = xmmword_20B5EB0;
  strcpy((char *)qword_25B4D78, "Roundabout_Thirteenth_Exit");
  qword_25B4D90 = (uint64_t)operator new(0x20uLL);
  unk_25B4D98 = xmmword_20B5EB0;
  strcpy((char *)qword_25B4D90, "Roundabout_Fourteenth_Exit");
  qword_25B4DA8 = (uint64_t)operator new(0x20uLL);
  long long v280 = xmmword_20B8870;
  xmmword_25B4DB0 = xmmword_20B8870;
  strcpy((char *)qword_25B4DA8, "Roundabout_Fifteenth_Exit");
  qword_25B4DC0 = (uint64_t)operator new(0x20uLL);
  unk_25B4DC8 = xmmword_20B8870;
  strcpy((char *)qword_25B4DC0, "Roundabout_Sixteenth_Exit");
  qword_25B4DD8 = (uint64_t)operator new(0x20uLL);
  long long v275 = xmmword_20B91A0;
  xmmword_25B4DE0 = xmmword_20B91A0;
  strcpy((char *)qword_25B4DD8, "Roundabout_Seventeenth_Exit");
  qword_25B4DF0 = (uint64_t)operator new(0x20uLL);
  unk_25B4DF8 = xmmword_20B5EB0;
  strcpy((char *)qword_25B4DF0, "Roundabout_Eighteenth_Exit");
  qword_25B4E08 = (uint64_t)operator new(0x20uLL);
  xmmword_25B4E10 = xmmword_20B5EB0;
  strcpy((char *)qword_25B4E08, "Roundabout_Nineteenth_Exit");
  byte_25B4E37 = 8;
  strcpy((char *)&qword_25B4E20, "Off_Ramp");
  byte_25B4E4F = 16;
  strcpy((char *)&xmmword_25B4E38, "Off_Ramp_On_Left");
  byte_25B4E67 = 17;
  strcpy((char *)&xmmword_25B4E50, "Off_Ramp_On_Right");
  byte_25B4E7F = 14;
  strcpy((char *)&qword_25B4E68, "Change_Highway");
  strcpy((char *)&xmmword_25B4E80, "Change_Highway_On_Left");
  HIBYTE(word_25B4E96) = 22;
  qword_25B4E98 = (uint64_t)operator new(0x19uLL);
  xmmword_25B4EA0 = xmmword_20B9250;
  strcpy((char *)qword_25B4E98, "Change_Highway_On_Right");
  byte_25B4EC7 = 5;
  dword_25B4EB0 = 1735550285;
  byte_25B4EB4 = 101;
  byte_25B4EB5 = 0;
  byte_25B4EDF = 12;
  strcpy((char *)&qword_25B4EC8, "Enter_Detour");
  byte_25B4EF7 = 11;
  strcpy((char *)&qword_25B4EE0, "Exit_Detour");
  byte_25B4F0F = 18;
  strcpy((char *)&xmmword_25B4EF8, "Walking_Turnaround");
  qword_25B4F10 = (uint64_t)operator new(0x19uLL);
  unk_25B4F18 = xmmword_20B9250;
  strcpy((char *)qword_25B4F10, "Walking_Turnaround_Sign");
  byte_25B4F3F = 19;
  strcpy((char *)&xmmword_25B4F28, "Distance_Title_List");
  qword_25B4F40 = (uint64_t)operator new(0x19uLL);
  unk_25B4F48 = xmmword_20B9250;
  long long v272 = *(_OWORD *)"Cross_The_Street_Spoken";
  strcpy((char *)qword_25B4F40, "Cross_The_Street_Spoken");
  *(void *)&v270[1] = *(void *)"t_Spoken";
  byte_25B4F6F = 19;
  strcpy((char *)&xmmword_25B4F58, "Arrival_Charge_List");
  byte_25B4F87 = 15;
  strcpy((char *)&qword_25B4F70, "Charge_At_Start");
  strcpy(&byte_25B4F9F, "\tPass_Street");
  strcpy((char *)&qword_25B4F88, "Pass_Exit");
  byte_25B4FB7 = 11;
  byte_25B4FCF = 17;
  strcpy((char *)&xmmword_25B4FB8, "Pass_Intersection");
  strcpy(&byte_25B4FE7, "\t_PrevExitNumber");
  strcpy((char *)&qword_25B4FD0, "Next_Exit");
  byte_25B4FFF = 15;
  strcpy(&byte_25B5017, "\t_PrevUTurn");
  strcpy((char *)&qword_25B5000, "_PrevRoad");
  strcpy(&byte_25B502F, "\nNext_");
  byte_25B5047 = 5;
  byte_25B505F = 15;
  strcpy((char *)&qword_25B5048, "_At_Next_Street");
  byte_25B5077 = 21;
  strcpy((char *)&xmmword_25B5060, "_At_Next_Intersection");
  byte_25B508F = 14;
  strcpy((char *)&qword_25B5078, "Charge_Station");
  byte_25B50A7 = 15;
  strcpy((char *)&qword_25B5090, "_Charge_Station");
  BYTE1(qword_25B50B8) = 0;
  WORD1(qword_25B50B8) = 25856;
  HIDWORD(qword_25B50B8) = 335544320;
  strcpy((char *)&qword_25B50A8, "_Charge_Station_");
  byte_25B50D7 = 8;
  strcpy((char *)&qword_25B50C0, "_Minimum");
  byte_25B50EF = 15;
  strcpy((char *)&qword_25B50D8, "ExitShield_Sign");
  byte_25B5107 = 8;
  strcpy((char *)&qword_25B50F0, "Walking_");
  byte_25B511F = 16;
  strcpy((char *)&xmmword_25B5108, "Walking_Continue");
  byte_25B5137 = 19;
  strcpy((char *)&xmmword_25B5120, "Walking_Start_Route");
  qword_25B5138 = (uint64_t)operator new(0x20uLL);
  xmmword_25B5140 = xmmword_20B5EB0;
  strcpy((char *)qword_25B5138, "Walking_Start_Route_U_Turn");
  byte_25B5167 = 17;
  strcpy((char *)&xmmword_25B5150, "Walking_Left_Turn");
  byte_25B517F = 18;
  strcpy((char *)&xmmword_25B5168, "Walking_Right_Turn");
  qword_25B5180 = (uint64_t)operator new(0x20uLL);
  unk_25B5188 = xmmword_20B5EB0;
  strcpy((char *)qword_25B5180, "Walking_Turn_At_Roundabout");
  qword_25B5198 = (uint64_t)operator new(0x20uLL);
  long long v279 = xmmword_20B91B0;
  xmmword_25B51A0 = xmmword_20B91B0;
  strcpy((char *)qword_25B5198, "Walking_U_Turn_When_Possible");
  qword_25B51B0 = (uint64_t)operator new(0x28uLL);
  long long v271 = xmmword_20B9390;
  unk_25B51B8 = xmmword_20B9390;
  strcpy((char *)qword_25B51B0, "Walking_Roundabout_Exit_Continue");
  qword_25B51C8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B51D0 = xmmword_20B91B0;
  strcpy((char *)qword_25B51C8, "Walking_Roundabout_Exit_Left");
  qword_25B51E0 = (uint64_t)operator new(0x20uLL);
  long long v277 = xmmword_20B8890;
  unk_25B51E8 = xmmword_20B8890;
  strcpy((char *)qword_25B51E0, "Walking_Roundabout_Exit_Right");
  qword_25B51F8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B5200 = xmmword_20B8870;
  strcpy((char *)qword_25B51F8, "Walking_End_Of_Navigation");
  long long v274 = *(_OWORD *)"nd_Of_Navigation";
  uint64_t v0 = (char *)operator new(0x20uLL);
  qword_25B5210 = (uint64_t)v0;
  unk_25B5218 = xmmword_20B8870;
  *(_OWORD *)uint64_t v0 = *(_OWORD *)"Walking_End_Of_Navigation";
  *(_OWORD *)(v0 + 9) = v274;
  v0[25] = 0;
  byte_25B523F = 8;
  strcpy((char *)&qword_25B5228, "Walking_");
  qword_25B5240 = (uint64_t)operator new(0x19uLL);
  unk_25B5248 = v282;
  strcpy((char *)qword_25B5240, "Walking_Sharp_Left_Turn");
  qword_25B5258 = (uint64_t)operator new(0x20uLL);
  xmmword_25B5260 = v281;
  strcpy((char *)qword_25B5258, "Walking_Sharp_Right_Turn");
  qword_25B5270 = (uint64_t)operator new(0x20uLL);
  unk_25B5278 = v281;
  strcpy((char *)qword_25B5270, "Walking_Slight_Left_Turn");
  qword_25B5288 = (uint64_t)operator new(0x20uLL);
  xmmword_25B5290 = v280;
  strcpy((char *)qword_25B5288, "Walking_Slight_Right_Turn");
  byte_25B52B7 = 4;
  strcpy((char *)&dword_25B52A0, "Exit");
  byte_25B52CF = 4;
  strcpy((char *)&dword_25B52B8, "Road");
  byte_25B52E7 = 7;
  strcpy((char *)&dword_25B52D0, "Freeway");
  byte_25B52FF = 12;
  strcpy((char *)&qword_25B52E8, "Intersection");
  byte_25B5317 = 5;
  strcpy((char *)&dword_25B5300, "Ferry");
  byte_25B532F = 11;
  strcpy((char *)&qword_25B5318, "ShuttleName");
  byte_25B5347 = 5;
  strcpy((char *)&dword_25B5330, "Road1");
  strcpy(&byte_25B535F, "\tName");
  strcpy((char *)&qword_25B5348, "Signpost1");
  byte_25B5377 = 4;
  byte_25B538F = 7;
  strcpy((char *)&dword_25B5378, "Address");
  byte_25B53A7 = 7;
  strcpy((char *)&dword_25B5390, "Shield1");
  byte_25B53BF = 13;
  strcpy((char *)&qword_25B53A8, "TowardShield1");
  byte_25B53D7 = 6;
  strcpy((char *)&dword_25B53C0, "Right_");
  byte_25B53EF = 5;
  byte_25B53DC = 95;
  dword_25B53D8 = 1952867660;
  byte_25B53DD = 0;
  strcpy(&byte_25B5407, "\tOn_Left_");
  strcpy((char *)&qword_25B53F0, "On_Right_");
  byte_25B541F = 8;
  byte_25B5437 = 12;
  strcpy((char *)&qword_25B5420, "ElevatorName");
  byte_25B544F = 13;
  strcpy((char *)&qword_25B5438, "EscalatorName");
  strcpy(&byte_25B5467, "\nBridgeName");
  strcpy((char *)&qword_25B5450, "StairsName");
  strcpy(&byte_25B547F, "\nTunnelName");
  strcpy(&byte_25B5497, "\nParking");
  byte_25B54AF = 7;
  strcpy(&byte_25B54C7, "\t_Escalator");
  strcpy((char *)&qword_25B54B0, "_Elevator");
  strcpy(&byte_25B54DF, "\n_ElevatorName");
  byte_25B54F7 = 13;
  byte_25B550F = 14;
  strcpy((char *)&qword_25B54F8, "_EscalatorName");
  byte_25B5527 = 5;
  strcpy((char *)&qword_25B5510, "_Road");
  byte_25B553F = 8;
  strcpy((char *)&qword_25B5528, "_Freeway");
  byte_25B5557 = 13;
  strcpy((char *)&qword_25B5540, "_Intersection");
  byte_25B556F = 6;
  strcpy((char *)&dword_25B5558, "_Road1");
  byte_25B5587 = 6;
  strcpy((char *)&dword_25B5570, "_Road2");
  strcpy(&byte_25B559F, "\n_Signpost2");
  strcpy((char *)&qword_25B5588, "_Signpost1");
  strcpy(&byte_25B55B7, "\n_Ferry");
  byte_25B55CF = 6;
  byte_25B55E7 = 12;
  strcpy((char *)&qword_25B55D0, "_Ferry_Ferry");
  byte_25B55FF = 12;
  strcpy((char *)&qword_25B55E8, "_ShuttleName");
  qword_25B5600 = (uint64_t)operator new(0x20uLL);
  unk_25B5608 = v279;
  strcpy((char *)qword_25B5600, "_Railway_Shuttle_ShuttleName");
  byte_25B562F = 11;
  strcpy((char *)&qword_25B5618, "_ExitNumber");
  byte_25B5647 = 5;
  dword_25B5630 = 1769489759;
  byte_25B5634 = 116;
  byte_25B5635 = 0;
  byte_25B565F = 7;
  strcpy((char *)&dword_25B5648, "_StayOn");
  byte_25B5677 = 7;
  strcpy((char *)&dword_25B5660, "_Stairs");
  byte_25B568F = 5;
  strcpy((char *)&dword_25B5678, "_Ramp");
  byte_25B56A7 = 11;
  strcpy((char *)&qword_25B5690, "_StairsName");
  strcpy(&byte_25B56BF, "\t_Down");
  strcpy((char *)&qword_25B56A8, "_RampName");
  byte_25B56D7 = 5;
  byte_25B56EF = 3;
  dword_25B56D8 = 7361887;
  byte_25B5707 = 7;
  strcpy((char *)&dword_25B56F0, "_Bridge");
  byte_25B571F = 7;
  strcpy((char *)&dword_25B5708, "_Tunnel");
  byte_25B5737 = 11;
  strcpy((char *)&qword_25B5720, "_Roundabout");
  byte_25B574F = 6;
  strcpy((char *)&dword_25B5738, "_Cross");
  byte_25B5767 = 8;
  strcpy((char *)&qword_25B5750, "_Parking");
  byte_25B577F = 8;
  strcpy((char *)&qword_25B5768, "_Shield1");
  byte_25B5797 = 14;
  strcpy((char *)&qword_25B5780, "_TowardShield1");
  byte_25B57AF = 8;
  strcpy((char *)&qword_25B5798, "_Shield2");
  byte_25B57C7 = 14;
  strcpy((char *)&qword_25B57B0, "_TowardShield2");
  byte_25B57DF = 11;
  strcpy((char *)&qword_25B57C8, "_Direction1");
  byte_25B57F7 = 11;
  strcpy((char *)&qword_25B57E0, "_Direction2");
  strcpy(&byte_25B580F, "\n_TowardDirection1");
  strcpy((char *)&qword_25B57F8, "Direction1");
  byte_25B5827 = 17;
  byte_25B583F = 17;
  strcpy((char *)&xmmword_25B5828, "_TowardDirection2");
  byte_25B5857 = 16;
  strcpy((char *)&xmmword_25B5840, "TowardDirection1");
  byte_25B586F = 7;
  strcpy((char *)&qword_25B5858, "_Spoken");
  byte_25B5887 = 5;
  strcpy((char *)&qword_25B5870, "_Sign");
  byte_25B589F = 15;
  strcpy((char *)&qword_25B5888, "_Secondary_Sign");
  byte_25B58B7 = 5;
  byte_25B58A4 = 116;
  dword_25B58A0 = 1936280671;
  byte_25B58A5 = 0;
  byte_25B58CF = 8;
  strcpy((char *)&qword_25B58B8, "_Primary");
  qword_25B58E0 = 0xF00000000000000;
  strcpy(byte_25B58E8, "_Secondary");
  strcpy((char *)&qword_25B58D0, "_Spoken_Primary");
  strcpy(&byte_25B58FF, "\n_Secondary");
  strcpy(&byte_25B5917, "\n_Spoken_Secondar");
  BYTE1(qword_25B5928) = 0;
  WORD1(qword_25B5928) = 0;
  HIDWORD(qword_25B5928) = 285212672;
  byte_25B5947 = 13;
  strcpy((char *)&qword_25B5930, "_To_Secondary");
  BYTE1(qword_25B5958) = 0;
  WORD1(qword_25B5958) = 0;
  HIDWORD(qword_25B5958) = 335544320;
  strcpy((char *)&dword_25B5948, "_Spoken_To_Secon");
  strcpy(&byte_25B5977, "\t_ValidDistance");
  strcpy((char *)&qword_25B5960, "_Distance");
  byte_25B598F = 14;
  byte_25B59A7 = 6;
  strcpy((char *)&dword_25B5990, "_Short");
  byte_25B59BF = 1;
  word_25B59A8 = 95;
  qword_25B59C0 = (uint64_t)operator new(0x20uLL);
  unk_25B59C8 = v281;
  strcpy((char *)qword_25B59C0, "Concatenate_Newline_Sign");
  uint64_t v1 = (char *)operator new(0x19uLL);
  qword_25B59D8 = (uint64_t)v1;
  xmmword_25B59E0 = v282;
  *(_OWORD *)uint64_t v1 = v272;
  uint64_t v2 = *(void *)&v270[1];
  *(void *)(v1 + 15) = *(void *)&v270[1];
  v1[23] = 0;
  byte_25B5A07 = 12;
  strcpy((char *)&qword_25B59F0, "Chain_Spoken");
  byte_25B5A1F = 15;
  strcpy((char *)&qword_25B5A08, "Chain_To_Spoken");
  strcpy(&byte_25B5A37, "\nThen_Spoken");
  strcpy((char *)&qword_25B5A20, "And_Spoken");
  byte_25B5A4F = 11;
  byte_25B5A67 = 18;
  strcpy((char *)&xmmword_25B5A50, "Concatenate_Spoken");
  qword_25B5A68 = (uint64_t)operator new(0x28uLL);
  long long v269 = xmmword_20B9240;
  xmmword_25B5A70 = xmmword_20B9240;
  strcpy((char *)qword_25B5A68, "At_Traffic_Light_Chain_Spoken_Primary");
  qword_25B5A80 = (uint64_t)operator new(0x28uLL);
  v270[2] = xmmword_20B9260;
  unk_25B5A88 = xmmword_20B9260;
  strcpy((char *)qword_25B5A80, "At_Stop_Sign_Chain_Spoken_Primary");
  qword_25B5A98 = (uint64_t)operator new(0x40uLL);
  xmmword_25B5AA0 = xmmword_20B9A90;
  strcpy((char *)qword_25B5A98, "At_Stop_Sign_Cross_Traffic_Doesnt_Stop_Chain_Spoken_Primary");
  qword_25B5AB0 = (uint64_t)operator new(0x30uLL);
  long long v268 = xmmword_20B9A40;
  unk_25B5AB8 = xmmword_20B9A40;
  strcpy((char *)qword_25B5AB0, "At_Next_Traffic_Light_Chain_Spoken_Primary");
  qword_25B5AC8 = (uint64_t)operator new(0x28uLL);
  long long v267 = xmmword_20E12D0;
  xmmword_25B5AD0 = xmmword_20E12D0;
  strcpy((char *)qword_25B5AC8, "At_Next_Stop_Sign_Chain_Spoken_Primary");
  qword_25B5AE0 = (uint64_t)operator new(0x28uLL);
  long long v276 = xmmword_20B9960;
  unk_25B5AE8 = xmmword_20B9960;
  strcpy((char *)qword_25B5AE0, "At_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B5AF8 = (uint64_t)operator new(0x28uLL);
  xmmword_25B5B00 = xmmword_20B93A0;
  strcpy((char *)qword_25B5AF8, "At_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B5B10 = (uint64_t)operator new(0x30uLL);
  long long v274 = xmmword_20E1380;
  unk_25B5B18 = xmmword_20E1380;
  strcpy((char *)qword_25B5B10, "At_Next_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B5B28 = (uint64_t)operator new(0x30uLL);
  xmmword_25B5B30 = xmmword_20B93C0;
  strcpy((char *)qword_25B5B28, "At_Next_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B5B40 = (uint64_t)operator new(0x38uLL);
  unk_25B5B48 = xmmword_20B9A60;
  strcpy((char *)qword_25B5B40, "At_Next_One_Traffic_Light_Chain_Spoken_Secondary");
  qword_25B5B58 = (uint64_t)operator new(0x30uLL);
  xmmword_25B5B60 = xmmword_20E1380;
  strcpy((char *)qword_25B5B58, "At_Next_One_Stop_Sign_Chain_Spoken_Secondary");
  qword_25B5B70 = (uint64_t)operator new(0x28uLL);
  unk_25B5B78 = xmmword_20B9960;
  strcpy((char *)qword_25B5B70, "At_Mini_Roundabout_Chain_Spoken_Primary");
  qword_25B5B88 = (uint64_t)operator new(0x30uLL);
  long long v273 = xmmword_20B93D0;
  xmmword_25B5B90 = xmmword_20B93D0;
  strcpy((char *)qword_25B5B88, "At_Mini_Roundabout_Chain_Spoken_Secondary");
  qword_25B5BA0 = (uint64_t)operator new(0x20uLL);
  unk_25B5BA8 = v277;
  strcpy((char *)qword_25B5BA0, "Walking_Distance_Chain_Spoken");
  qword_25B5BB8 = (uint64_t)operator new(0x20uLL);
  xmmword_25B5BC0 = v277;
  strcpy((char *)qword_25B5BB8, "Walking_Continue_Chain_Spoken");
  uint64_t v3 = (char *)operator new(0x19uLL);
  qword_25B5BD0 = (uint64_t)v3;
  unk_25B5BD8 = v282;
  *(_OWORD *)uint64_t v3 = v272;
  *(void *)(v3 + 15) = v2;
  v3[23] = 0;
  qword_25B5BE8 = (uint64_t)operator new(0x28uLL);
  xmmword_25B5BF0 = v271;
  strcpy((char *)qword_25B5BE8, "Distance_Cross_The_Street_Spoken");
  byte_25B5C17 = 22;
  strcpy((char *)&xmmword_25B5C00, "Walking_Continue_Cross");
  byte_25B5C2F = 14;
  strcpy((char *)&qword_25B5C18, "Continue_Cross");
  byte_25B5C47 = 5;
  strcpy((char *)&dword_25B5C30, "Cross");
  byte_25B5C5F = 19;
  strcpy((char *)&xmmword_25B5C48, "Cross_Street_Spoken");
  byte_25B5C77 = 17;
  strcpy((char *)&xmmword_25B5C60, "Cross_Road_Spoken");
  byte_25B5C8F = 20;
  strcpy((char *)&xmmword_25B5C78, "Use_Crosswalk_Spoken");
  byte_25B5CA7 = 15;
  strcpy((char *)&qword_25B5C90, "Distance_Spoken");
  byte_25B5CBF = 19;
  strcpy((char *)&xmmword_25B5CA8, "Distance_And_Spoken");
  byte_25B5CD7 = 21;
  strcpy((char *)&xmmword_25B5CC0, "Continue_Stage_Spoken");
  byte_25B5CEF = 13;
  qmemcpy(&qword_25B5CD8, "ContinueStage", 13);
  int v4 = SHIBYTE(qword_25B58E0);
  if (qword_25B58E0 >= 0) {
    size_t v5 = HIBYTE(qword_25B58E0);
  }
  else {
    size_t v5 = unk_25B58D8;
  }
  unint64_t v6 = v5 + 13;
  byte_25B5CE5 = 0;
  if (v5 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v10 = operator new(v8 + 1);
    qword_25B5CF8 = v5 + 13;
    unk_25B5D00 = v9 | 0x8000000000000000;
    qword_25B5CF0 = (uint64_t)v10;
    void *v10 = *(void *)"ContinueStage";
    long long v7 = (char *)v10 + 13;
    *(void *)((char *)v10 + 5) = *(void *)"nueStage";
  }
  else
  {
    BYTE1(qword_25B5CF8) = 0;
    WORD1(qword_25B5CF8) = 0;
    HIDWORD(qword_25B5CF8) = 0;
    unk_25B5D00 = 0;
    byte_25B5D07 = v5 + 13;
    long long v7 = (char *)&qword_25B5CF8 + 5;
    strcpy((char *)&qword_25B5CF0, "Continue");
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    unint64_t v11 = &qword_25B58D0;
  }
  else {
    unint64_t v11 = (uint64_t *)qword_25B58D0;
  }
  memmove(v7, v11, v5);
LABEL_15:
  v7[v5] = 0;
  int v12 = byte_25B5527;
  if (byte_25B5527 >= 0) {
    size_t v13 = byte_25B5527;
  }
  else {
    size_t v13 = qword_25B5518;
  }
  unint64_t v14 = v13 + 13;
  if (v13 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    int v18 = operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 13;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    void *v18 = qword_25B5CD8;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)&qword_25B5CD8 + 5);
    int v15 = (char *)v18 + 13;
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 5) = *(uint64_t *)((char *)&qword_25B5CD8 + 5);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 13;
    __dst.__r_.__value_.__r.__words[0] = qword_25B5CD8;
    int v15 = &__dst.__r_.__value_.__s.__data_[13];
    if (!v13) {
      goto LABEL_29;
    }
  }
  if (v12 >= 0) {
    int v19 = &qword_25B5510;
  }
  else {
    int v19 = (uint64_t *)qword_25B5510;
  }
  memmove(v15, v19, v13);
LABEL_29:
  v15[v13] = 0;
  if (v4 >= 0) {
    int v20 = (const std::string::value_type *)&qword_25B58D0;
  }
  else {
    int v20 = (const std::string::value_type *)qword_25B58D0;
  }
  uint64_t v21 = std::string::append(&__dst, v20, v5);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  qword_25B5D18 = v21->__r_.__value_.__r.__words[2];
  xmmword_25B5D08 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  byte_25B5D37 = 5;
  strcpy((char *)&dword_25B5D20, "Merge");
  qword_25B5D38 = (uint64_t)operator new(0x20uLL);
  v270[1] = xmmword_20B8E90;
  unk_25B5D40 = xmmword_20B8E90;
  strcpy((char *)qword_25B5D38, "Continue_Freeway_Spoken_Primary");
  byte_25B5D67 = 8;
  strcpy((char *)&qword_25B5D50, "Starting");
  byte_25B5D7F = 14;
  strcpy((char *)&qword_25B5D68, "Starting_Route");
  byte_25B5D97 = 14;
  strcpy((char *)&qword_25B5D80, "Resuming_Route");
  byte_25B5DAF = 16;
  strcpy((char *)&xmmword_25B5D98, "Continuing_Route");
  byte_25B5DC7 = 9;
  word_25B5DB8 = 112;
  qword_25B5DB0 = *(void *)&v266[48];
  strcpy(&byte_25B5DDF, "\nEnding");
  strcpy((char *)&word_25B5DD0, "op");
  qword_25B5DC8 = *(void *)&v270[0];
  byte_25B5DF7 = 6;
  strcpy((char *)&qword_25B5DF8, "_Destination");
  byte_25B5E0F = 12;
  byte_25B5E27 = 15;
  strcpy((char *)&qword_25B5E10, "_At_Destination");
  std::operator+<char>();
  qword_25B5E40 = (uint64_t)operator new(0x20uLL);
  unk_25B5E48 = v281;
  strcpy((char *)qword_25B5E40, "Spoken_Ending_At_Parking");
  qword_25B5E58 = (uint64_t)operator new(0x20uLL);
  v270[0] = xmmword_20B9800;
  xmmword_25B5E60 = xmmword_20B9800;
  strcpy((char *)qword_25B5E58, "Spoken_Pre_Arrival_Destination");
  strcpy((char *)&xmmword_25B5E70, "Sign_Ending_At_Parking");
  HIBYTE(word_25B5E86) = 22;
  byte_25B5E9F = 4;
  strcpy((char *)&dword_25B5E88, "Home");
  byte_25B5EB7 = 4;
  strcpy((char *)&dword_25B5EA0, "Work");
  byte_25B5ECF = 8;
  strcpy((char *)&qword_25B5EB8, "Business");
  byte_25B5EE7 = 4;
  strcpy((char *)&dword_25B5ED0, "Name");
  byte_25B5EFF = 13;
  strcpy((char *)&qword_25B5EE8, "Other_Contact");
  byte_25B5F17 = 11;
  strcpy((char *)&qword_25B5F00, "ContactHome");
  byte_25B5F2F = 11;
  *(_DWORD *)((char *)&qword_25B5F18 + 7) = 1802661719;
  byte_25B5F47 = 7;
  *(int *)((char *)&dword_25B5F30 + 3) = 1936942450;
  dword_25B5F30 = 1919181889;
  strcpy((char *)&xmmword_25B5F48, "Discoverability_Prompt");
  HIBYTE(word_25B5F5E) = 22;
  byte_25B5F77 = 6;
  dword_25B5F60 = 1634878303;
  word_25B5F64 = 26739;
  byte_25B5F8F = 8;
  qword_25B5F78 = 0x697269535F6F4E5FLL;
  byte_25B5FA7 = 9;
  strcpy((char *)&qword_25B5F90, "_CityName");
  byte_25B5FBF = 8;
  qword_25B5FA8 = 0x636972656E65475FLL;
  int v23 = byte_25B5D67;
  if (byte_25B5D67 >= 0) {
    size_t v24 = byte_25B5D67;
  }
  else {
    size_t v24 = qword_25B5D58;
  }
  LODWORD(v272) = byte_25B50A7;
  if (byte_25B50A7 >= 0) {
    size_t v25 = byte_25B50A7;
  }
  else {
    size_t v25 = unk_25B5098;
  }
  qword_25B5F18 = *(void *)"ContactWork";
  byte_25B5F23 = 0;
  byte_25B5F37 = 0;
  byte_25B5F66 = 0;
  byte_25B5F80 = 0;
  byte_25B5FB0 = 0;
  unint64_t v26 = v25 + v24;
  if (v25 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  *(void *)long long v266 = *(void *)"ContactWork";
  *(void *)&v266[16] = *(void *)"ContactHome";
  *(void *)&v266[32] = *(void *)"_Contact";
  *(void *)&v266[48] = *(void *)"Other_Contact";
  if (v26 <= 0x16)
  {
    long long v27 = &qword_25B5FC0;
    qword_25B5FC8 = 0;
    unk_25B5FD0 = 0;
    qword_25B5FC0 = 0;
    byte_25B5FD7 = v25 + v24;
    if (!v24) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  uint64_t v90 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v26 | 7) != 0x17) {
    uint64_t v90 = v26 | 7;
  }
  uint64_t v91 = v90 + 1;
  long long v27 = (uint64_t *)operator new(v90 + 1);
  qword_25B5FC8 = v25 + v24;
  unk_25B5FD0 = v91 | 0x8000000000000000;
  qword_25B5FC0 = (uint64_t)v27;
  if (v24)
  {
LABEL_43:
    if (v23 >= 0) {
      uint64_t v28 = &qword_25B5D50;
    }
    else {
      uint64_t v28 = (uint64_t *)qword_25B5D50;
    }
    memmove(v27, v28, v24);
  }
LABEL_47:
  unint64_t v29 = (char *)v27 + v24;
  if (v25)
  {
    if ((int)v272 >= 0) {
      int v30 = &qword_25B5090;
    }
    else {
      int v30 = (uint64_t *)qword_25B5090;
    }
    memmove(v29, v30, v25);
  }
  v29[v25] = 0;
  int v31 = byte_25B5E0F;
  if (byte_25B5E0F >= 0) {
    size_t v32 = byte_25B5E0F;
  }
  else {
    size_t v32 = qword_25B5E00;
  }
  unint64_t v33 = v32 + v24;
  if (v32 + v24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v33 <= 0x16)
  {
    uint64_t v34 = &qword_25B5FD8;
    qword_25B5FE0 = 0;
    unk_25B5FE8 = 0;
    qword_25B5FD8 = 0;
    byte_25B5FEF = v32 + v24;
    if (!v24) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v92 = v33 | 7;
  }
  uint64_t v93 = v92 + 1;
  uint64_t v34 = (uint64_t *)operator new(v92 + 1);
  qword_25B5FE0 = v32 + v24;
  unk_25B5FE8 = v93 | 0x8000000000000000;
  qword_25B5FD8 = (uint64_t)v34;
  if (v24)
  {
LABEL_58:
    if (v23 >= 0) {
      uint64_t v35 = &qword_25B5D50;
    }
    else {
      uint64_t v35 = (uint64_t *)qword_25B5D50;
    }
    memmove(v34, v35, v24);
  }
LABEL_62:
  uint64_t v36 = (char *)v34 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &qword_25B5DF8;
    }
    else {
      uint64_t v37 = (uint64_t *)qword_25B5DF8;
    }
    memmove(v36, v37, v32);
  }
  v36[v32] = 0;
  qword_25B5FF0 = (uint64_t)operator new(0x19uLL);
  unk_25B5FF8 = v282;
  strcpy((char *)qword_25B5FF0, "{ChargeStationCityName}");
  if (v33 < 0x17)
  {
    uint64_t v38 = &qword_25B6008;
    qword_25B6010 = 0;
    unk_25B6018 = 0;
    qword_25B6008 = 0;
    byte_25B601F = v32 + v24;
    if (!v24) {
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  uint64_t v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v94 = v33 | 7;
  }
  uint64_t v95 = v94 + 1;
  uint64_t v38 = (uint64_t *)operator new(v94 + 1);
  qword_25B6010 = v32 + v24;
  unk_25B6018 = v95 | 0x8000000000000000;
  qword_25B6008 = (uint64_t)v38;
  if (v24)
  {
LABEL_69:
    if (v23 >= 0) {
      unint64_t v39 = &qword_25B5D50;
    }
    else {
      unint64_t v39 = (uint64_t *)qword_25B5D50;
    }
    memmove(v38, v39, v24);
  }
LABEL_73:
  unint64_t v40 = (char *)v38 + v24;
  if (v32)
  {
    if (v31 >= 0) {
      double v41 = &qword_25B5DF8;
    }
    else {
      double v41 = (uint64_t *)qword_25B5DF8;
    }
    memmove(v40, v41, v32);
  }
  v40[v32] = 0;
  strcpy((char *)&xmmword_25B6020, "{NewBatteryPercentage}");
  HIBYTE(word_25B6036) = 22;
  qword_25B6038 = (uint64_t)operator new(0x20uLL);
  xmmword_25B6040 = v275;
  strcpy((char *)qword_25B6038, "{OriginalBatteryPercentage}");
  byte_25B6067 = 19;
  strcpy((char *)&xmmword_25B6050, "_Arrival_Percentage");
  int v42 = byte_25B5DF7;
  if (byte_25B5DF7 >= 0) {
    size_t v43 = byte_25B5DF7;
  }
  else {
    size_t v43 = qword_25B5DE8;
  }
  unint64_t v44 = v43 + v25;
  if (v43 + v25 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v44 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43 + v25;
    if (!v43) {
      goto LABEL_88;
    }
    goto LABEL_84;
  }
  uint64_t v96 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v44 | 7) != 0x17) {
    uint64_t v96 = v44 | 7;
  }
  uint64_t v97 = v96 + 1;
  p_dst = (char *)operator new(v96 + 1);
  __dst.__r_.__value_.__l.__size_ = v43 + v25;
  __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v43)
  {
LABEL_84:
    if (v42 >= 0) {
      uint64_t v46 = &qword_25B5DE0;
    }
    else {
      uint64_t v46 = (uint64_t *)qword_25B5DE0;
    }
    memmove(p_dst, v46, v43);
  }
LABEL_88:
  int v47 = &p_dst[v43];
  if (v25)
  {
    if ((int)v272 >= 0) {
      int v48 = &qword_25B5090;
    }
    else {
      int v48 = (uint64_t *)qword_25B5090;
    }
    memmove(v47, v48, v25);
  }
  v47[v25] = 0;
  char v49 = std::string::append(&__dst, "_Percentage");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  qword_25B6078 = v49->__r_.__value_.__r.__words[2];
  xmmword_25B6068 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v51 = byte_25B5DF7;
  if (byte_25B5DF7 >= 0) {
    size_t v52 = byte_25B5DF7;
  }
  else {
    size_t v52 = qword_25B5DE8;
  }
  int v53 = byte_25B50A7;
  if (byte_25B50A7 >= 0) {
    size_t v54 = byte_25B50A7;
  }
  else {
    size_t v54 = unk_25B5098;
  }
  unint64_t v55 = v54 + v52;
  if (v54 + v52 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v55 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    unint64_t v56 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v54 + v52;
    if (!v52) {
      goto LABEL_108;
    }
    goto LABEL_104;
  }
  uint64_t v98 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v98 = v55 | 7;
  }
  uint64_t v99 = v98 + 1;
  unint64_t v56 = (char *)operator new(v98 + 1);
  v283.__r_.__value_.__l.__size_ = v54 + v52;
  v283.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if (v52)
  {
LABEL_104:
    if (v51 >= 0) {
      char v57 = &qword_25B5DE0;
    }
    else {
      char v57 = (uint64_t *)qword_25B5DE0;
    }
    memmove(v56, v57, v52);
  }
LABEL_108:
  std::string v58 = &v56[v52];
  if (v54)
  {
    if (v53 >= 0) {
      int v59 = &qword_25B5090;
    }
    else {
      int v59 = (uint64_t *)qword_25B5090;
    }
    memmove(v58, v59, v54);
  }
  v58[v54] = 0;
  if (byte_25B50D7 >= 0) {
    unint64_t v60 = (const std::string::value_type *)&qword_25B50C0;
  }
  else {
    unint64_t v60 = (const std::string::value_type *)qword_25B50C0;
  }
  if (byte_25B50D7 >= 0) {
    std::string::size_type v61 = byte_25B50D7;
  }
  else {
    std::string::size_type v61 = *(void *)&byte_25B50C8;
  }
  char v62 = std::string::append(&v283, v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  unsigned int v64 = std::string::append(&__dst, "_Percentage");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  qword_25B6090 = v64->__r_.__value_.__r.__words[2];
  xmmword_25B6080 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_121;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_121:
  int v66 = byte_25B5DF7;
  if (byte_25B5DF7 >= 0) {
    size_t v67 = byte_25B5DF7;
  }
  else {
    size_t v67 = qword_25B5DE8;
  }
  int v68 = byte_25B50A7;
  if (byte_25B50A7 >= 0) {
    size_t v69 = byte_25B50A7;
  }
  else {
    size_t v69 = unk_25B5098;
  }
  unint64_t v70 = v69 + v67;
  if (v69 + v67 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v70 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v71 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v69 + v67;
    if (!v67) {
      goto LABEL_134;
    }
    goto LABEL_130;
  }
  uint64_t v100 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v70 | 7) != 0x17) {
    uint64_t v100 = v70 | 7;
  }
  uint64_t v101 = v100 + 1;
  unint64_t v71 = (char *)operator new(v100 + 1);
  __dst.__r_.__value_.__l.__size_ = v69 + v67;
  __dst.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
  if (v67)
  {
LABEL_130:
    if (v66 >= 0) {
      unint64_t v72 = &qword_25B5DE0;
    }
    else {
      unint64_t v72 = (uint64_t *)qword_25B5DE0;
    }
    memmove(v71, v72, v67);
  }
LABEL_134:
  unsigned int v73 = &v71[v67];
  if (v69)
  {
    if (v68 >= 0) {
      int v74 = &qword_25B5090;
    }
    else {
      int v74 = (uint64_t *)qword_25B5090;
    }
    memmove(v73, v74, v69);
  }
  v73[v69] = 0;
  int v75 = std::string::append(&__dst, "_Duration");
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  qword_25B60A8 = v75->__r_.__value_.__r.__words[2];
  xmmword_25B6098 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v77 = byte_25B5DF7;
  if (byte_25B5DF7 >= 0) {
    size_t v78 = byte_25B5DF7;
  }
  else {
    size_t v78 = qword_25B5DE8;
  }
  int v79 = byte_25B50A7;
  if (byte_25B50A7 >= 0) {
    size_t v80 = byte_25B50A7;
  }
  else {
    size_t v80 = unk_25B5098;
  }
  unint64_t v81 = v80 + v78;
  if (v80 + v78 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v81 <= 0x16)
  {
    qword_25B60B8 = 0;
    unk_25B60C0 = 0;
    qword_25B60B0 = 0;
    uint64_t v82 = &qword_25B60B0;
    byte_25B60C7 = v80 + v78;
    if (!v78) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
  uint64_t v102 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v102 = v81 | 7;
  }
  uint64_t v103 = v102 + 1;
  uint64_t v82 = (uint64_t *)operator new(v102 + 1);
  qword_25B60B8 = v80 + v78;
  unk_25B60C0 = v103 | 0x8000000000000000;
  qword_25B60B0 = (uint64_t)v82;
  if (v78)
  {
LABEL_150:
    if (v77 >= 0) {
      char v83 = &qword_25B5DE0;
    }
    else {
      char v83 = (uint64_t *)qword_25B5DE0;
    }
    memmove(v82, v83, v78);
  }
LABEL_154:
  __darwin_ct_rune_t v84 = (char *)v82 + v78;
  if (v80)
  {
    if (v79 >= 0) {
      int v85 = &qword_25B5090;
    }
    else {
      int v85 = (uint64_t *)qword_25B5090;
    }
    memmove(v84, v85, v80);
  }
  v84[v80] = 0;
  int v86 = byte_25B60C7;
  if (byte_25B60C7 >= 0) {
    size_t v87 = byte_25B60C7;
  }
  else {
    size_t v87 = qword_25B60B8;
  }
  unint64_t v88 = v87 + 5;
  if (v87 + 5 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v88 >= 0x17)
  {
    uint64_t v104 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v88 | 7) != 0x17) {
      uint64_t v104 = v88 | 7;
    }
    uint64_t v105 = v104 + 1;
    uint64_t v89 = (uint64_t *)operator new(v104 + 1);
    qword_25B60D0 = v87 + 5;
    unk_25B60D8 = v105 | 0x8000000000000000;
    qword_25B60C8 = (uint64_t)v89;
  }
  else
  {
    uint64_t v89 = &qword_25B60C8;
    qword_25B60D0 = 0;
    unk_25B60D8 = 0;
    qword_25B60C8 = 0;
    byte_25B60DF = v87 + 5;
    if (!v87) {
      goto LABEL_201;
    }
  }
  if (v86 >= 0) {
    uint64_t v106 = &qword_25B60B0;
  }
  else {
    uint64_t v106 = (uint64_t *)qword_25B60B0;
  }
  memmove(v89, v106, v87);
LABEL_201:
  strcpy((char *)v89 + v87, "_Name");
  int v107 = byte_25B5DF7;
  if (byte_25B5DF7 >= 0) {
    size_t v108 = byte_25B5DF7;
  }
  else {
    size_t v108 = qword_25B5DE8;
  }
  int v109 = byte_25B50A7;
  if (byte_25B50A7 >= 0) {
    size_t v110 = byte_25B50A7;
  }
  else {
    size_t v110 = unk_25B5098;
  }
  unint64_t v111 = v110 + v108;
  if (v110 + v108 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v111 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v112 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v110 + v108;
    if (!v108) {
      goto LABEL_214;
    }
    goto LABEL_210;
  }
  uint64_t v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v111 | 7) != 0x17) {
    uint64_t v122 = v111 | 7;
  }
  uint64_t v123 = v122 + 1;
  unint64_t v112 = (char *)operator new(v122 + 1);
  __dst.__r_.__value_.__l.__size_ = v110 + v108;
  __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
  if (v108)
  {
LABEL_210:
    if (v107 >= 0) {
      int v113 = &qword_25B5DE0;
    }
    else {
      int v113 = (uint64_t *)qword_25B5DE0;
    }
    memmove(v112, v113, v108);
  }
LABEL_214:
  uint64_t v114 = &v112[v108];
  if (v110)
  {
    if (v109 >= 0) {
      uint64_t v115 = &qword_25B5090;
    }
    else {
      uint64_t v115 = (uint64_t *)qword_25B5090;
    }
    memmove(v114, v115, v110);
  }
  v114[v110] = 0;
  long long v116 = std::string::append(&__dst, "_Connector_Type");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  qword_25B60F0 = v116->__r_.__value_.__r.__words[2];
  xmmword_25B60E0 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v118 = SHIBYTE(qword_25B60F0);
  if (qword_25B60F0 >= 0) {
    size_t v119 = HIBYTE(qword_25B60F0);
  }
  else {
    size_t v119 = *((void *)&xmmword_25B60E0 + 1);
  }
  unint64_t v120 = v119 + 6;
  if (v119 + 6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v120 >= 0x17)
  {
    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v120 | 7) != 0x17) {
      uint64_t v124 = v120 | 7;
    }
    uint64_t v125 = v124 + 1;
    unint64_t v121 = (uint64_t *)operator new(v124 + 1);
    qword_25B6100 = v119 + 6;
    unk_25B6108 = v125 | 0x8000000000000000;
    qword_25B60F8 = (uint64_t)v121;
  }
  else
  {
    unint64_t v121 = &qword_25B60F8;
    qword_25B6100 = 0;
    unk_25B6108 = 0;
    qword_25B60F8 = 0;
    byte_25B610F = v119 + 6;
    if (!v119) {
      goto LABEL_239;
    }
  }
  if (v118 >= 0) {
    int v126 = &xmmword_25B60E0;
  }
  else {
    int v126 = (long long *)xmmword_25B60E0;
  }
  memmove(v121, v126, v119);
LABEL_239:
  strcpy((char *)v121 + v119, "_Power");
  int v127 = byte_25B5DF7;
  if (byte_25B5DF7 >= 0) {
    size_t v128 = byte_25B5DF7;
  }
  else {
    size_t v128 = qword_25B5DE8;
  }
  int v129 = byte_25B50A7;
  if (byte_25B50A7 >= 0) {
    size_t v130 = byte_25B50A7;
  }
  else {
    size_t v130 = unk_25B5098;
  }
  unint64_t v131 = v130 + v128;
  if (v130 + v128 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v131 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    v132 = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v130 + v128;
    if (!v128) {
      goto LABEL_252;
    }
    goto LABEL_248;
  }
  uint64_t v161 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v131 | 7) != 0x17) {
    uint64_t v161 = v131 | 7;
  }
  uint64_t v162 = v161 + 1;
  v132 = (char *)operator new(v161 + 1);
  __dst.__r_.__value_.__l.__size_ = v130 + v128;
  __dst.__r_.__value_.__r.__words[2] = v162 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
  if (v128)
  {
LABEL_248:
    if (v127 >= 0) {
      uint64_t v133 = &qword_25B5DE0;
    }
    else {
      uint64_t v133 = (uint64_t *)qword_25B5DE0;
    }
    memmove(v132, v133, v128);
  }
LABEL_252:
  long long v134 = &v132[v128];
  if (v130)
  {
    if (v129 >= 0) {
      uint64_t v135 = &qword_25B5090;
    }
    else {
      uint64_t v135 = (uint64_t *)qword_25B5090;
    }
    memmove(v134, v135, v130);
  }
  v134[v130] = 0;
  if (byte_25B586F >= 0) {
    uint64_t v136 = (const std::string::value_type *)&qword_25B5858;
  }
  else {
    uint64_t v136 = (const std::string::value_type *)qword_25B5858;
  }
  if (byte_25B586F >= 0) {
    std::string::size_type v137 = byte_25B586F;
  }
  else {
    std::string::size_type v137 = unk_25B5860;
  }
  long long v138 = std::string::append(&__dst, v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  qword_25B6120 = v138->__r_.__value_.__r.__words[2];
  xmmword_25B6110 = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v140 = byte_25B5DF7;
  if (byte_25B5DF7 >= 0) {
    size_t v141 = byte_25B5DF7;
  }
  else {
    size_t v141 = qword_25B5DE8;
  }
  int v142 = byte_25B50A7;
  if (byte_25B50A7 >= 0) {
    size_t v143 = byte_25B50A7;
  }
  else {
    size_t v143 = unk_25B5098;
  }
  unint64_t v144 = v143 + v141;
  if (v143 + v141 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v144 <= 0x16)
  {
    memset(&v283, 0, sizeof(v283));
    v145 = (char *)&v283;
    *((unsigned char *)&v283.__r_.__value_.__s + 23) = v143 + v141;
    if (!v141) {
      goto LABEL_278;
    }
    goto LABEL_274;
  }
  uint64_t v163 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v144 | 7) != 0x17) {
    uint64_t v163 = v144 | 7;
  }
  uint64_t v164 = v163 + 1;
  v145 = (char *)operator new(v163 + 1);
  v283.__r_.__value_.__l.__size_ = v143 + v141;
  v283.__r_.__value_.__r.__words[2] = v164 | 0x8000000000000000;
  v283.__r_.__value_.__r.__words[0] = (std::string::size_type)v145;
  if (v141)
  {
LABEL_274:
    if (v140 >= 0) {
      uint64_t v146 = &qword_25B5DE0;
    }
    else {
      uint64_t v146 = (uint64_t *)qword_25B5DE0;
    }
    memmove(v145, v146, v141);
  }
LABEL_278:
  uint64_t v147 = &v145[v141];
  if (v143)
  {
    if (v142 >= 0) {
      char v148 = &qword_25B5090;
    }
    else {
      char v148 = (uint64_t *)qword_25B5090;
    }
    memmove(v147, v148, v143);
  }
  v147[v143] = 0;
  if (byte_25B50D7 >= 0) {
    uint64_t v149 = (const std::string::value_type *)&qword_25B50C0;
  }
  else {
    uint64_t v149 = (const std::string::value_type *)qword_25B50C0;
  }
  if (byte_25B50D7 >= 0) {
    std::string::size_type v150 = byte_25B50D7;
  }
  else {
    std::string::size_type v150 = *(void *)&byte_25B50C8;
  }
  long long v151 = std::string::append(&v283, v149, v150);
  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v152;
  v151->__r_.__value_.__l.__size_ = 0;
  v151->__r_.__value_.__r.__words[2] = 0;
  v151->__r_.__value_.__r.__words[0] = 0;
  if (byte_25B586F >= 0) {
    std::string::size_type v153 = (const std::string::value_type *)&qword_25B5858;
  }
  else {
    std::string::size_type v153 = (const std::string::value_type *)qword_25B5858;
  }
  if (byte_25B586F >= 0) {
    std::string::size_type v154 = byte_25B586F;
  }
  else {
    std::string::size_type v154 = unk_25B5860;
  }
  uint64_t v155 = std::string::append(&__dst, v153, v154);
  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  qword_25B6138 = v155->__r_.__value_.__r.__words[2];
  xmmword_25B6128 = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_297;
    }
  }
  else if ((SHIBYTE(v283.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_297;
  }
  operator delete(v283.__r_.__value_.__l.__data_);
LABEL_297:
  byte_25B6157 = 16;
  strcpy((char *)&xmmword_25B6140, "Use_NACS_Adapter");
  byte_25B616F = 16;
  strcpy(byte_25B6158, "Start_Route_Sign");
  qword_25B6170 = (uint64_t)operator new(0x20uLL);
  unk_25B6178 = v278;
  strcpy((char *)qword_25B6170, "Start_Route_Spoken_Primary");
  int v157 = byte_25B4807;
  if (byte_25B4807 >= 0) {
    size_t v158 = byte_25B4807;
  }
  else {
    size_t v158 = qword_25B47F8;
  }
  unint64_t v159 = v158 + 27;
  if (v158 + 27 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v159 <= 0x16)
  {
    uint64_t v160 = &qword_25B6188;
    qword_25B6190 = 0;
    unk_25B6198 = 0;
    qword_25B6188 = 0;
    byte_25B619F = v158 + 27;
LABEL_314:
    if (v157 >= 0) {
      long long v167 = &qword_25B47F0;
    }
    else {
      long long v167 = (uint64_t *)qword_25B47F0;
    }
    memmove(v160, v167, v158);
    goto LABEL_318;
  }
  uint64_t v165 = (v159 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v159 | 7) != 0x17) {
    uint64_t v165 = v159 | 7;
  }
  uint64_t v166 = v165 + 1;
  uint64_t v160 = (uint64_t *)operator new(v165 + 1);
  qword_25B6190 = v158 + 27;
  unk_25B6198 = v166 | 0x8000000000000000;
  qword_25B6188 = (uint64_t)v160;
  if (v158) {
    goto LABEL_314;
  }
LABEL_318:
  strcpy((char *)v160 + v158, "Turn_Around_To_Route_Spoken");
  strcpy(&byte_25B61B7, "\t_Two_Lanes");
  strcpy((char *)&qword_25B61A0, "_One_Lane");
  strcpy(&byte_25B61CF, "\n_Three_Lanes");
  byte_25B61E7 = 12;
  byte_25B61FF = 11;
  strcpy((char *)&qword_25B61E8, "_Four_Lanes");
  byte_25B6217 = 11;
  strcpy((char *)&qword_25B6200, "_Five_Lanes");
  strcpy(&byte_25B622F, "\n_Seven_Lanes");
  strcpy((char *)&qword_25B6218, "_Six_Lanes");
  byte_25B6247 = 12;
  byte_25B625F = 12;
  strcpy((char *)&qword_25B6248, "_Eight_Lanes");
  byte_25B6277 = 12;
  strcpy((char *)&qword_25B6260, "_Second_Lane");
  byte_25B628F = 11;
  strcpy((char *)&qword_25B6278, "_Third_Lane");
  byte_25B62A7 = 19;
  long long v272 = *(_OWORD *)"_Second_Third_Lanes";
  strcpy((char *)&xmmword_25B6290, "_Second_Third_Lanes");
  byte_25B62BF = 4;
  strcpy((char *)&dword_25B62A8, "Left");
  byte_25B62D7 = 5;
  byte_25B62C4 = 116;
  dword_25B62C0 = 1751607634;
  byte_25B62C5 = 0;
  byte_25B62EF = 6;
  strcpy((char *)&dword_25B62D8, "Middle");
  BYTE1(qword_25B6300) = 0;
  WORD1(qword_25B6300) = 0;
  HIDWORD(qword_25B6300) = 0x10000000;
  strcpy((char *)dword_25B62F0, "Left_Second_Lane");
  BYTE1(qword_25B6318) = 0;
  WORD1(qword_25B6318) = 0;
  HIDWORD(qword_25B6318) = 285212672;
  strcpy((char *)&dword_25B6308, "Right_Second_Lan");
  qword_25B6330 = 0xF00000000000000;
  strcpy((char *)&dword_25B6320, "Left_Third_Lane");
  qword_25B6348 = 0x1000000000000000;
  byte_25B633C = 116;
  dword_25B6338 = 1751607634;
  dword_25B6344 = 1701732684;
  unk_25B633D = *(void *)"_Third_Lane";
  long long v168 = (char *)operator new(0x19uLL);
  qword_25B6350 = (uint64_t)v168;
  unk_25B6358 = v282;
  *(_DWORD *)long long v168 = 1952867660;
  strcpy(v168 + 19, "anes");
  *(_OWORD *)(v168 + 4) = v272;
  int v169 = (char *)operator new(0x20uLL);
  qword_25B6368 = (uint64_t)v169;
  xmmword_25B6370 = v281;
  *(_DWORD *)int v169 = 1751607634;
  v169[4] = 116;
  strcpy(v169 + 20, "anes");
  *(_OWORD *)(v169 + 5) = v272;
  byte_25B6397 = 5;
  strcpy((char *)&dword_25B6380, "_Stay");
  byte_25B63AF = 13;
  strcpy((char *)&qword_25B6398, "Continue_Sign");
  byte_25B63C7 = 8;
  strcpy((char *)&qword_25B63B0, "Continue");
  int v170 = byte_25B5887;
  if (byte_25B5887 >= 0) {
    size_t v171 = byte_25B5887;
  }
  else {
    size_t v171 = qword_25B5878;
  }
  unint64_t v172 = v171 + 8;
  if (v171 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v172 >= 0x17)
  {
    uint64_t v174 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17) {
      uint64_t v174 = v172 | 7;
    }
    uint64_t v175 = v174 + 1;
    uint64_t v176 = operator new(v174 + 1);
    qword_25B63D0 = v171 + 8;
    qword_25B63D8 = v175 | 0x8000000000000000;
    qword_25B63C8 = (uint64_t)v176;
    *uint64_t v176 = 0x65756E69746E6F43;
    uint64_t v173 = v176 + 1;
  }
  else
  {
    qword_25B63D8 = 0;
    HIBYTE(qword_25B63D8) = v171 + 8;
    qword_25B63C8 = 0x65756E69746E6F43;
    qword_25B63D0 = 0;
    uint64_t v173 = &qword_25B63D0;
    if (!v171) {
      goto LABEL_332;
    }
  }
  if (v170 >= 0) {
    int v177 = &qword_25B5870;
  }
  else {
    int v177 = (uint64_t *)qword_25B5870;
  }
  memmove(v173, v177, v171);
LABEL_332:
  *((unsigned char *)v173 + v171) = 0;
  int v178 = SHIBYTE(qword_25B58E0);
  if (qword_25B58E0 >= 0) {
    size_t v179 = HIBYTE(qword_25B58E0);
  }
  else {
    size_t v179 = unk_25B58D8;
  }
  unint64_t v180 = v179 + 8;
  if (v179 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v180 >= 0x17)
  {
    uint64_t v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v180 | 7) != 0x17) {
      uint64_t v182 = v180 | 7;
    }
    uint64_t v183 = v182 + 1;
    unint64_t v184 = operator new(v182 + 1);
    qword_25B63E8 = v179 + 8;
    qword_25B63F0 = v183 | 0x8000000000000000;
    qword_25B63E0 = (uint64_t)v184;
    *unint64_t v184 = qword_25B63B0;
    uint64_t v181 = v184 + 1;
  }
  else
  {
    qword_25B63F0 = 0;
    HIBYTE(qword_25B63F0) = v179 + 8;
    qword_25B63E0 = qword_25B63B0;
    qword_25B63E8 = 0;
    uint64_t v181 = &qword_25B63E8;
    if (!v179) {
      goto LABEL_346;
    }
  }
  if (v178 >= 0) {
    long long v185 = &qword_25B58D0;
  }
  else {
    long long v185 = (uint64_t *)qword_25B58D0;
  }
  memmove(v181, v185, v179);
LABEL_346:
  *((unsigned char *)v181 + v179) = 0;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 83;
  v285[23] = 2;
  strcpy(v285, "SW");
  v287[7] = 1;
  LOWORD(v286[0]) = 87;
  HIBYTE(v288) = 2;
  strcpy(&v287[8], "NW");
  HIBYTE(v290) = 1;
  LOWORD(v289[0]) = 78;
  HIBYTE(v292) = 2;
  strcpy((char *)&v291, "NE");
  HIBYTE(v294) = 1;
  LOWORD(v293) = 69;
  HIBYTE(v296) = 2;
  strcpy((char *)&__p, "SE");
  sub_4BDC0C(qword_25B63F8, (uint64_t)&__dst, 8uLL);
  if (SHIBYTE(v296) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v294) & 0x80000000) == 0)
    {
LABEL_348:
      if ((SHIBYTE(v292) & 0x80000000) == 0) {
        goto LABEL_349;
      }
      goto LABEL_383;
    }
  }
  else if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
    goto LABEL_348;
  }
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_349:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_350;
    }
    goto LABEL_384;
  }
LABEL_383:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_350:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_351;
    }
    goto LABEL_385;
  }
LABEL_384:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_351:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_386;
  }
LABEL_385:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_352:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_353;
    }
LABEL_387:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_388;
  }
LABEL_386:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_387;
  }
LABEL_353:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_354;
  }
LABEL_388:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_354:
  byte_25B6427 = 13;
  strcpy((char *)&qword_25B6410, "{instruction}");
  byte_25B643F = 20;
  strcpy(byte_25B6428, "{primaryInstruction}");
  strcpy((char *)&xmmword_25B6440, "{secondaryInstruction}");
  HIBYTE(word_25B6456) = 22;
  qword_25B6458 = (uint64_t)operator new(0x20uLL);
  unk_25B6460 = v280;
  strcpy((char *)qword_25B6458, "{andSecondaryInstruction}");
  qword_25B6470 = (uint64_t)operator new(0x20uLL);
  unk_25B6478 = v281;
  strcpy((char *)qword_25B6470, "{toSecondaryInstruction}");
  byte_25B649F = 21;
  strcpy(byte_25B6488, "{continueInstruction}");
  qword_25B64A0 = (uint64_t)operator new(0x20uLL);
  unk_25B64A8 = v278;
  strcpy((char *)qword_25B64A0, "{thenSecondaryInstruction}");
  byte_25B64CF = 14;
  strcpy((char *)&qword_25B64B8, "{instruction1}");
  byte_25B64E7 = 14;
  strcpy((char *)&qword_25B64D0, "{instruction2}");
  strcpy(&byte_25B64FF, "\n{nextDistance}");
  strcpy((char *)&qword_25B64E8, "{distance}");
  byte_25B6517 = 14;
  byte_25B652F = 16;
  strcpy(byte_25B6518, "{valid_distance}");
  strcpy(&byte_25B6547, "\n{valid_distance}");
  strcpy((char *)&qword_25B6530, "{distance}");
  byte_25B655F = 16;
  byte_25B6577 = 15;
  strcpy((char *)&qword_25B6560, "{ClimbDistance}");
  byte_25B658F = 17;
  strcpy(byte_25B6578, "{DescentDistance}");
  byte_25B65A7 = 13;
  strcpy((char *)&qword_25B6590, "{nonBrkSpace}");
  byte_25B65BF = 9;
  strcpy((char *)&qword_25B65A8, "{newLine}");
  byte_25B65D7 = 6;
  word_25B65C4 = -24382;
  dword_25B65C0 = -1211981630;
  byte_25B65C6 = 0;
  byte_25B65EF = 2;
  word_25B65D8 = -24382;
  byte_25B65DA = 0;
  byte_25B6607 = 1;
  word_25B65F0 = 10;
  byte_25B661F = 1;
  word_25B6608 = 32;
  byte_25B6637 = 2;
  strcpy((char *)&word_25B6620, "\n\n");
  strcpy(&byte_25B664F, "\t{TowardShield1}");
  strcpy((char *)&qword_25B6638, "{Shield1}");
  byte_25B6667 = 15;
  strcpy(&byte_25B667F, "\t{TowardShield2}");
  strcpy((char *)&qword_25B6668, "{Shield2}");
  byte_25B6697 = 15;
  byte_25B66AF = 12;
  strcpy((char *)&qword_25B6698, "{Direction1}");
  byte_25B66C7 = 12;
  strcpy((char *)&qword_25B66B0, "{Direction2}");
  byte_25B66DF = 18;
  strcpy((char *)&xmmword_25B66C8, "{TowardDirection1}");
  byte_25B66F7 = 18;
  strcpy((char *)&xmmword_25B66E0, "{TowardDirection2}");
  byte_25B670F = 7;
  strcpy((char *)&dword_25B66F8, "{Icon1}");
  byte_25B6727 = 7;
  strcpy((char *)&dword_25B6710, "{Icon2}");
  byte_25B6728[23] = 14;
  strcpy(byte_25B6728, "{Intersection}");
  byte_25B6757 = 6;
  strcpy((char *)&xmmword_25B6740, "{Road}");
  byte_25B676F = 7;
  strcpy((char *)&dword_25B6758, "{Road1}");
  byte_25B6787 = 7;
  strcpy((char *)&xmmword_25B6770, "{Road2}");
  strcpy(&byte_25B679F, "\n{Freeway}");
  strcpy((char *)&qword_25B6788, "{Elevator}");
  strcpy(&byte_25B67B7, "\t{Ferry}");
  byte_25B67CF = 7;
  byte_25B67E7 = 13;
  strcpy((char *)&xmmword_25B67D0, "{ShuttleName}");
  byte_25B67FF = 11;
  strcpy((char *)&xmmword_25B67E8, "{Signpost1}");
  byte_25B6817 = 11;
  strcpy((char *)&xmmword_25B6800, "{Signpost2}");
  byte_25B682F = 12;
  strcpy((char *)&xmmword_25B6818, "{ExitNumber}");
  strcpy(&byte_25B6847, "\t{Name}");
  strcpy((char *)&xmmword_25B6830, "{Address}");
  byte_25B685F = 6;
  byte_25B6877 = 11;
  strcpy((char *)&xmmword_25B6860, "{PlaceName}");
  byte_25B688F = 14;
  strcpy((char *)&xmmword_25B6878, "{ElevatorName}");
  byte_25B68A7 = 15;
  strcpy((char *)&xmmword_25B6890, "{EscalatorName}");
  byte_25B68BF = 12;
  strcpy((char *)&xmmword_25B68A8, "{StairsName}");
  strcpy(&byte_25B68D7, "\n{BridgeName}");
  strcpy((char *)&xmmword_25B68C0, "{RampName}");
  byte_25B68EF = 12;
  byte_25B6907 = 12;
  strcpy((char *)&xmmword_25B68F0, "{TunnelName}");
  byte_25B691F = 13;
  strcpy((char *)&xmmword_25B6908, "{CustomLabel}");
  std::string __dst = *(std::string *)byte_25B6728;
  *(_OWORD *)int v285 = xmmword_25B6740;
  *(void *)&v285[16] = unk_25B6750;
  *(_OWORD *)uint64_t v286 = *(_OWORD *)&dword_25B6758;
  *(void *)long long v287 = unk_25B6768;
  *(_OWORD *)&v287[8] = xmmword_25B6770;
  uint64_t v288 = unk_25B6780;
  *(_OWORD *)v289 = *(_OWORD *)&qword_25B6788;
  uint64_t v290 = unk_25B6798;
  uint64_t v292 = unk_25B67B0;
  long long v291 = xmmword_25B67A0;
  long long v293 = *(_OWORD *)&dword_25B67B8;
  uint64_t v294 = unk_25B67C8;
  uint64_t v296 = unk_25B67E0;
  long long __p = xmmword_25B67D0;
  long long v297 = xmmword_25B67E8;
  uint64_t v298 = unk_25B67F8;
  uint64_t v300 = unk_25B6810;
  long long v299 = xmmword_25B6800;
  long long v301 = xmmword_25B6818;
  long long v303 = xmmword_25B6830;
  uint64_t v302 = unk_25B6828;
  uint64_t v304 = unk_25B6840;
  long long v305 = xmmword_25B6848;
  long long v307 = xmmword_25B6860;
  uint64_t v306 = unk_25B6858;
  uint64_t v308 = unk_25B6870;
  long long v309 = xmmword_25B6878;
  long long v311 = xmmword_25B6890;
  uint64_t v310 = unk_25B6888;
  uint64_t v312 = unk_25B68A0;
  long long v313 = xmmword_25B68A8;
  long long v315 = xmmword_25B68C0;
  uint64_t v314 = unk_25B68B8;
  uint64_t v316 = unk_25B68D0;
  long long v317 = xmmword_25B68D8;
  long long v319 = xmmword_25B68F0;
  uint64_t v318 = unk_25B68E8;
  uint64_t v320 = unk_25B6900;
  uint64_t v322 = unk_25B6918;
  long long v321 = xmmword_25B6908;
  sub_4BDC0C(qword_25B6920, (uint64_t)&__dst, 0x15uLL);
  if (SHIBYTE(v322) < 0)
  {
    operator delete((void *)v321);
    if ((SHIBYTE(v320) & 0x80000000) == 0)
    {
LABEL_356:
      if ((SHIBYTE(v318) & 0x80000000) == 0) {
        goto LABEL_357;
      }
      goto LABEL_391;
    }
  }
  else if ((SHIBYTE(v320) & 0x80000000) == 0)
  {
    goto LABEL_356;
  }
  operator delete((void *)v319);
  if ((SHIBYTE(v318) & 0x80000000) == 0)
  {
LABEL_357:
    if ((SHIBYTE(v316) & 0x80000000) == 0) {
      goto LABEL_358;
    }
    goto LABEL_392;
  }
LABEL_391:
  operator delete((void *)v317);
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_358:
    if ((SHIBYTE(v314) & 0x80000000) == 0) {
      goto LABEL_359;
    }
    goto LABEL_393;
  }
LABEL_392:
  operator delete((void *)v315);
  if ((SHIBYTE(v314) & 0x80000000) == 0)
  {
LABEL_359:
    if ((SHIBYTE(v312) & 0x80000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_394;
  }
LABEL_393:
  operator delete((void *)v313);
  if ((SHIBYTE(v312) & 0x80000000) == 0)
  {
LABEL_360:
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_361;
    }
    goto LABEL_395;
  }
LABEL_394:
  operator delete((void *)v311);
  if ((SHIBYTE(v310) & 0x80000000) == 0)
  {
LABEL_361:
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_362;
    }
    goto LABEL_396;
  }
LABEL_395:
  operator delete((void *)v309);
  if ((SHIBYTE(v308) & 0x80000000) == 0)
  {
LABEL_362:
    if ((SHIBYTE(v306) & 0x80000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_397;
  }
LABEL_396:
  operator delete((void *)v307);
  if ((SHIBYTE(v306) & 0x80000000) == 0)
  {
LABEL_363:
    if ((SHIBYTE(v304) & 0x80000000) == 0) {
      goto LABEL_364;
    }
    goto LABEL_398;
  }
LABEL_397:
  operator delete((void *)v305);
  if ((SHIBYTE(v304) & 0x80000000) == 0)
  {
LABEL_364:
    if ((SHIBYTE(v302) & 0x80000000) == 0) {
      goto LABEL_365;
    }
    goto LABEL_399;
  }
LABEL_398:
  operator delete((void *)v303);
  if ((SHIBYTE(v302) & 0x80000000) == 0)
  {
LABEL_365:
    if ((SHIBYTE(v300) & 0x80000000) == 0) {
      goto LABEL_366;
    }
    goto LABEL_400;
  }
LABEL_399:
  operator delete((void *)v301);
  if ((SHIBYTE(v300) & 0x80000000) == 0)
  {
LABEL_366:
    if ((SHIBYTE(v298) & 0x80000000) == 0) {
      goto LABEL_367;
    }
    goto LABEL_401;
  }
LABEL_400:
  operator delete((void *)v299);
  if ((SHIBYTE(v298) & 0x80000000) == 0)
  {
LABEL_367:
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_368;
    }
    goto LABEL_402;
  }
LABEL_401:
  operator delete((void *)v297);
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
LABEL_368:
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_369;
    }
    goto LABEL_403;
  }
LABEL_402:
  operator delete((void *)__p);
  if ((SHIBYTE(v294) & 0x80000000) == 0)
  {
LABEL_369:
    if ((SHIBYTE(v292) & 0x80000000) == 0) {
      goto LABEL_370;
    }
    goto LABEL_404;
  }
LABEL_403:
  operator delete((void *)v293);
  if ((SHIBYTE(v292) & 0x80000000) == 0)
  {
LABEL_370:
    if ((SHIBYTE(v290) & 0x80000000) == 0) {
      goto LABEL_371;
    }
    goto LABEL_405;
  }
LABEL_404:
  operator delete((void *)v291);
  if ((SHIBYTE(v290) & 0x80000000) == 0)
  {
LABEL_371:
    if ((SHIBYTE(v288) & 0x80000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_406;
  }
LABEL_405:
  operator delete(v289[0]);
  if ((SHIBYTE(v288) & 0x80000000) == 0)
  {
LABEL_372:
    if ((v287[7] & 0x80000000) == 0) {
      goto LABEL_373;
    }
    goto LABEL_407;
  }
LABEL_406:
  operator delete(*(void **)&v287[8]);
  if ((v287[7] & 0x80000000) == 0)
  {
LABEL_373:
    if ((v285[23] & 0x80000000) == 0) {
      goto LABEL_374;
    }
LABEL_408:
    operator delete(*(void **)v285);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_375;
    }
    goto LABEL_409;
  }
LABEL_407:
  operator delete(v286[0]);
  if ((v285[23] & 0x80000000) != 0) {
    goto LABEL_408;
  }
LABEL_374:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_409:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_375:
  qword_25B6938 = (uint64_t)operator new(0x19uLL);
  unk_25B6940 = v282;
  strcpy((char *)qword_25B6938, "From_User_Location_List");
  byte_25B6967 = 20;
  strcpy(byte_25B6950, "Origin_Waypoint_List");
  qword_25B6968 = (uint64_t)operator new(0x20uLL);
  unk_25B6970 = v278;
  strcpy((char *)qword_25B6968, "Intermediate_Waypoint_List");
  unk_25B6980 = operator new(0x20uLL);
  unk_25B6988 = v280;
  strcpy(unk_25B6980, "Destination_Waypoint_List");
  byte_25B69AF = 15;
  strcpy(byte_25B6998, "{toDestination}");
  byte_25B69C7 = 13;
  strcpy((char *)&xmmword_25B69B0, "{Destination}");
  byte_25B69DF = 7;
  strcpy(byte_25B69C8, "To_Home");
  byte_25B69F7 = 14;
  strcpy(byte_25B69E0, "To_ContactHome");
  byte_25B6A0F = 7;
  strcpy(byte_25B69F8, "To_Work");
  byte_25B6A27 = 14;
  strcpy(byte_25B6A10, "To_ContactWork");
  strcpy(&byte_25B6A3F, "\nTo_Business");
  strcpy(byte_25B6A28, "To_Address");
  byte_25B6A57 = 11;
  byte_25B6A6F = 16;
  strcpy(byte_25B6A58, "To_Other_Contact");
  strcpy(&byte_25B6A87, "\tTo_ContactSchool");
  strcpy(byte_25B6A70, "To_School");
  byte_25B6A9F = 16;
  byte_25B6AB7 = 17;
  strcpy(byte_25B6AA0, "To_PersonLocation");
  qword_25B6AB8 = (uint64_t)operator new(0x20uLL);
  unk_25B6AC0 = v279;
  strcpy((char *)qword_25B6AB8, "To_ContactCustomLabelAddress");
  byte_25B6AE7 = 7;
  strcpy((char *)&dword_25B6AD0, "At_Home");
  byte_25B6AFF = 14;
  strcpy((char *)&qword_25B6AE8, "At_ContactHome");
  byte_25B6B17 = 7;
  strcpy((char *)&dword_25B6B00, "At_Work");
  byte_25B6B2F = 14;
  strcpy((char *)&qword_25B6B18, "At_ContactWork");
  strcpy(&byte_25B6B47, "\nAt_Business");
  strcpy((char *)&qword_25B6B30, "At_Address");
  byte_25B6B5F = 11;
  byte_25B6B77 = 16;
  strcpy(byte_25B6B60, "At_Other_Contact");
  byte_25B6B8F = 4;
  strcpy((char *)&dword_25B6B78, "Home");
  byte_25B6BA7 = 11;
  strcpy((char *)&qword_25B6B90 + 7, "Home");
  qword_25B6B90 = *(void *)&v266[16];
  byte_25B6BBF = 4;
  strcpy((char *)&dword_25B6BA8, "Work");
  byte_25B6BD7 = 11;
  strcpy((char *)&qword_25B6BC0 + 7, "Work");
  qword_25B6BC0 = *(void *)v266;
  byte_25B6BEF = 7;
  strcpy((char *)&dword_25B6BD8, "Address");
  byte_25B6C07 = 8;
  strcpy((char *)&qword_25B6BF0, "Business");
  byte_25B6C1F = 13;
  qword_25B6C08 = *(void *)&v266[48];
  *(uint64_t *)((char *)&qword_25B6C08 + 5) = *(void *)&v266[32];
  byte_25B6C15 = 0;
  byte_25B6C37 = 6;
  strcpy((char *)&dword_25B6C20, "School");
  byte_25B6C4F = 13;
  strcpy((char *)&qword_25B6C38, "ContactSchool");
  byte_25B6C67 = 14;
  strcpy((char *)&qword_25B6C50, "PersonLocation");
  qword_25B6C68 = (uint64_t)operator new(0x20uLL);
  xmmword_25B6C70 = v280;
  strcpy((char *)qword_25B6C68, "ContactCustomLabelAddress");
  if (byte_25B69C7 < 0)
  {
    sub_4200(&xmmword_25B6C80, (void *)xmmword_25B69B0, *((unint64_t *)&xmmword_25B69B0 + 1));
  }
  else
  {
    xmmword_25B6C80 = xmmword_25B69B0;
    qword_25B6C90 = unk_25B69C0;
  }
  byte_25B6CAF = 16;
  strcpy((char *)&xmmword_25B6C98, "{PrevExitNumber}");
  byte_25B6CC7 = 10;
  strcpy((char *)&qword_25B6CB0, "{PrevRoad}");
  qword_25B6CC8 = (uint64_t)operator new(0x20uLL);
  unk_25B6CD0 = v281;
  strcpy((char *)qword_25B6CC8, "{RouteTotalExpectedTime}");
  byte_25B6CF7 = 18;
  strcpy(byte_25B6CE0, "{ChargePercentage}");
  qword_25B6CF8 = (uint64_t)operator new(0x20uLL);
  unk_25B6D00 = v275;
  strcpy((char *)qword_25B6CF8, "{RemainingChargePercentage}");
  byte_25B6D27 = 16;
  strcpy(byte_25B6D10, "{ChargeDuration}");
  byte_25B6D3F = 15;
  strcpy((char *)&qword_25B6D28, "{ConnectorType}");
  byte_25B6D57 = 19;
  strcpy(byte_25B6D40, "{ChargeStationName}");
  byte_25B6D6F = 7;
  strcpy((char *)&dword_25B6D58, "{Power}");
  byte_25B6D87 = 13;
  strcpy((char *)&qword_25B6D70, "{VehicleName}");
  byte_25B6D9F = 18;
  strcpy((char *)&xmmword_25B6D88, "{AreaIncidentName}");
  byte_25B6DB7 = 14;
  strcpy((char *)&qword_25B6DA0, "{AreaIncident}");
  byte_25B6DCF = 16;
  strcpy((char *)&xmmword_25B6DB8, "{AffectedRegion}");
  byte_25B6DE7 = 21;
  strcpy(byte_25B6DD0, "{AreaIncidentWeblink}");
  byte_25B6DFF = 20;
  strcpy((char *)&xmmword_25B6DE8, "{AreaIncidentAgency}");
  byte_25B6E17 = 11;
  strcpy((char *)&qword_25B6E00, "{IssueTime}");
  byte_25B6E2F = 12;
  strcpy((char *)&qword_25B6E18, "{UpdateTime}");
  byte_25B6E47 = 11;
  strcpy((char *)&qword_25B6E30, "{IssueDate}");
  byte_25B6E5F = 12;
  strcpy((char *)&qword_25B6E48, "{UpdateDate}");
  qword_25B6E60 = (uint64_t)operator new(0x20uLL);
  unk_25B6E68 = v281;
  strcpy((char *)qword_25B6E60, "{AreaIncidentDataSource}");
  byte_25B6E8F = 13;
  strcpy((char *)&qword_25B6E78, "{AreaHectare}");
  byte_25B6EA7 = 10;
  strcpy((char *)&qword_25B6E90, "{AreaAcre}");
  qword_25B6EA8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B6EB0 = v277;
  strcpy((char *)qword_25B6EA8, "{WildfirePercentageContained}");
  qword_25B6EC0 = (uint64_t)operator new(0x28uLL);
  unk_25B6EC8 = v270[2];
  strcpy((char *)qword_25B6EC0, "{WildfireExpectedContainmentDate}");
  qword_25B6ED8 = (uint64_t)operator new(0x20uLL);
  unk_25B6EE0 = v279;
  strcpy((char *)qword_25B6ED8, "{ServerRecommendedRouteName}");
  qword_25B6EF0 = (uint64_t)operator new(0x20uLL);
  unk_25B6EF8 = v279;
  strcpy((char *)qword_25B6EF0, "{ServerNonRecommendedRoute1}");
  qword_25B6F08 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B6F10 = v279;
  strcpy((char *)qword_25B6F08, "{ServerNonRecommendedRoute2}");
  byte_25B6F37 = 12;
  strcpy((char *)&qword_25B6F20, "{ClientDest}");
  byte_25B6F4F = 6;
  strcpy((char *)&dword_25B6F38, "{Name}");
  qword_25B6F50 = (uint64_t)operator new(0x20uLL);
  unk_25B6F58 = v270[1];
  strcpy((char *)qword_25B6F50, "ProactiveAlert_FasterRouteTitle");
  qword_25B6F68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B6F70 = v278;
  strcpy((char *)qword_25B6F68, "ProactiveAlert_RoadClosure");
  qword_25B6F80 = (uint64_t)operator new(0x30uLL);
  unk_25B6F88 = v273;
  strcpy((char *)qword_25B6F80, "ProactiveAlert_UnusuallyHeavyTrafficOnTwo");
  qword_25B6F98 = (uint64_t)operator new(0x28uLL);
  unk_25B6FA0 = v276;
  strcpy((char *)qword_25B6F98, "ProactiveAlert_FasterRouteTitle_to_Home");
  qword_25B6FB0 = (uint64_t)operator new(0x28uLL);
  unk_25B6FB8 = v276;
  strcpy((char *)qword_25B6FB0, "ProactiveAlert_FasterRouteTitle_to_Work");
  qword_25B6FC8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B6FD0 = v276;
  strcpy((char *)qword_25B6FC8, "ProactiveAlert_FasterRouteTitle_to_Name");
  qword_25B6FE0 = (uint64_t)operator new(0x30uLL);
  unk_25B6FE8 = xmmword_20B93B0;
  strcpy((char *)qword_25B6FE0, "ProactiveAlert_FasterRouteTitle_to_StreetName");
  byte_25B700F = 17;
  strcpy(byte_25B6FF8, "Proactive_Driving");
  strcpy(&byte_25B7027, "\n{RouteName}");
  strcpy((char *)&qword_25B7010, "_RouteName");
  byte_25B703F = 11;
  qword_25B7040 = (uint64_t)operator new(0x28uLL);
  unk_25B7048 = v270[2];
  strcpy((char *)qword_25B7040, "Pass_Traffic_Light_Spoken_Primary");
  qword_25B7058 = (uint64_t)operator new(0x20uLL);
  unk_25B7060 = v277;
  strcpy((char *)qword_25B7058, "Pass_Stop_Sign_Spoken_Primary");
  unk_25B7070 = operator new(0x20uLL);
  unk_25B7078 = v270[0];
  strcpy(unk_25B7070, "Pass_Roundabout_Spoken_Primary");
  strcpy(&byte_25B709F, "\nBannerBody");
  strcpy(byte_25B7088, "BannerHead");
  strcpy(&byte_25B70B7, "\nBannerDescription");
  byte_25B70CF = 17;
  strcpy(&byte_25B70E7, "\n_Incident");
  strcpy((char *)&qword_25B70D0, "VoiceAlert");
  strcpy(&byte_25B70FF, "\t_Area_Incident");
  byte_25B7117 = 14;
  byte_25B712F = 15;
  strcpy((char *)&qword_25B7118, "_Area_Incidents");
  strcpy(&byte_25B7147, "\t_Crash");
  strcpy((char *)&qword_25B7130, "_Accident");
  byte_25B715F = 6;
  byte_25B7177 = 16;
  strcpy((char *)&xmmword_25B7160, "_Congestion_Zone");
  strcpy(&byte_25B718F, "\n_Environmental_Zone");
  strcpy((char *)&qword_25B7178, "_Toll_Zone");
  byte_25B71A7 = 19;
  BYTE1(qword_25B71B8) = 116;
  WORD1(qword_25B71B8) = 0;
  HIDWORD(qword_25B71B8) = 301989888;
  strcpy(byte_25B71C0, "_Construction");
  strcpy((char *)&qword_25B71A8, "_Incident_Accide");
  byte_25B71D7 = 13;
  byte_25B71EF = 7;
  strcpy((char *)&dword_25B71D8, "_Hazard");
  byte_25B7207 = 12;
  strcpy((char *)&qword_25B71F0, "_LaneClosure");
  byte_25B721F = 12;
  strcpy((char *)&qword_25B7208, "_LaneTrailer");
  qmemcpy(&byte_25B7237, "\t_LaneTrailer", 13);
  strcpy((char *)&qword_25B7220, "_Shoulder");
  qword_25B7248 = 0x1500007200000000;
  *(void *)algn_25B7244 = *(void *)"_Shoulder";
  strcpy((char *)&xmmword_25B7250, "_Causing_Traffic_Delay");
  HIBYTE(word_25B7266) = 22;
  byte_25B727F = 6;
  strcpy((char *)&dword_25B7268, "_Timed");
  byte_25B7297 = 12;
  strcpy((char *)&qword_25B7280, "_HasDistance");
  byte_25B72AF = 8;
  strcpy((char *)&qword_25B7298, "_Closure");
  strcpy(&byte_25B72C7, "\n_BadRoad");
  strcpy((char *)&qword_25B72B0, "_NoReroute");
  byte_25B72DF = 8;
  byte_25B72F7 = 12;
  strcpy((char *)&qword_25B72E0, "_TollTrailer");
  byte_25B730F = 12;
  strcpy((char *)&qword_25B72F8, "_BestTrailer");
  byte_25B7327 = 8;
  strcpy((char *)&qword_25B7310, "_Trailer");
  byte_25B733F = 18;
  strcpy((char *)&xmmword_25B7328, "_Secondary_Trailer");
  byte_25B7357 = 8;
  strcpy((char *)&qword_25B7340, "_Savings");
  byte_25B736F = 8;
  strcpy((char *)&qword_25B7358, "_AltRoad");
  byte_25B7387 = 6;
  strcpy((char *)&dword_25B7370, "_Named");
  byte_25B739F = 6;
  strcpy((char *)&dword_25B7388, "_NAMED");
  byte_25B73B7 = 22;
  strcpy((char *)&xmmword_25B73A0, "_Named_Suggested_Route");
  qword_25B73D0 = 0x1000000000000000;
  xmmword_25B73C0 = xmmword_20E81D0;
  byte_25B73EF = 11;
  strcpy((char *)&qword_25B73D8, "_Speed_Trap");
  byte_25B7407 = 4;
  strcpy((char *)&dword_25B73F0, "_UGI");
  byte_25B741F = 12;
  strcpy((char *)&qword_25B7408, "_Safer_Route");
  qword_25B7420 = (uint64_t)operator new(0x20uLL);
  unk_25B7428 = v270[1];
  strcpy((char *)qword_25B7420, "BlockedRouteByBlockingIncident_");
  qword_25B7438 = (uint64_t)operator new(0x28uLL);
  long long v272 = xmmword_20B9280;
  unk_25B7440 = xmmword_20B9280;
  strcpy((char *)qword_25B7438, "BlockedRouteByManeuverRestriction_");
  qword_25B7450 = (uint64_t)operator new(0x20uLL);
  unk_25B7458 = v270[0];
  strcpy((char *)qword_25B7450, "BlockedRouteByTimeRestriction_");
  qword_25B7468 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B7470 = xmmword_20B8FD0;
  strcpy((char *)qword_25B7468, "SuggestRouteToAvoidBlockingIncident_");
  qword_25B7480 = (uint64_t)operator new(0x30uLL);
  unk_25B7488 = xmmword_20B9380;
  strcpy((char *)qword_25B7480, "SuggestRouteToAvoidBlockingManeuverRestriction_");
  qword_25B7498 = (uint64_t)operator new(0x30uLL);
  unk_25B74A0 = xmmword_20B93E0;
  strcpy((char *)qword_25B7498, "SuggestRouteToAvoidBlockingTimeRestriction_");
  byte_25B74C7 = 1;
  word_25B74B0 = 95;
  strcpy((char *)&xmmword_25B74C8, "IncidentsCausingDelay_");
  HIBYTE(word_25B74DE) = 22;
  qword_25B74E0 = (uint64_t)operator new(0x19uLL);
  unk_25B74E8 = v282;
  strcpy((char *)qword_25B74E0, "NonVotableRoadIncident_");
  byte_25B750F = 20;
  strcpy(byte_25B74F8, "VotableRoadIncident_");
  byte_25B7527 = 13;
  strcpy((char *)&qword_25B7510, "AreaIncident_");
  byte_25B753F = 15;
  strcpy((char *)&qword_25B7528, "CongestionZone_");
  qword_25B7540 = (uint64_t)operator new(0x20uLL);
  unk_25B7548 = v281;
  strcpy((char *)qword_25B7540, "EVModifiedChargingStops_");
  byte_25B756F = 13;
  strcpy((char *)&qword_25B7558, "EVDisconnect_");
  byte_25B7587 = 12;
  strcpy((char *)&qword_25B7570, "EVReconnect_");
  qword_25B7588 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B7590 = v279;
  strcpy((char *)qword_25B7588, "EVOfflineToOnlineTransition_");
  byte_25B75B7 = 13;
  strcpy((char *)&qword_25B75A0, "EVOfflineSAR_");
  byte_25B75CF = 21;
  strcpy((char *)&xmmword_25B75B8, "EVTowingNotSupported_");
  byte_25B75E7 = 18;
  strcpy(algn_25B75D0, "EVInfeasibleRoute_");
  qword_25B75E8 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25B75F0 = xmmword_20B8DF0;
  strcpy((char *)qword_25B75E8, "SuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25B7600 = (uint64_t)operator new(0x40uLL);
  unk_25B7608 = xmmword_20B98C0;
  strcpy((char *)qword_25B7600, "LCSuggestRouteAddingStopsBeforeEVInfeasibleOriginalStop_");
  qword_25B7618 = (uint64_t)operator new(0x30uLL);
  unk_25B7620 = v274;
  strcpy((char *)qword_25B7618, "SuggestRouteAddingStopsForEVInfeasibleRoute_");
  qmemcpy(v270, "InfeasibleRoute_ngStopsForEVInfeSuggestRouteAddi", sizeof(v270));
  qword_25B7630 = (uint64_t)operator new(0x30uLL);
  *(_WORD *)&v266[50] = 0;
  *(_DWORD *)&v266[52] = 0;
  *(void *)&v266[56] = 0x8000000000000030;
  unk_25B7638 = xmmword_20B9A80;
  strcpy((char *)qword_25B7630, "LCSuggestRouteAddingStopsForEVInfeasibleRoute_");
  strcpy(v266, "InfeasibleRoute_dingStopsForEVInLCSuggestRouteAd.");
  qword_25B7648 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25B7650 = v273;
  strcpy((char *)qword_25B7648, "SuggestRouteAddingStopsToIncreaseDestSoc_");
  uint64_t v186 = operator new(0x30uLL);
  qword_25B7660 = (uint64_t)v186;
  unk_25B7668 = v274;
  *uint64_t v186 = v270[2];
  v186[1] = v270[1];
  *(_OWORD *)((char *)v186 + 28) = v270[0];
  *((unsigned char *)v186 + 44) = 0;
  qword_25B7678 = (uint64_t)operator new(0x28uLL);
  unk_25B7680 = v272;
  strcpy((char *)qword_25B7678, "SuggestDetourWithHigherArrivalSOC_");
  int v187 = operator new(0x30uLL);
  qword_25B7690 = (uint64_t)v187;
  unk_25B7698 = *(_OWORD *)&v266[48];
  *int v187 = *(_OWORD *)&v266[32];
  v187[1] = *(_OWORD *)&v266[16];
  *(_OWORD *)((char *)v187 + 30) = *(_OWORD *)v266;
  *((unsigned char *)v187 + 46) = 0;
  qword_25B76A8 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B76B0 = v276;
  strcpy((char *)qword_25B76A8, "SuggestRouteToDestForEVInfeasibleRoute_");
  qword_25B76C0 = (uint64_t)operator new(0x28uLL);
  unk_25B76C8 = v269;
  strcpy((char *)qword_25B76C0, "SuggestRouteRemovingStopsFromEVRoute_");
  qword_25B76D8 = (uint64_t)operator new(0x20uLL);
  unk_25B76E0 = v281;
  strcpy((char *)qword_25B76D8, "OfflineToOnlineNewRoute_");
  qword_25B76F0 = (uint64_t)operator new(0x40uLL);
  unk_25B76F8 = xmmword_20B98C0;
  strcpy((char *)qword_25B76F0, "SuggestDetourWithHigherArrivalSOCForInfeasibleUserRoute_");
  byte_25B771F = 20;
  strcpy(byte_25B7708, "LPR_OFFLINE_REROUTE_");
  byte_25B7737 = 16;
  strcpy((char *)&xmmword_25B7720, "LPR_OFFLINE_SAR_");
  byte_25B774F = 20;
  strcpy(byte_25B7738, "LPR_OFFLINE_REROUTE_");
  byte_25B7767 = 16;
  strcpy((char *)&xmmword_25B7750, "LPR_OFFLINE_SAR_");
  byte_25B777F = 19;
  strcpy(byte_25B7768, "SuggestFasterRoute_");
  qword_25B7780 = (char *)operator new(0x20uLL);
  xmmword_25B7788 = v280;
  strcpy(qword_25B7780, "AreaIncidentSaferReroute_");
  byte_25B77AF = 12;
  strcpy((char *)&qword_25B7798, "_Remove_Stop");
  byte_25B77C7 = 13;
  strcpy((char *)&qword_25B77B0, "_Remove_Stops");
  strcpy(&byte_25B77DF, "\t_Add_Stops");
  strcpy((char *)&qword_25B77C8, "_Add_Stop");
  strcpy(&byte_25B77F7, "\n_Change_Route");
  byte_25B780F = 13;
  byte_25B7827 = 15;
  strcpy((char *)&qword_25B7810, "_Different_Stop");
  byte_25B783F = 16;
  strcpy((char *)&xmmword_25B7828, "_Different_Stops");
  byte_25B7857 = 15;
  strcpy((char *)&qword_25B7840, "_EV_Remove_Stop");
  byte_25B786F = 16;
  strcpy((char *)&xmmword_25B7858, "_EV_Remove_Stops");
  byte_25B7887 = 12;
  strcpy((char *)&qword_25B7870, "_EV_Add_Stop");
  byte_25B789F = 13;
  strcpy((char *)&qword_25B7888, "_EV_Add_Stops");
  byte_25B78B7 = 15;
  strcpy((char *)&qword_25B78A0, "_EV_Low_Battery");
  byte_25B78CF = 14;
  strcpy((char *)&qword_25B78B8, "_EV_Infeasible");
  byte_25B78E7 = 15;
  strcpy((char *)&qword_25B78D0, "_EV_Last_Chance");
  qword_25B78E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B78F0 = v281;
  strcpy((char *)qword_25B78E8, "_EV_Low_Battery_Add_Stop");
  uint64_t v188 = qword_25B77E8;
  qword_25B7900 = (uint64_t)operator new(0x20uLL);
  unk_25B7908 = v280;
  strcpy((char *)qword_25B7900, "_EV_Low_Battery_Add_Stops");
  qword_25B7918 = (uint64_t)operator new(0x19uLL);
  unk_25B7920 = v282;
  strcpy((char *)qword_25B7918, "_EV_Infeasible_Add_Stop");
  int v189 = byte_25B77F7;
  if (byte_25B77F7 >= 0) {
    size_t v190 = byte_25B77F7;
  }
  else {
    size_t v190 = v188;
  }
  unint64_t v191 = v190 + 14;
  if (v190 + 14 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v191 >= 0x17)
  {
    uint64_t v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17) {
      uint64_t v194 = v191 | 7;
    }
    uint64_t v195 = v194 + 1;
    long long v196 = (char *)operator new(v194 + 1);
    qword_25B7938 = v190 + 14;
    unk_25B7940 = v195 | 0x8000000000000000;
    qword_25B7930 = (uint64_t)v196;
    qmemcpy(v196, "_EV_Infeasible", 14);
    char v192 = v196 + 14;
  }
  else
  {
    BYTE1(qword_25B7938) = 0;
    WORD1(qword_25B7938) = 0;
    HIDWORD(qword_25B7938) = 0;
    unk_25B7940 = 0;
    byte_25B7947 = v190 + 14;
    strcpy((char *)&qword_25B7930, "_EV_Infe");
    char v192 = (char *)&qword_25B7938 + 6;
    if (!v190)
    {
      char v193 = 1;
      goto LABEL_425;
    }
  }
  if (v189 >= 0) {
    uint64_t v197 = (uint64_t)&qword_25B77E0;
  }
  else {
    uint64_t v197 = 0x6F74535F6464415FLL;
  }
  memmove(v192, (const void *)v197, v190);
  char v193 = 0;
LABEL_425:
  v192[v190] = 0;
  int v198 = (char *)operator new(0x20uLL);
  qword_25B7948 = (uint64_t)v198;
  *(_OWORD *)algn_25B7950 = v281;
  *(void *)int v198 = qword_25B78D0;
  *(void *)(v198 + 7) = *(uint64_t *)((char *)&qword_25B78D0 + 7);
  *(void *)(v198 + 15) = qword_25B77C8;
  v198[23] = word_25B77D0;
  v198[24] = 0;
  unint64_t v199 = v190 + 15;
  if (v190 + 15 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v199 > 0x16)
  {
    uint64_t v201 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17) {
      uint64_t v201 = v199 | 7;
    }
    uint64_t v202 = v201 + 1;
    std::string v200 = (uint64_t *)operator new(v201 + 1);
    qword_25B7968 = v190 + 15;
    unk_25B7970 = v202 | 0x8000000000000000;
    qword_25B7960 = (uint64_t)v200;
  }
  else
  {
    std::string v200 = &qword_25B7960;
    qword_25B7968 = 0;
    unk_25B7970 = 0;
    qword_25B7960 = 0;
    byte_25B7977 = v190 + 15;
  }
  uint64_t *v200 = qword_25B78D0;
  *(uint64_t *)((char *)v200 + 7) = *(uint64_t *)((char *)&qword_25B78D0 + 7);
  long long v203 = (char *)v200 + 15;
  if ((v193 & 1) == 0)
  {
    if (v189 >= 0) {
      uint64_t v204 = &qword_25B77E0;
    }
    else {
      uint64_t v204 = (uint64_t *)qword_25B77E0;
    }
    memmove((char *)v200 + 15, v204, v190);
  }
  v203[v190] = 0;
  byte_25B798F = 17;
  strcpy((char *)&xmmword_25B7978, "_EV_Forced_Detour");
  qword_25B7990 = (uint64_t)operator new(0x20uLL);
  unk_25B7998 = v280;
  strcpy((char *)qword_25B7990, "_EV_Higher_Arrival_Charge");
  qword_25B79A8 = (uint64_t)operator new(0x28uLL);
  unk_25B79B0 = xmmword_20B8FD0;
  strcpy((char *)qword_25B79A8, "_EV_Infeasible_Higher_Arrival_Charge");
  byte_25B79D7 = 16;
  strcpy(byte_25B79C0, "_EV_Out_Of_Range");
  qword_25B79D8 = (uint64_t)operator new(0x20uLL);
  unk_25B79E0 = v275;
  strcpy((char *)qword_25B79D8, "_EV_Last_Chance_Take_Detour");
  strcpy(byte_25B79F0, "_EV_Forced_Modify_Stop");
  HIBYTE(word_25B7A06) = 22;
  qword_25B7A08 = (uint64_t)operator new(0x19uLL);
  unk_25B7A10 = v282;
  strcpy((char *)qword_25B7A08, "_EV_Forced_Modify_Stops");
  byte_25B7A37 = 19;
  strcpy(byte_25B7A20, "_EV_Forced_Add_Stop");
  byte_25B7A4F = 20;
  strcpy((char *)&xmmword_25B7A38, "_EV_Forced_Add_Stops");
  byte_25B7A67 = 21;
  strcpy(byte_25B7A50, "_EV_Battery_Info_Lost");
  qword_25B7A68 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B7A70 = v280;
  strcpy((char *)qword_25B7A68, "_EV_Battery_Info_Restored");
  qword_25B7A80 = (uint64_t)operator new(0x20uLL);
  unk_25B7A88 = v281;
  strcpy((char *)qword_25B7A80, "_EV_Towing_Not_Supported");
  qword_25B7A98 = (uint64_t)operator new(0x28uLL);
  unk_25B7AA0 = v271;
  strcpy((char *)qword_25B7A98, "_EV_Offline_to_Online_Transition");
  byte_25B7AC7 = 15;
  strcpy((char *)&qword_25B7AB0, "_EV_Offline_SAR");
  qword_25B7AC8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B7AD0 = v279;
  strcpy((char *)qword_25B7AC8, "_Offline_to_Online_New_Route");
  byte_25B7AF7 = 12;
  strcpy((char *)&qword_25B7AE0, "BannerButton");
  byte_25B7B0F = 8;
  strcpy((char *)&qword_25B7AF8, "_Dismiss");
  byte_25B7B27 = 3;
  word_25B7B10 = 20319;
  byte_25B7B12 = 75;
  byte_25B7B13 = 0;
  byte_25B7B3F = 11;
  strcpy((char *)&qword_25B7B28, "_Still_Here");
  byte_25B7B57 = 8;
  strcpy((char *)&qword_25B7B40, "_Cleared");
  qmemcpy(&byte_25B7B6F, "\nBannerButton", 13);
  strcpy((char *)&qword_25B7B58, "_No_Thanks");
  uint64_t v205 = qword_25B7AE8;
  qword_25B7B80 = 0x1400000000000000;
  *(void *)algn_25B7B7C = 0x7373696D7369445FLL;
  qword_25B7B98 = 0xF00000000000000;
  qword_25B7B90 = 0x4B4F5F6E6F7474;
  int v206 = byte_25B7887;
  if (byte_25B7887 >= 0) {
    size_t v207 = byte_25B7887;
  }
  else {
    size_t v207 = qword_25B7878;
  }
  unint64_t v208 = v207 + 12;
  qword_25B7B88 = *(void *)"BannerButton";
  if (v207 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v208 >= 0x17)
  {
    uint64_t v210 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v208 | 7) != 0x17) {
      uint64_t v210 = v208 | 7;
    }
    uint64_t v211 = v210 + 1;
    int v212 = (char *)operator new(v210 + 1);
    qword_25B7BA8 = v207 + 12;
    unk_25B7BB0 = v211 | 0x8000000000000000;
    qword_25B7BA0 = (uint64_t)v212;
    *((_DWORD *)v212 + 2) = 1852798068;
    *(void *)int v212 = *(void *)"BannerButton";
    uint64_t v209 = v212 + 12;
  }
  else
  {
    BYTE5(qword_25B7BA8) = 0;
    HIWORD(qword_25B7BA8) = 0;
    unk_25B7BB0 = 0;
    byte_25B7BB7 = v207 + 12;
    strcpy((char *)&qword_25B7BA0, "BannerButton");
    uint64_t v209 = (char *)&qword_25B7BA8 + 4;
    if (!v207) {
      goto LABEL_450;
    }
  }
  if (v206 >= 0) {
    int v213 = &qword_25B7870;
  }
  else {
    int v213 = (uint64_t *)qword_25B7870;
  }
  memmove(v209, v213, v207);
LABEL_450:
  v209[v207] = 0;
  int v214 = byte_25B789F;
  if (byte_25B789F >= 0) {
    size_t v215 = byte_25B789F;
  }
  else {
    size_t v215 = unk_25B7890;
  }
  unint64_t v216 = v215 + 12;
  if (v215 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v216 >= 0x17)
  {
    uint64_t v218 = (v216 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v216 | 7) != 0x17) {
      uint64_t v218 = v216 | 7;
    }
    uint64_t v219 = v218 + 1;
    int v220 = (char *)operator new(v218 + 1);
    qword_25B7BC0 = v215 + 12;
    unk_25B7BC8 = v219 | 0x8000000000000000;
    qword_25B7BB8 = (uint64_t)v220;
    *(void *)int v220 = qword_25B7AE0;
    *((_DWORD *)v220 + 2) = qword_25B7AE8;
    uint64_t v217 = v220 + 12;
  }
  else
  {
    qword_25B7BC0 = 0;
    unk_25B7BC8 = 0;
    byte_25B7BCF = v215 + 12;
    LODWORD(qword_25B7BC0) = qword_25B7AE8;
    qword_25B7BB8 = qword_25B7AE0;
    uint64_t v217 = (char *)&qword_25B7BC0 + 4;
    if (!v215) {
      goto LABEL_464;
    }
  }
  if (v214 >= 0) {
    int v221 = &qword_25B7888;
  }
  else {
    int v221 = (uint64_t *)qword_25B7888;
  }
  memmove(v217, v221, v215);
LABEL_464:
  v217[v215] = 0;
  int v222 = byte_25B7857;
  if (byte_25B7857 >= 0) {
    size_t v223 = byte_25B7857;
  }
  else {
    size_t v223 = unk_25B7848;
  }
  unint64_t v224 = v223 + 12;
  if (v223 + 12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v224 >= 0x17)
  {
    uint64_t v226 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v224 | 7) != 0x17) {
      uint64_t v226 = v224 | 7;
    }
    uint64_t v227 = v226 + 1;
    v228 = (char *)operator new(v226 + 1);
    qword_25B7BD8 = v223 + 12;
    unk_25B7BE0 = v227 | 0x8000000000000000;
    qword_25B7BD0 = (uint64_t)v228;
    *(void *)v228 = qword_25B7AE0;
    *((_DWORD *)v228 + 2) = qword_25B7AE8;
    uint64_t v225 = v228 + 12;
  }
  else
  {
    qword_25B7BD8 = 0;
    unk_25B7BE0 = 0;
    byte_25B7BE7 = v223 + 12;
    LODWORD(qword_25B7BD8) = qword_25B7AE8;
    qword_25B7BD0 = qword_25B7AE0;
    uint64_t v225 = (char *)&qword_25B7BD8 + 4;
    if (!v223) {
      goto LABEL_478;
    }
  }
  if (v222 >= 0) {
    int v229 = &qword_25B7840;
  }
  else {
    int v229 = (uint64_t *)qword_25B7840;
  }
  memmove(v225, v229, v223);
LABEL_478:
  v225[v223] = 0;
  int v230 = byte_25B7AF7;
  if (byte_25B7AF7 >= 0) {
    size_t v231 = byte_25B7AF7;
  }
  else {
    size_t v231 = v205;
  }
  int v232 = byte_25B786F;
  if (byte_25B786F >= 0) {
    size_t v233 = byte_25B786F;
  }
  else {
    size_t v233 = *((void *)&xmmword_25B7858 + 1);
  }
  unint64_t v234 = v233 + v231;
  if (v233 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v234 <= 0x16)
  {
    v235 = &qword_25B7BE8;
    qword_25B7BF0 = 0;
    unk_25B7BF8 = 0;
    qword_25B7BE8 = 0;
    byte_25B7BFF = v233 + v231;
    if (!v231) {
      goto LABEL_491;
    }
    goto LABEL_487;
  }
  uint64_t v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v234 | 7) != 0x17) {
    uint64_t v242 = v234 | 7;
  }
  uint64_t v243 = v242 + 1;
  v235 = (uint64_t *)operator new(v242 + 1);
  qword_25B7BF0 = v233 + v231;
  unk_25B7BF8 = v243 | 0x8000000000000000;
  qword_25B7BE8 = (uint64_t)v235;
  if (v231)
  {
LABEL_487:
    if (v230 >= 0) {
      uint64_t v236 = &qword_25B7AE0;
    }
    else {
      uint64_t v236 = (uint64_t *)qword_25B7AE0;
    }
    memmove(v235, v236, v231);
  }
LABEL_491:
  v237 = (char *)v235 + v231;
  if (v233)
  {
    if (v232 >= 0) {
      unint64_t v238 = &xmmword_25B7858;
    }
    else {
      unint64_t v238 = (long long *)xmmword_25B7858;
    }
    memmove(v237, v238, v233);
  }
  v237[v233] = 0;
  unint64_t v239 = v231 + 11;
  if (v231 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v239 >= 0x17)
  {
    uint64_t v244 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17) {
      uint64_t v244 = v239 | 7;
    }
    uint64_t v245 = v244 + 1;
    unint64_t v240 = (uint64_t *)operator new(v244 + 1);
    qword_25B7C08 = v231 + 11;
    unk_25B7C10 = v245 | 0x8000000000000000;
    qword_25B7C00 = (uint64_t)v240;
  }
  else
  {
    unint64_t v240 = &qword_25B7C00;
    qword_25B7C08 = 0;
    unk_25B7C10 = 0;
    qword_25B7C00 = 0;
    byte_25B7C17 = v231 + 11;
    if (!v231)
    {
      *(_DWORD *)((char *)&qword_25B7C00 + 7) = *(_DWORD *)((char *)&qword_25B7B28 + 7);
      qword_25B7C00 = qword_25B7B28;
      BYTE3(qword_25B7C08) = 0;
      LOBYTE(v241) = 8;
      goto LABEL_512;
    }
  }
  if (v230 >= 0) {
    long long v246 = &qword_25B7AE0;
  }
  else {
    long long v246 = (uint64_t *)qword_25B7AE0;
  }
  memmove(v240, v246, v231);
  int v247 = (char *)v240 + v231;
  int v248 = *(_DWORD *)((char *)&qword_25B7B28 + 7);
  *(void *)int v247 = qword_25B7B28;
  *(_DWORD *)(v247 + 7) = v248;
  v247[11] = 0;
  unint64_t v241 = v231 + 8;
  if (v231 + 8 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v241 <= 0x16)
  {
LABEL_512:
    long long v249 = &qword_25B7C18;
    qword_25B7C20 = 0;
    unk_25B7C28 = 0;
    qword_25B7C18 = 0;
    byte_25B7C2F = v241;
    if (!v231) {
      goto LABEL_517;
    }
    goto LABEL_513;
  }
  uint64_t v264 = (v241 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v241 | 7) != 0x17) {
    uint64_t v264 = v241 | 7;
  }
  uint64_t v265 = v264 + 1;
  long long v249 = (uint64_t *)operator new(v264 + 1);
  qword_25B7C20 = v231 + 8;
  unk_25B7C28 = v265 | 0x8000000000000000;
  qword_25B7C18 = (uint64_t)v249;
  if (v231)
  {
LABEL_513:
    if (v230 >= 0) {
      uint64_t v250 = &qword_25B7AE0;
    }
    else {
      uint64_t v250 = (uint64_t *)qword_25B7AE0;
    }
    memmove(v249, v250, v231);
  }
LABEL_517:
  int v251 = (char *)v249 + v231;
  *(void *)int v251 = qword_25B7B40;
  v251[8] = 0;
  int v252 = byte_25B7B6F;
  if (byte_25B7B6F >= 0) {
    size_t v253 = byte_25B7B6F;
  }
  else {
    size_t v253 = qword_25B7B60;
  }
  unint64_t v254 = v253 + v231;
  if (v253 + v231 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v254 <= 0x16)
  {
    long long v255 = &qword_25B7C30;
    qword_25B7C38 = 0;
    unk_25B7C40 = 0;
    qword_25B7C30 = 0;
    byte_25B7C47 = v253 + v231;
    if (!v231) {
      goto LABEL_527;
    }
    goto LABEL_523;
  }
  uint64_t v262 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v254 | 7) != 0x17) {
    uint64_t v262 = v254 | 7;
  }
  uint64_t v263 = v262 + 1;
  long long v255 = (uint64_t *)operator new(v262 + 1);
  qword_25B7C38 = v253 + v231;
  unk_25B7C40 = v263 | 0x8000000000000000;
  qword_25B7C30 = (uint64_t)v255;
  if (v231)
  {
LABEL_523:
    if (v230 >= 0) {
      long long v256 = &qword_25B7AE0;
    }
    else {
      long long v256 = (uint64_t *)qword_25B7AE0;
    }
    memmove(v255, v256, v231);
  }
LABEL_527:
  long long v257 = (char *)v255 + v231;
  if (v253)
  {
    if (v252 >= 0) {
      long long v258 = &qword_25B7B58;
    }
    else {
      long long v258 = (uint64_t *)qword_25B7B58;
    }
    memmove(v257, v258, v253);
  }
  v257[v253] = 0;
  strcpy(&byte_25B7C5F, "\n{newroute}");
  strcpy((char *)&qword_25B7C48, "{roadname}");
  strcpy(&byte_25B7C77, "\n{count}");
  byte_25B7C8F = 7;
  strcpy(&byte_25B7CA7, "\n{dur}");
  strcpy((char *)&qword_25B7C90, "{duration}");
  byte_25B7CBF = 5;
  qword_25B7CC0 = (uint64_t)operator new(0x20uLL);
  unk_25B7CC8 = v278;
  strcpy((char *)qword_25B7CC0, "{PleaseProceedWithCaution}");
  byte_25B7CEF = 15;
  strcpy((char *)&qword_25B7CD8, "{UserRouteName}");
  byte_25B7D07 = 20;
  strcpy((char *)&xmmword_25B7CF0, "{SuggestedRouteName}");
  byte_25B7D1F = 18;
  strcpy(byte_25B7D08, "Speed_Camera_Ahead");
  qword_25B7D20 = (uint64_t)operator new(0x20uLL);
  unk_25B7D28 = v277;
  strcpy((char *)qword_25B7D20, "Red_Light_Camera_Ahead_Spoken");
  qword_25B7D38 = (uint64_t)operator new(0x20uLL);
  unk_25B7D40 = v277;
  strcpy((char *)qword_25B7D38, "Stop_Sign_Camera_Ahead_Spoken");
  qword_25B7D50 = (uint64_t)operator new(0x28uLL);
  unk_25B7D58 = v272;
  strcpy((char *)qword_25B7D50, "Speed_Camera_Ahead_Multiple_Spoken");
  qword_25B7D68 = (uint64_t)operator new(0x28uLL);
  *(_OWORD *)algn_25B7D70 = v267;
  strcpy((char *)qword_25B7D68, "Red_Light_Camera_Ahead_Multiple_Spoken");
  qword_25B7D80 = (uint64_t)operator new(0x20uLL);
  unk_25B7D88 = v279;
  strcpy((char *)qword_25B7D80, "Camera_Ahead_Multiple_Spoken");
  qword_25B7D98 = (uint64_t)operator new(0x30uLL);
  unk_25B7DA0 = v268;
  strcpy((char *)qword_25B7D98, "Red_Light_Camera_Speed_Camera_Ahead_Spoken");
  qword_25B7DB0 = (char *)operator new(0x30uLL);
  strcpy(qword_25B7DB0, "Stop_Sign_Camera_Speed_Camera_Ahead_Spoken");
  byte_25B7DDF = 16;
  xmmword_25B7DB8 = v268;
  strcpy(byte_25B7DC8, "_Speed_Limit_Mph");
  byte_25B7DF7 = 16;
  strcpy(byte_25B7DE0, "_Speed_Limit_Kph");
  byte_25B7E0F = 11;
  strcpy((char *)&qword_25B7DF8, "Watch_Speed");
  byte_25B7E27 = 4;
  strcpy((char *)&dword_25B7E10, "_One");
  byte_25B7E3F = 4;
  strcpy((char *)&dword_25B7E28, "_Two");
  byte_25B7E57 = 4;
  strcpy((char *)&dword_25B7E40, "_Few");
  byte_25B7E6F = 5;
  strcpy((char *)&dword_25B7E58, "_Many");
  byte_25B7E87 = 6;
  strcpy((char *)&dword_25B7E70, "_Other");
  byte_25B7E9F = 4;
  strcpy((char *)&dword_25B7E88, "_ONE");
  byte_25B7EB7 = 7;
  strcpy((char *)&dword_25B7EA0, "{Speed}");
  byte_25B7ECF = 8;
  strcpy((char *)&qword_25B7EB8, "Dismount");
  byte_25B7EE7 = 4;
  strcpy((char *)&dword_25B7ED0, "Walk");
  byte_25B7EFF = 5;
  strcpy((char *)&dword_25B7EE8, "Mount");
  byte_25B7F17 = 7;
  strcpy((char *)&dword_25B7F00, "Remount");
  strcpy(&byte_25B7F2F, "\t_Crosswalk");
  strcpy((char *)&qword_25B7F18, "Walk_Road");
  strcpy(&byte_25B7F47, "\n_PLURAL");
  byte_25B7F5F = 7;
  strcpy(&byte_25B7F77, "\n{description1}");
  strcpy((char *)&qword_25B7F60, "_SECONDARY");
  byte_25B7F8F = 14;
  byte_25B7FA7 = 14;
  strcpy((char *)&qword_25B7F90, "{description2}");
  byte_25B7FBF = 21;
  strcpy((char *)&xmmword_25B7FA8, "TWO_ROAD_DESCRIPTIONS");
  byte_25B7FD7 = 17;
  strcpy((char *)&xmmword_25B7FC0, "{SlopePercentage}");
  byte_25B7FEF = 15;
  strcpy((char *)&qword_25B7FD8, "_Protected_Lane");
  strcpy(&byte_25B8007, "\n_Paved_Path");
  strcpy((char *)&qword_25B7FF0, "_Bike_Path");
  byte_25B801F = 11;
  byte_25B8037 = 15;
  strcpy((char *)&qword_25B8020, "_Dedicated_Lane");
  byte_25B804F = 12;
  strcpy((char *)&qword_25B8038, "_Shared_Path");
  strcpy(&byte_25B8067, "\n_UnnamedRoad");
  strcpy((char *)&qword_25B8050, "_Bike_Lane");
  byte_25B807F = 12;
  byte_25B8097 = 5;
  strcpy((char *)&dword_25B8080, "_Path");
  byte_25B80AF = 6;
  strcpy((char *)&dword_25B8098, "_Trail");
  strcpy(&byte_25B80C7, "\t_Plaza");
  strcpy((char *)&qword_25B80B0, "_Sidewalk");
  byte_25B80DF = 6;
  byte_25B80F7 = 15;
  strcpy((char *)&qword_25B80E0, "_Moving_Walkway");
  byte_25B810F = 14;
  strcpy((char *)&qword_25B80F8, "Two_Stage_Turn");
  byte_25B8127 = 16;
  strcpy((char *)&xmmword_25B8110, "{OptionalPeriod}");
  byte_25B813F = 18;
  strcpy((char *)&xmmword_25B8128, "Advisory_Separator");
  byte_25B8157 = 6;
  strcpy((char *)&dword_25B8140, "Period");
  byte_25B816F = 21;
  strcpy((char *)&xmmword_25B8158, "Advisory_Title_Notice");
  strcpy((char *)&xmmword_25B8170, "Advisory_Title_Notices");
  HIBYTE(word_25B8186) = 22;
  byte_25B819F = 7;
  strcpy((char *)&dword_25B8188, "_DETAIL");
  byte_25B81B7 = 17;
  strcpy((char *)&xmmword_25B81A0, "_LONG_REGION_LIST");
  byte_25B81CF = 16;
  strcpy((char *)&xmmword_25B81B8, "Advisory_Grouped");
  byte_25B81E7 = 11;
  strcpy((char *)&qword_25B81D0, "_Advisories");
  qword_25B81E8 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25B81F0 = v275;
  strcpy((char *)qword_25B81E8, "Advisory_WILDFIRE_METADATA_");
  byte_25B8217 = 8;
  strcpy((char *)&qword_25B8200, "Advisory");
  byte_25B822F = 13;
  strcpy((char *)&qword_25B8218, "MPR_NUM_STOPS");
  byte_25B8247 = 17;
  strcpy(algn_25B8230, "EV_CHARGE_STATION");
  byte_25B825F = 11;
  strcpy((char *)&qword_25B8248, "_NAMED_CITY");
  byte_25B8277 = 5;
  strcpy((char *)&dword_25B8260, "_Stop");
  strcpy(&byte_25B828F, "\n{StopsCount}");
  strcpy((char *)&qword_25B8278, "{CityName}");
  byte_25B82A7 = 12;
  byte_25B82BF = 11;
  strcpy((char *)&qword_25B82A8, "_With_Other");
  byte_25B82D7 = 15;
  strcpy((char *)&qword_25B82C0, "{DepartureTime}");
  qword_25B82D8 = (uint64_t)operator new(0x28uLL);
  unk_25B82E0 = v276;
  strcpy((char *)qword_25B82D8, "Ending_Charge_Station_Port_Availability");
  qword_25B82F0 = (uint64_t)operator new(0x28uLL);
  unk_25B82F8 = v269;
  strcpy((char *)qword_25B82F0, "Ending_Charge_Station_No_Availability");
  qword_25B8308 = (uint64_t)operator new(0x28uLL);
  unk_25B8310 = v272;
  strcpy((char *)qword_25B8308, "Ending_Charge_Station_No_Real_Time");
  byte_25B8337 = 16;
  strcpy(byte_25B8320, "{AvailablePorts}");
  byte_25B834F = 12;
  strcpy((char *)&qword_25B8338, "{TotalPorts}");
  byte_25B8367 = 14;
  strcpy((char *)&qword_25B8350, "{ManeuverIcon}");
  qword_25B8368 = (uint64_t)operator new(0x38uLL);
  *(_OWORD *)algn_25B8370 = xmmword_20B9A60;
  strcpy((char *)qword_25B8368, "Walking_Distance_ManeuverIcon_PrimaryInstruction");
  qword_25B8380 = (uint64_t)operator new(0x20uLL);
  unk_25B8388 = v275;
  strcpy((char *)qword_25B8380, "Walking_Destination_Unnamed");
  qword_25B8398 = (uint64_t)operator new(0x20uLL);
  unk_25B83A0 = v277;
  strcpy((char *)qword_25B8398, "TrafficDelay_Label_Title_Sign");
  qword_25B83B0 = (uint64_t)operator new(0x20uLL);
  unk_25B83B8 = v279;
  strcpy((char *)qword_25B83B0, "Special_Guidance_Instruction");
  byte_25B83DF = 2;
  strcpy((char *)&word_25B83C8, "CZ");
  byte_25B83F7 = 3;
  dword_25B83E0 = 5919811;
  unk_25B840F = 3;
  dword_25B83F8 = 6243649;
  byte_25B8427 = 0;
  byte_25B843F = 7;
  strcpy((char *)&dword_25B8428, "TRANSIT");
  byte_25B8457 = 7;
  strcpy((char *)&dword_25B8440, "OFFLINE");
  qword_25B8458 = (uint64_t)operator new(0x28uLL);
  unk_25B8460 = v267;
  strcpy((char *)qword_25B8458, "Advisory_Card_French_Climate_Law_Title");
  qword_25B8470 = (uint64_t)operator new(0x30uLL);
  unk_25B8478 = xmmword_20B93C0;
  strcpy((char *)qword_25B8470, "Advisory_Card_French_Climate_Law_Details");
  qword_25B8488 = (uint64_t)operator new(0x30uLL);
  *(_OWORD *)algn_25B8490 = v273;
  strcpy((char *)qword_25B8488, "French_Climate_Law_Metadata_Weblink_Title");
  qword_25B84A0 = (uint64_t)operator new(0x20uLL);
  unk_25B84A8 = v279;
  strcpy((char *)qword_25B84A0, "{ClimateLawLearnMoreWeblink}");
  byte_25B84CF = 3;
  dword_25B84B8 = 4280902;
  qword_25B84D0 = (uint64_t)operator new(0x70uLL);
  unk_25B84D8 = xmmword_20E81E0;
  strcpy((char *)qword_25B84D0, "https://www.vie-publique.fr/loi/278460-loi-22-aout-2021-climat-et-resilience-convention-citoyenne-climat");
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__dst, "UNKNOWN");
  *(_DWORD *)int v285 = 0;
  HIBYTE(v286[0]) = 14;
  strcpy(&v285[8], "ROUTES_THROUGH");
  LODWORD(v286[1]) = 1;
  v287[23] = 9;
  strcpy(v287, "ROUTES_TO");
  LODWORD(v288) = 3;
  HIBYTE(v290) = 11;
  strcpy((char *)v289, "ROUTES_FROM");
  LODWORD(v291) = 2;
  xmmword_25B8578 = 0u;
  xmmword_25B8588 = 0u;
  dword_25B8598 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B8578, (uint64_t)&__dst, (uint64_t)&__dst);
  sub_3A6EF0((uint64_t)&xmmword_25B8578, (uint64_t)&v285[8], (uint64_t)&v285[8]);
  sub_3A6EF0((uint64_t)&xmmword_25B8578, (uint64_t)v287, (uint64_t)v287);
  sub_3A6EF0((uint64_t)&xmmword_25B8578, (uint64_t)v289, (uint64_t)v289);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(v289[0]);
    if ((v287[23] & 0x80000000) == 0)
    {
LABEL_534:
      if ((SHIBYTE(v286[0]) & 0x80000000) == 0) {
        goto LABEL_535;
      }
LABEL_547:
      operator delete(*(void **)&v285[8]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_536;
      }
LABEL_548:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_536;
    }
  }
  else if ((v287[23] & 0x80000000) == 0)
  {
    goto LABEL_534;
  }
  operator delete(*(void **)v287);
  if (SHIBYTE(v286[0]) < 0) {
    goto LABEL_547;
  }
LABEL_535:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_548;
  }
LABEL_536:
  byte_25B84FF = 8;
  strcpy((char *)&qword_25B84E8, "any_mode");
  byte_25B8517 = 7;
  strcpy((char *)&dword_25B8500, "cycling");
  byte_25B852F = 7;
  strcpy((char *)&dword_25B8518, "driving");
  byte_25B8547 = 7;
  strcpy((char *)&dword_25B8530, "walking");
  qword_25B8548 = 0;
  unk_25B8550 = 0;
  qword_25B8558 = 0;
  long long v259 = (char *)operator new(9uLL);
  *(void *)long long v259 = 0x4020C000103050DLL;
  v259[8] = 6;
  qword_25B8548 = (uint64_t)v259;
  unk_25B8550 = v259 + 9;
  qword_25B8558 = (uint64_t)(v259 + 9);
  qword_25B8560 = 0;
  qword_25B8568 = 0;
  unk_25B8570 = 0;
  uint64_t v260 = (char *)operator new(9uLL);
  qword_25B8568 = (uint64_t)(v260 + 9);
  unk_25B8570 = v260 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v260 = 0x604020C00010305;
  v260[8] = 13;
  qword_25B8560 = (uint64_t)v260;
  return result;
}

void sub_795060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x3B7]) < 0)
  {
    operator delete((void *)STACK[0x3A0]);
    if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x39F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x387]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  operator delete((void *)STACK[0x388]);
  if (SLOBYTE(STACK[0x387]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x370]);
    if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  if ((SLOBYTE(STACK[0x36F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x357]) < 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)STACK[0x358]);
  if (SLOBYTE(STACK[0x357]) < 0)
  {
LABEL_6:
    operator delete((void *)STACK[0x340]);
    if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x33F]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SLOBYTE(STACK[0x327]) < 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete((void *)STACK[0x328]);
  if (SLOBYTE(STACK[0x327]) < 0)
  {
LABEL_8:
    operator delete((void *)STACK[0x310]);
    if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  if ((SLOBYTE(STACK[0x30F]) & 0x80000000) == 0)
  {
LABEL_9:
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete((void *)STACK[0x2F8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
  {
LABEL_10:
    operator delete((void *)STACK[0x2E0]);
    if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  if ((SLOBYTE(STACK[0x2DF]) & 0x80000000) == 0)
  {
LABEL_11:
    if (SLOBYTE(STACK[0x2C7]) < 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
LABEL_12:
    operator delete((void *)STACK[0x2B0]);
    if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
  {
LABEL_13:
    if (SLOBYTE(STACK[0x297]) < 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete((void *)STACK[0x298]);
  if (SLOBYTE(STACK[0x297]) < 0)
  {
LABEL_14:
    operator delete((void *)STACK[0x280]);
    if (SLOBYTE(STACK[0x27F]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x268]);
      if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
      {
LABEL_37:
        if (SLOBYTE(STACK[0x24F]) < 0)
        {
LABEL_38:
          operator delete((void *)STACK[0x238]);
          if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0)
          {
LABEL_39:
            if (SLOBYTE(STACK[0x21F]) < 0)
            {
LABEL_40:
              operator delete((void *)STACK[0x208]);
              if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
              {
LABEL_41:
                if (a72 < 0) {
                  goto LABEL_42;
                }
                goto LABEL_44;
              }
LABEL_34:
              operator delete(a73);
              if (a72 < 0)
              {
LABEL_42:
                operator delete(a71);
                if ((a70 & 0x80000000) == 0) {
                  goto LABEL_43;
                }
                goto LABEL_45;
              }
LABEL_44:
              if ((a70 & 0x80000000) == 0) {
LABEL_43:
              }
                _Unwind_Resume(a1);
LABEL_45:
              operator delete(a65);
              _Unwind_Resume(a1);
            }
LABEL_33:
            if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
              goto LABEL_41;
            }
            goto LABEL_34;
          }
LABEL_32:
          operator delete((void *)STACK[0x220]);
          if (SLOBYTE(STACK[0x21F]) < 0) {
            goto LABEL_40;
          }
          goto LABEL_33;
        }
LABEL_31:
        if ((SLOBYTE(STACK[0x237]) & 0x80000000) == 0) {
          goto LABEL_39;
        }
        goto LABEL_32;
      }
LABEL_30:
      operator delete((void *)STACK[0x250]);
      if (SLOBYTE(STACK[0x24F]) < 0) {
        goto LABEL_38;
      }
      goto LABEL_31;
    }
LABEL_29:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_28:
  if (SLOBYTE(STACK[0x27F]) < 0) {
    goto LABEL_36;
  }
  goto LABEL_29;
}

BOOL *sub_7953B8(BOOL *a1, uint64_t a2)
{
  strcpy((char *)v15, "RouteLineStylesBuilder");
  HIBYTE(v15[2]) = 22;
  int v12 = 0;
  size_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = sub_374CDC(a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB2F0(v3, (uint64_t)__p);
  int v18 = (char *)operator new(0x20uLL);
  long long v19 = xmmword_20B91C0;
  strcpy(v18, "enable_route_line_styles");
  BOOL v4 = sub_29D62C(__p, (uint64_t)&v18);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  *a1 = v4;
  size_t v5 = v17;
  if (v17)
  {
    do
    {
      long long v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      size_t v5 = v10;
    }
    while (v10);
  }
  unint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  long long v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    size_t v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15[2]) < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_795540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  sub_5450C((uint64_t)&a20);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL *sub_795590(BOOL *a1, uint64_t a2)
{
  strcpy((char *)v15, "RouteLineStylesBuilder");
  HIBYTE(v15[2]) = 22;
  int v12 = 0;
  size_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = sub_374CDC(a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB560(v3, (uint64_t)__p);
  int v18 = (char *)operator new(0x20uLL);
  long long v19 = xmmword_20B91C0;
  strcpy(v18, "enable_route_line_styles");
  BOOL v4 = sub_29D62C(__p, (uint64_t)&v18);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  *a1 = v4;
  size_t v5 = v17;
  if (v17)
  {
    do
    {
      long long v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      size_t v5 = v10;
    }
    while (v10);
  }
  unint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  long long v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    size_t v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15[2]) < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_795718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  sub_5450C((uint64_t)&a20);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL *sub_795768(BOOL *a1, uint64_t a2)
{
  strcpy((char *)v15, "RouteLineStylesBuilder");
  HIBYTE(v15[2]) = 22;
  int v12 = 0;
  size_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = sub_374CDC(a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB5E0(v3, (uint64_t)__p);
  int v18 = (char *)operator new(0x20uLL);
  long long v19 = xmmword_20B91C0;
  strcpy(v18, "enable_route_line_styles");
  BOOL v4 = sub_29D62C(__p, (uint64_t)&v18);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  *a1 = v4;
  size_t v5 = v17;
  if (v17)
  {
    do
    {
      long long v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      size_t v5 = v10;
    }
    while (v10);
  }
  unint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  long long v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    size_t v13 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15[2]) < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_7958F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  sub_5450C((uint64_t)&a20);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *sub_795940@<X0>(char *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  int v5 = *result;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v5) {
    return result;
  }
  if (*(unsigned char *)(a2 + 1056) != 3)
  {
    uint64_t v17 = 0;
    LODWORD(v14) = 1;
    return sub_5BFB5C((uint64_t)a3, &v17, (int *)&v14);
  }
  uint64_t v7 = *(void *)(a2 + 1064);
  uint64_t v8 = *(void *)(a2 + 1072);
  if (v7 == v8) {
    goto LABEL_20;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  do
  {
    if (*(unsigned char *)(v7 + 649))
    {
      if (!*(unsigned char *)(v7 + 648)) {
        goto LABEL_11;
      }
    }
    else if (!*(unsigned char *)(v7 + 648))
    {
      if (!*(unsigned char *)(v7 + 650)) {
        goto LABEL_18;
      }
LABEL_11:
      BOOL v11 = *(unsigned char *)(v7 + 650) != 0;
      goto LABEL_12;
    }
    BOOL v11 = 1;
LABEL_12:
    BOOL v16 = !v11;
    uint64_t v12 = sub_46CE10((void *)a2, v10, 1, *(void *)(v7 + 24), 0, a4) + v9;
    uint64_t v17 = v12;
    if (*a3 == a3[1] && v12 >= 1)
    {
      BOOL v15 = !v16;
      uint64_t v14 = 0;
      sub_5BFB5C((uint64_t)a3, &v14, (int *)&v15);
    }
    double result = sub_5BFB5C((uint64_t)a3, &v17, (int *)&v16);
    uint64_t v10 = *(void *)(v7 + 24);
    uint64_t v9 = v17;
LABEL_18:
    v7 += 2400;
  }
  while (v7 != v8);
  if (*a3 == a3[1])
  {
LABEL_20:
    uint64_t v17 = 0;
    LODWORD(v14) = 0;
    return sub_5BFB5C((uint64_t)a3, &v17, (int *)&v14);
  }
  return result;
}

void sub_795AA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_795AD0(char *a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  int v5 = *(void **)v3;
  unint64_t v6 = *(void **)(v3 + 8);
  if (*(void **)v3 != v6)
  {
    do
    {
      sub_795940(a1, (uint64_t)v5, &v8, result);
      uint64_t v7 = (void *)v5[1503];
      if (v7)
      {
        v5[1504] = v7;
        operator delete(v7);
      }
      double result = *(double *)&v8;
      *(_OWORD *)(v5 + 1503) = v8;
      v5[1505] = v9;
      v5 += 1541;
    }
    while (v5 != v6);
  }
  return result;
}

double sub_795B68()
{
  byte_25B85B7 = 1;
  word_25B85A0 = 65;
  byte_25B85CF = 1;
  word_25B85B8 = 65;
  byte_25B85E7 = 8;
  strcpy((char *)&qword_25B85D0, "any_mode");
  byte_25B85FF = 7;
  strcpy((char *)&dword_25B85E8, "cycling");
  byte_25B8617 = 7;
  strcpy((char *)&dword_25B8600, "driving");
  byte_25B862F = 7;
  strcpy((char *)&dword_25B8618, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25B8660 = 0u;
  *(_OWORD *)&qword_25B8670 = 0u;
  dword_25B8680 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B8660, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25B8660, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25B8660, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25B8660, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25B8638 = 0;
  qword_25B8640 = 0;
  qword_25B8630 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25B8630 = (uint64_t)v0;
  qword_25B8638 = (uint64_t)(v0 + 9);
  qword_25B8640 = (uint64_t)(v0 + 9);
  qword_25B8648 = 0;
  qword_25B8650 = 0;
  unk_25B8658 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25B8650 = (uint64_t)(v1 + 9);
  unk_25B8658 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25B8648 = (uint64_t)v1;
  return result;
}

void sub_795E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25B8670) {
    sub_20AAE7C((void **)qword_25B8670);
  }
  uint64_t v37 = (void *)xmmword_25B8660;
  *(void *)&xmmword_25B8660 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_795EC4(uint64_t *a1)
{
  sub_783BA0(1, (uint64_t)v29);
  sub_46B058();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t v6 = 0;
  while (1)
  {
    sub_46FF18();
    int v8 = v7;
    unint64_t v10 = v9;
    if (v3)
    {
      unint64_t v11 = sub_470ADC(v3);
      BOOL v12 = v5 < v11;
      if (!v8)
      {
        if (v5 >= v11) {
          goto LABEL_20;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (!v7) {
        goto LABEL_20;
      }
      BOOL v12 = 0;
    }
    unint64_t v13 = sub_470ADC(v8);
    if (v10 >= v13 || !v12) {
      break;
    }
    uint64_t v15 = sub_470B40(v3, v5);
    if (v15 == sub_470B40(v8, v10)) {
      goto LABEL_20;
    }
LABEL_16:
    BOOL v16 = (unsigned int *)sub_470B40(v3, v5);
    unint64_t v28 = *v16 | ((unint64_t)(v16[1] & 0x1FFFFFFF) << 32);
    long long __p = &v28;
    uint64_t v17 = sub_785870((uint64_t)v29, &v28, (uint64_t)&unk_20F06E0, (uint64_t **)&__p);
    sub_796138(v3, v5, v17 + 3, &__p);
    long long v19 = (char *)__p;
    uint64_t v20 = v27;
    if (__p != v27)
    {
      do
      {
        sub_7964A0((uint64_t)v19, v3, v5, v6, a1);
        v19 += 12;
      }
      while (v19 != v20);
    }
    uint64_t v21 = sub_470F2C(v3, v5, v18);
    if (__p)
    {
      long long v27 = (char *)__p;
      operator delete(__p);
    }
    v6 += v21;
    ++v5;
  }
  if ((v12 ^ (v10 < v13))) {
    goto LABEL_16;
  }
LABEL_20:
  long long v22 = v30;
  if (v30)
  {
    do
    {
      size_t v24 = (void *)*v22;
      size_t v25 = (void *)v22[3];
      if (v25)
      {
        v22[4] = v25;
        operator delete(v25);
      }
      operator delete(v22);
      long long v22 = v24;
    }
    while (v24);
  }
  int v23 = v29[0];
  v29[0] = 0;
  if (v23) {
    operator delete(v23);
  }
}

void sub_7960AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3AB00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7960C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3AB00((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_796138@<X0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if ((*(unsigned char *)(sub_470B40(a1, a2) + 7) & 0x20) != 0)
  {
    unsigned int v10 = sub_46CACC((uint64_t)a1, a2);
    uint64_t result = sub_470DAC((uint64_t)a1, a2);
    unsigned int v11 = result;
    unint64_t v25 = -1;
    int v26 = 0;
    unint64_t v12 = *a3;
    if (*a3 >= a3[1]) {
      return result;
    }
LABEL_5:
    unsigned __int8 v13 = 0;
    int v14 = 0;
    int v15 = 0;
    unsigned int v16 = -1;
    while (1)
    {
      unsigned int v17 = *(_DWORD *)v12;
      switch(*(_DWORD *)v12)
      {
        case 0:
          int v19 = --v14 > 0 && v15 > 0;
          unsigned int v20 = *(_DWORD *)(v12 + 4);
          if (v20 < v10) {
            goto LABEL_8;
          }
          goto LABEL_34;
        case 1:
          int v19 = v14 > 0 && --v15 > 0;
          unsigned int v20 = *(_DWORD *)(v12 + 4);
          if (v20 >= v10) {
            goto LABEL_34;
          }
          goto LABEL_8;
        case 2:
          ++v14;
          goto LABEL_27;
        case 3:
          int v19 = v14 > 0 && ++v15 > 0;
          unsigned int v20 = *(_DWORD *)(v12 + 4);
          if (v20 >= v10) {
            goto LABEL_34;
          }
          goto LABEL_8;
        default:
LABEL_27:
          int v19 = v14 > 0 && v15 > 0;
          unsigned int v20 = *(_DWORD *)(v12 + 4);
          if (v20 < v10) {
            goto LABEL_8;
          }
LABEL_34:
          if (v20 > v11) {
            return result;
          }
          if (*(unsigned char *)(v12 + 8))
          {
            if (v16 < 0x3B9ACA01)
            {
              HIDWORD(v25) = v20;
              uint64_t result = (uint64_t)sub_796754(a4, (uint64_t *)&v25);
              unsigned __int8 v13 = 0;
              unint64_t v25 = -1;
              LOBYTE(v26) = 0;
              unsigned int v16 = -1;
            }
          }
          else if (v19 == v13 || v16 >= 0x3B9ACA01 || v16 >= v20)
          {
            if (v10 == v20)
            {
              if ((v17 & 0xFFFFFFFE) == 2)
              {
                unint64_t v25 = v10 | 0xFFFFFFFF00000000;
                LOBYTE(v26) = v19;
                unsigned int v16 = v10;
                unsigned __int8 v13 = v19;
                goto LABEL_7;
              }
            }
            else
            {
              if (v10 < v20 && v20 < v11)
              {
                if (v16 > 0x3B9ACA00 && v12 != *a3)
                {
                  unsigned int v16 = *(_DWORD *)(v12 - 8);
                  unint64_t v25 = v16 | 0xFFFFFFFF00000000;
                  LOBYTE(v26) = v19;
                  unsigned __int8 v13 = v19;
                }
                goto LABEL_7;
              }
              if (v17 <= 1 && v20 == v11)
              {
                unsigned int v24 = v11;
                if (v16 <= 0x3B9ACA00)
                {
LABEL_64:
                  if (v16 < v24)
                  {
                    HIDWORD(v25) = v24;
                    uint64_t result = (uint64_t)sub_796754(a4, (uint64_t *)&v25);
                  }
                }
                else if (v12 != *a3)
                {
                  unsigned int v16 = *(_DWORD *)(v12 - 8);
                  LODWORD(v25) = v16;
                  LOBYTE(v26) = v19;
                  if (v16 < 0x3B9ACA01)
                  {
                    unsigned int v24 = *(_DWORD *)(v12 + 4);
                    goto LABEL_64;
                  }
                }
                unsigned __int8 v13 = 0;
                unint64_t v25 = -1;
                LOBYTE(v26) = 0;
                unsigned int v16 = -1;
LABEL_7:
                *(unsigned char *)(v12 + 8) = 1;
              }
            }
          }
          else
          {
            HIDWORD(v25) = v20;
            uint64_t result = (uint64_t)sub_796754(a4, (uint64_t *)&v25);
            unsigned int v16 = *(_DWORD *)(v12 + 4);
            unint64_t v25 = v16 | 0xFFFFFFFF00000000;
            LOBYTE(v26) = v19;
            *(unsigned char *)(v12 + 8) = 1;
            unsigned __int8 v13 = v19;
          }
LABEL_8:
          v12 += 12;
          if (v12 >= a3[1]) {
            return result;
          }
          break;
      }
    }
  }
  int v8 = sub_470DAC((uint64_t)a1, a2);
  uint64_t result = sub_46CACC((uint64_t)a1, a2);
  unsigned int v10 = 1000000000 - v8;
  unsigned int v11 = 1000000000 - result;
  unint64_t v25 = -1;
  int v26 = 0;
  unint64_t v12 = *a3;
  if (*a3 < a3[1]) {
    goto LABEL_5;
  }
  return result;
}

void sub_796460(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_7964A0(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v21 = sub_7840B4((int *)a1, a2, a3) + a4;
  uint64_t v20 = sub_7842E0((_DWORD *)a1, a2, a3) + a4;
  sub_525150(*(unsigned __int8 *)(a1 + 8), (uint64_t)v29);
  if (v33 == 1)
  {
    unsigned int v10 = (uint64_t *)v29;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_24F6970, memory_order_acquire))
  {
    unsigned int v10 = &qword_24F6950;
  }
  else
  {
    unsigned int v10 = &qword_24F6950;
    if (__cxa_guard_acquire(&qword_24F6970))
    {
      qword_24F6950 = -1;
      qword_24F6960 = 0;
      unk_24F6968 = 0;
      off_24F6958 = 0;
      __cxa_guard_release(&qword_24F6970);
    }
  }
  sub_63B5AC((uint64_t)&v22, &v21, &v20, (uint64_t)(v10 + 1), 1);
  unint64_t v11 = a5[1258];
  if (a5[1257] == v11) {
    goto LABEL_17;
  }
  unsigned __int8 v13 = *(char **)(v11 - 560);
  unint64_t v12 = *(char **)(v11 - 552);
  int v14 = v24;
  if (v12 - v13 != v25 - (unsigned char *)v24) {
    goto LABEL_17;
  }
  if (v13 != v12)
  {
    while (*(_DWORD *)v13 == *v14 && *((_DWORD *)v13 + 1) == v14[1])
    {
      v13 += 8;
      v14 += 2;
      if (v13 == v12) {
        goto LABEL_14;
      }
    }
LABEL_17:
    if (v11 >= a5[1259])
    {
      uint64_t v17 = sub_79688C(a5 + 1257, &v22);
    }
    else
    {
      sub_50FFE0(a5[1258], &v22);
      uint64_t v17 = v11 + 616;
      a5[1258] = v11 + 616;
    }
    a5[1258] = v17;
    unsigned int v16 = __p;
    if (!__p) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_14:
  if (*(void *)(v11 - 600) != *((void *)&v22 + 1)) {
    goto LABEL_17;
  }
  *(void *)(v11 - 600) = v23;
  unsigned int v16 = __p;
  if (__p)
  {
LABEL_21:
    unint64_t v28 = v16;
    operator delete(v16);
  }
LABEL_22:
  sub_510298((uint64_t)&v26);
  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }
  if ((v37 & 0x80000000) == 0)
  {
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_31:
    operator delete(v34);
    int v18 = v33;
    if (v33 != 1) {
      goto LABEL_27;
    }
LABEL_32:
    int v19 = v30;
    if (!v30) {
      return;
    }
    int v31 = v30;
    goto LABEL_34;
  }
  operator delete(v36);
  if (v35 < 0) {
    goto LABEL_31;
  }
LABEL_26:
  int v18 = v33;
  if (v33 == 1) {
    goto LABEL_32;
  }
LABEL_27:
  if (!v18 && v32 < 0)
  {
    int v19 = v30;
LABEL_34:
    operator delete(v19);
  }
}

void sub_796714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_50E1E8((uint64_t *)va);
  sub_4D9814(v3 - 184);
  _Unwind_Resume(a1);
}

void sub_79673C(_Unwind_Exception *a1)
{
  sub_4D9814(v1 - 184);
  _Unwind_Resume(a1);
}

unsigned char *sub_796754(void *a1, uint64_t *a2)
{
  unint64_t v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v8 = (unsigned char *)*a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*a1] >> 2);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x1555555555555555) {
        sub_188D718();
      }
      unsigned __int8 v13 = (char *)operator new(12 * v12);
    }
    else
    {
      unsigned __int8 v13 = 0;
    }
    int v14 = &v13[12 * v9];
    *(void *)int v14 = *a2;
    *((_DWORD *)v14 + 2) = *((_DWORD *)a2 + 2);
    char v7 = v14 + 12;
    if (v5 != v8)
    {
      do
      {
        uint64_t v15 = *(void *)(v5 - 12);
        v5 -= 12;
        char v16 = v5[8];
        *(void *)(v14 - 12) = v15;
        v14 -= 12;
        v14[8] = v16;
      }
      while (v5 != v8);
      unint64_t v5 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = &v13[12 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *((_DWORD *)v5 + 2) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v5 = v6;
    char v7 = v5 + 12;
  }
  a1[1] = v7;
  return v7 - 12;
}

uint64_t sub_79688C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x4FCACE213F2B3885 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x6A63BD81A98EF6) {
    sub_2E00();
  }
  if (0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9F959C427E56710ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FCACE213F2B3885 * ((a1[2] - *a1) >> 3)) >= 0x3531DEC0D4C77BLL) {
    unint64_t v6 = 0x6A63BD81A98EF6;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x6A63BD81A98EF6) {
      sub_188D718();
    }
    char v7 = (char *)operator new(616 * v6);
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v28 = (uint64_t)&v7[616 * v3];
  unint64_t v29 = &v7[616 * v6];
  sub_50FFE0(v28, a2);
  uint64_t v8 = v28 + 616;
  unint64_t v10 = (char *)*a1;
  unint64_t v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v28;
    a1[1] = v8;
    a1[2] = (uint64_t)v29;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v28 + v11;
      uint64_t v13 = v28 + v11 - 616;
      int v14 = &v9[v11];
      long long v15 = *(_OWORD *)&v9[v11 - 616];
      long long v16 = *(_OWORD *)&v9[v11 - 600];
      long long v17 = *(_OWORD *)&v9[v11 - 584];
      *(void *)(v13 + 48) = *(void *)&v9[v11 - 568];
      *(_OWORD *)(v13 + 16) = v16;
      *(_OWORD *)(v13 + 32) = v17;
      *(_OWORD *)uint64_t v13 = v15;
      uint64_t v18 = v28 + v11 - 560;
      uint64_t v19 = (uint64_t)&v9[v11 - 560];
      *(void *)uint64_t v18 = 0;
      *(_OWORD *)(v18 + 8) = 0u;
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      *(void *)(v28 + v11 - 544) = *(void *)&v9[v11 - 544];
      *(void *)(v19 + 16) = 0;
      *(_OWORD *)uint64_t v19 = 0u;
      sub_571CE4(v28 + v11 - 536, (uint64_t *)&v9[v11 - 536]);
      *(void *)(v12 - 64) = 0;
      *(void *)(v12 - 56) = 0;
      *(void *)(v12 - 48) = 0;
      *(_OWORD *)(v12 - 64) = *(_OWORD *)&v9[v11 - 64];
      *(void *)(v12 - 48) = *(void *)&v9[v11 - 48];
      *((void *)v14 - 8) = 0;
      *((void *)v14 - 7) = 0;
      *((void *)v14 - 6) = 0;
      long long v20 = *(_OWORD *)&v9[v11 - 40];
      long long v21 = *(_OWORD *)&v9[v11 - 24];
      *(void *)(v12 - 8) = *(void *)&v9[v11 - 8];
      *(_OWORD *)(v12 - 24) = v21;
      *(_OWORD *)(v12 - 40) = v20;
      v11 -= 616;
    }
    while (&v9[v11] != v10);
    long long v22 = (char *)*a1;
    unint64_t v9 = (char *)a1[1];
    *a1 = v28 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v29;
    if (v9 != v22)
    {
      uint64_t v23 = v9 - 560;
      do
      {
        unint64_t v25 = (void *)*((void *)v23 + 62);
        if (v25)
        {
          *((void *)v23 + 63) = v25;
          operator delete(v25);
        }
        sub_510298((uint64_t)(v23 + 24));
        uint64_t v26 = *(void **)v23;
        if (*(void *)v23)
        {
          *((void *)v23 + 1) = v26;
          operator delete(v26);
        }
        unsigned int v24 = v23 - 56;
        v23 -= 616;
      }
      while (v24 != v22);
      unint64_t v9 = v22;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v28 + 616;
}

void sub_796AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7079FC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_796B00()
{
  byte_25B869F = 1;
  word_25B8688 = 65;
  byte_25B86B7 = 1;
  word_25B86A0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25B86E8 = 0u;
  *(_OWORD *)&qword_25B86F8 = 0u;
  dword_25B8708 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25B86E8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25B86E8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25B86E8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25B86E8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25B86C0 = 0;
  qword_25B86C8 = 0;
  qword_25B86B8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25B86B8 = (uint64_t)v0;
  qword_25B86C0 = (uint64_t)(v0 + 9);
  qword_25B86C8 = (uint64_t)(v0 + 9);
  qword_25B86D0 = 0;
  qword_25B86D8 = 0;
  unk_25B86E0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25B86D8 = (uint64_t)(v1 + 9);
  unk_25B86E0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25B86D0 = (uint64_t)v1;
  return result;
}

void sub_796D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25B86F8) {
    sub_20AAEC0((void **)qword_25B86F8);
  }
  char v37 = (void *)xmmword_25B86E8;
  *(void *)&xmmword_25B86E8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL *sub_796DDC(BOOL *a1, uint64_t a2, uint64_t a3)
{
  char v17 = 10;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteNamer");
  char v13 = 0;
  int v14 = 0;
  int v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB560(v5, (uint64_t)__p);
  sub_79A090(a1, __p);
  unint64_t v6 = v19;
  if (v19)
  {
    do
    {
      int v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      unint64_t v6 = v11;
    }
    while (v11);
  }
  char v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v13;
  if (v13)
  {
    unint64_t v9 = v14;
    char v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      char v10 = v13;
    }
    int v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  a1[2] = *(unsigned char *)(a3 + 107);
  return a1;
}

void sub_796F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL *sub_796F44(BOOL *a1, uint64_t a2, uint64_t a3)
{
  char v17 = 10;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteNamer");
  char v13 = 0;
  int v14 = 0;
  int v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB370(v5, 0, *(unsigned __int8 *)(a3 + 1525), __p);
  sub_79A090(a1, __p);
  unint64_t v6 = v19;
  if (v19)
  {
    do
    {
      int v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      unint64_t v6 = v11;
    }
    while (v11);
  }
  char v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (void **)v13;
  if (v13)
  {
    unint64_t v9 = v14;
    char v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      char v10 = v13;
    }
    int v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  a1[2] = *(unsigned char *)(a3 + 1482);
  return a1;
}

void sub_79707C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_7970B4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 1))
  {
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)unint64_t v6 = 0u;
    int v7 = 1065353216;
    sub_797140(a1, (uint64_t)a2, (uint64_t)__p);
    sub_797278(a1, a2, (uint64_t)__p);
    sub_79ED4C((int)__p, (void **)v6[0]);
    char v4 = __p[0];
    __p[0] = 0;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_79712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_797140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v17 = 1065353216;
  uint64_t v3 = *(void **)a2;
  char v4 = *(void **)(a2 + 8);
  if (*(void **)a2 != v4)
  {
    do
    {
      sub_798FD8(a1, v3, (uint64_t)v15);
      v3 += 1541;
    }
    while (v3 != v4);
    uint64_t v8 = *(void *)(a2 + 8) - *(void *)a2;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = v8 / 12328;
      do
      {
        sub_7991C8(a1, (void *)(*(void *)a2 + v9), v10++, (uint64_t)v15, a3);
        v9 += 12328;
      }
      while (v11 != v10);
    }
  }
  uint64_t v12 = __p[0];
  if (__p[0])
  {
    do
    {
      char v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  int v14 = v15[0];
  v15[0] = 0;
  if (v14) {
    operator delete(v14);
  }
}

void sub_797250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_797264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_797278(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v67 = 0uLL;
  unint64_t v68 = 0;
  unint64_t v6 = *(uint64_t **)(a3 + 16);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v6[21];
      double v8 = *((double *)v6 + 22);
      uint64_t v9 = v6[23];
      sub_4AA8E0((char *)__dst, (long long *)v6 + 1);
      *(void *)&long long v65 = v7;
      *((double *)&v65 + 1) = v8;
      uint64_t v66 = v9;
      if (v8 >= 0.0)
      {
        uint64_t v10 = v67.i64[1];
        if (v67.i64[1] >= v68)
        {
          uint64_t v12 = sub_79F92C(&v67, (uint64_t)__dst);
        }
        else
        {
          sub_4AA8E0((char *)v67.i64[1], (long long *)__dst);
          long long v11 = v65;
          *(void *)(v10 + 168) = v66;
          *(_OWORD *)(v10 + 152) = v11;
          uint64_t v12 = v10 + 176;
        }
        v67.i64[1] = v12;
        sub_79FC80(v67.i64[0], v12, (uint64_t)v52, 0x2E8BA2E8BA2E8BA3 * ((v12 - v67.i64[0]) >> 4));
      }
      if (v64 < 0)
      {
        operator delete(__p);
        if ((v62 & 0x80000000) == 0)
        {
LABEL_11:
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
      else if ((v62 & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
LABEL_17:
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_13:
        if (v56 < 0) {
          goto LABEL_19;
        }
        goto LABEL_3;
      }
LABEL_18:
      operator delete(v57);
      if (v56 < 0) {
LABEL_19:
      }
        operator delete(__dst[0]);
LABEL_3:
      unint64_t v6 = (uint64_t *)*v6;
      if (!v6)
      {
        uint64_t v13 = v67.i64[1];
        uint64_t v14 = v67.i64[0];
        goto LABEL_22;
      }
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_22:
  *(_OWORD *)size_t v52 = 0u;
  *(_OWORD *)int v53 = 0u;
  int v54 = 1065353216;
  *(_OWORD *)char v49 = 0u;
  *(_OWORD *)long long v50 = 0u;
  int v51 = 1065353216;
  if (v14 != v13)
  {
    while (1)
    {
      uint64_t v15 = v53[1];
      if (v53[1] >= (void *)(0xFF55E3181697D6CDLL * ((uint64_t)(a2[1] - *a2) >> 3))) {
        goto LABEL_78;
      }
      if (sub_13A8C(v49, v14))
      {
LABEL_27:
        sub_7A09EC(v67.i64[0], v67.i64[1], (uint64_t)__dst, 0x2E8BA2E8BA2E8BA3 * ((v67.i64[1] - v67.i64[0]) >> 4));
        sub_79E680((uint64_t)&v67, v67.i64[1] - 176);
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v14 + 152);
      if (v52[1])
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v52[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = *(void *)(v14 + 152);
          if ((void *)v16 >= v52[1]) {
            unint64_t v18 = v16 % (unint64_t)v52[1];
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)v52[1] - 1) & v16;
        }
        uint64_t v19 = (void *)*((void *)v52[0] + v18);
        if (v19)
        {
          long long v20 = (void *)*v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v22 = v20[1];
                if (v16 == v22)
                {
                  if (v20[2] == v16) {
                    goto LABEL_27;
                  }
                }
                else if ((v22 & ((unint64_t)v52[1] - 1)) != v18)
                {
                  goto LABEL_48;
                }
                long long v20 = (void *)*v20;
                if (!v20) {
                  goto LABEL_48;
                }
              }
            }
            do
            {
              unint64_t v21 = v20[1];
              if (v16 == v21)
              {
                if (v20[2] == v16) {
                  goto LABEL_27;
                }
              }
              else
              {
                if ((void *)v21 >= v52[1]) {
                  v21 %= (unint64_t)v52[1];
                }
                if (v21 != v18) {
                  break;
                }
              }
              long long v20 = (void *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_48:
      sub_4AA8E0((char *)v39, (long long *)v14);
      sub_799680((void *)(*a2 + 12328 * *(void *)(v14 + 152)), (unsigned __int8 *)v14, (uint64_t)v38);
      sub_7998A0((uint64_t)__dst, (long long *)v39, (uint64_t)v38);
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      if (v48 < 0)
      {
        operator delete(v47);
        if ((v46 & 0x80000000) == 0)
        {
LABEL_52:
          if ((v44 & 0x80000000) == 0) {
            goto LABEL_53;
          }
          goto LABEL_68;
        }
      }
      else if ((v46 & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v45);
      if ((v44 & 0x80000000) == 0)
      {
LABEL_53:
        if (v42 < 0) {
          goto LABEL_69;
        }
        goto LABEL_54;
      }
LABEL_68:
      operator delete(v43);
      if (v42 < 0)
      {
LABEL_69:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_70;
      }
LABEL_54:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_70:
      operator delete(v39[0]);
LABEL_55:
      uint64_t v23 = *a2 + 12328 * *(void *)(v14 + 152);
      unsigned int v24 = (uint64_t *)(v23 + 1112);
      unint64_t v25 = *(void *)(v23 + 1120);
      if (v25 >= *(void *)(v23 + 1128))
      {
        uint64_t v26 = sub_7A0D64(v24, (uint64_t)__dst);
      }
      else
      {
        sub_598A38(v25, (uint64_t)__dst);
        uint64_t v26 = v25 + 176;
        v24[1] = v25 + 176;
      }
      v24[1] = v26;
      sub_24AFC((uint64_t)v49, v14, v14);
      sub_7A06C8((uint64_t)v52, (unint64_t *)(v14 + 152), (void *)(v14 + 152));
      sub_7A09EC(v67.i64[0], v67.i64[1], (uint64_t)v69, 0x2E8BA2E8BA2E8BA3 * ((v67.i64[1] - v67.i64[0]) >> 4));
      sub_79E680((uint64_t)&v67, v67.i64[1] - 176);
      if ((void)v65)
      {
        *((void *)&v65 + 1) = v65;
        operator delete((void *)v65);
      }
      if (v64 < 0)
      {
        operator delete(__p);
        if ((v62 & 0x80000000) == 0)
        {
LABEL_62:
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_63;
          }
          goto LABEL_73;
        }
      }
      else if ((v62 & 0x80000000) == 0)
      {
        goto LABEL_62;
      }
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_63:
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_74;
      }
LABEL_73:
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_64:
        if (v56 < 0) {
          goto LABEL_75;
        }
        goto LABEL_24;
      }
LABEL_74:
      operator delete(v57);
      if (v56 < 0) {
LABEL_75:
      }
        operator delete(__dst[0]);
LABEL_24:
      uint64_t v14 = v67.i64[0];
      if (v67.i64[0] == v67.i64[1])
      {
        uint64_t v15 = v53[1];
        goto LABEL_78;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_78:
  uint64_t v27 = a2[1];
  unint64_t v28 = 0xFF55E3181697D6CDLL * ((v27 - *a2) >> 3);
  if (v15 != (void *)v28 && v27 != *a2)
  {
    uint64_t v30 = 0;
    int v31 = 0;
    do
    {
      sub_799D20(a1, a3, v31++, (void *)(*a2 + v30));
      v30 += 12328;
    }
    while ((char *)v28 != v31);
  }
  char v32 = (void **)v50[0];
  if (v50[0])
  {
    do
    {
      char v37 = (void **)*v32;
      if (*((char *)v32 + 39) < 0) {
        operator delete(v32[2]);
      }
      operator delete(v32);
      char v32 = v37;
    }
    while (v37);
  }
  int v33 = v49[0];
  v49[0] = 0;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v34 = v53[0];
  if (v53[0])
  {
    do
    {
      char v35 = (void *)*v34;
      operator delete(v34);
      uint64_t v34 = v35;
    }
    while (v35);
  }
  uint64_t v36 = v52[0];
  v52[0] = 0;
  if (v36) {
    operator delete(v36);
  }
  if (v67.i64[0])
  {
    sub_79E680((uint64_t)&v67, v67.i64[0]);
    operator delete((void *)v67.i64[0]);
  }
}

void sub_797848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  *(void *)(v43 + 8) = v44;
  sub_799948((uint64_t)&a43);
  sub_3A4C2C((uint64_t)&a31);
  sub_12168((uint64_t)&a37);
  sub_799CE4((uint64_t *)(v45 - 144));
  _Unwind_Resume(a1);
}

void sub_7978E0(_Unwind_Exception *a1)
{
  sub_799CE4((uint64_t *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_7978F4(uint64_t a1)
{
  sub_79ED4C(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_797930(unsigned char *a1, uint64_t *a2)
{
  if (*a1 || a1[1])
  {
    char v4 = (void *)*a2;
    int v5 = (void *)a2[1];
    if ((void *)*a2 == v5) {
      goto LABEL_10;
    }
    do
    {
      int v6 = sub_6484B0(v4, a1[2]);
      v4 += 945;
      if (v6) {
        BOOL v7 = v4 == v5;
      }
      else {
        BOOL v7 = 1;
      }
    }
    while (!v7);
    if (v6)
    {
LABEL_10:
      *(_OWORD *)long long __p = 0u;
      *(_OWORD *)uint64_t v10 = 0u;
      int v11 = 1065353216;
      sub_797A24((uint64_t)a1, a2, (uint64_t)__p);
      if (a1[1]) {
        sub_797B6C((uint64_t)a1, a2, (uint64_t)__p);
      }
      if (*a1) {
        sub_786A9C((uint64_t **)a2);
      }
      sub_79ED4C((int)__p, (void **)v10[0]);
      double v8 = __p[0];
      __p[0] = 0;
      if (v8) {
        operator delete(v8);
      }
    }
  }
}

void sub_797A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_797A24(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)uint8x8_t v17 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v19 = 1065353216;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      double v8 = (void **)nullsub_1(v3);
      sub_798FD8(a1, *v8, (uint64_t)v17);
      v3 += 7560;
    }
    while (v3 != v4);
    uint64_t v9 = a2[1] - *a2;
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = v9 / 7560;
      do
      {
        uint64_t v13 = (void **)nullsub_1(*a2 + v10);
        sub_7991C8(a1, *v13, v11++, (uint64_t)v17, a3);
        v10 += 7560;
      }
      while (v12 != v11);
    }
  }
  uint64_t v14 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = v17[0];
  v17[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_797B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_797B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_797B6C(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v65 = 0uLL;
  unint64_t v66 = 0;
  int v6 = *(uint64_t **)(a3 + 16);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v6[21];
      double v8 = *((double *)v6 + 22);
      uint64_t v9 = v6[23];
      sub_4AA8E0((char *)__dst, (long long *)v6 + 1);
      *(void *)&long long v63 = v7;
      *((double *)&v63 + 1) = v8;
      uint64_t v64 = v9;
      if (v8 >= 0.0)
      {
        uint64_t v10 = v65.i64[1];
        if (v65.i64[1] >= v66)
        {
          uint64_t v12 = sub_79F92C(&v65, (uint64_t)__dst);
        }
        else
        {
          sub_4AA8E0((char *)v65.i64[1], (long long *)__dst);
          long long v11 = v63;
          *(void *)(v10 + 168) = v64;
          *(_OWORD *)(v10 + 152) = v11;
          uint64_t v12 = v10 + 176;
        }
        v65.i64[1] = v12;
        sub_79FC80(v65.i64[0], v12, (uint64_t)v50, 0x2E8BA2E8BA2E8BA3 * ((v12 - v65.i64[0]) >> 4));
      }
      if (v62 < 0)
      {
        operator delete(__p);
        if ((v60 & 0x80000000) == 0)
        {
LABEL_11:
          if ((v58 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v56 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
LABEL_17:
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_13:
        if (v54 < 0) {
          goto LABEL_19;
        }
        goto LABEL_3;
      }
LABEL_18:
      operator delete(v55);
      if (v54 < 0) {
LABEL_19:
      }
        operator delete(__dst[0]);
LABEL_3:
      int v6 = (uint64_t *)*v6;
      if (!v6)
      {
        uint64_t v13 = v65.i64[1];
        uint64_t v14 = v65.i64[0];
        goto LABEL_22;
      }
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_22:
  *(_OWORD *)long long v50 = 0u;
  *(_OWORD *)int v51 = 0u;
  int v52 = 1065353216;
  *(_OWORD *)int v47 = 0u;
  *(_OWORD *)char v48 = 0u;
  int v49 = 1065353216;
  if (v14 != v13)
  {
    while (1)
    {
      uint64_t v15 = v51[1];
      if (v51[1] >= (void *)(0xBAA6550FFBAA6551 * ((uint64_t)(a2[1] - *a2) >> 3))) {
        goto LABEL_75;
      }
      if (sub_13A8C(v47, v14))
      {
LABEL_24:
        sub_7A00D0(v65.i64[0], v65.i64[1], (uint64_t)__dst, 0x2E8BA2E8BA2E8BA3 * ((v65.i64[1] - v65.i64[0]) >> 4));
        sub_79E680((uint64_t)&v65, v65.i64[1] - 176);
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v14 + 152);
      if (v50[1])
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v50[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = *(void *)(v14 + 152);
          if ((void *)v16 >= v50[1]) {
            unint64_t v18 = v16 % (unint64_t)v50[1];
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)v50[1] - 1) & v16;
        }
        int v19 = (void *)*((void *)v50[0] + v18);
        if (v19)
        {
          long long v20 = (void *)*v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v22 = v20[1];
                if (v16 == v22)
                {
                  if (v20[2] == v16) {
                    goto LABEL_24;
                  }
                }
                else if ((v22 & ((uint64_t)v50[1] - 1)) != v18)
                {
                  goto LABEL_48;
                }
                long long v20 = (void *)*v20;
                if (!v20) {
                  goto LABEL_48;
                }
              }
            }
            do
            {
              unint64_t v21 = v20[1];
              if (v16 == v21)
              {
                if (v20[2] == v16) {
                  goto LABEL_24;
                }
              }
              else
              {
                if ((void *)v21 >= v50[1]) {
                  v21 %= (unint64_t)v50[1];
                }
                if (v21 != v18) {
                  break;
                }
              }
              long long v20 = (void *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_48:
      uint64_t v23 = sub_799440(a2, v16);
      unsigned int v24 = *(void **)nullsub_1(v23);
      sub_4AA8E0((char *)v37, (long long *)v14);
      sub_799680(v24, (unsigned __int8 *)v14, (uint64_t)v36);
      sub_7998A0((uint64_t)__dst, (long long *)v37, (uint64_t)v36);
      if (v36[0])
      {
        v36[1] = v36[0];
        operator delete(v36[0]);
      }
      if (v46 < 0)
      {
        operator delete(v45);
        if ((v44 & 0x80000000) == 0)
        {
LABEL_52:
          if ((v42 & 0x80000000) == 0) {
            goto LABEL_53;
          }
          goto LABEL_65;
        }
      }
      else if ((v44 & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v43);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_53:
        if (v40 < 0) {
          goto LABEL_66;
        }
        goto LABEL_54;
      }
LABEL_65:
      operator delete(v41);
      if (v40 < 0)
      {
LABEL_66:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_67;
      }
LABEL_54:
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_67:
      operator delete(v37[0]);
LABEL_55:
      sub_6485E4((uint64_t *)(*a2 + 7560 * *(void *)(v14 + 152)), (uint64_t)__dst);
      sub_24AFC((uint64_t)v47, v14, v14);
      sub_7A06C8((uint64_t)v50, (unint64_t *)(v14 + 152), (void *)(v14 + 152));
      sub_7A00D0(v65.i64[0], v65.i64[1], (uint64_t)&v67, 0x2E8BA2E8BA2E8BA3 * ((v65.i64[1] - v65.i64[0]) >> 4));
      sub_79E680((uint64_t)&v65, v65.i64[1] - 176);
      if ((void)v63)
      {
        *((void *)&v63 + 1) = v63;
        operator delete((void *)v63);
      }
      if (v62 < 0)
      {
        operator delete(__p);
        if ((v60 & 0x80000000) == 0)
        {
LABEL_59:
          if ((v58 & 0x80000000) == 0) {
            goto LABEL_60;
          }
          goto LABEL_70;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_60:
        if ((v56 & 0x80000000) == 0) {
          goto LABEL_61;
        }
        goto LABEL_71;
      }
LABEL_70:
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_61:
        if (v54 < 0) {
          goto LABEL_72;
        }
        goto LABEL_25;
      }
LABEL_71:
      operator delete(v55);
      if (v54 < 0) {
LABEL_72:
      }
        operator delete(__dst[0]);
LABEL_25:
      uint64_t v14 = v65.i64[0];
      if (v65.i64[0] == v65.i64[1])
      {
        uint64_t v15 = v51[1];
        goto LABEL_75;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_75:
  uint64_t v25 = a2[1];
  unint64_t v26 = 0xBAA6550FFBAA6551 * ((v25 - *a2) >> 3);
  if (v15 != (void *)v26 && v25 != *a2)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    do
    {
      sub_7999FC(a1, a3, v29++, (uint64_t *)(*a2 + v28));
      v28 += 7560;
    }
    while ((char *)v26 != v29);
  }
  uint64_t v30 = (void **)v48[0];
  if (v48[0])
  {
    do
    {
      char v35 = (void **)*v30;
      if (*((char *)v30 + 39) < 0) {
        operator delete(v30[2]);
      }
      operator delete(v30);
      uint64_t v30 = v35;
    }
    while (v35);
  }
  int v31 = v47[0];
  v47[0] = 0;
  if (v31) {
    operator delete(v31);
  }
  char v32 = v51[0];
  if (v51[0])
  {
    do
    {
      int v33 = (void *)*v32;
      operator delete(v32);
      char v32 = v33;
    }
    while (v33);
  }
  uint64_t v34 = v50[0];
  v50[0] = 0;
  if (v34) {
    operator delete(v34);
  }
  if (v65.i64[0])
  {
    sub_79E680((uint64_t)&v65, v65.i64[0]);
    operator delete((void *)v65.i64[0]);
  }
}

void sub_79810C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a12);
  sub_3A4C2C((uint64_t)&a31);
  sub_12168((uint64_t)&a37);
  sub_799CE4((uint64_t *)(v42 - 136));
  _Unwind_Resume(a1);
}

void sub_79819C(_Unwind_Exception *a1)
{
  sub_799CE4((uint64_t *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_7981B0(uint64_t a1, void *a2, uint64_t *a3)
{
  int v6 = (void *)*a3;
  uint64_t v7 = (void *)a3[1];
  if ((void *)*a3 == v7) {
    goto LABEL_85;
  }
  do
  {
    int v8 = sub_6484B0(v6, *(unsigned __int8 *)(a1 + 2));
    v6 += 945;
    if (v8) {
      BOOL v9 = v6 == v7;
    }
    else {
      BOOL v9 = 1;
    }
  }
  while (!v9);
  if (v8)
  {
LABEL_85:
    if (sub_6484B0(a2, *(unsigned __int8 *)(a1 + 2)))
    {
      long long v63 = 0u;
      long long v64 = 0u;
      int v65 = 1065353216;
      sub_797A24(a1, a3, (uint64_t)&v63);
      char v60 = 0;
      std::string::size_type v61 = 0;
      uint64_t v62 = 0;
      uint64_t v10 = (void *)sub_6467E8(a2, 0);
      long long v11 = (void *)*a3;
      uint64_t v12 = (void *)a3[1];
      if ((void *)*a3 != v12)
      {
        do
        {
          sub_6486B4(v11);
          uint64_t v13 = (void *)sub_6467E8(v11, 0);
          sub_798704(a1, v10, v13, (uint64_t)&v60);
          v11 += 945;
        }
        while (v11 != v12);
      }
      uint64_t v14 = (long long *)v64;
      if ((void)v64)
      {
        while (1)
        {
          sub_4AA8E0((char *)__dst, v14 + 1);
          unint64_t v15 = *((void *)v14 + 21);
          if (v15 >= 0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 4)) {
            goto LABEL_46;
          }
          uint64_t v16 = sub_798A10(&v60, *((void *)v14 + 21));
          if (!sub_13A8C((void *)(v16 + 8), (uint64_t)__dst))
          {
            sub_4AA8E0((char *)v40, (long long *)__dst);
            long long v20 = (unint64_t *)sub_798A10(&v60, v15);
            uint64_t v21 = sub_798C40(a1, v10, (unsigned __int8 *)v40, *v20);
            if (v49 < 0)
            {
              operator delete(__p);
              if (v47 < 0) {
                goto LABEL_39;
              }
LABEL_20:
              if ((v45 & 0x80000000) == 0) {
                goto LABEL_21;
              }
LABEL_40:
              operator delete(v44);
              if (v43 < 0) {
                goto LABEL_41;
              }
LABEL_22:
              if ((v41 & 0x80000000) == 0) {
                goto LABEL_23;
              }
LABEL_42:
              operator delete(v40[0]);
              double v30 = *((double *)v14 + 23);
              double v23 = v30 - (double)v21;
              if (v23 >= v30 * 0.5)
              {
LABEL_45:
                *((double *)v14 + 23) = v23;
LABEL_46:
                unsigned int v24 = *(long long **)v14;
                if ((v59 & 0x80000000) == 0) {
                  goto LABEL_47;
                }
                goto LABEL_64;
              }
            }
            else
            {
              if ((v47 & 0x80000000) == 0) {
                goto LABEL_20;
              }
LABEL_39:
              operator delete(v46);
              if (v45 < 0) {
                goto LABEL_40;
              }
LABEL_21:
              if ((v43 & 0x80000000) == 0) {
                goto LABEL_22;
              }
LABEL_41:
              operator delete(v42);
              if (v41 < 0) {
                goto LABEL_42;
              }
LABEL_23:
              double v22 = *((double *)v14 + 23);
              double v23 = v22 - (double)v21;
              if (v23 >= v22 * 0.5) {
                goto LABEL_45;
              }
            }
            double v31 = *((double *)v14 + 22);
            if (v31 > 0.0) {
              *((double *)v14 + 22) = -v31;
            }
            goto LABEL_45;
          }
          unint64_t v17 = *((void *)&v63 + 1);
          unint64_t v18 = *((void *)v14 + 1);
          uint8x8_t v19 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v63 + 8));
          v19.i16[0] = vaddlv_u8(v19);
          if (v19.u32[0] > 1uLL)
          {
            if (v18 >= *((void *)&v63 + 1)) {
              v18 %= *((void *)&v63 + 1);
            }
          }
          else
          {
            v18 &= *((void *)&v63 + 1) - 1;
          }
          unsigned int v24 = *(long long **)v14;
          uint64_t v25 = *(long long **)(v63 + 8 * v18);
          do
          {
            unint64_t v26 = v25;
            uint64_t v25 = *(long long **)v25;
          }
          while (v25 != v14);
          if (v26 != &v64)
          {
            unint64_t v27 = *((void *)v26 + 1);
            if (v19.u32[0] > 1uLL)
            {
              if (v27 >= *((void *)&v63 + 1)) {
                v27 %= *((void *)&v63 + 1);
              }
            }
            else
            {
              v27 &= *((void *)&v63 + 1) - 1;
            }
            uint64_t v28 = *(long long **)v14;
            if (v27 == v18) {
              goto LABEL_56;
            }
          }
          if (!v24) {
            break;
          }
          unint64_t v29 = *((void *)v24 + 1);
          if (v19.u32[0] > 1uLL)
          {
            if (v29 >= *((void *)&v63 + 1)) {
              v29 %= *((void *)&v63 + 1);
            }
          }
          else
          {
            v29 &= *((void *)&v63 + 1) - 1;
          }
          uint64_t v28 = *(long long **)v14;
          if (v29 != v18) {
            break;
          }
LABEL_57:
          unint64_t v32 = *((void *)v28 + 1);
          if (v19.u32[0] > 1uLL)
          {
            if (v32 >= v17) {
              v32 %= v17;
            }
          }
          else
          {
            v32 &= v17 - 1;
          }
          if (v32 != v18)
          {
            *(void *)(v63 + 8 * v32) = v26;
            uint64_t v28 = *(long long **)v14;
          }
LABEL_63:
          *(void *)unint64_t v26 = v28;
          *(void *)uint64_t v14 = 0;
          --*((void *)&v64 + 1);
          char v68 = 1;
          uint64_t v66 = 0;
          char v67 = &v64;
          sub_79EE04((uint64_t)&v67, (void **)v14);
          if ((v59 & 0x80000000) == 0)
          {
LABEL_47:
            if ((v57 & 0x80000000) == 0) {
              goto LABEL_48;
            }
            goto LABEL_65;
          }
LABEL_64:
          operator delete(v58);
          if ((v57 & 0x80000000) == 0)
          {
LABEL_48:
            if ((v55 & 0x80000000) == 0) {
              goto LABEL_49;
            }
            goto LABEL_66;
          }
LABEL_65:
          operator delete(v56);
          if ((v55 & 0x80000000) == 0)
          {
LABEL_49:
            if ((v53 & 0x80000000) == 0) {
              goto LABEL_50;
            }
            goto LABEL_67;
          }
LABEL_66:
          operator delete(v54);
          if ((v53 & 0x80000000) == 0)
          {
LABEL_50:
            if (v51 < 0) {
              goto LABEL_68;
            }
            goto LABEL_13;
          }
LABEL_67:
          operator delete(v52);
          if (v51 < 0) {
LABEL_68:
          }
            operator delete(__dst[0]);
LABEL_13:
          uint64_t v14 = v24;
          if (!v24) {
            goto LABEL_69;
          }
        }
        *(void *)(v63 + 8 * v18) = 0;
        uint64_t v28 = *(long long **)v14;
LABEL_56:
        if (!v28) {
          goto LABEL_63;
        }
        goto LABEL_57;
      }
LABEL_69:
      sub_797B6C(a1, a3, (uint64_t)&v63);
      int v33 = v60;
      if (v60)
      {
        uint64_t v34 = v61;
        char v35 = v60;
        if (v61 != v60)
        {
          do
          {
            uint64_t v36 = (void **)*((void *)v34 - 3);
            if (v36)
            {
              do
              {
                char v38 = (void **)*v36;
                if (*((char *)v36 + 39) < 0) {
                  operator delete(v36[2]);
                }
                operator delete(v36);
                uint64_t v36 = v38;
              }
              while (v38);
            }
            char v37 = (void *)*((void *)v34 - 5);
            *((void *)v34 - 5) = 0;
            if (v37) {
              operator delete(v37);
            }
            v34 -= 48;
          }
          while (v34 != v33);
          char v35 = v60;
        }
        std::string::size_type v61 = v33;
        operator delete(v35);
      }
      sub_79ED4C((int)&v63, (void **)v64);
      unint64_t v39 = (void *)v63;
      *(void *)&long long v63 = 0;
      if (v39) {
        operator delete(v39);
      }
    }
  }
}

void sub_798690(_Unwind_Exception *a1)
{
  sub_7978F4(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_7986A4(_Unwind_Exception *a1)
{
  sub_798DE4((void **)(v1 - 184));
  sub_7978F4(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_798704(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = a3[140];
  uint64_t v8 = a3[139];
  while (v7 != v8)
  {
    v7 -= 176;
    sub_57523C((uint64_t)(a3 + 141), v7);
  }
  a3[140] = v8;
  *(_OWORD *)uint64_t v36 = 0u;
  *(_OWORD *)char v37 = 0u;
  int v38 = 1065353216;
  unint64_t v9 = sub_46C760(a3);
  unint64_t v10 = sub_46C760(a2);
  if (v10 >= v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = sub_46C8EC(a2, v12);
      uint64_t v14 = *(void *)(sub_46C8EC(a3, v12) + 32);
      if (__PAIR64__(*(unsigned __int16 *)(v13 + 36), *(_DWORD *)(v13 + 32)) != __PAIR64__(WORD2(v14), v14)
        || ((v14 & 0x1000000000000) == 0) != (*(unsigned char *)(v13 + 38) == 0))
      {
        break;
      }
      if (v11 == ++v12) {
        goto LABEL_30;
      }
    }
    if (v12) {
      unint64_t v15 = v12 - 1;
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = a3[148];
    for (uint64_t i = a3[149]; v16 != i; v16 += 160)
    {
      if (*(void *)(v16 + 152) > v15) {
        break;
      }
      sub_24AFC((uint64_t)v36, v16, v16);
    }
    unint64_t v30 = v15;
    sub_4BC310((uint64_t)&__p, (uint64_t)v36);
    unint64_t v18 = *(void *)(a4 + 8);
    if (v18 >= *(void *)(a4 + 16))
    {
      *(void *)(a4 + 8) = sub_7A0FC0((void **)a4, (uint64_t *)&v30);
      unsigned int v24 = (void **)v33;
      if (!v33)
      {
LABEL_28:
        uint64_t v25 = __p;
        long long __p = 0;
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_30;
      }
    }
    else
    {
      *(void *)unint64_t v18 = v30;
      uint8x8_t v19 = __p;
      long long __p = 0;
      *(void *)(v18 + 8) = v19;
      *(void *)(v18 + 16) = v32;
      uint64_t v32 = 0;
      long long v20 = v33;
      *(void *)(v18 + 24) = v33;
      uint64_t v21 = v34;
      *(void *)(v18 + 32) = v34;
      *(_DWORD *)(v18 + 40) = v35;
      if (v21)
      {
        unint64_t v22 = v20[1];
        unint64_t v23 = *(void *)(v18 + 16);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v22 >= v23) {
            v22 %= v23;
          }
        }
        else
        {
          v22 &= v23 - 1;
        }
        v19[v22] = v18 + 24;
        int v33 = 0;
        uint64_t v34 = 0;
      }
      *(void *)(a4 + 8) = v18 + 48;
      unsigned int v24 = (void **)v33;
      if (!v33) {
        goto LABEL_28;
      }
    }
    do
    {
      unint64_t v29 = (void **)*v24;
      if (*((char *)v24 + 39) < 0) {
        operator delete(v24[2]);
      }
      operator delete(v24);
      unsigned int v24 = v29;
    }
    while (v29);
    goto LABEL_28;
  }
LABEL_30:
  unint64_t v26 = (void **)v37[0];
  if (v37[0])
  {
    do
    {
      uint64_t v28 = (void **)*v26;
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      unint64_t v26 = v28;
    }
    while (v28);
  }
  unint64_t v27 = v36[0];
  v36[0] = 0;
  if (v27) {
    operator delete(v27);
  }
}

void sub_798990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_7989AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7989C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7989D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7989E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_7989FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_798A10(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 48 * a2;
}

void sub_798B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_798C40(uint64_t a1, void *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t v4 = a2[149] - a2[148];
  if (v4)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = a2 + 148;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 5);
    while (1)
    {
      uint64_t v12 = sub_4A65E4(v10, v9);
      if (!sub_6F2FD8(v12)) {
        goto LABEL_4;
      }
      uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
      if ((v13 & 0x80u) == 0) {
        uint64_t v14 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        uint64_t v14 = *(void *)(v12 + 8);
      }
      uint64_t v15 = a3[23];
      int v16 = (char)v15;
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *((void *)a3 + 1);
      }
      if (v14 != v15) {
        goto LABEL_4;
      }
      if (v16 >= 0) {
        std::string v17 = a3;
      }
      else {
        std::string v17 = *(unsigned __int8 **)a3;
      }
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v12, v17, *(void *)(v12 + 8))) {
          goto LABEL_4;
        }
      }
      else if (*(unsigned char *)(v12 + 23))
      {
        std::string v18 = (unsigned __int8 *)v12;
        while (*v18 == *v17)
        {
          ++v18;
          ++v17;
          if (!--v13) {
            goto LABEL_20;
          }
        }
        goto LABEL_4;
      }
LABEL_20:
      if (*(void *)(v12 + 152) <= a4) {
        unint64_t v19 = a4;
      }
      else {
        unint64_t v19 = *(void *)(v12 + 152);
      }
      if (v9 >= -1 - 0x3333333333333333 * ((uint64_t)(a2[149] - a2[148]) >> 5))
      {
        unint64_t v20 = sub_46C760(a2);
        if (v20 >= a4)
        {
LABEL_27:
          if (v19 <= v20) {
            unint64_t v22 = v20;
          }
          else {
            unint64_t v22 = v19;
          }
          if (v19 < v20)
          {
            do
              v8 += sub_46CCC8(a2, v19++, v21);
            while (v22 != v19);
          }
        }
      }
      else
      {
        unint64_t v20 = *(void *)(sub_4A65E4(v10, v9 + 1) + 152);
        if (v20 >= a4) {
          goto LABEL_27;
        }
      }
LABEL_4:
      if (++v9 == v11) {
        return v8;
      }
    }
  }
  return 0;
}

void **sub_798DE4(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void **)*((void *)v3 - 3);
        if (v5)
        {
          do
          {
            long long v7 = (void **)*v5;
            if (*((char *)v5 + 39) < 0) {
              operator delete(v5[2]);
            }
            operator delete(v5);
            int v5 = v7;
          }
          while (v7);
        }
        int v6 = (void *)*((void *)v3 - 5);
        *((void *)v3 - 5) = 0;
        if (v6) {
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_798E90(unsigned char *a1, void *a2, uint64_t a3, void *a4)
{
  if (sub_6484B0(a4, a1[2]))
  {
    uint64_t v8 = (uint64_t *)nullsub_1(a4);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        sub_5AE518(v9, a2);
        v9 += 12328;
      }
      while (v9 != v10);
    }
    uint64_t v11 = nullsub_1(a4);
    uint64_t v12 = *(int64x2_t **)v11;
    uint64_t v13 = *(int64x2_t **)(v11 + 8);
    if (*(int64x2_t **)v11 != v13)
    {
      do
      {
        sub_5AE8B8(v12, a2, a3);
        uint64_t v12 = (int64x2_t *)((char *)v12 + 12328);
      }
      while (v12 != v13);
    }
    long long __p = 0;
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v19 = (void *)sub_79EEE0((uint64_t *)&__p, (uint64_t)a4);
    sub_797930(a1, (uint64_t *)&__p);
    uint64_t v14 = (std::string **)sub_5231C((uint64_t)__p);
    sub_648544(a4, v14);
    uint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = (uint64_t)v19;
      std::string v17 = __p;
      if (v19 != __p)
      {
        do
          uint64_t v16 = sub_574D4C(v16 - 7560);
        while ((void *)v16 != v15);
        std::string v17 = __p;
      }
      unint64_t v19 = v15;
      operator delete(v17);
    }
  }
}

void sub_798FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_574530((void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_798FD8(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t result = (unint64_t)sub_46C77C(a2, v15);
  int v5 = v15[0];
  int v6 = v15[1];
  long long v7 = v16;
  unint64_t v8 = v17;
  if (v15[0])
  {
    if (v16)
    {
      while (1)
      {
        unint64_t v10 = sub_46C760(v5);
        unint64_t result = sub_46C760(v7);
        if ((unint64_t)v6 >= v10 || v8 >= result)
        {
          if ((unint64_t)v6 < v10 == v8 < result) {
            return result;
          }
        }
        else
        {
          uint64_t v11 = sub_46C8EC(v5, (uint64_t)v6);
          unint64_t result = sub_46C8EC(v7, v8);
          if (v11 == result) {
            return result;
          }
        }
        unint64_t v14 = *(void *)(sub_46C8EC(v5, (uint64_t)v6) + 32);
        std::string v18 = &v14;
        uint64_t v9 = sub_79F0E8(a3, &v14, (uint64_t)&unk_20F06E0, &v18);
        ++*((_DWORD *)v9 + 6);
        int v6 = (void *)((char *)v6 + 1);
      }
    }
    for (unint64_t result = sub_46C760(v15[0]); (unint64_t)v6 < result; unint64_t result = sub_46C760(v5))
    {
      unint64_t v14 = *(void *)(sub_46C8EC(v5, (uint64_t)v6) + 32);
      std::string v18 = &v14;
      uint64_t v13 = sub_79F0E8(a3, &v14, (uint64_t)&unk_20F06E0, &v18);
      ++*((_DWORD *)v13 + 6);
      int v6 = (void *)((char *)v6 + 1);
    }
  }
  else if (v16)
  {
    for (unint64_t result = sub_46C760(v16); v8 < result; unint64_t result = sub_46C760(v7))
    {
      unint64_t v14 = *(void *)(sub_46C8EC(0, (uint64_t)v6) + 32);
      std::string v18 = &v14;
      uint64_t v12 = sub_79F0E8(a3, &v14, (uint64_t)&unk_20F06E0, &v18);
      ++*((_DWORD *)v12 + 6);
      int v6 = (void *)((char *)v6 + 1);
    }
  }
  return result;
}

void sub_7991C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2[149] - a2[148];
  if (v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 148;
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 5);
    do
    {
      unint64_t v10 = (long long *)sub_4A65E4(v9, v8);
      if (!sub_6F2FD8((uint64_t)v10)) {
        goto LABEL_3;
      }
      unint64_t v11 = *(void *)(sub_4A65E4(v9, v8) + 152);
      if (v8 >= -1 - 0x3333333333333333 * ((uint64_t)(a2[149] - a2[148]) >> 5)) {
        unint64_t v12 = sub_46C760(a2);
      }
      else {
        unint64_t v12 = *(void *)(sub_4A65E4(v9, v8 + 1) + 152);
      }
      sub_4AA8E0((char *)__dst, v10);
      uint64_t v35 = a3;
      long long v24 = 0uLL;
      uint64_t v13 = (double *)sub_79F498(a5, (uint64_t)__dst, (uint64_t)__dst, &v24);
      BOOL v14 = v11 >= v12;
      if (v11 > v12) {
        unint64_t v12 = v11;
      }
      if (!v14)
      {
        uint64_t v15 = v13;
        do
        {
          unint64_t v23 = *(void *)(sub_46C8EC(a2, v11) + 32);
          *(void *)&long long v24 = &v23;
          unsigned int v16 = *((_DWORD *)sub_79F0E8(a4, &v23, (uint64_t)&unk_20F06E0, (void **)&v24) + 6);
          uint64_t v18 = sub_46CCC8(a2, v11, v17);
          double v19 = v15[23] + (double)v18;
          v15[22] = (double)v18 / (double)v16 + v15[22];
          v15[23] = v19;
          ++v11;
        }
        while (v12 != v11);
      }
      if (v34 < 0)
      {
        operator delete(__p);
        if ((v32 & 0x80000000) == 0)
        {
LABEL_15:
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_16;
          }
          goto LABEL_21;
        }
      }
      else if ((v32 & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(v31);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_16:
        if ((v28 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
LABEL_21:
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_17:
        if (v26 < 0) {
          goto LABEL_23;
        }
        goto LABEL_3;
      }
LABEL_22:
      operator delete(v27);
      if (v26 < 0) {
LABEL_23:
      }
        operator delete(__dst[0]);
LABEL_3:
      ++v8;
    }
    while (v8 != v22);
  }
}

void sub_7993F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_799404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_799418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_79942C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4A50F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_799440(void *a1, unint64_t a2)
{
  if (0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xBAA6550FFBAA6551 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    BOOL v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 7560 * a2;
}

void sub_7995A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void *sub_799680@<X0>(void *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result[148];
  uint64_t v5 = result[149];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v4 != v5)
  {
    long long v7 = result;
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 5);
    if (v8 != 1)
    {
      for (unint64_t i = 1; i != v8; ++i)
      {
        uint64_t v11 = sub_4A65E4(v7 + 148, i - 1);
        if (!sub_6F326C((unsigned __int8 *)v11, a2))
        {
          uint64_t v12 = sub_4A65E4(v7 + 148, i);
          uint64_t v24 = sub_46CE10(v7, 0, 1, *(void *)(v11 + 152), 0, v13);
          uint64_t v15 = sub_46CE10(v7, 0, 1, *(void *)(v12 + 152), 0, v14);
          uint64_t v23 = v15;
          unint64_t v16 = *(void *)(a3 + 8);
          if (v16 >= *(void *)(a3 + 16))
          {
            unint64_t v10 = sub_7A05B4((void **)a3, &v24, &v23);
          }
          else
          {
            sub_2F99CC(*(void **)(a3 + 8), v24, v15);
            unint64_t v10 = (void *)(v16 + 16);
            *(void *)(a3 + 8) = v16 + 16;
          }
          *(void *)(a3 + 8) = v10;
        }
      }
      uint64_t v5 = v7[149];
    }
    unint64_t result = (void *)sub_6F317C((unsigned __int8 *)(v5 - 160), a2);
    if (result)
    {
      uint64_t v18 = sub_46CE10(v7, 0, 1, *(void *)(v7[149] - 8), 0, v17);
      uint64_t v24 = v18;
      unint64_t v19 = sub_46C760(v7);
      uint64_t v21 = sub_46CE10(v7, 0, 1, v19 - 1, 1u, v20);
      uint64_t v23 = v21;
      unint64_t v22 = *(void *)(a3 + 8);
      if (v22 >= *(void *)(a3 + 16))
      {
        unint64_t result = sub_7A05B4((void **)a3, &v24, &v23);
      }
      else
      {
        sub_2F99CC(*(void **)(a3 + 8), v18, v21);
        unint64_t result = (void *)(v22 + 16);
        *(void *)(a3 + 8) = v22 + 16;
      }
      *(void *)(a3 + 8) = result;
    }
  }
  return result;
}

void sub_79984C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_7998A0(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v5 = sub_4AA8E0((char *)a1, a2);
  *((void *)v5 + 19) = 0;
  *((void *)v5 + 20) = 0;
  *((void *)v5 + 21) = 0;
  int v6 = *(const void **)a3;
  int64_t v7 = *(void *)(a3 + 8) - *(void *)a3;
  if (v7)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 152) = v8;
    *(void *)(a1 + 160) = v8;
    long long v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 168) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 160) = v9;
  }
  return a1;
}

void sub_799924(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 160) = v4;
    operator delete(v4);
  }
  sub_20A9784(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_799948(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_13:
  operator delete(*(void **)a1);
  return a1;
}

void sub_7999FC(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  int64_t v7 = (void *)sub_5231C((uint64_t)a4);
  if (*v7 == v7[1])
  {
    unint64_t v8 = *(long long **)(a2 + 16);
    v23[0] = a3;
    long long v9 = sub_79E740(v8, 0, v23);
    if (v9) {
      uint64_t v10 = (uint64_t)sub_4AA8E0((char *)&__dst, v9 + 1);
    }
    else {
      uint64_t v10 = sub_6F30A4((uint64_t)&__dst);
    }
    if (!sub_6F2FD8(v10)) {
      goto LABEL_21;
    }
    uint64_t v11 = *(void **)nullsub_1(a4);
    sub_4AA8E0((char *)v13, &__dst);
    sub_799680(v11, (unsigned __int8 *)&__dst, (uint64_t)__p);
    sub_7998A0((uint64_t)v23, (long long *)v13, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v22 < 0)
    {
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v18 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_29;
      }
    }
    else if ((v20 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v19);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v16 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_30;
    }
LABEL_29:
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_31:
      operator delete(v13[0]);
LABEL_14:
      sub_6485E4(a4, (uint64_t)v23);
      if (v33)
      {
        char v34 = v33;
        operator delete(v33);
      }
      if (v32 < 0)
      {
        operator delete(v31);
        if ((v30 & 0x80000000) == 0)
        {
LABEL_18:
          if ((v28 & 0x80000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_34;
        }
      }
      else if ((v30 & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_19:
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_35:
        operator delete(v25);
        if (v24 < 0) {
          goto LABEL_36;
        }
LABEL_21:
        if ((v44 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_37;
      }
LABEL_34:
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_21;
        }
LABEL_36:
        operator delete(v23[0]);
        if ((v44 & 0x80000000) == 0)
        {
LABEL_22:
          if ((v42 & 0x80000000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_38;
        }
LABEL_37:
        operator delete(v43);
        if ((v42 & 0x80000000) == 0)
        {
LABEL_23:
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_39;
        }
LABEL_38:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_24:
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_40;
        }
LABEL_39:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_25:
          if ((v36 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v37);
        if ((v36 & 0x80000000) == 0) {
          return;
        }
LABEL_41:
        operator delete((void *)__dst);
        return;
      }
      goto LABEL_35;
    }
LABEL_30:
    operator delete(v15);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
}

void sub_799C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_799948((uint64_t)&a32);
  sub_4A50F4(v32 - 184);
  _Unwind_Resume(a1);
}

void sub_799C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a13);
  sub_4A50F4(v13 - 184);
  _Unwind_Resume(a1);
}

void sub_799CA8(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_799CBC(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_799CD0(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

uint64_t *sub_799CE4(uint64_t *a1)
{
  if (*a1)
  {
    sub_79E680((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_799D20(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4[139] == a4[140])
  {
    uint64_t v5 = *(long long **)(a2 + 16);
    v21[0] = a3;
    int v6 = sub_79E740(v5, 0, v21);
    if (v6) {
      uint64_t v7 = (uint64_t)sub_4AA8E0((char *)&__dst, v6 + 1);
    }
    else {
      uint64_t v7 = sub_6F30A4((uint64_t)&__dst);
    }
    if (!sub_6F2FD8(v7)) {
      goto LABEL_29;
    }
    sub_4AA8E0((char *)v11, &__dst);
    sub_799680(a4, (unsigned __int8 *)&__dst, (uint64_t)__p);
    sub_7998A0((uint64_t)v21, (long long *)v11, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v20 < 0)
    {
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_18;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v15);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_14:
      unint64_t v8 = a4[140];
      if (v8 < a4[141])
      {
LABEL_15:
        sub_598A38(v8, (uint64_t)v21);
        uint64_t v9 = v8 + 176;
        a4[140] = v8 + 176;
        goto LABEL_22;
      }
LABEL_21:
      uint64_t v9 = sub_64CC70(a4 + 139, (uint64_t)v21);
LABEL_22:
      a4[140] = v9;
      if (v31)
      {
        uint64_t v32 = v31;
        operator delete(v31);
      }
      if (v30 < 0)
      {
        operator delete(v29);
        if ((v28 & 0x80000000) == 0)
        {
LABEL_26:
          if ((v26 & 0x80000000) == 0) {
            goto LABEL_27;
          }
          goto LABEL_37;
        }
      }
      else if ((v28 & 0x80000000) == 0)
      {
        goto LABEL_26;
      }
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_27:
        if ((v24 & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v23);
        if (v22 < 0) {
          goto LABEL_39;
        }
LABEL_29:
        if ((v42 & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_40;
      }
LABEL_37:
      operator delete(v25);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_28:
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_29;
        }
LABEL_39:
        operator delete(v21[0]);
        if ((v42 & 0x80000000) == 0)
        {
LABEL_30:
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_31;
          }
          goto LABEL_41;
        }
LABEL_40:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_31:
          if ((v38 & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_42;
        }
LABEL_41:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0)
        {
LABEL_32:
          if ((v36 & 0x80000000) == 0) {
            goto LABEL_33;
          }
          goto LABEL_43;
        }
LABEL_42:
        operator delete(v37);
        if ((v36 & 0x80000000) == 0)
        {
LABEL_33:
          if ((v34 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_44;
        }
LABEL_43:
        operator delete(v35);
        if ((v34 & 0x80000000) == 0) {
          return;
        }
LABEL_44:
        operator delete((void *)__dst);
        return;
      }
      goto LABEL_38;
    }
LABEL_20:
    operator delete(v11[0]);
    unint64_t v8 = a4[140];
    if (v8 < a4[141]) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
}

void sub_799F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  sub_799948((uint64_t)&a32);
  sub_4A50F4(v32 - 184);
  _Unwind_Resume(a1);
}

void sub_799FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4A50F4((uint64_t)&a13);
  sub_4A50F4(v13 - 184);
  _Unwind_Resume(a1);
}

void sub_799FFC(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_79A010(_Unwind_Exception *a1)
{
  sub_4A50F4(v1 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_79A024(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

BOOL *sub_79A090(BOOL *a1, void *a2)
{
  strcpy((char *)__p, "output_all_route_names");
  HIBYTE(__p[2]) = 22;
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "output_highest_weighted_route_names");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  return a1;
}

void sub_79A168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_79A188(BOOL *a1, uint64_t a2, uint64_t a3)
{
  char v17 = 10;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteNamer");
  uint64_t v13 = 0;
  char v14 = 0;
  BOOL v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB2F0(v5, (uint64_t)__p);
  sub_79C1E4(a1, __p);
  int v6 = v19;
  if (v19)
  {
    do
    {
      uint64_t v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      int v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    uint64_t v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = v13;
    }
    char v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  a1[2] = *(unsigned char *)(a3 + 107);
  return a1;
}

void sub_79A2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL *sub_79A2F0(BOOL *a1, uint64_t a2, uint64_t a3)
{
  char v17 = 10;
  uint64_t v15 = 0;
  strcpy((char *)v16, "RouteNamer");
  uint64_t v13 = 0;
  char v14 = 0;
  BOOL v5 = sub_374CDC(a2, (uint64_t)v16, (uint64_t *)&v13);
  sub_3CB370(v5, 3, *(unsigned __int8 *)(a3 + 1525), __p);
  sub_79C1E4(a1, __p);
  int v6 = v19;
  if (v19)
  {
    do
    {
      uint64_t v11 = *(char **)v6;
      sub_57AC8((uint64_t *)v6 + 5);
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      int v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void **)v13;
  if (v13)
  {
    uint64_t v9 = v14;
    uint64_t v10 = v13;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = v13;
    }
    char v14 = v8;
    operator delete(v10);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  a1[2] = *(unsigned char *)(a3 + 1482);
  return a1;
}

void sub_79A428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_79A460(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 1))
  {
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)int v6 = 0u;
    int v7 = 1065353216;
    sub_79A4EC(a1, (uint64_t)a2, (uint64_t)__p);
    sub_79A624(a1, a2, (uint64_t)__p);
    sub_79ED4C((int)__p, (void **)v6[0]);
    BOOL v4 = __p[0];
    __p[0] = 0;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_79A4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79A4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v17 = 1065353216;
  uint64_t v3 = *(void **)a2;
  BOOL v4 = *(void **)(a2 + 8);
  if (*(void **)a2 != v4)
  {
    do
    {
      sub_798FD8(a1, v3, (uint64_t)v15);
      v3 += 1541;
    }
    while (v3 != v4);
    uint64_t v8 = *(void *)(a2 + 8) - *(void *)a2;
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = v8 / 12328;
      do
      {
        sub_79B520(a1, (void *)(*(void *)a2 + v9), v10++, (uint64_t)v15, a3);
        v9 += 12328;
      }
      while (v11 != v10);
    }
  }
  char v12 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      operator delete(v12);
      char v12 = v13;
    }
    while (v13);
  }
  char v14 = v15[0];
  v15[0] = 0;
  if (v14) {
    operator delete(v14);
  }
}

void sub_79A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79A610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79A624(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v67 = 0uLL;
  unint64_t v68 = 0;
  int v6 = *(uint64_t **)(a3 + 16);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v6[21];
      double v8 = *((double *)v6 + 22);
      uint64_t v9 = v6[23];
      sub_4AA8E0((char *)__dst, (long long *)v6 + 1);
      *(void *)&long long v65 = v7;
      *((double *)&v65 + 1) = v8;
      uint64_t v66 = v9;
      if (v8 >= 0.0)
      {
        uint64_t v10 = v67.i64[1];
        if (v67.i64[1] >= v68)
        {
          uint64_t v12 = sub_7A166C(&v67, (uint64_t)__dst);
        }
        else
        {
          sub_4AA8E0((char *)v67.i64[1], (long long *)__dst);
          long long v11 = v65;
          *(void *)(v10 + 168) = v66;
          *(_OWORD *)(v10 + 152) = v11;
          uint64_t v12 = v10 + 176;
        }
        v67.i64[1] = v12;
        sub_79FC80(v67.i64[0], v12, (uint64_t)v52, 0x2E8BA2E8BA2E8BA3 * ((v12 - v67.i64[0]) >> 4));
      }
      if (v64 < 0)
      {
        operator delete(__p);
        if ((v62 & 0x80000000) == 0)
        {
LABEL_11:
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
      else if ((v62 & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
LABEL_17:
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_13:
        if (v56 < 0) {
          goto LABEL_19;
        }
        goto LABEL_3;
      }
LABEL_18:
      operator delete(v57);
      if (v56 < 0) {
LABEL_19:
      }
        operator delete(__dst[0]);
LABEL_3:
      int v6 = (uint64_t *)*v6;
      if (!v6)
      {
        uint64_t v13 = v67.i64[1];
        uint64_t v14 = v67.i64[0];
        goto LABEL_22;
      }
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_22:
  *(_OWORD *)int v52 = 0u;
  *(_OWORD *)char v53 = 0u;
  int v54 = 1065353216;
  *(_OWORD *)char v49 = 0u;
  *(_OWORD *)long long v50 = 0u;
  int v51 = 1065353216;
  if (v14 != v13)
  {
    while (1)
    {
      uint64_t v15 = v53[1];
      if (v53[1] >= (void *)(0xFF55E3181697D6CDLL * ((uint64_t)(a2[1] - *a2) >> 3))) {
        goto LABEL_78;
      }
      if (sub_13A8C(v49, v14))
      {
LABEL_27:
        sub_7A1C38(v67.i64[0], v67.i64[1], (uint64_t)__dst, 0x2E8BA2E8BA2E8BA3 * ((v67.i64[1] - v67.i64[0]) >> 4));
        sub_79E680((uint64_t)&v67, v67.i64[1] - 176);
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v14 + 152);
      if (v52[1])
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v52[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = *(void *)(v14 + 152);
          if ((void *)v16 >= v52[1]) {
            unint64_t v18 = v16 % (unint64_t)v52[1];
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)v52[1] - 1) & v16;
        }
        unint64_t v19 = (void *)*((void *)v52[0] + v18);
        if (v19)
        {
          char v20 = (void *)*v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v22 = v20[1];
                if (v16 == v22)
                {
                  if (v20[2] == v16) {
                    goto LABEL_27;
                  }
                }
                else if ((v22 & ((unint64_t)v52[1] - 1)) != v18)
                {
                  goto LABEL_48;
                }
                char v20 = (void *)*v20;
                if (!v20) {
                  goto LABEL_48;
                }
              }
            }
            do
            {
              unint64_t v21 = v20[1];
              if (v16 == v21)
              {
                if (v20[2] == v16) {
                  goto LABEL_27;
                }
              }
              else
              {
                if ((void *)v21 >= v52[1]) {
                  v21 %= (unint64_t)v52[1];
                }
                if (v21 != v18) {
                  break;
                }
              }
              char v20 = (void *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_48:
      sub_4AA8E0((char *)v39, (long long *)v14);
      sub_79B9D8((void *)(*a2 + 12328 * *(void *)(v14 + 152)), (unsigned __int8 *)v14, (uint64_t)v38);
      sub_7998A0((uint64_t)__dst, (long long *)v39, (uint64_t)v38);
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      if (v48 < 0)
      {
        operator delete(v47);
        if ((v46 & 0x80000000) == 0)
        {
LABEL_52:
          if ((v44 & 0x80000000) == 0) {
            goto LABEL_53;
          }
          goto LABEL_68;
        }
      }
      else if ((v46 & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v45);
      if ((v44 & 0x80000000) == 0)
      {
LABEL_53:
        if (v42 < 0) {
          goto LABEL_69;
        }
        goto LABEL_54;
      }
LABEL_68:
      operator delete(v43);
      if (v42 < 0)
      {
LABEL_69:
        operator delete(v41);
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_70;
      }
LABEL_54:
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_70:
      operator delete(v39[0]);
LABEL_55:
      uint64_t v23 = *a2 + 12328 * *(void *)(v14 + 152);
      char v24 = (uint64_t *)(v23 + 1112);
      unint64_t v25 = *(void *)(v23 + 1120);
      if (v25 >= *(void *)(v23 + 1128))
      {
        uint64_t v26 = sub_7A0D64(v24, (uint64_t)__dst);
      }
      else
      {
        sub_598A38(v25, (uint64_t)__dst);
        uint64_t v26 = v25 + 176;
        v24[1] = v25 + 176;
      }
      v24[1] = v26;
      sub_24AFC((uint64_t)v49, v14, v14);
      sub_7A06C8((uint64_t)v52, (unint64_t *)(v14 + 152), (void *)(v14 + 152));
      sub_7A1C38(v67.i64[0], v67.i64[1], (uint64_t)v69, 0x2E8BA2E8BA2E8BA3 * ((v67.i64[1] - v67.i64[0]) >> 4));
      sub_79E680((uint64_t)&v67, v67.i64[1] - 176);
      if ((void)v65)
      {
        *((void *)&v65 + 1) = v65;
        operator delete((void *)v65);
      }
      if (v64 < 0)
      {
        operator delete(__p);
        if ((v62 & 0x80000000) == 0)
        {
LABEL_62:
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_63;
          }
          goto LABEL_73;
        }
      }
      else if ((v62 & 0x80000000) == 0)
      {
        goto LABEL_62;
      }
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_63:
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_74;
      }
LABEL_73:
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_64:
        if (v56 < 0) {
          goto LABEL_75;
        }
        goto LABEL_24;
      }
LABEL_74:
      operator delete(v57);
      if (v56 < 0) {
LABEL_75:
      }
        operator delete(__dst[0]);
LABEL_24:
      uint64_t v14 = v67.i64[0];
      if (v67.i64[0] == v67.i64[1])
      {
        uint64_t v15 = v53[1];
        goto LABEL_78;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_78:
  uint64_t v27 = a2[1];
  unint64_t v28 = 0xFF55E3181697D6CDLL * ((v27 - *a2) >> 3);
  if (v15 != (void *)v28 && v27 != *a2)
  {
    uint64_t v30 = 0;
    double v31 = 0;
    do
    {
      sub_79BEE0(a1, a3, v31++, (void *)(*a2 + v30));
      v30 += 12328;
    }
    while ((char *)v28 != v31);
  }
  uint64_t v32 = (void **)v50[0];
  if (v50[0])
  {
    do
    {
      char v37 = (void **)*v32;
      if (*((char *)v32 + 39) < 0) {
        operator delete(v32[2]);
      }
      operator delete(v32);
      uint64_t v32 = v37;
    }
    while (v37);
  }
  uint64_t v33 = v49[0];
  v49[0] = 0;
  if (v33) {
    operator delete(v33);
  }
  char v34 = v53[0];
  if (v53[0])
  {
    do
    {
      uint64_t v35 = (void *)*v34;
      operator delete(v34);
      char v34 = v35;
    }
    while (v35);
  }
  char v36 = v52[0];
  v52[0] = 0;
  if (v36) {
    operator delete(v36);
  }
  if (v67.i64[0])
  {
    sub_79E680((uint64_t)&v67, v67.i64[0]);
    operator delete((void *)v67.i64[0]);
  }
}

void sub_79ABF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  *(void *)(v43 + 8) = v44;
  sub_799948((uint64_t)&a43);
  sub_3A4C2C((uint64_t)&a31);
  sub_12168((uint64_t)&a37);
  sub_799CE4((uint64_t *)(v45 - 144));
  _Unwind_Resume(a1);
}

void sub_79AC8C(_Unwind_Exception *a1)
{
  sub_799CE4((uint64_t *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_79ACA0(unsigned char *a1, uint64_t *a2)
{
  if (*a1 || a1[1])
  {
    BOOL v4 = (void *)*a2;
    BOOL v5 = (void *)a2[1];
    if ((void *)*a2 == v5) {
      goto LABEL_10;
    }
    do
    {
      int v6 = sub_6484B0(v4, a1[2]);
      v4 += 945;
      if (v6) {
        BOOL v7 = v4 == v5;
      }
      else {
        BOOL v7 = 1;
      }
    }
    while (!v7);
    if (v6)
    {
LABEL_10:
      *(_OWORD *)long long __p = 0u;
      *(_OWORD *)uint64_t v10 = 0u;
      int v11 = 1065353216;
      sub_79AD94((uint64_t)a1, a2, (uint64_t)__p);
      if (a1[1]) {
        sub_79AEDC((uint64_t)a1, a2, (uint64_t)__p);
      }
      if (*a1) {
        sub_785EC4((uint64_t **)a2);
      }
      sub_79ED4C((int)__p, (void **)v10[0]);
      double v8 = __p[0];
      __p[0] = 0;
      if (v8) {
        operator delete(v8);
      }
    }
  }
}

void sub_79AD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79AD94(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)uint8x8_t v17 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v19 = 1065353216;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      double v8 = (void **)nullsub_1(v3);
      sub_798FD8(a1, *v8, (uint64_t)v17);
      v3 += 7560;
    }
    while (v3 != v4);
    uint64_t v9 = a2[1] - *a2;
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = v9 / 7560;
      do
      {
        uint64_t v13 = (void **)nullsub_1(*a2 + v10);
        sub_79B520(a1, *v13, v11++, (uint64_t)v17, a3);
        v10 += 7560;
      }
      while (v12 != v11);
    }
  }
  uint64_t v14 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      uint64_t v14 = v15;
    }
    while (v15);
  }
  unint64_t v16 = v17[0];
  v17[0] = 0;
  if (v16) {
    operator delete(v16);
  }
}

void sub_79AEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79AEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_79AEDC(uint64_t a1, void *a2, uint64_t a3)
{
  int64x2_t v65 = 0uLL;
  unint64_t v66 = 0;
  int v6 = *(uint64_t **)(a3 + 16);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v6[21];
      double v8 = *((double *)v6 + 22);
      uint64_t v9 = v6[23];
      sub_4AA8E0((char *)__dst, (long long *)v6 + 1);
      *(void *)&long long v63 = v7;
      *((double *)&v63 + 1) = v8;
      uint64_t v64 = v9;
      if (v8 >= 0.0)
      {
        uint64_t v10 = v65.i64[1];
        if (v65.i64[1] >= v66)
        {
          uint64_t v12 = sub_7A166C(&v65, (uint64_t)__dst);
        }
        else
        {
          sub_4AA8E0((char *)v65.i64[1], (long long *)__dst);
          long long v11 = v63;
          *(void *)(v10 + 168) = v64;
          *(_OWORD *)(v10 + 152) = v11;
          uint64_t v12 = v10 + 176;
        }
        v65.i64[1] = v12;
        sub_79FC80(v65.i64[0], v12, (uint64_t)v50, 0x2E8BA2E8BA2E8BA3 * ((v12 - v65.i64[0]) >> 4));
      }
      if (v62 < 0)
      {
        operator delete(__p);
        if ((v60 & 0x80000000) == 0)
        {
LABEL_11:
          if ((v58 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_17;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_12:
        if ((v56 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
LABEL_17:
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_13:
        if (v54 < 0) {
          goto LABEL_19;
        }
        goto LABEL_3;
      }
LABEL_18:
      operator delete(v55);
      if (v54 < 0) {
LABEL_19:
      }
        operator delete(__dst[0]);
LABEL_3:
      int v6 = (uint64_t *)*v6;
      if (!v6)
      {
        uint64_t v13 = v65.i64[1];
        uint64_t v14 = v65.i64[0];
        goto LABEL_22;
      }
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_22:
  *(_OWORD *)long long v50 = 0u;
  *(_OWORD *)int v51 = 0u;
  int v52 = 1065353216;
  *(_OWORD *)char v47 = 0u;
  *(_OWORD *)char v48 = 0u;
  int v49 = 1065353216;
  if (v14 != v13)
  {
    while (1)
    {
      uint64_t v15 = v51[1];
      if (v51[1] >= (void *)(0xBAA6550FFBAA6551 * ((uint64_t)(a2[1] - *a2) >> 3))) {
        goto LABEL_75;
      }
      if (sub_13A8C(v47, v14))
      {
LABEL_24:
        sub_7A18C0(v65.i64[0], v65.i64[1], (uint64_t)__dst, 0x2E8BA2E8BA2E8BA3 * ((v65.i64[1] - v65.i64[0]) >> 4));
        sub_79E680((uint64_t)&v65, v65.i64[1] - 176);
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v14 + 152);
      if (v50[1])
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v50[1]);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t v18 = *(void *)(v14 + 152);
          if ((void *)v16 >= v50[1]) {
            unint64_t v18 = v16 % (unint64_t)v50[1];
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)v50[1] - 1) & v16;
        }
        int v19 = (void *)*((void *)v50[0] + v18);
        if (v19)
        {
          char v20 = (void *)*v19;
          if (v20)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v22 = v20[1];
                if (v16 == v22)
                {
                  if (v20[2] == v16) {
                    goto LABEL_24;
                  }
                }
                else if ((v22 & ((uint64_t)v50[1] - 1)) != v18)
                {
                  goto LABEL_48;
                }
                char v20 = (void *)*v20;
                if (!v20) {
                  goto LABEL_48;
                }
              }
            }
            do
            {
              unint64_t v21 = v20[1];
              if (v16 == v21)
              {
                if (v20[2] == v16) {
                  goto LABEL_24;
                }
              }
              else
              {
                if ((void *)v21 >= v50[1]) {
                  v21 %= (unint64_t)v50[1];
                }
                if (v21 != v18) {
                  break;
                }
              }
              char v20 = (void *)*v20;
            }
            while (v20);
          }
        }
      }
LABEL_48:
      uint64_t v23 = sub_79B798(a2, v16);
      char v24 = *(void **)nullsub_1(v23);
      sub_4AA8E0((char *)v37, (long long *)v14);
      sub_79B9D8(v24, (unsigned __int8 *)v14, (uint64_t)v36);
      sub_7998A0((uint64_t)__dst, (long long *)v37, (uint64_t)v36);
      if (v36[0])
      {
        v36[1] = v36[0];
        operator delete(v36[0]);
      }
      if (v46 < 0)
      {
        operator delete(v45);
        if ((v44 & 0x80000000) == 0)
        {
LABEL_52:
          if ((v42 & 0x80000000) == 0) {
            goto LABEL_53;
          }
          goto LABEL_65;
        }
      }
      else if ((v44 & 0x80000000) == 0)
      {
        goto LABEL_52;
      }
      operator delete(v43);
      if ((v42 & 0x80000000) == 0)
      {
LABEL_53:
        if (v40 < 0) {
          goto LABEL_66;
        }
        goto LABEL_54;
      }
LABEL_65:
      operator delete(v41);
      if (v40 < 0)
      {
LABEL_66:
        operator delete(v39);
        if ((v38 & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_67;
      }
LABEL_54:
      if ((v38 & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_67:
      operator delete(v37[0]);
LABEL_55:
      sub_64A5F0((uint64_t *)(*a2 + 7560 * *(void *)(v14 + 152)), (uint64_t)__dst);
      sub_24AFC((uint64_t)v47, v14, v14);
      sub_7A06C8((uint64_t)v50, (unint64_t *)(v14 + 152), (void *)(v14 + 152));
      sub_7A18C0(v65.i64[0], v65.i64[1], (uint64_t)&v67, 0x2E8BA2E8BA2E8BA3 * ((v65.i64[1] - v65.i64[0]) >> 4));
      sub_79E680((uint64_t)&v65, v65.i64[1] - 176);
      if ((void)v63)
      {
        *((void *)&v63 + 1) = v63;
        operator delete((void *)v63);
      }
      if (v62 < 0)
      {
        operator delete(__p);
        if ((v60 & 0x80000000) == 0)
        {
LABEL_59:
          if ((v58 & 0x80000000) == 0) {
            goto LABEL_60;
          }
          goto LABEL_70;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_59;
      }
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_60:
        if ((v56 & 0x80000000) == 0) {
          goto LABEL_61;
        }
        goto LABEL_71;
      }
LABEL_70:
      operator delete(v57);
      if ((v56 & 0x80000000) == 0)
      {
LABEL_61:
        if (v54 < 0) {
          goto LABEL_72;
        }
        goto LABEL_25;
      }
LABEL_71:
      operator delete(v55);
      if (v54 < 0) {
LABEL_72:
      }
        operator delete(__dst[0]);
LABEL_25:
      uint64_t v14 = v65.i64[0];
      if (v65.i64[0] == v65.i64[1])
      {
        uint64_t v15 = v51[1];
        goto LABEL_75;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_75:
  uint64_t v25 = a2[1];
  unint64_t v26 = 0xBAA6550FFBAA6551 * ((v25 - *a2) >> 3);
  if (v15 != (void *)v26 && v25 != *a2)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    do
    {
      sub_79BBF8(a1, a3, v29++, (uint64_t *)(*a2 + v28));
      v28 += 7560;
    }
    while ((char *)v26 != v29);
  }
  uint64_t v30 = (void **)v48[0];
  if (v48[0])
  {
    do
    {
      uint64_t v35 = (void **)*v30;
      if (*((char *)v30 + 39) < 0) {
        operator delete(v30[2]);
      }
      operator delete(v30);
      uint64_t v30 = v35;
    }
    while (v35);
  }
  double v31 = v47[0];
  v47[0] = 0;
  if (v31) {
    operator delete(v31);
  }
  uint64_t v32 = v51[0];
  if (v51[0])
  {
    do
    {
      uint64_t v33 = (void *)*v32;
      operator delete(v32);
      uint64_t v32 = v33;
    }
    while (v33);
  }
  char v34 = v50[0];
  v50[0] = 0;
  if (v34) {
    operator delete(v34);
  }
  if (v65.i64[0])
  {
    sub_79E680((uint64_t)&v65, v65.i64[0]);
    operator delete((void *)v65.i64[0]);
  }
}