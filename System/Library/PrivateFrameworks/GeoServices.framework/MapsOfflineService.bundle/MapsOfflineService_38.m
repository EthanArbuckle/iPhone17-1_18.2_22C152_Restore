void sub_105B5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_3A4C2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_105B5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  __p = &a23;
  sub_3A6AB0((void ***)&__p);
  sub_3A4C2C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void ***sub_105B65C(void ***a1)
{
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_14:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 25) < 0)
      {
        operator delete(*(v3 - 6));
        v5 = v3 - 18;
        v6 = *(v3 - 18);
        if (v6)
        {
LABEL_10:
          uint64_t v7 = (uint64_t)*(v3 - 17);
          v8 = v6;
          if ((void *)v7 != v6)
          {
            do
              uint64_t v7 = sub_3AFFFC(v7 - 1056);
            while ((void *)v7 != v6);
            v8 = *v5;
          }
          *(v3 - 17) = v6;
          operator delete(v8);
        }
      }
      else
      {
        v5 = v3 - 18;
        v6 = *(v3 - 18);
        if (v6) {
          goto LABEL_10;
        }
      }
      v3 = v5;
      if (v5 == v2)
      {
        v4 = *a1;
        goto LABEL_14;
      }
    }
  }
  return a1;
}

uint64_t sub_105B724(uint64_t a1)
{
  return *(void *)(a1 + 5856);
}

uint64_t sub_105B72C(uint64_t result)
{
  if (!*(unsigned char *)(result + 128))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return result;
}

uint64_t sub_105B788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = a3;
  v9[1] = a2;
  if (sub_45FC44(a3)) {
    return sub_105D0D4(v9);
  }
  uint64_t v5 = sub_5231C(a3);
  BOOL v6 = !*(unsigned char *)v5 && *(_DWORD *)(v5 + 52) == 0;
  if ((v6 || (uint64_t v7 = sub_5231C(a2), *(unsigned char *)v7) || *(_DWORD *)(v7 + 52))
    && (!*(unsigned char *)(sub_5231C(a3) + 1) || *(unsigned char *)(sub_5231C(a2) + 1)))
  {
    return sub_105D0D4(v9);
  }
  else
  {
    return 1;
  }
}

BOOL sub_105B834(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v27 = 0;
  v28 = operator new(0x19uLL);
  long long v29 = xmmword_20B9250;
  strcpy((char *)v28, "DrivingDirectionsUpdate");
  __p = 0;
  v26 = 0;
  uint64_t v5 = sub_374CDC(v4, (uint64_t)&v28, (uint64_t *)&__p);
  BOOL v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v26;
    v8 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      v8 = __p;
    }
    v26 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28);
  }
  v28 = operator new(0x28uLL);
  long long v29 = xmmword_20B9260;
  strcpy((char *)v28, "min_distance_from_route_endpoints");
  double v9 = sub_5C7E8(v5, (uint64_t)&v28) * 100.0;
  if (v9 >= 0.0)
  {
    double v10 = v9;
    if (v9 >= 4.50359963e15) {
      goto LABEL_19;
    }
    uint64_t v11 = (uint64_t)(v9 + v9) + 1;
  }
  else
  {
    double v10 = v9;
    if (v9 <= -4.50359963e15) {
      goto LABEL_19;
    }
    uint64_t v11 = (uint64_t)(v9 + v9);
    if (v11 >= 1) {
      --v11;
    }
  }
  double v10 = (double)(v11 >> 1);
LABEL_19:
  if (v10 >= 9.22337204e18)
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFELL;
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_33:
    operator delete(v28);
    int v14 = *(_DWORD *)(sub_486CB4(*a1) + 152);
    if (v14 == 0x7FFFFFFF) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  if (v9 >= 0.0)
  {
    if (v9 >= 4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v12 = (uint64_t)(v9 + v9) + 1;
  }
  else
  {
    if (v9 <= -4.50359963e15) {
      goto LABEL_30;
    }
    uint64_t v12 = (uint64_t)(v9 + v9);
    if (v12 >= 1) {
      --v12;
    }
  }
  double v9 = (double)(v12 >> 1);
LABEL_30:
  uint64_t v13 = (uint64_t)v9;
  if (SHIBYTE(v29) < 0) {
    goto LABEL_33;
  }
LABEL_31:
  int v14 = *(_DWORD *)(sub_486CB4(*a1) + 152);
  if (v14 == 0x7FFFFFFF) {
    goto LABEL_38;
  }
LABEL_34:
  int v15 = *(_DWORD *)(sub_37B3A8(a1[1]) + 4);
  v28 = operator new(0x28uLL);
  long long v29 = xmmword_20B9240;
  strcpy((char *)v28, "updates_at_leg_origin_allowed_after_s");
  int v16 = sub_319F48(v5, (uint64_t)&v28);
  int v17 = 10 * (v15 - v14);
  int v18 = 10 * v16;
  if (SHIBYTE(v29) < 0)
  {
    operator delete(v28);
    if (v17 > v18) {
      goto LABEL_36;
    }
  }
  else if (v17 > v18)
  {
LABEL_36:
    uint64_t v19 = *(void *)(a2 + 504);
    return v19 < v13;
  }
LABEL_38:
  uint64_t v20 = nullsub_1(*a1);
  if (!*(unsigned char *)(v20 + 128))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  v21 = (void *)sub_491B30(v20);
  uint64_t v22 = *(void *)(a2 + 504);
  uint64_t v19 = (*v21 - v22) & ~((*v21 - v22) >> 63);
  if (v22 < v19) {
    uint64_t v19 = *(void *)(a2 + 504);
  }
  return v19 < v13;
}

void sub_105BB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_105BBA0(uint64_t a1, void *a2, void *a3)
{
  sub_46C77C(a2, &v36);
  sub_46C77C(a3, v33);
  sub_480A40(v36, v37, v38, v39, v33[0], (unint64_t)v33[1], v34, v35, &v29);
  BOOL v6 = v38;
  unint64_t v5 = v39;
  if (v29)
  {
    unint64_t v7 = v30;
    unint64_t v8 = sub_46C760(v29);
    unint64_t v9 = v8;
    if (v6)
    {
      unint64_t v10 = sub_46C760(v6);
      if (v7 >= v9 || v5 >= v10)
      {
        if (v7 < v9 != v5 < v10) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v11 = sub_46C8EC(v29, v30);
        if (v11 != sub_46C8EC(v6, v5)) {
          goto LABEL_23;
        }
      }
    }
    else if (v7 < v8)
    {
      goto LABEL_23;
    }
  }
  else if (v38 && v5 < sub_46C760(v38))
  {
    goto LABEL_23;
  }
  uint64_t v13 = v34;
  unint64_t v12 = v35;
  if (!v31)
  {
    if (v34 && v12 < sub_46C760(v34)) {
      goto LABEL_23;
    }
    return 0x7FFFFFFFLL;
  }
  unint64_t v14 = v32;
  unint64_t v15 = sub_46C760(v31);
  unint64_t v16 = v15;
  if (!v13)
  {
    if (v14 < v15) {
      goto LABEL_23;
    }
    return 0x7FFFFFFFLL;
  }
  unint64_t v17 = sub_46C760(v13);
  if (v14 >= v16 || v12 >= v17)
  {
    if (v14 < v16 != v12 < v17) {
      goto LABEL_23;
    }
    return 0x7FFFFFFFLL;
  }
  uint64_t v18 = sub_46C8EC(v31, v32);
  if (v18 == sub_46C8EC(v13, v12)) {
    return 0x7FFFFFFFLL;
  }
LABEL_23:
  if (v30 == v37) {
    return 0;
  }
  uint64_t v20 = (int32x4_t *)a2[66];
  unint64_t v21 = 4 * v30 - 4 * v37 - 4;
  if (v21 < 0x1C)
  {
    LODWORD(result) = 0;
    uint64_t v22 = (__int32 *)a2[66];
    do
    {
LABEL_30:
      int v28 = *v22++;
      uint64_t result = (v28 + result);
    }
    while (v22 != (__int32 *)((char *)v20 + 4 * (v30 - v37)));
    return result;
  }
  uint64_t v23 = (v21 >> 2) + 1;
  uint64_t v22 = &v20->i32[v23 & 0x7FFFFFFFFFFFFFF8];
  v24 = v20 + 1;
  int32x4_t v25 = 0uLL;
  uint64_t v26 = v23 & 0x7FFFFFFFFFFFFFF8;
  int32x4_t v27 = 0uLL;
  do
  {
    int32x4_t v25 = vaddq_s32(v24[-1], v25);
    int32x4_t v27 = vaddq_s32(*v24, v27);
    v24 += 2;
    v26 -= 8;
  }
  while (v26);
  uint64_t result = vaddvq_s32(vaddq_s32(v27, v25));
  if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
  return result;
}

BOOL sub_105BE14(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v12 = 0;
  uint64_t v13 = operator new(0x19uLL);
  long long v14 = xmmword_20B9250;
  strcpy((char *)v13, "DrivingDirectionsUpdate");
  __p = 0;
  uint64_t v11 = 0;
  uint64_t v4 = sub_374CDC(v3, (uint64_t)&v13, (uint64_t *)&__p);
  unint64_t v5 = (void **)__p;
  if (__p)
  {
    BOOL v6 = v11;
    unint64_t v7 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = __p;
    }
    uint64_t v11 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  uint64_t v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B91C0;
  strcpy((char *)v13, "min_time_to_divergence_s");
  int v8 = sub_5D2EC(v4, &v13);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  return v8 > a2;
}

void sub_105BF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_105BF74(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = nullsub_1(a2);
  if (!*(unsigned char *)(v6 + 128)) {
    return 0;
  }
  uint64_t v7 = v6;
  if (sub_45FB38(a1)) {
    return 0;
  }
  if (!*(unsigned char *)(v7 + 128))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_491B44(v7, v30);
  if (v30[0] == v30[1]) {
    return 0;
  }
  *(_OWORD *)int32x4_t v27 = 0u;
  *(_OWORD *)int v28 = 0u;
  int v29 = 1065353216;
  int v8 = *(long long **)(v30[0] + 80);
  unint64_t v9 = *(long long **)(v30[0] + 88);
  while (v8 != v9)
  {
    if (*((void *)v8 + 4) != *((void *)v8 + 5))
    {
      if (*((char *)v8 + 23) < 0)
      {
        sub_4200(__p, *(void **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        uint64_t v32 = *((void *)v8 + 2);
        *(_OWORD *)__p = v10;
      }
      sub_3D82AC((uint64_t)v27, (uint64_t)__p, (uint64_t)__p);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
    }
    v8 += 5;
  }
  uint64_t v13 = sub_486CB4(a2);
  long long v14 = *(long long **)(v13 + 72);
  unint64_t v15 = *(long long **)(v13 + 80);
  while (v14 != v15)
  {
    if (*((char *)v14 + 23) < 0)
    {
      sub_4200(__p, *(void **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v16 = *v14;
      uint64_t v32 = *((void *)v14 + 2);
      *(_OWORD *)__p = v16;
    }
    sub_3D82AC((uint64_t)v27, (uint64_t)__p, (uint64_t)__p);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p[0]);
    }
    v14 += 5;
  }
  if (!v28[1])
  {
    BOOL v11 = 0;
    uint64_t v23 = (void **)v28[0];
    if (!v28[0]) {
      goto LABEL_36;
    }
    do
    {
LABEL_39:
      int32x4_t v25 = (void **)*v23;
      if (*((char *)v23 + 39) < 0) {
        operator delete(v23[2]);
      }
      operator delete(v23);
      uint64_t v23 = v25;
    }
    while (v25);
    goto LABEL_36;
  }
  sub_108C92C(a3, a1, (int64x2_t *)__p);
  unint64_t v17 = __p[0];
  uint64_t v18 = __p[1];
  if (__p[0] == __p[1])
  {
    BOOL v11 = 0;
  }
  else
  {
    do
    {
      uint64_t v19 = (void *)*v17;
      uint64_t v20 = v17[1];
      v17 += 20;
      unint64_t v21 = sub_13A8C(v27, *v19 + 424 * v20 + 40);
      BOOL v11 = v21 != 0;
      if (v21) {
        BOOL v22 = 1;
      }
      else {
        BOOL v22 = v17 == v18;
      }
    }
    while (!v22);
  }
  v33 = __p;
  sub_3A6AB0(&v33);
  uint64_t v23 = (void **)v28[0];
  if (v28[0]) {
    goto LABEL_39;
  }
LABEL_36:
  v24 = v27[0];
  v27[0] = 0;
  if (v24) {
    operator delete(v24);
  }
  return v11;
}

void sub_105C1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_105C1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_3A4C2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_105C224(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *((void *)&v32 + 1) = 0;
  *(void *)v33 = operator new(0x19uLL);
  *(_OWORD *)&v33[8] = xmmword_20B9250;
  strcpy(*(char **)v33, "DrivingDirectionsUpdate");
  __p = 0;
  *(void *)&long long v32 = 0;
  uint64_t v6 = sub_374CDC(v5, (uint64_t)v33, (uint64_t *)&__p);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    int v8 = (void **)v32;
    unint64_t v9 = __p;
    if ((void *)v32 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    *(void *)&long long v32 = v7;
    operator delete(v9);
  }
  if ((v33[23] & 0x80000000) != 0) {
    operator delete(*(void **)v33);
  }
  *(void *)v33 = operator new(0x28uLL);
  *(_OWORD *)&v33[8] = xmmword_20B9260;
  strcpy(*(char **)v33, "max_time_to_divergence_by_savings");
  long long v10 = (uint64_t *)sub_5C4AC(v6, (uint64_t)v33);
  int v28 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  sub_54DE8(&v28, *v10, v10[1], (v10[1] - *v10) >> 4);
  if ((v33[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v33);
    BOOL v11 = v28;
    uint64_t v12 = v29;
    uint64_t v26 = 0;
    int32x4_t v27 = 0;
    int32x4_t v25 = 0;
    int64_t v13 = v29 - (unsigned char *)v28;
    if (v29 != v28) {
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v11 = v28;
    uint64_t v12 = v29;
    uint64_t v26 = 0;
    int32x4_t v27 = 0;
    int32x4_t v25 = 0;
    int64_t v13 = v29 - (unsigned char *)v28;
    if (v29 != v28)
    {
LABEL_13:
      if (v13 < 0) {
        sub_2E00();
      }
      long long v14 = (__n128 *)operator new(v13);
      int32x4_t v25 = v14;
      uint64_t v26 = v14;
      int32x4_t v27 = &v14[v13 >> 4];
      while (1)
      {
        if (v11[2] != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        unint64_t v15 = *(void **)v11;
        v33[23] = 10;
        strcpy(v33, "min_saving");
        double v16 = sub_5C7E8(v15, (uint64_t)v33);
        __p = operator new(0x20uLL);
        long long v32 = xmmword_20B91C0;
        strcpy((char *)__p, "max_time_to_divergence_s");
        unsigned int v17 = sub_5D2EC(v15, &__p);
        if (SHIBYTE(v32) < 0)
        {
          operator delete(__p);
          if ((v33[23] & 0x80000000) != 0) {
LABEL_21:
          }
            operator delete(*(void **)v33);
        }
        else if ((v33[23] & 0x80000000) != 0)
        {
          goto LABEL_21;
        }
        *(double *)v33 = v16;
        *(void *)&v33[8] = v17;
        long long v14 = sub_1049B20((__n128 **)&v25, (uint64_t)v14, (__n128 *)v33) + 1;
        v11 += 4;
        if (v11 == v12)
        {
          uint64_t v18 = v25;
          unint64_t v19 = (unint64_t)v26;
          goto LABEL_24;
        }
      }
    }
  }
  unint64_t v19 = 0;
  uint64_t v18 = 0;
LABEL_24:
  unint64_t v20 = 126 - 2 * __clz((uint64_t)(v19 - (void)v18) >> 4);
  if ((void *)v19 == v18) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v20;
  }
  sub_EFF9D8((uint64_t)v18, v19, (uint64_t)v33, v21, 1);
  *(double *)v33 = (double)a3 / 10.0;
  int v22 = sub_EFB0C8((double *)v33, (double **)&v25);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v28)
  {
    sub_5B788((uint64_t *)&v28);
    operator delete(v28);
  }
  return v22 < a2;
}

void sub_105C594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  sub_62CF0(&a14);
  _Unwind_Resume(a1);
}

unsigned int *sub_105C658(unsigned int *result, unsigned int *a2, unint64_t a3)
{
  if (result != a2)
  {
    while (((4 * result[1]) | ((unint64_t)*result << 32) | ((unint64_t)result[1] >> 31) | ((unint64_t)result[1] >> 29) & 2) != ((a3 >> 30) & 0xFFFFFFFC | (a3 << 32) | (a3 >> 63) | (a3 >> 61) & 2))
    {
      result += 14;
      if (result == a2) {
        return a2;
      }
    }
  }
  return result;
}

double sub_105C6B4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_1091FB4((uint64_t)&v31, *(void **)(a1 + 8));
  sub_1092944(v6, a3);
  sub_109374C(&v31, (char *)a2, 0, (uint64_t *)&v29);
  uint64_t v7 = v29;
  if (v29 == v30)
  {
    double v8 = 1.0;
    if (!v29) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  double v8 = 1.0;
  if (*((void *)v29 + 42) && *((void *)v29 + 19))
  {
    sub_39ECCC((uint64_t)v24, v29);
    sub_39ECCC((uint64_t)v19, (long long *)((char *)v7 + 72));
    *(void *)(a2 + 128) = sub_105CDCC(a2, v24, v19, *(void **)(a1 + 8));
    if (__p)
    {
      uint64_t v23 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    if (v27)
    {
      int v28 = v27;
      operator delete(v27);
    }
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    uint64_t v9 = a1 + 24;
    double v10 = sub_108C438(v9, a3, 4, *((void *)v7 + 41), *((void *)v7 + 43));
    double v11 = sub_108C438(v9, (void *)a2, 4, *((void *)v7 + 18), *((void *)v7 + 20));
    if (v10 == 0.0)
    {
      if (v11 == 0.0) {
        double v8 = 1.0;
      }
      else {
        double v8 = v11;
      }
    }
    else
    {
      double v8 = v11 / v10;
    }
  }
  uint64_t v7 = v29;
  if (v29)
  {
LABEL_20:
    uint64_t v12 = v30;
    int64_t v13 = v7;
    if (v30 != v7)
    {
      do
        uint64_t v12 = (long long *)sub_1044584((void *)v12 - 46);
      while (v12 != v7);
      int64_t v13 = v29;
    }
    uint64_t v30 = v7;
    operator delete(v13);
  }
LABEL_24:
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  long long v14 = v32;
  if (v32)
  {
    unint64_t v15 = v33;
    double v16 = v32;
    if (v33 != v32)
    {
      do
      {
        unsigned int v17 = (void *)*((void *)v15 - 1);
        if (v17) {
          free(v17);
        }
        v15 -= 80;
      }
      while (v15 != v14);
      double v16 = v32;
    }
    v33 = v14;
    operator delete(v16);
  }
  return v8;
}

void sub_105C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  sub_10444EC(&a27);
  sub_C68678((void *)(v27 - 120));
  _Unwind_Resume(a1);
}

void sub_105C8E8(_Unwind_Exception *a1)
{
  sub_C68678((void *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_105C8FC(_Unwind_Exception *a1)
{
  sub_C68678((void *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_105C910(uint64_t *a1, int a2, double a3)
{
  uint64_t v4 = 0x7FFFFFFFLL;
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    v43 = 0;
    v44 = 0;
    v42 = 0;
    uint64_t v8 = v7 - v6;
    if (v7 != v6)
    {
      if (v8 < 0) {
        sub_2E00();
      }
      uint64_t v9 = (char *)operator new(v7 - v6);
      v42 = v9;
      v43 = v9;
      v44 = &v9[16 * (v8 >> 4)];
      if (a2 < 0) {
        char v10 = -5;
      }
      else {
        char v10 = 5;
      }
      int v11 = 103 * (char)(v10 + a2 % 10);
      double v12 = (double)(int)(a2 / 10 + ((v11 >> 15) & 1) + (v11 >> 10));
      while (1)
      {
        if (*(_DWORD *)(v6 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        int64_t v13 = *(void **)v6;
        char v47 = 10;
        strcpy((char *)__p, "min_saving");
        double v14 = sub_5C7E8(v13, (uint64_t)__p);
        HIBYTE(v45[2]) = 19;
        strcpy((char *)v45, "relative_thresholds");
        double v15 = sub_5C7E8(v13, (uint64_t)v45);
        if (SHIBYTE(v45[2]) < 0)
        {
          operator delete(v45[0]);
          if (v47 < 0) {
LABEL_18:
          }
            operator delete(__p[0]);
        }
        else if (v47 < 0)
        {
          goto LABEL_18;
        }
        char v47 = 5;
        strcpy((char *)__p, "value");
        double v16 = sub_5C7E8(v13, (uint64_t)__p);
        if (v47 < 0) {
          operator delete(__p[0]);
        }
        double v17 = v15 * v12;
        if (v14 >= v15 * v12) {
          double v17 = v14;
        }
        __p[0] = *(void **)&v16;
        __p[1] = *(void **)&v17;
        uint64_t v9 = sub_105DC18(&v42, (long long *)v9, (uint64_t)__p) + 16;
        v6 += 16;
        if (v6 == v7)
        {
          uint64_t v18 = v42;
          unint64_t v19 = (double *)v43;
          goto LABEL_20;
        }
      }
    }
    unint64_t v19 = 0;
    uint64_t v18 = 0;
LABEL_20:
    unint64_t v20 = 126 - 2 * __clz(((char *)v19 - v18) >> 4);
    if (v19 == (double *)v18) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v20;
    }
    sub_EFE7E8((uint64_t)v18, v19, (uint64_t)__p, v21, 1);
    if (v42 == v43)
    {
      uint64_t v4 = 0x7FFFFFFFLL;
      if (!v42) {
        return v4;
      }
      goto LABEL_56;
    }
    int v22 = v42;
    if (v43 - v42 >= 16)
    {
      uint64_t v23 = (double *)v42;
      if (v43 - v42 != 16)
      {
        unint64_t v24 = (unint64_t)(v43 - v42) >> 4;
        uint64_t v23 = (double *)v42;
        do
        {
          unint64_t v25 = (4 * v24) & 0xFFFFFFFFFFFFFFF0;
          _X13 = (char *)v23 + v25;
          __asm { PRFM            #0, [X13] }
          long long v32 = &v23[2 * (v24 >> 1)];
          _X12 = (char *)v32 + v25;
          __asm { PRFM            #0, [X12] }
          if (*v32 >= a3) {
            unint64_t v35 = 0;
          }
          else {
            unint64_t v35 = v24 >> 1;
          }
          v23 += 2 * v35;
          v24 -= v24 >> 1;
        }
        while ((uint64_t)v24 > 1);
      }
      int v22 = (char *)&v23[2 * (*v23 < a3)];
    }
    if (v22 == v43)
    {
      double v36 = *((double *)v43 - 1) * 10.0;
      if (v36 < 0.0) {
        goto LABEL_35;
      }
      goto LABEL_42;
    }
    if (v22 != v42)
    {
      double v36 = (*((double *)v22 - 1)
           + (a3 - *((double *)v22 - 2))
           / (*(double *)v22 - *((double *)v22 - 2))
           * (*((double *)v22 + 1) - *((double *)v22 - 1)))
          * 10.0;
      if (v36 < 0.0)
      {
LABEL_35:
        if (v36 <= -4.50359963e15) {
          goto LABEL_45;
        }
        uint64_t v37 = (uint64_t)(v36 + v36);
        if (v37 >= 1) {
          --v37;
        }
        goto LABEL_44;
      }
LABEL_42:
      if (v36 >= 4.50359963e15) {
        goto LABEL_45;
      }
      uint64_t v37 = (uint64_t)(v36 + v36) + 1;
LABEL_44:
      double v36 = (double)(v37 >> 1);
LABEL_45:
      uint64_t v4 = (int)v36;
      if (!v42) {
        return v4;
      }
      goto LABEL_56;
    }
    double v38 = *((double *)v42 + 1) * 10.0;
    if (v38 >= 0.0)
    {
      if (v38 < 4.50359963e15)
      {
        uint64_t v39 = (uint64_t)(v38 + v38) + 1;
LABEL_54:
        double v38 = (double)(v39 >> 1);
      }
    }
    else if (v38 > -4.50359963e15)
    {
      uint64_t v39 = (uint64_t)(v38 + v38);
      if (v39 >= 1) {
        --v39;
      }
      goto LABEL_54;
    }
    uint64_t v4 = (int)v38;
LABEL_56:
    v43 = v42;
    operator delete(v42);
  }
  return v4;
}

void sub_105CD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_105CDCC(uint64_t a1, void **a2, void **a3, void *a4)
{
  if (sub_3AA3AC((uint64_t)a2, (uint64_t)a3)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_45F6BC(a1, a2, 1, (uint64_t)&v48);
  sub_45F6BC(a1, a3, 0, (uint64_t)&v43);
  uint64_t v9 = sub_376B90(a4);
  uint64_t v10 = sub_3766F8(a4);
  sub_460E84((uint64_t)&v33, &v48);
  sub_460E84((uint64_t)&v38, &v43);
  sub_460E84((uint64_t)&v27, &v33);
  sub_460E84((uint64_t)v22, &v38);
  double v11 = -1.0;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  double v12 = v31;
  int64_t v13 = v32;
  while (v12 == v13 || v25 == v26)
  {
    if ((v12 == v13) == (v25 == v26)) {
      goto LABEL_22;
    }
    double v14 = v27;
LABEL_14:
    double v16 = sub_3AC684(v10, *v14);
    if (v16 > v11)
    {
      uint64_t v8 = sub_3242C0(v9, *v14);
      if (!v14[1])
      {
        uint64_t v17 = v14[2];
        if (v17 == sub_105D198(v9, *v14)) {
          double v11 = v16;
        }
      }
    }
    unint64_t v18 = v28;
    unint64_t v19 = v27 + 7;
    double v12 = v31;
    int64_t v13 = v32;
    unint64_t v20 = ((v32 - (unsigned char *)v31) >> 3) - 1;
    v27 += 7;
    if (v28 < v20)
    {
      do
      {
        if (v19 != *((uint64_t **)v31 + v18)) {
          break;
        }
        unint64_t v28 = v18 + 1;
        unint64_t v19 = (uint64_t *)*((void *)v29 + v18 + 1);
        uint64_t v27 = v19;
        ++v18;
      }
      while (v20 != v28);
    }
  }
  double v14 = v27;
  if (v28 != v22[1] || v27 != (uint64_t *)v22[0]) {
    goto LABEL_14;
  }
LABEL_22:
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (__p)
  {
    unint64_t v24 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    long long v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  if (v46)
  {
    char v47 = v46;
    operator delete(v46);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  return v8;
}

void sub_105D064(_Unwind_Exception *a1)
{
  sub_2FC938((void *)(v1 - 192));
  sub_2FC938((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_105D084(_Unwind_Exception *a1)
{
  sub_2FC938((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_105D09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_2FC938(&a9);
  sub_2FC938(&a17);
  sub_2FC97C(&a25);
  sub_2FC938((void *)(v25 - 192));
  sub_2FC938((void *)(v25 - 128));
  _Unwind_Resume(a1);
}

BOOL sub_105D0D4(uint64_t *a1)
{
  if (*(unsigned char *)(sub_5231C(*a1) + 2) && !*(unsigned char *)(sub_5231C(a1[1]) + 2)
    || *(_DWORD *)(sub_5231C(*a1) + 40) && !*(_DWORD *)(sub_5231C(a1[1]) + 40)
    || *(_DWORD *)(sub_5231C(*a1) + 56) && !*(_DWORD *)(sub_5231C(a1[1]) + 56))
  {
    return 1;
  }
  if (*(_DWORD *)(sub_5231C(*a1) + 60)) {
    return *(_DWORD *)(sub_5231C(a1[1]) + 60) == 0;
  }
  return 0;
}

char *sub_105D198(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return (unsigned char *)(&def_332C + 1);
  }
  int v2 = HIDWORD(a2);
  uint64_t result = sub_2E5E08(a1 + 16, a2, 1);
  if (result)
  {
    uint64_t v5 = &result[-*(int *)result];
    if (*(unsigned __int16 *)v5 >= 5u)
    {
      if (!*((_WORD *)v5 + 2)) {
        return 0;
      }
      uint64_t v6 = (unsigned int *)&result[*((unsigned __int16 *)v5 + 2)
                                 + *(unsigned int *)&result[*((unsigned __int16 *)v5 + 2)]];
      if (*v6 <= (v2 & 0x3FFFFFFFu)) {
        return 0;
      }
      uint64_t v7 = (int *)((char *)v6 + 4 * v2 + *(unsigned int *)((char *)v6 + (4 * v2) + 4) + 4);
      uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
      unsigned int v9 = *v8;
      if (v9 >= 0xB)
      {
        if (!v8[5] || (int v10 = *(unsigned __int8 *)(a1 + 3889), v10 == 254))
        {
LABEL_17:
          uint64_t v15 = v8[2];
          if (v15) {
            return (char *)*(unsigned int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15));
          }
          return 0;
        }
        double v11 = (int *)((char *)v7 + v8[5] + *(unsigned int *)((char *)v7 + v8[5]));
        unsigned int v14 = *v11;
        double v12 = (unsigned __int8 *)(v11 + 1);
        uint64_t v13 = v14;
        if (!v14) {
          return 0;
        }
        while (v10 != *v12)
        {
          uint64_t result = 0;
          ++v12;
          if (!--v13) {
            return result;
          }
        }
      }
      if (v9 >= 5) {
        goto LABEL_17;
      }
      return 0;
    }
    return 0;
  }
  return result;
}

uint64_t sub_105D2CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_3B168C(a1, *(void *)a2, *(void *)(a2 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 85) = *(void *)(a2 + 85);
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t v7 = (unsigned char *)(a1 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200(v7, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(void *)(a1 + 120) = 0x7FFFFFFF00000000;
  *(void *)(a1 + 128) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 136) = 0x7FFFFFFF;
  return a1;
}

void sub_105D394(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A9E18((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_105D3B0(void *a1, char *__src, void *a3)
{
  long long v4 = __src;
  long long v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    double v11 = (char *)*a1;
    unint64_t v12 = 0xCFDCFDCFDCFDCFDDLL * ((uint64_t)&v6[-*a1] >> 3) + 1;
    if (v12 > 0x46046046046046) {
      sub_2E00();
    }
    unint64_t v13 = 0xCFDCFDCFDCFDCFDDLL * ((uint64_t)(v7 - (void)v11) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x23023023023023) {
      unint64_t v14 = 0x46046046046046;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v30 = a1 + 2;
    if (v14)
    {
      if (v14 > 0x46046046046046) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(936 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v26 = v15;
    uint64_t v27 = &v15[8 * ((v4 - v11) >> 3)];
    __dst = v27;
    int v29 = &v15[936 * v14];
    sub_105D6A4((uint64_t)&v26, a3);
    double v16 = v27;
    uint64_t v17 = (char *)*a1;
    unint64_t v18 = v27;
    if ((char *)*a1 != v4)
    {
      unint64_t v19 = v4;
      unint64_t v18 = v27;
      do
      {
        v19 -= 936;
        v18 -= 936;
        memcpy(v18, v19, 0x3A3uLL);
      }
      while (v19 != v17);
    }
    uint64_t v27 = v18;
    unint64_t v20 = (char *)a1[1];
    uint64_t v21 = (char *)__dst;
    int64_t v22 = v20 - v4;
    if (v20 != v4)
    {
      memmove(__dst, v4, v22 - 5);
      unint64_t v18 = v27;
      long long v4 = (char *)a1[1];
    }
    uint64_t v23 = (char *)*a1;
    *a1 = v18;
    a1[1] = &v21[v22];
    unint64_t v24 = (char *)a1[2];
    a1[2] = v29;
    __dst = v4;
    int v29 = v24;
    uint64_t v26 = v23;
    uint64_t v27 = v23;
    if (v4 != v23) {
      __dst = &v23[(v4 - v23 - 936) % 0x3A8uLL];
    }
    if (v23) {
      operator delete(v23);
    }
    return v16;
  }
  else if (__src == v6)
  {
    memcpy(__src, a3, 0x3A8uLL);
    a1[1] = v4 + 936;
  }
  else
  {
    long long v8 = __src + 936;
    unsigned int v9 = v6 - 936;
    int v10 = (char *)a1[1];
    if ((unint64_t)v6 >= 0x3A8)
    {
      do
      {
        memcpy(v10, v9, 0x3A8uLL);
        v9 += 936;
        v10 += 936;
      }
      while (v9 < v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v4 + 936, v4, v6 - v8 - 5);
    }
    memcpy(v4, a3, 0x3A3uLL);
  }
  return v4;
}

void sub_105D640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    unint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void *sub_105D6A4(uint64_t a1, void *__src)
{
  long long v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    long long v6 = *(unsigned char **)a1;
    long long v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x9FB9FB9FB9FB9FBALL * ((v4 - v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x46046046046047) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 936 * v15;
      unint64_t v18 = (char *)operator new(936 * v15);
      unint64_t v19 = &v18[936 * v16];
      unint64_t v20 = &v18[v17];
      int64_t v22 = v4 - v5;
      BOOL v21 = v4 == v5;
      long long v4 = v19;
      if (!v21)
      {
        uint64_t v23 = v22 / 936;
        long long v4 = &v19[936 * v23];
        uint64_t v24 = 936 * v23;
        uint64_t v25 = v19;
        do
        {
          memcpy(v25, v5, 0x3A8uLL);
          v25 += 936;
          v5 += 936;
          v24 -= 936;
        }
        while (v24);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = v20;
      if (v6)
      {
        operator delete(v6);
        long long v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xCFDCFDCFDCFDCFDDLL * ((uint64_t)&v5[-*(void *)a1] >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -936 * v9;
      unint64_t v12 = &v5[v11];
      int64_t v13 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[v11], *(const void **)(a1 + 8), v13 - 5);
        long long v4 = *(char **)(a1 + 8);
      }
      unint64_t v14 = &v4[936 * v10];
      long long v4 = &v12[v13];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v12[v13];
    }
  }
  uint64_t result = memcpy(v4, __src, 0x3A8uLL);
  *(void *)(a1 + 16) += 936;
  return result;
}

char *sub_105D854(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    int64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[144 * v3];
  uint64_t v27 = &v7[144 * v6];
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  sub_3B168C(v8, *(void *)a2, *(void *)(a2 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = (unsigned char *)(v8 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 96);
    *(void *)(v8 + 112) = *(void *)(a2 + 112);
  }
  uint64_t v10 = &v7[144 * v3];
  *(_OWORD *)(v10 + 120) = *(_OWORD *)(a2 + 120);
  *((_DWORD *)v10 + 34) = *(_DWORD *)(a2 + 136);
  uint64_t v26 = v10;
  uint64_t v11 = v10 + 144;
  unint64_t v12 = (void **)*a1;
  int64_t v13 = (void **)a1[1];
  if (v13 == (void **)*a1)
  {
    *a1 = v8;
    a1[1] = (uint64_t)v11;
    a1[2] = (uint64_t)v27;
    goto LABEL_29;
  }
  do
  {
    *((void *)v10 - 18) = 0;
    *((void *)v10 - 17) = 0;
    v10 -= 144;
    *((void *)v10 + 2) = 0;
    long long v14 = *((_OWORD *)v13 - 9);
    v13 -= 18;
    *(_OWORD *)uint64_t v10 = v14;
    *((void *)v10 + 2) = v13[2];
    v13[1] = 0;
    v13[2] = 0;
    *int64_t v13 = 0;
    long long v15 = *(_OWORD *)(v13 + 7);
    long long v16 = *(_OWORD *)(v13 + 9);
    uint64_t v17 = *(uint64_t *)((char *)v13 + 85);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v13 + 5);
    *(void *)(v10 + 85) = v17;
    *(_OWORD *)(v10 + 72) = v16;
    *(_OWORD *)(v10 + 56) = v15;
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v13 + 3);
    long long v18 = *((_OWORD *)v13 + 6);
    *((void *)v10 + 14) = v13[14];
    *((_OWORD *)v10 + 6) = v18;
    v13[13] = 0;
    v13[14] = 0;
    v13[12] = 0;
    long long v19 = *(_OWORD *)(v13 + 15);
    *((_DWORD *)v10 + 34) = *((_DWORD *)v13 + 34);
    *(_OWORD *)(v10 + 120) = v19;
  }
  while (v13 != v12);
  unint64_t v20 = (void **)*a1;
  int64_t v13 = (void **)a1[1];
  *a1 = (uint64_t)v10;
  a1[1] = (uint64_t)v11;
  a1[2] = (uint64_t)v27;
  if (v13 == v20) {
    goto LABEL_29;
  }
  do
  {
    if (*((char *)v13 - 25) < 0)
    {
      operator delete(*(v13 - 6));
      BOOL v21 = v13 - 18;
      int64_t v22 = *(v13 - 18);
      if (!v22) {
        goto LABEL_20;
      }
    }
    else
    {
      BOOL v21 = v13 - 18;
      int64_t v22 = *(v13 - 18);
      if (!v22) {
        goto LABEL_20;
      }
    }
    uint64_t v23 = (uint64_t)*(v13 - 17);
    uint64_t v24 = v22;
    if ((void *)v23 != v22)
    {
      do
        uint64_t v23 = sub_3AFFFC(v23 - 1056);
      while ((void *)v23 != v22);
      uint64_t v24 = *v21;
    }
    *(v13 - 17) = v22;
    operator delete(v24);
LABEL_20:
    int64_t v13 = v21;
  }
  while (v21 != v20);
  int64_t v13 = v20;
LABEL_29:
  if (v13) {
    operator delete(v13);
  }
  return v26 + 144;
}

void sub_105DB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    sub_105DB64((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_105DB64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_105DB64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 144);
    *(void *)(a1 + 16) = i - 144;
    if (*(char *)(i - 25) < 0)
    {
      operator delete(*(void **)(i - 48));
      long long v5 = *v4;
      if (!*v4) {
        continue;
      }
    }
    else
    {
      long long v5 = *v4;
      if (!*v4) {
        continue;
      }
    }
    uint64_t v6 = *(void *)(i - 136);
    int64_t v7 = v5;
    if ((void *)v6 != v5)
    {
      do
        uint64_t v6 = sub_3AFFFC(v6 - 1056);
      while ((void *)v6 != v5);
      int64_t v7 = *v4;
    }
    *(void *)(i - 136) = v5;
    operator delete(v7);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_105DC18(char **a1, long long *a2, uint64_t a3)
{
  long long v5 = (long long *)*a1;
  unint64_t v4 = (unint64_t)a1[1];
  uint64_t v6 = (char *)a2 - *a1;
  uint64_t v7 = v6 >> 4;
  uint64_t v8 = (long long *)&(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v4 < v9)
  {
    if (v8 == (long long *)v4)
    {
      long long *v8 = *(_OWORD *)a3;
      a1[1] = (char *)(v8 + 1);
    }
    else
    {
      uint64_t v10 = v8 + 1;
      unint64_t v11 = v4 - 16;
      unint64_t v12 = a1[1];
      if (v4 >= 0x10)
      {
        int64_t v13 = (long long *)(v4 - 16);
        unint64_t v12 = a1[1];
        do
        {
          long long v14 = *v13++;
          *(_OWORD *)unint64_t v12 = v14;
          v12 += 16;
        }
        while ((unint64_t)v13 < v4);
      }
      a1[1] = v12;
      if ((_OWORD *)v4 != v10)
      {
        unint64_t v15 = v4 - (void)v10;
        unint64_t v16 = v4 - (void)v10 - 16;
        if (v16 < 0xD0
          || v4 - (v15 & 0xFFFFFFFFFFFFFFF0) < v11
          && (unint64_t)v5 + v15 + (v6 & 0xFFFFFFFFFFFFFFF0) - (v15 & 0xFFFFFFFFFFFFFFF0) < v4)
        {
          goto LABEL_13;
        }
        uint64_t v17 = (v16 >> 4) + 1;
        uint64_t v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
        unint64_t v19 = v4 - v18;
        unint64_t v20 = v11 - v18;
        BOOL v21 = (const double *)(v4 - 48);
        int64_t v22 = (double *)(v4 - 32);
        uint64_t v23 = v17 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          float64x2x2_t v48 = vld2q_f64(v21);
          uint64_t v24 = v21 - 4;
          float64x2x2_t v49 = vld2q_f64(v24);
          vst2q_f64(v22, v48);
          uint64_t v25 = v22 - 4;
          vst2q_f64(v25, v49);
          v22 -= 8;
          v21 -= 8;
          v23 -= 4;
        }
        while (v23);
        unint64_t v4 = v19;
        unint64_t v11 = v20;
        if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          uint64_t v26 = (void *)(v4 - 8);
          do
          {
            uint64_t v27 = *(void *)(v11 - 16);
            v11 -= 16;
            *(v26 - 1) = v27;
            *uint64_t v26 = *(void *)(v11 + 8);
            v26 -= 2;
          }
          while ((long long *)v11 != v8);
        }
      }
      *(void *)uint64_t v8 = *(void *)a3;
      *((void *)&v5[v7] + 1) = *(void *)(a3 + 8);
    }
    return (char *)v8;
  }
  unint64_t v28 = ((uint64_t)(v4 - (void)v5) >> 4) + 1;
  if (v28 >> 60) {
    sub_2E00();
  }
  uint64_t v30 = v9 - (void)v5;
  if (v30 >> 3 > v28) {
    unint64_t v28 = v30 >> 3;
  }
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v31 = v28;
  }
  if (v31)
  {
    if (v31 >> 60) {
      sub_188D718();
    }
    uint64_t v32 = a3;
    long long v33 = (char *)operator new(16 * v31);
    a3 = v32;
    v34 = &v33[16 * v7];
    unint64_t v35 = &v33[16 * v31];
    if (v7 != v31) {
      goto LABEL_32;
    }
  }
  else
  {
    long long v33 = 0;
    v34 = (char *)(16 * v7);
    unint64_t v35 = 0;
    if (v7) {
      goto LABEL_32;
    }
  }
  if (v6 < 1)
  {
    if (v5 == a2) {
      unint64_t v45 = 1;
    }
    else {
      unint64_t v45 = v6 >> 3;
    }
    if (v45 >> 60) {
      sub_188D718();
    }
    v46 = (_OWORD *)a3;
    char v47 = (char *)operator new(16 * v45);
    v34 = &v47[16 * (v45 >> 2)];
    unint64_t v35 = &v47[16 * v45];
    if (v33)
    {
      operator delete(v33);
      long long v5 = (long long *)*a1;
    }
    *(_OWORD *)v34 = *v46;
    uint64_t v37 = v34 + 16;
    long long v38 = v34;
    if (v5 == v8) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  unint64_t v36 = v7 + 2;
  if (v7 >= -1) {
    unint64_t v36 = v7 + 1;
  }
  v34 -= 16 * (v36 >> 1);
LABEL_32:
  *(_OWORD *)v34 = *(_OWORD *)a3;
  uint64_t v37 = v34 + 16;
  long long v38 = v34;
  if (v5 != v8)
  {
LABEL_33:
    uint64_t v39 = v8;
    v40 = v34;
    do
    {
      long long v38 = v40 - 16;
      *((_OWORD *)v40 - 1) = *--v39;
      v40 -= 16;
    }
    while (v39 != v5);
  }
LABEL_35:
  for (uint64_t i = (long long *)a1[1]; v8 != i; v37 += 16)
  {
    long long v42 = *v8++;
    *(_OWORD *)uint64_t v37 = v42;
  }
  long long v43 = *a1;
  *a1 = v38;
  a1[1] = v37;
  a1[2] = v35;
  if (v43) {
    operator delete(v43);
  }
  return v34;
}

void sub_105DF18(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_105DF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    int64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          long long v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            long long v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          long long v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      int v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  int v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *int v29 = v42[0];
LABEL_92:
  long long v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_105E378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_105E38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_105E3A4(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          int64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        int64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_105E5D4()
{
  unk_25FD97F = 16641;
  word_25FD968 = 65;
  byte_25FD997 = 1;
  byte_25FD981 = 0;
}

uint64_t sub_105E5FC(uint64_t a1, void *a2, uint64_t a3)
{
  HIBYTE(v13) = 7;
  strcpy((char *)&__p, "enabled");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v6;
  __p = operator new(0x38uLL);
  long long v13 = xmmword_20B9A10;
  strcpy((char *)__p, "enable_if_candidates_drop_below_low_soc_threshold");
  BOOL v7 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v7;
  __p = operator new(0x38uLL);
  long long v13 = xmmword_20B8DF0;
  strcpy((char *)__p, "enable_if_candidates_drop_below_critical_soc_threshold");
  BOOL v8 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 2) = v8;
  __p = operator new(0x38uLL);
  long long v13 = xmmword_20B99E0;
  strcpy((char *)__p, "enable_if_candidates_drop_below_arrival_soc_threshold");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 3) = v9;
  __p = operator new(0x38uLL);
  long long v13 = xmmword_20B99F0;
  strcpy((char *)__p, "enable_if_remaining_energy_drops_below_threshold_wh");
  *(_DWORD *)(a1 + 4) = llround(sub_5C7E8(a2, (uint64_t)&__p) * 1000.0);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 8) = sub_401FE4(a3);
  __p = operator new(0x20uLL);
  long long v13 = xmmword_20B8E90;
  strcpy((char *)__p, "min_relative_buffer_improvement");
  double v10 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 16) = v10;
  sub_105E8C0(a2, a1 + 24);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_105E890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_105E8C0(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91C0;
  strcpy(*(char **)__p, "max_charging_stop_delays");
  unint64_t v4 = (uint64_t *)sub_5C4AC(a1, (uint64_t)__p);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_54DE8(&v15, *v4, v4[1], (v4[1] - *v4) >> 4);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    unint64_t v5 = v15;
    BOOL v6 = (char *)v16;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    int64_t v7 = v6 - v5;
    if (v6 == v5)
    {
LABEL_3:
      if (v5) {
        goto LABEL_16;
      }
      return;
    }
  }
  else
  {
    unint64_t v5 = v15;
    BOOL v6 = (char *)v16;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    int64_t v7 = v6 - v5;
    if (v6 == v5) {
      goto LABEL_3;
    }
  }
  if (v7 < 0) {
    sub_2E00();
  }
  BOOL v8 = (__n128 *)operator new(v7);
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = &v8[v7 >> 4];
  do
  {
    if (*((_DWORD *)v5 + 2) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    BOOL v9 = *(void **)v5;
    __p[23] = 9;
    strcpy(__p, "threshold");
    double v10 = sub_5C7E8(v9, (uint64_t)__p);
    char v19 = 12;
    strcpy((char *)v18, "max_delay_ds");
    unsigned int v11 = sub_5D2EC(v9, v18);
    if (v19 < 0)
    {
      operator delete(v18[0]);
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((__p[23] & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)__p);
LABEL_11:
    *(double *)__p = v10;
    *(void *)&__p[8] = v11;
    BOOL v8 = sub_1049B20((__n128 **)a2, (uint64_t)v8, (__n128 *)__p) + 1;
    v5 += 16;
  }
  while (v5 != v6);
  unint64_t v5 = v15;
  if (v15)
  {
LABEL_16:
    uint64_t v12 = v16;
    long long v13 = v5;
    if ((char *)v16 != v5)
    {
      do
        uint64_t v12 = sub_55198(v12 - 16);
      while ((char *)v12 != v5);
      long long v13 = v15;
    }
    uint64_t v16 = (uint64_t)v5;
    operator delete(v13);
  }
}

void sub_105EB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v26 = *(void **)v24;
  if (*(void *)v24)
  {
    *(void *)(v24 + 8) = v26;
    operator delete(v26);
    sub_55758(&a10);
    _Unwind_Resume(a1);
  }
  sub_55758(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_105EBD8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_105ECF8(a1, (double **)a2);
  unint64_t v5 = *(double **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6 / 936;
  double v8 = (double)v4;
  BOOL v9 = *(unsigned char **)(a1 + 48);
  if (v9 == *(unsigned char **)(a1 + 56))
  {
    unsigned int v10 = 0;
    long long v13 = v5 + 116;
    do
    {
      while (*(v13 - 19) < v8)
      {
        *(unsigned char *)long long v13 = 0;
        v13 += 117;
        if (!--v7) {
          return v10;
        }
      }
      v10 += *(unsigned __int8 *)v13;
      v13 += 117;
      --v7;
    }
    while (v7);
  }
  else
  {
    unsigned int v10 = 0;
    unsigned int v11 = v5 + 116;
    do
    {
      while (1)
      {
        if (*(v11 - 19) < v8) {
          *(unsigned char *)unsigned int v11 = 0;
        }
        if (!*v9) {
          break;
        }
        *(unsigned char *)unsigned int v11 = 0;
        v11 += 117;
        ++v9;
        if (!--v7) {
          return v10;
        }
      }
      v10 += *(unsigned __int8 *)v11;
      v11 += 117;
      ++v9;
      --v7;
    }
    while (v7);
  }
  return v10;
}

unint64_t sub_105ECF8(uint64_t a1, double **a2)
{
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  if (!*(unsigned char *)a1) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 == v5) {
    return 0;
  }
  do
  {
    if (sub_45FB38(*(void **)v4)
      || ((v6 = (uint64_t *)nullsub_1(*(void *)v4), uint64_t v7 = (_DWORD *)sub_374DF4(*v6), *v7 != 0x7FFFFFFF)
        ? (BOOL v8 = v7[9] == 0x7FFFFFFF)
        : (BOOL v8 = 1),
          v8 || (BOOL v9 = v7, !sub_40A45C(v7 + 2)) || (v10 = v9[28], v10 == -1)))
    {
      char v12 = 0;
      if (!*((unsigned char *)v4 + 928)) {
        goto LABEL_5;
      }
    }
    else
    {
      if (v10 == 1)
      {
        unint64_t v15 = *((void *)v9 + 13);
        BOOL v11 = v15 >= 0xFFFFFFFF00000000 || v15 == 0;
      }
      else
      {
        if (v10)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        BOOL v11 = *((void *)v9 + 13) == -1;
      }
      char v12 = !v11;
      if (!*((unsigned char *)v4 + 928)) {
        goto LABEL_5;
      }
    }
    if ((v12 & 1) == 0 && v4[97] <= 0.0)
    {
      uint64_t v13 = sub_5231C(*(void *)v4);
      int v14 = *(unsigned __int8 *)(v13 + 30);
      if (!*(unsigned char *)(v13 + 30))
      {
        uint64_t v17 = *a2;
        uint64_t v18 = a2[1];
        char v19 = *a2;
        if (*a2 == v18) {
          goto LABEL_38;
        }
        goto LABEL_33;
      }
    }
LABEL_5:
    v4 += 117;
  }
  while (v4 != v5);
  int v14 = 1;
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  char v19 = *a2;
  if (*a2 == v18) {
    goto LABEL_38;
  }
LABEL_33:
  uint64_t v20 = v17 + 117;
  char v19 = v17;
  if (v17 + 117 != v18)
  {
    char v19 = v17;
    do
    {
      if (v20[97] < v19[97]) {
        char v19 = v20;
      }
      v20 += 117;
    }
    while (v20 != v18);
  }
LABEL_38:
  double v21 = v19[97];
  if (v14) {
    return (unint64_t)v21;
  }
  if (v17 == v18)
  {
    double v50 = 0.0;
    goto LABEL_87;
  }
  while (2)
  {
    if (!*((unsigned char *)v17 + 928) || v17[97] != v21) {
      goto LABEL_46;
    }
    if ((!*(unsigned char *)(a1 + 1) || v17[103] <= 0.0) && (!*(unsigned char *)(a1 + 2) || v17[104] <= 0.0))
    {
      int v22 = *(_DWORD *)(a1 + 4);
      int v23 = v22 / 1000;
      int v24 = v22 % 1000;
      if (v22 < 0) {
        int v25 = 65036;
      }
      else {
        int v25 = 500;
      }
      unsigned int v26 = v25 + v24 + ((-31981 * (__int16)(v25 + v24)) >> 16);
      BOOL v27 = v17[101] >= (double)(v23 + ((__int16)v26 >> 9) + ((unsigned __int16)(v26 & 0x8000) >> 15));
      if (!*(unsigned char *)(sub_5231C(*(void *)v17) + 30)) {
        goto LABEL_54;
      }
      goto LABEL_45;
    }
    BOOL v27 = 0;
    if (*(unsigned char *)(sub_5231C(*(void *)v17) + 30))
    {
LABEL_45:
      if (v27) {
        return (unint64_t)v21;
      }
      goto LABEL_46;
    }
LABEL_54:
    BOOL v29 = v17[105] <= 0.0 || *(unsigned char *)(a1 + 3) == 0;
    if (v27 && v29) {
      return (unint64_t)v21;
    }
LABEL_46:
    v17 += 117;
    if (v17 != v18) {
      continue;
    }
    break;
  }
  uint64_t v30 = *a2;
  BOOL v31 = a2[1];
  int v51 = 0x7FFFFFFF;
  double v50 = 0.0;
  uint64_t v32 = (char *)v31 - (char *)v30;
  if (v32)
  {
    uint64_t v33 = v32 / 936;
    double v34 = 0.0;
    int v35 = 0x7FFFFFFF;
    while (!*((unsigned char *)v30 + 928) || v21 != (double)(unint64_t)round(v30[97]))
    {
LABEL_73:
      v30 += 117;
      if (!--v33) {
        goto LABEL_88;
      }
    }
    double v39 = v30[2];
    if (v39 >= 0.0)
    {
      if (v39 < 4.50359963e15)
      {
        uint64_t v40 = (uint64_t)(v39 + v39) + 1;
        goto LABEL_83;
      }
    }
    else if (v39 > -4.50359963e15)
    {
      uint64_t v40 = (uint64_t)(v39 + v39);
      if (v40 >= 1) {
        --v40;
      }
LABEL_83:
      double v39 = (double)(v40 >> 1);
    }
    int v41 = (int)v39;
    int v49 = (int)v39;
    if (v35 == 0x7FFFFFFF)
    {
      uint8x8_t v37 = &v49;
    }
    else
    {
      if (v35 >= v41) {
        unint64_t v36 = &v49;
      }
      else {
        unint64_t v36 = &v51;
      }
      if (v41 == 0x7FFFFFFF) {
        uint8x8_t v37 = &v51;
      }
      else {
        uint8x8_t v37 = v36;
      }
    }
    double v38 = v30[102];
    int v35 = *v37;
    int v51 = *v37;
    if (v34 < v38) {
      double v34 = v38;
    }
    double v50 = v34;
    goto LABEL_73;
  }
LABEL_87:
  double v34 = 0.0;
  int v35 = 0x7FFFFFFF;
LABEL_88:
  if (v34 < *(double *)(*(void *)(a1 + 32) - 16))
  {
    int v42 = sub_EFB0C8(&v50, (double **)(a1 + 24));
    char v43 = *a2;
    v44 = a2[1];
    if (*a2 != v44)
    {
      while (2)
      {
        if (*((unsigned char *)v43 + 928) && v21 + 1.0 == (double)(unint64_t)round(v43[97]))
        {
          double v45 = v43[2];
          if (v45 >= 0.0)
          {
            if (v45 < 4.50359963e15)
            {
              uint64_t v47 = (uint64_t)(v45 + v45) + 1;
              goto LABEL_91;
            }
          }
          else if (v45 > -4.50359963e15)
          {
            uint64_t v47 = (uint64_t)(v45 + v45);
            if (v47 >= 1) {
              --v47;
            }
LABEL_91:
            double v45 = (double)(v47 >> 1);
          }
          if (v35 + v42 >= (int)v45 && v43[102] >= v50 + *(double *)(a1 + 16)) {
            return (unint64_t)(v21 + 1.0);
          }
        }
        v43 += 117;
        if (v43 == v44) {
          return (unint64_t)v21;
        }
        continue;
      }
    }
  }
  return (unint64_t)v21;
}

void sub_105F1E8()
{
  unk_25FD9AF = 16641;
  word_25FD998 = 65;
  byte_25FD9C7 = 1;
  byte_25FD9B1 = 0;
}

void *sub_105F210(void *a1, uint64_t a2, __int16 *a3)
{
  *a1 = a2;
  sub_105F240((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_105F240(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_8A6F8((char *)(a1 + 8), *((void *)a2 + 1), *((void *)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_8A6F8((char *)(a1 + 32), *((void *)a2 + 4), *((void *)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  return a1;
}

void sub_105F2D0(_Unwind_Exception *exception_object)
{
  if (*v2) {
    sub_20B1BF4(v1, *v2, (void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_105F2F0(unint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      unint64_t v5 = *(void **)v2;
      *(_OWORD *)(v2 + 16) = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(_OWORD *)(v2 + 64) = 0u;
      *(_OWORD *)(v2 + 80) = 0u;
      *(_OWORD *)(v2 + 96) = 0u;
      *(_OWORD *)(v2 + 112) = 0u;
      *(_OWORD *)(v2 + 128) = 0u;
      *(_OWORD *)(v2 + 144) = 0u;
      *(_OWORD *)(v2 + 160) = 0u;
      *(_OWORD *)(v2 + 176) = 0u;
      *(_OWORD *)(v2 + 192) = 0u;
      *(void *)(v2 + 208) = 0;
      uint64_t result = sub_470ADC(v5);
      if (result)
      {
        unint64_t v7 = result;
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v9 = sub_470F2C(v5, i, v6);
          int v10 = (unsigned int *)sub_470B40(v5, i);
          uint64_t result = sub_105F3CC(v4, v10);
          if ((result & 1) == 0)
          {
            double v6 = *(double *)(v2 + 208) + (double)v9;
            *(double *)(v2 + 208) = v6;
          }
        }
      }
      v2 += 232;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_105F3CC(uint64_t a1, unsigned int *a2)
{
  if (!*(unsigned char *)(a1 + 10) || !*(unsigned char *)(a1 + 8)) {
    return 1;
  }
  uint64_t v4 = sub_3750CC(*(void **)a1);
  unint64_t v5 = *a2 | ((unint64_t)(a2[1] & 0x1FFFFFFF) << 32);
  p_p = (unsigned __int8 *)&__p;
  sub_3D63DC(v4, v5, &__p);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  if (v7 != v8)
  {
    if ((v24 & 0x80u) == 0) {
      uint64_t v9 = v24;
    }
    else {
      uint64_t v9 = v23;
    }
    if ((v24 & 0x80u) != 0) {
      p_p = (unsigned __int8 *)__p;
    }
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(v7 + 23);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v7 + 8);
      }
      if (v13 == v9)
      {
        if ((v12 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, p_p, *(void *)(v7 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v7 + 23)) {
            break;
          }
          uint64_t v14 = 0;
          while (*(unsigned __int8 *)(v7 + v14) == p_p[v14])
          {
            if (v12 == ++v14) {
              goto LABEL_23;
            }
          }
        }
      }
      v7 += 24;
      if (v7 == v8) {
        goto LABEL_26;
      }
    }
  }
LABEL_23:
  if (v7 == v8)
  {
LABEL_26:
    if (*(unsigned char *)(a1 + 9))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 48);
      if (v15 == v16)
      {
LABEL_45:
        BOOL v10 = v15 != v16;
        if ((char)v24 < 0) {
          goto LABEL_48;
        }
      }
      else
      {
        if ((v24 & 0x80u) == 0) {
          uint64_t v17 = v24;
        }
        else {
          uint64_t v17 = v23;
        }
        if ((v24 & 0x80u) == 0) {
          uint64_t v18 = (unsigned __int8 *)&__p;
        }
        else {
          uint64_t v18 = (unsigned __int8 *)__p;
        }
        do
        {
          uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
          if ((v19 & 0x80u) == 0) {
            uint64_t v20 = *(unsigned __int8 *)(v15 + 23);
          }
          else {
            uint64_t v20 = *(void *)(v15 + 8);
          }
          if (v20 == v17)
          {
            if ((v19 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v15, v18, *(void *)(v15 + 8))) {
                goto LABEL_45;
              }
            }
            else
            {
              if (!*(unsigned char *)(v15 + 23)) {
                goto LABEL_45;
              }
              uint64_t v21 = 0;
              while (*(unsigned __int8 *)(v15 + v21) == v18[v21])
              {
                if (v19 == ++v21) {
                  goto LABEL_45;
                }
              }
            }
          }
          v15 += 24;
        }
        while (v15 != v16);
        BOOL v10 = 0;
        if ((char)v24 < 0) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      BOOL v10 = 0;
      if ((char)v24 < 0) {
LABEL_48:
      }
        operator delete(__p);
    }
  }
  else
  {
    BOOL v10 = 1;
    if ((char)v24 < 0) {
      goto LABEL_48;
    }
  }
  return v10;
}

void sub_105F5C4()
{
  byte_25FD9DF = 1;
  word_25FD9C8 = 65;
  byte_25FD9F7 = 1;
  word_25FD9E0 = 65;
  byte_25FDA0F = 8;
  strcpy((char *)&qword_25FD9F8, "any_mode");
  byte_25FDA27 = 7;
  strcpy((char *)&dword_25FDA10, "cycling");
  byte_25FDA3F = 7;
  strcpy((char *)&dword_25FDA28, "driving");
  byte_25FDA57 = 7;
  strcpy((char *)&dword_25FDA40, "walking");
  byte_25FDA6F = 21;
  strcpy((char *)&xmmword_25FDA58, "enable_coverage_check");
  byte_25FDA87 = 14;
  strcpy((char *)&qword_25FDA70, "default_region");
  byte_25FDA9F = 17;
  strcpy((char *)&xmmword_25FDA88, "supported_regions");
  byte_25FDAB7 = 17;
  strcpy(byte_25FDAA0, "preflight_regions");
  qword_25FDAB8 = (uint64_t)operator new(0x19uLL);
  unk_25FDAC0 = xmmword_20B9250;
  strcpy((char *)qword_25FDAB8, "supported_country_codes");
  qword_25FDAD0 = (uint64_t)operator new(0x19uLL);
  xmmword_25FDAD8 = xmmword_20B9250;
  strcpy((char *)qword_25FDAD0, "preflight_country_codes");
  __int16 v3 = 17;
  strcpy(v2, "segment_curviness");
  __int16 v5 = 262;
  strcpy((char *)v4, "length");
  __int16 v7 = 529;
  strcpy(v6, "length_on_ferries");
  HIBYTE(v8[2]) = 21;
  strcpy((char *)v8, "num_impeding_barriers");
  char v9 = 3;
  HIBYTE(v10[2]) = 16;
  strcpy((char *)v10, "num_name_changes");
  char v11 = 4;
  uint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8890;
  strcpy((char *)v12, "num_dangerous_zone_violations");
  char v14 = 5;
  uint64_t v15 = operator new(0x28uLL);
  long long v16 = xmmword_20B9390;
  strcpy((char *)v15, "num_terminal_use_zone_violations");
  char v17 = 6;
  __int16 v19 = 1806;
  strcpy((char *)v18, "traversal_time");
  HIBYTE(v20[2]) = 22;
  strcpy((char *)v20, "display_traversal_time");
  char v21 = 8;
  v22[0] = operator new(0x20uLL);
  v22[1] = &dword_1C + 3;
  unint64_t v23 = 0x8000000000000020;
  strcpy((char *)v22[0], "time_violating_avoid_busy_roads");
  char v24 = 9;
  v25[0] = operator new(0x20uLL);
  v25[1] = &dword_18 + 3;
  unint64_t v26 = 0x8000000000000020;
  strcpy((char *)v25[0], "time_violating_avoid_stairs");
  char v27 = 10;
  v28[0] = operator new(0x28uLL);
  v28[1] = &stru_20;
  unint64_t v29 = 0x8000000000000028;
  strcpy((char *)v28[0], "time_violating_avoid_steep_hills");
  char v30 = 11;
  strcpy((char *)v31, "time_on_dangerous_road");
  HIBYTE(v31[2]) = 22;
  char v32 = 12;
  HIBYTE(v33[2]) = 20;
  strcpy((char *)v33, "time_on_terminal_fow");
  char v34 = 13;
  v0 = operator new(0x20uLL);
  unint64_t v36 = 0x8000000000000020;
  v35[0] = v0;
  v35[1] = &dword_18 + 3;
  strcpy((char *)v0, "time_on_pathway_fow_in_park");
  char v37 = 14;
  uint64_t v1 = operator new(0x20uLL);
  unint64_t v39 = 0x8000000000000020;
  v38[0] = v1;
  v38[1] = &dword_1C + 3;
  strcpy((char *)v1, "time_on_named_trail_fow_in_park");
  char v40 = 15;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_18 + 2;
  strcpy((char *)v41[0], "time_on_duplicate_segments");
  char v43 = 16;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_18 + 1;
  strcpy((char *)v44[0], "uses_contingency_terminal");
  char v46 = 17;
  *(_WORD *)((char *)&v47[2] + 7) = 4624;
  strcpy((char *)v47, "route_jaggedness");
  v48[0] = operator new(0x20uLL);
  unint64_t v49 = 0x8000000000000020;
  v48[1] = &dword_18 + 1;
  strcpy((char *)v48[0], "extra_elevation_change_cm");
  char v50 = 19;
  v51[0] = operator new(0x20uLL);
  unint64_t v52 = 0x8000000000000020;
  v51[1] = &dword_1C + 1;
  strcpy((char *)v51[0], "extra_elevation_violations_cm");
  char v53 = 20;
  *(_WORD *)((char *)&v54[2] + 7) = 5393;
  strcpy((char *)v54, "hiking_difficulty");
  *(_WORD *)((char *)&v55[2] + 7) = 5650;
  strcpy((char *)v55, "time_inside_a_park");
  v56[0] = operator new(0x20uLL);
  unint64_t v57 = 0x8000000000000020;
  v56[1] = &dword_18 + 3;
  strcpy((char *)v56[0], "normalized_park_probe_count");
  char v58 = 23;
  __p[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v61 = 24;
  xmmword_25FDAE8 = 0u;
  *(_OWORD *)&qword_25FDAF8 = 0u;
  dword_25FDB08 = 1065353216;
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v2, (uint64_t)v2);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v4, (uint64_t)v4);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v6, (uint64_t)v6);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v8, (uint64_t)v8);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v10, (uint64_t)v10);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)&v12, (uint64_t)&v12);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)&v15, (uint64_t)&v15);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v18, (uint64_t)v18);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v20, (uint64_t)v20);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v22, (uint64_t)v22);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v25, (uint64_t)v25);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v28, (uint64_t)v28);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v31, (uint64_t)v31);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v33, (uint64_t)v33);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v35, (uint64_t)v35);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v38, (uint64_t)v38);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v41, (uint64_t)v41);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v44, (uint64_t)v44);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v47, (uint64_t)v47);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v48, (uint64_t)v48);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v51, (uint64_t)v51);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v54, (uint64_t)v54);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v55, (uint64_t)v55);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)v56, (uint64_t)v56);
  sub_CDC48C((uint64_t)&xmmword_25FDAE8, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v55[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v56[0]);
  if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v54[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v55[0]);
  if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v54[0]);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v51[0]);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v38[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v35[0]);
  if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v33[0]);
  if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v31[0]);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v28[0]);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v25[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v22[0]);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20[0]);
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v18[0]);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v15);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v12);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v10[0]);
  if ((SHIBYTE(v8[2]) & 0x80000000) == 0)
  {
LABEL_23:
    if (((char)v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v8[0]);
  if (((char)v7 & 0x80000000) == 0)
  {
LABEL_24:
    if (((char)v5 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*(void **)v6);
  if (((char)v5 & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v3 & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)v2);
    return;
  }
LABEL_50:
  operator delete(v4[0]);
  if ((char)v3 < 0) {
    goto LABEL_51;
  }
}

void sub_1060168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  char v21 = v19;
  while (1)
  {
    if (*((char *)v21 - 9) < 0) {
      operator delete(*(v21 - 4));
    }
    v21 -= 4;
    if (v21 == &a19) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *sub_10604A4(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v11 = 0;
  uint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8E90;
  strcpy((char *)v12, "WalkingRouteCriteriaComputation");
  __p = 0;
  BOOL v10 = 0;
  uint64_t v4 = sub_374CDC(a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_10605CC(a1 + 1, v4);
  __int16 v5 = (void **)__p;
  if (__p)
  {
    double v6 = v10;
    __int16 v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      __int16 v7 = __p;
    }
    BOOL v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_10605A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10605CC(void *a1, void *a2)
{
  char v9 = 17;
  strcpy(__p, "stairs_min_length");
  double v3 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v3 >= 0.0)
  {
    double v4 = v3;
    if (v3 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    double v4 = v3;
    if (v3 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3);
    if (v5 >= 1) {
      --v5;
    }
  }
  double v4 = (double)(v5 >> 1);
LABEL_9:
  if (v4 < 9.22337204e18)
  {
    if (v3 >= 0.0)
    {
      if (v3 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v6 = (uint64_t)(v3 + v3) + 1;
    }
    else
    {
      if (v3 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v6 = (uint64_t)(v3 + v3);
      if (v6 >= 1) {
        --v6;
      }
    }
    double v3 = (double)(v6 >> 1);
LABEL_20:
    *a1 = (uint64_t)v3;
    if ((v9 & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_22;
  }
  *a1 = 0x7FFFFFFFFFFFFFFELL;
  if ((v9 & 0x80000000) == 0) {
    return a1;
  }
LABEL_22:
  operator delete(*(void **)__p);
  return a1;
}

void sub_106072C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1060748(void **a1, unsigned char *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      sub_106079C(a1, a2, v3);
      v3 += 232;
    }
    while (v3 != v4);
  }
}

void sub_106079C(void **a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = sub_3750CC(*a1);
  uint64_t v7 = sub_376D3C(*a1);
  sub_47FEE4(*(uint64_t **)(a3 + 8), v6, (uint64_t)&v180);
  v161 = a1;
  sub_3E69D4(v179, *a1, &v180);
  uint64_t v8 = *(void *)a3;
  char v9 = *(int **)(sub_40EFE8(*(void *)a3) + 16);
  BOOL v168 = v9
      && (BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9), *v10 >= 0x1Du)
      && (uint64_t v11 = v10[14]) != 0
      && *(int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11))
      && (uint64_t v12 = *(int **)(sub_470B50(v8) + 16)) != 0
      && (long long v13 = (unsigned __int16 *)((char *)v12 - *v12), *v13 >= 0x1Du)
      && (uint64_t v14 = v13[14]) != 0
      && *(int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14)) != 0;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v15 = (double *)(a3 + 16);
  *(void *)(a3 + 208) = 0;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(double *)(a3 + 24) = (double)*(uint64_t *)(v8 + 504);
  *(double *)(a3 + 72) = (double)*(int *)(v8 + 516);
  int v16 = *(_DWORD *)(v8 + 516);
  int v17 = v16 / 10;
  int v18 = v16 % 10;
  if (v16 < 0) {
    char v19 = -5;
  }
  else {
    char v19 = 5;
  }
  double v20 = ceil((double)(int)(v17 + (((103 * (char)(v19 + v18)) >> 15) & 1) + ((103 * (char)(v19 + v18)) >> 10))/ 60.0)* 60.0* 10.0;
  if (v20 >= 0.0)
  {
    if (v20 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v21 = (uint64_t)(v20 + v20) + 1;
  }
  else
  {
    if (v20 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v21 = (uint64_t)(v20 + v20);
    if (v21 >= 1) {
      --v21;
    }
  }
  double v20 = (double)(v21 >> 1);
LABEL_21:
  *(double *)(a3 + 80) = (double)(int)v20;
  if (*(unsigned char *)(sub_3AEFFC(v8) + 12)) {
    BOOL v22 = *(unsigned char *)(sub_46CAA4(v8) + 12) == 0;
  }
  else {
    BOOL v22 = 1;
  }
  *(double *)(a3 + 152) = (double)v22;
  __p = 0;
  v177 = 0;
  uint64_t v178 = 0;
  unint64_t v23 = sub_470ADC((void *)v8);
  if (v23)
  {
    unint64_t v25 = 0;
    v164 = a2;
    v165 = (unsigned char *)(v6 + 7772);
    uint64_t v162 = v6 + 3896;
    uint64_t v26 = -1;
    double v27 = 0.0;
    double v28 = 0.0;
    uint64_t v163 = v7;
    unint64_t v167 = v23;
    while (1)
    {
      uint64_t v29 = sub_470F2C((void *)v8, v25, v24);
      uint64_t v169 = v26;
      int v175 = 0;
      int v175 = sub_4711DC((void *)v8, v25, 0);
      char v30 = (unsigned int *)sub_470B40((void *)v8, v25);
      BOOL v31 = v30;
      char v32 = (int *)*((void *)v30 + 1);
      uint64_t v33 = (unsigned __int16 *)((char *)v32 - *v32);
      unsigned int v34 = *v33;
      if (v34 >= 0xB && v33[5])
      {
        double v35 = (double)v29;
        if ((*(int *)((char *)v32 + v33[5]) & 8) != 0) {
          double v36 = (double)v29;
        }
        else {
          double v36 = 0.0;
        }
      }
      else
      {
        double v35 = (double)v29;
        double v36 = 0.0;
      }
      *(double *)(a3 + 32) = v36 + *(double *)(a3 + 32);
      char v37 = (int *)*((void *)v30 + 2);
      double v38 = (unsigned __int16 *)((char *)v37 - *v37);
      if (*v38 >= 0x13u && (uint64_t v39 = v38[9]) != 0)
      {
        *uint64_t v15 = *v15 + (double)*(unsigned __int16 *)((char *)v37 + v39);
        if (!a2[8]) {
          goto LABEL_49;
        }
      }
      else
      {
        *uint64_t v15 = *v15 + (double)0;
        if (!a2[8]) {
          goto LABEL_49;
        }
      }
      if (v34 >= 0xB)
      {
        uint64_t v40 = v33[5];
        if (v40)
        {
          if ((*((unsigned char *)v32 + v40) & 3) != 0)
          {
            uint64_t v41 = v8;
            uint64_t v42 = *v30;
            unint64_t v43 = ((unint64_t)(v30[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v30[1] << 32) | v42;
            unint64_t v44 = v43 & 0xFFFFFFFFFFFFLL;
            uint64_t v45 = v6;
            char v46 = (int *)sub_2D5D58(v6, v43 & 0xFFFFFFFFFFFFLL);
            char v47 = BYTE6(v43) ^ 1;
            unint64_t v166 = (v43 ^ 0x1000000000000) >> 32;
            if (*v165)
            {
              float64x2x2_t v48 = sub_2DB8E0(v162, v42, 0);
              unint64_t v49 = &v48[-*(int *)v48];
              if (*(unsigned __int16 *)v49 < 5u)
              {
                uint64_t v50 = 0;
              }
              else
              {
                uint64_t v50 = *((unsigned __int16 *)v49 + 2);
                if (v50) {
                  v50 += (uint64_t)&v48[*(unsigned int *)&v48[v50]];
                }
              }
              int v51 = (int *)(v50
                          + 4 * (unsigned __int16)v166
                          + 4
                          + *(unsigned int *)(v50 + 4 * (unsigned __int16)v166 + 4));
            }
            else
            {
              int v51 = 0;
            }
            unint64_t v52 = (int *)sub_2E5C38(v45, v44, 1);
            v171[0] = v46;
            v171[1] = v51;
            v171[2] = v52;
            v171[3] = v53;
            int v172 = v42;
            __int16 v173 = v166;
            char v174 = v47;
            uint64_t v8 = v41;
            uint64_t v6 = v45;
            uint64_t v7 = v163;
            a2 = v164;
            uint64_t v15 = (double *)(a3 + 16);
            if (sub_3E6A48((uint64_t)v179, v171)) {
              *(double *)(a3 + 88) = *(double *)(a3 + 88) + (double)v175;
            }
          }
        }
      }
LABEL_49:
      if (a2[10])
      {
        v54 = (int *)*((void *)v31 + 2);
        if (!v54
          || (v55 = (unsigned __int16 *)((char *)v54 - *v54), *v55 < 0x11u)
          || (uint64_t v56 = v55[8]) == 0
          || (*(_WORD *)((unsigned char *)v54 + v56) & 4) == 0)
        {
          unint64_t v57 = (int *)*((void *)v31 + 1);
          char v58 = (unsigned __int16 *)((char *)v57 - *v57);
          if (*v58 >= 0x2Fu && v58[23] && *((unsigned char *)v57 + v58[23]) == 9)
          {
            uint64_t v59 = v58[4];
            if (v59)
            {
              if (*(unsigned int *)((char *)v57 + v59) < (uint64_t)v161[1]) {
                goto LABEL_60;
              }
LABEL_59:
              *(double *)(a3 + 96) = *(double *)(a3 + 96) + (double)v175;
              goto LABEL_60;
            }
            if ((uint64_t)v161[1] <= 0) {
              goto LABEL_59;
            }
          }
        }
      }
LABEL_60:
      unint64_t v60 = (int *)*((void *)v31 + 1);
      char v61 = (unsigned __int16 *)((char *)v60 - *v60);
      unsigned int v62 = *v61;
      if (v62 <= 0xA)
      {
        int v63 = v175;
LABEL_68:
        double v64 = (double)v63;
        *(double *)(a3 + 112) = *(double *)(a3 + 112) + 0.0;
        if (v62 < 0x2F) {
          goto LABEL_92;
        }
        goto LABEL_69;
      }
      int v63 = v175;
      if (!v61[5]) {
        goto LABEL_68;
      }
      double v64 = (double)v175;
      if ((*(int *)((char *)v60 + v61[5]) & 0x1000000) != 0) {
        double v65 = (double)v175;
      }
      else {
        double v65 = 0.0;
      }
      *(double *)(a3 + 112) = v65 + *(double *)(a3 + 112);
      if (v62 < 0x2F)
      {
LABEL_92:
        *(double *)(a3 + 120) = *(double *)(a3 + 120) + 0.0;
        if (v168)
        {
          int v78 = 0;
          *(double *)(a3 + 128) = *(double *)(a3 + 128) + 0.0;
LABEL_94:
          *(double *)(a3 + 136) = *(double *)(a3 + 136) + (double)v78;
          *(double *)(a3 + 200) = sub_F6F0E0(v7, (uint64_t *)v31, v6) * (double)v63 + *(double *)(a3 + 200);
          goto LABEL_95;
        }
        goto LABEL_95;
      }
LABEL_69:
      uint64_t v66 = v61[23];
      if (!v61[23]) {
        goto LABEL_92;
      }
      unsigned int v67 = *((unsigned __int8 *)v60 + v66);
      double v68 = 0.0;
      BOOL v69 = v67 > 0x2F;
      uint64_t v70 = (1 << v67) & 0xE2E040048000;
      if (!v69
        && v70 != 0
        && (v62 < 0x39 || (uint64_t v72 = v61[28]) == 0 || (*(int *)((char *)v60 + v72) & 0x10100) != 0x10000))
      {
        double v68 = v64;
      }
      *(double *)(a3 + 120) = v68 + *(double *)(a3 + 120);
      if (v168)
      {
        unsigned int v73 = *((unsigned __int8 *)v60 + v66);
        BOOL v69 = v73 > 0x2B;
        uint64_t v74 = (1 << v73) & 0x80000001040;
        if (v69 || v74 == 0) {
          double v64 = 0.0;
        }
        *(double *)(a3 + 128) = v64 + *(double *)(a3 + 128);
        if (*((unsigned char *)v60 + v66) == 48)
        {
          unint64_t v76 = sub_2E68E8(v6, (((unint64_t)(v31[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v31[1] << 32) | *v31) ^ 0x1000000000000);
          if (v76) {
            BOOL v77 = v76 >= 0xFFFFFFFF00000000;
          }
          else {
            BOOL v77 = 1;
          }
          int v63 = v175;
          if (v77) {
            int v78 = 0;
          }
          else {
            int v78 = v175;
          }
        }
        else
        {
          int v78 = 0;
        }
        goto LABEL_94;
      }
LABEL_95:
      v79 = (int *)*((void *)v31 + 2);
      double v80 = 0.0;
      if (v79)
      {
        v81 = (unsigned __int16 *)((char *)v79 - *v79);
        if (*v81 >= 0x1Du)
        {
          uint64_t v82 = v81[14];
          if (v82)
          {
            double v80 = (double)v175;
            if (!*(int *)((char *)v79 + v82 + *(unsigned int *)((char *)v79 + v82))) {
              double v80 = 0.0;
            }
          }
        }
      }
      double v83 = v80 + *(double *)(a3 + 192);
      *(double *)(a3 + 192) = v83;
      v84 = (int *)*((void *)v31 + 1);
      v85 = (unsigned __int16 *)((char *)v84 - *v84);
      unsigned int v86 = *v85;
      if (!*((unsigned char *)v31 + 46))
      {
        if (v86 < 0x57)
        {
LABEL_117:
          double v90 = 0.0;
          double v27 = v27 + v35 * 0.0;
          if (!v79) {
            goto LABEL_137;
          }
          goto LABEL_134;
        }
        if (v85[43])
        {
          v96 = (unsigned int *)((char *)v84 + v85[43]);
          v97 = (int *)((char *)v96 + *v96);
          v98 = (unsigned __int16 *)((char *)v97 - *v97);
          double v90 = 0.0;
          double v99 = 0.0;
          if (*v98 >= 5u)
          {
            uint64_t v100 = v98[2];
            if (v100)
            {
              LOWORD(v99) = *(_WORD *)((char *)v97 + v100);
              double v99 = ((double)*(unint64_t *)&v99 + (double)*(unint64_t *)&v99) / 65535.0;
            }
          }
          double v93 = v35 * v99;
          double v27 = v27 + v93;
          v84 = (int *)((char *)v96 + *v96);
          v101 = (unsigned __int16 *)((char *)v84 - *v84);
          if (*v101 >= 7u)
          {
            unsigned int v95 = v101[3];
            if (v95) {
              goto LABEL_132;
            }
          }
        }
        else
        {
          double v90 = 0.0;
          double v102 = 0.0;
          if (v86 >= 0x7B && v85[61])
          {
            LOWORD(v102) = *(_WORD *)((char *)v84 + v85[61]);
            double v102 = ((double)*(unint64_t *)&v102 + (double)*(unint64_t *)&v102) / 65535.0;
          }
          double v93 = v35 * v102;
          double v27 = v27 + v93;
          if (v86 >= 0x7D)
          {
            unsigned int v95 = v85[62];
            if (v95) {
              goto LABEL_132;
            }
          }
        }
LABEL_133:
        if (!v79) {
          goto LABEL_137;
        }
        goto LABEL_134;
      }
      if (v86 < 0x57) {
        goto LABEL_117;
      }
      if (v85[43])
      {
        v87 = (unsigned int *)((char *)v84 + v85[43]);
        v88 = (int *)((char *)v87 + *v87);
        v89 = (unsigned __int16 *)((char *)v88 - *v88);
        double v90 = 0.0;
        double v91 = 0.0;
        if (*v89 >= 7u)
        {
          uint64_t v92 = v89[3];
          if (v92)
          {
            LOWORD(v91) = *(_WORD *)((char *)v88 + v92);
            double v91 = ((double)*(unint64_t *)&v91 + (double)*(unint64_t *)&v91) / 65535.0;
          }
        }
        double v93 = v35 * v91;
        double v27 = v27 + v93;
        v84 = (int *)((char *)v87 + *v87);
        v94 = (unsigned __int16 *)((char *)v84 - *v84);
        if (*v94 < 5u) {
          goto LABEL_133;
        }
        unsigned int v95 = v94[2];
        if (!v95) {
          goto LABEL_133;
        }
LABEL_132:
        LOWORD(v93) = *(_WORD *)((char *)v84 + v95);
        double v90 = (double)*(unint64_t *)&v93 + (double)*(unint64_t *)&v93;
        goto LABEL_133;
      }
      if (v86 < 0x7D)
      {
        double v90 = 0.0;
        double v93 = v35 * 0.0;
        double v27 = v27 + v35 * 0.0;
        if (v86 < 0x7B) {
          goto LABEL_133;
        }
        unsigned int v95 = v85[61];
        if (v95) {
          goto LABEL_132;
        }
      }
      else if (v85[62])
      {
        LOWORD(v83) = *(_WORD *)((char *)v84 + v85[62]);
        double v93 = v35 * (((double)*(unint64_t *)&v83 + (double)*(unint64_t *)&v83) / 65535.0);
        double v27 = v27 + v93;
        unsigned int v95 = v85[61];
        if (v95) {
          goto LABEL_132;
        }
      }
      else
      {
        double v93 = v35 * 0.0;
        double v27 = v27 + v35 * 0.0;
        unsigned int v95 = v85[61];
        if (v95) {
          goto LABEL_132;
        }
      }
      double v90 = 0.0;
      if (!v79) {
        goto LABEL_137;
      }
LABEL_134:
      v103 = (unsigned __int16 *)((char *)v79 - *v79);
      if (*v103 < 0x11u || (uint64_t v104 = v103[8]) == 0 || (*(_WORD *)((unsigned char *)v79 + v104) & 4) == 0)
      {
LABEL_137:
        uint64_t v105 = v25;
        if (v169 != -1)
        {
          v106 = (unsigned int *)sub_470B40((void *)v8, v169);
          *(double *)(a3 + 48) = *(double *)(a3 + 48)
                               + (double)(sub_2E79EC(v6, (((unint64_t)(v31[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v31[1] << 32) | *v31) ^ 0x1000000000000, (((unint64_t)(v106[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v106[1] << 32) | *v106) ^ 0x1000000000000) ^ 1);
          uint64_t v105 = v25;
        }
        goto LABEL_139;
      }
      uint64_t v105 = v169;
LABEL_139:
      v171[0] = (int *)(*v31 | ((unint64_t)(v31[1] & 0x1FFFFFFF) << 32));
      sub_10618F0((uint64_t)&__p, v171, &v175);
      double v24 = v35 * (v90 / 65535.0);
      double v28 = v28 + v24;
      ++v25;
      uint64_t v26 = v105;
      if (v167 == v25) {
        goto LABEL_148;
      }
    }
  }
  double v28 = 0.0;
  double v27 = 0.0;
LABEL_148:
  unint64_t v107 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v177 - (unsigned char *)__p) >> 2));
  if (v177 == __p) {
    uint64_t v108 = 0;
  }
  else {
    uint64_t v108 = v107;
  }
  sub_1061A28((uint64_t)__p, (unsigned int *)v177, (uint64_t)v171, v108, 1);
  v109 = v177;
  if (__p != v177)
  {
    v110 = (char *)__p + 12;
    if ((char *)__p + 12 != v177)
    {
      int v111 = 0;
      double v112 = *(double *)(a3 + 144);
      int v113 = -1;
      do
      {
        if (*((_DWORD *)v110 - 3) == *(_DWORD *)v110)
        {
          int v115 = *((_DWORD *)v110 - 2);
          if (v115 == *((_DWORD *)v110 + 1))
          {
            if (v111 == *(_DWORD *)v110 && v113 == v115) {
              int v114 = 0;
            }
            else {
              int v114 = *((_DWORD *)v110 - 1);
            }
            double v112 = v112 + (double)(v114 + *((_DWORD *)v110 + 2));
            *(double *)(a3 + 144) = v112;
            int v111 = *(_DWORD *)v110;
            int v113 = *((_DWORD *)v110 + 1);
          }
        }
        v110 += 12;
      }
      while (v110 != v109);
    }
  }
  if (v28 >= v27) {
    double v117 = v27;
  }
  else {
    double v117 = v28;
  }
  *(double *)(a3 + 168) = v117;
  if (a2[9]) {
    *(double *)(a3 + 176) = v117;
  }
  if (v27 >= 0.0)
  {
    double v118 = v27;
    if (v27 >= 4.50359963e15) {
      goto LABEL_177;
    }
    uint64_t v119 = (uint64_t)(v27 + v27) + 1;
  }
  else
  {
    double v118 = v27;
    if (v27 <= -4.50359963e15) {
      goto LABEL_177;
    }
    uint64_t v119 = (uint64_t)(v27 + v27);
    if (v119 >= 1) {
      --v119;
    }
  }
  double v118 = (double)(v119 >> 1);
LABEL_177:
  double v120 = 9.22337204e18;
  if (v118 >= 9.22337204e18) {
    goto LABEL_187;
  }
  if (v27 >= 0.0)
  {
    if (v27 < 4.50359963e15)
    {
      uint64_t v121 = (uint64_t)(v27 + v27) + 1;
LABEL_185:
      double v27 = (double)(v121 >> 1);
    }
  }
  else if (v27 > -4.50359963e15)
  {
    uint64_t v121 = (uint64_t)(v27 + v27);
    if (v121 >= 1) {
      --v121;
    }
    goto LABEL_185;
  }
  double v120 = (double)(uint64_t)v27;
LABEL_187:
  *(double *)(a3 + 184) = sqrt((v120 / 30.48 + v120 / 30.48) * ((double)*(uint64_t *)(v8 + 504) / 160934.4));
  sub_46B058();
  v123 = v122;
  unint64_t v125 = v124;
  sub_46FF18();
  unint64_t v170 = v127;
  v128 = v126;
  if (v123)
  {
    unint64_t v129 = sub_470ADC(v123);
    unint64_t v130 = v129;
    if (!v128)
    {
      if (v125 >= v129) {
        goto LABEL_289;
      }
      char v133 = 1;
      goto LABEL_200;
    }
    unint64_t v131 = sub_470ADC(v128);
    if (v125 >= v130 || v170 >= v131)
    {
      if (v125 < v130 == v170 < v131) {
        goto LABEL_289;
      }
    }
    else
    {
      uint64_t v132 = sub_470B40(v123, v125);
      if (v132 == sub_470B40(v128, v170)) {
        goto LABEL_289;
      }
    }
LABEL_199:
    char v133 = 0;
LABEL_200:
    int v134 = 0;
    int v135 = 0;
    while (1)
    {
      uint64_t v136 = v125++;
      if (v123)
      {
        unint64_t v137 = sub_470ADC(v123);
        unint64_t v138 = v137;
        if (v133)
        {
          if (v125 >= v137) {
            goto LABEL_289;
          }
        }
        else
        {
          unint64_t v139 = sub_470ADC(v128);
          if (v125 >= v138 || v170 >= v139)
          {
            if (v125 < v138 == v170 < v139) {
              goto LABEL_289;
            }
          }
          else
          {
            uint64_t v140 = sub_470B40(v123, v125);
            if (v140 == sub_470B40(v128, v170)) {
              goto LABEL_289;
            }
          }
        }
      }
      else if ((v133 & 1) != 0 || v170 >= sub_470ADC(v128))
      {
        goto LABEL_289;
      }
      uint64_t v141 = sub_470B40(v123, v136);
      uint64_t v142 = sub_470B40(v123, v125);
      v143 = *(int **)(v141 + 8);
      int v144 = *(unsigned __int8 *)(v141 + 46);
      v145 = (unsigned __int16 *)((char *)v143 - *v143);
      unsigned int v146 = *v145;
      if (*(unsigned char *)(v141 + 46))
      {
        if (v146 >= 0x49)
        {
          unsigned int v147 = v145[36];
          if (v145[36]) {
            goto LABEL_219;
          }
        }
      }
      else if (v146 >= 0x4B)
      {
        unsigned int v147 = v145[37];
        if (v145[37])
        {
LABEL_219:
          __int16 v148 = *(_WORD *)((char *)v143 + v147);
          goto LABEL_221;
        }
      }
      __int16 v148 = -1;
LABEL_221:
      v149 = *(int **)(v142 + 8);
      int v150 = *(unsigned __int8 *)(v142 + 46);
      unsigned __int16 v151 = v148 + 18000;
      unsigned __int16 v152 = v148 - 18000;
      if ((unsigned __int16)(v151 >> 5) >= 0x465u) {
        unsigned __int16 v153 = v152;
      }
      else {
        unsigned __int16 v153 = v151;
      }
      v154 = (unsigned __int16 *)((char *)v149 - *v149);
      unsigned int v155 = *v154;
      if (*(unsigned char *)(v142 + 46))
      {
        if (v155 >= 0x4B)
        {
          unsigned int v156 = v154[37];
          if (v154[37]) {
            goto LABEL_230;
          }
        }
      }
      else if (v155 >= 0x49)
      {
        unsigned int v156 = v154[36];
        if (v154[36])
        {
LABEL_230:
          int v157 = *(unsigned __int16 *)((char *)v149 + v156);
          goto LABEL_232;
        }
      }
      int v157 = 0xFFFF;
LABEL_232:
      int v158 = v157 - v153;
      if (v158 > 18000) {
        v158 -= 36000;
      }
      if (v158 < -17999) {
        v158 += 36000;
      }
      *(double *)(a3 + 160) = *(double *)(a3 + 160) + fabs((double)v158 / 100.0);
      if (v144)
      {
        if (v146 >= 0x51 && v145[40] && (*(_WORD *)((unsigned char *)v143 + v145[40]) & 8) != 0) {
          goto LABEL_252;
        }
      }
      else if (v146 >= 0x51 && v145[40] && (*(_WORD *)((unsigned char *)v143 + v145[40]) & 0x80) != 0)
      {
LABEL_252:
        *(double *)(a3 + 40) = *(double *)(a3 + 40) + 1.0;
        goto LABEL_253;
      }
      if (v150)
      {
        if (v155 >= 0x51 && v154[40] && (*(_WORD *)((unsigned char *)v149 + v154[40]) & 0x20) != 0) {
          goto LABEL_252;
        }
      }
      else if (v155 >= 0x51 && v154[40] && (*(_WORD *)((unsigned char *)v149 + v154[40]) & 2) != 0)
      {
        goto LABEL_252;
      }
LABEL_253:
      if (v146 >= 0x39 && v145[28] && (*((unsigned char *)v143 + v145[28] + 1) & 1) != 0)
      {
        if (v134) {
          goto LABEL_265;
        }
      }
      else
      {
        if (v155 >= 0x39 && v154[28] && (*((unsigned char *)v149 + v154[28] + 1) & 1) != 0)
        {
          int v134 = 1;
LABEL_270:
          if (v146 < 0xB)
          {
            int v159 = 0;
            if (v155 >= 0xB) {
              goto LABEL_278;
            }
            goto LABEL_280;
          }
          goto LABEL_271;
        }
        if (!v134 || v146 < 0x39) {
          goto LABEL_270;
        }
        if (v145[28] && (*((unsigned char *)v143 + v145[28] + 1) & 1) != 0)
        {
LABEL_265:
          if (v155 < 0x39 || !v154[28] || (*((unsigned char *)v149 + v154[28] + 1) & 1) == 0)
          {
            int v134 = 0;
            *(double *)(a3 + 64) = *(double *)(a3 + 64) + 1.0;
          }
        }
      }
LABEL_271:
      if (v145[5])
      {
        int v159 = 1;
        if ((*((unsigned char *)v143 + v145[5] + 3) & 1) != 0 || v155 < 0xB) {
          goto LABEL_280;
        }
LABEL_278:
        if (!v154[5] || (*((unsigned char *)v149 + v154[5] + 3) & 1) == 0) {
          goto LABEL_280;
        }
        int v135 = 1;
        unint64_t v125 = v136 + 1;
      }
      else
      {
        int v159 = 1;
        if (v155 >= 0xB) {
          goto LABEL_278;
        }
LABEL_280:
        if (v135)
        {
          if (v159)
          {
            uint64_t v160 = v145[5];
            if (v160)
            {
              if ((*((unsigned char *)v143 + v160 + 3) & 1) != 0
                && (v155 < 0xB || !v154[5] || (*((unsigned char *)v149 + v154[5] + 3) & 1) == 0))
              {
                int v135 = 0;
                *(double *)(a3 + 56) = *(double *)(a3 + 56) + 1.0;
                unint64_t v125 = v136 + 1;
              }
            }
          }
        }
      }
    }
  }
  if (v126 && v127 < sub_470ADC(v126)) {
    goto LABEL_199;
  }
LABEL_289:
  if (__p)
  {
    v177 = (char *)__p;
    operator delete(__p);
  }
  if (v181 < 0) {
    operator delete((void *)v180);
  }
}

void sub_106186C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    if (*(char *)(v26 - 137) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v26 - 160));
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v26 - 137) < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(exception_object);
}

char *sub_10618F0(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v7 = *(_DWORD **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    char v9 = *(_DWORD **)a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a1) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v14 = 12 * v13;
    uint64_t v15 = (char *)operator new(12 * v13);
    int v16 = &v15[12 * v10];
    *(void *)int v16 = *a2;
    *((_DWORD *)v16 + 2) = *a3;
    for (unint64_t i = v16 + 12; v7 != v9; *((_DWORD *)v16 + 2) = v18)
    {
      uint64_t v17 = *(void *)(v7 - 3);
      v7 -= 3;
      int v18 = v7[2];
      *(void *)(v16 - 12) = v17;
      v16 -= 12;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v15[v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    v7[2] = *a3;
    unint64_t i = (char *)(v7 + 3);
  }
  *(void *)(a1 + 8) = i;
  return i - 12;
}

uint64_t sub_1061A28(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  char v9 = (unsigned int *)result;
LABEL_2:
  unint64_t v10 = a2 - 3;
  unint64_t v11 = v9;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    char v9 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v25 = *(a2 - 2) | ((unint64_t)*(a2 - 3) << 32);
          unint64_t v26 = v9[1] | ((unint64_t)*v9 << 32);
          if (v25 < v26 || v26 >= v25 && (int)*(a2 - 1) < (int)v9[2])
          {
            uint64_t v27 = *(void *)v9;
            *(void *)char v9 = *(void *)(a2 - 3);
            *(void *)(a2 - 3) = v27;
            LODWORD(v27) = v9[2];
            uint64_t v9[2] = *(a2 - 1);
            *(a2 - 1) = v27;
          }
          break;
        case 3uLL:
          uint64_t result = sub_1061FF4(v9, v9 + 3, v10);
          break;
        case 4uLL:
          uint64_t result = sub_106278C(v9, v9 + 3, v9 + 6, v10);
          break;
        case 5uLL:
          uint64_t result = sub_10628CC(v9, v9 + 3, v9 + 6, v9 + 9, v10);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 287) {
      break;
    }
    if (v12 == 1)
    {
      if (v9 != a2)
      {
        unint64_t v45 = (v15 - 2) >> 1;
        unint64_t v46 = v45 + 1;
        char v47 = &v9[3 * v45];
        do
        {
          sub_1062A74((uint64_t)v9, a3, v15, v47);
          v47 -= 3;
          --v46;
        }
        while (v46);
        unint64_t v48 = v14 / 0xCuLL;
        do
        {
          uint64_t result = (uint64_t)sub_1062C1C(v9, (uint64_t)a2, a3, v48);
          a2 -= 3;
        }
        while (v48-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v9[3 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x601)
    {
      sub_1061FF4(v17, v9, v10);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_1061FF4(v9, v17, v10);
      int v18 = &v9[3 * v16];
      sub_1061FF4(v9 + 3, v18 - 3, a2 - 6);
      sub_1061FF4(v9 + 6, &v9[3 * v16 + 3], a2 - 9);
      sub_1061FF4(v18 - 3, v17, &v9[3 * v16 + 3]);
      uint64_t v19 = *(void *)v9;
      *(void *)char v9 = *(void *)v17;
      *(void *)uint64_t v17 = v19;
      LODWORD(v19) = v9[2];
      uint64_t v9[2] = v18[2];
      v18[2] = v19;
      if (a5) {
        goto LABEL_15;
      }
    }
    unint64_t v20 = *(v9 - 2) | ((unint64_t)*(v9 - 3) << 32);
    unint64_t v21 = v9[1] | ((unint64_t)*v9 << 32);
    if (v20 >= v21 && (v21 < v20 || (int)*(v9 - 1) >= (int)v9[2]))
    {
      uint64_t result = (uint64_t)sub_10621BC(v9, (unint64_t)a2);
      unint64_t v11 = (unsigned int *)result;
      goto LABEL_20;
    }
LABEL_15:
    BOOL v22 = (unsigned int *)sub_106237C((uint64_t *)v9, (unint64_t)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v24 = sub_10624E4(v9, v22);
    unint64_t v11 = v22 + 3;
    uint64_t result = sub_10624E4(v22 + 3, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_18:
      uint64_t result = sub_1061A28(v9, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 3;
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  double v28 = v9 + 3;
  BOOL v30 = v9 == a2 || v28 == a2;
  if (a5)
  {
    if (v30) {
      return result;
    }
    uint64_t v31 = 0;
    char v32 = v9;
LABEL_48:
    uint64_t v33 = v32;
    char v32 = v28;
    unint64_t v34 = v33[4] | ((unint64_t)v33[3] << 32);
    unint64_t v35 = v33[1] | ((unint64_t)*v33 << 32);
    if (v34 >= v35)
    {
      if (v35 < v34) {
        goto LABEL_47;
      }
      signed int v36 = v33[5];
      if (v36 >= (int)v33[2]) {
        goto LABEL_47;
      }
    }
    else
    {
      signed int v36 = v33[5];
    }
    uint64_t v37 = *(void *)(v33 + 3);
    *(void *)(v33 + 3) = *(void *)v33;
    v32[2] = v33[2];
    double v38 = v9;
    if (v33 == v9) {
      goto LABEL_46;
    }
    unint64_t v39 = __ROR8__(v37, 32);
    uint64_t v40 = v31;
    while (1)
    {
      unint64_t v43 = (char *)v9 + v40;
      unint64_t v44 = *(unsigned int *)((char *)v9 + v40 - 8) | ((unint64_t)*(unsigned int *)((char *)v9 + v40 - 12) << 32);
      if (v39 >= v44)
      {
        if (v44 < v39)
        {
          double v38 = (unsigned int *)((char *)v9 + v40);
          goto LABEL_46;
        }
        signed int v41 = *(unsigned int *)((char *)v9 + v40 - 4);
        if (v36 >= v41)
        {
          double v38 = v33;
LABEL_46:
          *(void *)double v38 = v37;
          v38[2] = v36;
LABEL_47:
          double v28 = v32 + 3;
          v31 += 12;
          if (v32 + 3 == a2) {
            return result;
          }
          goto LABEL_48;
        }
      }
      else
      {
        signed int v41 = *((_DWORD *)v43 - 1);
      }
      v33 -= 3;
      uint64_t v42 = (char *)v9 + v40;
      *(void *)uint64_t v42 = *(void *)(v43 - 12);
      *((_DWORD *)v42 + 2) = v41;
      v40 -= 12;
      if (!v40)
      {
        double v38 = v9;
        goto LABEL_46;
      }
    }
  }
  if (!v30)
  {
    while (1)
    {
      uint64_t v50 = v9;
      char v9 = v28;
      unint64_t v51 = v50[4] | ((unint64_t)v50[3] << 32);
      unint64_t v52 = v50[1] | ((unint64_t)*v50 << 32);
      if (v51 < v52) {
        break;
      }
      if (v52 >= v51)
      {
        signed int v53 = v50[5];
        if (v53 < (int)v50[2]) {
          goto LABEL_75;
        }
      }
LABEL_72:
      double v28 = v9 + 3;
      if (v9 + 3 == a2) {
        return result;
      }
    }
    signed int v53 = v50[5];
LABEL_75:
    uint64_t v54 = *(void *)v28;
    unint64_t v55 = __ROR8__(*(void *)v28, 32);
    do
    {
      do
      {
        uint64_t v56 = v50;
        *(void *)(v50 + 3) = *(void *)v50;
        v50[5] = v50[2];
        unsigned int v57 = *(v50 - 3);
        v50 -= 3;
        unint64_t v58 = *(v56 - 2) | ((unint64_t)v57 << 32);
      }
      while (v55 < v58);
    }
    while (v58 >= v55 && v53 < (int)*(v56 - 1));
    *(void *)uint64_t v56 = v54;
    v56[2] = v53;
    goto LABEL_72;
  }
  return result;
}

uint64_t sub_1061FF4(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3 = a2[1] | ((unint64_t)*a2 << 32);
  unint64_t v4 = a1[1] | ((unint64_t)*a1 << 32);
  if (v3 >= v4 && (v4 < v3 || (int)a2[2] >= (int)a1[2]))
  {
    unint64_t v10 = a3[1] | ((unint64_t)*a3 << 32);
    if (v10 < v3) {
      goto LABEL_7;
    }
    if (v3 < v10) {
      return 0;
    }
    if ((int)a3[2] < (int)a2[2])
    {
LABEL_7:
      uint64_t v11 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v11;
      uint64_t v12 = (int *)(a2 + 2);
      LODWORD(v11) = a2[2];
      a2[2] = a3[2];
      a3[2] = v11;
      unint64_t v13 = a2[1] | ((unint64_t)*a2 << 32);
      unint64_t v14 = a1[1] | ((unint64_t)*a1 << 32);
      if (v13 < v14) {
        goto LABEL_8;
      }
      if (v14 < v13) {
        return 1;
      }
      if (*v12 < (int)a1[2])
      {
LABEL_8:
        uint64_t v15 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        unint64_t v16 = (int *)(a1 + 2);
        *(void *)a2 = v15;
        int v17 = *v16;
        *unint64_t v16 = *v12;
        *uint64_t v12 = v17;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v5 = a3[1] | ((unint64_t)*a3 << 32);
    if (v5 < v3 || v3 >= v5 && (int)a3[2] < (int)a2[2])
    {
      uint64_t v6 = *(void *)a1;
      *(void *)a1 = *(void *)a3;
      uint64_t v7 = (int *)(a1 + 2);
      *(void *)a3 = v6;
      uint64_t v8 = (int *)(a3 + 2);
      uint64_t v9 = 1;
LABEL_13:
      int v24 = *v7;
      *uint64_t v7 = *v8;
      int *v8 = v24;
      return v9;
    }
    uint64_t v19 = *(void *)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v19;
    signed int v20 = a1[2];
    a1[2] = a2[2];
    a2[2] = v20;
    unint64_t v21 = a3[1] | ((unint64_t)*a3 << 32);
    unint64_t v22 = a2[1] | ((unint64_t)*a2 << 32);
    if (v21 < v22)
    {
LABEL_12:
      uint64_t v23 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v23;
      uint64_t v8 = (int *)(a3 + 2);
      uint64_t v9 = 2;
      uint64_t v7 = (int *)(a2 + 2);
      goto LABEL_13;
    }
    if (v22 >= v21)
    {
      if ((int)a3[2] < v20) {
        goto LABEL_12;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unsigned int *sub_10621BC(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  signed int v3 = a1[2];
  unint64_t v4 = __ROR8__(*(void *)a1, 32);
  uint64_t v5 = *(unsigned int *)(a2 - 12);
  uint64_t v6 = *(unsigned int *)(a2 - 8);
  unint64_t v7 = v6 | (v5 << 32);
  if (v4 >= v7 && (v7 < v4 || v3 >= *(_DWORD *)(a2 - 4)))
  {
    for (unint64_t i = a1 + 3; (unint64_t)i < a2; i += 3)
    {
      unint64_t v22 = i[1] | ((unint64_t)*i << 32);
      if (v4 < v22 || v22 >= v4 && v3 < (int)i[2]) {
        break;
      }
    }
  }
  else
  {
    unint64_t i = a1 + 3;
    unint64_t v9 = a1[4] | ((unint64_t)a1[3] << 32);
    if (v4 >= v9)
    {
      unint64_t v10 = a1 + 7;
      do
      {
        if (v9 >= v4 && v3 < (int)*(v10 - 2)) {
          break;
        }
        unint64_t v9 = *v10 | ((unint64_t)*(v10 - 1) << 32);
        v10 += 3;
      }
      while (v4 >= v9);
      unint64_t i = v10 - 4;
    }
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 12; ; a2 -= 12)
    {
      unint64_t v11 = v6 | (v5 << 32);
      if (v4 >= v11 && (v11 < v4 || v3 >= *(_DWORD *)(a2 + 8))) {
        break;
      }
      uint64_t v5 = *(unsigned int *)(a2 - 12);
      uint64_t v6 = *(unsigned int *)(a2 - 8);
    }
  }
  if ((unint64_t)i >= a2)
  {
    uint64_t v12 = i;
  }
  else
  {
    uint64_t v12 = i;
    do
    {
      uint64_t v13 = *(void *)i;
      *(void *)unint64_t i = *(void *)a2;
      *(void *)a2 = v13;
      LODWORD(v13) = i[2];
      i[2] = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v13;
      uint64_t v14 = v12[3];
      uint64_t v15 = v12[4];
      v12 += 3;
      unint64_t v16 = v15 | (v14 << 32);
      if (v4 >= v16)
      {
        int v17 = i + 7;
        do
        {
          if (v16 >= v4 && v3 < (int)*(v17 - 2)) {
            break;
          }
          unint64_t v16 = *v17 | ((unint64_t)*(v17 - 1) << 32);
          v17 += 3;
        }
        while (v4 >= v16);
        uint64_t v12 = v17 - 4;
      }
      do
      {
        do
        {
          uint64_t v18 = *(unsigned int *)(a2 - 12);
          uint64_t v19 = *(unsigned int *)(a2 - 8);
          a2 -= 12;
          unint64_t v20 = v19 | (v18 << 32);
        }
        while (v4 < v20);
      }
      while (v20 >= v4 && v3 < *(_DWORD *)(a2 + 8));
      unint64_t i = v12;
    }
    while ((unint64_t)v12 < a2);
  }
  if (v12 - 3 != a1)
  {
    *(void *)a1 = *(void *)(v12 - 3);
    a1[2] = *(v12 - 1);
  }
  *(void *)(v12 - 3) = v2;
  *(v12 - 1) = v3;
  return v12;
}

unint64_t sub_106237C(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  unint64_t v5 = __ROR8__(*a1, 32);
  while (1)
  {
    unint64_t v6 = *(unsigned int *)((char *)a1 + v2 + 16) | ((unint64_t)*(unsigned int *)((char *)a1 + v2 + 12) << 32);
    if (v6 >= v5 && (v5 < v6 || *(_DWORD *)((char *)a1 + v2 + 20) >= v4)) {
      break;
    }
    v2 += 12;
  }
  unint64_t v7 = (unint64_t)a1 + v2 + 12;
  if (v2)
  {
    do
    {
      uint64_t v8 = *(unsigned int *)(a2 - 12);
      uint64_t v9 = *(unsigned int *)(a2 - 8);
      a2 -= 12;
      unint64_t v10 = v9 | (v8 << 32);
    }
    while (v10 >= v5 && (v5 < v10 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v7 < a2)
    {
      do
      {
        uint64_t v11 = *(unsigned int *)(a2 - 12);
        uint64_t v12 = *(unsigned int *)(a2 - 8);
        a2 -= 12;
        unint64_t v13 = v12 | (v11 << 32);
        if (v13 < v5) {
          break;
        }
        if (v5 < v13) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v7 < a2);
    }
  }
  unint64_t v15 = v7;
  if (v7 < a2)
  {
    unint64_t v16 = a2;
    do
    {
      uint64_t v17 = *(void *)v15;
      *(void *)unint64_t v15 = *(void *)v16;
      *(void *)unint64_t v16 = v17;
      LODWORD(v17) = *(_DWORD *)(v15 + 8);
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
      *(_DWORD *)(v16 + 8) = v17;
      do
      {
        do
        {
          uint64_t v18 = *(unsigned int *)(v15 + 12);
          uint64_t v19 = *(unsigned int *)(v15 + 16);
          v15 += 12;
          unint64_t v20 = v19 | (v18 << 32);
        }
        while (v20 < v5);
      }
      while (v5 >= v20 && *(_DWORD *)(v15 + 8) < v4);
      do
      {
        uint64_t v21 = *(unsigned int *)(v16 - 12);
        uint64_t v22 = *(unsigned int *)(v16 - 8);
        v16 -= 12;
        unint64_t v23 = v22 | (v21 << 32);
      }
      while (v23 >= v5 && (v5 < v23 || *(_DWORD *)(v16 + 8) >= v4));
    }
    while (v15 < v16);
  }
  if ((uint64_t *)(v15 - 12) != a1)
  {
    *a1 = *(void *)(v15 - 12);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v15 - 4);
  }
  *(void *)(v15 - 12) = v3;
  *(_DWORD *)(v15 - 4) = v4;
  return v15 - 12;
}

BOOL sub_10624E4(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v20 = *(a2 - 2) | ((unint64_t)*(a2 - 3) << 32);
      unint64_t v21 = a1[1] | ((unint64_t)*a1 << 32);
      if (v20 < v21 || v21 >= v20 && (int)*(a2 - 1) < (int)a1[2])
      {
        uint64_t v22 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 3);
        *(void *)(a2 - 3) = v22;
        LODWORD(v22) = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v22;
      }
      return result;
    case 3uLL:
      sub_1061FF4(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_106278C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_10628CC(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      unint64_t v6 = a1 + 6;
      sub_1061FF4(a1, a1 + 3, a1 + 6);
      unint64_t v7 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    unint64_t v11 = v7[1] | ((unint64_t)*v7 << 32);
    unint64_t v12 = v6[1] | ((unint64_t)*v6 << 32);
    if (v11 >= v12)
    {
      if (v12 < v11) {
        goto LABEL_7;
      }
      signed int v13 = v7[2];
      if (v13 >= (int)v6[2]) {
        goto LABEL_7;
      }
    }
    else
    {
      signed int v13 = v7[2];
    }
    uint64_t v14 = *(void *)v7;
    *(void *)unint64_t v7 = *(void *)v6;
    v7[2] = v6[2];
    uint64_t v10 = (uint64_t)a1;
    if (v6 == a1) {
      goto LABEL_6;
    }
    unint64_t v15 = __ROR8__(v14, 32);
    uint64_t v16 = v8;
    while (1)
    {
      uint64_t v18 = (char *)a1 + v16;
      unint64_t v19 = *(unsigned int *)((char *)a1 + v16 + 16) | ((unint64_t)*(unsigned int *)((char *)a1 + v16 + 12) << 32);
      if (v15 < v19)
      {
        signed int v17 = *((_DWORD *)v18 + 5);
        goto LABEL_15;
      }
      if (v19 < v15) {
        break;
      }
      signed int v17 = *(unsigned int *)((char *)a1 + v16 + 20);
      if (v13 >= v17)
      {
        uint64_t v10 = (uint64_t)a1 + v16 + 24;
        goto LABEL_6;
      }
LABEL_15:
      v6 -= 3;
      *((void *)v18 + 3) = *(void *)(v18 + 12);
      *(unsigned int *)((char *)a1 + v16 + 32) = v17;
      v16 -= 12;
      if (v16 == -24)
      {
        uint64_t v10 = (uint64_t)a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = (uint64_t)v6;
LABEL_6:
    *(void *)uint64_t v10 = v14;
    *(_DWORD *)(v10 + 8) = v13;
    if (++v9 == 8) {
      return v7 + 3 == a2;
    }
LABEL_7:
    unint64_t v6 = v7;
    v8 += 12;
    v7 += 3;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

uint64_t sub_106278C(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_1061FF4(a1, a2, a3);
  unint64_t v9 = a4[1] | ((unint64_t)*a4 << 32);
  unint64_t v10 = a3[1] | ((unint64_t)*a3 << 32);
  if (v9 < v10 || v10 >= v9 && (int)a4[2] < (int)a3[2])
  {
    uint64_t v11 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v11;
    LODWORD(v11) = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    unint64_t v12 = a3[1] | ((unint64_t)*a3 << 32);
    unint64_t v13 = a2[1] | ((unint64_t)*a2 << 32);
    if (v12 < v13 || v13 >= v12 && (int)a3[2] < (int)a2[2])
    {
      uint64_t v14 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v14;
      LODWORD(v14) = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      unint64_t v15 = a2[1] | ((unint64_t)*a2 << 32);
      unint64_t v16 = a1[1] | ((unint64_t)*a1 << 32);
      if (v15 < v16 || v16 >= v15 && (int)a2[2] < (int)a1[2])
      {
        uint64_t v17 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v17;
        LODWORD(v17) = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_10628CC(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_106278C(a1, a2, a3, a4);
  unint64_t v11 = a5[1] | ((unint64_t)*a5 << 32);
  unint64_t v12 = a4[1] | ((unint64_t)*a4 << 32);
  if (v11 < v12 || v12 >= v11 && (int)a5[2] < (int)a4[2])
  {
    uint64_t v13 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v13;
    LODWORD(v13) = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    unint64_t v14 = a4[1] | ((unint64_t)*a4 << 32);
    unint64_t v15 = a3[1] | ((unint64_t)*a3 << 32);
    if (v14 < v15 || v15 >= v14 && (int)a4[2] < (int)a3[2])
    {
      uint64_t v16 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v16;
      LODWORD(v16) = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      unint64_t v17 = a3[1] | ((unint64_t)*a3 << 32);
      unint64_t v18 = a2[1] | ((unint64_t)*a2 << 32);
      if (v17 < v18 || v18 >= v17 && (int)a3[2] < (int)a2[2])
      {
        uint64_t v19 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v19;
        LODWORD(v19) = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        unint64_t v20 = a2[1] | ((unint64_t)*a2 << 32);
        unint64_t v21 = a1[1] | ((unint64_t)*a1 << 32);
        if (v20 < v21 || v21 >= v20 && (int)a2[2] < (int)a1[2])
        {
          uint64_t v22 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v22;
          LODWORD(v22) = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1062A74(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      unint64_t v6 = (unsigned int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        unint64_t v7 = v6[1] | ((unint64_t)*v6 << 32);
        unint64_t v8 = v6[4] | ((unint64_t)v6[3] << 32);
        if (v7 < v8 || v8 >= v7 && *(_DWORD *)(result + 12 * v5 + 8) < (signed int)v6[5])
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      unint64_t v9 = v6[1] | ((unint64_t)*v6 << 32);
      unint64_t v10 = a4[1] | ((unint64_t)*a4 << 32);
      if (v9 >= v10)
      {
        if (v10 >= v9)
        {
          signed int v11 = a4[2];
          if ((int)v6[2] < v11) {
            return result;
          }
        }
        else
        {
          signed int v11 = a4[2];
        }
        uint64_t v12 = *(void *)a4;
        *(void *)a4 = *(void *)v6;
        a4[2] = v6[2];
        if (v4 >= v5)
        {
          unint64_t v14 = __ROR8__(v12, 32);
          while (1)
          {
            uint64_t v15 = 2 * v5;
            uint64_t v5 = (2 * v5) | 1;
            uint64_t v13 = (unsigned int *)(result + 12 * v5);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unint64_t v17 = v13[1] | ((unint64_t)*v13 << 32);
              unint64_t v18 = v13[4] | ((unint64_t)v13[3] << 32);
              if (v17 < v18 || v18 >= v17 && *(_DWORD *)(result + 12 * v5 + 8) < (signed int)v13[5])
              {
                v13 += 3;
                uint64_t v5 = v16;
              }
            }
            unint64_t v19 = v13[1] | ((unint64_t)*v13 << 32);
            if (v19 < v14 || v14 >= v19 && (int)v13[2] < v11) {
              break;
            }
            *(void *)unint64_t v6 = *(void *)v13;
            v6[2] = v13[2];
            unint64_t v6 = v13;
            if (v4 < v5) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v13 = v6;
LABEL_14:
        *(void *)uint64_t v13 = v12;
        v13[2] = v11;
      }
    }
  }
  return result;
}

unsigned int *sub_1062C1C(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)result;
    unsigned int v6 = result[2];
    unint64_t v7 = result;
    do
    {
      unint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      v7 += 3 * v4 + 3;
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        unint64_t v12 = v7[1] | ((unint64_t)*v7 << 32);
        unint64_t v13 = v7[4] | ((unint64_t)v7[3] << 32);
        if (v12 < v13 || v13 >= v12 && (int)v8[3 * v9 + 2] < (int)v7[5])
        {
          v7 += 3;
          uint64_t v4 = v11;
        }
      }
      *(void *)unint64_t v8 = *(void *)v7;
      v8[2] = v7[2];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (unsigned int *)(a2 - 12))
    {
      *(void *)unint64_t v7 = v5;
      v7[2] = v6;
      return result;
    }
    *(void *)unint64_t v7 = *(void *)(a2 - 12);
    v7[2] = *(_DWORD *)(a2 - 4);
    *(void *)(a2 - 12) = v5;
    *(_DWORD *)(a2 - 4) = v6;
    uint64_t v14 = (char *)v7 - (char *)result + 12;
    if (v14 >= 13)
    {
      unint64_t v15 = v14 / 0xCuLL - 2;
      unint64_t v16 = v15 >> 1;
      unint64_t v17 = &result[3 * (v15 >> 1)];
      unint64_t v18 = v17[1] | ((unint64_t)*v17 << 32);
      unint64_t v19 = v7[1] | ((unint64_t)*v7 << 32);
      if (v18 >= v19)
      {
        if (v19 < v18) {
          return result;
        }
        signed int v20 = v7[2];
        if ((int)result[3 * v16 + 2] >= v20) {
          return result;
        }
      }
      else
      {
        signed int v20 = v7[2];
      }
      uint64_t v21 = *(void *)v7;
      *(void *)unint64_t v7 = *(void *)v17;
      v7[2] = result[3 * v16 + 2];
      if (v15 >= 2)
      {
        unint64_t v23 = __ROR8__(v21, 32);
        while (1)
        {
          unint64_t v25 = v16 - 1;
          unint64_t v16 = (v16 - 1) >> 1;
          uint64_t v22 = &result[3 * v16];
          unint64_t v26 = v22[1] | ((unint64_t)*v22 << 32);
          if (v26 < v23)
          {
            signed int v24 = result[3 * v16 + 2];
          }
          else
          {
            if (v23 < v26) {
              break;
            }
            signed int v24 = result[3 * v16 + 2];
            if (v24 >= v20) {
              break;
            }
          }
          *(void *)unint64_t v17 = *(void *)v22;
          v17[2] = v24;
          unint64_t v17 = &result[3 * v16];
          if (v25 <= 1) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v22 = v17;
LABEL_19:
      *(void *)uint64_t v22 = v21;
      void v22[2] = v20;
    }
  }
  return result;
}

void sub_1062E00()
{
  byte_25FDB27 = 1;
  word_25FDB10 = 65;
  byte_25FDB3F = 1;
  word_25FDB28 = 65;
  __int16 v3 = 17;
  strcpy(v2, "segment_curviness");
  __int16 v5 = 262;
  strcpy((char *)v4, "length");
  __int16 v7 = 529;
  strcpy(v6, "length_on_ferries");
  HIBYTE(v8[2]) = 21;
  strcpy((char *)v8, "num_impeding_barriers");
  char v9 = 3;
  HIBYTE(v10[2]) = 16;
  strcpy((char *)v10, "num_name_changes");
  char v11 = 4;
  unint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8890;
  strcpy((char *)v12, "num_dangerous_zone_violations");
  char v14 = 5;
  unint64_t v15 = operator new(0x28uLL);
  long long v16 = xmmword_20B9390;
  strcpy((char *)v15, "num_terminal_use_zone_violations");
  char v17 = 6;
  __int16 v19 = 1806;
  strcpy((char *)v18, "traversal_time");
  HIBYTE(v20[2]) = 22;
  strcpy((char *)v20, "display_traversal_time");
  char v21 = 8;
  v22[0] = operator new(0x20uLL);
  v22[1] = &dword_1C + 3;
  unint64_t v23 = 0x8000000000000020;
  strcpy((char *)v22[0], "time_violating_avoid_busy_roads");
  char v24 = 9;
  v25[0] = operator new(0x20uLL);
  v25[1] = &dword_18 + 3;
  unint64_t v26 = 0x8000000000000020;
  strcpy((char *)v25[0], "time_violating_avoid_stairs");
  char v27 = 10;
  v28[0] = operator new(0x28uLL);
  v28[1] = &stru_20;
  unint64_t v29 = 0x8000000000000028;
  strcpy((char *)v28[0], "time_violating_avoid_steep_hills");
  char v30 = 11;
  strcpy((char *)v31, "time_on_dangerous_road");
  HIBYTE(v31[2]) = 22;
  char v32 = 12;
  HIBYTE(v33[2]) = 20;
  strcpy((char *)v33, "time_on_terminal_fow");
  char v34 = 13;
  v0 = operator new(0x20uLL);
  unint64_t v36 = 0x8000000000000020;
  v35[0] = v0;
  v35[1] = &dword_18 + 3;
  strcpy((char *)v0, "time_on_pathway_fow_in_park");
  char v37 = 14;
  uint64_t v1 = operator new(0x20uLL);
  unint64_t v39 = 0x8000000000000020;
  v38[0] = v1;
  v38[1] = &dword_1C + 3;
  strcpy((char *)v1, "time_on_named_trail_fow_in_park");
  char v40 = 15;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_18 + 2;
  strcpy((char *)v41[0], "time_on_duplicate_segments");
  char v43 = 16;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_18 + 1;
  strcpy((char *)v44[0], "uses_contingency_terminal");
  char v46 = 17;
  *(_WORD *)((char *)&v47[2] + 7) = 4624;
  strcpy((char *)v47, "route_jaggedness");
  v48[0] = operator new(0x20uLL);
  unint64_t v49 = 0x8000000000000020;
  v48[1] = &dword_18 + 1;
  strcpy((char *)v48[0], "extra_elevation_change_cm");
  char v50 = 19;
  v51[0] = operator new(0x20uLL);
  unint64_t v52 = 0x8000000000000020;
  v51[1] = &dword_1C + 1;
  strcpy((char *)v51[0], "extra_elevation_violations_cm");
  char v53 = 20;
  *(_WORD *)((char *)&v54[2] + 7) = 5393;
  strcpy((char *)v54, "hiking_difficulty");
  *(_WORD *)((char *)&v55[2] + 7) = 5650;
  strcpy((char *)v55, "time_inside_a_park");
  v56[0] = operator new(0x20uLL);
  unint64_t v57 = 0x8000000000000020;
  v56[1] = &dword_18 + 3;
  strcpy((char *)v56[0], "normalized_park_probe_count");
  char v58 = 23;
  __p[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v61 = 24;
  xmmword_25FDB40 = 0u;
  *(_OWORD *)&qword_25FDB50 = 0u;
  dword_25FDB60 = 1065353216;
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v2, (uint64_t)v2);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v4, (uint64_t)v4);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v6, (uint64_t)v6);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v8, (uint64_t)v8);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v10, (uint64_t)v10);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)&v12, (uint64_t)&v12);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)&v15, (uint64_t)&v15);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v18, (uint64_t)v18);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v20, (uint64_t)v20);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v22, (uint64_t)v22);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v25, (uint64_t)v25);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v28, (uint64_t)v28);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v31, (uint64_t)v31);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v33, (uint64_t)v33);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v35, (uint64_t)v35);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v38, (uint64_t)v38);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v41, (uint64_t)v41);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v44, (uint64_t)v44);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v47, (uint64_t)v47);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v48, (uint64_t)v48);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v51, (uint64_t)v51);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v54, (uint64_t)v54);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v55, (uint64_t)v55);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)v56, (uint64_t)v56);
  sub_CDC48C((uint64_t)&xmmword_25FDB40, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v55[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v56[0]);
  if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v54[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v55[0]);
  if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v54[0]);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v51[0]);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v38[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v35[0]);
  if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v33[0]);
  if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v31[0]);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v28[0]);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v25[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v22[0]);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20[0]);
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v18[0]);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v15);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v12);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v10[0]);
  if ((SHIBYTE(v8[2]) & 0x80000000) == 0)
  {
LABEL_23:
    if (((char)v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v8[0]);
  if (((char)v7 & 0x80000000) == 0)
  {
LABEL_24:
    if (((char)v5 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*(void **)v6);
  if (((char)v5 & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v3 & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)v2);
    return;
  }
LABEL_50:
  operator delete(v4[0]);
  if ((char)v3 < 0) {
    goto LABEL_51;
  }
}

void sub_1063844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  char v21 = v19;
  while (1)
  {
    if (*((char *)v21 - 9) < 0) {
      operator delete(*(v21 - 4));
    }
    v21 -= 4;
    if (v21 == &a19) {
      _Unwind_Resume(a1);
    }
  }
}

_OWORD *sub_1063B80(_OWORD *a1, void *a2, uint64_t a3)
{
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "linear");
  __int16 v5 = (void *)sub_560F4(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  unsigned int v6 = (void *)sub_560F4(v5, a3);
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "criteria_properties");
  uint64_t v7 = sub_560F4(v6, (uint64_t)__p);
  uint64_t v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    char v9 = *(uint64_t **)(v8 + 16);
    if (!v9) {
      return a1;
    }
  }
  else
  {
    char v9 = *(uint64_t **)(v7 + 16);
    if (!v9) {
      return a1;
    }
  }
  do
  {
    if (!sub_1063F7C(&xmmword_25FDB98, (uint64_t)(v9 + 2)))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      unint64_t v15 = std::string::append(&v19, "' supplied in WalkingRouteScoring config.");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      char v17 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
    }
    uint64_t v10 = sub_1063F7C(&xmmword_25FDB98, (uint64_t)(v9 + 2));
    if (!v10) {
      sub_5AE8("unordered_map::at: key not found");
    }
    if (*((_DWORD *)v9 + 12) != 2)
    {
      unint64_t v18 = __cxa_allocate_exception(8uLL);
      *unint64_t v18 = &off_23FDF58;
    }
    uint64_t v11 = *((unsigned __int8 *)v10 + 40);
    unint64_t v12 = (void *)v9[5];
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "weight");
    *(double *)&a1[v11] = sub_5C7E8(v12, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "non_zero_penalty");
    *((double *)&a1[v11] + 1) = sub_5C7E8(v12, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    char v9 = (uint64_t *)*v9;
  }
  while (v9);
  return a1;
}

void sub_1063E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1063ECC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x190uLL);
}

uint64_t sub_1063ED4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v4 = 0;
      *(void *)(v2 + 216) = 0;
      double v5 = *(double *)(v2 + 224);
      double v6 = 0.0;
      do
      {
        uint64_t v7 = byte_20F1E5B[v4];
        double v8 = *(double *)(v2 + 16 + 8 * v7);
        double v9 = v8 * *(double *)(result + 16 * v7);
        if (v8 > 0.0) {
          double v9 = v9 + *(double *)(result + 16 * v7 + 8);
        }
        double v6 = v6 + v9;
        *(double *)(v2 + 216) = v6;
        BOOL v10 = v7 > 0x14;
        int v11 = (1 << v7) & 0x100600;
        if (!v10 && v11 != 0)
        {
          double v5 = v5 + v9;
          *(double *)(v2 + 224) = v5;
        }
        ++v4;
      }
      while (v4 != 25);
      v2 += 232;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t *sub_1063F7C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    long long v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          long long v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        long long v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_10641AC()
{
  __int16 v3 = 17;
  strcpy(v2, "segment_curviness");
  __int16 v5 = 262;
  strcpy((char *)v4, "length");
  __int16 v7 = 529;
  strcpy(v6, "length_on_ferries");
  __int16 v9 = 789;
  strcpy(v8, "num_impeding_barriers");
  HIBYTE(v10[2]) = 16;
  strcpy((char *)v10, "num_name_changes");
  char v11 = 4;
  unint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8890;
  strcpy((char *)v12, "num_dangerous_zone_violations");
  char v14 = 5;
  uint64_t v15 = operator new(0x28uLL);
  long long v16 = xmmword_20B9390;
  strcpy((char *)v15, "num_terminal_use_zone_violations");
  char v17 = 6;
  __int16 v19 = 1806;
  strcpy((char *)v18, "traversal_time");
  HIBYTE(v20[2]) = 22;
  strcpy((char *)v20, "display_traversal_time");
  char v21 = 8;
  v22[0] = operator new(0x20uLL);
  v22[1] = &dword_1C + 3;
  unint64_t v23 = 0x8000000000000020;
  strcpy((char *)v22[0], "time_violating_avoid_busy_roads");
  char v24 = 9;
  v25[0] = operator new(0x20uLL);
  v25[1] = &dword_18 + 3;
  unint64_t v26 = 0x8000000000000020;
  strcpy((char *)v25[0], "time_violating_avoid_stairs");
  char v27 = 10;
  v28[0] = operator new(0x28uLL);
  v28[1] = &stru_20;
  unint64_t v29 = 0x8000000000000028;
  strcpy((char *)v28[0], "time_violating_avoid_steep_hills");
  char v30 = 11;
  strcpy((char *)v31, "time_on_dangerous_road");
  HIBYTE(v31[2]) = 22;
  char v32 = 12;
  HIBYTE(v33[2]) = 20;
  strcpy((char *)v33, "time_on_terminal_fow");
  char v34 = 13;
  v0 = operator new(0x20uLL);
  unint64_t v36 = 0x8000000000000020;
  v35[0] = v0;
  v35[1] = &dword_18 + 3;
  strcpy((char *)v0, "time_on_pathway_fow_in_park");
  char v37 = 14;
  uint64_t v1 = operator new(0x20uLL);
  unint64_t v39 = 0x8000000000000020;
  v38[0] = v1;
  v38[1] = &dword_1C + 3;
  strcpy((char *)v1, "time_on_named_trail_fow_in_park");
  char v40 = 15;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_18 + 2;
  strcpy((char *)v41[0], "time_on_duplicate_segments");
  char v43 = 16;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_18 + 1;
  strcpy((char *)v44[0], "uses_contingency_terminal");
  char v46 = 17;
  *(_WORD *)((char *)&v47[2] + 7) = 4624;
  strcpy((char *)v47, "route_jaggedness");
  v48[0] = operator new(0x20uLL);
  unint64_t v49 = 0x8000000000000020;
  v48[1] = &dword_18 + 1;
  strcpy((char *)v48[0], "extra_elevation_change_cm");
  char v50 = 19;
  v51[0] = operator new(0x20uLL);
  unint64_t v52 = 0x8000000000000020;
  v51[1] = &dword_1C + 1;
  strcpy((char *)v51[0], "extra_elevation_violations_cm");
  char v53 = 20;
  *(_WORD *)((char *)&v54[2] + 7) = 5393;
  strcpy((char *)v54, "hiking_difficulty");
  *(_WORD *)((char *)&v55[2] + 7) = 5650;
  strcpy((char *)v55, "time_inside_a_park");
  v56[0] = operator new(0x20uLL);
  unint64_t v57 = 0x8000000000000020;
  v56[1] = &dword_18 + 3;
  strcpy((char *)v56[0], "normalized_park_probe_count");
  char v58 = 23;
  __p[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v61 = 24;
  xmmword_25FDB98 = 0u;
  *(_OWORD *)&qword_25FDBA8 = 0u;
  dword_25FDBB8 = 1065353216;
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v2, (uint64_t)v2);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v4, (uint64_t)v4);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v6, (uint64_t)v6);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v8, (uint64_t)v8);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v10, (uint64_t)v10);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)&v12, (uint64_t)&v12);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)&v15, (uint64_t)&v15);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v18, (uint64_t)v18);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v20, (uint64_t)v20);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v22, (uint64_t)v22);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v25, (uint64_t)v25);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v28, (uint64_t)v28);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v31, (uint64_t)v31);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v33, (uint64_t)v33);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v35, (uint64_t)v35);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v38, (uint64_t)v38);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v41, (uint64_t)v41);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v44, (uint64_t)v44);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v47, (uint64_t)v47);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v48, (uint64_t)v48);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v51, (uint64_t)v51);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v54, (uint64_t)v54);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v55, (uint64_t)v55);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)v56, (uint64_t)v56);
  sub_CDC48C((uint64_t)&xmmword_25FDB98, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v55[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v56[0]);
  if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v54[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v55[0]);
  if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v54[0]);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v51[0]);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v38[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v35[0]);
  if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v33[0]);
  if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v31[0]);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v28[0]);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v25[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v22[0]);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20[0]);
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v18[0]);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v15);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v12);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if (((char)v9 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v10[0]);
  if (((char)v9 & 0x80000000) == 0)
  {
LABEL_23:
    if (((char)v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(*(void **)v8);
  if (((char)v7 & 0x80000000) == 0)
  {
LABEL_24:
    if (((char)v5 & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_50:
    operator delete(v4[0]);
    if (((char)v3 & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_51:
    operator delete(*(void **)v2);
    goto LABEL_26;
  }
LABEL_49:
  operator delete(*(void **)v6);
  if ((char)v5 < 0) {
    goto LABEL_50;
  }
LABEL_25:
  if ((char)v3 < 0) {
    goto LABEL_51;
  }
LABEL_26:
  byte_25FDB7F = 1;
  word_25FDB68 = 65;
  byte_25FDB97 = 1;
  word_25FDB80 = 65;
}

void sub_1064BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  char v21 = v19;
  while (1)
  {
    if (*((char *)v21 - 9) < 0) {
      operator delete(*(v21 - 4));
    }
    v21 -= 4;
    if (v21 == &a19) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_1064F10(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_377754(a1);
  v68[0] = 0;
  v68[1] = 0;
  unint64_t v69 = 0;
  __int16 v7 = sub_4461D4(v6 + 16, a2, 1);
  if (!v7) {
    goto LABEL_85;
  }
  unint64_t v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 7u) {
    goto LABEL_85;
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 3);
  if (!v9 || *(_DWORD *)&v7[v9 + *(unsigned int *)&v7[v9]] <= HIDWORD(a2)) {
    goto LABEL_85;
  }
  sub_106557C(v6, a2, (unint64_t *)&v64);
  long long v66 = 0uLL;
  unint64_t v67 = 0;
  uint64_t v10 = sub_3750CC(a1);
  char v11 = v65;
  if (v64 != v65)
  {
    uint64_t v12 = v10;
    long long v13 = (unsigned char *)(v10 + 7774);
    if (*(unsigned char *)(v10 + 7774))
    {
      char v14 = (char *)v64 + 8;
LABEL_8:
      uint64_t v15 = *((void *)v14 - 1);
      long long v16 = sub_290DEC(v12 + 3896, v15, 1);
      if (!v16) {
        goto LABEL_78;
      }
      char v17 = &v16[-*(int *)v16];
      if (*(unsigned __int16 *)v17 < 5u) {
        goto LABEL_78;
      }
      uint64_t v18 = *((unsigned __int16 *)v17 + 2);
      if (!v18
        || *(_DWORD *)&v16[v18 + *(unsigned int *)&v16[v18]] <= (HIDWORD(v15) & 0x1FFFFFFFu)
        || !sub_295DB4(v12, v15 & 0x1FFFFFFFFFFFFFFFLL))
      {
        goto LABEL_78;
      }
      while (v14 != v11)
      {
        v14 += 8;
        if (*v13) {
          goto LABEL_8;
        }
      }
    }
    sub_382300((uint64_t)v81, a1, 1);
    uint64_t v20 = v64;
    __int16 v19 = v65;
    uint64_t v21 = *((void *)&v66 + 1);
    if (*((void *)&v66 + 1) >= v67)
    {
      uint64_t v22 = sub_1065ACC((uint64_t *)&v66);
    }
    else
    {
      sub_EB1D94(*((void *)&v66 + 1));
      uint64_t v22 = (char *)(v21 + 480);
    }
    unint64_t v23 = ((v19 - v20) >> 3) - 1;
    *((void *)&v66 + 1) = v22;
    sub_EB25D4((void *)v22 - 60, v23);
    char v24 = (uint64_t *)v65;
    if (v64 != v65)
    {
      char v25 = (uint64_t *)((char *)v64 + 8);
      if ((char *)v64 + 8 != v65)
      {
        do
        {
          uint64_t v28 = *(v25 - 1);
          uint64_t v27 = *v25;
          if (v28 == *v25 && ((*v25 ^ v28) & 0x1FFFFFFF00000000) == 0)
          {
            if (sub_EB2EC4(*((void *)&v66 + 1) - 480))
            {
              if ((v28 & 0x4000000000000000) == 0 && v28 < 0) {
                int v38 = 0x40000000;
              }
              else {
                int v38 = 0;
              }
              int v39 = ((unint64_t)v28 >> 33) & 0x10000000 | HIDWORD(v28) & 0xFFFFFFF | ((HIDWORD(v28) & 0x40000000u) >> 1);
              uint64_t v40 = v39 | v38;
              uint64_t v41 = *((void *)&v66 + 1);
              sub_ED9E74(v81, v28 | ((unint64_t)((2 * v39) & 0x60000000 | v40 & 0xFFFFFFF | (((v40 & 0x60000000) == 0x40000000) << 31)) << 32), (uint64_t)&v88);
              sub_EB2444(v41 - 480, v28 | (unint64_t)(v40 << 32), (long long *)&v88);
            }
            unint64_t v42 = (char **)sub_5231C(*((void *)&v66 + 1) - 480);
            sub_1065DA0(v42);
            uint64_t v43 = sub_EB2E60(*((void *)&v66 + 1) - 480);
            uint64_t v44 = *((void *)&v66 + 1);
            if (*((void *)&v66 + 1) >= v67)
            {
              unint64_t v26 = sub_1065ACC((uint64_t *)&v66);
            }
            else
            {
              sub_EB1D94(*((void *)&v66 + 1));
              unint64_t v26 = (char *)(v44 + 480);
            }
            v23 += ~v43;
            *((void *)&v66 + 1) = v26;
            sub_EB25D4((void *)v26 - 60, v23);
          }
          else
          {
            if ((v28 & 0x4000000000000000) == 0 && v28 < 0) {
              int v31 = 0x40000000;
            }
            else {
              int v31 = 0;
            }
            if ((v27 & 0x4000000000000000) == 0 && v27 < 0) {
              int v33 = 0x40000000;
            }
            else {
              int v33 = 0;
            }
            sub_1065C50(v81, *(v25 - 1) | ((((unint64_t)v28 >> 33) & 0x10000000 | HIDWORD(v28) & 0xFFFFFFF | ((HIDWORD(v28) & 0x40000000u) >> 1) | v31) << 32), *v25 | ((((unint64_t)v27 >> 33) & 0x10000000 | HIDWORD(v27) & 0xFFFFFFF | ((HIDWORD(*v25) & 0x40000000) >> 1) | v33) << 32), (uint64_t)&v88);
            uint16x4_t v34 = (uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v89), (int32x4_t)vceqzq_s64(v94)));
            v34.i16[0] = vmaxv_u16(v34);
            int v35 = (v92 != 0) & ~v34.i32[0];
            if (!v88) {
              int v35 = 0;
            }
            if (!v93) {
              int v35 = 0;
            }
            if (v35 == 1 && v95 != 0) {
              sub_EB258C(*((void *)&v66 + 1) - 480, (long long *)&v88);
            }
          }
          ++v25;
        }
        while (v25 != v24);
      }
    }
    if (sub_EB2EC4(*((void *)&v66 + 1) - 480))
    {
      uint64_t v45 = *((void *)v65 - 1);
      unsigned int v46 = HIDWORD(v45) & 0x40000000;
      if (v45 < 0 && v46 == 0) {
        int v48 = 0x40000000;
      }
      else {
        int v48 = 0;
      }
      int v49 = ((unint64_t)v45 >> 33) & 0x10000000 | HIDWORD(v45) & 0xFFFFFFF | (v46 >> 1);
      uint64_t v50 = v49 | v48;
      uint64_t v51 = *((void *)&v66 + 1);
      uint64_t v52 = *((void *)v65 - 1);
      sub_ED9E74(v81, v52 | ((unint64_t)((2 * v49) & 0x60000000 | v50 & 0xFFFFFFF | (((v50 & 0x60000000) == 0x40000000) << 31)) << 32), (uint64_t)&v88);
      sub_EB2444(v51 - 480, v52 | (v50 << 32), (long long *)&v88);
    }
    uint64_t v54 = *((void *)&v66 + 1);
    for (uint64_t i = v66; i != v54; i += 480)
    {
      int64x2_t v89 = 0uLL;
      char v90 = 0;
      uint64_t v91 = 0x3FF0000000000000;
      LOBYTE(v92) = 1;
      uint64_t v93 = 0;
      v94.i64[0] = 0;
      v94.i8[8] = 0;
      *(__int32 *)((char *)&v94.i32[2] + 2) = 36000;
      v94.i8[14] = 0;
      int v88 = 0;
      sub_EB22B4(i, (uint64_t)&v88);
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      char v73 = 0;
      uint64_t v74 = 0x3FF0000000000000;
      char v75 = 1;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      char v78 = 0;
      int v79 = 36000;
      char v80 = 0;
      int v70 = 1000000000;
      sub_EB241C(i, (uint64_t)&v70);
    }
    if (__p)
    {
      v87 = __p;
      operator delete(__p);
    }
    unint64_t v55 = v85;
    if (v85)
    {
      do
      {
        uint64_t v56 = (void *)*v55;
        operator delete(v55);
        unint64_t v55 = v56;
      }
      while (v56);
    }
    unint64_t v57 = v84;
    v84 = 0;
    if (v57) {
      operator delete(v57);
    }
    if (v82)
    {
      double v83 = v82;
      operator delete(v82);
    }
  }
LABEL_78:
  char v58 = v68[0];
  if (v68[0])
  {
    uint64_t v59 = v68[1];
    unint64_t v60 = v68[0];
    if (v68[1] != v68[0])
    {
      do
        uint64_t v59 = (void *)sub_4451C0((uint64_t)v59 - 480);
      while (v59 != v58);
      unint64_t v60 = v68[0];
    }
    v68[1] = v58;
    operator delete(v60);
  }
  *(_OWORD *)double v68 = v66;
  unint64_t v69 = v67;
  unint64_t v67 = 0;
  long long v66 = 0uLL;
  if (v64)
  {
    double v65 = (char *)v64;
    operator delete(v64);
  }
LABEL_85:
  sub_EA8544(a3, (uint64_t)v68);
  char v61 = v68[0];
  if (v68[0])
  {
    unsigned int v62 = v68[1];
    int v63 = v68[0];
    if (v68[1] != v68[0])
    {
      do
        unsigned int v62 = (void *)sub_4451C0((uint64_t)v62 - 480);
      while (v62 != v61);
      int v63 = v68[0];
    }
    v68[1] = v61;
    operator delete(v63);
  }
}

void sub_10654F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_44106C(&a17);
    _Unwind_Resume(a1);
  }
  sub_44106C(&a17);
  _Unwind_Resume(a1);
}

int *sub_106557C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t result = (int *)sub_5C4BD0(a1, a2, 0);
  __int16 v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 9u && (uint64_t v6 = v5[4]) != 0)
  {
    __int16 v7 = (unsigned int *)((char *)result + v6 + *(unsigned int *)((char *)result + v6));
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v8 = *v7;
    if (!v8) {
      return result;
    }
  }
  else
  {
    __int16 v7 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v8 = 4277009103;
  }
  uint64_t v9 = v8;
  uint64_t v10 = operator new(8 * v8);
  *a3 = (unint64_t)v10;
  a3[1] = (unint64_t)v10;
  a3[2] = (unint64_t)&v10[v9];
  char v11 = v7 + 1;
  do
  {
    uint64_t v12 = *v11 | ((((*v11 >> 35) & 0xDFFFFFFF | (((HIDWORD(*v11) >> 2) & 1) << 29) | (((HIDWORD(*v11) & 3) == 2) << 30) | (((HIDWORD(*v11) & 3) == 1) << 31)) ^ 0x20000000) << 32);
    uint64_t result = (int *)sub_E93BD8(a3, v10, &v12);
    uint64_t v10 = result + 2;
    ++v11;
    --v9;
  }
  while (v9 * 8);
  return result;
}

void sub_106567C(_Unwind_Exception *exception_object)
{
  __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1065698@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_EA9088(a1);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v4 = result + 1;
  if (result != -1)
  {
    if (v4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    __int16 v5 = (char *)operator new(24 * v4);
    uint64_t v6 = 0;
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = &v5[24 * v4];
    do
    {
      sub_51C4C((uint64_t)&v7, 0, v6);
      unint64_t result = sub_447BAC((char **)a2, (uint64_t)v5, &v7);
      __int16 v5 = (char *)(result + 24);
      ++v6;
    }
    while (v4 != v6);
  }
  return result;
}

void sub_1065750(_Unwind_Exception *exception_object)
{
  __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1065770(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1064F10(a1, a2, (uint64_t)&v35);
  char v24 = 10;
  strcpy((char *)__p, "WalkingETA");
  long long __t = 0uLL;
  uint64_t v34 = 0;
  __int16 v5 = sub_374CDC((uint64_t)a1, (uint64_t)__p, (uint64_t *)&__t);
  uint64_t v6 = __t;
  if ((void)__t)
  {
    uint64_t v7 = *((void *)&__t + 1);
    uint64_t v8 = (void *)__t;
    if (*((void *)&__t + 1) != (void)__t)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)__t;
    }
    *((void *)&__t + 1) = v6;
    operator delete(v8);
  }
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v34) = 13;
  strcpy((char *)&__t, "eta_evaluator");
  uint64_t v9 = sub_561B0(v5, (uint64_t)&__t);
  char v22 = 13;
  strcpy((char *)v21, "cost_function");
  uint64_t v10 = sub_561B0(v5, (uint64_t)v21);
  sub_F00E44((uint64_t *)__p, a1, v9, v10);
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if ((SHIBYTE(v34) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete((void *)__t);
LABEL_13:
  *(std::chrono::system_clock::time_point *)&long long __t = std::chrono::system_clock::now();
  int v11 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  sub_F00EA0((uint64_t)__p, (uint64_t)&v35, v11, 0, 0, (uint64_t *)&__t);
  sub_1065698(&v35, (uint64_t)v21);
  sub_470AD8(a3, (uint64_t *)&v35, (uint64_t **)&__t, (uint64_t)v21);
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  uint64_t v12 = (void *)__t;
  if ((void)__t)
  {
    long long v13 = (void *)*((void *)&__t + 1);
    char v14 = (void *)__t;
    if (*((void *)&__t + 1) != (void)__t)
    {
      do
        long long v13 = sub_3B0290(v13 - 36);
      while (v13 != v12);
      char v14 = (void *)__t;
    }
    *((void *)&__t + 1) = v12;
    operator delete(v14);
  }
  if (v31)
  {
    char v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    char v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  uint64_t v15 = v26;
  if (v26)
  {
    do
    {
      long long v16 = (void *)*v15;
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  char v17 = v25;
  char v25 = 0;
  if (v17) {
    operator delete(v17);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  uint64_t v18 = (uint64_t)v35;
  if (v35)
  {
    uint64_t v19 = v36;
    uint64_t v20 = v35;
    if ((void *)v36 != v35)
    {
      do
        uint64_t v19 = sub_4451C0(v19 - 480);
      while (v19 != v18);
      uint64_t v20 = v35;
    }
    uint64_t v36 = v18;
    operator delete(v20);
  }
}

void sub_1065A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3C7768((void **)(v12 - 120));
  sub_BF0664(&a12);
  sub_440ED4(v12 - 96);
  _Unwind_Resume(a1);
}

void sub_1065A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 - 97) < 0) {
    operator delete(*(void **)(v20 - 120));
  }
  sub_440ED4(v20 - 96);
  _Unwind_Resume(a1);
}

char *sub_1065ACC(uint64_t *a1)
{
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x88888888888888) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 5);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 5) >= 0x44444444444444) {
    unint64_t v4 = 0x88888888888888;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x88888888888888) {
      sub_188D718();
    }
    __int16 v5 = (char *)operator new(480 * v4);
  }
  else
  {
    __int16 v5 = 0;
  }
  uint64_t v12 = &v5[480 * v2];
  long long v13 = &v5[480 * v4];
  sub_EB1D94(v12);
  uint64_t v6 = (uint64_t)v12;
  uint64_t v7 = v12 + 480;
  uint64_t v9 = (long long *)*a1;
  uint64_t v8 = (long long *)a1[1];
  if (v8 == (long long *)*a1)
  {
    *a1 = (uint64_t)v12;
    a1[1] = (uint64_t)v7;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v6 -= 480;
      v8 -= 30;
      sub_CE3918((uint64_t)(a1 + 2), v6, v8);
    }
    while (v8 != v9);
    uint64_t v10 = (long long *)*a1;
    uint64_t v8 = (long long *)a1[1];
    *a1 = v6;
    a1[1] = (uint64_t)v7;
    a1[2] = (uint64_t)v13;
    if (v8 != v10)
    {
      do
      {
        v8 -= 30;
        sub_4451C0((uint64_t)v8);
      }
      while (v8 != v10);
      uint64_t v8 = v10;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v12 + 480;
}

void sub_1065C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_449164((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1065C50(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_EDA198(a1, a2, 0, (uint64_t)&v17);
  uint64_t v6 = v17;
  uint64_t v7 = v17;
  if (v17 != v18)
  {
    uint64_t v7 = v17;
    while (1)
    {
      uint64_t v8 = *((void *)v7 + 6);
      if (a3 == v8)
      {
        uint64_t v9 = HIDWORD(v8) & 0xFFFFFFF;
        uint64_t v10 = ((unint64_t)v8 >> 33) & 0x10000000;
        BOOL v11 = (v8 & 0x4000000000000000) == 0 && v8 < 0;
        LODWORD(v8) = v11 ? 0x40000000 : 0;
        if (((v10 | v9) & 0x7FFFFFFF | ((HIDWORD(v8) & 0x40000000u) >> 1) | v8 & 0x7FFFFFFF | ((*((_DWORD *)v7 + 24) >> 28) << 31)) == HIDWORD(a3)) {
          break;
        }
      }
      uint64_t v7 = (_OWORD *)((char *)v7 + 104);
      if (v7 == v18) {
        goto LABEL_15;
      }
    }
  }
  if (v7 == v18)
  {
LABEL_15:
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(void *)(a4 + 96) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 4) = -1610547201;
    *(_WORD *)(a4 + 44) = -1;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_OWORD *)(a4 + 72) = 0u;
    *(_DWORD *)(a4 + 52) = -1610547201;
    *(_WORD *)(a4 + 92) = -1;
    *(_DWORD *)(a4 + 96) = 0;
    if (!v6) {
      return;
    }
    goto LABEL_16;
  }
  long long v12 = *v7;
  long long v13 = v7[2];
  *(_OWORD *)(a4 + 16) = v7[1];
  *(_OWORD *)(a4 + 32) = v13;
  *(_OWORD *)a4 = v12;
  long long v14 = v7[3];
  long long v15 = v7[4];
  long long v16 = v7[5];
  *(void *)(a4 + 96) = *((void *)v7 + 12);
  *(_OWORD *)(a4 + 64) = v15;
  *(_OWORD *)(a4 + 80) = v16;
  *(_OWORD *)(a4 + 48) = v14;
  if (v6)
  {
LABEL_16:
    uint64_t v18 = v6;
    operator delete(v6);
  }
}

void sub_1065D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1065DA0(char **a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = *(int64x2_t *)(a1 + 1);
  int64x2_t v3 = vsubq_s64(v2, vdupq_n_s64((unint64_t)*a1));
  int64x2_t v4 = vshrq_n_s64(v3, 3uLL);
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * v4.i64[0];
  if (0x4EC4EC4EC4EC4EC5 * v4.i64[1] <= v5) {
    return;
  }
  uint64_t v7 = a1[1];
  if ((char *)v2.i64[0] == v1)
  {
    *a1 = (char *)(104 * v5);
    a1[1] = (char *)(104 * v5);
    a1[2] = (char *)(104 * v5);
    if (!v1) {
      return;
    }
    goto LABEL_9;
  }
  if (v5 >= 0x276276276276277) {
    sub_188D718();
  }
  uint64_t v8 = (char *)operator new(v3.u64[0]) + 104 * v5;
  uint64_t v9 = v8;
  do
  {
    long long v10 = *(_OWORD *)(v7 - 104);
    long long v11 = *(_OWORD *)(v7 - 88);
    *(_OWORD *)(v9 - 72) = *(_OWORD *)(v7 - 72);
    *(_OWORD *)(v9 - 88) = v11;
    *(_OWORD *)(v9 - 104) = v10;
    long long v12 = *(_OWORD *)(v7 - 56);
    long long v13 = *(_OWORD *)(v7 - 40);
    long long v14 = *(_OWORD *)(v7 - 24);
    *((_DWORD *)v9 - 2) = *((_DWORD *)v7 - 2);
    *(_OWORD *)(v9 - 24) = v14;
    *(_OWORD *)(v9 - 40) = v13;
    *(_OWORD *)(v9 - 56) = v12;
    v9 -= 104;
    v7 -= 104;
  }
  while (v7 != v1);
  uint64_t v1 = *a1;
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v8;
  if (v1)
  {
LABEL_9:
    operator delete(v1);
  }
}

void sub_1065EF8()
{
  unk_25FDBD7 = 16641;
  word_25FDBC0 = 65;
  byte_25FDBEF = 1;
  byte_25FDBD9 = 0;
}

_DWORD *sub_1065F20(_DWORD *a1, void *a2)
{
  __p = operator new(0x20uLL);
  long long v8 = xmmword_20B8870;
  strcpy((char *)__p, "max_segment_sequence_size");
  int v4 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9390;
  strcpy((char *)__p, "max_avoid_path_search_iterations");
  int v5 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  return a1;
}

void sub_1066000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1066024(void *result, uint64_t a2, void *a3)
{
  *unint64_t result = *a3;
  result[1] = a2;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_1066038(uint64_t result)
{
  *(void *)(result + 24) = *(void *)(result + 16);
  return result;
}

_DWORD *sub_1066044(_DWORD *a1, void *a2)
{
  __p = operator new(0x20uLL);
  long long v8 = xmmword_20B8870;
  strcpy((char *)__p, "max_segment_sequence_size");
  int v4 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9390;
  strcpy((char *)__p, "max_avoid_path_search_iterations");
  int v5 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  return a1;
}

void sub_1066124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1066148(void *a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v3 = *(void **)a3;
  uint64_t v51 = *(void **)(a3 + 8);
  if (*(void **)a3 == v51)
  {
    char v55 = 0;
    return v55 & 1;
  }
  char v55 = 0;
  uint64_t v54 = a1 + 2;
  while (2)
  {
    char v53 = v3;
    sub_1069AF8(a2, v3, &v71);
    uint64_t v6 = v71;
    unint64_t v60 = v72;
    if (v71 == v72)
    {
      if (v71) {
        goto LABEL_63;
      }
      goto LABEL_5;
    }
    do
    {
      long long v8 = (void *)*v6;
      uint64_t v7 = (void *)v6[1];
      int64_t v9 = (int64_t)v7 - *v6;
      if (v9 >> 3 <= (unint64_t)*(unsigned int *)a1)
      {
        uint64_t v13 = a1[2];
        uint64_t v14 = a1[3];
        if (v13 != v14)
        {
          unint64_t v15 = *(v7 - 1);
          while (__PAIR64__(*(unsigned __int16 *)(v13 + 4), *(_DWORD *)v13) != __PAIR64__(WORD2(v15), v15)
               || (HIWORD(v15) & 1) == (*(unsigned char *)(v13 + 6) == 0))
          {
            v13 += 8;
            if (v13 == v14) {
              goto LABEL_26;
            }
          }
        }
        if (v13 != v14)
        {
          if (!sub_723EC(1u)) {
            goto LABEL_10;
          }
          double v64 = v59;
          *(void *)((char *)&v65[-1] + (void)*(v59 - 3)) = v58;
          long long v16 = (std::ios_base *)((char *)&v65[-1] + (void)*(v64 - 3));
          std::ios_base::init(v16, v65);
          v16[1].__vftable = 0;
          v16[1].__fmtflags_ = -1;
          std::streambuf::basic_streambuf();
          long long v67 = 0u;
          long long v68 = 0u;
          int v69 = 16;
          char v17 = sub_188FC78(&v64, (uint64_t)"Found loop that shares end (", 28);
          uint64_t v18 = sub_2DD928(v17, *(void *)(v6[1] - 8));
          sub_188FC78(v18, (uint64_t)" of a loop from a previous iteration. Ignoring the loop", 55);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 1u);
          goto LABEL_22;
        }
LABEL_26:
        uint64_t v19 = a1[1];
        char v75 = 0;
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        if (v7 == v8)
        {
          uint64_t v21 = 0;
          uint64_t v20 = 0;
        }
        else
        {
          if (v9 < 0) {
            sub_2E00();
          }
          uint64_t v20 = (char *)operator new(v9);
          uint64_t v21 = &v20[8 * (v9 >> 3)];
          char v75 = v20;
          uint64_t v77 = v21;
          memcpy(v20, v8, v9 - 1);
          uint64_t v76 = v21;
        }
        __p = 0;
        unsigned int v62 = 0;
        int v63 = 0;
        char v22 = operator new(0x18uLL);
        __p = v22;
        unsigned int v62 = (char *)v22;
        char v73 = v22;
        uint64_t v74 = v22;
        int v63 = v22 + 3;
        double v64 = (void (__cdecl **)(std::ostringstream *__hidden))&v63;
        v65[0] = &v73;
        v65[1] = &v74;
        char v66 = 0;
        v22[1] = 0;
        void v22[2] = 0;
        *char v22 = 0;
        uint64_t v23 = v21 - v20;
        if (v21 != v20)
        {
          if (v23 < 0) {
            sub_2E00();
          }
          char v24 = (char *)operator new(v21 - v20);
          *char v22 = v24;
          char v25 = &v24[8 * (v23 >> 3)];
          void v22[2] = v25;
          memcpy(v24, v20, v23 - 1);
          v22[1] = v25;
        }
        unsigned int v62 = (char *)(v22 + 3);
        BOOL v26 = sub_ED7C38(v19 + 8, (uint64_t *)&__p);
        uint64_t v27 = (char *)__p;
        if (__p)
        {
          uint64_t v28 = v62;
          unint64_t v29 = __p;
          if (v62 != __p)
          {
            char v30 = v62;
            do
            {
              char v32 = (void *)*((void *)v30 - 3);
              v30 -= 24;
              int v31 = v32;
              if (v32)
              {
                *((void *)v28 - 2) = v31;
                operator delete(v31);
              }
              uint64_t v28 = v30;
            }
            while (v30 != v27);
            unint64_t v29 = __p;
          }
          unsigned int v62 = v27;
          operator delete(v29);
        }
        if (v20) {
          operator delete(v20);
        }
        uint64_t v33 = v6[1];
        int v35 = (void *)a1[3];
        unint64_t v34 = a1[4];
        if ((unint64_t)v35 < v34)
        {
          *int v35 = *(void *)(v33 - 8);
          uint64_t v36 = (uint64_t)(v35 + 1);
LABEL_61:
          v55 |= v26;
          a1[3] = v36;
          goto LABEL_10;
        }
        char v37 = (void *)*v54;
        uint64_t v38 = ((uint64_t)v35 - *v54) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          if (v41 >> 61) {
            sub_188D718();
          }
          unint64_t v42 = (char *)operator new(8 * v41);
          uint64_t v43 = (uint64_t)&v42[8 * v38];
          *(void *)uint64_t v43 = *(void *)(v33 - 8);
          uint64_t v36 = v43 + 8;
          if (v35 == v37)
          {
LABEL_59:
            a1[2] = v43;
            a1[3] = v36;
            a1[4] = &v42[8 * v41];
            if (!v35) {
              goto LABEL_61;
            }
LABEL_60:
            operator delete(v35);
            goto LABEL_61;
          }
        }
        else
        {
          unint64_t v42 = 0;
          uint64_t v43 = 8 * v38;
          *(void *)(8 * v38) = *(void *)(v33 - 8);
          uint64_t v36 = 8 * v38 + 8;
          if (v35 == v37) {
            goto LABEL_59;
          }
        }
        do
        {
          int v44 = *((_DWORD *)v35-- - 2);
          int v45 = *(_DWORD *)((char *)v35 + 3);
          *(_DWORD *)(v43 - 8) = v44;
          v43 -= 8;
          *(_DWORD *)(v43 + 3) = v45;
        }
        while (v35 != v37);
        int v35 = (void *)*v54;
        a1[2] = v43;
        a1[3] = v36;
        a1[4] = &v42[8 * v41];
        if (!v35) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      if (!sub_723EC(1u)) {
        goto LABEL_10;
      }
      double v64 = v59;
      *(void *)((char *)&v65[-1] + (void)*(v59 - 3)) = v58;
      long long v10 = (std::ios_base *)((char *)&v65[-1] + (void)*(v64 - 3));
      std::ios_base::init(v10, v65);
      v10[1].__vftable = 0;
      v10[1].__fmtflags_ = -1;
      std::streambuf::basic_streambuf();
      long long v67 = 0u;
      long long v68 = 0u;
      int v69 = 16;
      sub_188FC78(&v64, (uint64_t)"Excessive loop length (", 23);
      long long v12 = (void *)std::ostream::operator<<();
      sub_188FC78(v12, (uint64_t)" segments); ignoring the loop.", 30);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
LABEL_22:
      if (SHIBYTE(v63) < 0) {
        operator delete(__p);
      }
      double v64 = v57;
      *(void *)((char *)&v65[-1] + (void)*(v57 - 3)) = v56;
      v65[0] = v11;
      if (SBYTE7(v68) < 0) {
        operator delete((void *)v67);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_10:
      v6 += 3;
    }
    while (v6 != v60);
    uint64_t v6 = v71;
    if (v71)
    {
LABEL_63:
      unsigned int v46 = v72;
      int v5 = v6;
      if (v72 != v6)
      {
        char v47 = v72;
        do
        {
          int v49 = (void *)*(v47 - 3);
          v47 -= 3;
          int v48 = v49;
          if (v49)
          {
            *(v46 - 2) = v48;
            operator delete(v48);
          }
          unsigned int v46 = v47;
        }
        while (v47 != v6);
        int v5 = v71;
      }
      uint64_t v72 = v6;
      operator delete(v5);
    }
LABEL_5:
    int64x2_t v3 = v53 + 59;
    if (v53 + 59 != v51) {
      continue;
    }
    return v55 & 1;
  }
}

void sub_106698C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  sub_46B68((uint64_t)&a29);
  if (__p)
  {
    if (v30 != __p)
    {
      uint64_t v33 = v30;
      do
      {
        int v35 = (void *)*((void *)v33 - 3);
        v33 -= 24;
        unint64_t v34 = v35;
        if (v35)
        {
          *((void *)v30 - 2) = v34;
          operator delete(v34);
        }
        char v30 = v33;
      }
      while (v33 != __p);
      char v30 = __p;
    }
    operator delete(v30);
    unint64_t v29 = *(void **)(v31 - 120);
    if (!v29)
    {
LABEL_12:
      sub_36094((void **)(v31 - 160));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  *(void *)(v31 - 112) = v29;
  operator delete(v29);
  sub_36094((void **)(v31 - 160));
  _Unwind_Resume(a1);
}

_DWORD *sub_1066B7C(_DWORD *a1, void *a2)
{
  __p = operator new(0x20uLL);
  long long v8 = xmmword_20B8870;
  strcpy((char *)__p, "max_segment_sequence_size");
  int v4 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9390;
  strcpy((char *)__p, "max_avoid_path_search_iterations");
  int v5 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  return a1;
}

void sub_1066C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1066C80()
{
  unk_25FDC07 = 16641;
  word_25FDBF0 = 65;
  byte_25FDC1F = 1;
  byte_25FDC09 = 0;
}

uint64_t **sub_1066CA8(uint64_t **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  *a1 = a2;
  *((unsigned char *)a1 + 8) = a4;
  sub_3EA6A0(a1 + 2, a2, a4);
  sub_3D9344((uint64_t *)a1 + 7, *a1);
  a1[18] = (uint64_t *)sub_3750CC(*a1);
  sub_1068A84((uint64_t)(a1 + 19), a3, *a1);
  return a1;
}

void sub_1066D0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_1066D28(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = (uint64_t)a2;
  BOOL v6 = sub_EAE144(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v6)
  {
    uint64_t v7 = sub_3C80F8(v3);
    uint64_t v8 = sub_3FA3A8(v3);
    uint64_t v32 = a1;
    if (v7 == v8)
    {
      int64_t v9 = 0;
    }
    else
    {
      int64_t v9 = 0;
      uint64_t v34 = v3;
      uint64_t v33 = v8;
      sub_3EA868(v32 + 16, (int **)v7, (uint64_t)v38);
      while (1)
      {
        if (v9) {
          operator delete(v9);
        }
        long long v10 = (_OWORD *)*((void *)&v38[0] + 1);
        int v35 = *(void **)&v38[0];
        if (*(void *)&v38[0] != *((void *)&v38[0] + 1))
        {
          long long v11 = a3[1];
          long long v12 = *(_OWORD **)&v38[0];
          do
          {
            uint64_t v14 = *(void *)(v7 + 32);
            v38[0] = *v12;
            unint64_t v15 = (unint64_t)a3[2];
            if ((unint64_t)v11 < v15)
            {
              *(void *)long long v11 = v14;
              *(_OWORD *)(v11 + 8) = v38[0];
              uint64_t v13 = v11 + 24;
            }
            else
            {
              long long v16 = *a3;
              unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a3) >> 3);
              unint64_t v18 = v17 + 1;
              if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v16) >> 3);
              if (2 * v19 > v18) {
                unint64_t v18 = 2 * v19;
              }
              if (v19 >= 0x555555555555555) {
                unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                if (v20 > 0xAAAAAAAAAAAAAAALL) {
                  sub_188D718();
                }
                uint64_t v21 = (char *)operator new(24 * v20);
              }
              else
              {
                uint64_t v21 = 0;
              }
              char v22 = &v21[24 * v17];
              *(void *)char v22 = v14;
              *(_OWORD *)(v22 + 8) = v38[0];
              uint64_t v23 = v22;
              if (v11 != v16)
              {
                do
                {
                  long long v24 = *(_OWORD *)(v11 - 24);
                  *((void *)v23 - 1) = *((void *)v11 - 1);
                  *(_OWORD *)(v23 - 24) = v24;
                  v23 -= 24;
                  v11 -= 24;
                }
                while (v11 != v16);
                long long v11 = *a3;
              }
              char v25 = &v21[24 * v20];
              uint64_t v13 = v22 + 24;
              *a3 = v23;
              a3[1] = v22 + 24;
              a3[2] = v25;
              if (v11) {
                operator delete(v11);
              }
            }
            a3[1] = v13;
            ++v12;
            long long v11 = v13;
          }
          while (v12 != v10);
        }
        v7 += 88;
        uint64_t v3 = v34;
        int64_t v9 = v35;
        if (v7 == v33) {
          break;
        }
        sub_3EA868(v32 + 16, (int **)v7, (uint64_t)v38);
      }
    }
    uint64_t v26 = sub_EADD34(v3);
    long long v27 = *(_OWORD *)v26;
    long long v28 = *(_OWORD *)(v26 + 16);
    unint64_t v39 = *(void **)(v26 + 32);
    v38[0] = v27;
    v38[1] = v28;
    sub_3EA868(v32 + 16, (int **)v38, (uint64_t)&v36);
    if (v9) {
      operator delete(v9);
    }
    char v30 = v36;
    unint64_t v29 = (long long *)v37;
    if (v36 != (void *)v37)
    {
      uint64_t v31 = (long long *)v36;
      do
      {
        uint64_t v36 = v39;
        long long v37 = *v31;
        sub_4885C(a3, (long long *)&v36);
        ++v31;
      }
      while (v31 != v29);
    }
    if (v30) {
      operator delete(v30);
    }
  }
}

void sub_1066FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (v14)
  {
    operator delete(v14);
    long long v16 = *(void **)v13;
    if (!*(void *)v13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v16 = *(void **)v13;
    if (!*(void *)v13) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_106704C(void *a1@<X1>, void **a2@<X8>)
{
  BOOL v3 = sub_EAE144(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v3)
  {
    uint64_t v4 = sub_EAE104(a1);
    if (v4)
    {
      int v5 = 0;
      BOOL v6 = 0;
      unint64_t v7 = 0;
      uint64_t v23 = v4;
      do
      {
        uint64_t v8 = sub_EAE1B8(a1, v7);
        sub_3F4FA4(&v27);
        unint64_t v25 = v7;
        if (v6) {
          operator delete(v6);
        }
        int64_t v9 = (long long *)*((void *)&v27 + 1);
        long long v10 = (long long *)v27;
        for (i = (void *)v27; v10 != v9; int v5 = v22)
        {
          while (1)
          {
            uint64_t v11 = *(void *)(v8 + 32);
            long long v27 = *v10;
            unint64_t v12 = (unint64_t)a2[2];
            if ((unint64_t)v5 >= v12) {
              break;
            }
            *(void *)int v5 = v11;
            *(_OWORD *)(v5 + 8) = v27;
            a2[1] = v5 + 24;
            ++v10;
            v5 += 24;
            if (v10 == v9) {
              goto LABEL_4;
            }
          }
          uint64_t v13 = (char *)*a2;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a2) >> 3);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v13) >> 3);
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x555555555555555) {
            unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 > 0xAAAAAAAAAAAAAAALL) {
              sub_188D718();
            }
            unint64_t v18 = (char *)operator new(24 * v17);
          }
          else
          {
            unint64_t v18 = 0;
          }
          unint64_t v19 = &v18[24 * v14];
          *(void *)unint64_t v19 = v11;
          *(_OWORD *)(v19 + 8) = v27;
          unint64_t v20 = v19;
          if (v5 != v13)
          {
            do
            {
              long long v21 = *(_OWORD *)(v5 - 24);
              *((void *)v20 - 1) = *((void *)v5 - 1);
              *(_OWORD *)(v20 - 24) = v21;
              v20 -= 24;
              v5 -= 24;
            }
            while (v5 != v13);
            int v5 = (char *)*a2;
          }
          char v22 = v19 + 24;
          *a2 = v20;
          a2[1] = v19 + 24;
          a2[2] = &v18[24 * v17];
          if (v5) {
            operator delete(v5);
          }
          a2[1] = v22;
          ++v10;
        }
LABEL_4:
        BOOL v6 = i;
        unint64_t v7 = v25 + 1;
      }
      while (v25 + 1 != v23);
      if (i) {
        operator delete(i);
      }
    }
  }
}

void sub_106728C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (!*(void *)v14) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v14 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10672EC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_37D0C8(a3);
  if (!result) {
    return result;
  }
  uint64_t result = sub_EAE144(a1);
  if (result) {
    return result;
  }
  uint64_t result = sub_EADC78((uint64_t)a1);
  if (result) {
    return result;
  }
  uint64_t v50 = sub_3750CC(a3);
  uint64_t v9 = sub_EADD1C((uint64_t)a1);
  sub_2954EC(v50, *(void *)(v9 + 32), (uint64_t)&v55);
  long long v10 = __p;
  int v48 = a3;
  if (__p == v57)
  {
    unint64_t v13 = 0xFFFFFFFF00000000;
    int v16 = 0x7FFFFFFF;
    uint64_t v14 = 0xFFFFFFFFLL;
    if (!__p) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unint64_t v11 = sub_2E40A4((uint64_t)&v55);
  unsigned int v12 = v11;
  unint64_t v13 = v11 & 0xFFFFFFFF00000000;
  long long v10 = __p;
  uint64_t v14 = v12;
  int v16 = v15;
  if (__p)
  {
LABEL_6:
    unint64_t v57 = v10;
    operator delete(v10);
  }
LABEL_7:
  unint64_t v53 = v13 | v14;
  int v54 = v16;
  if (v14 == 0xFFFFFFFFLL && v13 == 0xFFFFFFFF00000000 || (sub_37D100(a3, &v53) & 1) == 0)
  {
    uint64_t v55 = *(void *)(sub_EADD1C((uint64_t)a1) + 32);
    sub_2D5B74((char **)a4, &v55);
  }
  sub_46B058();
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_EADA68();
  char v22 = v21;
  unint64_t v24 = v23;
  uint64_t v25 = 0;
  unint64_t v26 = v20 + 1;
  int v49 = a1;
  while (1)
  {
    if (v18)
    {
      unint64_t v27 = sub_EAE104(v18);
      BOOL v28 = v26 < v27;
      if (!v22)
      {
        if (v26 >= v27) {
          goto LABEL_36;
        }
        goto LABEL_26;
      }
    }
    else
    {
      if (!v22) {
        goto LABEL_36;
      }
      BOOL v28 = 0;
    }
    unint64_t v29 = sub_EAE104(v22);
    if (v24 >= v29 || !v28) {
      break;
    }
    uint64_t v31 = sub_EAE1B8(v18, v26);
    if (v31 == sub_EAE1B8(v22, v24)) {
      goto LABEL_36;
    }
LABEL_26:
    v25 += sub_EAE234((uint64_t)v18, v26);
    if (v25 <= a2) {
      goto LABEL_12;
    }
    uint64_t v32 = sub_EAE1B8(v18, v26);
    sub_2954EC(v50, *(void *)(v32 + 32), (uint64_t)&v55);
    uint64_t v33 = __p;
    if (__p != v57)
    {
      unint64_t v34 = sub_2E1AA4((uint64_t)&v55);
      unsigned int v35 = v34;
      unint64_t v36 = v34 & 0xFFFFFFFF00000000;
      uint64_t v33 = __p;
      uint64_t v37 = v35;
      int v39 = v38;
      if (!__p) {
        goto LABEL_30;
      }
LABEL_29:
      unint64_t v57 = v33;
      operator delete(v33);
      goto LABEL_30;
    }
    unint64_t v36 = 0xFFFFFFFF00000000;
    uint64_t v37 = 0xFFFFFFFFLL;
    int v39 = 0x7FFFFFFF;
    if (__p) {
      goto LABEL_29;
    }
LABEL_30:
    unint64_t v51 = v36 | v37;
    int v52 = v39;
    a1 = v49;
    if (v37 == 0xFFFFFFFFLL && v36 == 0xFFFFFFFF00000000 || (sub_37D100(v48, &v51) & 1) == 0)
    {
      uint64_t v55 = *(void *)(sub_EAE1B8(v18, v26) + 32);
      sub_2D5B74((char **)a4, &v55);
    }
LABEL_12:
    ++v26;
  }
  if ((v28 ^ (v24 < v29))) {
    goto LABEL_26;
  }
LABEL_36:
  uint64_t v40 = sub_EADD34((uint64_t)a1);
  sub_2954EC(v50, *(void *)(v40 + 32), (uint64_t)&v55);
  unint64_t v41 = __p;
  if (__p == v57)
  {
    int v45 = 0x7FFFFFFF;
    unint64_t v46 = 0xFFFFFFFF00000000;
    uint64_t v47 = 0xFFFFFFFFLL;
    if (__p)
    {
LABEL_38:
      unint64_t v57 = v41;
      operator delete(v41);
    }
  }
  else
  {
    unint64_t v42 = sub_2E1AA4((uint64_t)&v55);
    unsigned int v43 = v42;
    int v45 = v44;
    unint64_t v46 = v42 & 0xFFFFFFFF00000000;
    unint64_t v41 = __p;
    uint64_t v47 = v43;
    if (__p) {
      goto LABEL_38;
    }
  }
  unint64_t v51 = v46 | v47;
  int v52 = v45;
  if (v47 == 0xFFFFFFFFLL && v46 == 0xFFFFFFFF00000000 || (uint64_t result = sub_37D100(v48, &v51), (result & 1) == 0))
  {
    uint64_t v55 = *(void *)(sub_EADD34((uint64_t)a1) + 32);
    return (uint64_t)sub_2D5B74((char **)a4, &v55);
  }
  return result;
}

void sub_1067660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = *(void **)v18;
    if (!*(void *)v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = *(void **)v18;
    if (!*(void *)v18) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 + 8) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_10676E0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, void *a5@<X8>)
{
  long long v10 = (uint64_t *)(a1 + 56);
  if (sub_EAE144(a2))
  {
    uint64_t v39 = 0;
    long long v37 = 0u;
    *(_OWORD *)int v38 = 0u;
    *(_OWORD *)unsigned int v35 = 0u;
    *(_OWORD *)unint64_t v36 = 0u;
  }
  else
  {
    sub_3DA5AC(v10, (uint64_t)a2, (uint64_t)v35);
    if (v35[0] != v35[1]) {
      goto LABEL_6;
    }
  }
  if (v36[1] == (void *)v37 && v38[0] == v38[1]) {
    goto LABEL_12;
  }
LABEL_6:
  if (*a4 == 0x7FFFFFFF)
  {
LABEL_12:
    sub_106DD04(a5, (uint64_t)v35);
    goto LABEL_26;
  }
  unint64_t v11 = sub_F5A874(a3, a2, *(int **)(a1 + 168), a4, *(unsigned __int8 *)(a1 + 8), a4[2]);
  unsigned int v12 = v11;
  __p = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  if (v11[5] == 0x7FFFFFFF
    || (v14 = *((void *)v11 + 4), uint64_t v13 = *((void *)v11 + 5), sub_EAE104(a2) + 2 != (v13 - v14) >> 4))
  {
    sub_106DD04(a5, (uint64_t)v35);
  }
  else
  {
    unint64_t v15 = sub_EAE104(a2);
    unint64_t v16 = v15;
    if (v15 > (v34 - (unsigned char *)__p) >> 2)
    {
      if (v15 >> 62) {
        sub_2E00();
      }
      unint64_t v17 = (char *)operator new(4 * v15);
      __p = &v17[(v33 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v33 = __p;
      unint64_t v34 = &v17[4 * v16];
    }
    uint64_t v18 = sub_EAE104(a2);
    if (v18)
    {
      uint64_t v19 = 0;
      do
      {
        int v31 = *(_DWORD *)(*((void *)v12 + 4) + v19 + 36) - *(_DWORD *)(*((void *)v12 + 4) + v19 + 20);
        sub_3B79D0(&__p, &v31);
        v19 += 16;
        --v18;
      }
      while (v18);
    }
    if (a4[2])
    {
      int v20 = v12[5];
      int v21 = v20 / -10;
      int v22 = v20 % 10;
      if (v20 < 0) {
        char v23 = -5;
      }
      else {
        char v23 = 5;
      }
      unsigned int v24 = v21 + *a4 + (((-103 * (char)(v23 + v22)) >> 15) & 1) + ((-103 * (char)(v23 + v22)) >> 10);
    }
    else
    {
      unsigned int v24 = *a4;
    }
    sub_3DB764(v10, (uint64_t)a2, v24, (uint64_t)a5);
  }
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
LABEL_26:
  uint64_t v25 = (char *)v38[0];
  if (v38[0])
  {
    unint64_t v26 = v38[1];
    unint64_t v27 = v38[0];
    if (v38[1] != v38[0])
    {
      BOOL v28 = (char *)v38[1];
      do
      {
        char v30 = (void *)*((void *)v28 - 3);
        v28 -= 24;
        unint64_t v29 = v30;
        if (v30)
        {
          *(v26 - 2) = v29;
          operator delete(v29);
        }
        unint64_t v26 = v28;
      }
      while (v28 != v25);
      unint64_t v27 = v38[0];
    }
    v38[1] = v25;
    operator delete(v27);
  }
  if (v36[1])
  {
    *(void **)&long long v37 = v36[1];
    operator delete(v36[1]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
}

void sub_1067A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3DB6CC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

double sub_1067AB4@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_1067AC8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  long long v98 = 0uLL;
  unint64_t v99 = 0;
  if (sub_EAE144(a2) || sub_EADC78((uint64_t)a2))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v5 = (char *)v98;
    if ((void)v98) {
      goto LABEL_141;
    }
    return;
  }
  int v88 = a3;
  unsigned int v6 = 0;
  v97[0] = &unk_20E1710;
  memset(&v97[1], 0, 24);
  v97[5] = 0;
  v97[6] = &unk_20E1710;
  v97[11] = 0;
  v97[12] = &unk_20E1710;
  memset(&v97[7], 0, 24);
  memset(&v97[13], 0, 24);
  v97[17] = 0;
  v97[18] = &unk_20E1710;
  memset(&v97[19], 0, 24);
  v97[23] = 0;
  v97[24] = &unk_20E1710;
  memset(&v97[25], 0, 24);
  v97[29] = 0;
  v97[30] = &unk_20E1710;
  v97[35] = 0;
  v97[36] = &unk_20E1710;
  memset(&v97[31], 0, 24);
  memset(&v97[37], 0, 24);
  v97[41] = 0;
  v97[42] = &unk_20E1710;
  memset(&v97[43], 0, 24);
  v97[47] = 0;
  v97[48] = &unk_20E1710;
  memset(&v97[49], 0, 24);
  v97[53] = 0;
  v97[54] = &unk_20E1710;
  memset(&v97[55], 0, 24);
  v97[59] = 0;
  v97[65] = 0;
  v97[60] = &unk_20E1710;
  memset(&v97[61], 0, 24);
  v97[66] = &unk_20E1710;
  v97[71] = 0;
  memset(&v97[67], 0, 24);
  v97[72] = &unk_20E1710;
  v97[77] = 0;
  memset(&v97[73], 0, 24);
  v97[78] = &unk_20E1710;
  v97[83] = 0;
  memset(&v97[79], 0, 24);
  v97[84] = &unk_20E1710;
  v97[89] = 0;
  memset(&v97[85], 0, 24);
  v97[90] = &unk_20E1710;
  v97[95] = 0;
  memset(&v97[91], 0, 24);
LABEL_7:
  while (2)
  {
    unint64_t v7 = v6;
    if (sub_EAE104(a2) > (unint64_t)v6)
    {
      uint64_t v8 = (int **)sub_EAE1B8(a2, v6);
      uint64_t v9 = (unsigned __int16 *)((char *)*v8 - **v8);
      if (*v9 >= 0x2Fu)
      {
        uint64_t v10 = v9[23];
        if (v10)
        {
          unsigned int v11 = *((unsigned __int8 *)*v8 + v10);
          BOOL v12 = v11 > 0x36;
          uint64_t v13 = (1 << v11) & 0x44000000000008;
          if (!v12 && v13 != 0)
          {
            for (uint64_t i = 0; i != 96; i += 6)
            {
              unint64_t v17 = &v97[i];
              if (v97[i + 2])
              {
                unint64_t v18 = v17[3];
                if (v18 >= 0x80)
                {
                  unint64_t v16 = &v97[i];
                  operator delete((void *)v97[i]);
                  v16[5] = 0;
                  *unint64_t v16 = &unk_20E1710;
                  v16[1] = 0;
                  v16[2] = 0;
                  v16[3] = 0;
                }
                else if (v18)
                {
                  v17[2] = 0;
                  memset((void *)v97[i], 128, v18 + 8);
                  *(unsigned char *)(v97[i] + v18) = -1;
                  unint64_t v19 = v17[3];
                  if (v19 == 7) {
                    uint64_t v20 = 6;
                  }
                  else {
                    uint64_t v20 = v19 - (v19 >> 3);
                  }
                  v97[i + 5] = v20 - v17[2];
                }
              }
            }
            goto LABEL_6;
          }
        }
      }
      unint64_t v96 = sub_2E48C4(v8);
      sub_106EBD0((uint64_t)v97, &v96, &v101);
      if (!(void)v101)
      {
        sub_5217C8((uint64_t)v97, &v96, (uint64_t)&v101);
        uint64_t v31 = v101;
        if ((_BYTE)v102)
        {
          uint64_t v32 = *(void *)(v101 + 8) + 12 * *((void *)&v101 + 1);
          *(void *)uint64_t v32 = v96;
          *(_DWORD *)(v32 + 8) = 0;
        }
        *(_DWORD *)(*(void *)(v31 + 8) + 12 * *((void *)&v101 + 1) + 8) = v6++;
        continue;
      }
      sub_5217C8((uint64_t)v97, &v96, (uint64_t)&v101);
      uint64_t v21 = v101;
      if ((_BYTE)v102)
      {
        uint64_t v22 = *(void *)(v101 + 8) + 12 * *((void *)&v101 + 1);
        *(void *)uint64_t v22 = v96;
        *(_DWORD *)(v22 + 8) = 0;
      }
      uint64_t v23 = *(void *)(v21 + 8) + 12 * *((void *)&v101 + 1);
      unint64_t v24 = *(unsigned int *)(v23 + 8);
      if (v24 <= v6) {
        unsigned int v25 = v6;
      }
      else {
        unsigned int v25 = *(_DWORD *)(v23 + 8);
      }
      if (v24 >= v6)
      {
        long long v101 = 0uLL;
        double v102 = 0;
        char v30 = (void *)*((void *)&v98 + 1);
        if (*((void *)&v98 + 1) < v99) {
          goto LABEL_40;
        }
        goto LABEL_45;
      }
      unsigned int v26 = *(_DWORD *)(v23 + 8);
      while (1)
      {
        unint64_t v27 = *(int **)(sub_EAE1B8(a2, v26) + 8);
        if (!v27) {
          break;
        }
        BOOL v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 < 0x11u) {
          break;
        }
        uint64_t v29 = v28[8];
        if (!v29 || (*(_WORD *)((unsigned char *)v27 + v29) & 4) == 0) {
          break;
        }
        if (v25 == ++v26)
        {
          long long v101 = 0uLL;
          double v102 = 0;
          if (v24 < v6)
          {
            do
            {
              v94[0] = *(void **)(sub_EAE1B8(a2, v24) + 32);
              sub_2D5B74((char **)&v101, v94);
              ++v24;
            }
            while (v6 != v24);
          }
          char v30 = (void *)*((void *)&v98 + 1);
          if (*((void *)&v98 + 1) < v99)
          {
LABEL_40:
            *char v30 = 0;
            v30[1] = 0;
            void v30[2] = 0;
            *(_OWORD *)char v30 = v101;
            void v30[2] = v102;
            *((void *)&v98 + 1) = v30 + 3;
            goto LABEL_47;
          }
LABEL_45:
          *((void *)&v98 + 1) = sub_4D088((char **)&v98, (uint64_t)&v101);
          if ((void)v101)
          {
            *((void *)&v101 + 1) = v101;
            operator delete((void *)v101);
          }
LABEL_47:
          for (uint64_t j = 0; j != 96; j += 6)
          {
            unsigned int v35 = &v97[j];
            if (v97[j + 2])
            {
              unint64_t v36 = v35[3];
              if (v36 >= 0x80)
              {
                unint64_t v34 = &v97[j];
                operator delete((void *)v97[j]);
                v34[5] = 0;
                void *v34 = &unk_20E1710;
                v34[1] = 0;
                v34[2] = 0;
                v34[3] = 0;
              }
              else if (v36)
              {
                v35[2] = 0;
                memset((void *)v97[j], 128, v36 + 8);
                *(unsigned char *)(v97[j] + v36) = -1;
                unint64_t v37 = v35[3];
                if (v37 == 7) {
                  uint64_t v38 = 6;
                }
                else {
                  uint64_t v38 = v37 - (v37 >> 3);
                }
                v97[j + 5] = v38 - v35[2];
              }
            }
          }
LABEL_6:
          ++v6;
          goto LABEL_7;
        }
      }
      uint64_t v39 = *(void *)(sub_EAE1B8(a2, v24) + 32);
      uint64_t v40 = *(void *)(sub_EAE1B8(a2, v6) + 32);
      if ((v39 & 0xFFFFFFFFFFFFLL) != (v40 & 0xFFFFFFFFFFFFLL))
      {
        ++v6;
        continue;
      }
      BOOL v41 = (v39 & 0xFF000000000000) == 0;
      unsigned int v42 = v6;
      if ((v41 ^ ((v40 & 0x1000000000000) == 0)))
      {
        ++v6;
        continue;
      }
      while (sub_EAE104(a2) > (unint64_t)v42)
      {
        unsigned int v43 = (int **)sub_EAE1B8(a2, v42);
        v94[0] = (void *)sub_2E48C4(v43);
        sub_106EBD0((uint64_t)v97, v94, &v101);
        if (!(void)v101) {
          break;
        }
        ++v42;
      }
      if (v24) {
        unint64_t v44 = (v24 - 1);
      }
      else {
        unint64_t v44 = 0;
      }
      uint64_t v45 = *(void *)(sub_EAE1B8(a2, v44) + 32);
      unint64_t v46 = (char *)operator new(8uLL);
      *((void *)&v101 + 1) = v46 + 8;
      double v102 = v46 + 8;
      *(_DWORD *)unint64_t v46 = v45;
      v46[6] = BYTE6(v45);
      *((_WORD *)v46 + 2) = WORD2(v45);
      *(void *)&long long v101 = v46;
      if (v6 < v42)
      {
        do
        {
          if (sub_EAE104(a2) <= v7) {
            break;
          }
          v94[0] = *(void **)(sub_EAE1B8(a2, v7) + 32);
          sub_2D5B74((char **)&v101, v94);
          ++v7;
        }
        while (v42 != v7);
        unint64_t v46 = (char *)v101;
      }
      uint64_t v47 = *(void **)(a1 + 144);
      v90[0] = *(void **)v46;
      v94[1] = 0;
      uint64_t v95 = 0;
      v94[0] = 0;
      __p = v47;
      uint64_t v93 = v90;
      sub_3E1DFC((uint64_t)v47, (uint64_t)v90[0], (uint64_t)v94, (uint64_t)&__p);
      int v48 = (unint64_t *)v94[0];
      int v49 = (unint64_t *)v94[1];
      if (v94[0] == v94[1])
      {
        if (!v94[0]) {
          goto LABEL_74;
        }
LABEL_73:
        v94[1] = v48;
        operator delete(v48);
        goto LABEL_74;
      }
      while (1)
      {
        unint64_t v53 = *v48;
        sub_68F5DC(*(void *)(a1 + 144), *v48, (unint64_t *)&__p);
        if ((char *)v93 - (unsigned char *)__p == *((void *)&v101 + 1) - (void)v101)
        {
          uint64_t v54 = *(void *)v101;
          if (__PAIR64__(*((unsigned __int16 *)__p + 2), *(_DWORD *)__p) == __PAIR64__(WORD2(v54), v54)
            && ((v54 & 0x1000000000000) == 0) == (*((unsigned char *)__p + 6) == 0))
          {
            uint64_t v55 = (int *)sub_2DBC9C(*(void *)(a1 + 144), v53);
            uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
            if (*v56 >= 0xFu
              && v56[7]
              && (*((unsigned char *)v55 + v56[7]) & 4) != 0
              && (!v56[2] || *((unsigned __int8 *)v55 + v56[2]) - 1 >= 5)
              && !v56[4])
            {
              unint64_t v57 = (void **)__p;
              uint64_t v58 = (void *)v101;
              if (__p != v93)
              {
                while (__PAIR64__(*((unsigned __int16 *)v57 + 2), *(_DWORD *)v57) == __PAIR64__((unsigned __int16)WORD2(*v58), *v58)&& (HIWORD(*v58) & 1) != (*((unsigned char *)v57 + 6) == 0))
                {
                  ++v57;
                  ++v58;
                  if (v57 == v93) {
                    goto LABEL_98;
                  }
                }
              }
              if (v57 == v93)
              {
LABEL_98:
                if (v58 == *((void **)&v101 + 1))
                {
                  v90[0] = 0;
                  v90[1] = 0;
                  uint64_t v91 = 0;
                  if (v24 < v6)
                  {
                    unint64_t v59 = v24;
                    do
                    {
                      uint64_t v100 = *(void *)(sub_EAE1B8(a2, v59) + 32);
                      sub_2D5B74((char **)v90, &v100);
                      ++v59;
                    }
                    while (v6 != v59);
                  }
                  uint64_t v60 = *((void *)&v98 + 1);
                  if (*((void *)&v98 + 1) >= v99)
                  {
                    *((void *)&v98 + 1) = sub_4D088((char **)&v98, (uint64_t)v90);
                    if (v90[0])
                    {
                      v90[1] = v90[0];
                      operator delete(v90[0]);
                    }
                  }
                  else
                  {
                    **((void **)&v98 + 1) = 0;
                    *(void *)(v60 + 8) = 0;
                    *(void *)(v60 + 16) = 0;
                    *(_OWORD *)uint64_t v60 = *(_OWORD *)v90;
                    *(void *)(v60 + 16) = v91;
                    *((void *)&v98 + 1) = v60 + 24;
                  }
                  for (uint64_t k = 0; k != 96; k += 6)
                  {
                    int v63 = &v97[k];
                    if (v97[k + 2])
                    {
                      unint64_t v64 = v63[3];
                      if (v64 >= 0x80)
                      {
                        unsigned int v62 = &v97[k];
                        operator delete((void *)v97[k]);
                        v62[5] = 0;
                        *unsigned int v62 = &unk_20E1710;
                        v62[1] = 0;
                        v62[2] = 0;
                        v62[3] = 0;
                      }
                      else if (v64)
                      {
                        v63[2] = 0;
                        unint64_t v87 = v64;
                        memset((void *)v97[k], 128, v64 + 8);
                        *(unsigned char *)(v97[k] + v87) = -1;
                        unint64_t v65 = v63[3];
                        if (v65 == 7) {
                          uint64_t v66 = 6;
                        }
                        else {
                          uint64_t v66 = v65 - (v65 >> 3);
                        }
                        v97[k + 5] = v66 - v63[2];
                      }
                    }
                    char v50 = 1;
                  }
                  unsigned int v6 = v42;
                  unint64_t v51 = (void **)__p;
                  if (!__p) {
                    goto LABEL_79;
                  }
LABEL_78:
                  uint64_t v93 = v51;
                  operator delete(v51);
                  goto LABEL_79;
                }
              }
            }
          }
        }
        char v50 = 0;
        unint64_t v51 = (void **)__p;
        if (__p) {
          goto LABEL_78;
        }
LABEL_79:
        if (++v48 == v49) {
          char v52 = 1;
        }
        else {
          char v52 = v50;
        }
        if (v52)
        {
          int v48 = (unint64_t *)v94[0];
          if (v94[0]) {
            goto LABEL_73;
          }
LABEL_74:
          if (!(void)v101) {
            goto LABEL_6;
          }
          *((void *)&v101 + 1) = v101;
          operator delete((void *)v101);
          ++v6;
          goto LABEL_7;
        }
      }
    }
    break;
  }
  uint64_t v67 = sub_EAE104(a2);
  long long v68 = (int **)sub_EAE1B8(a2, v67 - 1);
  __p = (void *)sub_2E4738(v68);
  sub_106EBD0((uint64_t)v97, &__p, &v101);
  if ((void)v101)
  {
    sub_5217C8((uint64_t)v97, &__p, (uint64_t)&v101);
    uint64_t v69 = v101;
    if ((_BYTE)v102)
    {
      uint64_t v70 = *(void *)(v101 + 8) + 12 * *((void *)&v101 + 1);
      *(void *)uint64_t v70 = __p;
      *(_DWORD *)(v70 + 8) = 0;
    }
    unint64_t v71 = *(unsigned int *)(*(void *)(v69 + 8) + 12 * *((void *)&v101 + 1) + 8);
    unint64_t v72 = sub_EAE104(a2);
    if (v71 <= v72) {
      unint64_t v73 = v72;
    }
    else {
      unint64_t v73 = v71;
    }
    if (v72 <= v71)
    {
LABEL_132:
      sub_5217C8((uint64_t)v97, &__p, (uint64_t)&v101);
      uint64_t v77 = v101;
      if ((_BYTE)v102)
      {
        uint64_t v78 = *(void *)(v101 + 8) + 12 * *((void *)&v101 + 1);
        *(void *)uint64_t v78 = __p;
        *(_DWORD *)(v78 + 8) = 0;
      }
      unint64_t v79 = *(unsigned int *)(*(void *)(v77 + 8) + 12 * *((void *)&v101 + 1) + 8);
      unint64_t v80 = sub_EAE104(a2);
      v94[0] = 0;
      v94[1] = 0;
      uint64_t v95 = 0;
      if (v80 > v79)
      {
        do
        {
          *(void *)&long long v101 = *(void *)(sub_EAE1B8(a2, v79) + 32);
          sub_2D5B74((char **)v94, &v101);
          ++v79;
        }
        while (v80 != v79);
      }
      uint64_t v81 = *((void *)&v98 + 1);
      if (*((void *)&v98 + 1) >= v99)
      {
        *((void *)&v98 + 1) = sub_4D088((char **)&v98, (uint64_t)v94);
        if (v94[0])
        {
          v94[1] = v94[0];
          operator delete(v94[0]);
        }
      }
      else
      {
        **((void **)&v98 + 1) = 0;
        *(void *)(v81 + 8) = 0;
        *(void *)(v81 + 16) = 0;
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v94;
        *(void *)(v81 + 16) = v95;
        *((void *)&v98 + 1) = v81 + 24;
      }
    }
    else
    {
      while (1)
      {
        uint64_t v74 = *(int **)(sub_EAE1B8(a2, v71) + 8);
        if (!v74) {
          break;
        }
        char v75 = (unsigned __int16 *)((char *)v74 - *v74);
        if (*v75 < 0x11u) {
          break;
        }
        uint64_t v76 = v75[8];
        if (!v76 || (*(_WORD *)((unsigned char *)v74 + v76) & 4) == 0) {
          break;
        }
        if (v73 == ++v71) {
          goto LABEL_132;
        }
      }
    }
  }
  *(_OWORD *)int v88 = v98;
  v88[2] = v99;
  unint64_t v99 = 0;
  long long v98 = 0uLL;
  sub_328138((uint64_t)v97);
  int v5 = (char *)v98;
  if ((void)v98)
  {
LABEL_141:
    uint64_t v82 = (char *)*((void *)&v98 + 1);
    double v83 = v5;
    if (*((char **)&v98 + 1) != v5)
    {
      v84 = (char *)*((void *)&v98 + 1);
      do
      {
        unsigned int v86 = (void *)*((void *)v84 - 3);
        v84 -= 24;
        v85 = v86;
        if (v86)
        {
          *((void *)v82 - 2) = v85;
          operator delete(v85);
        }
        uint64_t v82 = v84;
      }
      while (v84 != v5);
      double v83 = (char *)v98;
    }
    *((void *)&v98 + 1) = v5;
    operator delete(v83);
  }
}

void sub_1068618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (__p)
  {
    operator delete(__p);
    unsigned int v25 = a16;
    if (!a16)
    {
LABEL_3:
      unsigned int v26 = a19;
      if (!a19) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v25 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  unsigned int v26 = a19;
  if (!a19)
  {
LABEL_4:
    unint64_t v27 = *(void **)(v23 - 144);
    if (!v27)
    {
LABEL_10:
      sub_328138((uint64_t)&a23);
      sub_36094((void **)(v23 - 176));
      _Unwind_Resume(a1);
    }
LABEL_9:
    *(void *)(v23 - 136) = v27;
    operator delete(v27);
    sub_328138((uint64_t)&a23);
    sub_36094((void **)(v23 - 176));
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(v26);
  unint64_t v27 = *(void **)(v23 - 144);
  if (!v27) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

char **sub_1068760@<X0>(char **result@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)result + 8) == 2)
  {
    uint64_t v3 = sub_374D14(*result);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_46B058();
    int v5 = v4;
    unint64_t v7 = v6;
    sub_EADA68();
    uint64_t v10 = v3;
    return sub_1068834(v5, v7, v8, v9, (char **)a2, (uint64_t)&v11, &v10);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_1068818(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **sub_1068834(void *a1, unint64_t a2, void *a3, unint64_t a4, char **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v20 = a5;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v12 = sub_EAE104(a1);
        unint64_t v13 = sub_EAE104(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return v20;
          }
        }
        else
        {
          uint64_t v14 = sub_EAE1B8(a1, a2);
          if (v14 == sub_EAE1B8(a3, a4)) {
            return v20;
          }
        }
        uint64_t v15 = sub_EAE1B8(a1, a2);
        if (sub_29AD50(*a7, *(void *)(v15 + 32)))
        {
          uint64_t v19 = *(void *)(sub_EAE1B8(a1, a2) + 32);
          sub_2D66A4(&v20, &v19);
        }
        ++a2;
      }
    }
    while (a2 < sub_EAE104(a1))
    {
      uint64_t v16 = sub_EAE1B8(a1, a2);
      if (sub_29AD50(*a7, *(void *)(v16 + 32)))
      {
        uint64_t v19 = *(void *)(sub_EAE1B8(a1, a2) + 32);
        sub_2D66A4(&v20, &v19);
      }
      ++a2;
    }
  }
  else if (a3)
  {
    while (a4 < sub_EAE104(a3))
    {
      uint64_t v18 = sub_EAE1B8(0, a2);
      if (sub_29AD50(*a7, *(void *)(v18 + 32)))
      {
        uint64_t v19 = *(void *)(sub_EAE1B8(0, a2) + 32);
        sub_2D66A4(&v20, &v19);
      }
      ++a2;
    }
  }
  return v20;
}

BOOL sub_10689F0(__n128 *a1, uint64_t a2, void *a3)
{
  sub_45E958(a1, &v11);
  unint64_t v6 = v11.n128_u64[1];
  int v5 = (void *)v11.n128_u64[0];
  if (v11.n128_u64[0] == v11.n128_u64[1]) {
    return 1;
  }
  do
  {
    sub_10672EC(v5, a2, a3, (uint64_t)&v12);
    unint64_t v9 = v12;
    uint64_t v10 = v13;
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
    BOOL result = v9 == v10;
    v5 += 59;
  }
  while (v9 == v10 && v5 != (void *)v6);
  return result;
}

uint64_t sub_1068A84(uint64_t a1, void *a2, uint64_t *a3)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_expensive_turn_finder");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "min_extra_turn_time_s");
  *(_DWORD *)(a1 + 4) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_num_turns_to_return");
  __int16 v7 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 8) = v7;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "tbr_cost_function");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  uint64_t v9 = sub_374DFC(a3, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = v9;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "tbr_time_slack_s");
  *(_DWORD *)(a1 + 24) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_full_loop_blocking");
  uint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (!v10)
  {
    BOOL v11 = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  BOOL v11 = *((_DWORD *)v10 + 12) == 4;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_13:
  }
    operator delete(__p[0]);
LABEL_14:
  *(unsigned char *)(a1 + 28) = v11;
  return a1;
}

void sub_1068CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1068CE4(uint64_t **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  *a1 = a2;
  *((unsigned char *)a1 + 8) = a4;
  sub_3EAFD4(a1 + 2, a2, a4);
  sub_3DCBBC(a1 + 7);
  a1[18] = (uint64_t *)sub_3750CC(*a1);
  sub_106AAC4((uint64_t)(a1 + 19), a3, *a1);
  return a1;
}

void sub_1068D48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1068D64(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

void sub_1068D6C(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = (uint64_t)a2;
  BOOL v6 = sub_EAE144(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v6)
  {
    uint64_t v7 = sub_3C80F8(v3);
    uint64_t v8 = sub_3FA3A8(v3);
    uint64_t v32 = a1;
    if (v7 == v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v34 = v3;
      uint64_t v33 = v8;
      sub_3EB374(v32 + 16, (int **)v7, (uint64_t)v38);
      while (1)
      {
        if (v9) {
          operator delete(v9);
        }
        uint64_t v10 = (_OWORD *)*((void *)&v38[0] + 1);
        unsigned int v35 = *(void **)&v38[0];
        if (*(void *)&v38[0] != *((void *)&v38[0] + 1))
        {
          BOOL v11 = a3[1];
          unint64_t v12 = *(_OWORD **)&v38[0];
          do
          {
            uint64_t v14 = *(void *)(v7 + 32);
            v38[0] = *v12;
            unint64_t v15 = (unint64_t)a3[2];
            if ((unint64_t)v11 < v15)
            {
              *(void *)BOOL v11 = v14;
              *(_OWORD *)(v11 + 8) = v38[0];
              unint64_t v13 = v11 + 24;
            }
            else
            {
              uint64_t v16 = *a3;
              unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a3) >> 3);
              unint64_t v18 = v17 + 1;
              if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v16) >> 3);
              if (2 * v19 > v18) {
                unint64_t v18 = 2 * v19;
              }
              if (v19 >= 0x555555555555555) {
                unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                if (v20 > 0xAAAAAAAAAAAAAAALL) {
                  sub_188D718();
                }
                uint64_t v21 = (char *)operator new(24 * v20);
              }
              else
              {
                uint64_t v21 = 0;
              }
              uint64_t v22 = &v21[24 * v17];
              *(void *)uint64_t v22 = v14;
              *(_OWORD *)(v22 + 8) = v38[0];
              uint64_t v23 = v22;
              if (v11 != v16)
              {
                do
                {
                  long long v24 = *(_OWORD *)(v11 - 24);
                  *((void *)v23 - 1) = *((void *)v11 - 1);
                  *(_OWORD *)(v23 - 24) = v24;
                  v23 -= 24;
                  v11 -= 24;
                }
                while (v11 != v16);
                BOOL v11 = *a3;
              }
              unsigned int v25 = &v21[24 * v20];
              unint64_t v13 = v22 + 24;
              *a3 = v23;
              a3[1] = v22 + 24;
              a3[2] = v25;
              if (v11) {
                operator delete(v11);
              }
            }
            a3[1] = v13;
            ++v12;
            BOOL v11 = v13;
          }
          while (v12 != v10);
        }
        v7 += 96;
        uint64_t v3 = v34;
        uint64_t v9 = v35;
        if (v7 == v33) {
          break;
        }
        sub_3EB374(v32 + 16, (int **)v7, (uint64_t)v38);
      }
    }
    uint64_t v26 = sub_EAFF60(v3);
    long long v27 = *(_OWORD *)v26;
    long long v28 = *(_OWORD *)(v26 + 16);
    uint64_t v39 = *(void **)(v26 + 32);
    v38[0] = v27;
    v38[1] = v28;
    sub_3EB374(v32 + 16, (int **)v38, (uint64_t)&v36);
    if (v9) {
      operator delete(v9);
    }
    char v30 = v36;
    uint64_t v29 = (long long *)v37;
    if (v36 != (void *)v37)
    {
      uint64_t v31 = (long long *)v36;
      do
      {
        unint64_t v36 = v39;
        long long v37 = *v31;
        sub_4885C(a3, (long long *)&v36);
        ++v31;
      }
      while (v31 != v29);
    }
    if (v30) {
      operator delete(v30);
    }
  }
}

void sub_1069018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (v14)
  {
    operator delete(v14);
    uint64_t v16 = *(void **)v13;
    if (!*(void *)v13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v16 = *(void **)v13;
    if (!*(void *)v13) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_1069090(uint64_t a1@<X0>, void *a2@<X1>, void **a3@<X8>)
{
  BOOL v5 = sub_EAE144(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v5)
  {
    unint64_t v6 = sub_EB04C4(a2);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      unint64_t v25 = v6;
      uint64_t v26 = a1 + 16;
      do
      {
        uint64_t v10 = sub_EB0624(a2, v9);
        sub_3F4E6C(v26, v10, (uint64_t)&v30);
        unint64_t v28 = v9;
        if (v8) {
          operator delete(v8);
        }
        BOOL v11 = (long long *)*((void *)&v30 + 1);
        unint64_t v12 = (long long *)v30;
        for (i = (void *)v30; v12 != v11; uint64_t v7 = v24)
        {
          while (1)
          {
            uint64_t v13 = *(void *)(v10 + 32);
            long long v30 = *v12;
            unint64_t v14 = (unint64_t)a3[2];
            if ((unint64_t)v7 >= v14) {
              break;
            }
            *(void *)uint64_t v7 = v13;
            *(_OWORD *)(v7 + 8) = v30;
            a3[1] = v7 + 24;
            ++v12;
            v7 += 24;
            if (v12 == v11) {
              goto LABEL_4;
            }
          }
          unint64_t v15 = (char *)*a3;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a3) >> 3);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v15) >> 3);
          if (2 * v18 > v17) {
            unint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            if (v19 > 0xAAAAAAAAAAAAAAALL) {
              sub_188D718();
            }
            unint64_t v20 = (char *)operator new(24 * v19);
          }
          else
          {
            unint64_t v20 = 0;
          }
          uint64_t v21 = &v20[24 * v16];
          *(void *)uint64_t v21 = v13;
          *(_OWORD *)(v21 + 8) = v30;
          uint64_t v22 = v21;
          if (v7 != v15)
          {
            do
            {
              long long v23 = *(_OWORD *)(v7 - 24);
              *((void *)v22 - 1) = *((void *)v7 - 1);
              *(_OWORD *)(v22 - 24) = v23;
              v22 -= 24;
              v7 -= 24;
            }
            while (v7 != v15);
            uint64_t v7 = (char *)*a3;
          }
          long long v24 = v21 + 24;
          *a3 = v22;
          a3[1] = v21 + 24;
          a3[2] = &v20[24 * v19];
          if (v7) {
            operator delete(v7);
          }
          a3[1] = v24;
          ++v12;
        }
LABEL_4:
        uint64_t v8 = i;
        unint64_t v9 = v28 + 1;
      }
      while (v28 + 1 != v25);
      if (i) {
        operator delete(i);
      }
    }
  }
}

void sub_10692D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (!*(void *)v14) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v14 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1069330@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_37D0C8(a3);
  if (!result) {
    return result;
  }
  uint64_t result = sub_EAE144(a1);
  if (result) {
    return result;
  }
  uint64_t result = sub_EADC78((uint64_t)a1);
  if (result) {
    return result;
  }
  uint64_t v50 = sub_3750CC(a3);
  uint64_t v9 = sub_EADD1C((uint64_t)a1);
  sub_2954EC(v50, *(void *)(v9 + 32), (uint64_t)&v55);
  uint64_t v10 = __p;
  int v48 = a3;
  if (__p == v57)
  {
    unint64_t v13 = 0xFFFFFFFF00000000;
    int v16 = 0x7FFFFFFF;
    uint64_t v14 = 0xFFFFFFFFLL;
    if (!__p) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unint64_t v11 = sub_2E40A4((uint64_t)&v55);
  unsigned int v12 = v11;
  unint64_t v13 = v11 & 0xFFFFFFFF00000000;
  uint64_t v10 = __p;
  uint64_t v14 = v12;
  int v16 = v15;
  if (__p)
  {
LABEL_6:
    unint64_t v57 = v10;
    operator delete(v10);
  }
LABEL_7:
  unint64_t v53 = v13 | v14;
  int v54 = v16;
  if (v14 == 0xFFFFFFFFLL && v13 == 0xFFFFFFFF00000000 || (sub_37D100(a3, &v53) & 1) == 0)
  {
    uint64_t v55 = *(void *)(sub_EADD1C((uint64_t)a1) + 32);
    sub_2D5B74((char **)a4, &v55);
  }
  sub_46B058();
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  sub_EAFC0C();
  uint64_t v22 = v21;
  unint64_t v24 = v23;
  uint64_t v25 = 0;
  unint64_t v26 = v20 + 1;
  int v49 = a1;
  while (1)
  {
    if (v18)
    {
      unint64_t v27 = sub_EB04C4(v18);
      BOOL v28 = v26 < v27;
      if (!v22)
      {
        if (v26 >= v27) {
          goto LABEL_36;
        }
        goto LABEL_26;
      }
    }
    else
    {
      if (!v22) {
        goto LABEL_36;
      }
      BOOL v28 = 0;
    }
    unint64_t v29 = sub_EB04C4(v22);
    if (v24 >= v29 || !v28) {
      break;
    }
    uint64_t v31 = sub_EB0624(v18, v26);
    if (v31 == sub_EB0624(v22, v24)) {
      goto LABEL_36;
    }
LABEL_26:
    v25 += sub_EB0698((uint64_t)v18, v26);
    if (v25 <= a2) {
      goto LABEL_12;
    }
    uint64_t v32 = sub_EB0624(v18, v26);
    sub_2954EC(v50, *(void *)(v32 + 32), (uint64_t)&v55);
    uint64_t v33 = __p;
    if (__p != v57)
    {
      unint64_t v34 = sub_2E1AA4((uint64_t)&v55);
      unsigned int v35 = v34;
      unint64_t v36 = v34 & 0xFFFFFFFF00000000;
      uint64_t v33 = __p;
      uint64_t v37 = v35;
      int v39 = v38;
      if (!__p) {
        goto LABEL_30;
      }
LABEL_29:
      unint64_t v57 = v33;
      operator delete(v33);
      goto LABEL_30;
    }
    unint64_t v36 = 0xFFFFFFFF00000000;
    uint64_t v37 = 0xFFFFFFFFLL;
    int v39 = 0x7FFFFFFF;
    if (__p) {
      goto LABEL_29;
    }
LABEL_30:
    unint64_t v51 = v36 | v37;
    int v52 = v39;
    a1 = v49;
    if (v37 == 0xFFFFFFFFLL && v36 == 0xFFFFFFFF00000000 || (sub_37D100(v48, &v51) & 1) == 0)
    {
      uint64_t v55 = *(void *)(sub_EB0624(v18, v26) + 32);
      sub_2D5B74((char **)a4, &v55);
    }
LABEL_12:
    ++v26;
  }
  if ((v28 ^ (v24 < v29))) {
    goto LABEL_26;
  }
LABEL_36:
  uint64_t v40 = sub_EAFF60((uint64_t)a1);
  sub_2954EC(v50, *(void *)(v40 + 32), (uint64_t)&v55);
  BOOL v41 = __p;
  if (__p == v57)
  {
    int v45 = 0x7FFFFFFF;
    unint64_t v46 = 0xFFFFFFFF00000000;
    uint64_t v47 = 0xFFFFFFFFLL;
    if (__p)
    {
LABEL_38:
      unint64_t v57 = v41;
      operator delete(v41);
    }
  }
  else
  {
    unint64_t v42 = sub_2E1AA4((uint64_t)&v55);
    unsigned int v43 = v42;
    int v45 = v44;
    unint64_t v46 = v42 & 0xFFFFFFFF00000000;
    BOOL v41 = __p;
    uint64_t v47 = v43;
    if (__p) {
      goto LABEL_38;
    }
  }
  unint64_t v51 = v46 | v47;
  int v52 = v45;
  if (v47 == 0xFFFFFFFFLL && v46 == 0xFFFFFFFF00000000 || (uint64_t result = sub_37D100(v48, &v51), (result & 1) == 0))
  {
    uint64_t v55 = *(void *)(sub_EAFF60((uint64_t)a1) + 32);
    return (uint64_t)sub_2D5B74((char **)a4, &v55);
  }
  return result;
}

void sub_10696A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = *(void **)v18;
    if (!*(void *)v18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = *(void **)v18;
    if (!*(void *)v18) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 + 8) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_1069724(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = (uint64_t *)(a1 + 56);
  if (sub_EAE144(a2))
  {
    uint64_t v39 = 0;
    long long v37 = 0u;
    *(_OWORD *)int v38 = 0u;
    *(_OWORD *)unsigned int v35 = 0u;
    *(_OWORD *)unint64_t v36 = 0u;
  }
  else
  {
    sub_3DE070(v10, (uint64_t)a2, (uint64_t)v35);
    if (v35[0] != v35[1]) {
      goto LABEL_6;
    }
  }
  if (v36[1] == (void *)v37 && v38[0] == v38[1]) {
    goto LABEL_12;
  }
LABEL_6:
  if (*a4 == 0x7FFFFFFF)
  {
LABEL_12:
    sub_106E030(a5, (uint64_t)v35);
    goto LABEL_26;
  }
  unint64_t v11 = sub_F5B780(a3, a2, *(int **)(a1 + 168), a4, *(unsigned __int8 *)(a1 + 8), a4[2]);
  unsigned int v12 = v11;
  __p = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  if (v11[5] == 0x7FFFFFFF
    || (v14 = *((void *)v11 + 4), uint64_t v13 = *((void *)v11 + 5), sub_EB04C4(a2) + 2 != (v13 - v14) >> 4))
  {
    sub_106E030(a5, (uint64_t)v35);
  }
  else
  {
    unint64_t v15 = sub_EB04C4(a2);
    unint64_t v16 = v15;
    if (v15 > (v34 - (unsigned char *)__p) >> 2)
    {
      if (v15 >> 62) {
        sub_2E00();
      }
      unint64_t v17 = (char *)operator new(4 * v15);
      __p = &v17[(v33 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v33 = __p;
      unint64_t v34 = &v17[4 * v16];
    }
    unint64_t v18 = sub_EB04C4(a2);
    if (v18)
    {
      uint64_t v19 = 0;
      do
      {
        int v31 = *(_DWORD *)(*((void *)v12 + 4) + v19 + 36) - *(_DWORD *)(*((void *)v12 + 4) + v19 + 20);
        sub_3B79D0(&__p, &v31);
        v19 += 16;
        --v18;
      }
      while (v18);
    }
    if (a4[2])
    {
      int v20 = v12[5];
      int v21 = v20 / -10;
      int v22 = v20 % 10;
      if (v20 < 0) {
        char v23 = -5;
      }
      else {
        char v23 = 5;
      }
      unsigned int v24 = v21 + *a4 + (((-103 * (char)(v23 + v22)) >> 15) & 1) + ((-103 * (char)(v23 + v22)) >> 10);
    }
    else
    {
      unsigned int v24 = *a4;
    }
    sub_3DEFE8(v10, (uint64_t)a2, v24, (uint64_t)a5);
  }
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
LABEL_26:
  uint64_t v25 = (char *)v38[0];
  if (v38[0])
  {
    unint64_t v26 = v38[1];
    unint64_t v27 = v38[0];
    if (v38[1] != v38[0])
    {
      BOOL v28 = (char *)v38[1];
      do
      {
        long long v30 = (void *)*((void *)v28 - 3);
        v28 -= 24;
        unint64_t v29 = v30;
        if (v30)
        {
          *(v26 - 2) = v29;
          operator delete(v29);
        }
        unint64_t v26 = v28;
      }
      while (v28 != v25);
      unint64_t v27 = v38[0];
    }
    v38[1] = v25;
    operator delete(v27);
  }
  if (v36[1])
  {
    *(void **)&long long v37 = v36[1];
    operator delete(v36[1]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
}

void sub_1069AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3DB6CC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1069AF8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  long long v101 = 0uLL;
  unint64_t v102 = 0;
  if (sub_EAE144(a2) || sub_EADC78((uint64_t)a2))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v6 = (char *)v101;
    if ((void)v101) {
      goto LABEL_139;
    }
    return;
  }
  unsigned int v7 = 0;
  v100[0] = &unk_20E1710;
  memset(&v100[1], 0, 24);
  v100[5] = 0;
  v100[6] = &unk_20E1710;
  v100[11] = 0;
  v100[12] = &unk_20E1710;
  memset(&v100[7], 0, 24);
  memset(&v100[13], 0, 24);
  v100[17] = 0;
  v100[18] = &unk_20E1710;
  memset(&v100[19], 0, 24);
  v100[23] = 0;
  v100[24] = &unk_20E1710;
  memset(&v100[25], 0, 24);
  v100[29] = 0;
  v100[30] = &unk_20E1710;
  v100[35] = 0;
  v100[36] = &unk_20E1710;
  memset(&v100[31], 0, 24);
  memset(&v100[37], 0, 24);
  v100[41] = 0;
  v100[42] = &unk_20E1710;
  memset(&v100[43], 0, 24);
  v100[47] = 0;
  v100[48] = &unk_20E1710;
  memset(&v100[49], 0, 24);
  v100[53] = 0;
  v100[54] = &unk_20E1710;
  memset(&v100[55], 0, 24);
  v100[59] = 0;
  v100[65] = 0;
  v100[60] = &unk_20E1710;
  memset(&v100[61], 0, 24);
  v100[66] = &unk_20E1710;
  v100[71] = 0;
  memset(&v100[67], 0, 24);
  v100[72] = &unk_20E1710;
  v100[77] = 0;
  memset(&v100[73], 0, 24);
  v100[78] = &unk_20E1710;
  v100[83] = 0;
  memset(&v100[79], 0, 24);
  v100[84] = &unk_20E1710;
  v100[89] = 0;
  memset(&v100[85], 0, 24);
  v100[90] = &unk_20E1710;
  v100[95] = 0;
  memset(&v100[91], 0, 24);
LABEL_7:
  while (2)
  {
    unint64_t v8 = v7;
    if (sub_EB04C4(a2) > v7)
    {
      uint64_t v9 = (int **)sub_EB0624(a2, v7);
      uint64_t v10 = (unsigned __int16 *)((char *)*v9 - **v9);
      if (*v10 >= 0x2Fu)
      {
        uint64_t v11 = v10[23];
        if (v11)
        {
          unsigned int v12 = *((unsigned __int8 *)*v9 + v11);
          BOOL v13 = v12 > 0x36;
          uint64_t v14 = (1 << v12) & 0x44000000000008;
          BOOL v15 = v13 || v14 == 0;
          if (!v15)
          {
            for (uint64_t i = 0; i != 96; i += 6)
            {
              unint64_t v18 = &v100[i];
              if (v100[i + 2])
              {
                unint64_t v19 = v18[3];
                if (v19 >= 0x80)
                {
                  unint64_t v17 = &v100[i];
                  operator delete((void *)v100[i]);
                  v17[5] = 0;
                  *unint64_t v17 = &unk_20E1710;
                  v17[1] = 0;
                  v17[2] = 0;
                  v17[3] = 0;
                }
                else if (v19)
                {
                  v18[2] = 0;
                  memset((void *)v100[i], 128, v19 + 8);
                  *(unsigned char *)(v100[i] + v19) = -1;
                  unint64_t v20 = v18[3];
                  uint64_t v21 = v20 - (v20 >> 3);
                  BOOL v15 = v20 == 7;
                  uint64_t v22 = 6;
                  if (!v15) {
                    uint64_t v22 = v21;
                  }
                  v100[i + 5] = v22 - v18[2];
                }
              }
            }
            goto LABEL_6;
          }
        }
      }
      unint64_t v99 = sub_2E48C4(v9);
      sub_106EBD0((uint64_t)v100, &v99, &v104);
      if (!(void)v104)
      {
        sub_5217C8((uint64_t)v100, &v99, (uint64_t)&v104);
        uint64_t v33 = v104;
        if ((_BYTE)v105)
        {
          uint64_t v34 = *(void *)(v104 + 8) + 12 * *((void *)&v104 + 1);
          *(void *)uint64_t v34 = v99;
          *(_DWORD *)(v34 + 8) = 0;
        }
        *(_DWORD *)(*(void *)(v33 + 8) + 12 * *((void *)&v104 + 1) + 8) = v7++;
        continue;
      }
      sub_5217C8((uint64_t)v100, &v99, (uint64_t)&v104);
      uint64_t v23 = v104;
      if ((_BYTE)v105)
      {
        uint64_t v24 = *(void *)(v104 + 8) + 12 * *((void *)&v104 + 1);
        *(void *)uint64_t v24 = v99;
        *(_DWORD *)(v24 + 8) = 0;
      }
      uint64_t v25 = *(void *)(v23 + 8) + 12 * *((void *)&v104 + 1);
      unint64_t v26 = *(unsigned int *)(v25 + 8);
      if (v26 <= v7) {
        unsigned int v27 = v7;
      }
      else {
        unsigned int v27 = *(_DWORD *)(v25 + 8);
      }
      if (v26 >= v7)
      {
        long long v104 = 0uLL;
        uint64_t v105 = 0;
        uint64_t v32 = (void *)*((void *)&v101 + 1);
        if (*((void *)&v101 + 1) < v102) {
          goto LABEL_39;
        }
        goto LABEL_44;
      }
      unsigned int v28 = *(_DWORD *)(v25 + 8);
      while (1)
      {
        unint64_t v29 = *(int **)(sub_EB0624(a2, v28) + 8);
        if (!v29) {
          break;
        }
        long long v30 = (unsigned __int16 *)((char *)v29 - *v29);
        if (*v30 < 0x11u) {
          break;
        }
        uint64_t v31 = v30[8];
        if (!v31 || (*(_WORD *)((unsigned char *)v29 + v31) & 4) == 0) {
          break;
        }
        if (v27 == ++v28)
        {
          long long v104 = 0uLL;
          uint64_t v105 = 0;
          if (v26 < v7)
          {
            do
            {
              v97[0] = *(void **)(sub_EB0624(a2, v26) + 32);
              sub_2D5B74((char **)&v104, v97);
              ++v26;
            }
            while (v7 != v26);
          }
          uint64_t v32 = (void *)*((void *)&v101 + 1);
          if (*((void *)&v101 + 1) < v102)
          {
LABEL_39:
            *uint64_t v32 = 0;
            v32[1] = 0;
            v32[2] = 0;
            *(_OWORD *)uint64_t v32 = v104;
            v32[2] = v105;
            *((void *)&v101 + 1) = v32 + 3;
            goto LABEL_46;
          }
LABEL_44:
          *((void *)&v101 + 1) = sub_4D088((char **)&v101, (uint64_t)&v104);
          if ((void)v104)
          {
            *((void *)&v104 + 1) = v104;
            operator delete((void *)v104);
          }
LABEL_46:
          for (uint64_t j = 0; j != 96; j += 6)
          {
            long long v37 = &v100[j];
            if (v100[j + 2])
            {
              unint64_t v38 = v37[3];
              if (v38 >= 0x80)
              {
                unint64_t v36 = &v100[j];
                operator delete((void *)v100[j]);
                v36[5] = 0;
                *unint64_t v36 = &unk_20E1710;
                v36[1] = 0;
                v36[2] = 0;
                v36[3] = 0;
              }
              else if (v38)
              {
                v37[2] = 0;
                memset((void *)v100[j], 128, v38 + 8);
                *(unsigned char *)(v100[j] + v38) = -1;
                unint64_t v39 = v37[3];
                uint64_t v40 = v39 - (v39 >> 3);
                BOOL v15 = v39 == 7;
                uint64_t v41 = 6;
                if (!v15) {
                  uint64_t v41 = v40;
                }
                v100[j + 5] = v41 - v37[2];
              }
            }
          }
LABEL_6:
          ++v7;
          goto LABEL_7;
        }
      }
      uint64_t v42 = *(void *)(sub_EB0624(a2, v26) + 32);
      uint64_t v43 = *(void *)(sub_EB0624(a2, v7) + 32);
      if ((v42 & 0xFFFFFFFFFFFFLL) != (v43 & 0xFFFFFFFFFFFFLL))
      {
        ++v7;
        continue;
      }
      BOOL v44 = (v42 & 0xFF000000000000) == 0;
      unsigned int v45 = v7;
      if ((v44 ^ ((v43 & 0x1000000000000) == 0)))
      {
        ++v7;
        continue;
      }
      while (sub_EB04C4(a2) > v45)
      {
        unint64_t v46 = (int **)sub_EB0624(a2, v45);
        v97[0] = (void *)sub_2E48C4(v46);
        sub_106EBD0((uint64_t)v100, v97, &v104);
        if (!(void)v104) {
          break;
        }
        ++v45;
      }
      if (v26) {
        unint64_t v47 = (v26 - 1);
      }
      else {
        unint64_t v47 = 0;
      }
      uint64_t v48 = *(void *)(sub_EB0624(a2, v47) + 32);
      int v49 = (char *)operator new(8uLL);
      *((void *)&v104 + 1) = v49 + 8;
      uint64_t v105 = v49 + 8;
      *(_DWORD *)int v49 = v48;
      v49[6] = BYTE6(v48);
      *((_WORD *)v49 + 2) = WORD2(v48);
      *(void *)&long long v104 = v49;
      if (v7 < v45)
      {
        do
        {
          if (sub_EB04C4(a2) <= v8) {
            break;
          }
          v97[0] = *(void **)(sub_EB0624(a2, v8) + 32);
          sub_2D5B74((char **)&v104, v97);
          ++v8;
        }
        while (v45 != v8);
        int v49 = (char *)v104;
      }
      uint64_t v50 = *(void **)(a1 + 144);
      v93[0] = *(void **)v49;
      v97[1] = 0;
      uint64_t v98 = 0;
      v97[0] = 0;
      __p = v50;
      unint64_t v96 = v93;
      sub_3E1DFC((uint64_t)v50, (uint64_t)v93[0], (uint64_t)v97, (uint64_t)&__p);
      unint64_t v51 = (unint64_t *)v97[0];
      int v52 = (unint64_t *)v97[1];
      if (v97[0] == v97[1])
      {
        if (!v97[0]) {
          goto LABEL_72;
        }
LABEL_71:
        v97[1] = v51;
        operator delete(v51);
        goto LABEL_72;
      }
      while (1)
      {
        unint64_t v56 = *v51;
        sub_68F5DC(*(void *)(a1 + 144), *v51, (unint64_t *)&__p);
        if ((char *)v96 - (unsigned char *)__p != *((void *)&v104 + 1) - (void)v104) {
          goto LABEL_75;
        }
        uint64_t v57 = *(void *)v104;
        if (__PAIR64__(*((unsigned __int16 *)__p + 2), *(_DWORD *)__p) != __PAIR64__(WORD2(v57), v57)
          || ((v57 & 0x1000000000000) == 0) != (*((unsigned char *)__p + 6) == 0))
        {
          goto LABEL_75;
        }
        uint64_t v58 = (int *)sub_2DBC9C(*(void *)(a1 + 144), v56);
        unint64_t v59 = (unsigned __int16 *)((char *)v58 - *v58);
        unsigned int v60 = *v59;
        if (v60 >= 0xF) {
          break;
        }
        if (v60 >= 5) {
          goto LABEL_89;
        }
LABEL_93:
        char v61 = (void **)__p;
        unsigned int v62 = (void *)v104;
        if (__p != v96)
        {
          while (__PAIR64__(*((unsigned __int16 *)v61 + 2), *(_DWORD *)v61) == __PAIR64__((unsigned __int16)WORD2(*v62), *v62)&& (HIWORD(*v62) & 1) != (*((unsigned char *)v61 + 6) == 0))
          {
            ++v61;
            ++v62;
            if (v61 == v96) {
              goto LABEL_97;
            }
          }
        }
        if (v61 == v96)
        {
LABEL_97:
          if (v62 == *((void **)&v104 + 1))
          {
            v93[0] = 0;
            v93[1] = 0;
            uint64_t v94 = 0;
            if (v26 < v7)
            {
              unint64_t v63 = v26;
              do
              {
                uint64_t v103 = *(void *)(sub_EB0624(a2, v63) + 32);
                sub_2D5B74((char **)v93, &v103);
                ++v63;
              }
              while (v7 != v63);
            }
            uint64_t v64 = *((void *)&v101 + 1);
            uint64_t v92 = a1;
            if (*((void *)&v101 + 1) >= v102)
            {
              *((void *)&v101 + 1) = sub_4D088((char **)&v101, (uint64_t)v93);
              if (v93[0])
              {
                v93[1] = v93[0];
                operator delete(v93[0]);
              }
            }
            else
            {
              **((void **)&v101 + 1) = 0;
              *(void *)(v64 + 8) = 0;
              *(void *)(v64 + 16) = 0;
              *(_OWORD *)uint64_t v64 = *(_OWORD *)v93;
              *(void *)(v64 + 16) = v94;
              *((void *)&v101 + 1) = v64 + 24;
            }
            for (uint64_t k = 0; k != 96; k += 6)
            {
              uint64_t v67 = &v100[k];
              if (v100[k + 2])
              {
                unint64_t v68 = v67[3];
                if (v68 >= 0x80)
                {
                  uint64_t v66 = &v100[k];
                  operator delete((void *)v100[k]);
                  v66[5] = 0;
                  *uint64_t v66 = &unk_20E1710;
                  v66[1] = 0;
                  v66[2] = 0;
                  v66[3] = 0;
                }
                else if (v68)
                {
                  v67[2] = 0;
                  memset((void *)v100[k], 128, v68 + 8);
                  *(unsigned char *)(v100[k] + v68) = -1;
                  unint64_t v69 = v67[3];
                  uint64_t v70 = v69 - (v69 >> 3);
                  BOOL v15 = v69 == 7;
                  uint64_t v71 = 6;
                  if (!v15) {
                    uint64_t v71 = v70;
                  }
                  v100[k + 5] = v71 - v67[2];
                }
              }
              char v53 = 1;
            }
            unsigned int v7 = v45;
            a1 = v92;
            int v54 = (void **)__p;
            if (!__p) {
              goto LABEL_77;
            }
LABEL_76:
            unint64_t v96 = v54;
            operator delete(v54);
            goto LABEL_77;
          }
        }
LABEL_75:
        char v53 = 0;
        int v54 = (void **)__p;
        if (__p) {
          goto LABEL_76;
        }
LABEL_77:
        if (++v51 == v52) {
          char v55 = 1;
        }
        else {
          char v55 = v53;
        }
        if (v55)
        {
          unint64_t v51 = (unint64_t *)v97[0];
          if (v97[0]) {
            goto LABEL_71;
          }
LABEL_72:
          if (!(void)v104) {
            goto LABEL_6;
          }
          *((void *)&v104 + 1) = v104;
          operator delete((void *)v104);
          ++v7;
          goto LABEL_7;
        }
      }
      if (v59[7] && (*((unsigned char *)v58 + v59[7]) & 1) == 0) {
        goto LABEL_75;
      }
LABEL_89:
      if (v59[2] && *((unsigned __int8 *)v58 + v59[2]) - 1 < 5 || v60 >= 9 && v59[4]) {
        goto LABEL_75;
      }
      goto LABEL_93;
    }
    break;
  }
  unint64_t v72 = sub_EB04C4(a2);
  unint64_t v73 = (int **)sub_EB0624(a2, v72 - 1);
  __p = (void *)sub_2E4738(v73);
  sub_106EBD0((uint64_t)v100, &__p, &v104);
  if ((void)v104)
  {
    sub_5217C8((uint64_t)v100, &__p, (uint64_t)&v104);
    uint64_t v74 = v104;
    if ((_BYTE)v105)
    {
      uint64_t v75 = *(void *)(v104 + 8) + 12 * *((void *)&v104 + 1);
      *(void *)uint64_t v75 = __p;
      *(_DWORD *)(v75 + 8) = 0;
    }
    unint64_t v76 = *(unsigned int *)(*(void *)(v74 + 8) + 12 * *((void *)&v104 + 1) + 8);
    unint64_t v77 = sub_EB04C4(a2);
    if (v76 <= v77) {
      unint64_t v78 = v77;
    }
    else {
      unint64_t v78 = v76;
    }
    if (v77 <= v76)
    {
LABEL_130:
      sub_5217C8((uint64_t)v100, &__p, (uint64_t)&v104);
      uint64_t v82 = v104;
      if ((_BYTE)v105)
      {
        uint64_t v83 = *(void *)(v104 + 8) + 12 * *((void *)&v104 + 1);
        *(void *)uint64_t v83 = __p;
        *(_DWORD *)(v83 + 8) = 0;
      }
      unint64_t v84 = *(unsigned int *)(*(void *)(v82 + 8) + 12 * *((void *)&v104 + 1) + 8);
      unint64_t v85 = sub_EB04C4(a2);
      v97[0] = 0;
      v97[1] = 0;
      uint64_t v98 = 0;
      if (v85 > v84)
      {
        do
        {
          *(void *)&long long v104 = *(void *)(sub_EB0624(a2, v84) + 32);
          sub_2D5B74((char **)v97, &v104);
          ++v84;
        }
        while (v85 != v84);
      }
      uint64_t v86 = *((void *)&v101 + 1);
      if (*((void *)&v101 + 1) >= v102)
      {
        *((void *)&v101 + 1) = sub_4D088((char **)&v101, (uint64_t)v97);
        if (v97[0])
        {
          v97[1] = v97[0];
          operator delete(v97[0]);
        }
      }
      else
      {
        **((void **)&v101 + 1) = 0;
        *(void *)(v86 + 8) = 0;
        *(void *)(v86 + 16) = 0;
        *(_OWORD *)uint64_t v86 = *(_OWORD *)v97;
        *(void *)(v86 + 16) = v98;
        *((void *)&v101 + 1) = v86 + 24;
      }
    }
    else
    {
      while (1)
      {
        unint64_t v79 = *(int **)(sub_EB0624(a2, v76) + 8);
        if (!v79) {
          break;
        }
        unint64_t v80 = (unsigned __int16 *)((char *)v79 - *v79);
        if (*v80 < 0x11u) {
          break;
        }
        uint64_t v81 = v80[8];
        if (!v81 || (*(_WORD *)((unsigned char *)v79 + v81) & 4) == 0) {
          break;
        }
        if (v78 == ++v76) {
          goto LABEL_130;
        }
      }
    }
  }
  *(_OWORD *)a3 = v101;
  a3[2] = v102;
  unint64_t v102 = 0;
  long long v101 = 0uLL;
  sub_328138((uint64_t)v100);
  unint64_t v6 = (char *)v101;
  if ((void)v101)
  {
LABEL_139:
    unint64_t v87 = (char *)*((void *)&v101 + 1);
    int v88 = v6;
    if (*((char **)&v101 + 1) != v6)
    {
      int64x2_t v89 = (char *)*((void *)&v101 + 1);
      do
      {
        uint64_t v91 = (void *)*((void *)v89 - 3);
        v89 -= 24;
        char v90 = v91;
        if (v91)
        {
          *((void *)v87 - 2) = v90;
          operator delete(v90);
        }
        unint64_t v87 = v89;
      }
      while (v89 != v6);
      int v88 = (char *)v101;
    }
    *((void *)&v101 + 1) = v6;
    operator delete(v88);
  }
}

void sub_106A658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v23 = a14;
    if (!a14)
    {
LABEL_3:
      uint64_t v24 = a17;
      if (!a17) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v23 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  uint64_t v24 = a17;
  if (!a17)
  {
LABEL_4:
    uint64_t v25 = *(void **)(v21 - 144);
    if (!v25)
    {
LABEL_10:
      sub_328138((uint64_t)&a21);
      sub_36094((void **)(v21 - 176));
      _Unwind_Resume(a1);
    }
LABEL_9:
    *(void *)(v21 - 136) = v25;
    operator delete(v25);
    sub_328138((uint64_t)&a21);
    sub_36094((void **)(v21 - 176));
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(v24);
  uint64_t v25 = *(void **)(v21 - 144);
  if (!v25) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

char **sub_106A7A0@<X0>(char **result@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)result + 8) == 2)
  {
    uint64_t v3 = sub_374D14(*result);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_46B058();
    BOOL v5 = v4;
    unint64_t v7 = v6;
    sub_EAFC0C();
    uint64_t v10 = v3;
    return sub_106A874(v5, v7, v8, v9, (char **)a2, (uint64_t)&v11, &v10);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_106A858(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **sub_106A874(void *a1, unint64_t a2, void *a3, unint64_t a4, char **a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v20 = a5;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v12 = sub_EB04C4(a1);
        unint64_t v13 = sub_EB04C4(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return v20;
          }
        }
        else
        {
          uint64_t v14 = sub_EB0624(a1, a2);
          if (v14 == sub_EB0624(a3, a4)) {
            return v20;
          }
        }
        uint64_t v15 = sub_EB0624(a1, a2);
        if (sub_29AD50(*a7, *(void *)(v15 + 32)))
        {
          uint64_t v19 = *(void *)(sub_EB0624(a1, a2) + 32);
          sub_2D66A4(&v20, &v19);
        }
        ++a2;
      }
    }
    while (a2 < sub_EB04C4(a1))
    {
      uint64_t v16 = sub_EB0624(a1, a2);
      if (sub_29AD50(*a7, *(void *)(v16 + 32)))
      {
        uint64_t v19 = *(void *)(sub_EB0624(a1, a2) + 32);
        sub_2D66A4(&v20, &v19);
      }
      ++a2;
    }
  }
  else if (a3)
  {
    while (a4 < sub_EB04C4(a3))
    {
      uint64_t v18 = sub_EB0624(0, a2);
      if (sub_29AD50(*a7, *(void *)(v18 + 32)))
      {
        uint64_t v19 = *(void *)(sub_EB0624(0, a2) + 32);
        sub_2D66A4(&v20, &v19);
      }
      ++a2;
    }
  }
  return v20;
}

BOOL sub_106AA30(__n128 *a1, uint64_t a2, void *a3)
{
  sub_45E958(a1, &v11);
  unint64_t v6 = v11.n128_u64[1];
  BOOL v5 = (void *)v11.n128_u64[0];
  if (v11.n128_u64[0] == v11.n128_u64[1]) {
    return 1;
  }
  do
  {
    sub_1069330(v5, a2, a3, (uint64_t)&v12);
    unint64_t v9 = v12;
    uint64_t v10 = v13;
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
    BOOL result = v9 == v10;
    v5 += 59;
  }
  while (v9 == v10 && v5 != (void *)v6);
  return result;
}

uint64_t sub_106AAC4(uint64_t a1, void *a2, uint64_t *a3)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_expensive_turn_finder");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "min_extra_turn_time_s");
  *(_DWORD *)(a1 + 4) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_num_turns_to_return");
  __int16 v7 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 8) = v7;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "tbr_cost_function");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  uint64_t v9 = sub_374E14(a3, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = v9;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "tbr_time_slack_s");
  *(_DWORD *)(a1 + 24) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_full_loop_blocking");
  uint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (!v10)
  {
    BOOL v11 = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  BOOL v11 = *((_DWORD *)v10 + 12) == 4;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_13:
  }
    operator delete(__p[0]);
LABEL_14:
  *(unsigned char *)(a1 + 28) = v11;
  return a1;
}

void sub_106ACF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_106AD24(uint64_t **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  *a1 = a2;
  *((unsigned char *)a1 + 8) = a4;
  sub_3EBD64(a1 + 2, a2, a4);
  sub_3E19B8((uint64_t *)a1 + 7, *a1);
  a1[18] = (uint64_t *)sub_3750CC(*a1);
  sub_106BA4C((uint64_t)(a1 + 19), a3, *a1);
  return a1;
}

void sub_106AD88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*(void **)(v1 + 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_106ADA4(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = a2;
  BOOL v6 = sub_EB2EC4(a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!v6)
  {
    __int16 v7 = (unsigned int *)sub_3C80F8(v3);
    uint64_t v8 = sub_3FA3A8(v3);
    uint64_t v32 = a1;
    if (v7 == (unsigned int *)v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v34 = v3;
      uint64_t v33 = (unsigned int *)v8;
      sub_3EBE9C(v32 + 16, v7, (uint64_t)v38);
      while (1)
      {
        if (v9) {
          operator delete(v9);
        }
        uint64_t v10 = (_OWORD *)*((void *)&v38[0] + 1);
        unsigned int v35 = *(void **)&v38[0];
        if (*(void *)&v38[0] != *((void *)&v38[0] + 1))
        {
          BOOL v11 = a3[1];
          unint64_t v12 = *(_OWORD **)&v38[0];
          do
          {
            uint64_t v14 = *(void *)v7;
            v38[0] = *v12;
            unint64_t v15 = (unint64_t)a3[2];
            if ((unint64_t)v11 < v15)
            {
              *(void *)BOOL v11 = v14;
              *(_OWORD *)(v11 + 8) = v38[0];
              unint64_t v13 = v11 + 24;
            }
            else
            {
              uint64_t v16 = *a3;
              unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v11 - *a3) >> 3);
              unint64_t v18 = v17 + 1;
              if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v16) >> 3);
              if (2 * v19 > v18) {
                unint64_t v18 = 2 * v19;
              }
              if (v19 >= 0x555555555555555) {
                unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                if (v20 > 0xAAAAAAAAAAAAAAALL) {
                  sub_188D718();
                }
                uint64_t v21 = (char *)operator new(24 * v20);
              }
              else
              {
                uint64_t v21 = 0;
              }
              uint64_t v22 = &v21[24 * v17];
              *(void *)uint64_t v22 = v14;
              *(_OWORD *)(v22 + 8) = v38[0];
              uint64_t v23 = v22;
              if (v11 != v16)
              {
                do
                {
                  long long v24 = *(_OWORD *)(v11 - 24);
                  *((void *)v23 - 1) = *((void *)v11 - 1);
                  *(_OWORD *)(v23 - 24) = v24;
                  v23 -= 24;
                  v11 -= 24;
                }
                while (v11 != v16);
                BOOL v11 = *a3;
              }
              uint64_t v25 = &v21[24 * v20];
              unint64_t v13 = v22 + 24;
              *a3 = v23;
              a3[1] = v22 + 24;
              a3[2] = v25;
              if (v11) {
                operator delete(v11);
              }
            }
            a3[1] = v13;
            ++v12;
            BOOL v11 = v13;
          }
          while (v12 != v10);
        }
        v7 += 26;
        uint64_t v3 = v34;
        uint64_t v9 = v35;
        if (v7 == v33) {
          break;
        }
        sub_3EBE9C(v32 + 16, v7, (uint64_t)v38);
      }
    }
    unint64_t v26 = (long long *)sub_EB2ABC(v3);
    long long v27 = *v26;
    long long v28 = v26[2];
    v38[1] = v26[1];
    _OWORD v38[2] = v28;
    v38[0] = v27;
    sub_3EBE9C(v32 + 16, (unsigned int *)v38, (uint64_t)&v36);
    if (v9) {
      operator delete(v9);
    }
    long long v30 = v36;
    unint64_t v29 = (long long *)v37;
    if (v36 != (void *)v37)
    {
      uint64_t v31 = (long long *)v36;
      do
      {
        unint64_t v36 = *(void **)&v38[0];
        long long v37 = *v31;
        sub_4885C(a3, (long long *)&v36);
        ++v31;
      }
      while (v31 != v29);
    }
    if (v30) {
      operator delete(v30);
    }
  }
}

void sub_106B050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (v14)
  {
    operator delete(v14);
    uint64_t v16 = *(void **)v13;
    if (!*(void *)v13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v16 = *(void **)v13;
    if (!*(void *)v13) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

void sub_106B0C8(uint64_t a1@<X1>, void **a2@<X8>)
{
  BOOL v3 = sub_EB2EC4(a1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v3)
  {
    uint64_t v4 = sub_EB2E84(a1);
    if (v4)
    {
      BOOL v5 = 0;
      BOOL v6 = 0;
      unint64_t v7 = 0;
      uint64_t v23 = v4;
      do
      {
        uint64_t v8 = (uint64_t *)sub_EB2F38(a1, v7);
        sub_3F4FA4(&v27);
        unint64_t v25 = v7;
        if (v6) {
          operator delete(v6);
        }
        uint64_t v9 = (long long *)*((void *)&v27 + 1);
        uint64_t v10 = (long long *)v27;
        for (i = (void *)v27; v10 != v9; BOOL v5 = v22)
        {
          while (1)
          {
            uint64_t v11 = *v8;
            long long v27 = *v10;
            unint64_t v12 = (unint64_t)a2[2];
            if ((unint64_t)v5 >= v12) {
              break;
            }
            *(void *)BOOL v5 = v11;
            *(_OWORD *)(v5 + 8) = v27;
            a2[1] = v5 + 24;
            ++v10;
            v5 += 24;
            if (v10 == v9) {
              goto LABEL_4;
            }
          }
          uint64_t v13 = (char *)*a2;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a2) >> 3);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v13) >> 3);
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x555555555555555) {
            unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 > 0xAAAAAAAAAAAAAAALL) {
              sub_188D718();
            }
            unint64_t v18 = (char *)operator new(24 * v17);
          }
          else
          {
            unint64_t v18 = 0;
          }
          unint64_t v19 = &v18[24 * v14];
          *(void *)unint64_t v19 = v11;
          *(_OWORD *)(v19 + 8) = v27;
          unint64_t v20 = v19;
          if (v5 != v13)
          {
            do
            {
              long long v21 = *(_OWORD *)(v5 - 24);
              *((void *)v20 - 1) = *((void *)v5 - 1);
              *(_OWORD *)(v20 - 24) = v21;
              v20 -= 24;
              v5 -= 24;
            }
            while (v5 != v13);
            BOOL v5 = (char *)*a2;
          }
          uint64_t v22 = v19 + 24;
          *a2 = v20;
          a2[1] = v19 + 24;
          a2[2] = &v18[24 * v17];
          if (v5) {
            operator delete(v5);
          }
          a2[1] = v22;
          ++v10;
        }
LABEL_4:
        BOOL v6 = i;
        unint64_t v7 = v25 + 1;
      }
      while (v25 + 1 != v23);
      if (i) {
        operator delete(i);
      }
    }
  }
}

void sub_106B308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (!*(void *)v14) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v14 + 8) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_106B368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = sub_37D0C8(a3);
  if (!result) {
    return result;
  }
  uint64_t result = sub_EB2EC4(a1);
  if (result) {
    return result;
  }
  uint64_t result = sub_EB29DC(a1);
  if (result) {
    return result;
  }
  uint64_t v32 = sub_3750CC(a3);
  uint64_t v9 = (unsigned int *)sub_EB2AA4(a1);
  unint64_t v10 = sub_3BE8C8(v32, v9, 1);
  unint64_t v36 = v10;
  int v37 = v11;
  if (v10 == -1 && v10 > 0xFFFFFFFEFFFFFFFFLL || (sub_37D100(a3, &v36) & 1) == 0)
  {
    unint64_t v34 = *(void *)sub_EB2AA4(a1);
    sub_29603C((void **)a4, &v34);
  }
  sub_46B058();
  uint64_t v13 = v12;
  unint64_t v15 = v14;
  sub_EB23DC();
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  uint64_t v20 = 0;
  while (1)
  {
    ++v15;
    if (v13)
    {
      unint64_t v21 = sub_EB2E84(v13);
      BOOL v22 = v15 < v21;
      if (!v17)
      {
        if (v15 >= v21) {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (!v17) {
        goto LABEL_27;
      }
      BOOL v22 = 0;
    }
    unint64_t v23 = sub_EB2E84(v17);
    if (v19 >= v23 || !v22) {
      break;
    }
    uint64_t v25 = sub_EB2F38(v13, v15);
    if (v25 == sub_EB2F38(v17, v19)) {
      goto LABEL_27;
    }
LABEL_22:
    v20 += sub_EB3020(v13, v15);
    if (v20 > a2)
    {
      if ((unint64_t v26 = (unsigned int *)sub_EB2F38(v13, v15),
            unint64_t v27 = sub_3BE8C8(v32, v26, 0),
            unint64_t v34 = v27,
            int v35 = v28,
            v27 == -1)
        && v27 > 0xFFFFFFFEFFFFFFFFLL
        || (sub_37D100(a3, &v34) & 1) == 0)
      {
        uint64_t v33 = *(void *)sub_EB2F38(v13, v15);
        sub_29603C((void **)a4, &v33);
      }
    }
  }
  if ((v22 ^ (v19 < v23))) {
    goto LABEL_22;
  }
LABEL_27:
  unint64_t v29 = (unsigned int *)sub_EB2ABC(a1);
  unint64_t v30 = sub_3BE8C8(v32, v29, 0);
  unint64_t v34 = v30;
  int v35 = v31;
  if (v30 == -1 && v30 > 0xFFFFFFFEFFFFFFFFLL || (uint64_t result = sub_37D100(a3, &v34), (result & 1) == 0))
  {
    uint64_t v33 = *(void *)sub_EB2ABC(a1);
    return (uint64_t)sub_29603C((void **)a4, &v33);
  }
  return result;
}

void sub_106B5D8(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_106B620(void *a1@<X8>)
{
  uint64_t v11 = 0;
  long long v9 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)unint64_t v7 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  sub_106E174(a1, (uint64_t)v7);
  uint64_t v1 = (char *)__p[0];
  if (__p[0])
  {
    int64x2_t v2 = __p[1];
    BOOL v3 = __p[0];
    if (__p[1] != __p[0])
    {
      uint64_t v4 = (char *)__p[1];
      do
      {
        BOOL v6 = (void *)*((void *)v4 - 3);
        v4 -= 24;
        BOOL v5 = v6;
        if (v6)
        {
          *(v2 - 2) = v5;
          operator delete(v5);
        }
        int64x2_t v2 = v4;
      }
      while (v4 != v1);
      BOOL v3 = __p[0];
    }
    __p[1] = v1;
    operator delete(v3);
  }
  if (v8[1])
  {
    *(void **)&long long v9 = v8[1];
    operator delete(v8[1]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
}

void sub_106B6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **sub_106B6E0@<X0>(void **result@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)result + 8) == 2)
  {
    uint64_t v3 = sub_374D14(*result);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    sub_46B058();
    uint64_t v5 = v4;
    unint64_t v7 = v6;
    sub_EB23DC();
    uint64_t v10 = v3;
    return sub_106B7B4(v5, v7, v8, v9, (void **)a2, (uint64_t)&v11, &v10);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_106B798(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **sub_106B7B4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v20 = a5;
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v12 = sub_EB2E84(a1);
        unint64_t v13 = sub_EB2E84(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return v20;
          }
        }
        else
        {
          uint64_t v14 = sub_EB2F38(a1, a2);
          if (v14 == sub_EB2F38(a3, a4)) {
            return v20;
          }
        }
        unint64_t v15 = (unsigned int *)sub_EB2F38(a1, a2);
        if (sub_29AD50(*a7, (((unint64_t)(v15[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v15[1] << 32) | *v15) ^ 0x1000000000000))
        {
          uint64_t v19 = *(void *)sub_EB2F38(a1, a2);
          sub_2A98DC(&v20, &v19);
        }
        ++a2;
      }
    }
    while (a2 < sub_EB2E84(a1))
    {
      uint64_t v16 = (unsigned int *)sub_EB2F38(a1, a2);
      if (sub_29AD50(*a7, (((unint64_t)(v16[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v16[1] << 32) | *v16) ^ 0x1000000000000))
      {
        uint64_t v19 = *(void *)sub_EB2F38(a1, a2);
        sub_2A98DC(&v20, &v19);
      }
      ++a2;
    }
  }
  else if (a3)
  {
    while (a4 < sub_EB2E84(a3))
    {
      unint64_t v18 = (unsigned int *)sub_EB2F38(0, a2);
      if (sub_29AD50(*a7, (((unint64_t)(v18[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v18[1] << 32) | *v18) ^ 0x1000000000000))
      {
        uint64_t v19 = *(void *)sub_EB2F38(0, a2);
        sub_2A98DC(&v20, &v19);
      }
      ++a2;
    }
  }
  return v20;
}

BOOL sub_106B9B8(__n128 *a1, uint64_t a2, void *a3)
{
  sub_45E958(a1, &v11);
  unint64_t v6 = v11.n128_u64[1];
  uint64_t v5 = v11.n128_u64[0];
  if (v11.n128_u64[0] == v11.n128_u64[1]) {
    return 1;
  }
  do
  {
    sub_106B368(v5, a2, a3, (uint64_t)&v12);
    unint64_t v9 = v12;
    uint64_t v10 = v13;
    if (v12)
    {
      unint64_t v13 = v12;
      operator delete(v12);
    }
    BOOL result = v9 == v10;
    v5 += 480;
  }
  while (v9 == v10 && v5 != v6);
  return result;
}

uint64_t sub_106BA4C(uint64_t a1, void *a2, uint64_t *a3)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_expensive_turn_finder");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "min_extra_turn_time_s");
  *(_DWORD *)(a1 + 4) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_num_turns_to_return");
  __int16 v7 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 8) = v7;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "tbr_cost_function");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  uint64_t v9 = sub_374E2C(a3, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = v9;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "tbr_time_slack_s");
  *(_DWORD *)(a1 + 24) = sub_5D2EC(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "enable_full_loop_blocking");
  uint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (!v10)
  {
    BOOL v11 = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  BOOL v11 = *((_DWORD *)v10 + 12) == 4;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_13:
  }
    operator delete(__p[0]);
LABEL_14:
  *(unsigned char *)(a1 + 28) = v11;
  return a1;
}

void sub_106BC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_106BCAC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_EAE144(a2);
  if (result)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    return result;
  }
  v61[0] = off_243F500;
  v61[1] = a1;
  unsigned int v62 = v61;
  v59[0] = off_243F590;
  v59[1] = v61;
  unsigned int v60 = v59;
  sub_46B058();
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  sub_EAFC0C();
  unint64_t v12 = v11;
  unint64_t v14 = v13;
  uint64_t v15 = (uint64_t)v60;
  if (!v60) {
    goto LABEL_6;
  }
  if (v60 != v59)
  {
    uint64_t v15 = (*(uint64_t (**)(void *))(*v60 + 16))(v60);
LABEL_6:
    uint64_t v58 = (void *)v15;
    goto LABEL_8;
  }
  uint64_t v58 = v57;
  (*(void (**)(void *, void *))(v59[0] + 24))(v59, v57);
LABEL_8:
  uint64_t v16 = sub_106C3F4(v8, v10, v12, v14, (uint64_t)v57);
  unint64_t v18 = v17;
  if (v58 == v57)
  {
    (*(void (**)(void *))(v57[0] + 32))(v57);
  }
  else if (v58)
  {
    (*(void (**)(void *))(*v58 + 40))(v58);
  }
  sub_EB0544(a2, v46);
  sub_46C7C4((uint64_t)a2, v45);
  uint64_t v19 = (uint64_t)v60;
  if (!v60) {
    goto LABEL_15;
  }
  if (v60 != v59)
  {
    uint64_t v19 = (*(uint64_t (**)(void *))(*v60 + 16))(v60);
LABEL_15:
    unint64_t v56 = (void *)v19;
    goto LABEL_17;
  }
  unint64_t v56 = v55;
  (*(void (**)(void *, void *))(v59[0] + 24))(v59, v55);
LABEL_17:
  __n128 v20 = sub_106C67C(v46, (uint64_t)v45, (uint64_t)v55, &v47);
  if (v56 == v55)
  {
    (*(void (**)(void *, __n128))(v55[0] + 32))(v55, v20);
  }
  else if (v56)
  {
    (*(void (**)(__n128))(*v56 + 40))(v20);
  }
  sub_46C7C4((uint64_t)a2, &v51);
  unint64_t v21 = v48;
  unint64_t v22 = v49;
  long long v23 = v52;
  if (!v48)
  {
    if (!(void)v52) {
      goto LABEL_35;
    }
    BOOL v25 = 0;
LABEL_27:
    unint64_t v26 = sub_EB04C4((void *)v23);
    if (*((void *)&v23 + 1) < v26 && v25)
    {
      uint64_t v28 = sub_EB0624(v21, v22);
      if (v28 == sub_EB0624((void *)v23, *((unint64_t *)&v23 + 1))) {
        goto LABEL_35;
      }
    }
    else if (v25 == *((void *)&v23 + 1) < v26)
    {
      goto LABEL_35;
    }
    goto LABEL_32;
  }
  unint64_t v24 = sub_EB04C4(v48);
  BOOL v25 = v22 < v24;
  if ((void)v23) {
    goto LABEL_27;
  }
  if (v22 >= v24)
  {
LABEL_35:
    sub_46B058();
    unint64_t v29 = v31;
    unint64_t v30 = v32;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    if (v32 <= v18) {
      goto LABEL_59;
    }
    goto LABEL_36;
  }
LABEL_32:
  unint64_t v29 = v48;
  unint64_t v30 = v49 - 1;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (v30 <= v18) {
    goto LABEL_59;
  }
LABEL_36:
  int v54 = (char **)a3;
  if (!v16)
  {
    if (!v29 || v30 >= sub_EB04C4(v29)) {
      goto LABEL_59;
    }
    while (1)
    {
      uint64_t v42 = sub_EB0624(0, v18);
      long long v43 = *(_OWORD *)v42;
      long long v44 = *(_OWORD *)(v42 + 16);
      uint64_t v53 = *(void *)(v42 + 32);
      long long v51 = v43;
      long long v52 = v44;
      if (!v62) {
        break;
      }
      if ((*(unsigned int (**)(void *, long long *))(*v62 + 48))(v62, &v51))
      {
        uint64_t v50 = *(void *)(sub_EB0624(0, v18) + 32);
        sub_2D66A4(&v54, &v50);
      }
      ++v18;
      if (v30 >= sub_EB04C4(v29)) {
        goto LABEL_59;
      }
    }
LABEL_68:
    sub_29F82C();
  }
  if (v29)
  {
    while (1)
    {
      unint64_t v36 = sub_EB04C4(v16);
      unint64_t v37 = sub_EB04C4(v29);
      if (v18 >= v36 || v30 >= v37)
      {
        if (v18 < v36 == v30 < v37) {
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v38 = sub_EB0624(v16, v18);
        if (v38 == sub_EB0624(v29, v30)) {
          goto LABEL_59;
        }
      }
      uint64_t v39 = sub_EB0624(v16, v18);
      long long v40 = *(_OWORD *)v39;
      long long v41 = *(_OWORD *)(v39 + 16);
      uint64_t v53 = *(void *)(v39 + 32);
      long long v51 = v40;
      long long v52 = v41;
      if (!v62) {
        goto LABEL_68;
      }
      if ((*(unsigned int (**)(void *, long long *))(*v62 + 48))(v62, &v51))
      {
        uint64_t v50 = *(void *)(sub_EB0624(v16, v18) + 32);
        sub_2D66A4(&v54, &v50);
      }
      ++v18;
    }
  }
  if (v18 < sub_EB04C4(v16))
  {
    do
    {
      uint64_t v33 = sub_EB0624(v16, v18);
      long long v34 = *(_OWORD *)v33;
      long long v35 = *(_OWORD *)(v33 + 16);
      uint64_t v53 = *(void *)(v33 + 32);
      long long v51 = v34;
      long long v52 = v35;
      if (!v62) {
        goto LABEL_68;
      }
      if ((*(unsigned int (**)(void *, long long *))(*v62 + 48))(v62, &v51))
      {
        uint64_t v50 = *(void *)(sub_EB0624(v16, v18) + 32);
        sub_2D66A4(&v54, &v50);
      }
    }
    while (++v18 < sub_EB04C4(v16));
  }
LABEL_59:
  if (v60 != v59)
  {
    if (v60) {
      (*(void (**)(void *))(*v60 + 40))(v60);
    }
    uint64_t result = (uint64_t)v62;
    if (v62 != v61) {
      goto LABEL_63;
    }
    return (*(uint64_t (**)(void *))(v61[0] + 32))(v61);
  }
  (*(void (**)(void *))(v59[0] + 32))(v59);
  uint64_t result = (uint64_t)v62;
  if (v62 == v61) {
    return (*(uint64_t (**)(void *))(v61[0] + 32))(v61);
  }
LABEL_63:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_106C364(_Unwind_Exception *a1)
{
  sub_106C5EC((void *)(v1 - 152));
  sub_106C5EC((void *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_106C3BC(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  sub_106C5EC((void *)(v2 - 152));
  sub_106C5EC((void *)(v2 - 120));
  _Unwind_Resume(a1);
}

void *sub_106C3F4(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v10 = sub_EB04C4(a1);
        unint64_t v11 = sub_EB04C4(a3);
        if (a2 >= v10 || a4 >= v11)
        {
          if (a2 < v10 == a4 < v11) {
            return a1;
          }
        }
        else
        {
          uint64_t v12 = sub_EB0624(a1, a2);
          if (v12 == sub_EB0624(a3, a4)) {
            return a1;
          }
        }
        uint64_t v13 = sub_EB0624(a1, a2);
        uint64_t v14 = *(void *)(v13 + 32);
        long long v15 = *(_OWORD *)(v13 + 16);
        long long v26 = *(_OWORD *)v13;
        long long v27 = v15;
        uint64_t v28 = v14;
        uint64_t v16 = *(void *)(a5 + 24);
        if (!v16) {
          break;
        }
        if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v16 + 48))(v16, &v26)) {
          return a1;
        }
        ++a2;
      }
      goto LABEL_22;
    }
    while (a2 < sub_EB04C4(a1))
    {
      uint64_t v17 = sub_EB0624(a1, a2);
      uint64_t v18 = *(void *)(v17 + 32);
      long long v19 = *(_OWORD *)(v17 + 16);
      long long v26 = *(_OWORD *)v17;
      long long v27 = v19;
      uint64_t v28 = v18;
      uint64_t v20 = *(void *)(a5 + 24);
      if (!v20) {
        goto LABEL_22;
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v20 + 48))(v20, &v26)) {
        break;
      }
      ++a2;
    }
  }
  else if (a3 && a4 < sub_EB04C4(a3))
  {
    while (1)
    {
      uint64_t v21 = sub_EB0624(0, a2);
      uint64_t v22 = *(void *)(v21 + 32);
      long long v23 = *(_OWORD *)(v21 + 16);
      long long v26 = *(_OWORD *)v21;
      long long v27 = v23;
      uint64_t v28 = v22;
      uint64_t v24 = *(void *)(a5 + 24);
      if (!v24) {
        break;
      }
      if (((*(uint64_t (**)(uint64_t, long long *))(*(void *)v24 + 48))(v24, &v26) & 1) == 0)
      {
        ++a2;
        if (a4 < sub_EB04C4(a3)) {
          continue;
        }
      }
      return a1;
    }
LABEL_22:
    sub_29F82C();
  }
  return a1;
}

void *sub_106C5EC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

__n128 sub_106C67C@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v8 = a1[1].n128_u64[1];
  unint64_t v9 = (void *)a1[1].n128_u64[0];
  unint64_t v11 = *(void **)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  if (!v9) {
    goto LABEL_10;
  }
LABEL_2:
  unint64_t v12 = sub_EB04C4(v9);
  unint64_t v13 = v12;
  if (v11)
  {
    unint64_t v14 = sub_EB04C4(v11);
    if (v8 >= v13 || v10 >= v14)
    {
      if (v8 < v13 != v10 < v14) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v16 = sub_EB0624(v9, v8);
      if (v16 != sub_EB0624(v11, v10))
      {
        do
        {
LABEL_16:
          uint64_t v17 = sub_EB0624((void *)a1[1].n128_u64[0], a1[1].n128_u64[1] - 1);
          uint64_t v18 = *(void *)(v17 + 32);
          long long v19 = *(_OWORD *)(v17 + 16);
          v23[0] = *(_OWORD *)v17;
          v23[1] = v19;
          uint64_t v24 = v18;
          uint64_t v20 = *(void *)(a3 + 24);
          if (!v20) {
            sub_29F82C();
          }
          if ((*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v20 + 48))(v20, v23)) {
            break;
          }
          unint64_t v9 = (void *)a1[1].n128_u64[0];
          unint64_t v8 = a1[1].n128_u64[1] - 1;
          a1[1].n128_u64[1] = v8;
          unint64_t v11 = *(void **)(a2 + 16);
          unint64_t v10 = *(void *)(a2 + 24);
          if (v9) {
            goto LABEL_2;
          }
LABEL_10:
          ;
        }
        while (v11 && v10 < sub_EB04C4(v11));
      }
    }
  }
  else if (v8 < v12)
  {
    goto LABEL_16;
  }
  __n128 result = *a1;
  __n128 v22 = a1[1];
  *a4 = *a1;
  a4[1] = v22;
  return result;
}

void sub_106C7DC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  unint64_t v6 = sub_EB04C4(a2);
  if (!v6) {
    return;
  }
  __int16 v7 = 0;
  unint64_t v8 = 0;
  uint64_t v50 = 0;
  unint64_t v9 = 0;
  unint64_t v46 = v3;
  uint64_t v47 = a1 + 16;
  uint64_t v43 = a3;
  long long v44 = (char **)(a3 + 24);
  unint64_t v45 = v6;
  do
  {
    unint64_t v49 = v9;
    unint64_t v10 = *(void *)(sub_EB0624(v3, v9) + 32);
    unint64_t v11 = v7;
    if (v8 != v7)
    {
      unint64_t v12 = 0;
      unint64_t v11 = v8;
      while (1)
      {
        unint64_t v13 = &v7[16 * v12];
        uint64_t v14 = *((unsigned int *)v13 + 2);
        uint64_t v15 = **(void **)v13;
        if (v14 == (*(void *)(*(void *)v13 + 8) - v15) >> 3) {
          goto LABEL_7;
        }
        if (*(_DWORD *)(v15 + 8 * v14) == v10
          && (uint64_t v16 = v15 + 8 * v14, *(unsigned __int16 *)(v16 + 4) == WORD2(v10))
          && (HIWORD(v10) & 1) != (*(unsigned char *)(v16 + 6) == 0))
        {
          *((_DWORD *)v13 + 2) = v14 + 1;
LABEL_7:
          if (++v12 >= (v11 - v7) >> 4) {
            break;
          }
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v13;
          *(_OWORD *)unint64_t v13 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v11 - 1) = *(_OWORD *)__p;
          v11 -= 16;
          if (v12 >= (v11 - v7) >> 4) {
            break;
          }
        }
      }
    }
    sub_3EB6C8(v47, v10, (uint64_t)__p);
    uint64_t v17 = __p[0];
    uint64_t v48 = __p[1];
    unint64_t v8 = v11;
    if (__p[0] != __p[1])
    {
      int v18 = HIWORD(v10) & 1;
      while (1)
      {
        uint64_t v19 = *(void *)(*(void *)*v17 + 424 * v17[1] + 8) - *(void *)(*(void *)*v17 + 424 * v17[1]);
        if (v19) {
          break;
        }
LABEL_15:
        v17 += 2;
        if (v17 == v48) {
          goto LABEL_39;
        }
      }
      uint64_t v20 = 0;
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
      while (1)
      {
        __n128 v22 = (void *)(*(void *)(*(void *)*v17 + 424 * v17[1]) + 24 * v20);
        long long v23 = (_DWORD *)*v22;
        if (*(_DWORD *)*v22 != v10
          || *((unsigned __int16 *)v23 + 2) != WORD2(v10)
          || v18 == (*((unsigned char *)v23 + 6) == 0))
        {
          goto LABEL_19;
        }
        if (v8 >= v50) {
          break;
        }
        *(void *)unint64_t v8 = v22;
        *((_DWORD *)v8 + 2) = 1;
        *((_DWORD *)v8 + 3) = v49;
        v8 += 16;
LABEL_19:
        if (++v20 == v21) {
          goto LABEL_15;
        }
      }
      uint64_t v24 = (v8 - v7) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        sub_2E00();
      }
      if ((v50 - v7) >> 3 > v25) {
        unint64_t v25 = (v50 - v7) >> 3;
      }
      if ((unint64_t)(v50 - v7) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26 >> 60) {
        sub_188D718();
      }
      long long v27 = (char *)operator new(16 * v26);
      uint64_t v28 = &v27[16 * v24];
      *(void *)uint64_t v28 = v22;
      *((_DWORD *)v28 + 2) = 1;
      *((_DWORD *)v28 + 3) = v49;
      if (v8 == v7)
      {
        unint64_t v30 = &v27[16 * v24];
        uint64_t v50 = &v27[16 * v26];
        unint64_t v8 = v28 + 16;
        if (!v7) {
          goto LABEL_36;
        }
      }
      else
      {
        unint64_t v29 = &v27[16 * v24];
        do
        {
          unint64_t v30 = v29 - 16;
          *((_OWORD *)v29 - 1) = *((_OWORD *)v8 - 1);
          v8 -= 16;
          v29 -= 16;
        }
        while (v8 != v7);
        uint64_t v50 = &v27[16 * v26];
        unint64_t v8 = v28 + 16;
        if (!v7) {
          goto LABEL_36;
        }
      }
      operator delete(v7);
LABEL_36:
      __int16 v7 = v30;
      int v18 = HIWORD(v10) & 1;
      goto LABEL_19;
    }
LABEL_39:
    uint64_t v3 = v46;
    if (v49 + 1 < sub_EB04C4(v46))
    {
      uint64_t v31 = sub_EB0624(v46, v49 + 1);
      if (sub_3F4FB0(v47, v10, *(void *)(v31 + 32)))
      {
        unint64_t v32 = (void *)sub_5231C((uint64_t)v46);
        sub_3DEE84(v44, (_OWORD *)(*v32 + 96 * v49));
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    unint64_t v9 = v49 + 1;
  }
  while (v49 + 1 != v45);
  if (v7 != v8)
  {
    uint64_t v33 = v7;
    do
    {
      uint64_t v34 = *((unsigned int *)v33 + 2);
      unint64_t v36 = **(char ***)v33;
      long long v35 = *(char **)(*(void *)v33 + 8);
      size_t v37 = v35 - v36;
      if (v34 == (v35 - v36) >> 3)
      {
        if (v37 == 16)
        {
          uint64_t v38 = (void *)sub_5231C((uint64_t)v46);
          sub_3DEE84(v44, (_OWORD *)(*v38 + 96 * *((unsigned int *)v33 + 3)));
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          long long v52 = 0;
          if (v35 != v36)
          {
            if ((v37 & 0x8000000000000000) != 0) {
              sub_2E00();
            }
            uint64_t v39 = (char *)operator new(v37);
            __p[0] = v39;
            __p[1] = v39;
            long long v52 = &v39[8 * v34];
            do
            {
              uint64_t v39 = sub_106E8C4((unint64_t *)__p, v39, v36) + 8;
              v36 += 8;
            }
            while (v36 != v35);
          }
          long long v40 = *(void **)(v43 + 56);
          if ((unint64_t)v40 < *(void *)(v43 + 64))
          {
            void *v40 = 0;
            v40[1] = 0;
            v40[2] = 0;
            *(_OWORD *)long long v40 = *(_OWORD *)__p;
            v40[2] = v52;
            *(void *)(v43 + 56) = v40 + 3;
          }
          else
          {
            long long v41 = sub_4D088((char **)(v43 + 48), (uint64_t)__p);
            uint64_t v42 = __p[0];
            *(void *)(v43 + 56) = v41;
            if (v42)
            {
              __p[1] = v42;
              operator delete(v42);
            }
          }
        }
      }
      v33 += 16;
    }
    while (v33 != v8);
  }
  if (v7) {
    operator delete(v7);
  }
}

void sub_106CCB4(_Unwind_Exception *a1)
{
  sub_3DB6CC(v1);
  _Unwind_Resume(a1);
}

void sub_106CCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3DB6CC(a10);
  if (!v20) {
    _Unwind_Resume(a1);
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_106CD70(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a3;
  if (*(unsigned char *)(a1 + 180))
  {
    long long v29 = 0uLL;
    unint64_t v30 = 0;
    if (sub_EAE144(a2) || sub_EADC78((uint64_t)a2))
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v5 = (char *)v29;
      if (!(void)v29) {
        return;
      }
      goto LABEL_39;
    }
    v28[0] = &unk_20E1710;
    memset(&v28[1], 0, 24);
    v28[5] = 0;
    v28[6] = &unk_20E1710;
    v28[11] = 0;
    v28[12] = &unk_20E1710;
    memset(&v28[7], 0, 24);
    memset(&v28[13], 0, 24);
    v28[17] = 0;
    v28[18] = &unk_20E1710;
    memset(&v28[19], 0, 24);
    v28[23] = 0;
    v28[24] = &unk_20E1710;
    memset(&v28[25], 0, 24);
    v28[29] = 0;
    v28[30] = &unk_20E1710;
    v28[35] = 0;
    v28[36] = &unk_20E1710;
    memset(&v28[31], 0, 24);
    memset(&v28[37], 0, 24);
    v28[41] = 0;
    v28[42] = &unk_20E1710;
    memset(&v28[43], 0, 24);
    v28[47] = 0;
    v28[48] = &unk_20E1710;
    memset(&v28[49], 0, 24);
    v28[53] = 0;
    v28[54] = &unk_20E1710;
    memset(&v28[55], 0, 24);
    v28[59] = 0;
    v28[60] = &unk_20E1710;
    v28[65] = 0;
    memset(&v28[61], 0, 24);
    v28[66] = &unk_20E1710;
    v28[71] = 0;
    memset(&v28[67], 0, 24);
    v28[72] = &unk_20E1710;
    v28[77] = 0;
    memset(&v28[73], 0, 24);
    v28[78] = &unk_20E1710;
    v28[83] = 0;
    memset(&v28[79], 0, 24);
    v28[84] = &unk_20E1710;
    v28[89] = 0;
    memset(&v28[85], 0, 24);
    v28[90] = &unk_20E1710;
    v28[95] = 0;
    memset(&v28[91], 0, 24);
    unsigned int v6 = sub_EAE428((uint64_t)a2) != 1000000000;
    unint64_t v26 = v4;
    while (sub_EAE104(a2) > (unint64_t)v6)
    {
      __int16 v7 = (int **)sub_EAE1B8(a2, v6);
      unint64_t v27 = sub_2E48C4(v7);
      sub_106EBD0((uint64_t)v28, &v27, &v31);
      if ((void)v31)
      {
        sub_5217C8((uint64_t)v28, &v27, (uint64_t)&v31);
        uint64_t v8 = v31;
        if ((_BYTE)v32)
        {
          uint64_t v9 = *(void *)(v31 + 8) + 12 * *((void *)&v31 + 1);
          *(void *)uint64_t v9 = v27;
          *(_DWORD *)(v9 + 8) = 0;
        }
        unint64_t v10 = *(unsigned int *)(*(void *)(v8 + 8) + 12 * *((void *)&v31 + 1) + 8);
        while (sub_EAE104(a2) > (unint64_t)v6)
        {
          unint64_t v11 = (int **)sub_EAE1B8(a2, v6);
          v33[0] = sub_2E4738(v11);
          sub_106EBD0((uint64_t)v28, v33, &v31);
          if (!(void)v31) {
            break;
          }
          ++v6;
        }
        long long v31 = 0uLL;
        uint64_t v32 = 0;
        if (v10 < v6)
        {
          do
          {
            v33[0] = *(void *)(sub_EAE1B8(a2, v10) + 32);
            sub_2D5B74((char **)&v31, v33);
            ++v10;
          }
          while (v6 != v10);
        }
        uint64_t v12 = *((void *)&v29 + 1);
        if (*((void *)&v29 + 1) >= v30)
        {
          *((void *)&v29 + 1) = sub_4D088((char **)&v29, (uint64_t)&v31);
          if ((void)v31)
          {
            *((void *)&v31 + 1) = v31;
            operator delete((void *)v31);
          }
        }
        else
        {
          **((void **)&v29 + 1) = 0;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *(_OWORD *)uint64_t v12 = v31;
          *(void *)(v12 + 16) = v32;
          *((void *)&v29 + 1) = v12 + 24;
        }
        for (uint64_t i = 0; i != 96; i += 6)
        {
          uint64_t v17 = &v28[i];
          if (v28[i + 2])
          {
            unint64_t v18 = v17[3];
            if (v18 >= 0x80)
            {
              uint64_t v16 = &v28[i];
              operator delete((void *)v28[i]);
              v16[5] = 0;
              *uint64_t v16 = &unk_20E1710;
              v16[1] = 0;
              v16[2] = 0;
              v16[3] = 0;
            }
            else if (v18)
            {
              v17[2] = 0;
              memset((void *)v28[i], 128, v18 + 8);
              *(unsigned char *)(v28[i] + v18) = -1;
              unint64_t v19 = v17[3];
              if (v19 == 7) {
                uint64_t v20 = 6;
              }
              else {
                uint64_t v20 = v19 - (v19 >> 3);
              }
              v28[i + 5] = v20 - v17[2];
            }
          }
        }
        uint64_t v4 = v26;
      }
      else
      {
        sub_5217C8((uint64_t)v28, &v27, (uint64_t)&v31);
        uint64_t v13 = v31;
        if ((_BYTE)v32)
        {
          uint64_t v14 = *(void *)(v31 + 8) + 12 * *((void *)&v31 + 1);
          *(void *)uint64_t v14 = v27;
          *(_DWORD *)(v14 + 8) = 0;
        }
        *(_DWORD *)(*(void *)(v13 + 8) + 12 * *((void *)&v31 + 1) + 8) = v6++;
      }
    }
    *(_OWORD *)uint64_t v4 = v29;
    v4[2] = v30;
    unint64_t v30 = 0;
    long long v29 = 0uLL;
    sub_328138((uint64_t)v28);
    uint64_t v5 = (char *)v29;
    if ((void)v29)
    {
LABEL_39:
      unint64_t v21 = (char *)*((void *)&v29 + 1);
      __n128 v22 = v5;
      if (*((char **)&v29 + 1) != v5)
      {
        long long v23 = (char *)*((void *)&v29 + 1);
        do
        {
          unint64_t v25 = (void *)*((void *)v23 - 3);
          v23 -= 24;
          uint64_t v24 = v25;
          if (v25)
          {
            *((void *)v21 - 2) = v24;
            operator delete(v24);
          }
          unint64_t v21 = v23;
        }
        while (v23 != v5);
        __n128 v22 = (char *)v29;
      }
      *((void *)&v29 + 1) = v5;
      operator delete(v22);
    }
  }
  else
  {
    sub_1067AC8(a1, a2, a3);
  }
}

void sub_106D204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_328138((uint64_t)va);
  sub_36094((void **)(v3 - 192));
  _Unwind_Resume(a1);
}

void sub_106D294(void **a1, void *a2, uint64_t *a3)
{
  if (!sub_EAE43C(a2)) {
    return;
  }
  uint64_t v5 = sub_3750CC(*a1);
  if (*a3 == a3[1]) {
    goto LABEL_46;
  }
  uint64_t v6 = sub_EADD1C((uint64_t)a2);
  sub_3D63DC(v5, *(unsigned int *)(v6 + 32) | ((unint64_t)*(unsigned __int16 *)(v6 + 36) << 32), __p);
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    if ((SBYTE7(v30) & 0x80u) == 0) {
      uint64_t v9 = (void *)BYTE7(v30);
    }
    else {
      uint64_t v9 = __p[1];
    }
    if ((SBYTE7(v30) & 0x80u) == 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(v7 + 23);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = (void *)*(unsigned __int8 *)(v7 + 23);
      }
      else {
        uint64_t v12 = *(void **)(v7 + 8);
      }
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v10, *(void *)(v7 + 8))) {
            goto LABEL_21;
          }
        }
        else
        {
          if (!*(unsigned char *)(v7 + 23)) {
            goto LABEL_21;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v7 + v13) == *((unsigned __int8 *)v10 + v13))
          {
            if (v11 == ++v13) {
              goto LABEL_21;
            }
          }
        }
      }
      v7 += 24;
    }
    while (v7 != v8);
    uint64_t v7 = v8;
  }
LABEL_21:
  if (v7 == v8)
  {
    BOOL v23 = 1;
    if (SBYTE7(v30) < 0) {
      goto LABEL_45;
    }
LABEL_42:
    if (v23) {
      return;
    }
LABEL_46:
    *(_OWORD *)unint64_t v26 = 0u;
    long long v27 = 0u;
    int v28 = 1065353216;
    v25[23] = 20;
    strcpy(v25, "routing/Traffic.json");
    *(_OWORD *)__p = 0u;
    long long v30 = 0u;
    int v31 = 1065353216;
    operator new();
  }
  uint64_t v14 = sub_EAFF60((uint64_t)a2);
  sub_3D63DC(v5, *(unsigned int *)(v14 + 32) | ((unint64_t)*(unsigned __int16 *)(v14 + 36) << 32), v26);
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  char v17 = BYTE7(v27);
  if (*a3 != v16)
  {
    if ((SBYTE7(v27) & 0x80u) == 0) {
      unint64_t v18 = (void *)BYTE7(v27);
    }
    else {
      unint64_t v18 = v26[1];
    }
    if ((SBYTE7(v27) & 0x80u) == 0) {
      unint64_t v19 = v26;
    }
    else {
      unint64_t v19 = (void **)v26[0];
    }
    do
    {
      uint64_t v20 = *(unsigned __int8 *)(v15 + 23);
      if ((v20 & 0x80u) == 0) {
        unint64_t v21 = (void *)*(unsigned __int8 *)(v15 + 23);
      }
      else {
        unint64_t v21 = *(void **)(v15 + 8);
      }
      if (v21 == v18)
      {
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v15, v19, *(void *)(v15 + 8))) {
            goto LABEL_40;
          }
        }
        else
        {
          if (!*(unsigned char *)(v15 + 23)) {
            goto LABEL_40;
          }
          uint64_t v22 = 0;
          while (*(unsigned __int8 *)(v15 + v22) == *((unsigned __int8 *)v19 + v22))
          {
            if (v20 == ++v22) {
              goto LABEL_40;
            }
          }
        }
      }
      v15 += 24;
    }
    while (v15 != v16);
    uint64_t v15 = v16;
  }
LABEL_40:
  BOOL v23 = v15 == v16;
  if ((v17 & 0x80) == 0)
  {
    if ((SBYTE7(v30) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  operator delete(v26[0]);
  if ((SBYTE7(v30) & 0x80000000) == 0) {
    goto LABEL_42;
  }
LABEL_45:
  operator delete(__p[0]);
  if (!v23) {
    goto LABEL_46;
  }
}

void sub_106DB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_106DB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_106DB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_106DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  sub_553C0(&a40);
  _Unwind_Resume(a1);
}

void *sub_106DD04(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6 - 1);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  unint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v11 >> 3)) >= 0x2E8BA2E8BA2E8BBLL) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  sub_106DE54(a1 + 6, (uint64_t *)(a2 + 48));
  return a1;
}

void sub_106DE1C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_106DE54(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_106DF2C(v3, v4, v5, v8);
  }
  return a1;
}

void sub_106DF00(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A73AC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_106DF2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      uint64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        int64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10 - 1);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_106DFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_106E00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_46B68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_106E030(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6 - 1);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 5) >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[32 * (v11 >> 5)];
    a1[5] = v13;
    memcpy(v12, v10, v11 - 4);
    a1[4] = v13;
  }
  sub_106DE54(a1 + 6, (uint64_t *)(a2 + 48));
  return a1;
}

void sub_106E13C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_106E174(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    unint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 24);
  uint64_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v11 >> 3)) >= 0x276276276276277) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11 - 4);
    a1[4] = v13;
  }
  sub_106E2C4(a1 + 6, (uint64_t *)(a2 + 48));
  return a1;
}

void sub_106E28C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_106E2C4(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_106E39C(v3, v4, v5, v8);
  }
  return a1;
}

void sub_106E370(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A73AC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_106E39C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        int64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_106E468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_106E47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_46B68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_106E4A0(int a1, char *__s)
{
  size_t v3 = strlen(__s);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = operator new(v6 + 1);
    *(void *)&long long v9 = v4;
    *((void *)&v9 + 1) = v7 | 0x8000000000000000;
    uint64_t v8 = v5;
  }
  else
  {
    HIBYTE(v9) = v3;
    uint64_t v5 = &v8;
    if (!v3)
    {
LABEL_9:
      *((unsigned char *)v5 + v4) = 0;
      v10[0] = v9;
      *(void *)((char *)v10 + 7) = *(void *)((char *)&v9 + 7);
      operator new();
    }
  }
  memcpy(v5, __s, v4);
  goto LABEL_9;
}

void sub_106E5D4(_Unwind_Exception *exception_object)
{
  if (v2 < 0)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_106E5FC()
{
}

void *sub_106E610(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_243F500;
  result[1] = v3;
  return result;
}

uint64_t sub_106E658(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243F500;
  a2[1] = v2;
  return result;
}

BOOL sub_106E684(uint64_t a1, uint64_t a2)
{
  sub_3EB594(*(void *)(a1 + 8) + 16, *(void *)(a2 + 32), (uint64_t)&v5);
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  return v2 != v3;
}

uint64_t sub_106E6D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_incidentsERKNS0_7P"
                     "athLegIS2_EEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_inciden"
                                "tsERKNS0_7PathLegIS2_EEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_incidentsERKNS0_7PathLegIS2_EEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_incidentsERKNS0_7PathLegIS2_EEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_106E748()
{
}

void sub_106E758()
{
}

void *sub_106E76C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_243F590;
  result[1] = v3;
  return result;
}

uint64_t sub_106E7B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243F590;
  a2[1] = v2;
  return result;
}

uint64_t sub_106E7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 24);
  long long v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a2 + 32);
  if (!v2) {
    sub_29F82C();
  }
  return (*(unsigned int (**)(uint64_t, _OWORD *))(*(void *)v2 + 48))(v2, v5) ^ 1;
}

uint64_t sub_106E848(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_incidentsERKNS0_7P"
                     "athLegIS2_EEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_inciden"
                                "tsERKNS0_7PathLegIS2_EEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_incidentsERKNS0_7PathLegIS2_EEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE39find_segments_with_no_through_incidentsERKNS0_7PathLegIS2_EEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_106E8B8()
{
}

char *sub_106E8C4(unint64_t *a1, void *a2, char *a3)
{
  unint64_t v3 = a3;
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  long long v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)long long v9 = *(void *)a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    uint64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          unint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          BOOL v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_45;
          }
        }
      }
      do
      {
        uint64_t v46 = *v13++;
        *v19++ = v46;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_45:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11 - 1);
    }
    if (v9 <= v3) {
      v3 += 8 * (a1[1] > (unint64_t)v3);
    }
    int v47 = *(_DWORD *)v3;
    *(_DWORD *)(v9 + 3) = *(_DWORD *)(v3 + 3);
    *(_DWORD *)long long v9 = v47;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    long long v30 = (char *)operator new(8 * v29);
    int v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_35;
    }
    goto LABEL_24;
  }
  long long v30 = 0;
  int v31 = (char *)(8 * v8);
  uint64_t v32 = 0;
  if (!v8)
  {
LABEL_24:
    if (v7 < 1)
    {
      if ((void *)v6 == a2) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v7 >> 2;
      }
      if (v34 >> 61) {
        sub_188D718();
      }
      long long v35 = (char *)operator new(8 * v34);
      int v31 = &v35[8 * (v34 >> 2)];
      uint64_t v32 = &v35[8 * v34];
      if (v30)
      {
        unint64_t v36 = &v35[8 * v34];
        operator delete(v30);
        uint64_t v32 = v36;
        unint64_t v6 = *a1;
      }
    }
    else
    {
      unint64_t v33 = v8 + 2;
      if (v8 >= -1) {
        unint64_t v33 = v8 + 1;
      }
      v31 -= 8 * (v33 >> 1);
    }
  }
LABEL_35:
  *(void *)int v31 = *(void *)v3;
  size_t v37 = v31;
  if ((char *)v6 != v9)
  {
    uint64_t v38 = v9;
    size_t v37 = v31;
    do
    {
      int v39 = *((_DWORD *)v38-- - 2);
      int v40 = *(_DWORD *)((char *)v38 + 3);
      *((_DWORD *)v37-- - 2) = v39;
      *(_DWORD *)((char *)v37 + 3) = v40;
    }
    while (v38 != (void *)v6);
  }
  long long v41 = (char *)a1[1];
  int64_t v42 = v41 - v9;
  if (v41 != v9)
  {
    uint64_t v43 = v9;
    long long v44 = v32;
    memmove(v31 + 8, v43, v42 - 1);
    uint64_t v32 = v44;
  }
  unint64_t v45 = (void *)*a1;
  *a1 = (unint64_t)v37;
  a1[1] = (unint64_t)&v31[v42 + 8];
  a1[2] = (unint64_t)v32;
  if (v45) {
    operator delete(v45);
  }
  return v31;
}

void sub_106EBB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_106EBD0@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = __ROR8__(*a2, 32);
  unint64_t v6 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) >> 33));
  unint64_t v7 = (v6 ^ ~(v6 >> 33)) + ((v6 ^ (v6 >> 33)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  unint64_t v10 = (void *)(result
                 + 48
                 * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v12;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v18 = v10[1];
    uint64_t v20 = (_DWORD *)(v18 + 12 * v19);
    if (*v20 == v4 && v20[1] == HIDWORD(v4)) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  BOOL v22 = v12 == v19;
  uint64_t v23 = v13 + v19;
  uint64_t v24 = v13 + v12;
  uint64_t v25 = result + 768;
  if (v12 == v19)
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
  }
  else
  {
    unint64_t v26 = v10;
  }
  if (v12 == v19) {
    long long v27 = a3;
  }
  else {
    long long v27 = (void *)(v18 + 12 * v19);
  }
  if (v22) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = v24;
  }
  *a3 = v26;
  a3[1] = v25;
  a3[2] = v23;
  a3[3] = v27;
  a3[4] = v28;
  return result;
}

uint64_t sub_106ED44(uint64_t result, uint64_t *a2, unint64_t a3)
{
  int v3 = *((_DWORD *)a2 + 12);
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = 0;
  uint64_t v4 = *a2;
  if (*a2)
  {
    unint64_t v7 = (void *)result;
    unint64_t v8 = *(unsigned int **)(v4 + 176);
    unint64_t v9 = *(unsigned int **)(v4 + 184);
    uint64_t v10 = (char *)v9 - (char *)v8;
    if ((char *)v9 - (char *)v8 >= 24)
    {
      uint64_t v11 = (a3 >> 16) & 0xFFFF0000 | (a3 << 32);
      uint64_t v12 = a3 & 0xFF000000000000;
      if (v10 != 24)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
        do
        {
          uint64_t v14 = 6 * (v13 >> 2);
          _X0 = &v8[v14];
          __asm { PRFM            #0, [X0] }
          uint64_t v21 = &v8[6 * (v13 >> 1)];
          _X17 = &v21[v14];
          __asm { PRFM            #0, [X17] }
          unint64_t v24 = ((unint64_t)*v21 << 32) | ((unint64_t)*((unsigned __int16 *)v21 + 2) << 16);
          __n128 result = *((unsigned __int8 *)v21 + 6) == 0;
          if ((v24 | result) >= (v11 | (unint64_t)(v12 == 0))) {
            unint64_t v25 = 0;
          }
          else {
            unint64_t v25 = v13 >> 1;
          }
          v8 += 6 * v25;
          v13 -= v13 >> 1;
        }
        while ((uint64_t)v13 > 1);
      }
      v8 += 6
          * ((((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < (v11 | (unint64_t)(v12 == 0)));
    }
    if (v8 != v9)
    {
      int v26 = 1 << v3;
      int v27 = WORD2(a3);
      uint64_t v28 = (uint64_t *)(v8 + 4);
      uint64_t v29 = HIWORD(a3) & 1;
      do
      {
        long long v30 = v28 - 2;
        if (*((_DWORD *)v28 - 4) != a3
          || *((unsigned __int16 *)v28 - 6) != v27
          || ((v29 ^ (*((unsigned char *)v28 - 10) == 0)) & 1) == 0)
        {
          break;
        }
        if ((*(_DWORD *)(v28 - 1) & v26) - 1 <= 0xFFFFFFFD)
        {
          __n128 result = sub_3587DC(*(void *)(*a2 + 152) + 424 * *v28, 0);
          if (result)
          {
            __n128 result = sub_3588EC(*(void *)(*a2 + 152) + 424 * *v28);
            if ((result & 1) == 0)
            {
              v31[0] = *a2 + 152;
              __n128 result = (uint64_t)sub_29AC28((uint64_t)v7, v31, v28);
            }
          }
        }
        v28 += 3;
      }
      while (v30 + 3 != *(uint64_t **)(v4 + 184));
    }
    if (*((unsigned char *)a2 + 32))
    {
      v31[0] = off_243F610;
      uint64_t v32 = v31;
      sub_29BE60(a2, a3, v7, (uint64_t)v31);
      __n128 result = (uint64_t)v32;
      if (v32 == v31)
      {
        return (*(uint64_t (**)(void *))(v31[0] + 32))(v31);
      }
      else if (v32)
      {
        return (*(uint64_t (**)(void))(*v32 + 40))();
      }
    }
  }
  return result;
}

void sub_106F028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v15 = *(void **)v13;
  if (!*(void *)v13) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_106F0A0(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (!**a1 && !v2[1] || v2[2] == v2[3]) {
    return;
  }
  int v3 = a1[1];
  if (*v3 == 0x7FFFFFFFFFFFFFFFLL) {
    *int v3 = 0;
  }
  uint64_t v4 = sub_69510();
  sub_682A0((uint64_t)v4, &v35);
  uint64_t v5 = (*a1)[4];
  if (v5 >= 0) {
    uint64_t v6 = (*a1)[4];
  }
  else {
    uint64_t v6 = -v5;
  }
  unint64_t v7 = sub_2FD4C0((uint64_t)a1[2], v6);
  BOOL v8 = v7 > 0xFFFFFFFEFFFFFFFFLL || v7 == 0;
  int v9 = v8;
  uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  if (v8) {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    if (v5 < 1) {
      int v9 = 1;
    }
    BOOL v8 = v9 == 0;
    uint64_t v11 = 0x1000000000000;
    if (v8) {
      uint64_t v11 = 0;
    }
    uint64_t v12 = (int *)a1[2];
    unint64_t v13 = sub_2E68E8((uint64_t)v12, v11 | v10);
    sub_3BDB4C(v12, v13, &v33);
  }
  else
  {
    char v34 = 0;
    LOBYTE(v33) = 0;
  }
  uint64_t v14 = *a1;
  sub_E1B4((uint64_t)v36);
  if (*v14)
  {
    unint64_t v15 = sub_188FC78(v37, (uint64_t)"branch_incident_id=\"", 20);
    int v16 = *(char *)(*v14 + 23);
    if (v16 >= 0) {
      uint64_t v17 = *v14;
    }
    else {
      uint64_t v17 = *(void *)*v14;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(*v14 + 23);
    }
    else {
      uint64_t v18 = *(void *)(*v14 + 8);
    }
    unint64_t v19 = sub_188FC78(v15, v17, v18);
    sub_188FC78(v19, (uint64_t)"\",", 2);
  }
  if (v14[1])
  {
    uint64_t v20 = sub_188FC78(v37, (uint64_t)"check_branch_incident_id=\"", 26);
    uint64_t v21 = v14[1];
    int v22 = *(char *)(v21 + 23);
    if (v22 >= 0) {
      uint64_t v23 = v14[1];
    }
    else {
      uint64_t v23 = *(void *)v21;
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      uint64_t v24 = *(void *)(v21 + 8);
    }
    unint64_t v25 = sub_188FC78(v20, v23, v24);
    sub_188FC78(v25, (uint64_t)"\",", 2);
  }
  sub_188FC78(v37, (uint64_t)"overlap_percent=\"", 17);
  int v26 = (void *)std::ostream::operator<<();
  sub_188FC78(v26, (uint64_t)"\",", 2);
  int v27 = sub_188FC78(v37, (uint64_t)"geo_id=\"", 8);
  std::ostream::operator<<();
  sub_188FC78(v27, (uint64_t)"\"", 1);
  std::stringbuf::str();
  *(void **)((char *)v36
  v37[0] = v28;
  if (v38 < 0) {
    operator delete((void *)v37[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  sub_6912C((uint64_t)v4);
  sub_68E9C((uint64_t)v4);
  unsigned int v30 = sub_69124((uint64_t)v4);
  sub_677F0(&v30, (uint64_t)v36);
  sub_EAFF60((uint64_t)a1[4]);
  if (SHIBYTE(v37[0]) < 0)
  {
    operator delete(v36[0]);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_49:
    operator delete(v31);
    goto LABEL_45;
  }
  if (v32 < 0) {
    goto LABEL_49;
  }
LABEL_45:
  uint64_t v29 = *a1;
  *(_OWORD *)uint64_t v29 = 0u;
  *((_OWORD *)v29 + 1) = 0u;
  v29[4] = 0x7FFFFFFFFFFFFFFFLL;
  *a1[1] = 0;
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(v35.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
}

void sub_106F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a17);
  if ((a28 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_106F580()
{
}

void *sub_106F594()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_243F610;
  return result;
}

void sub_106F5CC(uint64_t a1, void *a2)
{
  *a2 = off_243F610;
}

BOOL sub_106F5F4(uint64_t a1, uint64_t a2)
{
  return sub_3587DC(a2, 0);
}

uint64_t sub_106F600(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE29log_metrics_relevant_closuresERKNS0_7PathLegIS2_"
                     "EERKNS_6common6VectorINSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEENSE_ISG_EEEES"
                     "K_NS8_6LengthEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE29log_metrics_relevant_closuresERKNS0_7"
                                "PathLegIS2_EERKNS_6common6VectorINSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9alloca"
                                "torIcEEEENSE_ISG_EEEESK_NS8_6LengthEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE29log_metrics_relevant_closuresERKNS0_7PathLegIS2_EERKNS_6common6VectorINSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEENSE_ISG_EEEESK_NS8_6LengthEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing12PathAnalyzerINS0_11DrivingModeEE29log_metrics_relevant_closuresERKNS0_7PathLegIS2_EERKNS_6common6VectorINSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEENSE_ISG_EEEESK_NS8_6LengthEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_106F670()
{
}

void sub_106F67C()
{
  unk_25FDC3F = 16641;
  word_25FDC28 = 65;
  byte_25FDC57 = 1;
  byte_25FDC41 = 0;
}

uint64_t sub_106F6A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  BOOL v8 = (uint64_t **)(a1 + 48);
  sub_3EA6A0(a1 + 8, a2, a4);
  HIBYTE(v25[2]) = 19;
  strcpy((char *)v25, "DrivingPathAnalyzer");
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v32 = 0;
  int v9 = sub_374CDC((uint64_t)a2, (uint64_t)v25, v31);
  HIBYTE(v30) = 7;
  strcpy((char *)&__p, "default");
  uint64_t v10 = (void *)sub_560F4(v9, (uint64_t)&__p);
  sub_1066CA8(v8, a2, v10, a4);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = v31[0];
  if (v31[0])
  {
    uint64_t v12 = v31[1];
    unint64_t v13 = (void *)v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      unint64_t v13 = (void *)v31[0];
    }
    v31[1] = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v25[2]) < 0) {
    operator delete(v25[0]);
  }
  uint64_t v14 = (uint64_t *)sub_374CE4(a2);
  unint64_t v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v26 = *v14;
  int v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_327C18(a1 + 232, &v26);
  int v16 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)(a1 + 8072) = 0;
  *(_OWORD *)(a1 + 8056) = 0u;
  HIBYTE(v32) = 11;
  strcpy((char *)v31, "PathClipper");
  __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v17 = sub_374CDC((uint64_t)a2, (uint64_t)v31, (uint64_t *)&__p);
  sub_3CB660(v17, a3, v25);
  *(_WORD *)(a1 + 8084) = 0;
  *(_DWORD *)(a1 + 8080) = 0;
  *(void *)(a1 + 8088) = 0;
  *(void *)(a1 + 8104) = 0;
  *(void *)(a1 + 8096) = 0;
  sub_1070588(a1 + 8080, v25);
  uint64_t v18 = (char *)v25[2];
  if (v25[2])
  {
    do
    {
      uint64_t v23 = *(char **)v18;
      sub_57AC8((uint64_t *)v18 + 5);
      if (v18[39] < 0) {
        operator delete(*((void **)v18 + 2));
      }
      operator delete(v18);
      uint64_t v18 = v23;
    }
    while (v23);
  }
  unint64_t v19 = v25[0];
  v25[0] = 0;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = (void **)__p;
  if (__p)
  {
    uint64_t v21 = v29;
    int v22 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      int v22 = __p;
    }
    uint64_t v29 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31[0]);
  }
  return a1;
}

void sub_106F984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_5450C((uint64_t)&a9);
  sub_1A668(&__p);
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  uint64_t v30 = *v27;
  if (*v27)
  {
    *(void *)(v25 + 8064) = v30;
    operator delete(v30);
  }
  sub_32834C(v26);
  if (*(char *)(v25 + 167) < 0) {
    operator delete(*(void **)(v25 + 144));
  }
  _Unwind_Resume(a1);
}

BOOL sub_106FA30(char *a1, uint64_t a2)
{
  sub_EA94BC(a1, (uint64_t)v11);
  sub_EA95B4(a1, (uint64_t)v6);
  BOOL v4 = sub_10703C8(v11, (uint64_t)v6, a2);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    BOOL v8 = v7;
    operator delete(v7);
  }
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  return v4;
}

void sub_106FAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_106FAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_106FAF8(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = sub_EAE104(a2);
  uint64_t v31 = sub_EAF548((uint64_t)v2);
  if (!v4) {
    return 0;
  }
  char v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = (uint64_t)(a1 + 1);
  BOOL v8 = (__n128 **)(a1 + 1007);
  uint64_t v30 = v4 - 1;
  uint64_t v9 = v4;
  uint64_t v32 = a1 + 1;
  uint64_t v29 = v4;
  uint64_t v33 = v4;
  char v34 = v2;
  while (1)
  {
    uint64_t v10 = sub_EAE1B8(v2, v6);
    long long v11 = *(_OWORD *)v10;
    long long v12 = *(_OWORD *)(v10 + 16);
    uint64_t v43 = *(void *)(v10 + 32);
    v42[0] = v11;
    v42[1] = v12;
    uint64_t v13 = sub_EAE234((uint64_t)v2, v6);
    sub_3EA868(v7, (int **)v42, (uint64_t)&v40);
    sub_3F4FA4(&__p);
    if (v40 == v41)
    {
      unint64_t v15 = (__n128 *)__p;
      if (__p == v39)
      {
        BOOL v14 = 0;
      }
      else
      {
        do
        {
          int v16 = (void *)v15->n128_u64[0];
          uint64_t v17 = v15->n128_i64[1];
          ++v15;
          LODWORD(v16) = *(unsigned __int8 *)(*v16 + 424 * v17 + 312);
          BOOL v14 = v16 != 0;
          if (v16) {
            BOOL v18 = 1;
          }
          else {
            BOOL v18 = v15 == v39;
          }
        }
        while (!v18);
      }
    }
    else
    {
      BOOL v14 = 1;
    }
    unint64_t v19 = a1;
    sub_10743F8(v8, a1[1008], (__n128 *)v40, v41, ((char *)v41 - (unsigned char *)v40) >> 4);
    uint64_t v21 = (__n128 *)__p;
    uint64_t v20 = v39;
    while (v21 != v20)
    {
      if (*(unsigned char *)(*(void *)v21->n128_u64[0] + 424 * v21->n128_u64[1] + 312))
      {
        sub_45E5B0(v44, v21);
        sub_1002140((uint64_t *)v8, (uint64_t)v44);
      }
      ++v21;
    }
    if (v14)
    {
      a1 = v19;
      if ((v37 & (v35 > v36)) == 0)
      {
        unint64_t v23 = v9;
        uint64_t v24 = v36;
        uint64_t v25 = v33;
        uint64_t v2 = v34;
        uint64_t v7 = (uint64_t)v32;
        goto LABEL_35;
      }
      uint64_t v22 = 0;
      unint64_t v23 = v9;
      uint64_t v24 = v35;
      uint64_t v25 = v33;
      uint64_t v2 = v34;
      uint64_t v7 = (uint64_t)v32;
      goto LABEL_29;
    }
    a1 = v19;
    if (v37)
    {
      uint64_t v2 = v34;
      uint64_t v24 = v13 + v35;
      unint64_t v23 = v9;
      uint64_t v7 = (uint64_t)v32;
      uint64_t v25 = v33;
LABEL_27:
      if (v6 != v30)
      {
        v5 += v13;
        char v37 = 1;
        int v27 = (__n128 *)__p;
        uint64_t v35 = v24;
        uint64_t v9 = v23;
        if (!__p) {
          goto LABEL_38;
        }
LABEL_37:
        int v39 = v27;
        operator delete(v27);
        goto LABEL_38;
      }
      uint64_t v22 = v13;
      if (v24 <= v36)
      {
LABEL_33:
        uint64_t v35 = v24;
        goto LABEL_34;
      }
LABEL_29:
      if (v31 - (v5 + v22) <= a1[1012])
      {
        uint64_t v35 = 0;
        uint64_t v29 = v23;
        goto LABEL_35;
      }
      goto LABEL_33;
    }
    uint64_t v26 = v19[1011];
    uint64_t v24 = v13;
    unint64_t v23 = v6;
    uint64_t v25 = v33;
    uint64_t v2 = v34;
    uint64_t v7 = (uint64_t)v32;
    if (v5 <= v26) {
      goto LABEL_27;
    }
    unint64_t v23 = v9;
LABEL_34:
    uint64_t v24 = v36;
LABEL_35:
    v5 += v13;
    int v27 = (__n128 *)__p;
    if (v5 > a1[1011]) {
      break;
    }
    char v37 = 0;
    uint64_t v36 = v24;
    uint64_t v9 = v23;
    if (__p) {
      goto LABEL_37;
    }
LABEL_38:
    if (v40)
    {
      long long v41 = (__n128 *)v40;
      operator delete(v40);
    }
    if (++v6 == v25) {
      return v29;
    }
  }
  if (__p)
  {
    int v39 = (__n128 *)__p;
    operator delete(__p);
  }
  if (v40)
  {
    long long v41 = (__n128 *)v40;
    operator delete(v40);
  }
  return v29;
}

void sub_106FE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a24) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_106FE78(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v9 = sub_EAE104(a2);
  if (a3 <= a4 && v9 > a4)
  {
    unint64_t v10 = v9 - 1;
    if (!a3 && v10 == a4) {
      return;
    }
    if (a3 == a4)
    {
      long long v11 = (long long *)sub_EAE1B8(a2, a3);
      unint64_t v12 = sub_EADB30(a2, a3);
      sub_EADAD8((uint64_t)a2, v12, v11);
      if (v10 <= a4)
      {
LABEL_14:
        if (a3)
        {
          uint64_t v21 = sub_69134((uint64_t)a2);
          long long v25 = *(_OWORD *)v21;
          long long v22 = *(_OWORD *)(v21 + 16);
          long long v23 = *(_OWORD *)(v21 + 32);
          long long v24 = *(_OWORD *)(v21 + 48);
          uint64_t v29 = *(void *)(v21 + 64);
          long long v27 = v23;
          long long v28 = v24;
          long long v26 = v22;
          LODWORD(v25) = 0;
          sub_EAD920((uint64_t)a2, (uint64_t)&v25);
          if (a5) {
            *(unsigned char *)(sub_EAD918((uint64_t)a2) + 2) = 1;
          }
        }
        return;
      }
    }
    else
    {
      uint64_t v13 = (int **)(sub_3C80F8((uint64_t)a2) + 88 * a4);
      BOOL v14 = (int **)sub_3FA3A8((uint64_t)a2);
      sub_EAF478((uint64_t)a2, v13, v14, 0);
      unint64_t v15 = (int **)sub_3C80F8((uint64_t)a2);
      uint64_t v16 = sub_3C80F8((uint64_t)a2);
      sub_EAF478((uint64_t)a2, v15, (int **)(v16 + 88 * a3), 0);
      if (v10 <= a4) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = sub_EADAD0((uint64_t)a2);
    long long v25 = *(_OWORD *)v17;
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v20 = *(_OWORD *)(v17 + 48);
    uint64_t v29 = *(void *)(v17 + 64);
    long long v27 = v19;
    long long v28 = v20;
    long long v26 = v18;
    LODWORD(v25) = 1000000000;
    sub_EADAA8((uint64_t)a2, (uint64_t)&v25);
    if (a5) {
      *(unsigned char *)(sub_EAD918((uint64_t)a2) + 3) = 1;
    }
    goto LABEL_14;
  }

  sub_EAD268((uint64_t)a2);
}

void *sub_1070058(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    unint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[32 * (v5 >> 5)];
    do
    {
      uint64_t v8 = v3 + v7;
      unint64_t v9 = &v6[v7];
      unsigned int v10 = *(_DWORD *)(v3 + v7 + 16);
      *(_DWORD *)&v6[v7 + 16] = v10;
      if (v10 <= 1) {
        *(_OWORD *)unint64_t v9 = *(_OWORD *)v8;
      }
      v9[24] = *(unsigned char *)(v8 + 24);
      v7 += 32;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_107010C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1070128(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 8080) || !*(unsigned char *)(a1 + 8081)) {
    goto LABEL_12;
  }
  sub_EA92BC((uint64_t)&v20, (uint64_t)a2);
  BOOL v6 = sub_106FA30((char *)&v20, a1 + 8);
  if (v23 < 0) {
    operator delete(__p);
  }
  uint64_t v7 = v20;
  if (v20)
  {
    uint64_t v8 = (uint64_t)v21;
    unint64_t v9 = v20;
    if (v21 != v20)
    {
      do
        uint64_t v8 = sub_405F44(v8 - 472);
      while ((void *)v8 != v7);
      unint64_t v9 = v20;
    }
    uint64_t v21 = v7;
    operator delete(v9);
  }
  if (v6)
  {
    sub_EAD268((uint64_t)a2);
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *(void *)(a1 + 8064) = *(void *)(a1 + 8056);
  unint64_t v10 = sub_106FAF8((uint64_t *)a1, a2);
  sub_106FE78(a1, a2, v10, v11, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v12 = *(void *)(a1 + 8056);
  uint64_t v13 = *(void *)(a1 + 8064);
  uint64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    unint64_t v15 = (char *)operator new(v13 - v12);
    uint64_t v16 = 0;
    *a3 = v15;
    a3[1] = v15;
    a3[2] = &v15[32 * (v14 >> 5)];
    do
    {
      uint64_t v17 = v12 + v16;
      long long v18 = &v15[v16];
      unsigned int v19 = *(_DWORD *)(v12 + v16 + 16);
      *(_DWORD *)&v15[v16 + 16] = v19;
      if (v19 <= 1) {
        *(_OWORD *)long long v18 = *(_OWORD *)v17;
      }
      v18[24] = *(unsigned char *)(v17 + 24);
      v16 += 32;
    }
    while (v12 + v16 != v13);
    a3[1] = &v15[v16];
  }
}

void sub_10702C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10702F4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8080) && *(unsigned char *)(a1 + 8084) && !sub_EAE144(a2) && !sub_EADC78((uint64_t)a2))
  {
    uint64_t v4 = sub_EAE104(a2);
    if (sub_EAE234((uint64_t)a2, v4 - 1)) {
      unint64_t v5 = v4 - 1;
    }
    else {
      unint64_t v5 = v4 - 2;
    }
    if (v5) {
      unint64_t v6 = sub_EAE234((uint64_t)a2, 0) == 0;
    }
    else {
      unint64_t v6 = 0;
    }
    sub_106FE78(a1, a2, v6, v5, 0);
  }
}

BOOL sub_10703C8(void **a1, uint64_t a2, uint64_t a3)
{
  while (!sub_10741F0((uint64_t)a1, a2))
  {
    unint64_t v7 = *(void *)(sub_EAE1B8(*a1, (unint64_t)a1[1]) + 32);
    v12[0] = off_243F690;
    uint64_t v13 = v12;
    sub_3EA6A4(a3, v7, (uint64_t)v12, &v10);
    if (v13 == v12)
    {
      (*(void (**)(void *))(v12[0] + 32))(v12);
      uint64_t v8 = v10;
      unint64_t v9 = v11;
      if (!v10) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v13) {
        (*(void (**)(void))(*v13 + 40))();
      }
      uint64_t v8 = v10;
      unint64_t v9 = v11;
      if (!v10) {
        goto LABEL_9;
      }
    }
    unint64_t v11 = v8;
    operator delete(v8);
LABEL_9:
    BOOL result = v8 != v9;
    if (v8 != v9) {
      return result;
    }
    sub_10740D8(a1);
  }
  return 0;
}

void sub_1070530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a15 == &a12)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
    _Unwind_Resume(a1);
  }
  sub_20A7BC8((uint64_t)a15);
  _Unwind_Resume(a1);
}

void sub_1070588(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_path_clipping");
  uint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (!v4 || (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) != 4))
  {
    BOOL v6 = *(unsigned char *)a1 != 0;
    *(unsigned char *)a1 = v6;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_8;
    }
LABEL_6:
    if (!v6) {
      return;
    }
    goto LABEL_9;
  }
  BOOL v6 = v5 == 4;
  *(unsigned char *)a1 = v6;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_6;
  }
LABEL_8:
  operator delete(__p[0]);
  if (!*(unsigned char *)a1) {
    return;
  }
LABEL_9:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "enable_clip_at_blocking_incidents");
  unint64_t v7 = sub_58070(a2, (uint64_t)__p);
  if (v7 && (int v8 = *((_DWORD *)v7 + 12), (v8 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1) = v8 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_14:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "enable_clip_beginning_walk");
  unint64_t v9 = sub_58070(a2, (uint64_t)__p);
  if (v9 && (int v10 = *((_DWORD *)v9 + 12), (v10 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2) = v10 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2) = *(unsigned char *)(a1 + 2) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_20:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_clip_destination_parking");
  unint64_t v11 = sub_58070(a2, (uint64_t)__p);
  if (v11 && (int v12 = *((_DWORD *)v11 + 12), (v12 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 3) = v12 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 3) = *(unsigned char *)(a1 + 3) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_26:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_clip_zero_length_ends");
  uint64_t v13 = sub_58070(a2, (uint64_t)__p);
  if (v13 && (int v14 = *((_DWORD *)v13 + 12), (v14 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 4) = v14 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_32;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 4) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_32:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "check_and_remove_maneuver_restricted_paths");
  unint64_t v15 = sub_58070(a2, (uint64_t)__p);
  if (v15 && (int v16 = *((_DWORD *)v15 + 12), (v16 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 5) = v16 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_38;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 5) = *(unsigned char *)(a1 + 5) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_38:
    }
      operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_dist_from_origin");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 8));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_dist_to_destination");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 16));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "parking_lot_pullback_distance");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 24));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10709F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1070A34(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  int v8 = (uint64_t **)(a1 + 48);
  sub_3EAFD4(a1 + 8, a2, a4);
  HIBYTE(v25[2]) = 19;
  strcpy((char *)v25, "DrivingPathAnalyzer");
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v32 = 0;
  unint64_t v9 = sub_374CDC((uint64_t)a2, (uint64_t)v25, v31);
  HIBYTE(v30) = 7;
  strcpy((char *)&__p, "default");
  int v10 = (void *)sub_560F4(v9, (uint64_t)&__p);
  sub_1068CE4(v8, a2, v10, a4);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = v31[0];
  if (v31[0])
  {
    uint64_t v12 = v31[1];
    uint64_t v13 = (void *)v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      uint64_t v13 = (void *)v31[0];
    }
    v31[1] = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v25[2]) < 0) {
    operator delete(v25[0]);
  }
  int v14 = (uint64_t *)sub_374CE4(a2);
  unint64_t v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v26 = *v14;
  long long v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_327C18(a1 + 232, &v26);
  int v16 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)(a1 + 8072) = 0;
  *(_OWORD *)(a1 + 8056) = 0u;
  HIBYTE(v32) = 11;
  strcpy((char *)v31, "PathClipper");
  __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v17 = sub_374CDC((uint64_t)a2, (uint64_t)v31, (uint64_t *)&__p);
  sub_3CB660(v17, a3, v25);
  *(_WORD *)(a1 + 8084) = 0;
  *(_DWORD *)(a1 + 8080) = 0;
  *(void *)(a1 + 8088) = 0;
  *(void *)(a1 + 8104) = 0;
  *(void *)(a1 + 8096) = 0;
  sub_1072440(a1 + 8080, v25);
  long long v18 = (char *)v25[2];
  if (v25[2])
  {
    do
    {
      char v23 = *(char **)v18;
      sub_57AC8((uint64_t *)v18 + 5);
      if (v18[39] < 0) {
        operator delete(*((void **)v18 + 2));
      }
      operator delete(v18);
      long long v18 = v23;
    }
    while (v23);
  }
  unsigned int v19 = v25[0];
  v25[0] = 0;
  if (v19) {
    operator delete(v19);
  }
  long long v20 = (void **)__p;
  if (__p)
  {
    uint64_t v21 = v29;
    long long v22 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      long long v22 = __p;
    }
    uint64_t v29 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31[0]);
  }
  return a1;
}

void sub_1070D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_5450C((uint64_t)&a9);
  sub_1A668(&__p);
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  uint64_t v30 = *v27;
  if (*v27)
  {
    *(void *)(v25 + 8064) = v30;
    operator delete(v30);
  }
  sub_32834C(v26);
  if (*(char *)(v25 + 167) < 0) {
    operator delete(*(void **)(v25 + 144));
  }
  _Unwind_Resume(a1);
}

void sub_1070DC0(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1 + 8080;
  if (!*(unsigned char *)(a1 + 8080) || !*(unsigned char *)(a1 + 8081)) {
    goto LABEL_7;
  }
  if (sub_1071140((char *)a2, a1 + 8)
    || *(unsigned char *)(v4 + 5)
    && (unint64_t v7 = (void *)sub_40EFE8((uint64_t)a2), v8 = (void *)sub_52058((uint64_t)a2), sub_1072318(v7, v8, a1)))
  {
    sub_EA8130(a2);
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *(void *)(a1 + 8064) = *(void *)(a1 + 8056);
  if (sub_EA8440(a2) == 1)
  {
    unint64_t v9 = *(void **)nullsub_1(a2);
    unint64_t v10 = sub_1071208((uint64_t *)a1, v9);
    sub_1071588(a1, v9, v10, v11, 1);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v12 = *(void *)(a1 + 8056);
    uint64_t v13 = *(void *)(a1 + 8064);
    uint64_t v14 = v13 - v12;
    if (v13 != v12)
    {
      if (v14 < 0) {
        sub_2E00();
      }
      unint64_t v15 = (char *)operator new(v13 - v12);
      uint64_t v16 = 0;
      *a3 = v15;
      a3[1] = v15;
      a3[2] = &v15[32 * (v14 >> 5)];
      do
      {
        uint64_t v17 = v12 + v16;
        long long v18 = &v15[v16];
        unsigned int v19 = *(_DWORD *)(v12 + v16 + 16);
        *(_DWORD *)&v15[v16 + 16] = v19;
        if (v19 <= 1) {
          *(_OWORD *)long long v18 = *(_OWORD *)v17;
        }
        v18[24] = *(unsigned char *)(v17 + 24);
        v16 += 32;
      }
      while (v12 + v16 != v13);
LABEL_30:
      a3[1] = &v15[v16];
      return;
    }
    return;
  }
  if (sub_EA8440(a2) >= 3)
  {
    uint64_t v20 = sub_40EFE8((uint64_t)a2) + 472;
    uint64_t v21 = sub_52058((uint64_t)a2) - 472;
    if (v20 != v21)
    {
      uint64_t v22 = v20;
      do
      {
        sub_46B058();
        long long v24 = v23;
        unint64_t v26 = v25;
        sub_EAFC0C();
        if (sub_1074878(v24, v26, v27, v28, a1, v20)) {
          goto LABEL_23;
        }
        v22 += 472;
        v20 += 472;
      }
      while (v22 != v21);
    }
  }
  uint64_t v29 = *(void **)nullsub_1(a2);
  unint64_t v30 = sub_1071208((uint64_t *)a1, v29);
  unint64_t v32 = v31;
  if (v31 == sub_EB04C4(v29) - 1)
  {
    uint64_t v33 = (void *)(*(void *)(nullsub_1(a2) + 8) - 472);
    if (!sub_1071208((uint64_t *)a1, v33))
    {
      unint64_t v41 = v34;
      sub_1071588(a1, v29, v30, v32, 1);
      sub_1071588(a1, v33, 0, v41, 1);
      goto LABEL_32;
    }
LABEL_23:
    sub_EA8130(a2);
LABEL_32:
    sub_1070058(a3, (uint64_t *)(a1 + 8056));
    return;
  }
  sub_EA8130(a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v35 = *(void *)(a1 + 8056);
  uint64_t v36 = *(void *)(a1 + 8064);
  uint64_t v37 = v36 - v35;
  if (v36 != v35)
  {
    if (v37 < 0) {
      sub_2E00();
    }
    unint64_t v15 = (char *)operator new(v36 - v35);
    uint64_t v16 = 0;
    *a3 = v15;
    a3[1] = v15;
    a3[2] = &v15[32 * (v37 >> 5)];
    do
    {
      uint64_t v38 = v35 + v16;
      int v39 = &v15[v16];
      unsigned int v40 = *(_DWORD *)(v35 + v16 + 16);
      *(_DWORD *)&v15[v16 + 16] = v40;
      if (v40 <= 1) {
        *(_OWORD *)int v39 = *(_OWORD *)v38;
      }
      v39[24] = *(unsigned char *)(v38 + 24);
      v16 += 32;
    }
    while (v35 + v16 != v36);
    goto LABEL_30;
  }
}

void sub_1071120(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1071140(char *a1, uint64_t a2)
{
  sub_EA7B08(a1, (uint64_t)v11);
  sub_EA7C00(a1, (uint64_t)v6);
  BOOL v4 = sub_1071DEC(v11, (uint64_t)v6, a2);
  if (__p)
  {
    unint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    int v8 = v7;
    operator delete(v7);
  }
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  return v4;
}

void sub_10711D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_10711F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1071208(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = sub_EB04C4(a2);
  uint64_t v31 = sub_EB15DC((uint64_t)v2);
  if (!v4) {
    return 0;
  }
  char v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = (uint64_t)(a1 + 1);
  int v8 = (__n128 **)(a1 + 1007);
  unint64_t v30 = v4 - 1;
  unint64_t v9 = v4;
  unint64_t v32 = a1 + 1;
  unint64_t v29 = v4;
  unint64_t v33 = v4;
  unint64_t v34 = v2;
  while (1)
  {
    uint64_t v10 = sub_EB0624(v2, v6);
    long long v11 = *(_OWORD *)v10;
    long long v12 = *(_OWORD *)(v10 + 16);
    uint64_t v43 = *(void *)(v10 + 32);
    v42[0] = v11;
    v42[1] = v12;
    uint64_t v13 = sub_EB0698((uint64_t)v2, v6);
    sub_3EB374(v7, (int **)v42, (uint64_t)&v40);
    sub_3F4E6C(v7, (uint64_t)v42, (uint64_t)&__p);
    if (v40 == v41)
    {
      unint64_t v15 = (__n128 *)__p;
      if (__p == v39)
      {
        BOOL v14 = 0;
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v15->n128_u64[0];
          uint64_t v17 = v15->n128_i64[1];
          ++v15;
          LODWORD(v16) = *(unsigned __int8 *)(*v16 + 424 * v17 + 312);
          BOOL v14 = v16 != 0;
          if (v16) {
            BOOL v18 = 1;
          }
          else {
            BOOL v18 = v15 == v39;
          }
        }
        while (!v18);
      }
    }
    else
    {
      BOOL v14 = 1;
    }
    unsigned int v19 = a1;
    sub_10743F8(v8, a1[1008], (__n128 *)v40, v41, ((char *)v41 - (unsigned char *)v40) >> 4);
    uint64_t v21 = (__n128 *)__p;
    uint64_t v20 = v39;
    while (v21 != v20)
    {
      if (*(unsigned char *)(*(void *)v21->n128_u64[0] + 424 * v21->n128_u64[1] + 312))
      {
        sub_45E5B0(v44, v21);
        sub_1002140((uint64_t *)v8, (uint64_t)v44);
      }
      ++v21;
    }
    if (v14)
    {
      a1 = v19;
      if ((v37 & (v35 > v36)) == 0)
      {
        unint64_t v23 = v9;
        uint64_t v24 = v36;
        unint64_t v25 = v33;
        uint64_t v2 = v34;
        uint64_t v7 = (uint64_t)v32;
        goto LABEL_35;
      }
      uint64_t v22 = 0;
      unint64_t v23 = v9;
      uint64_t v24 = v35;
      unint64_t v25 = v33;
      uint64_t v2 = v34;
      uint64_t v7 = (uint64_t)v32;
      goto LABEL_29;
    }
    a1 = v19;
    if (v37)
    {
      uint64_t v2 = v34;
      uint64_t v24 = v13 + v35;
      unint64_t v23 = v9;
      uint64_t v7 = (uint64_t)v32;
      unint64_t v25 = v33;
LABEL_27:
      if (v6 != v30)
      {
        v5 += v13;
        char v37 = 1;
        long long v27 = (__n128 *)__p;
        uint64_t v35 = v24;
        unint64_t v9 = v23;
        if (!__p) {
          goto LABEL_38;
        }
LABEL_37:
        int v39 = v27;
        operator delete(v27);
        goto LABEL_38;
      }
      uint64_t v22 = v13;
      if (v24 <= v36)
      {
LABEL_33:
        uint64_t v35 = v24;
        goto LABEL_34;
      }
LABEL_29:
      if (v31 - (v5 + v22) <= a1[1012])
      {
        uint64_t v35 = 0;
        unint64_t v29 = v23;
        goto LABEL_35;
      }
      goto LABEL_33;
    }
    uint64_t v26 = v19[1011];
    uint64_t v24 = v13;
    unint64_t v23 = v6;
    unint64_t v25 = v33;
    uint64_t v2 = v34;
    uint64_t v7 = (uint64_t)v32;
    if (v5 <= v26) {
      goto LABEL_27;
    }
    unint64_t v23 = v9;
LABEL_34:
    uint64_t v24 = v36;
LABEL_35:
    v5 += v13;
    long long v27 = (__n128 *)__p;
    if (v5 > a1[1011]) {
      break;
    }
    char v37 = 0;
    uint64_t v36 = v24;
    unint64_t v9 = v23;
    if (__p) {
      goto LABEL_37;
    }
LABEL_38:
    if (v40)
    {
      unint64_t v41 = (__n128 *)v40;
      operator delete(v40);
    }
    if (++v6 == v25) {
      return v29;
    }
  }
  if (__p)
  {
    int v39 = (__n128 *)__p;
    operator delete(__p);
  }
  if (v40)
  {
    unint64_t v41 = (__n128 *)v40;
    operator delete(v40);
  }
  return v29;
}

void sub_1071544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a24) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_1071588(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v9 = sub_EB04C4(a2);
  if (a3 <= a4 && v9 > a4)
  {
    unint64_t v10 = v9 - 1;
    if (!a3 && v10 == a4) {
      return;
    }
    if (a3 == a4)
    {
      long long v11 = (long long *)sub_EB0624(a2, a3);
      unint64_t v12 = sub_EAFC9C(a2, a3);
      sub_EAFC44((uint64_t)a2, v12, v11);
      if (v10 <= a4)
      {
LABEL_14:
        if (a3)
        {
          uint64_t v21 = sub_69134((uint64_t)a2);
          long long v25 = *(_OWORD *)v21;
          long long v22 = *(_OWORD *)(v21 + 16);
          long long v23 = *(_OWORD *)(v21 + 32);
          long long v24 = *(_OWORD *)(v21 + 48);
          uint64_t v29 = *(void *)(v21 + 64);
          long long v27 = v23;
          long long v28 = v24;
          long long v26 = v22;
          LODWORD(v25) = 0;
          sub_EAD920((uint64_t)a2, (uint64_t)&v25);
          if (a5) {
            *(unsigned char *)(sub_EAD918((uint64_t)a2) + 2) = 1;
          }
        }
        return;
      }
    }
    else
    {
      uint64_t v13 = (int **)(sub_3C80F8((uint64_t)a2) + 96 * a4);
      BOOL v14 = (int **)sub_3FA3A8((uint64_t)a2);
      sub_EB1504((uint64_t)a2, v13, v14, 0);
      unint64_t v15 = (int **)sub_3C80F8((uint64_t)a2);
      uint64_t v16 = sub_3C80F8((uint64_t)a2);
      sub_EB1504((uint64_t)a2, v15, (int **)(v16 + 96 * a3), 0);
      if (v10 <= a4) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = sub_EADAD0((uint64_t)a2);
    long long v25 = *(_OWORD *)v17;
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v20 = *(_OWORD *)(v17 + 48);
    uint64_t v29 = *(void *)(v17 + 64);
    long long v27 = v19;
    long long v28 = v20;
    long long v26 = v18;
    LODWORD(v25) = 1000000000;
    sub_EADAA8((uint64_t)a2, (uint64_t)&v25);
    if (a5) {
      *(unsigned char *)(sub_EAD918((uint64_t)a2) + 3) = 1;
    }
    goto LABEL_14;
  }

  sub_EAD268((uint64_t)a2);
}

void sub_1071768(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 8080) || !*(unsigned char *)(a1 + 8081)) {
    goto LABEL_12;
  }
  sub_EA7908(&v20, a2);
  BOOL v6 = sub_1071140((char *)&v20, a1 + 8);
  if (v23 < 0) {
    operator delete(__p);
  }
  uint64_t v7 = v20;
  if (v20)
  {
    uint64_t v8 = (uint64_t)v21;
    unint64_t v9 = v20;
    if (v21 != v20)
    {
      do
        uint64_t v8 = sub_405F44(v8 - 472);
      while ((void *)v8 != v7);
      unint64_t v9 = v20;
    }
    uint64_t v21 = v7;
    operator delete(v9);
  }
  if (v6)
  {
    sub_EAD268((uint64_t)a2);
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *(void *)(a1 + 8064) = *(void *)(a1 + 8056);
  unint64_t v10 = sub_1071208((uint64_t *)a1, a2);
  sub_1071588(a1, a2, v10, v11, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v12 = *(void *)(a1 + 8056);
  uint64_t v13 = *(void *)(a1 + 8064);
  uint64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    unint64_t v15 = (char *)operator new(v13 - v12);
    uint64_t v16 = 0;
    *a3 = v15;
    a3[1] = v15;
    a3[2] = &v15[32 * (v14 >> 5)];
    do
    {
      uint64_t v17 = v12 + v16;
      long long v18 = &v15[v16];
      unsigned int v19 = *(_DWORD *)(v12 + v16 + 16);
      *(_DWORD *)&v15[v16 + 16] = v19;
      if (v19 <= 1) {
        *(_OWORD *)long long v18 = *(_OWORD *)v17;
      }
      v18[24] = *(unsigned char *)(v17 + 24);
      v16 += 32;
    }
    while (v12 + v16 != v13);
    a3[1] = &v15[v16];
  }
}

void sub_1071904(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1071934(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8080))
  {
    if (*(unsigned char *)(a1 + 8084))
    {
      uint64_t v3 = nullsub_1(a2);
      unint64_t v4 = *(void **)v3;
      uint64_t v5 = *(void **)(v3 + 8);
      if (*(void **)v3 != v5)
      {
        do
        {
          sub_10719A0(a1, v4);
          v4 += 59;
        }
        while (v4 != v5);
      }
    }
  }
}

void sub_10719A0(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8080) && *(unsigned char *)(a1 + 8084) && !sub_EAE144(a2) && !sub_EADC78((uint64_t)a2))
  {
    unint64_t v4 = sub_EB04C4(a2);
    if (sub_EB0698((uint64_t)a2, v4 - 1)) {
      unint64_t v5 = v4 - 1;
    }
    else {
      unint64_t v5 = v4 - 2;
    }
    if (v5) {
      unint64_t v6 = sub_EB0698((uint64_t)a2, 0) == 0;
    }
    else {
      unint64_t v6 = 0;
    }
    sub_1071588(a1, a2, v6, v5, 0);
  }
}

uint64_t sub_1071A74(uint64_t a1, uint64_t a2)
{
  uint64_t result = nullsub_1(a2);
  unint64_t v4 = *(void **)result;
  unint64_t v5 = *(void **)(result + 8);
  if (*(void **)result != v5)
  {
    do
    {
      uint64_t result = sub_1071AC8(a1, v4);
      v4 += 59;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t sub_1071AC8(uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 8080))
  {
    if (*(unsigned char *)(result + 8082))
    {
      uint64_t v3 = result;
      uint64_t result = sub_EAE144(a2);
      if ((result & 1) == 0)
      {
        uint64_t result = sub_EADD1C((uint64_t)a2);
        uint64_t v4 = *(void *)result;
        unint64_t v5 = (unsigned __int16 *)(*(void *)result - **(int **)result);
        unsigned int v6 = *v5;
        if (*(unsigned char *)(result + 38))
        {
          if (v6 >= 0xB)
          {
            unsigned int v7 = v5[5];
            if (v7)
            {
              if ((*(_DWORD *)(v4 + v7) & 2) != 0) {
                return result;
              }
            }
          }
        }
        else if (v6 >= 0xB)
        {
          unsigned int v8 = v5[5];
          if (v8)
          {
            if (*(_DWORD *)(v4 + v8)) {
              return result;
            }
          }
        }
        unint64_t v9 = (int **)sub_3C80F8((uint64_t)a2);
        uint64_t v10 = sub_3FA3A8((uint64_t)a2);
        if (v9 != (int **)v10)
        {
          do
          {
            unint64_t v11 = *v9;
            uint64_t v12 = (unsigned __int16 *)((char *)*v9 - **v9);
            unsigned int v13 = *v12;
            if (*((unsigned char *)v9 + 38))
            {
              if (v13 >= 0xB)
              {
                unsigned int v14 = v12[5];
                if (v14)
                {
                  if ((*(int *)((char *)v11 + v14) & 2) != 0) {
                    goto LABEL_25;
                  }
                }
              }
            }
            else if (v13 >= 0xB)
            {
              unsigned int v15 = v12[5];
              if (v15)
              {
                if (*(int *)((char *)v11 + v15)) {
                  goto LABEL_25;
                }
              }
            }
            v9 += 12;
          }
          while (v9 != (int **)v10);
          unint64_t v9 = (int **)v10;
        }
LABEL_25:
        if (v9 == (int **)sub_3FA3A8((uint64_t)a2))
        {
          uint64_t result = sub_EAFF60((uint64_t)a2);
          long long v18 = (unsigned __int16 *)(*(void *)result - **(int **)result);
          unsigned int v19 = *v18;
          if (*(unsigned char *)(result + 38))
          {
            if (v19 < 0xB) {
              return result;
            }
            unsigned int v20 = v18[5];
            if (!v20) {
              return result;
            }
            int v21 = 2;
          }
          else
          {
            if (v19 < 0xB) {
              return result;
            }
            unsigned int v20 = v18[5];
            if (!v20) {
              return result;
            }
            int v21 = 1;
          }
          if ((*(_DWORD *)(*(void *)result + v20) & v21) == 0) {
            return result;
          }
          uint64_t result = sub_EADAD0((uint64_t)a2);
          if (!*(_DWORD *)result) {
            return result;
          }
        }
        uint64_t v16 = *(void *)(sub_69134((uint64_t)a2) + 32);
        if (v9 == (int **)sub_3FA3A8((uint64_t)a2))
        {
          unint64_t v22 = sub_EAFF14((uint64_t)a2);
          char v23 = (long long *)sub_EAFF60((uint64_t)a2);
          sub_EAFC44((uint64_t)a2, v22, v23);
          uint64_t v24 = sub_EAFF60((uint64_t)a2);
          sub_3F4E6C(v3 + 8, v24, (uint64_t)&__p);
          long long v25 = __p;
          long long v26 = v33;
          *(unsigned char *)(sub_EAD918((uint64_t)a2) + 8) = v25 != v26;
          long long v27 = __p;
          if (__p == v33)
          {
            BOOL v30 = 0;
          }
          else
          {
            do
            {
              long long v28 = (void *)*v27;
              uint64_t v29 = v27[1];
              v27 += 2;
              LODWORD(v28) = *(unsigned __int8 *)(*v28 + 424 * v29 + 312);
              BOOL v30 = v28 != 0;
              if (v28) {
                BOOL v31 = 1;
              }
              else {
                BOOL v31 = v27 == v33;
              }
            }
            while (!v31);
          }
          *(unsigned char *)(sub_EAD918((uint64_t)a2) + 9) = v30;
          if (__p)
          {
            unint64_t v33 = __p;
            operator delete(__p);
          }
        }
        else
        {
          uint64_t v17 = (int **)sub_3C80F8((uint64_t)a2);
          sub_EB1504((uint64_t)a2, v17, v9, 1);
        }
        LODWORD(__p) = 0;
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        char v35 = 0;
        char v37 = 1;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        char v40 = 0;
        int v41 = 36000;
        char v42 = 0;
        uint64_t v36 = v16;
        sub_EAD920((uint64_t)a2, (uint64_t)&__p);
        uint64_t result = sub_EAD918((uint64_t)a2);
        *(unsigned char *)(result + 4) = 1;
      }
    }
  }
  return result;
}

void sub_1071DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1071DEC(void **a1, uint64_t a2, uint64_t a3)
{
  while (!sub_10209C4((uint64_t)a1, a2))
  {
    unint64_t v7 = *(void *)(sub_EB0624(*a1, (unint64_t)a1[1]) + 32);
    v12[0] = off_243F710;
    unsigned int v13 = v12;
    sub_3EAFD8(a3, v7, (uint64_t)v12, &v10);
    if (v13 == v12)
    {
      (*(void (**)(void *))(v12[0] + 32))(v12);
      unsigned int v8 = v10;
      unint64_t v9 = v11;
      if (!v10) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v13) {
        (*(void (**)(void))(*v13 + 40))();
      }
      unsigned int v8 = v10;
      unint64_t v9 = v11;
      if (!v10) {
        goto LABEL_9;
      }
    }
    unint64_t v11 = v8;
    operator delete(v8);
LABEL_9:
    BOOL result = v8 != v9;
    if (v8 != v9) {
      return result;
    }
    sub_1074AC4(a1);
  }
  return 0;
}

void sub_1071F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a15 == &a12)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
    _Unwind_Resume(a1);
  }
  sub_20A7BC8((uint64_t)a15);
  _Unwind_Resume(a1);
}

void sub_1071FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  unint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 != v5)
  {
    do
    {
      sub_1072000(a1, v4);
      v4 += 59;
    }
    while (v4 != v5);
  }
}

void sub_1072000(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8080) && *(unsigned char *)(a1 + 8083) && !sub_EAE144(a2))
  {
    uint64_t v4 = sub_EAFF60((uint64_t)a2);
    unint64_t v5 = *(unsigned int *)(v4 + 32) | ((unint64_t)*(unsigned __int16 *)(v4 + 36) << 32);
    unsigned int v6 = (int *)sub_2D5D58(a1 + 232, v5);
    unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 >= 0x2Fu)
    {
      uint64_t v8 = v7[23];
      if (v8)
      {
        if (*((unsigned char *)v6 + v8) == 47) {
          goto LABEL_13;
        }
      }
    }
    unint64_t v9 = (int *)sub_2D5D58(a1 + 232, v5);
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 0x2Fu)
    {
      uint64_t v11 = v10[23];
      if (v11)
      {
        unsigned int v12 = *((unsigned __int8 *)v9 + v11);
        BOOL v13 = v12 > 0x2D;
        uint64_t v14 = (1 << v12) & 0x208040000000;
        if (!v13 && v14 != 0)
        {
LABEL_13:
          sub_46DD74((uint64_t)a2);
          uint64_t v17 = v16;
          sub_46DD80((uint64_t)a2);
          if (v17 != v18)
          {
            unsigned int v19 = v18;
            while (1)
            {
              unint64_t v20 = *((unsigned int *)v17 - 16) | ((unint64_t)*((unsigned __int16 *)v17 - 30) << 32);
              int v21 = (int *)sub_2D5D58(a1 + 232, v20);
              unint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
              if (*v22 < 0x2Fu || (uint64_t v23 = v22[23]) == 0 || *((unsigned char *)v21 + v23) != 47)
              {
                uint64_t v24 = (int *)sub_2D5D58(a1 + 232, v20);
                long long v25 = (unsigned __int16 *)((char *)v24 - *v24);
                if (*v25 < 0x2Fu) {
                  break;
                }
                uint64_t v26 = v25[23];
                if (!v26) {
                  break;
                }
                unsigned int v27 = *((unsigned __int8 *)v24 + v26);
                BOOL v13 = v27 > 0x2D;
                uint64_t v28 = (1 << v27) & 0x208040000000;
                if (v13 || v28 == 0) {
                  break;
                }
              }
              v17 -= 12;
              if (v17 == v19)
              {
                uint64_t v17 = v19;
                break;
              }
            }
          }
          sub_46DD80((uint64_t)a2);
          if (v17 != v30)
          {
            uint64_t v31 = *(void *)(sub_EADAD0((uint64_t)a2) + 32);
            unint64_t v32 = (int **)sub_3FA3A8((uint64_t)a2);
            sub_EB1504((uint64_t)a2, v17, v32, 0);
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            char v45 = 0;
            char v47 = 1;
            uint64_t v48 = 0;
            uint64_t v49 = 0;
            char v50 = 0;
            int v51 = 36000;
            char v52 = 0;
            uint64_t v33 = *(void *)(a1 + 8104);
            if (v33 < 0) {
              __int16 v34 = -50;
            }
            else {
              __int16 v34 = 50;
            }
            char v35 = (void *)sub_EAFF60((uint64_t)a2);
            LODWORD(v36) = 0;
            char v37 = (unsigned __int16 *)(*v35 - *(int *)*v35);
            if (*v37 >= 9u)
            {
              uint64_t v36 = v37[4];
              if (v37[4]) {
                LODWORD(v36) = *(_DWORD *)(*v35 + v36);
              }
            }
            if (v36 % 0x64 <= 0x31) {
              int64_t v38 = v36 / 0x64uLL;
            }
            else {
              int64_t v38 = v36 / 0x64uLL + 1;
            }
            if (v38)
            {
              int v39 = 5243 * (__int16)(v34 + v33 % 100);
              double v40 = (double)(v33 / 100 + (int)((v39 >> 19) + (v39 >> 31))) / (double)v38;
              if (v40 <= 1.0) {
                double v41 = v40 * 1000000000.0;
              }
              else {
                double v41 = 1000000000.0;
              }
              unsigned int v42 = vcvtad_u64_f64(v41);
            }
            uint64_t v46 = v31;
            sub_EADAA8((uint64_t)a2, (uint64_t)&v42);
          }
        }
      }
    }
  }
}

BOOL sub_1072318(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 48;
    while (1)
    {
      sub_106C7DC(v5, v4, (uint64_t)&v15);
      if (v15 == v16)
      {
        uint64_t v8 = (char *)__p;
        if (v17 == v18)
        {
          BOOL v7 = __p != v20;
          if (__p)
          {
LABEL_14:
            unint64_t v9 = v20;
            uint64_t v10 = v8;
            if (v20 != v8)
            {
              uint64_t v11 = v20;
              do
              {
                BOOL v13 = (void *)*((void *)v11 - 3);
                v11 -= 24;
                unsigned int v12 = v13;
                if (v13)
                {
                  *((void *)v9 - 2) = v12;
                  operator delete(v12);
                }
                unint64_t v9 = v11;
              }
              while (v11 != v8);
              uint64_t v10 = __p;
            }
            unint64_t v20 = v8;
            operator delete(v10);
          }
        }
        else
        {
          BOOL v7 = 1;
          if (__p) {
            goto LABEL_14;
          }
        }
      }
      else
      {
        BOOL v7 = 1;
        uint64_t v8 = (char *)__p;
        if (__p) {
          goto LABEL_14;
        }
      }
      if (v17)
      {
        long long v18 = v17;
        operator delete(v17);
      }
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      v4 += 59;
      int v6 = v4 == a2 || v7;
      if (v6 == 1) {
        return v7;
      }
    }
  }
  return 0;
}

void sub_1072440(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_path_clipping");
  uint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (!v4 || (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) != 4))
  {
    BOOL v6 = *(unsigned char *)a1 != 0;
    *(unsigned char *)a1 = v6;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_8;
    }
LABEL_6:
    if (!v6) {
      return;
    }
    goto LABEL_9;
  }
  BOOL v6 = v5 == 4;
  *(unsigned char *)a1 = v6;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_6;
  }
LABEL_8:
  operator delete(__p[0]);
  if (!*(unsigned char *)a1) {
    return;
  }
LABEL_9:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "enable_clip_at_blocking_incidents");
  BOOL v7 = sub_58070(a2, (uint64_t)__p);
  if (v7 && (int v8 = *((_DWORD *)v7 + 12), (v8 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1) = v8 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_14:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "enable_clip_beginning_walk");
  unint64_t v9 = sub_58070(a2, (uint64_t)__p);
  if (v9 && (int v10 = *((_DWORD *)v9 + 12), (v10 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2) = v10 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2) = *(unsigned char *)(a1 + 2) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_20:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_clip_destination_parking");
  uint64_t v11 = sub_58070(a2, (uint64_t)__p);
  if (v11 && (int v12 = *((_DWORD *)v11 + 12), (v12 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 3) = v12 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 3) = *(unsigned char *)(a1 + 3) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_26:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_clip_zero_length_ends");
  BOOL v13 = sub_58070(a2, (uint64_t)__p);
  if (v13 && (int v14 = *((_DWORD *)v13 + 12), (v14 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 4) = v14 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_32;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 4) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_32:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "check_and_remove_maneuver_restricted_paths");
  unsigned int v15 = sub_58070(a2, (uint64_t)__p);
  if (v15 && (int v16 = *((_DWORD *)v15 + 12), (v16 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 5) = v16 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_38;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 5) = *(unsigned char *)(a1 + 5) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_38:
    }
      operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_dist_from_origin");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 8));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_dist_to_destination");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 16));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "parking_lot_pullback_distance");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 24));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10728B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10728EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  int v8 = (uint64_t **)(a1 + 48);
  sub_3EBD64(a1 + 8, a2, a4);
  HIBYTE(v25[2]) = 19;
  strcpy((char *)v25, "DrivingPathAnalyzer");
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v32 = 0;
  unint64_t v9 = sub_374CDC((uint64_t)a2, (uint64_t)v25, v31);
  HIBYTE(v30) = 7;
  strcpy((char *)&__p, "default");
  int v10 = (void *)sub_560F4(v9, (uint64_t)&__p);
  sub_106AD24(v8, a2, v10, a4);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = v31[0];
  if (v31[0])
  {
    uint64_t v12 = v31[1];
    BOOL v13 = (void *)v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      BOOL v13 = (void *)v31[0];
    }
    v31[1] = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v25[2]) < 0) {
    operator delete(v25[0]);
  }
  int v14 = (uint64_t *)sub_374CE4(a2);
  unsigned int v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v26 = *v14;
  unsigned int v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_327C18(a1 + 232, &v26);
  int v16 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  *(void *)(a1 + 8072) = 0;
  *(_OWORD *)(a1 + 8056) = 0u;
  HIBYTE(v32) = 11;
  strcpy((char *)v31, "PathClipper");
  __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v17 = sub_374CDC((uint64_t)a2, (uint64_t)v31, (uint64_t *)&__p);
  sub_3CB660(v17, a3, v25);
  *(_WORD *)(a1 + 8084) = 0;
  *(_DWORD *)(a1 + 8080) = 0;
  *(void *)(a1 + 8088) = 0;
  *(void *)(a1 + 8104) = 0;
  *(void *)(a1 + 8096) = 0;
  sub_1073C2C(a1 + 8080, v25);
  long long v18 = (char *)v25[2];
  if (v25[2])
  {
    do
    {
      uint64_t v23 = *(char **)v18;
      sub_57AC8((uint64_t *)v18 + 5);
      if (v18[39] < 0) {
        operator delete(*((void **)v18 + 2));
      }
      operator delete(v18);
      long long v18 = v23;
    }
    while (v23);
  }
  unsigned int v19 = v25[0];
  v25[0] = 0;
  if (v19) {
    operator delete(v19);
  }
  unint64_t v20 = (void **)__p;
  if (__p)
  {
    int v21 = v29;
    unint64_t v22 = __p;
    if (v29 != __p)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      unint64_t v22 = __p;
    }
    uint64_t v29 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31[0]);
  }
  return a1;
}

void sub_1072BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_5450C((uint64_t)&a9);
  sub_1A668(&__p);
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  uint64_t v30 = *v27;
  if (*v27)
  {
    *(void *)(v25 + 8064) = v30;
    operator delete(v30);
  }
  sub_32834C(v26);
  if (*(char *)(v25 + 167) < 0) {
    operator delete(*(void **)(v25 + 144));
  }
  _Unwind_Resume(a1);
}

void sub_1072C78(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1 + 8080;
  if (!*(unsigned char *)(a1 + 8080) || !*(unsigned char *)(a1 + 8081)) {
    goto LABEL_7;
  }
  if (sub_1072FF8((char *)a2, a1 + 8)
    || *(unsigned char *)(v4 + 5) && (uint64_t v7 = sub_40EFE8((uint64_t)a2), v8 = sub_52058((uint64_t)a2), sub_1073B04(v7, v8)))
  {
    sub_EA8EC4(a2);
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *(void *)(a1 + 8064) = *(void *)(a1 + 8056);
  if (sub_EA9088(a2) == 1)
  {
    unint64_t v9 = *(void **)nullsub_1(a2);
    unint64_t v10 = sub_10730C0((uint64_t *)a1, (uint64_t)v9);
    sub_1073440(a1, v9, v10, v11, 1);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v12 = *(void *)(a1 + 8056);
    uint64_t v13 = *(void *)(a1 + 8064);
    uint64_t v14 = v13 - v12;
    if (v13 != v12)
    {
      if (v14 < 0) {
        sub_2E00();
      }
      unsigned int v15 = (char *)operator new(v13 - v12);
      uint64_t v16 = 0;
      *a3 = v15;
      a3[1] = v15;
      a3[2] = &v15[32 * (v14 >> 5)];
      do
      {
        uint64_t v17 = v12 + v16;
        long long v18 = &v15[v16];
        unsigned int v19 = *(_DWORD *)(v12 + v16 + 16);
        *(_DWORD *)&v15[v16 + 16] = v19;
        if (v19 <= 1) {
          *(_OWORD *)long long v18 = *(_OWORD *)v17;
        }
        v18[24] = *(unsigned char *)(v17 + 24);
        v16 += 32;
      }
      while (v12 + v16 != v13);
LABEL_30:
      a3[1] = &v15[v16];
      return;
    }
    return;
  }
  if (sub_EA9088(a2) >= 3)
  {
    uint64_t v20 = sub_40EFE8((uint64_t)a2) + 480;
    uint64_t v21 = sub_52058((uint64_t)a2) - 480;
    if (v20 != v21)
    {
      uint64_t v22 = v20;
      do
      {
        sub_46B058();
        uint64_t v24 = v23;
        unint64_t v26 = v25;
        sub_EB23DC();
        if (sub_1074CD8(v24, v26, v27, v28, a1, v20)) {
          goto LABEL_23;
        }
        v22 += 480;
        v20 += 480;
      }
      while (v22 != v21);
    }
  }
  uint64_t v29 = *(void **)nullsub_1(a2);
  unint64_t v30 = sub_10730C0((uint64_t *)a1, (uint64_t)v29);
  unint64_t v32 = v31;
  if (v31 == sub_EB2E84((uint64_t)v29) - 1)
  {
    uint64_t v33 = (void *)(*(void *)(nullsub_1(a2) + 8) - 480);
    if (!sub_10730C0((uint64_t *)a1, (uint64_t)v33))
    {
      unint64_t v41 = v34;
      sub_1073440(a1, v29, v30, v32, 1);
      sub_1073440(a1, v33, 0, v41, 1);
      goto LABEL_32;
    }
LABEL_23:
    sub_EA8EC4(a2);
LABEL_32:
    sub_1070058(a3, (uint64_t *)(a1 + 8056));
    return;
  }
  sub_EA8EC4(a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v35 = *(void *)(a1 + 8056);
  uint64_t v36 = *(void *)(a1 + 8064);
  uint64_t v37 = v36 - v35;
  if (v36 != v35)
  {
    if (v37 < 0) {
      sub_2E00();
    }
    unsigned int v15 = (char *)operator new(v36 - v35);
    uint64_t v16 = 0;
    *a3 = v15;
    a3[1] = v15;
    a3[2] = &v15[32 * (v37 >> 5)];
    do
    {
      uint64_t v38 = v35 + v16;
      int v39 = &v15[v16];
      unsigned int v40 = *(_DWORD *)(v35 + v16 + 16);
      *(_DWORD *)&v15[v16 + 16] = v40;
      if (v40 <= 1) {
        *(_OWORD *)int v39 = *(_OWORD *)v38;
      }
      v39[24] = *(unsigned char *)(v38 + 24);
      v16 += 32;
    }
    while (v35 + v16 != v36);
    goto LABEL_30;
  }
}

void sub_1072FD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1072FF8(char *a1, uint64_t a2)
{
  sub_EA898C(a1, (uint64_t)v11);
  sub_EA8A84(a1, (uint64_t)v6);
  BOOL v4 = sub_107392C((uint64_t)v11, v6, a2);
  if (__p)
  {
    unint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
  if (v14)
  {
    unsigned int v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  return v4;
}

void sub_1073090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_10730AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10730C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = sub_EB2E84(a2);
  uint64_t v31 = sub_EB40C0(v2);
  if (!v4) {
    return 0;
  }
  char v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = (uint64_t)(a1 + 1);
  uint64_t v8 = (__n128 **)(a1 + 1007);
  uint64_t v30 = v4 - 1;
  uint64_t v9 = v4;
  unint64_t v32 = a1 + 1;
  uint64_t v29 = v4;
  uint64_t v33 = v4;
  uint64_t v34 = v2;
  while (1)
  {
    unint64_t v10 = (long long *)sub_EB2F38(v2, v6);
    long long v11 = *v10;
    long long v12 = v10[2];
    v42[1] = v10[1];
    _OWORD v42[2] = v12;
    v42[0] = v11;
    uint64_t v13 = sub_EB3020(v2, v6);
    sub_3EBE9C(v7, (unsigned int *)v42, (uint64_t)&v40);
    sub_3F4FA4(&__p);
    if (v40 == v41)
    {
      unsigned int v15 = (__n128 *)__p;
      if (__p == v39)
      {
        BOOL v14 = 0;
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v15->n128_u64[0];
          uint64_t v17 = v15->n128_i64[1];
          ++v15;
          LODWORD(v16) = *(unsigned __int8 *)(*v16 + 424 * v17 + 312);
          BOOL v14 = v16 != 0;
          if (v16) {
            BOOL v18 = 1;
          }
          else {
            BOOL v18 = v15 == v39;
          }
        }
        while (!v18);
      }
    }
    else
    {
      BOOL v14 = 1;
    }
    unsigned int v19 = a1;
    sub_10743F8(v8, a1[1008], (__n128 *)v40, v41, ((char *)v41 - (unsigned char *)v40) >> 4);
    uint64_t v21 = (__n128 *)__p;
    uint64_t v20 = v39;
    while (v21 != v20)
    {
      if (*(unsigned char *)(*(void *)v21->n128_u64[0] + 424 * v21->n128_u64[1] + 312))
      {
        sub_45E5B0(v43, v21);
        sub_1002140((uint64_t *)v8, (uint64_t)v43);
      }
      ++v21;
    }
    if (v14)
    {
      a1 = v19;
      if ((v37 & (v35 > v36)) == 0)
      {
        unint64_t v23 = v9;
        uint64_t v24 = v36;
        uint64_t v25 = v33;
        uint64_t v2 = v34;
        uint64_t v7 = (uint64_t)v32;
        goto LABEL_35;
      }
      uint64_t v22 = 0;
      unint64_t v23 = v9;
      uint64_t v24 = v35;
      uint64_t v25 = v33;
      uint64_t v2 = v34;
      uint64_t v7 = (uint64_t)v32;
      goto LABEL_29;
    }
    a1 = v19;
    if (v37)
    {
      uint64_t v2 = v34;
      uint64_t v24 = v13 + v35;
      unint64_t v23 = v9;
      uint64_t v7 = (uint64_t)v32;
      uint64_t v25 = v33;
LABEL_27:
      if (v6 != v30)
      {
        v5 += v13;
        char v37 = 1;
        uint64_t v27 = (__n128 *)__p;
        uint64_t v35 = v24;
        uint64_t v9 = v23;
        if (!__p) {
          goto LABEL_38;
        }
LABEL_37:
        int v39 = v27;
        operator delete(v27);
        goto LABEL_38;
      }
      uint64_t v22 = v13;
      if (v24 <= v36)
      {
LABEL_33:
        uint64_t v35 = v24;
        goto LABEL_34;
      }
LABEL_29:
      if (v31 - (v5 + v22) <= a1[1012])
      {
        uint64_t v35 = 0;
        uint64_t v29 = v23;
        goto LABEL_35;
      }
      goto LABEL_33;
    }
    uint64_t v26 = v19[1011];
    uint64_t v24 = v13;
    unint64_t v23 = v6;
    uint64_t v25 = v33;
    uint64_t v2 = v34;
    uint64_t v7 = (uint64_t)v32;
    if (v5 <= v26) {
      goto LABEL_27;
    }
    unint64_t v23 = v9;
LABEL_34:
    uint64_t v24 = v36;
LABEL_35:
    v5 += v13;
    uint64_t v27 = (__n128 *)__p;
    if (v5 > a1[1011]) {
      break;
    }
    char v37 = 0;
    uint64_t v36 = v24;
    uint64_t v9 = v23;
    if (__p) {
      goto LABEL_37;
    }
LABEL_38:
    if (v40)
    {
      unint64_t v41 = (__n128 *)v40;
      operator delete(v40);
    }
    if (++v6 == v25) {
      return v29;
    }
  }
  if (__p)
  {
    int v39 = (__n128 *)__p;
    operator delete(__p);
  }
  if (v40)
  {
    unint64_t v41 = (__n128 *)v40;
    operator delete(v40);
  }
  return v29;
}

void sub_10733FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a24) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_1073440(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v9 = sub_EB2E84((uint64_t)a2);
  if (a3 <= a4 && v9 > a4)
  {
    unint64_t v10 = v9 - 1;
    if (!a3 && v10 == a4) {
      return;
    }
    if (a3 == a4)
    {
      long long v11 = (long long *)sub_EB2F38((uint64_t)a2, a3);
      unint64_t v12 = sub_EB249C(a2, a3);
      sub_EB2444((uint64_t)a2, v12, v11);
      if (v10 <= a4)
      {
LABEL_14:
        if (a3)
        {
          uint64_t v21 = sub_EB22DC((uint64_t)a2);
          long long v25 = *(_OWORD *)v21;
          long long v22 = *(_OWORD *)(v21 + 16);
          long long v23 = *(_OWORD *)(v21 + 32);
          long long v24 = *(_OWORD *)(v21 + 48);
          uint64_t v29 = *(void *)(v21 + 64);
          long long v27 = v23;
          long long v28 = v24;
          long long v26 = v22;
          LODWORD(v25) = 0;
          sub_EB22B4((uint64_t)a2, (uint64_t)&v25);
          if (a5) {
            *(unsigned char *)(sub_EB22AC((uint64_t)a2) + 2) = 1;
          }
        }
        return;
      }
    }
    else
    {
      uint64_t v13 = (char *)(sub_3C80F8((uint64_t)a2) + 104 * a4);
      BOOL v14 = (char *)sub_3FA3A8((uint64_t)a2);
      sub_EB3FE8((uint64_t)a2, v13, v14, 0);
      unsigned int v15 = (char *)sub_3C80F8((uint64_t)a2);
      uint64_t v16 = sub_3C80F8((uint64_t)a2);
      sub_EB3FE8((uint64_t)a2, v15, (char *)(v16 + 104 * a3), 0);
      if (v10 <= a4) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = sub_486CB4((uint64_t)a2);
    long long v25 = *(_OWORD *)v17;
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v20 = *(_OWORD *)(v17 + 48);
    uint64_t v29 = *(void *)(v17 + 64);
    long long v27 = v19;
    long long v28 = v20;
    long long v26 = v18;
    LODWORD(v25) = 1000000000;
    sub_EB241C((uint64_t)a2, (uint64_t)&v25);
    if (a5) {
      *(unsigned char *)(sub_EB22AC((uint64_t)a2) + 3) = 1;
    }
    goto LABEL_14;
  }

  sub_EB1BF8((uint64_t)a2);
}

void sub_1073620(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 8080) || !*(unsigned char *)(a1 + 8081)) {
    goto LABEL_12;
  }
  sub_EA868C((uint64_t)&v20, (uint64_t)a2);
  BOOL v6 = sub_1072FF8((char *)&v20, a1 + 8);
  if (v23 < 0) {
    operator delete(__p);
  }
  uint64_t v7 = v20;
  if (v20)
  {
    uint64_t v8 = (uint64_t)v21;
    unint64_t v9 = v20;
    if (v21 != v20)
    {
      do
        uint64_t v8 = sub_4451C0(v8 - 480);
      while ((void *)v8 != v7);
      unint64_t v9 = v20;
    }
    uint64_t v21 = v7;
    operator delete(v9);
  }
  if (v6)
  {
    sub_EB1BF8((uint64_t)a2);
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  *(void *)(a1 + 8064) = *(void *)(a1 + 8056);
  unint64_t v10 = sub_10730C0((uint64_t *)a1, (uint64_t)a2);
  sub_1073440(a1, a2, v10, v11, 1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v12 = *(void *)(a1 + 8056);
  uint64_t v13 = *(void *)(a1 + 8064);
  uint64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    unsigned int v15 = (char *)operator new(v13 - v12);
    uint64_t v16 = 0;
    *a3 = v15;
    a3[1] = v15;
    a3[2] = &v15[32 * (v14 >> 5)];
    do
    {
      uint64_t v17 = v12 + v16;
      long long v18 = &v15[v16];
      unsigned int v19 = *(_DWORD *)(v12 + v16 + 16);
      *(_DWORD *)&v15[v16 + 16] = v19;
      if (v19 <= 1) {
        *(_OWORD *)long long v18 = *(_OWORD *)v17;
      }
      v18[24] = *(unsigned char *)(v17 + 24);
      v16 += 32;
    }
    while (v12 + v16 != v13);
    a3[1] = &v15[v16];
  }
}

void sub_10737BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10737EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8080))
  {
    if (*(unsigned char *)(a1 + 8084))
    {
      uint64_t v3 = nullsub_1(a2);
      uint64_t v4 = *(void **)v3;
      uint64_t v5 = *(void **)(v3 + 8);
      if (*(void **)v3 != v5)
      {
        do
        {
          sub_1073858(a1, v4);
          v4 += 60;
        }
        while (v4 != v5);
      }
    }
  }
}

void sub_1073858(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8080) && *(unsigned char *)(a1 + 8084) && !sub_EB2EC4((uint64_t)a2) && !sub_EB29DC((uint64_t)a2))
  {
    uint64_t v4 = sub_EB2E84((uint64_t)a2);
    if (sub_EB3020((uint64_t)a2, v4 - 1)) {
      unint64_t v5 = v4 - 1;
    }
    else {
      unint64_t v5 = v4 - 2;
    }
    if (v5) {
      unint64_t v6 = sub_EB3020((uint64_t)a2, 0) == 0;
    }
    else {
      unint64_t v6 = 0;
    }
    sub_1073440(a1, a2, v6, v5, 0);
  }
}

BOOL sub_107392C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  while (!sub_107503C((uint64_t *)a1, a2))
  {
    uint64_t v7 = (unsigned int *)sub_EB2F38(*(void *)a1, *(void *)(a1 + 8));
    unint64_t v8 = (((unint64_t)(v7[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v7[1] << 32) | *v7) ^ 0x1000000000000;
    v13[0] = off_243F790;
    uint64_t v14 = v13;
    sub_3EBD68(a3, v8, (uint64_t)v13, &v11);
    if (v14 == v13)
    {
      (*(void (**)(void *))(v13[0] + 32))(v13);
      unint64_t v9 = v11;
      unint64_t v10 = v12;
      if (!v11) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v14) {
        (*(void (**)(void))(*v14 + 40))();
      }
      unint64_t v9 = v11;
      unint64_t v10 = v12;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = v9;
    operator delete(v9);
LABEL_9:
    BOOL result = v9 != v10;
    if (v9 != v10) {
      return result;
    }
    sub_1074F24((uint64_t *)a1);
  }
  return 0;
}

void sub_1073AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a15 == &a12)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
    _Unwind_Resume(a1);
  }
  sub_20A7BC8((uint64_t)a15);
  _Unwind_Resume(a1);
}

BOOL sub_1073B04(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    while (1)
    {
      sub_1067AB4((uint64_t)&v13);
      if (v13 == v14)
      {
        unint64_t v6 = (char *)__p;
        if (v15 == v16)
        {
          BOOL v5 = __p != v18;
          if (__p)
          {
LABEL_14:
            uint64_t v7 = v18;
            unint64_t v8 = v6;
            if (v18 != v6)
            {
              unint64_t v9 = v18;
              do
              {
                unint64_t v11 = (void *)*((void *)v9 - 3);
                v9 -= 24;
                unint64_t v10 = v11;
                if (v11)
                {
                  *((void *)v7 - 2) = v10;
                  operator delete(v10);
                }
                uint64_t v7 = v9;
              }
              while (v9 != v6);
              unint64_t v8 = __p;
            }
            long long v18 = v6;
            operator delete(v8);
          }
        }
        else
        {
          BOOL v5 = 1;
          if (__p) {
            goto LABEL_14;
          }
        }
      }
      else
      {
        BOOL v5 = 1;
        unint64_t v6 = (char *)__p;
        if (__p) {
          goto LABEL_14;
        }
      }
      if (v15)
      {
        uint64_t v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        uint64_t v14 = v13;
        operator delete(v13);
      }
      v3 += 480;
      int v4 = v3 == a2 || v5;
      if (v4 == 1) {
        return v5;
      }
    }
  }
  return 0;
}

void sub_1073C2C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "enable_path_clipping");
  int v4 = sub_58070(a2, (uint64_t)__p);
  if (!v4 || (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) != 4))
  {
    BOOL v6 = *(unsigned char *)a1 != 0;
    *(unsigned char *)a1 = v6;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_8;
    }
LABEL_6:
    if (!v6) {
      return;
    }
    goto LABEL_9;
  }
  BOOL v6 = v5 == 4;
  *(unsigned char *)a1 = v6;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_6;
  }
LABEL_8:
  operator delete(__p[0]);
  if (!*(unsigned char *)a1) {
    return;
  }
LABEL_9:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "enable_clip_at_blocking_incidents");
  uint64_t v7 = sub_58070(a2, (uint64_t)__p);
  if (v7 && (int v8 = *((_DWORD *)v7 + 12), (v8 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1) = v8 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_14:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "enable_clip_beginning_walk");
  unint64_t v9 = sub_58070(a2, (uint64_t)__p);
  if (v9 && (int v10 = *((_DWORD *)v9 + 12), (v10 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 2) = v10 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2) = *(unsigned char *)(a1 + 2) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_20:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_clip_destination_parking");
  unint64_t v11 = sub_58070(a2, (uint64_t)__p);
  if (v11 && (int v12 = *((_DWORD *)v11 + 12), (v12 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 3) = v12 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_26;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 3) = *(unsigned char *)(a1 + 3) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_26:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "enable_clip_zero_length_ends");
  uint64_t v13 = sub_58070(a2, (uint64_t)__p);
  if (v13 && (int v14 = *((_DWORD *)v13 + 12), (v14 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 4) = v14 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_32;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 4) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_32:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A40;
  strcpy((char *)__p[0], "check_and_remove_maneuver_restricted_paths");
  unsigned int v15 = sub_58070(a2, (uint64_t)__p);
  if (v15 && (int v16 = *((_DWORD *)v15 + 12), (v16 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 5) = v16 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_38;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 5) = *(unsigned char *)(a1 + 5) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_38:
    }
      operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "max_dist_from_origin");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 8));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_dist_to_destination");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 16));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "parking_lot_pullback_distance");
  sub_D85214(a2, (uint64_t)__p, (uint64_t *)(a1 + 24));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_107409C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_10740D8(void **a1)
{
  unint64_t v2 = (unint64_t)a1[2];
  a1[1] = (void *)((char *)a1[1] + 1);
  int v4 = (char *)a1[6];
  for (uint64_t i = (char *)a1[7]; v2 < ((i - v4) >> 4) - 1; uint64_t i = (char *)a1[7])
  {
    BOOL v6 = &v4[16 * v2];
    if (!*a1)
    {
      if (!*(void *)v6) {
        goto LABEL_3;
      }
      BOOL v9 = 0;
      unint64_t v11 = *(void *)&v4[16 * v2 + 8];
      unint64_t v14 = sub_EAE104(*(void **)v6);
LABEL_2:
      if ((v9 ^ (v11 < v14))) {
        return a1;
      }
      goto LABEL_3;
    }
    uint64_t v7 = a1[1];
    unint64_t v8 = sub_EAE104(*a1);
    BOOL v9 = (unint64_t)v7 < v8;
    if (*(void *)v6)
    {
      int v10 = &v4[16 * v2];
      unint64_t v13 = *((void *)v10 + 1);
      int v12 = (unint64_t *)(v10 + 8);
      unint64_t v11 = v13;
      unint64_t v14 = sub_EAE104(*(void **)v6);
      if (!v9 || v11 >= v14) {
        goto LABEL_2;
      }
      uint64_t v16 = sub_EAE1B8(*a1, (unint64_t)a1[1]);
      if (v16 != sub_EAE1B8(*(void **)v6, *v12)) {
        return a1;
      }
    }
    else if ((unint64_t)v7 < v8)
    {
      return a1;
    }
LABEL_3:
    int v5 = a1[3];
    unint64_t v2 = (unint64_t)a1[2] + 1;
    a1[2] = (void *)v2;
    *(_OWORD *)a1 = *(_OWORD *)&v5[2 * v2];
    int v4 = (char *)a1[6];
  }
  return a1;
}

BOOL sub_10741F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  if (v2 == v3 || v4 == v5) {
    return (v2 == v3) == (v4 == v5);
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int v10 = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t v11 = *(void *)(a1 + 8);
    BOOL v12 = v11 < sub_EAE104(v10);
    unint64_t v13 = *(void **)a2;
    if (*(void *)a2) {
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v12 = 0;
    unint64_t v13 = *(void **)a2;
    if (*(void *)a2)
    {
LABEL_10:
      unint64_t v14 = *(void *)(a2 + 8);
      unint64_t v15 = sub_EAE104(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_EAE1B8(*(void **)a1, *(void *)(a1 + 8));
        return v18 == sub_EAE1B8(*(void **)a2, *(void *)(a2 + 8));
      }
      return v12 ^ v16 ^ 1;
    }
  }
  BOOL v16 = 0;
  return v12 ^ v16 ^ 1;
}

void sub_1074300()
{
}

void *sub_1074314()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_243F690;
  return result;
}

void sub_107434C(uint64_t a1, void *a2)
{
  *a2 = off_243F690;
}

BOOL sub_1074374(uint64_t a1, uint64_t a2)
{
  return sub_35873C(a2);
}

uint64_t sub_107437C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl7routing11PathClipperINS0_11CyclingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24Traf"
                     "ficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl7routing11PathClipperINS0_11CyclingModeEE19has_walking_closureERKNS0_4PathIS2_EER"
                                "KNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl7routing11PathClipperINS0_11CyclingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl7routing11PathClipperINS0_11CyclingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10743EC()
{
}

unint64_t sub_10743F8(__n128 **a1, uint64_t a2, __n128 *a3, __n128 *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unint64_t v7 = (unint64_t)(*a1)->n128_u64 + (v6 & 0xFFFFFFFFFFFFFFE0);
  if (a5 < 1) {
    return v7;
  }
  BOOL v9 = a3;
  uint64_t v11 = v6 >> 5;
  unint64_t v13 = (unint64_t)a1[1];
  BOOL v12 = a1[2];
  if (a5 <= (uint64_t)((uint64_t)v12 - v13) >> 5)
  {
    uint64_t v19 = (uint64_t)(v13 - v7) >> 5;
    if (v19 >= a5)
    {
      uint64_t v21 = &a3[a5];
      long long v24 = (char *)a1[1];
    }
    else
    {
      uint64_t v21 = &a3[v19];
      if (v21 == a4)
      {
        long long v24 = (char *)a1[1];
        a1[1] = (__n128 *)v13;
        if ((uint64_t)(v13 - v7) < 1) {
          return v7;
        }
      }
      else
      {
        uint64_t v66 = v11;
        uint64_t v22 = 0;
        char v23 = &a3[v19];
        do
        {
          sub_45E5B0((__n128 *)(v13 + v22), v23++);
          v22 += 32;
        }
        while (v23 != a4);
        long long v24 = (char *)(v13 + v22);
        uint64_t v11 = v66;
        a1[1] = (__n128 *)(v13 + v22);
        if ((uint64_t)(v13 - v7) < 1) {
          return v7;
        }
      }
    }
    unint64_t v25 = v7 + 32 * a5;
    uint64_t v26 = (uint64_t)&v24[-v25] >> 5;
    uint64_t v27 = 2 * v11;
    long long v28 = (__n128 *)v24;
    if ((unint64_t)&v24[-32 * a5] < v13)
    {
      uint64_t v29 = 0;
      uint64_t v30 = (char *)&v5[2 * v26 + v27];
      do
      {
        uint64_t v31 = &v30[v29];
        unint64_t v32 = &v24[v29];
        *(_DWORD *)&v24[v29 + 16] = *(_DWORD *)&v30[v29 + 16];
        if (*(_DWORD *)&v30[v29 + 16] <= 1u) {
          *(_OWORD *)unint64_t v32 = *(_OWORD *)v31;
        }
        v32[24] = v31[24];
        v29 += 32;
      }
      while ((unint64_t)&v30[v29] < v13);
      long long v28 = (__n128 *)&v24[v29];
    }
    a1[1] = v28;
    if (v24 != (char *)v25)
    {
      uint64_t v33 = 0;
      uint64_t v34 = (char *)&v5[2 * v26 + v27];
      do
      {
        uint64_t v35 = &v24[v33];
        uint64_t v36 = &v34[v33];
        char v37 = &v34[v33 - 32];
        if (v34 != v24)
        {
          uint64_t v38 = v35 - 32;
          unsigned int v39 = *((_DWORD *)v35 - 4);
          unsigned int v40 = *((_DWORD *)v36 - 4);
          if (v39 == v40)
          {
            if (v39 <= 1) {
              *(_OWORD *)uint64_t v38 = *(_OWORD *)v37;
            }
          }
          else
          {
            if (v40 <= 1)
            {
              *(_OWORD *)uint64_t v38 = *(_OWORD *)v37;
              unsigned int v40 = *((_DWORD *)v36 - 4);
            }
            *((_DWORD *)v35 - 4) = v40;
          }
        }
        *(v35 - 8) = *(v36 - 8);
        v33 -= 32;
      }
      while (v37 != (char *)v7);
    }
    if (v21 == v9) {
      return v7;
    }
    unint64_t v41 = (__n128 *)v7;
    do
    {
      sub_45E5B0(&v68, v9);
      if (v41 != &v68)
      {
        unsigned int v42 = v41[1].n128_u32[0];
        unsigned int v43 = v69;
        if (v42 == v69)
        {
          if (v42 <= 1) {
            __n128 *v41 = v68;
          }
        }
        else
        {
          if (v69 <= 1) {
            __n128 *v41 = v68;
          }
          v41[1].n128_u32[0] = v43;
        }
      }
      v41[1].n128_u8[8] = v70;
      ++v9;
      v41 += 2;
    }
    while (v9 != v21);
    return v7;
  }
  unint64_t v14 = a5 + ((uint64_t)(v13 - (void)v5) >> 5);
  if (v14 >> 59) {
    sub_2E00();
  }
  uint64_t v15 = (char *)v12 - (char *)v5;
  if (v15 >> 4 > v14) {
    unint64_t v14 = v15 >> 4;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 59) {
      sub_188D718();
    }
    uint64_t v17 = v11;
    uint64_t v18 = (char *)operator new(32 * v16);
    uint64_t v11 = v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v44 = v11;
  char v45 = (__n128 *)&v18[32 * v11];
  uint64_t v67 = &v18[32 * v16];
  uint64_t v46 = 32 * a5;
  char v47 = &v45[2 * a5];
  uint64_t v48 = v45;
  do
  {
    sub_45E5B0(v48, v9);
    uint64_t v48 = v49 + 2;
    ++v9;
    v46 -= 32;
  }
  while (v46);
  char v50 = (char *)*a1;
  int v51 = v45;
  if (*a1 != (__n128 *)v7)
  {
    uint64_t v52 = 2 * v44;
    uint64_t v53 = v18;
    int v54 = v5;
    do
    {
      char v55 = &v53[v52 * 16];
      unint64_t v56 = (char *)&v54[v52];
      unsigned int v57 = v54[v52 - 1].n128_u32[0];
      *(_DWORD *)&v53[v52 * 16 - 16] = v57;
      if (v57 <= 1) {
        *((_OWORD *)v55 - 2) = *((_OWORD *)v56 - 2);
      }
      *(v55 - 8) = *(v56 - 8);
      v54 -= 2;
      v53 -= 32;
    }
    while (&v54[v52] != (__n128 *)v50);
    int v51 = (__n128 *)&v53[32 * v44];
  }
  uint64_t v58 = (char *)a1[1];
  if (v58 != (char *)v7)
  {
    uint64_t v59 = 2 * v44;
    unsigned int v60 = &v18[32 * a5];
    do
    {
      char v61 = (char *)&v5[v59];
      unsigned int v62 = &v60[v59 * 16];
      unsigned int v63 = v5[v59 + 1].n128_u32[0];
      *(_DWORD *)&v60[v59 * 16 + 16] = v63;
      if (v63 <= 1) {
        *(_OWORD *)unsigned int v62 = *(_OWORD *)v61;
      }
      v62[24] = v61[24];
      v5 += 2;
      v60 += 32;
    }
    while (&v5[v59] != (__n128 *)v58);
    char v47 = (__n128 *)&v60[32 * v44];
  }
  uint64_t v64 = *a1;
  *a1 = v51;
  a1[1] = v47;
  a1[2] = (__n128 *)v67;
  if (v64) {
    operator delete(v64);
  }
  return (unint64_t)v45;
}

void sub_107484C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1074858(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_1074878(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a5 + 8;
  if (a1)
  {
    if (!a3)
    {
      while (1)
      {
        unint64_t v18 = sub_EB04C4(a1);
        BOOL v19 = a2 >= v18;
        BOOL result = a2 < v18;
        if (v19) {
          return result;
        }
        uint64_t v21 = (int **)sub_EB0624(a1, a2);
        sub_3EB374(v11, v21, (uint64_t)&__p);
        uint64_t v22 = __p;
        if (__p != v29) {
          break;
        }
        BOOL v23 = *(unsigned char *)(sub_EAD918(a6) + 9) != 0;
        uint64_t v22 = __p;
        if (__p) {
          goto LABEL_21;
        }
LABEL_15:
        ++a2;
        if (v23) {
          return 1;
        }
      }
      BOOL v23 = 1;
      if (!__p) {
        goto LABEL_15;
      }
LABEL_21:
      uint64_t v29 = v22;
      operator delete(v22);
      goto LABEL_15;
    }
    while (1)
    {
      unint64_t v12 = sub_EB04C4(a1);
      unint64_t v13 = sub_EB04C4(a3);
      if (a2 >= v12 || a4 >= v13)
      {
        if (a2 < v12 == a4 < v13) {
          return 0;
        }
      }
      else
      {
        uint64_t v14 = sub_EB0624(a1, a2);
        if (v14 == sub_EB0624(a3, a4)) {
          return 0;
        }
      }
      uint64_t v15 = (int **)sub_EB0624(a1, a2);
      sub_3EB374(v11, v15, (uint64_t)&__p);
      unint64_t v16 = __p;
      if (__p != v29) {
        break;
      }
      BOOL v17 = *(unsigned char *)(sub_EAD918(a6) + 9) != 0;
      unint64_t v16 = __p;
      if (__p) {
        goto LABEL_14;
      }
LABEL_4:
      ++a2;
      if (v17) {
        return 1;
      }
    }
    BOOL v17 = 1;
    if (!__p) {
      goto LABEL_4;
    }
LABEL_14:
    uint64_t v29 = v16;
    operator delete(v16);
    goto LABEL_4;
  }
  if (a3)
  {
    while (1)
    {
      unint64_t v24 = sub_EB04C4(a3);
      BOOL v19 = a4 >= v24;
      BOOL result = a4 < v24;
      if (v19) {
        return result;
      }
      unint64_t v25 = (int **)sub_EB0624(0, a2);
      sub_3EB374(v11, v25, (uint64_t)&__p);
      uint64_t v26 = __p;
      if (__p != v29) {
        break;
      }
      BOOL v27 = *(unsigned char *)(sub_EAD918(a6) + 9) != 0;
      uint64_t v26 = __p;
      if (__p) {
        goto LABEL_30;
      }
LABEL_24:
      ++a2;
      if (v27) {
        return 1;
      }
    }
    BOOL v27 = 1;
    if (!__p) {
      goto LABEL_24;
    }
LABEL_30:
    uint64_t v29 = v26;
    operator delete(v26);
    goto LABEL_24;
  }
  return 0;
}

void sub_1074AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1074AC4(void **a1)
{
  unint64_t v2 = (unint64_t)a1[2];
  a1[1] = (void *)((char *)a1[1] + 1);
  uint64_t v4 = (char *)a1[6];
  for (uint64_t i = (char *)a1[7]; v2 < ((i - v4) >> 4) - 1; uint64_t i = (char *)a1[7])
  {
    uint64_t v6 = &v4[16 * v2];
    if (!*a1)
    {
      if (!*(void *)v6) {
        goto LABEL_3;
      }
      BOOL v9 = 0;
      unint64_t v11 = *(void *)&v4[16 * v2 + 8];
      unint64_t v14 = sub_EB04C4(*(void **)v6);
LABEL_2:
      if ((v9 ^ (v11 < v14))) {
        return a1;
      }
      goto LABEL_3;
    }
    unint64_t v7 = a1[1];
    unint64_t v8 = sub_EB04C4(*a1);
    BOOL v9 = (unint64_t)v7 < v8;
    if (*(void *)v6)
    {
      int v10 = &v4[16 * v2];
      unint64_t v13 = *((void *)v10 + 1);
      unint64_t v12 = (unint64_t *)(v10 + 8);
      unint64_t v11 = v13;
      unint64_t v14 = sub_EB04C4(*(void **)v6);
      if (!v9 || v11 >= v14) {
        goto LABEL_2;
      }
      uint64_t v16 = sub_EB0624(*a1, (unint64_t)a1[1]);
      if (v16 != sub_EB0624(*(void **)v6, *v12)) {
        return a1;
      }
    }
    else if ((unint64_t)v7 < v8)
    {
      return a1;
    }
LABEL_3:
    uint64_t v5 = a1[3];
    unint64_t v2 = (unint64_t)a1[2] + 1;
    a1[2] = (void *)v2;
    *(_OWORD *)a1 = *(_OWORD *)&v5[2 * v2];
    uint64_t v4 = (char *)a1[6];
  }
  return a1;
}

void sub_1074BE0()
{
}

void *sub_1074BF4()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_243F710;
  return result;
}

void sub_1074C2C(uint64_t a1, void *a2)
{
  *a2 = off_243F710;
}

BOOL sub_1074C54(uint64_t a1, uint64_t a2)
{
  return sub_35873C(a2);
}

uint64_t sub_1074C5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl7routing11PathClipperINS0_11DrivingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24Traf"
                     "ficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl7routing11PathClipperINS0_11DrivingModeEE19has_walking_closureERKNS0_4PathIS2_EER"
                                "KNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl7routing11PathClipperINS0_11DrivingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl7routing11PathClipperINS0_11DrivingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data19DirectedRoadSegmentEE_clESF_EUlRKNSC_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1074CCC()
{
}

BOOL sub_1074CD8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a5 + 8;
  if (a1)
  {
    if (!a3)
    {
      while (1)
      {
        unint64_t v18 = sub_EB2E84(a1);
        BOOL v19 = a2 >= v18;
        BOOL result = a2 < v18;
        if (v19) {
          return result;
        }
        uint64_t v21 = (unsigned int *)sub_EB2F38(a1, a2);
        sub_3EBE9C(v11, v21, (uint64_t)&__p);
        uint64_t v22 = __p;
        if (__p != v29) {
          break;
        }
        BOOL v23 = *(unsigned char *)(sub_EB22AC(a6) + 9) != 0;
        uint64_t v22 = __p;
        if (__p) {
          goto LABEL_21;
        }
LABEL_15:
        ++a2;
        if (v23) {
          return 1;
        }
      }
      BOOL v23 = 1;
      if (!__p) {
        goto LABEL_15;
      }
LABEL_21:
      uint64_t v29 = v22;
      operator delete(v22);
      goto LABEL_15;
    }
    while (1)
    {
      unint64_t v12 = sub_EB2E84(a1);
      unint64_t v13 = sub_EB2E84(a3);
      if (a2 >= v12 || a4 >= v13)
      {
        if (a2 < v12 == a4 < v13) {
          return 0;
        }
      }
      else
      {
        uint64_t v14 = sub_EB2F38(a1, a2);
        if (v14 == sub_EB2F38(a3, a4)) {
          return 0;
        }
      }
      uint64_t v15 = (unsigned int *)sub_EB2F38(a1, a2);
      sub_3EBE9C(v11, v15, (uint64_t)&__p);
      uint64_t v16 = __p;
      if (__p != v29) {
        break;
      }
      BOOL v17 = *(unsigned char *)(sub_EB22AC(a6) + 9) != 0;
      uint64_t v16 = __p;
      if (__p) {
        goto LABEL_14;
      }
LABEL_4:
      ++a2;
      if (v17) {
        return 1;
      }
    }
    BOOL v17 = 1;
    if (!__p) {
      goto LABEL_4;
    }
LABEL_14:
    uint64_t v29 = v16;
    operator delete(v16);
    goto LABEL_4;
  }
  if (a3)
  {
    while (1)
    {
      unint64_t v24 = sub_EB2E84(a3);
      BOOL v19 = a4 >= v24;
      BOOL result = a4 < v24;
      if (v19) {
        return result;
      }
      unint64_t v25 = (unsigned int *)sub_EB2F38(0, a2);
      sub_3EBE9C(v11, v25, (uint64_t)&__p);
      uint64_t v26 = __p;
      if (__p != v29) {
        break;
      }
      BOOL v27 = *(unsigned char *)(sub_EB22AC(a6) + 9) != 0;
      uint64_t v26 = __p;
      if (__p) {
        goto LABEL_30;
      }
LABEL_24:
      ++a2;
      if (v27) {
        return 1;
      }
    }
    BOOL v27 = 1;
    if (!__p) {
      goto LABEL_24;
    }
LABEL_30:
    uint64_t v29 = v26;
    operator delete(v26);
    goto LABEL_24;
  }
  return 0;
}

void sub_1074F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1074F24(uint64_t *a1)
{
  unint64_t v2 = a1[2];
  ++a1[1];
  uint64_t v4 = a1[6];
  for (uint64_t i = a1[7]; v2 < ((i - v4) >> 4) - 1; uint64_t i = a1[7])
  {
    uint64_t v6 = (uint64_t *)(v4 + 16 * v2);
    if (!*a1)
    {
      if (!*v6) {
        goto LABEL_3;
      }
      BOOL v9 = 0;
      unint64_t v11 = *(void *)(v4 + 16 * v2 + 8);
      unint64_t v14 = sub_EB2E84(*v6);
LABEL_2:
      if ((v9 ^ (v11 < v14))) {
        return a1;
      }
      goto LABEL_3;
    }
    unint64_t v7 = a1[1];
    unint64_t v8 = sub_EB2E84(*a1);
    BOOL v9 = v7 < v8;
    if (*v6)
    {
      unint64_t v10 = v4 + 16 * v2;
      unint64_t v13 = *(void *)(v10 + 8);
      unint64_t v12 = (unint64_t *)(v10 + 8);
      unint64_t v11 = v13;
      unint64_t v14 = sub_EB2E84(*v6);
      if (!v9 || v11 >= v14) {
        goto LABEL_2;
      }
      uint64_t v16 = sub_EB2F38(*a1, a1[1]);
      if (v16 != sub_EB2F38(*v6, *v12)) {
        return a1;
      }
    }
    else if (v7 < v8)
    {
      return a1;
    }
LABEL_3:
    uint64_t v5 = a1[3];
    unint64_t v2 = a1[2] + 1;
    a1[2] = v2;
    *(_OWORD *)a1 = *(_OWORD *)(v5 + 16 * v2);
    uint64_t v4 = a1[6];
  }
  return a1;
}

BOOL sub_107503C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a2[6];
  uint64_t v5 = a2[7];
  if (v2 == v3 || v4 == v5) {
    return (v2 == v3) == (v4 == v5);
  }
  if (a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v10 = *a1;
  if (*a1)
  {
    unint64_t v11 = a1[1];
    BOOL v12 = v11 < sub_EB2E84(v10);
    uint64_t v13 = *a2;
    if (*a2) {
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v12 = 0;
    uint64_t v13 = *a2;
    if (*a2)
    {
LABEL_10:
      unint64_t v14 = a2[1];
      unint64_t v15 = sub_EB2E84(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_EB2F38(*a1, a1[1]);
        return v18 == sub_EB2F38(*a2, a2[1]);
      }
      return v12 ^ v16 ^ 1;
    }
  }
  BOOL v16 = 0;
  return v12 ^ v16 ^ 1;
}

void sub_107514C()
{
}

void *sub_1075160()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_243F790;
  return result;
}

void sub_1075198(uint64_t a1, void *a2)
{
  *a2 = off_243F790;
}

BOOL sub_10751C0(uint64_t a1, uint64_t a2)
{
  return sub_35873C(a2);
}

uint64_t sub_10751C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN3msl7routing11PathClipperINS0_11WalkingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24Traf"
                     "ficIncidentsAccessorIS2_EEENKUlRKNS_4data24DirectedSidedWalkSegmentEE_clESF_EUlRKNSC_8IncidentEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3msl7routing11PathClipperINS0_11WalkingModeEE19has_walking_closureERKNS0_4PathIS2_EER"
                                "KNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data24DirectedSidedWalkSegmentEE_clESF_E"
                                "UlRKNSC_8IncidentEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3msl7routing11PathClipperINS0_11WalkingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data24DirectedSidedWalkSegmentEE_clESF_EUlRKNSC_8IncidentEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3msl7routing11PathClipperINS0_11WalkingModeEE19has_walking_closureERKNS0_4PathIS2_EERKNS0_24TrafficIncidentsAccessorIS2_EEENKUlRKNS_4data24DirectedSidedWalkSegmentEE_clESF_EUlRKNSC_8IncidentEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1075238()
{
}

void sub_1075244()
{
  unk_25FDC87 = 16641;
  word_25FDC70 = 65;
  byte_25FDC9F = 1;
  byte_25FDC89 = 0;
  byte_25FDCB7 = 8;
  strcpy((char *)&qword_25FDCA0, "any_mode");
  byte_25FDCCF = 7;
  strcpy((char *)&dword_25FDCB8, "cycling");
  byte_25FDCE7 = 7;
  strcpy((char *)&dword_25FDCD0, "driving");
  byte_25FDCFF = 7;
  strcpy((char *)&dword_25FDCE8, "walking");
}

uint64_t sub_10752F0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 4160) = sub_3750CC(a2);
  *(void *)(a1 + 4168) = sub_375E28(a2);
  return a1;
}

void sub_1075338(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)v1[517];
  if (v3)
  {
    v1[518] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t sub_1075360(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v123 = 0;
  unint64_t v124 = 0;
  unint64_t v125 = 0;
  double v120 = 0;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  unint64_t v3 = (void *)sub_5231C(a2);
  uint64_t v104 = -1171354717 * ((v3[1] - *v3) >> 3);
  if (!v104)
  {
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  unint64_t v4 = 0;
  int v5 = 1;
  uint64_t v107 = v2;
  do
  {
    uint64_t v6 = (uint64_t *)sub_5231C(v2);
    uint64_t v7 = *v6;
    int v8 = *(_DWORD *)(*v6 + 88 * v4 + 80) & 0x3FFF;
    if ((v4 || !v8) && (v8 || (*(_DWORD *)(*v6 + 88 * v4 + 80) & 0x3FFF0000) == 0)) {
      goto LABEL_4;
    }
    LODWORD(v10) = v4;
    do
    {
      unsigned int v11 = v10;
      BOOL v12 = (void *)sub_5231C(v2);
      unint64_t v10 = (v10 + 1);
    }
    while (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12[1] - *v12) >> 3) > v10
         && (*(_WORD *)(*(void *)sub_5231C(v2) + 88 * v10 + 80) & 0x3FFF) != 0);
    unint64_t v124 = v123;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v110 = v11 + 1;
    unsigned int v105 = v11;
    int v106 = v5;
    if (v4)
    {
      int v13 = 1;
    }
    else
    {
      uint64_t v30 = *(void *)(v7 + 32);
      uint64_t v31 = sub_2DB8E0(*(void *)(a1 + 4168), v30, 1);
      if (!v31) {
        goto LABEL_56;
      }
      unint64_t v32 = &v31[-*(int *)v31];
      if (*(unsigned __int16 *)v32 < 5u) {
        goto LABEL_56;
      }
      if (!*((_WORD *)v32 + 2)) {
        goto LABEL_56;
      }
      uint64_t v33 = &v31[*((unsigned __int16 *)v32 + 2) + *(unsigned int *)&v31[*((unsigned __int16 *)v32 + 2)]];
      if (*(_DWORD *)v33 <= WORD2(v30)) {
        goto LABEL_56;
      }
      uint64_t v34 = &v33[4 * WORD2(v30) + 4 + *(unsigned int *)&v33[4 * WORD2(v30) + 4]];
      uint64_t v35 = &v34[-*(int *)v34];
      if (*(unsigned __int16 *)v35 < 0x23u) {
        goto LABEL_56;
      }
      uint64_t v36 = *((unsigned __int16 *)v35 + 17);
      if (!v36) {
        goto LABEL_56;
      }
      char v37 = &v34[v36 + *(unsigned int *)&v34[v36]];
      uint64_t v38 = &v37[-*(int *)v37];
      unsigned int v39 = *(unsigned __int16 *)v38;
      if ((v30 & 0xFF000000000000) != 0)
      {
        if (v39 < 7) {
          goto LABEL_56;
        }
        unsigned int v40 = *((unsigned __int16 *)v38 + 3);
        if (!v40) {
          goto LABEL_56;
        }
      }
      else
      {
        if (v39 < 5) {
          goto LABEL_56;
        }
        unsigned int v40 = *((unsigned __int16 *)v38 + 2);
        if (!v40) {
          goto LABEL_56;
        }
      }
      unint64_t v41 = &v37[v40 + *(unsigned int *)&v37[v40]];
      unsigned int v42 = &v41[-*(int *)v41];
      if (*(unsigned __int16 *)v42 < 9u) {
        goto LABEL_56;
      }
      uint64_t v43 = *((unsigned __int16 *)v42 + 4);
      if (!v43) {
        goto LABEL_56;
      }
      uint64_t v44 = &v41[v43];
      uint64_t v45 = *(unsigned int *)v44;
      int v13 = *(unsigned __int16 *)&v44[v45];
      if (!*(_WORD *)&v44[v45]) {
        goto LABEL_56;
      }
    }
    int v14 = 0;
    unint64_t v15 = v124;
    do
    {
      uint64_t v16 = *((void *)&v117 + 1);
      BOOL v17 = v123;
      if ((void)v118 == *((void *)&v117 + 1)) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = (((void)v118 - *((void *)&v117 + 1)) << 7) - 1;
      }
      uint64_t v19 = *((void *)&v119 + 1);
      unint64_t v20 = *((void *)&v119 + 1) + v119;
      if (v18 == *((void *)&v119 + 1) + (void)v119)
      {
        sub_1076CC8((uint64_t)&v117);
        uint64_t v19 = *((void *)&v119 + 1);
        uint64_t v16 = *((void *)&v117 + 1);
        unint64_t v20 = v119 + *((void *)&v119 + 1);
        uint64_t v21 = v124;
      }
      else
      {
        uint64_t v21 = v15;
      }
      *(_DWORD *)(*(void *)(v16 + ((v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF)) = (unint64_t)(v15 - v17) >> 4;
      *((void *)&v119 + 1) = v19 + 1;
      if (v21 < v125)
      {
        *(void *)uint64_t v21 = v4;
        *((_WORD *)v21 + 4) = v14;
        unint64_t v15 = v21 + 16;
        *((_DWORD *)v21 + 3) = -1;
      }
      else
      {
        uint64_t v22 = v123;
        uint64_t v23 = (v21 - v123) >> 4;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v25 = v125 - v123;
        if ((v125 - v123) >> 3 > v24) {
          unint64_t v24 = v25 >> 3;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 >> 60) {
            sub_188D718();
          }
          BOOL v27 = (char *)operator new(16 * v26);
        }
        else
        {
          BOOL v27 = 0;
        }
        long long v28 = &v27[16 * v23];
        *(void *)long long v28 = v4;
        *((_WORD *)v28 + 4) = v14;
        *((_DWORD *)v28 + 3) = -1;
        uint64_t v29 = v28;
        if (v21 != v22)
        {
          do
          {
            *((_OWORD *)v29 - 1) = *((_OWORD *)v21 - 1);
            v29 -= 16;
            v21 -= 16;
          }
          while (v21 != v22);
          uint64_t v21 = v123;
        }
        unint64_t v15 = v28 + 16;
        v123 = v29;
        unint64_t v124 = v28 + 16;
        unint64_t v125 = &v27[16 * v26];
        if (v21) {
          operator delete(v21);
        }
      }
      unint64_t v124 = v15;
      ++v14;
    }
    while (v14 != v13);
LABEL_56:
    uint64_t v46 = *((void *)&v119 + 1);
    unint64_t v109 = v4;
    if (*((void *)&v119 + 1))
    {
      while (1)
      {
        uint64_t v112 = *(unsigned int *)(*(void *)(*((void *)&v117 + 1)
                                           + (((unint64_t)(v119 + v46 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                               + 4 * ((v119 + v46 - 1) & 0x3FF));
        if ((void)v118 == *((void *)&v117 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = (((void)v118 - *((void *)&v117 + 1)) << 7) - 1;
        }
        *((void *)&v119 + 1) = v46 - 1;
        if ((unint64_t)(v60 - (v46 + v119) + 1) >= 0x800)
        {
          operator delete(*(void **)(v118 - 8));
          *(void *)&long long v118 = v118 - 8;
        }
        char v61 = &v123[16 * v112];
        uint64_t v62 = *(void *)v61;
        uint64_t v63 = *((unsigned __int16 *)v61 + 4);
        if (*(void *)v61 == v110) {
          break;
        }
        uint64_t v64 = *(void *)sub_5231C(v2);
        uint64_t v65 = v64 + 88 * v62;
        int v67 = *(_DWORD *)(v65 + 80);
        uint64_t v66 = (unsigned int *)(v65 + 80);
        __n128 v68 = (unsigned __int8 *)(v66 + 1);
        sub_ED75C0(a1, (v66[1] & 1 | (unint64_t)(4 * v63))+ ((((*((void *)v66 - 6) >> 16) & 0xFFFF0000 | (*((void *)v66 - 6) << 32) | (2* ((*((void *)v66 - 6) & 0xFF000000000000) == 0)))+ 4 * (unsigned __int16)v67) & 0xFFFFFFFFFFFF0003), 0, &v120, 0);
        unsigned __int8 v70 = v120;
        unsigned int v69 = v121;
        if (v120 != v121)
        {
          uint64_t v71 = (void *)(v64 + 88 * v62 + 72);
          uint64_t v72 = v62 + 1;
          int v111 = v66;
          do
          {
            if (((((*((void *)v70 + 9) >> 16) & 0xFFFF0000 | (*((void *)v70 + 9) << 32) | (2
                                                                                                * ((*((void *)v70 + 9) & 0xFF000000000000) == 0)))
                 + (((unint64_t)*((unsigned int *)v70 + 20) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFF0003 | ((unint64_t)*((unsigned __int8 *)v70 + 84) >> 1) & 1) == ((((*v71 >> 16) & 0xFFFF0000 | (*v71 << 32) | (2 * ((*v71 & 0xFF000000000000) == 0))) + (((unint64_t)*v66 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFF0003 | ((unint64_t)*v68 >> 1) & 1))
            {
              uint64_t v74 = *((void *)&v117 + 1);
              unint64_t v76 = v123;
              uint64_t v75 = v124;
              if ((void)v118 == *((void *)&v117 + 1)) {
                uint64_t v77 = 0;
              }
              else {
                uint64_t v77 = (((void)v118 - *((void *)&v117 + 1)) << 7) - 1;
              }
              uint64_t v78 = *((void *)&v119 + 1);
              unint64_t v79 = *((void *)&v119 + 1) + v119;
              if (v77 == *((void *)&v119 + 1) + (void)v119)
              {
                sub_1076CC8((uint64_t)&v117);
                uint64_t v78 = *((void *)&v119 + 1);
                uint64_t v74 = *((void *)&v117 + 1);
                unint64_t v79 = v119 + *((void *)&v119 + 1);
              }
              unint64_t v80 = v124;
              *(_DWORD *)(*(void *)(v74 + ((v79 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v79 & 0x3FF)) = (unint64_t)(v75 - v76) >> 4;
              *((void *)&v119 + 1) = v78 + 1;
              __int16 v81 = v70[41] & 0x3FFF;
              if (v80 < v125)
              {
                *(void *)unint64_t v80 = v72;
                *((_WORD *)v80 + 4) = v81;
                unint64_t v73 = v80 + 16;
                *((_DWORD *)v80 + 3) = v112;
              }
              else
              {
                uint64_t v82 = v68;
                uint64_t v83 = v69;
                unint64_t v84 = v71;
                uint64_t v85 = v72;
                uint64_t v86 = v123;
                uint64_t v87 = (v80 - v123) >> 4;
                unint64_t v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 60) {
                  sub_2E00();
                }
                uint64_t v89 = v125 - v123;
                if ((v125 - v123) >> 3 > v88) {
                  unint64_t v88 = v89 >> 3;
                }
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v90 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  if (v90 >> 60) {
                    sub_188D718();
                  }
                  uint64_t v91 = (char *)operator new(16 * v90);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                uint64_t v92 = &v91[16 * v87];
                uint64_t v72 = v85;
                *(void *)uint64_t v92 = v85;
                *((_WORD *)v92 + 4) = v81;
                *((_DWORD *)v92 + 3) = v112;
                uint64_t v93 = v92;
                uint64_t v71 = v84;
                if (v80 != v86)
                {
                  do
                  {
                    *((_OWORD *)v93 - 1) = *((_OWORD *)v80 - 1);
                    v93 -= 16;
                    v80 -= 16;
                  }
                  while (v80 != v86);
                  unint64_t v80 = v123;
                }
                unsigned int v69 = v83;
                uint64_t v94 = &v91[16 * v90];
                unint64_t v73 = v92 + 16;
                v123 = v93;
                unint64_t v124 = v92 + 16;
                unint64_t v125 = v94;
                __n128 v68 = v82;
                if (v80) {
                  operator delete(v80);
                }
                uint64_t v66 = v111;
              }
              unint64_t v124 = v73;
            }
            v70 += 44;
          }
          while (v70 != v69);
        }
        uint64_t v46 = *((void *)&v119 + 1);
        uint64_t v2 = v107;
        unint64_t v4 = v109;
        if (!*((void *)&v119 + 1)) {
          goto LABEL_57;
        }
      }
      uint64_t v96 = *((unsigned int *)v61 + 3);
      v97 = (void *)sub_5231C(v2);
      if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v97[1] - *v97) >> 3) > v110) {
        *(_WORD *)(*(void *)sub_5231C(v2) + 88 * v110 + 80) = v63;
      }
      while (v96 != 0xFFFFFFFFLL)
      {
        uint64_t v98 = &v123[16 * v96];
        uint64_t v99 = *(void *)v98;
        int v100 = *((unsigned __int16 *)v98 + 4);
        uint64_t v96 = *((unsigned int *)v98 + 3);
        *(_DWORD *)(*(void *)sub_5231C(v2) + 88 * v99 + 80) = v100 | (v63 << 16);
        LODWORD(v63) = v100;
      }
      int v54 = 1;
      char v55 = (void **)*((void *)&v117 + 1);
      unint64_t v56 = (void **)v118;
      *((void *)&v119 + 1) = 0;
      unint64_t v57 = v118 - *((void *)&v117 + 1);
      if ((void)v118 - *((void *)&v117 + 1) >= 0x11uLL)
      {
        do
        {
LABEL_64:
          operator delete(*v55);
          unint64_t v56 = (void **)v118;
          char v55 = (void **)(*((void *)&v117 + 1) + 8);
          *((void *)&v117 + 1) = v55;
          unint64_t v57 = v118 - (void)v55;
        }
        while ((void)v118 - (void)v55 > 0x10uLL);
      }
    }
    else
    {
LABEL_57:
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v115);
        char v47 = sub_188FC78(v115, (uint64_t)"could not verify virtual sub path ", 34);
        uint64_t v48 = (void *)sub_5231C(v2);
        uint64_t v49 = sub_EADEA0(v48, v4);
        char v50 = sub_3D1870(v47, (((*(void *)(v49 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v49 + 32) << 32) | (2* ((*(void *)(v49 + 32) & 0xFF000000000000) == 0)))+ 4 * (unsigned __int16)*(_DWORD *)(v49 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v49 + 84) & 1);
        int v51 = sub_188FC78(v50, (uint64_t)" and ", 5);
        uint64_t v52 = (void *)sub_5231C(v2);
        uint64_t v53 = sub_EADEA0(v52, v105);
        sub_3D1870(v51, (((*(void *)(v53 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v53 + 72) << 32) | (2* ((*(void *)(v53 + 72) & 0xFF000000000000) == 0)))+ (((unint64_t)*(unsigned int *)(v53 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v53 + 84) >> 1) & 1);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 2u);
        if (v114 < 0) {
          operator delete(__p);
        }
        v115[0] = v103;
        *(void *)((char *)v115 + *(void *)(v103 - 24)) = v102;
        if (v116 < 0) {
          operator delete((void *)v115[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      int v54 = 0;
      char v55 = (void **)*((void *)&v117 + 1);
      unint64_t v56 = (void **)v118;
      *((void *)&v119 + 1) = 0;
      unint64_t v57 = v118 - *((void *)&v117 + 1);
      if ((void)v118 - *((void *)&v117 + 1) >= 0x11uLL) {
        goto LABEL_64;
      }
    }
    unint64_t v58 = v57 >> 3;
    if (v58 == 1)
    {
      uint64_t v59 = 512;
    }
    else
    {
      if (v58 != 2) {
        goto LABEL_105;
      }
      uint64_t v59 = 1024;
    }
    *(void *)&long long v119 = v59;
LABEL_105:
    if (v55 != v56)
    {
      do
      {
        uint64_t v95 = *v55++;
        operator delete(v95);
      }
      while (v55 != v56);
      if ((void)v118 != *((void *)&v117 + 1)) {
        *(void *)&long long v118 = v118 + ((*((void *)&v117 + 1) - v118 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if ((void)v117) {
      operator delete((void *)v117);
    }
    int v5 = v106 & v54;
LABEL_4:
    ++v4;
  }
  while (v4 != v104);
  if (v120)
  {
    uint64_t v121 = v120;
    operator delete(v120);
  }
  if (v123)
  {
    unint64_t v124 = v123;
    operator delete(v123);
  }
  return v5 & 1;
}

void sub_1075E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(void *)(v27 - 136) = v29;
    operator delete(v29);
    uint64_t v30 = *(void **)(v27 - 120);
    if (!v30) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v30 = *(void **)(v27 - 120);
    if (!v30) {
      goto LABEL_3;
    }
  }
  *(void *)(v27 - 112) = v30;
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1075F74(uint64_t a1, void *a2)
{
  *(void *)(a1 + 4160) = sub_3750CC(a2);
  *(void *)(a1 + 4168) = sub_375E28(a2);
  return a1;
}

void sub_1075FBC(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)v1[517];
  if (v3)
  {
    v1[518] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t sub_1075FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v123 = 0;
  unint64_t v124 = 0;
  unint64_t v125 = 0;
  double v120 = 0;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  unint64_t v3 = (void *)sub_5231C(a2);
  uint64_t v104 = -1431655765 * ((v3[1] - *v3) >> 5);
  if (!v104)
  {
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  unint64_t v4 = 0;
  int v5 = 1;
  uint64_t v107 = v2;
  do
  {
    uint64_t v6 = (uint64_t *)sub_5231C(v2);
    uint64_t v7 = *v6;
    int v8 = *(_DWORD *)(*v6 + 96 * v4 + 80) & 0x3FFF;
    if ((v4 || !v8) && (v8 || (*(_DWORD *)(*v6 + 96 * v4 + 80) & 0x3FFF0000) == 0)) {
      goto LABEL_4;
    }
    LODWORD(v10) = v4;
    do
    {
      unsigned int v11 = v10;
      BOOL v12 = (void *)sub_5231C(v2);
      unint64_t v10 = (v10 + 1);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 5) > v10
         && (*(_WORD *)(*(void *)sub_5231C(v2) + 96 * v10 + 80) & 0x3FFF) != 0);
    unint64_t v124 = v123;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v110 = v11 + 1;
    unsigned int v105 = v11;
    int v106 = v5;
    if (v4)
    {
      int v13 = 1;
    }
    else
    {
      uint64_t v30 = *(void *)(v7 + 32);
      uint64_t v31 = sub_2DB8E0(*(void *)(a1 + 4168), v30, 1);
      if (!v31) {
        goto LABEL_56;
      }
      unint64_t v32 = &v31[-*(int *)v31];
      if (*(unsigned __int16 *)v32 < 5u) {
        goto LABEL_56;
      }
      if (!*((_WORD *)v32 + 2)) {
        goto LABEL_56;
      }
      uint64_t v33 = &v31[*((unsigned __int16 *)v32 + 2) + *(unsigned int *)&v31[*((unsigned __int16 *)v32 + 2)]];
      if (*(_DWORD *)v33 <= WORD2(v30)) {
        goto LABEL_56;
      }
      uint64_t v34 = &v33[4 * WORD2(v30) + 4 + *(unsigned int *)&v33[4 * WORD2(v30) + 4]];
      uint64_t v35 = &v34[-*(int *)v34];
      if (*(unsigned __int16 *)v35 < 0x25u) {
        goto LABEL_56;
      }
      uint64_t v36 = *((unsigned __int16 *)v35 + 18);
      if (!v36) {
        goto LABEL_56;
      }
      char v37 = &v34[v36 + *(unsigned int *)&v34[v36]];
      uint64_t v38 = &v37[-*(int *)v37];
      unsigned int v39 = *(unsigned __int16 *)v38;
      if ((v30 & 0xFF000000000000) != 0)
      {
        if (v39 < 7) {
          goto LABEL_56;
        }
        unsigned int v40 = *((unsigned __int16 *)v38 + 3);
        if (!v40) {
          goto LABEL_56;
        }
      }
      else
      {
        if (v39 < 5) {
          goto LABEL_56;
        }
        unsigned int v40 = *((unsigned __int16 *)v38 + 2);
        if (!v40) {
          goto LABEL_56;
        }
      }
      unint64_t v41 = &v37[v40 + *(unsigned int *)&v37[v40]];
      unsigned int v42 = &v41[-*(int *)v41];
      if (*(unsigned __int16 *)v42 < 9u) {
        goto LABEL_56;
      }
      uint64_t v43 = *((unsigned __int16 *)v42 + 4);
      if (!v43) {
        goto LABEL_56;
      }
      uint64_t v44 = &v41[v43];
      uint64_t v45 = *(unsigned int *)v44;
      int v13 = *(unsigned __int16 *)&v44[v45];
      if (!*(_WORD *)&v44[v45]) {
        goto LABEL_56;
      }
    }
    int v14 = 0;
    unint64_t v15 = v124;
    do
    {
      uint64_t v16 = *((void *)&v117 + 1);
      BOOL v17 = v123;
      if ((void)v118 == *((void *)&v117 + 1)) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = (((void)v118 - *((void *)&v117 + 1)) << 7) - 1;
      }
      uint64_t v19 = *((void *)&v119 + 1);
      unint64_t v20 = *((void *)&v119 + 1) + v119;
      if (v18 == *((void *)&v119 + 1) + (void)v119)
      {
        sub_1076CC8((uint64_t)&v117);
        uint64_t v19 = *((void *)&v119 + 1);
        uint64_t v16 = *((void *)&v117 + 1);
        unint64_t v20 = v119 + *((void *)&v119 + 1);
        uint64_t v21 = v124;
      }
      else
      {
        uint64_t v21 = v15;
      }
      *(_DWORD *)(*(void *)(v16 + ((v20 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v20 & 0x3FF)) = (unint64_t)(v15 - v17) >> 4;
      *((void *)&v119 + 1) = v19 + 1;
      if (v21 < v125)
      {
        *(void *)uint64_t v21 = v4;
        *((_WORD *)v21 + 4) = v14;
        unint64_t v15 = v21 + 16;
        *((_DWORD *)v21 + 3) = -1;
      }
      else
      {
        uint64_t v22 = v123;
        uint64_t v23 = (v21 - v123) >> 4;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v25 = v125 - v123;
        if ((v125 - v123) >> 3 > v24) {
          unint64_t v24 = v25 >> 3;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 >> 60) {
            sub_188D718();
          }
          uint64_t v27 = (char *)operator new(16 * v26);
        }
        else
        {
          uint64_t v27 = 0;
        }
        long long v28 = &v27[16 * v23];
        *(void *)long long v28 = v4;
        *((_WORD *)v28 + 4) = v14;
        *((_DWORD *)v28 + 3) = -1;
        uint64_t v29 = v28;
        if (v21 != v22)
        {
          do
          {
            *((_OWORD *)v29 - 1) = *((_OWORD *)v21 - 1);
            v29 -= 16;
            v21 -= 16;
          }
          while (v21 != v22);
          uint64_t v21 = v123;
        }
        unint64_t v15 = v28 + 16;
        v123 = v29;
        unint64_t v124 = v28 + 16;
        unint64_t v125 = &v27[16 * v26];
        if (v21) {
          operator delete(v21);
        }
      }
      unint64_t v124 = v15;
      ++v14;
    }
    while (v14 != v13);
LABEL_56:
    uint64_t v46 = *((void *)&v119 + 1);
    unint64_t v109 = v4;
    if (*((void *)&v119 + 1))
    {
      while (1)
      {
        uint64_t v112 = *(unsigned int *)(*(void *)(*((void *)&v117 + 1)
                                           + (((unint64_t)(v119 + v46 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                               + 4 * ((v119 + v46 - 1) & 0x3FF));
        if ((void)v118 == *((void *)&v117 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = (((void)v118 - *((void *)&v117 + 1)) << 7) - 1;
        }
        *((void *)&v119 + 1) = v46 - 1;
        if ((unint64_t)(v60 - (v46 + v119) + 1) >= 0x800)
        {
          operator delete(*(void **)(v118 - 8));
          *(void *)&long long v118 = v118 - 8;
        }
        char v61 = &v123[16 * v112];
        uint64_t v62 = *(void *)v61;
        uint64_t v63 = *((unsigned __int16 *)v61 + 4);
        if (*(void *)v61 == v110) {
          break;
        }
        uint64_t v64 = *(void *)sub_5231C(v2);
        uint64_t v65 = v64 + 96 * v62;
        int v67 = *(_DWORD *)(v65 + 80);
        uint64_t v66 = (unsigned int *)(v65 + 80);
        __n128 v68 = (unsigned __int8 *)(v66 + 2);
        sub_ED8808(a1, (v66[2] & 1 | (unint64_t)(4 * v63))+ ((((*((void *)v66 - 6) >> 16) & 0xFFFF0000 | (*((void *)v66 - 6) << 32) | (2* ((*((void *)v66 - 6) & 0xFF000000000000) == 0)))+ 4 * (unsigned __int16)v67) & 0xFFFFFFFFFFFF0003), 0, &v120, 0);
        unsigned __int8 v70 = v120;
        unsigned int v69 = v121;
        if (v120 != v121)
        {
          uint64_t v71 = (void *)(v64 + 96 * v62 + 72);
          uint64_t v72 = v62 + 1;
          int v111 = v66;
          do
          {
            if (((((*((void *)v70 + 9) >> 16) & 0xFFFF0000 | (*((void *)v70 + 9) << 32) | (2
                                                                                                * ((*((void *)v70 + 9) & 0xFF000000000000) == 0)))
                 + (((unint64_t)*((unsigned int *)v70 + 20) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFF0003 | ((unint64_t)*((unsigned __int8 *)v70 + 88) >> 1) & 1) == ((((*v71 >> 16) & 0xFFFF0000 | (*v71 << 32) | (2 * ((*v71 & 0xFF000000000000) == 0))) + (((unint64_t)*v66 >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFF0003 | ((unint64_t)*v68 >> 1) & 1))
            {
              uint64_t v74 = *((void *)&v117 + 1);
              unint64_t v76 = v123;
              uint64_t v75 = v124;
              if ((void)v118 == *((void *)&v117 + 1)) {
                uint64_t v77 = 0;
              }
              else {
                uint64_t v77 = (((void)v118 - *((void *)&v117 + 1)) << 7) - 1;
              }
              uint64_t v78 = *((void *)&v119 + 1);
              unint64_t v79 = *((void *)&v119 + 1) + v119;
              if (v77 == *((void *)&v119 + 1) + (void)v119)
              {
                sub_1076CC8((uint64_t)&v117);
                uint64_t v78 = *((void *)&v119 + 1);
                uint64_t v74 = *((void *)&v117 + 1);
                unint64_t v79 = v119 + *((void *)&v119 + 1);
              }
              unint64_t v80 = v124;
              *(_DWORD *)(*(void *)(v74 + ((v79 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v79 & 0x3FF)) = (unint64_t)(v75 - v76) >> 4;
              *((void *)&v119 + 1) = v78 + 1;
              __int16 v81 = v70[41] & 0x3FFF;
              if (v80 < v125)
              {
                *(void *)unint64_t v80 = v72;
                *((_WORD *)v80 + 4) = v81;
                unint64_t v73 = v80 + 16;
                *((_DWORD *)v80 + 3) = v112;
              }
              else
              {
                uint64_t v82 = v68;
                uint64_t v83 = v69;
                unint64_t v84 = v71;
                uint64_t v85 = v72;
                uint64_t v86 = v123;
                uint64_t v87 = (v80 - v123) >> 4;
                unint64_t v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 60) {
                  sub_2E00();
                }
                uint64_t v89 = v125 - v123;
                if ((v125 - v123) >> 3 > v88) {
                  unint64_t v88 = v89 >> 3;
                }
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v90 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  if (v90 >> 60) {
                    sub_188D718();
                  }
                  uint64_t v91 = (char *)operator new(16 * v90);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                uint64_t v92 = &v91[16 * v87];
                uint64_t v72 = v85;
                *(void *)uint64_t v92 = v85;
                *((_WORD *)v92 + 4) = v81;
                *((_DWORD *)v92 + 3) = v112;
                uint64_t v93 = v92;
                uint64_t v71 = v84;
                if (v80 != v86)
                {
                  do
                  {
                    *((_OWORD *)v93 - 1) = *((_OWORD *)v80 - 1);
                    v93 -= 16;
                    v80 -= 16;
                  }
                  while (v80 != v86);
                  unint64_t v80 = v123;
                }
                unsigned int v69 = v83;
                uint64_t v94 = &v91[16 * v90];
                unint64_t v73 = v92 + 16;
                v123 = v93;
                unint64_t v124 = v92 + 16;
                unint64_t v125 = v94;
                __n128 v68 = v82;
                if (v80) {
                  operator delete(v80);
                }
                uint64_t v66 = v111;
              }
              unint64_t v124 = v73;
            }
            v70 += 48;
          }
          while (v70 != v69);
        }
        uint64_t v46 = *((void *)&v119 + 1);
        uint64_t v2 = v107;
        unint64_t v4 = v109;
        if (!*((void *)&v119 + 1)) {
          goto LABEL_57;
        }
      }
      uint64_t v96 = *((unsigned int *)v61 + 3);
      v97 = (void *)sub_5231C(v2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97[1] - *v97) >> 5) > v110) {
        *(_WORD *)(*(void *)sub_5231C(v2) + 96 * v110 + 80) = v63;
      }
      while (v96 != 0xFFFFFFFFLL)
      {
        uint64_t v98 = &v123[16 * v96];
        uint64_t v99 = *(void *)v98;
        int v100 = *((unsigned __int16 *)v98 + 4);
        uint64_t v96 = *((unsigned int *)v98 + 3);
        *(_DWORD *)(*(void *)sub_5231C(v2) + 96 * v99 + 80) = v100 | (v63 << 16);
        LODWORD(v63) = v100;
      }
      int v54 = 1;
      char v55 = (void **)*((void *)&v117 + 1);
      unint64_t v56 = (void **)v118;
      *((void *)&v119 + 1) = 0;
      unint64_t v57 = v118 - *((void *)&v117 + 1);
      if ((void)v118 - *((void *)&v117 + 1) >= 0x11uLL)
      {
        do
        {
LABEL_64:
          operator delete(*v55);
          unint64_t v56 = (void **)v118;
          char v55 = (void **)(*((void *)&v117 + 1) + 8);
          *((void *)&v117 + 1) = v55;
          unint64_t v57 = v118 - (void)v55;
        }
        while ((void)v118 - (void)v55 > 0x10uLL);
      }
    }
    else
    {
LABEL_57:
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v115);
        char v47 = sub_188FC78(v115, (uint64_t)"could not verify virtual sub path ", 34);
        uint64_t v48 = (void *)sub_5231C(v2);
        uint64_t v49 = sub_EB0278(v48, v4);
        char v50 = sub_3D1870(v47, (((*(void *)(v49 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v49 + 32) << 32) | (2* ((*(void *)(v49 + 32) & 0xFF000000000000) == 0)))+ 4 * (unsigned __int16)*(_DWORD *)(v49 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v49 + 88) & 1);
        int v51 = sub_188FC78(v50, (uint64_t)" and ", 5);
        uint64_t v52 = (void *)sub_5231C(v2);
        uint64_t v53 = sub_EB0278(v52, v105);
        sub_3D1870(v51, (((*(void *)(v53 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v53 + 72) << 32) | (2* ((*(void *)(v53 + 72) & 0xFF000000000000) == 0)))+ (((unint64_t)*(unsigned int *)(v53 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v53 + 88) >> 1) & 1);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 2u);
        if (v114 < 0) {
          operator delete(__p);
        }
        v115[0] = v103;
        *(void *)((char *)v115 + *(void *)(v103 - 24)) = v102;
        if (v116 < 0) {
          operator delete((void *)v115[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      int v54 = 0;
      char v55 = (void **)*((void *)&v117 + 1);
      unint64_t v56 = (void **)v118;
      *((void *)&v119 + 1) = 0;
      unint64_t v57 = v118 - *((void *)&v117 + 1);
      if ((void)v118 - *((void *)&v117 + 1) >= 0x11uLL) {
        goto LABEL_64;
      }
    }
    unint64_t v58 = v57 >> 3;
    if (v58 == 1)
    {
      uint64_t v59 = 512;
    }
    else
    {
      if (v58 != 2) {
        goto LABEL_105;
      }
      uint64_t v59 = 1024;
    }
    *(void *)&long long v119 = v59;
LABEL_105:
    if (v55 != v56)
    {
      do
      {
        uint64_t v95 = *v55++;
        operator delete(v95);
      }
      while (v55 != v56);
      if ((void)v118 != *((void *)&v117 + 1)) {
        *(void *)&long long v118 = v118 + ((*((void *)&v117 + 1) - v118 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
    }
    if ((void)v117) {
      operator delete((void *)v117);
    }
    int v5 = v106 & v54;
LABEL_4:
    ++v4;
  }
  while (v4 != v104);
  if (v120)
  {
    uint64_t v121 = v120;
    operator delete(v120);
  }
  if (v123)
  {
    unint64_t v124 = v123;
    operator delete(v123);
  }
  return v5 & 1;
}

void sub_1076A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v29 = *(void **)(v27 - 144);
  if (v29)
  {
    *(void *)(v27 - 136) = v29;
    operator delete(v29);
    uint64_t v30 = *(void **)(v27 - 120);
    if (!v30) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v30 = *(void **)(v27 - 120);
    if (!v30) {
      goto LABEL_3;
    }
  }
  *(void *)(v27 - 112) = v30;
  operator delete(v30);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1076BE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)nullsub_1(a2);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = 1;
  if (*v3 != v5)
  {
    do
    {
      uint64_t v6 = v6 & sub_1075FE4(a1, v4);
      v4 += 472;
    }
    while (v4 != v5);
  }
  return v6;
}

uint64_t sub_1076C48(uint64_t a1, void *a2)
{
  *(void *)(a1 + 104) = sub_375E28(a2);
  return a1;
}

void sub_1076C84(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = v3;
    operator delete(v3);
  }
  sub_20AE964(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1076CA8(uint64_t a1, uint64_t a2)
{
  return 1;
}

void sub_1076CC8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    BOOL v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            uint64_t v74 = &v34[8 * v32];
            unsigned int v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unsigned int v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    unint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    BOOL v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            char v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              char v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              uint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *uint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            char v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)char v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0x1000uLL);
  uint64_t v27 = &v25[8 * v21];
  long long v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    unint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      long long v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            unsigned int v69 = (long long *)(v27 + 16);
            unsigned __int8 v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unsigned __int8 v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          long long v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      int v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  int v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1077238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1077254(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1077268(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1077280(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1077298()
{
  unk_25FDD17 = 16641;
  word_25FDD00 = 65;
  byte_25FDD2F = 1;
  byte_25FDD19 = 0;
}

void *sub_10772C0(void *a1, void *a2)
{
  unint64_t v4 = sub_F5A844(a1, a2);
  sub_F170F0(v4 + 7, a2);
  sub_E1B4((uint64_t)(a1 + 13));
  a1[48] = sub_3750CC(a2);
  return a1;
}

void sub_107731C(_Unwind_Exception *a1)
{
  sub_1C02990(v2);
  unint64_t v4 = (void *)v1[10];
  if (v4)
  {
    v1[11] = v4;
    operator delete(v4);
    uint64_t v5 = (void *)v1[4];
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v5 = (void *)v1[4];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[5] = v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_107737C(uint64_t *a1, char **a2, int *a3, int a4, int a5)
{
  uint64_t result = sub_EA80FC(a2);
  if ((result & 1) == 0)
  {
    if (sub_EA8440(a2) == 1)
    {
      uint64_t v11 = sub_40EFE8((uint64_t)a2);
      sub_1077568(a1, v11, a3, a4, a5);
      uint64_t v12 = (const std::string *)sub_40EFE8((uint64_t)a2);
      uint64_t v13 = (std::string *)sub_5231C((uint64_t)a2);
      return (uint64_t)std::string::operator=(v13, v12);
    }
    else
    {
      uint64_t v14 = (long long *)sub_40EFE8((uint64_t)a2);
      sub_443EFC((char *)v21, v14);
      unint64_t v15 = sub_EA8440(a2);
      if (v15 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v15;
      }
      if (v15 >= 2)
      {
        uint64_t v17 = 1;
        do
        {
          uint64_t v18 = sub_EA8060(a2, v17);
          sub_EAEFD8((uint64_t)v21, v18);
          ++v17;
        }
        while (v16 != v17);
      }
      uint64_t v19 = (const std::string *)sub_5231C((uint64_t)a2);
      std::string::operator=(v21, v19);
      sub_1077568(a1, (uint64_t)v21, a3, a4, a5);
      uint64_t v20 = (std::string *)sub_5231C((uint64_t)a2);
      std::string::operator=(v20, v21);
      return sub_405F44((uint64_t)v21);
    }
  }
  return result;
}

void sub_1077528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1077540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1077554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1077568(uint64_t *a1, uint64_t a2, int *a3, int a4, int a5)
{
  int v29 = a4;
  uint64_t v8 = sub_F5A874((uint64_t)a1, (void *)a2, a3, &v29, a5, 0);
  uint64_t v27 = 0;
  long long v28 = 0;
  unint64_t v26 = 0;
  uint64_t v10 = (unsigned char *)*((void *)v8 + 4);
  BOOL v9 = (unsigned char *)*((void *)v8 + 5);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    uint64_t v13 = &v12[16 * (v11 >> 4)];
    unint64_t v26 = v12;
    long long v28 = v13;
    memcpy(v12, v10, v11);
    uint64_t v27 = v13;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[13] - 24) + 104), 0);
  std::stringbuf::str();
  *(uint64_t *)((char *)a1 + *(void *)(a1[13] - 24) + 120) = 9;
  int v14 = *(char *)(a2 + 23);
  if (v14 >= 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = *(void *)a2;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  uint64_t v17 = sub_188FC78(a1 + 15, v15, v16);
  uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a2 + 8);
  }
  BOOL v19 = v18 == 0;
  BOOL v20 = v18 != 0;
  if (v19) {
    uint64_t v21 = "";
  }
  else {
    uint64_t v21 = ", ";
  }
  sub_188FC78(v17, (uint64_t)v21, 2 * v20);
  uint64_t v22 = sub_188FC78(a1 + 15, (uint64_t)"\"total_cost\": \"", 15);
  uint64_t v23 = (void *)std::ostream::operator<<();
  unint64_t v24 = sub_188FC78(v23, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v24, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v22, (uint64_t)"\", ", 3);
  uint64_t v25 = (uint64_t *)sub_5231C(a2);
  sub_10777F4(a1, v25, a2, (uint64_t)&v26, (uint64_t)a3, v29);
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = 0uLL;
  *(void *)(a2 + 16) = 0;
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
}

void sub_10777B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10777F4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v9 = a1 + 15;
  sub_188FC78(a1 + 15, (uint64_t)"\"arcs\":[", 8);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = v10 - *a2;
  if (v10 != *a2)
  {
    unsigned int v13 = 1000000000;
    uint64_t v14 = *(void *)(*(void *)a4 + 24) - *(void *)(*(void *)a4 + 8);
    unint64_t v41 = (*(_DWORD *)(*(void *)a4 + 16) - **(_DWORD **)a4) | ((unint64_t)(*(_DWORD *)(*(void *)a4 + 20) - *(_DWORD *)(*(void *)a4 + 4)) << 32);
    uint64_t v42 = v14;
    if ((HIWORD(*(void *)(v11 + 32)) & 1) != ((*(void *)(v11 + 32) & 0xFF000000000000) == 0)
      && (HIWORD(*(void *)(v11 + 72)) & 1) != ((*(void *)(v11 + 72) & 0xFF000000000000) == 0))
    {
      unsigned int v13 = sub_EAE428(a3);
    }
    unsigned int v15 = 0x7FFFFFFF;
    if (a6 != 0x7FFFFFFF)
    {
      int v16 = *(_DWORD *)(*(void *)a4 + 4);
      int v17 = v16 / 10;
      int v18 = v16 % 10;
      if (v16 < 0) {
        char v19 = -5;
      }
      else {
        char v19 = 5;
      }
      unsigned int v15 = v17 + a6 + (((103 * (char)(v19 + v18)) >> 15) & 1) + ((103 * (char)(v19 + v18)) >> 10);
    }
    sub_188FC78(v9, (uint64_t)"", 0);
    sub_1077B50(a1, v11, (uint64_t)&v41, v13, a5, v15);
    if (v12 != 88)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v12 / 88 - 1;
      uint64_t v23 = 88;
      do
      {
        uint64_t v24 = *a2;
        uint64_t v25 = *(void *)a4 + v21;
        uint64_t v26 = (*(_DWORD *)(v25 + 32) - *(_DWORD *)(v25 + 16));
        uint64_t v27 = *a2 + v23;
        uint64_t v28 = (*(_DWORD *)(v25 + 36) - *(_DWORD *)(v25 + 20));
        uint64_t v29 = *(void *)(v25 + 40) - *(void *)(v25 + 24);
        unint64_t v41 = v26 | (v28 << 32);
        uint64_t v42 = v29;
        unint64_t v30 = *(void *)(v24 + 32);
        unsigned int v31 = 1000000000;
        if (__PAIR64__(*(unsigned __int16 *)(v27 + 36), *(_DWORD *)(v27 + 32)) == __PAIR64__(WORD2(v30), v30)
          && (HIWORD(v30) & 1) != (*(unsigned char *)(v24 + v23 + 38) == 0))
        {
          unint64_t v32 = *(void *)(v24 + 72);
          if (__PAIR64__(*(unsigned __int16 *)(v24 + v23 + 76), *(_DWORD *)(v24 + v23 + 72)) == __PAIR64__(WORD2(v32), v32)&& (HIWORD(v32) & 1) != (*(unsigned char *)(v24 + v23 + 78) == 0)&& *(_DWORD *)(v24 + v23 + 80) == *(_DWORD *)(v24 + 80)&& ((*(unsigned char *)(v24 + 84) ^ *(unsigned char *)(v24 + v23 + 84)) & 7) == 0)
          {
            unsigned int v31 = sub_EAE428(a3);
          }
        }
        unsigned int v33 = 0x7FFFFFFF;
        if (a6 != 0x7FFFFFFF)
        {
          int v34 = *(_DWORD *)(*(void *)a4 + v21 + 20);
          int v35 = v34 / 10;
          int v36 = v34 % 10;
          if (v34 < 0) {
            char v37 = -5;
          }
          else {
            char v37 = 5;
          }
          unsigned int v33 = v35 + a6 + (((103 * (char)(v37 + v36)) >> 15) & 1) + ((103 * (char)(v37 + v36)) >> 10);
        }
        sub_188FC78(v9, (uint64_t)",", 1);
        sub_1077B50(a1, v27, (uint64_t)&v41, v31, a5, v33);
        v23 += 88;
        v21 += 16;
        --v22;
      }
      while (v22);
    }
  }
  return sub_188FC78(v9, (uint64_t)"]", 1);
}

void *sub_1077B50(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  sub_2954EC(a1[48], *(void *)(a2 + 32), (uint64_t)v33);
  uint64_t v11 = __p;
  if (__p != v35)
  {
    unsigned int v12 = sub_2E40A4((uint64_t)v33) >> 32;
    uint64_t v11 = __p;
    double v13 = (double)v12 * 6.28318531;
    if (!__p) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  double v13 = 2.69860754e10;
  if (__p)
  {
LABEL_3:
    int v35 = v11;
    operator delete(v11);
  }
LABEL_4:
  sub_2954EC(a1[48], *(void *)(a2 + 32), (uint64_t)v33);
  uint64_t v14 = __p;
  unsigned int v32 = a4;
  if (__p == v35)
  {
    double v16 = 2.69860754e10;
    unsigned int v17 = a6;
    if (!__p) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unsigned int v15 = sub_2E1AA4((uint64_t)v33) >> 32;
  uint64_t v14 = __p;
  double v16 = (double)v15 * 6.28318531;
  unsigned int v17 = a6;
  if (__p)
  {
LABEL_6:
    int v35 = v14;
    operator delete(v14);
  }
LABEL_7:
  sub_188FC78(a1 + 15, (uint64_t)"{", 1);
  int v18 = sub_188FC78(a1 + 15, (uint64_t)"\"cost\":\"", 8);
  char v19 = (void *)std::ostream::operator<<();
  BOOL v20 = sub_188FC78(v19, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v20, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v18, (uint64_t)"\",", 2);
  uint64_t v21 = sub_188FC78(a1 + 15, (uint64_t)"\"tail\":\"", 8);
  uint64_t v22 = sub_2DD928(v21, *(void *)(a2 + 32));
  sub_188FC78(v22, (uint64_t)"\",", 2);
  uint64_t v23 = sub_188FC78(a1 + 15, (uint64_t)"\"head\":\"", 8);
  uint64_t v24 = sub_2DD928(v23, *(void *)(a2 + 72));
  sub_188FC78(v24, (uint64_t)"\",", 2);
  sub_188FC78(a1 + 15, (uint64_t)"\"junction_coord\":\"", 18);
  long double v25 = exp(3.14159265 - v13 / 4294967300.0);
  atan((v25 - 1.0 / v25) * 0.5);
  uint64_t v26 = (void *)std::ostream::operator<<();
  sub_188FC78(v26, (uint64_t)",", 1);
  uint64_t v27 = (void *)std::ostream::operator<<();
  sub_188FC78(v27, (uint64_t)"\",", 2);
  sub_188FC78(a1 + 15, (uint64_t)"\"segment_coord\":\"", 17);
  long double v28 = exp(3.14159265 - v16 / 4294967300.0);
  atan((v28 - 1.0 / v28) * 0.5);
  uint64_t v29 = (void *)std::ostream::operator<<();
  sub_188FC78(v29, (uint64_t)",", 1);
  unint64_t v30 = (void *)std::ostream::operator<<();
  sub_188FC78(v30, (uint64_t)"\",", 2);
  int v36 = -1;
  int v37 = -1;
  int v38 = -1;
  int v39 = -1;
  int v40 = -1;
  int v41 = -1;
  int v42 = -1;
  int v43 = -1;
  int v44 = -1;
  int v45 = -1;
  int v46 = -1;
  int v47 = -1;
  int v48 = -1;
  int v49 = -1;
  int v50 = -1;
  int v51 = -1;
  int v52 = -1;
  int v53 = -1;
  int v54 = -1;
  int v55 = -1;
  int v56 = -1;
  int v57 = -1;
  int v58 = -1;
  int v59 = -1;
  int v60 = -1;
  int v61 = -1;
  int v62 = -1;
  int v63 = -1;
  int v64 = -1;
  int v65 = -1;
  int v66 = -1;
  int v67 = -1;
  int v68 = -1;
  int v69 = -1;
  int v70 = -1;
  int v71 = -1;
  int v72 = -1;
  int v73 = -1;
  int v74 = -1;
  int v75 = -1;
  int v76 = -1;
  int v77 = -1;
  int v78 = -1;
  int v79 = -1;
  int v80 = -1;
  int v81 = -1;
  int v82 = -1;
  int v83 = -1;
  int v84 = -1;
  int v85 = -1;
  int v86 = -1;
  int v87 = -1;
  int v88 = -1;
  int v89 = -1;
  int v90 = -1;
  int v91 = -1;
  int v92 = -1;
  int v93 = -1;
  int v94 = -1;
  sub_F17E8C(a1 + 7, (int **)a2, v32, a5, v17, (uint64_t)v33);
  sub_1077FE4((uint64_t)a1, (uint64_t)v33);
  return sub_188FC78(a1 + 15, (uint64_t)"}", 1);
}

void sub_1077FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1077FE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(a1 + 120);
  sub_188FC78((void *)(a1 + 120), (uint64_t)"\"properties\":{", 14);
  char v5 = 0;
  for (uint64_t i = 0; i != 59; ++i)
  {
    sub_10781D8(__dst);
    uint64_t v7 = &__dst[i];
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(&v13, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v13 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v14 = v7->__r_.__value_.__r.__words[2];
    }
    uint64_t v8 = 59;
    do
    {
      if (SHIBYTE(__dst[v8 - 1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst[v8 - 1].__r_.__value_.__l.__data_);
      }
      --v8;
    }
    while (v8 * 24);
    *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v5 & 1;
    if (v5) {
      memcpy(__dst, ",", v5 & 1);
    }
    *(unsigned char *)((unint64_t)__dst | v5 & 1) = 0;
    if (*(_DWORD *)(a2 + 32 * i + 24)) {
      char v9 = sub_1078734(a1, (double *)(a2 + 32 * i), (uint64_t)&v13, (uint64_t)__dst);
    }
    else {
      char v9 = sub_107862C(a1, (void *)(a2 + 32 * i), (uint64_t)&v13, (uint64_t)__dst);
    }
    char v10 = v9;
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v14) & 0x80000000) == 0) {
        goto LABEL_2;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_2;
    }
    operator delete((void *)v13);
LABEL_2:
    v5 |= v10;
  }
  return sub_188FC78(v4, (uint64_t)"}", 1);
}

void sub_107817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v16 = 1416;
  while (1)
  {
    if (*((char *)&__p + v16 - 1) < 0) {
      operator delete(*(void **)((char *)&__p + v16 - 24));
    }
    v16 -= 24;
    if (!v16) {
      _Unwind_Resume(exception_object);
    }
  }
}

std::string *sub_10781D8@<X0>(std::string *a1@<X8>)
{
  return std::string::assign(a1 + 58, "TRAVERSAL_FOW_FACTORS_WALKING");
}

void sub_10785F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 1416;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0) {
      operator delete(*(void **)(v1 + v3 - 24));
    }
    v3 -= 24;
    if (!v3) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_107862C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*a2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = a2[1] == 0;
  }
  int v5 = v4;
  if (!v4)
  {
    uint64_t v7 = (void *)(a1 + 120);
    int v8 = *(char *)(a4 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = *(void *)a4;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a4 + 8);
    }
    uint64_t v11 = sub_188FC78(v7, v9, v10);
    unsigned int v12 = sub_188FC78(v11, (uint64_t)"\"", 1);
    int v13 = *(char *)(a3 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = *(void *)a3;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a3 + 8);
    }
    uint64_t v16 = sub_188FC78(v12, v14, v15);
    unsigned int v17 = sub_188FC78(v16, (uint64_t)"\":\"", 3);
    int v18 = (void *)std::ostream::operator<<();
    char v19 = sub_188FC78(v18, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"\"", 1);
  }
  return v5 ^ 1u;
}

BOOL sub_1078734(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = *a2 == 1.0;
  if (a2[1] != 1.0) {
    BOOL v4 = 0;
  }
  BOOL v5 = a2[2] == 1.0 && v4;
  if (!v5)
  {
    uint64_t v7 = (void *)(a1 + 120);
    int v8 = *(char *)(a4 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = *(void *)a4;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a4 + 8);
    }
    uint64_t v11 = sub_188FC78(v7, v9, v10);
    unsigned int v12 = sub_188FC78(v11, (uint64_t)"\"", 1);
    int v13 = *(char *)(a3 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = *(void *)a3;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a3 + 8);
    }
    uint64_t v16 = sub_188FC78(v12, v14, v15);
    unsigned int v17 = sub_188FC78(v16, (uint64_t)"\":\"", 3);
    int v18 = (void *)std::ostream::operator<<();
    sub_188FC78(v18, (uint64_t)",", 1);
    char v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"\"", 1);
  }
  return !v5;
}

void *sub_1078840(void *a1, void *a2)
{
  BOOL v4 = sub_F5C7F8(a1, a2);
  sub_F6DA28(v4 + 5, a2);
  sub_E1B4((uint64_t)(a1 + 9));
  a1[44] = sub_3750CC(a2);
  return a1;
}

void sub_10788A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 88) = v5;
  if (*(char *)(v1 + 183) < 0) {
    operator delete(*(void **)(v1 + 160));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

uint64_t sub_10789BC(uint64_t *a1, uint64_t *a2, int *a3, int a4, int a5)
{
  uint64_t result = sub_EA8E90(a2);
  if ((result & 1) == 0)
  {
    if (sub_EA9088(a2) == 1)
    {
      uint64_t v11 = sub_40EFE8((uint64_t)a2);
      sub_1078BA8(a1, v11, a3, a4, a5);
      unsigned int v12 = (const std::string *)sub_40EFE8((uint64_t)a2);
      int v13 = (std::string *)sub_5231C((uint64_t)a2);
      return (uint64_t)std::string::operator=(v13, v12);
    }
    else
    {
      uint64_t v14 = (long long *)sub_40EFE8((uint64_t)a2);
      sub_4456B4((char *)&__str, v14);
      unint64_t v15 = sub_EA9088(a2);
      if (v15 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v15;
      }
      if (v15 >= 2)
      {
        uint64_t v17 = 1;
        do
        {
          uint64_t v18 = sub_EA8DF4(a2, v17);
          sub_EB3B28((uint64_t)&__str, v18);
          ++v17;
        }
        while (v16 != v17);
      }
      char v19 = (const std::string *)sub_5231C((uint64_t)a2);
      std::string::operator=(&__str, v19);
      sub_1078BA8(a1, (uint64_t)&__str, a3, a4, a5);
      BOOL v20 = (std::string *)sub_5231C((uint64_t)a2);
      std::string::operator=(v20, &__str);
      return sub_4451C0((uint64_t)&__str);
    }
  }
  return result;
}

void sub_1078B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1078B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1078B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1078BA8(uint64_t *a1, uint64_t a2, int *a3, int a4, int a5)
{
  int v29 = a4;
  int v8 = sub_F5C828((uint64_t)a1, a2, a3, &v29, a5, 0);
  uint64_t v27 = 0;
  long double v28 = 0;
  uint64_t v26 = 0;
  uint64_t v10 = (unsigned char *)*((void *)v8 + 4);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 5);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    unsigned int v12 = (char *)operator new(v9 - v10);
    int v13 = &v12[16 * (v11 >> 4)];
    uint64_t v26 = v12;
    long double v28 = v13;
    memcpy(v12, v10, v11);
    uint64_t v27 = v13;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(a1[9] - 24) + 72), 0);
  std::stringbuf::str();
  *(uint64_t *)((char *)a1 + *(void *)(a1[9] - 24) + 88) = 9;
  int v14 = *(char *)(a2 + 23);
  if (v14 >= 0) {
    unint64_t v15 = (void *)a2;
  }
  else {
    unint64_t v15 = *(void **)a2;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a2 + 8);
  }
  uint64_t v17 = sub_188FC78(a1 + 11, (uint64_t)v15, v16);
  uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a2 + 8);
  }
  BOOL v19 = v18 == 0;
  BOOL v20 = v18 != 0;
  if (v19) {
    uint64_t v21 = "";
  }
  else {
    uint64_t v21 = ", ";
  }
  sub_188FC78(v17, (uint64_t)v21, 2 * v20);
  uint64_t v22 = sub_188FC78(a1 + 11, (uint64_t)"\"total_cost\": \"", 15);
  uint64_t v23 = (void *)std::ostream::operator<<();
  uint64_t v24 = sub_188FC78(v23, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v24, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v22, (uint64_t)"\", ", 3);
  long double v25 = (uint64_t *)sub_5231C(a2);
  sub_1078E34(a1, v25, a2, (uint64_t)&v26, (uint64_t)a3);
  std::stringbuf::str();
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = 0uLL;
  *(void *)(a2 + 16) = 0;
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
}

void sub_1078DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1078E34(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1 + 11;
  sub_188FC78(a1 + 11, (uint64_t)"\"arcs\":[", 8);
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = v8 - *a2;
  if (v8 != *a2)
  {
    uint64_t v11 = *(void *)(*(void *)a4 + 24) - *(void *)(*(void *)a4 + 8);
    unint64_t v28 = (*(_DWORD *)(*(void *)a4 + 16) - **(_DWORD **)a4) | ((unint64_t)(*(_DWORD *)(*(void *)a4 + 20) - *(_DWORD *)(*(void *)a4 + 4)) << 32);
    uint64_t v29 = v11;
    unsigned int v12 = sub_EB3214(a3);
    sub_188FC78(v7, (uint64_t)"", 0);
    sub_1079114(a1, v9, (uint64_t)&v28, v12, a5);
    if (v10 != 104)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v10 / 104 - 1;
      uint64_t v16 = 40;
      do
      {
        uint64_t v17 = *a2;
        uint64_t v18 = (void *)(*(void *)a4 + v16);
        uint64_t v19 = (*((_DWORD *)v18 - 2) - *((_DWORD *)v18 - 6));
        uint64_t v20 = *a2 + v14;
        uint64_t v21 = (*((_DWORD *)v18 - 1) - *((_DWORD *)v18 - 5));
        uint64_t v22 = *v18 - *(v18 - 2);
        unint64_t v28 = v19 | (v21 << 32);
        uint64_t v29 = v22;
        uint64_t v23 = v20 + 104;
        unsigned int v24 = 1000000000;
        if (*(void *)(v20 + 104) == *(void *)v17
          && *(void *)(v17 + v14 + 152) == *(void *)(v17 + 48)
          && *(_DWORD *)(v17 + v14 + 200) == *(_DWORD *)(v17 + 96))
        {
          unsigned int v24 = sub_EB3214(a3);
        }
        sub_188FC78(v7, (uint64_t)",", 1);
        sub_1079114(a1, v23, (uint64_t)&v28, v24, a5);
        v14 += 104;
        v16 += 16;
        --v15;
      }
      while (v15);
    }
  }
  return sub_188FC78(v7, (uint64_t)"]", 1);
}

void *sub_1079114(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v35 = sub_3BE8C8(a1[44], (unsigned int *)a2, 1);
  unint64_t v36 = sub_3BE8C8(a1[44], (unsigned int *)a2, 0);
  sub_188FC78(a1 + 11, (uint64_t)"{", 1);
  uint64_t v7 = sub_188FC78(a1 + 11, (uint64_t)"\"cost\":\"", 8);
  uint64_t v8 = (void *)std::ostream::operator<<();
  uint64_t v9 = sub_188FC78(v8, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v9, (uint64_t)",", 1);
  std::ostream::operator<<();
  sub_188FC78(v7, (uint64_t)"\",", 2);
  uint64_t v10 = sub_188FC78(a1 + 11, (uint64_t)"\"tail\":\"", 8);
  unint64_t v11 = *(void *)a2;
  uint64_t v12 = HIDWORD(*(void *)a2);
  int v13 = (void *)std::ostream::operator<<();
  sub_188FC78(v13, (uint64_t)".", 1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  uint64_t v15 = sub_188FC78(v14, (uint64_t)" ", 1);
  uint64_t v16 = sub_670B8(v15, (v12 & 0x20000000) == 0);
  uint64_t v17 = sub_188FC78(v16, (uint64_t)" ", 1);
  if ((v12 & 0x40000000) != 0) {
    int v18 = 2;
  }
  else {
    int v18 = v11 >> 63;
  }
  sub_670FC(v17, v18);
  sub_188FC78(v10, (uint64_t)"\",", 2);
  uint64_t v19 = sub_188FC78(a1 + 11, (uint64_t)"\"head\":\"", 8);
  unint64_t v20 = *(void *)(a2 + 48);
  uint64_t v21 = (void *)std::ostream::operator<<();
  sub_188FC78(v21, (uint64_t)".", 1);
  uint64_t v22 = (void *)std::ostream::operator<<();
  uint64_t v23 = sub_188FC78(v22, (uint64_t)" ", 1);
  unsigned int v24 = sub_670B8(v23, (v20 & 0x2000000000000000) == 0);
  long double v25 = sub_188FC78(v24, (uint64_t)" ", 1);
  if ((v20 & 0x4000000000000000) != 0) {
    int v26 = 2;
  }
  else {
    int v26 = v20 >> 63;
  }
  sub_670FC(v25, v26);
  sub_188FC78(v19, (uint64_t)"\",", 2);
  sub_188FC78(a1 + 11, (uint64_t)"\"junction_coord\":\"", 18);
  long double v27 = exp(3.14159265 - (double)HIDWORD(v35) * 6.28318531 / 4294967300.0);
  atan((v27 - 1.0 / v27) * 0.5);
  unint64_t v28 = (void *)std::ostream::operator<<();
  sub_188FC78(v28, (uint64_t)",", 1);
  uint64_t v29 = (void *)std::ostream::operator<<();
  sub_188FC78(v29, (uint64_t)"\",", 2);
  sub_188FC78(a1 + 11, (uint64_t)"\"segment_coord\":\"", 17);
  long double v30 = exp(3.14159265 - (double)HIDWORD(v36) * 6.28318531 / 4294967300.0);
  atan((v30 - 1.0 / v30) * 0.5);
  unsigned int v31 = (void *)std::ostream::operator<<();
  sub_188FC78(v31, (uint64_t)",", 1);
  unsigned int v32 = (void *)std::ostream::operator<<();
  sub_188FC78(v32, (uint64_t)"\",", 2);
  int v40 = 0;
  v39[0] = sub_F6D3B4(a1 + 5, a2, a4, a5);
  v39[1] = v33;
  sub_10794E4((uint64_t)a1, (uint64_t)v39);
  return sub_188FC78(a1 + 11, (uint64_t)"}", 1);
}

void *sub_10794E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 88);
  sub_188FC78((void *)(a1 + 88), (uint64_t)"\"properties\":{", 14);
  memset(&v6, 0, sizeof(v6));
  std::string::assign(&v6, "SEGMENT_COST_TIME_LENGTH");
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string __p = v6;
    *((unsigned char *)&v6.__r_.__value_.__s + 23) = 0;
    v6.__r_.__value_.__s.__data_[0] = 0;
    if (!*(_DWORD *)(a2 + 24)) {
      goto LABEL_8;
    }
LABEL_6:
    sub_1079768(a1, (double *)a2, (uint64_t)&__p, (uint64_t)&v6);
    goto LABEL_9;
  }
  sub_4200(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    *((unsigned char *)&v6.__r_.__value_.__s + 23) = 0;
    v6.__r_.__value_.__s.__data_[0] = 0;
    if (*(_DWORD *)(a2 + 24)) {
      goto LABEL_6;
    }
  }
  else
  {
    *((unsigned char *)&v6.__r_.__value_.__s + 23) = 0;
    v6.__r_.__value_.__s.__data_[0] = 0;
    if (*(_DWORD *)(a2 + 24)) {
      goto LABEL_6;
    }
  }
LABEL_8:
  sub_1079660(a1, (void *)a2, (uint64_t)&__p, (uint64_t)&v6);
LABEL_9:
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return sub_188FC78(v4, (uint64_t)"}", 1);
    }
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
    return sub_188FC78(v4, (uint64_t)"}", 1);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
  return sub_188FC78(v4, (uint64_t)"}", 1);
}

void sub_107961C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1079660(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*a2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = a2[1] == 0;
  }
  int v5 = v4;
  if (!v4)
  {
    uint64_t v7 = (void *)(a1 + 88);
    int v8 = *(char *)(a4 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = *(void *)a4;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a4 + 8);
    }
    unint64_t v11 = sub_188FC78(v7, v9, v10);
    uint64_t v12 = sub_188FC78(v11, (uint64_t)"\"", 1);
    int v13 = *(char *)(a3 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = *(void *)a3;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a3 + 8);
    }
    uint64_t v16 = sub_188FC78(v12, v14, v15);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)"\":\"", 3);
    int v18 = (void *)std::ostream::operator<<();
    uint64_t v19 = sub_188FC78(v18, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"\"", 1);
  }
  return v5 ^ 1u;
}

BOOL sub_1079768(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = *a2 == 1.0;
  if (a2[1] != 1.0) {
    BOOL v4 = 0;
  }
  BOOL v5 = a2[2] == 1.0 && v4;
  if (!v5)
  {
    uint64_t v7 = (void *)(a1 + 88);
    int v8 = *(char *)(a4 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = *(void *)a4;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a4 + 8);
    }
    unint64_t v11 = sub_188FC78(v7, v9, v10);
    uint64_t v12 = sub_188FC78(v11, (uint64_t)"\"", 1);
    int v13 = *(char *)(a3 + 23);
    if (v13 >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = *(void *)a3;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v15 = *(void *)(a3 + 8);
    }
    uint64_t v16 = sub_188FC78(v12, v14, v15);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)"\":\"", 3);
    int v18 = (void *)std::ostream::operator<<();
    sub_188FC78(v18, (uint64_t)",", 1);
    uint64_t v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)",", 1);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"\"", 1);
  }
  return !v5;
}

void sub_1079874()
{
  unk_25FDD47 = 16641;
  word_25FDD30 = 65;
  byte_25FDD5F = 1;
  byte_25FDD49 = 0;
}

void sub_107989C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_F5A844(v13, a4);
  uint64_t v8 = sub_37B3A8((uint64_t)a4);
  uint64_t v9 = *(void *)v8;
  int v12 = *(_DWORD *)(v8 + 8);
  v10[0] = a4;
  v10[1] = a3;
  void v10[2] = a2;
  v10[3] = v13;
  v10[4] = &v11;
  uint64_t v11 = v9;
  sub_1079950(a1, (uint64_t)v10);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_1079930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1079950(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(long long **)result;
  BOOL v4 = *(long long **)(result + 8);
  long long v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a2 + 32);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t result = sub_107AD50((uint64_t)v8, v3);
      if (result) {
        break;
      }
      uint64_t v3 = (long long *)((char *)v3 + 472);
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        goto LABEL_5;
      }
    }
    if (v3 != v4)
    {
      for (uint64_t i = (long long *)((char *)v3 + 472); i != v4; uint64_t i = (long long *)((char *)i + 472))
      {
        uint64_t result = sub_107AD50((uint64_t)v8, i);
        if ((result & 1) == 0)
        {
          uint64_t result = sub_448838((uint64_t)v3, i);
          uint64_t v3 = (long long *)((char *)v3 + 472);
        }
      }
    }
  }
LABEL_5:
  uint64_t v6 = *(void *)(v2 + 8);
  if (v3 != (long long *)v6)
  {
    while ((long long *)v6 != v3)
    {
      v6 -= 472;
      uint64_t result = sub_405F44(v6);
    }
    *(void *)(v2 + 8) = v3;
  }
  return result;
}

uint64_t sub_1079A74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_F5C7F8(v14, a4);
  uint64_t v8 = sub_37B3A8((uint64_t)a4);
  uint64_t v9 = *(void *)v8;
  int v13 = *(_DWORD *)(v8 + 8);
  v11[0] = a4;
  v11[1] = a3;
  v11[2] = a2;
  v11[3] = v14;
  v11[4] = &v12;
  uint64_t v12 = v9;
  return sub_1079AF8(a1, (uint64_t)v11);
}

uint64_t sub_1079AF8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(long long **)result;
  BOOL v4 = *(long long **)(result + 8);
  long long v5 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a2 + 32);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t result = sub_107AF68((uint64_t)v8, v3);
      if (result) {
        break;
      }
      v3 += 30;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        goto LABEL_5;
      }
    }
    if (v3 != v4)
    {
      for (uint64_t i = v3 + 30; i != v4; i += 30)
      {
        uint64_t result = sub_107AF68((uint64_t)v8, i);
        if ((result & 1) == 0)
        {
          uint64_t result = sub_4495AC((uint64_t)v3, i);
          v3 += 30;
        }
      }
    }
  }
LABEL_5:
  uint64_t v6 = *(void *)(v2 + 8);
  if (v3 != (long long *)v6)
  {
    while ((long long *)v6 != v3)
    {
      v6 -= 480;
      uint64_t result = sub_4451C0(v6);
    }
    *(void *)(v2 + 8) = v3;
  }
  return result;
}

uint64_t sub_1079C14(uint64_t a1, unsigned __int8 a2, void *a3)
{
  if (sub_45FB38(a3)) {
    return 0;
  }
  int v7 = sub_EB6EB0(a3);
  uint64_t v8 = (char **)sub_40EFE8((uint64_t)a3);
  uint64_t v9 = (char **)sub_52058((uint64_t)a3);
  uint64_t v10 = sub_1079CCC(v8, v9, a1, a2);
  uint64_t v11 = sub_52058((uint64_t)a3);
  sub_EB6F18((uint64_t)a3, (uint64_t)v10, v11);
  return v7 - sub_EB6EB0(a3);
}

char **sub_1079CCC(char **a1, char **a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v6 = a1;
  int v7 = a4;
  if (a1 != a2)
  {
    while (sub_3D6320(a3, v6, v7 != 0))
    {
      v6 += 6;
      if (v6 == a2) {
        return a2;
      }
    }
  }
  if (v6 == a2) {
    return a2;
  }
  uint64_t v8 = v6 + 6;
  if (v6 + 6 == a2) {
    return v6;
  }
  uint64_t v9 = v6;
  uint64_t v28 = a3;
  int v27 = v7;
  do
  {
    uint64_t v11 = v8;
    if (sub_3D6320(a3, v8, v7 != 0))
    {
      uint64_t v12 = (void **)*v9;
      if (*v9)
      {
        int v13 = (void **)v9[1];
        uint64_t v14 = (void **)*v9;
        if (v13 != v12)
        {
          do
          {
            uint64_t v15 = *(v13 - 28);
            if (v15)
            {
              *(v13 - 27) = v15;
              operator delete(v15);
            }
            uint64_t v16 = *(v13 - 31);
            if (v16)
            {
              *(v13 - 30) = v16;
              operator delete(v16);
            }
            uint64_t v17 = *(v13 - 39);
            if (v17)
            {
              *(v13 - 38) = v17;
              operator delete(v17);
            }
            int v18 = *(v13 - 42);
            if (v18)
            {
              *(v13 - 41) = v18;
              operator delete(v18);
            }
            uint64_t v19 = (char *)*(v13 - 45);
            if (v19)
            {
              unint64_t v20 = (char *)*(v13 - 44);
              uint64_t v21 = *(v13 - 45);
              if (v20 != v19)
              {
                do
                {
                  uint64_t v22 = (void *)*((void *)v20 - 3);
                  if (v22)
                  {
                    *((void *)v20 - 2) = v22;
                    operator delete(v22);
                  }
                  v20 -= 56;
                }
                while (v20 != v19);
                uint64_t v21 = *(v13 - 45);
              }
              *(v13 - 44) = v19;
              operator delete(v21);
            }
            uint64_t v23 = *(v13 - 56);
            if (v23)
            {
              *(v13 - 55) = v23;
              operator delete(v23);
            }
            unsigned int v24 = v13 - 59;
            if (*((char *)v13 - 449) < 0) {
              operator delete(*v24);
            }
            v13 -= 59;
          }
          while (v24 != v12);
          uint64_t v14 = (void **)*v9;
        }
        v9[1] = (char *)v12;
        operator delete(v14);
        *uint64_t v9 = 0;
        v9[1] = 0;
        uint64_t v9[2] = 0;
        a3 = v28;
        int v7 = v27;
      }
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v11;
      uint64_t v9[2] = v6[8];
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      long double v25 = (void **)(v9 + 3);
      if (*((char *)v9 + 47) < 0) {
        operator delete(*v25);
      }
      long long v10 = *(_OWORD *)(v6 + 9);
      v9[5] = v6[11];
      *(_OWORD *)long double v25 = v10;
      *((unsigned char *)v6 + 95) = 0;
      *((unsigned char *)v6 + 72) = 0;
      v9 += 6;
    }
    uint64_t v8 = v11 + 6;
    uint64_t v6 = v11;
  }
  while (v11 + 6 != a2);
  return v9;
}

uint64_t sub_1079F14(void *a1, char *a2)
{
  if (!sub_37D0C8(a1)) {
    return 1;
  }
  BOOL v4 = (uint64_t *)sub_3750CC(a1);
  int v46 = 0;
  int v47 = 0;
  uint64_t v48 = 0;
  sub_EA8C98(a2, (uint64_t)&v36);
  sub_EA9B84((uint64_t)&v29, &v36);
  sub_EA9B84((uint64_t)&v22, &v41);
  int v5 = 0;
LABEL_4:
  if (v34 == v35 || __p == v28)
  {
    if ((v34 == v35) == (__p == v28)) {
      goto LABEL_50;
    }
    goto LABEL_23;
  }
  uint64_t v7 = v29;
  if (v31 != v24) {
    goto LABEL_24;
  }
  if (v29)
  {
    unint64_t v8 = v30;
    int v9 = v8 < sub_EB2E84(v29);
    uint64_t v10 = v22;
    if (v22) {
      goto LABEL_14;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = v22;
    if (v22)
    {
LABEL_14:
      unint64_t v11 = v23;
      unint64_t v12 = sub_EB2E84(v10);
      int v13 = v11 < v12;
      if (v11 < v12) {
        int v14 = v9;
      }
      else {
        int v14 = 0;
      }
      if (v14 == 1)
      {
        uint64_t v15 = sub_EB2F38(v29, v30);
        if (v15 == sub_EB2F38(v22, v23))
        {
LABEL_50:
          if (__p)
          {
            uint64_t v28 = __p;
            operator delete(__p);
          }
          if (v25)
          {
            int v26 = v25;
            operator delete(v25);
          }
          if (v34)
          {
            unint64_t v35 = v34;
            operator delete(v34);
          }
          if (v32)
          {
            uint64_t v33 = v32;
            operator delete(v32);
          }
          if (v44)
          {
            int v45 = v44;
            operator delete(v44);
          }
          if (v42)
          {
            int v43 = v42;
            operator delete(v42);
          }
          if (v39)
          {
            int v40 = v39;
            operator delete(v39);
          }
          if (v37)
          {
            int v38 = v37;
            operator delete(v37);
          }
          uint64_t v19 = 1;
          unint64_t v20 = v46;
          if (!v46) {
            return v19;
          }
LABEL_47:
          int v47 = v20;
          operator delete(v20);
          return v19;
        }
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  int v13 = 0;
LABEL_22:
  if (v9 == v13) {
    goto LABEL_50;
  }
LABEL_23:
  uint64_t v7 = v29;
LABEL_24:
  uint64_t v16 = (unsigned int *)sub_EB2F38(v7, v30);
  sub_295BE0((uint64_t)v4, (((unint64_t)(v16[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v16[1] << 32) | *v16) ^ 0x1000000000000, (unint64_t *)&v46);
  uint64_t v17 = v46;
  int v18 = v47;
  if (v46 != v47)
  {
    while (1)
    {
      if (!v5 || *v17 != v5)
      {
        int v5 = *v17;
        if (!sub_2961A8(v4)) {
          break;
        }
      }
      if (++v17 == v18)
      {
        sub_1074F24(&v29);
        goto LABEL_4;
      }
    }
  }
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v44)
  {
    int v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  uint64_t v19 = 0;
  unint64_t v20 = v46;
  if (v46) {
    goto LABEL_47;
  }
  return v19;
}

void sub_107A204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  unint64_t v30 = *(void **)(v28 - 72);
  if (v30)
  {
    *(void *)(v28 - 64) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_107A248(void *a1, void *a2)
{
  uint64_t result = sub_37D0C8(a1);
  if (result)
  {
    int v5 = sub_EB6EB0(a2);
    uint64_t v6 = (char *)sub_40EFE8((uint64_t)a2);
    uint64_t v7 = (char *)sub_52058((uint64_t)a2);
    unint64_t v8 = sub_107A2D4(v6, v7, a1);
    uint64_t v9 = sub_52058((uint64_t)a2);
    sub_EB6F18((uint64_t)a2, (uint64_t)v8, v9);
    return v5 - sub_EB6EB0(a2);
  }
  return result;
}

char *sub_107A2D4(char *a1, char *a2, void *a3)
{
  if (a1 == a2) {
    return a2;
  }
  int v5 = a1;
  while (sub_107B180(a3, v5))
  {
    v5 += 48;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 == a2) {
    return v5;
  }
  unint64_t v8 = v5 + 48;
  if (v5 + 48 == a2) {
    return v5;
  }
  uint64_t v6 = v5;
  long double v25 = a3;
  do
  {
    uint64_t v10 = v8;
    if (sub_107B180(a3, v8))
    {
      unint64_t v11 = *(void ***)v6;
      if (*(void *)v6)
      {
        unint64_t v12 = (void **)*((void *)v6 + 1);
        int v13 = *(void ***)v6;
        if (v12 != v11)
        {
          do
          {
            int v14 = *(v12 - 28);
            if (v14)
            {
              *(v12 - 27) = v14;
              operator delete(v14);
            }
            uint64_t v15 = *(v12 - 31);
            if (v15)
            {
              *(v12 - 30) = v15;
              operator delete(v15);
            }
            uint64_t v16 = *(v12 - 39);
            if (v16)
            {
              *(v12 - 38) = v16;
              operator delete(v16);
            }
            uint64_t v17 = *(v12 - 42);
            if (v17)
            {
              *(v12 - 41) = v17;
              operator delete(v17);
            }
            int v18 = (char *)*(v12 - 45);
            if (v18)
            {
              uint64_t v19 = (char *)*(v12 - 44);
              unint64_t v20 = *(v12 - 45);
              if (v19 != v18)
              {
                do
                {
                  uint64_t v21 = (void *)*((void *)v19 - 3);
                  if (v21)
                  {
                    *((void *)v19 - 2) = v21;
                    operator delete(v21);
                  }
                  v19 -= 56;
                }
                while (v19 != v18);
                unint64_t v20 = *(v12 - 45);
              }
              *(v12 - 44) = v18;
              operator delete(v20);
            }
            uint64_t v22 = *(v12 - 56);
            if (v22)
            {
              *(v12 - 55) = v22;
              operator delete(v22);
            }
            unint64_t v23 = v12 - 59;
            if (*((char *)v12 - 449) < 0) {
              operator delete(*v23);
            }
            v12 -= 59;
          }
          while (v23 != v11);
          int v13 = *(void ***)v6;
        }
        *((void *)v6 + 1) = v11;
        operator delete(v13);
        *(void *)uint64_t v6 = 0;
        *((void *)v6 + 1) = 0;
        *((void *)v6 + 2) = 0;
        a3 = v25;
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v10;
      *((void *)v6 + 2) = *((void *)v5 + 8);
      *(void *)uint64_t v10 = 0;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      uint64_t v24 = (void **)(v6 + 24);
      if (v6[47] < 0) {
        operator delete(*v24);
      }
      long long v9 = *(_OWORD *)(v5 + 72);
      *((void *)v6 + 5) = *((void *)v5 + 11);
      *(_OWORD *)uint64_t v24 = v9;
      v5[95] = 0;
      v5[72] = 0;
      v6 += 48;
    }
    unint64_t v8 = v10 + 48;
    int v5 = v10;
  }
  while (v10 + 48 != a2);
  return v6;
}

uint64_t sub_107A4FC(void *a1, void *a2)
{
  uint64_t result = sub_37D0C8(a1);
  if (result)
  {
    int v5 = sub_EB6EB0(a2);
    uint64_t v6 = (char *)sub_40EFE8((uint64_t)a2);
    uint64_t v7 = (char *)sub_52058((uint64_t)a2);
    unint64_t v8 = sub_107A588(v6, v7, a1);
    uint64_t v9 = sub_52058((uint64_t)a2);
    sub_EB6F18((uint64_t)a2, (uint64_t)v8, v9);
    return v5 - sub_EB6EB0(a2);
  }
  return result;
}

char *sub_107A588(char *a1, char *a2, void *a3)
{
  if (a1 == a2) {
    return a2;
  }
  int v5 = a1;
  while (sub_107B49C(a3, v5))
  {
    v5 += 48;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 == a2) {
    return v5;
  }
  unint64_t v8 = v5 + 48;
  if (v5 + 48 == a2) {
    return v5;
  }
  uint64_t v6 = v5;
  long double v25 = a3;
  do
  {
    uint64_t v10 = v8;
    if (sub_107B49C(a3, v8))
    {
      unint64_t v11 = *(void ***)v6;
      if (*(void *)v6)
      {
        unint64_t v12 = (void **)*((void *)v6 + 1);
        int v13 = *(void ***)v6;
        if (v12 != v11)
        {
          do
          {
            int v14 = *(v12 - 28);
            if (v14)
            {
              *(v12 - 27) = v14;
              operator delete(v14);
            }
            uint64_t v15 = *(v12 - 31);
            if (v15)
            {
              *(v12 - 30) = v15;
              operator delete(v15);
            }
            uint64_t v16 = *(v12 - 39);
            if (v16)
            {
              *(v12 - 38) = v16;
              operator delete(v16);
            }
            uint64_t v17 = *(v12 - 42);
            if (v17)
            {
              *(v12 - 41) = v17;
              operator delete(v17);
            }
            int v18 = (char *)*(v12 - 45);
            if (v18)
            {
              uint64_t v19 = (char *)*(v12 - 44);
              unint64_t v20 = *(v12 - 45);
              if (v19 != v18)
              {
                do
                {
                  uint64_t v21 = (void *)*((void *)v19 - 3);
                  if (v21)
                  {
                    *((void *)v19 - 2) = v21;
                    operator delete(v21);
                  }
                  v19 -= 56;
                }
                while (v19 != v18);
                unint64_t v20 = *(v12 - 45);
              }
              *(v12 - 44) = v18;
              operator delete(v20);
            }
            uint64_t v22 = *(v12 - 56);
            if (v22)
            {
              *(v12 - 55) = v22;
              operator delete(v22);
            }
            unint64_t v23 = v12 - 59;
            if (*((char *)v12 - 449) < 0) {
              operator delete(*v23);
            }
            v12 -= 59;
          }
          while (v23 != v11);
          int v13 = *(void ***)v6;
        }
        *((void *)v6 + 1) = v11;
        operator delete(v13);
        *(void *)uint64_t v6 = 0;
        *((void *)v6 + 1) = 0;
        *((void *)v6 + 2) = 0;
        a3 = v25;
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v10;
      *((void *)v6 + 2) = *((void *)v5 + 8);
      *(void *)uint64_t v10 = 0;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      uint64_t v24 = (void **)(v6 + 24);
      if (v6[47] < 0) {
        operator delete(*v24);
      }
      long long v9 = *(_OWORD *)(v5 + 72);
      *((void *)v6 + 5) = *((void *)v5 + 11);
      *(_OWORD *)uint64_t v24 = v9;
      v5[95] = 0;
      v5[72] = 0;
      v6 += 48;
    }
    unint64_t v8 = v10 + 48;
    int v5 = v10;
  }
  while (v10 + 48 != a2);
  return v6;
}

uint64_t sub_107A7B0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v11 = a2;
  uint64_t result = sub_37D0C8(a1);
  if (result)
  {
    int v6 = sub_EB6EB0(a3);
    uint64_t v7 = (__n128 *)sub_40EFE8((uint64_t)a3);
    unint64_t v8 = (__n128 *)sub_52058((uint64_t)a3);
    long long v9 = sub_107A84C(v7, v8, &v11, a1);
    uint64_t v10 = sub_52058((uint64_t)a3);
    sub_EB6F18((uint64_t)a3, (uint64_t)v9, v10);
    return v6 - sub_EB6EB0(a3);
  }
  return result;
}

__n128 *sub_107A84C(__n128 *a1, __n128 *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = a1;
  if (a1 != a2)
  {
    while (sub_10689F0(v7, *a3, a4))
    {
      v7 += 3;
      if (v7 == a2) {
        return a2;
      }
    }
  }
  if (v7 == a2) {
    return v7;
  }
  long long v9 = v7 + 3;
  if (&v7[3] == a2) {
    return v7;
  }
  unint64_t v8 = v7;
  int v27 = a3;
  uint64_t v28 = a4;
  do
  {
    uint64_t v11 = v9;
    if (sub_10689F0(v9, *a3, a4))
    {
      unint64_t v12 = (void **)v8->n128_u64[0];
      if (v8->n128_u64[0])
      {
        int v13 = (void **)v8->n128_u64[1];
        int v14 = (void **)v8->n128_u64[0];
        if (v13 != v12)
        {
          do
          {
            uint64_t v15 = *(v13 - 28);
            if (v15)
            {
              *(v13 - 27) = v15;
              operator delete(v15);
            }
            uint64_t v16 = *(v13 - 31);
            if (v16)
            {
              *(v13 - 30) = v16;
              operator delete(v16);
            }
            uint64_t v17 = *(v13 - 39);
            if (v17)
            {
              *(v13 - 38) = v17;
              operator delete(v17);
            }
            int v18 = *(v13 - 42);
            if (v18)
            {
              *(v13 - 41) = v18;
              operator delete(v18);
            }
            uint64_t v19 = (char *)*(v13 - 45);
            if (v19)
            {
              unint64_t v20 = (char *)*(v13 - 44);
              uint64_t v21 = *(v13 - 45);
              if (v20 != v19)
              {
                do
                {
                  uint64_t v22 = (void *)*((void *)v20 - 3);
                  if (v22)
                  {
                    *((void *)v20 - 2) = v22;
                    operator delete(v22);
                  }
                  v20 -= 56;
                }
                while (v20 != v19);
                uint64_t v21 = *(v13 - 45);
              }
              *(v13 - 44) = v19;
              operator delete(v21);
            }
            unint64_t v23 = *(v13 - 56);
            if (v23)
            {
              *(v13 - 55) = v23;
              operator delete(v23);
            }
            uint64_t v24 = v13 - 59;
            if (*((char *)v13 - 449) < 0) {
              operator delete(*v24);
            }
            v13 -= 59;
          }
          while (v24 != v12);
          int v14 = (void **)v8->n128_u64[0];
        }
        v8->n128_u64[1] = (unint64_t)v12;
        operator delete(v14);
        v8->n128_u64[0] = 0;
        v8->n128_u64[1] = 0;
        v8[1].n128_u64[0] = 0;
        a3 = v27;
        a4 = v28;
      }
      __n128 *v8 = *v11;
      v8[1].n128_u64[0] = v7[4].n128_u64[0];
      v11->n128_u64[0] = 0;
      v11->n128_u64[1] = 0;
      v11[1].n128_u64[0] = 0;
      long double v25 = (void **)&v8[1].n128_u64[1];
      if (v8[2].n128_i8[15] < 0) {
        operator delete(*v25);
      }
      long long v10 = *(long long *)((char *)&v7[4] + 8);
      v8[2].n128_u64[1] = v7[5].n128_u64[1];
      *(_OWORD *)long double v25 = v10;
      v7[5].n128_u8[15] = 0;
      v7[4].n128_u8[8] = 0;
      v8 += 3;
    }
    long long v9 = v11 + 3;
    uint64_t v7 = v11;
  }
  while (&v11[3] != a2);
  return v8;
}

uint64_t sub_107AA80(void *a1, uint64_t a2, void *a3)
{
  uint64_t v11 = a2;
  uint64_t result = sub_37D0C8(a1);
  if (result)
  {
    int v6 = sub_EB6EB0(a3);
    uint64_t v7 = (__n128 *)sub_40EFE8((uint64_t)a3);
    unint64_t v8 = (__n128 *)sub_52058((uint64_t)a3);
    long long v9 = sub_107AB1C(v7, v8, &v11, a1);
    uint64_t v10 = sub_52058((uint64_t)a3);
    sub_EB6F18((uint64_t)a3, (uint64_t)v9, v10);
    return v6 - sub_EB6EB0(a3);
  }
  return result;
}

__n128 *sub_107AB1C(__n128 *a1, __n128 *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = a1;
  if (a1 != a2)
  {
    while (sub_106AA30(v7, *a3, a4))
    {
      v7 += 3;
      if (v7 == a2) {
        return a2;
      }
    }
  }
  if (v7 == a2) {
    return v7;
  }
  long long v9 = v7 + 3;
  if (&v7[3] == a2) {
    return v7;
  }
  unint64_t v8 = v7;
  int v27 = a3;
  uint64_t v28 = a4;
  do
  {
    uint64_t v11 = v9;
    if (sub_106AA30(v9, *a3, a4))
    {
      unint64_t v12 = (void **)v8->n128_u64[0];
      if (v8->n128_u64[0])
      {
        int v13 = (void **)v8->n128_u64[1];
        int v14 = (void **)v8->n128_u64[0];
        if (v13 != v12)
        {
          do
          {
            uint64_t v15 = *(v13 - 28);
            if (v15)
            {
              *(v13 - 27) = v15;
              operator delete(v15);
            }
            uint64_t v16 = *(v13 - 31);
            if (v16)
            {
              *(v13 - 30) = v16;
              operator delete(v16);
            }
            uint64_t v17 = *(v13 - 39);
            if (v17)
            {
              *(v13 - 38) = v17;
              operator delete(v17);
            }
            int v18 = *(v13 - 42);
            if (v18)
            {
              *(v13 - 41) = v18;
              operator delete(v18);
            }
            uint64_t v19 = (char *)*(v13 - 45);
            if (v19)
            {
              unint64_t v20 = (char *)*(v13 - 44);
              uint64_t v21 = *(v13 - 45);
              if (v20 != v19)
              {
                do
                {
                  uint64_t v22 = (void *)*((void *)v20 - 3);
                  if (v22)
                  {
                    *((void *)v20 - 2) = v22;
                    operator delete(v22);
                  }
                  v20 -= 56;
                }
                while (v20 != v19);
                uint64_t v21 = *(v13 - 45);
              }
              *(v13 - 44) = v19;
              operator delete(v21);
            }
            unint64_t v23 = *(v13 - 56);
            if (v23)
            {
              *(v13 - 55) = v23;
              operator delete(v23);
            }
            uint64_t v24 = v13 - 59;
            if (*((char *)v13 - 449) < 0) {
              operator delete(*v24);
            }
            v13 -= 59;
          }
          while (v24 != v12);
          int v14 = (void **)v8->n128_u64[0];
        }
        v8->n128_u64[1] = (unint64_t)v12;
        operator delete(v14);
        v8->n128_u64[0] = 0;
        v8->n128_u64[1] = 0;
        v8[1].n128_u64[0] = 0;
        a3 = v27;
        a4 = v28;
      }
      __n128 *v8 = *v11;
      v8[1].n128_u64[0] = v7[4].n128_u64[0];
      v11->n128_u64[0] = 0;
      v11->n128_u64[1] = 0;
      v11[1].n128_u64[0] = 0;
      long double v25 = (void **)&v8[1].n128_u64[1];
      if (v8[2].n128_i8[15] < 0) {
        operator delete(*v25);
      }
      long long v10 = *(long long *)((char *)&v7[4] + 8);
      v8[2].n128_u64[1] = v7[5].n128_u64[1];
      *(_OWORD *)long double v25 = v10;
      v7[5].n128_u8[15] = 0;
      v7[4].n128_u8[8] = 0;
      v8 += 3;
    }
    long long v9 = v11 + 3;
    uint64_t v7 = v11;
  }
  while (&v11[3] != a2);
  return v8;
}

uint64_t sub_107AD50(uint64_t a1, void *a2)
{
  if (sub_EAE144(a2) && (sub_37D0C8(*(void **)a1) & 1) != 0) {
    return 1;
  }
  sub_1070128(*(void *)(a1 + 8), a2, v26);
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  sub_10702F4(*(void *)(a1 + 8), a2);
  sub_1067AC8(*(void *)(a1 + 16), a2, &__p);
  if (sub_EAE144(a2))
  {
    BOOL v5 = 1;
    goto LABEL_8;
  }
  int v6 = (char *)__p;
  if (__p != v25)
  {
    BOOL v5 = 1;
    if (__p) {
      goto LABEL_9;
    }
    return v5;
  }
  sub_10676E0(*(void *)(a1 + 16), a2, *(void *)(a1 + 24), *(int **)(a1 + 32), &v18);
  if (v18 == v19 && v20 == v21)
  {
    BOOL v5 = v22 != v23;
    unint64_t v12 = (char *)v22;
    if (!v22) {
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v5 = 1;
    unint64_t v12 = (char *)v22;
    if (!v22) {
      goto LABEL_29;
    }
  }
  int v13 = v23;
  int v14 = v12;
  if (v23 != v12)
  {
    uint64_t v15 = v23;
    do
    {
      uint64_t v17 = (void *)*((void *)v15 - 3);
      v15 -= 24;
      uint64_t v16 = v17;
      if (v17)
      {
        *((void *)v13 - 2) = v16;
        operator delete(v16);
      }
      int v13 = v15;
    }
    while (v15 != v12);
    int v14 = v22;
  }
  unint64_t v23 = v12;
  operator delete(v14);
LABEL_29:
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
    int v6 = (char *)__p;
    if (__p) {
      goto LABEL_9;
    }
    return v5;
  }
LABEL_8:
  int v6 = (char *)__p;
  if (!__p) {
    return v5;
  }
LABEL_9:
  uint64_t v7 = v25;
  unint64_t v8 = v6;
  if (v25 != v6)
  {
    long long v9 = v25;
    do
    {
      uint64_t v11 = (void *)*((void *)v9 - 3);
      v9 -= 24;
      long long v10 = v11;
      if (v11)
      {
        *((void *)v7 - 2) = v10;
        operator delete(v10);
      }
      uint64_t v7 = v9;
    }
    while (v9 != v6);
    unint64_t v8 = __p;
  }
  long double v25 = v6;
  operator delete(v8);
  return v5;
}

void sub_107AF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_107AF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_107AF68(uint64_t a1, void *a2)
{
  if (sub_EB2EC4((uint64_t)a2) && (sub_37D0C8(*(void **)a1) & 1) != 0) {
    return 1;
  }
  sub_1073620(*(void *)(a1 + 8), a2, v26);
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  sub_1073858(*(void *)(a1 + 8), a2);
  sub_3F4FA4(&__p);
  if (sub_EB2EC4((uint64_t)a2))
  {
    BOOL v5 = 1;
    goto LABEL_8;
  }
  int v6 = (char *)__p;
  if (__p != v25)
  {
    BOOL v5 = 1;
    if (__p) {
      goto LABEL_9;
    }
    return v5;
  }
  sub_106B620(&v18);
  if (v18 == v19 && v20 == v21)
  {
    BOOL v5 = v22 != v23;
    unint64_t v12 = (char *)v22;
    if (!v22) {
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v5 = 1;
    unint64_t v12 = (char *)v22;
    if (!v22) {
      goto LABEL_29;
    }
  }
  int v13 = v23;
  int v14 = v12;
  if (v23 != v12)
  {
    uint64_t v15 = v23;
    do
    {
      uint64_t v17 = (void *)*((void *)v15 - 3);
      v15 -= 24;
      uint64_t v16 = v17;
      if (v17)
      {
        *((void *)v13 - 2) = v16;
        operator delete(v16);
      }
      int v13 = v15;
    }
    while (v15 != v12);
    int v14 = v22;
  }
  unint64_t v23 = v12;
  operator delete(v14);
LABEL_29:
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
    int v6 = (char *)__p;
    if (__p) {
      goto LABEL_9;
    }
    return v5;
  }
LABEL_8:
  int v6 = (char *)__p;
  if (!__p) {
    return v5;
  }
LABEL_9:
  uint64_t v7 = v25;
  unint64_t v8 = v6;
  if (v25 != v6)
  {
    long long v9 = v25;
    do
    {
      uint64_t v11 = (void *)*((void *)v9 - 3);
      v9 -= 24;
      long long v10 = v11;
      if (v11)
      {
        *((void *)v7 - 2) = v10;
        operator delete(v10);
      }
      uint64_t v7 = v9;
    }
    while (v9 != v6);
    unint64_t v8 = __p;
  }
  long double v25 = v6;
  operator delete(v8);
  return v5;
}

void sub_107B158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_107B16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_107B180(void *a1, char *a2)
{
  if (!sub_37D0C8(a1)) {
    return 1;
  }
  BOOL v4 = (uint64_t *)sub_3750CC(a1);
  int v46 = 0;
  int v47 = 0;
  uint64_t v48 = 0;
  sub_EA9680(a2, (uint64_t)&v36);
  sub_EA9CA0((uint64_t)&v29, &v36);
  sub_EA9CA0((uint64_t)&v22, &v41);
  int v5 = 0;
LABEL_4:
  if (v34 == v35 || __p == v28)
  {
    if ((v34 == v35) == (__p == v28)) {
      goto LABEL_50;
    }
    goto LABEL_23;
  }
  uint64_t v7 = v29;
  if (v31 != v24) {
    goto LABEL_24;
  }
  if (v29)
  {
    unint64_t v8 = v30;
    int v9 = v8 < sub_EAE104(v29);
    long long v10 = v22;
    if (v22) {
      goto LABEL_14;
    }
  }
  else
  {
    int v9 = 0;
    long long v10 = v22;
    if (v22)
    {
LABEL_14:
      unint64_t v11 = v23;
      unint64_t v12 = sub_EAE104(v10);
      int v13 = v11 < v12;
      if (v11 < v12) {
        int v14 = v9;
      }
      else {
        int v14 = 0;
      }
      if (v14 == 1)
      {
        uint64_t v15 = sub_EAE1B8(v29, v30);
        if (v15 == sub_EAE1B8(v22, v23))
        {
LABEL_50:
          if (__p)
          {
            uint64_t v28 = __p;
            operator delete(__p);
          }
          if (v25)
          {
            int v26 = v25;
            operator delete(v25);
          }
          if (v34)
          {
            unint64_t v35 = v34;
            operator delete(v34);
          }
          if (v32)
          {
            uint64_t v33 = v32;
            operator delete(v32);
          }
          if (v44)
          {
            int v45 = v44;
            operator delete(v44);
          }
          if (v42)
          {
            int v43 = v42;
            operator delete(v42);
          }
          if (v39)
          {
            int v40 = v39;
            operator delete(v39);
          }
          if (v37)
          {
            int v38 = v37;
            operator delete(v37);
          }
          uint64_t v19 = 1;
          unint64_t v20 = v46;
          if (!v46) {
            return v19;
          }
LABEL_47:
          int v47 = v20;
          operator delete(v20);
          return v19;
        }
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  int v13 = 0;
LABEL_22:
  if (v9 == v13) {
    goto LABEL_50;
  }
LABEL_23:
  uint64_t v7 = v29;
LABEL_24:
  uint64_t v16 = sub_EAE1B8(v7, v30);
  sub_295BE0((uint64_t)v4, *(void *)(v16 + 32), (unint64_t *)&v46);
  uint64_t v17 = v46;
  int v18 = v47;
  if (v46 != v47)
  {
    while (1)
    {
      if (!v5 || *v17 != v5)
      {
        int v5 = *v17;
        if ((sub_2961A8(v4) & 1) == 0) {
          break;
        }
      }
      if (++v17 == v18)
      {
        sub_10740D8(&v29);
        goto LABEL_4;
      }
    }
  }
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v44)
  {
    int v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  uint64_t v19 = 0;
  unint64_t v20 = v46;
  if (v46) {
    goto LABEL_47;
  }
  return v19;
}

void sub_107B458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  unint64_t v30 = *(void **)(v28 - 72);
  if (v30)
  {
    *(void *)(v28 - 64) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_107B49C(void *a1, char *a2)
{
  if (!sub_37D0C8(a1)) {
    return 1;
  }
  BOOL v4 = (uint64_t *)sub_3750CC(a1);
  int v46 = 0;
  int v47 = 0;
  uint64_t v48 = 0;
  sub_EA7DBC(a2, (uint64_t)&v36);
  sub_EA9A68((uint64_t)&v29, &v36);
  sub_EA9A68((uint64_t)&v22, &v41);
  int v5 = 0;
LABEL_4:
  if (v34 == v35 || __p == v28)
  {
    if ((v34 == v35) == (__p == v28)) {
      goto LABEL_50;
    }
    goto LABEL_23;
  }
  uint64_t v7 = v29;
  if (v31 != v24) {
    goto LABEL_24;
  }
  if (v29)
  {
    unint64_t v8 = v30;
    int v9 = v8 < sub_EB04C4(v29);
    long long v10 = v22;
    if (v22) {
      goto LABEL_14;
    }
  }
  else
  {
    int v9 = 0;
    long long v10 = v22;
    if (v22)
    {
LABEL_14:
      unint64_t v11 = v23;
      unint64_t v12 = sub_EB04C4(v10);
      int v13 = v11 < v12;
      if (v11 < v12) {
        int v14 = v9;
      }
      else {
        int v14 = 0;
      }
      if (v14 == 1)
      {
        uint64_t v15 = sub_EB0624(v29, v30);
        if (v15 == sub_EB0624(v22, v23))
        {
LABEL_50:
          if (__p)
          {
            uint64_t v28 = __p;
            operator delete(__p);
          }
          if (v25)
          {
            int v26 = v25;
            operator delete(v25);
          }
          if (v34)
          {
            unint64_t v35 = v34;
            operator delete(v34);
          }
          if (v32)
          {
            uint64_t v33 = v32;
            operator delete(v32);
          }
          if (v44)
          {
            int v45 = v44;
            operator delete(v44);
          }
          if (v42)
          {
            int v43 = v42;
            operator delete(v42);
          }
          if (v39)
          {
            int v40 = v39;
            operator delete(v39);
          }
          if (v37)
          {
            int v38 = v37;
            operator delete(v37);
          }
          uint64_t v19 = 1;
          unint64_t v20 = v46;
          if (!v46) {
            return v19;
          }
LABEL_47:
          int v47 = v20;
          operator delete(v20);
          return v19;
        }
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  int v13 = 0;
LABEL_22:
  if (v9 == v13) {
    goto LABEL_50;
  }
LABEL_23:
  uint64_t v7 = v29;
LABEL_24:
  uint64_t v16 = sub_EB0624(v7, v30);
  sub_295BE0((uint64_t)v4, *(void *)(v16 + 32), (unint64_t *)&v46);
  uint64_t v17 = v46;
  int v18 = v47;
  if (v46 != v47)
  {
    while (1)
    {
      if (!v5 || *v17 != v5)
      {
        int v5 = *v17;
        if ((sub_2961A8(v4) & 1) == 0) {
          break;
        }
      }
      if (++v17 == v18)
      {
        sub_1074AC4(&v29);
        goto LABEL_4;
      }
    }
  }
  if (__p)
  {
    uint64_t v28 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  if (v34)
  {
    unint64_t v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v44)
  {
    int v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  uint64_t v19 = 0;
  unint64_t v20 = v46;
  if (v46) {
    goto LABEL_47;
  }
  return v19;
}

void sub_107B774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  unint64_t v30 = *(void **)(v28 - 72);
  if (v30)
  {
    *(void *)(v28 - 64) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_107B7B8()
{
  unk_25FDD77 = 16641;
  word_25FDD60 = 65;
  byte_25FDD8F = 1;
  byte_25FDD79 = 0;
}

void sub_107B7E0(uint64_t a1@<X0>, uint64_t ***a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>)
{
  char v133 = 0;
  uint64_t v132 = 0;
  unint64_t v134 = 0;
  uint64_t v6 = sub_69134(a1);
  long long v128 = *(_OWORD *)v6;
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v8 = *(_OWORD *)(v6 + 32);
  long long v9 = *(_OWORD *)(v6 + 48);
  *(void *)&v131[16] = *(void *)(v6 + 64);
  long long v130 = v8;
  *(_OWORD *)unint64_t v131 = v9;
  long long v129 = v7;
  sub_46B058();
  *(void *)&long long v127 = v10;
  *((void *)&v127 + 1) = v11;
  sub_46B058();
  *(void *)&long long v126 = v12;
  *((void *)&v126 + 1) = v13;
  int v14 = *a2;
  while (1)
  {
    sub_EADA68();
    uint64_t v16 = v15;
    unint64_t v18 = v17;
    uint64_t v19 = (void *)v127;
    if ((void)v127)
    {
      unint64_t v20 = *((void *)&v127 + 1);
      unint64_t v21 = sub_EAE104((void *)v127);
      BOOL v22 = v20 >= v21;
      BOOL v23 = v20 < v21;
      if (!v16)
      {
        if (v22) {
          break;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (!v15) {
        break;
      }
      BOOL v23 = 0;
    }
    unint64_t v24 = sub_EAE104(v16);
    if (v18 < v24 && v23)
    {
      uint64_t v26 = sub_EAE1B8(v19, *((unint64_t *)&v127 + 1));
      if (v26 == sub_EAE1B8(v16, v18)) {
        break;
      }
    }
    else if (v23 == v18 < v24)
    {
      break;
    }
LABEL_17:
    if (v14 == a2[1]) {
      break;
    }
    uint64_t v27 = *((void *)&v127 + 1);
    uint64_t v28 = sub_EAE1B8(v19, *((unint64_t *)&v127 + 1));
    uint64_t v31 = *v14;
    unint64_t v30 = v14[1];
    if (*v14 != v30)
    {
      unsigned int v32 = v31 + 10;
      if (v31 + 10 != v30)
      {
        unint64_t v33 = *(void *)(v28 + 32);
        do
        {
          if (HIDWORD(*v31) == v33 && WORD1(*v31) == WORD2(v33)) {
            int v35 = HIWORD(v33) & 1 ^ ((unint64_t)*v31 >> 1) & 1;
          }
          else {
            int v35 = 0;
          }
          int v36 = 0;
          double v37 = *((double *)v31 + 5);
          unint64_t v38 = *v32;
          if (HIDWORD(*v32) == v33
            && WORD1(v38) == WORD2(v33)
            && (v39 = HIWORD(v33) & 1, v40 = (v38 >> 1) & 1, int v36 = v39 ^ v40, v39 != v40)
            && ((v35 ^ 1) & 1) != 0
            || (v35 & (v36 ^ 1) & 1) == 0
            && ((double v41 = *((double *)v32 + 5), v37 < v41)
             || v41 >= v37
             && (LODWORD(v29) = *((_DWORD *)v31 + 2),
                 double v29 = (double)*(unint64_t *)&v29 / -1000000000.0,
                 LODWORD(v41) = *((_DWORD *)v32 + 2),
                 v29 < (double)*(unint64_t *)&v41 / -1000000000.0)))
          {
            uint64_t v31 = v32;
          }
          v32 += 10;
        }
        while (v32 != v30);
      }
    }
    if (v31 == v30
      || (v42 = *v31, uint64_t v43 = *(void *)(v28 + 32), HIDWORD(*v31) != v43)
      || WORD1(v42) != WORD2(v43)
      || ((v42 >> 1) & 1) != ((v43 & 0x1000000000000) == 0)
      || *((double *)v31 + 5) < a4)
    {
      *((void *)&v127 + 1) = v27 + 1;
    }
    else
    {
      *(void *)&v122[0] = v19;
      *((void *)&v122[0] + 1) = v27 + 1;
      sub_EAD404(&v126, v122, (uint64_t)&v135);
      sub_EAD920((uint64_t)&v135, (uint64_t)&v128);
      int v44 = (long long *)(v31 + 1);
      sub_EADAA8((uint64_t)&v135, (uint64_t)(v31 + 1));
      if (sub_EAE144(&v135)) {
        goto LABEL_102;
      }
      if (sub_EADC78((uint64_t)&v135)
        && (int v45 = (_DWORD *)sub_69134((uint64_t)&v135), *v45 > *(_DWORD *)sub_EADAD0((uint64_t)&v135)))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v122);
          sub_188FC78(v122, (uint64_t)"Single-segment leg has inconsistent origin/destination fraction. Flipping the properties.", 89);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (SBYTE7(v119) < 0) {
            operator delete(__p[0]);
          }
          *(void *)&v122[0] = v116;
          *(void *)((char *)v122 + *(void *)(v116 - 24)) = v115;
          if (v125 < 0) {
            operator delete(v124);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v46 = sub_EADAD0((uint64_t)&v135);
        v122[0] = *(_OWORD *)v46;
        long long v47 = *(_OWORD *)(v46 + 16);
        long long v48 = *(_OWORD *)(v46 + 32);
        long long v49 = *(_OWORD *)(v46 + 48);
        uint64_t v123 = *(void *)(v46 + 64);
        v122[2] = v48;
        v122[3] = v49;
        v122[1] = v47;
        uint64_t v50 = sub_69134((uint64_t)&v135);
        *(_OWORD *)std::string __p = *(_OWORD *)v50;
        long long v51 = *(_OWORD *)(v50 + 16);
        long long v52 = *(_OWORD *)(v50 + 32);
        long long v53 = *(_OWORD *)(v50 + 48);
        *(void *)&v121[16] = *(void *)(v50 + 64);
        long long v120 = v52;
        *(_OWORD *)uint64_t v121 = v53;
        long long v119 = v51;
        if (v132 != v133 && !sub_EADC78((uint64_t)(v133 - 59))) {
          sub_EADAA8((uint64_t)(v133 - 59), (uint64_t)v122);
        }
        sub_EAD920((uint64_t)&v135, (uint64_t)v122);
        sub_EADAA8((uint64_t)&v135, (uint64_t)__p);
        long long v130 = v120;
        *(_OWORD *)unint64_t v131 = *(_OWORD *)v121;
        *(void *)&v131[15] = *(void *)&v121[15];
        long long v128 = *(_OWORD *)__p;
        long long v129 = v119;
      }
      else
      {
        long long v54 = v44[1];
        long long v55 = v44[2];
        long long v56 = v44[3];
        *(void *)&v131[15] = *(void *)((char *)v44 + 63);
        long long v57 = *v44;
        long long v130 = v55;
        *(_OWORD *)unint64_t v131 = v56;
        long long v128 = v57;
        long long v129 = v54;
      }
      if (!sub_EAE460((uint64_t)&v135)) {
        goto LABEL_102;
      }
      int v58 = v133;
      if ((unint64_t)v133 >= v134)
      {
        uint64_t v72 = sub_446BBC((uint64_t *)&v132, &v135);
      }
      else
      {
        long long v59 = v135;
        v133[2] = v136;
        v58[3] = 0;
        *(_OWORD *)int v58 = v59;
        uint64_t v136 = 0;
        long long v135 = 0uLL;
        v58[4] = 0;
        v58[5] = 0;
        *(_OWORD *)(v58 + 3) = v137;
        v58[5] = v138;
        long long v137 = 0uLL;
        uint64_t v138 = 0;
        long long v60 = v139;
        long long v61 = v140;
        long long v62 = v141[0];
        *(_OWORD *)((char *)v58 + 94) = *(_OWORD *)((char *)v141 + 14);
        *((_OWORD *)v58 + 4) = v61;
        *((_OWORD *)v58 + 5) = v62;
        *((_OWORD *)v58 + 3) = v60;
        v58[14] = 0;
        v58[15] = 0;
        v58[16] = 0;
        v58[17] = 0;
        *((_OWORD *)v58 + 7) = v142;
        v58[16] = v143;
        long long v142 = 0uLL;
        uint64_t v143 = 0;
        v58[18] = 0;
        v58[19] = 0;
        *(_OWORD *)(v58 + 17) = v144;
        long long v144 = 0uLL;
        v58[19] = v145;
        v58[20] = 0;
        uint64_t v145 = 0;
        v58[21] = 0;
        v58[22] = 0;
        *((_OWORD *)v58 + 10) = v146;
        v58[22] = v147;
        long long v146 = 0uLL;
        uint64_t v147 = 0;
        long long v63 = v148;
        uint64_t v64 = v150;
        *(_OWORD *)(v58 + 25) = v149;
        *(_OWORD *)(v58 + 23) = v63;
        v58[27] = v64;
        v58[28] = 0;
        v58[29] = 0;
        v58[30] = 0;
        *((_OWORD *)v58 + 14) = v151;
        long long v151 = 0uLL;
        v58[30] = v152;
        v58[31] = 0;
        uint64_t v152 = 0;
        v58[32] = 0;
        v58[33] = 0;
        *(_OWORD *)(v58 + 31) = v153;
        v58[33] = v154;
        long long v153 = 0uLL;
        uint64_t v154 = 0;
        *((_OWORD *)v58 + 17) = v155;
        *((_DWORD *)v58 + 74) = v157;
        if (v157 <= 1) {
          v58[36] = v156;
        }
        *((_OWORD *)v58 + 19) = v158;
        long long v65 = v164;
        long long v67 = v161;
        long long v66 = v162;
        *((_OWORD *)v58 + 24) = v163;
        *((_OWORD *)v58 + 25) = v65;
        *((_OWORD *)v58 + 22) = v67;
        *((_OWORD *)v58 + 23) = v66;
        long long v69 = v166;
        long long v68 = *(_OWORD *)v167;
        long long v70 = v165;
        *(void *)((char *)v58 + 463) = *(void *)&v167[15];
        *((_OWORD *)v58 + 27) = v69;
        *((_OWORD *)v58 + 28) = v68;
        *((_OWORD *)v58 + 26) = v70;
        long long v71 = v160;
        *((_OWORD *)v58 + 20) = v159;
        *((_OWORD *)v58 + 21) = v71;
        uint64_t v72 = (uint64_t)(v58 + 59);
      }
      char v133 = (void *)v72;
      long long v73 = v127;
      sub_EADA68();
      int v75 = v74;
      unint64_t v77 = v76;
      if ((void)v73)
      {
        unint64_t v78 = sub_EAE104((void *)v73);
        BOOL v79 = *((void *)&v73 + 1) < v78;
        if (!v75)
        {
          unint64_t v80 = *((void *)&v73 + 1);
          if (*((void *)&v73 + 1) < v78) {
            goto LABEL_74;
          }
          goto LABEL_75;
        }
      }
      else
      {
        unint64_t v80 = *((void *)&v73 + 1);
        if (!v74) {
          goto LABEL_75;
        }
        BOOL v79 = 0;
      }
      unint64_t v81 = sub_EAE104(v75);
      if (v77 < v81 && v79)
      {
        uint64_t v83 = sub_EAE1B8((void *)v73, *((unint64_t *)&v73 + 1));
        unint64_t v80 = *((void *)&v73 + 1);
        if (v83 == sub_EAE1B8(v75, v77)) {
          goto LABEL_75;
        }
LABEL_74:
        unint64_t v80 = *((void *)&v73 + 1) + 1;
        goto LABEL_75;
      }
      unint64_t v80 = *((void *)&v73 + 1);
      if (v79 != v77 < v81) {
        goto LABEL_74;
      }
LABEL_75:
      sub_EADA68();
      int v85 = v84;
      unint64_t v87 = v86;
      if ((void)v73)
      {
        unint64_t v88 = sub_EAE104((void *)v73);
        BOOL v89 = v80 < v88;
        if (!v85)
        {
          if (v80 >= v88) {
            goto LABEL_93;
          }
          goto LABEL_90;
        }
      }
      else
      {
        if (!v84) {
          goto LABEL_93;
        }
        BOOL v89 = 0;
      }
      unint64_t v90 = sub_EAE104(v85);
      if (v87 < v90 && v89)
      {
        uint64_t v92 = sub_EAE1B8((void *)v73, v80);
        if (v92 == sub_EAE1B8(v85, v87)) {
          goto LABEL_93;
        }
      }
      else if (v89 == v87 < v90)
      {
        goto LABEL_93;
      }
LABEL_90:
      uint64_t v93 = *(void *)(sub_EAE1B8((void *)v73, *((unint64_t *)&v73 + 1)) + 32);
      uint64_t v94 = *(void *)(sub_EAE1B8((void *)v73, v80) + 32);
      if ((v93 & 0xFFFFFFFFFFFFLL) == (v94 & 0xFFFFFFFFFFFFLL)
        && ((v93 & 0xFF000000000000) == 0) != ((v94 & 0x1000000000000) == 0))
      {
        *(void *)&long long v127 = v73;
        *((void *)&v127 + 1) = v80;
        LODWORD(v128) = 1000000000 - v128;
        v131[16] ^= 1u;
        BYTE8(v129) ^= 1u;
      }
LABEL_93:
      long long v126 = v127;
      v14 += 4;
      sub_405F44((uint64_t)&v135);
    }
  }
  if (v14 != a2[1])
  {
    sub_47E0E4(a3);
    uint64_t v95 = v132;
    if (!v132) {
      return;
    }
    goto LABEL_106;
  }
  sub_EADA68();
  *(void *)&v122[0] = v96;
  *((void *)&v122[0] + 1) = v97;
  sub_EAD404(&v127, v122, (uint64_t)&v135);
  sub_EAD920((uint64_t)&v135, (uint64_t)&v128);
  if ((sub_EAE460((uint64_t)&v135) & 1) == 0)
  {
LABEL_102:
    sub_47E0E4(a3);
    goto LABEL_105;
  }
  uint64_t v98 = v133;
  if ((unint64_t)v133 >= v134)
  {
    uint64_t v112 = sub_446BBC((uint64_t *)&v132, &v135);
  }
  else
  {
    long long v99 = v135;
    v133[2] = v136;
    v98[3] = 0;
    *(_OWORD *)uint64_t v98 = v99;
    long long v135 = 0uLL;
    v98[4] = 0;
    v98[5] = 0;
    *(_OWORD *)(v98 + 3) = v137;
    v98[5] = v138;
    uint64_t v136 = 0;
    long long v137 = 0uLL;
    uint64_t v138 = 0;
    long long v100 = v139;
    long long v101 = v140;
    long long v102 = v141[0];
    *(_OWORD *)((char *)v98 + 94) = *(_OWORD *)((char *)v141 + 14);
    *((_OWORD *)v98 + 4) = v101;
    *((_OWORD *)v98 + 5) = v102;
    *((_OWORD *)v98 + 3) = v100;
    v98[14] = 0;
    v98[15] = 0;
    v98[16] = 0;
    v98[17] = 0;
    *((_OWORD *)v98 + 7) = v142;
    v98[16] = v143;
    long long v142 = 0uLL;
    v98[18] = 0;
    v98[19] = 0;
    *(_OWORD *)(v98 + 17) = v144;
    v98[19] = v145;
    v98[20] = 0;
    uint64_t v143 = 0;
    long long v144 = 0uLL;
    uint64_t v145 = 0;
    v98[21] = 0;
    v98[22] = 0;
    *((_OWORD *)v98 + 10) = v146;
    v98[22] = v147;
    long long v146 = 0uLL;
    long long v103 = v148;
    uint64_t v104 = v150;
    *(_OWORD *)(v98 + 25) = v149;
    *(_OWORD *)(v98 + 23) = v103;
    v98[27] = v104;
    v98[28] = 0;
    v98[29] = 0;
    v98[30] = 0;
    *((_OWORD *)v98 + 14) = v151;
    v98[30] = v152;
    v98[31] = 0;
    uint64_t v147 = 0;
    long long v151 = 0uLL;
    uint64_t v152 = 0;
    v98[32] = 0;
    v98[33] = 0;
    *(_OWORD *)(v98 + 31) = v153;
    v98[33] = v154;
    long long v153 = 0uLL;
    uint64_t v154 = 0;
    *((_OWORD *)v98 + 17) = v155;
    *((_DWORD *)v98 + 74) = v157;
    if (v157 <= 1) {
      v98[36] = v156;
    }
    *((_OWORD *)v98 + 19) = v158;
    long long v105 = v164;
    long long v107 = v161;
    long long v106 = v162;
    *((_OWORD *)v98 + 24) = v163;
    *((_OWORD *)v98 + 25) = v105;
    *((_OWORD *)v98 + 22) = v107;
    *((_OWORD *)v98 + 23) = v106;
    long long v108 = *(_OWORD *)v167;
    long long v109 = v166;
    long long v110 = v165;
    *(void *)((char *)v98 + 463) = *(void *)&v167[15];
    *((_OWORD *)v98 + 27) = v109;
    *((_OWORD *)v98 + 28) = v108;
    *((_OWORD *)v98 + 26) = v110;
    long long v111 = v160;
    *((_OWORD *)v98 + 20) = v159;
    *((_OWORD *)v98 + 21) = v111;
    uint64_t v112 = (uint64_t)(v98 + 59);
  }
  char v133 = (void *)v112;
  sub_EA9174((uint64_t)a3, (uint64_t)&v132);
LABEL_105:
  sub_405F44((uint64_t)&v135);
  uint64_t v95 = v132;
  if (!v132) {
    return;
  }
LABEL_106:
  uint64_t v113 = (uint64_t)v133;
  char v114 = v95;
  if (v133 != v95)
  {
    do
      uint64_t v113 = sub_405F44(v113 - 472);
    while ((void *)v113 != v95);
    char v114 = v132;
  }
  char v133 = v95;
  operator delete(v114);
}

void sub_107C360(_Unwind_Exception *a1)
{
}

void sub_107C458(_Unwind_Exception *a1)
{
}

void sub_107C46C(_Unwind_Exception *a1)
{
}

void sub_107C480(uint64_t a1@<X0>, uint64_t **a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>)
{
  double v124 = a4;
  v122[0] = &v123;
  v122[1] = &v124;
  long long v120 = 0;
  long long v119 = 0;
  unint64_t v121 = 0;
  uint64_t v5 = sub_EB22DC(a1);
  long long v115 = *(_OWORD *)v5;
  long long v6 = *(_OWORD *)(v5 + 16);
  long long v7 = *(_OWORD *)(v5 + 32);
  long long v8 = *(_OWORD *)(v5 + 48);
  *(void *)&v118[16] = *(void *)(v5 + 64);
  long long v117 = v7;
  *(_OWORD *)long long v118 = v8;
  long long v116 = v6;
  sub_46B058();
  unint64_t v10 = v9;
  *(void *)&long long v114 = v11;
  *((void *)&v114 + 1) = v9;
  sub_46B058();
  *(void *)&long long v113 = v12;
  *((void *)&v113 + 1) = v13;
  int v14 = *a2;
  while (1)
  {
    sub_EB23DC();
    uint64_t v16 = v15;
    unint64_t v18 = v17;
    uint64_t v19 = v114;
    if ((void)v114)
    {
      unint64_t v20 = sub_EB2E84(v114);
      BOOL v21 = v10 < v20;
      if (!v16)
      {
        if (v10 >= v20) {
          break;
        }
        goto LABEL_15;
      }
    }
    else
    {
      if (!v15) {
        break;
      }
      BOOL v21 = 0;
    }
    unint64_t v22 = sub_EB2E84(v16);
    if (v18 < v22 && v21)
    {
      uint64_t v24 = sub_EB2F38(v19, v10);
      if (v24 == sub_EB2F38(v16, v18)) {
        break;
      }
    }
    else if (v21 == v18 < v22)
    {
      break;
    }
LABEL_15:
    if (v14 == a2[1]) {
      break;
    }
    long double v25 = (int *)sub_EB2F38(v19, v10);
    uint64_t v29 = sub_107D02C((uint64_t)v122, v14, v25, v26, v27, v28);
    if (v14[1] == v29)
    {
      unint64_t v10 = ++*((void *)&v114 + 1);
    }
    else
    {
      unint64_t v10 = *((void *)&v114 + 1);
      uint64_t v30 = v114;
      v109[0] = v114 + __PAIR128__(1, 0);
      uint64_t v101 = *((void *)&v114 + 1) + 1;
      sub_EB1D98((uint64_t *)&v113, (uint64_t *)v109, (uint64_t)&v125);
      sub_EB22B4((uint64_t)&v125, (uint64_t)&v115);
      uint64_t v31 = v29 + 8;
      sub_EB241C((uint64_t)&v125, v31);
      if (sub_EB2EC4((uint64_t)&v125)) {
        goto LABEL_76;
      }
      if (sub_EB29DC((uint64_t)&v125)
        && (unsigned int v32 = (_DWORD *)sub_EB22DC((uint64_t)&v125), *v32 > *(_DWORD *)sub_486CB4((uint64_t)&v125)))
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v109);
          sub_188FC78(v109, (uint64_t)"Single-segment leg has inconsistent origin/destination fraction. Flipping the properties.", 89);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (SBYTE7(v106) < 0) {
            operator delete(__p[0]);
          }
          *(void *)&v109[0] = v103;
          *(void *)((char *)v109 + *(void *)(v103 - 24)) = v102;
          if (v112 < 0) {
            operator delete(v111);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        uint64_t v33 = sub_486CB4((uint64_t)&v125);
        v109[0] = *(_OWORD *)v33;
        long long v34 = *(_OWORD *)(v33 + 16);
        long long v35 = *(_OWORD *)(v33 + 32);
        long long v36 = *(_OWORD *)(v33 + 48);
        uint64_t v110 = *(void *)(v33 + 64);
        v109[2] = v35;
        v109[3] = v36;
        v109[1] = v34;
        uint64_t v37 = sub_EB22DC((uint64_t)&v125);
        *(_OWORD *)std::string __p = *(_OWORD *)v37;
        long long v38 = *(_OWORD *)(v37 + 16);
        long long v39 = *(_OWORD *)(v37 + 32);
        long long v40 = *(_OWORD *)(v37 + 48);
        *(void *)&v108[16] = *(void *)(v37 + 64);
        long long v107 = v39;
        *(_OWORD *)long long v108 = v40;
        long long v106 = v38;
        if (v119 != v120 && !sub_EB29DC((uint64_t)(v120 - 60))) {
          sub_EB241C((uint64_t)(v120 - 60), (uint64_t)v109);
        }
        sub_EB22B4((uint64_t)&v125, (uint64_t)v109);
        sub_EB241C((uint64_t)&v125, (uint64_t)__p);
        long long v117 = v107;
        *(_OWORD *)long long v118 = *(_OWORD *)v108;
        *(void *)&v118[15] = *(void *)&v108[15];
        long long v115 = *(_OWORD *)__p;
        long long v116 = v106;
      }
      else
      {
        long long v41 = *(_OWORD *)(v31 + 16);
        long long v42 = *(_OWORD *)(v31 + 32);
        long long v43 = *(_OWORD *)(v31 + 48);
        *(void *)&v118[15] = *(void *)(v31 + 63);
        long long v44 = *(_OWORD *)v31;
        long long v117 = v42;
        *(_OWORD *)long long v118 = v43;
        long long v115 = v44;
        long long v116 = v41;
      }
      if (!sub_EB3254((uint64_t)&v125)) {
        goto LABEL_76;
      }
      int v45 = v120;
      if ((unint64_t)v120 >= v121)
      {
        uint64_t v59 = sub_CE37BC((uint64_t *)&v119, &v125);
      }
      else
      {
        long long v46 = v125;
        v120[2] = v126;
        v45[3] = 0;
        *(_OWORD *)int v45 = v46;
        uint64_t v126 = 0;
        long long v125 = 0uLL;
        void v45[4] = 0;
        v45[5] = 0;
        *(_OWORD *)(v45 + 3) = v127;
        v45[5] = v128;
        long long v127 = 0uLL;
        uint64_t v128 = 0;
        *((_OWORD *)v45 + 3) = v129;
        long long v47 = v130;
        long long v48 = v131;
        long long v49 = *(_OWORD *)v132;
        *(void *)((char *)v45 + 110) = *(void *)&v132[14];
        *((_OWORD *)v45 + 5) = v48;
        *((_OWORD *)v45 + 6) = v49;
        *((_OWORD *)v45 + 4) = v47;
        v45[15] = 0;
        v45[16] = 0;
        v45[17] = 0;
        v45[18] = 0;
        *(_OWORD *)(v45 + 15) = v133;
        v45[17] = v134;
        long long v133 = 0uLL;
        uint64_t v134 = 0;
        v45[19] = 0;
        v45[20] = 0;
        *((_OWORD *)v45 + 9) = v135;
        long long v135 = 0uLL;
        v45[20] = v136;
        v45[21] = 0;
        uint64_t v136 = 0;
        v45[22] = 0;
        v45[23] = 0;
        *(_OWORD *)(v45 + 21) = v137;
        v45[23] = v138;
        long long v137 = 0uLL;
        uint64_t v138 = 0;
        long long v50 = v140;
        uint64_t v51 = v141;
        *((_OWORD *)v45 + 12) = v139;
        *((_OWORD *)v45 + 13) = v50;
        v45[28] = v51;
        v45[29] = 0;
        v45[30] = 0;
        v45[31] = 0;
        *(_OWORD *)(v45 + 29) = v142;
        long long v142 = 0uLL;
        v45[31] = v143;
        v45[32] = 0;
        uint64_t v143 = 0;
        v45[33] = 0;
        v45[34] = 0;
        *((_OWORD *)v45 + 16) = v144;
        v45[34] = v145;
        long long v144 = 0uLL;
        uint64_t v145 = 0;
        *(_OWORD *)(v45 + 35) = v146;
        *((_DWORD *)v45 + 76) = v148;
        if (v148 <= 1) {
          v45[37] = v147;
        }
        *(_OWORD *)(v45 + 39) = v149;
        long long v52 = v155;
        long long v54 = v152;
        long long v53 = v153;
        *(_OWORD *)(v45 + 49) = v154;
        *(_OWORD *)(v45 + 51) = v52;
        *(_OWORD *)(v45 + 45) = v54;
        *(_OWORD *)(v45 + 47) = v53;
        long long v56 = v157;
        long long v55 = *(_OWORD *)v158;
        long long v57 = v156;
        *(void *)((char *)v45 + 471) = *(void *)&v158[15];
        *(_OWORD *)(v45 + 55) = v56;
        *(_OWORD *)(v45 + 57) = v55;
        *(_OWORD *)(v45 + 53) = v57;
        long long v58 = v151;
        *(_OWORD *)(v45 + 41) = v150;
        *(_OWORD *)(v45 + 43) = v58;
        uint64_t v59 = (uint64_t)(v45 + 60);
      }
      long long v120 = (void *)v59;
      sub_EB23DC();
      uint64_t v61 = v60;
      unint64_t v63 = v62;
      if (v30)
      {
        unint64_t v64 = sub_EB2E84(v30);
        BOOL v65 = v10 < v64;
        if (!v61)
        {
          unint64_t v66 = v10;
          if (v10 < v64) {
            goto LABEL_49;
          }
          goto LABEL_50;
        }
      }
      else
      {
        unint64_t v66 = v10;
        if (!v60) {
          goto LABEL_50;
        }
        BOOL v65 = 0;
      }
      unint64_t v67 = sub_EB2E84(v61);
      if (v63 < v67 && v65)
      {
        uint64_t v69 = sub_EB2F38(v30, v10);
        unint64_t v66 = v10;
        if (v69 == sub_EB2F38(v61, v63)) {
          goto LABEL_50;
        }
LABEL_49:
        unint64_t v66 = v101;
        goto LABEL_50;
      }
      unint64_t v66 = v10;
      if (v65 != v63 < v67) {
        goto LABEL_49;
      }
LABEL_50:
      sub_EB23DC();
      uint64_t v71 = v70;
      unint64_t v73 = v72;
      if (v30)
      {
        unint64_t v74 = sub_EB2E84(v30);
        BOOL v75 = v66 < v74;
        if (!v71)
        {
          if (v66 >= v74) {
            goto LABEL_67;
          }
          goto LABEL_65;
        }
      }
      else
      {
        if (!v70) {
          goto LABEL_67;
        }
        BOOL v75 = 0;
      }
      unint64_t v76 = sub_EB2E84(v71);
      if (v73 < v76 && v75)
      {
        uint64_t v78 = sub_EB2F38(v30, v66);
        if (v78 == sub_EB2F38(v71, v73)) {
          goto LABEL_67;
        }
      }
      else if (v75 == v73 < v76)
      {
        goto LABEL_67;
      }
LABEL_65:
      uint64_t v79 = *(void *)sub_EB2F38(v30, v10);
      unint64_t v80 = *(void *)sub_EB2F38(v30, v66);
      if (__PAIR64__((HIDWORD(v80) & 0x7FFFFFFF | ((v80 >> 62 == 2) << 31)) ^ 0x20000000u, v80) == v79)
      {
        *(void *)&long long v114 = v30;
        *((void *)&v114 + 1) = v66;
        LODWORD(v115) = 1000000000 - v115;
        v118[16] ^= 1u;
        BYTE8(v116) ^= 1u;
        unint64_t v10 = v66;
      }
LABEL_67:
      long long v113 = v114;
      v14 += 4;
      sub_4451C0((uint64_t)&v125);
    }
  }
  if (v14 != a2[1])
  {
    sub_47E0E4(a3);
    unint64_t v81 = v119;
    if (!v119) {
      return;
    }
    goto LABEL_80;
  }
  sub_EB23DC();
  *(void *)&v109[0] = v82;
  *((void *)&v109[0] + 1) = v83;
  sub_EB1D98((uint64_t *)&v114, (uint64_t *)v109, (uint64_t)&v125);
  sub_EB22B4((uint64_t)&v125, (uint64_t)&v115);
  if ((sub_EB3254((uint64_t)&v125) & 1) == 0)
  {
LABEL_76:
    sub_47E0E4(a3);
    goto LABEL_79;
  }
  int v84 = v120;
  if ((unint64_t)v120 >= v121)
  {
    uint64_t v98 = sub_CE37BC((uint64_t *)&v119, &v125);
  }
  else
  {
    long long v85 = v125;
    v120[2] = v126;
    v84[3] = 0;
    *(_OWORD *)int v84 = v85;
    long long v125 = 0uLL;
    v84[4] = 0;
    v84[5] = 0;
    *(_OWORD *)(v84 + 3) = v127;
    v84[5] = v128;
    uint64_t v126 = 0;
    long long v127 = 0uLL;
    uint64_t v128 = 0;
    *((_OWORD *)v84 + 3) = v129;
    long long v86 = v130;
    long long v87 = v131;
    long long v88 = *(_OWORD *)v132;
    *(void *)((char *)v84 + 110) = *(void *)&v132[14];
    *((_OWORD *)v84 + 5) = v87;
    *((_OWORD *)v84 + 6) = v88;
    *((_OWORD *)v84 + 4) = v86;
    v84[15] = 0;
    v84[16] = 0;
    v84[17] = 0;
    v84[18] = 0;
    *(_OWORD *)(v84 + 15) = v133;
    v84[17] = v134;
    long long v133 = 0uLL;
    v84[19] = 0;
    v84[20] = 0;
    *((_OWORD *)v84 + 9) = v135;
    v84[20] = v136;
    v84[21] = 0;
    uint64_t v134 = 0;
    long long v135 = 0uLL;
    uint64_t v136 = 0;
    v84[22] = 0;
    v84[23] = 0;
    *(_OWORD *)(v84 + 21) = v137;
    v84[23] = v138;
    long long v137 = 0uLL;
    long long v89 = v140;
    uint64_t v90 = v141;
    *((_OWORD *)v84 + 12) = v139;
    *((_OWORD *)v84 + 13) = v89;
    v84[28] = v90;
    v84[29] = 0;
    v84[30] = 0;
    v84[31] = 0;
    *(_OWORD *)(v84 + 29) = v142;
    v84[31] = v143;
    v84[32] = 0;
    uint64_t v138 = 0;
    long long v142 = 0uLL;
    uint64_t v143 = 0;
    v84[33] = 0;
    v84[34] = 0;
    *((_OWORD *)v84 + 16) = v144;
    v84[34] = v145;
    long long v144 = 0uLL;
    uint64_t v145 = 0;
    *(_OWORD *)(v84 + 35) = v146;
    *((_DWORD *)v84 + 76) = v148;
    if (v148 <= 1) {
      v84[37] = v147;
    }
    *(_OWORD *)(v84 + 39) = v149;
    long long v91 = v155;
    long long v93 = v152;
    long long v92 = v153;
    *(_OWORD *)(v84 + 49) = v154;
    *(_OWORD *)(v84 + 51) = v91;
    *(_OWORD *)(v84 + 45) = v93;
    *(_OWORD *)(v84 + 47) = v92;
    long long v95 = v157;
    long long v94 = *(_OWORD *)v158;
    long long v96 = v156;
    *(void *)((char *)v84 + 471) = *(void *)&v158[15];
    *(_OWORD *)(v84 + 55) = v95;
    *(_OWORD *)(v84 + 57) = v94;
    *(_OWORD *)(v84 + 53) = v96;
    long long v97 = v151;
    *(_OWORD *)(v84 + 41) = v150;
    *(_OWORD *)(v84 + 43) = v97;
    uint64_t v98 = (uint64_t)(v84 + 60);
  }
  long long v120 = (void *)v98;
  sub_EA8544((uint64_t)a3, (uint64_t)&v119);
LABEL_79:
  sub_4451C0((uint64_t)&v125);
  unint64_t v81 = v119;
  if (!v119) {
    return;
  }
LABEL_80:
  uint64_t v99 = (uint64_t)v120;
  long long v100 = v81;
  if (v120 != v81)
  {
    do
      uint64_t v99 = sub_4451C0(v99 - 480);
    while ((void *)v99 != v81);
    long long v100 = v119;
  }
  long long v120 = v81;
  operator delete(v100);
}

void sub_107CF0C(_Unwind_Exception *a1)
{
}

void sub_107D004(_Unwind_Exception *a1)
{
}

void sub_107D018(_Unwind_Exception *a1)
{
}

uint64_t sub_107D02C(uint64_t a1, uint64_t *a2, int *a3, double a4, double a5, double a6)
{
  uint64_t v8 = *a2;
  uint64_t result = a2[1];
  uint64_t v9 = *a2 + 80;
  if (*a2 != result && v9 != result)
  {
    int v12 = *a3;
    int v13 = a3[1];
    do
    {
      BOOL v15 = *(_DWORD *)v8 == v12
         && (*(_DWORD *)(v8 + 4) & 0xFFFFFFF | (((*(_DWORD *)(v8 + 4) >> 28) & 3) << 29) | (((*(_DWORD *)(v8 + 4) & 0x60000000) == 0x40000000) << 31)) == v13;
      double v16 = *(double *)(v8 + 40);
      BOOL v17 = *(_DWORD *)v9 == v12
         && (*(_DWORD *)(v9 + 4) & 0xFFFFFFF | (((*(_DWORD *)(v9 + 4) >> 28) & 3) << 29) | (((*(_DWORD *)(v9 + 4) & 0x60000000) == 0x40000000) << 31)) == v13;
      int v18 = v17;
      double v19 = *(double *)(v9 + 40);
      if (v17 && !v15
        || (v15 & (v18 ^ 1) & 1) == 0
        && (v16 < v19
         || v19 >= v16
         && (LODWORD(a4) = *(_DWORD *)(v8 + 8),
             a4 = (double)*(unint64_t *)&a4 / -1000000000.0,
             LODWORD(a6) = *(_DWORD *)(v9 + 8),
             a6 = (double)*(unint64_t *)&a6,
             a4 < a6 / -1000000000.0)))
      {
        uint64_t v8 = v9;
      }
      v9 += 80;
    }
    while (v9 != result);
  }
  if (v8 != result
    && *(_DWORD *)v8 == *a3
    && (*(_DWORD *)(v8 + 4) & 0xFFFFFFF | (((*(_DWORD *)(v8 + 4) >> 28) & 3) << 29) | (((*(_DWORD *)(v8 + 4) & 0x60000000) == 0x40000000) << 31)) == a3[1]
    && *(double *)(v8 + 40) >= **(double **)(a1 + 8))
  {
    return v8;
  }
  return result;
}

double sub_107D16C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  sub_EA8DF4(a1, a2);
  sub_46B058();
  v28[0] = v10;
  v28[1] = v11 + a3;
  sub_EB23DC();
  v27[0] = v12;
  v27[1] = v13;
  sub_EB1D98(v28, v27, (uint64_t)v29);
  sub_EA8898((uint64_t)a5, v29);
  sub_4451C0((uint64_t)v29);
  uint64_t v14 = *(void *)nullsub_1(a1);
  BOOL v15 = *(long long **)(nullsub_1(a1) + 8);
  uint64_t v16 = nullsub_1(a5);
  BOOL v17 = (long long *)(v14 + 480 * a2 + 480);
  if (v17 != v15)
  {
    uint64_t v18 = v16;
    double v19 = *(char **)(v16 + 8);
    do
    {
      if ((unint64_t)v19 >= *(void *)(v18 + 16))
      {
        double v19 = sub_F6B480((long long **)v18, v17);
      }
      else
      {
        sub_4456B4(v19, v17);
        v19 += 480;
        *(void *)(v18 + 8) = v19;
      }
      *(void *)(v18 + 8) = v19;
      v17 += 30;
    }
    while (v17 != v15);
  }
  uint64_t v20 = sub_EA8DF4(a5, 0);
  uint64_t v21 = sub_EB22DC(v20);
  v29[0] = *(_OWORD *)v21;
  long long v22 = *(_OWORD *)(v21 + 16);
  long long v23 = *(_OWORD *)(v21 + 32);
  long long v24 = *(_OWORD *)(v21 + 48);
  uint64_t v30 = *(void *)(v21 + 64);
  v29[2] = v23;
  v29[3] = v24;
  v29[1] = v22;
  LODWORD(v29[0]) = a4;
  uint64_t v25 = sub_EA8DF4(a5, 0);
  *(void *)&double result = sub_EB22B4(v25, (uint64_t)v29).n128_u64[0];
  return result;
}

void sub_107D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107D314(_Unwind_Exception *a1)
{
  sub_440ED4(v1);
  _Unwind_Resume(a1);
}

void sub_107D330(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v3;
  sub_440ED4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_107D348(uint64_t a1, void *a2)
{
  BOOL v4 = (int *)sub_EA907C(a1);
  int v5 = *v4;
  int v6 = v4[1];
  unsigned int v7 = *(_DWORD *)sub_EA9054(a1);
  uint64_t v8 = (void *)nullsub_1(a2);
  uint64_t v9 = v8[1] - *v8;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 5);
  while (1)
  {
    uint64_t v12 = sub_EA8DF4(a2, v10);
    uint64_t v13 = sub_EB2E84(v12);
    if (v13) {
      break;
    }
LABEL_3:
    if (++v10 == v11) {
      return 0;
    }
  }
  uint64_t v14 = v13;
  unint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = (_DWORD *)sub_EB2F38(v12, v15);
    BOOL v17 = v5 == *v16 && v6 == v16[1];
    if (v17 && v7 <= sub_EB2FC8(v12, v15) && v7 >= sub_EB2FB4(v12, v15)) {
      break;
    }
    if (v14 == ++v15) {
      goto LABEL_3;
    }
  }
  sub_107D16C(a2, v10, v15, v7, &v38);
  uint64_t v18 = nullsub_1(&v38);
  uint64_t v19 = nullsub_1(a1);
  uint64_t v20 = *(long long **)v18;
  uint64_t v21 = *(long long **)(v18 + 8);
  if (v20 != v21)
  {
    long long v22 = (uint64_t *)v19;
    long long v23 = *(long long **)(v19 + 8);
    do
    {
      long long v23 = sub_1081A5C(v22, (uint64_t)v23, v20) + 30;
      v20 += 30;
    }
    while (v20 != v21);
  }
  if (v41 < 0) {
    operator delete(__p);
  }
  long long v24 = (void **)v38;
  if (v38)
  {
    uint64_t v25 = v39;
    double v26 = v38;
    if (v39 != v38)
    {
      do
      {
        double v27 = *(v25 - 28);
        if (v27)
        {
          *(v25 - 27) = v27;
          operator delete(v27);
        }
        double v28 = *(v25 - 31);
        if (v28)
        {
          *(v25 - 30) = v28;
          operator delete(v28);
        }
        uint64_t v29 = *(v25 - 39);
        if (v29)
        {
          *(v25 - 38) = v29;
          operator delete(v29);
        }
        uint64_t v30 = *(v25 - 42);
        if (v30)
        {
          *(v25 - 41) = v30;
          operator delete(v30);
        }
        uint64_t v31 = (char *)*(v25 - 45);
        if (v31)
        {
          unsigned int v32 = (char *)*(v25 - 44);
          uint64_t v33 = *(v25 - 45);
          if (v32 != v31)
          {
            do
            {
              long long v34 = (void *)*((void *)v32 - 3);
              if (v34)
              {
                *((void *)v32 - 2) = v34;
                operator delete(v34);
              }
              v32 -= 56;
            }
            while (v32 != v31);
            uint64_t v33 = *(v25 - 45);
          }
          *(v25 - 44) = v31;
          operator delete(v33);
        }
        long long v35 = *(v25 - 57);
        if (v35)
        {
          *(v25 - 56) = v35;
          operator delete(v35);
        }
        long long v36 = v25 - 60;
        if (*((char *)v25 - 457) < 0) {
          operator delete(*v36);
        }
        v25 -= 60;
      }
      while (v36 != v24);
      double v26 = v38;
    }
    long long v39 = v24;
    operator delete(v26);
  }
  return 1;
}

void sub_107D5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_107D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_107D5FC(void *a1, void *a2)
{
  if (sub_EAE144(a1) || sub_EAE144(a2))
  {
    BOOL v4 = sub_EAE144(a1);
    return v4 ^ sub_EAE144(a2) ^ 1;
  }
  int v6 = (void *)sub_5231C((uint64_t)a1);
  if (*v6 == v6[1] || *(_DWORD *)sub_69134((uint64_t)a1) != 1000000000)
  {
    sub_46B058();
    uint64_t v8 = v12;
    unint64_t v10 = v13;
    uint64_t v83 = v12;
    unint64_t v84 = v13;
    uint64_t v14 = (void *)sub_5231C((uint64_t)a2);
    if (*v14 == v14[1]) {
      goto LABEL_12;
    }
  }
  else
  {
    sub_46B058();
    uint64_t v8 = v7;
    unint64_t v10 = v9 + 1;
    uint64_t v83 = v7;
    unint64_t v84 = v9 + 1;
    unint64_t v11 = (void *)sub_5231C((uint64_t)a2);
    if (*v11 == v11[1])
    {
LABEL_12:
      sub_46B058();
      uint64_t v16 = v19;
      uint64_t v81 = v20;
      uint64_t v82 = v19;
      uint64_t v21 = (void *)sub_5231C((uint64_t)a1);
      if (*v21 == v21[1]) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)sub_69134((uint64_t)a2) != 1000000000) {
    goto LABEL_12;
  }
  sub_46B058();
  uint64_t v16 = v15 + 1;
  uint64_t v81 = v17;
  uint64_t v82 = v15 + 1;
  uint64_t v18 = (void *)sub_5231C((uint64_t)a1);
  if (*v18 == v18[1])
  {
LABEL_14:
    sub_EADA68();
    long long v23 = v22;
    unint64_t v25 = v24;
    uint64_t v79 = v22;
    unint64_t v80 = v24;
    double v26 = (void *)sub_5231C((uint64_t)a2);
    if (*v26 == v26[1]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_13:
  if (*(_DWORD *)sub_EADAD0((uint64_t)a1)) {
    goto LABEL_14;
  }
  sub_EADA68();
  long long v23 = v27;
  unint64_t v25 = v28 - 1;
  uint64_t v79 = v27;
  unint64_t v80 = v28 - 1;
  uint64_t v29 = (void *)sub_5231C((uint64_t)a2);
  if (*v29 == v29[1]) {
    goto LABEL_18;
  }
LABEL_17:
  if (!*(_DWORD *)sub_EADAD0((uint64_t)a2))
  {
    sub_EADA68();
    uint64_t v77 = v32;
    uint64_t v78 = v33 - 1;
    if (v25 - v10 != v33 - 1 - v16) {
      return 0;
    }
    goto LABEL_21;
  }
LABEL_18:
  sub_EADA68();
  uint64_t v77 = v30;
  uint64_t v78 = v31;
  if (v25 - v10 != v31 - v16) {
    return 0;
  }
LABEL_21:
  if (!v8)
  {
    if (!v23 || v25 >= sub_EAE104(v23)) {
      return sub_EAF7CC((uint64_t)a1, a2);
    }
    goto LABEL_31;
  }
  unint64_t v34 = sub_EAE104(v8);
  unint64_t v35 = v34;
  if (!v23)
  {
    if (v10 < v34) {
      goto LABEL_31;
    }
    return sub_EAF7CC((uint64_t)a1, a2);
  }
  unint64_t v36 = sub_EAE104(v23);
  if (v10 >= v35 || v25 >= v36)
  {
    if (v10 < v35 != v25 < v36) {
      goto LABEL_31;
    }
    return sub_EAF7CC((uint64_t)a1, a2);
  }
  uint64_t v37 = sub_EAE1B8(v8, v10);
  if (v37 == sub_EAE1B8(v23, v25)) {
    return sub_EAF7CC((uint64_t)a1, a2);
  }
LABEL_31:
  if ((sub_107DAA4(&v83, (uint64_t)&v81, (uint64_t)&v79) & 1) == 0)
  {
    uint64_t v38 = sub_69134((uint64_t)a1);
    int v39 = *(_DWORD *)v38;
    uint64_t v40 = *(void *)(v38 + 8);
    double v41 = *(double *)(v38 + 16);
    double v42 = *(double *)(v38 + 32);
    int v69 = *(unsigned __int8 *)(v38 + 24);
    int v70 = *(unsigned __int8 *)(v38 + 40);
    int v71 = *(_DWORD *)(v38 + 48);
    int v72 = *(_DWORD *)(v38 + 52);
    uint64_t v73 = *(void *)(v38 + 56);
    int v74 = *(unsigned __int8 *)(v38 + 64);
    int v65 = *(unsigned __int16 *)(v38 + 66);
    int v63 = *(unsigned __int8 *)(v38 + 68);
    int v61 = *(unsigned __int8 *)(v38 + 69);
    int v59 = *(unsigned __int8 *)(v38 + 70);
    long long v43 = (void *)sub_5231C((uint64_t)a1);
    BOOL v44 = v39 != 1000000000 || *v43 == v43[1];
    int v45 = v44 ? v39 : 0;
    uint64_t v46 = sub_69134((uint64_t)a2);
    int v47 = *(_DWORD *)v46;
    uint64_t v48 = *(void *)(v46 + 8);
    double v49 = *(double *)(v46 + 16);
    int v50 = *(unsigned __int8 *)(v46 + 24);
    double v51 = *(double *)(v46 + 32);
    int v52 = *(unsigned __int8 *)(v46 + 40);
    int v53 = *(_DWORD *)(v46 + 48);
    int v66 = *(_DWORD *)(v46 + 52);
    uint64_t v67 = *(void *)(v46 + 56);
    int v68 = *(unsigned __int8 *)(v46 + 64);
    int v64 = *(unsigned __int16 *)(v46 + 66);
    int v62 = *(unsigned __int8 *)(v46 + 68);
    int v60 = *(unsigned __int8 *)(v46 + 69);
    int v58 = *(unsigned __int8 *)(v46 + 70);
    long long v54 = (void *)sub_5231C((uint64_t)a2);
    BOOL v55 = v47 != 1000000000 || *v54 == v54[1];
    int v56 = v55 ? v47 : 0;
    if (v45 == v56 && v40 == v48)
    {
      BOOL v57 = vabdd_f64(v41, v49) < 2.22044605e-16 || v41 == v49;
      if (v57
        && v69 == v50
        && v42 == v51
        && v70 == v52
        && v71 == v53
        && v72 == v66
        && v73 == v67
        && v74 == v68
        && v65 == v64
        && v63 == v62
        && v61 == v60
        && v59 == v58)
      {
        sub_107DC04((uint64_t)a1, (uint64_t)v76);
        sub_107DC04((uint64_t)a2, (uint64_t)v75);
        return sub_EB45A4((uint64_t)v76, (uint64_t)v75);
      }
    }
  }
  return 0;
}

void *sub_107DAA4(void **a1, uint64_t a2, uint64_t a3)
{
  double result = *a1;
  if (!result) {
    goto LABEL_5;
  }
LABEL_2:
  unsigned int v7 = a1[1];
  unint64_t v8 = sub_EAE104(result);
  BOOL v9 = (unint64_t)v7 < v8;
  unint64_t v10 = *(void **)a3;
  if (*(void *)a3)
  {
    while (1)
    {
      unint64_t v11 = *(void *)(a3 + 8);
      unint64_t v12 = sub_EAE104(v10);
      if (!v9 || v11 >= v12)
      {
        if (v9 == v11 < v12) {
          return 0;
        }
      }
      else
      {
        uint64_t v14 = sub_EAE1B8(*a1, (unint64_t)a1[1]);
        if (v14 == sub_EAE1B8(*(void **)a3, *(void *)(a3 + 8))) {
          return 0;
        }
      }
LABEL_14:
      uint64_t v15 = sub_EAE1B8(*a1, (unint64_t)a1[1]);
      uint64_t v16 = *(void *)(sub_EAE1B8(*(void **)a2, *(void *)(a2 + 8)) + 32);
      if (*(_DWORD *)(v15 + 32) != v16) {
        return (void *)(&def_332C + 1);
      }
      if (*(unsigned __int16 *)(v15 + 36) != WORD2(v16)
        || ((v16 & 0x1000000000000) == 0) != (*(unsigned char *)(v15 + 38) == 0))
      {
        return (void *)(&def_332C + 1);
      }
      a1[1] = (void *)((char *)a1[1] + 1);
      ++*(void *)(a2 + 8);
      double result = *a1;
      if (*a1) {
        goto LABEL_2;
      }
LABEL_5:
      BOOL v9 = 0;
      unint64_t v10 = *(void **)a3;
      if (!*(void *)a3) {
        return result;
      }
    }
  }
  else
  {
    if ((unint64_t)v7 < v8) {
      goto LABEL_14;
    }
    return 0;
  }
}

void *sub_107DC04@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_EADAD0(a1);
  int v5 = *(_DWORD *)v4;
  long long v11 = *(_OWORD *)(v4 + 36);
  long long v12 = *(_OWORD *)(v4 + 52);
  int v13 = *(_DWORD *)(v4 + 68);
  long long v9 = *(_OWORD *)(v4 + 4);
  long long v10 = *(_OWORD *)(v4 + 20);
  double result = (void *)sub_5231C(a1);
  *(_OWORD *)(a2 + 20) = v10;
  *(_OWORD *)(a2 + 36) = v11;
  *(_OWORD *)(a2 + 52) = v12;
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *result == result[1];
  }
  if (v7) {
    int v8 = v5;
  }
  else {
    int v8 = 1000000000;
  }
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 68) = v13;
  *(_OWORD *)(a2 + 4) = v9;
  return result;
}

BOOL sub_107DCA8(void *a1, void *a2)
{
  if (sub_EAE144(a1) || sub_EAE144(a2))
  {
    BOOL v4 = sub_EAE144(a1);
    return v4 ^ sub_EAE144(a2) ^ 1;
  }
  int v6 = (void *)sub_5231C((uint64_t)a1);
  if (*v6 == v6[1] || *(_DWORD *)sub_69134((uint64_t)a1) != 1000000000)
  {
    sub_46B058();
    int v8 = v12;
    unint64_t v10 = v13;
    uint64_t v83 = v12;
    unint64_t v84 = v13;
    uint64_t v14 = (void *)sub_5231C((uint64_t)a2);
    if (*v14 == v14[1]) {
      goto LABEL_12;
    }
  }
  else
  {
    sub_46B058();
    int v8 = v7;
    unint64_t v10 = v9 + 1;
    uint64_t v83 = v7;
    unint64_t v84 = v9 + 1;
    long long v11 = (void *)sub_5231C((uint64_t)a2);
    if (*v11 == v11[1])
    {
LABEL_12:
      sub_46B058();
      uint64_t v16 = v19;
      uint64_t v81 = v20;
      uint64_t v82 = v19;
      uint64_t v21 = (void *)sub_5231C((uint64_t)a1);
      if (*v21 == v21[1]) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)sub_69134((uint64_t)a2) != 1000000000) {
    goto LABEL_12;
  }
  sub_46B058();
  uint64_t v16 = v15 + 1;
  uint64_t v81 = v17;
  uint64_t v82 = v15 + 1;
  uint64_t v18 = (void *)sub_5231C((uint64_t)a1);
  if (*v18 == v18[1])
  {
LABEL_14:
    sub_EAFC0C();
    long long v23 = v22;
    unint64_t v25 = v24;
    uint64_t v79 = v22;
    unint64_t v80 = v24;
    double v26 = (void *)sub_5231C((uint64_t)a2);
    if (*v26 == v26[1]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_13:
  if (*(_DWORD *)sub_EADAD0((uint64_t)a1)) {
    goto LABEL_14;
  }
  sub_EAFC0C();
  long long v23 = v27;
  unint64_t v25 = v28 - 1;
  uint64_t v79 = v27;
  unint64_t v80 = v28 - 1;
  uint64_t v29 = (void *)sub_5231C((uint64_t)a2);
  if (*v29 == v29[1]) {
    goto LABEL_18;
  }
LABEL_17:
  if (!*(_DWORD *)sub_EADAD0((uint64_t)a2))
  {
    sub_EAFC0C();
    uint64_t v77 = v32;
    uint64_t v78 = v33 - 1;
    if (v25 - v10 != v33 - 1 - v16) {
      return 0;
    }
    goto LABEL_21;
  }
LABEL_18:
  sub_EAFC0C();
  uint64_t v77 = v30;
  uint64_t v78 = v31;
  if (v25 - v10 != v31 - v16) {
    return 0;
  }
LABEL_21:
  if (!v8)
  {
    if (!v23 || v25 >= sub_EB04C4(v23)) {
      return sub_EB1870((uint64_t)a1, a2);
    }
    goto LABEL_31;
  }
  unint64_t v34 = sub_EB04C4(v8);
  unint64_t v35 = v34;
  if (!v23)
  {
    if (v10 < v34) {
      goto LABEL_31;
    }
    return sub_EB1870((uint64_t)a1, a2);
  }
  unint64_t v36 = sub_EB04C4(v23);
  if (v10 >= v35 || v25 >= v36)
  {
    if (v10 < v35 != v25 < v36) {
      goto LABEL_31;
    }
    return sub_EB1870((uint64_t)a1, a2);
  }
  uint64_t v37 = sub_EB0624(v8, v10);
  if (v37 == sub_EB0624(v23, v25)) {
    return sub_EB1870((uint64_t)a1, a2);
  }
LABEL_31:
  if ((sub_107E150(&v83, (uint64_t)&v81, (uint64_t)&v79) & 1) == 0)
  {
    uint64_t v38 = sub_69134((uint64_t)a1);
    int v39 = *(_DWORD *)v38;
    uint64_t v40 = *(void *)(v38 + 8);
    double v41 = *(double *)(v38 + 16);
    double v42 = *(double *)(v38 + 32);
    int v69 = *(unsigned __int8 *)(v38 + 24);
    int v70 = *(unsigned __int8 *)(v38 + 40);
    int v71 = *(_DWORD *)(v38 + 48);
    int v72 = *(_DWORD *)(v38 + 52);
    uint64_t v73 = *(void *)(v38 + 56);
    int v74 = *(unsigned __int8 *)(v38 + 64);
    int v65 = *(unsigned __int16 *)(v38 + 66);
    int v63 = *(unsigned __int8 *)(v38 + 68);
    int v61 = *(unsigned __int8 *)(v38 + 69);
    int v59 = *(unsigned __int8 *)(v38 + 70);
    long long v43 = (void *)sub_5231C((uint64_t)a1);
    BOOL v44 = v39 != 1000000000 || *v43 == v43[1];
    int v45 = v44 ? v39 : 0;
    uint64_t v46 = sub_69134((uint64_t)a2);
    int v47 = *(_DWORD *)v46;
    uint64_t v48 = *(void *)(v46 + 8);
    double v49 = *(double *)(v46 + 16);
    int v50 = *(unsigned __int8 *)(v46 + 24);
    double v51 = *(double *)(v46 + 32);
    int v52 = *(unsigned __int8 *)(v46 + 40);
    int v53 = *(_DWORD *)(v46 + 48);
    int v66 = *(_DWORD *)(v46 + 52);
    uint64_t v67 = *(void *)(v46 + 56);
    int v68 = *(unsigned __int8 *)(v46 + 64);
    int v64 = *(unsigned __int16 *)(v46 + 66);
    int v62 = *(unsigned __int8 *)(v46 + 68);
    int v60 = *(unsigned __int8 *)(v46 + 69);
    int v58 = *(unsigned __int8 *)(v46 + 70);
    long long v54 = (void *)sub_5231C((uint64_t)a2);
    BOOL v55 = v47 != 1000000000 || *v54 == v54[1];
    int v56 = v55 ? v47 : 0;
    if (v45 == v56 && v40 == v48)
    {
      BOOL v57 = vabdd_f64(v41, v49) < 2.22044605e-16 || v41 == v49;
      if (v57
        && v69 == v50
        && v42 == v51
        && v70 == v52
        && v71 == v53
        && v72 == v66
        && v73 == v67
        && v74 == v68
        && v65 == v64
        && v63 == v62
        && v61 == v60
        && v59 == v58)
      {
        sub_107DC04((uint64_t)a1, (uint64_t)v76);
        sub_107DC04((uint64_t)a2, (uint64_t)v75);
        return sub_EB45A4((uint64_t)v76, (uint64_t)v75);
      }
    }
  }
  return 0;
}

void *sub_107E150(void **a1, uint64_t a2, uint64_t a3)
{
  double result = *a1;
  if (!result) {
    goto LABEL_5;
  }
LABEL_2:
  BOOL v7 = a1[1];
  unint64_t v8 = sub_EB04C4(result);
  BOOL v9 = (unint64_t)v7 < v8;
  unint64_t v10 = *(void **)a3;
  if (*(void *)a3)
  {
    while (1)
    {
      unint64_t v11 = *(void *)(a3 + 8);
      unint64_t v12 = sub_EB04C4(v10);
      if (!v9 || v11 >= v12)
      {
        if (v9 == v11 < v12) {
          return 0;
        }
      }
      else
      {
        uint64_t v14 = sub_EB0624(*a1, (unint64_t)a1[1]);
        if (v14 == sub_EB0624(*(void **)a3, *(void *)(a3 + 8))) {
          return 0;
        }
      }
LABEL_14:
      uint64_t v15 = sub_EB0624(*a1, (unint64_t)a1[1]);
      uint64_t v16 = *(void *)(sub_EB0624(*(void **)a2, *(void *)(a2 + 8)) + 32);
      if (*(_DWORD *)(v15 + 32) != v16) {
        return (void *)(&def_332C + 1);
      }
      if (*(unsigned __int16 *)(v15 + 36) != WORD2(v16)
        || ((v16 & 0x1000000000000) == 0) != (*(unsigned char *)(v15 + 38) == 0))
      {
        return (void *)(&def_332C + 1);
      }
      a1[1] = (void *)((char *)a1[1] + 1);
      ++*(void *)(a2 + 8);
      double result = *a1;
      if (*a1) {
        goto LABEL_2;
      }
LABEL_5:
      BOOL v9 = 0;
      unint64_t v10 = *(void **)a3;
      if (!*(void *)a3) {
        return result;
      }
    }
  }
  else
  {
    if ((unint64_t)v7 < v8) {
      goto LABEL_14;
    }
    return 0;
  }
}

uint64_t sub_107E2B0(uint64_t a1, uint64_t a2)
{
  if (sub_EB2EC4(a1) || sub_EB2EC4(a2))
  {
    BOOL v4 = sub_EB2EC4(a1);
    return v4 ^ sub_EB2EC4(a2) ^ 1u;
  }
  int v6 = (void *)sub_5231C(a1);
  if (*v6 == v6[1] || *(_DWORD *)sub_EB22DC(a1) != 1000000000)
  {
    sub_46B058();
    uint64_t v8 = v12;
    unint64_t v10 = v13;
    uint64_t v83 = v12;
    unint64_t v84 = v13;
    uint64_t v14 = (void *)sub_5231C(a2);
    if (*v14 == v14[1]) {
      goto LABEL_12;
    }
  }
  else
  {
    sub_46B058();
    uint64_t v8 = v7;
    unint64_t v10 = v9 + 1;
    uint64_t v83 = v7;
    unint64_t v84 = v9 + 1;
    unint64_t v11 = (void *)sub_5231C(a2);
    if (*v11 == v11[1])
    {
LABEL_12:
      sub_46B058();
      uint64_t v16 = v19;
      uint64_t v81 = v20;
      uint64_t v82 = v19;
      uint64_t v21 = (void *)sub_5231C(a1);
      if (*v21 == v21[1]) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)sub_EB22DC(a2) != 1000000000) {
    goto LABEL_12;
  }
  sub_46B058();
  uint64_t v16 = v15 + 1;
  uint64_t v81 = v17;
  uint64_t v82 = v15 + 1;
  uint64_t v18 = (void *)sub_5231C(a1);
  if (*v18 == v18[1])
  {
LABEL_14:
    sub_EB23DC();
    uint64_t v23 = v22;
    unint64_t v25 = v24;
    uint64_t v79 = v22;
    unint64_t v80 = v24;
    double v26 = (void *)sub_5231C(a2);
    if (*v26 == v26[1]) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_13:
  if (*(_DWORD *)sub_486CB4(a1)) {
    goto LABEL_14;
  }
  sub_EB23DC();
  uint64_t v23 = v27;
  unint64_t v25 = v28 - 1;
  uint64_t v79 = v27;
  unint64_t v80 = v28 - 1;
  uint64_t v29 = (void *)sub_5231C(a2);
  if (*v29 == v29[1]) {
    goto LABEL_18;
  }
LABEL_17:
  if (!*(_DWORD *)sub_486CB4(a2))
  {
    sub_EB23DC();
    uint64_t v77 = v32;
    uint64_t v78 = v33 - 1;
    if (v25 - v10 != v33 - 1 - v16) {
      return 0;
    }
    goto LABEL_21;
  }
LABEL_18:
  sub_EB23DC();
  uint64_t v77 = v30;
  uint64_t v78 = v31;
  if (v25 - v10 != v31 - v16) {
    return 0;
  }
LABEL_21:
  if (!v8)
  {
    if (!v23 || v25 >= sub_EB2E84(v23)) {
      return sub_EB4344(a1, a2);
    }
    goto LABEL_31;
  }
  unint64_t v34 = sub_EB2E84(v8);
  unint64_t v35 = v34;
  if (!v23)
  {
    if (v10 < v34) {
      goto LABEL_31;
    }
    return sub_EB4344(a1, a2);
  }
  unint64_t v36 = sub_EB2E84(v23);
  if (v10 >= v35 || v25 >= v36)
  {
    if (v10 < v35 != v25 < v36) {
      goto LABEL_31;
    }
    return sub_EB4344(a1, a2);
  }
  uint64_t v37 = sub_EB2F38(v8, v10);
  if (v37 == sub_EB2F38(v23, v25)) {
    return sub_EB4344(a1, a2);
  }
LABEL_31:
  if ((sub_107E758((uint64_t)&v83, (uint64_t)&v81, (uint64_t)&v79) & 1) == 0)
  {
    uint64_t v38 = sub_EB22DC(a1);
    int v39 = *(_DWORD *)v38;
    uint64_t v40 = *(void *)(v38 + 8);
    double v41 = *(double *)(v38 + 16);
    double v42 = *(double *)(v38 + 32);
    int v69 = *(unsigned __int8 *)(v38 + 24);
    int v70 = *(unsigned __int8 *)(v38 + 40);
    int v71 = *(_DWORD *)(v38 + 48);
    int v72 = *(_DWORD *)(v38 + 52);
    uint64_t v73 = *(void *)(v38 + 56);
    int v74 = *(unsigned __int8 *)(v38 + 64);
    int v65 = *(unsigned __int16 *)(v38 + 66);
    int v63 = *(unsigned __int8 *)(v38 + 68);
    int v61 = *(unsigned __int8 *)(v38 + 69);
    int v59 = *(unsigned __int8 *)(v38 + 70);
    long long v43 = (void *)sub_5231C(a1);
    BOOL v44 = v39 != 1000000000 || *v43 == v43[1];
    int v45 = v44 ? v39 : 0;
    uint64_t v46 = sub_EB22DC(a2);
    int v47 = *(_DWORD *)v46;
    uint64_t v48 = *(void *)(v46 + 8);
    double v49 = *(double *)(v46 + 16);
    int v50 = *(unsigned __int8 *)(v46 + 24);
    double v51 = *(double *)(v46 + 32);
    int v52 = *(unsigned __int8 *)(v46 + 40);
    int v53 = *(_DWORD *)(v46 + 48);
    int v66 = *(_DWORD *)(v46 + 52);
    uint64_t v67 = *(void *)(v46 + 56);
    int v68 = *(unsigned __int8 *)(v46 + 64);
    int v64 = *(unsigned __int16 *)(v46 + 66);
    int v62 = *(unsigned __int8 *)(v46 + 68);
    int v60 = *(unsigned __int8 *)(v46 + 69);
    int v58 = *(unsigned __int8 *)(v46 + 70);
    long long v54 = (void *)sub_5231C(a2);
    BOOL v55 = v47 != 1000000000 || *v54 == v54[1];
    int v56 = v55 ? v47 : 0;
    if (v45 == v56 && v40 == v48)
    {
      BOOL v57 = vabdd_f64(v41, v49) < 2.22044605e-16 || v41 == v49;
      if (v57
        && v69 == v50
        && v42 == v51
        && v70 == v52
        && v71 == v53
        && v72 == v66
        && v73 == v67
        && v74 == v68
        && v65 == v64
        && v63 == v62
        && v61 == v60
        && v59 == v58)
      {
        sub_107E89C(a1, (uint64_t)v76);
        sub_107E89C(a2, (uint64_t)v75);
        return sub_EB45A4((uint64_t)v76, (uint64_t)v75);
      }
    }
  }
  return 0;
}

uint64_t sub_107E758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)a1;
  if (!result) {
    goto LABEL_5;
  }
LABEL_2:
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = sub_EB2E84(result);
  BOOL v9 = v7 < v8;
  uint64_t v10 = *(void *)a3;
  if (*(void *)a3)
  {
    while (1)
    {
      unint64_t v11 = *(void *)(a3 + 8);
      unint64_t v12 = sub_EB2E84(v10);
      if (!v9 || v11 >= v12)
      {
        if (v9 == v11 < v12) {
          return 0;
        }
      }
      else
      {
        uint64_t v14 = sub_EB2F38(*(void *)a1, *(void *)(a1 + 8));
        if (v14 == sub_EB2F38(*(void *)a3, *(void *)(a3 + 8))) {
          return 0;
        }
      }
LABEL_14:
      uint64_t v15 = (_DWORD *)sub_EB2F38(*(void *)a1, *(void *)(a1 + 8));
      uint64_t v16 = (void *)sub_EB2F38(*(void *)a2, *(void *)(a2 + 8));
      if (*v15 != *v16) {
        return 1;
      }
      if (v15[1] != HIDWORD(*v16)) {
        return 1;
      }
      ++*(void *)(a1 + 8);
      ++*(void *)(a2 + 8);
      uint64_t result = *(void *)a1;
      if (*(void *)a1) {
        goto LABEL_2;
      }
LABEL_5:
      BOOL v9 = 0;
      uint64_t v10 = *(void *)a3;
      if (!*(void *)a3) {
        return result;
      }
    }
  }
  else
  {
    if (v7 < v8) {
      goto LABEL_14;
    }
    return 0;
  }
}

void *sub_107E89C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_486CB4(a1);
  int v5 = *(_DWORD *)v4;
  long long v11 = *(_OWORD *)(v4 + 36);
  long long v12 = *(_OWORD *)(v4 + 52);
  int v13 = *(_DWORD *)(v4 + 68);
  long long v9 = *(_OWORD *)(v4 + 4);
  long long v10 = *(_OWORD *)(v4 + 20);
  uint64_t result = (void *)sub_5231C(a1);
  *(_OWORD *)(a2 + 20) = v10;
  *(_OWORD *)(a2 + 36) = v11;
  *(_OWORD *)(a2 + 52) = v12;
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *result == result[1];
  }
  if (v7) {
    int v8 = v5;
  }
  else {
    int v8 = 1000000000;
  }
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 68) = v13;
  *(_OWORD *)(a2 + 4) = v9;
  return result;
}

BOOL sub_107E940(void *a1, void *a2)
{
  unint64_t v4 = sub_EA8440(a1);
  if (v4 != sub_EA8440(a2)) {
    return 0;
  }
  int v5 = (void *)sub_40EFE8((uint64_t)a1);
  int v6 = (void *)sub_40EFE8((uint64_t)a2);
  uint64_t v7 = sub_52058((uint64_t)a1);
  sub_52058((uint64_t)a2);
  if (v5 == (void *)v7) {
    return 1;
  }
  do
  {
    BOOL result = sub_107D5FC(v5, v6);
    if (!result) {
      break;
    }
    v5 += 59;
    v6 += 59;
  }
  while (v5 != (void *)v7);
  return result;
}

BOOL sub_107EA00(void *a1, void *a2)
{
  unint64_t v4 = sub_EA8440(a1);
  if (v4 != sub_EA8440(a2)) {
    return 0;
  }
  int v5 = (void *)sub_40EFE8((uint64_t)a1);
  int v6 = (void *)sub_40EFE8((uint64_t)a2);
  uint64_t v7 = sub_52058((uint64_t)a1);
  sub_52058((uint64_t)a2);
  if (v5 == (void *)v7) {
    return 1;
  }
  do
  {
    BOOL result = sub_107DCA8(v5, v6);
    if (!result) {
      break;
    }
    v5 += 59;
    v6 += 59;
  }
  while (v5 != (void *)v7);
  return result;
}

uint64_t sub_107EAC0(void *a1, void *a2)
{
  unint64_t v4 = sub_EA9088(a1);
  if (v4 != sub_EA9088(a2)) {
    return 0;
  }
  uint64_t v5 = sub_40EFE8((uint64_t)a1);
  uint64_t v6 = sub_40EFE8((uint64_t)a2);
  uint64_t v7 = sub_52058((uint64_t)a1);
  sub_52058((uint64_t)a2);
  if (v5 == v7) {
    return 1;
  }
  do
  {
    uint64_t result = sub_107E2B0(v5, v6);
    if (!result) {
      break;
    }
    v5 += 480;
    v6 += 480;
  }
  while (v5 != v7);
  return result;
}

uint64_t sub_107EB80(char **a1, int a2)
{
  uint64_t result = sub_EA80FC(a1);
  if ((result & 1) == 0)
  {
    int v21 = 0;
    uint64_t v5 = (uint64_t *)nullsub_1(a1);
    sub_EADD60(*v5, &v21);
    unsigned int v6 = sub_EA8440(a1);
    unsigned int v7 = v6;
    if (a2) {
      int v8 = v6;
    }
    else {
      int v8 = 1;
    }
    int v20 = v8;
    uint64_t v9 = nullsub_1(a1);
    uint64_t result = sub_EADD6C(*(void *)(v9 + 8) - 472, &v20);
    if (v7 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = v7;
    }
    if (v7 >= 2)
    {
      if (a2)
      {
        uint64_t v11 = 0;
        unsigned int v12 = 1;
        do
        {
          int v19 = v12;
          int v13 = (void *)nullsub_1(a1);
          sub_EADD6C(*v13 + v11, &v19);
          uint64_t v14 = (void *)nullsub_1(a1);
          uint64_t result = sub_EADD60(*v14 + 472 * v12++, &v19);
          v11 += 472;
        }
        while (v10 != v12);
      }
      else
      {
        uint64_t v15 = 0;
        unsigned int v16 = 1;
        do
        {
          int v19 = -1;
          uint64_t v17 = (void *)nullsub_1(a1);
          sub_EADD6C(*v17 + v15, &v19);
          uint64_t v18 = (void *)nullsub_1(a1);
          uint64_t result = sub_EADD60(*v18 + 472 * v16++, &v19);
          v15 += 472;
        }
        while (v10 != v16);
      }
    }
  }
  return result;
}

uint64_t sub_107ECC8(uint64_t *a1, int a2)
{
  uint64_t result = sub_EA8E90(a1);
  if ((result & 1) == 0)
  {
    int v21 = 0;
    uint64_t v5 = (uint64_t *)nullsub_1(a1);
    sub_EB2AE0(*v5, &v21);
    unsigned int v6 = sub_EA9088(a1);
    unsigned int v7 = v6;
    if (a2) {
      int v8 = v6;
    }
    else {
      int v8 = 1;
    }
    int v20 = v8;
    uint64_t v9 = nullsub_1(a1);
    uint64_t result = sub_EB2AEC(*(void *)(v9 + 8) - 480, &v20);
    if (v7 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = v7;
    }
    if (v7 >= 2)
    {
      if (a2)
      {
        uint64_t v11 = 0;
        unsigned int v12 = 1;
        do
        {
          int v19 = v12;
          int v13 = (void *)nullsub_1(a1);
          sub_EB2AEC(*v13 + v11, &v19);
          uint64_t v14 = (void *)nullsub_1(a1);
          uint64_t result = sub_EB2AE0(*v14 + 480 * v12++, &v19);
          v11 += 480;
        }
        while (v10 != v12);
      }
      else
      {
        uint64_t v15 = 0;
        unsigned int v16 = 1;
        do
        {
          int v19 = -1;
          uint64_t v17 = (void *)nullsub_1(a1);
          sub_EB2AEC(*v17 + v15, &v19);
          uint64_t v18 = (void *)nullsub_1(a1);
          uint64_t result = sub_EB2AE0(*v18 + 480 * v16++, &v19);
          v15 += 480;
        }
        while (v10 != v16);
      }
    }
  }
  return result;
}

uint64_t sub_107EE10(uint64_t a1, int a2)
{
  unint64_t v4 = (char **)sub_40EFE8(a1);
  uint64_t result = sub_52058(a1);
  if (v4 != (char **)result)
  {
    unsigned int v6 = (char **)result;
    do
    {
      uint64_t result = sub_107EB80(v4, a2);
      v4 += 6;
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t sub_107EE70(uint64_t a1, int a2)
{
  unint64_t v4 = (uint64_t *)sub_40EFE8(a1);
  uint64_t result = sub_52058(a1);
  if (v4 != (uint64_t *)result)
  {
    unsigned int v6 = (uint64_t *)result;
    do
    {
      uint64_t result = sub_107ECC8(v4, a2);
      v4 += 6;
    }
    while (v4 != v6);
  }
  return result;
}

unint64_t sub_107EED0(int **a1, int **a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, int a10, unsigned int a11, int a12, unsigned int a13, uint64_t a14, void *a15)
{
  int v51 = a8;
  uint64_t v23 = sub_3750CC(a15);
  __int16 v50 = -1;
  sub_456C((uint64_t)v49, a8);
  if (a1 == a2)
  {
    unint64_t v26 = a3;
  }
  else
  {
    v48[0] = v23;
    v48[1] = &v51;
    v48[2] = &v50;
    v48[3] = v49;
    sub_107F25C((uint64_t)v48, (uint64_t)a1);
    uint64_t v47 = a6;
    int v46 = a7;
    unint64_t v24 = sub_EC9DF4(a5, a1, a11, a6, v49, a7);
    unint64_t v26 = v24;
    uint64_t v27 = v25;
    if (v24 != -1 && (v24 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000 && v25 != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v28 = HIDWORD(v24);
      if (sub_488C(v49))
      {
        v52[0] = v28;
        sub_560C(v49, v52);
      }
      uint64_t v29 = (a3 + v26);
      uint64_t v30 = (HIDWORD(a3) + v28);
      uint64_t v31 = v27 + a4;
      if (v29 == -1 || v30 == 0x7FFFFFFF || v31 == 0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v26 = v29 | (v30 << 32);
      }
      else
      {
        int v32 = v28 + a9;
        uint64_t v33 = a1 + 12;
        LODWORD(v34) = v29;
        uint64_t v35 = v31;
        while (v33 != a2)
        {
          sub_107F25C((uint64_t)v48, (uint64_t)v33);
          unint64_t v36 = sub_EC9DF4(a5, v33, 0x3B9ACA00u, v47, v49, v46);
          unint64_t v26 = v36;
          uint64_t v38 = v37;
          if (v36 == -1 || (v36 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000 || v37 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_22;
          }
          unint64_t v39 = HIDWORD(v36);
          if (sub_488C(v49))
          {
            v52[0] = v39;
            sub_560C(v49, v52);
          }
          uint64_t v34 = (v34 + v26);
          uint64_t v30 = (v30 + v39);
          v35 += v38;
          if (v34 != -1 && v30 != 0x7FFFFFFF)
          {
            v32 += v39;
            v33 += 12;
            if (v35 != 0x7FFFFFFFFFFFFFFFLL) {
              continue;
            }
          }
          unint64_t v26 = v34 | (v30 << 32);
          goto LABEL_22;
        }
        sub_107F25C((uint64_t)v48, (uint64_t)(v33 - 7));
        sub_ECBC00(a5, v33 - 7, v47, v49, v46);
        double v42 = v41;
        int v43 = sub_4F44(v49);
        unint64_t v44 = sub_ECA410(a5, v33 - 7, a13, v47, v43, v46, v42);
        unint64_t v26 = v44;
        if (v44 != -1 && HIDWORD(v44) != 0x7FFFFFFF && v45 != 0x7FFFFFFFFFFFFFFFLL) {
          unint64_t v26 = (v34 + v44) | ((unint64_t)(v30 + HIDWORD(v44)) << 32);
        }
      }
    }
  }
LABEL_22:
  sub_4814((uint64_t)v49);
  return v26;
}

void sub_107F1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_107F25C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (const void **)sub_2D5D58(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32));
  uint64_t v5 = (unsigned __int16 *)((char *)result - *(int *)result);
  if (*v5 < 0xDu)
  {
    LODWORD(v6) = 0;
    if (**(_DWORD **)(a1 + 8) == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = v5[6];
  if (v6) {
    LODWORD(v6) = *(unsigned __int16 *)((char *)result + v6);
  }
  if (**(_DWORD **)(a1 + 8) != 0x7FFFFFFF)
  {
LABEL_7:
    unsigned int v7 = *(_WORD **)(a1 + 16);
    int v8 = (unsigned __int16)*v7;
    if (v8 == 0xFFFF || v6 != v8)
    {
      *unsigned int v7 = v6;
      uint64_t v10 = *(void *)(a1 + 24);
      sub_3BDCD8(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32), __p);
      unint64_t v11 = v14;
      if ((v14 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if (v11) {
        sub_26A18((uint64_t)v12, (const char *)__p);
      }
      else {
        sub_26908((uint64_t)v12);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      sub_48B4(v10, v12);
      return sub_26C4C((const void **)v12);
    }
  }
  return result;
}

void sub_107F390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_107F3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_107F3C0(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9, int a10, unsigned int a11, int a12, unsigned int a13, uint64_t a14, void *a15)
{
  int v53 = a8;
  uint64_t v23 = sub_3750CC(a15);
  __int16 v52 = -1;
  sub_456C((uint64_t)v51, a8);
  if (a1 == a2)
  {
    unint64_t v27 = a3;
  }
  else
  {
    v50[0] = v23;
    v50[1] = &v53;
    v50[2] = &v52;
    v50[3] = v51;
    unint64_t v24 = (int **)*a1;
    sub_107F774((uint64_t)v50, *a1);
    uint64_t v49 = a5;
    unint64_t v25 = sub_EC9DF4(a5, v24, a11, a6, v51, a7);
    unint64_t v27 = v25;
    uint64_t v28 = v26;
    if (v25 != -1 && (v25 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
    {
      uint64_t v47 = a6;
      int v48 = a7;
      if (v26 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v29 = HIDWORD(v25);
        if (sub_488C(v51))
        {
          v54[0] = v29;
          sub_560C(v51, v54);
        }
        uint64_t v30 = (a3 + v27);
        uint64_t v31 = (HIDWORD(a3) + v29);
        uint64_t v32 = v28 + a4;
        if (v30 == -1 || v31 == 0x7FFFFFFF || v32 == 0x7FFFFFFFFFFFFFFFLL)
        {
          unint64_t v27 = v30 | (v31 << 32);
        }
        else
        {
          uint64_t v33 = a1 + 1;
          if (a1 + 1 == a2)
          {
            LODWORD(v36) = v31;
            LODWORD(v35) = v30;
            uint64_t v37 = v49;
LABEL_28:
            sub_107F774((uint64_t)v50, (uint64_t)(v24 + 5));
            sub_ECBC00(v37, v24 + 5, v47, v51, v48);
            double v43 = v42;
            int v44 = sub_4F44(v51);
            unint64_t v45 = sub_ECA410(v37, v24 + 5, a13, v47, v44, v48, v43);
            unint64_t v27 = v45;
            if (v45 != -1 && HIDWORD(v45) != 0x7FFFFFFF && v46 != 0x7FFFFFFFFFFFFFFFLL) {
              unint64_t v27 = (v35 + v45) | ((unint64_t)(v36 + HIDWORD(v45)) << 32);
            }
          }
          else
          {
            int v34 = v29 + a9;
            LODWORD(v35) = v30;
            LODWORD(v36) = v31;
            uint64_t v37 = v49;
            while (1)
            {
              unint64_t v24 = (int **)*v33;
              sub_107F774((uint64_t)v50, *v33);
              unint64_t v27 = sub_EC9DF4(v37, v24, 0x3B9ACA00u, v47, v51, v48);
              uint64_t v39 = v38;
              BOOL v40 = v27 == -1 || (v27 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000;
              if (v40 || v38 == 0x7FFFFFFFFFFFFFFFLL) {
                break;
              }
              if (sub_488C(v51))
              {
                v54[0] = HIDWORD(v27);
                sub_560C(v51, v54);
              }
              uint64_t v35 = (v35 + v27);
              uint64_t v36 = (v36 + HIDWORD(v27));
              v32 += v39;
              if (v35 == -1 || v36 == 0x7FFFFFFF || v32 == 0x7FFFFFFFFFFFFFFFLL)
              {
                unint64_t v27 = v35 | (v36 << 32);
                break;
              }
              v34 += HIDWORD(v27);
              ++v33;
              uint64_t v37 = v49;
              if (v33 == a2) {
                goto LABEL_28;
              }
            }
          }
        }
      }
    }
  }
  sub_4814((uint64_t)v51);
  return v27;
}

void sub_107F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107F760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_107F774(uint64_t a1, uint64_t a2)
{
  uint64_t result = (const void **)sub_2D5D58(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32));
  uint64_t v5 = (unsigned __int16 *)((char *)result - *(int *)result);
  if (*v5 < 0xDu)
  {
    LODWORD(v6) = 0;
    if (**(_DWORD **)(a1 + 8) == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = v5[6];
  if (v6) {
    LODWORD(v6) = *(unsigned __int16 *)((char *)result + v6);
  }
  if (**(_DWORD **)(a1 + 8) != 0x7FFFFFFF)
  {
LABEL_7:
    unsigned int v7 = *(_WORD **)(a1 + 16);
    int v8 = (unsigned __int16)*v7;
    if (v8 == 0xFFFF || v6 != v8)
    {
      *unsigned int v7 = v6;
      uint64_t v10 = *(void *)(a1 + 24);
      sub_3BDCD8(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32), __p);
      unint64_t v11 = v14;
      if ((v14 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if (v11) {
        sub_26A18((uint64_t)v12, (const char *)__p);
      }
      else {
        sub_26908((uint64_t)v12);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      sub_48B4(v10, v12);
      return sub_26C4C((const void **)v12);
    }
  }
  return result;
}

void sub_107F8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_107F8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_107F8D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, uint64_t a12, void *a13)
{
  int v52 = a7;
  uint64_t v21 = sub_3750CC(a13);
  unint64_t v51 = a3;
  __int16 v50 = -1;
  sub_456C((uint64_t)v49, a7);
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)) {
    goto LABEL_42;
  }
  v48[0] = v21;
  v48[1] = &v52;
  v48[2] = &v50;
  v48[3] = v49;
  uint64_t v22 = *(unsigned int **)(a1 + 16);
  sub_107FD5C((uint64_t)v48, (uint64_t)(v22 + 2));
  LODWORD(v46) = sub_35E640();
  unint64_t v23 = sub_ECA218((int *)&v46, (uint64_t)v22, a9, *a4, a5, a6, v49);
  unint64_t v47 = v46 | (v23 << 32);
  BOOL v24 = sub_488C(&v47);
  if (HIDWORD(v47) == 0x7FFFFFFF || !v24)
  {
    a3 = v47;
    goto LABEL_42;
  }
  HIDWORD(v51) += HIDWORD(v47);
  sub_ECA2C4(&v51, &v47);
  int v26 = HIDWORD(v47);
  if (sub_488C(v49))
  {
    LODWORD(v46) = HIDWORD(v47);
    sub_560C(v49, (int *)&v46);
  }
  BOOL v27 = sub_488C(&v51);
  if (HIDWORD(v51) == 0x7FFFFFFF || !v27)
  {
LABEL_37:
    a3 = v51;
    goto LABEL_42;
  }
  unint64_t v29 = *(void **)a1;
  uint64_t v30 = **(unsigned int **)(a1 + 16);
  if (*(_DWORD *)(v29[21] + 4 * v30) != 1)
  {
    uint64_t v31 = 0;
    int v32 = v26 + a8;
    int v33 = *(_DWORD *)(a2 + 8);
    int v34 = *(unsigned __int8 *)(a2 + 24);
    if (v30 != v33) {
      goto LABEL_26;
    }
    goto LABEL_18;
  }
  sub_EC06EC((uint64_t)v29, v30);
  uint64_t v31 = v29[15] + 104 * *(unsigned int *)(v29[12] + 4 * v30);
  int v32 = v26 + a8;
  int v33 = *(_DWORD *)(a2 + 8);
  int v34 = *(unsigned __int8 *)(a2 + 24);
  if (v30 == v33)
  {
LABEL_18:
    if (v34) {
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v35 = (int **)(v22 + 12);
    sub_107FD5C((uint64_t)v48, (uint64_t)v35);
    unsigned int v53 = sub_35E640();
    unint64_t v36 = sub_ECA158((int *)&v53, v35, a11, *a4, a5, a6, v49);
    unint64_t v46 = v53 | (v36 << 32);
    BOOL v37 = sub_488C(&v46);
    if (HIDWORD(v46) != 0x7FFFFFFF && v37)
    {
      HIDWORD(v51) += HIDWORD(v46);
      sub_ECA2C4(&v51, &v46);
      a3 = v51;
    }
    else
    {
      a3 = v46;
    }
    goto LABEL_42;
  }
  while (1)
  {
LABEL_26:
    uint64_t v22 = (unsigned int *)v31;
    sub_107FD5C((uint64_t)v48, v31 + 8);
    unsigned int v53 = sub_35E640();
    unint64_t v39 = sub_ECA218((int *)&v53, (uint64_t)v22, 0x3B9ACA00u, *a4, a5, a6, v49);
    unint64_t v46 = v53 | (v39 << 32);
    BOOL v40 = sub_488C(&v46);
    if (HIDWORD(v46) == 0x7FFFFFFF || !v40)
    {
      int v44 = &v46;
      goto LABEL_41;
    }
    HIDWORD(v51) += HIDWORD(v46);
    sub_ECA2C4(&v51, &v46);
    int v42 = HIDWORD(v46);
    if (sub_488C(v49))
    {
      unsigned int v53 = HIDWORD(v46);
      sub_560C(v49, (int *)&v53);
    }
    if (!sub_488C(&v51)) {
      break;
    }
    if (HIDWORD(v51) == 0x7FFFFFFF) {
      goto LABEL_37;
    }
    uint64_t v43 = *v22;
    if (*(_DWORD *)(v29[21] + 4 * v43) == 1)
    {
      sub_EC06EC((uint64_t)v29, *v22);
      uint64_t v31 = v29[15] + 104 * *(unsigned int *)(v29[12] + 4 * v43);
      v32 += v42;
      if (v43 == v33) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v31 = 0;
      v32 += v42;
      if (v43 == v33)
      {
LABEL_25:
        if (!v34) {
          goto LABEL_19;
        }
      }
    }
  }
  int v44 = &v51;
LABEL_41:
  a3 = *v44;
LABEL_42:
  sub_4814((uint64_t)v49);
  return a3;
}

void sub_107FCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107FCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107FCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107FD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107FD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_107FD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_107FD5C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (const void **)sub_2D5D58(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32));
  uint64_t v5 = (unsigned __int16 *)((char *)result - *(int *)result);
  if (*v5 < 0xDu)
  {
    LODWORD(v6) = 0;
    if (**(_DWORD **)(a1 + 8) == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = v5[6];
  if (v6) {
    LODWORD(v6) = *(unsigned __int16 *)((char *)result + v6);
  }
  if (**(_DWORD **)(a1 + 8) != 0x7FFFFFFF)
  {
LABEL_7:
    unsigned int v7 = *(_WORD **)(a1 + 16);
    int v8 = (unsigned __int16)*v7;
    if (v8 == 0xFFFF || v6 != v8)
    {
      *unsigned int v7 = v6;
      uint64_t v10 = *(void *)(a1 + 24);
      sub_3BDCD8(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32), __p);
      unint64_t v11 = v14;
      if ((v14 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if (v11) {
        sub_26A18((uint64_t)v12, (const char *)__p);
      }
      else {
        sub_26908((uint64_t)v12);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      sub_48B4(v10, v12);
      return sub_26C4C((const void **)v12);
    }
  }
  return result;
}

void sub_107FE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_107FEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_107FEC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, int a6, int a7, int a8, unsigned int a9, int a10, unsigned int a11, uint64_t a12, void *a13)
{
  int v51 = a7;
  uint64_t v21 = sub_3750CC(a13);
  unint64_t v50 = a3;
  __int16 v49 = -1;
  sub_456C((uint64_t)v48, a7);
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)) {
    goto LABEL_42;
  }
  v47[0] = v21;
  v47[1] = &v51;
  v47[2] = &v49;
  v47[3] = v48;
  uint64_t v22 = *(unsigned int **)(a1 + 16);
  sub_1080354((uint64_t)v47, (uint64_t)(v22 + 2));
  v52[0] = sub_35E640();
  unint64_t v23 = sub_ECA218((int *)v52, (uint64_t)v22, a9, *a4, a5, a6, v48);
  unint64_t v46 = v52[0] | (v23 << 32);
  BOOL v24 = sub_488C(&v46);
  if (HIDWORD(v46) == 0x7FFFFFFF || !v24)
  {
    a3 = v46;
    goto LABEL_42;
  }
  HIDWORD(v50) += HIDWORD(v46);
  sub_ECA2C4(&v50, &v46);
  int v26 = HIDWORD(v46);
  if (sub_488C(v48))
  {
    v52[0] = HIDWORD(v46);
    sub_560C(v48, (int *)v52);
  }
  BOOL v27 = sub_488C(&v50);
  if (HIDWORD(v50) == 0x7FFFFFFF || !v27)
  {
LABEL_37:
    a3 = v50;
    goto LABEL_42;
  }
  unint64_t v29 = *(void **)a1;
  unsigned int v30 = **(_DWORD **)(a1 + 16);
  if (sub_EDBF4C(v29, v30) != 1)
  {
    uint64_t v31 = 0;
    int v32 = v26 + a8;
    int v33 = *(_DWORD *)(a2 + 8);
    int v34 = *(unsigned __int8 *)(a2 + 24);
    if (v30 != v33) {
      goto LABEL_26;
    }
    goto LABEL_18;
  }
  sub_EDBDF0(v29, v30, (uint64_t)v52);
  uint64_t v31 = **(void **)v52 + 104 * v53;
  int v32 = v26 + a8;
  int v33 = *(_DWORD *)(a2 + 8);
  int v34 = *(unsigned __int8 *)(a2 + 24);
  if (v30 == v33)
  {
LABEL_18:
    if (v34) {
      goto LABEL_26;
    }
LABEL_19:
    uint64_t v35 = (int **)(v22 + 12);
    sub_1080354((uint64_t)v47, (uint64_t)v35);
    v54[0] = sub_35E640();
    unint64_t v36 = sub_ECA158(v54, v35, a11, *a4, a5, a6, v48);
    *(void *)int v52 = v54[0] | (v36 << 32);
    BOOL v37 = sub_488C(v52);
    if (v52[1] != 0x7FFFFFFF && v37)
    {
      HIDWORD(v50) += v52[1];
      sub_ECA2C4(&v50, v52);
      a3 = v50;
    }
    else
    {
      a3 = *(void *)v52;
    }
    goto LABEL_42;
  }
  while (1)
  {
LABEL_26:
    uint64_t v22 = (unsigned int *)v31;
    sub_1080354((uint64_t)v47, v31 + 8);
    v54[0] = sub_35E640();
    unint64_t v39 = sub_ECA218(v54, (uint64_t)v22, 0x3B9ACA00u, *a4, a5, a6, v48);
    *(void *)int v52 = v54[0] | (v39 << 32);
    BOOL v40 = sub_488C(v52);
    if (v52[1] == 0x7FFFFFFF || !v40)
    {
      int v44 = (unint64_t *)v52;
      goto LABEL_41;
    }
    HIDWORD(v50) += v52[1];
    sub_ECA2C4(&v50, v52);
    unsigned int v42 = v52[1];
    if (sub_488C(v48))
    {
      v54[0] = v52[1];
      sub_560C(v48, v54);
    }
    if (!sub_488C(&v50)) {
      break;
    }
    if (HIDWORD(v50) == 0x7FFFFFFF) {
      goto LABEL_37;
    }
    unsigned int v43 = *v22;
    if (sub_EDBF4C(v29, *v22) == 1)
    {
      sub_EDBDF0(v29, v43, (uint64_t)v52);
      uint64_t v31 = **(void **)v52 + 104 * v53;
      v32 += v42;
      if (v43 == v33) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v31 = 0;
      v32 += v42;
      if (v43 == v33)
      {
LABEL_25:
        if (!v34) {
          goto LABEL_19;
        }
      }
    }
  }
  int v44 = &v50;
LABEL_41:
  a3 = *v44;
LABEL_42:
  sub_4814((uint64_t)v48);
  return a3;
}

void sub_10802B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10802C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10802DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10802F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_108032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_1080354(uint64_t a1, uint64_t a2)
{
  uint64_t result = (const void **)sub_2D5D58(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32));
  uint64_t v5 = (unsigned __int16 *)((char *)result - *(int *)result);
  if (*v5 < 0xDu)
  {
    LODWORD(v6) = 0;
    if (**(_DWORD **)(a1 + 8) == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = v5[6];
  if (v6) {
    LODWORD(v6) = *(unsigned __int16 *)((char *)result + v6);
  }
  if (**(_DWORD **)(a1 + 8) != 0x7FFFFFFF)
  {
LABEL_7:
    unsigned int v7 = *(_WORD **)(a1 + 16);
    int v8 = (unsigned __int16)*v7;
    if (v8 == 0xFFFF || v6 != v8)
    {
      *unsigned int v7 = v6;
      uint64_t v10 = *(void *)(a1 + 24);
      sub_3BDCD8(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32), __p);
      unint64_t v11 = v14;
      if ((v14 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if (v11) {
        sub_26A18((uint64_t)v12, (const char *)__p);
      }
      else {
        sub_26908((uint64_t)v12);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      sub_48B4(v10, v12);
      return sub_26C4C((const void **)v12);
    }
  }
  return result;
}

void sub_1080488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_108049C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10804B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, long long *a9@<X8>, unsigned int a10, int a11, unsigned int a12, uint64_t a13, void *a14)
{
  int v60 = a7;
  uint64_t v22 = sub_3750CC(a14);
  long long v58 = *a3;
  unint64_t v59 = *((void *)a3 + 2);
  __int16 v57 = -1;
  sub_456C((uint64_t)v56, a7);
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)) {
    goto LABEL_16;
  }
  v55[0] = v22;
  v55[1] = &v60;
  v55[2] = &v57;
  void v55[3] = v56;
  unint64_t v23 = *(unsigned int **)(a1 + 16);
  sub_10809A0((uint64_t)v55, (uint64_t)(v23 + 2));
  sub_ECF030(*(void *)(a4 + 8), (uint64_t)&v61);
  unsigned int v24 = sub_ECF2BC(&v61, (uint64_t)v23, a10, *(uint64_t **)a4, a5, a6, v56, a8, *(void *)(a4 + 8));
  long long v53 = v61;
  unint64_t v54 = __PAIR64__(v24, v62);
  BOOL v25 = sub_ECF004(&v53);
  if (HIDWORD(v54) == 0x7FFFFFFF || !v25)
  {
    unint64_t v36 = a9;
    *a9 = v53;
    unint64_t v37 = v54;
    goto LABEL_45;
  }
  HIDWORD(v59) += HIDWORD(v54);
  sub_ECF3F4((int32x2_t *)&v58, (int32x2_t *)&v53);
  int v27 = HIDWORD(v54);
  if (sub_488C(v56))
  {
    LODWORD(v61) = HIDWORD(v54);
    sub_560C(v56, (int *)&v61);
  }
  BOOL v28 = sub_ECF004(&v58);
  if (HIDWORD(v59) == 0x7FFFFFFF || !v28)
  {
LABEL_16:
    unint64_t v36 = a9;
    *a9 = v58;
    unint64_t v37 = v59;
    goto LABEL_45;
  }
  unsigned int v30 = *(void **)a1;
  unsigned int v31 = **(_DWORD **)(a1 + 16);
  if (sub_EDBF4C(v30, v31) != 1)
  {
    uint64_t v32 = 0;
    int v33 = v27 + a8;
    int v34 = *(_DWORD *)(a2 + 8);
    int v35 = *(unsigned __int8 *)(a2 + 24);
    if (v31 != v34) {
      goto LABEL_36;
    }
    goto LABEL_19;
  }
  sub_EDBDF0(v30, v31, (uint64_t)&v61);
  uint64_t v32 = *(void *)v61 + 104 * v62;
  int v33 = v27 + a8;
  int v34 = *(_DWORD *)(a2 + 8);
  int v35 = *(unsigned __int8 *)(a2 + 24);
  if (v31 == v34)
  {
LABEL_19:
    if (v35) {
      goto LABEL_36;
    }
LABEL_20:
    uint64_t v38 = (uint64_t)(v23 + 12);
    sub_10809A0((uint64_t)v55, v38);
    sub_ECF030(*(void *)(a4 + 8), (uint64_t)&v64);
    int v39 = sub_ECF1CC(&v64, v38, a12, *(uint64_t **)a4, a5, a6, v56, v33, *(void *)(a4 + 8));
    long long v61 = v64;
    unsigned int v62 = v65;
    int v63 = v39;
    BOOL v40 = sub_ECF004(&v61);
    if (v63 != 0x7FFFFFFF && v40)
    {
      HIDWORD(v59) += v63;
      unsigned int v42 = &v58;
      sub_ECF3F4((int32x2_t *)&v58, (int32x2_t *)&v61);
    }
    else
    {
      unsigned int v42 = &v61;
    }
    unint64_t v36 = a9;
    *a9 = *v42;
    unint64_t v37 = *((void *)v42 + 2);
    goto LABEL_45;
  }
  while (1)
  {
LABEL_36:
    unint64_t v23 = (unsigned int *)v32;
    sub_10809A0((uint64_t)v55, v32 + 8);
    sub_ECF030(*(void *)(a4 + 8), (uint64_t)&v64);
    int v47 = sub_ECF2BC(&v64, (uint64_t)v23, 0x3B9ACA00u, *(uint64_t **)a4, a5, a6, v56, v33, *(void *)(a4 + 8));
    long long v61 = v64;
    unsigned int v62 = v65;
    int v63 = v47;
    BOOL v48 = sub_ECF004(&v61);
    if (v63 == 0x7FFFFFFF || !v48)
    {
      unint64_t v50 = &v61;
      goto LABEL_44;
    }
    HIDWORD(v59) += v63;
    sub_ECF3F4((int32x2_t *)&v58, (int32x2_t *)&v61);
    int v43 = v63;
    if (sub_488C(v56))
    {
      LODWORD(v64) = v63;
      sub_560C(v56, (int *)&v64);
    }
    BOOL v44 = sub_ECF004(&v58);
    if (HIDWORD(v59) == 0x7FFFFFFF || !v44) {
      break;
    }
    unsigned int v46 = *v23;
    if (sub_EDBF4C(v30, *v23) == 1)
    {
      sub_EDBDF0(v30, v46, (uint64_t)&v61);
      uint64_t v32 = *(void *)v61 + 104 * v62;
      v33 += v43;
      if (v46 == v34)
      {
LABEL_35:
        if (!v35) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      uint64_t v32 = 0;
      v33 += v43;
      if (v46 == v34) {
        goto LABEL_35;
      }
    }
  }
  unint64_t v50 = &v58;
LABEL_44:
  unint64_t v36 = a9;
  *a9 = *v50;
  unint64_t v37 = *((void *)v50 + 2);
LABEL_45:
  *((void *)v36 + 2) = v37;
  return sub_4814((uint64_t)v56);
}

void sub_1080900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_108093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1080978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_108098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_4814((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_10809A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = (const void **)sub_2D5D58(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32));
  uint64_t v5 = (unsigned __int16 *)((char *)result - *(int *)result);
  if (*v5 < 0xDu)
  {
    LODWORD(v6) = 0;
    if (**(_DWORD **)(a1 + 8) == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = v5[6];
  if (v6) {
    LODWORD(v6) = *(unsigned __int16 *)((char *)result + v6);
  }
  if (**(_DWORD **)(a1 + 8) != 0x7FFFFFFF)
  {
LABEL_7:
    unsigned int v7 = *(_WORD **)(a1 + 16);
    int v8 = (unsigned __int16)*v7;
    if (v8 == 0xFFFF || v6 != v8)
    {
      *unsigned int v7 = v6;
      uint64_t v10 = *(void *)(a1 + 24);
      sub_3BDCD8(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32), __p);
      unint64_t v11 = v14;
      if ((v14 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if (v11) {
        sub_26A18((uint64_t)v12, (const char *)__p);
      }
      else {
        sub_26908((uint64_t)v12);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      sub_48B4(v10, v12);
      return sub_26C4C((const void **)v12);
    }
  }
  return result;
}

void sub_1080AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1080AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1080B04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, unsigned int *a6@<X5>, void *a7@<X6>, __n128 *a8@<X8>)
{
  if (sub_EADC78(a1))
  {
    uint64_t v15 = sub_EADD1C(a1);
    sub_456C((uint64_t)v36, a5);
    uint64_t v16 = sub_3750CC(a7);
    sub_3BDCD8(v16, *(unsigned int *)(v15 + 32) | ((unint64_t)*(unsigned __int16 *)(v15 + 36) << 32), __p);
    unint64_t v17 = v35;
    if ((v35 & 0x80u) != 0) {
      unint64_t v17 = (unint64_t)__p[1];
    }
    if (v17) {
      sub_26A18((uint64_t)v33, (const char *)__p);
    }
    else {
      sub_26908((uint64_t)v33);
    }
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
    sub_48B4((uint64_t)v36, v33);
    sub_26C4C((const void **)v33);
    uint64_t v22 = sub_EADD1C(a1);
    unsigned int v23 = sub_EAE418(a1);
    sub_456C((uint64_t)__p, a5);
    uint64_t v18 = a2;
    unsigned int v24 = a2;
    uint64_t v19 = a3;
    uint64_t v25 = a3;
    int v20 = a4;
    sub_FE52EC(v24, v22, v23, v25, (unsigned int *)__p, a4, a6, 0, (__n128 *)v33);
    uint64_t v21 = a8;
    sub_4814((uint64_t)__p);
    sub_4814((uint64_t)v36);
  }
  else
  {
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    int v20 = a4;
    uint64_t v21 = a8;
  }
  uint64_t v26 = (1000000000 - *(_DWORD *)sub_69134(a1));
  unsigned int v27 = *(_DWORD *)sub_EADAD0(a1);
  uint64_t v28 = *(void *)sub_5231C(a1);
  uint64_t v29 = *(void *)(sub_5231C(a1) + 8);
  sub_3FAF90(v32);
  return sub_1080D90(v28, v29, v32, v18, v19, v20, a5, 0, v21, v26, SHIDWORD(v26), v27, (uint64_t *)a6, a7);
}

void sub_1080CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_4814((uint64_t)va);
  sub_4814(v14 - 136);
  _Unwind_Resume(a1);
}

void sub_1080D14(_Unwind_Exception *a1)
{
  sub_4814(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_1080D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_26C4C((const void **)va);
  sub_4814(v10 - 136);
  _Unwind_Resume(a1);
}

void sub_1080D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    sub_4814(v27 - 136);
    _Unwind_Resume(a1);
  }
  sub_4814(v27 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_1080D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, __n128 *a9@<X8>, unsigned int a10, int a11, unsigned int a12, uint64_t *a13, void *a14)
{
  int v42 = a7;
  uint64_t v21 = (__n128 *)v41;
  uint64_t v22 = sub_3750CC(a14);
  long long v23 = a3[1];
  v41[0] = *a3;
  v41[1] = v23;
  uint64_t v38 = *a13;
  int v39 = *((_DWORD *)a13 + 2);
  int v40 = a8;
  __int16 v37 = -1;
  sub_456C((uint64_t)v36, a7);
  if (a1 == a2) {
    goto LABEL_13;
  }
  v35[0] = v22;
  v35[1] = &v42;
  v35[2] = &v37;
  v35[3] = v36;
  v34[0] = v41;
  v34[1] = &v40;
  v34[2] = v36;
  v34[3] = &v38;
  sub_1081F14((uint64_t)v35, a1);
  sub_FE5480(a4, a1, a10, a5, v36, a6, (unsigned int *)&v38, v40, v33);
  if (!sub_3FAFBC((uint64_t)v33))
  {
    __n128 v26 = v33[0];
    __n128 v27 = v33[1];
    goto LABEL_14;
  }
  sub_1082078((uint64_t)v34, (int32x2_t *)v33);
  if (!sub_3FAFBC((uint64_t)v41))
  {
LABEL_13:
    __n128 v26 = *v21;
    __n128 v27 = v21[1];
    goto LABEL_14;
  }
  if (a1 + 96 == a2)
  {
LABEL_9:
    sub_1081F14((uint64_t)v35, a1 + 40);
    sub_FE52EC(a4, a1 + 40, a12, a5, v36, a6, (unsigned int *)&v38, v40, v32);
    if (sub_3FAFBC((uint64_t)v32))
    {
      uint64_t v21 = (__n128 *)v41;
      sub_3FAFF8((int32x2_t *)v41, (int32x2_t *)v32);
    }
    else
    {
      uint64_t v21 = v32;
    }
    goto LABEL_13;
  }
  uint64_t v24 = a1;
  while (1)
  {
    sub_1081F14((uint64_t)v35, v24 + 96);
    sub_FE5480(a4, v24 + 96, 0x3B9ACA00u, a5, v36, a6, (unsigned int *)&v38, v40, v32);
    if (!sub_3FAFBC((uint64_t)v32))
    {
      uint64_t v29 = v32;
      goto LABEL_17;
    }
    sub_1082078((uint64_t)v34, (int32x2_t *)v32);
    if (!sub_3FAFBC((uint64_t)v41)) {
      break;
    }
    a1 = v24 + 96;
    uint64_t v25 = v24 + 192;
    v24 += 96;
    if (v25 == a2) {
      goto LABEL_9;
    }
  }
  uint64_t v29 = (__n128 *)v41;
LABEL_17:
  __n128 v26 = *v29;
  __n128 v27 = v29[1];
LABEL_14:
  *a9 = v26;
  a9[1] = v27;
  return sub_4814((uint64_t)v36);
}

void sub_1080FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1080FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1081004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1081018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_108102C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1081040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

unint64_t sub_1081054(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, void *a7)
{
  if (sub_EADC78(a1))
  {
    uint64_t v14 = sub_EADD1C(a1);
    sub_456C((uint64_t)v26, a5);
    uint64_t v15 = sub_3750CC(a7);
    sub_3BDCD8(v15, *(unsigned int *)(v14 + 32) | ((unint64_t)*(unsigned __int16 *)(v14 + 36) << 32), __p);
    unint64_t v16 = v28;
    if ((v28 & 0x80u) != 0) {
      unint64_t v16 = (unint64_t)__p[1];
    }
    if (v16) {
      sub_26A18((uint64_t)v25, (const char *)__p);
    }
    else {
      sub_26908((uint64_t)v25);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
    sub_48B4((uint64_t)v26, v25);
    sub_26C4C((const void **)v25);
    unint64_t v17 = (int **)sub_EADD1C(a1);
    unsigned int v18 = sub_EAE418(a1);
    double v19 = sub_ECA6AC(a2, v17, a3, a5, a4);
    sub_ECA410(a2, v17, v18, a3, a5, a4, v19);
    sub_4814((uint64_t)v26);
  }
  uint64_t v20 = (1000000000 - *(_DWORD *)sub_69134(a1));
  unsigned int v21 = *(_DWORD *)sub_EADAD0(a1);
  uint64_t v22 = *(int ***)sub_5231C(a1);
  uint64_t v23 = sub_5231C(a1);
  return sub_107EED0(v22, *(int ***)(v23 + 8), 0, 0, a2, a3, a4, a5, 0, 0, v20, SHIDWORD(v20), v21, a6, a7);
}

void sub_1081210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  unsigned int v7 = va_arg(va1, const void *);
  uint64_t v9 = va_arg(va1, void);
  sub_26C4C((const void **)va);
  sub_4814((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_108122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    sub_4814((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_4814((uint64_t)&a16);
  _Unwind_Resume(a1);
}

double sub_1081268@<D0>(long long **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_7:
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    uint64_t v5 = *a1;
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *((void *)v5 + 1);
      }
      if (v6) {
        break;
      }
      uint64_t v5 = (long long *)((char *)v5 + 472);
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = (uint64_t)v3 + 472;
    if (*((char *)v3 + 23) < 0)
    {
      sub_4200(&__p, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v8 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    }
    while ((long long *)v7 != v4)
    {
      sub_1082158(&__p, v7, &v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v11;
      v7 += 472;
    }
    double result = *(double *)&__p.__r_.__value_.__l.__data_;
    *a2 = __p;
  }
  return result;
}

void sub_108136C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1081388@<D0>(long long **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_7:
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    uint64_t v5 = *a1;
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *((void *)v5 + 1);
      }
      if (v6) {
        break;
      }
      uint64_t v5 = (long long *)((char *)v5 + 472);
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = (uint64_t)v3 + 472;
    if (*((char *)v3 + 23) < 0)
    {
      sub_4200(&__p, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v8 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    }
    while ((long long *)v7 != v4)
    {
      sub_10822B4(&__p, v7, &v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v11;
      v7 += 472;
    }
    double result = *(double *)&__p.__r_.__value_.__l.__data_;
    *a2 = __p;
  }
  return result;
}

void sub_108148C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_10814A8@<D0>(long long **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_7:
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    uint64_t v5 = *a1;
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *((void *)v5 + 1);
      }
      if (v6) {
        break;
      }
      v5 += 30;
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = (uint64_t)(v3 + 30);
    if (*((char *)v3 + 23) < 0)
    {
      sub_4200(&__p, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v8 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    }
    while ((long long *)v7 != v4)
    {
      sub_1082410(&__p, v7, &v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v11;
      v7 += 480;
    }
    double result = *(double *)&__p.__r_.__value_.__l.__data_;
    *a2 = __p;
  }
  return result;
}

void sub_10815AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10815C8(uint64_t a1)
{
  return *(_DWORD *)sub_EADD50(a1) == 0;
}

void sub_10815EC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int64x2_t *a4@<X8>)
{
  long long v8 = (uint64_t *)sub_376F8C(a3);
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  a4->i64[0] = 0;
  uint64_t v9 = sub_40EFE8(a1);
  for (uint64_t i = sub_52058(a1); v9 != i; v9 += 472)
  {
    uint64_t v12 = sub_EADA60(v9);
    unsigned int v14 = *(_DWORD *)(v12 + 112);
    if (v14 == 1)
    {
      unint64_t v4 = *(void ***)(v12 + 104);
      unint64_t v13 = 1;
      int v28 = 1;
      __n128 v27 = v4;
    }
    else if (v14)
    {
      int v28 = *(_DWORD *)(v12 + 112);
    }
    else
    {
      unint64_t v4 = *(void ***)(v12 + 104);
      int v28 = 0;
      __n128 v27 = v4;
    }
    if (sub_28D584(v8, (uint64_t *)&v27, a2, v13))
    {
      v24[0] = 0;
      memset(v23, 0, sizeof(v23));
      *(_OWORD *)std::string __p = 0u;
      *(void *)&v24[4] = 0xFFFFFFFF00000000;
      *(void *)&v24[16] = -1;
      *(_DWORD *)&v24[24] = 0;
      v24[28] = 0;
    }
    else
    {
      unsigned int v26 = v14;
      if (v14 <= 1) {
        uint64_t v25 = v4;
      }
      sub_28D048(v8, (uint64_t)&v25, (unint64_t)__p);
    }
    unint64_t v15 = a4->u64[1];
    if (v15 >= a4[1].i64[0])
    {
      unint64_t v17 = sub_10818A4(a4, (uint64_t)__p);
      unsigned int v18 = (void **)v23[1];
      a4->i64[1] = (uint64_t)v17;
      if (v18)
      {
        unint64_t v4 = (void **)v23[2];
        double v19 = v18;
        if (v23[2] != v18)
        {
          do
          {
            if (*((char *)v4 - 1) < 0) {
              operator delete(*(v4 - 3));
            }
            v4 -= 6;
          }
          while (v4 != v18);
          double v19 = (void **)v23[1];
        }
        _OWORD v23[2] = v18;
        operator delete(v19);
      }
    }
    else
    {
      *(void *)(v15 + 16) = 0;
      *(void *)(v15 + 24) = 0;
      *(void *)unint64_t v15 = 0;
      *(void *)(v15 + 8) = 0;
      *(_OWORD *)unint64_t v15 = *(_OWORD *)__p;
      *(void **)(v15 + 16) = v23[0];
      __p[0] = 0;
      __p[1] = 0;
      v23[0] = 0;
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = 0;
      *(_OWORD *)(v15 + 24) = *(_OWORD *)&v23[1];
      *(void **)(v15 + 40) = v23[3];
      memset(&v23[1], 0, 24);
      long long v16 = *(_OWORD *)&v24[13];
      *(_OWORD *)(v15 + 48) = *(_OWORD *)v24;
      *(_OWORD *)(v15 + 61) = v16;
      a4->i64[1] = v15 + 80;
    }
    uint64_t v20 = (void **)__p[0];
    if (__p[0])
    {
      unint64_t v4 = (void **)__p[1];
      std::string v11 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          unsigned int v21 = *(v4 - 3);
          if (v21)
          {
            *(v4 - 2) = v21;
            operator delete(v21);
          }
          v4 -= 6;
        }
        while (v4 != v20);
        std::string v11 = __p[0];
      }
      __p[1] = v20;
      operator delete(v11);
    }
  }
}

void sub_1081860(_Unwind_Exception *a1)
{
  sub_28DCA0(v1);
  _Unwind_Resume(a1);
}

void sub_1081874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_28F1C0(&a9);
  sub_28DCA0(v9);
  _Unwind_Resume(a1);
}

void sub_1081890(_Unwind_Exception *a1)
{
  sub_28DCA0(v1);
  _Unwind_Resume(a1);
}

char *sub_10818A4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(80 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = &v7[80 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[80 * v6];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 61) = *(_OWORD *)(a2 + 61);
  *((_OWORD *)v8 + 3) = v10;
  std::string v11 = v8 + 80;
  v20.i64[1] = (uint64_t)(v8 + 80);
  unsigned int v21 = v9;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *((void *)v8 - 10) = 0;
      *((void *)v8 - 9) = 0;
      v8 -= 80;
      *((void *)v8 + 2) = 0;
      long long v14 = *(_OWORD *)(v12 - 80);
      v12 -= 80;
      *(_OWORD *)long long v8 = v14;
      *((void *)v8 + 2) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *((void *)v8 + 3) = 0;
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v12 + 24);
      *((void *)v8 + 5) = *(void *)(v12 + 40);
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      long long v15 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)(v8 + 61) = *(_OWORD *)(v12 + 61);
      *((_OWORD *)v8 + 3) = v15;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    std::string v11 = (char *)v20.i64[1];
    uint64_t v9 = v21;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v20 = v16;
  unint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  unsigned int v21 = v17;
  std::string __p = (void *)v16.i64[0];
  sub_2901B8((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

long long *sub_1081A5C(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (long long *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 480;
  long long v8 = (long long *)(*a1 + 480 * v7);
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (void)v5) >> 5) + 1;
    if (v15 > 0x88888888888888) {
      sub_2E00();
    }
    unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v9 - (void)v5) >> 5);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x44444444444444) {
      unint64_t v17 = 0x88888888888888;
    }
    else {
      unint64_t v17 = v15;
    }
    int v34 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x88888888888888) {
        sub_188D718();
      }
      unsigned int v18 = (long long *)operator new(480 * v17);
    }
    else
    {
      unsigned int v18 = 0;
    }
    unsigned int v30 = v18;
    unsigned int v31 = &v18[30 * v7];
    uint64_t v32 = v31;
    int v33 = (char *)&v18[30 * v17];
    sub_1081D30((uint64_t)&v30, a3);
    double v19 = v31;
    int64x2_t v20 = (long long *)*a1;
    uint64_t v21 = (uint64_t)v31;
    if ((long long *)*a1 != v8)
    {
      uint64_t v22 = v8;
      uint64_t v21 = (uint64_t)v31;
      do
      {
        v21 -= 480;
        v22 -= 30;
        sub_CE3918(v10, v21, v22);
      }
      while (v22 != v20);
    }
    unsigned int v31 = (long long *)v21;
    uint64_t v23 = (long long *)a1[1];
    uint64_t v24 = (uint64_t)v32;
    if (v23 != v8)
    {
      do
      {
        sub_CE3918(v10, v24, v8);
        v8 += 30;
        v24 += 480;
      }
      while (v8 != v23);
      uint64_t v21 = (uint64_t)v31;
      long long v8 = (long long *)a1[1];
    }
    uint64_t v25 = (long long *)*a1;
    *a1 = v21;
    a1[1] = v24;
    unsigned int v26 = (char *)a1[2];
    a1[2] = (uint64_t)v33;
    uint64_t v32 = v8;
    int v33 = v26;
    unsigned int v30 = v25;
    unsigned int v31 = v25;
    if (v8 != v25)
    {
      do
      {
        uint64_t v32 = v8 - 30;
        sub_4451C0((uint64_t)(v8 - 30));
        long long v8 = v32;
      }
      while (v32 != v25);
      long long v8 = v30;
    }
    if (v8) {
      operator delete(v8);
    }
    return v19;
  }
  else
  {
    if (v8 != (long long *)v6)
    {
      std::string v11 = v8 + 30;
      uint64_t v12 = v6 - 480;
      if (v6 < 0x1E0)
      {
        a1[1] = v6;
        if ((long long *)v6 == v11)
        {
LABEL_34:
          sub_4495AC((uint64_t)v8, a3);
          return v8;
        }
      }
      else
      {
        uint64_t v13 = (long long *)(v6 - 480);
        uint64_t v14 = a1[1];
        do
        {
          sub_CE3918(v10, v14, v13);
          v13 += 30;
          v14 += 480;
        }
        while ((unint64_t)v13 < v6);
        a1[1] = v14;
        if ((long long *)v6 == v11) {
          goto LABEL_34;
        }
      }
      uint64_t v27 = 2 * ((uint64_t)(v6 - (void)v11) >> 5);
      do
      {
        sub_4495AC(v12, &v5[30 * v7 - 30 + v27]);
        v12 -= 480;
        v27 -= 30;
      }
      while (v27 * 16);
      goto LABEL_34;
    }
    sub_CE3918((uint64_t)(a1 + 2), (uint64_t)v8, a3);
    a1[1] = (uint64_t)(v8 + 30);
  }
  return v8;
}

void sub_1081D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_449164((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1081D30(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_22;
  }
  unint64_t v6 = *(void **)a1;
  uint64_t v5 = *(long long **)(a1 + 8);
  if ((unint64_t)v5 <= *(void *)a1)
  {
    unint64_t v12 = 0xDDDDDDDDDDDDDDDELL * ((v4 - (uint64_t)v6) >> 5);
    if ((void *)v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x88888888888889) {
      sub_188D718();
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = v12 >> 2;
    uint64_t v15 = 480 * v12;
    unint64_t v16 = (char *)operator new(480 * v12);
    unint64_t v17 = v16;
    unsigned int v18 = &v16[480 * v14];
    double v19 = &v16[v15];
    if ((long long *)v4 == v5)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v19;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v20 = (v4 - (uint64_t)v5) / 480;
      uint64_t v21 = &v18[480 * v20];
      uint64_t v22 = 480 * v20;
      uint64_t v23 = (uint64_t)v18;
      do
      {
        sub_CE3918(v13, v23, v5);
        v23 += 480;
        v5 += 30;
        v22 -= 480;
      }
      while (v22);
      unint64_t v6 = *(void **)a1;
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v25 = *(void *)(a1 + 16);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v21;
      for (*(void *)(a1 + 24) = v19; v25 != v24; uint64_t v25 = sub_4451C0(v25 - 480))
        ;
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(void *)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v5 - *(void *)a1) >> 5);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if (v5 == (long long *)v4)
  {
    std::string v11 = &v5[-30 * v9];
  }
  else
  {
    do
    {
      sub_4495AC((uint64_t)&v5[30 * v10], v5);
      v5 += 30;
    }
    while (v5 != (long long *)v4);
    uint64_t v4 = *(void *)(a1 + 8);
    std::string v11 = &v5[30 * v10];
  }
  *(void *)(a1 + 8) = v4 + 480 * v10;
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = (uint64_t)v11;
LABEL_22:
  sub_CE3918(*(void *)(a1 + 32), v4, a2);
  *(void *)(a1 + 16) += 480;
}

const void **sub_1081F14(uint64_t a1, uint64_t a2)
{
  double result = (const void **)sub_2D5D58(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32));
  uint64_t v5 = (unsigned __int16 *)((char *)result - *(int *)result);
  if (*v5 < 0xDu)
  {
    LODWORD(v6) = 0;
    if (**(_DWORD **)(a1 + 8) == 0x7FFFFFFF) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = v5[6];
  if (v6) {
    LODWORD(v6) = *(unsigned __int16 *)((char *)result + v6);
  }
  if (**(_DWORD **)(a1 + 8) != 0x7FFFFFFF)
  {
LABEL_7:
    int64_t v7 = *(_WORD **)(a1 + 16);
    int v8 = (unsigned __int16)*v7;
    if (v8 == 0xFFFF || v6 != v8)
    {
      *int64_t v7 = v6;
      uint64_t v10 = *(void *)(a1 + 24);
      sub_3BDCD8(*(void *)a1, *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 36) << 32), __p);
      unint64_t v11 = v14;
      if ((v14 & 0x80u) != 0) {
        unint64_t v11 = (unint64_t)__p[1];
      }
      if (v11) {
        sub_26A18((uint64_t)v12, (const char *)__p);
      }
      else {
        sub_26908((uint64_t)v12);
      }
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      sub_48B4(v10, v12);
      return sub_26C4C((const void **)v12);
    }
  }
  return result;
}

void sub_1082048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_26C4C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_108205C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1082078(uint64_t a1, int32x2_t *a2)
{
  sub_3FAFF8(*(int32x2_t **)a1, a2);
  **(_DWORD **)(a1 + 8) += sub_53FA4((uint64_t)a2);
  if (!sub_488C(*(_DWORD **)(a1 + 16)))
  {
    uint64_t v4 = *(int **)(a1 + 24);
    uint64_t result = sub_40A4AC(v4);
    if (result) {
      return result;
    }
LABEL_5:
    uint64_t v6 = (unsigned int *)sub_37D0C0((uint64_t)a2);
    uint64_t v9 = sub_40A454((uint64_t)v4);
    uint64_t v10 = sub_40A6A0(v6, &v9);
    int v11 = v7;
    uint64_t result = sub_40A918((int *)&v10, (unsigned int *)v4);
    *(void *)uint64_t v4 = result;
    v4[2] = v8;
    return result;
  }
  LODWORD(v10) = sub_53FA4((uint64_t)a2);
  sub_560C(*(_DWORD **)(a1 + 16), (int *)&v10);
  uint64_t v4 = *(int **)(a1 + 24);
  uint64_t result = sub_40A4AC(v4);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  return result;
}

void sub_1082158(std::string *this@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v5 = std::string::append(this, " -- ");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      sub_4200(__p, *(void **)a2, v7);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    goto LABEL_7;
  }
  HIBYTE(v12) = 1;
  LOWORD(__p[0]) = 35;
LABEL_7:
  if (v12 >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v9 = HIBYTE(v12);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(&v13, (const std::string::value_type *)v8, v9);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_1082268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10822B4(std::string *this@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v5 = std::string::append(this, " -- ");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      sub_4200(__p, *(void **)a2, v7);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    goto LABEL_7;
  }
  HIBYTE(v12) = 1;
  LOWORD(__p[0]) = 35;
LABEL_7:
  if (v12 >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v9 = HIBYTE(v12);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(&v13, (const std::string::value_type *)v8, v9);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_10823C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1082410(std::string *this@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v5 = std::string::append(this, " -- ");
  std::string::size_type v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      sub_4200(__p, *(void **)a2, v7);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    goto LABEL_7;
  }
  HIBYTE(v12) = 1;
  LOWORD(__p[0]) = 35;
LABEL_7:
  if (v12 >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v9 = HIBYTE(v12);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  uint64_t v10 = std::string::append(&v13, (const std::string::value_type *)v8, v9);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_17;
  }
}

void sub_1082520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_108256C()
{
  unk_25FDDA7 = 16641;
  word_25FDD90 = 65;
  byte_25FDDBF = 1;
  byte_25FDDA9 = 0;
}

void sub_1082594(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(uint64_t **)v3;
  uint64_t v5 = *(uint64_t **)(v3 + 8);
  while (v4 != v5)
  {
    std::string __p = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    sub_1083400(a1, v4, (unsigned int **)&__p);
    if (__p)
    {
      unint64_t v7 = __p;
      operator delete(__p);
    }
    v4 += 6;
  }
}

void sub_108260C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1082628(uint64_t a1, __n128 *a2, unsigned int **a3, char a4)
{
  if (!sub_EB05E4((uint64_t)a2))
  {
    __n128 __p = 0uLL;
    uint64_t v20 = 0;
    sub_EB01B8(a2, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  int v8 = *(_DWORD *)(a1 + 32);
  if (v8 == 2)
  {
    std::string::size_type v9 = *(void **)a1;
    HIBYTE(v17[2]) = 20;
    strcpy((char *)v17, "arc_weighting_scheme");
    uint64_t v10 = sub_561B0(v9, (uint64_t)v17);
    int v11 = *(char *)(v10 + 23);
    if (v11 < 0)
    {
      if (*(void *)(v10 + 8) != 20)
      {
LABEL_21:
        BOOL v15 = 0;
        goto LABEL_26;
      }
      uint64_t v10 = *(void *)v10;
    }
    else if (v11 != 20)
    {
      goto LABEL_21;
    }
    unint64_t v12 = 0x61766F69645F7368;
    unint64_t v13 = bswap64(*(void *)v10);
    if (v13 == 0x61766F69645F7368
      && (unint64_t v12 = 0x6F72745F70617468, v13 = bswap64(*(void *)(v10 + 8)), v13 == 0x6F72745F70617468)
      && (unint64_t v12 = 1818588275, v13 = bswap32(*(_DWORD *)(v10 + 16)), v13 == 1818588275))
    {
      int v14 = 0;
    }
    else if (v13 < v12)
    {
      int v14 = -1;
    }
    else
    {
      int v14 = 1;
    }
    BOOL v15 = v14 == 0;
LABEL_26:
    sub_10851CC(a1, a2, a3, v15, (uint64_t)&v18, (uint64_t)&__p);
    sub_EB01B8(a2, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v17[2]) < 0)
    {
      operator delete(v17[0]);
      if ((a4 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v8 == 1)
  {
    sub_10850E0(a1, a2, a3, (uint64_t)v17, (uint64_t)&__p);
    sub_EB01B8(a2, &__p);
  }
  else
  {
    if (v8) {
      goto LABEL_29;
    }
    sub_1084FF4(a1, a2, (uint64_t)a3, (uint64_t)&__p);
    sub_EB01B8(a2, &__p);
  }
  if (!__p.n128_u64[0])
  {
LABEL_29:
    if ((a4 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  __p.n128_u64[1] = __p.n128_u64[0];
  operator delete((void *)__p.n128_u64[0]);
  if ((a4 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  __p.n128_u64[0] = sub_EB0608((uint64_t)a2);
  v17[0] = (void *)sub_EB0610((uint64_t)a2);
  if (sub_1086114(&__p, v17, a3))
  {
LABEL_31:
    sub_1086020(a2, (uint64_t)&__p);
    sub_EB0218(a2, &__p);
    goto LABEL_35;
  }
  __n128 __p = 0uLL;
  uint64_t v20 = 0;
  __n128 v16 = sub_EB01B8(a2, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = 0uLL;
  uint64_t v20 = 0;
  sub_1082628(a1, a2, &__p, 0, v16);
LABEL_35:
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_10828F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_108295C(uint64_t a1, __n128 *a2, unsigned int **a3, char a4)
{
  if (!sub_46DE4C((uint64_t)a2))
  {
    __n128 __p = 0uLL;
    uint64_t v20 = 0;
    sub_46DD8C(a2, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  int v8 = *(_DWORD *)(a1 + 32);
  if (v8 == 2)
  {
    std::string::size_type v9 = *(void **)a1;
    HIBYTE(v17[2]) = 20;
    strcpy((char *)v17, "arc_weighting_scheme");
    uint64_t v10 = sub_561B0(v9, (uint64_t)v17);
    int v11 = *(char *)(v10 + 23);
    if (v11 < 0)
    {
      if (*(void *)(v10 + 8) != 20)
      {
LABEL_21:
        BOOL v15 = 0;
        goto LABEL_26;
      }
      uint64_t v10 = *(void *)v10;
    }
    else if (v11 != 20)
    {
      goto LABEL_21;
    }
    unint64_t v12 = 0x61766F69645F7368;
    unint64_t v13 = bswap64(*(void *)v10);
    if (v13 == 0x61766F69645F7368
      && (unint64_t v12 = 0x6F72745F70617468, v13 = bswap64(*(void *)(v10 + 8)), v13 == 0x6F72745F70617468)
      && (unint64_t v12 = 1818588275, v13 = bswap32(*(_DWORD *)(v10 + 16)), v13 == 1818588275))
    {
      int v14 = 0;
    }
    else if (v13 < v12)
    {
      int v14 = -1;
    }
    else
    {
      int v14 = 1;
    }
    BOOL v15 = v14 == 0;
LABEL_26:
    sub_1087C3C(a1, a2, a3, v15, (uint64_t)&v18, (uint64_t)&__p);
    sub_46DD8C(a2, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v17[2]) < 0)
    {
      operator delete(v17[0]);
      if ((a4 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v8 == 1)
  {
    sub_1087B50(a1, a2, a3, (uint64_t)v17, (uint64_t)&__p);
    sub_46DD8C(a2, &__p);
  }
  else
  {
    if (v8) {
      goto LABEL_29;
    }
    sub_1087A64(a1, a2, (uint64_t)a3, (uint64_t)&__p);
    sub_46DD8C(a2, &__p);
  }
  if (!__p.n128_u64[0])
  {
LABEL_29:
    if ((a4 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  __p.n128_u64[1] = __p.n128_u64[0];
  operator delete((void *)__p.n128_u64[0]);
  if ((a4 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  __p.n128_u64[0] = sub_3C80F8((uint64_t)a2);
  v17[0] = (void *)sub_3FA3A8((uint64_t)a2);
  if (sub_1086114(&__p, v17, a3))
  {
LABEL_31:
    sub_1088A90(a2, (uint64_t)&__p);
    sub_46DDEC(a2, &__p);
    goto LABEL_35;
  }
  __n128 __p = 0uLL;
  uint64_t v20 = 0;
  __n128 v16 = sub_46DD8C(a2, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = 0uLL;
  uint64_t v20 = 0;
  sub_108295C(a1, a2, &__p, 0, v16);
LABEL_35:
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1082C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1082C90(uint64_t a1, __n128 *a2)
{
  __n128 __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_108295C(a1, a2, (unsigned int **)&__p, 1);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
}

void sub_1082CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1082CF4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_1082D5C(a1, a2, (uint64_t)&__p, a3);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_1082D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1082D5C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_46B060();
  unint64_t v8 = 0;
  v17[0] = v9;
  v17[1] = v10;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  while (1)
  {
    unint64_t result = sub_46C760(a2);
    if (v8 == result) {
      break;
    }
    sub_46B058();
    v16[0] = v12;
    v16[1] = (void *)(v13 + v8);
    sub_1089D70(a1, a2, a3, v16, (uint64_t)v17, v8, (uint64_t)v14);
    unint64_t v8 = v15;
    sub_10840B8((char **)a4, v14);
  }
  return result;
}

void sub_1082E24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1082E48(uint64_t a1, uint64_t a2, void *a3)
{
  char v26 = 13;
  uint64_t v24 = 0;
  strcpy((char *)v25, "PathletMapper");
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::string::size_type v6 = sub_374CDC((uint64_t)a3, (uint64_t)v25, (uint64_t *)&v22);
  __p[23] = 14;
  strcpy(__p, "configurations");
  unint64_t v7 = (void *)sub_560F4(v6, (uint64_t)__p);
  uint64_t v8 = sub_560F4(v7, a2);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v9 = (void **)v22;
  if (v22)
  {
    uint64_t v10 = v23;
    int v11 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v22;
    }
    uint64_t v23 = v9;
    operator delete(v11);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = sub_3750CC(a3);
  *(void *)(a1 + 16) = sub_376B90(a3);
  *(void *)(a1 + 24) = sub_374D14(a3);
  unint64_t v12 = *(void **)a1;
  char v26 = 4;
  strcpy((char *)v25, "mode");
  uint64_t v13 = (unint64_t *)sub_561B0(v12, (uint64_t)v25);
  int v14 = sub_10832A0(v13);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  *(_DWORD *)(a1 + 32) = v14;
  char v26 = 13;
  uint64_t v24 = 0;
  strcpy((char *)v25, "PathletMapper");
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v15 = sub_374CDC((uint64_t)a3, (uint64_t)v25, (uint64_t *)&v22);
  *(void *)__n128 __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93D0;
  strcpy(*(char **)__p, "prefer_maneuver_pathlets_with_live_speeds");
  BOOL v16 = sub_29D62C(v15, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  unint64_t v17 = (void **)v22;
  if (v22)
  {
    char v18 = v23;
    double v19 = v22;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      double v19 = v22;
    }
    uint64_t v23 = v17;
    operator delete(v19);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  *(unsigned char *)(a1 + 36) = v16;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  return a1;
}

void sub_10830B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a16);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1083110(uint64_t a1, void *a2)
{
  char v16 = 13;
  uint64_t v14 = 0;
  strcpy((char *)v15, "PathletMapper");
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  char v11 = 21;
  strcpy(__p, "default_configuration");
  uint64_t v5 = sub_561B0(v4, (uint64_t)__p);
  sub_1082E48(a1, v5, a2);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::size_type v6 = (void **)v12;
  if (v12)
  {
    unint64_t v7 = v13;
    uint64_t v8 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v12;
    }
    uint64_t v13 = v6;
    operator delete(v8);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_108323C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a24 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10832A0(unint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v2 = a1[1];
    if (v2 == 6)
    {
      if (*(_DWORD *)*a1 == 1701147239 && *(_WORD *)(*a1 + 4) == 31076) {
        return 1;
      }
      unint64_t v2 = a1[1];
    }
    else if (v2 == 19)
    {
      BOOL v3 = *(void *)*a1 == 0x745F656572676564 && *(void *)(*a1 + 8) == 0x6C687461705F6F77;
      if (v3 && *(void *)(*a1 + 11) == 0x7374656C68746170) {
        return 0;
      }
    }
    if (v2 != 13) {
      return 0;
    }
    a1 = (unint64_t *)*a1;
    goto LABEL_22;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 != 6)
  {
    if (v1 != 13) {
      return 0;
    }
LABEL_22:
    unint64_t v6 = 0x73686F7274657374;
    unint64_t v7 = bswap64(*a1);
    if (v7 == 0x73686F7274657374)
    {
      unint64_t v6 = 0x6573745F70617468;
      unint64_t v7 = bswap64(*(unint64_t *)((char *)a1 + 5));
      if (v7 == 0x6573745F70617468) {
        return 2;
      }
    }
    if (v7 < v6) {
      int v9 = -1;
    }
    else {
      int v9 = 1;
    }
    return 2 * (v9 == 0);
  }
  return *(_DWORD *)a1 == 1701147239 && *((_WORD *)a1 + 2) == 31076;
}

void sub_1083400(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t v6 = nullsub_1(a2);
  unint64_t v7 = *(__n128 **)v6;
  uint64_t v8 = *(__n128 **)(v6 + 8);
  if (*(__n128 **)v6 != v8)
  {
    do
    {
      sub_1082628(a1, v7, a3, 0);
      unint64_t v7 = (__n128 *)((char *)v7 + 472);
    }
    while (v7 != v8);
  }
  sub_EA7F18(a2, (uint64_t)&v23);
  sub_460E84((uint64_t)&v18, &v23);
  sub_460E84((uint64_t)&v13, &v28);
  char v9 = sub_1083C34((long long *)&v18, &v13, a3);
  if (__p)
  {
    unint64_t v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = nullsub_1(a2);
    char v11 = *(void **)v10;
    unint64_t v12 = *(void **)(v10 + 8);
    while (v11 != v12)
    {
      __n128 v18 = 0uLL;
      double v19 = 0;
      sub_EB01B8(v11, &v18);
      if (v18.n128_u64[0])
      {
        v18.n128_u64[1] = v18.n128_u64[0];
        operator delete((void *)v18.n128_u64[0]);
      }
      v11 += 59;
    }
    __n128 v18 = 0uLL;
    double v19 = 0;
    sub_1083400(a1, a2, &v18);
    if (v18.n128_u64[0])
    {
      v18.n128_u64[1] = v18.n128_u64[0];
      operator delete((void *)v18.n128_u64[0]);
    }
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    unsigned int v30 = v29;
    operator delete(v29);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_10835A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2FC97C(&a25);
  _Unwind_Resume(a1);
}

void sub_1083608(uint64_t a1, uint64_t *a2)
{
  __n128 __p = 0;
  BOOL v3 = 0;
  uint64_t v4 = 0;
  sub_1083400(a1, a2, (unsigned int **)&__p);
  if (__p)
  {
    BOOL v3 = __p;
    operator delete(__p);
  }
}

void sub_108364C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1083668(uint64_t a1, uint64_t *a2, unsigned int **a3)
{
  uint64_t v6 = nullsub_1(a2);
  unint64_t v7 = *(__n128 **)v6;
  uint64_t v8 = *(__n128 **)(v6 + 8);
  if (*(__n128 **)v6 != v8)
  {
    do
    {
      sub_108295C(a1, v7, a3, 0);
      v7 += 66;
    }
    while (v7 != v8);
  }
  sub_45F14C(a2, (uint64_t)&v23);
  sub_460E84((uint64_t)&v18, &v23);
  sub_460E84((uint64_t)&v13, &v28);
  char v9 = sub_1083C34((long long *)&v18, &v13, a3);
  if (__p)
  {
    unint64_t v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    unint64_t v15 = v14;
    operator delete(v14);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = nullsub_1(a2);
    char v11 = *(void **)v10;
    unint64_t v12 = *(void **)(v10 + 8);
    while (v11 != v12)
    {
      __n128 v18 = 0uLL;
      double v19 = 0;
      sub_46DD8C(v11, &v18);
      if (v18.n128_u64[0])
      {
        v18.n128_u64[1] = v18.n128_u64[0];
        operator delete((void *)v18.n128_u64[0]);
      }
      v11 += 132;
    }
    __n128 v18 = 0uLL;
    double v19 = 0;
    sub_1083668(a1, a2, &v18);
    if (v18.n128_u64[0])
    {
      v18.n128_u64[1] = v18.n128_u64[0];
      operator delete((void *)v18.n128_u64[0]);
    }
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    unsigned int v30 = v29;
    operator delete(v29);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_1083808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2FC97C(&a25);
  _Unwind_Resume(a1);
}

void sub_1083870(uint64_t a1, uint64_t *a2)
{
  __n128 __p = 0;
  BOOL v3 = 0;
  uint64_t v4 = 0;
  sub_1083668(a1, a2, (unsigned int **)&__p);
  if (__p)
  {
    BOOL v3 = __p;
    operator delete(__p);
  }
}

void sub_10838B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10838D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a3;
  uint64_t v6 = *(void **)(a3 + 8);
  long long v25 = 0u;
  long long v26 = 0u;
  for (int i = 1065353216; v5 != v6; ++v5)
    sub_3AB69C((uint64_t)&v25, v5, v5);
  unint64_t v7 = *(void **)a2;
  uint64_t v8 = *(void **)(a2 + 8);
  if (*(void **)a2 != v8)
  {
    while (1)
    {
      v23[0] = *v7;
      if (sub_3AB558(&v25, v23)) {
        break;
      }
      if (++v7 == v8)
      {
        unint64_t v7 = v8;
        break;
      }
    }
    if (v7 != *(void **)(a2 + 8))
    {
      char v9 = *(void **)a3;
      *(void *)(a3 + 8) = *(void *)a3;
      unint64_t v10 = *(void *)(a3 + 16);
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v17 = v10 - (void)v9;
        uint64_t v18 = v17 >> 2;
        if ((unint64_t)(v17 >> 2) <= 1) {
          uint64_t v18 = 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19 >> 61) {
          sub_188D718();
        }
        uint64_t v20 = operator new(8 * v19);
        *uint64_t v20 = *v7;
        char v11 = v20 + 1;
        *(void *)a3 = v20;
        *(void *)(a3 + 8) = v20 + 1;
        *(void *)(a3 + 16) = &v20[v19];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *char v9 = *v7;
        char v11 = v9 + 1;
      }
      *(void *)(a3 + 8) = v11;
      uint64_t v12 = 1;
      long long v13 = (void *)v26;
      if (!(void)v26) {
        goto LABEL_18;
      }
      do
      {
LABEL_17:
        uint64_t v14 = (void *)*v13;
        operator delete(v13);
        long long v13 = v14;
      }
      while (v14);
      goto LABEL_18;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v23);
    sub_188FC78(v23, (uint64_t)"Could not reuse any of the pathlet ids from the pathlet_hint.", 61);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v22 < 0) {
      operator delete(__p);
    }
    if (v24 < 0) {
      operator delete((void *)v23[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v12 = 0;
  long long v13 = (void *)v26;
  if ((void)v26) {
    goto LABEL_17;
  }
LABEL_18:
  unint64_t v15 = (void *)v25;
  *(void *)&long long v25 = 0;
  if (v15) {
    operator delete(v15);
  }
  return v12;
}

void sub_1083B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_12168(v15 - 96);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_12168(v15 - 96);
  _Unwind_Resume(a1);
}

void sub_1083BC4(_Unwind_Exception *a1)
{
  sub_12168(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1083BD8(_Unwind_Exception *a1)
{
  sub_12168(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1083BEC(_Unwind_Exception *a1)
{
  sub_12168(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1083C00(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 - 80);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      BOOL v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = *(void **)(v1 - 96);
  *(void *)(v1 - 96) = 0;
  if (v5) {
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1083C34(long long *a1, long long *a2, unsigned int **a3)
{
  if (*a3 == a3[1]) {
    return 1;
  }
  sub_460E84((uint64_t)&v30, a1);
  sub_460E84((uint64_t)&v25, a2);
  uint64_t v6 = sub_1083EE0(&v30, &v25);
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v33)
  {
    int v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  unint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    while (((*(void *)v7 >> 30) & 0xFFFFFFFCLL | (*(void *)v7 << 32) | (*(void *)v7 >> 63) | (*(void *)v7 >> 61) & 2) != ((**(void **)a1 >> 30) & 0xFFFFFFFCLL | (**(void **)a1 << 32) | (**(void **)a1 >> 63) | (**(void **)a1 >> 61) & 2))
    {
      v7 += 2;
      if (v7 == v8) {
        return 0;
      }
    }
  }
  if (v7 == v8 || v6 < ((char *)v8 - (char *)v7) >> 3) {
    return 0;
  }
  sub_460E84((uint64_t)&v14, a1);
  unint64_t v12 = *((void *)&v14 + 1);
  char v11 = (void *)v14;
  unint64_t v13 = ((v18 - (unsigned char *)v17) >> 3) - 1;
  while (((4 * v7[1]) | ((unint64_t)*v7 << 32) | ((unint64_t)v7[1] >> 31) | ((unint64_t)v7[1] >> 29) & 2) == ((*v11 >> 30) & 0xFFFFFFFCLL | (*v11 << 32) | (*v11 >> 63) | (*v11 >> 61) & 2))
  {
    v11 += 7;
    *(void *)&long long v14 = v11;
    if (v12 < v13)
    {
      while (v11 == *((void **)v17 + v12))
      {
        *((void *)&v14 + 1) = v12 + 1;
        char v11 = (void *)*((void *)v15 + v12 + 1);
        *(void *)&long long v14 = v11;
        ++v12;
        if (v13 == *((void *)&v14 + 1))
        {
          unint64_t v12 = ((v18 - (unsigned char *)v17) >> 3) - 1;
          break;
        }
      }
    }
    v7 += 2;
    if (v7 == v8)
    {
      unint64_t v7 = v8;
      break;
    }
  }
  unint64_t v19 = v7;
  sub_460E84((uint64_t)&v20, &v14);
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    char v16 = v15;
    operator delete(v15);
  }
  BOOL v9 = v19 == a3[1];
  if (v23)
  {
    char v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    char v22 = v21;
    operator delete(v21);
  }
  return v9;
}

void sub_1083E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1083EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_2FC938(&a27);
  sub_2FC938((void *)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_1083ECC(_Unwind_Exception *a1)
{
  sub_2FC938((void *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1083EE0(long long *a1, long long *a2)
{
  sub_460E84((uint64_t)&v20, a1);
  sub_460E84((uint64_t)&v14, a2);
  uint64_t v3 = (v25 - (unsigned char *)v24) >> 3;
  unint64_t v4 = v3 - 1;
  if (v25 == v24)
  {
    uint64_t v5 = v18;
    if (v18 != v19)
    {
      uint64_t v6 = v20;
      for (unint64_t i = v21; ; unint64_t i = v3 - 1)
      {
        do
        {
LABEL_4:
          v6 += 56;
          uint64_t v20 = v6;
        }
        while (i >= v4);
        do
        {
          if (v6 != *((void *)v24 + i)) {
            goto LABEL_4;
          }
          uint64_t v6 = *((void *)v22 + i + 1);
          uint64_t v20 = v6;
          ++i;
        }
        while (v4 != i);
      }
    }
LABEL_11:
    uint64_t v10 = 0;
    goto LABEL_26;
  }
  uint64_t v5 = v18;
  uint64_t v8 = v20;
  unint64_t v9 = v21;
  if (v18 == v19)
  {
    uint64_t v11 = v3 - 2;
    while (1)
    {
      do
      {
        do
        {
LABEL_14:
          v8 += 56;
          uint64_t v20 = v8;
        }
        while (v9 >= v4);
      }
      while (v8 != *((void *)v24 + v9));
      while (1)
      {
        uint64_t v8 = *((void *)v22 + v9 + 1);
        uint64_t v20 = v8;
        if (v11 == v9) {
          break;
        }
        uint64_t v12 = *((void *)v24 + ++v9);
        if (v12 != v8) {
          goto LABEL_14;
        }
      }
      unint64_t v9 = v4;
    }
  }
  if (v21 == v15 && v20 == v14) {
    goto LABEL_11;
  }
  uint64_t v10 = 0;
  do
  {
    v8 += 56;
    uint64_t v20 = v8;
    if (v9 < v4)
    {
      while (v8 == *((void *)v24 + v9))
      {
        uint64_t v8 = *((void *)v22 + v9 + 1);
        uint64_t v20 = v8;
        unint64_t v21 = ++v9;
        if (v4 == v9)
        {
          unint64_t v9 = v3 - 1;
          break;
        }
      }
    }
    ++v10;
  }
  while (v9 != v15 || v8 != v14);
LABEL_26:
  if (v5)
  {
    unint64_t v19 = v5;
    operator delete(v5);
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    long long v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
  return v10;
}

void sub_10840A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_10840B8(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v14 = 0x492492492492492;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(56 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    char v16 = &v15[56 * v11];
    long long v17 = a2[1];
    *(_OWORD *)char v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = a2[2];
    *((void *)v16 + 6) = *((void *)a2 + 6);
    unint64_t v9 = v16 + 56;
    if (v5 != v10)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 56);
        long long v19 = *(_OWORD *)(v5 - 40);
        long long v20 = *(_OWORD *)(v5 - 24);
        *(v16 - 8) = *(v5 - 8);
        *(_OWORD *)(v16 - 24) = v20;
        *(_OWORD *)(v16 - 40) = v19;
        *(_OWORD *)(v16 - 56) = v18;
        v16 -= 56;
        v5 -= 56;
      }
      while (v5 != v10);
      uint64_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[56 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    *((void *)v5 + 6) = *((void *)a2 + 6);
    *((_OWORD *)v5 + 1) = v7;
    *((_OWORD *)v5 + 2) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    unint64_t v9 = v5 + 56;
  }
  a1[1] = v9;
  return v9 - 56;
}

unint64_t sub_1084234@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = sub_2E5E08(a1 + 16, a2, 1);
  if (v6)
  {
    long long v7 = (int *)v6;
    long long v8 = &v6[-*(int *)v6];
    if (*(unsigned __int16 *)v8 >= 0xBu
      && *((_WORD *)v8 + 5)
      && (unint64_t v9 = &v6[*((unsigned __int16 *)v8 + 5) + *(unsigned int *)&v6[*((unsigned __int16 *)v8 + 5)]],
          *(_DWORD *)v9 > WORD2(a2))
      && (uint64_t v10 = &v9[8 * WORD2(a2)], v12 = *((_DWORD *)v10 + 1), v11 = (uint64_t)(v10 + 4), v12))
    {
      unint64_t v13 = sub_2FC9E0(a1, a2, v11);
    }
    else
    {
      unint64_t v13 = a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)((a2 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
    }
    unint64_t v16 = v13;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_29603C((void **)a3, &v16);
    return sub_10845F8(a1, a2, v7, (void **)a3);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v15 = operator new(8uLL);
    *(void *)a3 = v15;
    *uint64_t v15 = a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)((a2 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
    unint64_t result = (unint64_t)(v15 + 1);
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = result;
  }
  return result;
}

void sub_1084360(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_108437C(uint64_t a1, void *a2, char *a3)
{
  long long v7 = *(_DWORD **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *(_DWORD **)a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a1) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v14 = 12 * v13;
    uint64_t v15 = (char *)operator new(12 * v13);
    unint64_t v16 = &v15[12 * v10];
    *(void *)unint64_t v16 = *a2;
    v16[8] = *a3;
    for (unint64_t i = v16 + 12; v7 != v9; *((_DWORD *)v16 + 2) = v18)
    {
      uint64_t v17 = *(void *)(v7 - 3);
      v7 -= 3;
      int v18 = v7[2];
      *(void *)(v16 - 12) = v17;
      v16 -= 12;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v15[v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)long long v7 = *a2;
    *((unsigned char *)v7 + 8) = *a3;
    unint64_t i = (char *)(v7 + 3);
  }
  *(void *)(a1 + 8) = i;
  return i - 12;
}

char *sub_10844B4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return 0;
  }
  int v2 = HIDWORD(a2);
  unint64_t result = sub_2E5E08(a1 + 16, a2, 1);
  if (!result) {
    return result;
  }
  uint64_t v5 = &result[-*(int *)result];
  if (*(unsigned __int16 *)v5 < 5u) {
    return 0;
  }
  if (!*((_WORD *)v5 + 2)) {
    return 0;
  }
  unint64_t v6 = (unsigned int *)&result[*((unsigned __int16 *)v5 + 2) + *(unsigned int *)&result[*((unsigned __int16 *)v5 + 2)]];
  if (*v6 <= (v2 & 0x3FFFFFFFu)) {
    return 0;
  }
  long long v7 = (int *)((char *)v6 + 4 * v2 + *(unsigned int *)((char *)v6 + (4 * v2) + 4) + 4);
  long long v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (v9 < 0xB)
  {
LABEL_16:
    if (v9 >= 5) {
      goto LABEL_17;
    }
    return 0;
  }
  if (v8[5])
  {
    int v10 = *(unsigned __int8 *)(a1 + 3889);
    if (v10 != 254)
    {
      unint64_t v11 = (int *)((char *)v7 + v8[5] + *(unsigned int *)((char *)v7 + v8[5]));
      unsigned int v14 = *v11;
      unint64_t v12 = (unsigned __int8 *)(v11 + 1);
      uint64_t v13 = v14;
      if (!v14) {
        return 0;
      }
      while (v10 != *v12)
      {
        unint64_t result = 0;
        ++v12;
        if (!--v13) {
          return result;
        }
      }
      goto LABEL_16;
    }
  }
LABEL_17:
  unint64_t result = 0;
  if (v9 >= 0xD && v8[2])
  {
    uint64_t v15 = v8[6];
    if (v15) {
      return (char *)((*((unsigned __int8 *)v7 + v15) >> 1) & 1);
    }
    return 0;
  }
  return result;
}

unint64_t sub_10845F8(unint64_t result, uint64_t a2, int *a3, void **a4)
{
  unint64_t v4 = (unsigned __int16 *)((char *)a3 - *a3);
  if (*v4 >= 0xDu)
  {
    if (v4[6])
    {
      unint64_t v6 = (int *)((char *)a3 + v4[6] + *(unsigned int *)((char *)a3 + v4[6]));
      if (*v6 > WORD2(a2))
      {
        long long v7 = (_DWORD *)((char *)&v6[WORD2(a2) + 1] + v6[WORD2(a2) + 1]);
        long long v8 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v8 >= 5u)
        {
          uint64_t v9 = v8[2];
          if (v9)
          {
            int v10 = (unsigned int *)((char *)v7 + v9);
            uint64_t v11 = *v10;
            uint64_t v13 = (uint64_t)v10 + v11 + 4;
            uint64_t v12 = *(unsigned int *)((char *)v10 + v11);
            if (v12)
            {
              uint64_t v15 = result;
              uint64_t v16 = v13 + 8 * v12;
              uint64_t v17 = result + 16;
              do
              {
                unint64_t result = sub_2FC9E0(v15, a2, v13);
                unint64_t v29 = result;
                if ((result & 0x8000000000000000) != 0) {
                  goto LABEL_9;
                }
                int v18 = HIDWORD(result);
                unint64_t result = (unint64_t)sub_2E5E08(v17, result, 1);
                if (!result) {
                  goto LABEL_9;
                }
                long long v19 = (unsigned __int16 *)(result - *(int *)result);
                if (*v19 < 5u) {
                  goto LABEL_9;
                }
                if (!v19[2]) {
                  goto LABEL_9;
                }
                long long v20 = (unsigned int *)(result + v19[2] + *(unsigned int *)(result + v19[2]));
                if (*v20 <= (v18 & 0x3FFFFFFFu)) {
                  goto LABEL_9;
                }
                unint64_t v21 = (int *)((char *)v20 + 4 * v18 + *(unsigned int *)((char *)v20 + (4 * v18) + 4) + 4);
                char v22 = (unsigned __int16 *)((char *)v21 - *v21);
                if (*v22 >= 0xBu)
                {
                  uint64_t v23 = v22[5];
                  if (v22[5])
                  {
                    int v24 = *(unsigned __int8 *)(v15 + 3889);
                    if (v24 != 254)
                    {
                      long long v25 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
                      unsigned int v28 = *v25;
                      long long v26 = (unsigned __int8 *)(v25 + 1);
                      uint64_t v27 = v28;
                      if (!v28) {
                        goto LABEL_9;
                      }
                      while (v24 != *v26)
                      {
                        ++v26;
                        if (!--v27) {
                          goto LABEL_9;
                        }
                      }
                    }
                  }
                }
                unint64_t result = (unint64_t)sub_29603C(a4, &v29);
LABEL_9:
                v13 += 8;
              }
              while (v13 != v16);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10847B0(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 12;
  uint64_t v8 = (uint64_t)&(*a1)[12 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 2) + 1;
    if (v17 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 2);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v19 = 0x1555555555555555;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v38 = a1 + 2;
    if (v19)
    {
      if (v19 > 0x1555555555555555) {
        sub_188D718();
      }
      long long v20 = (char *)operator new(12 * v19);
    }
    else
    {
      long long v20 = 0;
    }
    int v34 = v20;
    unsigned __int8 v35 = &v20[12 * v7];
    unint64_t v36 = v35;
    __int16 v37 = &v20[12 * v19];
    sub_1084AA0((uint64_t)&v34, (uint64_t *)a3);
    char v22 = v35;
    uint64_t v23 = *a1;
    int v24 = v35;
    if (*a1 != (char *)v8)
    {
      uint64_t v25 = v8;
      int v24 = v35;
      do
      {
        uint64_t v26 = *(void *)(v25 - 12);
        v25 -= 12;
        int v27 = *(_DWORD *)(v25 + 8);
        *(void *)(v24 - 12) = v26;
        v24 -= 12;
        *((_DWORD *)v24 + 2) = v27;
      }
      while ((char *)v25 != v23);
    }
    unsigned __int8 v35 = v24;
    unsigned int v28 = a1[1];
    unint64_t v29 = v36;
    if (v28 != (char *)v8)
    {
      do
      {
        uint64_t v30 = *(void *)v8;
        *((_DWORD *)v29 + 2) = *(_DWORD *)(v8 + 8);
        *(void *)unint64_t v29 = v30;
        v29 += 12;
        v8 += 12;
      }
      while ((char *)v8 != v28);
      int v24 = v35;
      uint64_t v8 = (uint64_t)a1[1];
    }
    unsigned int v31 = *a1;
    *a1 = v24;
    a1[1] = v29;
    uint64_t v32 = a1[2];
    a1[2] = v37;
    unint64_t v36 = (char *)v8;
    __int16 v37 = v32;
    int v34 = v31;
    unsigned __int8 v35 = v31;
    if ((char *)v8 != v31) {
      unint64_t v36 = &v31[(v8 - (uint64_t)v31 - 12) % 0xCuLL];
    }
    if (v31) {
      operator delete(v31);
    }
    return (uint64_t)v22;
  }
  else if (v8 == v6)
  {
    uint64_t v21 = *(void *)a3;
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
    *(void *)uint64_t v8 = v21;
    a1[1] = (char *)(v8 + 12);
  }
  else
  {
    uint64_t v10 = v8 + 12;
    unint64_t v11 = v6 - 12;
    uint64_t v12 = a1[1];
    if (v6 >= 0xC)
    {
      do
      {
        uint64_t v13 = *(void *)v11;
        *((_DWORD *)v12 + 2) = *(_DWORD *)(v11 + 8);
        *(void *)uint64_t v12 = v13;
        v12 += 12;
        v11 += 12;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if (v6 != v10)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 2);
      uint64_t v15 = (unsigned char *)(v6 - 4);
      uint64_t v16 = 12 * v14;
      do
      {
        *((void *)v15 - 1) = *(void *)(v8 + v16 - 12);
        *uint64_t v15 = *(unsigned char *)(v8 + v16 - 4);
        v15 -= 12;
        v16 -= 12;
      }
      while (v16);
    }
    *(void *)uint64_t v8 = *(void *)a3;
    v5[12 * v7 + 8] = *(unsigned char *)(a3 + 8);
  }
  return v8;
}

void sub_1084A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_1084AA0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v5 = *(char **)a1;
    unint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 <= *(void *)a1)
    {
      unint64_t v13 = 0x5555555555555556 * ((v4 - v5) >> 2);
      if (v4 == v5) {
        unint64_t v13 = 1;
      }
      if (v13 >= 0x1555555555555556) {
        sub_188D718();
      }
      unint64_t v14 = v13 >> 2;
      uint64_t v15 = 12 * v13;
      uint64_t v16 = (char *)operator new(12 * v13);
      unint64_t v17 = &v16[12 * v14];
      int64_t v19 = v4 - v6;
      BOOL v18 = v4 == v6;
      unint64_t v4 = v17;
      if (!v18)
      {
        uint64_t v20 = v19 / 12;
        unint64_t v4 = &v17[12 * v20];
        uint64_t v21 = 12 * v20;
        char v22 = &v16[12 * v14];
        do
        {
          uint64_t v23 = *(void *)v6;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v6 + 2);
          *(void *)char v22 = v23;
          v22 += 12;
          v6 += 12;
          v21 -= 12;
        }
        while (v21);
      }
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v16[v15];
      if (v5)
      {
        operator delete(v5);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 2);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -(v8 >> 1);
      if (v6 == v4)
      {
        uint64_t v12 = &v6[-12 * v9];
      }
      else
      {
        do
        {
          unint64_t v11 = &v6[12 * v10];
          *(void *)unint64_t v11 = *(void *)v6;
          v11[8] = v6[8];
          v6 += 12;
        }
        while (v6 != v4);
        unint64_t v4 = *(char **)(a1 + 8);
        uint64_t v12 = &v6[12 * v10];
      }
      *(void *)(a1 + 8) = &v4[12 * v10];
      *(void *)(a1 + 16) = v12;
      unint64_t v4 = v12;
    }
  }
  uint64_t v24 = *a2;
  *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v4 = v24;
  *(void *)(a1 + 16) += 12;
}

void sub_1084C4C(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  unint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v6 = a1 + 24;
  uint64_t v9 = v8 - v7;
  unint64_t v10 = (v8 - v7) >> 2;
  if (v10 <= a2)
  {
    do
    {
      unint64_t v15 = (v9 >> 1) | 1;
      if (v15 <= v10)
      {
        if (v15 < v10)
        {
          uint64_t v8 = v7 + 4 * v15;
          *(void *)(a1 + 32) = v8;
          uint64_t v9 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v10 < v16) {
LABEL_12:
          }
            memset((void *)(v7 + 4 * v10), 255, v9 - 4 * v10);
        }
        else
        {
          uint64_t v9 = v8 - v7;
          unint64_t v16 = (v8 - v7) >> 2;
          if (v10 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v6, v15 - v10);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = v8 - v7;
        unint64_t v16 = (v8 - v7) >> 2;
        if (v10 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v10 = v16;
    }
    while (v16 <= v5);
  }
  unint64_t v11 = *a3;
  unint64_t v13 = *(unint64_t **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 < v12)
  {
    *unint64_t v13 = v5;
    v13[1] = v11;
    uint64_t v14 = (uint64_t)(v13 + 2);
    goto LABEL_28;
  }
  unint64_t v17 = *(unint64_t **)a1;
  uint64_t v18 = ((uint64_t)v13 - *(void *)a1) >> 4;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v20 = v12 - (void)v17;
  if (v20 >> 3 > v19) {
    unint64_t v19 = v20 >> 3;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (v21 >> 60) {
      sub_188D718();
    }
    char v22 = (char *)operator new(16 * v21);
    uint64_t v23 = (unint64_t *)&v22[16 * v18];
    uint64_t v24 = &v22[16 * v21];
    *uint64_t v23 = v5;
    v23[1] = v11;
    uint64_t v14 = (uint64_t)(v23 + 2);
    if (v13 == v17) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v23 = (unint64_t *)(16 * v18);
    uint64_t v24 = 0;
    *uint64_t v23 = v5;
    v23[1] = v11;
    uint64_t v14 = 16 * v18 + 16;
    if (v13 == v17) {
      goto LABEL_26;
    }
  }
  do
  {
    *((_OWORD *)v23 - 1) = *((_OWORD *)v13 - 1);
    v23 -= 2;
    v13 -= 2;
  }
  while (v13 != v17);
  unint64_t v13 = *(unint64_t **)a1;
LABEL_26:
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v24;
  if (v13) {
    operator delete(v13);
  }
LABEL_28:
  *(void *)(a1 + 8) = v14;
  uint64_t v25 = *(void *)(a1 + 24);
  *(_DWORD *)(v25 + 4 * v5) = *(_DWORD *)(a1 + 48);
  uint64_t v26 = *(unsigned int *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v26 + 1;
  if (v26)
  {
    int v27 = *(unint64_t **)a1;
    double v28 = *(double *)(*(void *)a1 + 16 * v26 + 8);
    do
    {
      unsigned int v29 = v26 - 1;
      uint64_t v30 = (v26 - 1) >> 2;
      unsigned int v31 = (double *)&v27[2 * v30];
      double v33 = v31[1];
      uint64_t v32 = v31 + 1;
      double v34 = v33;
      if (v33 < v28) {
        break;
      }
      unsigned __int8 v35 = (double *)&v27[2 * v26];
      uint64_t v36 = *(unsigned int *)v35;
      *(_DWORD *)unsigned __int8 v35 = v27[2 * v30];
      LODWORD(v27[2 * v30]) = v36;
      v35[1] = v34;
      *uint64_t v32 = v28;
      uint64_t v26 = 4 * *(unsigned int *)v35;
      int v37 = *(_DWORD *)(v25 + v26);
      *(_DWORD *)(v25 + v26) = *(_DWORD *)(v25 + 4 * v36);
      *(_DWORD *)(v25 + 4 * v36) = v37;
      LODWORD(v26) = v29 >> 2;
    }
    while (v29 > 3);
  }
}

uint64_t *sub_1084E9C(uint64_t *result, unsigned int a2, double *a3)
{
  uint64_t v3 = result[3];
  uint64_t v4 = *(unsigned int *)(v3 + 4 * a2);
  uint64_t v5 = *result;
  uint64_t v6 = *result + 16 * v4;
  double v7 = *(double *)(v6 + 8);
  double v8 = *a3;
  *(double *)(v6 + 8) = *a3;
  if (*a3 >= v7)
  {
    unsigned int v18 = (4 * v4) | 1;
    unsigned int v19 = *((_DWORD *)result + 12);
    if (v18 < v19)
    {
      int v20 = 4 * v4;
      do
      {
        unsigned int v21 = v20 + 5;
        if (v21 >= v19) {
          unsigned int v22 = v19;
        }
        else {
          unsigned int v22 = v21;
        }
        if (v18 >= v22) {
          break;
        }
        uint64_t v23 = v4;
        uint64_t v24 = v5 + 16 * v4;
        double v26 = *(double *)(v24 + 8);
        uint64_t v25 = (void *)(v24 + 8);
        double v27 = v26;
        double v28 = (double *)(v5 + 8 + 16 * v18);
        LODWORD(v4) = -1;
        double v29 = v26;
        do
        {
          double v30 = *v28;
          v28 += 2;
          double v31 = v30;
          if (v30 < v29)
          {
            double v29 = v31;
            LODWORD(v4) = v18;
          }
          ++v18;
        }
        while (v22 != v18);
        if (v4 >= v19) {
          break;
        }
        uint64_t v32 = (unsigned int *)(v5 + 16 * v4);
        uint64_t v33 = 16 * v23;
        uint64_t v34 = *v32;
        *uint64_t v32 = *(_DWORD *)(v5 + v33);
        *(_DWORD *)(v5 + v33) = v34;
        uint64_t v35 = *((void *)v32 + 1);
        *((double *)v32 + 1) = v27;
        uint64_t v36 = 4 * *v32;
        uint64_t v37 = 4 * v34;
        LODWORD(v34) = *(_DWORD *)(v3 + v36);
        *(_DWORD *)(v3 + v36) = *(_DWORD *)(v3 + v37);
        *(_DWORD *)(v3 + v37) = v34;
        *uint64_t v25 = v35;
        int v20 = 4 * v4;
        unsigned int v18 = (4 * v4) | 1;
        unsigned int v19 = *((_DWORD *)result + 12);
      }
      while (v18 < v19);
    }
  }
  else if (v4)
  {
    do
    {
      unsigned int v9 = v4 - 1;
      uint64_t v10 = (v4 - 1) >> 2;
      uint64_t v11 = v5 + 16 * v10;
      double v13 = *(double *)(v11 + 8);
      unint64_t v12 = (double *)(v11 + 8);
      double v14 = v13;
      if (v13 < v8) {
        break;
      }
      unint64_t v15 = (double *)(v5 + 16 * v4);
      uint64_t v16 = *(unsigned int *)v15;
      *(_DWORD *)unint64_t v15 = *(_DWORD *)(v5 + 16 * v10);
      *(_DWORD *)(v5 + 16 * v10) = v16;
      v15[1] = v14;
      *unint64_t v12 = v8;
      uint64_t v4 = 4 * *(unsigned int *)v15;
      int v17 = *(_DWORD *)(v3 + v4);
      *(_DWORD *)(v3 + v4) = *(_DWORD *)(v3 + 4 * v16);
      *(_DWORD *)(v3 + 4 * v16) = v17;
      LODWORD(v4) = v9 >> 2;
    }
    while (v9 >= 4);
  }
  return result;
}

unint64_t sub_1084FF4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_EAFC0C();
  unint64_t v8 = 0;
  v17[0] = v9;
  v17[1] = v10;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  while (1)
  {
    unint64_t result = sub_EB04C4(a2);
    if (v8 == result) {
      break;
    }
    sub_46B058();
    v16[0] = v12;
    v16[1] = (void *)(v13 + v8);
    sub_1086228(a1, (uint64_t)a2, a3, v16, (uint64_t)v17, v8, (uint64_t)v14);
    unint64_t v8 = v15;
    sub_10840B8((char **)a4, v14);
  }
  return result;
}

void sub_10850BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10850E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_EAFC0C();
  unint64_t v10 = 0;
  v19[0] = v11;
  v19[1] = v12;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  while (1)
  {
    unint64_t result = sub_EB04C4(a2);
    if (v10 == result) {
      break;
    }
    sub_46B058();
    v18[0] = v14;
    v18[1] = (void *)(v15 + v10);
    sub_10867D8(a1, (uint64_t)a2, a3, v18, v19, v10, a4, (uint64_t)v16);
    unint64_t v10 = v17;
    sub_10840B8((char **)a5, v16);
  }
  return result;
}

void sub_10851A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10851CC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v9 = sub_EB04C4(a2);
  int v10 = sub_EB04C4(a2);
  v204 = 0;
  v205 = 0;
  v203 = 0;
  unsigned int v206 = 0;
  if (v10 != -1)
  {
    size_t v11 = 4 * (v10 + 1);
    v203 = operator new(v11);
    v204 = v203;
    v205 = (char *)v203 + v11;
  }
  v200 = operator new(0x7F0uLL);
  v201 = (char *)v200;
  v202 = (char *)v200 + 2032;
  unint64_t v12 = sub_EB04C4(a2);
  uint64_t v13 = 0;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  unint64_t v14 = v12 + 1;
  if (v12 != -1)
  {
    if (v14 >> 61) {
      sub_2E00();
    }
    uint64_t v13 = operator new(8 * v14);
    v197 = v13;
    v199 = &v13[v14];
    memset_pattern16(v13, &unk_20B8FA0, 8 * v12 + 8);
    v198 = v199;
  }
  uint64_t v15 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  unint64_t v16 = v9 + 1;
  if (v9 != -1)
  {
    if (v16 >> 58) {
      sub_2E00();
    }
    unint64_t v17 = (char *)operator new(v16 << 6);
    uint64_t v15 = v17;
    v194 = v17;
    v196 = &v17[64 * v16];
    *(void *)&long long v18 = -1;
    *((void *)&v18 + 1) = -1;
    unsigned int v19 = v17;
    do
    {
      *(_OWORD *)unsigned int v19 = xmmword_20E7D40;
      *((_OWORD *)v19 + 1) = v18;
      *((_OWORD *)v19 + 2) = v18;
      *((_OWORD *)v19 + 3) = xmmword_20E7B70;
      v19 += 64;
    }
    while (v19 != &v17[64 * v16]);
    v195 = &v17[64 * v16];
  }
  v191 = 0;
  v192 = 0;
  uint64_t v193 = 0;
  v207[0] = 0;
  if (v204 == v203 || *(_DWORD *)v203 == -1) {
    sub_1084C4C((uint64_t)&v200, 0, (unint64_t *)v207);
  }
  else {
    sub_1084E9C((uint64_t *)&v200, 0, (double *)v207);
  }
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *(void *)&long long v20 = -1;
  *((void *)&v20 + 1) = -1;
  *((_OWORD *)v15 + 1) = v20;
  *((_OWORD *)v15 + 2) = v20;
  *((void *)v15 + 6) = 0x7FFFFFFFFFFFFFFFLL;
  v15[56] = 0;
  *uint64_t v13 = 0;
  uint64_t v175 = a6;
  if (v206)
  {
    unint64_t v174 = v9;
    uint64_t v185 = a1;
    do
    {
      unsigned int v21 = v200;
      unsigned int v22 = v203;
      unint64_t v23 = *(unsigned int *)v200;
      *((_DWORD *)v203 + v23) = -1;
      unsigned int v24 = --v206;
      if (v206)
      {
        uint64_t v25 = (unsigned int *)&v21[2 * v24];
        uint64_t v26 = *v25;
        *(_DWORD *)unsigned int v21 = v26;
        v21[1] = *((void *)v25 + 1);
        v22[v26] = 0;
        unsigned int v27 = v206;
        if (v206 >= 2)
        {
          int v28 = 0;
          unsigned int v29 = 0;
          unsigned int v30 = 1;
          do
          {
            unsigned int v31 = v28 + 5;
            if (v31 >= v27) {
              unsigned int v32 = v27;
            }
            else {
              unsigned int v32 = v31;
            }
            if (v30 >= v32) {
              break;
            }
            uint64_t v33 = v29;
            uint64_t v34 = (double *)&v21[2 * v29];
            double v36 = v34[1];
            uint64_t v35 = v34 + 1;
            double v37 = v36;
            uint64_t v38 = (double *)&v21[2 * v30 + 1];
            unsigned int v29 = -1;
            double v39 = v36;
            do
            {
              double v40 = *v38;
              v38 += 2;
              double v41 = v40;
              if (v40 < v39)
              {
                double v39 = v41;
                unsigned int v29 = v30;
              }
              ++v30;
            }
            while (v32 != v30);
            if (v29 >= v27) {
              break;
            }
            int v42 = (unsigned int *)&v21[2 * v29];
            uint64_t v43 = *v42;
            unsigned int *v42 = v21[2 * v33];
            LODWORD(v21[2 * v33]) = v43;
            uint64_t v44 = *((void *)v42 + 1);
            *((double *)v42 + 1) = v37;
            *uint64_t v35 = v44;
            uint64_t v45 = *v42;
            int v46 = v22[v45];
            v22[v45] = v22[v43];
            v22[v43] = v46;
            int v28 = 4 * v29;
            unsigned int v30 = (4 * v29) | 1;
            unsigned int v27 = v206;
          }
          while (v30 < v206);
        }
      }
      v201 -= 16;
      if (v9 == v23) {
        break;
      }
      uint64_t v47 = sub_EB0624(a2, v23);
      sub_1084234(*(void *)(a1 + 16), *(void *)(v47 + 32), (uint64_t)&__p);
      unint64_t v48 = sub_3A5DDC(*(void *)(a1 + 16), *(void *)(v47 + 32));
      unint64_t v49 = v48;
      uint64_t v177 = v47;
      if (v23 || *a3 == a3[1] || !sub_10838D0(v48, (uint64_t)a3, (uint64_t)&__p))
      {
        char v184 = 0;
        unint64_t v50 = (unsigned int *)__p;
        v183 = v189;
        if (__p == v189) {
          goto LABEL_151;
        }
LABEL_34:
        uint64_t v182 = (v49 >> 30) & 0xFFFFFFFC | (v49 << 32) | (v49 >> 63) | (v49 >> 61) & 2;
        while (2)
        {
          sub_318C48(*(void *)(v185 + 16), *(void *)v50, (unint64_t *)&v191);
          char v51 = v184;
          if (((4 * v50[1]) | ((unint64_t)*v50 << 32) | ((unint64_t)v50[1] >> 31) | ((unint64_t)v50[1] >> 29) & 2) == v182) {
            char v51 = 1;
          }
          if ((v51 & 1) == 0)
          {
            uint64_t v67 = *(void *)(v177 + 32);
            if (__PAIR64__(*((unsigned __int16 *)v191 + 2), *(_DWORD *)v191) != __PAIR64__(WORD2(v67), v67)
              || ((v67 & 0x1000000000000) == 0) != (*((unsigned char *)v191 + 6) == 0))
            {
              goto LABEL_36;
            }
          }
          sub_46B058();
          long long v53 = v52;
          uint64_t v55 = v54;
          sub_EAFC0C();
          __int16 v57 = v56;
          unint64_t v59 = v58;
          unint64_t v60 = v55 + v23;
          long long v61 = v191;
          unsigned int v62 = v192;
          if (v191 == v192)
          {
            int v63 = v191;
            long long v64 = v191;
          }
          else
          {
            while (1)
            {
              uint64_t v65 = *v61;
              unint64_t v66 = *(void *)(sub_EB0624(v53, v60) + 32);
              if ((v65 & 0xFFFFFFFFFFFFLL) == (v66 & 0xFFFFFFFFFFFFLL)
                && ((v65 & 0xFF000000000000) == 0) != (HIWORD(v66) & 1))
              {
                break;
              }
              if (++v61 == (void *)v62)
              {
                long long v61 = v62;
                break;
              }
            }
            long long v64 = v61;
            int v63 = v191;
            long long v61 = v192;
          }
          sub_10865E0((unint64_t)v64, (unint64_t)v61, v53, v60, v57, v59, (unint64_t *)v207);
          int64_t v180 = ((char *)v207[0] - (char *)v191) >> 3;
          uint64_t v181 = (v64 - v63) >> 3;
          unint64_t v68 = (v23 + v180 - v181);
          if (v192 == v207[0]) {
            goto LABEL_111;
          }
          sub_46B058();
          v186 = v69;
          unint64_t v187 = v70 + v23;
          sub_46B058();
          int v72 = v71;
          uint64_t v74 = v73;
          sub_EAFC0C();
          unint64_t v76 = v75;
          unint64_t v78 = v77;
          unint64_t v79 = *(void *)v50;
          unint64_t v179 = *(void *)v50;
          if ((*(void *)v50 & 0x8000000000000000) != 0) {
            goto LABEL_86;
          }
          uint64_t v80 = *(void *)(v185 + 16);
          int v208 = 1;
          int v209 = v79;
          v207[0] = &v208;
          v207[1] = &v209;
          unint64_t v81 = *(void *)(v80 + 3872) + 1;
          *(void *)(v80 + 3872) = v81;
          uint64_t v82 = *(void *)(v80 + 16);
          if (v82)
          {
            if (*(_DWORD *)(v80 + 2144) == v179)
            {
              unsigned int v83 = 88;
              goto LABEL_62;
            }
            if (*(_DWORD *)(v80 + 2168) == v179)
            {
              unsigned int v83 = 89;
              goto LABEL_62;
            }
            if (*(_DWORD *)(v80 + 2192) == v179)
            {
              unsigned int v83 = 90;
              goto LABEL_62;
            }
            if (*(_DWORD *)(v80 + 2216) == v179)
            {
              unsigned int v83 = 91;
LABEL_62:
              ++*(void *)(v80 + 3880);
              uint64_t v84 = v80 + 32 + 24 * v83;
              *(void *)(v84 + 8) = v81;
              long long v85 = *(unsigned int **)(v84 + 16);
              if (v85)
              {
LABEL_63:
                long long v86 = (int *)((char *)v85 + *v85);
                long long v87 = (unsigned __int16 *)((char *)v86 - *v86);
                if (*v87 >= 5u)
                {
                  if (v87[2])
                  {
                    long long v88 = (unsigned int *)((char *)v86 + v87[2] + *(unsigned int *)((char *)v86 + v87[2]));
                    if (*v88 > (HIDWORD(v179) & 0x3FFFFFFFu))
                    {
                      long long v89 = (int *)((char *)v88
                                  + 4 * HIDWORD(v179)
                                  + *(unsigned int *)((char *)v88 + (4 * HIDWORD(v179)) + 4)
                                  + 4);
                      uint64_t v90 = (unsigned __int16 *)((char *)v89 - *v89);
                      unsigned int v91 = *v90;
                      if (v91 < 0xB) {
                        goto LABEL_144;
                      }
                      if (!v90[5]) {
                        goto LABEL_145;
                      }
                      int v92 = *(unsigned __int8 *)(v80 + 3889);
                      if (v92 == 254) {
                        goto LABEL_145;
                      }
                      long long v93 = (int *)((char *)v89 + v90[5] + *(unsigned int *)((char *)v89 + v90[5]));
                      unsigned int v96 = *v93;
                      long long v94 = (unsigned __int8 *)(v93 + 1);
                      uint64_t v95 = v96;
                      if (v96)
                      {
                        while (v92 != *v94)
                        {
                          ++v94;
                          if (!--v95) {
                            goto LABEL_86;
                          }
                        }
LABEL_144:
                        if (v91 >= 5)
                        {
LABEL_145:
                          if (v91 >= 0xD)
                          {
                            if (v90[2])
                            {
                              uint64_t v136 = v90[6];
                              if (v136)
                              {
                                if ((*((unsigned char *)v89 + v136) & 2) != 0) {
                                  goto LABEL_36;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_86:
                unint64_t v102 = v74 + v68;
                if (v72)
                {
                  unint64_t v103 = sub_EB04C4(v72);
                  BOOL v104 = v102 < v103;
                  if (!v76)
                  {
                    if (v102 >= v103) {
                      goto LABEL_111;
                    }
LABEL_99:
                    long long v108 = (int **)sub_EB0624(v72, v102);
                    long long v109 = (char *)*v108;
                    uint64_t v110 = (unsigned __int16 *)((char *)*v108 - **v108);
                    unsigned int v111 = *v110;
                    if (*((unsigned char *)v108 + 38))
                    {
                      if (v111 < 0xB) {
                        goto LABEL_111;
                      }
                      unsigned int v112 = v110[5];
                      if (!v112 || (*(_DWORD *)&v109[v112] & 2) == 0) {
                        goto LABEL_111;
                      }
                    }
                    else
                    {
                      if (v111 < 0xB) {
                        goto LABEL_111;
                      }
                      unsigned int v113 = v110[5];
                      if (!v113 || (*(_DWORD *)&v109[v113] & 1) == 0) {
                        goto LABEL_111;
                      }
                    }
                    if ((sub_10844B4(*(void *)(v185 + 16), v179) & 1) == 0)
                    {
                      uint64_t v114 = ((char *)v192 - (unsigned char *)v191) >> 3;
                      if ((uint64_t)(v78 - v187) < v114) {
                        uint64_t v114 = v78 - v187;
                      }
                      if (sub_1087458(v186, v187, v186, v114 + v187, a5, &v186)) {
                        goto LABEL_111;
                      }
                    }
LABEL_36:
                    v50 += 2;
                    if (v50 == v183)
                    {
                      unint64_t v50 = (unsigned int *)__p;
                      goto LABEL_151;
                    }
                    continue;
                  }
                }
                else
                {
                  if (!v76) {
                    goto LABEL_111;
                  }
                  BOOL v104 = 0;
                }
                unint64_t v105 = sub_EB04C4(v76);
                if (v78 >= v105 || !v104)
                {
                  if (v104 == v78 < v105) {
                    goto LABEL_111;
                  }
                  goto LABEL_99;
                }
                uint64_t v107 = sub_EB0624(v72, v102);
                if (v107 != sub_EB0624(v76, v78)) {
                  goto LABEL_99;
                }
LABEL_111:
                if (v23 <= v68) {
                  unint64_t v115 = (v23 + v180 - v181);
                }
                else {
                  unint64_t v115 = v23;
                }
                if (v23 >= v68)
                {
                  uint64_t v116 = 0;
                  double v118 = 1.0;
                  if (a4 == 1)
                  {
LABEL_118:
                    double v118 = 1.0 / (double)v116;
                    if (!v116) {
                      double v118 = 1.0;
                    }
                  }
                }
                else
                {
                  uint64_t v116 = 0;
                  unint64_t v117 = v23;
                  do
                    v116 += sub_EB0698((uint64_t)a2, v117++);
                  while (v115 != v117);
                  double v118 = 1.0;
                  if (a4 == 1) {
                    goto LABEL_118;
                  }
                }
                v207[0] = 0;
                long long v119 = (int **)v197;
                *(double *)v207 = v118 + *((double *)v197 + v23);
                if (*(double *)v207 >= *((double *)v197 + v68)) {
                  goto LABEL_36;
                }
                unint64_t v120 = *(void *)v50;
                if ((*(void *)v50 & 0x8000000000000000) == 0)
                {
                  uint64_t v121 = *(void *)(v185 + 16);
                  uint64_t v122 = sub_2E5E08(v121 + 16, v120, 1);
                  if (v122)
                  {
                    char v123 = &v122[-*(int *)v122];
                    if (*(unsigned __int16 *)v123 >= 5u)
                    {
                      if (*((_WORD *)v123 + 2))
                      {
                        double v124 = (unsigned int *)&v122[*((unsigned __int16 *)v123 + 2)
                                                   + *(unsigned int *)&v122[*((unsigned __int16 *)v123 + 2)]];
                        if (*v124 > (HIDWORD(v120) & 0x3FFFFFFFu))
                        {
                          long long v125 = (int *)((char *)v124
                                       + 4 * HIDWORD(v120)
                                       + *(unsigned int *)((char *)v124 + (4 * HIDWORD(v120)) + 4)
                                       + 4);
                          uint64_t v126 = (unsigned __int16 *)((char *)v125 - *v125);
                          unsigned int v127 = *v126;
                          if (v127 < 0xB) {
                            goto LABEL_135;
                          }
                          if (!v126[5]) {
                            goto LABEL_136;
                          }
                          int v128 = *(unsigned __int8 *)(v121 + 3889);
                          if (v128 == 254) {
                            goto LABEL_136;
                          }
                          long long v129 = (int *)((char *)v125 + v126[5] + *(unsigned int *)((char *)v125 + v126[5]));
                          unsigned int v132 = *v129;
                          long long v130 = (unsigned __int8 *)(v129 + 1);
                          uint64_t v131 = v132;
                          if (v132)
                          {
                            while (v128 != *v130)
                            {
                              LOBYTE(v133) = 0;
                              ++v130;
                              if (!--v131) {
                                goto LABEL_141;
                              }
                            }
LABEL_135:
                            if (v127 >= 5)
                            {
LABEL_136:
                              LOBYTE(v133) = 0;
                              if (v127 < 0xD || !v126[2])
                              {
LABEL_141:
                                long long v135 = (char *)v194 + 64 * v68;
                                *(void *)long long v135 = v23;
                                *((void *)v135 + 1) = v120;
                                *((void *)v135 + 2) = v181;
                                *((void *)v135 + 3) = v180;
                                *((void *)v135 + 4) = v23;
                                *((void *)v135 + 5) = v68;
                                *((void *)v135 + 6) = v116;
                                v135[56] = v133;
                                v119[v68] = v207[0];
                                if (v68 >= (v204 - (unsigned char *)v203) >> 2 || *((_DWORD *)v203 + v68) == -1) {
                                  sub_1084C4C((uint64_t)&v200, v68, (unint64_t *)v207);
                                }
                                else {
                                  sub_1084E9C((uint64_t *)&v200, v68, (double *)v207);
                                }
                                goto LABEL_36;
                              }
                              uint64_t v134 = v126[6];
                              if (v134)
                              {
                                int v133 = (*((unsigned __int8 *)v125 + v134) >> 1) & 1;
                                goto LABEL_141;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                LOBYTE(v133) = 0;
                goto LABEL_141;
              }
            }
            else
            {
              unint64_t v172 = *(void *)(v80 + 2200);
              unint64_t v169 = *(void *)(v80 + 2152);
              unint64_t v170 = *(void *)(v80 + 2176);
              unint64_t v171 = *(void *)(v80 + 2224);
              long long v85 = (unsigned int *)sub_2AB884(v82, 22, v179, 1);
              unint64_t v97 = v169;
              if (v169 >= v81) {
                unint64_t v97 = v81;
              }
              int v98 = 88;
              if (v169 >= v81) {
                int v98 = 0;
              }
              if (v170 < v97)
              {
                unint64_t v97 = v170;
                int v98 = 89;
              }
              if (v172 < v97)
              {
                int v98 = 90;
                unint64_t v97 = v172;
              }
              BOOL v99 = v171 >= v97;
              unsigned int v100 = 91;
              if (v99) {
                unsigned int v100 = v98;
              }
              uint64_t v101 = v80 + 32 + 24 * v100;
              *(_DWORD *)uint64_t v101 = v209;
              *(void *)(v101 + 8) = *(void *)(v80 + 3872);
              *(void *)(v101 + 16) = v85;
              if (v85) {
                goto LABEL_63;
              }
            }
          }
          break;
        }
        sub_2E6128(v207);
        goto LABEL_86;
      }
      if (sub_10844B4(*(void *)(a1 + 16), *((void *)v189 - 1)))
      {
        long long v137 = (char *)v189;
        if (v189 >= v190)
        {
          uint64_t v138 = (char *)__p;
          int64_t v139 = (char *)v189 - (unsigned char *)__p;
          uint64_t v140 = ((char *)v189 - (unsigned char *)__p) >> 3;
          unint64_t v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v142 = (char *)v190 - (unsigned char *)__p;
          if (((char *)v190 - (unsigned char *)__p) >> 2 > v141) {
            unint64_t v141 = v142 >> 2;
          }
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v143 = v141;
          }
          if (v143)
          {
            if (v143 >> 61) {
              sub_188D718();
            }
            long long v144 = operator new(8 * v143);
            uint64_t v145 = (unint64_t *)&v144[8 * v140];
            unint64_t *v145 = v49;
            uint64_t v146 = (uint64_t)(v145 + 1);
            if (v137 != v138)
            {
LABEL_167:
              unint64_t v147 = v137 - 8 - v138;
              if (v147 < 0x58) {
                goto LABEL_209;
              }
              if ((unint64_t)(v137 - &v144[v139]) < 0x20) {
                goto LABEL_209;
              }
              uint64_t v148 = (v147 >> 3) + 1;
              uint64_t v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
              long long v150 = &v137[-v149];
              uint64_t v145 = (unint64_t *)((char *)v145 - v149);
              long long v151 = &v144[8 * v140 - 16];
              long long v152 = v137 - 16;
              uint64_t v153 = v148 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v154 = *(_OWORD *)v152;
                *(v151 - 1) = *((_OWORD *)v152 - 1);
                *long long v151 = v154;
                v151 -= 2;
                v152 -= 32;
                v153 -= 4;
              }
              while (v153);
              long long v137 = v150;
              if (v148 != (v148 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_209:
                do
                {
                  unint64_t v155 = *((void *)v137 - 1);
                  v137 -= 8;
                  *--uint64_t v145 = v155;
                }
                while (v137 != v138);
              }
              long long v137 = (char *)__p;
              __n128 __p = v145;
              v189 = (unsigned int *)v146;
              v190 = (unsigned int *)&v144[8 * v143];
              if (!v137) {
                goto LABEL_178;
              }
LABEL_177:
              operator delete(v137);
LABEL_178:
              v189 = (unsigned int *)v146;
              goto LABEL_179;
            }
          }
          else
          {
            long long v144 = 0;
            uint64_t v145 = (unint64_t *)(8 * v140);
            *(void *)(8 * v140) = v49;
            uint64_t v146 = 8 * v140 + 8;
            if (v137 != v138) {
              goto LABEL_167;
            }
          }
          __n128 __p = v145;
          v189 = (unsigned int *)v146;
          v190 = (unsigned int *)&v144[8 * v143];
          if (v137) {
            goto LABEL_177;
          }
          goto LABEL_178;
        }
        *(void *)v189 = v49;
        v189 = (unsigned int *)(v137 + 8);
      }
LABEL_179:
      char v184 = 1;
      unint64_t v50 = (unsigned int *)__p;
      v183 = v189;
      if (__p != v189) {
        goto LABEL_34;
      }
LABEL_151:
      if (v50)
      {
        v189 = v50;
        operator delete(v50);
      }
      unint64_t v9 = v174;
      a6 = v175;
      a1 = v185;
    }
    while (v206);
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  if (v9)
  {
    long long v156 = (char *)v194;
    do
    {
      sub_10840B8((char **)a6, (long long *)&v156[64 * v9 + 8]);
      long long v156 = (char *)v194;
      unint64_t v9 = *((void *)v194 + 8 * v9);
    }
    while (v9);
    long long v157 = *(char **)a6;
    uint64_t v158 = *(void *)(a6 + 8);
    unint64_t v159 = v158 - 56;
    if (*(void *)a6 != v158 && v159 > (unint64_t)v157)
    {
      long long v161 = v157 + 56;
      do
      {
        long long v162 = *(_OWORD *)(v161 - 24);
        long long v163 = *(_OWORD *)(v161 - 40);
        long long v164 = *(_OWORD *)(v161 - 56);
        uint64_t v165 = *((void *)v161 - 1);
        long long v167 = *(_OWORD *)(v159 + 16);
        long long v166 = *(_OWORD *)(v159 + 32);
        char v168 = *(unsigned char *)(v159 + 48);
        *(_OWORD *)(v161 - 56) = *(_OWORD *)v159;
        *(v161 - 8) = v168;
        *(_OWORD *)(v161 - 24) = v166;
        *(_OWORD *)(v161 - 40) = v167;
        *(unsigned char *)(v159 + 48) = v165;
        *(_OWORD *)unint64_t v159 = v164;
        *(_OWORD *)(v159 + 16) = v163;
        *(_OWORD *)(v159 + 32) = v162;
        v159 -= 56;
        BOOL v99 = (unint64_t)v161 >= v159;
        v161 += 56;
      }
      while (!v99);
    }
  }
  if (v191)
  {
    v192 = (int *)v191;
    operator delete(v191);
  }
  if (v194) {
    operator delete(v194);
  }
  if (v197) {
    operator delete(v197);
  }
  if (v203)
  {
    v204 = v203;
    operator delete(v203);
  }
  if (v200)
  {
    v201 = (char *)v200;
    operator delete(v200);
  }
}

void sub_1085F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32)
  {
    operator delete(a32);
    int v42 = a35;
    if (!a35)
    {
LABEL_5:
      uint64_t v43 = a38;
      if (!a38) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v42 = a35;
    if (!a35) {
      goto LABEL_5;
    }
  }
  operator delete(v42);
  uint64_t v43 = a38;
  if (!a38)
  {
LABEL_6:
    sub_3310C((uint64_t)&a41);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v43);
  sub_3310C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1086020@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v4 = sub_EB04C4(a1);
  unint64_t v5 = v4;
  if (v4)
  {
    if (v4 >> 61) {
      sub_2E00();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = &v6[8 * v5];
  }
  uint64_t result = sub_EB05E4((uint64_t)a1);
  uint64_t v8 = result;
  if (result)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v11 = v9;
      uint64_t v10 = sub_EB0608((uint64_t)a1);
      uint64_t result = (uint64_t)sub_108760C((unint64_t *)a2, *(void **)(a2 + 8), *(void *)(v10 + 56 * v11 + 32) - *(void *)(v10 + 56 * v11 + 24), &v11);
      ++v9;
    }
    while (v8 != v9);
  }
  return result;
}

void sub_10860EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1086114(void **a1, void *a2, unsigned int **a3)
{
  unint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  if (*a3 == v3) {
    return 1;
  }
  unint64_t v5 = *a1;
  uint64_t v6 = (char *)v3 - (char *)v4;
  while (((*(void *)v4 >> 30) & 0xFFFFFFFCLL | (*(void *)v4 << 32) | (*(void *)v4 >> 63) | (*(void *)v4 >> 61) & 2) != ((**a1 >> 30) & 0xFFFFFFFCLL | (**a1 << 32) | (**a1 >> 63) | (**a1 >> 61) & 2))
  {
    v4 += 2;
    v6 -= 8;
    if (v4 == v3) {
      return 0;
    }
  }
  if (v4 == v3 || 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*a2 - (void)*a1) >> 3) < v6 >> 3) {
    return 0;
  }
  while (((4 * v4[1]) | ((unint64_t)*v4 << 32) | ((unint64_t)v4[1] >> 31) | ((unint64_t)v4[1] >> 29) & 2) == ((*v5 >> 30) & 0xFFFFFFFCLL | (*v5 << 32) | (*v5 >> 63) | (*v5 >> 61) & 2))
  {
    v4 += 2;
    v5 += 7;
    if (v4 == v3)
    {
      unint64_t v4 = a3[1];
      return v4 == v3;
    }
  }
  return v4 == v3;
}

void sub_1086228(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = sub_EB0624(*a4, (unint64_t)a4[1]);
  unint64_t v16 = sub_3A5DDC(v14, *(void *)(v15 + 32));
  unint64_t v17 = v16;
  if (!a6)
  {
    unsigned int v31 = *(void **)a3;
    unsigned int v32 = *(void **)(a3 + 8);
    if (*(void **)a3 != v32)
    {
      while (((*v31 >> 30) & 0xFFFFFFFCLL | (*v31 << 32) | (*v31 >> 63) | (*v31 >> 61) & 2) != ((v16 >> 30) & 0xFFFFFFFC | (v16 << 32) | (v16 >> 63) | (v16 >> 61) & 2))
      {
        if (++v31 == v32)
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v36);
            sub_188FC78(v36, (uint64_t)"Pathlet hint did not contain the degree-2 pathlet.", 50);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            if (SHIBYTE(v35) < 0) {
              operator delete(__p);
            }
            if (v37 < 0) {
              operator delete((void *)v36[9]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          break;
        }
      }
    }
  }
  __n128 __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_318C48(*(void *)(a1 + 16), v17, (unint64_t *)&__p);
  long long v18 = __p;
  unsigned int v19 = v34;
  if (__p == v34)
  {
    long long v20 = __p;
    unsigned int v21 = __p;
  }
  else
  {
    while (1)
    {
      uint64_t v22 = *v18;
      unint64_t v23 = *(void *)(sub_EB0624(*a4, (unint64_t)a4[1]) + 32);
      if ((v22 & 0xFFFFFFFFFFFFLL) == (v23 & 0xFFFFFFFFFFFFLL)
        && ((v22 & 0xFF000000000000) == 0) != (HIWORD(v23) & 1))
      {
        break;
      }
      if (++v18 == v19)
      {
        long long v18 = v19;
        break;
      }
    }
    unsigned int v21 = v18;
    long long v20 = __p;
    long long v18 = v34;
  }
  sub_10865E0((unint64_t)v21, (unint64_t)v18, *a4, (unint64_t)a4[1], *(void **)a5, *(void *)(a5 + 8), v36);
  uint64_t v24 = (v21 - v20) >> 3;
  uint64_t v25 = __p;
  uint64_t v26 = (uint64_t)(v36[0] - (void)__p) >> 3;
  unint64_t v27 = v26 - v24 + a6;
  if (a6 <= v27) {
    unint64_t v28 = v26 - v24 + a6;
  }
  else {
    unint64_t v28 = a6;
  }
  if (v27 <= a6)
  {
    *(void *)a7 = v17;
    *(void *)(a7 + 8) = v24;
    *(void *)(a7 + 16) = v26;
    *(void *)(a7 + 24) = a6;
    *(void *)(a7 + 32) = v27;
    *(void *)(a7 + 40) = 0;
    *(unsigned char *)(a7 + 48) = 0;
    if (!v25) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v29 = 0;
  unint64_t v30 = a6;
  do
    v29 += sub_EB0698(a2, v30++);
  while (v28 != v30);
  uint64_t v25 = __p;
  *(void *)a7 = v17;
  *(void *)(a7 + 8) = v24;
  *(void *)(a7 + 16) = v26;
  *(void *)(a7 + 24) = a6;
  *(void *)(a7 + 32) = v27;
  *(void *)(a7 + 40) = v29;
  *(unsigned char *)(a7 + 48) = 0;
  if (v25)
  {
LABEL_19:
    uint64_t v34 = v25;
    operator delete(v25);
  }
}

void sub_108656C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10865B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10865E0@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, unint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  unint64_t v9 = result;
  if (result != a2)
  {
    if (a3)
    {
      if (a5)
      {
        while (1)
        {
          unint64_t v14 = sub_EB04C4(a3);
          uint64_t result = sub_EB04C4(a5);
          if (a4 >= v14 || a6 >= result)
          {
            if (a4 < v14 == a6 < result) {
              break;
            }
          }
          else
          {
            uint64_t v15 = sub_EB0624(a3, a4);
            uint64_t result = sub_EB0624(a5, a6);
            if (v15 == result) {
              break;
            }
          }
          uint64_t result = sub_EB0624(a3, a4);
          unint64_t v16 = *(void *)(result + 32);
          if (__PAIR64__(*(unsigned __int16 *)(v9 + 4), *(_DWORD *)v9) != __PAIR64__(WORD2(v16), v16)
            || (HIWORD(v16) & 1) == (*(unsigned char *)(v9 + 6) == 0))
          {
            break;
          }
          v9 += 8;
          ++a4;
          if (v9 == a2) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t result = sub_EB04C4(a3);
          if (a4 >= result) {
            break;
          }
          uint64_t result = sub_EB0624(a3, a4);
          unint64_t v17 = *(void *)(result + 32);
          if (__PAIR64__(*(unsigned __int16 *)(v9 + 4), *(_DWORD *)v9) != __PAIR64__(WORD2(v17), v17)
            || (HIWORD(v17) & 1) == (*(unsigned char *)(v9 + 6) == 0))
          {
            break;
          }
          v9 += 8;
          ++a4;
          if (v9 == a2) {
            goto LABEL_23;
          }
        }
      }
    }
    else if (a5)
    {
      while (1)
      {
        uint64_t result = sub_EB04C4(a5);
        if (a6 >= result) {
          break;
        }
        uint64_t result = sub_EB0624(0, a4);
        unint64_t v18 = *(void *)(result + 32);
        if (__PAIR64__(*(unsigned __int16 *)(v9 + 4), *(_DWORD *)v9) != __PAIR64__(WORD2(v18), v18)
          || (HIWORD(v18) & 1) == (*(unsigned char *)(v9 + 6) == 0))
        {
          break;
        }
        v9 += 8;
        ++a4;
        if (v9 == a2)
        {
LABEL_23:
          unint64_t v9 = a2;
          break;
        }
      }
    }
  }
  *a7 = v9;
  a7[1] = (unint64_t)a3;
  a7[2] = a4;
  return result;
}

void sub_10867D8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void **a4@<X3>, void **a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13 = a1;
  unint64_t v77 = 0;
  unint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = sub_EB0624(*a4, (unint64_t)a4[1]);
  unint64_t v16 = sub_1084234(v14, *(void *)(v15 + 32), (uint64_t)&v75);
  uint64_t v59 = a2;
  if (!a6 && *a3 != a3[1]) {
    sub_10838D0(v16, (uint64_t)a3, (uint64_t)&v75);
  }
  uint64_t v17 = *(void *)(v13 + 40);
  *(void *)(v13 + 48) = v17;
  unint64_t v18 = v75;
  uint64_t v69 = v13;
  if (*(unsigned char *)(v13 + 36))
  {
    uint64_t v19 = *(void *)(v13 + 24);
    unint64_t v20 = *v75;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    double v21 = sub_299F0C(v19, v20, (uint64_t)&v70, 0);
    BOOL v22 = (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if ((unint64_t)(*(void *)&v21 - 1) < 0xFFFFFFFFFFFFFLL) {
      BOOL v22 = 1;
    }
    char v24 = ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v21 >= 0.0 || v22;
    LOBYTE(v80) = v24;
    sub_108437C(v13 + 40, v18, (char *)&v80);
    uint64_t v25 = (void **)v76;
    uint64_t v26 = (void **)(v75 + 1);
    uint64_t v80 = (char **)(v13 + 40);
    if (v75 + 1 != v76)
    {
      do
      {
        unint64_t v27 = *v26;
        uint64_t v28 = *(void *)(v13 + 24);
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        double v29 = sub_299F0C(v28, (unint64_t)v27, (uint64_t)&v70, 0);
        BOOL v30 = (*(void *)&v29 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if ((unint64_t)(*(void *)&v29 - 1) < 0xFFFFFFFFFFFFFLL) {
          BOOL v30 = 1;
        }
        int v32 = ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v29 >= 0.0 || v30;
        uint64_t v70 = v27;
        LODWORD(v71) = v32;
        sub_3BDEE8(&v80, (uint64_t *)&v70);
        ++v26;
      }
      while (v26 != v25);
    }
    uint64_t v33 = *(uint64_t **)(v13 + 40);
    uint64_t v34 = *(uint64_t **)(v13 + 48);
    while (1)
    {
      uint64_t v33 = (uint64_t *)((char *)v33 + 12);
      if (v33 == v34) {
        break;
      }
LABEL_25:
      if (*((unsigned char *)v33 + 8))
      {
        uint64_t v35 = v34;
        while (1)
        {
          uint64_t v34 = (uint64_t *)((char *)v35 - 12);
          if ((uint64_t *)((char *)v35 - 12) == v33) {
            goto LABEL_33;
          }
          int v36 = *((unsigned __int8 *)v35 - 4);
          uint64_t v35 = (uint64_t *)((char *)v35 - 12);
          if (!v36)
          {
            uint64_t v37 = *v33;
            uint64_t *v33 = *v34;
            uint64_t *v34 = v37;
            LOBYTE(v37) = *((unsigned char *)v33 + 8);
            *((unsigned char *)v33 + 8) = *((unsigned char *)v34 + 8);
            *((unsigned char *)v34 + 8) = v37;
            uint64_t v33 = (uint64_t *)((char *)v33 + 12);
            if (v34 != v33) {
              goto LABEL_25;
            }
            goto LABEL_33;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v38 = v76;
    if (v75 != v76)
    {
      do
      {
        uint64_t v70 = (void *)*v18;
        LODWORD(v71) = 0;
        uint64_t v17 = sub_10847B0((char **)(v13 + 40), v17, (uint64_t)&v70) + 12;
        ++v18;
      }
      while (v18 != v38);
    }
  }
LABEL_33:
  uint64_t v39 = *(void *)(v13 + 40);
  uint64_t v67 = *(void *)(v13 + 48);
  if (v39 == v67) {
    goto LABEL_64;
  }
  unint64_t v58 = a6;
  unint64_t v66 = 0;
  char v65 = 0;
  unsigned int v64 = 0;
  unint64_t v61 = 0;
  uint64_t v62 = -1;
  uint64_t v63 = -1;
  unint64_t v40 = -1;
  do
  {
    unint64_t v41 = *(void *)v39;
    int v42 = *(unsigned __int8 *)(v39 + 8);
    BOOL v43 = *(unsigned char *)(v39 + 8) != 0;
    sub_318C48(*(void *)(v13 + 16), *(void *)v39, (unint64_t *)&v77);
    uint64_t v45 = v77;
    uint64_t v44 = v78;
    if (v77 == v78)
    {
      int v46 = v77;
      uint64_t v47 = v77;
    }
    else
    {
      while (1)
      {
        unint64_t v48 = *v45;
        unint64_t v49 = *(void *)(sub_EB0624(*a4, (unint64_t)a4[1]) + 32);
        if (((unint64_t)v48 & 0xFFFFFFFFFFFFLL) == (v49 & 0xFFFFFFFFFFFFLL)
          && (((unint64_t)v48 & 0xFF000000000000) == 0) != (HIWORD(v49) & 1))
        {
          break;
        }
        if (++v45 == v44)
        {
          uint64_t v45 = v44;
          break;
        }
      }
      uint64_t v47 = v45;
      int v46 = v77;
      uint64_t v45 = v78;
    }
    sub_10865E0((unint64_t)v47, (unint64_t)v45, *a4, (unint64_t)a4[1], *a5, (unint64_t)a5[1], (unint64_t *)&v80);
    unint64_t v50 = v47 - v46;
    int64_t v51 = v80 - v77;
    uint64_t v70 = (void *)v50;
    uint64_t v71 = v51;
    long long v72 = v81;
    uint64_t v13 = v69;
    if (v78 != v80 && (sub_1086ED8(v69, (uint64_t)a4, (void **)&v72, a5, v41, &v77, a7) & 1) == 0) {
      goto LABEL_54;
    }
    if (v50 < v40 || v50 == v40 && v51 - v50 > v66)
    {
LABEL_36:
      uint64_t v62 = (uint64_t)v70;
      uint64_t v63 = v71;
      unint64_t v61 = HIDWORD(v41);
      unsigned int v64 = v41;
      char v65 = v43;
      unint64_t v66 = v51 - v50;
      goto LABEL_37;
    }
    if (v50 != v40) {
      goto LABEL_54;
    }
    if (v65)
    {
      char v65 = 1;
LABEL_54:
      unint64_t v50 = v40;
      goto LABEL_37;
    }
    if (v42) {
      goto LABEL_36;
    }
    char v65 = 0;
    unint64_t v50 = v40;
LABEL_37:
    v39 += 12;
    unint64_t v40 = v50;
  }
  while (v39 != v67);
  a6 = v58;
  if (v64)
  {
    unint64_t v52 = v63 - v62 + v58;
    if (v58 <= v52) {
      unint64_t v53 = v63 - v62 + v58;
    }
    else {
      unint64_t v53 = v58;
    }
    if (v52 <= v58)
    {
      uint64_t v54 = 0;
    }
    else
    {
      uint64_t v54 = 0;
      unint64_t v55 = v58;
      do
        v54 += sub_EB0698(v59, v55++);
      while (v53 != v55);
    }
    unsigned __int8 v57 = sub_10844B4(*(void *)(v69 + 16), v64 | (v61 << 32));
    *(void *)a8 = v64 | (v61 << 32);
    *(void *)(a8 + 8) = v62;
    *(void *)(a8 + 16) = v63;
    *(void *)(a8 + 24) = v58;
    *(void *)(a8 + 32) = v52;
    *(void *)(a8 + 40) = v54;
    *(unsigned char *)(a8 + 48) = v57;
    int v56 = v75;
    if (!v75) {
      goto LABEL_74;
    }
LABEL_73:
    unint64_t v76 = v56;
    operator delete(v56);
    goto LABEL_74;
  }
LABEL_64:
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v70);
    sub_188FC78(&v70, (uint64_t)"Greedy maneuver pathlet mapping had to fall back to degree-2 pathlets.", 70);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v80, 1u);
    if (SHIBYTE(v81) < 0) {
      operator delete(v80);
    }
    if (v74 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  *(void *)&long long v72 = 0;
  sub_10870A0(v13, v59, (uint64_t)&v70, a4, (uint64_t)a5, a6, a8);
  if (v70)
  {
    uint64_t v71 = (uint64_t)v70;
    operator delete(v70);
  }
  int v56 = v75;
  if (v75) {
    goto LABEL_73;
  }
LABEL_74:
  if (v77)
  {
    unint64_t v78 = v77;
    operator delete(v77);
  }
}

void sub_1086E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (*(char *)(v25 - 89) < 0) {
    operator delete(*(void **)(v25 - 112));
  }
  sub_111ECAC((uint64_t)&__p);
  unint64_t v27 = *(void **)(v25 - 160);
  if (v27)
  {
    *(void *)(v25 - 152) = v27;
    operator delete(v27);
    uint64_t v28 = *(void **)(v25 - 136);
    if (!v28) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v28 = *(void **)(v25 - 136);
    if (!v28) {
      goto LABEL_5;
    }
  }
  *(void *)(v25 - 128) = v28;
  operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_1086ED8(uint64_t a1, uint64_t a2, void **a3, void **a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (sub_10844B4(*(void *)(a1 + 16), a5)) {
    return 0;
  }
  if (!*a3)
  {
    if (!*a4) {
      return 1;
    }
    BOOL v17 = 0;
    unint64_t v18 = a4[1];
    unint64_t v19 = sub_EB04C4(*a4);
LABEL_10:
    if (v17 == (unint64_t)v18 < v19) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v15 = a3[1];
  unint64_t v16 = sub_EB04C4(*a3);
  BOOL v17 = (unint64_t)v15 < v16;
  if (*a4)
  {
    unint64_t v18 = a4[1];
    unint64_t v19 = sub_EB04C4(*a4);
    if (v17 && (unint64_t)v18 < v19)
    {
      uint64_t v21 = sub_EB0624(*a3, (unint64_t)a3[1]);
      if (v21 == sub_EB0624(*a4, (unint64_t)a4[1])) {
        return 1;
      }
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  if ((unint64_t)v15 >= v16) {
    return 1;
  }
LABEL_17:
  BOOL v22 = (int **)sub_EB0624(*a3, (unint64_t)a3[1]);
  unint64_t v23 = (char *)*v22;
  char v24 = (unsigned __int16 *)((char *)*v22 - **v22);
  unsigned int v25 = *v24;
  if (!*((unsigned char *)v22 + 38))
  {
    if (v25 >= 0xB)
    {
      unsigned int v26 = v24[5];
      uint64_t result = 1;
      if (!v26) {
        return result;
      }
      goto LABEL_23;
    }
    return 1;
  }
  if (v25 < 0xB) {
    return 1;
  }
  unsigned int v26 = v24[5];
  if (!v26) {
    return 1;
  }
  LODWORD(result) = 2;
LABEL_23:
  if ((*(_DWORD *)&v23[v26] & result) == 0) {
    return 1;
  }
  if (sub_10844B4(*(void *)(a1 + 16), a5)) {
    return 0;
  }
  uint64_t v27 = (uint64_t)(a6[1] - *a6) >> 3;
  uint64_t v28 = *(void **)a2;
  unint64_t v29 = *(void *)(a2 + 8);
  if ((uint64_t)((uint64_t)a4[1] - v29) < v27) {
    uint64_t v27 = (uint64_t)a4[1] - v29;
  }
  BOOL v30 = *(void **)a2;

  return sub_1087458(v28, v29, v30, v27 + v29, a7, (void **)a2);
}

void sub_10870A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = sub_EB0624(*a4, (unint64_t)a4[1]);
  unint64_t v16 = sub_3A5DDC(v14, *(void *)(v15 + 32));
  unint64_t v17 = v16;
  if (!a6)
  {
    unsigned int v31 = *(void **)a3;
    int v32 = *(void **)(a3 + 8);
    if (*(void **)a3 != v32)
    {
      while (((*v31 >> 30) & 0xFFFFFFFCLL | (*v31 << 32) | (*v31 >> 63) | (*v31 >> 61) & 2) != ((v16 >> 30) & 0xFFFFFFFC | (v16 << 32) | (v16 >> 63) | (v16 >> 61) & 2))
      {
        if (++v31 == v32)
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v36);
            sub_188FC78(v36, (uint64_t)"Pathlet hint did not contain the degree-2 pathlet.", 50);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            if (SHIBYTE(v35) < 0) {
              operator delete(__p);
            }
            if (v37 < 0) {
              operator delete((void *)v36[9]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          break;
        }
      }
    }
  }
  __n128 __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_318C48(*(void *)(a1 + 16), v17, (unint64_t *)&__p);
  unint64_t v18 = __p;
  unint64_t v19 = v34;
  if (__p == v34)
  {
    unint64_t v20 = __p;
    uint64_t v21 = __p;
  }
  else
  {
    while (1)
    {
      uint64_t v22 = *v18;
      unint64_t v23 = *(void *)(sub_EB0624(*a4, (unint64_t)a4[1]) + 32);
      if ((v22 & 0xFFFFFFFFFFFFLL) == (v23 & 0xFFFFFFFFFFFFLL)
        && ((v22 & 0xFF000000000000) == 0) != (HIWORD(v23) & 1))
      {
        break;
      }
      if (++v18 == v19)
      {
        unint64_t v18 = v19;
        break;
      }
    }
    uint64_t v21 = v18;
    unint64_t v20 = __p;
    unint64_t v18 = v34;
  }
  sub_10865E0((unint64_t)v21, (unint64_t)v18, *a4, (unint64_t)a4[1], *(void **)a5, *(void *)(a5 + 8), v36);
  uint64_t v24 = (v21 - v20) >> 3;
  unsigned int v25 = __p;
  uint64_t v26 = (uint64_t)(v36[0] - (void)__p) >> 3;
  unint64_t v27 = v26 - v24 + a6;
  if (a6 <= v27) {
    unint64_t v28 = v26 - v24 + a6;
  }
  else {
    unint64_t v28 = a6;
  }
  if (v27 <= a6)
  {
    *(void *)a7 = v17;
    *(void *)(a7 + 8) = v24;
    *(void *)(a7 + 16) = v26;
    *(void *)(a7 + 24) = a6;
    *(void *)(a7 + 32) = v27;
    *(void *)(a7 + 40) = 0;
    *(unsigned char *)(a7 + 48) = 0;
    if (!v25) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v29 = 0;
  unint64_t v30 = a6;
  do
    v29 += sub_EB0698(a2, v30++);
  while (v28 != v30);
  unsigned int v25 = __p;
  *(void *)a7 = v17;
  *(void *)(a7 + 8) = v24;
  *(void *)(a7 + 16) = v26;
  *(void *)(a7 + 24) = a6;
  *(void *)(a7 + 32) = v27;
  *(void *)(a7 + 40) = v29;
  *(unsigned char *)(a7 + 48) = 0;
  if (v25)
  {
LABEL_19:
    uint64_t v34 = v25;
    operator delete(v25);
  }
}

void sub_10873E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1087430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1087458(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, void **a6)
{
  if (a1)
  {
    if (a3)
    {
      do
      {
        unint64_t v22 = sub_EB04C4(a1);
        unint64_t v23 = sub_EB04C4(a3);
        if (a2 >= v22 || a4 >= v23)
        {
          if (a2 < v22 == a4 < v23) {
            return 0;
          }
        }
        else
        {
          uint64_t v24 = sub_EB0624(a1, a2);
          if (v24 == sub_EB0624(a3, a4)) {
            return 0;
          }
        }
        uint64_t v18 = sub_EB0624(a1, a2);
        uint64_t v19 = *(void *)(sub_EB0624(*a6, (unint64_t)a6[1]) + 32);
        uint64_t v20 = *(void *)(v18 + 32);
        ++a2;
      }
      while (v19 != v20 || ((v20 ^ v19) & 0xFFFF00000000) != 0);
      return 1;
    }
    else
    {
      while (1)
      {
        unint64_t v15 = sub_EB04C4(a1);
        BOOL v16 = a2 >= v15;
        BOOL result = a2 < v15;
        if (v16) {
          break;
        }
        uint64_t v11 = sub_EB0624(a1, a2);
        uint64_t v12 = *(void *)(sub_EB0624(*a6, (unint64_t)a6[1]) + 32);
        uint64_t v13 = *(void *)(v11 + 32);
        ++a2;
        if (v12 == v13 && ((v13 ^ v12) & 0xFFFF00000000) == 0) {
          return 1;
        }
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v25 = sub_EB04C4(a3);
      BOOL v16 = a4 >= v25;
      BOOL result = a4 < v25;
      if (v16) {
        break;
      }
      uint64_t v26 = sub_EB0624(0, a2);
      uint64_t v27 = *(void *)(sub_EB0624(*a6, (unint64_t)a6[1]) + 32);
      uint64_t v28 = *(void *)(v26 + 32);
      ++a2;
      if (v27 == v28 && ((v28 ^ v27) & 0xFFFF00000000) == 0) {
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

const double *sub_108760C(unint64_t *a1, void *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (uint64_t)a2 - *a1;
  uint64_t v6 = (const double *)(*a1 + (v5 & 0xFFFFFFFFFFFFFFF8));
  if (!a3) {
    return v6;
  }
  double v7 = (const double *)a4;
  uint64_t v10 = v5 >> 3;
  unint64_t v12 = a1[1];
  unint64_t v11 = a1[2];
  if (a3 <= (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v19 = (uint64_t)(v12 - (void)v6) >> 3;
    uint64_t v20 = a3;
    if (a3 <= v19)
    {
      unint64_t v21 = a1[1];
      unint64_t v19 = a3;
      goto LABEL_42;
    }
    unint64_t v21 = v12 + 8 * (a3 - v19);
    unint64_t v22 = v20 * 8 - (v12 - (void)v6) - 8;
    if (v22 >= 0x98)
    {
      if (v12 >= (unint64_t)(a4 + 1)
        || (unint64_t v23 = (uint64_t *)a1[1], (v22 & 0xFFFFFFFFFFFFFFF8) + v12 + 8 <= (unint64_t)a4))
      {
        uint64_t v44 = (v22 >> 3) + 1;
        unint64_t v23 = (uint64_t *)(v12 + 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL));
        int64x2_t v45 = vdupq_lane_s64(*a4, 0);
        int v46 = (int64x2_t *)(v12 + 16);
        uint64_t v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46[-1] = v45;
          int64x2_t *v46 = v45;
          v46 += 2;
          v47 -= 4;
        }
        while (v47);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          a1[1] = v21;
          if ((const double *)v12 == v6) {
            return v6;
          }
LABEL_42:
          unint64_t v48 = (char *)&v6[v20];
          int64_t v49 = v21 - (void)&v6[v20];
          uint64_t v50 = v49 >> 3;
          int64_t v51 = (uint64_t *)(v21 - v20 * 8);
          unint64_t v52 = (void *)v21;
          if ((unint64_t)v51 < v12)
          {
            unint64_t v53 = (v5 & 0xFFFFFFFFFFFFFFF8) + v49;
            uint64_t v54 = (char *)(v53 + v4);
            unint64_t v55 = v53 + v4 + 8;
            if (v12 > v55) {
              unint64_t v55 = v12;
            }
            unint64_t v56 = v55 + ~v4 - v53;
            if (v56 < 0x58)
            {
              unint64_t v52 = (void *)v21;
            }
            else
            {
              unint64_t v57 = v21 - (void)v54;
              unint64_t v52 = (void *)v21;
              if (v57 >= 0x20)
              {
                uint64_t v58 = (v56 >> 3) + 1;
                uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
                int64_t v51 = (uint64_t *)((char *)v51 + v59);
                unint64_t v52 = (void *)(v21 + v59);
                unint64_t v60 = (_OWORD *)(v21 + 16);
                unint64_t v61 = (long long *)(8 * v50 + 8 * v10 + v4 + 16);
                uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v63 = *v61;
                  *(v60 - 1) = *(v61 - 1);
                  *unint64_t v60 = v63;
                  v60 += 2;
                  v61 += 2;
                  v62 -= 4;
                }
                while (v62);
                if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_53;
                }
              }
            }
            do
            {
              uint64_t v64 = *v51++;
              *v52++ = v64;
            }
            while ((unint64_t)v51 < v12);
          }
LABEL_53:
          a1[1] = (unint64_t)v52;
          if ((char *)v21 != v48) {
            memmove((void *)(v21 - 8 * v50), v6, v49);
          }
          if (v6 <= v7)
          {
            if (a1[1] <= (unint64_t)v7) {
              unint64_t v65 = 0;
            }
            else {
              unint64_t v65 = a3;
            }
            v7 += v65;
          }
          if (v19 >= 0xA && (v6 >= v7 + 1 || (unint64_t)v7 >= v4 + (v5 & 0xFFFFFFFFFFFFFFF8) + 8 * v19))
          {
            unint64_t v66 = (double *)&v6[v19 & 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v67 = v19 & 3;
            float64x2_t v69 = vld1q_dup_f64(v7);
            uint64_t v70 = (float64x2_t *)(v4 + 8 * v10 + 16);
            unint64_t v71 = v19 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v70[-1] = v69;
              *uint64_t v70 = v69;
              v70 += 2;
              v71 -= 4;
            }
            while (v71);
            if (v19 == (v19 & 0xFFFFFFFFFFFFFFFCLL)) {
              return v6;
            }
          }
          else
          {
            unint64_t v66 = (double *)v6;
            unint64_t v67 = v19;
          }
          do
          {
            *v66++ = *v7;
            --v67;
          }
          while (v67);
          return v6;
        }
      }
    }
    else
    {
      unint64_t v23 = (uint64_t *)a1[1];
    }
    do
      *v23++ = *a4;
    while (v23 != (uint64_t *)v21);
    goto LABEL_41;
  }
  unint64_t v13 = a3 + ((uint64_t)(v12 - v4) >> 3);
  if (v13 >> 61) {
    sub_2E00();
  }
  uint64_t v15 = v11 - v4;
  if (v15 >> 2 > v13) {
    unint64_t v13 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v13;
  }
  if (v16)
  {
    if (v16 >> 61) {
      sub_188D718();
    }
    unint64_t v17 = v16;
    uint64_t v18 = operator new(8 * v16);
    unint64_t v16 = v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v24 = v5 >> 3;
  unint64_t v25 = (unint64_t)&v18[8 * v10];
  uint64_t v26 = (char *)(v25 + 8 * a3);
  unint64_t v27 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v28 = (char *)v25;
  if (v27 < 0x13) {
    goto LABEL_75;
  }
  if (v25 < (unint64_t)(v7 + 1))
  {
    uint64_t v28 = (char *)v25;
    if (&v18[8 * a3 + (v5 & 0xFFFFFFFFFFFFFFF8)] > (unsigned char *)v7) {
      goto LABEL_75;
    }
  }
  unint64_t v29 = v27 + 1;
  uint64_t v28 = (char *)(v25 + 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL));
  int64x2_t v30 = vdupq_lane_s64(*(void *)v7, 0);
  unsigned int v31 = (int64x2_t *)&v18[8 * v24 + 16];
  uint64_t v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v31[-1] = v30;
    int64x2_t *v31 = v30;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_75:
    do
    {
      *(double *)uint64_t v28 = *v7;
      v28 += 8;
    }
    while (v28 != v26);
  }
  unint64_t v33 = v25;
  if ((void *)v4 != a2)
  {
    uint64_t v34 = v6;
    unint64_t v33 = v25;
    if ((unint64_t)(v5 - 8) < 0x68) {
      goto LABEL_76;
    }
    uint64_t v34 = v6;
    unint64_t v33 = v25;
    if ((v5 & 0xFFFFFFFFFFFFFFF8) + v4 - (unint64_t)&v18[v5 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
      goto LABEL_76;
    }
    unint64_t v35 = ((unint64_t)(v5 - 8) >> 3) + 1;
    uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v34 = &v6[v36 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v33 = v25 - v36;
    uint64_t v37 = 8 * v24 - 16;
    uint64_t v38 = &v18[v37];
    uint64_t v39 = (long long *)(v4 + v37);
    uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v41 = *v39;
      *(v38 - 1) = *(v39 - 1);
      _OWORD *v38 = v41;
      v38 -= 2;
      v39 -= 2;
      v40 -= 4;
    }
    while (v40);
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_76:
      do
      {
        uint64_t v42 = *((void *)v34-- - 1);
        *(void *)(v33 - 8) = v42;
        v33 -= 8;
      }
      while (v34 != (const double *)v4);
    }
  }
  BOOL v43 = &v18[8 * v16];
  if ((const double *)v12 != v6) {
    memmove(v26, v6, v12 - (void)v6);
  }
  *a1 = v33;
  a1[1] = (unint64_t)&v26[v12 - (void)v6];
  a1[2] = (unint64_t)v43;
  if (v4) {
    operator delete((void *)v4);
  }
  return (const double *)v25;
}

unint64_t sub_1087A64@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_46B060();
  unint64_t v8 = 0;
  v17[0] = v9;
  v17[1] = v10;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  while (1)
  {
    unint64_t result = sub_46C760(a2);
    if (v8 == result) {
      break;
    }
    sub_46B058();
    v16[0] = v12;
    v16[1] = (void *)(v13 + v8);
    sub_1088B84(a1, a2, a3, v16, (uint64_t)v17, v8, (uint64_t)v14);
    unint64_t v8 = v15;
    sub_10840B8((char **)a4, v14);
  }
  return result;
}

void sub_1087B2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1087B50@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_46B060();
  unint64_t v10 = 0;
  v19[0] = v11;
  v19[1] = v12;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  while (1)
  {
    unint64_t result = sub_46C760(a2);
    if (v10 == result) {
      break;
    }
    sub_46B058();
    v18[0] = v14;
    v18[1] = (void *)(v15 + v10);
    sub_1088F3C(a1, a2, a3, v18, v19, v10, a4, (uint64_t)v16);
    unint64_t v10 = v17;
    sub_10840B8((char **)a5, v16);
  }
  return result;
}

void sub_1087C18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1087C3C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v9 = sub_46C760(a2);
  int v10 = sub_46C760(a2);
  v205 = 0;
  unsigned int v206 = 0;
  v204 = 0;
  unsigned int v207 = 0;
  if (v10 != -1)
  {
    size_t v11 = 4 * (v10 + 1);
    v204 = operator new(v11);
    v205 = v204;
    unsigned int v206 = (char *)v204 + v11;
  }
  v201 = operator new(0x7F0uLL);
  v202 = (char *)v201;
  v203 = (char *)v201 + 2032;
  unint64_t v12 = sub_46C760(a2);
  uint64_t v13 = 0;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  unint64_t v14 = v12 + 1;
  if (v12 != -1)
  {
    if (v14 >> 61) {
      sub_2E00();
    }
    uint64_t v13 = operator new(8 * v14);
    v198 = v13;
    v200 = &v13[v14];
    memset_pattern16(v13, &unk_20B8FA0, 8 * v12 + 8);
    v199 = v200;
  }
  uint64_t v15 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  unint64_t v16 = v9 + 1;
  if (v9 != -1)
  {
    if (v16 >> 58) {
      sub_2E00();
    }
    unint64_t v17 = (char *)operator new(v16 << 6);
    uint64_t v15 = v17;
    v195 = v17;
    v197 = &v17[64 * v16];
    *(void *)&long long v18 = -1;
    *((void *)&v18 + 1) = -1;
    unint64_t v19 = v17;
    do
    {
      *(_OWORD *)unint64_t v19 = xmmword_20E7D40;
      *((_OWORD *)v19 + 1) = v18;
      *((_OWORD *)v19 + 2) = v18;
      *((_OWORD *)v19 + 3) = xmmword_20E7B70;
      v19 += 64;
    }
    while (v19 != &v17[64 * v16]);
    v196 = &v17[64 * v16];
  }
  v192 = 0;
  uint64_t v193 = 0;
  uint64_t v194 = 0;
  v208[0] = 0;
  if (v205 == v204 || *(_DWORD *)v204 == -1) {
    sub_1084C4C((uint64_t)&v201, 0, (unint64_t *)v208);
  }
  else {
    sub_1084E9C((uint64_t *)&v201, 0, (double *)v208);
  }
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *(void *)&long long v20 = -1;
  *((void *)&v20 + 1) = -1;
  *((_OWORD *)v15 + 1) = v20;
  *((_OWORD *)v15 + 2) = v20;
  *((void *)v15 + 6) = 0x7FFFFFFFFFFFFFFFLL;
  v15[56] = 0;
  *uint64_t v13 = 0;
  uint64_t v176 = a6;
  if (v207)
  {
    unint64_t v175 = v9;
    uint64_t v186 = a1;
    do
    {
      unint64_t v21 = v201;
      unint64_t v22 = v204;
      unint64_t v23 = *(unsigned int *)v201;
      *((_DWORD *)v204 + v23) = -1;
      unsigned int v24 = --v207;
      if (v207)
      {
        unint64_t v25 = (unsigned int *)&v21[2 * v24];
        uint64_t v26 = *v25;
        *(_DWORD *)unint64_t v21 = v26;
        v21[1] = *((void *)v25 + 1);
        v22[v26] = 0;
        unsigned int v27 = v207;
        if (v207 >= 2)
        {
          int v28 = 0;
          unsigned int v29 = 0;
          unsigned int v30 = 1;
          do
          {
            unsigned int v31 = v28 + 5;
            if (v31 >= v27) {
              unsigned int v32 = v27;
            }
            else {
              unsigned int v32 = v31;
            }
            if (v30 >= v32) {
              break;
            }
            uint64_t v33 = v29;
            uint64_t v34 = (double *)&v21[2 * v29];
            double v36 = v34[1];
            unint64_t v35 = v34 + 1;
            double v37 = v36;
            uint64_t v38 = (double *)&v21[2 * v30 + 1];
            unsigned int v29 = -1;
            double v39 = v36;
            do
            {
              double v40 = *v38;
              v38 += 2;
              double v41 = v40;
              if (v40 < v39)
              {
                double v39 = v41;
                unsigned int v29 = v30;
              }
              ++v30;
            }
            while (v32 != v30);
            if (v29 >= v27) {
              break;
            }
            uint64_t v42 = (unsigned int *)&v21[2 * v29];
            uint64_t v43 = *v42;
            unsigned int *v42 = v21[2 * v33];
            LODWORD(v21[2 * v33]) = v43;
            uint64_t v44 = *((void *)v42 + 1);
            *((double *)v42 + 1) = v37;
            *unint64_t v35 = v44;
            uint64_t v45 = *v42;
            int v46 = v22[v45];
            v22[v45] = v22[v43];
            v22[v43] = v46;
            int v28 = 4 * v29;
            unsigned int v30 = (4 * v29) | 1;
            unsigned int v27 = v207;
          }
          while (v30 < v207);
        }
      }
      v202 -= 16;
      if (v9 == v23) {
        break;
      }
      uint64_t v47 = sub_46C8EC(a2, v23);
      sub_1084234(*(void *)(a1 + 16), *(void *)(v47 + 32), (uint64_t)&__p);
      unint64_t v48 = sub_3A5DDC(*(void *)(a1 + 16), *(void *)(v47 + 32));
      unint64_t v49 = v48;
      uint64_t v178 = v47;
      if (v23 || *a3 == a3[1] || !sub_10838D0(v48, (uint64_t)a3, (uint64_t)&__p))
      {
        char v185 = 0;
        uint64_t v50 = (unsigned int *)__p;
        char v184 = v190;
        if (__p == v190) {
          goto LABEL_151;
        }
LABEL_34:
        uint64_t v183 = (v49 >> 30) & 0xFFFFFFFC | (v49 << 32) | (v49 >> 63) | (v49 >> 61) & 2;
        while (2)
        {
          sub_318C48(*(void *)(v186 + 16), *(void *)v50, (unint64_t *)&v192);
          char v51 = v185;
          if (((4 * v50[1]) | ((unint64_t)*v50 << 32) | ((unint64_t)v50[1] >> 31) | ((unint64_t)v50[1] >> 29) & 2) == v183) {
            char v51 = 1;
          }
          if ((v51 & 1) == 0)
          {
            uint64_t v67 = *(void *)(v178 + 32);
            if (__PAIR64__(*((unsigned __int16 *)v192 + 2), *(_DWORD *)v192) != __PAIR64__(WORD2(v67), v67)
              || ((v67 & 0x1000000000000) == 0) != (*((unsigned char *)v192 + 6) == 0))
            {
              goto LABEL_36;
            }
          }
          sub_46B058();
          unint64_t v53 = v52;
          uint64_t v55 = v54;
          sub_46B060();
          unint64_t v57 = v56;
          unint64_t v59 = v58;
          unint64_t v60 = v55 + v23;
          unint64_t v61 = v192;
          uint64_t v62 = v193;
          if (v192 == v193)
          {
            long long v63 = v192;
            uint64_t v64 = v192;
          }
          else
          {
            while (1)
            {
              uint64_t v65 = *v61;
              unint64_t v66 = *(void *)(sub_46C8EC(v53, v60) + 32);
              if ((v65 & 0xFFFFFFFFFFFFLL) == (v66 & 0xFFFFFFFFFFFFLL)
                && ((v65 & 0xFF000000000000) == 0) != (HIWORD(v66) & 1))
              {
                break;
              }
              if (++v61 == (void *)v62)
              {
                unint64_t v61 = v62;
                break;
              }
            }
            uint64_t v64 = v61;
            long long v63 = v192;
            unint64_t v61 = v193;
          }
          sub_E951F4((unint64_t)v64, (unint64_t)v61, v53, v60, v57, v59, (unint64_t *)v208);
          int64_t v181 = ((char *)v208[0] - (char *)v192) >> 3;
          uint64_t v182 = (v64 - v63) >> 3;
          unint64_t v69 = (v23 + v181 - v182);
          if (v193 == v208[0]) {
            goto LABEL_111;
          }
          sub_46B058();
          unint64_t v187 = v70;
          unint64_t v188 = v71 + v23;
          sub_46B058();
          uint64_t v73 = v72;
          uint64_t v75 = v74;
          sub_46B060();
          unint64_t v77 = v76;
          unint64_t v79 = v78;
          unint64_t v80 = *(void *)v50;
          unint64_t v180 = *(void *)v50;
          if ((*(void *)v50 & 0x8000000000000000) != 0) {
            goto LABEL_86;
          }
          uint64_t v81 = *(void *)(v186 + 16);
          int v209 = 1;
          int v210 = v80;
          v208[0] = &v209;
          v208[1] = &v210;
          unint64_t v82 = *(void *)(v81 + 3872) + 1;
          *(void *)(v81 + 3872) = v82;
          uint64_t v83 = *(void *)(v81 + 16);
          if (v83)
          {
            if (*(_DWORD *)(v81 + 2144) == v180)
            {
              unsigned int v84 = 88;
              goto LABEL_62;
            }
            if (*(_DWORD *)(v81 + 2168) == v180)
            {
              unsigned int v84 = 89;
              goto LABEL_62;
            }
            if (*(_DWORD *)(v81 + 2192) == v180)
            {
              unsigned int v84 = 90;
              goto LABEL_62;
            }
            if (*(_DWORD *)(v81 + 2216) == v180)
            {
              unsigned int v84 = 91;
LABEL_62:
              ++*(void *)(v81 + 3880);
              uint64_t v85 = v81 + 32 + 24 * v84;
              *(void *)(v85 + 8) = v82;
              long long v86 = *(unsigned int **)(v85 + 16);
              if (v86)
              {
LABEL_63:
                long long v87 = (int *)((char *)v86 + *v86);
                long long v88 = (unsigned __int16 *)((char *)v87 - *v87);
                if (*v88 >= 5u)
                {
                  if (v88[2])
                  {
                    long long v89 = (unsigned int *)((char *)v87 + v88[2] + *(unsigned int *)((char *)v87 + v88[2]));
                    if (*v89 > (HIDWORD(v180) & 0x3FFFFFFFu))
                    {
                      uint64_t v90 = (int *)((char *)v89
                                  + 4 * HIDWORD(v180)
                                  + *(unsigned int *)((char *)v89 + (4 * HIDWORD(v180)) + 4)
                                  + 4);
                      unsigned int v91 = (unsigned __int16 *)((char *)v90 - *v90);
                      unsigned int v92 = *v91;
                      if (v92 < 0xB) {
                        goto LABEL_144;
                      }
                      if (!v91[5]) {
                        goto LABEL_145;
                      }
                      int v93 = *(unsigned __int8 *)(v81 + 3889);
                      if (v93 == 254) {
                        goto LABEL_145;
                      }
                      long long v94 = (int *)((char *)v90 + v91[5] + *(unsigned int *)((char *)v90 + v91[5]));
                      unsigned int v97 = *v94;
                      uint64_t v95 = (unsigned __int8 *)(v94 + 1);
                      uint64_t v96 = v97;
                      if (v97)
                      {
                        while (v93 != *v95)
                        {
                          ++v95;
                          if (!--v96) {
                            goto LABEL_86;
                          }
                        }
LABEL_144:
                        if (v92 >= 5)
                        {
LABEL_145:
                          if (v92 >= 0xD)
                          {
                            if (v91[2])
                            {
                              uint64_t v137 = v91[6];
                              if (v137)
                              {
                                if ((*((unsigned char *)v90 + v137) & 2) != 0) {
                                  goto LABEL_36;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_86:
                unint64_t v103 = v75 + v69;
                if (v73)
                {
                  unint64_t v104 = sub_46C760(v73);
                  BOOL v105 = v103 < v104;
                  if (!v77)
                  {
                    if (v103 >= v104) {
                      goto LABEL_111;
                    }
LABEL_99:
                    long long v109 = (int **)sub_46C8EC(v73, v103);
                    uint64_t v110 = (char *)*v109;
                    unsigned int v111 = (unsigned __int16 *)((char *)*v109 - **v109);
                    unsigned int v112 = *v111;
                    if (*((unsigned char *)v109 + 38))
                    {
                      if (v112 < 0xB) {
                        goto LABEL_111;
                      }
                      unsigned int v113 = v111[5];
                      if (!v113 || (*(_DWORD *)&v110[v113] & 2) == 0) {
                        goto LABEL_111;
                      }
                    }
                    else
                    {
                      if (v112 < 0xB) {
                        goto LABEL_111;
                      }
                      unsigned int v114 = v111[5];
                      if (!v114 || (*(_DWORD *)&v110[v114] & 1) == 0) {
                        goto LABEL_111;
                      }
                    }
                    if ((sub_10844B4(*(void *)(v186 + 16), v180) & 1) == 0)
                    {
                      uint64_t v115 = ((char *)v193 - (unsigned char *)v192) >> 3;
                      if ((uint64_t)(v79 - v188) < v115) {
                        uint64_t v115 = v79 - v188;
                      }
                      if (sub_1089BBC(v187, v188, v187, v115 + v188, a5, &v187)) {
                        goto LABEL_111;
                      }
                    }
LABEL_36:
                    v50 += 2;
                    if (v50 == v184)
                    {
                      uint64_t v50 = (unsigned int *)__p;
                      goto LABEL_151;
                    }
                    continue;
                  }
                }
                else
                {
                  if (!v77) {
                    goto LABEL_111;
                  }
                  BOOL v105 = 0;
                }
                unint64_t v106 = sub_46C760(v77);
                if (v79 >= v106 || !v105)
                {
                  if (v105 == v79 < v106) {
                    goto LABEL_111;
                  }
                  goto LABEL_99;
                }
                uint64_t v108 = sub_46C8EC(v73, v103);
                if (v108 != sub_46C8EC(v77, v79)) {
                  goto LABEL_99;
                }
LABEL_111:
                if (v23 <= v69) {
                  unint64_t v116 = (v23 + v181 - v182);
                }
                else {
                  unint64_t v116 = v23;
                }
                if (v23 >= v69)
                {
                  uint64_t v117 = 0;
                  double v119 = 1.0;
                  if (a4 == 1)
                  {
LABEL_118:
                    double v119 = 1.0 / (double)v117;
                    if (!v117) {
                      double v119 = 1.0;
                    }
                  }
                }
                else
                {
                  uint64_t v117 = 0;
                  unint64_t v118 = v23;
                  do
                    v117 += sub_46CCC8(a2, v118++, v68);
                  while (v116 != v118);
                  double v119 = 1.0;
                  if (a4 == 1) {
                    goto LABEL_118;
                  }
                }
                v208[0] = 0;
                unint64_t v120 = (int **)v198;
                *(double *)int v208 = v119 + *((double *)v198 + v23);
                if (*(double *)v208 >= *((double *)v198 + v69)) {
                  goto LABEL_36;
                }
                unint64_t v121 = *(void *)v50;
                if ((*(void *)v50 & 0x8000000000000000) == 0)
                {
                  uint64_t v122 = *(void *)(v186 + 16);
                  char v123 = sub_2E5E08(v122 + 16, v121, 1);
                  if (v123)
                  {
                    double v124 = &v123[-*(int *)v123];
                    if (*(unsigned __int16 *)v124 >= 5u)
                    {
                      if (*((_WORD *)v124 + 2))
                      {
                        long long v125 = (unsigned int *)&v123[*((unsigned __int16 *)v124 + 2)
                                                   + *(unsigned int *)&v123[*((unsigned __int16 *)v124 + 2)]];
                        if (*v125 > (HIDWORD(v121) & 0x3FFFFFFFu))
                        {
                          uint64_t v126 = (int *)((char *)v125
                                       + 4 * HIDWORD(v121)
                                       + *(unsigned int *)((char *)v125 + (4 * HIDWORD(v121)) + 4)
                                       + 4);
                          unsigned int v127 = (unsigned __int16 *)((char *)v126 - *v126);
                          unsigned int v128 = *v127;
                          if (v128 < 0xB) {
                            goto LABEL_135;
                          }
                          if (!v127[5]) {
                            goto LABEL_136;
                          }
                          int v129 = *(unsigned __int8 *)(v122 + 3889);
                          if (v129 == 254) {
                            goto LABEL_136;
                          }
                          long long v130 = (int *)((char *)v126 + v127[5] + *(unsigned int *)((char *)v126 + v127[5]));
                          unsigned int v133 = *v130;
                          uint64_t v131 = (unsigned __int8 *)(v130 + 1);
                          uint64_t v132 = v133;
                          if (v133)
                          {
                            while (v129 != *v131)
                            {
                              LOBYTE(v134) = 0;
                              ++v131;
                              if (!--v132) {
                                goto LABEL_141;
                              }
                            }
LABEL_135:
                            if (v128 >= 5)
                            {
LABEL_136:
                              LOBYTE(v134) = 0;
                              if (v128 < 0xD || !v127[2])
                              {
LABEL_141:
                                uint64_t v136 = (char *)v195 + 64 * v69;
                                *(void *)uint64_t v136 = v23;
                                *((void *)v136 + 1) = v121;
                                *((void *)v136 + 2) = v182;
                                *((void *)v136 + 3) = v181;
                                *((void *)v136 + 4) = v23;
                                *((void *)v136 + 5) = v69;
                                *((void *)v136 + 6) = v117;
                                v136[56] = v134;
                                v120[v69] = v208[0];
                                if (v69 >= (v205 - (unsigned char *)v204) >> 2 || *((_DWORD *)v204 + v69) == -1) {
                                  sub_1084C4C((uint64_t)&v201, v69, (unint64_t *)v208);
                                }
                                else {
                                  sub_1084E9C((uint64_t *)&v201, v69, (double *)v208);
                                }
                                goto LABEL_36;
                              }
                              uint64_t v135 = v127[6];
                              if (v135)
                              {
                                int v134 = (*((unsigned __int8 *)v126 + v135) >> 1) & 1;
                                goto LABEL_141;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                LOBYTE(v134) = 0;
                goto LABEL_141;
              }
            }
            else
            {
              unint64_t v173 = *(void *)(v81 + 2200);
              unint64_t v170 = *(void *)(v81 + 2152);
              unint64_t v171 = *(void *)(v81 + 2176);
              unint64_t v172 = *(void *)(v81 + 2224);
              long long v86 = (unsigned int *)sub_2AB884(v83, 22, v180, 1);
              unint64_t v98 = v170;
              if (v170 >= v82) {
                unint64_t v98 = v82;
              }
              int v99 = 88;
              if (v170 >= v82) {
                int v99 = 0;
              }
              if (v171 < v98)
              {
                unint64_t v98 = v171;
                int v99 = 89;
              }
              if (v173 < v98)
              {
                int v99 = 90;
                unint64_t v98 = v173;
              }
              BOOL v100 = v172 >= v98;
              unsigned int v101 = 91;
              if (v100) {
                unsigned int v101 = v99;
              }
              uint64_t v102 = v81 + 32 + 24 * v101;
              *(_DWORD *)uint64_t v102 = v210;
              *(void *)(v102 + 8) = *(void *)(v81 + 3872);
              *(void *)(v102 + 16) = v86;
              if (v86) {
                goto LABEL_63;
              }
            }
          }
          break;
        }
        sub_2E6128(v208);
        goto LABEL_86;
      }
      if (sub_10844B4(*(void *)(a1 + 16), *((void *)v190 - 1)))
      {
        uint64_t v138 = (char *)v190;
        if (v190 >= v191)
        {
          int64_t v139 = (char *)__p;
          int64_t v140 = (char *)v190 - (unsigned char *)__p;
          uint64_t v141 = ((char *)v190 - (unsigned char *)__p) >> 3;
          unint64_t v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v143 = (char *)v191 - (unsigned char *)__p;
          if (((char *)v191 - (unsigned char *)__p) >> 2 > v142) {
            unint64_t v142 = v143 >> 2;
          }
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v142;
          }
          if (v144)
          {
            if (v144 >> 61) {
              sub_188D718();
            }
            uint64_t v145 = operator new(8 * v144);
            uint64_t v146 = (unint64_t *)&v145[8 * v141];
            *uint64_t v146 = v49;
            uint64_t v147 = (uint64_t)(v146 + 1);
            if (v138 != v139)
            {
LABEL_167:
              unint64_t v148 = v138 - 8 - v139;
              if (v148 < 0x58) {
                goto LABEL_209;
              }
              if ((unint64_t)(v138 - &v145[v140]) < 0x20) {
                goto LABEL_209;
              }
              uint64_t v149 = (v148 >> 3) + 1;
              uint64_t v150 = 8 * (v149 & 0x3FFFFFFFFFFFFFFCLL);
              long long v151 = &v138[-v150];
              uint64_t v146 = (unint64_t *)((char *)v146 - v150);
              long long v152 = &v145[8 * v141 - 16];
              uint64_t v153 = v138 - 16;
              uint64_t v154 = v149 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v155 = *(_OWORD *)v153;
                *(v152 - 1) = *((_OWORD *)v153 - 1);
                *long long v152 = v155;
                v152 -= 2;
                v153 -= 32;
                v154 -= 4;
              }
              while (v154);
              uint64_t v138 = v151;
              if (v149 != (v149 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_209:
                do
                {
                  unint64_t v156 = *((void *)v138 - 1);
                  v138 -= 8;
                  *--uint64_t v146 = v156;
                }
                while (v138 != v139);
              }
              uint64_t v138 = (char *)__p;
              __n128 __p = v146;
              v190 = (unsigned int *)v147;
              v191 = (unsigned int *)&v145[8 * v144];
              if (!v138) {
                goto LABEL_178;
              }
LABEL_177:
              operator delete(v138);
LABEL_178:
              v190 = (unsigned int *)v147;
              goto LABEL_179;
            }
          }
          else
          {
            uint64_t v145 = 0;
            uint64_t v146 = (unint64_t *)(8 * v141);
            *(void *)(8 * v141) = v49;
            uint64_t v147 = 8 * v141 + 8;
            if (v138 != v139) {
              goto LABEL_167;
            }
          }
          __n128 __p = v146;
          v190 = (unsigned int *)v147;
          v191 = (unsigned int *)&v145[8 * v144];
          if (v138) {
            goto LABEL_177;
          }
          goto LABEL_178;
        }
        *(void *)v190 = v49;
        v190 = (unsigned int *)(v138 + 8);
      }
LABEL_179:
      char v185 = 1;
      uint64_t v50 = (unsigned int *)__p;
      char v184 = v190;
      if (__p != v190) {
        goto LABEL_34;
      }
LABEL_151:
      if (v50)
      {
        v190 = v50;
        operator delete(v50);
      }
      unint64_t v9 = v175;
      a6 = v176;
      a1 = v186;
    }
    while (v207);
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  if (v9)
  {
    long long v157 = (char *)v195;
    do
    {
      sub_10840B8((char **)a6, (long long *)&v157[64 * v9 + 8]);
      long long v157 = (char *)v195;
      unint64_t v9 = *((void *)v195 + 8 * v9);
    }
    while (v9);
    uint64_t v158 = *(char **)a6;
    uint64_t v159 = *(void *)(a6 + 8);
    unint64_t v160 = v159 - 56;
    if (*(void *)a6 != v159 && v160 > (unint64_t)v158)
    {
      long long v162 = v158 + 56;
      do
      {
        long long v163 = *(_OWORD *)(v162 - 24);
        long long v164 = *(_OWORD *)(v162 - 40);
        long long v165 = *(_OWORD *)(v162 - 56);
        uint64_t v166 = *((void *)v162 - 1);
        long long v168 = *(_OWORD *)(v160 + 16);
        long long v167 = *(_OWORD *)(v160 + 32);
        char v169 = *(unsigned char *)(v160 + 48);
        *(_OWORD *)(v162 - 56) = *(_OWORD *)v160;
        *(v162 - 8) = v169;
        *(_OWORD *)(v162 - 24) = v167;
        *(_OWORD *)(v162 - 40) = v168;
        *(unsigned char *)(v160 + 48) = v166;
        *(_OWORD *)unint64_t v160 = v165;
        *(_OWORD *)(v160 + 16) = v164;
        *(_OWORD *)(v160 + 32) = v163;
        v160 -= 56;
        BOOL v100 = (unint64_t)v162 >= v160;
        v162 += 56;
      }
      while (!v100);
    }
  }
  if (v192)
  {
    uint64_t v193 = (int *)v192;
    operator delete(v192);
  }
  if (v195) {
    operator delete(v195);
  }
  if (v198) {
    operator delete(v198);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  if (v201)
  {
    v202 = (char *)v201;
    operator delete(v201);
  }
}

void sub_1088974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32)
  {
    operator delete(a32);
    uint64_t v42 = a35;
    if (!a35)
    {
LABEL_5:
      uint64_t v43 = a38;
      if (!a38) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v42 = a35;
    if (!a35) {
      goto LABEL_5;
    }
  }
  operator delete(v42);
  uint64_t v43 = a38;
  if (!a38)
  {
LABEL_6:
    sub_3310C((uint64_t)&a41);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v43);
  sub_3310C((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1088A90@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v4 = sub_46C760(a1);
  unint64_t v5 = v4;
  if (v4)
  {
    if (v4 >> 61) {
      sub_2E00();
    }
    uint64_t v6 = (char *)operator new(8 * v4);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = &v6[8 * v5];
  }
  uint64_t result = sub_46DE4C((uint64_t)a1);
  uint64_t v8 = result;
  if (result)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v11 = v9;
      uint64_t v10 = sub_3C80F8((uint64_t)a1);
      uint64_t result = (uint64_t)sub_108760C((unint64_t *)a2, *(void **)(a2 + 8), *(void *)(v10 + 56 * v11 + 32) - *(void *)(v10 + 56 * v11 + 24), &v11);
      ++v9;
    }
    while (v8 != v9);
  }
  return result;
}

void sub_1088B5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1088B84(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = sub_46C8EC(*a4, (uint64_t)a4[1]);
  unint64_t v16 = sub_3A5DDC(v14, *(void *)(v15 + 32));
  unint64_t v17 = v16;
  if (!a6)
  {
    unsigned int v32 = *(void **)a3;
    uint64_t v33 = *(void **)(a3 + 8);
    if (*(void **)a3 != v33)
    {
      while (((*v32 >> 30) & 0xFFFFFFFCLL | (*v32 << 32) | (*v32 >> 63) | (*v32 >> 61) & 2) != ((v16 >> 30) & 0xFFFFFFFC | (v16 << 32) | (v16 >> 63) | (v16 >> 61) & 2))
      {
        if (++v32 == v33)
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v37);
            sub_188FC78(v37, (uint64_t)"Pathlet hint did not contain the degree-2 pathlet.", 50);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            if (SHIBYTE(v36) < 0) {
              operator delete(__p);
            }
            if (v38 < 0) {
              operator delete((void *)v37[9]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          break;
        }
      }
    }
  }
  __n128 __p = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_318C48(*(void *)(a1 + 16), v17, (unint64_t *)&__p);
  long long v18 = __p;
  unint64_t v19 = v35;
  if (__p == v35)
  {
    long long v20 = __p;
    unint64_t v21 = __p;
  }
  else
  {
    while (1)
    {
      uint64_t v22 = *v18;
      unint64_t v23 = *(void *)(sub_46C8EC(*a4, (uint64_t)a4[1]) + 32);
      if ((v22 & 0xFFFFFFFFFFFFLL) == (v23 & 0xFFFFFFFFFFFFLL)
        && ((v22 & 0xFF000000000000) == 0) != (HIWORD(v23) & 1))
      {
        break;
      }
      if (++v18 == v19)
      {
        long long v18 = v19;
        break;
      }
    }
    unint64_t v21 = v18;
    long long v20 = __p;
    long long v18 = v35;
  }
  sub_E951F4((unint64_t)v21, (unint64_t)v18, *a4, (unint64_t)a4[1], *(void **)a5, *(void *)(a5 + 8), v37);
  uint64_t v25 = (v21 - v20) >> 3;
  uint64_t v26 = __p;
  uint64_t v27 = (uint64_t)(v37[0] - (void)__p) >> 3;
  unint64_t v28 = v27 - v25 + a6;
  if (a6 <= v28) {
    unint64_t v29 = v27 - v25 + a6;
  }
  else {
    unint64_t v29 = a6;
  }
  if (v28 <= a6)
  {
    *(void *)a7 = v17;
    *(void *)(a7 + 8) = v25;
    *(void *)(a7 + 16) = v27;
    *(void *)(a7 + 24) = a6;
    *(void *)(a7 + 32) = v28;
    *(void *)(a7 + 40) = 0;
    *(unsigned char *)(a7 + 48) = 0;
    if (!v26) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v30 = 0;
  unint64_t v31 = a6;
  do
    v30 += sub_46CCC8(a2, v31++, v24);
  while (v29 != v31);
  uint64_t v26 = __p;
  *(void *)a7 = v17;
  *(void *)(a7 + 8) = v25;
  *(void *)(a7 + 16) = v27;
  *(void *)(a7 + 24) = a6;
  *(void *)(a7 + 32) = v28;
  *(void *)(a7 + 40) = v30;
  *(unsigned char *)(a7 + 48) = 0;
  if (v26)
  {
LABEL_19:
    unint64_t v35 = v26;
    operator delete(v26);
  }
}

void sub_1088EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1088F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1088F3C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void **a4@<X3>, void **a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13 = a1;
  unint64_t v78 = 0;
  unint64_t v79 = 0;
  uint64_t v80 = 0;
  unint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = sub_46C8EC(*a4, (uint64_t)a4[1]);
  unint64_t v16 = sub_1084234(v14, *(void *)(v15 + 32), (uint64_t)&v76);
  unint64_t v60 = a2;
  if (!a6 && *a3 != a3[1]) {
    sub_10838D0(v16, (uint64_t)a3, (uint64_t)&v76);
  }
  uint64_t v17 = *(void *)(v13 + 40);
  *(void *)(v13 + 48) = v17;
  long long v18 = v76;
  uint64_t v70 = v13;
  if (*(unsigned char *)(v13 + 36))
  {
    uint64_t v19 = *(void *)(v13 + 24);
    unint64_t v20 = *v76;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    double v21 = sub_299F0C(v19, v20, (uint64_t)&v71, 0);
    BOOL v22 = (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if ((unint64_t)(*(void *)&v21 - 1) < 0xFFFFFFFFFFFFFLL) {
      BOOL v22 = 1;
    }
    char v24 = ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v21 >= 0.0 || v22;
    LOBYTE(v81) = v24;
    sub_108437C(v13 + 40, v18, (char *)&v81);
    uint64_t v25 = (void **)v77;
    uint64_t v26 = (void **)(v76 + 1);
    uint64_t v81 = (char **)(v13 + 40);
    if (v76 + 1 != v77)
    {
      do
      {
        uint64_t v27 = *v26;
        uint64_t v28 = *(void *)(v13 + 24);
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        double v29 = sub_299F0C(v28, (unint64_t)v27, (uint64_t)&v71, 0);
        BOOL v30 = (*(void *)&v29 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if ((unint64_t)(*(void *)&v29 - 1) < 0xFFFFFFFFFFFFFLL) {
          BOOL v30 = 1;
        }
        int v32 = ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v29 >= 0.0 || v30;
        uint64_t v71 = v27;
        LODWORD(v72) = v32;
        sub_3BDEE8(&v81, (uint64_t *)&v71);
        ++v26;
      }
      while (v26 != v25);
    }
    uint64_t v33 = *(uint64_t **)(v13 + 40);
    uint64_t v34 = *(uint64_t **)(v13 + 48);
    while (1)
    {
      uint64_t v33 = (uint64_t *)((char *)v33 + 12);
      if (v33 == v34) {
        break;
      }
LABEL_25:
      if (*((unsigned char *)v33 + 8))
      {
        unint64_t v35 = v34;
        while (1)
        {
          uint64_t v34 = (uint64_t *)((char *)v35 - 12);
          if ((uint64_t *)((char *)v35 - 12) == v33) {
            goto LABEL_33;
          }
          int v36 = *((unsigned __int8 *)v35 - 4);
          unint64_t v35 = (uint64_t *)((char *)v35 - 12);
          if (!v36)
          {
            uint64_t v37 = *v33;
            uint64_t *v33 = *v34;
            uint64_t *v34 = v37;
            LOBYTE(v37) = *((unsigned char *)v33 + 8);
            *((unsigned char *)v33 + 8) = *((unsigned char *)v34 + 8);
            *((unsigned char *)v34 + 8) = v37;
            uint64_t v33 = (uint64_t *)((char *)v33 + 12);
            if (v34 != v33) {
              goto LABEL_25;
            }
            goto LABEL_33;
          }
        }
      }
    }
  }
  else
  {
    char v38 = v77;
    if (v76 != v77)
    {
      do
      {
        uint64_t v71 = (void *)*v18;
        LODWORD(v72) = 0;
        uint64_t v17 = sub_10847B0((char **)(v13 + 40), v17, (uint64_t)&v71) + 12;
        ++v18;
      }
      while (v18 != v38);
    }
  }
LABEL_33:
  uint64_t v39 = *(void *)(v13 + 40);
  uint64_t v68 = *(void *)(v13 + 48);
  if (v39 == v68) {
    goto LABEL_64;
  }
  unint64_t v59 = a6;
  unint64_t v67 = 0;
  char v66 = 0;
  unsigned int v65 = 0;
  unint64_t v62 = 0;
  uint64_t v63 = -1;
  uint64_t v64 = -1;
  unint64_t v40 = -1;
  do
  {
    unint64_t v41 = *(void *)v39;
    int v42 = *(unsigned __int8 *)(v39 + 8);
    BOOL v43 = *(unsigned char *)(v39 + 8) != 0;
    sub_318C48(*(void *)(v13 + 16), *(void *)v39, (unint64_t *)&v78);
    uint64_t v45 = v78;
    uint64_t v44 = v79;
    if (v78 == v79)
    {
      int v46 = v78;
      uint64_t v47 = v78;
    }
    else
    {
      while (1)
      {
        unint64_t v48 = *v45;
        unint64_t v49 = *(void *)(sub_46C8EC(*a4, (uint64_t)a4[1]) + 32);
        if (((unint64_t)v48 & 0xFFFFFFFFFFFFLL) == (v49 & 0xFFFFFFFFFFFFLL)
          && (((unint64_t)v48 & 0xFF000000000000) == 0) != (HIWORD(v49) & 1))
        {
          break;
        }
        if (++v45 == v44)
        {
          uint64_t v45 = v44;
          break;
        }
      }
      uint64_t v47 = v45;
      int v46 = v78;
      uint64_t v45 = v79;
    }
    sub_E951F4((unint64_t)v47, (unint64_t)v45, *a4, (unint64_t)a4[1], *a5, (unint64_t)a5[1], (unint64_t *)&v81);
    unint64_t v50 = v47 - v46;
    int64_t v51 = v81 - v78;
    uint64_t v71 = (void *)v50;
    uint64_t v72 = v51;
    double v52 = *(double *)&v82;
    long long v73 = v82;
    uint64_t v13 = v70;
    if (v79 != v81 && (sub_108963C(v70, (uint64_t)a4, (void **)&v73, a5, v41, &v78, a7) & 1) == 0) {
      goto LABEL_54;
    }
    if (v50 < v40 || v50 == v40 && v51 - v50 > v67)
    {
LABEL_36:
      uint64_t v63 = (uint64_t)v71;
      uint64_t v64 = v72;
      unint64_t v62 = HIDWORD(v41);
      unsigned int v65 = v41;
      char v66 = v43;
      unint64_t v67 = v51 - v50;
      goto LABEL_37;
    }
    if (v50 != v40) {
      goto LABEL_54;
    }
    if (v66)
    {
      char v66 = 1;
LABEL_54:
      unint64_t v50 = v40;
      goto LABEL_37;
    }
    if (v42) {
      goto LABEL_36;
    }
    char v66 = 0;
    unint64_t v50 = v40;
LABEL_37:
    v39 += 12;
    unint64_t v40 = v50;
  }
  while (v39 != v68);
  a6 = v59;
  if (v65)
  {
    unint64_t v53 = v64 - v63 + v59;
    if (v59 <= v53) {
      unint64_t v54 = v64 - v63 + v59;
    }
    else {
      unint64_t v54 = v59;
    }
    if (v53 <= v59)
    {
      uint64_t v55 = 0;
    }
    else
    {
      uint64_t v55 = 0;
      unint64_t v56 = v59;
      do
        v55 += sub_46CCC8(v60, v56++, v52);
      while (v54 != v56);
    }
    unsigned __int8 v58 = sub_10844B4(*(void *)(v70 + 16), v65 | (v62 << 32));
    *(void *)a8 = v65 | (v62 << 32);
    *(void *)(a8 + 8) = v63;
    *(void *)(a8 + 16) = v64;
    *(void *)(a8 + 24) = v59;
    *(void *)(a8 + 32) = v53;
    *(void *)(a8 + 40) = v55;
    *(unsigned char *)(a8 + 48) = v58;
    unint64_t v57 = v76;
    if (!v76) {
      goto LABEL_74;
    }
LABEL_73:
    unint64_t v77 = v57;
    operator delete(v57);
    goto LABEL_74;
  }
LABEL_64:
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v71);
    sub_188FC78(&v71, (uint64_t)"Greedy maneuver pathlet mapping had to fall back to degree-2 pathlets.", 70);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v81, 1u);
    if (SHIBYTE(v82) < 0) {
      operator delete(v81);
    }
    if (v75 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  *(void *)&long long v73 = 0;
  sub_1089804(v13, v60, (uint64_t)&v71, a4, (uint64_t)a5, a6, a8);
  if (v71)
  {
    uint64_t v72 = (uint64_t)v71;
    operator delete(v71);
  }
  unint64_t v57 = v76;
  if (v76) {
    goto LABEL_73;
  }
LABEL_74:
  if (v78)
  {
    unint64_t v79 = v78;
    operator delete(v78);
  }
}

void sub_108956C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (*(char *)(v25 - 89) < 0) {
    operator delete(*(void **)(v25 - 112));
  }
  sub_111ECAC((uint64_t)&__p);
  uint64_t v27 = *(void **)(v25 - 160);
  if (v27)
  {
    *(void *)(v25 - 152) = v27;
    operator delete(v27);
    uint64_t v28 = *(void **)(v25 - 136);
    if (!v28) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v28 = *(void **)(v25 - 136);
    if (!v28) {
      goto LABEL_5;
    }
  }
  *(void *)(v25 - 128) = v28;
  operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_108963C(uint64_t a1, uint64_t a2, void **a3, void **a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (sub_10844B4(*(void *)(a1 + 16), a5)) {
    return 0;
  }
  if (!*a3)
  {
    if (!*a4) {
      return 1;
    }
    BOOL v17 = 0;
    long long v18 = a4[1];
    unint64_t v19 = sub_46C760(*a4);
LABEL_10:
    if (v17 == (unint64_t)v18 < v19) {
      return 1;
    }
    goto LABEL_17;
  }
  uint64_t v15 = a3[1];
  unint64_t v16 = sub_46C760(*a3);
  BOOL v17 = (unint64_t)v15 < v16;
  if (*a4)
  {
    long long v18 = a4[1];
    unint64_t v19 = sub_46C760(*a4);
    if (v17 && (unint64_t)v18 < v19)
    {
      uint64_t v21 = sub_46C8EC(*a3, (uint64_t)a3[1]);
      if (v21 == sub_46C8EC(*a4, (uint64_t)a4[1])) {
        return 1;
      }
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  if ((unint64_t)v15 >= v16) {
    return 1;
  }
LABEL_17:
  BOOL v22 = (int **)sub_46C8EC(*a3, (uint64_t)a3[1]);
  unint64_t v23 = (char *)*v22;
  char v24 = (unsigned __int16 *)((char *)*v22 - **v22);
  unsigned int v25 = *v24;
  if (!*((unsigned char *)v22 + 38))
  {
    if (v25 >= 0xB)
    {
      unsigned int v26 = v24[5];
      uint64_t result = 1;
      if (!v26) {
        return result;
      }
      goto LABEL_23;
    }
    return 1;
  }
  if (v25 < 0xB) {
    return 1;
  }
  unsigned int v26 = v24[5];
  if (!v26) {
    return 1;
  }
  LODWORD(result) = 2;
LABEL_23:
  if ((*(_DWORD *)&v23[v26] & result) == 0) {
    return 1;
  }
  if (sub_10844B4(*(void *)(a1 + 16), a5)) {
    return 0;
  }
  uint64_t v27 = (uint64_t)(a6[1] - *a6) >> 3;
  uint64_t v28 = *(void **)a2;
  unint64_t v29 = *(void *)(a2 + 8);
  if ((uint64_t)((uint64_t)a4[1] - v29) < v27) {
    uint64_t v27 = (uint64_t)a4[1] - v29;
  }
  BOOL v30 = *(void **)a2;

  return sub_1089BBC(v28, v29, v30, v27 + v29, a7, (void **)a2);
}

void sub_1089804(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = sub_46C8EC(*a4, (uint64_t)a4[1]);
  unint64_t v16 = sub_3A5DDC(v14, *(void *)(v15 + 32));
  unint64_t v17 = v16;
  if (!a6)
  {
    int v32 = *(void **)a3;
    uint64_t v33 = *(void **)(a3 + 8);
    if (*(void **)a3 != v33)
    {
      while (((*v32 >> 30) & 0xFFFFFFFCLL | (*v32 << 32) | (*v32 >> 63) | (*v32 >> 61) & 2) != ((v16 >> 30) & 0xFFFFFFFC | (v16 << 32) | (v16 >> 63) | (v16 >> 61) & 2))
      {
        if (++v32 == v33)
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v37);
            sub_188FC78(v37, (uint64_t)"Pathlet hint did not contain the degree-2 pathlet.", 50);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            if (SHIBYTE(v36) < 0) {
              operator delete(__p);
            }
            if (v38 < 0) {
              operator delete((void *)v37[9]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          break;
        }
      }
    }
  }
  __n128 __p = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_318C48(*(void *)(a1 + 16), v17, (unint64_t *)&__p);
  long long v18 = __p;
  unint64_t v19 = v35;
  if (__p == v35)
  {
    unint64_t v20 = __p;
    uint64_t v21 = __p;
  }
  else
  {
    while (1)
    {
      uint64_t v22 = *v18;
      unint64_t v23 = *(void *)(sub_46C8EC(*a4, (uint64_t)a4[1]) + 32);
      if ((v22 & 0xFFFFFFFFFFFFLL) == (v23 & 0xFFFFFFFFFFFFLL)
        && ((v22 & 0xFF000000000000) == 0) != (HIWORD(v23) & 1))
      {
        break;
      }
      if (++v18 == v19)
      {
        long long v18 = v19;
        break;
      }
    }
    uint64_t v21 = v18;
    unint64_t v20 = __p;
    long long v18 = v35;
  }
  sub_E951F4((unint64_t)v21, (unint64_t)v18, *a4, (unint64_t)a4[1], *(void **)a5, *(void *)(a5 + 8), v37);
  uint64_t v25 = (v21 - v20) >> 3;
  unsigned int v26 = __p;
  uint64_t v27 = (uint64_t)(v37[0] - (void)__p) >> 3;
  unint64_t v28 = v27 - v25 + a6;
  if (a6 <= v28) {
    unint64_t v29 = v27 - v25 + a6;
  }
  else {
    unint64_t v29 = a6;
  }
  if (v28 <= a6)
  {
    *(void *)a7 = v17;
    *(void *)(a7 + 8) = v25;
    *(void *)(a7 + 16) = v27;
    *(void *)(a7 + 24) = a6;
    *(void *)(a7 + 32) = v28;
    *(void *)(a7 + 40) = 0;
    *(unsigned char *)(a7 + 48) = 0;
    if (!v26) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v30 = 0;
  unint64_t v31 = a6;
  do
    v30 += sub_46CCC8(a2, v31++, v24);
  while (v29 != v31);
  unsigned int v26 = __p;
  *(void *)a7 = v17;
  *(void *)(a7 + 8) = v25;
  *(void *)(a7 + 16) = v27;
  *(void *)(a7 + 24) = a6;
  *(void *)(a7 + 32) = v28;
  *(void *)(a7 + 40) = v30;
  *(unsigned char *)(a7 + 48) = 0;
  if (v26)
  {
LABEL_19:
    unint64_t v35 = v26;
    operator delete(v26);
  }
}

void sub_1089B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1089B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1089BBC(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5, void **a6)
{
  if (a1)
  {
    if (a3)
    {
      do
      {
        unint64_t v22 = sub_46C760(a1);
        unint64_t v23 = sub_46C760(a3);
        if (a2 >= v22 || a4 >= v23)
        {
          if (a2 < v22 == a4 < v23) {
            return 0;
          }
        }
        else
        {
          uint64_t v24 = sub_46C8EC(a1, a2);
          if (v24 == sub_46C8EC(a3, a4)) {
            return 0;
          }
        }
        uint64_t v18 = sub_46C8EC(a1, a2);
        uint64_t v19 = *(void *)(sub_46C8EC(*a6, (uint64_t)a6[1]) + 32);
        uint64_t v20 = *(void *)(v18 + 32);
        ++a2;
      }
      while (v19 != v20 || ((v20 ^ v19) & 0xFFFF00000000) != 0);
      return 1;
    }
    else
    {
      while (1)
      {
        unint64_t v15 = sub_46C760(a1);
        BOOL v16 = a2 >= v15;
        BOOL result = a2 < v15;
        if (v16) {
          break;
        }
        uint64_t v11 = sub_46C8EC(a1, a2);
        uint64_t v12 = *(void *)(sub_46C8EC(*a6, (uint64_t)a6[1]) + 32);
        uint64_t v13 = *(void *)(v11 + 32);
        ++a2;
        if (v12 == v13 && ((v13 ^ v12) & 0xFFFF00000000) == 0) {
          return 1;
        }
      }
    }
  }
  else if (a3)
  {
    while (1)
    {
      unint64_t v25 = sub_46C760(a3);
      BOOL v16 = a4 >= v25;
      BOOL result = a4 < v25;
      if (v16) {
        break;
      }
      uint64_t v26 = sub_46C8EC(0, a2);
      uint64_t v27 = *(void *)(sub_46C8EC(*a6, (uint64_t)a6[1]) + 32);
      uint64_t v28 = *(void *)(v26 + 32);
      ++a2;
      if (v27 == v28 && ((v28 ^ v27) & 0xFFFF00000000) == 0) {
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_1089D70(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void **a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = sub_46C8EC(*a4, (uint64_t)a4[1]);
  unint64_t v16 = sub_3A5DDC(v14, *(void *)(v15 + 32));
  unint64_t v17 = v16;
  if (!a6)
  {
    int v32 = *(void **)a3;
    uint64_t v33 = *(void **)(a3 + 8);
    if (*(void **)a3 != v33)
    {
      while (((*v32 >> 30) & 0xFFFFFFFCLL | (*v32 << 32) | (*v32 >> 63) | (*v32 >> 61) & 2) != ((v16 >> 30) & 0xFFFFFFFC | (v16 << 32) | (v16 >> 63) | (v16 >> 61) & 2))
      {
        if (++v32 == v33)
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v37);
            sub_188FC78(v37, (uint64_t)"Pathlet hint did not contain the degree-2 pathlet.", 50);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 1u);
            if (SHIBYTE(v36) < 0) {
              operator delete(__p);
            }
            if (v38 < 0) {
              operator delete((void *)v37[9]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          break;
        }
      }
    }
  }
  __n128 __p = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  sub_318C48(*(void *)(a1 + 16), v17, (unint64_t *)&__p);
  uint64_t v18 = __p;
  uint64_t v19 = v35;
  if (__p == v35)
  {
    uint64_t v20 = __p;
    uint64_t v21 = __p;
  }
  else
  {
    while (1)
    {
      uint64_t v22 = *v18;
      unint64_t v23 = *(void *)(sub_46C8EC(*a4, (uint64_t)a4[1]) + 32);
      if ((v22 & 0xFFFFFFFFFFFFLL) == (v23 & 0xFFFFFFFFFFFFLL)
        && ((v22 & 0xFF000000000000) == 0) != (HIWORD(v23) & 1))
      {
        break;
      }
      if (++v18 == v19)
      {
        uint64_t v18 = v19;
        break;
      }
    }
    uint64_t v21 = v18;
    uint64_t v20 = __p;
    uint64_t v18 = v35;
  }
  sub_E951F4((unint64_t)v21, (unint64_t)v18, *a4, (unint64_t)a4[1], *(void **)a5, *(void *)(a5 + 8), v37);
  uint64_t v25 = (v21 - v20) >> 3;
  uint64_t v26 = __p;
  uint64_t v27 = (uint64_t)(v37[0] - (void)__p) >> 3;
  unint64_t v28 = v27 - v25 + a6;
  if (a6 <= v28) {
    unint64_t v29 = v27 - v25 + a6;
  }
  else {
    unint64_t v29 = a6;
  }
  if (v28 <= a6)
  {
    *(void *)a7 = v17;
    *(void *)(a7 + 8) = v25;
    *(void *)(a7 + 16) = v27;
    *(void *)(a7 + 24) = a6;
    *(void *)(a7 + 32) = v28;
    *(void *)(a7 + 40) = 0;
    *(unsigned char *)(a7 + 48) = 0;
    if (!v26) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v30 = 0;
  unint64_t v31 = a6;
  do
    v30 += sub_46CCC8(a2, v31++, v24);
  while (v29 != v31);
  uint64_t v26 = __p;
  *(void *)a7 = v17;
  *(void *)(a7 + 8) = v25;
  *(void *)(a7 + 16) = v27;
  *(void *)(a7 + 24) = a6;
  *(void *)(a7 + 32) = v28;
  *(void *)(a7 + 40) = v30;
  *(unsigned char *)(a7 + 48) = 0;
  if (v26)
  {
LABEL_19:
    unint64_t v35 = v26;
    operator delete(v26);
  }
}

void sub_108A0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_108A100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_108A128()
{
  unk_25FDDD7 = 16641;
  word_25FDDC0 = 65;
  byte_25FDDEF = 1;
  byte_25FDDD9 = 0;
}

void *sub_108A150(void *a1, void *a2, void *a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = sub_3750CC(a2);
  sub_3EAFD4(a1 + 2, a2, a4);
  sub_475DF0(a1 + 7, a2);
  sub_108CF80((uint64_t)(a1 + 15), a3);
  return a1;
}

void sub_108A1C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 96);
  if (v3)
  {
    *(void *)(v1 + 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_108A1DC(uint64_t a1, char *a2)
{
  sub_45E97C(a2, (uint64_t)&v20);
  sub_39ECCC((uint64_t)&v25, &v20);
  if (v23)
  {
    double v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  sub_45EA74(a2, (uint64_t)&v15);
  sub_39ECCC((uint64_t)&v20, &v15);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    unint64_t v17 = v16;
    operator delete(v16);
  }
  sub_39ECCC((uint64_t)v10, &v25);
  sub_39ECCC((uint64_t)v5, &v20);
  uint64_t v3 = sub_108A3A4(v10, (uint64_t)v5, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    double v7 = v6;
    operator delete(v6);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  if (v23)
  {
    double v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v28)
  {
    unint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  return v3;
}

void sub_108A324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_39EB70((uint64_t *)va);
  sub_39EB70((uint64_t *)va1);
  sub_39EB70((void *)(v2 - 160));
  sub_39EB70((void *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_108A360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_39EB70(&a28);
  sub_39EB70((void *)(v28 - 88));
  _Unwind_Resume(a1);
}

void sub_108A37C(_Unwind_Exception *a1)
{
  sub_39EB70((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_108A390(_Unwind_Exception *a1)
{
  sub_39EB70((void *)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_108A3A4(void **a1, uint64_t a2, uint64_t a3)
{
  while (!sub_3AA3AC((uint64_t)a1, a2))
  {
    uint64_t v7 = *(int **)(sub_46C8EC(*a1, (uint64_t)a1[1]) + 8);
    uint64_t v9 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v9 >= 0x11u)
    {
      uint64_t v10 = v9[8];
      if (v10)
      {
        if ((*(_WORD *)((unsigned char *)v7 + v10) & 8) != 0) {
          a3 += sub_46CCC8(*a1, (unint64_t)a1[1], v8);
        }
      }
    }
    sub_39EBB4(a1);
  }
  return a3;
}

uint64_t sub_108A438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)nullsub_1(a2);
  unint64_t v5 = *(void **)(nullsub_1(a2) + 8);
  if (v4 == v5) {
    return 0;
  }
  LODWORD(v6) = 0;
  do
  {
    uint64_t v6 = sub_108A534(a1, v4, 0x7FFFFFFFFFFFFFFELL) + v6;
    v4 += 132;
  }
  while (v4 != v5);
  return v6;
}

uint64_t sub_108A4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_45FB48(a2);
  if (result)
  {
    uint64_t v7 = *(void **)nullsub_1(a2);
    return sub_108A534(a1, v7, a3);
  }
  return result;
}

uint64_t sub_108A534(uint64_t a1, void *a2, uint64_t a3)
{
  if (sub_46C760(a2) < 2) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 120);
  uint64_t v7 = sub_40EFE8((uint64_t)a2);
  double v8 = *(int **)(v7 + 8);
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (*(unsigned char *)(v7 + 38))
  {
    if (v10 < 5 || (unsigned int v11 = v9[2]) == 0)
    {
LABEL_9:
      __int16 v53 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    if (v10 < 9) {
      goto LABEL_9;
    }
    unsigned int v11 = v9[4];
    if (!v11) {
      goto LABEL_9;
    }
  }
  __int16 v53 = *(_WORD *)((char *)v8 + v11);
LABEL_10:
  uint64_t v12 = (void *)sub_40EFE8((uint64_t)a2);
  uint64_t v13 = (unsigned __int16 *)(*v12 - *(int *)*v12);
  if (*v13 >= 0xBu && (uint64_t v14 = v13[5]) != 0)
  {
    int v15 = (*(unsigned __int8 *)(*v12 + v14) >> 2) & 1;
    unint64_t v16 = sub_46C760(a2);
    if (v16 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    if (v16 >= 2)
    {
LABEL_16:
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      double v20 = (double)v6;
      uint64_t v21 = 1;
      while (1)
      {
        uint64_t v22 = (int **)sub_46C8EC(a2, v21 - 1);
        unint64_t v23 = (int **)sub_46C8EC(a2, v21);
        v19 += sub_46CCC8(a2, v21 - 1, v24);
        if (v19 >= a3) {
          return v18;
        }
        long long v25 = v22[1];
        if (v25 && (v26 = (unsigned __int16 *)((char *)v25 - *v25), *v26 >= 0x11u) && (uint64_t v27 = v26[8]) != 0)
        {
          int v28 = (*(unsigned __int16 *)((char *)v25 + v27) >> 2) & 1;
          unint64_t v29 = v23[1];
          if (!v29) {
            goto LABEL_34;
          }
        }
        else
        {
          int v28 = 0;
          unint64_t v29 = v23[1];
          if (!v29) {
            goto LABEL_34;
          }
        }
        uint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
        if (*v30 < 0x11u || (uint64_t v31 = v30[8]) == 0)
        {
LABEL_34:
          LOBYTE(v34) = 0;
          if (!v28) {
            goto LABEL_42;
          }
LABEL_35:
          if (v34)
          {
LABEL_42:
            if (*((_DWORD *)v22 + 8) == *((_DWORD *)v23 + 8))
            {
              if (*((unsigned __int16 *)v22 + 18) == *((unsigned __int16 *)v23 + 18)) {
                char v39 = v28;
              }
              else {
                char v39 = 1;
              }
              unsigned int v40 = v18 + ((v34 & 1) == 0);
              if (v39) {
                uint64_t v18 = v18;
              }
              else {
                uint64_t v18 = v40;
              }
            }
            goto LABEL_18;
          }
          unsigned __int16 v35 = v53 + 18000;
          if ((unsigned __int16)((unsigned __int16)(v53 + 18000) >> 5) >= 0x465u) {
            unsigned __int16 v35 = v53 - 18000;
          }
          uint64_t v36 = (unsigned __int16 *)((char *)v29 - *v29);
          unsigned int v37 = *v36;
          if (*((unsigned char *)v23 + 38))
          {
            if (v37 < 9) {
              goto LABEL_52;
            }
            unsigned int v38 = v36[4];
            if (!v38) {
              goto LABEL_52;
            }
LABEL_51:
            int v41 = *(unsigned __int16 *)((char *)v29 + v38);
          }
          else
          {
            if (v37 >= 5)
            {
              unsigned int v38 = v36[2];
              if (v38) {
                goto LABEL_51;
              }
            }
LABEL_52:
            int v41 = 0;
          }
          int v42 = v41 - v35;
          if (v42 > 18000) {
            v42 -= 36000;
          }
          if (v42 < -17999) {
            v42 += 36000;
          }
          if (((fabs((double)v42 / 100.0) > v20) & v15) == 1)
          {
            BOOL v43 = (unsigned __int16 *)((char *)*v23 - **v23);
            if (*v43 >= 0xBu)
            {
              uint64_t v44 = v43[5];
              if (v44)
              {
                if ((*(int *)((char *)*v23 + v44) & 4) != 0) {
                  uint64_t v18 = (v18 + 1);
                }
              }
            }
            LOBYTE(v15) = 1;
          }
          goto LABEL_18;
        }
        unsigned int v32 = *(_WORD *)((unsigned char *)v29 + v31) & 4;
        if (v32) {
          char v33 = v28;
        }
        else {
          char v33 = 1;
        }
        if (v33)
        {
          unsigned int v34 = v32 >> 2;
          if (!v28) {
            goto LABEL_42;
          }
          goto LABEL_35;
        }
        uint64_t v45 = (unsigned __int16 *)((char *)v25 - *v25);
        unsigned int v46 = *v45;
        if (*((unsigned char *)v22 + 38))
        {
          if (v46 >= 5)
          {
            unsigned int v47 = v45[2];
            if (v47) {
              goto LABEL_68;
            }
          }
        }
        else if (v46 >= 9)
        {
          unsigned int v47 = v45[4];
          if (v47)
          {
LABEL_68:
            __int16 v53 = *(_WORD *)((char *)v25 + v47);
            uint64_t v48 = (uint64_t)*v22;
            unint64_t v49 = (unsigned __int16 *)((char *)*v22 - **v22);
            if (*v49 < 0xBu) {
              goto LABEL_73;
            }
            goto LABEL_71;
          }
        }
        __int16 v53 = 0;
        uint64_t v48 = (uint64_t)*v22;
        unint64_t v49 = (unsigned __int16 *)((char *)*v22 - **v22);
        if (*v49 < 0xBu) {
          goto LABEL_73;
        }
LABEL_71:
        uint64_t v50 = v49[5];
        if (!v50)
        {
LABEL_73:
          LOBYTE(v15) = 0;
          goto LABEL_18;
        }
        LOBYTE(v15) = (*(unsigned char *)(v48 + v50) & 4) != 0;
LABEL_18:
        if (v17 == ++v21) {
          return v18;
        }
      }
    }
  }
  else
  {
    LOBYTE(v15) = 0;
    unint64_t v51 = sub_46C760(a2);
    if (v51 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v51;
    }
    if (v51 >= 2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t sub_108A908(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  uint64_t v4 = *(void **)v3;
  unint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 == v5) {
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = sub_108A984(a1, v4);
    if (v6 <= v7) {
      uint64_t v6 = v7;
    }
    v4 += 132;
  }
  while (v4 != v5);
  return v6;
}

uint64_t sub_108A984(uint64_t a1, void *a2)
{
  if (!sub_46C760(a2)) {
    return 0;
  }
  unint64_t v3 = sub_46C760(a2);
  char v39 = 0;
  uint64_t v37 = 0x3E4CCCCD3F000000;
  int v40 = 0;
  int v41 = 0;
  int v42 = -1;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (v3)
  {
    unint64_t v4 = 4;
    if (v3 != 1)
    {
      do
      {
        if ((v4 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v4 *= 2;
      }
      while (v3 >= (unint64_t)(float)((float)v4 * 0.5));
    }
  }
  else
  {
    unint64_t v4 = 32;
  }
  uint64x2_t v36 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x3E4CCCCD3F000000, (float)v4)));
  __int16 v38 = 256;
  unint64_t v45 = v4;
  unint64_t v46 = 0xFFFFFFFF00000000;
  uint64_t v6 = (void **)malloc_type_malloc(8 * v4, 0x100004000313F17uLL);
  unsigned int v47 = v6;
  unint64_t v7 = v45;
  if (!v45) {
    goto LABEL_19;
  }
  unint64_t v8 = (v45 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v8 >= 0xF)
  {
    if (v6 >= &v47 || (uint64_t v9 = (unint64_t *)v6, &v46 >= (unint64_t *)&v6[v45]))
    {
      unint64_t v10 = v8 + 1;
      uint64_t v9 = (unint64_t *)&v6[v10 & 0x3FFFFFFFFFFFFFFCLL];
      unsigned int v11 = (const double *)&v46;
      float64x2_t v12 = vld1q_dup_f64(v11);
      uint64_t v13 = (float64x2_t *)(v6 + 2);
      uint64_t v14 = v10 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v13[-1] = v12;
        *uint64_t v13 = v12;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v9 = (unint64_t *)v6;
  }
  int v15 = (unint64_t *)&v6[v7];
  do
    *v9++ = v46;
  while (v9 != v15);
LABEL_19:
  sub_46C77C(a2, v48);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = (void *)v48[0];
  unint64_t v19 = v48[1];
  double v20 = (void *)v48[2];
  unint64_t v21 = v48[3];
  while (1)
  {
    if (v18)
    {
      unint64_t v22 = sub_46C760(v18);
      BOOL v23 = v19 < v22;
      if (!v20)
      {
        if (v19 >= v22) {
          goto LABEL_41;
        }
        goto LABEL_33;
      }
    }
    else
    {
      if (!v20) {
        goto LABEL_41;
      }
      BOOL v23 = 0;
    }
    unint64_t v24 = sub_46C760(v20);
    if (v21 >= v24 || !v23) {
      break;
    }
    uint64_t v26 = sub_46C8EC(v18, v19);
    if (v26 == sub_46C8EC(v20, v21)) {
      goto LABEL_41;
    }
LABEL_33:
    uint64_t v27 = sub_46C8EC(v18, v19);
    unint64_t v35 = *(unsigned int *)(v27 + 32) | ((unint64_t)*(unsigned __int16 *)(v27 + 36) << 32);
    if (sub_F953E4((uint64_t)&v36, &v35) == -1)
    {
      if (v16 <= v17) {
        uint64_t v29 = v17;
      }
      else {
        uint64_t v29 = v16;
      }
      if (v17 > 0) {
        uint64_t v16 = v29;
      }
      sub_10909B8((uint64_t)&v36, 1);
      sub_1090C8C((int32x2_t *)&v36, &v35, (uint64_t)v48);
      v17 &= v17 >> 63;
      ++v19;
    }
    else
    {
      v17 += sub_46CCC8(v18, v19++, v28);
    }
  }
  if ((v23 ^ (v21 < v24))) {
    goto LABEL_33;
  }
LABEL_41:
  if (v17 > 0)
  {
    uint64_t v30 = sub_46C8FC((uint64_t)a2);
    v48[0] = *(unsigned int *)(v30 + 32) | ((unint64_t)*(unsigned __int16 *)(v30 + 36) << 32);
    if (sub_F953E4((uint64_t)&v36, v48) != -1)
    {
      unint64_t v31 = sub_46C760(a2);
      v17 += sub_46CCC8(a2, v31 - 1, v32);
    }
  }
  if (v16 <= v17) {
    uint64_t v5 = v17;
  }
  else {
    uint64_t v5 = v16;
  }
  if (v47) {
    free(v47);
  }
  return v5;
}

void sub_108ACD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20) {
    free(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_108AD20(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)nullsub_1(a2);
  uint64_t v5 = *(void **)(nullsub_1(a2) + 8);
  if (v4 == v5) {
    return 0;
  }
  LODWORD(v6) = 0;
  do
  {
    uint64_t v6 = sub_108AE1C(a1, v4, 0x7FFFFFFFFFFFFFFELL) + v6;
    v4 += 132;
  }
  while (v4 != v5);
  return v6;
}

uint64_t sub_108ADAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_45FB48(a2);
  if (result)
  {
    unint64_t v7 = *(void **)nullsub_1(a2);
    return sub_108AE1C(a1, v7, a3);
  }
  return result;
}

uint64_t sub_108AE1C(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = sub_46C760(a2);
  uint64_t v5 = 0;
  if (v4 >= 2 && a3)
  {
    sub_46B058();
    char v75 = v6;
    unint64_t v74 = v7;
    sub_46B060();
    uint64_t v9 = v8;
    unint64_t v11 = v10;
    sub_46B058();
    uint64_t v13 = v12;
    unint64_t v15 = v14;
    uint64_t v16 = (void *)sub_46C8EC(v12, v14);
    uint64_t v17 = (unsigned __int16 *)(*v16 - *(int *)*v16);
    if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
      uint64_t v19 = *(unsigned int *)(*v16 + v18);
    }
    else {
      uint64_t v19 = 0;
    }
    double v20 = v75;
    unint64_t v21 = v74;
    uint64_t v22 = 0;
    unsigned int v72 = 0;
    uint64_t v77 = v19;
    while (!v20)
    {
      if (!v9 || v11 >= sub_46C760(v9)) {
        return v72;
      }
      if (v75)
      {
        BOOL v29 = 0;
        uint64_t v30 = a3;
        if (v74 >= sub_46C760(v75))
        {
LABEL_36:
          if (v22 >= v30) {
            return v72;
          }
          goto LABEL_37;
        }
LABEL_35:
        v22 += sub_46CCC8(a2, v21 + ~v74, v28);
        goto LABEL_36;
      }
      BOOL v29 = 0;
      uint64_t v30 = a3;
      if (v22 >= a3) {
        return v72;
      }
LABEL_37:
      a3 = v30;
      uint64_t v37 = sub_108EB0C(v20, v21, v13, v15, v9, v11, *(void *)(a1 + 536), &v77);
      uint64_t v13 = v37;
      unint64_t v39 = v38;
      if (v37)
      {
        unint64_t v40 = sub_46C760(v37);
        unint64_t v41 = v40;
        if (v29)
        {
          if (v39 >= v40) {
            goto LABEL_77;
          }
        }
        else
        {
          unint64_t v42 = sub_46C760(v9);
          if (v39 >= v41 || v11 >= v42)
          {
            if (v39 < v41 == v11 < v42) {
              goto LABEL_77;
            }
          }
          else
          {
            uint64_t v43 = sub_46C8EC(v13, v39);
            if (v43 == sub_46C8EC(v9, v11)) {
              goto LABEL_77;
            }
          }
        }
      }
      else if (v29 || v11 >= sub_46C760(v9))
      {
        goto LABEL_77;
      }
      uint64_t v44 = sub_46C8EC(v20, v21);
      uint64_t v45 = sub_46C8EC(v13, v39);
      unint64_t v46 = *(int **)(v44 + 8);
      unsigned int v47 = (unsigned __int16 *)((char *)v46 - *v46);
      unsigned int v48 = *v47;
      if (*(unsigned char *)(v44 + 38))
      {
        if (v48 >= 9)
        {
          unsigned int v49 = v47[4];
          if (v49) {
            goto LABEL_55;
          }
        }
      }
      else if (v48 >= 5)
      {
        unsigned int v49 = v47[2];
        if (v49)
        {
LABEL_55:
          int v50 = *(unsigned __int16 *)((char *)v46 + v49);
          goto LABEL_57;
        }
      }
      int v50 = 0;
LABEL_57:
      unint64_t v51 = *(int **)(v45 + 8);
      double v52 = (unsigned __int16 *)((char *)v51 - *v51);
      unsigned int v53 = *v52;
      if (*(unsigned char *)(v45 + 38))
      {
        if (v53 >= 5)
        {
          unsigned int v54 = v52[2];
          if (v54) {
            goto LABEL_63;
          }
        }
      }
      else if (v53 >= 9)
      {
        unsigned int v54 = v52[4];
        if (v54)
        {
LABEL_63:
          int v55 = *(unsigned __int16 *)((char *)v51 + v54);
          goto LABEL_65;
        }
      }
      int v55 = 0;
LABEL_65:
      int v56 = v55 - v50;
      if (v56 > 18000) {
        v56 -= 36000;
      }
      if (v56 < -17999) {
        v56 += 36000;
      }
      if (fabs((double)v56 / 100.0) > (double)(__int16)*(_DWORD *)(a1 + 528)
        || !sub_108D700(a1, v20, v21, v13, v39, v9, v11, v77, *(void *)(a1 + 536)))
      {
LABEL_77:
        unint64_t v15 = v39;
        goto LABEL_78;
      }
      unint64_t v57 = (void *)sub_46C8EC(v13, v39);
      unsigned __int8 v58 = (unsigned __int16 *)(*v57 - *(int *)*v57);
      if (*v58 < 9u)
      {
        uint64_t v77 = 0;
        unint64_t v15 = v39 + 1;
        ++v72;
        if (v13) {
          goto LABEL_84;
        }
      }
      else
      {
        uint64_t v59 = v58[4];
        if (v59)
        {
          uint64_t v77 = *(unsigned int *)(*v57 + v59);
          unint64_t v15 = v39 + 1;
          ++v72;
          if (v13) {
            goto LABEL_84;
          }
        }
        else
        {
          uint64_t v77 = 0;
          unint64_t v15 = v39 + 1;
          ++v72;
          if (v13)
          {
LABEL_84:
            unint64_t v63 = sub_46C760(v13);
            unint64_t v64 = v63;
            if (v29)
            {
              if (v15 >= v63) {
                goto LABEL_99;
              }
            }
            else
            {
              unint64_t v65 = sub_46C760(v9);
              if (v15 >= v64 || v11 >= v65)
              {
                if (v15 < v64 == v11 < v65)
                {
LABEL_99:
                  unint64_t v21 = v39;
                  double v20 = v13;
                  goto LABEL_78;
                }
              }
              else
              {
                uint64_t v66 = sub_46C8EC(v13, v15);
                if (v66 == sub_46C8EC(v9, v11)) {
                  goto LABEL_99;
                }
              }
            }
LABEL_94:
            unint64_t v67 = (void *)sub_46C8EC(v13, v15);
            uint64_t v68 = (unsigned __int16 *)(*v67 - *(int *)*v67);
            if (*v68 >= 9u && (uint64_t v69 = v68[4]) != 0) {
              uint64_t v70 = *(unsigned int *)(*v67 + v69);
            }
            else {
              uint64_t v70 = 0;
            }
            v77 += v70;
            goto LABEL_99;
          }
        }
      }
      if (!v29 && v11 < sub_46C760(v9)) {
        goto LABEL_94;
      }
      double v20 = 0;
      unint64_t v21 = v39;
LABEL_78:
      unint64_t v60 = (void *)sub_46C8EC(v20, v21);
      unint64_t v61 = (unsigned __int16 *)(*v60 - *(int *)*v60);
      if (*v61 >= 9u && (uint64_t v62 = v61[4]) != 0) {
        uint64_t v23 = *(unsigned int *)(*v60 + v62);
      }
      else {
        uint64_t v23 = 0;
      }
      v77 -= v23;
      ++v21;
    }
    unint64_t v24 = sub_46C760(v20);
    unint64_t v25 = v24;
    if (v9)
    {
      unint64_t v26 = sub_46C760(v9);
      if (v21 >= v25 || v11 >= v26)
      {
        if (v21 < v25 == v11 < v26) {
          return v72;
        }
      }
      else
      {
        uint64_t v27 = sub_46C8EC(v20, v21);
        if (v27 == sub_46C8EC(v9, v11)) {
          return v72;
        }
      }
    }
    else if (v21 >= v24)
    {
      return v72;
    }
    unint64_t v31 = sub_46C760(v20);
    if (v75)
    {
      unint64_t v32 = sub_46C760(v75);
      if (v21 >= v31 || v74 >= v32)
      {
        BOOL v36 = v21 < v31;
        BOOL v29 = v9 == 0;
        uint64_t v30 = a3;
        if (v36 == v74 < v32)
        {
LABEL_32:
          BOOL v29 = v9 == 0;
          if (v22 >= v30) {
            return v72;
          }
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v33 = sub_46C8EC(v20, v21);
        BOOL v29 = v9 == 0;
        BOOL v34 = v33 == sub_46C8EC(v75, v74);
        uint64_t v30 = a3;
        if (v34) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      BOOL v29 = v9 == 0;
      BOOL v35 = v21 >= v31;
      uint64_t v30 = a3;
      if (v35) {
        goto LABEL_32;
      }
    }
    goto LABEL_35;
  }
  return v5;
}

uint64_t sub_108B438(uint64_t a1, char *a2)
{
  sub_45E97C(a2, (uint64_t)&v67);
  sub_45EA74(a2, (uint64_t)&v61);
  sub_39ECCC((uint64_t)&v49, &v67);
  sub_39ECCC((uint64_t)&v42, &v61);
  if ((void)v53 == *((void *)&v53 + 1) || __p == v48)
  {
    if (((void)v53 == *((void *)&v53 + 1)) != (__p == v48)) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v50 != v44) {
      goto LABEL_9;
    }
    if ((void)v49)
    {
      unint64_t v4 = *((void *)&v49 + 1);
      unint64_t v5 = sub_46C760((void *)v49);
      BOOL v6 = v4 < v5;
      unint64_t v7 = v42;
      if (!v42)
      {
        if (v4 >= v5) {
          goto LABEL_24;
        }
        do
        {
LABEL_9:
          unint64_t v8 = *(int **)(sub_46C8EC((void *)v49, *((uint64_t *)&v49 + 1)) + 8);
          if (!v8) {
            break;
          }
          uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
          if (*v9 < 0x11u) {
            break;
          }
          uint64_t v10 = v9[8];
          if (!v10) {
            break;
          }
          if ((*(_WORD *)((unsigned char *)v8 + v10) & 4) == 0) {
            break;
          }
          sub_39EBB4((void **)&v49);
        }
        while (!sub_3AA3AC((uint64_t)&v49, (uint64_t)&v42));
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v7 = v42;
      if (!v42) {
        goto LABEL_24;
      }
      BOOL v6 = 0;
    }
    unint64_t v11 = v43;
    unint64_t v12 = sub_46C760(v7);
    if (v11 < v12 && v6)
    {
      uint64_t v14 = sub_46C8EC((void *)v49, *((uint64_t *)&v49 + 1));
      if (v14 == sub_46C8EC(v42, v43)) {
        goto LABEL_24;
      }
      goto LABEL_9;
    }
    if (v6 != v11 < v12) {
      goto LABEL_9;
    }
  }
LABEL_24:
  long long v55 = v49;
  long long v57 = v51;
  uint64_t v56 = v50;
  uint64_t v58 = v52;
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  long long v59 = v53;
  uint64_t v60 = v54;
  uint64_t v54 = 0;
  long long v53 = 0uLL;
  if (__p)
  {
    unsigned int v48 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    unint64_t v46 = v45;
    operator delete(v45);
  }
  if ((void)v53)
  {
    *((void *)&v53 + 1) = v53;
    operator delete((void *)v53);
  }
  if ((void)v51)
  {
    *((void *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  sub_39ECCC((uint64_t)&v38, &v55);
  sub_39ECCC((uint64_t)&v32, &v55);
  uint64_t v15 = 0;
  while (1)
  {
    if (v36 == v37 || v65 == v66)
    {
      if ((v36 == v37) == (v65 == v66)) {
        goto LABEL_59;
      }
      goto LABEL_53;
    }
    uint64_t v17 = (void *)v32;
    if (v33 == v62) {
      break;
    }
LABEL_54:
    unint64_t v26 = *(int **)(sub_46C8EC(v17, *((uint64_t *)&v32 + 1)) + 8);
    if (!v26
      || (uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26), *v27 < 0x11u)
      || (uint64_t v28 = v27[8]) == 0
      || (*(_WORD *)((unsigned char *)v26 + v28) & 4) == 0)
    {
      uint64_t v29 = *(void *)(sub_46C8EC((void *)v32, *((uint64_t *)&v32 + 1)) + 32);
      uint64_t v30 = *(void *)(sub_46C8EC((void *)v38, *((uint64_t *)&v38 + 1)) + 32);
      long long v38 = v32;
      uint64_t v39 = v33;
      sub_457964(v40, (char *)v34, *(char **)v35, (uint64_t)(*(void *)v35 - (void)v34) >> 4);
      sub_457964(v41, (char *)v36, v37, (v37 - (unsigned char *)v36) >> 4);
      uint64_t v15 = v15 + (sub_2E79EC(*(void *)(a1 + 8), v29, v30) ^ 1);
    }
    sub_39EBB4((void **)&v32);
  }
  if ((void)v32)
  {
    unint64_t v18 = *((void *)&v32 + 1);
    int v19 = v18 < sub_46C760((void *)v32);
    double v20 = (void *)v61;
    if ((void)v61) {
      goto LABEL_44;
    }
LABEL_51:
    int v23 = 0;
    goto LABEL_52;
  }
  int v19 = 0;
  double v20 = (void *)v61;
  if (!(void)v61) {
    goto LABEL_51;
  }
LABEL_44:
  unint64_t v21 = *((void *)&v61 + 1);
  unint64_t v22 = sub_46C760(v20);
  int v23 = v21 < v22;
  if (v21 < v22) {
    int v24 = v19;
  }
  else {
    int v24 = 0;
  }
  if (v24 == 1)
  {
    uint64_t v25 = sub_46C8EC((void *)v32, *((uint64_t *)&v32 + 1));
    if (v25 == sub_46C8EC((void *)v61, *((uint64_t *)&v61 + 1))) {
      goto LABEL_59;
    }
    goto LABEL_53;
  }
LABEL_52:
  if (v19 != v23)
  {
LABEL_53:
    uint64_t v17 = (void *)v32;
    goto LABEL_54;
  }
LABEL_59:
  if (v36)
  {
    uint64_t v37 = (char *)v36;
    operator delete(v36);
  }
  if (v34)
  {
    *(void *)BOOL v35 = v34;
    operator delete(v34);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if ((void)v59)
  {
    *((void *)&v59 + 1) = v59;
    operator delete((void *)v59);
  }
  if ((void)v57)
  {
    *((void *)&v57 + 1) = v57;
    operator delete((void *)v57);
  }
  if (v65)
  {
    uint64_t v66 = v65;
    operator delete(v65);
  }
  if (v63)
  {
    unint64_t v64 = v63;
    operator delete(v63);
  }
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
  if (v68)
  {
    uint64_t v69 = v68;
    operator delete(v68);
  }
  return v15;
}

void sub_108B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  sub_39EB70(&a29);
  sub_39EB70(&a38);
  sub_39EB70((void *)(v38 - 208));
  sub_39EB70((void *)(v38 - 136));
  _Unwind_Resume(a1);
}

double sub_108B920(uint64_t a1, void *a2, unsigned int a3)
{
  double v6 = 1.0;
  if (!sub_45FB38(a2))
  {
    unint64_t v7 = (uint64_t *)nullsub_1(a2);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 != v9)
    {
      double v6 = 0.0;
      while (1)
      {
        long long v10 = *(_OWORD *)(a1 + 32 * a3 + 144);
        v15[0] = *(_OWORD *)(a1 + 32 * a3 + 128);
        v15[1] = v10;
        sub_108BA48((uint64_t *)(v8 + 24 * a3 + 864), (uint64_t)v15, &v16);
        unint64_t v11 = v16 + 32;
        BOOL v12 = v16 == v17 || v11 == v17;
        uint64_t v13 = v16;
        if (!v12)
        {
          uint64_t v13 = v16;
          do
          {
            if (*((double *)v13 + 3) < *((double *)v11 + 3)) {
              uint64_t v13 = v11;
            }
            v11 += 32;
          }
          while (v11 != v17);
        }
        if (v13 == v17)
        {
          if (v6 < 1.0) {
            double v6 = 1.0;
          }
          if (!v16) {
            goto LABEL_4;
          }
        }
        else
        {
          if (v6 < *((double *)v13 + 3)) {
            double v6 = *((double *)v13 + 3);
          }
          if (!v16) {
            goto LABEL_4;
          }
        }
        uint64_t v17 = v16;
        operator delete(v16);
LABEL_4:
        v8 += 1056;
        if (v8 == v9) {
          return v6;
        }
      }
    }
    return 0.0;
  }
  return v6;
}

void sub_108BA48(uint64_t *a1@<X1>, uint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4 != v3)
  {
    unint64_t v5 = ((v3 - v4) >> 5) - 1;
    uint64_t v6 = v5 <= 1 ? 1 : ((v3 - v4) >> 5) - 1;
    if (v5 >= 2)
    {
      uint64_t v9 = 0;
      uint64_t v45 = 0;
      long long v10 = 0;
      int v11 = -2;
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = *a1 + 32 * v12;
        double v15 = *(double *)(v13 + 24);
        uint64_t v14 = (double *)(v13 + 24);
        double v16 = v15;
        if (v15 < *(double *)a2 && v16 <= *(double *)(*a1 + 32 * v12 - 8) && v16 <= *(double *)(*a1 + 32 * v12 + 56))
        {
          uint64_t v17 = sub_108F040(a1, v12);
          uint64_t v48 = 32 * (int)v12;
          unint64_t v18 = v12;
          if (v12)
          {
            uint64_t v19 = 0;
            uint64_t v20 = (int)v12 - 2;
            double v21 = *(double *)(v17 + 24);
            unint64_t v22 = (double *)(*a1 + v48 - 8);
            unint64_t v18 = v12;
            do
            {
              double v23 = *v22;
              if (*v22 > v21) {
                unint64_t v18 = v20 + 1;
              }
              v19 += *((void *)v22 - 1);
              if (v19 > *(void *)(a2 + 8)) {
                break;
              }
              v22 -= 4;
              if (v23 > v21) {
                double v21 = v23;
              }
            }
            while (v20-- != -1);
          }
          double v25 = *(double *)(sub_108F040(a1, v18) + 24);
          if (v25 >= *(double *)(a2 + 16))
          {
            __n128 __p = (unint64_t *)v9;
            uint64_t v26 = sub_108F040(a1, v12);
            unint64_t v27 = (unint64_t)(a1[1] - *a1) >> 5;
            unint64_t v28 = v12;
            if (v12 + 1 != v27)
            {
              uint64_t v29 = 0;
              double v30 = *(double *)(v26 + 24);
              uint64_t v31 = (int)v12 + 1;
              int v32 = v11 + v27;
              uint64_t v33 = (double *)(*a1 + v48 + 56);
              unint64_t v28 = v12;
              do
              {
                double v34 = *v33;
                if (*v33 > v30) {
                  unint64_t v28 = v31;
                }
                v29 += *((void *)v33 - 1);
                if (v29 > *(void *)(a2 + 8)) {
                  break;
                }
                v33 += 4;
                if (v34 > v30) {
                  double v30 = v34;
                }
                ++v31;
                --v32;
              }
              while (v32);
            }
            double v35 = *(double *)(sub_108F040(a1, v28) + 24);
            if (v35 < *(double *)(a2 + 16)) {
              goto LABEL_8;
            }
            if (v25 < v35) {
              double v35 = v25;
            }
            double v36 = v35 / fmax(*v14, 0.0001);
            if (v36 <= *(double *)(a2 + 24))
            {
LABEL_8:
              uint64_t v9 = (char *)__p;
            }
            else
            {
              if (v10 >= (unint64_t *)v45)
              {
                uint64_t v37 = ((char *)v10 - (char *)__p) >> 5;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 59) {
                  sub_2E00();
                }
                if ((v45 - (char *)__p) >> 4 > v38) {
                  unint64_t v38 = (v45 - (char *)__p) >> 4;
                }
                if ((unint64_t)(v45 - (char *)__p) >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v38;
                }
                if (v39 >> 59) {
                  sub_188D718();
                }
                unint64_t v40 = (char *)operator new(32 * v39);
                unint64_t v41 = &v40[32 * v37];
                *(void *)unint64_t v41 = v18;
                *((void *)v41 + 1) = v28;
                *((void *)v41 + 2) = v12;
                *((double *)v41 + 3) = v36;
                if (v10 == __p)
                {
                  uint64_t v44 = &v40[32 * v37];
                }
                else
                {
                  unint64_t v42 = &v40[32 * v37];
                  do
                  {
                    long long v43 = *((_OWORD *)v10 - 1);
                    uint64_t v44 = v42 - 32;
                    *((_OWORD *)v42 - 2) = *((_OWORD *)v10 - 2);
                    *((_OWORD *)v42 - 1) = v43;
                    v10 -= 4;
                    v42 -= 32;
                  }
                  while (v10 != __p);
                }
                long long v10 = (unint64_t *)(v41 + 32);
                *a3 = v44;
                a3[1] = v41 + 32;
                uint64_t v45 = &v40[32 * v39];
                a3[2] = v45;
                if (__p) {
                  operator delete(__p);
                }
                uint64_t v9 = v44;
              }
              else
              {
                *long long v10 = v18;
                v10[1] = v28;
                void v10[2] = v12;
                *((double *)v10 + 3) = v36;
                v10 += 4;
                uint64_t v9 = (char *)__p;
              }
              a3[1] = (char *)v10;
            }
          }
        }
        ++v12;
        --v11;
      }
      while (v12 != v6);
    }
  }
}

void sub_108BD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_108BDCC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)nullsub_1(a2);
  uint64_t v7 = *(void *)(nullsub_1(a2) + 8);
  if (v6 == v7) {
    return 0;
  }
  LODWORD(v8) = 0;
  do
  {
    uint64_t v8 = sub_108EE14(a1, v6, a3) + v8;
    v6 += 1056;
  }
  while (v6 != v7);
  return v8;
}

uint64_t sub_108BE68(uint64_t a1, void *a2, unsigned int a3)
{
  sub_45F55C(a2, a3, (uint64_t)&v30);
  sub_4610AC((uint64_t)&v24, &v30);
  sub_4610AC((uint64_t)&v18, &v35);
  if (v28 == v29 || v22 == v23)
  {
    BOOL v6 = (v28 == v29) == (v22 == v23);
    if (!v22) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25 != v19)
  {
    BOOL v6 = 0;
    if (!v22) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  BOOL v6 = v24 == v18;
  if (v22)
  {
LABEL_12:
    double v23 = v22;
    operator delete(v22);
  }
LABEL_13:
  if (__p)
  {
    double v21 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v6)
  {
    uint64_t v7 = 0;
    goto LABEL_45;
  }
  uint64_t v8 = a1 + 16 * a3;
  double v9 = *(double *)(v8 + 552);
  uint64_t v10 = *(void *)(v8 + 560);
  sub_4610AC((uint64_t)&v24, &v30);
  sub_4610AC((uint64_t)&v18, &v35);
  unint64_t v11 = v25;
  uint64_t v12 = (v29 - (unsigned char *)v28) >> 3;
  unint64_t v13 = v12 - 1;
  uint64_t v14 = v24;
  if (v29 == v28 || v22 == v23)
  {
    if ((v28 == v29) != (v22 == v23))
    {
      while (1)
      {
        do
        {
          do
          {
LABEL_57:
            v14 += 4;
            int v24 = v14;
          }
          while (v11 >= v13);
        }
        while (v14 != *((uint64_t **)v28 + v11));
        while (1)
        {
          uint64_t v14 = (uint64_t *)*((void *)v26 + v11 + 1);
          int v24 = v14;
          if (v12 - 2 == v11) {
            break;
          }
          uint64_t v17 = (uint64_t *)*((void *)v28 + ++v11);
          if (v17 != v14) {
            goto LABEL_57;
          }
        }
        unint64_t v11 = v12 - 1;
      }
    }
LABEL_62:
    uint64_t v7 = 0;
    if (!v22) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v25 == v19 && v24 == v18) {
    goto LABEL_62;
  }
  uint64_t v7 = 0;
  do
  {
    if (*((double *)v14 + 3) < v9)
    {
      uint64_t v15 = v14[1];
      if (v15 >= *v14) {
        uint64_t v15 = *v14;
      }
      if (v15 > v10) {
        v7 += v14[2];
      }
    }
    v14 += 4;
    int v24 = v14;
    if (v11 < v13)
    {
      while (v14 == *((uint64_t **)v28 + v11))
      {
        unint64_t v25 = v11 + 1;
        uint64_t v14 = (uint64_t *)*((void *)v26 + v11 + 1);
        int v24 = v14;
        ++v11;
        if (v13 == v25)
        {
          unint64_t v11 = v12 - 1;
          break;
        }
      }
    }
  }
  while (v11 != v19 || v14 != v18);
  if (!v22) {
    goto LABEL_39;
  }
LABEL_38:
  double v23 = v22;
  operator delete(v22);
LABEL_39:
  if (__p)
  {
    double v21 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
LABEL_45:
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v33)
  {
    double v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    int v32 = v31;
    operator delete(v31);
  }
  return v7;
}

double sub_108C16C(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  sub_45F55C(a2, a3, (uint64_t)&v43);
  sub_4610AC((uint64_t)&v52, &v43);
  sub_45F55C(a2, a3, (uint64_t)&v27);
  sub_4610AC((uint64_t)&v37, &v32);
  unint64_t v9 = v53;
  uint64_t v10 = v57 - v56;
  unint64_t v11 = v10 - 1;
  uint64_t v12 = v52;
  if (v57 == v56 || v41 == v42)
  {
    double v13 = 0.0;
    if ((v56 == v57) != (v41 == v42))
    {
      while (1)
      {
        do
        {
          do
          {
LABEL_28:
            v12 += 4;
            uint64_t v52 = v12;
          }
          while (v9 >= v11);
        }
        while (v12 != (uint64_t *)v56[v9]);
        while (1)
        {
          uint64_t v12 = (uint64_t *)v54[v9 + 1];
          uint64_t v52 = v12;
          if (v10 - 2 == v9) {
            break;
          }
          unint64_t v25 = (uint64_t *)v56[++v9];
          if (v25 != v12) {
            goto LABEL_28;
          }
        }
        unint64_t v9 = v10 - 1;
      }
    }
  }
  else if (v53 != v38 || (double v13 = 0.0, v52 != v37))
  {
    double v13 = 0.0;
    do
    {
      double v14 = *(double *)v12;
      uint64_t v15 = v12[2];
      double v16 = 0.0;
      if (v15 + *v12 > a4)
      {
        uint64_t v17 = v12[1];
        if (v17 + v15 > a5)
        {
          BOOL v18 = __OFSUB__(a4, *(void *)&v14);
          uint64_t v19 = a4 - *(void *)&v14;
          if ((v19 < 0) ^ v18 | (v19 == 0)) {
            uint64_t v19 = 0;
          }
          BOOL v18 = __OFSUB__(a5, v17);
          uint64_t v20 = a5 - v17;
          if ((v20 < 0) ^ v18 | (v20 == 0)) {
            uint64_t v20 = 0;
          }
          uint64_t v21 = v20 + v19;
          BOOL v22 = v15 <= v21;
          uint64_t v23 = v15 - v21;
          if (v22) {
            uint64_t v23 = 0;
          }
          double v16 = (double)v23;
        }
      }
      double v24 = *((double *)v12 + 3);
      v12 += 4;
      uint64_t v52 = v12;
      if (v9 < v11)
      {
        while (v12 == (uint64_t *)v56[v9])
        {
          unint64_t v53 = v9 + 1;
          uint64_t v12 = (uint64_t *)v54[v9 + 1];
          uint64_t v52 = v12;
          if (v11 == ++v9)
          {
            unint64_t v9 = v10 - 1;
            break;
          }
        }
      }
      double v13 = v13 + v16 * v24;
    }
    while (v9 != v38 || v12 != v37);
  }
  if (v41)
  {
    unint64_t v42 = v41;
    operator delete(v41);
  }
  if (__p)
  {
    unint64_t v40 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    double v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    double v34 = v33;
    operator delete(v33);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v56)
  {
    long long v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    long long v55 = v54;
    operator delete(v54);
  }
  if (v50)
  {
    long long v51 = v50;
    operator delete(v50);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    unsigned int v47 = v46;
    operator delete(v46);
  }
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  return v13;
}

void sub_108C418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_2FC938((void *)(v33 - 128));
  sub_2FC97C(&a33);
  _Unwind_Resume(a1);
}

double sub_108C438(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)nullsub_1(a2);
  uint64_t v11 = *(void *)(nullsub_1(a2) + 8);
  double result = 0.0;
  if (v10 != v11)
  {
    uint64_t v13 = a5 + a4;
    unint64_t v14 = v11 - v10 - 1056;
    if (v14 >= 0x420)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = v14 / 0x420 + 1;
      uint64_t v16 = v10 + 1056 * (v19 & 0x7FFFFFFFFFFFFELL);
      uint64_t v20 = v19 & 0x7FFFFFFFFFFFFELL;
      do
      {
        uint64_t v21 = *(void *)(v10 + 504);
        uint64_t v22 = *(void *)(v10 + 1560);
        BOOL v23 = v21 <= v13;
        uint64_t v24 = v21 - v13;
        if (v23) {
          uint64_t v24 = 0;
        }
        BOOL v23 = v22 <= v13;
        uint64_t v25 = v22 - v13;
        if (v23) {
          uint64_t v25 = 0;
        }
        v17 += v24;
        v18 += v25;
        v10 += 2112;
        v20 -= 2;
      }
      while (v20);
      uint64_t v15 = v18 + v17;
      if (v19 == (v19 & 0x7FFFFFFFFFFFFELL)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = v10;
    }
    do
    {
      uint64_t v26 = *(void *)(v16 + 504);
      BOOL v23 = v26 <= v13;
      uint64_t v27 = v26 - v13;
      if (v23) {
        uint64_t v27 = 0;
      }
      v15 += v27;
      v16 += 1056;
    }
    while (v16 != v11);
LABEL_17:
    if (v15) {
      return sub_108C16C(a1, a2, a3, a4, a5) / (double)v15;
    }
  }
  return result;
}

double sub_108C570(uint64_t a1, void *a2, unsigned int a3, char a4)
{
  uint64_t v8 = *(void *)nullsub_1(a2);
  uint64_t v9 = *(void *)(nullsub_1(a2) + 8);
  double v10 = 0.0;
  if (v8 == v9) {
    goto LABEL_10;
  }
  unint64_t v11 = v9 - v8 - 1056;
  if (v11 < 0x420)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v8;
    do
    {
LABEL_7:
      v12 += *(void *)(v13 + 504) & ~(*(uint64_t *)(v13 + 504) >> 63);
      v13 += 1056;
    }
    while (v13 != v9);
    goto LABEL_8;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = v11 / 0x420 + 1;
  uint64_t v13 = v8 + 1056 * (v16 & 0x7FFFFFFFFFFFFELL);
  uint64_t v17 = v16 & 0x7FFFFFFFFFFFFELL;
  do
  {
    v14 += *(void *)(v8 + 504) & ~(*(uint64_t *)(v8 + 504) >> 63);
    v15 += *(void *)(v8 + 1560) & ~(*(uint64_t *)(v8 + 1560) >> 63);
    v8 += 2112;
    v17 -= 2;
  }
  while (v17);
  uint64_t v12 = v15 + v14;
  if (v16 != (v16 & 0x7FFFFFFFFFFFFELL)) {
    goto LABEL_7;
  }
LABEL_8:
  if (v12) {
    double v10 = sub_108C16C(a1, a2, a3, 0, 0) / (double)v12;
  }
LABEL_10:
  uint64_t v18 = (uint64_t *)nullsub_1(a2);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (*v18 != v20)
  {
    double v21 = *(double *)(a1 + 520);
    uint64_t v22 = *(void *)(a1 + 512);
    if ((a4 & 1) == 0)
    {
      while (1)
      {
        double v29 = v21 * (double)*(uint64_t *)(v19 + 504);
        if (v29 >= 0.0)
        {
          if (v29 < 4.50359963e15)
          {
            uint64_t v30 = (uint64_t)(v29 + v29) + 1;
LABEL_40:
            double v29 = (double)(v30 >> 1);
          }
        }
        else if (v29 > -4.50359963e15)
        {
          uint64_t v30 = (uint64_t)(v29 + v29);
          if (v30 >= 1) {
            --v30;
          }
          goto LABEL_40;
        }
        uint64_t v31 = (uint64_t)v29;
        if (v22 < (uint64_t)v29) {
          uint64_t v31 = *(void *)(a1 + 512);
        }
        uint64_t v32 = v19 + 24 * a3;
        uint64_t v33 = *(void *)(v32 + 864);
        uint64_t v34 = *(void *)(v32 + 872);
        while (v33 != v34)
        {
          if (*(void *)v33 >= v31 && *(void *)(v33 + 8) >= v31 && *(double *)(v33 + 24) >= v10) {
            double v10 = *(double *)(v33 + 24);
          }
          v33 += 32;
        }
        v19 += 1056;
        if (v19 == v20) {
          return v10;
        }
      }
    }
    do
    {
      double v23 = v21 * (double)*(uint64_t *)(v19 + 504);
      if (v23 >= 0.0)
      {
        if (v23 < 4.50359963e15)
        {
          uint64_t v24 = (uint64_t)(v23 + v23) + 1;
LABEL_21:
          double v23 = (double)(v24 >> 1);
        }
      }
      else if (v23 > -4.50359963e15)
      {
        uint64_t v24 = (uint64_t)(v23 + v23);
        if (v24 >= 1) {
          --v24;
        }
        goto LABEL_21;
      }
      uint64_t v25 = (uint64_t)v23;
      if (v22 < (uint64_t)v23) {
        uint64_t v25 = *(void *)(a1 + 512);
      }
      uint64_t v26 = v19 + 24 * a3;
      uint64_t v27 = *(void *)(v26 + 864);
      uint64_t v28 = *(void *)(v26 + 872);
      while (v27 != v28)
      {
        if (*(void *)v27 >= v25 && *(void *)(v27 + 8) >= v25 && v10 >= *(double *)(v27 + 24)) {
          double v10 = *(double *)(v27 + 24);
        }
        v27 += 32;
      }
      v19 += 1056;
    }
    while (v19 != v20);
  }
  return v10;
}

double sub_108C82C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = *(void *)nullsub_1(a2);
  uint64_t v6 = *(void *)(nullsub_1(a2) + 8);
  if (v5 == v6) {
    return 0.0;
  }
  double result = 0.0;
  do
  {
    uint64_t v11 = v5 + 24 * a3;
    uint64_t v12 = *(void *)(v11 + 864);
    uint64_t v13 = *(void *)(v11 + 872);
    double v10 = 0.0;
    if (v12 != v13)
    {
      double v14 = *(double *)(v12 + 24);
      unint64_t v15 = (v13 - v12) >> 5;
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      if ((unint64_t)(v13 - v12) < 0x40)
      {
        double v8 = *(double *)(v12 + 24);
      }
      else
      {
        unint64_t v16 = v15 - 1;
        uint64_t v17 = (double *)(v12 + 56);
        double v8 = v14;
        do
        {
          double v18 = *v17;
          v17 += 4;
          double v19 = v18;
          if (v8 < v18) {
            double v8 = v19;
          }
          double v20 = v14 - v19;
          BOOL v21 = v19 < v14;
          double v22 = -0.0;
          if (v21) {
            double v22 = v20;
          }
          double v10 = v10 + v22;
          double v14 = v19;
          --v16;
        }
        while (v16);
      }
      double v9 = v8 - *(double *)(v13 - 8);
      if (v9 <= v10) {
        double v10 = v10 - v9;
      }
      else {
        double v10 = 0.0;
      }
    }
    double result = result + v10;
    v5 += 1056;
  }
  while (v5 != v6);
  return result;
}

void sub_108C92C(uint64_t a1@<X0>, char *a2@<X1>, int64x2_t *a3@<X8>)
{
  int v6 = *(unsigned __int8 *)(sub_5231C((uint64_t)a2) + 35);
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  a3->i64[0] = 0;
  if (!v6) {
    return;
  }
  v65[0] = (char *)a3;
  v65[1] = a2;
  sub_45E97C(a2, (uint64_t)&v59);
  uint64_t v7 = a1 + 16;
  while (1)
  {
    sub_45EA74(a2, (uint64_t)&v53);
    if (v63 == v64 || __p == v58)
    {
      int v9 = (v63 == v64) == (__p == v58);
      double v10 = __p;
      if (!__p) {
        goto LABEL_11;
      }
LABEL_10:
      uint64_t v58 = v10;
      operator delete(v10);
      goto LABEL_11;
    }
    if (v60 != v54)
    {
      int v9 = 0;
      double v10 = __p;
      if (__p) {
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    if ((void)v59)
    {
      unint64_t v30 = *((void *)&v59 + 1);
      BOOL v31 = v30 < sub_46C760((void *)v59);
      uint64_t v32 = (void *)v53;
      if ((void)v53) {
        goto LABEL_40;
      }
    }
    else
    {
      BOOL v31 = 0;
      uint64_t v32 = (void *)v53;
      if ((void)v53)
      {
LABEL_40:
        unint64_t v33 = *((void *)&v53 + 1);
        unint64_t v34 = sub_46C760(v32);
        BOOL v35 = v33 < v34;
        if (v33 < v34 && v31)
        {
          uint64_t v37 = sub_46C8EC((void *)v59, *((uint64_t *)&v59 + 1));
          int v9 = v37 == sub_46C8EC((void *)v53, *((uint64_t *)&v53 + 1));
          double v10 = __p;
          if (__p) {
            goto LABEL_10;
          }
          goto LABEL_11;
        }
        goto LABEL_54;
      }
    }
    BOOL v35 = 0;
LABEL_54:
    int v9 = v31 ^ v35 ^ 1;
    double v10 = __p;
    if (__p) {
      goto LABEL_10;
    }
LABEL_11:
    if (v55)
    {
      uint64_t v56 = v55;
      operator delete(v55);
    }
    if (v9) {
      break;
    }
    uint64_t v11 = sub_46C8EC((void *)v59, *((uint64_t *)&v59 + 1));
    sub_3F4E6C(v7, v11, (uint64_t)&v51);
    uint64_t v12 = v51;
    uint64_t v13 = v52;
    if (v51 == v52)
    {
      sub_39ECCC((uint64_t)&v46, &v59);
      sub_108CDC8(v65, &v46);
      if (v49)
      {
        uint64_t v50 = v49;
        operator delete(v49);
      }
      uint64_t v38 = v47;
      if (v47)
      {
        uint64_t v48 = v47;
LABEL_68:
        operator delete(v38);
      }
    }
    else
    {
LABEL_15:
      while (sub_3587DC(*(void *)*v12 + 424 * v12[1], 0))
      {
        v12 += 2;
        if (v12 == (void *)v13) {
          goto LABEL_22;
        }
      }
      double v14 = v13;
      while (1)
      {
        uint64_t v13 = v14 - 1;
        if (v14 - 1 == (_OWORD *)v12) {
          break;
        }
        BOOL v15 = sub_3587DC(**((void **)v14 - 2) + 424 * *((void *)v14 - 1), 0);
        double v14 = v13;
        if (v15)
        {
          long long v53 = *(_OWORD *)v12;
          *(_OWORD *)uint64_t v12 = *v13;
          v12 += 2;
          *uint64_t v13 = v53;
          if (v13 != (_OWORD *)v12) {
            goto LABEL_15;
          }
          break;
        }
      }
LABEL_22:
      unint64_t v16 = v51;
      uint64_t v17 = a3->i64[1];
      if (a3->i64[0] != v17)
      {
        uint64_t v18 = **(void **)(v17 - 160) + 424 * *(void *)(v17 - 152);
        uint64_t v19 = **(void **)v51 + 424 * *((void *)v51 + 1);
        uint64_t v20 = *(unsigned __int8 *)(v18 + 63);
        size_t v21 = *(void *)(v18 + 48);
        if ((v20 & 0x80u) == 0) {
          uint64_t v22 = *(unsigned __int8 *)(v18 + 63);
        }
        else {
          uint64_t v22 = *(void *)(v18 + 48);
        }
        uint64_t v23 = *(unsigned __int8 *)(v19 + 63);
        int v24 = (char)v23;
        if ((v23 & 0x80u) != 0) {
          uint64_t v23 = *(void *)(v19 + 48);
        }
        if (v22 == v23)
        {
          uint64_t v25 = (const void **)(v18 + 40);
          uint64_t v28 = *(unsigned __int8 **)(v19 + 40);
          uint64_t v26 = (unsigned __int8 *)(v19 + 40);
          uint64_t v27 = v28;
          if (v24 >= 0) {
            double v29 = v26;
          }
          else {
            double v29 = v27;
          }
          if ((v20 & 0x80) != 0)
          {
            if (!memcmp(*v25, v29, v21)) {
              goto LABEL_69;
            }
          }
          else
          {
            if (!v20) {
              goto LABEL_69;
            }
            while (*(unsigned __int8 *)v25 == *v29)
            {
              uint64_t v25 = (const void **)((char *)v25 + 1);
              ++v29;
              if (!--v20) {
                goto LABEL_69;
              }
            }
          }
        }
      }
      sub_39ECCC((uint64_t)&v41, &v59);
      sub_108CDC8(v65, &v41);
      if (v44)
      {
        uint64_t v45 = v44;
        operator delete(v44);
      }
      if (v42)
      {
        long long v43 = v42;
        operator delete(v42);
      }
      sub_45EA74(a2, (uint64_t)&v53);
      unint64_t v39 = a3->u64[1];
      if (v39 >= a3[1].i64[0])
      {
        uint64_t v40 = sub_108F48C(a3, v16, &v59, (uint64_t)&v53);
      }
      else
      {
        sub_108F6B0((uint64_t)a3[1].i64, (_OWORD *)a3->i64[1], v16, &v59, (uint64_t)&v53);
        uint64_t v40 = v39 + 160;
        a3->i64[1] = v39 + 160;
      }
      a3->i64[1] = v40;
      if (__p)
      {
        uint64_t v58 = __p;
        operator delete(__p);
      }
      uint64_t v38 = v55;
      if (v55)
      {
        uint64_t v56 = v55;
        goto LABEL_68;
      }
    }
LABEL_69:
    if (v51)
    {
      uint64_t v52 = v51;
      operator delete(v51);
    }
    sub_39EBB4((void **)&v59);
  }
  if (v63)
  {
    unint64_t v64 = v63;
    operator delete(v63);
  }
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
}

void sub_108CD14(_Unwind_Exception *a1)
{
  *(void *)(v2 - 168) = v1;
  sub_3A6AB0((void ***)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_108CD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_39EB70(&a31);
  if (__p) {
    operator delete(__p);
  }
  sub_39EB70((void *)(v32 - 168));
  *(void *)(v32 - 168) = v31;
  sub_3A6AB0((void ***)(v32 - 168));
  _Unwind_Resume(a1);
}

void sub_108CDC8(char **a1, long long *a2)
{
  uint64_t v2 = *((void *)*a1 + 1);
  if (*(void *)*a1 == v2) {
    return;
  }
  sub_45EA74(a1[1], (uint64_t)&v21);
  uint64_t v5 = *(void *)(v2 - 24);
  uint64_t v6 = *(void *)(v2 - 16);
  if (v5 == v6 || __p == v27)
  {
    int v8 = (v5 == v6) == (__p == v27);
    int v9 = __p;
    if (!__p) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(void *)(v2 - 56) == v23)
  {
    double v10 = *(void **)(v2 - 72);
    if (v10)
    {
      unint64_t v11 = *(void *)(v2 - 64);
      BOOL v12 = v11 < sub_46C760(v10);
      uint64_t v13 = v21;
      if (v21) {
        goto LABEL_12;
      }
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = v21;
      if (v21)
      {
LABEL_12:
        unint64_t v14 = v22;
        unint64_t v15 = sub_46C760(v13);
        BOOL v16 = v14 < v15;
        if (v14 < v15 && v12)
        {
          uint64_t v18 = sub_46C8EC(*(void **)(v2 - 72), *(void *)(v2 - 64));
          int v8 = v18 == sub_46C8EC(v21, v22);
          int v9 = __p;
          if (!__p) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        goto LABEL_28;
      }
    }
    BOOL v16 = 0;
LABEL_28:
    int v8 = v12 ^ v16 ^ 1;
    int v9 = __p;
    if (!__p) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  int v8 = 0;
  int v9 = __p;
  if (__p)
  {
LABEL_19:
    uint64_t v27 = v9;
    operator delete(v9);
  }
LABEL_20:
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v8)
  {
    uint64_t v19 = *((void *)*a1 + 1);
    long long v20 = *a2;
    *(void *)(v19 - 56) = *((void *)a2 + 2);
    *(_OWORD *)(v19 - 72) = v20;
    if ((long long *)(v19 - 72) != a2)
    {
      sub_457964((void *)(v19 - 48), *((char **)a2 + 3), *((char **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
      sub_457964((void *)(v19 - 24), *((char **)a2 + 6), *((char **)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
    }
  }
}

void sub_108CF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_108CF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_475DF4((uint64_t *)(a1 + 56), a2, a3);
}

uint64_t sub_108CF80(uint64_t a1, void *a2)
{
  __p[23] = 16;
  strcpy(__p, "min_u_turn_angle");
  int v4 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v5 = (_OWORD *)(a1 + 200);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 208) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)__n128 __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "prefix_suffix_threshold_m");
  *(void *)(a1 + 392) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 19;
  strcpy(__p, "prefix_suffix_ratio");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 400) = v6;
  *(void *)__n128 __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9960;
  strcpy(*(char **)__p, "max_angle_to_consider_lines_as_parallel");
  int v7 = sub_31AC04(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 408) = v7;
  __p[23] = 21;
  strcpy(__p, "look_ahead_distance_m");
  *(void *)(a1 + 416) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)__n128 __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93C0;
  strcpy(*(char **)__p, "max_distance_between_parallel_segments_m");
  *(void *)(a1 + 424) = sub_5CDE0(a2, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0x7FFFFFFFFFFFFFFFLL;
  __p[23] = 14;
  strcpy(__p, "add_debug_info");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v9 = 0;
  *(unsigned char *)(a1 + 528) = v8;
  double v10 = (double *)(a1 + 440);
  do
  {
    __p[23] = 15;
    strcpy(__p, "low_probe_count");
    unint64_t v11 = (void *)sub_560F4(a2, (uint64_t)__p);
    sub_47548C((void *)v9, (uint64_t)v23);
    BOOL v12 = (void *)sub_560F4(v11, (uint64_t)v23);
    if (SHIBYTE(v23[2]) < 0)
    {
      operator delete(v23[0]);
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((__p[23] & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(*(void **)__p);
LABEL_19:
    __p[23] = 9;
    strcpy(__p, "threshold");
    *(v10 - 1) = sub_5C7E8(v12, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)__n128 __p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_20B5EB0;
    strcpy(*(char **)__p, "min_prefix_suffix_length_m");
    *(void *)double v10 = sub_5CDE0(v12, __p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    HIBYTE(v23[2]) = 18;
    strcpy((char *)v23, "maximum_bottleneck");
    uint64_t v13 = (void *)sub_560F4(a2, (uint64_t)v23);
    sub_47548C((void *)v9, (uint64_t)v20);
    unint64_t v14 = (void *)sub_560F4(v13, (uint64_t)v20);
    sub_108D574((double *)__p, v14);
    long long v15 = *(_OWORD *)&__p[16];
    *(v5 - 12) = *(_OWORD *)__p;
    *(v5 - 11) = v15;
    if (v21 < 0)
    {
      operator delete(v20[0]);
      if ((SHIBYTE(v23[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v23[0]);
LABEL_25:
    HIBYTE(v23[2]) = 15;
    strcpy((char *)v23, "num_bottlenecks");
    BOOL v16 = (void *)sub_560F4(a2, (uint64_t)v23);
    sub_47548C((void *)v9, (uint64_t)v20);
    uint64_t v17 = (void *)sub_560F4(v16, (uint64_t)v20);
    sub_108D574((double *)__p, v17);
    long long v18 = *(_OWORD *)&__p[16];
    *uint64_t v5 = *(_OWORD *)__p;
    v5[1] = v18;
    if (v21 < 0)
    {
      operator delete(v20[0]);
      if ((SHIBYTE(v23[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
    }
    else if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v23[0]);
LABEL_16:
    ++v9;
    v10 += 2;
    v5 += 2;
  }
  while (v9 != 6);
  return a1;
}

void sub_108D4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_108D574(double *a1, void *a2)
{
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "max_threshold");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "max_search_length_m");
  *((void *)a1 + 1) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "before_after_min_threshold");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v5;
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "min_ratio");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v6;
  return a1;
}

void sub_108D6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_108D700(uint64_t a1, void *a2, uint64_t a3, void *a4, unint64_t a5, void *a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a8;
  unint64_t v16 = a3 + 1;
  if (!a2)
  {
    if (a6)
    {
      unint64_t v194 = a3 + 1;
      char v192 = 0;
      uint64_t v22 = 0;
      if (a7 >= sub_46C760(a6)) {
        return v22;
      }
      goto LABEL_14;
    }
    return 0;
  }
  unint64_t v18 = sub_46C760(a2);
  unint64_t v19 = v18;
  if (!a6)
  {
    if (v16 < v18)
    {
      unint64_t v194 = v16;
      char v192 = 1;
      uint64_t v9 = a8;
      goto LABEL_14;
    }
    return 0;
  }
  unint64_t v20 = sub_46C760(a6);
  unint64_t v194 = v16;
  if (v16 >= v19 || a7 >= v20)
  {
    char v192 = 0;
    unint64_t v23 = v16;
    uint64_t v22 = 0;
    uint64_t v9 = a8;
    if (v23 < v19 == a7 < v20) {
      return v22;
    }
  }
  else
  {
    uint64_t v21 = sub_46C8EC(a2, v16);
    char v192 = 0;
    uint64_t v22 = 0;
    uint64_t v9 = a8;
    if (v21 == sub_46C8EC(a6, a7)) {
      return v22;
    }
  }
LABEL_14:
  int v24 = (void *)sub_46C8EC(a4, a5);
  uint64_t v25 = (unsigned __int16 *)(*v24 - *(int *)*v24);
  if (*v25 >= 9u && (uint64_t v26 = v25[4]) != 0) {
    uint64_t v27 = *(unsigned int *)(*v24 + v26);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (void *)sub_46C8EC(a2, a3);
  double v29 = (unsigned __int16 *)(*v28 - *(int *)*v28);
  if (*v29 >= 9u && (uint64_t v30 = v29[4]) != 0) {
    uint64_t v31 = *(unsigned int *)(*v28 + v30);
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(void *)(a1 + 8);
  uint64_t v33 = sub_46C8EC(a2, a3);
  sub_2954EC(v32, *(void *)(v33 + 32), (uint64_t)&v208);
  sub_2E4B5C((uint64_t)&v208, &v211);
  if (v209)
  {
    int v210 = v209;
    operator delete(v209);
  }
  unsigned int v34 = v211[2];
  uint64_t v206 = *(void *)v211;
  unsigned int v207 = v34;
  int v35 = *(v212 - 1);
  uint64_t v204 = *(void *)(v212 - 3);
  int v205 = v35;
  double v36 = (void *)sub_46C8EC(a2, a3);
  uint64_t v37 = (unsigned __int16 *)(*v36 - *(int *)*v36);
  uint64_t v190 = v31;
  if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
    uint64_t v39 = *(unsigned int *)(*v36 + v38);
  }
  else {
    uint64_t v39 = 0;
  }
  uint64_t v203 = v9 - v39;
  v195 = a2;
  uint64_t v40 = sub_108EB0C(a2, v194, a4, a5, a6, a7, a9, &v203);
  long long v41 = v40;
  unint64_t v43 = v42;
  if (v40)
  {
    unint64_t v44 = sub_46C760(v40);
    BOOL v45 = v43 < v44;
    if (v192)
    {
      if (v43 >= v44) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (v192) {
      goto LABEL_40;
    }
    BOOL v45 = 0;
  }
  unint64_t v46 = sub_46C760(a6);
  if (a7 >= v46 || !v45)
  {
    if (v45 == a7 < v46) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v48 = sub_46C8EC(v41, v43);
  if (v48 != sub_46C8EC(a6, a7)) {
LABEL_39:
  }
    ++v43;
LABEL_40:
  uint64_t v49 = v9 - v27;
  uint64_t v50 = v9 - v27 - v190;
  float64x2_t v191 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v193 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v189 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v188 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  unint64_t v51 = v43;
  while (1)
  {
    if (a4)
    {
      unint64_t v53 = sub_46C760(a4);
      BOOL v54 = a5 < v53;
      if (!v41)
      {
        if (a5 >= v53) {
          goto LABEL_268;
        }
        goto LABEL_55;
      }
    }
    else
    {
      BOOL v54 = 0;
      uint64_t v22 = 0;
      if (!v41) {
        goto LABEL_272;
      }
    }
    unint64_t v55 = sub_46C760(v41);
    if (v51 < v55 && v54)
    {
      uint64_t v57 = sub_46C8EC(a4, a5);
      if (v57 == sub_46C8EC(v41, v51))
      {
        uint64_t v22 = 0;
LABEL_272:
        uint64_t v182 = v211;
        if (!v211) {
          return v22;
        }
        goto LABEL_273;
      }
    }
    else if (((v54 ^ (v51 < v55)) & 1) == 0)
    {
LABEL_268:
      uint64_t v22 = 0;
      uint64_t v182 = v211;
      if (!v211) {
        return v22;
      }
      goto LABEL_273;
    }
LABEL_55:
    uint64_t v58 = sub_46C8EC(v195, a3);
    uint64_t v59 = sub_46C8EC(a4, a5);
    uint64_t v60 = *(int **)(v58 + 8);
    long long v61 = (unsigned __int16 *)((char *)v60 - *v60);
    unsigned int v62 = *v61;
    if (*(unsigned char *)(v58 + 38))
    {
      if (v62 >= 9)
      {
        unsigned int v63 = v61[4];
        if (v63) {
          goto LABEL_61;
        }
      }
    }
    else if (v62 >= 5)
    {
      unsigned int v63 = v61[2];
      if (v63)
      {
LABEL_61:
        int v64 = *(unsigned __int16 *)((char *)v60 + v63);
        unint64_t v65 = *(int **)(v59 + 8);
        uint64_t v66 = (unsigned __int16 *)((char *)v65 - *v65);
        unsigned int v67 = *v66;
        if (*(unsigned char *)(v59 + 38)) {
          goto LABEL_66;
        }
        goto LABEL_62;
      }
    }
    int v64 = 0;
    unint64_t v65 = *(int **)(v59 + 8);
    uint64_t v66 = (unsigned __int16 *)((char *)v65 - *v65);
    unsigned int v67 = *v66;
    if (*(unsigned char *)(v59 + 38))
    {
LABEL_66:
      if (v67 >= 5)
      {
        unsigned int v68 = v66[2];
        if (v68) {
          goto LABEL_68;
        }
      }
      goto LABEL_69;
    }
LABEL_62:
    if (v67 >= 9)
    {
      unsigned int v68 = v66[4];
      if (v68)
      {
LABEL_68:
        int v69 = *(unsigned __int16 *)((char *)v65 + v68);
        goto LABEL_70;
      }
    }
LABEL_69:
    int v69 = 0;
LABEL_70:
    int v70 = v69 - v64;
    if (v70 > 18000) {
      v70 -= 36000;
    }
    if (v70 < -17999) {
      v70 += 36000;
    }
    if (fabs((double)v70 / 100.0) <= (double)(__int16)*(_DWORD *)(a1 + 528)) {
      break;
    }
LABEL_257:
    unint64_t v175 = (void *)sub_46C8EC(a4, a5);
    uint64_t v176 = (unsigned __int16 *)(*v175 - *(int *)*v175);
    if (*v176 >= 9u && (uint64_t v177 = v176[4]) != 0) {
      uint64_t v178 = *(unsigned int *)(*v175 + v177);
    }
    else {
      uint64_t v178 = 0;
    }
    unint64_t v179 = (void *)sub_46C8EC(a4, a5);
    unint64_t v180 = (unsigned __int16 *)(*v179 - *(int *)*v179);
    if (*v180 >= 9u && (uint64_t v181 = v180[4]) != 0) {
      uint64_t v52 = *(unsigned int *)(*v179 + v181);
    }
    else {
      uint64_t v52 = 0;
    }
    v49 += v178;
    v50 += v52;
    ++a5;
  }
  uint64_t v71 = *(void *)(a1 + 8);
  uint64_t v72 = sub_46C8EC(a4, a5);
  sub_2954EC(v71, *(void *)(v72 + 32), (uint64_t)&v208);
  sub_2E4B5C((uint64_t)&v208, &__p);
  if (v209)
  {
    int v210 = v209;
    operator delete(v209);
  }
  int v77 = *((_DWORD *)__p + 2);
  uint64_t v199 = *(void *)__p;
  int v200 = v77;
  int v78 = *(v202 - 1);
  uint64_t v197 = *(void *)(v202 - 3);
  int v198 = v78;
  sub_3B8BC4((unsigned int **)&__p, (unsigned int *)&v206, 0, 0, (uint64_t)&v208, v73, v74, v75, v76);
  double v80 = v208 * 100.0;
  if (v208 * 100.0 >= 0.0)
  {
    double v81 = v208 * 100.0;
    if (v80 < 4.50359963e15)
    {
      uint64_t v82 = (uint64_t)(v80 + v80) + 1;
      goto LABEL_84;
    }
  }
  else
  {
    double v81 = v208 * 100.0;
    if (v80 > -4.50359963e15)
    {
      uint64_t v82 = (uint64_t)(v80 + v80);
      if (v82 >= 1) {
        --v82;
      }
LABEL_84:
      double v81 = (double)(v82 >> 1);
    }
  }
  if (v81 >= 9.22337204e18)
  {
    if (*(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFFLL || *(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_97;
    }
    goto LABEL_101;
  }
  if (v80 >= 0.0)
  {
    double v81 = 4.50359963e15;
    if (v80 < 4.50359963e15)
    {
      uint64_t v83 = (uint64_t)(v80 + v80) + 1;
      goto LABEL_95;
    }
  }
  else
  {
    double v81 = -4.50359963e15;
    if (v80 > -4.50359963e15)
    {
      uint64_t v83 = (uint64_t)(v80 + v80);
      if (v83 >= 1) {
        --v83;
      }
LABEL_95:
      double v80 = (double)(v83 >> 1);
    }
  }
  if ((uint64_t)v80 > *(void *)(a1 + 544)) {
    goto LABEL_101;
  }
LABEL_97:
  unsigned int v85 = v209;
  unsigned int v84 = HIDWORD(v209);
  unsigned int v86 = v199;
  if (v199 != -1 && v209 != (void *)-1)
  {
    long double v106 = exp(3.14159265 - (double)HIDWORD(v199) * 6.28318531 / 4294967300.0);
    long double v107 = atan((v106 - 1.0 / v106) * 0.5) * 57.2957795 * 0.0174532925;
    v108.i64[0] = v86;
    v108.i64[1] = v85;
    long double v109 = exp(3.14159265 - (double)v84 * 6.28318531 / 4294967300.0);
    long double v110 = atan((v109 - 1.0 / v109) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v111 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v108), v193), v189), v191), v188);
    double v184 = vsubq_f64((float64x2_t)v111, (float64x2_t)vdupq_laneq_s64(v111, 1)).f64[0];
    long double v112 = sin((v107 - v110) * 0.5);
    long double v113 = v112 * v112;
    double v114 = cos(v107);
    long double v115 = v114 * cos(v110);
    long double v116 = sin(0.5 * v184);
    long double v117 = atan2(sqrt(v116 * v116 * v115 + v113), sqrt(1.0 - (v116 * v116 * v115 + v113)));
    double v80 = (v117 + v117) * 6372797.56 * 100.0;
    if (v80 >= 0.0)
    {
      double v81 = v80;
      if (v80 >= 4.50359963e15) {
        goto LABEL_167;
      }
      uint64_t v118 = (uint64_t)(v80 + v80) + 1;
    }
    else
    {
      double v81 = v80;
      if (v80 <= -4.50359963e15) {
        goto LABEL_167;
      }
      uint64_t v118 = (uint64_t)(v80 + v80);
      if (v118 >= 1) {
        --v118;
      }
    }
    double v81 = (double)(v118 >> 1);
LABEL_167:
    if (v81 >= 9.22337204e18)
    {
      uint64_t v87 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_100;
    }
    if (v80 >= 0.0)
    {
      double v81 = 4.50359963e15;
      if (v80 < 4.50359963e15)
      {
        uint64_t v145 = (uint64_t)(v80 + v80) + 1;
LABEL_196:
        double v80 = (double)(v145 >> 1);
      }
    }
    else
    {
      double v81 = -4.50359963e15;
      if (v80 > -4.50359963e15)
      {
        uint64_t v145 = (uint64_t)(v80 + v80);
        if (v145 >= 1) {
          --v145;
        }
        goto LABEL_196;
      }
    }
    uint64_t v87 = (uint64_t)v80;
    goto LABEL_100;
  }
  uint64_t v87 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_100:
  if (v87 + v49 >= a9) {
    goto LABEL_264;
  }
LABEL_101:
  sub_3B8BC4((unsigned int **)&__p, (unsigned int *)&v204, 0, 0, (uint64_t)&v208, *(unint64_t *)&v80, v81, 9.22337204e18, v79);
  double v89 = v208 * 100.0;
  if (v208 * 100.0 >= 0.0)
  {
    double v90 = v208 * 100.0;
    if (v89 < 4.50359963e15)
    {
      uint64_t v91 = (uint64_t)(v89 + v89) + 1;
      goto LABEL_108;
    }
  }
  else
  {
    double v90 = v208 * 100.0;
    if (v89 > -4.50359963e15)
    {
      uint64_t v91 = (uint64_t)(v89 + v89);
      if (v91 >= 1) {
        --v91;
      }
LABEL_108:
      double v90 = (double)(v91 >> 1);
    }
  }
  if (v90 >= 9.22337204e18)
  {
    if (*(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFFLL || *(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_121;
    }
    goto LABEL_125;
  }
  if (v89 >= 0.0)
  {
    double v90 = 4.50359963e15;
    if (v89 < 4.50359963e15)
    {
      uint64_t v92 = (uint64_t)(v89 + v89) + 1;
      goto LABEL_119;
    }
  }
  else
  {
    double v90 = -4.50359963e15;
    if (v89 > -4.50359963e15)
    {
      uint64_t v92 = (uint64_t)(v89 + v89);
      if (v92 >= 1) {
        --v92;
      }
LABEL_119:
      double v89 = (double)(v92 >> 1);
    }
  }
  if ((uint64_t)v89 > *(void *)(a1 + 544)) {
    goto LABEL_125;
  }
LABEL_121:
  unsigned int v94 = v209;
  unsigned int v93 = HIDWORD(v209);
  unsigned int v95 = v199;
  if (v199 != -1 && v209 != (void *)-1)
  {
    long double v119 = exp(3.14159265 - (double)HIDWORD(v199) * 6.28318531 / 4294967300.0);
    long double v120 = atan((v119 - 1.0 / v119) * 0.5) * 57.2957795 * 0.0174532925;
    v121.i64[0] = v95;
    v121.i64[1] = v94;
    long double v122 = exp(3.14159265 - (double)v93 * 6.28318531 / 4294967300.0);
    long double v123 = atan((v122 - 1.0 / v122) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v124 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v121), v193), v189), v191), v188);
    double v185 = vsubq_f64((float64x2_t)v124, (float64x2_t)vdupq_laneq_s64(v124, 1)).f64[0];
    long double v125 = sin((v120 - v123) * 0.5);
    long double v126 = v125 * v125;
    double v127 = cos(v120);
    long double v128 = v127 * cos(v123);
    long double v129 = sin(0.5 * v185);
    long double v130 = atan2(sqrt(v129 * v129 * v128 + v126), sqrt(1.0 - (v129 * v129 * v128 + v126)));
    double v89 = (v130 + v130) * 6372797.56 * 100.0;
    if (v89 >= 0.0)
    {
      double v90 = v89;
      if (v89 >= 4.50359963e15) {
        goto LABEL_177;
      }
      uint64_t v131 = (uint64_t)(v89 + v89) + 1;
    }
    else
    {
      double v90 = v89;
      if (v89 <= -4.50359963e15) {
        goto LABEL_177;
      }
      uint64_t v131 = (uint64_t)(v89 + v89);
      if (v131 >= 1) {
        --v131;
      }
    }
    double v90 = (double)(v131 >> 1);
LABEL_177:
    if (v90 >= 9.22337204e18)
    {
      uint64_t v96 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_124;
    }
    if (v89 >= 0.0)
    {
      double v90 = 4.50359963e15;
      if (v89 < 4.50359963e15)
      {
        uint64_t v146 = (uint64_t)(v89 + v89) + 1;
LABEL_200:
        double v89 = (double)(v146 >> 1);
      }
    }
    else
    {
      double v90 = -4.50359963e15;
      if (v89 > -4.50359963e15)
      {
        uint64_t v146 = (uint64_t)(v89 + v89);
        if (v146 >= 1) {
          --v146;
        }
        goto LABEL_200;
      }
    }
    uint64_t v96 = (uint64_t)v89;
    goto LABEL_124;
  }
  uint64_t v96 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_124:
  if (v96 + v50 >= a9) {
    goto LABEL_264;
  }
LABEL_125:
  sub_3B8BC4(&v211, (unsigned int *)&v199, 0, 0, (uint64_t)&v208, *(unint64_t *)&v89, v90, 9.22337204e18, v88);
  double v98 = v208 * 100.0;
  if (v208 * 100.0 >= 0.0)
  {
    double v99 = v208 * 100.0;
    if (v98 < 4.50359963e15)
    {
      uint64_t v100 = (uint64_t)(v98 + v98) + 1;
      goto LABEL_132;
    }
  }
  else
  {
    double v99 = v208 * 100.0;
    if (v98 > -4.50359963e15)
    {
      uint64_t v100 = (uint64_t)(v98 + v98);
      if (v100 >= 1) {
        --v100;
      }
LABEL_132:
      double v99 = (double)(v100 >> 1);
    }
  }
  if (v99 >= 9.22337204e18)
  {
    if (*(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFFLL || *(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_145;
    }
    goto LABEL_207;
  }
  if (v98 >= 0.0)
  {
    double v99 = 4.50359963e15;
    if (v98 < 4.50359963e15)
    {
      uint64_t v101 = (uint64_t)(v98 + v98) + 1;
      goto LABEL_143;
    }
  }
  else
  {
    double v99 = -4.50359963e15;
    if (v98 > -4.50359963e15)
    {
      uint64_t v101 = (uint64_t)(v98 + v98);
      if (v101 >= 1) {
        --v101;
      }
LABEL_143:
      double v98 = (double)(v101 >> 1);
    }
  }
  if ((uint64_t)v98 > *(void *)(a1 + 544)) {
    goto LABEL_207;
  }
LABEL_145:
  unsigned int v102 = v209;
  if (v209 != (void *)-1)
  {
    unsigned int v105 = v204;
    unsigned int v104 = HIDWORD(v204);
    if (v204 == -1)
    {
      uint64_t v103 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_206;
    }
    long double v132 = exp(3.14159265 - (double)HIDWORD(v209) * 6.28318531 / 4294967300.0);
    long double v133 = atan((v132 - 1.0 / v132) * 0.5) * 57.2957795 * 0.0174532925;
    v134.i64[0] = v102;
    v134.i64[1] = v105;
    long double v135 = exp(3.14159265 - (double)v104 * 6.28318531 / 4294967300.0);
    long double v136 = atan((v135 - 1.0 / v135) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v137 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v134), v193), v189), v191), v188);
    double v186 = vsubq_f64((float64x2_t)v137, (float64x2_t)vdupq_laneq_s64(v137, 1)).f64[0];
    long double v138 = sin((v133 - v136) * 0.5);
    long double v139 = v138 * v138;
    double v140 = cos(v133);
    long double v141 = v140 * cos(v136);
    long double v142 = sin(0.5 * v186);
    long double v143 = atan2(sqrt(v142 * v142 * v141 + v139), sqrt(1.0 - (v142 * v142 * v141 + v139)));
    double v98 = (v143 + v143) * 6372797.56 * 100.0;
    if (v98 >= 0.0)
    {
      double v99 = v98;
      if (v98 >= 4.50359963e15) {
        goto LABEL_187;
      }
      uint64_t v144 = (uint64_t)(v98 + v98) + 1;
    }
    else
    {
      double v99 = v98;
      if (v98 <= -4.50359963e15) {
        goto LABEL_187;
      }
      uint64_t v144 = (uint64_t)(v98 + v98);
      if (v144 >= 1) {
        --v144;
      }
    }
    double v99 = (double)(v144 >> 1);
LABEL_187:
    if (v99 >= 9.22337204e18)
    {
      uint64_t v103 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_206;
    }
    if (v98 >= 0.0)
    {
      double v99 = 4.50359963e15;
      if (v98 < 4.50359963e15)
      {
        uint64_t v147 = (uint64_t)(v98 + v98) + 1;
LABEL_204:
        double v98 = (double)(v147 >> 1);
      }
    }
    else
    {
      double v99 = -4.50359963e15;
      if (v98 > -4.50359963e15)
      {
        uint64_t v147 = (uint64_t)(v98 + v98);
        if (v147 >= 1) {
          --v147;
        }
        goto LABEL_204;
      }
    }
    uint64_t v103 = (uint64_t)v98;
    goto LABEL_206;
  }
  uint64_t v103 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_206:
  if (v103 + v50 >= a9) {
    goto LABEL_264;
  }
LABEL_207:
  sub_3B8BC4(&v211, (unsigned int *)&v197, 0, 0, (uint64_t)&v208, *(unint64_t *)&v98, v99, 9.22337204e18, v97);
  double v148 = v208 * 100.0;
  if (v208 * 100.0 >= 0.0)
  {
    double v149 = v208 * 100.0;
    if (v148 < 4.50359963e15)
    {
      uint64_t v150 = (uint64_t)(v148 + v148) + 1;
      goto LABEL_214;
    }
  }
  else
  {
    double v149 = v208 * 100.0;
    if (v148 > -4.50359963e15)
    {
      uint64_t v150 = (uint64_t)(v148 + v148);
      if (v150 >= 1) {
        --v150;
      }
LABEL_214:
      double v149 = (double)(v150 >> 1);
    }
  }
  if (v149 >= 9.22337204e18)
  {
    if (*(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFFLL || *(void *)(a1 + 544) == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_227;
    }
    goto LABEL_255;
  }
  if (v148 >= 0.0)
  {
    if (v148 < 4.50359963e15)
    {
      uint64_t v151 = (uint64_t)(v148 + v148) + 1;
      goto LABEL_225;
    }
  }
  else if (v148 > -4.50359963e15)
  {
    uint64_t v151 = (uint64_t)(v148 + v148);
    if (v151 >= 1) {
      --v151;
    }
LABEL_225:
    double v148 = (double)(v151 >> 1);
  }
  if ((uint64_t)v148 > *(void *)(a1 + 544)) {
    goto LABEL_255;
  }
LABEL_227:
  unsigned int v152 = v209;
  if (v209 != (void *)-1)
  {
    unsigned int v155 = v204;
    unsigned int v154 = HIDWORD(v204);
    if (v204 == -1)
    {
      uint64_t v153 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_250;
    }
    long double v156 = exp(3.14159265 - (double)HIDWORD(v209) * 6.28318531 / 4294967300.0);
    long double v157 = atan((v156 - 1.0 / v156) * 0.5) * 57.2957795 * 0.0174532925;
    v158.i64[0] = v152;
    v158.i64[1] = v155;
    long double v159 = exp(3.14159265 - (double)v154 * 6.28318531 / 4294967300.0);
    long double v160 = atan((v159 - 1.0 / v159) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v161 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v158), v193), v189), v191), v188);
    double v187 = vsubq_f64((float64x2_t)v161, (float64x2_t)vdupq_laneq_s64(v161, 1)).f64[0];
    long double v162 = sin((v157 - v160) * 0.5);
    long double v163 = v162 * v162;
    double v164 = cos(v157);
    long double v165 = v164 * cos(v160);
    long double v166 = sin(0.5 * v187);
    long double v167 = atan2(sqrt(v166 * v166 * v165 + v163), sqrt(1.0 - (v166 * v166 * v165 + v163)));
    double v168 = (v167 + v167) * 6372797.56 * 100.0;
    if (v168 >= 0.0)
    {
      double v169 = v168;
      if (v168 >= 4.50359963e15) {
        goto LABEL_239;
      }
      uint64_t v170 = (uint64_t)(v168 + v168) + 1;
    }
    else
    {
      double v169 = v168;
      if (v168 <= -4.50359963e15) {
        goto LABEL_239;
      }
      uint64_t v170 = (uint64_t)(v168 + v168);
      if (v170 >= 1) {
        --v170;
      }
    }
    double v169 = (double)(v170 >> 1);
LABEL_239:
    if (v169 >= 9.22337204e18)
    {
      uint64_t v153 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_250;
    }
    if (v168 >= 0.0)
    {
      if (v168 < 4.50359963e15)
      {
        uint64_t v171 = (uint64_t)(v168 + v168) + 1;
LABEL_248:
        double v168 = (double)(v171 >> 1);
      }
    }
    else if (v168 > -4.50359963e15)
    {
      uint64_t v171 = (uint64_t)(v168 + v168);
      if (v171 >= 1) {
        --v171;
      }
      goto LABEL_248;
    }
    uint64_t v153 = (uint64_t)v168;
    goto LABEL_250;
  }
  uint64_t v153 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_250:
  unint64_t v172 = (void *)sub_46C8EC(a4, a5);
  unint64_t v173 = (unsigned __int16 *)(*v172 - *(int *)*v172);
  if (*v173 >= 9u)
  {
    uint64_t v174 = v173[4];
    if (v174)
    {
      if (v153 + v50 + *(unsigned int *)(*v172 + v174) >= a9) {
        goto LABEL_264;
      }
      goto LABEL_255;
    }
  }
  if (v153 + v50 < a9)
  {
LABEL_255:
    if (__p)
    {
      v202 = __p;
      operator delete(__p);
    }
    goto LABEL_257;
  }
LABEL_264:
  if (__p)
  {
    v202 = __p;
    operator delete(__p);
  }
  uint64_t v22 = 1;
  uint64_t v182 = v211;
  if (v211)
  {
LABEL_273:
    v212 = v182;
    operator delete(v182);
  }
  return v22;
}

void sub_108EA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(void *)(v31 - 168) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void *sub_108EB0C(void *a1, unint64_t a2, void *a3, unint64_t a4, void *a5, unint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v11 = a5;
  uint64_t v38 = a7;
  if (a1)
  {
    unint64_t v17 = sub_46C760(a1);
    unint64_t v18 = v17;
    if (!v11)
    {
      if (a2 >= v17) {
        return 0;
      }
      uint64_t v37 = a8;
      char v21 = 1;
      if (a3) {
        goto LABEL_17;
      }
LABEL_12:
      if ((v21 & 1) == 0 && a6 < sub_46C760(v11)) {
        goto LABEL_26;
      }
      return v11;
    }
    unint64_t v19 = sub_46C760(v11);
    if (a2 >= v18 || a6 >= v19)
    {
      if (a2 < v18 == a6 < v19) {
        return v11;
      }
    }
    else
    {
      uint64_t v20 = sub_46C8EC(a1, a2);
      if (v20 == sub_46C8EC(v11, a6)) {
        return v11;
      }
    }
  }
  else if (!a5 || a6 >= sub_46C760(a5))
  {
    return v11;
  }
  uint64_t v37 = a8;
  char v21 = 0;
  if (!a3) {
    goto LABEL_12;
  }
LABEL_17:
  unint64_t v22 = sub_46C760(a3);
  unint64_t v23 = v22;
  if (v21)
  {
    if (a4 >= v22) {
      return v11;
    }
LABEL_26:
    if (a4 >= a2)
    {
      double v29 = v37;
      unint64_t v31 = a4;
      if (*v37 < a7) {
        return sub_108F250(a3, v31 + 1, v11, a6, v29, &v38);
      }
    }
    else
    {
      uint64_t v26 = (void *)sub_46C8EC(a1, a2);
      uint64_t v27 = (unsigned __int16 *)(*v26 - *(int *)*v26);
      if (*v27 < 9u)
      {
        double v29 = v37;
        *uint64_t v37 = 0;
        unint64_t v31 = a2;
        a3 = a1;
        if (a7 > 0) {
          return sub_108F250(a3, v31 + 1, v11, a6, v29, &v38);
        }
      }
      else
      {
        uint64_t v28 = v27[4];
        double v29 = v37;
        if (v28)
        {
          uint64_t v30 = *(unsigned int *)(*v26 + v28);
          *uint64_t v37 = v30;
          unint64_t v31 = a2;
          a3 = a1;
          if (v30 < a7) {
            return sub_108F250(a3, v31 + 1, v11, a6, v29, &v38);
          }
        }
        else
        {
          *uint64_t v37 = 0;
          unint64_t v31 = a2;
          a3 = a1;
          if (a7 > 0) {
            return sub_108F250(a3, v31 + 1, v11, a6, v29, &v38);
          }
        }
      }
    }
    if (!a3)
    {
      if (!a1 || a2 >= sub_46C760(a1)) {
        return sub_108F250(a3, v31 + 1, v11, a6, v29, &v38);
      }
      return a3;
    }
    unint64_t v32 = sub_46C760(a3);
    unint64_t v33 = v32;
    if (a1)
    {
      unint64_t v34 = sub_46C760(a1);
      if (v31 < v33 && a2 < v34)
      {
        uint64_t v35 = sub_46C8EC(a3, v31);
        if (v35 == sub_46C8EC(a1, a2)) {
          return sub_108F250(a3, v31 + 1, v11, a6, v29, &v38);
        }
        return a3;
      }
      if (v31 < v33 != a2 < v34) {
        return a3;
      }
    }
    else if (v31 < v32)
    {
      return a3;
    }
    return sub_108F250(a3, v31 + 1, v11, a6, v29, &v38);
  }
  unint64_t v24 = sub_46C760(v11);
  if (a4 < v23 && a6 < v24)
  {
    uint64_t v25 = sub_46C8EC(a3, a4);
    if (v25 == sub_46C8EC(v11, a6)) {
      return v11;
    }
    goto LABEL_26;
  }
  if (a4 < v23 != a6 < v24) {
    goto LABEL_26;
  }
  return v11;
}

unint64_t sub_108EE14(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a1 + 32 * a3;
  long long v4 = *(_OWORD *)(v3 + 144);
  double v5 = (uint64_t *)(a2 + 24 * a3 + 864);
  v34[0] = *(_OWORD *)(v3 + 128);
  v34[1] = v4;
  sub_108BA48(v5, (uint64_t)v34, (char **)&v35);
  double v6 = v35;
  uint64_t v7 = (char *)v36 - (char *)v35;
  if ((unint64_t)((char *)v36 - (char *)v35) <= 0x3F)
  {
    unint64_t v8 = (unint64_t)v7 >> 5;
    goto LABEL_36;
  }
  unint64_t v9 = 126 - 2 * __clz(v7 >> 5);
  if (v36 == v35) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  sub_108F8A0(v35, v36, (uint64_t)&v31, v10, 1);
  uint64_t v12 = *v5;
  uint64_t v11 = v5[1];
  unint64_t v32 = 0;
  unint64_t v33 = 0;
  unint64_t v31 = 0;
  uint64_t v13 = v11 - v12;
  if (v13)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    size_t v14 = v13 >> 5;
    long long v15 = (char *)operator new(v13 >> 5);
    unint64_t v31 = v15;
    unint64_t v33 = &v15[v14];
    bzero(v15, v14);
    unint64_t v32 = &v15[v14];
    double v6 = v35;
    unint64_t v16 = v36;
    if (v35 != v36) {
      goto LABEL_9;
    }
  }
  else
  {
    long long v15 = 0;
    double v6 = v35;
    unint64_t v16 = v36;
    if (v35 != v36)
    {
LABEL_9:
      unint64_t v8 = 0;
      *(void *)&long long v17 = 0x101010101010101;
      *((void *)&v17 + 1) = 0x101010101010101;
      unint64_t v18 = v6;
      while (1)
      {
        unint64_t v19 = v18->n128_u64[0];
        unint64_t v20 = v18->n128_u64[1];
        unint64_t v21 = v18->n128_u64[0];
        if (v18->n128_u64[0] != v20)
        {
          while (!v15[v21])
          {
            if (v20 == ++v21) {
              goto LABEL_15;
            }
          }
          goto LABEL_11;
        }
LABEL_15:
        BOOL v22 = v19 >= v20;
        if (v19 > v20) {
          unint64_t v20 = v18->n128_u64[0];
        }
        if (!v22) {
          break;
        }
LABEL_10:
        unint64_t v8 = (v8 + 1);
LABEL_11:
        v18 += 2;
        if (v18 == v16) {
          goto LABEL_34;
        }
      }
      unint64_t v23 = v20 - v19;
      if (v20 - v19 >= 8)
      {
        if (v23 < 0x20)
        {
          unint64_t v24 = 0;
          goto LABEL_25;
        }
        unint64_t v24 = v23 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v25 = &v15[v19 + 16];
        unint64_t v26 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          *((_OWORD *)v25 - 1) = v17;
          *(_OWORD *)uint64_t v25 = v17;
          v25 += 32;
          v26 -= 32;
        }
        while (v26);
        if (v23 == v24) {
          goto LABEL_10;
        }
        if ((v23 & 0x18) != 0)
        {
LABEL_25:
          unint64_t v27 = v19 + (v23 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v28 = v24 - (v23 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v29 = v24 + v19;
          do
          {
            *(void *)&v15[v29] = 0x101010101010101;
            v29 += 8;
            v28 += 8;
          }
          while (v28);
          unint64_t v19 = v27;
          if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_10;
          }
          goto LABEL_30;
        }
        v19 += v24;
      }
      do
LABEL_30:
        v15[v19++] = 1;
      while (v20 != v19);
      goto LABEL_10;
    }
  }
  unint64_t v8 = 0;
LABEL_34:
  if (v15)
  {
    operator delete(v15);
    double v6 = v35;
  }
LABEL_36:
  if (v6)
  {
    double v36 = v6;
    operator delete(v6);
  }
  return v8;
}

void sub_108F020(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_108F040(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 5)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    double v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 5);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    size_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 32 * a2;
}

void sub_108F170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void *sub_108F250(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t *a5, void *a6)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v13 = sub_46C760(a1);
        unint64_t v14 = sub_46C760(a3);
        if (a2 >= v13 || a4 >= v14)
        {
          if (a2 < v13 == a4 < v14) {
            return a1;
          }
        }
        else
        {
          uint64_t v15 = sub_46C8EC(a1, a2);
          if (v15 == sub_46C8EC(a3, a4)) {
            return a1;
          }
        }
        std::string v16 = (void *)sub_46C8EC(a1, a2);
        std::string v17 = (unsigned __int16 *)(*v16 - *(int *)*v16);
        if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
        {
          uint64_t v19 = *a5 + *(unsigned int *)(*v16 + v18);
          *a5 = v19;
          if (v19 >= *a6) {
            return a1;
          }
        }
        else
        {
          uint64_t v12 = *a5;
          *a5 = *a5;
          if (v12 >= *a6) {
            return a1;
          }
        }
        ++a2;
      }
    }
    while (a2 < sub_46C760(a1))
    {
      unint64_t v21 = (void *)sub_46C8EC(a1, a2);
      BOOL v22 = (unsigned __int16 *)(*v21 - *(int *)*v21);
      if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0)
      {
        uint64_t v24 = *a5 + *(unsigned int *)(*v21 + v23);
        *a5 = v24;
        if (v24 >= *a6) {
          return a1;
        }
      }
      else
      {
        uint64_t v20 = *a5;
        *a5 = *a5;
        if (v20 >= *a6) {
          return a1;
        }
      }
      ++a2;
    }
  }
  else if (a3 && a4 < sub_46C760(a3))
  {
    do
    {
      uint64_t v25 = (void *)sub_46C8EC(0, a2);
      unint64_t v26 = (unsigned __int16 *)(*v25 - *(int *)*v25);
      if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0)
      {
        uint64_t v28 = *a5 + *(unsigned int *)(*v25 + v27);
        *a5 = v28;
        if (v28 >= *a6) {
          return a1;
        }
      }
      else
      {
        uint64_t v29 = *a5;
        *a5 = *a5;
        if (v29 >= *a6) {
          return a1;
        }
      }
      ++a2;
    }
    while (a4 < sub_46C760(a3));
  }
  return a1;
}

uint64_t sub_108F48C(int64x2_t *a1, _OWORD *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v10 = 0x199999999999999;
  }
  else {
    unint64_t v10 = v6;
  }
  uint64_t v27 = a1 + 1;
  if (v10)
  {
    if (v10 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(160 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v24 = v11;
  v25.i64[0] = (uint64_t)&v11[160 * v5];
  unint64_t v26 = &v11[160 * v10];
  sub_108F6B0((uint64_t)a1[1].i64, v25.i64[0], a2, a3, a4);
  uint64_t v12 = v25.i64[0];
  uint64_t v13 = v25.i64[0] + 160;
  v25.i64[1] = v25.i64[0] + 160;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = v12 + v16;
      uint64_t v18 = v14 + v16;
      *(_OWORD *)(v17 - 160) = *(_OWORD *)(v14 + v16 - 160);
      uint64_t v19 = *(void *)(v14 + v16 - 128);
      *(_OWORD *)(v17 - 144) = *(_OWORD *)(v14 + v16 - 144);
      *(void *)(v17 - 128) = v19;
      *(void *)(v17 - 120) = 0;
      *(void *)(v17 - 112) = 0;
      *(void *)(v17 - 104) = 0;
      *(_OWORD *)(v17 - 120) = *(_OWORD *)(v14 + v16 - 120);
      *(void *)(v17 - 104) = *(void *)(v14 + v16 - 104);
      *(void *)(v18 - 120) = 0;
      *(void *)(v18 - 112) = 0;
      *(void *)(v18 - 104) = 0;
      *(void *)(v17 - 96) = 0;
      *(void *)(v17 - 88) = 0;
      *(void *)(v17 - 80) = 0;
      *(_OWORD *)(v17 - 96) = *(_OWORD *)(v14 + v16 - 96);
      *(void *)(v17 - 80) = *(void *)(v14 + v16 - 80);
      *(void *)(v18 - 96) = 0;
      *(void *)(v18 - 88) = 0;
      *(void *)(v18 - 80) = 0;
      uint64_t v20 = *(void *)(v14 + v16 - 56);
      *(_OWORD *)(v17 - 72) = *(_OWORD *)(v14 + v16 - 72);
      *(void *)(v17 - 56) = v20;
      *(void *)(v17 - 48) = 0;
      *(void *)(v17 - 40) = 0;
      *(void *)(v17 - 32) = 0;
      *(_OWORD *)(v17 - 48) = *(_OWORD *)(v14 + v16 - 48);
      *(void *)(v17 - 32) = *(void *)(v14 + v16 - 32);
      *(void *)(v18 - 48) = 0;
      *(void *)(v18 - 40) = 0;
      *(void *)(v18 - 32) = 0;
      *(void *)(v17 - 24) = 0;
      *(void *)(v17 - 16) = 0;
      *(void *)(v17 - 8) = 0;
      *(_OWORD *)(v17 - 24) = *(_OWORD *)(v14 + v16 - 24);
      *(void *)(v17 - 8) = *(void *)(v14 + v16 - 8);
      *(void *)(v18 - 24) = 0;
      *(void *)(v18 - 16) = 0;
      *(void *)(v18 - 8) = 0;
      v16 -= 160;
    }
    while (v14 + v16 != v15);
    int64x2_t v21 = *a1;
    uint64_t v13 = v25.i64[1];
    v12 += v16;
  }
  a1->i64[0] = v12;
  a1->i64[1] = v13;
  int64x2_t v25 = v21;
  BOOL v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v26;
  unint64_t v26 = v22;
  uint64_t v24 = (char *)v21.i64[0];
  sub_108F808((uint64_t)&v24);
  return v13;
}

void sub_108F69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_108F808((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_108F6B0(uint64_t a1, _OWORD *a2, _OWORD *a3, long long *a4, uint64_t a5)
{
  sub_39ECCC((uint64_t)&v14, a4);
  long long v8 = *(_OWORD *)a5;
  uint64_t v9 = *(void *)(a5 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)(a5 + 24);
  uint64_t v11 = *(void *)(a5 + 40);
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(_OWORD *)__n128 __p = *(_OWORD *)(a5 + 48);
  uint64_t v13 = *(void *)(a5 + 64);
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  *(void *)(a5 + 64) = 0;
  *a2 = *a3;
  sub_39ECCC((uint64_t)(a2 + 1), &v14);
  sub_39ECCC((uint64_t)a2 + 88, &v8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_108F790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = (void *)v18[8];
  if (v20)
  {
    v18[9] = v20;
    operator delete(v20);
    int64x2_t v21 = (void *)v18[5];
    if (!v21)
    {
LABEL_3:
      sub_39EB70(&a9);
      sub_39EB70(&a18);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int64x2_t v21 = (void *)v18[5];
    if (!v21) {
      goto LABEL_3;
    }
  }
  v18[6] = v21;
  operator delete(v21);
  sub_39EB70(&a9);
  sub_39EB70(&a18);
  _Unwind_Resume(a1);
}

void sub_108F7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_108F808(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    long long v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    unint64_t v5 = *(void **)(i - 48);
    if (v5)
    {
      *(void *)(i - 40) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(void **)(i - 96);
    if (v6)
    {
      *(void *)(i - 88) = v6;
      operator delete(v6);
    }
    long long v7 = *(void **)(i - 120);
    if (v7)
    {
      *(void *)(i - 112) = v7;
      operator delete(v7);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_108F8A0(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_108FDD0(void *a1, void *a2, void *a3)
{
  unint64_t v3 = a2[1] - *a2;
  unint64_t v4 = a1[1] - *a1;
  unint64_t v5 = a2[2];
  BOOL v6 = v3 == v4;
  BOOL v7 = v3 < v4;
  if (v6) {
    BOOL v7 = v5 < a1[2];
  }
  unint64_t v8 = a3[1] - *a3;
  BOOL v9 = a3[2] < v5;
  BOOL v6 = v8 == v3;
  BOOL v10 = v8 < v3;
  if (v6) {
    BOOL v10 = v9;
  }
  if (v7)
  {
    if (v10)
    {
      long long v12 = *(_OWORD *)a1;
      long long v11 = *((_OWORD *)a1 + 1);
      long long v13 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v13;
      *(_OWORD *)a3 = v12;
      *((_OWORD *)a3 + 1) = v11;
      return 1;
    }
    long long v25 = *(_OWORD *)a1;
    long long v24 = *((_OWORD *)a1 + 1);
    long long v26 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v26;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v24;
    unint64_t v27 = a3[1] - *a3;
    unint64_t v28 = a2[1] - *a2;
    BOOL v6 = v27 == v28;
    BOOL v29 = v27 < v28;
    if (v6) {
      BOOL v29 = a3[2] < a2[2];
    }
    if (v29)
    {
      long long v31 = *(_OWORD *)a2;
      long long v30 = *((_OWORD *)a2 + 1);
      long long v32 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v32;
      *(_OWORD *)a3 = v31;
      *((_OWORD *)a3 + 1) = v30;
      return 2;
    }
    return 1;
  }
  if (v10)
  {
    long long v16 = *(_OWORD *)a2;
    long long v15 = *((_OWORD *)a2 + 1);
    long long v17 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v17;
    *(_OWORD *)a3 = v16;
    *((_OWORD *)a3 + 1) = v15;
    unint64_t v18 = a2[1] - *a2;
    unint64_t v19 = a1[1] - *a1;
    BOOL v6 = v18 == v19;
    BOOL v20 = v18 < v19;
    if (v6) {
      BOOL v20 = a2[2] < a1[2];
    }
    if (v20)
    {
      long long v22 = *(_OWORD *)a1;
      long long v21 = *((_OWORD *)a1 + 1);
      long long v23 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v23;
      *(_OWORD *)a2 = v22;
      *((_OWORD *)a2 + 1) = v21;
      return 2;
    }
    return 1;
  }
  return 0;
}

void *sub_108FF20(void *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  unint64_t v5 = v3 - *a1;
  unint64_t v6 = *(void *)(a2 - 24) - *(void *)(a2 - 32);
  BOOL v7 = v5 == v6;
  BOOL v8 = v5 < v6;
  if (v7) {
    BOOL v8 = v4 < *(void *)(a2 - 16);
  }
  if (v8)
  {
    BOOL v9 = a1;
    do
    {
      uint64_t v10 = v9[4];
      uint64_t v11 = v9[5];
      v9 += 4;
      unint64_t v12 = v11 - v10;
      BOOL v7 = v5 == v12;
      BOOL v13 = v5 < v12;
      if (v7) {
        BOOL v13 = v4 < v9[2];
      }
    }
    while (!v13);
  }
  else
  {
    unint64_t v14 = a1 + 4;
    do
    {
      BOOL v9 = v14;
      if ((unint64_t)v14 >= a2) {
        break;
      }
      unint64_t v15 = v14[1] - *v14;
      BOOL v16 = v4 < v9[2];
      BOOL v7 = v5 == v15;
      BOOL v17 = v5 < v15;
      if (!v7) {
        BOOL v16 = v17;
      }
      unint64_t v14 = v9 + 4;
    }
    while (!v16);
  }
  if ((unint64_t)v9 < a2)
  {
    do
    {
      uint64_t v18 = *(void *)(a2 - 32);
      uint64_t v19 = *(void *)(a2 - 24);
      a2 -= 32;
      unint64_t v20 = v19 - v18;
      BOOL v7 = v5 == v20;
      BOOL v21 = v5 < v20;
      if (v7) {
        BOOL v21 = v4 < *(void *)(a2 + 16);
      }
    }
    while (v21);
  }
  uint64_t v22 = a1[3];
  while ((unint64_t)v9 < a2)
  {
    long long v34 = *(_OWORD *)v9;
    long long v35 = *((_OWORD *)v9 + 1);
    long long v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)BOOL v9 = *(_OWORD *)a2;
    *((_OWORD *)v9 + 1) = v23;
    *(_OWORD *)a2 = v34;
    *(_OWORD *)(a2 + 16) = v35;
    do
    {
      uint64_t v24 = v9[4];
      uint64_t v25 = v9[5];
      v9 += 4;
      unint64_t v26 = v25 - v24;
      BOOL v7 = v5 == v26;
      BOOL v27 = v5 < v26;
      if (v7) {
        BOOL v27 = v4 < v9[2];
      }
    }
    while (!v27);
    do
    {
      uint64_t v28 = *(void *)(a2 - 32);
      uint64_t v29 = *(void *)(a2 - 24);
      a2 -= 32;
      unint64_t v30 = v29 - v28;
      BOOL v7 = v5 == v30;
      BOOL v31 = v5 < v30;
      if (v7) {
        BOOL v31 = v4 < *(void *)(a2 + 16);
      }
    }
    while (v31);
  }
  if (v9 - 4 != a1)
  {
    long long v32 = *((_OWORD *)v9 - 1);
    *(_OWORD *)a1 = *((_OWORD *)v9 - 2);
    *((_OWORD *)a1 + 1) = v32;
  }
  *(v9 - 4) = v2;
  *(v9 - 3) = v3;
  *(v9 - 2) = v4;
  *(v9 - 1) = v22;
  return v9;
}

unint64_t sub_1090088(void *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  unint64_t v7 = v4 - *a1;
  do
  {
    unint64_t v8 = a1[v2 + 5] - a1[v2 + 4];
    BOOL v9 = a1[v2 + 6] < v5;
    BOOL v10 = v8 == v7;
    BOOL v11 = v8 < v7;
    if (!v10) {
      BOOL v9 = v11;
    }
    v2 += 4;
  }
  while (v9);
  unint64_t v12 = &a1[v2];
  if (v2 == 4)
  {
    do
    {
      if ((unint64_t)v12 >= a2) {
        break;
      }
      uint64_t v17 = *(void *)(a2 - 32);
      uint64_t v18 = *(void *)(a2 - 24);
      a2 -= 32;
      unint64_t v19 = v18 - v17;
      BOOL v10 = v19 == v7;
      BOOL v20 = v19 < v7;
      if (v10) {
        BOOL v20 = *(void *)(a2 + 16) < v5;
      }
    }
    while (!v20);
  }
  else
  {
    do
    {
      uint64_t v13 = *(void *)(a2 - 32);
      uint64_t v14 = *(void *)(a2 - 24);
      a2 -= 32;
      unint64_t v15 = v14 - v13;
      BOOL v10 = v15 == v7;
      BOOL v16 = v15 < v7;
      if (v10) {
        BOOL v16 = *(void *)(a2 + 16) < v5;
      }
    }
    while (!v16);
  }
  unint64_t v21 = (unint64_t)v12;
  if ((unint64_t)v12 < a2)
  {
    uint64_t v22 = (_OWORD *)a2;
    do
    {
      long long v23 = *(_OWORD *)v21;
      long long v35 = *(_OWORD *)(v21 + 16);
      long long v24 = v22[1];
      *(_OWORD *)unint64_t v21 = *v22;
      *(_OWORD *)(v21 + 16) = v24;
      *uint64_t v22 = v23;
      v22[1] = v35;
      do
      {
        uint64_t v25 = *(void *)(v21 + 32);
        uint64_t v26 = *(void *)(v21 + 40);
        v21 += 32;
        unint64_t v27 = v26 - v25;
        BOOL v10 = v27 == v7;
        BOOL v28 = v27 < v7;
        if (v10) {
          BOOL v28 = *(void *)(v21 + 16) < v5;
        }
      }
      while (v28);
      do
      {
        uint64_t v29 = *((void *)v22 - 4);
        uint64_t v30 = *((void *)v22 - 3);
        v22 -= 2;
        unint64_t v31 = v30 - v29;
        BOOL v10 = v31 == v7;
        BOOL v32 = v31 < v7;
        if (v10) {
          BOOL v32 = *((void *)v22 + 2) < v5;
        }
      }
      while (!v32);
    }
    while (v21 < (unint64_t)v22);
  }
  if ((void *)(v21 - 32) != a1)
  {
    long long v33 = *(_OWORD *)(v21 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v21 - 32);
    *((_OWORD *)a1 + 1) = v33;
  }
  *(void *)(v21 - 32) = v3;
  *(void *)(v21 - 24) = v4;
  *(void *)(v21 - 16) = v5;
  *(void *)(v21 - 8) = v6;
  return v21 - 32;
}

BOOL sub_10901DC(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v26 = a2 - 2;
      unint64_t v27 = a2[-2].n128_u64[1] - a2[-2].n128_u64[0];
      unint64_t v28 = a1->n128_u64[1] - a1->n128_u64[0];
      BOOL v15 = v27 == v28;
      BOOL v29 = v27 < v28;
      if (v15) {
        BOOL v29 = a2[-1].n128_u64[0] < a1[1].n128_u64[0];
      }
      if (v29)
      {
        __n128 v31 = *a1;
        __n128 v30 = a1[1];
        __n128 v32 = a2[-1];
        *a1 = *v26;
        a1[1] = v32;
        *uint64_t v26 = v31;
        a2[-1] = v30;
      }
      break;
    case 3:
      sub_108FDD0(a1, (__n128 *)a1[2].n128_u64, (__n128 *)a2[-2].n128_u64);
      BOOL result = 1;
      break;
    case 4:
      sub_1090478(a1, a1 + 2, a1 + 4, a2 - 2);
      BOOL result = 1;
      break;
    case 5:
      sub_1090588(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = a1 + 4;
      sub_108FDD0(a1, (__n128 *)a1[2].n128_u64, (__n128 *)a1[4].n128_u64);
      unint64_t v7 = a1 + 6;
      if (&a1[6] == a2)
      {
LABEL_17:
        BOOL result = 1;
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
        while (1)
        {
          unint64_t v11 = v7->n128_u64[0];
          unint64_t v10 = v7->n128_u64[1];
          unint64_t v12 = v10 - v7->n128_u64[0];
          unint64_t v13 = v6->n128_u64[1] - v6->n128_u64[0];
          unint64_t v14 = v7[1].n128_u64[0];
          BOOL v15 = v12 == v13;
          BOOL v16 = v12 < v13;
          if (v15) {
            BOOL v16 = v14 < v6[1].n128_u64[0];
          }
          if (v16) {
            break;
          }
LABEL_16:
          uint64_t v6 = v7;
          v8 += 32;
          v7 += 2;
          if (v7 == a2) {
            goto LABEL_17;
          }
        }
        unint64_t v17 = v7[1].n128_u64[1];
        uint64_t v18 = v8;
        do
        {
          unint64_t v19 = (__n128 *)((char *)a1 + v18);
          __n128 v20 = *(__n128 *)((char *)a1 + v18 + 80);
          v19[6] = *(__n128 *)((char *)a1 + v18 + 64);
          v19[7] = v20;
          if (v18 == -64)
          {
            a1->n128_u64[0] = v11;
            a1->n128_u64[1] = v10;
            a1[1].n128_u64[0] = v14;
            a1[1].n128_u64[1] = v17;
            if (++v9 != 8) {
              goto LABEL_16;
            }
            goto LABEL_25;
          }
          unint64_t v21 = v19[2].n128_u64[1] - v19[2].n128_u64[0];
          BOOL v22 = v14 < v19[3].n128_u64[0];
          BOOL v15 = v12 == v21;
          BOOL v23 = v12 < v21;
          if (!v15) {
            BOOL v22 = v23;
          }
          v18 -= 32;
        }
        while (v22);
        long long v24 = (char *)a1 + v18;
        *((void *)v24 + 12) = v11;
        *((void *)v24 + 13) = v10;
        uint64_t v25 = (uint64_t)&a1[6] + v18;
        *(void *)(v25 + 16) = v14;
        *(void *)(v25 + 24) = v17;
        if (++v9 != 8) {
          goto LABEL_16;
        }
LABEL_25:
        BOOL result = &v7[2] == a2;
      }
      break;
  }
  return result;
}

__n128 sub_1090478(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  sub_108FDD0(a1, a2, a3);
  unint64_t v9 = a4->n128_u64[1] - a4->n128_u64[0];
  unint64_t v10 = a3->n128_u64[1] - a3->n128_u64[0];
  BOOL v11 = v9 == v10;
  BOOL v12 = v9 < v10;
  if (v11) {
    BOOL v12 = a4[1].n128_u64[0] < a3[1].n128_u64[0];
  }
  if (v12)
  {
    __n128 v13 = *a3;
    __n128 result = a3[1];
    __n128 v14 = a4[1];
    *a3 = *a4;
    a3[1] = v14;
    *a4 = v13;
    a4[1] = result;
    unint64_t v15 = a3->n128_u64[1] - a3->n128_u64[0];
    unint64_t v16 = a2->n128_u64[1] - a2->n128_u64[0];
    BOOL v11 = v15 == v16;
    BOOL v17 = v15 < v16;
    if (v11) {
      BOOL v17 = a3[1].n128_u64[0] < a2[1].n128_u64[0];
    }
    if (v17)
    {
      __n128 v18 = *a2;
      __n128 result = a2[1];
      __n128 v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *a3 = v18;
      a3[1] = result;
      unint64_t v20 = a2->n128_u64[1] - a2->n128_u64[0];
      unint64_t v21 = a1->n128_u64[1] - a1->n128_u64[0];
      BOOL v11 = v20 == v21;
      BOOL v22 = v20 < v21;
      if (v11) {
        BOOL v22 = a2[1].n128_u64[0] < a1[1].n128_u64[0];
      }
      if (v22)
      {
        __n128 v23 = *a1;
        __n128 result = a1[1];
        __n128 v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        *a2 = v23;
        a2[1] = result;
      }
    }
  }
  return result;
}

__n128 sub_1090588(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = sub_1090478(a1, a2, a3, a4).n128_u64[0];
  unint64_t v11 = a5->n128_u64[1] - a5->n128_u64[0];
  unint64_t v12 = a4->n128_u64[1] - a4->n128_u64[0];
  BOOL v13 = v11 == v12;
  BOOL v14 = v11 < v12;
  if (v13) {
    BOOL v14 = a5[1].n128_u64[0] < a4[1].n128_u64[0];
  }
  if (v14)
  {
    __n128 v15 = *a4;
    __n128 result = a4[1];
    __n128 v16 = a5[1];
    *a4 = *a5;
    a4[1] = v16;
    *a5 = v15;
    a5[1] = result;
    unint64_t v17 = a4->n128_u64[1] - a4->n128_u64[0];
    unint64_t v18 = a3->n128_u64[1] - a3->n128_u64[0];
    BOOL v13 = v17 == v18;
    BOOL v19 = v17 < v18;
    if (v13) {
      BOOL v19 = a4[1].n128_u64[0] < a3[1].n128_u64[0];
    }
    if (v19)
    {
      __n128 v20 = *a3;
      __n128 result = a3[1];
      __n128 v21 = a4[1];
      *a3 = *a4;
      a3[1] = v21;
      *a4 = v20;
      a4[1] = result;
      unint64_t v22 = a3->n128_u64[1] - a3->n128_u64[0];
      unint64_t v23 = a2->n128_u64[1] - a2->n128_u64[0];
      BOOL v13 = v22 == v23;
      BOOL v24 = v22 < v23;
      if (v13) {
        BOOL v24 = a3[1].n128_u64[0] < a2[1].n128_u64[0];
      }
      if (v24)
      {
        __n128 v25 = *a2;
        __n128 result = a2[1];
        __n128 v26 = a3[1];
        *a2 = *a3;
        a2[1] = v26;
        *a3 = v25;
        a3[1] = result;
        unint64_t v27 = a2->n128_u64[1] - a2->n128_u64[0];
        unint64_t v28 = a1->n128_u64[1] - a1->n128_u64[0];
        BOOL v13 = v27 == v28;
        BOOL v29 = v27 < v28;
        if (v13) {
          BOOL v29 = a2[1].n128_u64[0] < a1[1].n128_u64[0];
        }
        if (v29)
        {
          __n128 v30 = *a1;
          __n128 result = a1[1];
          __n128 v31 = a2[1];
          *a1 = *a2;
          a1[1] = v31;
          *a2 = v30;
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10906E8(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (void *)(result + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        uint64_t v14 = *v8;
      }
      else
      {
        unint64_t v10 = v8[1] - *v8;
        unint64_t v11 = v8[5] - v8[4];
        BOOL v13 = v10 == v11;
        BOOL v12 = v10 < v11;
        if (v13) {
          BOOL v12 = v8[2] < v8[6];
        }
        BOOL v13 = !v12;
        if (v12) {
          uint64_t v14 = v8[4];
        }
        else {
          uint64_t v14 = *v8;
        }
        if (!v13)
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      unint64_t v15 = v8[1] - v14;
      uint64_t v17 = *a4;
      uint64_t v16 = a4[1];
      unint64_t v18 = v16 - *a4;
      unint64_t v19 = a4[2];
      BOOL v20 = v8[2] < v19;
      BOOL v13 = v15 == v18;
      BOOL v21 = v15 < v18;
      if (!v13) {
        BOOL v20 = v21;
      }
      if (!v20)
      {
        uint64_t v22 = a4[3];
        do
        {
          __n128 v30 = a4;
          a4 = v8;
          long long v31 = *((_OWORD *)v8 + 1);
          *__n128 v30 = *(_OWORD *)v8;
          v30[1] = v31;
          if (v5 < v7) {
            break;
          }
          uint64_t v32 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 32 * v32);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 < a3)
          {
            unint64_t v23 = v8[1] - *v8;
            unint64_t v24 = v8[5] - v8[4];
            BOOL v13 = v23 == v24;
            BOOL v25 = v23 < v24;
            if (v13) {
              BOOL v25 = v8[2] < v8[6];
            }
            BOOL v26 = !v25;
            uint64_t v27 = v25 ? v8[4] : *v8;
            if (v26) {
              uint64_t v7 = v32;
            }
            else {
              v8 += 4;
            }
          }
          else
          {
            uint64_t v27 = *v8;
            uint64_t v7 = v32;
          }
          unint64_t v28 = v8[1] - v27;
          BOOL v13 = v28 == v18;
          BOOL v29 = v28 < v18;
          if (v13) {
            BOOL v29 = v8[2] < v19;
          }
        }
        while (!v29);
        *a4 = v17;
        a4[1] = v16;
        a4[2] = v19;
        a4[3] = v22;
      }
    }
  }
  return result;
}

__n128 sub_1090848(__n128 *a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  if (a5 >= 2)
  {
    uint64_t v5 = 0;
    __n128 v30 = *a1;
    __n128 v31 = a1[1];
    uint64_t v6 = a1;
    do
    {
      uint64_t v8 = &v6[2 * v5 + 2];
      uint64_t v9 = (2 * v5) | 1;
      uint64_t v10 = 2 * v5 + 2;
      if (v10 < a5)
      {
        unint64_t v11 = v8->n128_u64[1] - v8->n128_u64[0];
        unint64_t v12 = v8[2].n128_u64[1] - v8[2].n128_u64[0];
        BOOL v13 = v11 == v12;
        BOOL v14 = v11 < v12;
        if (v13) {
          BOOL v14 = v8[1].n128_u64[0] < v8[3].n128_u64[0];
        }
        if (v14)
        {
          v8 += 2;
          uint64_t v9 = v10;
        }
      }
      __n128 v7 = v8[1];
      __n128 *v6 = *v8;
      v6[1] = v7;
      uint64_t v6 = v8;
      uint64_t v5 = v9;
    }
    while (v9 <= (uint64_t)((unint64_t)(a5 - 2) >> 1));
    unint64_t v15 = (__n128 *)(a2 - 32);
    if (v8 == (__n128 *)(a2 - 32))
    {
      __n128 result = v30;
      __n128 *v8 = v30;
      v8[1] = v31;
    }
    else
    {
      __n128 v16 = *(__n128 *)(a2 - 16);
      __n128 *v8 = *v15;
      v8[1] = v16;
      __n128 result = v30;
      *unint64_t v15 = v30;
      *(__n128 *)(a2 - 16) = v31;
      uint64_t v17 = (char *)v8 - (char *)a1 + 32;
      if (v17 >= 33)
      {
        unint64_t v18 = (((unint64_t)v17 >> 5) - 2) >> 1;
        unint64_t v19 = &a1[2 * v18];
        unint64_t v20 = v19->n128_u64[1] - v19->n128_u64[0];
        unint64_t v22 = v8->n128_u64[0];
        uint64_t v21 = v8->n128_i64[1];
        unint64_t v23 = v21 - v8->n128_u64[0];
        unint64_t v24 = v8[1].n128_u64[0];
        BOOL v13 = v20 == v23;
        BOOL v25 = v20 < v23;
        if (v13) {
          BOOL v25 = v19[1].n128_u64[0] < v24;
        }
        if (v25)
        {
          result.n128_u64[0] = v8[1].n128_u64[1];
          do
          {
            BOOL v26 = v8;
            uint64_t v8 = v19;
            __n128 v27 = v19[1];
            *BOOL v26 = *v19;
            v26[1] = v27;
            if (!v18) {
              break;
            }
            unint64_t v18 = (v18 - 1) >> 1;
            unint64_t v19 = &a1[2 * v18];
            unint64_t v28 = v19->n128_u64[1] - v19->n128_u64[0];
            BOOL v13 = v28 == v23;
            BOOL v29 = v28 < v23;
            if (v13) {
              BOOL v29 = v19[1].n128_u64[0] < v24;
            }
          }
          while (v29);
          v8->n128_u64[0] = v22;
          v8->n128_u64[1] = v21;
          v8[1].n128_u64[0] = v24;
          v8[1].n128_u64[1] = result.n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t sub_10909B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_1090D9C(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_CE9980((uint64_t)&v24, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v25;
      *(uint64x2_t *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v24 = v17;
      long long v25 = v16;
      long long v19 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v26;
      long long v26 = v19;
      uint64_t v20 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v27;
      uint64_t v27 = v20;
      *(void *)&long long v16 = v28;
      long long v21 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = v28;
      long long v28 = v21;
      unint64_t v22 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v29;
      BOOL v29 = v22;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v16)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v24 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v25, (float)(unint64_t)v21)));
      BYTE8(v25) = 0;
      if (v22) {
        free(v22);
      }
      return 1;
    }
  }
  return result;
}

void sub_1090C3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1090C50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1090C64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1090C78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1090C8C@<X0>(int32x2_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_F953E4((uint64_t)a1, a2);
  if (result == -1)
  {
    int32x2_t v12 = a1[5];
    int32x2_t v11 = a1[6];
    if (*(void *)&v11 - *(void *)&v12 >= 0x1FFFFFFFFFFFFFFFuLL)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "insert overflow");
    }
    int32x2_t v13 = a1[9];
    if (*(void *)&v12
      && (int32x2_t v14 = vceq_s32(a1[4], *(int32x2_t *)(*(void *)&v13 + 8 * v7)), (v14.i32[0] & v14.i32[1] & 1) != 0))
    {
      a1[5] = (int32x2_t)(*(void *)&v12 - 1);
    }
    else
    {
      a1[6] = (int32x2_t)(*(void *)&v11 + 1);
    }
    *(void *)(*(void *)&v13 + 8 * v7) = *a2;
    int32x2_t v9 = a1[9];
    uint64_t v10 = *(void *)&v9 + 8 * v7;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    int32x2_t v9 = a1[9];
    uint64_t v10 = *(void *)&v9 + 8 * result;
  }
  uint64_t v15 = *(void *)&v9 + 8 * *(void *)&a1[7];
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v15;
  *(unsigned char *)(a3 + 24) = v8;
  return result;
}

void sub_1090D88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1090D9C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_CE9980((uint64_t)&v16, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v17;
    *(uint64x2_t *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v16 = v9;
    long long v17 = v8;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v18;
    long long v18 = v11;
    uint64_t v12 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v19;
    uint64_t v19 = v12;
    *(void *)&long long v8 = v20;
    long long v13 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v20;
    long long v20 = v13;
    int32x2_t v14 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v21;
    long long v21 = v14;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v17, (float)(unint64_t)v13)));
    BYTE8(v17) = 0;
    if (v14) {
      free(v14);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_1090ED4()
{
  unk_25FDE07 = 16641;
  word_25FDDF0 = 65;
  byte_25FDE1F = 1;
  byte_25FDE09 = 0;
}

char *sub_1090EFC(uint64_t a1, const void **a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  if ((unint64_t)v3 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_1091CE4((char **)a1, (uint64_t)a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    *unint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    unint64_t v5 = *a2;
    BOOL v4 = a2[1];
    int64_t v6 = v4 - (unsigned char *)*a2;
    if (v4 != *a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      unint64_t v7 = (char *)operator new(v6);
      *unint64_t v3 = v7;
      v3[1] = v7;
      long long v8 = &v7[4 * (v6 >> 2)];
      v3[2] = v8;
      memcpy(v7, v5, v6);
      v3[1] = v8;
    }
    uint64_t result = (char *)(v3 + 3);
    *(void *)(a1 + 8) = v3 + 3;
    *(void *)(a1 + 8) = v3 + 3;
  }
  return result;
}

void sub_1090FD0(_Unwind_Exception *exception_object)
{
  BOOL v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1090FF0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  uint64_t v5 = 0x7FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v6 = sub_1091064(a2, v2);
    if (v6 < v5) {
      uint64_t v5 = v6;
    }
    v2 += 3;
  }
  while (v2 != v3);
  return v5;
}

uint64_t sub_1091064(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  if (*(char **)a1 == v3) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  v76[0] = 0;
  v76[1] = 0;
  __n128 v77 = 0;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (char *)v2) >> 2) - 0x5555555555555555 * ((v6 - v5) >> 2);
  unint64_t v9 = v8 + 1;
  if (v8 == -1)
  {
    long long v10 = 0;
  }
  else
  {
    if (v9 >= 0x1555555555555556) {
      sub_2E00();
    }
    long long v10 = (char *)operator new(12 * v9);
    v76[0] = v10;
    v76[1] = v10;
    __n128 v77 = &v10[12 * v9];
  }
  sub_46C6C((uint64_t)v76, (uint64_t)v10, (char *)v2, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - (char *)v2) >> 2));
  sub_1091A3C((char **)v76, (uint64_t)v76[1], a2[1], a2[1], *a2, *a2, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  sub_30C0C((char **)v76, *(uint64_t **)a1);
  long long v78 = *(_OWORD *)v76;
  double v79 = v77;
  v76[0] = 0;
  v76[1] = 0;
  __n128 v77 = 0;
  sub_46968(&__p, (uint64_t)&v78, 1uLL);
  if ((void)v78)
  {
    *((void *)&v78 + 1) = v78;
    operator delete((void *)v78);
  }
  double v63 = sub_10917D0((const void ***)&__p);
  uint64_t v12 = *(uint64_t **)a1;
  long long v13 = *(unsigned int **)(a1 + 8);
  double v14 = 0.0;
  if (v12 != (uint64_t *)v13)
  {
    uint64_t v15 = (unsigned int *)v12 + 3;
    if ((unsigned int *)((char *)v12 + 12) != v13)
    {
      float64x2_t v68 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      float64x2_t v70 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v66 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v64 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      HIDWORD(v16) = 1096306543;
      do
      {
        LODWORD(v16) = *(v15 - 2);
        long double v17 = exp(3.14159265 - (double)*(unint64_t *)&v16 * 6.28318531 / 4294967300.0);
        *(double *)&unint64_t v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795;
        long double v19 = *(double *)&v18 * 0.0174532925;
        unsigned int v20 = *(v15 - 3);
        LODWORD(v18) = v15[1];
        long double v21 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
        long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
        v23.i64[0] = v20;
        v23.i64[1] = *v15;
        float64x2_t v24 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v70), v66), v68), v64);
        double v72 = vsubq_f64(v24, (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1)).f64[0];
        long double v25 = sin((v19 - v22) * 0.5);
        long double v26 = v25 * v25;
        double v27 = cos(v19);
        long double v28 = v27 * cos(v22);
        long double v29 = sin(0.5 * v72);
        long double v30 = atan2(sqrt(v26 + v28 * (v29 * v29)), sqrt(1.0 - (v26 + v28 * (v29 * v29))));
        double v16 = (v30 + v30) * 6372797.56;
        double v14 = v14 + v16;
        v15 += 3;
      }
      while (v15 != v13);
    }
  }
  uint64_t v31 = *a2;
  uint64_t v32 = (unsigned int *)a2[1];
  if ((unsigned int *)v31 == v32)
  {
    double v34 = 0.0;
    double v50 = 0.0;
    double v51 = v63;
    if (v63 <= 2.22044605e-16) {
      goto LABEL_27;
    }
  }
  else
  {
    long long v33 = (unsigned int *)(v31 + 12);
    double v34 = 0.0;
    if ((unsigned int *)(v31 + 12) != v32)
    {
      float64x2_t v69 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      float64x2_t v71 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v67 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v65 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      HIDWORD(v35) = 1096306543;
      do
      {
        LODWORD(v35) = *(v33 - 2);
        long double v36 = exp(3.14159265 - (double)*(unint64_t *)&v35 * 6.28318531 / 4294967300.0);
        *(double *)&unint64_t v37 = atan((v36 - 1.0 / v36) * 0.5) * 57.2957795;
        long double v38 = *(double *)&v37 * 0.0174532925;
        unsigned int v39 = *(v33 - 3);
        LODWORD(v37) = v33[1];
        long double v40 = exp(3.14159265 - (double)v37 * 6.28318531 / 4294967300.0);
        long double v41 = atan((v40 - 1.0 / v40) * 0.5) * 57.2957795 * 0.0174532925;
        v42.i64[0] = v39;
        v42.i64[1] = *v33;
        float64x2_t v43 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v42), v71), v67), v69), v65);
        double v73 = vsubq_f64(v43, (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1)).f64[0];
        long double v44 = sin((v38 - v41) * 0.5);
        long double v45 = v44 * v44;
        double v46 = cos(v38);
        long double v47 = v46 * cos(v41);
        long double v48 = sin(0.5 * v73);
        long double v49 = atan2(sqrt(v45 + v47 * (v48 * v48)), sqrt(1.0 - (v45 + v47 * (v48 * v48))));
        double v35 = (v49 + v49) * 6372797.56;
        double v34 = v34 + v35;
        v33 += 3;
      }
      while (v33 != v32);
    }
    double v50 = 0.0;
    double v51 = v63;
    if (v63 <= 2.22044605e-16) {
      goto LABEL_27;
    }
  }
  double v50 = v51 / ((v14 + v34) * 0.5) * 100.0;
  if (v50 >= 0.0)
  {
    if (v50 >= 4.50359963e15)
    {
      char v54 = 0;
      double v53 = v51 / ((v14 + v34) * 0.5) * 100.0;
      goto LABEL_28;
    }
LABEL_27:
    char v54 = 0;
    double v53 = (double)(((uint64_t)(v50 + v50) + 1) >> 1);
    goto LABEL_28;
  }
  if (v50 <= -4.50359963e15)
  {
    char v54 = 1;
    double v53 = v51 / ((v14 + v34) * 0.5) * 100.0;
  }
  else
  {
    uint64_t v52 = (uint64_t)(v50 + v50);
    if (v52 >= 1) {
      --v52;
    }
    double v53 = (double)(v52 >> 1);
    char v54 = 1;
  }
LABEL_28:
  if (v53 < 9.22337204e18)
  {
    if (v54)
    {
      if (v50 <= -4.50359963e15) {
        goto LABEL_39;
      }
      uint64_t v55 = (uint64_t)(v50 + v50);
      if (v55 >= 1) {
        --v55;
      }
    }
    else
    {
      if (v50 >= 4.50359963e15) {
        goto LABEL_39;
      }
      uint64_t v55 = (uint64_t)(v50 + v50) + 1;
    }
    double v50 = (double)(v55 >> 1);
LABEL_39:
    uint64_t v11 = (uint64_t)v50;
    uint64_t v56 = (char *)__p;
    if (__p) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  uint64_t v11 = 0x7FFFFFFFFFFFFFFELL;
  uint64_t v56 = (char *)__p;
  if (__p)
  {
LABEL_40:
    __n128 v57 = v75;
    unint64_t v58 = v56;
    if (v75 != v56)
    {
      uint64_t v59 = v75;
      do
      {
        unint64_t v61 = (void *)*((void *)v59 - 3);
        v59 -= 24;
        uint64_t v60 = v61;
        if (v61)
        {
          *((void *)v57 - 2) = v60;
          operator delete(v60);
        }
        __n128 v57 = v59;
      }
      while (v59 != v56);
      unint64_t v58 = __p;
    }
    __n128 v75 = v56;
    operator delete(v58);
  }
LABEL_47:
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  return v11;
}

void sub_109174C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a34 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_10917D0(const void ***a1)
{
  uint64_t v2 = **a1;
  uint64_t v1 = (*a1)[1];
  int64_t v3 = v1 - v2;
  if (v1 == v2)
  {
    double v16 = 0.0;
  }
  else
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 2);
    if (v4 >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v5 = (unsigned int *)operator new(v3);
    memcpy(v5, v2, v3);
    uint64_t v6 = (char *)&v5[v3 >> 2];
    unsigned int v8 = *((_DWORD *)v6 - 3);
    unsigned int v7 = *((_DWORD *)v6 - 2);
    unint64_t v9 = v5 + 1;
    double v10 = 0.0;
    do
    {
      double v19 = v10;
      long double v11 = exp(3.14159265 - (double)v7 * 6.28318531 / 4294967300.0);
      long double v12 = atan((v11 - 1.0 / v11) * 0.5) * 57.2957795;
      long double v13 = cos(v12 * 3.14159265 / 180.0) * (((double)v8 * 360.0 / 4294967300.0 + -180.0) * 111320.119);
      long double v18 = v12 * 111320.119;
      unsigned int v7 = *v9;
      long double v14 = exp(3.14159265 - (double)*v9 * 6.28318531 / 4294967300.0);
      long double v15 = atan((v14 - 1.0 / v14) * 0.5) * 57.2957795;
      unsigned int v8 = *(v9 - 1);
      double v10 = v19
          + (v18 - v15 * 111320.119)
          * (v13 + cos(v15 * 3.14159265 / 180.0) * (((double)v8 * 360.0 / 4294967300.0 + -180.0) * 111320.119));
      v9 += 3;
      --v4;
    }
    while (v4);
    double v16 = v10 * 0.5;
    operator delete(v5);
  }
  return fabs(v16);
}

void sub_1091A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1091A3C(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7 = *a1;
  uint64_t v8 = (a2 - (uint64_t)*a1) / 12;
  unint64_t v9 = &(*a1)[12 * v8];
  if (a7 < 1) {
    return v9;
  }
  uint64_t v11 = a4;
  long double v14 = a1[1];
  long double v13 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 2)) >= a7)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v14 - v9) >> 2)) >= a7)
    {
      uint64_t v20 = a4 - 12 * a7;
      long double v21 = a1[1];
    }
    else
    {
      uint64_t v20 = a4 - 4 * ((v14 - v9) >> 2);
      long double v21 = a1[1];
      if (v20 != a6)
      {
        uint64_t v22 = a4 - 4 * ((v14 - v9) >> 2);
        uint64x2_t v23 = a1[1];
        do
        {
          uint64_t v24 = *(void *)(v22 - 12);
          v22 -= 12;
          *((_DWORD *)v23 + 2) = *(_DWORD *)(v22 + 8);
          *(void *)uint64x2_t v23 = v24;
          v23 += 12;
          v21 += 12;
        }
        while (v22 != a6);
      }
      a1[1] = v21;
      if (v14 - v9 < 1) {
        return v9;
      }
    }
    long double v25 = &v9[12 * a7];
    unint64_t v26 = (unint64_t)&v21[-12 * a7];
    double v27 = v21;
    if (v26 < (unint64_t)v14)
    {
      double v27 = v21;
      do
      {
        uint64_t v28 = *(void *)v26;
        *((_DWORD *)v27 + 2) = *(_DWORD *)(v26 + 8);
        *(void *)double v27 = v28;
        v27 += 12;
        v26 += 12;
      }
      while (v26 < (unint64_t)v14);
    }
    a1[1] = v27;
    if (v21 != v25) {
      memmove(&v9[12 * a7], v9, v21 - v25);
    }
    if (v20 != v11)
    {
      long double v29 = v9;
      do
      {
        uint64_t v30 = *(void *)(v11 - 12);
        v11 -= 12;
        *((_DWORD *)v29 + 2) = *(_DWORD *)(v11 + 8);
        *(void *)long double v29 = v30;
        v29 += 12;
      }
      while (v11 != v20);
    }
    return v9;
  }
  unint64_t v15 = a7 - 0x5555555555555555 * ((v14 - v7) >> 2);
  if (v15 > 0x1555555555555555) {
    sub_2E00();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v7) >> 2);
  uint64_t v17 = 2 * v16;
  if (2 * v16 <= v15) {
    uint64_t v17 = v15;
  }
  if (v16 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v18 = 0x1555555555555555;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18)
  {
    if (v18 > 0x1555555555555555) {
      sub_188D718();
    }
    double v19 = (char *)operator new(12 * v18);
  }
  else
  {
    double v19 = 0;
  }
  uint64_t v31 = &v19[12 * v8];
  uint64_t v32 = 12 * a7;
  long long v33 = &v31[12 * a7];
  double v34 = (uint64_t *)(v11 - 12);
  double v35 = v31;
  do
  {
    uint64_t v36 = *v34;
    *((_DWORD *)v35 + 2) = *((_DWORD *)v34 + 2);
    *(void *)double v35 = v36;
    v35 += 12;
    double v34 = (uint64_t *)((char *)v34 - 12);
    v32 -= 12;
  }
  while (v32);
  uint64_t v37 = 12 * v18;
  long double v38 = *a1;
  unsigned int v39 = v31;
  if (*a1 != v9)
  {
    long double v40 = v9;
    unsigned int v39 = v31;
    do
    {
      uint64_t v41 = *(void *)(v40 - 12);
      v40 -= 12;
      int v42 = *((_DWORD *)v40 + 2);
      *(void *)(v39 - 12) = v41;
      v39 -= 12;
      *((_DWORD *)v39 + 2) = v42;
    }
    while (v40 != v38);
    long double v14 = a1[1];
  }
  float64x2_t v43 = &v19[v37];
  if (v14 != v9) {
    memmove(v33, v9, v14 - v9);
  }
  long double v44 = *a1;
  *a1 = v39;
  a1[1] = &v33[v14 - v9];
  a1[2] = v43;
  if (v44) {
    operator delete(v44);
  }
  return v31;
}

char *sub_1091CE4(char **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  int64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  double v10 = &v9[24 * v5];
  uint64_t v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)double v10 = 0;
  long double v12 = *(const void **)a2;
  int64_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    long double v14 = (char *)operator new(v13);
    *(void *)double v10 = v14;
    *((void *)v10 + 1) = v14;
    unint64_t v15 = &v14[4 * (v13 >> 2)];
    *((void *)v10 + 2) = v15;
    memcpy(v14, v12, v13);
    *((void *)v10 + 1) = v15;
  }
  unint64_t v16 = v10 + 24;
  uint64_t v24 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v11;
  }
  else
  {
    do
    {
      uint64_t v17 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v18 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v18;
      v10 -= 24;
      *((void *)v17 - 1) = *((void *)v3 + 2);
      *(void *)int64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    double v19 = *a1;
    int64_t v3 = a1[1];
    unint64_t v16 = v24;
    *a1 = v10;
    a1[1] = v24;
    a1[2] = v11;
    if (v3 != v19)
    {
      uint64_t v20 = v3;
      do
      {
        uint64_t v22 = (void *)*((void *)v20 - 3);
        v20 -= 24;
        long double v21 = v22;
        if (v22)
        {
          *((void *)v3 - 2) = v21;
          operator delete(v21);
        }
        int64_t v3 = v20;
      }
      while (v20 != v19);
      int64_t v3 = v19;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v16;
}

void sub_1091ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_2A6E80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1091EFC(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_3BD6C8((uint64_t)&v9, a1);
  sub_3BD6C8((uint64_t)&v4, (long long *)((char *)a1 + 72));
  sub_109949C(&v9, &v4, a2);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    unint64_t v6 = v5;
    operator delete(v5);
  }
  if (v12)
  {
    int64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_1091F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_1091FB4(uint64_t a1, void *a2)
{
  *(void *)a1 = sub_3750CC(a2);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

uint64_t sub_1091FF4(uint64_t a1, char *a2)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  long long v4 = (void **)(a1 + 8);
  if (v5 - v6 == -80)
  {
    while (v5 != v6)
    {
      unsigned int v7 = *(void **)(v5 - 8);
      if (v7) {
        free(v7);
      }
      v5 -= 80;
    }
    *(void *)(a1 + 16) = v6;
  }
  else
  {
    sub_1099550(v4, 1uLL);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  *(void *)(v6 - 16) = 0x1000000000000;
  unint64_t v8 = (const double *)(v6 - 16);
  uint64_t v9 = v6 - 80;
  *(unsigned char *)(v6 - 55) = 1;
  double v10 = (char *)malloc_type_malloc(8 * *(void *)(v6 - 24), 0x100004087442A64uLL);
  *(void *)(v6 - 8) = v10;
  uint64_t v11 = *(void *)(v6 - 24);
  if (!v11) {
    goto LABEL_21;
  }
  unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v12 >= 0xF)
  {
    BOOL v14 = (unint64_t)v10 >= v6 - 8 || v8 >= (const double *)&v10[8 * v11];
    int64_t v13 = v10;
    if (v14)
    {
      unint64_t v15 = v12 + 1;
      int64_t v13 = &v10[8 * (v15 & 0x3FFFFFFFFFFFFFFCLL)];
      float64x2_t v16 = vld1q_dup_f64(v8);
      uint64_t v17 = (float64x2_t *)(v10 + 16);
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v17[-1] = v16;
        *uint64_t v17 = v16;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    int64_t v13 = v10;
  }
  double v19 = &v10[8 * v11];
  do
  {
    *(double *)int64_t v13 = *v8;
    v13 += 8;
  }
  while (v13 != v19);
LABEL_21:
  unint64_t v20 = sub_45FD04((uint64_t)a2);
  if (!v20 || *(unsigned char *)(v6 - 56)) {
    sub_F572DC(v6 - 80);
  }
  unint64_t v21 = *(void *)(v6 - 32);
  if (v20 > v21) {
    sub_F57008(v6 - 80, v20 - v21);
  }
  sub_460358(a2, (uint64_t)&v49);
  sub_3BD6C8((uint64_t)&v42, &v49);
  sub_3BD6C8((uint64_t)&v35, &v54);
  while (1)
  {
    if (v47 == v48 || __p == v41)
    {
      if ((v47 == v48) == (__p == v41)) {
        break;
      }
      goto LABEL_47;
    }
    uint64x2_t v23 = v42;
    if (v44 != v37) {
      goto LABEL_48;
    }
    if (v42)
    {
      unint64_t v24 = v43;
      int v25 = v24 < sub_46C760(v42);
      unint64_t v26 = v35;
      if (!v35) {
        goto LABEL_45;
      }
    }
    else
    {
      int v25 = 0;
      unint64_t v26 = v35;
      if (!v35)
      {
LABEL_45:
        int v29 = 0;
        goto LABEL_46;
      }
    }
    unint64_t v27 = v36;
    unint64_t v28 = sub_46C760(v26);
    int v29 = v27 < v28;
    if (v27 < v28) {
      int v30 = v25;
    }
    else {
      int v30 = 0;
    }
    if (v30 == 1)
    {
      uint64_t v31 = sub_46C8EC(v42, v43);
      if (v31 == sub_46C8EC(v35, v36)) {
        break;
      }
      goto LABEL_47;
    }
LABEL_46:
    if (v25 == v29) {
      break;
    }
LABEL_47:
    uint64x2_t v23 = v42;
LABEL_48:
    uint64_t v34 = *(void *)(sub_46C8EC(v23, v43) + 32);
    sub_F57008(v9, 1);
    if (sub_F57414(v9, &v34) == -1) {
      sub_F57530(v9, &v34, v32, v59);
    }
    sub_39EBB4(&v42);
  }
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    unsigned int v39 = v38;
    operator delete(v38);
  }
  if (v47)
  {
    long double v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    double v46 = v45;
    operator delete(v45);
  }
  if (v57)
  {
    unint64_t v58 = v57;
    operator delete(v57);
  }
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v52)
  {
    double v53 = v52;
    operator delete(v52);
  }
  if (v50)
  {
    double v51 = v50;
    operator delete(v50);
  }
  return sub_3CB7EC((char **)(a1 + 32), (uint64_t)a2);
}

void sub_1092320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

uint64_t sub_109234C(uint64_t a1, char *a2, void *a3)
{
  sub_460358(a2, (uint64_t)&v30);
  sub_1091EFC(&v30, (uint64_t)&v40);
  if (__p)
  {
    unsigned int v39 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    double v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  sub_3BD6C8((uint64_t)&v30, &v40);
  sub_3BD6C8((uint64_t)&v23, &v45);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    unint64_t v8 = v28;
    if (v34 == v35 || v28 == v29)
    {
      int v10 = (v34 == v35) ^ (v28 == v29);
      goto LABEL_32;
    }
    if (v31 == v25) {
      break;
    }
    if (v6 >= *a3) {
      goto LABEL_39;
    }
LABEL_34:
    uint64_t v19 = sub_46CCC8((void *)v30, *((unint64_t *)&v30 + 1), v5);
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)(a1 + 16);
    if (v20 != v21)
    {
      while (1)
      {
        uint64_t v50 = *(void *)(sub_46C8EC((void *)v30, *((uint64_t *)&v30 + 1)) + 32);
        if (sub_F57414(v20, &v50) != -1) {
          break;
        }
        v20 += 80;
        if (v20 == v21) {
          goto LABEL_11;
        }
      }
      v7 += v19;
    }
LABEL_11:
    v6 += v19;
    sub_39EBB4((void **)&v30);
  }
  if ((void)v30)
  {
    unint64_t v11 = *((void *)&v30 + 1);
    BOOL v12 = v11 < sub_46C760((void *)v30);
    int64_t v13 = v23;
    if (v23) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v12 = 0;
    int64_t v13 = v23;
    if (v23)
    {
LABEL_21:
      unint64_t v14 = v24;
      unint64_t v15 = sub_46C760(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_46C8EC((void *)v30, *((uint64_t *)&v30 + 1));
        if (v18 == sub_46C8EC(v23, v24)) {
          goto LABEL_38;
        }
        goto LABEL_33;
      }
      goto LABEL_31;
    }
  }
  BOOL v16 = 0;
LABEL_31:
  int v10 = v12 ^ v16;
LABEL_32:
  if ((v10 ^ 1)) {
    goto LABEL_38;
  }
LABEL_33:
  if (v6 < *a3) {
    goto LABEL_34;
  }
LABEL_38:
  unint64_t v8 = v28;
LABEL_39:
  if (v8)
  {
    int v29 = v8;
    operator delete(v8);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v34)
  {
    double v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    long double v47 = v46;
    operator delete(v46);
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
  return v7;
}

void sub_10925CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10925E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_109260C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v10 = *(_OWORD *)a1;
  uint64_t v11 = *(void *)(a1 + 16);
  *(_OWORD *)BOOL v12 = *(_OWORD *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)unint64_t v14 = *(_OWORD *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v6 = v4;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)__n128 __p = *(_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  sub_39ECCC(a3, &v10);
  sub_460F98(a3 + 72, &v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_10926F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = (void *)v17[6];
  if (v19)
  {
    v17[7] = v19;
    operator delete(v19);
    uint64_t v20 = (void *)v17[3];
    if (!v20)
    {
LABEL_3:
      sub_2FC938(&a9);
      sub_39EB70(&a17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v20 = (void *)v17[3];
    if (!v20) {
      goto LABEL_3;
    }
  }
  v17[4] = v20;
  operator delete(v20);
  sub_2FC938(&a9);
  sub_39EB70(&a17);
  _Unwind_Resume(a1);
}

void sub_1092750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void *sub_109276C(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  int64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  long long v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10927D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_39ECCC(a1, (long long *)a2);
  sub_39ECCC(v6 + 72, (long long *)(a2 + 72));
  long long v7 = *(_OWORD *)(a2 + 144);
  long long v8 = *(_OWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 160) = v8;
  sub_39ECCC(a1 + 184, (long long *)a3);
  sub_39ECCC(a1 + 256, (long long *)(a3 + 72));
  long long v9 = *(_OWORD *)(a3 + 144);
  long long v10 = *(_OWORD *)(a3 + 160);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a3 + 176);
  *(_OWORD *)(a1 + 328) = v9;
  *(_OWORD *)(a1 + 344) = v10;
  return a1;
}

void sub_1092850(_Unwind_Exception *a1)
{
  int64_t v3 = (void *)v1[29];
  if (v3)
  {
    v1[30] = v3;
    operator delete(v3);
    long long v4 = (void *)v1[26];
    if (!v4)
    {
LABEL_3:
      sub_39EB0C(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v4 = (void *)v1[26];
    if (!v4) {
      goto LABEL_3;
    }
  }
  v1[27] = v4;
  operator delete(v4);
  sub_39EB0C(v1);
  _Unwind_Resume(a1);
}

void sub_109289C(_Unwind_Exception *a1)
{
  sub_39EB0C(v1);
  _Unwind_Resume(a1);
}

void sub_10928B0(_Unwind_Exception *exception_object)
{
  int64_t v3 = (void *)v1[6];
  if (v3)
  {
    v1[7] = v3;
    operator delete(v3);
    long long v4 = (void *)v1[3];
    if (!v4) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v4 = (void *)v1[3];
    if (!v4) {
      goto LABEL_3;
    }
  }
  v1[4] = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void sub_10928EC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; i -= 80)
  {
    long long v4 = *(void **)(i - 8);
    if (v4) {
      free(v4);
    }
  }
  a1[2] = v2;
  a1[5] = a1[4];
}

uint64_t sub_1092944(uint64_t a1, char *a2)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  long long v4 = (void **)(a1 + 8);
  if (v5 - v6 == -80)
  {
    while (v5 != v6)
    {
      long long v7 = *(void **)(v5 - 8);
      if (v7) {
        free(v7);
      }
      v5 -= 80;
    }
    *(void *)(a1 + 16) = v6;
  }
  else
  {
    sub_1099550(v4, 1uLL);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  *(void *)(v6 - 16) = 0x1000000000000;
  long long v8 = (const double *)(v6 - 16);
  uint64_t v9 = v6 - 80;
  *(unsigned char *)(v6 - 55) = 1;
  long long v10 = (char *)malloc_type_malloc(8 * *(void *)(v6 - 24), 0x100004087442A64uLL);
  *(void *)(v6 - 8) = v10;
  uint64_t v11 = *(void *)(v6 - 24);
  if (!v11) {
    goto LABEL_21;
  }
  unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v12 >= 0xF)
  {
    BOOL v14 = (unint64_t)v10 >= v6 - 8 || v8 >= (const double *)&v10[8 * v11];
    uint64_t v13 = v10;
    if (v14)
    {
      unint64_t v15 = v12 + 1;
      uint64_t v13 = &v10[8 * (v15 & 0x3FFFFFFFFFFFFFFCLL)];
      float64x2_t v16 = vld1q_dup_f64(v8);
      uint64_t v17 = (float64x2_t *)(v10 + 16);
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v17[-1] = v16;
        *uint64_t v17 = v16;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t v13 = v10;
  }
  uint64_t v19 = &v10[8 * v11];
  do
  {
    *(double *)uint64_t v13 = *v8;
    v13 += 8;
  }
  while (v13 != v19);
LABEL_21:
  unint64_t v20 = sub_45FD04((uint64_t)a2);
  if (!v20 || *(unsigned char *)(v6 - 56)) {
    sub_F572DC(v6 - 80);
  }
  unint64_t v21 = *(void *)(v6 - 32);
  if (v20 > v21) {
    sub_F57008(v6 - 80, v20 - v21);
  }
  sub_45EB40(a2, (uint64_t)&v49);
  sub_39ECCC((uint64_t)&v42, &v49);
  sub_39ECCC((uint64_t)&v35, &v54);
  while (1)
  {
    if (v47 == v48 || __p == v41)
    {
      if ((v47 == v48) == (__p == v41)) {
        break;
      }
      goto LABEL_47;
    }
    uint64x2_t v23 = v42;
    if (v44 != v37) {
      goto LABEL_48;
    }
    if (v42)
    {
      unint64_t v24 = v43;
      int v25 = v24 < sub_46C760(v42);
      unint64_t v26 = v35;
      if (!v35) {
        goto LABEL_45;
      }
    }
    else
    {
      int v25 = 0;
      unint64_t v26 = v35;
      if (!v35)
      {
LABEL_45:
        int v29 = 0;
        goto LABEL_46;
      }
    }
    unint64_t v27 = v36;
    unint64_t v28 = sub_46C760(v26);
    int v29 = v27 < v28;
    if (v27 < v28) {
      int v30 = v25;
    }
    else {
      int v30 = 0;
    }
    if (v30 == 1)
    {
      uint64_t v31 = sub_46C8EC(v42, v43);
      if (v31 == sub_46C8EC(v35, v36)) {
        break;
      }
      goto LABEL_47;
    }
LABEL_46:
    if (v25 == v29) {
      break;
    }
LABEL_47:
    uint64x2_t v23 = v42;
LABEL_48:
    uint64_t v34 = *(void *)(sub_46C8EC(v23, v43) + 32);
    sub_F57008(v9, 1);
    if (sub_F57414(v9, &v34) == -1) {
      sub_F57530(v9, &v34, v32, v59);
    }
    sub_39EBB4(&v42);
  }
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    unsigned int v39 = v38;
    operator delete(v38);
  }
  if (v47)
  {
    long double v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    double v46 = v45;
    operator delete(v45);
  }
  if (v57)
  {
    unint64_t v58 = v57;
    operator delete(v57);
  }
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v52)
  {
    double v53 = v52;
    operator delete(v52);
  }
  if (v50)
  {
    double v51 = v50;
    operator delete(v50);
  }
  return sub_3CB7EC((char **)(a1 + 32), (uint64_t)a2);
}

void sub_1092C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

uint64_t sub_1092C9C(uint64_t a1, char *a2)
{
  sub_45E97C(a2, (uint64_t)&v53);
  sub_45F294(a2, 0, (uint64_t)&v61);
  sub_109260C((uint64_t)&v53, (uint64_t)&v61, (uint64_t)&v72);
  if (__p)
  {
    float64x2_t v66 = __p;
    operator delete(__p);
  }
  if (v62)
  {
    double v63 = v62;
    operator delete(v62);
  }
  if (v56)
  {
    __n128 v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  sub_45EA74(a2, (uint64_t)&v53);
  sub_45F394(a2, 0, (uint64_t)&v39);
  sub_109260C((uint64_t)&v53, (uint64_t)&v39, (uint64_t)&v61);
  if (v44)
  {
    long long v45 = v44;
    operator delete(v44);
  }
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
  if (v56)
  {
    __n128 v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  sub_1099008((uint64_t)&v53, &v72, &v61);
  sub_39ECCC((uint64_t)&v39, &v53);
  sub_460F98((uint64_t)&v47, v58);
  sub_39ECCC((uint64_t)&v27, v59);
  sub_460F98((uint64_t)&v34, v60);
  uint64_t v4 = 0;
  while (1)
  {
    if (v45 == v46 || v32 == v33)
    {
      if ((v45 == v46) == (v32 == v33)) {
        break;
      }
      goto LABEL_37;
    }
    uint64_t v6 = v39;
    if (v41 != v29) {
      goto LABEL_38;
    }
    if (v39)
    {
      unint64_t v7 = v40;
      int v8 = v7 < sub_46C760(v39);
      uint64_t v9 = v27;
      if (!v27) {
        goto LABEL_35;
      }
    }
    else
    {
      int v8 = 0;
      uint64_t v9 = v27;
      if (!v27)
      {
LABEL_35:
        int v12 = 0;
        goto LABEL_36;
      }
    }
    unint64_t v10 = v28;
    unint64_t v11 = sub_46C760(v9);
    int v12 = v10 < v11;
    if (v10 < v11) {
      int v13 = v8;
    }
    else {
      int v13 = 0;
    }
    if (v13 == 1)
    {
      uint64_t v14 = sub_46C8EC(v39, v40);
      if (v14 == sub_46C8EC(v27, v28)) {
        break;
      }
      goto LABEL_37;
    }
LABEL_36:
    if (v8 == v12) {
      break;
    }
LABEL_37:
    uint64_t v6 = v39;
LABEL_38:
    uint64_t v15 = sub_46C8EC(v6, v40);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = *(void *)(a1 + 16);
    if (v16 != v17)
    {
      unint64_t v18 = *(void *)(v15 + 32);
LABEL_41:
      uint64_t v19 = 0;
      for (unint64_t i = (0x2127599BF4325C37
               * (((v18 >> 16) & 0xFFFF0000 | (v18 << 32) | ((v18 & 0xFF000000000000) == 0)) ^ (((v18 >> 16) & 0xFFFF0000 | (v18 << 32)) >> 23))) ^ ((0x2127599BF4325C37 * (((v18 >> 16) & 0xFFFF0000 | (v18 << 32) | ((v18 & 0xFF000000000000) == 0)) ^ (((v18 >> 16) & 0xFFFF0000 | (v18 << 32)) >> 23))) >> 47);
            ;
            unint64_t i = v19 + v21)
      {
        uint64_t v21 = i & (*(void *)(v16 + 56) - 1);
        unint64_t v22 = *(void *)(*(void *)(v16 + 72) + 8 * v21);
        if (__PAIR64__(*(unsigned __int16 *)(v16 + 68), *(_DWORD *)(v16 + 64)) == __PAIR64__(WORD2(v22), v22)
          && (HIWORD(v22) & 1) != (*(unsigned char *)(v16 + 70) == 0))
        {
LABEL_40:
          v16 += 80;
          if (v16 == v17) {
            goto LABEL_53;
          }
          goto LABEL_41;
        }
        if ((!*(void *)(v16 + 40)
           || __PAIR64__(*(unsigned __int16 *)(v16 + 36), *(_DWORD *)(v16 + 32)) != __PAIR64__(WORD2(v22), v22)
           || (HIWORD(v22) & 1) == (*(unsigned char *)(v16 + 38) == 0))
          && v18 == v22
          && WORD2(v18) == WORD2(v22)
          && ((v18 & 0xFF000000000000) == 0) != (HIWORD(v22) & 1))
        {
          break;
        }
        ++v19;
      }
      if (v21 == -1) {
        goto LABEL_40;
      }
      uint64_t v4 = (*v47 + v4);
    }
LABEL_53:
    sub_39EBB4(&v39);
    unint64_t v23 = v48;
    unint64_t v24 = v47 + 1;
    unint64_t v25 = ((v52 - (unsigned char *)v51) >> 3) - 1;
    ++v47;
    if (v48 < v25)
    {
      do
      {
        if (v24 != *((_DWORD **)v51 + v23)) {
          break;
        }
        unint64_t v48 = v23 + 1;
        unint64_t v24 = (_DWORD *)*((void *)v49 + v23 + 1);
        long double v47 = v24;
        ++v23;
      }
      while (v25 != v48);
    }
  }
  if (v37)
  {
    long double v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (v45)
  {
    double v46 = v45;
    operator delete(v45);
  }
  if (v42)
  {
    unint64_t v43 = v42;
    operator delete(v42);
  }
  sub_10990C8(&v53);
  if (v70)
  {
    float64x2_t v71 = v70;
    operator delete(v70);
  }
  if (v68)
  {
    float64x2_t v69 = v68;
    operator delete(v68);
  }
  if (v66)
  {
    float64x2_t v67 = v66;
    operator delete(v66);
  }
  if (v63)
  {
    float64x2_t v64 = v63;
    operator delete(v63);
  }
  if (v79)
  {
    double v80 = v79;
    operator delete(v79);
  }
  if (v77)
  {
    long long v78 = v77;
    operator delete(v77);
  }
  if (v75)
  {
    __n128 v76 = v75;
    operator delete(v75);
  }
  if (v73)
  {
    BOOL v74 = v73;
    operator delete(v73);
  }
  return v4;
}

void sub_1093158(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12)
  {
    operator delete(a12);
    sub_58CC(a1);
  }
  sub_58CC(a1);
}

void sub_10931C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  sub_2FC938(&a26);
  sub_39EB70(&a43);
  sub_109276C((void *)(v43 - 184));
  _Unwind_Resume(a1);
}

void sub_10931EC(_Unwind_Exception *a1)
{
  sub_109276C((void *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_1093200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
}

void sub_109321C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
}

void sub_1093230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  sub_109276C(&a9);
  sub_109276C(&a26);
  sub_10990C8(&a43);
  sub_109276C(&STACK[0x220]);
  sub_109276C((void *)(v43 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_1093268(uint64_t a1, char *a2, void *a3)
{
  sub_45EB40(a2, (uint64_t)&v30);
  sub_3A5E94(&v30, (uint64_t)&v40);
  if (__p)
  {
    unsigned int v39 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    double v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  sub_39ECCC((uint64_t)&v30, &v40);
  sub_39ECCC((uint64_t)&v23, &v45);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    int v8 = v28;
    if (v34 == v35 || v28 == v29)
    {
      int v10 = (v34 == v35) ^ (v28 == v29);
      goto LABEL_32;
    }
    if (v31 == v25) {
      break;
    }
    if (v6 >= *a3) {
      goto LABEL_39;
    }
LABEL_34:
    uint64_t v19 = sub_46CCC8((void *)v30, *((unint64_t *)&v30 + 1), v5);
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)(a1 + 16);
    if (v20 != v21)
    {
      while (1)
      {
        uint64_t v50 = *(void *)(sub_46C8EC((void *)v30, *((uint64_t *)&v30 + 1)) + 32);
        if (sub_F57414(v20, &v50) != -1) {
          break;
        }
        v20 += 80;
        if (v20 == v21) {
          goto LABEL_11;
        }
      }
      v7 += v19;
    }
LABEL_11:
    v6 += v19;
    sub_39EBB4((void **)&v30);
  }
  if ((void)v30)
  {
    unint64_t v11 = *((void *)&v30 + 1);
    BOOL v12 = v11 < sub_46C760((void *)v30);
    int v13 = v23;
    if (v23) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v12 = 0;
    int v13 = v23;
    if (v23)
    {
LABEL_21:
      unint64_t v14 = v24;
      unint64_t v15 = sub_46C760(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_46C8EC((void *)v30, *((uint64_t *)&v30 + 1));
        if (v18 == sub_46C8EC(v23, v24)) {
          goto LABEL_38;
        }
        goto LABEL_33;
      }
      goto LABEL_31;
    }
  }
  BOOL v16 = 0;
LABEL_31:
  int v10 = v12 ^ v16;
LABEL_32:
  if ((v10 ^ 1)) {
    goto LABEL_38;
  }
LABEL_33:
  if (v6 < *a3) {
    goto LABEL_34;
  }
LABEL_38:
  int v8 = v28;
LABEL_39:
  if (v8)
  {
    int v29 = v8;
    operator delete(v8);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v34)
  {
    double v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    long double v47 = v46;
    operator delete(v46);
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    int v42 = v41;
    operator delete(v41);
  }
  return v7;
}

void sub_10934E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10934FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

double sub_1093528(void *a1, char *a2, int a3, int a4)
{
  double v8 = 1.0;
  if ((a3 & 1) == 0 && !a4) {
    return v8;
  }
  uint64_t v9 = a1[5] - a1[4];
  if (!v9) {
    return v8;
  }
  unint64_t v10 = 0;
  uint64_t v11 = v9 >> 3;
  while (2)
  {
    sub_109374C(a1, a2, v10, (uint64_t *)&__p);
    int v13 = (char *)__p;
    if (__p == v30)
    {
      if (__p)
      {
        long long v30 = (char *)__p;
        operator delete(__p);
      }
      goto LABEL_8;
    }
    unint64_t v14 = (char *)__p;
    while (1)
    {
      if (*((void *)v14 + 11) == *((void *)v14 + 2) && *((void *)v14 + 34) == *((void *)v14 + 25))
      {
        if (a4)
        {
          uint64_t v15 = *((void *)v14 + 42);
          if (!v15) {
            goto LABEL_46;
          }
          if (v8 < (double)*((uint64_t *)v14 + 19) / (double)v15) {
            double v8 = (double)*((uint64_t *)v14 + 19) / (double)v15;
          }
        }
        if (a3) {
          break;
        }
      }
LABEL_11:
      v14 += 368;
      if (v14 == v30)
      {
        char v17 = 1;
        if (!__p) {
          goto LABEL_7;
        }
        goto LABEL_24;
      }
    }
    int v16 = *((_DWORD *)v14 + 89);
    if (v16)
    {
      if (v8 < (double)*((int *)v14 + 43) / (double)v16) {
        double v8 = (double)*((int *)v14 + 43) / (double)v16;
      }
      goto LABEL_11;
    }
LABEL_46:
    char v17 = 0;
    if (!__p) {
      goto LABEL_7;
    }
LABEL_24:
    if (__p == v30)
    {
      long long v30 = (char *)__p;
      BOOL v12 = __p;
    }
    else
    {
      uint64_t v18 = v30 - 160;
      do
      {
        uint64_t v20 = (void *)*((void *)v18 + 12);
        if (v20)
        {
          *((void *)v18 + 13) = v20;
          operator delete(v20);
        }
        uint64_t v21 = (void *)*((void *)v18 + 9);
        if (v21)
        {
          *((void *)v18 + 10) = v21;
          operator delete(v21);
        }
        unint64_t v22 = (void *)*((void *)v18 + 3);
        if (v22)
        {
          *((void *)v18 + 4) = v22;
          operator delete(v22);
        }
        unint64_t v23 = *(void **)v18;
        if (*(void *)v18)
        {
          *((void *)v18 + 1) = v23;
          operator delete(v23);
        }
        unint64_t v24 = (void *)*((void *)v18 - 11);
        if (v24)
        {
          *((void *)v18 - 10) = v24;
          operator delete(v24);
        }
        uint64_t v25 = (void *)*((void *)v18 - 14);
        if (v25)
        {
          *((void *)v18 - 13) = v25;
          operator delete(v25);
        }
        unint64_t v26 = (void *)*((void *)v18 - 20);
        if (v26)
        {
          *((void *)v18 - 19) = v26;
          operator delete(v26);
        }
        unint64_t v27 = (void *)*((void *)v18 - 23);
        if (v27)
        {
          *((void *)v18 - 22) = v27;
          operator delete(v27);
        }
        uint64_t v19 = v18 - 208;
        v18 -= 368;
      }
      while (v19 != v13);
      BOOL v12 = __p;
      long long v30 = v13;
    }
    operator delete(v12);
LABEL_7:
    if (v17)
    {
LABEL_8:
      if (++v10 == v11) {
        return v8;
      }
      continue;
    }
    return 1.79769313e308;
  }
}

void sub_109374C(void *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a3 >= (uint64_t)(a1[5] - a1[4]) >> 3 || !sub_45FB48((uint64_t)a2))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  double v8 = *(char **)(a1[4] + 8 * a3);
  sub_45E97C(a2, (uint64_t)&v192);
  sub_45EA74(a2, (uint64_t)&v185);
  sub_45F294(a2, 0, (uint64_t)&v179);
  sub_45F394(a2, 0, (uint64_t)v174);
  sub_45E97C(v8, (uint64_t)&v168);
  sub_45EA74(v8, (uint64_t)&v162);
  sub_45F294(v8, 0, (uint64_t)&v156);
  sub_45F394(v8, 0, (uint64_t)v151);
  uint64_t v127 = sub_45FD6C((uint64_t *)a2);
  uint64_t v129 = sub_45FD6C((uint64_t *)v8);
  int v126 = sub_47EE94((uint64_t)a2, 0, 0);
  int v128 = sub_47EE94((uint64_t)v8, 0, 0);
  long long v141 = xmmword_20B93F0;
  long long v142 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  *(_OWORD *)uint64_t v145 = 0u;
  *(void *)&v145[16] = -1;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  memset(v150, 0, 28);
  long long v131 = xmmword_20B93F0;
  *(_OWORD *)long double v132 = 0u;
  long long v133 = 0u;
  *(_OWORD *)uint64x2_t v134 = 0u;
  *(_OWORD *)long double v135 = 0u;
  *(void *)&v135[16] = -1;
  *(_OWORD *)long double v136 = 0u;
  long long __p = 0u;
  long long v139 = 0u;
  memset(v140, 0, 28);
  long long v137 = 0u;
LABEL_6:
  if (v196 == v197 || v190 == v191)
  {
    if ((v196 == v197) == (v190 == v191)) {
      goto LABEL_223;
    }
    goto LABEL_25;
  }
  if (v193 != v187) {
    goto LABEL_25;
  }
  if ((void)v192)
  {
    unint64_t v11 = *((void *)&v192 + 1);
    int v12 = v11 < sub_46C760((void *)v192);
    int v13 = v185;
    if (v185) {
      goto LABEL_16;
    }
LABEL_23:
    int v16 = 0;
    goto LABEL_24;
  }
  int v12 = 0;
  int v13 = v185;
  if (!v185) {
    goto LABEL_23;
  }
LABEL_16:
  unint64_t v14 = v186;
  unint64_t v15 = sub_46C760(v13);
  int v16 = v14 < v15;
  if (v14 < v15) {
    int v17 = v12;
  }
  else {
    int v17 = 0;
  }
  if (v17 != 1)
  {
LABEL_24:
    if (v12 == v16) {
      goto LABEL_223;
    }
    goto LABEL_25;
  }
  uint64_t v18 = sub_46C8EC((void *)v192, *((uint64_t *)&v192 + 1));
  if (v18 == sub_46C8EC(v185, v186)) {
    goto LABEL_223;
  }
LABEL_25:
  if (v172 == *(void **)v173 || v166 == *(void **)v167)
  {
    if ((v172 == *(void **)v173) == (v166 == *(void **)v167)) {
      goto LABEL_223;
    }
    goto LABEL_44;
  }
  if (v169 != v163) {
    goto LABEL_44;
  }
  if ((void)v168)
  {
    unint64_t v20 = *((void *)&v168 + 1);
    int v21 = v20 < sub_46C760((void *)v168);
    unint64_t v22 = (void *)v162;
    if ((void)v162) {
      goto LABEL_35;
    }
LABEL_42:
    int v25 = 0;
    goto LABEL_43;
  }
  int v21 = 0;
  unint64_t v22 = (void *)v162;
  if (!(void)v162) {
    goto LABEL_42;
  }
LABEL_35:
  unint64_t v23 = *((void *)&v162 + 1);
  unint64_t v24 = sub_46C760(v22);
  int v25 = v23 < v24;
  if (v23 < v24) {
    int v26 = v21;
  }
  else {
    int v26 = 0;
  }
  if (v26 != 1)
  {
LABEL_43:
    if (v21 == v25) {
      goto LABEL_223;
    }
    goto LABEL_44;
  }
  uint64_t v27 = sub_46C8EC((void *)v168, *((uint64_t *)&v168 + 1));
  if (v27 == sub_46C8EC((void *)v162, *((uint64_t *)&v162 + 1))) {
    goto LABEL_223;
  }
  while (1)
  {
LABEL_44:
    if (v196 == v197 || v190 == v191)
    {
      if ((v196 == v197) == (v190 == v191)) {
        break;
      }
      goto LABEL_63;
    }
    if (v193 != v187) {
      goto LABEL_63;
    }
    if ((void)v192)
    {
      unint64_t v29 = *((void *)&v192 + 1);
      int v30 = v29 < sub_46C760((void *)v192);
      uint64_t v31 = v185;
      if (!v185) {
        goto LABEL_61;
      }
    }
    else
    {
      int v30 = 0;
      uint64_t v31 = v185;
      if (!v185)
      {
LABEL_61:
        int v34 = 0;
        goto LABEL_62;
      }
    }
    unint64_t v32 = v186;
    unint64_t v33 = sub_46C760(v31);
    int v34 = v32 < v33;
    if (v32 < v33) {
      int v35 = v30;
    }
    else {
      int v35 = 0;
    }
    if (v35 == 1)
    {
      uint64_t v36 = sub_46C8EC((void *)v192, *((uint64_t *)&v192 + 1));
      if (v36 == sub_46C8EC(v185, v186)) {
        break;
      }
      goto LABEL_63;
    }
LABEL_62:
    if (v30 == v34) {
      break;
    }
LABEL_63:
    if (v172 == *(void **)v173 || v166 == *(void **)v167)
    {
      if ((v172 == *(void **)v173) == (v166 == *(void **)v167)) {
        break;
      }
      goto LABEL_82;
    }
    if (v169 != v163) {
      goto LABEL_82;
    }
    if ((void)v168)
    {
      unint64_t v38 = *((void *)&v168 + 1);
      int v39 = v38 < sub_46C760((void *)v168);
      long long v40 = (void *)v162;
      if (!(void)v162) {
        goto LABEL_80;
      }
    }
    else
    {
      int v39 = 0;
      long long v40 = (void *)v162;
      if (!(void)v162)
      {
LABEL_80:
        int v43 = 0;
        goto LABEL_81;
      }
    }
    unint64_t v41 = *((void *)&v162 + 1);
    unint64_t v42 = sub_46C760(v40);
    int v43 = v41 < v42;
    if (v41 < v42) {
      int v44 = v39;
    }
    else {
      int v44 = 0;
    }
    if (v44 == 1)
    {
      uint64_t v45 = sub_46C8EC((void *)v168, *((uint64_t *)&v168 + 1));
      if (v45 == sub_46C8EC((void *)v162, *((uint64_t *)&v162 + 1))) {
        break;
      }
      goto LABEL_82;
    }
LABEL_81:
    if (v39 == v43) {
      break;
    }
LABEL_82:
    uint64_t v46 = sub_46C8EC((void *)v192, *((uint64_t *)&v192 + 1));
    unint64_t v47 = *(void *)(sub_46C8EC((void *)v168, *((uint64_t *)&v168 + 1)) + 32);
    if (__PAIR64__(*(unsigned __int16 *)(v46 + 36), *(_DWORD *)(v46 + 32)) != __PAIR64__(WORD2(v47), v47)
      || (HIWORD(v47) & 1) == (*(unsigned char *)(v46 + 38) == 0))
    {
      break;
    }
    uint64_t v49 = sub_46CCC8((void *)v192, *((unint64_t *)&v192 + 1), v48);
    *((void *)&v149 + 1) += v49;
    uint64_t v51 = sub_46CCC8((void *)v168, *((unint64_t *)&v168 + 1), v50);
    *((void *)&v139 + 1) += v51;
    LODWORD(v150[2]) += *v179;
    LODWORD(v140[2]) += *v156;
    sub_39EBB4((void **)&v192);
    unint64_t v52 = v180;
    long long v53 = v179 + 1;
    unint64_t v54 = ((v184 - (unsigned char *)v183) >> 3) - 1;
    ++v179;
    if (v180 < v54)
    {
      do
      {
        if (v53 != *((_DWORD **)v183 + v52)) {
          break;
        }
        unint64_t v180 = v52 + 1;
        long long v53 = (_DWORD *)*((void *)v181 + v52 + 1);
        unint64_t v179 = v53;
        ++v52;
      }
      while (v54 != v180);
    }
    sub_39EBB4((void **)&v168);
    unint64_t v55 = v157;
    uint64_t v56 = v156 + 1;
    unint64_t v57 = ((v161 - (unsigned char *)v160) >> 3) - 1;
    ++v156;
    if (v157 < v57)
    {
      do
      {
        if (v56 != *((_DWORD **)v160 + v55)) {
          break;
        }
        unint64_t v157 = v55 + 1;
        uint64_t v56 = (_DWORD *)*((void *)v158 + v55 + 1);
        long double v156 = v56;
        ++v55;
      }
      while (v57 != v157);
    }
  }
  if (v196 == v197 || v190 == v191)
  {
    if ((v196 == v197) != (v190 == v191)) {
      goto LABEL_130;
    }
    goto LABEL_97;
  }
  if (v193 != v187) {
    goto LABEL_130;
  }
  if (!(void)v192)
  {
    float64x2_t v66 = v185;
    if (!v185) {
      goto LABEL_97;
    }
    BOOL v65 = 0;
    goto LABEL_113;
  }
  unint64_t v63 = *((void *)&v192 + 1);
  unint64_t v64 = sub_46C760((void *)v192);
  BOOL v65 = v63 < v64;
  float64x2_t v66 = v185;
  if (v185)
  {
LABEL_113:
    unint64_t v67 = v186;
    unint64_t v68 = sub_46C760(v66);
    if (v67 < v68 && v65)
    {
      uint64_t v70 = sub_46C8EC((void *)v192, *((uint64_t *)&v192 + 1));
      if (v70 != sub_46C8EC(v185, v186)) {
        goto LABEL_130;
      }
      goto LABEL_97;
    }
    if (((v65 ^ (v67 < v68)) & 1) == 0) {
      goto LABEL_97;
    }
    goto LABEL_130;
  }
  if (v63 < v64) {
    goto LABEL_130;
  }
LABEL_97:
  if (v172 == *(void **)v173 || v166 == *(void **)v167)
  {
    if ((v172 == *(void **)v173) == (v166 == *(void **)v167)) {
      goto LABEL_223;
    }
  }
  else
  {
    if (v169 != v163) {
      goto LABEL_130;
    }
    if ((void)v168)
    {
      unint64_t v59 = *((void *)&v168 + 1);
      unint64_t v60 = sub_46C760((void *)v168);
      BOOL v61 = v59 < v60;
      unint64_t v62 = (void *)v162;
      if (!(void)v162)
      {
        if (v59 >= v60) {
          goto LABEL_223;
        }
        goto LABEL_130;
      }
    }
    else
    {
      unint64_t v62 = (void *)v162;
      if (!(void)v162) {
        goto LABEL_223;
      }
      BOOL v61 = 0;
    }
    unint64_t v71 = *((void *)&v162 + 1);
    unint64_t v72 = sub_46C760(v62);
    if (v71 < v72 && v61)
    {
      uint64_t v74 = sub_46C8EC((void *)v168, *((uint64_t *)&v168 + 1));
      if (v74 == sub_46C8EC((void *)v162, *((uint64_t *)&v162 + 1))) {
        goto LABEL_223;
      }
    }
    else if (v61 == v71 < v72)
    {
      goto LABEL_223;
    }
  }
LABEL_130:
  long long v141 = v192;
  *(void *)&long long v142 = v193;
  sub_457964((void *)&v142 + 1, v194, v195, (v195 - v194) >> 4);
  sub_457964(&v144, v196, v197, (v197 - v196) >> 4);
  long long v131 = v168;
  v132[0] = v169;
  sub_457964(&v132[1], (char *)__src, *(char **)v171, (uint64_t)(*(void *)v171 - (void)__src) >> 4);
  sub_457964(v134, (char *)v172, *(char **)v173, (uint64_t)(*(void *)v173 - (void)v172) >> 4);
  v150[0] = 0;
  v140[0] = 0;
  while (2)
  {
    if (v196 == v197 || v190 == v191)
    {
      if ((v196 == v197) == (v190 == v191)) {
        break;
      }
      goto LABEL_150;
    }
    __n128 v76 = (void *)v192;
    if (v193 == v187)
    {
      if ((void)v192)
      {
        unint64_t v77 = *((void *)&v192 + 1);
        int v78 = v77 < sub_46C760((void *)v192);
        double v79 = v185;
        if (v185) {
          goto LABEL_141;
        }
LABEL_148:
        int v82 = 0;
        goto LABEL_149;
      }
      int v78 = 0;
      double v79 = v185;
      if (!v185) {
        goto LABEL_148;
      }
LABEL_141:
      unint64_t v80 = v186;
      unint64_t v81 = sub_46C760(v79);
      int v82 = v80 < v81;
      if (v80 < v81) {
        int v83 = v78;
      }
      else {
        int v83 = 0;
      }
      if (v83 == 1)
      {
        uint64_t v84 = sub_46C8EC((void *)v192, *((uint64_t *)&v192 + 1));
        if (v84 == sub_46C8EC(v185, v186)) {
          break;
        }
      }
      else
      {
LABEL_149:
        if (v78 == v82) {
          break;
        }
      }
LABEL_150:
      __n128 v76 = (void *)v192;
    }
    uint64_t v85 = a1[1];
    uint64_t v130 = *(void *)(sub_46C8EC(v76, *((uint64_t *)&v192 + 1)) + 32);
    if (sub_F57414(v85 + 80 * a3, &v130) == -1)
    {
      uint64_t v87 = sub_46CCC8((void *)v192, *((unint64_t *)&v192 + 1), v86);
      v150[0] += v87;
      HIDWORD(v150[2]) += *v179;
      sub_39EBB4((void **)&v192);
      unint64_t v88 = v180;
      double v89 = v179 + 1;
      unint64_t v90 = ((v184 - (unsigned char *)v183) >> 3) - 1;
      ++v179;
      if (v180 < v90)
      {
        do
        {
          if (v89 != *((_DWORD **)v183 + v88)) {
            break;
          }
          unint64_t v180 = v88 + 1;
          double v89 = (_DWORD *)*((void *)v181 + v88 + 1);
          unint64_t v179 = v89;
          ++v88;
        }
        while (v90 != v180);
      }
      continue;
    }
    break;
  }
  if (v196 == v197 || v190 == v191)
  {
    if ((v196 == v197) != (v190 == v191)) {
      goto LABEL_177;
    }
    goto LABEL_215;
  }
  if (v193 != v187) {
    goto LABEL_177;
  }
  if ((void)v192)
  {
    unint64_t v92 = *((void *)&v192 + 1);
    unint64_t v93 = sub_46C760((void *)v192);
    BOOL v94 = v92 < v93;
    unsigned int v95 = v185;
    if (!v185)
    {
      if (v92 < v93) {
        goto LABEL_177;
      }
      goto LABEL_215;
    }
  }
  else
  {
    unsigned int v95 = v185;
    if (!v185) {
      goto LABEL_215;
    }
    BOOL v94 = 0;
  }
  unint64_t v96 = v186;
  unint64_t v97 = sub_46C760(v95);
  if (v96 >= v97 || !v94)
  {
    if (((v94 ^ (v96 < v97)) & 1) == 0) {
      goto LABEL_215;
    }
LABEL_177:
    while (v172 != *(void **)v173 && v166 != *(void **)v167)
    {
      uint64_t v101 = (void *)v168;
      if (v169 == v163)
      {
        if ((void)v168)
        {
          unint64_t v102 = *((void *)&v168 + 1);
          int v103 = v102 < sub_46C760((void *)v168);
          unsigned int v104 = (void *)v162;
          if ((void)v162) {
            goto LABEL_187;
          }
LABEL_194:
          int v107 = 0;
          goto LABEL_195;
        }
        int v103 = 0;
        unsigned int v104 = (void *)v162;
        if (!(void)v162) {
          goto LABEL_194;
        }
LABEL_187:
        unint64_t v105 = *((void *)&v162 + 1);
        unint64_t v106 = sub_46C760(v104);
        int v107 = v105 < v106;
        if (v105 < v106) {
          int v108 = v103;
        }
        else {
          int v108 = 0;
        }
        if (v108 == 1)
        {
          uint64_t v109 = sub_46C8EC((void *)v168, *((uint64_t *)&v168 + 1));
          if (v109 == sub_46C8EC((void *)v162, *((uint64_t *)&v162 + 1))) {
            goto LABEL_203;
          }
        }
        else
        {
LABEL_195:
          if (v103 == v107) {
            goto LABEL_203;
          }
        }
LABEL_196:
        uint64_t v101 = (void *)v168;
      }
      uint64_t v110 = sub_46C8EC(v101, *((uint64_t *)&v168 + 1));
      uint64_t v111 = *(void *)(sub_46C8EC((void *)v192, *((uint64_t *)&v192 + 1)) + 32);
      if (__PAIR64__(*(unsigned __int16 *)(v110 + 36), *(_DWORD *)(v110 + 32)) == __PAIR64__(WORD2(v111), v111)
        && ((v111 & 0x1000000000000) == 0) == (*(unsigned char *)(v110 + 38) == 0))
      {
LABEL_203:
        *(_OWORD *)&v145[8] = v192;
        *(void *)&long long v146 = v193;
        sub_457964((void *)&v146 + 1, v194, v195, (v195 - v194) >> 4);
        sub_457964(&v148, v196, v197, (v197 - v196) >> 4);
        *(_OWORD *)&v135[8] = v168;
        v136[0] = v169;
        sub_457964(&v136[1], (char *)__src, *(char **)v171, (uint64_t)(*(void *)v171 - (void)__src) >> 4);
        sub_457964(&__p, (char *)v172, *(char **)v173, (uint64_t)(*(void *)v173 - (void)v172) >> 4);
        uint64_t v117 = v127 - (*((void *)&v149 + 1) + v150[0]);
        if (v127 <= *((void *)&v149 + 1) + v150[0]) {
          uint64_t v117 = 0;
        }
        v150[1] = v117;
        uint64_t v118 = v129 - (*((void *)&v139 + 1) + v140[0]);
        if (v129 <= *((void *)&v139 + 1) + v140[0]) {
          uint64_t v118 = 0;
        }
        v140[1] = v118;
        int v119 = v126 - (LODWORD(v150[2]) + HIDWORD(v150[2]));
        if (v126 <= LODWORD(v150[2]) + HIDWORD(v150[2])) {
          int v119 = 0;
        }
        LODWORD(v150[3]) = v119;
        int v120 = v128 - (LODWORD(v140[2]) + HIDWORD(v140[2]));
        if (v128 <= LODWORD(v140[2]) + HIDWORD(v140[2])) {
          int v120 = 0;
        }
        LODWORD(v140[3]) = v120;
        unint64_t v121 = a4[1];
        if (v121 >= a4[2])
        {
          uint64_t v9 = sub_1099824(a4, (uint64_t)&v141, (uint64_t)&v131);
        }
        else
        {
          sub_10927D0(a4[1], (uint64_t)&v141, (uint64_t)&v131);
          uint64_t v9 = v121 + 368;
          a4[1] = v121 + 368;
        }
        a4[1] = v9;
        *((void *)&v149 + 1) += v150[0];
        *((void *)&v139 + 1) += v140[0];
        v150[2] = (HIDWORD(v150[2]) + LODWORD(v150[2]));
        v140[2] = (HIDWORD(v140[2]) + LODWORD(v140[2]));
        goto LABEL_6;
      }
      uint64_t v113 = sub_46CCC8((void *)v168, *((unint64_t *)&v168 + 1), v112);
      v140[0] += v113;
      HIDWORD(v140[2]) += *v156;
      sub_39EBB4((void **)&v168);
      unint64_t v114 = v157;
      long double v115 = v156 + 1;
      unint64_t v116 = ((v161 - (unsigned char *)v160) >> 3) - 1;
      ++v156;
      if (v157 < v116)
      {
        do
        {
          if (v115 != *((_DWORD **)v160 + v114)) {
            break;
          }
          unint64_t v157 = v114 + 1;
          long double v115 = (_DWORD *)*((void *)v158 + v114 + 1);
          long double v156 = v115;
          ++v114;
        }
        while (v116 != v157);
      }
    }
    if ((v172 == *(void **)v173) == (v166 == *(void **)v167)) {
      goto LABEL_203;
    }
    goto LABEL_196;
  }
  uint64_t v99 = sub_46C8EC((void *)v192, *((uint64_t *)&v192 + 1));
  if (v99 != sub_46C8EC(v185, v186)) {
    goto LABEL_177;
  }
LABEL_215:
  *(_OWORD *)&v145[8] = v192;
  *(void *)&long long v146 = v193;
  sub_457964((void *)&v146 + 1, v194, v195, (v195 - v194) >> 4);
  sub_457964(&v148, v196, v197, (v197 - v196) >> 4);
  *(_OWORD *)&v135[8] = v162;
  v136[0] = v163;
  sub_457964(&v136[1], (char *)v164, *(char **)v165, (uint64_t)(*(void *)v165 - (void)v164) >> 4);
  sub_457964(&__p, (char *)v166, *(char **)v167, (uint64_t)(*(void *)v167 - (void)v166) >> 4);
  uint64_t v122 = v129 - *((void *)&v139 + 1);
  if (v129 <= *((uint64_t *)&v139 + 1)) {
    uint64_t v122 = 0;
  }
  int v123 = v128 - LODWORD(v140[2]);
  if (v128 <= SLODWORD(v140[2])) {
    int v123 = 0;
  }
  v150[1] = 0;
  v140[0] = v122;
  v140[1] = 0;
  LODWORD(v150[3]) = 0;
  HIDWORD(v140[2]) = v123;
  LODWORD(v140[3]) = 0;
  unint64_t v124 = a4[1];
  if (v124 >= a4[2])
  {
    uint64_t v125 = sub_1099824(a4, (uint64_t)&v141, (uint64_t)&v131);
  }
  else
  {
    sub_10927D0(a4[1], (uint64_t)&v141, (uint64_t)&v131);
    uint64_t v125 = v124 + 368;
    a4[1] = v124 + 368;
  }
  a4[1] = v125;
LABEL_223:
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v136[1])
  {
    *(void **)&long long v137 = v136[1];
    operator delete(v136[1]);
  }
  if (v134[0])
  {
    v134[1] = v134[0];
    operator delete(v134[0]);
  }
  if (v132[1])
  {
    *(void **)&long long v133 = v132[1];
    operator delete(v132[1]);
  }
  if ((void)v148)
  {
    *((void *)&v148 + 1) = v148;
    operator delete((void *)v148);
  }
  if (*((void *)&v146 + 1))
  {
    *(void *)&long long v147 = *((void *)&v146 + 1);
    operator delete(*((void **)&v146 + 1));
  }
  if ((void)v144)
  {
    *((void *)&v144 + 1) = v144;
    operator delete((void *)v144);
  }
  if (*((void *)&v142 + 1))
  {
    *(void *)&long long v143 = *((void *)&v142 + 1);
    operator delete(*((void **)&v142 + 1));
  }
  if (v154)
  {
    unsigned int v155 = v154;
    operator delete(v154);
  }
  if (v152)
  {
    uint64_t v153 = v152;
    operator delete(v152);
  }
  if (v160)
  {
    int64x2_t v161 = v160;
    operator delete(v160);
  }
  if (v158)
  {
    long double v159 = v158;
    operator delete(v158);
  }
  if (v166)
  {
    *(void *)long double v167 = v166;
    operator delete(v166);
  }
  if (v164)
  {
    *(void *)long double v165 = v164;
    operator delete(v164);
  }
  if (v172)
  {
    *(void *)unint64_t v173 = v172;
    operator delete(v172);
  }
  if (__src)
  {
    *(void *)uint64_t v171 = __src;
    operator delete(__src);
  }
  if (v177)
  {
    uint64_t v178 = v177;
    operator delete(v177);
  }
  if (v175)
  {
    uint64_t v176 = v175;
    operator delete(v175);
  }
  if (v183)
  {
    double v184 = v183;
    operator delete(v183);
  }
  if (v181)
  {
    uint64_t v182 = v181;
    operator delete(v181);
  }
  if (v190)
  {
    float64x2_t v191 = v190;
    operator delete(v190);
  }
  if (v188)
  {
    float64x2_t v189 = v188;
    operator delete(v188);
  }
  if (v196)
  {
    uint64_t v197 = v196;
    operator delete(v196);
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
}

void sub_109476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v69 + 8) = v70;
  sub_39EB0C(&a21);
  sub_39EB0C(&a45);
  sub_2FC938(&a69);
  sub_2FC938(&STACK[0x220]);
  sub_39EB70(&STACK[0x260]);
  sub_39EB70(&STACK[0x2A8]);
  sub_2FC938(&STACK[0x2F0]);
  sub_2FC938(&STACK[0x330]);
  sub_39EB70((void *)(v71 - 240));
  sub_39EB70((void *)(v71 - 168));
  sub_10444EC((void **)v69);
  _Unwind_Resume(a1);
}

uint64_t sub_109488C(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  if (v3 == v4) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v553 = (v4 - v3) >> 3;
  double v6 = (double)*a3 / 100.0;
  while (2)
  {
    v555 = *(char **)(a1[4] + 8 * v5);
    sub_109374C(a1, a2, v5, (uint64_t *)&__p);
    double v8 = (char *)__p;
    v554 = v662;
    double v9 = 0.0;
    if (__p == v662) {
      goto LABEL_739;
    }
    unint64_t v570 = v5;
    while (2)
    {
      long long v10 = *(_OWORD *)v8;
      unint64_t v654 = *((void *)v8 + 2);
      long long v653 = v10;
      v656 = 0;
      v657 = 0;
      v655 = 0;
      int v12 = (unsigned char *)*((void *)v8 + 3);
      unint64_t v11 = (unsigned char *)*((void *)v8 + 4);
      int64_t v13 = v11 - v12;
      unint64_t v14 = v8;
      if (v11 != v12)
      {
        if (v13 < 0) {
          sub_2E00();
        }
        unint64_t v15 = (char *)operator new(v11 - v12);
        v655 = v15;
        v656 = v15;
        int v16 = &v15[16 * (v13 >> 4)];
        v657 = v16;
        memcpy(v15, v12, v13);
        v656 = v16;
        v658 = 0;
        v659 = 0;
        v660 = 0;
        uint64_t v18 = (unsigned char *)*((void *)v14 + 6);
        int v17 = (unsigned char *)*((void *)v14 + 7);
        int64_t v19 = v17 - v18;
        if (v17 != v18) {
          goto LABEL_12;
        }
LABEL_15:
        int v21 = 0;
        unint64_t v20 = 0;
        goto LABEL_16;
      }
      int v16 = 0;
      unint64_t v15 = 0;
      v658 = 0;
      v659 = 0;
      v660 = 0;
      uint64_t v18 = (unsigned char *)*((void *)v8 + 6);
      unint64_t v22 = (unsigned char *)*((void *)v8 + 7);
      int64_t v19 = v22 - v18;
      if (v22 == v18) {
        goto LABEL_15;
      }
LABEL_12:
      if (v19 < 0) {
        sub_2E00();
      }
      unint64_t v20 = (char *)operator new(v19);
      v658 = v20;
      v659 = v20;
      int v21 = &v20[16 * (v19 >> 4)];
      v660 = v21;
      memcpy(v20, v18, v19);
      v659 = v21;
LABEL_16:
      long long v645 = *(_OWORD *)(v14 + 184);
      unint64_t v23 = (unsigned char *)*((void *)v14 + 26);
      unint64_t v646 = *((void *)v14 + 25);
      v648 = 0;
      v649 = 0;
      v647 = 0;
      unint64_t v24 = (unsigned char *)*((void *)v14 + 27);
      int64_t v25 = v24 - v23;
      if (v24 != v23)
      {
        if (v25 < 0) {
          sub_2E00();
        }
        v647 = operator new(v24 - v23);
        v648 = v647;
        int v26 = (char *)v647 + 16 * (v25 >> 4);
        v649 = v26;
        memcpy(v647, v23, v25);
        v648 = v26;
      }
      v650 = 0;
      v651 = 0;
      v652 = 0;
      unint64_t v28 = (unsigned char *)*((void *)v14 + 29);
      uint64_t v27 = (unsigned char *)*((void *)v14 + 30);
      int64_t v29 = v27 - v28;
      if (v27 != v28)
      {
        if (v29 < 0) {
          sub_2E00();
        }
        v650 = operator new(v27 - v28);
        v651 = (char *)v650;
        int v30 = (char *)v650 + 16 * (v29 >> 4);
        v652 = v30;
        memcpy(v650, v28, v29);
        v651 = v30;
      }
      long long v637 = *(_OWORD *)(v14 + 72);
      uint64_t v31 = (unsigned char *)*((void *)v14 + 12);
      uint64_t v638 = *((void *)v14 + 11);
      v640 = 0;
      v641 = 0;
      v639 = 0;
      unint64_t v32 = (unsigned char *)*((void *)v14 + 13);
      int64_t v33 = v32 - v31;
      if (v32 != v31)
      {
        if (v33 < 0) {
          sub_2E00();
        }
        v639 = operator new(v32 - v31);
        v640 = v639;
        int v34 = (char *)v639 + 16 * (v33 >> 4);
        v641 = v34;
        memcpy(v639, v31, v33);
        v640 = v34;
      }
      v642 = 0;
      v643 = 0;
      v644 = 0;
      uint64_t v36 = (unsigned char *)*((void *)v14 + 15);
      int v35 = (unsigned char *)*((void *)v14 + 16);
      int64_t v37 = v35 - v36;
      if (v35 != v36)
      {
        if (v37 < 0) {
          sub_2E00();
        }
        v642 = operator new(v35 - v36);
        v643 = v642;
        unint64_t v38 = (char *)v642 + 16 * (v37 >> 4);
        v644 = v38;
        memcpy(v642, v36, v37);
        v643 = v38;
      }
      long long v629 = *((_OWORD *)v14 + 16);
      int v39 = (unsigned char *)*((void *)v14 + 35);
      uint64_t v630 = *((void *)v14 + 34);
      v632 = 0;
      v633 = 0;
      v631 = 0;
      long long v40 = (unsigned char *)*((void *)v14 + 36);
      int64_t v41 = v40 - v39;
      if (v40 != v39)
      {
        if (v41 < 0) {
          sub_2E00();
        }
        v631 = operator new(v40 - v39);
        v632 = v631;
        unint64_t v42 = (char *)v631 + 16 * (v41 >> 4);
        v633 = v42;
        memcpy(v631, v39, v41);
        v632 = v42;
      }
      v634 = 0;
      v635 = 0;
      v636 = 0;
      int v44 = (unsigned char *)*((void *)v14 + 38);
      int v43 = (unsigned char *)*((void *)v14 + 39);
      int64_t v45 = v43 - v44;
      if (v43 != v44)
      {
        if (v45 < 0) {
          sub_2E00();
        }
        v634 = operator new(v43 - v44);
        v635 = v634;
        uint64_t v46 = (char *)v634 + 16 * (v45 >> 4);
        v636 = v46;
        memcpy(v634, v44, v45);
        v635 = v46;
      }
      v628 = a1;
      long long v620 = v653;
      unint64_t v621 = v654;
      v623 = 0;
      v624 = 0;
      v622 = 0;
      uint64_t v47 = v16 - v15;
      if (v16 != v15)
      {
        if (v47 < 0) {
          sub_2E00();
        }
        double v48 = (char *)operator new(v16 - v15);
        uint64_t v49 = &v48[16 * (v47 >> 4)];
        v622 = v48;
        v624 = v49;
        memcpy(v48, v15, v16 - v15);
        v623 = v49;
      }
      v625 = 0;
      v626 = 0;
      v627 = 0;
      uint64_t v50 = v21 - v20;
      if (v21 != v20)
      {
        if (v50 < 0) {
          sub_2E00();
        }
        uint64_t v51 = (char *)operator new(v21 - v20);
        unint64_t v52 = &v51[16 * (v50 >> 4)];
        v625 = v51;
        v627 = v52;
        memcpy(v51, v20, v21 - v20);
        v626 = v52;
      }
      sub_45EA74(a2, (uint64_t)v615);
      unint64_t v567 = sub_1097E70(&v628, &v620, (uint64_t)v615);
      if (v618)
      {
        v619 = v618;
        operator delete(v618);
      }
      if (v616)
      {
        v617 = v616;
        operator delete(v616);
      }
      if (v625)
      {
        v626 = v625;
        operator delete(v625);
      }
      if (v622)
      {
        v623 = v622;
        operator delete(v622);
      }
      long long v607 = v645;
      long long v53 = v647;
      unint64_t v608 = v646;
      v610 = 0;
      v611 = 0;
      v609 = 0;
      int64_t v54 = v648 - (unsigned char *)v647;
      if (v648 != v647)
      {
        if (v54 < 0) {
          sub_2E00();
        }
        v609 = operator new(v648 - (unsigned char *)v647);
        v610 = v609;
        unint64_t v55 = (char *)v609 + 16 * (v54 >> 4);
        v611 = v55;
        memcpy(v609, v53, v54);
        v610 = v55;
      }
      v612 = 0;
      v613 = 0;
      v614 = 0;
      uint64_t v56 = v650;
      int64_t v57 = v651 - (unsigned char *)v650;
      if (v651 != v650)
      {
        if (v57 < 0) {
          sub_2E00();
        }
        v612 = operator new(v651 - (unsigned char *)v650);
        v613 = v612;
        unint64_t v58 = (char *)v612 + 16 * (v57 >> 4);
        v614 = v58;
        memcpy(v612, v56, v57);
        v613 = v58;
      }
      sub_45EA74(v555, (uint64_t)v602);
      unint64_t v562 = sub_1097E70(&v628, &v607, (uint64_t)v602);
      if (v605)
      {
        v606 = v605;
        operator delete(v605);
      }
      if (v603)
      {
        v604 = v603;
        operator delete(v603);
      }
      if (v612)
      {
        v613 = v612;
        operator delete(v612);
      }
      if (v609)
      {
        v610 = v609;
        operator delete(v609);
      }
      double v59 = sqrt((double)((v567 - (unint64_t)v562)
                        * (v567 - (unint64_t)v562)
                        + (HIDWORD(v567) - HIDWORD(v562)) * (HIDWORD(v567) - HIDWORD(v562))))
          / 100.0;
      if (v9 < v59) {
        double v9 = v59;
      }
      long long v594 = v653;
      unint64_t v60 = v655;
      unint64_t v595 = v654;
      v597 = 0;
      v598 = 0;
      v596 = 0;
      int64_t v61 = v656 - (unsigned char *)v655;
      if (v656 != v655)
      {
        if (v61 < 0) {
          sub_2E00();
        }
        v596 = operator new(v656 - (unsigned char *)v655);
        v597 = v596;
        unint64_t v62 = (char *)v596 + 16 * (v61 >> 4);
        v598 = v62;
        memcpy(v596, v60, v61);
        v597 = v62;
      }
      v599 = 0;
      v600 = 0;
      v601 = 0;
      unint64_t v63 = v658;
      int64_t v64 = v659 - (unsigned char *)v658;
      if (v659 != v658)
      {
        if (v64 < 0) {
          sub_2E00();
        }
        v599 = operator new(v659 - (unsigned char *)v658);
        v600 = v599;
        BOOL v65 = (char *)v599 + 16 * (v64 >> 4);
        v601 = v65;
        memcpy(v599, v63, v64);
        v600 = v65;
      }
      sub_45EA74(a2, (uint64_t)&v587);
      if (v599 == v600 || v592 == v593)
      {
        if ((v599 == v600) == (v592 == v593)) {
          goto LABEL_733;
        }
        goto LABEL_78;
      }
      if (v595 != v589) {
        goto LABEL_78;
      }
      if ((void)v594)
      {
        unint64_t v66 = *((void *)&v594 + 1);
        unint64_t v67 = sub_46C760((void *)v594);
        BOOL v68 = v66 < v67;
        uint64_t v69 = v587;
        if (!v587)
        {
          if (v66 >= v67) {
            goto LABEL_733;
          }
LABEL_78:
          uint64_t v70 = *a1;
          uint64_t v71 = sub_46C8EC((void *)v594, *((uint64_t *)&v594 + 1));
          sub_2954EC(v70, *(void *)(v71 + 32), (uint64_t)&v663);
          unint64_t v72 = (char *)v664;
          if (v664 == v665)
          {
            unint64_t v76 = 0xFFFFFFFF00000000;
            uint64_t v77 = 0xFFFFFFFFLL;
            if (v664)
            {
LABEL_90:
              v665 = v72;
              operator delete(v72);
            }
          }
          else
          {
            if (v666)
            {
              v667 = v663;
              v668 = &v664;
              long long v669 = 0u;
              long long v670 = 0u;
              uint64_t v671 = 0;
              char v672 = 1;
              sub_2E1D08((uint64_t)&v667);
              double v73 = (char *)&v669 + 8;
              uint64_t v74 = (unsigned int *)&v671 + 1;
              __n128 v75 = (unsigned int *)&v670 + 2;
            }
            else
            {
              unint64_t v78 = *((void *)v665 - 1);
              double v79 = sub_2964C4((uint64_t)v663, v78, 1);
              unint64_t v80 = &v79[*(unsigned __int16 *)&v79[-*(int *)v79 + 4]];
              uint64_t v81 = (uint64_t)&v80[4 * HIDWORD(v78) + *(unsigned int *)v80];
              int v82 = (int *)(v81 + 4 + *(unsigned int *)(v81 + 4));
              int v83 = (unsigned int *)((char *)v82 + *(unsigned __int16 *)((char *)v82 - *v82 + 6));
              LODWORD(v83) = *(unsigned int *)((char *)v83 + *v83) - 1;
              v674 = v663;
              v675 = &v664;
              long long v676 = 0u;
              long long v677 = 0u;
              int v678 = ((unint64_t)(v665 - (unsigned char *)v664) >> 3) - 1;
              unsigned int v679 = v83;
              char v680 = 0;
              sub_2E1D08((uint64_t)&v674);
              double v73 = (char *)&v676 + 8;
              uint64_t v74 = &v679;
              __n128 v75 = (unsigned int *)&v677 + 2;
            }
            uint64_t v84 = *(void *)v73 + 4 * *v74;
            int v85 = *(unsigned __int16 *)(v84 + 4);
            int v86 = *(unsigned __int16 *)(v84 + 6);
            unsigned int v87 = sub_511FC(*v75);
            unsigned int v88 = *v75 & ~(-1 << (v87 & 0xFE));
            int v89 = sub_51938(v88);
            int v90 = sub_51938(v88 >> 1);
            int v91 = 1 << -(v87 >> 1);
            if (v87 < 2) {
              int v91 = -2;
            }
            LODWORD(v92) = v90 * v91 + 4 * v86;
            if (v92 >= 0xFFFFFFFE) {
              uint64_t v92 = 4294967294;
            }
            else {
              uint64_t v92 = v92;
            }
            unint64_t v76 = v92 << 32;
            uint64_t v77 = (v89 * v91 + 4 * v85);
            unint64_t v72 = (char *)v664;
            if (v664) {
              goto LABEL_90;
            }
          }
          unint64_t v561 = v76 | v77;
          unint64_t v93 = v592;
          if (!v592) {
            goto LABEL_93;
          }
          goto LABEL_92;
        }
      }
      else
      {
        uint64_t v69 = v587;
        if (!v587) {
          goto LABEL_733;
        }
        BOOL v68 = 0;
      }
      unint64_t v529 = v588;
      unint64_t v530 = sub_46C760(v69);
      if (v529 >= v530 || !v68)
      {
        if (v68 == v529 < v530) {
          goto LABEL_733;
        }
        goto LABEL_78;
      }
      uint64_t v532 = sub_46C8EC((void *)v594, *((uint64_t *)&v594 + 1));
      if (v532 != sub_46C8EC(v587, v588)) {
        goto LABEL_78;
      }
LABEL_733:
      unint64_t v561 = -1;
      unint64_t v93 = v592;
      if (v592)
      {
LABEL_92:
        v593 = v93;
        operator delete(v93);
      }
LABEL_93:
      if (v590)
      {
        v591 = v590;
        operator delete(v590);
      }
      if (v599)
      {
        v600 = v599;
        operator delete(v599);
      }
      if (v596)
      {
        v597 = v596;
        operator delete(v596);
      }
      long long v579 = v645;
      BOOL v94 = v647;
      unint64_t v580 = v646;
      v582 = 0;
      v583 = 0;
      v581 = 0;
      int64_t v95 = v648 - (unsigned char *)v647;
      if (v648 != v647)
      {
        if (v95 < 0) {
          sub_2E00();
        }
        v581 = operator new(v648 - (unsigned char *)v647);
        v582 = v581;
        unint64_t v96 = (char *)v581 + 16 * (v95 >> 4);
        v583 = v96;
        memcpy(v581, v94, v95);
        v582 = v96;
      }
      v584 = 0;
      v585 = 0;
      v586 = 0;
      unint64_t v97 = v650;
      int64_t v98 = v651 - (unsigned char *)v650;
      if (v651 != v650)
      {
        if (v98 < 0) {
          sub_2E00();
        }
        v584 = operator new(v651 - (unsigned char *)v650);
        v585 = v584;
        uint64_t v99 = (char *)v584 + 16 * (v98 >> 4);
        v586 = v99;
        memcpy(v584, v97, v98);
        v585 = v99;
      }
      sub_45EA74(v555, (uint64_t)&v572);
      if (v584 == v585 || v577 == v578)
      {
        if ((v584 == v585) == (v577 == v578)) {
          goto LABEL_736;
        }
        goto LABEL_113;
      }
      if (v580 != v574) {
        goto LABEL_113;
      }
      if ((void)v579)
      {
        unint64_t v100 = *((void *)&v579 + 1);
        unint64_t v101 = sub_46C760((void *)v579);
        BOOL v102 = v100 < v101;
        int v103 = v572;
        if (!v572)
        {
          if (v100 >= v101) {
            goto LABEL_736;
          }
LABEL_113:
          uint64_t v104 = *a1;
          uint64_t v105 = sub_46C8EC((void *)v579, *((uint64_t *)&v579 + 1));
          sub_2954EC(v104, *(void *)(v105 + 32), (uint64_t)&v663);
          unint64_t v106 = (char *)v664;
          if (v664 == v665)
          {
            unint64_t v110 = 0xFFFFFFFF00000000;
            uint64_t v111 = 0xFFFFFFFFLL;
            if (v664)
            {
LABEL_125:
              v665 = v106;
              operator delete(v106);
            }
          }
          else
          {
            if (v666)
            {
              v667 = v663;
              v668 = &v664;
              long long v669 = 0u;
              long long v670 = 0u;
              uint64_t v671 = 0;
              char v672 = 1;
              sub_2E1D08((uint64_t)&v667);
              int v107 = (char *)&v669 + 8;
              int v108 = (unsigned int *)&v671 + 1;
              uint64_t v109 = (unsigned int *)&v670 + 2;
            }
            else
            {
              unint64_t v112 = *((void *)v665 - 1);
              uint64_t v113 = sub_2964C4((uint64_t)v663, v112, 1);
              unint64_t v114 = &v113[*(unsigned __int16 *)&v113[-*(int *)v113 + 4]];
              uint64_t v115 = (uint64_t)&v114[4 * HIDWORD(v112) + *(unsigned int *)v114];
              unint64_t v116 = (int *)(v115 + 4 + *(unsigned int *)(v115 + 4));
              uint64_t v117 = (unsigned int *)((char *)v116 + *(unsigned __int16 *)((char *)v116 - *v116 + 6));
              LODWORD(v117) = *(unsigned int *)((char *)v117 + *v117) - 1;
              v674 = v663;
              v675 = &v664;
              long long v676 = 0u;
              long long v677 = 0u;
              int v678 = ((unint64_t)(v665 - (unsigned char *)v664) >> 3) - 1;
              unsigned int v679 = v117;
              char v680 = 0;
              sub_2E1D08((uint64_t)&v674);
              int v107 = (char *)&v676 + 8;
              int v108 = &v679;
              uint64_t v109 = (unsigned int *)&v677 + 2;
            }
            uint64_t v118 = *(void *)v107 + 4 * *v108;
            int v119 = *(unsigned __int16 *)(v118 + 4);
            int v120 = *(unsigned __int16 *)(v118 + 6);
            unsigned int v121 = sub_511FC(*v109);
            unsigned int v122 = *v109 & ~(-1 << (v121 & 0xFE));
            int v123 = sub_51938(v122);
            int v124 = sub_51938(v122 >> 1);
            int v125 = 1 << -(v121 >> 1);
            if (v121 < 2) {
              int v125 = -2;
            }
            LODWORD(v126) = v124 * v125 + 4 * v120;
            if (v126 >= 0xFFFFFFFE) {
              uint64_t v126 = 4294967294;
            }
            else {
              uint64_t v126 = v126;
            }
            unint64_t v110 = v126 << 32;
            uint64_t v111 = (v123 * v125 + 4 * v119);
            unint64_t v106 = (char *)v664;
            if (v664) {
              goto LABEL_125;
            }
          }
          unint64_t v127 = v110 | v111;
          int v128 = v577;
          if (!v577) {
            goto LABEL_128;
          }
          goto LABEL_127;
        }
      }
      else
      {
        int v103 = v572;
        if (!v572) {
          goto LABEL_736;
        }
        BOOL v102 = 0;
      }
      unint64_t v533 = v573;
      unint64_t v534 = sub_46C760(v103);
      if (v533 >= v534 || !v102)
      {
        if (v102 == v533 < v534) {
          goto LABEL_736;
        }
        goto LABEL_113;
      }
      uint64_t v536 = sub_46C8EC((void *)v579, *((uint64_t *)&v579 + 1));
      if (v536 != sub_46C8EC(v572, v573)) {
        goto LABEL_113;
      }
LABEL_736:
      unint64_t v127 = -1;
      int v128 = v577;
      if (v577)
      {
LABEL_127:
        v578 = v128;
        operator delete(v128);
      }
LABEL_128:
      if (v575)
      {
        v576 = v575;
        operator delete(v575);
      }
      if (v584)
      {
        v585 = v584;
        operator delete(v584);
      }
      if (v581)
      {
        v582 = v581;
        operator delete(v581);
      }
      unint64_t v558 = HIDWORD(v561);
      unint64_t v129 = HIDWORD(v127);
      v557 = v14;
LABEL_135:
      uint64_t v130 = v129;
      uint64_t v131 = v127;
LABEL_136:
      unint64_t v132 = HIDWORD(v562);
      uint64_t v133 = v562;
      unint64_t v565 = HIDWORD(v562);
LABEL_137:
      unint64_t v134 = v567;
      double v135 = sqrt((double)((v558 - v132) * (v558 - v132)
                         + (v561 - v133) * (v561 - v133)))
           / 100.0;
      double v136 = sqrt((double)((v558 - v130) * (v558 - v130)
                         + (v561 - v131) * ((unint64_t)v561 - v131)))
           / 100.0;
      unint64_t v567 = v561 | ((unint64_t)v558 << 32);
      while (1)
      {
        if (v658 == v659 || v642 == v643)
        {
          if ((v658 == v659) == (v642 == v643)) {
            break;
          }
          goto LABEL_159;
        }
        if (v654 != v638) {
          goto LABEL_159;
        }
        if ((void)v653)
        {
          unint64_t v138 = *((void *)&v653 + 1);
          int v139 = v138 < sub_46C760((void *)v653);
          double v140 = (void *)v637;
          if (!(void)v637) {
            goto LABEL_157;
          }
        }
        else
        {
          int v139 = 0;
          double v140 = (void *)v637;
          if (!(void)v637)
          {
LABEL_157:
            int v143 = 0;
            goto LABEL_158;
          }
        }
        unint64_t v141 = *((void *)&v637 + 1);
        unint64_t v142 = sub_46C760(v140);
        int v143 = v141 < v142;
        if (v141 < v142) {
          int v144 = v139;
        }
        else {
          int v144 = 0;
        }
        if (v144 == 1)
        {
          uint64_t v145 = sub_46C8EC((void *)v653, *((uint64_t *)&v653 + 1));
          if (v145 == sub_46C8EC((void *)v637, *((uint64_t *)&v637 + 1))) {
            break;
          }
          goto LABEL_159;
        }
LABEL_158:
        if (v139 == v143) {
          break;
        }
LABEL_159:
        if (v650 == v651 || v634 == v635)
        {
          int v147 = (v650 == v651) ^ (v634 == v635);
          goto LABEL_177;
        }
        if (v646 != v630) {
          goto LABEL_178;
        }
        if ((void)v645)
        {
          unint64_t v148 = *((void *)&v645 + 1);
          BOOL v149 = v148 < sub_46C760((void *)v645);
          uint64_t v150 = (void *)v629;
          if ((void)v629) {
            goto LABEL_168;
          }
        }
        else
        {
          BOOL v149 = 0;
          uint64_t v150 = (void *)v629;
          if ((void)v629)
          {
LABEL_168:
            unint64_t v151 = *((void *)&v629 + 1);
            unint64_t v152 = sub_46C760(v150);
            BOOL v153 = v151 < v152;
            if (v151 < v152 && v149)
            {
              uint64_t v155 = sub_46C8EC((void *)v645, *((uint64_t *)&v645 + 1));
              if (v155 == sub_46C8EC((void *)v629, *((uint64_t *)&v629 + 1))) {
                break;
              }
              goto LABEL_178;
            }
            goto LABEL_176;
          }
        }
        BOOL v153 = 0;
LABEL_176:
        int v147 = v149 ^ v153;
LABEL_177:
        if ((v147 ^ 1)) {
          break;
        }
LABEL_178:
        if (v9 >= v6) {
          break;
        }
        double v156 = sqrt((double)((HIDWORD(v134) - v130) * (HIDWORD(v134) - v130)
                           + (v134 - v131) * (v134 - v131)))
             / 100.0;
        if (v156 >= v135) {
          double v157 = v135;
        }
        else {
          double v157 = v156;
        }
        double v158 = v136;
        if (v136 >= v157)
        {
          double v158 = v135;
          if (v135 >= v156)
          {
            if (v9 < v156) {
              double v9 = v156;
            }
            unint64_t v567 = v134;
            goto LABEL_316;
          }
        }
        if (v9 < v158) {
          double v9 = v158;
        }
        unint64_t v159 = v654;
        ++*((void *)&v653 + 1);
        long double v160 = v659;
        int64x2_t v161 = (char *)v658;
        if (v654 >= ((v659 - (unsigned char *)v658) >> 4) - 1)
        {
          long long v162 = v642;
          long double v163 = v643;
          if (v658 != v659) {
            goto LABEL_203;
          }
LABEL_138:
          if ((v161 == v160) != (v162 == v163)) {
            goto LABEL_216;
          }
          goto LABEL_139;
        }
        do
        {
          double v164 = &v161[16 * v159];
          if ((void)v653)
          {
            unint64_t v165 = *((void *)&v653 + 1);
            unint64_t v166 = sub_46C760((void *)v653);
            BOOL v167 = v165 < v166;
            long long v168 = *(void **)v164;
            if (!*(void *)v164)
            {
              if (v165 < v166) {
                break;
              }
              goto LABEL_190;
            }
          }
          else
          {
            long long v168 = *(void **)v164;
            if (!*(void *)v164) {
              goto LABEL_190;
            }
            BOOL v167 = 0;
          }
          double v169 = &v161[16 * v159];
          unint64_t v172 = *((void *)v169 + 1);
          uint64_t v170 = (uint64_t *)(v169 + 8);
          unint64_t v171 = v172;
          unint64_t v173 = sub_46C760(v168);
          if (v172 >= v173 || !v167)
          {
            if ((v167 ^ (v171 < v173))) {
              break;
            }
            goto LABEL_190;
          }
          uint64_t v175 = sub_46C8EC((void *)v653, *((uint64_t *)&v653 + 1));
          if (v175 != sub_46C8EC(*(void **)v164, *v170)) {
            break;
          }
LABEL_190:
          unint64_t v159 = v654 + 1;
          unint64_t v654 = v159;
          long long v653 = *((_OWORD *)v655 + v159);
          int64x2_t v161 = (char *)v658;
        }
        while (v159 < ((v659 - (unsigned char *)v658) >> 4) - 1);
        int64x2_t v161 = (char *)v658;
        long double v160 = v659;
        long long v162 = v642;
        long double v163 = v643;
        if (v658 == v659) {
          goto LABEL_138;
        }
LABEL_203:
        if (v162 == v163) {
          goto LABEL_138;
        }
        uint64_t v176 = (void *)v653;
        if (v654 != v638) {
          goto LABEL_217;
        }
        if ((void)v653)
        {
          unint64_t v177 = *((void *)&v653 + 1);
          int v178 = v177 < sub_46C760((void *)v653);
          unint64_t v179 = (void *)v637;
          if ((void)v637) {
            goto LABEL_207;
          }
LABEL_214:
          int v182 = 0;
          goto LABEL_215;
        }
        int v178 = 0;
        unint64_t v179 = (void *)v637;
        if (!(void)v637) {
          goto LABEL_214;
        }
LABEL_207:
        unint64_t v180 = *((void *)&v637 + 1);
        unint64_t v181 = sub_46C760(v179);
        int v182 = v180 < v181;
        if (v180 < v181) {
          int v183 = v178;
        }
        else {
          int v183 = 0;
        }
        if (v183 == 1)
        {
          uint64_t v184 = sub_46C8EC((void *)v653, *((uint64_t *)&v653 + 1));
          if (v184 != sub_46C8EC((void *)v637, *((uint64_t *)&v637 + 1)))
          {
LABEL_216:
            uint64_t v176 = (void *)v653;
LABEL_217:
            uint64_t v185 = *a1;
            uint64_t v186 = sub_46C8EC(v176, *((uint64_t *)&v653 + 1));
            sub_2954EC(v185, *(void *)(v186 + 32), (uint64_t)&v667);
            uint64_t v187 = v668;
            if (v668 == (void *)v669)
            {
              LODWORD(v561) = -1;
              LODWORD(v558) = -1;
              if (v668) {
                goto LABEL_310;
              }
              goto LABEL_311;
            }
            if (!(_BYTE)v670)
            {
              unint64_t v189 = *(void *)(v669 - 8);
              uint64_t v193 = v667;
              int v681 = 1;
              v682[0] = v189;
              v663 = &v681;
              v664 = v682;
              unint64_t v194 = *((void *)v667 + 482) + 1;
              *((void *)v667 + 482) = v194;
              if (*(void *)v193)
              {
                if (v193[28] == v189)
                {
                  unsigned int v195 = 4;
                  goto LABEL_241;
                }
                if (v193[34] == v189)
                {
                  unsigned int v195 = 5;
                  goto LABEL_241;
                }
                if (v193[40] == v189)
                {
                  unsigned int v195 = 6;
                  goto LABEL_241;
                }
                if (v193[46] == v189)
                {
                  unsigned int v195 = 7;
LABEL_241:
                  ++*((void *)v193 + 483);
                  uint64_t v197 = (uint64_t)&v193[6 * v195 + 4];
                  *(void *)(v197 + 8) = v194;
                  int v198 = *(unsigned int **)(v197 + 16);
                  if (v198)
                  {
LABEL_242:
                    uint64_t v199 = (int *)((char *)v198 + *v198);
LABEL_304:
                    v237 = (unsigned int *)((char *)v199 + *(unsigned __int16 *)((char *)v199 - *v199 + 4));
                    uint64_t v238 = (uint64_t)&v237[HIDWORD(v189)] + *v237;
                    v239 = (int *)(v238 + 4 + *(unsigned int *)(v238 + 4));
                    v240 = (unsigned int *)((char *)v239 + *(unsigned __int16 *)((char *)v239 - *v239 + 6));
                    LODWORD(v240) = *(unsigned int *)((char *)v240 + *v240) - 1;
                    v674 = v667;
                    v675 = &v668;
                    long long v676 = 0u;
                    long long v677 = 0u;
                    int v678 = (((void)v669 - (void)v668) >> 3) - 1;
                    unsigned int v679 = v240;
                    char v680 = 0;
                    sub_2E1D08((uint64_t)&v674);
                    v226 = (char *)*((void *)&v676 + 1);
                    v228 = (int *)&v677 + 2;
                    uint64_t v227 = v679;
                    LODWORD(v189) = DWORD2(v677);
                    goto LABEL_305;
                  }
                }
                else
                {
                  unint64_t v229 = *((void *)v193 + 21);
                  unint64_t v230 = *((void *)v193 + 18);
                  unint64_t v231 = *((void *)v193 + 15);
                  unint64_t v232 = *((void *)v193 + 24);
                  int v198 = (unsigned int *)sub_2AB884(*(void *)v193, 1, v189, 1);
                  if (v231 >= v194) {
                    unint64_t v233 = v194;
                  }
                  else {
                    unint64_t v233 = v231;
                  }
                  BOOL v234 = v230 >= v233;
                  if (v230 < v233) {
                    unint64_t v233 = v230;
                  }
                  unsigned int v235 = 4 * (v231 < v194);
                  if (!v234) {
                    unsigned int v235 = 5;
                  }
                  if (v229 < v233)
                  {
                    unsigned int v235 = 6;
                    unint64_t v233 = v229;
                  }
                  if (v232 < v233) {
                    unsigned int v235 = 7;
                  }
                  uint64_t v236 = (uint64_t)&v193[6 * v235 + 4];
                  *(_DWORD *)uint64_t v236 = v682[0];
                  *(void *)(v236 + 8) = *((void *)v193 + 482);
                  *(void *)(v236 + 16) = v198;
                  if (v198) {
                    goto LABEL_242;
                  }
                }
              }
              sub_296654(&v663);
              uint64_t v199 = 0;
              goto LABEL_304;
            }
            float64x2_t v188 = v667;
            unint64_t v189 = *(void *)v668;
            int v673 = *(void *)v668;
            int v681 = 1;
            v682[0] = v189;
            v663 = &v681;
            v664 = v682;
            unint64_t v190 = *((void *)v667 + 482) + 1;
            *((void *)v667 + 482) = v190;
            if (!*(void *)v188) {
              goto LABEL_255;
            }
            float64x2_t v191 = v188 + 4;
            if (v188[28] == v189)
            {
              unsigned int v192 = 4;
              goto LABEL_237;
            }
            if (v188[34] == v189)
            {
              unsigned int v192 = 5;
              goto LABEL_237;
            }
            if (v188[40] == v189)
            {
              unsigned int v192 = 6;
              goto LABEL_237;
            }
            if (v188[46] != v189)
            {
              unint64_t v200 = *((void *)v188 + 21);
              unint64_t v201 = *((void *)v188 + 18);
              unint64_t v202 = *((void *)v188 + 15);
              unint64_t v559 = *((void *)v188 + 24);
              uint64_t v203 = sub_2AB884(*(void *)v188, 1, v189, 1);
              if (v202 >= v190) {
                unint64_t v204 = v190;
              }
              else {
                unint64_t v204 = v202;
              }
              BOOL v205 = v201 >= v204;
              if (v201 < v204) {
                unint64_t v204 = v201;
              }
              unsigned int v206 = 4 * (v202 < v190);
              if (!v205) {
                unsigned int v206 = 5;
              }
              if (v200 < v204)
              {
                unsigned int v206 = 6;
                unint64_t v204 = v200;
              }
              if (v559 < v204) {
                unsigned int v206 = 7;
              }
              unsigned int v207 = &v191[6 * v206];
              *unsigned int v207 = v682[0];
              *((void *)v207 + 1) = *((void *)v188 + 482);
              *((void *)v207 + 2) = v203;
              if (v203) {
                goto LABEL_256;
              }
LABEL_255:
              sub_296654(&v663);
              goto LABEL_256;
            }
            unsigned int v192 = 7;
LABEL_237:
            ++*((void *)v188 + 483);
            v196 = &v191[6 * v192];
            *((void *)v196 + 1) = v190;
            if (!*((void *)v196 + 2)) {
              goto LABEL_255;
            }
LABEL_256:
            int v681 = 1;
            v682[0] = v189;
            v663 = &v681;
            v664 = v682;
            unint64_t v208 = *((void *)v188 + 482) + 1;
            *((void *)v188 + 482) = v208;
            if (!*(void *)v188) {
              goto LABEL_280;
            }
            int v209 = v188 + 4;
            if (v188[28] == v189)
            {
              unsigned int v210 = 4;
              goto LABEL_265;
            }
            if (v188[34] == v189)
            {
              unsigned int v210 = 5;
              goto LABEL_265;
            }
            if (v188[40] == v189)
            {
              unsigned int v210 = 6;
              goto LABEL_265;
            }
            if (v188[46] != v189)
            {
              unint64_t v215 = *((void *)v188 + 21);
              unint64_t v216 = *((void *)v188 + 18);
              unint64_t v217 = *((void *)v188 + 15);
              unint64_t v560 = *((void *)v188 + 24);
              v212 = (unsigned int *)sub_2AB884(*(void *)v188, 1, v189, 1);
              if (v217 >= v208) {
                unint64_t v218 = v208;
              }
              else {
                unint64_t v218 = v217;
              }
              BOOL v219 = v216 >= v218;
              if (v216 < v218) {
                unint64_t v218 = v216;
              }
              unsigned int v220 = 4 * (v217 < v208);
              if (!v219) {
                unsigned int v220 = 5;
              }
              if (v215 < v218)
              {
                unsigned int v220 = 6;
                unint64_t v218 = v215;
              }
              if (v560 < v218) {
                unsigned int v220 = 7;
              }
              v221 = &v209[6 * v220];
              int *v221 = v682[0];
              *((void *)v221 + 1) = *((void *)v188 + 482);
              *((void *)v221 + 2) = v212;
              if (v212) {
                goto LABEL_266;
              }
LABEL_280:
              sub_296654(&v663);
              v213 = 0;
              v214 = (_WORD *)(&loc_1120530 + 1);
              if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                goto LABEL_283;
              }
              goto LABEL_281;
            }
            unsigned int v210 = 7;
LABEL_265:
            ++*((void *)v188 + 483);
            v211 = &v209[6 * v210];
            *((void *)v211 + 1) = v208;
            v212 = (unsigned int *)*((void *)v211 + 2);
            if (!v212) {
              goto LABEL_280;
            }
LABEL_266:
            v213 = (int *)((char *)v212 + *v212);
            v214 = (unsigned __int16 *)((char *)v213 - *v213);
            if (*v214 < 5u)
            {
LABEL_283:
              v223 = 0;
              goto LABEL_284;
            }
LABEL_281:
            uint64_t v222 = v214[2];
            if (!v222) {
              goto LABEL_283;
            }
            v223 = (char *)v213 + v222 + *(unsigned int *)((char *)v213 + v222);
LABEL_284:
            v224 = &v223[4 * HIDWORD(v189) + 4 + *(unsigned int *)&v223[4 * HIDWORD(v189) + 4]];
            v225 = &v224[-*(int *)v224];
            if (*((_WORD *)v225 + 3))
            {
              v226 = &v224[*((unsigned __int16 *)v225 + 3) + *(unsigned int *)&v224[*((unsigned __int16 *)v225 + 3)]];
              if (*(unsigned __int16 *)v225 < 0xBu)
              {
LABEL_289:
                uint64_t v227 = 0;
                goto LABEL_290;
              }
            }
            else
            {
              v226 = 0;
              if (*(unsigned __int16 *)v225 < 0xBu) {
                goto LABEL_289;
              }
            }
            uint64_t v227 = *((unsigned __int16 *)v225 + 5);
            if (v227) {
              goto LABEL_289;
            }
LABEL_290:
            v228 = &v673;
LABEL_305:
            v241 = &v226[4 * v227];
            int v242 = *((unsigned __int16 *)v241 + 2);
            int v243 = *((unsigned __int16 *)v241 + 3);
            unsigned int v244 = sub_511FC(v189);
            unsigned int v245 = *v228 & ~(-1 << (v244 & 0xFE));
            int v246 = sub_51938(v245);
            int v247 = sub_51938(v245 >> 1);
            int v248 = 1 << -(v244 >> 1);
            if (v244 < 2) {
              int v248 = -2;
            }
            unsigned int v249 = v247 * v248 + 4 * v243;
            if (v249 >= 0xFFFFFFFE) {
              unsigned int v249 = -2;
            }
            LODWORD(v558) = v249;
            LODWORD(v561) = v246 * v248 + 4 * v242;
            uint64_t v187 = v668;
            unint64_t v14 = v557;
            if (v668)
            {
LABEL_310:
              *(void *)&long long v669 = v187;
              operator delete(v187);
            }
LABEL_311:
            unint64_t v132 = HIDWORD(v562);
            uint64_t v133 = v562;
            if (v136 >= v157) {
              goto LABEL_137;
            }
LABEL_316:
            unint64_t v250 = v646;
            ++*((void *)&v645 + 1);
            v251 = v651;
            v252 = (char *)v650;
            if (v646 >= ((v651 - (unsigned char *)v650) >> 4) - 1)
            {
              unint64_t v562 = v131 | (v130 << 32);
              v253 = v634;
              v254 = v635;
              if (v650 != v651) {
                goto LABEL_333;
              }
              goto LABEL_343;
            }
            while (2)
            {
              v255 = &v252[16 * v250];
              if (!(void)v645)
              {
                v259 = *(void **)v255;
                if (*(void *)v255)
                {
                  BOOL v258 = 0;
                  goto LABEL_327;
                }
LABEL_320:
                unint64_t v250 = v646 + 1;
                unint64_t v646 = v250;
                long long v645 = *((_OWORD *)v647 + v250);
                v252 = (char *)v650;
                if (v250 >= ((v651 - (unsigned char *)v650) >> 4) - 1) {
                  goto LABEL_332;
                }
                continue;
              }
              break;
            }
            unint64_t v256 = *((void *)&v645 + 1);
            unint64_t v257 = sub_46C760((void *)v645);
            BOOL v258 = v256 < v257;
            v259 = *(void **)v255;
            if (!*(void *)v255)
            {
              if (v256 < v257) {
                goto LABEL_332;
              }
              goto LABEL_320;
            }
LABEL_327:
            v260 = &v252[16 * v250];
            unint64_t v263 = *((void *)v260 + 1);
            v262 = (uint64_t *)(v260 + 8);
            unint64_t v261 = v263;
            unint64_t v264 = sub_46C760(v259);
            if (v263 >= v264 || !v258)
            {
              if ((v258 ^ (v261 < v264))) {
                goto LABEL_332;
              }
              goto LABEL_320;
            }
            uint64_t v266 = sub_46C8EC((void *)v645, *((uint64_t *)&v645 + 1));
            if (v266 == sub_46C8EC(*(void **)v255, *v262)) {
              goto LABEL_320;
            }
LABEL_332:
            v252 = (char *)v650;
            v251 = v651;
            unint64_t v562 = v131 | (v130 << 32);
            v253 = v634;
            v254 = v635;
            if (v650 == v651) {
              goto LABEL_343;
            }
LABEL_333:
            if (v253 != v254)
            {
              v267 = (void *)v645;
              if (v646 != v630) {
                goto LABEL_349;
              }
              if ((void)v645)
              {
                unint64_t v268 = *((void *)&v645 + 1);
                int v269 = v268 < sub_46C760((void *)v645);
                v270 = (void *)v629;
                if ((void)v629) {
                  goto LABEL_337;
                }
LABEL_346:
                int v273 = 0;
                goto LABEL_347;
              }
              int v269 = 0;
              v270 = (void *)v629;
              if (!(void)v629) {
                goto LABEL_346;
              }
LABEL_337:
              unint64_t v271 = *((void *)&v629 + 1);
              unint64_t v272 = sub_46C760(v270);
              int v273 = v271 < v272;
              if (v271 < v272) {
                int v274 = v269;
              }
              else {
                int v274 = 0;
              }
              if (v274 == 1)
              {
                uint64_t v275 = sub_46C8EC((void *)v645, *((uint64_t *)&v645 + 1));
                if (v275 != sub_46C8EC((void *)v629, *((uint64_t *)&v629 + 1))) {
                  goto LABEL_348;
                }
              }
              else
              {
LABEL_347:
                if (v269 != v273) {
                  goto LABEL_348;
                }
              }
              goto LABEL_136;
            }
LABEL_343:
            if ((v252 == v251) == (v253 == v254)) {
              goto LABEL_136;
            }
LABEL_348:
            v267 = (void *)v645;
LABEL_349:
            uint64_t v276 = *a1;
            uint64_t v277 = sub_46C8EC(v267, *((uint64_t *)&v645 + 1));
            sub_2954EC(v276, *(void *)(v277 + 32), (uint64_t)&v667);
            v278 = v668;
            if (v668 == (void *)v669)
            {
              LODWORD(v127) = -1;
              LODWORD(v129) = -1;
              if (!v668) {
                goto LABEL_135;
              }
              goto LABEL_443;
            }
            if (!(_BYTE)v670)
            {
              unint64_t v284 = *(void *)(v669 - 8);
              v285 = v667;
              int v681 = 1;
              v682[0] = v284;
              v663 = &v681;
              v664 = v682;
              unint64_t v286 = *((void *)v667 + 482) + 1;
              *((void *)v667 + 482) = v286;
              if (*(void *)v285)
              {
                v287 = v285 + 4;
                if (v285[28] == v284)
                {
                  unsigned int v288 = 4;
                  goto LABEL_373;
                }
                if (v285[34] == v284)
                {
                  unsigned int v288 = 5;
                  goto LABEL_373;
                }
                if (v285[40] == v284)
                {
                  unsigned int v288 = 6;
                  goto LABEL_373;
                }
                if (v285[46] == v284)
                {
                  unsigned int v288 = 7;
LABEL_373:
                  ++*((void *)v285 + 483);
                  v290 = &v287[6 * v288];
                  *((void *)v290 + 1) = v286;
                  v291 = (unsigned int *)*((void *)v290 + 2);
                  if (v291)
                  {
LABEL_374:
                    v292 = v14;
                    v293 = (int *)((char *)v291 + *v291);
LABEL_436:
                    v334 = (unsigned int *)((char *)v293 + *(unsigned __int16 *)((char *)v293 - *v293 + 4));
                    uint64_t v335 = (uint64_t)&v334[HIDWORD(v284)] + *v334;
                    v336 = (int *)(v335 + 4 + *(unsigned int *)(v335 + 4));
                    v337 = (unsigned int *)((char *)v336 + *(unsigned __int16 *)((char *)v336 - *v336 + 6));
                    LODWORD(v337) = *(unsigned int *)((char *)v337 + *v337) - 1;
                    v674 = v667;
                    v675 = &v668;
                    long long v676 = 0u;
                    long long v677 = 0u;
                    int v678 = (((void)v669 - (void)v668) >> 3) - 1;
                    unsigned int v679 = v337;
                    char v680 = 0;
                    sub_2E1D08((uint64_t)&v674);
                    v322 = (char *)*((void *)&v676 + 1);
                    v324 = (int *)&v677 + 2;
                    uint64_t v323 = v679;
                    LODWORD(v280) = DWORD2(v677);
                    goto LABEL_437;
                  }
                }
                else
                {
                  v325 = v14;
                  unint64_t v326 = *((void *)v285 + 21);
                  unint64_t v327 = *((void *)v285 + 18);
                  unint64_t v328 = *((void *)v285 + 15);
                  unint64_t v329 = *((void *)v285 + 24);
                  v291 = (unsigned int *)sub_2AB884(*(void *)v285, 1, v284, 1);
                  if (v328 >= v286) {
                    unint64_t v330 = v286;
                  }
                  else {
                    unint64_t v330 = v328;
                  }
                  BOOL v331 = v327 >= v330;
                  if (v327 < v330) {
                    unint64_t v330 = v327;
                  }
                  unsigned int v332 = 4 * (v328 < v286);
                  if (!v331) {
                    unsigned int v332 = 5;
                  }
                  if (v326 < v330)
                  {
                    unsigned int v332 = 6;
                    unint64_t v330 = v326;
                  }
                  if (v329 < v330) {
                    unsigned int v332 = 7;
                  }
                  v333 = &v287[6 * v332];
                  int *v333 = v682[0];
                  *((void *)v333 + 1) = *((void *)v285 + 482);
                  *((void *)v333 + 2) = v291;
                  unint64_t v14 = v325;
                  if (v291) {
                    goto LABEL_374;
                  }
                }
              }
              v292 = v14;
              sub_296654(&v663);
              v293 = 0;
              goto LABEL_436;
            }
            v279 = v667;
            unint64_t v280 = *(void *)v668;
            int v673 = *(void *)v668;
            int v681 = 1;
            v682[0] = v280;
            v663 = &v681;
            v664 = v682;
            unint64_t v281 = *((void *)v667 + 482) + 1;
            *((void *)v667 + 482) = v281;
            if (!*(void *)v279) {
              goto LABEL_387;
            }
            v282 = v279 + 4;
            if (v279[28] == v280)
            {
              unsigned int v283 = 4;
              goto LABEL_369;
            }
            if (v279[34] == v280)
            {
              unsigned int v283 = 5;
              goto LABEL_369;
            }
            if (v279[40] == v280)
            {
              unsigned int v283 = 6;
              goto LABEL_369;
            }
            if (v279[46] != v280)
            {
              unint64_t v294 = *((void *)v279 + 21);
              unint64_t v295 = *((void *)v279 + 18);
              unint64_t v296 = *((void *)v279 + 15);
              unint64_t v297 = *((void *)v279 + 24);
              uint64_t v298 = sub_2AB884(*(void *)v279, 1, v280, 1);
              if (v296 >= v281) {
                unint64_t v299 = v281;
              }
              else {
                unint64_t v299 = v296;
              }
              BOOL v300 = v295 >= v299;
              if (v295 < v299) {
                unint64_t v299 = v295;
              }
              unsigned int v301 = 4 * (v296 < v281);
              if (!v300) {
                unsigned int v301 = 5;
              }
              if (v294 < v299)
              {
                unsigned int v301 = 6;
                unint64_t v299 = v294;
              }
              if (v297 < v299) {
                unsigned int v301 = 7;
              }
              v302 = &v282[6 * v301];
              int *v302 = v682[0];
              *((void *)v302 + 1) = *((void *)v279 + 482);
              *((void *)v302 + 2) = v298;
              unint64_t v14 = v557;
              if (v298) {
                goto LABEL_388;
              }
LABEL_387:
              sub_296654(&v663);
              goto LABEL_388;
            }
            unsigned int v283 = 7;
LABEL_369:
            ++*((void *)v279 + 483);
            v289 = &v282[6 * v283];
            *((void *)v289 + 1) = v281;
            if (!*((void *)v289 + 2)) {
              goto LABEL_387;
            }
LABEL_388:
            int v681 = 1;
            v682[0] = v280;
            v663 = &v681;
            v664 = v682;
            unint64_t v303 = *((void *)v279 + 482) + 1;
            *((void *)v279 + 482) = v303;
            if (!*(void *)v279) {
              goto LABEL_412;
            }
            v304 = v279 + 4;
            if (v279[28] == v280)
            {
              unsigned int v305 = 4;
              goto LABEL_397;
            }
            if (v279[34] == v280)
            {
              unsigned int v305 = 5;
              goto LABEL_397;
            }
            if (v279[40] == v280)
            {
              unsigned int v305 = 6;
              goto LABEL_397;
            }
            if (v279[46] != v280)
            {
              unint64_t v310 = *((void *)v279 + 21);
              unint64_t v311 = *((void *)v279 + 18);
              unint64_t v312 = *((void *)v279 + 15);
              unint64_t v313 = *((void *)v279 + 24);
              v307 = (unsigned int *)sub_2AB884(*(void *)v279, 1, v280, 1);
              if (v312 >= v303) {
                unint64_t v314 = v303;
              }
              else {
                unint64_t v314 = v312;
              }
              BOOL v315 = v311 >= v314;
              if (v311 < v314) {
                unint64_t v314 = v311;
              }
              unsigned int v316 = 4 * (v312 < v303);
              if (!v315) {
                unsigned int v316 = 5;
              }
              if (v310 < v314)
              {
                unsigned int v316 = 6;
                unint64_t v314 = v310;
              }
              if (v313 < v314) {
                unsigned int v316 = 7;
              }
              v317 = &v304[6 * v316];
              int *v317 = v682[0];
              *((void *)v317 + 1) = *((void *)v279 + 482);
              *((void *)v317 + 2) = v307;
              unint64_t v14 = v557;
              if (v307) {
                goto LABEL_398;
              }
LABEL_412:
              sub_296654(&v663);
              v308 = 0;
              v309 = (_WORD *)(&loc_1120530 + 1);
              if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                goto LABEL_415;
              }
              goto LABEL_413;
            }
            unsigned int v305 = 7;
LABEL_397:
            ++*((void *)v279 + 483);
            v306 = &v304[6 * v305];
            *((void *)v306 + 1) = v303;
            v307 = (unsigned int *)*((void *)v306 + 2);
            if (!v307) {
              goto LABEL_412;
            }
LABEL_398:
            v308 = (int *)((char *)v307 + *v307);
            v309 = (unsigned __int16 *)((char *)v308 - *v308);
            if (*v309 < 5u)
            {
LABEL_415:
              v319 = 0;
              goto LABEL_416;
            }
LABEL_413:
            uint64_t v318 = v309[2];
            if (!v318) {
              goto LABEL_415;
            }
            v319 = (char *)v308 + v318 + *(unsigned int *)((char *)v308 + v318);
LABEL_416:
            v320 = &v319[4 * HIDWORD(v280) + 4 + *(unsigned int *)&v319[4 * HIDWORD(v280) + 4]];
            v321 = &v320[-*(int *)v320];
            if (*((_WORD *)v321 + 3))
            {
              v322 = &v320[*((unsigned __int16 *)v321 + 3) + *(unsigned int *)&v320[*((unsigned __int16 *)v321 + 3)]];
              v292 = v14;
              if (*(unsigned __int16 *)v321 < 0xBu)
              {
LABEL_421:
                uint64_t v323 = 0;
                goto LABEL_422;
              }
            }
            else
            {
              v322 = 0;
              v292 = v14;
              if (*(unsigned __int16 *)v321 < 0xBu) {
                goto LABEL_421;
              }
            }
            uint64_t v323 = *((unsigned __int16 *)v321 + 5);
            if (v323) {
              goto LABEL_421;
            }
LABEL_422:
            v324 = &v673;
LABEL_437:
            v338 = &v322[4 * v323];
            int v339 = *((unsigned __int16 *)v338 + 2);
            int v340 = *((unsigned __int16 *)v338 + 3);
            unsigned int v341 = sub_511FC(v280);
            unsigned int v342 = *v324 & ~(-1 << (v341 & 0xFE));
            int v343 = sub_51938(v342);
            int v344 = sub_51938(v342 >> 1);
            int v345 = 1 << -(v341 >> 1);
            if (v341 < 2) {
              int v345 = -2;
            }
            if ((v344 * v345 + 4 * v340) >= 0xFFFFFFFE) {
              LODWORD(v129) = -2;
            }
            else {
              LODWORD(v129) = v344 * v345 + 4 * v340;
            }
            LODWORD(v127) = v343 * v345 + 4 * v339;
            v278 = v668;
            unint64_t v14 = v292;
            if (v668)
            {
LABEL_443:
              *(void *)&long long v669 = v278;
              operator delete(v278);
              goto LABEL_135;
            }
            goto LABEL_135;
          }
        }
        else
        {
LABEL_215:
          if (v178 != v182) {
            goto LABEL_216;
          }
        }
LABEL_139:
        unint64_t v134 = v561 | ((unint64_t)v558 << 32);
        if (v136 < v157) {
          goto LABEL_316;
        }
      }
      uint64_t v568 = v562;
      unint64_t v5 = v570;
      unint64_t v346 = HIDWORD(v562);
      while (2)
      {
        if (v658 == v659 || v642 == v643)
        {
          if ((v658 == v659) != (v642 == v643)) {
            goto LABEL_465;
          }
        }
        else
        {
          if (v654 != v638) {
            goto LABEL_465;
          }
          if ((void)v653)
          {
            unint64_t v348 = *((void *)&v653 + 1);
            BOOL v349 = v348 < sub_46C760((void *)v653);
            v350 = (void *)v637;
            if ((void)v637) {
              goto LABEL_455;
            }
LABEL_463:
            BOOL v353 = 0;
            goto LABEL_464;
          }
          BOOL v349 = 0;
          v350 = (void *)v637;
          if (!(void)v637) {
            goto LABEL_463;
          }
LABEL_455:
          unint64_t v351 = *((void *)&v637 + 1);
          unint64_t v352 = sub_46C760(v350);
          BOOL v353 = v351 < v352;
          if (v351 < v352 && v349)
          {
            uint64_t v355 = sub_46C8EC((void *)v653, *((uint64_t *)&v653 + 1));
            if (v355 == sub_46C8EC((void *)v637, *((uint64_t *)&v637 + 1))) {
              break;
            }
LABEL_465:
            if (v9 < v6)
            {
              uint64_t v356 = *a1;
              uint64_t v357 = sub_46C8EC((void *)v653, *((uint64_t *)&v653 + 1));
              sub_2954EC(v356, *(void *)(v357 + 32), (uint64_t)&v667);
              v358 = v668;
              if (v668 == (void *)v669)
              {
                unsigned int v364 = -1;
                unsigned int v365 = -1;
                if (v668) {
                  goto LABEL_553;
                }
                goto LABEL_554;
              }
              if ((_BYTE)v670)
              {
                v359 = v667;
                unint64_t v360 = *(void *)v668;
                int v673 = *(void *)v668;
                int v681 = 1;
                v682[0] = v360;
                v663 = &v681;
                v664 = v682;
                unint64_t v361 = *((void *)v667 + 482) + 1;
                *((void *)v667 + 482) = v361;
                if (!*(void *)v359) {
                  goto LABEL_487;
                }
                v362 = v359 + 4;
                if (v359[28] == v360)
                {
                  unsigned int v363 = 4;
                  goto LABEL_486;
                }
                if (v359[34] == v360)
                {
                  unsigned int v363 = 5;
                  goto LABEL_486;
                }
                if (v359[40] == v360)
                {
                  unsigned int v363 = 6;
                  goto LABEL_486;
                }
                if (v359[46] == v360)
                {
                  unsigned int v363 = 7;
LABEL_486:
                  ++*((void *)v359 + 483);
                  v370 = &v362[6 * v363];
                  *((void *)v370 + 1) = v361;
                  if (!*((void *)v370 + 2)) {
LABEL_487:
                  }
                    sub_296654(&v663);
                }
                else
                {
                  unint64_t v382 = *((void *)v359 + 21);
                  unint64_t v383 = *((void *)v359 + 18);
                  unint64_t v384 = *((void *)v359 + 15);
                  unint64_t v563 = *((void *)v359 + 24);
                  uint64_t v385 = sub_2AB884(*(void *)v359, 1, v360, 1);
                  if (v384 >= v361) {
                    unint64_t v386 = v361;
                  }
                  else {
                    unint64_t v386 = v384;
                  }
                  BOOL v387 = v383 >= v386;
                  if (v383 < v386) {
                    unint64_t v386 = v383;
                  }
                  unsigned int v388 = 4 * (v384 < v361);
                  if (!v387) {
                    unsigned int v388 = 5;
                  }
                  if (v382 < v386)
                  {
                    unsigned int v388 = 6;
                    unint64_t v386 = v382;
                  }
                  if (v563 < v386) {
                    unsigned int v388 = 7;
                  }
                  v389 = &v362[6 * v388];
                  int *v389 = v682[0];
                  *((void *)v389 + 1) = *((void *)v359 + 482);
                  *((void *)v389 + 2) = v385;
                  if (!v385) {
                    goto LABEL_487;
                  }
                }
                int v681 = 1;
                v682[0] = v360;
                v663 = &v681;
                v664 = v682;
                unint64_t v371 = *((void *)v359 + 482) + 1;
                *((void *)v359 + 482) = v371;
                if (*(void *)v359)
                {
                  v372 = v359 + 4;
                  if (v359[28] == v360)
                  {
                    unsigned int v373 = 4;
                    goto LABEL_497;
                  }
                  if (v359[34] == v360)
                  {
                    unsigned int v373 = 5;
                    goto LABEL_497;
                  }
                  if (v359[40] == v360)
                  {
                    unsigned int v373 = 6;
                    goto LABEL_497;
                  }
                  if (v359[46] == v360)
                  {
                    unsigned int v373 = 7;
LABEL_497:
                    ++*((void *)v359 + 483);
                    v374 = &v372[6 * v373];
                    *((void *)v374 + 1) = v371;
                    v375 = (unsigned int *)*((void *)v374 + 2);
                    if (v375)
                    {
LABEL_498:
                      v376 = (int *)((char *)v375 + *v375);
                      v377 = (unsigned __int16 *)((char *)v376 - *v376);
                      if (*v377 < 5u) {
                        goto LABEL_499;
                      }
LABEL_530:
                      uint64_t v378 = v377[2];
                      if (v378) {
                        v378 += (uint64_t)v376 + *(unsigned int *)((char *)v376 + v378);
                      }
                      goto LABEL_532;
                    }
                  }
                  else
                  {
                    unint64_t v390 = *((void *)v359 + 21);
                    unint64_t v391 = *((void *)v359 + 18);
                    unint64_t v392 = *((void *)v359 + 15);
                    unint64_t v564 = *((void *)v359 + 24);
                    v375 = (unsigned int *)sub_2AB884(*(void *)v359, 1, v360, 1);
                    if (v392 >= v371) {
                      unint64_t v393 = v371;
                    }
                    else {
                      unint64_t v393 = v392;
                    }
                    BOOL v394 = v391 >= v393;
                    if (v391 < v393) {
                      unint64_t v393 = v391;
                    }
                    unsigned int v395 = 4 * (v392 < v371);
                    if (!v394) {
                      unsigned int v395 = 5;
                    }
                    if (v390 < v393)
                    {
                      unsigned int v395 = 6;
                      unint64_t v393 = v390;
                    }
                    if (v564 < v393) {
                      unsigned int v395 = 7;
                    }
                    v396 = &v372[6 * v395];
                    int *v396 = v682[0];
                    *((void *)v396 + 1) = *((void *)v359 + 482);
                    *((void *)v396 + 2) = v375;
                    if (v375) {
                      goto LABEL_498;
                    }
                  }
                }
                sub_296654(&v663);
                v376 = 0;
                v377 = (_WORD *)(&loc_1120530 + 1);
                if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) >= 5u) {
                  goto LABEL_530;
                }
LABEL_499:
                uint64_t v378 = 0;
LABEL_532:
                uint64_t v397 = 0;
                v398 = (int *)(v378 + 4 * HIDWORD(v360) + 4 + *(unsigned int *)(v378 + 4 * HIDWORD(v360) + 4));
                v399 = (unsigned int *)((char *)v398 + *(unsigned __int16 *)((char *)v398 - *v398 + 6));
                v400 = (char *)v399 + *v399;
                v401 = &v673;
LABEL_547:
                v414 = &v400[4 * v397];
                int v415 = *((unsigned __int16 *)v414 + 2);
                int v416 = *((unsigned __int16 *)v414 + 3);
                unsigned int v417 = sub_511FC(v360);
                unsigned int v418 = *v401 & ~(-1 << (v417 & 0xFE));
                int v419 = sub_51938(v418);
                int v420 = sub_51938(v418 >> 1);
                int v421 = 1 << -(v417 >> 1);
                if (v417 < 2) {
                  int v421 = -2;
                }
                if ((v420 * v421 + 4 * v416) >= 0xFFFFFFFE) {
                  unsigned int v365 = -2;
                }
                else {
                  unsigned int v365 = v420 * v421 + 4 * v416;
                }
                unsigned int v364 = v419 * v421 + 4 * v415;
                v358 = v668;
                unint64_t v5 = v570;
                unint64_t v346 = v565;
                if (v668)
                {
LABEL_553:
                  *(void *)&long long v669 = v358;
                  operator delete(v358);
                }
LABEL_554:
                double v422 = sqrt((double)((v364 - v568) * (v364 - v568) + (v365 - v346) * (v365 - v346))) / 100.0;
                if (v9 < v422) {
                  double v9 = v422;
                }
                unint64_t v423 = v654;
                ++*((void *)&v653 + 1);
LABEL_559:
                v424 = (char *)v658;
                if (v423 >= ((v659 - (unsigned char *)v658) >> 4) - 1) {
                  continue;
                }
                v425 = (void **)((char *)v658 + 16 * v423);
                if ((void)v653)
                {
                  unint64_t v426 = *((void *)&v653 + 1);
                  unint64_t v427 = sub_46C760((void *)v653);
                  BOOL v428 = v426 < v427;
                  v429 = *v425;
                  if (!*v425)
                  {
                    if (v426 < v427) {
                      continue;
                    }
                    goto LABEL_558;
                  }
                }
                else
                {
                  v429 = *v425;
                  if (!*v425)
                  {
LABEL_558:
                    unint64_t v423 = v654 + 1;
                    unint64_t v654 = v423;
                    long long v653 = *((_OWORD *)v655 + v423);
                    goto LABEL_559;
                  }
                  BOOL v428 = 0;
                }
                v430 = &v424[16 * v423];
                unint64_t v433 = *((void *)v430 + 1);
                v432 = (uint64_t *)(v430 + 8);
                unint64_t v431 = v433;
                unint64_t v434 = sub_46C760(v429);
                if (v433 < v434 && v428)
                {
                  uint64_t v436 = sub_46C8EC((void *)v653, *((uint64_t *)&v653 + 1));
                  if (v436 != sub_46C8EC(*v425, *v432)) {
                    continue;
                  }
                }
                else if ((v428 ^ (v431 < v434)))
                {
                  continue;
                }
                goto LABEL_558;
              }
              unint64_t v360 = *(void *)(v669 - 8);
              v366 = v667;
              int v681 = 1;
              v682[0] = v360;
              v663 = &v681;
              v664 = v682;
              unint64_t v367 = *((void *)v667 + 482) + 1;
              *((void *)v667 + 482) = v367;
              if (*(void *)v366)
              {
                v368 = v366 + 4;
                if (v366[28] == v360)
                {
                  unsigned int v369 = 4;
                  goto LABEL_502;
                }
                if (v366[34] == v360)
                {
                  unsigned int v369 = 5;
                  goto LABEL_502;
                }
                if (v366[40] == v360)
                {
                  unsigned int v369 = 6;
                  goto LABEL_502;
                }
                if (v366[46] == v360)
                {
                  unsigned int v369 = 7;
LABEL_502:
                  ++*((void *)v366 + 483);
                  v379 = &v368[6 * v369];
                  *((void *)v379 + 1) = v367;
                  v380 = (unsigned int *)*((void *)v379 + 2);
                  if (v380)
                  {
LABEL_503:
                    v381 = (int *)((char *)v380 + *v380);
LABEL_546:
                    v410 = (unsigned int *)((char *)v381 + *(unsigned __int16 *)((char *)v381 - *v381 + 4));
                    uint64_t v411 = (uint64_t)&v410[HIDWORD(v360)] + *v410;
                    v412 = (int *)(v411 + 4 + *(unsigned int *)(v411 + 4));
                    v413 = (unsigned int *)((char *)v412 + *(unsigned __int16 *)((char *)v412 - *v412 + 6));
                    LODWORD(v413) = *(unsigned int *)((char *)v413 + *v413) - 1;
                    v674 = v667;
                    v675 = &v668;
                    long long v676 = 0u;
                    long long v677 = 0u;
                    int v678 = (((void)v669 - (void)v668) >> 3) - 1;
                    unsigned int v679 = v413;
                    char v680 = 0;
                    sub_2E1D08((uint64_t)&v674);
                    v400 = (char *)*((void *)&v676 + 1);
                    v401 = (int *)&v677 + 2;
                    uint64_t v397 = v679;
                    LODWORD(v360) = DWORD2(v677);
                    goto LABEL_547;
                  }
                }
                else
                {
                  unint64_t v402 = *((void *)v366 + 21);
                  unint64_t v403 = *((void *)v366 + 18);
                  unint64_t v404 = *((void *)v366 + 15);
                  unint64_t v405 = *((void *)v366 + 24);
                  v380 = (unsigned int *)sub_2AB884(*(void *)v366, 1, v360, 1);
                  if (v404 >= v367) {
                    unint64_t v406 = v367;
                  }
                  else {
                    unint64_t v406 = v404;
                  }
                  BOOL v407 = v403 >= v406;
                  if (v403 < v406) {
                    unint64_t v406 = v403;
                  }
                  unsigned int v408 = 4 * (v404 < v367);
                  if (!v407) {
                    unsigned int v408 = 5;
                  }
                  if (v402 < v406)
                  {
                    unsigned int v408 = 6;
                    unint64_t v406 = v402;
                  }
                  if (v405 < v406) {
                    unsigned int v408 = 7;
                  }
                  v409 = &v368[6 * v408];
                  int *v409 = v682[0];
                  *((void *)v409 + 1) = *((void *)v366 + 482);
                  *((void *)v409 + 2) = v380;
                  if (v380) {
                    goto LABEL_503;
                  }
                }
              }
              sub_296654(&v663);
              v381 = 0;
              goto LABEL_546;
            }
          }
          else
          {
LABEL_464:
            if (((v349 ^ v353 ^ 1) & 1) == 0) {
              goto LABEL_465;
            }
          }
        }
        break;
      }
      uint64_t v566 = v134;
      unint64_t v569 = HIDWORD(v134);
LABEL_573:
      if (v650 == v651 || v634 == v635)
      {
        if ((v650 == v651) == (v634 == v635)) {
          goto LABEL_700;
        }
LABEL_593:
        if (v9 >= v6) {
          goto LABEL_700;
        }
        uint64_t v446 = *a1;
        uint64_t v447 = sub_46C8EC((void *)v645, *((uint64_t *)&v645 + 1));
        sub_2954EC(v446, *(void *)(v447 + 32), (uint64_t)&v667);
        v448 = v668;
        if (v668 == (void *)v669)
        {
          unsigned int v454 = -1;
          unsigned int v455 = -1;
          if (!v668) {
            goto LABEL_682;
          }
          goto LABEL_681;
        }
        if ((_BYTE)v670)
        {
          v449 = v667;
          unint64_t v450 = *(void *)v668;
          int v673 = *(void *)v668;
          int v681 = 1;
          v682[0] = v450;
          v663 = &v681;
          v664 = v682;
          unint64_t v451 = *((void *)v667 + 482) + 1;
          *((void *)v667 + 482) = v451;
          if (*(void *)v449)
          {
            v452 = v449 + 4;
            if (v449[28] == v450)
            {
              unsigned int v453 = 4;
              goto LABEL_614;
            }
            if (v449[34] == v450)
            {
              unsigned int v453 = 5;
              goto LABEL_614;
            }
            if (v449[40] == v450)
            {
              unsigned int v453 = 6;
              goto LABEL_614;
            }
            if (v449[46] == v450)
            {
              unsigned int v453 = 7;
LABEL_614:
              ++*((void *)v449 + 483);
              v460 = &v452[6 * v453];
              *((void *)v460 + 1) = v451;
              if (*((void *)v460 + 2)) {
                goto LABEL_616;
              }
              goto LABEL_615;
            }
            unint64_t v472 = *((void *)v449 + 21);
            unint64_t v473 = *((void *)v449 + 18);
            unint64_t v474 = *((void *)v449 + 15);
            unint64_t v475 = *((void *)v449 + 24);
            uint64_t v476 = sub_2AB884(*(void *)v449, 1, v450, 1);
            if (v474 >= v451) {
              unint64_t v477 = v451;
            }
            else {
              unint64_t v477 = v474;
            }
            BOOL v478 = v473 >= v477;
            if (v473 < v477) {
              unint64_t v477 = v473;
            }
            unsigned int v479 = 4 * (v474 < v451);
            if (!v478) {
              unsigned int v479 = 5;
            }
            if (v472 < v477)
            {
              unsigned int v479 = 6;
              unint64_t v477 = v472;
            }
            if (v475 < v477) {
              unsigned int v479 = 7;
            }
            v480 = &v452[6 * v479];
            int *v480 = v682[0];
            *((void *)v480 + 1) = *((void *)v449 + 482);
            *((void *)v480 + 2) = v476;
            if (v476)
            {
LABEL_616:
              int v681 = 1;
              v682[0] = v450;
              v663 = &v681;
              v664 = v682;
              unint64_t v461 = *((void *)v449 + 482) + 1;
              *((void *)v449 + 482) = v461;
              if (!*(void *)v449) {
                goto LABEL_657;
              }
              v462 = v449 + 4;
              if (v449[28] == v450)
              {
                unsigned int v463 = 4;
              }
              else if (v449[34] == v450)
              {
                unsigned int v463 = 5;
              }
              else if (v449[40] == v450)
              {
                unsigned int v463 = 6;
              }
              else
              {
                if (v449[46] != v450)
                {
                  unint64_t v481 = *((void *)v449 + 21);
                  unint64_t v482 = *((void *)v449 + 18);
                  unint64_t v483 = *((void *)v449 + 15);
                  unint64_t v484 = *((void *)v449 + 24);
                  v465 = (unsigned int *)sub_2AB884(*(void *)v449, 1, v450, 1);
                  if (v483 >= v461) {
                    unint64_t v485 = v461;
                  }
                  else {
                    unint64_t v485 = v483;
                  }
                  BOOL v486 = v482 >= v485;
                  if (v482 < v485) {
                    unint64_t v485 = v482;
                  }
                  unsigned int v487 = 4 * (v483 < v461);
                  if (!v486) {
                    unsigned int v487 = 5;
                  }
                  if (v481 < v485)
                  {
                    unsigned int v487 = 6;
                    unint64_t v485 = v481;
                  }
                  if (v484 < v485) {
                    unsigned int v487 = 7;
                  }
                  v488 = &v462[6 * v487];
                  int *v488 = v682[0];
                  *((void *)v488 + 1) = *((void *)v449 + 482);
                  *((void *)v488 + 2) = v465;
                  if (v465)
                  {
LABEL_626:
                    v466 = (int *)((char *)v465 + *v465);
                    v467 = (unsigned __int16 *)((char *)v466 - *v466);
                    if (*v467 < 5u)
                    {
LABEL_627:
                      uint64_t v468 = 0;
LABEL_660:
                      uint64_t v489 = 0;
                      v490 = (int *)(v468 + 4 * HIDWORD(v450) + 4 + *(unsigned int *)(v468 + 4 * HIDWORD(v450) + 4));
                      v491 = (unsigned int *)((char *)v490 + *(unsigned __int16 *)((char *)v490 - *v490 + 6));
                      v492 = (char *)v491 + *v491;
                      v493 = &v673;
                      goto LABEL_675;
                    }
LABEL_658:
                    uint64_t v468 = v467[2];
                    if (v468) {
                      v468 += (uint64_t)v466 + *(unsigned int *)((char *)v466 + v468);
                    }
                    goto LABEL_660;
                  }
LABEL_657:
                  sub_296654(&v663);
                  v466 = 0;
                  v467 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_627;
                  }
                  goto LABEL_658;
                }
                unsigned int v463 = 7;
              }
              ++*((void *)v449 + 483);
              v464 = &v462[6 * v463];
              *((void *)v464 + 1) = v461;
              v465 = (unsigned int *)*((void *)v464 + 2);
              if (v465) {
                goto LABEL_626;
              }
              goto LABEL_657;
            }
          }
LABEL_615:
          sub_296654(&v663);
          goto LABEL_616;
        }
        unint64_t v450 = *(void *)(v669 - 8);
        v456 = v667;
        int v681 = 1;
        v682[0] = v450;
        v663 = &v681;
        v664 = v682;
        unint64_t v457 = *((void *)v667 + 482) + 1;
        *((void *)v667 + 482) = v457;
        if (!*(void *)v456) {
          goto LABEL_673;
        }
        v458 = v456 + 4;
        if (v456[28] == v450)
        {
          unsigned int v459 = 4;
        }
        else if (v456[34] == v450)
        {
          unsigned int v459 = 5;
        }
        else if (v456[40] == v450)
        {
          unsigned int v459 = 6;
        }
        else
        {
          if (v456[46] != v450)
          {
            unint64_t v494 = *((void *)v456 + 21);
            unint64_t v495 = *((void *)v456 + 18);
            unint64_t v496 = *((void *)v456 + 15);
            unint64_t v497 = *((void *)v456 + 24);
            v470 = (unsigned int *)sub_2AB884(*(void *)v456, 1, v450, 1);
            if (v496 >= v457) {
              unint64_t v498 = v457;
            }
            else {
              unint64_t v498 = v496;
            }
            BOOL v499 = v495 >= v498;
            if (v495 < v498) {
              unint64_t v498 = v495;
            }
            unsigned int v500 = 4 * (v496 < v457);
            if (!v499) {
              unsigned int v500 = 5;
            }
            if (v494 < v498)
            {
              unsigned int v500 = 6;
              unint64_t v498 = v494;
            }
            if (v497 < v498) {
              unsigned int v500 = 7;
            }
            v501 = &v458[6 * v500];
            int *v501 = v682[0];
            *((void *)v501 + 1) = *((void *)v456 + 482);
            *((void *)v501 + 2) = v470;
            if (v470) {
              goto LABEL_631;
            }
            goto LABEL_673;
          }
          unsigned int v459 = 7;
        }
        ++*((void *)v456 + 483);
        v469 = &v458[6 * v459];
        *((void *)v469 + 1) = v457;
        v470 = (unsigned int *)*((void *)v469 + 2);
        if (v470)
        {
LABEL_631:
          v471 = (int *)((char *)v470 + *v470);
LABEL_674:
          v502 = (unsigned int *)((char *)v471 + *(unsigned __int16 *)((char *)v471 - *v471 + 4));
          uint64_t v503 = (uint64_t)&v502[HIDWORD(v450)] + *v502;
          v504 = (int *)(v503 + 4 + *(unsigned int *)(v503 + 4));
          v505 = (unsigned int *)((char *)v504 + *(unsigned __int16 *)((char *)v504 - *v504 + 6));
          LODWORD(v505) = *(unsigned int *)((char *)v505 + *v505) - 1;
          v674 = v667;
          v675 = &v668;
          long long v676 = 0u;
          long long v677 = 0u;
          int v678 = (((void)v669 - (void)v668) >> 3) - 1;
          unsigned int v679 = v505;
          char v680 = 0;
          sub_2E1D08((uint64_t)&v674);
          v492 = (char *)*((void *)&v676 + 1);
          v493 = (int *)&v677 + 2;
          uint64_t v489 = v679;
          LODWORD(v450) = DWORD2(v677);
LABEL_675:
          v506 = &v492[4 * v489];
          int v507 = *((unsigned __int16 *)v506 + 2);
          int v508 = *((unsigned __int16 *)v506 + 3);
          unsigned int v509 = sub_511FC(v450);
          unsigned int v510 = *v493 & ~(-1 << (v509 & 0xFE));
          int v511 = sub_51938(v510);
          int v512 = sub_51938(v510 >> 1);
          int v513 = 1 << -(v509 >> 1);
          if (v509 < 2) {
            int v513 = -2;
          }
          if ((v512 * v513 + 4 * v508) >= 0xFFFFFFFE) {
            unsigned int v455 = -2;
          }
          else {
            unsigned int v455 = v512 * v513 + 4 * v508;
          }
          unsigned int v454 = v511 * v513 + 4 * v507;
          v448 = v668;
          unint64_t v5 = v570;
          if (!v668) {
            goto LABEL_682;
          }
LABEL_681:
          *(void *)&long long v669 = v448;
          operator delete(v448);
LABEL_682:
          double v514 = sqrt((double)((v566 - v454) * (v566 - v454) + (v569 - v455) * (v569 - v455))) / 100.0;
          if (v9 < v514) {
            double v9 = v514;
          }
          unint64_t v515 = v646;
          ++*((void *)&v645 + 1);
          while (1)
          {
            v516 = (char *)v650;
            if (v515 >= ((v651 - (unsigned char *)v650) >> 4) - 1) {
              goto LABEL_573;
            }
            v517 = (void **)((char *)v650 + 16 * v515);
            if ((void)v645)
            {
              unint64_t v518 = *((void *)&v645 + 1);
              unint64_t v519 = sub_46C760((void *)v645);
              BOOL v520 = v518 < v519;
              v521 = *v517;
              if (!*v517)
              {
                if (v518 < v519) {
                  goto LABEL_573;
                }
                goto LABEL_686;
              }
            }
            else
            {
              v521 = *v517;
              if (!*v517) {
                goto LABEL_686;
              }
              BOOL v520 = 0;
            }
            v522 = &v516[16 * v515];
            unint64_t v525 = *((void *)v522 + 1);
            v524 = (uint64_t *)(v522 + 8);
            unint64_t v523 = v525;
            unint64_t v526 = sub_46C760(v521);
            if (v525 < v526 && v520)
            {
              uint64_t v528 = sub_46C8EC((void *)v645, *((uint64_t *)&v645 + 1));
              if (v528 != sub_46C8EC(*v517, *v524)) {
                goto LABEL_573;
              }
            }
            else if ((v520 ^ (v523 < v526)))
            {
              goto LABEL_573;
            }
LABEL_686:
            unint64_t v515 = v646 + 1;
            unint64_t v646 = v515;
            long long v645 = *((_OWORD *)v647 + v515);
          }
        }
LABEL_673:
        sub_296654(&v663);
        v471 = 0;
        goto LABEL_674;
      }
      if (v646 != v630) {
        goto LABEL_593;
      }
      if ((void)v645)
      {
        unint64_t v438 = *((void *)&v645 + 1);
        BOOL v439 = v438 < sub_46C760((void *)v645);
        v440 = (void *)v629;
        if ((void)v629) {
          goto LABEL_583;
        }
LABEL_591:
        BOOL v443 = 0;
        goto LABEL_592;
      }
      BOOL v439 = 0;
      v440 = (void *)v629;
      if (!(void)v629) {
        goto LABEL_591;
      }
LABEL_583:
      unint64_t v441 = *((void *)&v629 + 1);
      unint64_t v442 = sub_46C760(v440);
      BOOL v443 = v441 < v442;
      if (v441 >= v442 || !v439)
      {
LABEL_592:
        if ((v439 ^ v443 ^ 1)) {
          goto LABEL_700;
        }
        goto LABEL_593;
      }
      uint64_t v445 = sub_46C8EC((void *)v645, *((uint64_t *)&v645 + 1));
      if (v445 != sub_46C8EC((void *)v629, *((uint64_t *)&v629 + 1))) {
        goto LABEL_593;
      }
LABEL_700:
      if (v634)
      {
        v635 = v634;
        operator delete(v634);
      }
      if (v631)
      {
        v632 = v631;
        operator delete(v631);
      }
      if (v642)
      {
        v643 = v642;
        operator delete(v642);
      }
      if (v639)
      {
        v640 = v639;
        operator delete(v639);
      }
      if (v650)
      {
        v651 = (char *)v650;
        operator delete(v650);
      }
      if (v647)
      {
        v648 = v647;
        operator delete(v647);
      }
      if (v658)
      {
        v659 = (char *)v658;
        operator delete(v658);
      }
      if (v655)
      {
        v656 = (char *)v655;
        operator delete(v655);
      }
      double v8 = v557 + 368;
      if (v557 + 368 != v554) {
        continue;
      }
      break;
    }
    double v8 = (char *)__p;
LABEL_739:
    if (v9 < v6) {
      double v6 = v9;
    }
    if (v8)
    {
      uint64_t v7 = v8;
      v537 = v8;
      if (v662 != v8)
      {
        v538 = v662 - 160;
        do
        {
          v540 = (void *)*((void *)v538 + 12);
          if (v540)
          {
            *((void *)v538 + 13) = v540;
            operator delete(v540);
          }
          v541 = (void *)*((void *)v538 + 9);
          if (v541)
          {
            *((void *)v538 + 10) = v541;
            operator delete(v541);
          }
          v542 = (void *)*((void *)v538 + 3);
          if (v542)
          {
            *((void *)v538 + 4) = v542;
            operator delete(v542);
          }
          v543 = *(void **)v538;
          if (*(void *)v538)
          {
            *((void *)v538 + 1) = v543;
            operator delete(v543);
          }
          v544 = (void *)*((void *)v538 - 11);
          if (v544)
          {
            *((void *)v538 - 10) = v544;
            operator delete(v544);
          }
          v545 = (void *)*((void *)v538 - 14);
          if (v545)
          {
            *((void *)v538 - 13) = v545;
            operator delete(v545);
          }
          v546 = (void *)*((void *)v538 - 20);
          if (v546)
          {
            *((void *)v538 - 19) = v546;
            operator delete(v546);
          }
          v547 = (void *)*((void *)v538 - 23);
          if (v547)
          {
            *((void *)v538 - 22) = v547;
            operator delete(v547);
          }
          v539 = v538 - 208;
          v538 -= 368;
        }
        while (v539 != v537);
        uint64_t v7 = __p;
      }
      v662 = v537;
      operator delete(v7);
    }
    if (++v5 != v553) {
      continue;
    }
    break;
  }
  if (v6 == 1.79769313e308) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  double v549 = v6 * 100.0;
  if (v6 * 100.0 >= 0.0)
  {
    double v550 = v6 * 100.0;
    if (v549 < 4.50359963e15)
    {
      uint64_t v551 = (uint64_t)(v549 + v549) + 1;
      goto LABEL_771;
    }
  }
  else
  {
    double v550 = v6 * 100.0;
    if (v549 > -4.50359963e15)
    {
      uint64_t v551 = (uint64_t)(v549 + v549);
      if (v551 >= 1) {
        --v551;
      }
LABEL_771:
      double v550 = (double)(v551 >> 1);
    }
  }
  if (v550 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v549 >= 0.0)
  {
    if (v549 < 4.50359963e15)
    {
      uint64_t v552 = (uint64_t)(v549 + v549) + 1;
      return (uint64_t)(double)(v552 >> 1);
    }
  }
  else if (v549 > -4.50359963e15)
  {
    uint64_t v552 = (uint64_t)(v549 + v549);
    if (v552 >= 1) {
      --v552;
    }
    return (uint64_t)(double)(v552 >> 1);
  }
  return (uint64_t)v549;
}

void sub_1097A8C(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    STACK[0x3B8] = (unint64_t)v2;
    operator delete(v2);
    uint64_t v3 = (void *)STACK[0x398];
    if (!STACK[0x398])
    {
LABEL_3:
      uint64_t v4 = (void *)STACK[0x400];
      if (!STACK[0x400]) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = (void *)STACK[0x398];
    if (!STACK[0x398]) {
      goto LABEL_3;
    }
  }
  STACK[0x3A0] = (unint64_t)v3;
  operator delete(v3);
  uint64_t v4 = (void *)STACK[0x400];
  if (!STACK[0x400])
  {
LABEL_4:
    unint64_t v5 = (void *)STACK[0x3E8];
    if (!STACK[0x3E8]) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  STACK[0x408] = (unint64_t)v4;
  operator delete(v4);
  unint64_t v5 = (void *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_5:
    double v6 = (void *)STACK[0x450];
    if (!STACK[0x450]) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  STACK[0x3F0] = (unint64_t)v5;
  operator delete(v5);
  double v6 = (void *)STACK[0x450];
  if (!STACK[0x450])
  {
LABEL_6:
    uint64_t v7 = (void *)STACK[0x438];
    if (!STACK[0x438]) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  STACK[0x458] = (unint64_t)v6;
  operator delete(v6);
  uint64_t v7 = (void *)STACK[0x438];
  if (!STACK[0x438])
  {
LABEL_7:
    double v8 = (void *)STACK[0x4A0];
    if (!STACK[0x4A0]) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  STACK[0x440] = (unint64_t)v7;
  operator delete(v7);
  double v8 = (void *)STACK[0x4A0];
  if (!STACK[0x4A0])
  {
LABEL_8:
    double v9 = (void *)STACK[0x488];
    if (!STACK[0x488]) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  STACK[0x4A8] = (unint64_t)v8;
  operator delete(v8);
  double v9 = (void *)STACK[0x488];
  if (!STACK[0x488])
  {
LABEL_9:
    unint64_t v10 = STACK[0x4C0];
    if (!STACK[0x4C0]) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  STACK[0x490] = (unint64_t)v9;
  operator delete(v9);
  unint64_t v10 = STACK[0x4C0];
  if (!STACK[0x4C0]) {
LABEL_10:
  }
    _Unwind_Resume(a1);
LABEL_19:
  unint64_t v11 = (void *)STACK[0x4C8];
  int v12 = (void *)v10;
  if (STACK[0x4C8] != v10)
  {
    do
      unint64_t v11 = sub_1044584(v11 - 46);
    while (v11 != (void *)v10);
    int v12 = (void *)STACK[0x4C0];
  }
  STACK[0x4C8] = v10;
  operator delete(v12);
  _Unwind_Resume(a1);
}

unint64_t sub_1097E70(uint64_t **a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  BOOL v5 = sub_3AA3AC((uint64_t)a2, a3);
  uint64_t v6 = *v4;
  if (!v5)
  {
    uint64_t v14 = sub_46C8EC(*(void **)a2, *((void *)a2 + 1));
    sub_2954EC(v6, *(void *)(v14 + 32), (uint64_t)v29);
    unint64_t v15 = v29[1];
    if (v29[1] == v30)
    {
      unint64_t v18 = 0xFFFFFFFF00000000;
      uint64_t v19 = 0xFFFFFFFFLL;
      if (!v29[1]) {
        return v18 | v19;
      }
    }
    else
    {
      unint64_t v16 = sub_2E1AA4((uint64_t)v29);
      unsigned int v17 = v16;
      unint64_t v18 = v16 & 0xFFFFFFFF00000000;
      unint64_t v15 = v29[1];
      uint64_t v19 = v17;
      if (!v29[1]) {
        return v18 | v19;
      }
    }
    int v30 = v15;
    operator delete(v15);
    return v18 | v19;
  }
  sub_39ECCC((uint64_t)&v23, a2);
  sub_480720((void **)&v23);
  *(_OWORD *)int64_t v29 = v23;
  int v30 = v24;
  unint64_t v22 = v25[0];
  long long v31 = *(_OWORD *)v25;
  uint64_t v32 = v26;
  v25[0] = 0;
  v25[1] = 0;
  int v21 = __p[0];
  long long v33 = *(_OWORD *)__p;
  uint64_t v34 = v28;
  uint64_t v26 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v28 = 0;
  uint64_t v7 = sub_46C8EC((void *)v23, *((uint64_t *)&v23 + 1));
  sub_2954EC(v6, *(void *)(v7 + 32), (uint64_t)v35);
  double v8 = v36;
  if (v36 == v37)
  {
    unint64_t v11 = 0xFFFFFFFF00000000;
    uint64_t v12 = 0xFFFFFFFFLL;
    if (!v36) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  unint64_t v9 = sub_2E40A4((uint64_t)v35);
  unsigned int v10 = v9;
  unint64_t v11 = v9 & 0xFFFFFFFF00000000;
  double v8 = v36;
  uint64_t v12 = v10;
  if (v36)
  {
LABEL_4:
    int64_t v37 = v8;
    operator delete(v8);
  }
LABEL_5:
  if (v21) {
    operator delete(v21);
  }
  if (v22) {
    operator delete(v22);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v13 = v11 | v12;
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return v13;
}

void sub_1098024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = *(void **)(v25 - 64);
  if (v27)
  {
    *(void *)(v25 - 56) = v27;
    operator delete(v27);
    sub_39EB70(&a23);
    sub_39EB70(&a14);
    _Unwind_Resume(a1);
  }
  sub_39EB70(&a23);
  sub_39EB70(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_109809C(uint64_t a1, char *a2)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = (void **)(a1 + 8);
  if (v5 - v6 == -80)
  {
    while (v5 != v6)
    {
      uint64_t v7 = *(void **)(v5 - 8);
      if (v7) {
        free(v7);
      }
      v5 -= 80;
    }
    *(void *)(a1 + 16) = v6;
  }
  else
  {
    sub_109916C(v4, 1uLL);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  *(void *)(v6 - 16) = 0xFFFFFFFF00000000;
  double v8 = (const double *)(v6 - 16);
  unint64_t v9 = (int32x2_t *)(v6 - 80);
  *(unsigned char *)(v6 - 55) = 1;
  unsigned int v10 = (char *)malloc_type_malloc(8 * *(void *)(v6 - 24), 0x100004000313F17uLL);
  *(void *)(v6 - 8) = v10;
  uint64_t v11 = *(void *)(v6 - 24);
  if (!v11) {
    goto LABEL_21;
  }
  unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v12 >= 0xF)
  {
    BOOL v14 = (unint64_t)v10 >= v6 - 8 || v8 >= (const double *)&v10[8 * v11];
    unint64_t v13 = v10;
    if (v14)
    {
      unint64_t v15 = v12 + 1;
      unint64_t v13 = &v10[8 * (v15 & 0x3FFFFFFFFFFFFFFCLL)];
      float64x2_t v16 = vld1q_dup_f64(v8);
      unsigned int v17 = (float64x2_t *)(v10 + 16);
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v17[-1] = v16;
        *unsigned int v17 = v16;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    unint64_t v13 = v10;
  }
  uint64_t v19 = &v10[8 * v11];
  do
  {
    *(double *)unint64_t v13 = *v8;
    v13 += 8;
  }
  while (v13 != v19);
LABEL_21:
  unint64_t v20 = sub_460E1C((uint64_t)a2);
  if (!v20 || *(unsigned char *)(v6 - 56)) {
    sub_1090D9C(v6 - 80);
  }
  unint64_t v21 = *(void *)(v6 - 32);
  if (v20 > v21) {
    sub_10909B8(v6 - 80, v20 - v21);
  }
  sub_460B00(a2, (uint64_t)&v49);
  sub_3BD7E4((uint64_t)&v42, &v49);
  sub_3BD7E4((uint64_t)&v35, &v54);
  while (1)
  {
    if (v47 == v48 || __p == v41)
    {
      if ((v47 == v48) == (__p == v41)) {
        break;
      }
      goto LABEL_46;
    }
    long long v23 = v42;
    if (v44 != v37) {
      goto LABEL_47;
    }
    if (v42)
    {
      unint64_t v24 = v43;
      int v25 = v24 < sub_470ADC(v42);
      uint64_t v26 = v35;
      if (!v35) {
        goto LABEL_44;
      }
    }
    else
    {
      int v25 = 0;
      uint64_t v26 = v35;
      if (!v35)
      {
LABEL_44:
        int v29 = 0;
        goto LABEL_45;
      }
    }
    unint64_t v27 = v36;
    unint64_t v28 = sub_470ADC(v26);
    int v29 = v27 < v28;
    if (v27 < v28) {
      int v30 = v25;
    }
    else {
      int v30 = 0;
    }
    if (v30 == 1)
    {
      uint64_t v31 = sub_470B40(v42, v43);
      if (v31 == sub_470B40(v35, v36)) {
        break;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v25 == v29) {
      break;
    }
LABEL_46:
    long long v23 = v42;
LABEL_47:
    uint64_t v32 = (unsigned int *)sub_470B40(v23, v43);
    unint64_t v34 = *v32 | ((unint64_t)(v32[1] & 0x1FFFFFFF) << 32);
    sub_10909B8((uint64_t)v9, 1);
    sub_1090C8C(v9, &v34, (uint64_t)v59);
    sub_3BD3D4(&v42);
  }
  if (__p)
  {
    int64_t v41 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    int v39 = v38;
    operator delete(v38);
  }
  if (v47)
  {
    double v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  if (v57)
  {
    unint64_t v58 = v57;
    operator delete(v57);
  }
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v52)
  {
    long long v53 = v52;
    operator delete(v52);
  }
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  return sub_3CB7EC((char **)(a1 + 32), (uint64_t)a2);
}

void sub_10983B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

uint64_t sub_10983E0(uint64_t a1, char *a2, void *a3)
{
  sub_460B00(a2, (uint64_t)&v31);
  sub_10986A8(&v31, (uint64_t)&v41);
  if (__p)
  {
    long long v40 = __p;
    operator delete(__p);
  }
  if (v37)
  {
    unint64_t v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    unint64_t v34 = v33;
    operator delete(v33);
  }
  sub_3BD7E4((uint64_t)&v31, &v41);
  sub_3BD7E4((uint64_t)&v24, &v46);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    double v8 = v29;
    if (v35 == v36 || v29 == v30)
    {
      int v10 = (v35 == v36) ^ (v29 == v30);
      goto LABEL_32;
    }
    if (v32 == v26) {
      break;
    }
    if (v6 >= *a3) {
      goto LABEL_39;
    }
LABEL_34:
    uint64_t v19 = sub_470F2C((void *)v31, *((unint64_t *)&v31 + 1), v5);
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)(a1 + 16);
    if (v20 != v21)
    {
      while (1)
      {
        unint64_t v22 = (unsigned int *)sub_470B40((void *)v31, *((uint64_t *)&v31 + 1));
        unint64_t v51 = *v22 | ((unint64_t)(v22[1] & 0x1FFFFFFF) << 32);
        if (sub_F953E4(v20, &v51) != -1) {
          break;
        }
        v20 += 80;
        if (v20 == v21) {
          goto LABEL_11;
        }
      }
      v7 += v19;
    }
LABEL_11:
    v6 += v19;
    sub_3BD3D4((void **)&v31);
  }
  if ((void)v31)
  {
    unint64_t v11 = *((void *)&v31 + 1);
    BOOL v12 = v11 < sub_470ADC((void *)v31);
    unint64_t v13 = v24;
    if (v24) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v12 = 0;
    unint64_t v13 = v24;
    if (v24)
    {
LABEL_21:
      unint64_t v14 = v25;
      unint64_t v15 = sub_470ADC(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_470B40((void *)v31, *((uint64_t *)&v31 + 1));
        if (v18 == sub_470B40(v24, v25)) {
          goto LABEL_38;
        }
        goto LABEL_33;
      }
      goto LABEL_31;
    }
  }
  BOOL v16 = 0;
LABEL_31:
  int v10 = v12 ^ v16;
LABEL_32:
  if ((v10 ^ 1)) {
    goto LABEL_38;
  }
LABEL_33:
  if (v6 < *a3) {
    goto LABEL_34;
  }
LABEL_38:
  double v8 = v29;
LABEL_39:
  if (v8)
  {
    int v30 = v8;
    operator delete(v8);
  }
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    unint64_t v34 = v33;
    operator delete(v33);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    double v48 = v47;
    operator delete(v47);
  }
  if (v44)
  {
    int64_t v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    unint64_t v43 = v42;
    operator delete(v42);
  }
  return v7;
}

void sub_1098668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_109867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_10986A8(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_3BD7E4((uint64_t)&v9, a1);
  sub_3BD7E4((uint64_t)&v4, (long long *)((char *)a1 + 72));
  sub_1099BDC(&v9, &v4, a2);
  if (__p)
  {
    double v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    unint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_109873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_1098760(uint64_t a1, char *a2)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  long long v4 = (void **)(a1 + 8);
  if (v5 - v6 == -80)
  {
    while (v5 != v6)
    {
      uint64_t v7 = *(void **)(v5 - 8);
      if (v7) {
        free(v7);
      }
      v5 -= 80;
    }
    *(void *)(a1 + 16) = v6;
  }
  else
  {
    sub_1099550(v4, 1uLL);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  *(void *)(v6 - 16) = 0x1000000000000;
  double v8 = (const double *)(v6 - 16);
  uint64_t v9 = v6 - 80;
  *(unsigned char *)(v6 - 55) = 1;
  int v10 = (char *)malloc_type_malloc(8 * *(void *)(v6 - 24), 0x100004087442A64uLL);
  *(void *)(v6 - 8) = v10;
  uint64_t v11 = *(void *)(v6 - 24);
  if (!v11) {
    goto LABEL_21;
  }
  unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v12 >= 0xF)
  {
    BOOL v14 = (unint64_t)v10 >= v6 - 8 || v8 >= (const double *)&v10[8 * v11];
    unint64_t v13 = v10;
    if (v14)
    {
      unint64_t v15 = v12 + 1;
      unint64_t v13 = &v10[8 * (v15 & 0x3FFFFFFFFFFFFFFCLL)];
      float64x2_t v16 = vld1q_dup_f64(v8);
      unsigned int v17 = (float64x2_t *)(v10 + 16);
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v17[-1] = v16;
        *unsigned int v17 = v16;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    unint64_t v13 = v10;
  }
  uint64_t v19 = &v10[8 * v11];
  do
  {
    *(double *)unint64_t v13 = *v8;
    v13 += 8;
  }
  while (v13 != v19);
LABEL_21:
  unint64_t v20 = sub_460E1C((uint64_t)a2);
  if (!v20 || *(unsigned char *)(v6 - 56)) {
    sub_F572DC(v6 - 80);
  }
  unint64_t v21 = *(void *)(v6 - 32);
  if (v20 > v21) {
    sub_F57008(v6 - 80, v20 - v21);
  }
  sub_460B00(a2, (uint64_t)&v50);
  sub_3BD7E4((uint64_t)&v43, &v50);
  sub_3BD7E4((uint64_t)&v36, &v55);
  while (1)
  {
    if (v48 == v49 || __p == v42)
    {
      if ((v48 == v49) == (__p == v42)) {
        break;
      }
      goto LABEL_47;
    }
    long long v23 = v43;
    if (v45 != v38) {
      goto LABEL_48;
    }
    if (v43)
    {
      unint64_t v24 = v44;
      int v25 = v24 < sub_470ADC(v43);
      uint64_t v26 = v36;
      if (!v36) {
        goto LABEL_45;
      }
    }
    else
    {
      int v25 = 0;
      uint64_t v26 = v36;
      if (!v36)
      {
LABEL_45:
        int v29 = 0;
        goto LABEL_46;
      }
    }
    unint64_t v27 = v37;
    unint64_t v28 = sub_470ADC(v26);
    int v29 = v27 < v28;
    if (v27 < v28) {
      int v30 = v25;
    }
    else {
      int v30 = 0;
    }
    if (v30 == 1)
    {
      uint64_t v31 = sub_470B40(v43, v44);
      if (v31 == sub_470B40(v36, v37)) {
        break;
      }
      goto LABEL_47;
    }
LABEL_46:
    if (v25 == v29) {
      break;
    }
LABEL_47:
    long long v23 = v43;
LABEL_48:
    uint64_t v32 = (unsigned int *)sub_470B40(v23, v44);
    unint64_t v35 = (((unint64_t)(v32[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v32[1] << 32) | *v32) ^ 0x1000000000000;
    sub_F57008(v9, 1);
    if (sub_F57414(v9, &v35) == -1) {
      sub_F57530(v9, &v35, v33, v60);
    }
    sub_3BD3D4(&v43);
  }
  if (__p)
  {
    unint64_t v42 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    long long v40 = v39;
    operator delete(v39);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  if (v58)
  {
    double v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    int64_t v57 = v56;
    operator delete(v56);
  }
  if (v53)
  {
    long long v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    unint64_t v52 = v51;
    operator delete(v51);
  }
  return sub_3CB7EC((char **)(a1 + 32), (uint64_t)a2);
}

void sub_1098AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

uint64_t sub_1098AD0(uint64_t a1, char *a2, void *a3)
{
  sub_460B00(a2, (uint64_t)&v31);
  sub_10986A8(&v31, (uint64_t)&v41);
  if (__p)
  {
    long long v40 = __p;
    operator delete(__p);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    unint64_t v34 = v33;
    operator delete(v33);
  }
  sub_3BD7E4((uint64_t)&v31, &v41);
  sub_3BD7E4((uint64_t)&v24, &v46);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    double v8 = v29;
    if (v35 == v36 || v29 == v30)
    {
      int v10 = (v35 == v36) ^ (v29 == v30);
      goto LABEL_32;
    }
    if (v32 == v26) {
      break;
    }
    if (v6 >= *a3) {
      goto LABEL_39;
    }
LABEL_34:
    uint64_t v19 = sub_470F2C((void *)v31, *((unint64_t *)&v31 + 1), v5);
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)(a1 + 16);
    if (v20 != v21)
    {
      while (1)
      {
        unint64_t v22 = (unsigned int *)sub_470B40((void *)v31, *((uint64_t *)&v31 + 1));
        unint64_t v51 = (((unint64_t)(v22[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v22[1] << 32) | *v22) ^ 0x1000000000000;
        if (sub_F57414(v20, &v51) != -1) {
          break;
        }
        v20 += 80;
        if (v20 == v21) {
          goto LABEL_11;
        }
      }
      v7 += v19;
    }
LABEL_11:
    v6 += v19;
    sub_3BD3D4((void **)&v31);
  }
  if ((void)v31)
  {
    unint64_t v11 = *((void *)&v31 + 1);
    BOOL v12 = v11 < sub_470ADC((void *)v31);
    unint64_t v13 = v24;
    if (v24) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v12 = 0;
    unint64_t v13 = v24;
    if (v24)
    {
LABEL_21:
      unint64_t v14 = v25;
      unint64_t v15 = sub_470ADC(v13);
      BOOL v16 = v14 < v15;
      if (v14 < v15 && v12)
      {
        uint64_t v18 = sub_470B40((void *)v31, *((uint64_t *)&v31 + 1));
        if (v18 == sub_470B40(v24, v25)) {
          goto LABEL_38;
        }
        goto LABEL_33;
      }
      goto LABEL_31;
    }
  }
  BOOL v16 = 0;
LABEL_31:
  int v10 = v12 ^ v16;
LABEL_32:
  if ((v10 ^ 1)) {
    goto LABEL_38;
  }
LABEL_33:
  if (v6 < *a3) {
    goto LABEL_34;
  }
LABEL_38:
  double v8 = v29;
LABEL_39:
  if (v8)
  {
    int v30 = v8;
    operator delete(v8);
  }
  if (v27)
  {
    unint64_t v28 = v27;
    operator delete(v27);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    unint64_t v34 = v33;
    operator delete(v33);
  }
  if (v49)
  {
    long long v50 = v49;
    operator delete(v49);
  }
  if (v47)
  {
    double v48 = v47;
    operator delete(v47);
  }
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    unint64_t v43 = v42;
    operator delete(v42);
  }
  return v7;
}

void sub_1098D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1098D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

uint64_t sub_1098DA8(uint64_t a1, uint64_t a2)
{
  sub_1098EBC((uint64_t)&v9, a2);
  int v3 = v10;
  if (v10 == -1) {
    return 0;
  }
  double v5 = *(uint64_t **)(a1 + 32);
  long long v4 = *(uint64_t **)(a1 + 40);
  if (v5 != v4)
  {
    unint64_t v6 = v9;
    unint64_t v7 = HIDWORD(v9);
    do
    {
      sub_1098EBC((uint64_t)&v11, *v5);
      if (v12 != -1 && v12 == v3)
      {
        if (v3 == 1)
        {
          if (v11 == __PAIR64__(v7, v6)) {
            return 0;
          }
        }
        else if (!v3 && v11 == v6)
        {
          return 0;
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  return 1;
}

uint64_t sub_1098EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_40EFE8(a2);
  uint64_t v5 = sub_52058(a2);
  if (v4 == v5)
  {
LABEL_13:
    uint64_t result = sub_52058(a2);
    if (v4 == result)
    {
LABEL_18:
      *(_DWORD *)(a1 + 8) = -1;
      return result;
    }
  }
  else
  {
    uint64_t v6 = v5;
    do
    {
      uint64_t v8 = sub_374DF4(v4);
      int v9 = *(_DWORD *)(v8 + 112);
      if (v9 != -1)
      {
        if (v9 == 1)
        {
          if (*(void *)(v8 + 104) <= 0xFFFFFFFEFFFFFFFFLL && *(void *)(v8 + 104) != 0) {
            goto LABEL_13;
          }
        }
        else
        {
          if (v9)
          {
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_23FDF58;
          }
          if (*(void *)(v8 + 104) != -1) {
            goto LABEL_13;
          }
        }
      }
      v4 += 1056;
    }
    while (v4 != v6);
    uint64_t v4 = v6;
    uint64_t result = sub_52058(a2);
    if (v6 == result) {
      goto LABEL_18;
    }
  }
  uint64_t result = sub_374DF4(v4);
  unsigned int v11 = *(_DWORD *)(result + 112);
  *(_DWORD *)(a1 + 8) = v11;
  if (v11 <= 1) {
    *(void *)a1 = *(void *)(result + 104);
  }
  return result;
}

uint64_t sub_1099008(uint64_t a1, long long *a2, long long *a3)
{
  return a1;
}

void sub_1099064(void *a1)
{
  int v3 = (void *)v1[23];
  if (v3)
  {
    v1[24] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[20];
  if (v4)
  {
    v1[21] = v4;
    operator delete(v4);
    sub_58CC(a1);
  }
  sub_58CC(a1);
}

void *sub_10990C8(void *a1)
{
  uint64_t v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[28];
  if (v3)
  {
    a1[29] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[14];
  if (v6)
  {
    a1[15] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[11];
  if (v7)
  {
    a1[12] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_109916C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = 0;
      int v12 = &v5[80 * a2];
      do
      {
        unint64_t v13 = &v5[v11];
        v13[26] = 0;
        *((void *)v13 + 2) = 0x3E4CCCCD3F000000;
        *((_DWORD *)v13 + 7) = 0;
        *((_DWORD *)v13 + 8) = 0;
        *((_DWORD *)v13 + 9) = -1;
        *((void *)v13 + 5) = 0;
        *((void *)v13 + 6) = 0;
        *((void *)v13 + 7) = 32;
        *((void *)v13 + 8) = 0xFFFFFFFF00000000;
        *((void *)v13 + 9) = 0;
        *(_OWORD *)unint64_t v13 = xmmword_20B98A0;
        v11 += 80;
        *((_WORD *)v13 + 12) = 0;
      }
      while (80 * a2 != v11);
    }
    else
    {
      int v12 = (char *)a1[1];
    }
    a1[1] = v12;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x199999999999999) {
      unint64_t v9 = 0x333333333333333;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x333333333333333) {
        sub_188D718();
      }
      int v10 = (char *)operator new(80 * v9);
    }
    else
    {
      int v10 = 0;
    }
    uint64_t v14 = 0;
    unint64_t v15 = &v10[80 * v6];
    unint64_t v24 = &v10[80 * v9];
    BOOL v16 = &v15[80 * a2];
    do
    {
      unsigned int v17 = &v15[v14];
      v17[26] = 0;
      *((void *)v17 + 2) = 0x3E4CCCCD3F000000;
      *((_DWORD *)v17 + 7) = 0;
      *((_DWORD *)v17 + 8) = 0;
      *((_DWORD *)v17 + 9) = -1;
      *((void *)v17 + 5) = 0;
      *((void *)v17 + 6) = 0;
      *((void *)v17 + 7) = 32;
      *((void *)v17 + 8) = 0xFFFFFFFF00000000;
      *((void *)v17 + 9) = 0;
      *(_OWORD *)unsigned int v17 = xmmword_20B98A0;
      v14 += 80;
      *((_WORD *)v17 + 12) = 0;
    }
    while (80 * a2 != v14);
    long long v23 = &v15[80 * a2];
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 == *a1)
    {
      *a1 = v15;
      a1[1] = v16;
      a1[2] = &v10[80 * v9];
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        sub_CE9980((uint64_t)&v15[v20 - 80], (uint64_t)&v18[v20 - 80], 0x20uLL);
        v20 -= 80;
      }
      while (&v18[v20] != v19);
      uint64_t v21 = (char *)*a1;
      uint64_t v18 = (char *)a1[1];
      *a1 = &v15[v20];
      a1[1] = v23;
      a1[2] = v24;
      if (v18 != v21)
      {
        do
        {
          unint64_t v22 = (void *)*((void *)v18 - 1);
          if (v22) {
            free(v22);
          }
          v18 -= 80;
        }
        while (v18 != v21);
        uint64_t v18 = v21;
      }
    }
    if (v18) {
      operator delete(v18);
    }
  }
}

uint64_t sub_1099430(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 80;
        *(void *)(a1 + 16) = v2 - 80;
        uint64_t v5 = *(void **)(v2 - 8);
        if (!v5) {
          break;
        }
        free(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 80;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_109949C(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_3BD6C8((uint64_t)&v10, a1);
  sub_3BD6C8((uint64_t)&v5, a2);
  sub_3BD6C8(a3, &v10);
  sub_3BD6C8(a3 + 72, &v5);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    unint64_t v7 = v6;
    operator delete(v6);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    int v12 = v11;
    operator delete(v11);
  }
}

void sub_1099538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1099550(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  long long v5 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = 0;
      int v12 = &v5[80 * a2];
      do
      {
        unint64_t v13 = &v5[v11];
        v13[26] = 0;
        *((void *)v13 + 2) = 0x3E4CCCCD3F000000;
        *((_DWORD *)v13 + 7) = 0;
        *((_DWORD *)v13 + 8) = 0;
        *((_WORD *)v13 + 18) = 0;
        v13[38] = 1;
        *((void *)v13 + 5) = 0;
        *((void *)v13 + 6) = 0;
        *((void *)v13 + 7) = 32;
        *((_DWORD *)v13 + 16) = 0;
        *((_WORD *)v13 + 34) = 0;
        v13[70] = 1;
        *((void *)v13 + 9) = 0;
        *(_OWORD *)unint64_t v13 = xmmword_20B98A0;
        v11 += 80;
        *((_WORD *)v13 + 12) = 0;
      }
      while (80 * a2 != v11);
    }
    else
    {
      int v12 = (char *)a1[1];
    }
    a1[1] = v12;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x199999999999999) {
      unint64_t v9 = 0x333333333333333;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x333333333333333) {
        sub_188D718();
      }
      long long v10 = (char *)operator new(80 * v9);
    }
    else
    {
      long long v10 = 0;
    }
    uint64_t v14 = 0;
    unint64_t v15 = &v10[80 * v6];
    unint64_t v24 = &v10[80 * v9];
    BOOL v16 = &v15[80 * a2];
    do
    {
      unsigned int v17 = &v15[v14];
      v17[26] = 0;
      *((void *)v17 + 2) = 0x3E4CCCCD3F000000;
      *((_DWORD *)v17 + 7) = 0;
      *((_DWORD *)v17 + 8) = 0;
      *((_WORD *)v17 + 18) = 0;
      v17[38] = 1;
      *((void *)v17 + 5) = 0;
      *((void *)v17 + 6) = 0;
      *((void *)v17 + 7) = 32;
      *((_DWORD *)v17 + 16) = 0;
      *((_WORD *)v17 + 34) = 0;
      v17[70] = 1;
      *((void *)v17 + 9) = 0;
      *(_OWORD *)unsigned int v17 = xmmword_20B98A0;
      v14 += 80;
      *((_WORD *)v17 + 12) = 0;
    }
    while (80 * a2 != v14);
    long long v23 = &v15[80 * a2];
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 == *a1)
    {
      *a1 = v15;
      a1[1] = v16;
      a1[2] = &v10[80 * v9];
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        sub_F2E1E4((uint64_t)&v15[v20 - 80], (uint64_t)&v18[v20 - 80], 0x20uLL);
        v20 -= 80;
      }
      while (&v18[v20] != v19);
      uint64_t v21 = (char *)*a1;
      uint64_t v18 = (char *)a1[1];
      *a1 = &v15[v20];
      a1[1] = v23;
      a1[2] = v24;
      if (v18 != v21)
      {
        do
        {
          unint64_t v22 = (void *)*((void *)v18 - 1);
          if (v22) {
            free(v22);
          }
          v18 -= 80;
        }
        while (v18 != v21);
        uint64_t v18 = v21;
      }
    }
    if (v18) {
      operator delete(v18);
    }
  }
}

uint64_t sub_1099824(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xB21642C8590B21) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 4);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 4) >= 0x590B21642C8590) {
    unint64_t v8 = 0xB21642C8590B21;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xB21642C8590B21) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(368 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v14 = (uint64_t)&v9[368 * v4];
  unint64_t v15 = &v9[368 * v8];
  sub_10927D0(v14, a2, a3);
  sub_10999F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v14, v14);
  uint64_t v11 = (void *)*a1;
  long long v10 = (void *)a1[1];
  *a1 = v12;
  a1[1] = v14 + 368;
  for (a1[2] = (uint64_t)v15; v10 != v11; long long v10 = sub_1044584(v10 - 46))
    ;
  if (v11) {
    operator delete(v11);
  }
  return v14 + 368;
}

void sub_1099988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_109999C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_109999C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 368;
    sub_1044584((void *)(i - 368));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_10999F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a7 + v7 - 368;
      uint64_t v10 = a3 + v7;
      long long v11 = *(_OWORD *)(a3 + v7 - 368);
      *(void *)(v9 + 16) = *(void *)(a3 + v7 - 352);
      uint64_t v12 = (void *)(a7 + v7 - 344);
      uint64_t v13 = a3 + v7 - 344;
      v12[1] = 0;
      CFTimeZoneRef v12[2] = 0;
      *(_OWORD *)uint64_t v9 = v11;
      *uint64_t v12 = 0;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(void *)(a7 + v7 - 328) = *(void *)(a3 + v7 - 328);
      *(void *)(a3 + v7 - 336) = 0;
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 16) = 0;
      uint64_t v14 = (void *)(a7 + v7 - 320);
      uint64_t v15 = a3 + v7 - 320;
      *(void *)(a7 + v7 - 312) = 0;
      *uint64_t v14 = 0;
      long long v14[2] = 0;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(void *)(a7 + v7 - 304) = *(void *)(a3 + v7 - 304);
      *(void *)(a3 + v7 - 312) = 0;
      *(void *)uint64_t v15 = 0;
      uint64_t v16 = a7 + v7 - 296;
      *(void *)(v15 + 16) = 0;
      long long v17 = *(_OWORD *)(a3 + v7 - 296);
      *(void *)(v16 + 16) = *(void *)(a3 + v7 - 280);
      uint64_t v18 = (void *)(a7 + v7 - 272);
      uint64_t v19 = (_OWORD *)(a3 + v7 - 272);
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v8 - 256) = 0;
      *uint64_t v18 = 0;
      v18[1] = 0;
      *(_OWORD *)uint64_t v18 = *v19;
      *(void *)(v8 - 256) = *(void *)(a3 + v7 - 256);
      *(void *)(a3 + v7 - 264) = 0;
      *(void *)uint64_t v19 = 0;
      *(void *)(v10 - 256) = 0;
      *(void *)(v8 - 248) = 0;
      *(void *)(v8 - 240) = 0;
      *(void *)(v8 - 232) = 0;
      *(_OWORD *)(v8 - 248) = *(_OWORD *)(a3 + v7 - 248);
      *(void *)(v8 - 232) = *(void *)(a3 + v7 - 232);
      *(void *)(v10 - 248) = 0;
      *(void *)(v10 - 240) = 0;
      long long v20 = *(_OWORD *)(a3 + v7 - 224);
      long long v21 = *(_OWORD *)(a3 + v7 - 208);
      LODWORD(v16) = *(_DWORD *)(a3 + v7 - 192);
      *(void *)(v10 - 232) = 0;
      *(_DWORD *)(v8 - 192) = v16;
      *(_OWORD *)(v8 - 224) = v20;
      *(_OWORD *)(v8 - 208) = v21;
      uint64_t v22 = *(void *)(a3 + v7 - 168);
      *(_OWORD *)(v8 - 184) = *(_OWORD *)(a3 + v7 - 184);
      *(void *)(v8 - 168) = v22;
      *(void *)(v8 - 160) = 0;
      *(void *)(v8 - 152) = 0;
      *(void *)(v8 - 144) = 0;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(a3 + v7 - 160);
      *(void *)(v8 - 144) = *(void *)(a3 + v7 - 144);
      *(void *)(v10 - 160) = 0;
      *(void *)(v10 - 152) = 0;
      *(void *)(v10 - 144) = 0;
      *(void *)(v8 - 136) = 0;
      *(void *)(v8 - 128) = 0;
      *(void *)(v8 - 120) = 0;
      *(_OWORD *)(v8 - 136) = *(_OWORD *)(a3 + v7 - 136);
      *(void *)(v8 - 120) = *(void *)(a3 + v7 - 120);
      *(void *)(v10 - 136) = 0;
      *(void *)(v10 - 128) = 0;
      *(void *)(v10 - 120) = 0;
      uint64_t v23 = *(void *)(a3 + v7 - 96);
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(a3 + v7 - 112);
      *(void *)(v8 - 96) = v23;
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(void *)(v8 - 72) = *(void *)(a3 + v7 - 72);
      *(void *)(v10 - 88) = 0;
      *(void *)(v10 - 80) = 0;
      *(void *)(v10 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(void *)(v8 - 48) = *(void *)(a3 + v7 - 48);
      *(void *)(v10 - 64) = 0;
      *(void *)(v10 - 56) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 40);
      long long v25 = *(_OWORD *)(a3 + v7 - 24);
      LODWORD(v23) = *(_DWORD *)(a3 + v7 - 8);
      *(void *)(v10 - 48) = 0;
      *(_DWORD *)(v8 - 8) = v23;
      *(_OWORD *)(v8 - 24) = v25;
      *(__n128 *)(v8 - 40) = result;
      v7 -= 368;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void sub_1099BDC(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_3BD7E4((uint64_t)&v10, a1);
  sub_3BD7E4((uint64_t)&v5, a2);
  sub_3BD7E4(a3, &v10);
  sub_3BD7E4(a3 + 72, &v5);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
}

void sub_1099C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1099C90()
{
  unk_25FDE37 = 16641;
  word_25FDE20 = 65;
  byte_25FDE4F = 1;
  byte_25FDE39 = 0;
}

double sub_1099CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_3C80F8(a1);
  uint64_t v5 = 104 * a2;
  uint64_t v6 = -v4;
  uint64_t v7 = -104 - v4;
  uint64_t v8 = v4 + 104;
  while (1)
  {
    uint64_t v9 = v4;
    uint64_t v10 = v6;
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    if (v4 + v5 <= (unint64_t)sub_3C80F8(a1) || v12 + v5 >= (unint64_t)sub_3FA3A8(a1)) {
      break;
    }
    uint64_t v13 = v9 + v5;
    int v14 = *(_DWORD *)(v9 + v5 - 100);
    int v15 = *(_DWORD *)(v9 + v5 - 52);
    if (((v14 & 0x20000000) == 0) != ((v15 & 0x20000000) == 0)
      && ((v15 ^ v14) & 0x1FFFFFFF) == 0
      && *(_DWORD *)(v13 - 104) == *(_DWORD *)(v13 - 56))
    {
      break;
    }
    uint64_t v17 = v12 + v5;
    int v18 = *(_DWORD *)(v12 + v5 + 4);
    int v19 = *(_DWORD *)(v12 + v5 + 52);
    if (((v18 & 0x20000000) == 0) != ((v19 & 0x20000000) == 0))
    {
      int v20 = *(_DWORD *)(v17 + 48);
      if (((v19 ^ v18) & 0x1FFFFFFF) == 0 && *(_DWORD *)(v12 + 104 * a2) == v20) {
        break;
      }
    }
    else
    {
      int v20 = *(_DWORD *)(v17 + 48);
    }
    if (*(_DWORD *)(v13 - 104) == v20)
    {
      int v21 = v19 ^ v14;
      uint64_t v4 = v9 - 104;
      uint64_t v6 = v10 + 104;
      uint64_t v7 = v11 - 104;
      uint64_t v8 = v12 + 104;
      if ((v21 & 0x1FFFFFFF) == 0) {
        continue;
      }
    }
    break;
  }
  uint64_t v22 = sub_3C80F8(a1);
  uint64_t v23 = v9 + 104 * a2;
  uint64_t v24 = sub_3FA3A8(a1);
  uint64_t v25 = v24;
  uint64_t v26 = v12 + 104 * a2;
  BOOL v27 = v26 != v24;
  if (v23 != v22 || v26 != v24)
  {
    BOOL v30 = v23 != v22 && v26 != v24;
LABEL_31:
    sub_EB3FE8(a1, (char *)(104 * a2 - v10), (char *)(104 * a2 + 104 * v30 - v11), v27);
    if (v23 == v22)
    {
      uint64_t v41 = sub_EB22DC(a1);
      long long v87 = *(_OWORD *)v41;
      long long v43 = *(_OWORD *)(v41 + 32);
      long long v42 = *(_OWORD *)(v41 + 48);
      long long v44 = *(_OWORD *)(v41 + 16);
      uint64_t v91 = *(void *)(v41 + 64);
      long long v89 = v43;
      long long v90 = v42;
      long long v88 = v44;
      LODWORD(v87) = 1000000000 - v87;
      LOBYTE(v91) = v91 ^ 1;
      BYTE8(v88) = BYTE8(v44) ^ 1;
      *(void *)&double result = sub_EB22B4(a1, (uint64_t)&v87).n128_u64[0];
      if (v26 != v25) {
        return result;
      }
    }
    else if (v26 != v25)
    {
      return result;
    }
    uint64_t v45 = sub_486CB4(a1);
    long long v87 = *(_OWORD *)v45;
    long long v47 = *(_OWORD *)(v45 + 32);
    long long v46 = *(_OWORD *)(v45 + 48);
    long long v48 = *(_OWORD *)(v45 + 16);
    uint64_t v91 = *(void *)(v45 + 64);
    long long v89 = v47;
    long long v90 = v46;
    long long v88 = v48;
    int v49 = 1000000000 - v87;
    goto LABEL_37;
  }
  BOOL v31 = (*(_DWORD *)(sub_EB2AA4(a1) + 4) & 0x20000000) == 0;
  if (v31 == ((*(unsigned char *)(sub_EB2ABC(a1) + 7) & 0x20) == 0))
  {
    BOOL v40 = (*(_DWORD *)(sub_EB2AA4(a1) + 4) & 0x20000000) == 0;
    if (((v40 ^ ((*(unsigned char *)(sub_EB2ABC(a1) + 7) & 0x20) == 0)) & 1) == 0)
    {
      uint64_t v57 = sub_EB2ABC(a1);
      long long v58 = *(_OWORD *)(v57 + 24);
      long long v81 = *(_OWORD *)(v57 + 8);
      long long v82 = v58;
      unsigned int v59 = *(_DWORD *)(v57 + 40);
      int v60 = *(unsigned __int16 *)(v57 + 44);
      char v61 = *(unsigned char *)(v57 + 46);
      char v62 = *(unsigned char *)(v57 + 47);
      uint64_t v80 = __PAIR64__(v60 | ((v61 != 0) << 29) | *(_DWORD *)(v57 + 4) & 0x40000000 | ((*(_DWORD *)(v57 + 4) >> 30 == 0) << 31), v59);
      unsigned int v83 = v59;
      __int16 v84 = v60;
      char v85 = v61 ^ 1;
      char v86 = v62;
      unint64_t v63 = sub_EB2A48(a1);
      unsigned int v64 = HIDWORD(v80) & 0x40000000;
      if (v80 < 0 && v64 == 0) {
        int v66 = 0x40000000;
      }
      else {
        int v66 = 0;
      }
      sub_EB2444(a1, v80 | ((HIDWORD(v63) & 0x80000000 | HIDWORD(v80) & 0xFFFFFFF | ((unint64_t)v80 >> 33) & 0x10000000 | (v64 >> 1) | v66) << 32), (long long *)&v80);
      uint64_t v67 = sub_EB22DC(a1);
      long long v87 = *(_OWORD *)v67;
      long long v69 = *(_OWORD *)(v67 + 32);
      long long v68 = *(_OWORD *)(v67 + 48);
      long long v70 = *(_OWORD *)(v67 + 16);
      uint64_t v91 = *(void *)(v67 + 64);
      long long v89 = v69;
      long long v90 = v68;
      long long v88 = v70;
      LODWORD(v87) = 1000000000 - v87;
      LOBYTE(v91) = v91 ^ 1;
      BYTE8(v88) = BYTE8(v70) ^ 1;
      sub_EB22B4(a1, (uint64_t)&v87);
      uint64_t v71 = sub_486CB4(a1);
      long long v75 = *(_OWORD *)v71;
      long long v73 = *(_OWORD *)(v71 + 32);
      long long v72 = *(_OWORD *)(v71 + 48);
      long long v74 = *(_OWORD *)(v71 + 16);
      uint64_t v79 = *(void *)(v71 + 64);
      long long v77 = v73;
      long long v78 = v72;
      long long v76 = v74;
      LODWORD(v75) = 1000000000 - v75;
      LOBYTE(v79) = v79 ^ 1;
      BYTE8(v76) = BYTE8(v74) ^ 1;
      uint64_t v56 = &v75;
      goto LABEL_45;
    }
    BOOL v30 = 0;
    goto LABEL_31;
  }
  unsigned int v32 = sub_EB3214(a1);
  if (v32 < sub_EB3228(a1))
  {
    unint64_t v33 = sub_EB2A48(a1);
    unint64_t v34 = (long long *)sub_EB2ABC(a1);
    sub_EB2444(a1, v33, v34);
    uint64_t v35 = sub_EB22DC(a1);
    long long v87 = *(_OWORD *)v35;
    long long v37 = *(_OWORD *)(v35 + 32);
    long long v36 = *(_OWORD *)(v35 + 48);
    long long v38 = *(_OWORD *)(v35 + 16);
    uint64_t v91 = *(void *)(v35 + 64);
    long long v89 = v37;
    long long v90 = v36;
    long long v88 = v38;
    LODWORD(v87) = 1000000000 - v87;
    LOBYTE(v91) = v91 ^ 1;
    BYTE8(v88) = BYTE8(v38) ^ 1;
    *(void *)&double result = sub_EB22B4(a1, (uint64_t)&v87).n128_u64[0];
    return result;
  }
  unint64_t v50 = sub_EB29EC(a1);
  unint64_t v51 = (long long *)sub_EB2AA4(a1);
  sub_EB2444(a1, v50, v51);
  uint64_t v52 = sub_486CB4(a1);
  long long v87 = *(_OWORD *)v52;
  long long v54 = *(_OWORD *)(v52 + 32);
  long long v53 = *(_OWORD *)(v52 + 48);
  long long v55 = *(_OWORD *)(v52 + 16);
  uint64_t v91 = *(void *)(v52 + 64);
  long long v89 = v54;
  long long v90 = v53;
  long long v88 = v55;
  int v49 = 1000000000 - v87;
LABEL_37:
  LODWORD(v87) = v49;
  LOBYTE(v91) = v91 ^ 1;
  BYTE8(v88) ^= 1u;
  uint64_t v56 = &v87;
LABEL_45:
  *(void *)&double result = sub_EB241C(a1, (uint64_t)v56).n128_u64[0];
  return result;
}

uint64_t sub_109A228(uint64_t a1)
{
  uint64_t v2 = (void *)sub_5231C(a1);
  uint64_t v3 = 0;
  for (uint64_t i = v2[1] - *v2; i; uint64_t i = v14[1] - *v14)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = i / 104;
    while (1)
    {
      uint64_t v8 = (int *)(*(void *)sub_5231C(a1) + v5);
      int v9 = v8[1];
      int v10 = v8[13];
      if (((v9 & 0x20000000) == 0) != ((v10 & 0x20000000) == 0))
      {
        int v11 = *v8;
        int v12 = v8[12];
        if (((v10 ^ v9) & 0x1FFFFFFF) == 0 && v11 == v12) {
          break;
        }
      }
      ++v6;
      v5 += 104;
      if (v7 == v6) {
        return v3;
      }
    }
    sub_1099CB8(a1, v6);
    uint64_t v3 = (v3 + 1);
    int v14 = (void *)sub_5231C(a1);
  }
  return v3;
}

uint64_t sub_109A318(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)nullsub_1(a1);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (*v1 == v3) {
    return 0;
  }
  LODWORD(v4) = 0;
  do
  {
    uint64_t v4 = sub_109A228(v2) + v4;
    v2 += 480;
  }
  while (v2 != v3);
  return v4;
}

void sub_109A384()
{
  unk_25FDE67 = 16641;
  word_25FDE50 = 65;
  byte_25FDE7F = 1;
  byte_25FDE69 = 0;
}

uint64_t sub_109A3AC(uint64_t a1, void *a2, int a3)
{
  char v18 = 12;
  uint64_t v16 = 0;
  strcpy((char *)v17, "BuddySnapper");
  int v14 = 0;
  int v15 = 0;
  uint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  sub_3CB370(v6, a3, 0, __p);
  sub_109A524(a1, __p);
  uint64_t v7 = v20;
  if (v20)
  {
    do
    {
      int v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      uint64_t v7 = v12;
    }
    while (v12);
  }
  uint64_t v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  int v9 = (void **)v14;
  if (v14)
  {
    int v10 = v15;
    int v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v14;
    }
    int v15 = v9;
    operator delete(v11);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  *(void *)(a1 + 32) = sub_3750CC(a2);
  return a1;
}

void sub_109A4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_109A524(uint64_t a1, void *a2)
{
  HIBYTE(v10) = 7;
  strcpy((char *)&__p, "enabled");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x28uLL);
  long long v10 = xmmword_20B8FD0;
  strcpy((char *)__p, "min_deviation_from_segment_direction");
  double v5 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v5;
  long long __p = operator new(0x20uLL);
  long long v10 = xmmword_20B91C0;
  strcpy((char *)__p, "relative_score_threshold");
  double v6 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 16) = v6;
  long long __p = operator new(0x20uLL);
  long long v10 = xmmword_20B91C0;
  strcpy((char *)__p, "absolute_score_threshold");
  double v7 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 24) = v7;
  return a1;
}

void sub_109A6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_109A6E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v14 = (int *)sub_2D5D58(*(void *)(a1 + 32), *(void *)(a3 + 32));
  int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  unsigned int v16 = *v15;
  if (v16 < 0x5F)
  {
    LODWORD(v17) = 0;
    LODWORD(v18) = 0;
    goto LABEL_9;
  }
  uint64_t v17 = v15[47];
  if (v15[47]) {
    LODWORD(v17) = *(int *)((char *)v14 + v17 + *(unsigned int *)((char *)v14 + v17));
  }
  if (v16 < 0x61)
  {
    if (v17) {
      goto LABEL_12;
    }
LABEL_10:
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    return;
  }
  uint64_t v18 = v15[48];
  if (!v18)
  {
LABEL_9:
    if (v18 + v17) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (!(*(int *)((char *)v14 + v18 + *(unsigned int *)((char *)v14 + v18)) + v17)) {
    goto LABEL_10;
  }
LABEL_12:
  sub_109AA74(*(void *)(a1 + 32), *(void *)(a3 + 32), &v31);
  int v19 = v31;
  int v20 = v32;
  if (v31 == v32)
  {
LABEL_15:
    int v21 = (int *)sub_2D5D58(*(void *)(a1 + 32), *(void *)(a3 + 32));
    uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
    if (*v22 < 0x2Fu)
    {
      LOBYTE(v23) = 0;
      *(void *)a7 = 0;
      *(void *)(a7 + 8) = 0;
      *(void *)(a7 + 16) = 0;
      uint64_t v24 = v31;
      uint64_t v25 = v32;
      if (v31 == v32) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v23 = v22[23];
      if (v23) {
        LOBYTE(v23) = *((unsigned char *)v21 + v23) == 44;
      }
      *(void *)a7 = 0;
      *(void *)(a7 + 8) = 0;
      *(void *)(a7 + 16) = 0;
      uint64_t v24 = v31;
      uint64_t v25 = v32;
      if (v31 == v32)
      {
LABEL_19:
        if (!v24) {
          return;
        }
        goto LABEL_20;
      }
    }
    if (v23)
    {
      while (1)
      {
        *(void *)&v30[0] = *v24 | ((unint64_t)*((unsigned __int16 *)v24 + 2) << 32);
        uint64_t v26 = *(void *)(a6 + 24);
        if (!v26) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v26 + 48))(v26, v30)
          && *((unsigned char *)v24 + 16) == 8)
        {
          *(void *)&v30[0] = *v24 | ((unint64_t)*((unsigned __int16 *)v24 + 2) << 32);
          BOOL v27 = sub_36F918(a5, v30);
          if (v27)
          {
            sub_4486B0((void **)a7, (long long *)(v27 + 3));
          }
          else
          {
            sub_109AC2C(a1, a2, a3, v24, (uint64_t)v30);
            sub_4486B0((void **)a7, v30);
          }
        }
        v24 += 6;
        if (v24 == v25) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      while (1)
      {
        *(void *)&v30[0] = *v24 | ((unint64_t)*((unsigned __int16 *)v24 + 2) << 32);
        uint64_t v28 = *(void *)(a6 + 24);
        if (!v28) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v28 + 48))(v28, v30)
          && *((unsigned char *)v24 + 16) == 3)
        {
          *(void *)&v30[0] = *v24 | ((unint64_t)*((unsigned __int16 *)v24 + 2) << 32);
          int v29 = sub_36F918(a5, v30);
          if (v29)
          {
            sub_4486B0((void **)a7, (long long *)(v29 + 3));
          }
          else
          {
            sub_109AC2C(a1, a2, a3, v24, (uint64_t)v30);
            sub_4486B0((void **)a7, v30);
          }
        }
        v24 += 6;
        if (v24 == v25) {
          goto LABEL_40;
        }
      }
    }
    sub_29F82C();
  }
  while (1)
  {
    *(void *)&v30[0] = *v19 | ((unint64_t)*((unsigned __int16 *)v19 + 2) << 32);
    if (sub_36F918(a4, v30)) {
      break;
    }
    v19 += 6;
    if (v19 == v20) {
      goto LABEL_15;
    }
  }
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
LABEL_40:
  uint64_t v24 = v31;
  if (v31)
  {
LABEL_20:
    unsigned int v32 = v24;
    operator delete(v24);
  }
}

void sub_109AA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_109AA74(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  double v5 = (int *)sub_2D5D58(a1, a2);
  double v6 = v5;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v7 = *v5;
  uint64_t v8 = (char *)v5 - v7;
  unsigned int v9 = *(unsigned __int16 *)((char *)v5 - v7);
  if (v9 < 0x5F)
  {
    LODWORD(v10) = 0;
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v8 + 47);
    if (*((_WORD *)v8 + 47)) {
      LODWORD(v10) = *(int *)((char *)v5 + v10 + *(unsigned int *)((char *)v5 + v10));
    }
    if (v9 < 0x61)
    {
      uint64_t v13 = v10;
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    uint64_t v11 = *((unsigned __int16 *)v8 + 48);
    if (*((_WORD *)v8 + 48))
    {
      int v12 = *(int *)((char *)v5 + v11 + *(unsigned int *)((char *)v5 + v11));
      uint64_t v13 = (v12 + v10);
      if (!(v12 + v10)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  uint64_t v13 = (v11 + v10);
  if (v11 + v10)
  {
LABEL_10:
    int v14 = (char *)operator new(24 * v13);
    *a3 = v14;
    a3[1] = v14;
    a3[2] = &v14[24 * v13];
  }
LABEL_11:
  uint64_t v15 = -v7;
  if (v9 >= 0x5F)
  {
    if (*((_WORD *)v8 + 47))
    {
      unsigned int v16 = (unsigned int *)((char *)v6 + *((unsigned __int16 *)v8 + 47));
      uint64_t v17 = *v16;
      uint64_t v28 = a3;
      int v19 = (unsigned int *)((char *)v16 + v17 + 4);
      uint64_t v18 = *(unsigned int *)((char *)v16 + v17);
      uint64_t v29 = a1;
      BOOL v30 = &v28;
      if (v18)
      {
        uint64_t v20 = 4 * v18;
        do
        {
          sub_109BB1C(&v29, (int *)((char *)v19 + *v19));
          ++v19;
          v20 -= 4;
        }
        while (v20);
        uint64_t v15 = -(uint64_t)*v6;
      }
    }
  }
  int v21 = (unsigned __int16 *)((char *)v6 + v15);
  if (*v21 >= 0x61u)
  {
    uint64_t v22 = v21[48];
    if (v22)
    {
      uint64_t v23 = (unsigned int *)((char *)v6 + v22);
      uint64_t v24 = *v23;
      uint64_t v28 = a3;
      uint64_t v26 = (unsigned int *)((char *)v23 + v24 + 4);
      uint64_t v25 = *(unsigned int *)((char *)v23 + v24);
      uint64_t v29 = a1;
      BOOL v30 = &v28;
      if (v25)
      {
        uint64_t v27 = 4 * v25;
        do
        {
          sub_109BB1C(&v29, (int *)((char *)v26 + *v26));
          ++v26;
          v27 -= 4;
        }
        while (v27);
      }
    }
  }
}

void sub_109AC08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_109AC2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
  sub_29549C(*(void *)(a1 + 32), v9, (uint64_t)&v60);
  sub_2E4B5C((uint64_t)&v60, &v64);
  if (__p)
  {
    char v62 = (double *)__p;
    operator delete(__p);
  }
  sub_3B8BC4((unsigned int **)&v64, (unsigned int *)a2, 0, 0, (uint64_t)v58, v10, v11, v12, v13);
  double v14 = v58[0] * 100.0;
  if (v58[0] * 100.0 >= 0.0)
  {
    double v15 = v58[0] * 100.0;
    if (v14 >= 4.50359963e15) {
      goto LABEL_11;
    }
    uint64_t v16 = (uint64_t)(v14 + v14) + 1;
  }
  else
  {
    double v15 = v58[0] * 100.0;
    if (v14 <= -4.50359963e15) {
      goto LABEL_11;
    }
    uint64_t v16 = (uint64_t)(v14 + v14);
    if (v16 >= 1) {
      --v16;
    }
  }
  double v15 = (double)(v16 >> 1);
LABEL_11:
  if (v15 < 9.22337204e18)
  {
    if (v14 >= 0.0)
    {
      if (v14 < 4.50359963e15)
      {
        uint64_t v17 = (uint64_t)(v14 + v14) + 1;
LABEL_20:
        double v14 = (double)(v17 >> 1);
      }
    }
    else if (v14 > -4.50359963e15)
    {
      uint64_t v17 = (uint64_t)(v14 + v14);
      if (v17 >= 1) {
        --v17;
      }
      goto LABEL_20;
    }
    uint64_t v18 = (uint64_t)v14;
    goto LABEL_22;
  }
  uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
LABEL_22:
  double v56 = v58[1];
  int v57 = v59;
  int v19 = (int *)sub_2D5D58(*(void *)(a1 + 32), v9);
  uint64_t v24 = (unsigned __int16 *)((char *)v19 - *v19);
  double v25 = 0.0;
  uint64_t v55 = a1;
  uint64_t v26 = a3;
  if (*v24 >= 9u)
  {
    uint64_t v27 = v24[4];
    if (v27)
    {
      LODWORD(v20) = *(int *)((char *)v19 + v27);
      double v25 = (double)v20;
    }
  }
  uint64_t v68 = 0x7FEFFFFFFFFFFFFFLL;
  double v28 = NAN;
  uint64_t v66 = -1;
  int v67 = 0x7FFFFFFF;
  int v60 = &v56;
  long long __p = &v68;
  char v62 = (double *)&v66;
  uint64_t v29 = v64;
  BOOL v30 = v65;
  if (v64 != v65 && (char *)v64 + 12 != v65)
  {
    do
    {
      sub_457FB8((uint64_t)&v60, v29, v29 + 3, v28, v21, v22.f64[0], v23);
      BOOL v31 = v29 + 6;
      v29 += 3;
    }
    while (v31 != v30);
    uint64_t v29 = v64;
    BOOL v30 = v65;
  }
  double v70 = 0.0;
  double v71 = 0.0;
  uint64_t v69 = 0x7FEFFFFFFFFFFFFFLL;
  int v60 = (double *)&v66;
  long long __p = &v69;
  char v62 = &v70;
  unint64_t v63 = &v71;
  if (v29 == v30 || v29 + 3 == v30)
  {
    double v34 = v25 * 0.0;
    if (v34 < 0.0)
    {
LABEL_36:
      double v35 = -4.50359963e15;
      if (v34 <= -4.50359963e15) {
        goto LABEL_44;
      }
      double v35 = v34 + v34;
      uint64_t v36 = (uint64_t)(v34 + v34);
      if (v36 >= 1) {
        --v36;
      }
      goto LABEL_43;
    }
  }
  else
  {
    do
    {
      double v28 = sub_4582C8(&v60, (uint64_t)v29, v29 + 3, v28);
      unsigned int v32 = v29 + 6;
      v29 += 3;
    }
    while (v32 != v30);
    double v21 = v71;
    double v33 = 0.0;
    if (v71 != 0.0)
    {
      double v33 = v70 / v71;
      double v21 = 1.0;
      if (v70 / v71 > 1.0) {
        double v33 = 1.0;
      }
    }
    double v34 = v25 * v33;
    if (v34 < 0.0) {
      goto LABEL_36;
    }
  }
  double v35 = 4.50359963e15;
  if (v34 >= 4.50359963e15) {
    goto LABEL_44;
  }
  double v35 = v34 + v34;
  uint64_t v36 = (uint64_t)(v34 + v34) + 1;
LABEL_43:
  double v34 = (double)(v36 >> 1);
LABEL_44:
  if (*(unsigned char *)(v26 + 43))
  {
    unint64_t v37 = sub_450B4C((uint64_t *)&v64, 0, 0xAAAAAAAAAAAAAAABLL * ((v65 - (unsigned char *)v64) >> 2) - 1, (_DWORD *)a2, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v35, v21, v22.f64[0], v23);
    long long v38 = (char *)v64 + 12 * v37;
    uint64_t v39 = *(void *)((char *)v38 + 12);
    v40.i64[0] = v39;
    v40.i64[1] = HIDWORD(v39);
    float64x2_t v41 = vcvtq_f64_u64(v40);
    v40.i64[0] = *v38;
    v40.i64[1] = HIDWORD(*v38);
    float64x2_t v42 = vcvtq_f64_u64(v40);
    v40.i64[0] = *(void *)a2;
    v40.i64[1] = HIDWORD(*(void *)a2);
    int8x16_t v43 = (int8x16_t)vsubq_f64(vcvtq_f64_u64(v40), v41);
    float64x2_t v22 = (float64x2_t)vextq_s8(v43, v43, 8uLL);
    int64x2_t v44 = (int64x2_t)vmulq_f64(vsubq_f64(v42, v41), v22);
    double v45 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v44, 1), (float64x2_t)v44).f64[0];
    if (v45 == 0.0) {
      __int16 v46 = 2;
    }
    else {
      __int16 v46 = 1;
    }
    if (v45 >= 0.0) {
      __int16 v47 = v46;
    }
    else {
      __int16 v47 = 0;
    }
    __int16 v48 = 1;
    unsigned int v49 = *(unsigned __int16 *)(a2 + 50);
    if (v49 >> 5 <= 0x464) {
      goto LABEL_52;
    }
  }
  else
  {
    __int16 v47 = 0;
    __int16 v48 = 0;
    unsigned int v49 = *(unsigned __int16 *)(a2 + 50);
    if (v49 >> 5 <= 0x464)
    {
LABEL_52:
      sub_109B93C((uint64_t *)&v64, (_DWORD *)a2, (double)v49 / 100.0, 100.0, v22.f64[0], v23);
      __int16 v51 = fabs(v50) > *(double *)(v55 + 8);
      __int16 v52 = 1;
      goto LABEL_55;
    }
  }
  __int16 v51 = 0;
  __int16 v52 = 0;
LABEL_55:
  __int16 v53 = v51 | (v52 << 8);
  double v54 = v56;
  *(void *)a5 = v18;
  *(double *)(a5 + 8) = v54;
  *(_DWORD *)(a5 + 16) = v57;
  *(void *)(a5 + 24) = (uint64_t)v34;
  *(void *)(a5 + 32) = v9;
  *(_WORD *)(a5 + 40) = v53;
  *(_WORD *)(a5 + 42) = v47 | (v48 << 8);
  *(void *)(a5 + 48) = 0;
  *(unsigned char *)(a5 + 56) = *(unsigned char *)(v26 + 56);
  if (v64)
  {
    BOOL v65 = v64;
    operator delete(v64);
  }
}

void sub_109B088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_109B0CC(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_109B0E0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32) && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
}

void sub_109B0F8(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*a1)
  {
    uint64_t v8 = (char **)(a2 + 13);
    *(_OWORD *)int v57 = 0u;
    *(_OWORD *)long long v58 = 0u;
    int v59 = 1065353216;
    sub_109BD4C((uint64_t)&v60, (uint64_t)v57, a2 + 13);
    uint64_t v9 = a2[13];
    for (uint64_t i = a2[14]; v9 != i; v9 += 64)
    {
      int v60 = *(void **)(v9 + 32);
      sub_448348((uint64_t)v57, &v60, &v60);
    }
    *(_OWORD *)double v54 = 0u;
    *(_OWORD *)uint64_t v55 = 0u;
    int v56 = 1065353216;
    sub_109BD4C((uint64_t)&v60, (uint64_t)v54, a2 + 16);
    double v11 = (long long *)a2[16];
    for (uint64_t j = (long long *)a2[17]; v11 != j; v11 += 4)
    {
      long long v13 = *v11;
      long long v14 = v11[1];
      unint64_t v63 = (void *)*((void *)v11 + 4);
      long long v61 = v13;
      long long v62 = v14;
      int v15 = *((_DWORD *)v11 + 10);
      int v60 = v63;
      int v64 = v15;
      uint64_t v16 = *((void *)v11 + 6);
      char v66 = *((unsigned char *)v11 + 56);
      uint64_t v65 = v16;
      sub_109BE64((uint64_t)v54, &v60, (uint64_t)&v60);
    }
    int v60 = 0;
    long long v61 = 0uLL;
    uint64_t v17 = a2[13];
    uint64_t v18 = a2[14];
    if (v17 == v18)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0;
    }
    else
    {
      do
      {
        sub_109A6E0((uint64_t)a1, a3, v17, v57, v54, a4, (uint64_t)&__p);
        sub_109B60C((uint64_t)a1, (uint64_t)&__p);
        sub_109C3C8((char **)&v60, v61, (long long *)__p, v53, ((char *)v53 - (unsigned char *)__p) >> 6);
        if (__p)
        {
          __int16 v53 = (long long *)__p;
          operator delete(__p);
        }
        v17 += 64;
      }
      while (v17 != v18);
      unint64_t v20 = v60;
      unint64_t v19 = v61;
    }
    unint64_t v21 = 126 - 2 * __clz((uint64_t)(v19 - (void)v20) >> 6);
    long long __p = sub_109B0CC;
    if ((void *)v19 == v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = v21;
    }
    sub_109C7FC((uint64_t)v20, v19, (uint64_t (**)(uint64_t *, uint64_t *))&__p, v22, 1);
    sub_109C1FC((uint64_t *)&v60, (uint64_t (*)(void))sub_109B0E0);
    sub_109C3C8(v8, a2[14], (long long *)v60, (long long *)v61, (uint64_t)(v61 - (void)v60) >> 6);
    uint64_t v24 = (char *)a2[16];
    double v23 = (char *)a2[17];
    if (v24 != v23)
    {
      if (v60 == (void *)v61)
      {
        double v25 = &v24[(v23 - v24) & 0xFFFFFFFFFFFFFFC0];
      }
      else
      {
        double v25 = (char *)a2[16];
LABEL_18:
        uint64_t v26 = v60;
        while (v26[8] != *((_DWORD *)v25 + 8) || v26[9] != *((_DWORD *)v25 + 9))
        {
          v26 += 16;
          if (v26 == (_DWORD *)v61)
          {
            v25 += 64;
            if (v25 != v23) {
              goto LABEL_18;
            }
            goto LABEL_52;
          }
        }
      }
      if (v25 != v23)
      {
        double v28 = v25 + 64;
        if (v25 + 64 != v23)
        {
          uint64_t v29 = v25;
          do
          {
            BOOL v31 = v28;
            unsigned int v32 = v60;
            if (v60 == (void *)v61)
            {
LABEL_38:
              *(void *)uint64_t v29 = *v31;
              uint64_t v34 = *((void *)v25 + 9);
              *((_DWORD *)v29 + 4) = *((_DWORD *)v25 + 20);
              *((void *)v29 + 1) = v34;
              *(_OWORD *)(v29 + 24) = *(_OWORD *)(v25 + 88);
              char v35 = v25[105];
              if (v35)
              {
                v29[40] = v25[104];
                char v35 = 1;
              }
              v29[41] = v35;
              char v36 = v25[107];
              if (v36)
              {
                v29[42] = v25[106];
                char v36 = 1;
              }
              v29[43] = v36;
              uint64_t v30 = *((void *)v25 + 14);
              v29[56] = v25[120];
              *((void *)v29 + 6) = v30;
              v29 += 64;
            }
            else
            {
              while (v32[8] != *((_DWORD *)v25 + 24) || v32[9] != *((_DWORD *)v25 + 25))
              {
                v32 += 16;
                if (v32 == (_DWORD *)v61) {
                  goto LABEL_38;
                }
              }
            }
            double v28 = v31 + 8;
            double v25 = (char *)v31;
          }
          while (v31 + 8 != (void *)v23);
          double v23 = (char *)a2[17];
          double v25 = v29;
        }
        if (v25 != v23)
        {
          unint64_t v37 = v25;
          uint64_t v38 = v23 - v25;
          if (&v37[v38] != v23)
          {
            uint64_t v39 = v38 >> 6 << 6;
            do
            {
              uint64x2_t v40 = &v37[v39];
              int v41 = *(_DWORD *)&v37[v39 + 16];
              uint64_t v42 = *(void *)&v37[v39 + 8];
              *(void *)unint64_t v37 = *(void *)&v37[v39];
              *((void *)v37 + 1) = v42;
              *((_DWORD *)v37 + 4) = v41;
              *(_OWORD *)(v37 + 24) = *(_OWORD *)&v37[v39 + 24];
              char v43 = v37[v39 + 41];
              if (v43)
              {
                v37[40] = v40[40];
                char v43 = 1;
              }
              v37[41] = v43;
              int v44 = v40[43];
              if (v44)
              {
                v37[42] = v37[v39 + 42];
                LOBYTE(v44) = 1;
              }
              v37[43] = v44;
              char v45 = v37[v39 + 56];
              *((void *)v37 + 6) = *(void *)&v37[v39 + 48];
              v37[56] = v45;
              v37 += 64;
            }
            while (&v37[v39] != v23);
          }
          a2[17] = v37;
        }
      }
    }
LABEL_52:
    if (v60)
    {
      *(void *)&long long v61 = v60;
      operator delete(v60);
    }
    __int16 v46 = v55[0];
    if (v55[0])
    {
      do
      {
        __int16 v47 = (void *)*v46;
        operator delete(v46);
        __int16 v46 = v47;
      }
      while (v47);
    }
    __int16 v48 = v54[0];
    v54[0] = 0;
    if (v48) {
      operator delete(v48);
    }
    unsigned int v49 = v58[0];
    if (v58[0])
    {
      do
      {
        double v50 = (void *)*v49;
        operator delete(v49);
        unsigned int v49 = v50;
      }
      while (v50);
    }
    __int16 v51 = v57[0];
    v57[0] = 0;
    if (v51) {
      operator delete(v51);
    }
  }
}

void sub_109B540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
    sub_12168((uint64_t)&a13);
    sub_12168((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_12168((uint64_t)&a13);
  sub_12168((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t *sub_109B60C(uint64_t a1, uint64_t a2)
{
  double result = *(uint64_t **)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  if (result == (uint64_t *)v5) {
    return result;
  }
  uint64_t v26 = (uint64_t (*)(uint64_t *, uint64_t *))sub_109B0CC;
  double result = (uint64_t *)sub_109C7FC((uint64_t)result, v5, &v26, 126 - 2 * __clz((uint64_t)(v5 - (void)result) >> 6), 1);
  double v6 = *(uint64_t **)a2;
  uint64_t v7 = **(void **)a2;
  double v8 = *(double *)(a1 + 16) * (double)v7;
  if (v8 >= 0.0)
  {
    if (v8 >= 4.50359963e15) {
      goto LABEL_10;
    }
    uint64_t v9 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    if (v8 <= -4.50359963e15) {
      goto LABEL_10;
    }
    uint64_t v9 = (uint64_t)(v8 + v8);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_10:
  double v10 = *(double *)(a1 + 24) * 100.0;
  if (v10 < 0.0)
  {
    double v11 = *(double *)(a1 + 24) * 100.0;
    if (v10 > -4.50359963e15)
    {
      uint64_t v12 = (uint64_t)(v10 + v10);
      if (v12 >= 1) {
        --v12;
      }
      double v11 = (double)(v12 >> 1);
    }
    uint64_t v13 = (uint64_t)v8;
    if (v11 < 9.22337204e18) {
      goto LABEL_16;
    }
LABEL_24:
    uint64_t v16 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_29;
  }
  double v15 = (double)(((uint64_t)(v10 + v10) + 1) >> 1);
  if (v10 >= 4.50359963e15) {
    double v15 = *(double *)(a1 + 24) * 100.0;
  }
  uint64_t v13 = (uint64_t)v8;
  if (v15 >= 9.22337204e18) {
    goto LABEL_24;
  }
LABEL_16:
  if (v10 >= 0.0)
  {
    if (v10 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v10 + v10) + 1;
LABEL_27:
      double v10 = (double)(v14 >> 1);
    }
  }
  else if (v10 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v10 + v10);
    if (v14 >= 1) {
      --v14;
    }
    goto LABEL_27;
  }
  uint64_t v16 = (uint64_t)v10;
LABEL_29:
  uint64_t v17 = v16 + v7;
  if (v17 > v13) {
    uint64_t v13 = v17;
  }
  uint64_t v18 = *(uint64_t **)(a2 + 8);
  if (v6 != v18)
  {
    while (*v6 <= v13)
    {
      v6 += 8;
      if (v6 == v18) {
        return result;
      }
    }
    if (v6 != v18 && v6 + 8 != v18)
    {
      unint64_t v19 = v6 + 14;
      do
      {
        uint64_t v21 = *(v19 - 6);
        if (v21 <= v13)
        {
          uint64_t *v6 = v21;
          uint64_t v22 = *(v19 - 5);
          *((_DWORD *)v6 + 4) = *((_DWORD *)v19 - 8);
          v6[1] = v22;
          *(_OWORD *)(v6 + 3) = *(_OWORD *)(v19 - 3);
          char v23 = *((unsigned char *)v19 - 7);
          if (v23)
          {
            *((unsigned char *)v6 + 40) = *((unsigned char *)v19 - 8);
            char v23 = 1;
          }
          *((unsigned char *)v6 + 41) = v23;
          char v24 = *((unsigned char *)v19 - 5);
          if (v24)
          {
            *((unsigned char *)v6 + 42) = *((unsigned char *)v19 - 6);
            char v24 = 1;
          }
          *((unsigned char *)v6 + 43) = v24;
          uint64_t v25 = *v19;
          *((unsigned char *)v6 + 56) = *((unsigned char *)v19 + 8);
          v6[6] = v25;
          v6 += 8;
        }
        unint64_t v20 = v19 + 2;
        v19 += 8;
      }
      while (v20 != v18);
      uint64_t v18 = *(uint64_t **)(a2 + 8);
    }
    if (v6 != v18) {
      *(void *)(a2 + 8) = v6;
    }
  }
  return result;
}

void sub_109B93C(uint64_t *a1, _DWORD *a2, double a3, double a4, double a5, double a6)
{
  unint64_t v8 = sub_450B4C(a1, 0, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2) - 1, a2, 0, 0x7FFFFFFFFFFFFFFFLL, 1, a3, a4, a5, a6);
  uint64_t v9 = *a1;
  unint64_t v10 = v8 + 1;
  unsigned int v11 = *(_DWORD *)(*a1 + 12 * v8 + 12) - *(_DWORD *)(*a1 + 12 * v8);
  if (v11)
  {
    unsigned int v13 = *(_DWORD *)(v9 + 12 * v10 + 4);
    unsigned int v12 = *(_DWORD *)(v9 + 12 * v8 + 4);
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(v9 + 12 * v8 + 4);
    unsigned int v13 = *(_DWORD *)(v9 + 12 * v10 + 4);
    double i = 0.0;
    if (v12 == v13) {
      goto LABEL_11;
    }
  }
  double v15 = -(double)(*(_DWORD *)(*a1 + 12 * v8) - *(_DWORD *)(*a1 + 12 * v8 + 12));
  if (v11 < -v11) {
    double v15 = (double)v11;
  }
  for (double i = (atan2((double)v13 - (double)v12, v15) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
    ;
  for (; i < -180.0; double i = i + 360.0)
    ;
LABEL_11:
  for (double j = a3 - i; j >= 180.0; double j = j + -360.0)
    ;
  for (; j < -180.0; double j = j + 360.0)
    ;
}

void sub_109BB1C(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  BOOL v4 = (unsigned __int16 *)((char *)a2 - *a2);
  uint64_t v5 = *(void *)((char *)a2 + v4[2]);
  if (*v4 >= 7u)
  {
    uint64_t v6 = v4[3];
    if (v6)
    {
      char v7 = *((unsigned char *)a2 + v6);
      uint64_t v8 = WORD2(v5);
      uint64_t v9 = v5;
      if (!*(unsigned char *)(v3 + 7774)) {
        goto LABEL_11;
      }
LABEL_6:
      unint64_t v10 = sub_290DEC(v3 + 3896, v9, 1);
      if (!v10) {
        return;
      }
      unsigned int v11 = &v10[-*(int *)v10];
      if (*(unsigned __int16 *)v11 < 5u) {
        return;
      }
      uint64_t v12 = *((unsigned __int16 *)v11 + 2);
      if (!v12
        || *(_DWORD *)&v10[v12 + *(unsigned int *)&v10[v12]] <= v8
        || !sub_295DB4(v3, v9 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD2(v5) << 32)))
      {
        return;
      }
      goto LABEL_11;
    }
  }
  char v7 = 0;
  uint64_t v8 = WORD2(v5);
  uint64_t v9 = v5;
  if (*(unsigned char *)(v3 + 7774)) {
    goto LABEL_6;
  }
LABEL_11:
  uint64_t v13 = v5 & 0xFF000000000000;
  uint64_t v14 = v8 << 32;
  uint64_t v15 = a1[1];
  uint64_t v16 = *(unint64_t ***)v15;
  uint64_t v18 = *(unint64_t **)(*(void *)v15 + 8);
  unint64_t v17 = *(void *)(*(void *)v15 + 16);
  if ((unint64_t)v18 >= v17)
  {
    unint64_t v20 = *v16;
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v18 - *v16);
    unint64_t v22 = v21 + 1;
    if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v20) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x555555555555555) {
      unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v25 = (char *)operator new(24 * v24);
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[24 * v21];
    *(void *)uint64_t v26 = v9 | ((unint64_t)(v13 == 0) << 48) | v14;
    *((void *)v26 + 1) = 0x7FFFFFFFFFFFFFFFLL;
    v26[16] = v7;
    unint64_t v19 = (unint64_t *)(v26 + 24);
    if (v18 != v20)
    {
      do
      {
        long long v27 = *(_OWORD *)(v18 - 3);
        *(v26 - 8) = *((unsigned char *)v18 - 8);
        *(_OWORD *)(v26 - 24) = v27;
        v26 -= 24;
        v18 -= 3;
      }
      while (v18 != v20);
      uint64_t v18 = *v16;
    }
    *uint64_t v16 = (unint64_t *)v26;
    v16[1] = v19;
    long long v16[2] = (unint64_t *)&v25[24 * v24];
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v18 = v9 | ((unint64_t)(v13 == 0) << 48) | v14;
    v18[1] = 0x7FFFFFFFFFFFFFFFLL;
    *((unsigned char *)v18 + 16) = v7;
    unint64_t v19 = v18 + 3;
  }
  v16[1] = v19;
}

void sub_109BD4C(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(*(void *)(a2 + 24) + ((uint64_t)(a3[1] - *a3) >> 6)) / *(float *)(a2 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v5 = *(int8x8_t *)(a2 + 8);
  if (prime > *(void *)&v5) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v5) {
    return;
  }
  size_t v6 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
  if (*(void *)&v5 >= 3uLL)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] <= 1uLL)
    {
      uint64_t v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2) {
        size_t v6 = v8;
      }
      if (prime <= v6) {
        unint64_t prime = v6;
      }
      if (prime >= *(void *)&v5) {
        return;
      }
LABEL_18:
      sub_B6C0(a2, prime);
      return;
    }
  }
  size_t v9 = std::__next_prime(v6);
  if (prime <= v9) {
    unint64_t prime = v9;
  }
  if (prime < *(void *)&v5) {
    goto LABEL_18;
  }
}

char *sub_109BE64(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return (char *)v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return (char *)v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unint64_t v19 = (char *)operator new(0x58uLL);
  *(void *)unint64_t v19 = 0;
  *((void *)v19 + 1) = v9;
  *((void *)v19 + 2) = *(void *)a3;
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v19 + 7) = *(void *)(a3 + 40);
  *((_DWORD *)v19 + 16) = *(_DWORD *)(a3 + 48);
  v19[80] = *(unsigned char *)(a3 + 64);
  *((void *)v19 + 9) = *(void *)(a3 + 56);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *(void *)unint64_t v19 = *v23;
LABEL_69:
      *unint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        unint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *(void *)unint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*(void *)v19)
  {
    unint64_t v32 = *(void *)(*(void *)v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_109C1E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_109C1FC(uint64_t *a1, uint64_t (*a2)(void))
{
  double result = (uint64_t *)*a1;
  BOOL v4 = (uint64_t *)a1[1];
  if (result == v4)
  {
LABEL_14:
    if (result != (uint64_t *)a1[1]) {
LABEL_17:
    }
      a1[1] = (uint64_t)result;
  }
  else
  {
    do
    {
      uint64_t v6 = result + 8;
      if (result + 8 == v4)
      {
        double result = v4;
        goto LABEL_14;
      }
      int v7 = a2();
      double result = v6;
    }
    while (!v7);
    unint64_t v8 = v6 - 8;
    if (v6 + 8 != v4)
    {
      unint64_t v9 = v6 + 14;
      do
      {
        if ((((uint64_t (*)(uint64_t *, uint64_t *))a2)(v8, v9 - 6) & 1) == 0)
        {
          v8[8] = *(v9 - 6);
          uint64_t v11 = *(v9 - 5);
          *((_DWORD *)v8 + 20) = *((_DWORD *)v9 - 8);
          v8[9] = v11;
          *(_OWORD *)(v8 + 11) = *(_OWORD *)(v9 - 3);
          char v12 = *((unsigned char *)v9 - 7);
          if (v12)
          {
            *((unsigned char *)v8 + 104) = *((unsigned char *)v9 - 8);
            char v12 = 1;
          }
          *((unsigned char *)v8 + 105) = v12;
          char v13 = *((unsigned char *)v9 - 5);
          if (v13)
          {
            *((unsigned char *)v8 + 106) = *((unsigned char *)v9 - 6);
            char v13 = 1;
          }
          *((unsigned char *)v8 + 107) = v13;
          uint64_t v14 = *v9;
          *((unsigned char *)v8 + 120) = *((unsigned char *)v9 + 8);
          v8[14] = v14;
          v8 += 8;
        }
        unint64_t v10 = v9 + 2;
        v9 += 8;
      }
      while (v10 != v4);
    }
    double result = v8 + 8;
    if (v8 + 8 != (uint64_t *)a1[1]) {
      goto LABEL_17;
    }
  }
  return result;
}

unint64_t sub_109C3C8(char **a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  int8x8_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  unint64_t v7 = (unint64_t)&(*a1)[v6 & 0xFFFFFFFFFFFFFFC0];
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = a3;
  uint64_t v11 = v6 >> 6;
  unint64_t v13 = (unint64_t)a1[1];
  char v12 = a1[2];
  if (a5 <= (uint64_t)&v12[-v13] >> 6)
  {
    uint64_t v18 = (uint64_t)(v13 - v7) >> 6;
    if (v18 >= a5)
    {
      unint64_t v19 = &a3[4 * a5];
      float v20 = a1[1];
      unint64_t v26 = v7 + (a5 << 6);
      long long v27 = (char *)(v13 - (a5 << 6));
      unint64_t v28 = v20;
      if ((unint64_t)v27 >= v13) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v19 = &a3[4 * v18];
      float v20 = a1[1];
      if (v19 != a4)
      {
        float v21 = v19;
        uint64_t v22 = a1[1];
        do
        {
          long long v23 = *v21;
          long long v24 = v21[1];
          *((void *)v22 + 4) = *((void *)v21 + 4);
          *(_OWORD *)uint64_t v22 = v23;
          *((_OWORD *)v22 + 1) = v24;
          *((_WORD *)v22 + 20) = *((_WORD *)v21 + 20);
          *((_WORD *)v22 + 21) = *((_WORD *)v21 + 21);
          uint64_t v25 = *((void *)v21 + 6);
          v22[56] = *((unsigned char *)v21 + 56);
          *((void *)v22 + 6) = v25;
          v20 += 64;
          v21 += 4;
          v22 += 64;
        }
        while (v21 != a4);
      }
      a1[1] = v20;
      if ((uint64_t)(v13 - v7) < 1) {
        return v7;
      }
      unint64_t v26 = v7 + (a5 << 6);
      long long v27 = &v20[-64 * a5];
      unint64_t v28 = v20;
      if ((unint64_t)v27 >= v13) {
        goto LABEL_22;
      }
    }
    unint64_t v28 = v20;
    do
    {
      long long v29 = *(_OWORD *)v27;
      long long v30 = *((_OWORD *)v27 + 1);
      *((void *)v28 + 4) = *((void *)v27 + 4);
      *(_OWORD *)unint64_t v28 = v29;
      *((_OWORD *)v28 + 1) = v30;
      *((_WORD *)v28 + 20) = *((_WORD *)v27 + 20);
      *((_WORD *)v28 + 21) = *((_WORD *)v27 + 21);
      uint64_t v31 = *((void *)v27 + 6);
      v28[56] = v27[56];
      *((void *)v28 + 6) = v31;
      v28 += 64;
      v27 += 64;
    }
    while ((unint64_t)v27 < v13);
LABEL_22:
    a1[1] = v28;
    if (v20 != (char *)v26)
    {
      uint64_t v32 = 0;
      uint64_t v33 = (uint64_t)&v20[-v26] >> 6 << 6;
      uint64_t v34 = &v5[64 * v11 + v33];
      uint64_t v35 = -v33;
      do
      {
        char v36 = &v34[v32];
        unint64_t v37 = &v20[v32];
        *((void *)v37 - 8) = *(void *)&v34[v32 - 64];
        uint64_t v38 = *(void *)&v34[v32 - 56];
        *((_DWORD *)v37 - 12) = *(_DWORD *)&v34[v32 - 48];
        *((void *)v37 - 7) = v38;
        *(_OWORD *)(v37 - 40) = *(_OWORD *)&v34[v32 - 40];
        char v39 = v34[v32 - 23];
        if (v39)
        {
          *(v37 - 24) = *(v36 - 24);
          char v39 = 1;
        }
        *(v37 - 23) = v39;
        int v40 = *(v36 - 21);
        if (v40)
        {
          v20[v32 - 22] = v34[v32 - 22];
          LOBYTE(v40) = 1;
        }
        int v41 = &v20[v32];
        *(v41 - 21) = v40;
        uint64_t v42 = *(void *)&v34[v32 - 16];
        *(v41 - 8) = v34[v32 - 8];
        *((void *)v41 - 2) = v42;
        v32 -= 64;
      }
      while (v35 != v32);
    }
    if (v19 != a3)
    {
      char v43 = (char *)a3 + 42;
      for (double i = &v5[64 * v11 + 42]; ; i += 64)
      {
        long long v45 = *(_OWORD *)(v43 - 42);
        long long v46 = *(_OWORD *)(v43 - 26);
        *(void *)(i - 10) = *(void *)(v43 - 10);
        *(_OWORD *)(i - 26) = v46;
        *(_OWORD *)(i - 42) = v45;
        if (!*(v43 - 1)) {
          break;
        }
        *(i - 2) = *(v43 - 2);
        __int16 v47 = v43 - 42;
        __int16 v48 = i - 42;
        *(i - 1) = 1;
        char v49 = v43[1];
        if (v49) {
          goto LABEL_33;
        }
LABEL_34:
        i[1] = v49;
        uint64_t v50 = *((void *)v47 + 6);
        v48[56] = v47[56];
        *((void *)v48 + 6) = v50;
        v43 += 64;
        if (v47 + 64 == (char *)v19) {
          return v7;
        }
      }
      __int16 v47 = v43 - 42;
      __int16 v48 = i - 42;
      *(i - 1) = 0;
      char v49 = v43[1];
      if (!v49) {
        goto LABEL_34;
      }
LABEL_33:
      *double i = *v43;
      char v49 = 1;
      goto LABEL_34;
    }
    return v7;
  }
  unint64_t v14 = a5 + ((uint64_t)(v13 - (void)v5) >> 6);
  if (v14 >> 58) {
    sub_2E00();
  }
  uint64_t v15 = v12 - v5;
  if (v15 >> 5 > v14) {
    unint64_t v14 = v15 >> 5;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 58) {
      sub_188D718();
    }
    unint64_t v17 = (char *)operator new(v16 << 6);
  }
  else
  {
    unint64_t v17 = 0;
  }
  __int16 v51 = &v17[64 * v11];
  __int16 v52 = &v51[64 * a5];
  __int16 v53 = v51;
  do
  {
    long long v54 = *v9;
    long long v55 = v9[1];
    *((void *)v53 + 4) = *((void *)v9 + 4);
    *(_OWORD *)__int16 v53 = v54;
    *((_OWORD *)v53 + 1) = v55;
    *((_WORD *)v53 + 20) = *((_WORD *)v9 + 20);
    *((_WORD *)v53 + 21) = *((_WORD *)v9 + 21);
    uint64_t v56 = *((void *)v9 + 6);
    v53[56] = *((unsigned char *)v9 + 56);
    *((void *)v53 + 6) = v56;
    v53 += 64;
    v9 += 4;
  }
  while (v53 != v52);
  int v57 = *a1;
  long long v58 = &v17[64 * v11];
  if (*a1 != (char *)v7)
  {
    uint64_t v59 = v11 << 6;
    int v60 = v17;
    do
    {
      long long v61 = &v60[v59];
      long long v62 = *(_OWORD *)&v5[v59 - 64];
      long long v63 = *(_OWORD *)&v5[v59 - 48];
      *((void *)v61 - 4) = *(void *)&v5[v59 - 32];
      *((_OWORD *)v61 - 4) = v62;
      *((_OWORD *)v61 - 3) = v63;
      *((_WORD *)v61 - 12) = *(_WORD *)&v5[v59 - 24];
      *((_WORD *)v61 - 11) = *(_WORD *)&v5[v59 - 22];
      uint64_t v64 = *(void *)&v5[v59 - 16];
      *(v61 - 8) = v5[v59 - 8];
      *((void *)v61 - 2) = v64;
      v60 -= 64;
      v5 -= 64;
    }
    while (&v5[v59] != v57);
    long long v58 = &v60[64 * v11];
  }
  uint64_t v65 = &v17[64 * v16];
  for (double j = a1[1]; (char *)v7 != j; v7 += 64)
  {
    long long v67 = *(_OWORD *)v7;
    long long v68 = *(_OWORD *)(v7 + 16);
    *((void *)v52 + 4) = *(void *)(v7 + 32);
    *(_OWORD *)__int16 v52 = v67;
    *((_OWORD *)v52 + 1) = v68;
    *((_WORD *)v52 + 20) = *(_WORD *)(v7 + 40);
    *((_WORD *)v52 + 21) = *(_WORD *)(v7 + 42);
    uint64_t v69 = *(void *)(v7 + 48);
    v52[56] = *(unsigned char *)(v7 + 56);
    *((void *)v52 + 6) = v69;
    v52 += 64;
  }
  double v70 = *a1;
  *a1 = v58;
  a1[1] = v52;
  a1[2] = v65;
  if (v70) {
    operator delete(v70);
  }
  return (unint64_t)v51;
}

uint64_t sub_109C7FC(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  unint64_t v67 = a2;
  long long v68 = (uint64_t *)(a2 - 64);
  uint64_t v65 = (uint64_t *)(a2 - 192);
  char v66 = (uint64_t *)(a2 - 128);
  uint64_t v10 = v9;
LABEL_3:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v12 = a2 - v10;
    unint64_t v13 = (uint64_t)(a2 - v10) >> 6;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = (*a3)(v68, (uint64_t *)v10);
          if (!result) {
            return result;
          }
          uint64_t v37 = *(void *)v10;
          uint64_t v76 = *(void *)(v10 + 8);
          int v77 = *(_DWORD *)(v10 + 16);
          *(_DWORD *)&v70[16] = *(_DWORD *)(v10 + 36);
          *(_OWORD *)double v70 = *(_OWORD *)(v10 + 20);
          unsigned int v38 = *(unsigned __int16 *)(v10 + 40);
          unsigned int v39 = *(unsigned __int16 *)(v10 + 42);
          uint64_t v74 = *(void *)(v10 + 48);
          char v75 = *(unsigned char *)(v10 + 56);
          *(void *)uint64_t v10 = *(void *)(a2 - 64);
          uint64_t v40 = *(void *)(a2 - 56);
          *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 - 48);
          *(void *)(v10 + 8) = v40;
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 - 40);
          char v41 = *(unsigned char *)(a2 - 23);
          if (v41)
          {
            *(unsigned char *)(v10 + 40) = *(unsigned char *)(a2 - 24);
            char v41 = 1;
          }
          *(unsigned char *)(v10 + 41) = v41;
          char v42 = *(unsigned char *)(a2 - 21);
          if (v42)
          {
            *(unsigned char *)(v10 + 42) = *(unsigned char *)(a2 - 22);
            char v42 = 1;
          }
          *(unsigned char *)(v10 + 43) = v42;
          uint64_t v43 = *(void *)(a2 - 16);
          *(unsigned char *)(v10 + 56) = *(unsigned char *)(a2 - 8);
          *(void *)(v10 + 48) = v43;
          *(void *)(a2 - 64) = v37;
          *(void *)(a2 - 56) = v76;
          *(_DWORD *)(a2 - 48) = v77;
          *(_OWORD *)(a2 - 40) = *(_OWORD *)&v70[4];
          if (v38 < 0x100)
          {
            *(unsigned char *)(a2 - 23) = 0;
            if (v39 >= 0x100) {
              goto LABEL_40;
            }
          }
          else
          {
            *(unsigned char *)(a2 - 24) = v38;
            *(unsigned char *)(a2 - 23) = 1;
            if (v39 >= 0x100)
            {
LABEL_40:
              *(unsigned char *)(a2 - 22) = v39;
              char v44 = 1;
              goto LABEL_41;
            }
          }
          char v44 = 0;
LABEL_41:
          *(unsigned char *)(a2 - 21) = v44;
          *(void *)(a2 - 16) = v74;
          *(unsigned char *)(a2 - 8) = v75;
          return result;
        case 3uLL:
          return sub_109D174((uint64_t *)v10, (uint64_t *)(v10 + 64), v68, a3);
        case 4uLL:
          return sub_109E260(v10, v10 + 64, v10 + 128, (uint64_t)v68, a3);
        case 5uLL:
          return sub_109E664(v10, v10 + 64, v10 + 128, v10 + 192, (uint64_t)v68, a3);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 1535) {
      break;
    }
    uint64_t v14 = v11;
    if (v11 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v45 = (v13 - 2) >> 1;
        unint64_t v46 = v45 + 1;
        __int16 v47 = (long long *)(v10 + (v45 << 6));
        do
        {
          sub_109EBB0(v10, (unsigned int (**)(uint64_t, uint64_t))a3, (uint64_t)(a2 - v10) >> 6, v47);
          v47 -= 4;
          --v46;
        }
        while (v46);
        unint64_t v48 = (unint64_t)v12 >> 6;
        do
        {
          double result = sub_109EDE4(v10, a2, (uint64_t (**)(uint64_t, uint64_t))a3, v48);
          a2 -= 64;
        }
        while (v48-- > 2);
      }
      return result;
    }
    unint64_t v15 = v13 >> 1;
    unint64_t v16 = (uint64_t *)(v10 + (v13 >> 1 << 6));
    if ((unint64_t)v12 <= 0x2000)
    {
      sub_109D174(v16, (uint64_t *)v10, v68, a3);
      if (a5) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    sub_109D174((uint64_t *)v10, v16, v68, a3);
    uint64_t v17 = v10 + (v15 << 6);
    sub_109D174((uint64_t *)(v10 + 64), (uint64_t *)(v17 - 64), v66, a3);
    sub_109D174((uint64_t *)(v10 + 128), (uint64_t *)(v10 + 64 + (v15 << 6)), v65, a3);
    sub_109D174((uint64_t *)(v17 - 64), v16, (uint64_t *)(v10 + 64 + (v15 << 6)), a3);
    uint64_t v18 = *(void *)v10;
    uint64_t v76 = *(void *)(v10 + 8);
    int v77 = *(_DWORD *)(v10 + 16);
    *(_DWORD *)&v70[16] = *(_DWORD *)(v10 + 36);
    *(_OWORD *)double v70 = *(_OWORD *)(v10 + 20);
    unsigned int v19 = *(unsigned __int16 *)(v10 + 40);
    unsigned int v20 = *(unsigned __int16 *)(v10 + 42);
    uint64_t v74 = *(void *)(v10 + 48);
    char v75 = *(unsigned char *)(v10 + 56);
    int v22 = *(unsigned __int8 *)(v17 + 41);
    float v21 = (unsigned char *)(v17 + 41);
    uint64_t v23 = *(void *)(v21 - 33);
    int v24 = *(_DWORD *)(v21 - 25);
    *(void *)uint64_t v10 = *v16;
    *(void *)(v10 + 8) = v23;
    *(_DWORD *)(v10 + 16) = v24;
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v21 - 17);
    if (v22)
    {
      *(unsigned char *)(v10 + 40) = *(unsigned char *)(v10 + (v15 << 6) + 40);
      *(unsigned char *)(v10 + 41) = 1;
      uint64_t v25 = v10 + (v15 << 6);
      unint64_t v26 = (char *)(v25 + 43);
      char v27 = *(unsigned char *)(v25 + 43);
      a2 = v67;
      if (!v27) {
        goto LABEL_12;
      }
LABEL_11:
      *(unsigned char *)(v10 + 42) = *(unsigned char *)(v25 + 42);
      char v27 = 1;
      goto LABEL_12;
    }
    *(unsigned char *)(v10 + 41) = 0;
    uint64_t v25 = v10 + (v15 << 6);
    unint64_t v26 = (char *)(v25 + 43);
    char v27 = *(unsigned char *)(v25 + 43);
    a2 = v67;
    if (v27) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v29 = *(void *)(v25 + 48);
    uint64_t v28 = v25 + 48;
    *(unsigned char *)(v10 + 43) = v27;
    char v30 = *(unsigned char *)(v28 + 8);
    *(void *)(v10 + 48) = v29;
    *(unsigned char *)(v10 + 56) = v30;
    *unint64_t v16 = v18;
    uint64_t v31 = v76;
    *(_DWORD *)(v21 - 25) = v77;
    *(void *)(v21 - 33) = v31;
    *(_OWORD *)(v21 - 17) = *(_OWORD *)&v70[4];
    if (v19 < 0x100)
    {
      unsigned char *v21 = 0;
      if (v20 >= 0x100)
      {
LABEL_14:
        *(unsigned char *)(v10 + (v15 << 6) + 42) = v20;
        char v32 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      *(unsigned char *)(v10 + (v15 << 6) + 40) = v19;
      unsigned char *v21 = 1;
      if (v20 >= 0x100) {
        goto LABEL_14;
      }
    }
    char v32 = 0;
LABEL_15:
    *unint64_t v26 = v32;
    uint64_t v33 = v74;
    *(unsigned char *)(v28 + 8) = v75;
    *(void *)uint64_t v28 = v33;
    if (a5) {
      goto LABEL_19;
    }
LABEL_18:
    if (((*a3)((uint64_t *)(v10 - 64), (uint64_t *)v10) & 1) == 0)
    {
      double result = (uint64_t)sub_109D80C((uint64_t *)v10, a2, (uint64_t (**)(long long *, uint64_t *))a3);
      uint64_t v10 = result;
      goto LABEL_29;
    }
LABEL_19:
    uint64_t v34 = sub_109DB54((uint64_t *)v10, a2, (uint64_t (**)(uint64_t *, long long *))a3);
    if ((v35 & 1) == 0) {
      goto LABEL_27;
    }
    BOOL v36 = sub_109DE84(v10, (uint64_t)v34, a3);
    uint64_t v10 = (uint64_t)(v34 + 8);
    double result = sub_109DE84((uint64_t)(v34 + 8), a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = (unint64_t)v34;
      if (v36) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v11 = v14 + 1;
    if (!v36)
    {
LABEL_27:
      double result = sub_109C7FC(v9, v34, a3, -v14, a5 & 1);
      uint64_t v10 = (uint64_t)(v34 + 8);
LABEL_29:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_109CFA0(v10, a2, (uint64_t (**)(uint64_t, uint64_t))a3);
  }
  else if (v10 != a2)
  {
    uint64_t v50 = (uint64_t *)(v10 + 64);
    if (v10 + 64 != a2)
    {
      uint64_t v51 = v10 + 112;
      do
      {
        __int16 v53 = v50;
        double result = (*a3)(v50, (uint64_t *)v9);
        if (result)
        {
          long long v54 = *(_OWORD *)v53;
          long long v55 = *((_OWORD *)v53 + 1);
          *(void *)&v70[32] = v53[4];
          *(_OWORD *)double v70 = v54;
          *(_OWORD *)&v70[16] = v55;
          int v71 = *(_DWORD *)(v9 + 104);
          uint64_t v72 = *(void *)(v9 + 112);
          uint64_t v56 = v51;
          char v73 = *(unsigned char *)(v9 + 120);
          do
          {
            uint64_t v57 = *(void *)(v56 - 104);
            *(void *)(v56 - 48) = *(void *)(v56 - 112);
            *(void *)(v56 - 40) = v57;
            *(_DWORD *)(v56 - 32) = *(_DWORD *)(v56 - 96);
            *(_OWORD *)(v56 - 24) = *(_OWORD *)(v56 - 88);
            char v58 = *(unsigned char *)(v56 - 71);
            if (v58)
            {
              *(unsigned char *)(v56 - 8) = *(unsigned char *)(v56 - 72);
              char v58 = 1;
            }
            *(unsigned char *)(v56 - 7) = v58;
            char v59 = *(unsigned char *)(v56 - 69);
            if (v59)
            {
              *(unsigned char *)(v56 - 6) = *(unsigned char *)(v56 - 70);
              char v59 = 1;
            }
            uint64_t v61 = v56 - 64;
            uint64_t v60 = *(void *)(v56 - 64);
            *(unsigned char *)(v56 - 5) = v59;
            *(void *)uint64_t v56 = v60;
            *(unsigned char *)(v56 + 8) = *(unsigned char *)(v56 - 56);
            double result = (*a3)((uint64_t *)v70, (uint64_t *)(v56 - 176));
            uint64_t v56 = v61;
          }
          while ((result & 1) != 0);
          *(void *)(v61 - 48) = *(void *)v70;
          uint64_t v62 = *(void *)&v70[8];
          *(_DWORD *)(v61 - 32) = *(_DWORD *)&v70[16];
          *(void *)(v61 - 40) = v62;
          *(_OWORD *)(v61 - 24) = *(_OWORD *)&v70[24];
          char v63 = BYTE1(v71);
          if (BYTE1(v71))
          {
            *(unsigned char *)(v61 - 8) = v71;
            char v63 = 1;
          }
          *(unsigned char *)(v61 - 7) = v63;
          char v64 = HIBYTE(v71);
          if (HIBYTE(v71))
          {
            *(unsigned char *)(v61 - 6) = BYTE2(v71);
            char v64 = 1;
          }
          *(unsigned char *)(v61 - 5) = v64;
          uint64_t v52 = v72;
          *(unsigned char *)(v61 + 8) = v73;
          *(void *)uint64_t v61 = v52;
        }
        uint64_t v50 = v53 + 8;
        v51 += 64;
        uint64_t v9 = (uint64_t)v53;
      }
      while (v53 + 8 != (uint64_t *)a2);
    }
  }
  return result;
}

uint64_t sub_109CFA0(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v27 = v3;
    uint64_t v28 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 64;
    if (result + 64 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v7;
        double result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *(_OWORD *)(v11 + 16);
          long long v22 = *(_OWORD *)v11;
          *(_OWORD *)uint64_t v23 = v12;
          *(void *)&v23[16] = *(void *)(v11 + 32);
          int v24 = *(_DWORD *)(v10 + 104);
          uint64_t v25 = *(void *)(v10 + 112);
          uint64_t v13 = v9;
          char v26 = *(unsigned char *)(v10 + 120);
          while (1)
          {
            uint64_t v14 = v6 + v13;
            uint64_t v15 = *(void *)(v6 + v13 + 8);
            *(void *)(v14 + 64) = *(void *)(v6 + v13);
            *(void *)(v14 + 72) = v15;
            *(_DWORD *)(v14 + 80) = *(_DWORD *)(v6 + v13 + 16);
            *(_OWORD *)(v14 + 88) = *(_OWORD *)(v6 + v13 + 24);
            char v16 = *(unsigned char *)(v6 + v13 + 41);
            if (v16)
            {
              *(unsigned char *)(v14 + 104) = *(unsigned char *)(v14 + 40);
              char v16 = 1;
            }
            *(unsigned char *)(v14 + 105) = v16;
            int v17 = *(unsigned __int8 *)(v14 + 43);
            if (v17)
            {
              *(unsigned char *)(v6 + v13 + 106) = *(unsigned char *)(v6 + v13 + 42);
              LOBYTE(v17) = 1;
            }
            uint64_t v18 = v6 + v13;
            *(unsigned char *)(v18 + 107) = v17;
            *(void *)(v18 + 112) = *(void *)(v6 + v13 + 48);
            *(unsigned char *)(v18 + 120) = *(unsigned char *)(v6 + v13 + 56);
            if (!v13) {
              break;
            }
            v13 -= 64;
            double result = (*a3)((uint64_t)&v22, v13 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v19 = v6 + v13 + 64;
              goto LABEL_15;
            }
          }
          uint64_t v19 = v6;
LABEL_15:
          *(void *)uint64_t v19 = v22;
          *(_DWORD *)(v18 + 16) = *(_DWORD *)v23;
          *(void *)(v18 + 8) = *((void *)&v22 + 1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)&v23[8];
          char v20 = BYTE1(v24);
          if (BYTE1(v24))
          {
            *(unsigned char *)(v19 + 40) = v24;
            char v20 = 1;
          }
          *(unsigned char *)(v19 + 41) = v20;
          char v21 = HIBYTE(v24);
          if (HIBYTE(v24))
          {
            *(unsigned char *)(v19 + 42) = BYTE2(v24);
            char v21 = 1;
          }
          *(unsigned char *)(v19 + 43) = v21;
          *(void *)(v18 + 48) = v25;
          *(unsigned char *)(v18 + 56) = v26;
        }
        uint64_t v7 = v11 + 64;
        v9 += 64;
        uint64_t v10 = v11;
      }
      while (v11 + 64 != a2);
    }
  }
  return result;
}

uint64_t sub_109D174(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v10 = a1 + 1;
    uint64_t v11 = (_OWORD *)((char *)a1 + 20);
    long long v12 = a1 + 6;
    uint64_t v13 = a1 + 3;
    if (result)
    {
      uint64_t v14 = *a1;
      uint64_t v74 = *v10;
      int v79 = *((_DWORD *)a1 + 4);
      *(_OWORD *)uint64_t v69 = *v11;
      *(_DWORD *)&v69[16] = *((_DWORD *)a1 + 9);
      unsigned int v15 = *((unsigned __int16 *)a1 + 20);
      unsigned int v16 = *((unsigned __int16 *)a1 + 21);
      uint64_t v59 = *v12;
      char v64 = *((unsigned char *)a1 + 56);
      *a1 = *a3;
      uint64_t v17 = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *uint64_t v10 = v17;
      *uint64_t v13 = *(_OWORD *)(a3 + 3);
      char v18 = *((unsigned char *)a3 + 41);
      if (v18)
      {
        *((unsigned char *)a1 + 40) = *((unsigned char *)a3 + 40);
        char v18 = 1;
      }
      *((unsigned char *)a1 + 41) = v18;
      char v19 = *((unsigned char *)a3 + 43);
      if (v19)
      {
        *((unsigned char *)a1 + 42) = *((unsigned char *)a3 + 42);
        char v19 = 1;
      }
      *((unsigned char *)a1 + 43) = v19;
      uint64_t v20 = a3[6];
      *((unsigned char *)a1 + 56) = *((unsigned char *)a3 + 56);
      *long long v12 = v20;
      *a3 = v14;
      a3[1] = v74;
      *((_DWORD *)a3 + 4) = v79;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v69[4];
      if (v15 < 0x100)
      {
        *((unsigned char *)a3 + 41) = 0;
        if (v16 >= 0x100) {
          goto LABEL_9;
        }
      }
      else
      {
        *((unsigned char *)a3 + 40) = v15;
        *((unsigned char *)a3 + 41) = 1;
        if (v16 >= 0x100)
        {
LABEL_9:
          *((unsigned char *)a3 + 42) = v16;
          char v21 = 1;
LABEL_10:
          *((unsigned char *)a3 + 43) = v21;
          a3[6] = v59;
          *((unsigned char *)a3 + 56) = v64;
          return 1;
        }
      }
      char v21 = 0;
      goto LABEL_10;
    }
    uint64_t v40 = *a1;
    uint64_t v77 = *v10;
    int v82 = *((_DWORD *)a1 + 4);
    *(_OWORD *)uint64_t v72 = *v11;
    *(_DWORD *)&v72[16] = *((_DWORD *)a1 + 9);
    unsigned int v41 = *((unsigned __int16 *)a1 + 20);
    unsigned int v42 = *((unsigned __int16 *)a1 + 21);
    uint64_t v62 = *v12;
    char v67 = *((unsigned char *)a1 + 56);
    *a1 = *a2;
    char v44 = a2 + 1;
    uint64_t v43 = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *uint64_t v10 = v43;
    *uint64_t v13 = *(_OWORD *)(a2 + 3);
    char v45 = *((unsigned char *)a2 + 41);
    if (v45)
    {
      *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
      char v45 = 1;
    }
    unint64_t v46 = a2 + 3;
    *((unsigned char *)a1 + 41) = v45;
    char v47 = *((unsigned char *)a2 + 43);
    if (v47)
    {
      *((unsigned char *)a1 + 42) = *((unsigned char *)a2 + 42);
      char v47 = 1;
    }
    *((unsigned char *)a1 + 43) = v47;
    char v49 = a2 + 6;
    uint64_t v48 = a2[6];
    *((unsigned char *)v12 + 8) = *((unsigned char *)a2 + 56);
    *long long v12 = v48;
    *a2 = v40;
    uint64_t *v44 = v77;
    *((_DWORD *)a2 + 4) = v82;
    _OWORD *v46 = *(_OWORD *)&v72[4];
    if (v41 < 0x100)
    {
      *((unsigned char *)a2 + 41) = 0;
      if (v42 >= 0x100) {
        goto LABEL_35;
      }
    }
    else
    {
      *((unsigned char *)a2 + 40) = v41;
      *((unsigned char *)a2 + 41) = 1;
      if (v42 >= 0x100)
      {
LABEL_35:
        *((unsigned char *)a2 + 42) = v42;
        char v50 = 1;
        goto LABEL_36;
      }
    }
    char v50 = 0;
LABEL_36:
    *((unsigned char *)a2 + 43) = v50;
    uint64_t *v49 = v62;
    *((unsigned char *)a2 + 56) = v67;
    if ((*a4)(a3, a2))
    {
      uint64_t v51 = *a2;
      uint64_t v78 = *v44;
      int v83 = *((_DWORD *)a2 + 4);
      *(_OWORD *)char v73 = *(_OWORD *)((char *)a2 + 20);
      *(_DWORD *)&v73[16] = *((_DWORD *)a2 + 9);
      unsigned int v52 = *((unsigned __int16 *)a2 + 20);
      unsigned int v53 = *((unsigned __int16 *)a2 + 21);
      uint64_t v63 = *v49;
      char v68 = *((unsigned char *)a2 + 56);
      *a2 = *a3;
      uint64_t v54 = a3[1];
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      uint64_t *v44 = v54;
      _OWORD *v46 = *(_OWORD *)(a3 + 3);
      char v55 = *((unsigned char *)a3 + 41);
      if (v55)
      {
        *((unsigned char *)a2 + 40) = *((unsigned char *)a3 + 40);
        char v55 = 1;
      }
      *((unsigned char *)a2 + 41) = v55;
      char v56 = *((unsigned char *)a3 + 43);
      if (v56)
      {
        *((unsigned char *)a2 + 42) = *((unsigned char *)a3 + 42);
        char v56 = 1;
      }
      *((unsigned char *)a2 + 43) = v56;
      uint64_t v57 = a3[6];
      *((unsigned char *)a2 + 56) = *((unsigned char *)a3 + 56);
      uint64_t *v49 = v57;
      *a3 = v51;
      a3[1] = v78;
      *((_DWORD *)a3 + 4) = v83;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v73[4];
      if (v52 < 0x100)
      {
        *((unsigned char *)a3 + 41) = 0;
        if (v53 >= 0x100) {
          goto LABEL_43;
        }
      }
      else
      {
        *((unsigned char *)a3 + 40) = v52;
        *((unsigned char *)a3 + 41) = 1;
        if (v53 >= 0x100)
        {
LABEL_43:
          *((unsigned char *)a3 + 42) = v53;
          char v58 = 1;
LABEL_44:
          *((unsigned char *)a3 + 43) = v58;
          a3[6] = v63;
          *((unsigned char *)a3 + 56) = v68;
          return 2;
        }
      }
      char v58 = 0;
      goto LABEL_44;
    }
    return 1;
  }
  if (result)
  {
    uint64_t v22 = *a2;
    uint64_t v23 = a2 + 1;
    uint64_t v75 = a2[1];
    int v80 = *((_DWORD *)a2 + 4);
    *(_OWORD *)double v70 = *(_OWORD *)((char *)a2 + 20);
    *(_DWORD *)&v70[16] = *((_DWORD *)a2 + 9);
    unsigned int v24 = *((unsigned __int16 *)a2 + 20);
    unsigned int v25 = *((unsigned __int16 *)a2 + 21);
    char v26 = a2 + 6;
    uint64_t v60 = a2[6];
    char v65 = *((unsigned char *)a2 + 56);
    *a2 = *a3;
    uint64_t v27 = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    a2[1] = v27;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
    char v28 = *((unsigned char *)a3 + 41);
    if (v28)
    {
      *((unsigned char *)a2 + 40) = *((unsigned char *)a3 + 40);
      char v28 = 1;
    }
    *((unsigned char *)a2 + 41) = v28;
    char v29 = *((unsigned char *)a3 + 43);
    if (v29)
    {
      *((unsigned char *)a2 + 42) = *((unsigned char *)a3 + 42);
      char v29 = 1;
    }
    *((unsigned char *)a2 + 43) = v29;
    uint64_t v30 = a3[6];
    *((unsigned char *)a2 + 56) = *((unsigned char *)a3 + 56);
    *char v26 = v30;
    *a3 = v22;
    a3[1] = v75;
    *((_DWORD *)a3 + 4) = v80;
    *(_OWORD *)(a3 + 3) = *(_OWORD *)&v70[4];
    if (v24 < 0x100)
    {
      *((unsigned char *)a3 + 41) = 0;
      if (v25 >= 0x100) {
        goto LABEL_18;
      }
    }
    else
    {
      *((unsigned char *)a3 + 40) = v24;
      *((unsigned char *)a3 + 41) = 1;
      if (v25 >= 0x100)
      {
LABEL_18:
        *((unsigned char *)a3 + 42) = v25;
        char v31 = 1;
        goto LABEL_19;
      }
    }
    char v31 = 0;
LABEL_19:
    *((unsigned char *)a3 + 43) = v31;
    a3[6] = v60;
    *((unsigned char *)a3 + 56) = v65;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v32 = *a1;
    uint64_t v76 = a1[1];
    int v81 = *((_DWORD *)a1 + 4);
    *(_OWORD *)int v71 = *(_OWORD *)((char *)a1 + 20);
    *(_DWORD *)&v71[16] = *((_DWORD *)a1 + 9);
    unsigned int v33 = *((unsigned __int16 *)a1 + 20);
    unsigned int v34 = *((unsigned __int16 *)a1 + 21);
    uint64_t v61 = a1[6];
    char v66 = *((unsigned char *)a1 + 56);
    *a1 = *a2;
    uint64_t v35 = *v23;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    a1[1] = v35;
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    char v36 = *((unsigned char *)a2 + 41);
    if (v36)
    {
      *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
      char v36 = 1;
    }
    *((unsigned char *)a1 + 41) = v36;
    if (*((unsigned char *)a2 + 43))
    {
      *((unsigned char *)a1 + 42) = *((unsigned char *)a2 + 42);
      char v37 = 1;
    }
    else
    {
      char v37 = 0;
    }
    *((unsigned char *)a1 + 43) = v37;
    uint64_t v38 = *v26;
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    a1[6] = v38;
    *a2 = v32;
    *uint64_t v23 = v76;
    *((_DWORD *)a2 + 4) = v81;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v71[4];
    if (v33 < 0x100)
    {
      *((unsigned char *)a2 + 41) = 0;
      if (v34 >= 0x100) {
        goto LABEL_26;
      }
    }
    else
    {
      *((unsigned char *)a2 + 40) = v33;
      *((unsigned char *)a2 + 41) = 1;
      if (v34 >= 0x100)
      {
LABEL_26:
        *((unsigned char *)a2 + 42) = v34;
        char v39 = 1;
LABEL_27:
        *((unsigned char *)a2 + 43) = v39;
        *char v26 = v61;
        *((unsigned char *)a2 + 56) = v66;
        return 2;
      }
    }
    char v39 = 0;
    goto LABEL_27;
  }
  return result;
}

uint64_t *sub_109D80C(uint64_t *a1, unint64_t a2, uint64_t (**a3)(long long *, uint64_t *))
{
  unint64_t v4 = a2;
  long long v6 = *((_OWORD *)a1 + 1);
  long long v28 = *(_OWORD *)a1;
  *(_OWORD *)char v29 = v6;
  *(void *)&v29[16] = a1[4];
  int v30 = *((_DWORD *)a1 + 10);
  uint64_t v7 = (long long *)(a1 + 6);
  uint64_t v31 = a1[6];
  char v32 = *((unsigned char *)a1 + 56);
  if ((*a3)(&v28, (uint64_t *)(a2 - 64)))
  {
    char v8 = a1;
    do
      v8 += 8;
    while (((*a3)(&v28, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 8;
    do
    {
      char v8 = v9;
      if ((unint64_t)v9 >= v4) {
        break;
      }
      int v10 = (*a3)(&v28, v9);
      uint64_t v9 = v8 + 8;
    }
    while (!v10);
  }
  if ((unint64_t)v8 < v4)
  {
    do
      v4 -= 64;
    while (((*a3)(&v28, (uint64_t *)v4) & 1) != 0);
  }
  while ((unint64_t)v8 < v4)
  {
    uint64_t v11 = *v8;
    uint64_t v36 = v8[1];
    int v37 = *((_DWORD *)v8 + 4);
    *(_DWORD *)&v35[16] = *((_DWORD *)v8 + 9);
    *(_OWORD *)uint64_t v35 = *(_OWORD *)((char *)v8 + 20);
    unsigned int v12 = *((unsigned __int16 *)v8 + 20);
    unsigned int v13 = *((unsigned __int16 *)v8 + 21);
    uint64_t v33 = v8[6];
    char v34 = *((unsigned char *)v8 + 56);
    uint64_t *v8 = *(void *)v4;
    uint64_t v14 = *(void *)(v4 + 8);
    *((_DWORD *)v8 + 4) = *(_DWORD *)(v4 + 16);
    v8[1] = v14;
    *(_OWORD *)(v8 + 3) = *(_OWORD *)(v4 + 24);
    char v15 = *(unsigned char *)(v4 + 41);
    if (v15)
    {
      *((unsigned char *)v8 + 40) = *(unsigned char *)(v4 + 40);
      char v15 = 1;
    }
    *((unsigned char *)v8 + 41) = v15;
    char v16 = *(unsigned char *)(v4 + 43);
    if (v16)
    {
      *((unsigned char *)v8 + 42) = *(unsigned char *)(v4 + 42);
      char v16 = 1;
    }
    *((unsigned char *)v8 + 43) = v16;
    uint64_t v17 = *(void *)(v4 + 48);
    *((unsigned char *)v8 + 56) = *(unsigned char *)(v4 + 56);
    v8[6] = v17;
    *(void *)unint64_t v4 = v11;
    int v18 = v37;
    *(void *)(v4 + 8) = v36;
    *(_DWORD *)(v4 + 16) = v18;
    *(_OWORD *)(v4 + 24) = *(_OWORD *)&v35[4];
    if (v12 < 0x100)
    {
      *(unsigned char *)(v4 + 41) = 0;
      if (v13 >= 0x100)
      {
LABEL_17:
        *(unsigned char *)(v4 + 42) = v13;
        char v19 = 1;
        goto LABEL_18;
      }
    }
    else
    {
      *(unsigned char *)(v4 + 40) = v12;
      *(unsigned char *)(v4 + 41) = 1;
      if (v13 >= 0x100) {
        goto LABEL_17;
      }
    }
    char v19 = 0;
LABEL_18:
    *(unsigned char *)(v4 + 43) = v19;
    *(void *)(v4 + 48) = v33;
    *(unsigned char *)(v4 + 56) = v34;
    do
      v8 += 8;
    while (!(*a3)(&v28, v8));
    do
      v4 -= 64;
    while (((*a3)(&v28, (uint64_t *)v4) & 1) != 0);
  }
  if (v8 - 8 != a1)
  {
    *a1 = *(v8 - 8);
    uint64_t v20 = *(v8 - 7);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v8 - 12);
    a1[1] = v20;
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(v8 - 5);
    char v21 = *((unsigned char *)v8 - 23);
    if (v21)
    {
      *((unsigned char *)a1 + 40) = *((unsigned char *)v8 - 24);
      char v21 = 1;
    }
    *((unsigned char *)a1 + 41) = v21;
    char v22 = *((unsigned char *)v8 - 21);
    if (v22)
    {
      *((unsigned char *)a1 + 42) = *((unsigned char *)v8 - 22);
      char v22 = 1;
    }
    *((unsigned char *)a1 + 43) = v22;
    uint64_t v23 = *(v8 - 2);
    *((unsigned char *)v7 + 8) = *((unsigned char *)v8 - 8);
    *(void *)uint64_t v7 = v23;
  }
  *(v8 - 8) = v28;
  uint64_t v24 = *((void *)&v28 + 1);
  *((_DWORD *)v8 - 12) = *(_DWORD *)v29;
  *(v8 - 7) = v24;
  *(_OWORD *)(v8 - 5) = *(_OWORD *)&v29[8];
  if (!BYTE1(v30))
  {
    *((unsigned char *)v8 - 23) = 0;
    char v25 = HIBYTE(v30);
    if (!HIBYTE(v30)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  *((unsigned char *)v8 - 24) = v30;
  *((unsigned char *)v8 - 23) = 1;
  char v25 = HIBYTE(v30);
  if (HIBYTE(v30))
  {
LABEL_33:
    *((unsigned char *)v8 - 22) = BYTE2(v30);
    char v25 = 1;
  }
LABEL_34:
  *((unsigned char *)v8 - 21) = v25;
  uint64_t v26 = v31;
  *((unsigned char *)v8 - 8) = v32;
  *(v8 - 2) = v26;
  return v8;
}

uint64_t *sub_109DB54(uint64_t *a1, unint64_t a2, uint64_t (**a3)(uint64_t *, long long *))
{
  uint64_t v6 = 0;
  long long v7 = *(_OWORD *)a1;
  long long v8 = *((_OWORD *)a1 + 1);
  *(void *)&v34[16] = a1[4];
  int v35 = *((_DWORD *)a1 + 10);
  int v10 = (long long *)(a1 + 6);
  uint64_t v9 = a1[6];
  long long v33 = v7;
  *(_OWORD *)char v34 = v8;
  uint64_t v36 = v9;
  char v37 = *((unsigned char *)a1 + 56);
  do
    v6 += 8;
  while (((*a3)(&a1[v6], &v33) & 1) != 0);
  unint64_t v11 = (unint64_t)&a1[v6];
  if (v6 == 8)
  {
    do
    {
      if (v11 >= a2) {
        break;
      }
      a2 -= 64;
    }
    while (((*a3)((uint64_t *)a2, &v33) & 1) == 0);
  }
  else
  {
    do
      a2 -= 64;
    while (!(*a3)((uint64_t *)a2, &v33));
  }
  if (v11 < a2)
  {
    unsigned int v12 = (long long *)&a1[v6];
    unint64_t v13 = a2;
    while (1)
    {
      uint64_t v15 = *(void *)v12;
      uint64_t v14 = *((void *)v12 + 1);
      int v42 = *((_DWORD *)v12 + 4);
      uint64_t v41 = v14;
      *(_OWORD *)uint64_t v40 = *(long long *)((char *)v12 + 20);
      *(_DWORD *)&v40[16] = *((_DWORD *)v12 + 9);
      unsigned int v16 = *((unsigned __int16 *)v12 + 20);
      unsigned int v17 = *((unsigned __int16 *)v12 + 21);
      uint64_t v38 = *((void *)v12 + 6);
      char v39 = *((unsigned char *)v12 + 56);
      *(void *)unsigned int v12 = *(void *)v13;
      uint64_t v18 = *(void *)(v13 + 8);
      *((_DWORD *)v12 + 4) = *(_DWORD *)(v13 + 16);
      *((void *)v12 + 1) = v18;
      *(long long *)((char *)v12 + 24) = *(_OWORD *)(v13 + 24);
      char v19 = *(unsigned char *)(v13 + 41);
      if (v19)
      {
        *((unsigned char *)v12 + 40) = *(unsigned char *)(v13 + 40);
        char v19 = 1;
      }
      *((unsigned char *)v12 + 41) = v19;
      char v20 = *(unsigned char *)(v13 + 43);
      if (v20)
      {
        *((unsigned char *)v12 + 42) = *(unsigned char *)(v13 + 42);
        char v20 = 1;
      }
      *((unsigned char *)v12 + 43) = v20;
      uint64_t v21 = *(void *)(v13 + 48);
      *((unsigned char *)v12 + 56) = *(unsigned char *)(v13 + 56);
      *((void *)v12 + 6) = v21;
      *(void *)unint64_t v13 = v15;
      int v22 = v42;
      *(void *)(v13 + 8) = v41;
      *(_DWORD *)(v13 + 16) = v22;
      *(_OWORD *)(v13 + 24) = *(_OWORD *)&v40[4];
      if (v16 < 0x100)
      {
        *(unsigned char *)(v13 + 41) = 0;
        if (v17 >= 0x100)
        {
LABEL_16:
          *(unsigned char *)(v13 + 42) = v17;
          char v23 = 1;
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)(v13 + 40) = v16;
        *(unsigned char *)(v13 + 41) = 1;
        if (v17 >= 0x100) {
          goto LABEL_16;
        }
      }
      char v23 = 0;
LABEL_17:
      *(unsigned char *)(v13 + 43) = v23;
      *(void *)(v13 + 48) = v38;
      *(unsigned char *)(v13 + 56) = v39;
      do
        v12 += 4;
      while (((*a3)((uint64_t *)v12, &v33) & 1) != 0);
      do
        v13 -= 64;
      while (!(*a3)((uint64_t *)v13, &v33));
      if ((unint64_t)v12 >= v13) {
        goto LABEL_25;
      }
    }
  }
  unsigned int v12 = (long long *)&a1[v6];
LABEL_25:
  uint64_t result = (uint64_t *)(v12 - 4);
  if (v12 - 4 != (long long *)a1)
  {
    *a1 = *((void *)v12 - 8);
    uint64_t v25 = *((void *)v12 - 7);
    *((_DWORD *)a1 + 4) = *((_DWORD *)v12 - 12);
    a1[1] = v25;
    *(_OWORD *)(a1 + 3) = *(long long *)((char *)v12 - 40);
    char v26 = *((unsigned char *)v12 - 23);
    if (v26)
    {
      *((unsigned char *)a1 + 40) = *((unsigned char *)v12 - 24);
      char v26 = 1;
    }
    *((unsigned char *)a1 + 41) = v26;
    char v27 = *((unsigned char *)v12 - 21);
    if (v27)
    {
      *((unsigned char *)a1 + 42) = *((unsigned char *)v12 - 22);
      char v27 = 1;
    }
    *((unsigned char *)a1 + 43) = v27;
    uint64_t v28 = *((void *)v12 - 2);
    *((unsigned char *)v10 + 8) = *((unsigned char *)v12 - 8);
    *(void *)int v10 = v28;
  }
  *((void *)v12 - 8) = v33;
  uint64_t v29 = *((void *)&v33 + 1);
  *((_DWORD *)v12 - 12) = *(_DWORD *)v34;
  *((void *)v12 - 7) = v29;
  *(long long *)((char *)v12 - 40) = *(_OWORD *)&v34[8];
  char v30 = BYTE1(v35);
  if (BYTE1(v35))
  {
    *((unsigned char *)v12 - 24) = v35;
    char v30 = 1;
  }
  *((unsigned char *)v12 - 23) = v30;
  char v31 = HIBYTE(v35);
  if (HIBYTE(v35))
  {
    *((unsigned char *)v12 - 22) = BYTE2(v35);
    char v31 = 1;
  }
  *((unsigned char *)v12 - 21) = v31;
  uint64_t v32 = v36;
  *((unsigned char *)v12 - 8) = v37;
  *((void *)v12 - 2) = v32;
  return result;
}

BOOL sub_109DE84(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!(*a3)((uint64_t *)(a2 - 64), (uint64_t *)a1)) {
        return 1;
      }
      uint64_t v8 = *(void *)a1;
      uint64_t v36 = *(void *)(a1 + 8);
      int v37 = *(_DWORD *)(a1 + 16);
      *(_OWORD *)char v30 = *(_OWORD *)(a1 + 20);
      *(_DWORD *)&v30[16] = *(_DWORD *)(a1 + 36);
      unsigned int v9 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v10 = *(unsigned __int16 *)(a1 + 42);
      uint64_t v34 = *(void *)(a1 + 48);
      char v35 = *(unsigned char *)(a1 + 56);
      *(void *)a1 = *(void *)(a2 - 64);
      uint64_t v11 = *(void *)(a2 - 56);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 48);
      *(void *)(a1 + 8) = v11;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 40);
      char v12 = *(unsigned char *)(a2 - 23);
      if (v12)
      {
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 - 24);
        char v12 = 1;
      }
      *(unsigned char *)(a1 + 41) = v12;
      char v13 = *(unsigned char *)(a2 - 21);
      if (v13)
      {
        *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 - 22);
        char v13 = 1;
      }
      *(unsigned char *)(a1 + 43) = v13;
      uint64_t v14 = *(void *)(a2 - 16);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 - 8);
      *(void *)(a1 + 48) = v14;
      *(void *)(a2 - 64) = v8;
      *(void *)(a2 - 56) = v36;
      *(_DWORD *)(a2 - 48) = v37;
      *(_OWORD *)(a2 - 40) = *(_OWORD *)&v30[4];
      if (v9 < 0x100)
      {
        *(unsigned char *)(a2 - 23) = 0;
        if (v10 >= 0x100) {
          goto LABEL_9;
        }
      }
      else
      {
        *(unsigned char *)(a2 - 24) = v9;
        *(unsigned char *)(a2 - 23) = 1;
        if (v10 >= 0x100)
        {
LABEL_9:
          *(unsigned char *)(a2 - 22) = v10;
          char v15 = 1;
LABEL_10:
          *(unsigned char *)(a2 - 21) = v15;
          *(void *)(a2 - 16) = v34;
          *(unsigned char *)(a2 - 8) = v35;
          return 1;
        }
      }
      char v15 = 0;
      goto LABEL_10;
    case 3:
      sub_109D174((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a2 - 64), a3);
      return 1;
    case 4:
      sub_109E260(a1, a1 + 64, a1 + 128, a2 - 64, a3);
      return 1;
    case 5:
      sub_109E664(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64, a3);
      return 1;
    default:
      unsigned int v16 = (uint64_t *)(a1 + 128);
      sub_109D174((uint64_t *)a1, (uint64_t *)(a1 + 64), (uint64_t *)(a1 + 128), a3);
      uint64_t v17 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      do
      {
        if ((*a3)((uint64_t *)v17, v16))
        {
          long long v20 = *(_OWORD *)(v17 + 16);
          *(_OWORD *)char v30 = *(_OWORD *)v17;
          *(_OWORD *)&v30[16] = v20;
          *(void *)&v30[32] = *(void *)(v17 + 32);
          int v31 = *(_DWORD *)(v17 + 40);
          uint64_t v32 = *(void *)(v17 + 48);
          uint64_t v21 = v18;
          char v33 = *(unsigned char *)(v17 + 56);
          while (1)
          {
            uint64_t v22 = a1 + v21;
            uint64_t v23 = *(void *)(a1 + v21 + 136);
            *(void *)(v22 + 192) = *(void *)(a1 + v21 + 128);
            *(void *)(v22 + 200) = v23;
            *(_DWORD *)(v22 + 208) = *(_DWORD *)(a1 + v21 + 144);
            *(_OWORD *)(v22 + 216) = *(_OWORD *)(a1 + v21 + 152);
            char v24 = *(unsigned char *)(a1 + v21 + 169);
            if (v24)
            {
              *(unsigned char *)(v22 + 232) = *(unsigned char *)(v22 + 168);
              char v24 = 1;
            }
            *(unsigned char *)(v22 + 233) = v24;
            int v25 = *(unsigned __int8 *)(v22 + 171);
            if (v25)
            {
              *(unsigned char *)(a1 + v21 + 234) = *(unsigned char *)(a1 + v21 + 170);
              LOBYTE(v25) = 1;
            }
            uint64_t v26 = a1 + v21;
            *(unsigned char *)(v26 + 235) = v25;
            *(void *)(v26 + 240) = *(void *)(a1 + v21 + 176);
            *(unsigned char *)(v26 + 248) = *(unsigned char *)(a1 + v21 + 184);
            if (v21 == -128) {
              break;
            }
            v21 -= 64;
            if (((*a3)((uint64_t *)v30, (uint64_t *)(v26 + 64)) & 1) == 0)
            {
              uint64_t v27 = a1 + v21 + 192;
              goto LABEL_24;
            }
          }
          uint64_t v27 = a1;
LABEL_24:
          *(void *)uint64_t v27 = *(void *)v30;
          *(_DWORD *)(v26 + 144) = *(_DWORD *)&v30[16];
          *(void *)(v26 + 136) = *(void *)&v30[8];
          *(_OWORD *)(v26 + 152) = *(_OWORD *)&v30[24];
          char v28 = BYTE1(v31);
          if (BYTE1(v31))
          {
            *(unsigned char *)(v27 + 40) = v31;
            char v28 = 1;
          }
          *(unsigned char *)(v27 + 41) = v28;
          char v29 = HIBYTE(v31);
          if (HIBYTE(v31))
          {
            *(unsigned char *)(v27 + 42) = BYTE2(v31);
            char v29 = 1;
          }
          *(unsigned char *)(v27 + 43) = v29;
          *(void *)(v26 + 176) = v32;
          *(unsigned char *)(v26 + 184) = v33;
          if (++v19 == 8) {
            return v17 + 64 == a2;
          }
        }
        unsigned int v16 = (uint64_t *)v17;
        v18 += 64;
        v17 += 64;
      }
      while (v17 != a2);
      return 1;
  }
}

uint64_t sub_109E260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  sub_109D174((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  uint64_t result = (*a5)((uint64_t *)a4, (uint64_t *)a3);
  if (result)
  {
    uint64_t v11 = *(void *)a3;
    char v12 = (uint64_t *)(a3 + 8);
    uint64_t v48 = *(void *)(a3 + 8);
    int v51 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)char v45 = *(_OWORD *)(a3 + 20);
    *(_DWORD *)&v45[16] = *(_DWORD *)(a3 + 36);
    unsigned int v13 = *(unsigned __int16 *)(a3 + 40);
    unsigned int v14 = *(unsigned __int16 *)(a3 + 42);
    char v15 = (uint64_t *)(a3 + 48);
    uint64_t v39 = *(void *)(a3 + 48);
    char v42 = *(unsigned char *)(a3 + 56);
    *(void *)a3 = *(void *)a4;
    uint64_t v16 = *(void *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(void *)(a3 + 8) = v16;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    char v17 = *(unsigned char *)(a4 + 41);
    if (v17)
    {
      *(unsigned char *)(a3 + 40) = *(unsigned char *)(a4 + 40);
      char v17 = 1;
    }
    *(unsigned char *)(a3 + 41) = v17;
    char v18 = *(unsigned char *)(a4 + 43);
    if (v18)
    {
      *(unsigned char *)(a3 + 42) = *(unsigned char *)(a4 + 42);
      char v18 = 1;
    }
    *(unsigned char *)(a3 + 43) = v18;
    uint64_t v19 = *(void *)(a4 + 48);
    *(unsigned char *)(a3 + 56) = *(unsigned char *)(a4 + 56);
    *char v15 = v19;
    *(void *)a4 = v11;
    *(void *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = v51;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v45[4];
    if (v13 < 0x100)
    {
      *(unsigned char *)(a4 + 41) = 0;
      if (v14 >= 0x100) {
        goto LABEL_8;
      }
    }
    else
    {
      *(unsigned char *)(a4 + 40) = v13;
      *(unsigned char *)(a4 + 41) = 1;
      if (v14 >= 0x100)
      {
LABEL_8:
        *(unsigned char *)(a4 + 42) = v14;
        char v20 = 1;
        goto LABEL_9;
      }
    }
    char v20 = 0;
LABEL_9:
    *(unsigned char *)(a4 + 43) = v20;
    *(void *)(a4 + 48) = v39;
    *(unsigned char *)(a4 + 56) = v42;
    uint64_t result = (*a5)((uint64_t *)a3, (uint64_t *)a2);
    if (!result) {
      return result;
    }
    uint64_t v21 = *(void *)a2;
    uint64_t v22 = (uint64_t *)(a2 + 8);
    uint64_t v49 = *(void *)(a2 + 8);
    int v52 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v46 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)&v46[16] = *(_DWORD *)(a2 + 36);
    unsigned int v23 = *(unsigned __int16 *)(a2 + 40);
    unsigned int v24 = *(unsigned __int16 *)(a2 + 42);
    int v25 = (uint64_t *)(a2 + 48);
    uint64_t v40 = *(void *)(a2 + 48);
    char v43 = *(unsigned char *)(a2 + 56);
    *(void *)a2 = *(void *)a3;
    uint64_t v26 = *v12;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    *(void *)(a2 + 8) = v26;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    char v27 = *(unsigned char *)(a3 + 41);
    if (v27)
    {
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(a3 + 40);
      char v27 = 1;
    }
    *(unsigned char *)(a2 + 41) = v27;
    if (*(unsigned char *)(a3 + 43))
    {
      *(unsigned char *)(a2 + 42) = *(unsigned char *)(a3 + 42);
      char v28 = 1;
    }
    else
    {
      char v28 = 0;
    }
    *(unsigned char *)(a2 + 43) = v28;
    uint64_t v29 = *v15;
    *(unsigned char *)(a2 + 56) = *(unsigned char *)(a3 + 56);
    *int v25 = v29;
    *(void *)a3 = v21;
    *char v12 = v49;
    *(_DWORD *)(a3 + 16) = v52;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v46[4];
    if (v23 < 0x100)
    {
      *(unsigned char *)(a3 + 41) = 0;
      if (v24 >= 0x100) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 40) = v23;
      *(unsigned char *)(a3 + 41) = 1;
      if (v24 >= 0x100)
      {
LABEL_16:
        *(unsigned char *)(a3 + 42) = v24;
        char v30 = 1;
        goto LABEL_17;
      }
    }
    char v30 = 0;
LABEL_17:
    *(unsigned char *)(a3 + 43) = v30;
    *char v15 = v40;
    *(unsigned char *)(a3 + 56) = v43;
    uint64_t result = (*a5)((uint64_t *)a2, (uint64_t *)a1);
    if (!result) {
      return result;
    }
    uint64_t v31 = *(void *)a1;
    uint64_t v50 = *(void *)(a1 + 8);
    int v53 = *(_DWORD *)(a1 + 16);
    *(_OWORD *)char v47 = *(_OWORD *)(a1 + 20);
    *(_DWORD *)&v47[16] = *(_DWORD *)(a1 + 36);
    unsigned int v32 = *(unsigned __int16 *)(a1 + 40);
    unsigned int v33 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v41 = *(void *)(a1 + 48);
    char v44 = *(unsigned char *)(a1 + 56);
    *(void *)a1 = *(void *)a2;
    uint64_t v34 = *v22;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(a1 + 8) = v34;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    char v35 = *(unsigned char *)(a2 + 41);
    if (v35)
    {
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      char v35 = 1;
    }
    *(unsigned char *)(a1 + 41) = v35;
    if (*(unsigned char *)(a2 + 43))
    {
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
      char v36 = 1;
    }
    else
    {
      char v36 = 0;
    }
    *(unsigned char *)(a1 + 43) = v36;
    uint64_t v37 = *v25;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v37;
    *(void *)a2 = v31;
    *uint64_t v22 = v50;
    *(_DWORD *)(a2 + 16) = v53;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v47[4];
    if (v32 < 0x100)
    {
      *(unsigned char *)(a2 + 41) = 0;
      if (v33 >= 0x100) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 40) = v32;
      *(unsigned char *)(a2 + 41) = 1;
      if (v33 >= 0x100)
      {
LABEL_24:
        *(unsigned char *)(a2 + 42) = v33;
        char v38 = 1;
LABEL_25:
        *(unsigned char *)(a2 + 43) = v38;
        *int v25 = v41;
        *(unsigned char *)(a2 + 56) = v44;
        return result;
      }
    }
    char v38 = 0;
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_109E664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  sub_109E260(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((uint64_t *)a5, (uint64_t *)a4);
  if (result)
  {
    uint64_t v13 = *(void *)a4;
    unsigned int v14 = (uint64_t *)(a4 + 8);
    uint64_t v63 = *(void *)(a4 + 8);
    int v67 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)uint64_t v59 = *(_OWORD *)(a4 + 20);
    *(_DWORD *)&v59[16] = *(_DWORD *)(a4 + 36);
    unsigned int v15 = *(unsigned __int16 *)(a4 + 40);
    unsigned int v16 = *(unsigned __int16 *)(a4 + 42);
    char v17 = (uint64_t *)(a4 + 48);
    uint64_t v51 = *(void *)(a4 + 48);
    char v55 = *(unsigned char *)(a4 + 56);
    *(void *)a4 = *(void *)a5;
    uint64_t v18 = *(void *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    *(void *)(a4 + 8) = v18;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    char v19 = *(unsigned char *)(a5 + 41);
    if (v19)
    {
      *(unsigned char *)(a4 + 40) = *(unsigned char *)(a5 + 40);
      char v19 = 1;
    }
    *(unsigned char *)(a4 + 41) = v19;
    char v20 = *(unsigned char *)(a5 + 43);
    if (v20)
    {
      *(unsigned char *)(a4 + 42) = *(unsigned char *)(a5 + 42);
      char v20 = 1;
    }
    *(unsigned char *)(a4 + 43) = v20;
    uint64_t v21 = *(void *)(a5 + 48);
    *(unsigned char *)(a4 + 56) = *(unsigned char *)(a5 + 56);
    *char v17 = v21;
    *(void *)a5 = v13;
    *(void *)(a5 + 8) = v63;
    *(_DWORD *)(a5 + 16) = v67;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)&v59[4];
    if (v15 < 0x100)
    {
      *(unsigned char *)(a5 + 41) = 0;
      if (v16 >= 0x100) {
        goto LABEL_8;
      }
    }
    else
    {
      *(unsigned char *)(a5 + 40) = v15;
      *(unsigned char *)(a5 + 41) = 1;
      if (v16 >= 0x100)
      {
LABEL_8:
        *(unsigned char *)(a5 + 42) = v16;
        char v22 = 1;
        goto LABEL_9;
      }
    }
    char v22 = 0;
LABEL_9:
    *(unsigned char *)(a5 + 43) = v22;
    *(void *)(a5 + 48) = v51;
    *(unsigned char *)(a5 + 56) = v55;
    uint64_t result = (*a6)((uint64_t *)a4, (uint64_t *)a3);
    if (!result) {
      return result;
    }
    uint64_t v23 = *(void *)a3;
    unsigned int v24 = (uint64_t *)(a3 + 8);
    uint64_t v64 = *(void *)(a3 + 8);
    int v68 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)uint64_t v60 = *(_OWORD *)(a3 + 20);
    *(_DWORD *)&v60[16] = *(_DWORD *)(a3 + 36);
    unsigned int v25 = *(unsigned __int16 *)(a3 + 40);
    unsigned int v26 = *(unsigned __int16 *)(a3 + 42);
    char v27 = (uint64_t *)(a3 + 48);
    uint64_t v52 = *(void *)(a3 + 48);
    char v56 = *(unsigned char *)(a3 + 56);
    *(void *)a3 = *(void *)a4;
    uint64_t v28 = *v14;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(void *)(a3 + 8) = v28;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    char v29 = *(unsigned char *)(a4 + 41);
    if (v29)
    {
      *(unsigned char *)(a3 + 40) = *(unsigned char *)(a4 + 40);
      char v29 = 1;
    }
    *(unsigned char *)(a3 + 41) = v29;
    if (*(unsigned char *)(a4 + 43))
    {
      *(unsigned char *)(a3 + 42) = *(unsigned char *)(a4 + 42);
      char v30 = 1;
    }
    else
    {
      char v30 = 0;
    }
    *(unsigned char *)(a3 + 43) = v30;
    uint64_t v31 = *v17;
    *(unsigned char *)(a3 + 56) = *(unsigned char *)(a4 + 56);
    *char v27 = v31;
    *(void *)a4 = v23;
    *unsigned int v14 = v64;
    *(_DWORD *)(a4 + 16) = v68;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v60[4];
    if (v25 < 0x100)
    {
      *(unsigned char *)(a4 + 41) = 0;
      if (v26 >= 0x100) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)(a4 + 40) = v25;
      *(unsigned char *)(a4 + 41) = 1;
      if (v26 >= 0x100)
      {
LABEL_16:
        *(unsigned char *)(a4 + 42) = v26;
        char v32 = 1;
        goto LABEL_17;
      }
    }
    char v32 = 0;
LABEL_17:
    *(unsigned char *)(a4 + 43) = v32;
    *char v17 = v52;
    *(unsigned char *)(a4 + 56) = v56;
    uint64_t result = (*a6)((uint64_t *)a3, (uint64_t *)a2);
    if (!result) {
      return result;
    }
    uint64_t v33 = *(void *)a2;
    uint64_t v34 = (uint64_t *)(a2 + 8);
    uint64_t v65 = *(void *)(a2 + 8);
    int v69 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v61 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)&v61[16] = *(_DWORD *)(a2 + 36);
    unsigned int v35 = *(unsigned __int16 *)(a2 + 40);
    unsigned int v36 = *(unsigned __int16 *)(a2 + 42);
    uint64_t v37 = (uint64_t *)(a2 + 48);
    uint64_t v53 = *(void *)(a2 + 48);
    char v57 = *(unsigned char *)(a2 + 56);
    *(void *)a2 = *(void *)a3;
    uint64_t v38 = *v24;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    *(void *)(a2 + 8) = v38;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    char v39 = *(unsigned char *)(a3 + 41);
    if (v39)
    {
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(a3 + 40);
      char v39 = 1;
    }
    *(unsigned char *)(a2 + 41) = v39;
    if (*(unsigned char *)(a3 + 43))
    {
      *(unsigned char *)(a2 + 42) = *(unsigned char *)(a3 + 42);
      char v40 = 1;
    }
    else
    {
      char v40 = 0;
    }
    *(unsigned char *)(a2 + 43) = v40;
    uint64_t v41 = *v27;
    *(unsigned char *)(a2 + 56) = *(unsigned char *)(a3 + 56);
    *uint64_t v37 = v41;
    *(void *)a3 = v33;
    uint64_t *v24 = v65;
    *(_DWORD *)(a3 + 16) = v69;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v61[4];
    if (v35 < 0x100)
    {
      *(unsigned char *)(a3 + 41) = 0;
      if (v36 >= 0x100) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 40) = v35;
      *(unsigned char *)(a3 + 41) = 1;
      if (v36 >= 0x100)
      {
LABEL_24:
        *(unsigned char *)(a3 + 42) = v36;
        char v42 = 1;
        goto LABEL_25;
      }
    }
    char v42 = 0;
LABEL_25:
    *(unsigned char *)(a3 + 43) = v42;
    *char v27 = v53;
    *(unsigned char *)(a3 + 56) = v57;
    uint64_t result = (*a6)((uint64_t *)a2, (uint64_t *)a1);
    if (!result) {
      return result;
    }
    uint64_t v43 = *(void *)a1;
    uint64_t v66 = *(void *)(a1 + 8);
    int v70 = *(_DWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v62 = *(_OWORD *)(a1 + 20);
    *(_DWORD *)&v62[16] = *(_DWORD *)(a1 + 36);
    unsigned int v44 = *(unsigned __int16 *)(a1 + 40);
    unsigned int v45 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v54 = *(void *)(a1 + 48);
    char v58 = *(unsigned char *)(a1 + 56);
    *(void *)a1 = *(void *)a2;
    uint64_t v46 = *v34;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(a1 + 8) = v46;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    char v47 = *(unsigned char *)(a2 + 41);
    if (v47)
    {
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      char v47 = 1;
    }
    *(unsigned char *)(a1 + 41) = v47;
    if (*(unsigned char *)(a2 + 43))
    {
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
      char v48 = 1;
    }
    else
    {
      char v48 = 0;
    }
    *(unsigned char *)(a1 + 43) = v48;
    uint64_t v49 = *v37;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v49;
    *(void *)a2 = v43;
    uint64_t *v34 = v66;
    *(_DWORD *)(a2 + 16) = v70;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v62[4];
    if (v44 < 0x100)
    {
      *(unsigned char *)(a2 + 41) = 0;
      if (v45 >= 0x100) {
        goto LABEL_32;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 40) = v44;
      *(unsigned char *)(a2 + 41) = 1;
      if (v45 >= 0x100)
      {
LABEL_32:
        *(unsigned char *)(a2 + 42) = v45;
        char v50 = 1;
LABEL_33:
        *(unsigned char *)(a2 + 43) = v50;
        *uint64_t v37 = v54;
        *(unsigned char *)(a2 + 56) = v58;
        return result;
      }
    }
    char v50 = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_109EBB0(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v34 = v4;
    uint64_t v35 = v5;
    long long v7 = a4;
    uint64_t v8 = result;
    int64_t v28 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 6)
    {
      uint64_t v11 = ((uint64_t)a4 - result) >> 5;
      uint64_t v12 = v11 + 1;
      uint64_t v13 = result + ((v11 + 1) << 6);
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3 && (*a2)(v13, v13 + 64))
      {
        v13 += 64;
        uint64_t v12 = v14;
      }
      uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v13, v7);
      if ((result & 1) == 0)
      {
        long long v15 = v7[1];
        long long v29 = *v7;
        *(_OWORD *)char v30 = v15;
        *(void *)&v30[16] = *((void *)v7 + 4);
        int v31 = *((_DWORD *)v7 + 10);
        uint64_t v32 = *((void *)v7 + 6);
        char v33 = *((unsigned char *)v7 + 56);
        do
        {
          uint64_t v16 = v13;
          *(void *)long long v7 = *(void *)v13;
          uint64_t v18 = v13 + 8;
          uint64_t v17 = *(void *)(v13 + 8);
          *((_DWORD *)v7 + 4) = *(_DWORD *)(v13 + 16);
          *((void *)v7 + 1) = v17;
          *(long long *)((char *)v7 + 24) = *(_OWORD *)(v13 + 24);
          char v19 = *(unsigned char *)(v13 + 41);
          if (v19)
          {
            *((unsigned char *)v7 + 40) = *(unsigned char *)(v13 + 40);
            char v19 = 1;
          }
          *((unsigned char *)v7 + 41) = v19;
          char v20 = *(unsigned char *)(v13 + 43);
          if (v20)
          {
            *((unsigned char *)v7 + 42) = *(unsigned char *)(v13 + 42);
            char v20 = 1;
          }
          *((unsigned char *)v7 + 43) = v20;
          uint64_t v21 = *(void *)(v13 + 48);
          *((unsigned char *)v7 + 56) = *(unsigned char *)(v13 + 56);
          *((void *)v7 + 6) = v21;
          if (v28 < v12) {
            break;
          }
          uint64_t v22 = (2 * v12) | 1;
          uint64_t v13 = v8 + (v22 << 6);
          uint64_t v23 = 2 * v12 + 2;
          if (v23 < a3 && (*a2)(v8 + (v22 << 6), v13 + 64))
          {
            v13 += 64;
            uint64_t v22 = v23;
          }
          uint64_t result = ((uint64_t (*)(uint64_t, long long *))*a2)(v13, &v29);
          long long v7 = (long long *)v16;
          uint64_t v12 = v22;
        }
        while (!result);
        *(void *)uint64_t v16 = v29;
        uint64_t v24 = *((void *)&v29 + 1);
        *(_DWORD *)(v18 + 8) = *(_DWORD *)v30;
        *(void *)uint64_t v18 = v24;
        *(_OWORD *)(v18 + 16) = *(_OWORD *)&v30[8];
        char v25 = BYTE1(v31);
        if (BYTE1(v31))
        {
          *(unsigned char *)(v16 + 40) = v31;
          char v25 = 1;
        }
        *(unsigned char *)(v16 + 41) = v25;
        char v26 = HIBYTE(v31);
        if (HIBYTE(v31))
        {
          *(unsigned char *)(v16 + 42) = BYTE2(v31);
          char v26 = 1;
        }
        *(unsigned char *)(v16 + 43) = v26;
        uint64_t v27 = v32;
        *(unsigned char *)(v16 + 56) = v33;
        *(void *)(v16 + 48) = v27;
      }
    }
  }
  return result;
}

uint64_t sub_109EDE4(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 < 2) {
    return result;
  }
  uint64_t v61 = v4;
  uint64_t v62 = v5;
  uint64_t v9 = result;
  uint64_t v10 = 0;
  uint64_t v47 = *(void *)result;
  uint64_t v53 = *(void *)(result + 8);
  int v54 = *(_DWORD *)(result + 16);
  *(_OWORD *)uint64_t v52 = *(_OWORD *)(result + 20);
  *(_DWORD *)&v52[16] = *(_DWORD *)(result + 36);
  uint64_t v50 = *(void *)(result + 48);
  char v51 = *(unsigned char *)(result + 56);
  int64_t v11 = (unint64_t)(a4 - 2) >> 1;
  uint64_t v12 = result;
  unsigned int v48 = *(unsigned __int16 *)(result + 40);
  unsigned int v49 = *(unsigned __int16 *)(result + 42);
  do
  {
    uint64_t v13 = v12 + (v10 << 6) + 64;
    uint64_t v14 = 2 * v10;
    uint64_t v10 = (2 * v10) | 1;
    uint64_t v15 = v14 + 2;
    if (v14 + 2 < a4)
    {
      uint64_t result = (*a3)(v13, v13 + 64);
      if (result)
      {
        v13 += 64;
        uint64_t v10 = v15;
      }
    }
    *(void *)uint64_t v12 = *(void *)v13;
    uint64_t v16 = (void *)(v13 + 8);
    uint64_t v17 = *(void *)(v13 + 8);
    *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
    *(void *)(v12 + 8) = v17;
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
    char v18 = *(unsigned char *)(v13 + 41);
    if (v18)
    {
      *(unsigned char *)(v12 + 40) = *(unsigned char *)(v13 + 40);
      char v18 = 1;
    }
    *(unsigned char *)(v12 + 41) = v18;
    char v19 = *(unsigned char *)(v13 + 43);
    if (v19)
    {
      *(unsigned char *)(v12 + 42) = *(unsigned char *)(v13 + 42);
      char v19 = 1;
    }
    *(unsigned char *)(v12 + 43) = v19;
    uint64_t v21 = (uint64_t *)(v13 + 48);
    uint64_t v20 = *(void *)(v13 + 48);
    *(unsigned char *)(v12 + 56) = *(unsigned char *)(v13 + 56);
    *(void *)(v12 + 48) = v20;
    uint64_t v12 = v13;
  }
  while (v10 <= v11);
  uint64_t v22 = (_OWORD *)(v13 + 24);
  if (v13 == a2 - 64)
  {
    *(void *)uint64_t v13 = v47;
    *uint64_t v16 = v53;
    *(_DWORD *)(v13 + 16) = v54;
    *uint64_t v22 = *(_OWORD *)&v52[4];
    if (v48 < 0x100)
    {
      char v45 = v49;
      *(unsigned char *)(v13 + 41) = 0;
      if (v49 >= 0x100) {
        goto LABEL_35;
      }
    }
    else
    {
      *(unsigned char *)(v13 + 40) = v48;
      char v45 = v49;
      *(unsigned char *)(v13 + 41) = 1;
      if (v49 >= 0x100)
      {
LABEL_35:
        *(unsigned char *)(v13 + 42) = v45;
        char v46 = 1;
LABEL_36:
        *(unsigned char *)(v13 + 43) = v46;
        uint64_t *v21 = v50;
        *(unsigned char *)(v13 + 56) = v51;
        return result;
      }
    }
    char v46 = 0;
    goto LABEL_36;
  }
  *(void *)uint64_t v13 = *(void *)(a2 - 64);
  uint64_t v23 = *(void *)(a2 - 56);
  *(_DWORD *)(v13 + 16) = *(_DWORD *)(a2 - 48);
  *uint64_t v16 = v23;
  *uint64_t v22 = *(_OWORD *)(a2 - 40);
  char v24 = *(unsigned char *)(a2 - 23);
  if (v24)
  {
    *(unsigned char *)(v13 + 40) = *(unsigned char *)(a2 - 24);
    char v24 = 1;
  }
  *(unsigned char *)(v13 + 41) = v24;
  char v25 = *(unsigned char *)(a2 - 21);
  if (v25)
  {
    *(unsigned char *)(v13 + 42) = *(unsigned char *)(a2 - 22);
    char v25 = 1;
  }
  *(unsigned char *)(v13 + 43) = v25;
  uint64_t v26 = *(void *)(a2 - 16);
  *(unsigned char *)(v13 + 56) = *(unsigned char *)(a2 - 8);
  uint64_t *v21 = v26;
  *(void *)(a2 - 64) = v47;
  *(void *)(a2 - 56) = v53;
  *(_DWORD *)(a2 - 48) = v54;
  *(_OWORD *)(a2 - 40) = *(_OWORD *)&v52[4];
  if (v48 < 0x100)
  {
    uint64_t v27 = v13 + 64;
    *(unsigned char *)(a2 - 23) = 0;
    char v28 = v49;
    if (v49 >= 0x100) {
      goto LABEL_18;
    }
LABEL_39:
    char v29 = 0;
    goto LABEL_19;
  }
  *(unsigned char *)(a2 - 24) = v48;
  uint64_t v27 = v13 + 64;
  *(unsigned char *)(a2 - 23) = 1;
  char v28 = v49;
  if (v49 < 0x100) {
    goto LABEL_39;
  }
LABEL_18:
  *(unsigned char *)(a2 - 22) = v28;
  char v29 = 1;
LABEL_19:
  *(unsigned char *)(a2 - 21) = v29;
  *(void *)(a2 - 16) = v50;
  *(unsigned char *)(a2 - 8) = v51;
  if (v27 - v9 >= 65)
  {
    unint64_t v30 = (((unint64_t)(v27 - v9) >> 6) - 2) >> 1;
    uint64_t v31 = v9 + (v30 << 6);
    uint64_t result = (*a3)(v31, v13);
    if (result)
    {
      long long v32 = *(_OWORD *)v13;
      long long v33 = *(_OWORD *)(v13 + 16);
      *(void *)&v56[16] = *(void *)(v13 + 32);
      long long v55 = v32;
      *(_OWORD *)char v56 = v33;
      __int16 v57 = *(_WORD *)(v13 + 40);
      __int16 v58 = *(_WORD *)(v13 + 42);
      uint64_t v34 = *v21;
      char v60 = *(unsigned char *)(v13 + 56);
      uint64_t v59 = v34;
      do
      {
        uint64_t v35 = v31;
        *(void *)uint64_t v13 = *(void *)v31;
        uint64_t v37 = v31 + 8;
        uint64_t v36 = *(void *)(v31 + 8);
        *(_DWORD *)(v13 + 16) = *(_DWORD *)(v31 + 16);
        *(void *)(v13 + 8) = v36;
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(v31 + 24);
        char v38 = *(unsigned char *)(v31 + 41);
        if (v38)
        {
          *(unsigned char *)(v13 + 40) = *(unsigned char *)(v31 + 40);
          char v38 = 1;
        }
        *(unsigned char *)(v13 + 41) = v38;
        char v39 = *(unsigned char *)(v31 + 43);
        if (v39)
        {
          *(unsigned char *)(v13 + 42) = *(unsigned char *)(v31 + 42);
          char v39 = 1;
        }
        *(unsigned char *)(v13 + 43) = v39;
        uint64_t v41 = (void *)(v31 + 48);
        uint64_t v40 = *(void *)(v31 + 48);
        *(unsigned char *)(v13 + 56) = *(unsigned char *)(v31 + 56);
        *(void *)(v13 + 48) = v40;
        if (!v30) {
          break;
        }
        unint64_t v30 = (v30 - 1) >> 1;
        uint64_t v31 = v9 + (v30 << 6);
        uint64_t result = (*a3)(v31, (uint64_t)&v55);
        uint64_t v13 = v35;
      }
      while ((result & 1) != 0);
      uint64_t v42 = *((void *)&v55 + 1);
      *(void *)uint64_t v35 = v55;
      *(void *)uint64_t v37 = v42;
      *(_DWORD *)(v37 + 8) = *(_DWORD *)v56;
      *(_OWORD *)(v37 + 16) = *(_OWORD *)&v56[8];
      char v43 = HIBYTE(v57);
      if (HIBYTE(v57))
      {
        *(unsigned char *)(v35 + 40) = v57;
        char v43 = 1;
      }
      *(unsigned char *)(v35 + 41) = v43;
      char v44 = HIBYTE(v58);
      if (HIBYTE(v58))
      {
        *(unsigned char *)(v35 + 42) = v58;
        char v44 = 1;
      }
      *(unsigned char *)(v35 + 43) = v44;
      void *v41 = v59;
      *(unsigned char *)(v35 + 56) = v60;
    }
  }
  return result;
}

void sub_109F23C()
{
  unk_25FDE97 = 16641;
  word_25FDE80 = 65;
  byte_25FDEAF = 1;
  byte_25FDE99 = 0;
  byte_25FDEC7 = 8;
  strcpy((char *)&qword_25FDEB0, "any_mode");
  byte_25FDEDF = 7;
  strcpy((char *)&dword_25FDEC8, "cycling");
  byte_25FDEF7 = 7;
  strcpy((char *)&dword_25FDEE0, "driving");
  byte_25FDF0F = 7;
  strcpy((char *)&dword_25FDEF8, "walking");
}

void *sub_109F2E8(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  sub_3DCBBC(a1 + 2);
  return a1;
}

void sub_109F314(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = sub_109F838(a1, a2, (uint64_t)a3);
  int v48 = v8;
  uint64_t v9 = sub_46C8EC(a3, v7);
  *(void *)a4 = -1;
  *(_DWORD *)(a4 + 8) = 0x7FFFFFFF;
  *(void *)(a4 + 16) = -1;
  *(void *)(a4 + 24) = -1;
  *(void *)(a4 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 48) = -1935635296;
  *(void *)(a4 + 56) = 0;
  uint64_t v47 = (double *)(a4 + 56);
  *(void *)(a4 + 72) = 0;
  *(_DWORD *)(a4 + 63) = 0;
  *(_DWORD *)(a4 + 96) = 0;
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 0;
  *(unsigned char *)(a4 + 100) = 100;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(void *)(a4 + 151) = 0;
  *(_DWORD *)(a4 + 160) = 0x7FFFFFFF;
  uint64_t v10 = *(unsigned __int16 *)(v9 + 36);
  uint64_t v11 = *(unsigned int *)(v9 + 32);
  uint64_t v50 = (int **)v9;
  __int16 v12 = *(unsigned __int8 *)(v9 + 38);
  uint64_t v13 = operator new(0x40uLL);
  *uint64_t v13 = 0;
  v13[1] = 0;
  *((_DWORD *)v13 + 4) = 0x7FFFFFFF;
  void v13[3] = 0;
  void v13[4] = v11 | (v10 << 32);
  *((_WORD *)v13 + 20) = v12 | 0x100;
  *((_WORD *)v13 + 21) = 257;
  v13[6] = 0;
  *((unsigned char *)v13 + 56) = 0;
  *(void *)(a4 + 112) = v13 + 8;
  *(void *)(a4 + 120) = v13 + 8;
  *(void *)(a4 + 104) = v13;
  uint64_t v14 = a2;
  if (!v7 && sub_DAA288(a2))
  {
    long long v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a4 + 48) = v15;
    *(_DWORD *)(a4 + 63) = *(_DWORD *)(a2 + 63);
    long long v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(_OWORD *)(a4 + 16) = v16;
    if (a4 != a2) {
      sub_147D0((void *)(a4 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
    }
    *(unsigned char *)(a4 + 100) = *(unsigned char *)(a2 + 100);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(a2 + 96);
    v13[1] = *(void *)a2;
    *((_DWORD *)v13 + 4) = *(_DWORD *)(a2 + 8);
    uint64_t v17 = v50;
    if (*((unsigned char *)v50 + 38)) {
      unsigned int v18 = sub_46CABC((uint64_t)a3);
    }
    else {
      unsigned int v18 = 1000000000 - sub_46CABC((uint64_t)a3);
    }
    char v19 = (uint64_t **)a1;
    uint64_t v40 = (unsigned __int16 *)((char *)*v50 - **v50);
    if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
      uint64_t v42 = *(unsigned int *)((char *)*v50 + v41);
    }
    else {
      uint64_t v42 = 0;
    }
    double v43 = (double)v18 / 1000000000.0 * (double)v42;
    if (v43 >= 0.0)
    {
      double v44 = (double)v18 / 1000000000.0 * (double)v42;
      if (v43 >= 4.50359963e15) {
        goto LABEL_49;
      }
      uint64_t v45 = (uint64_t)(v43 + v43) + 1;
    }
    else
    {
      double v44 = (double)v18 / 1000000000.0 * (double)v42;
      if (v43 <= -4.50359963e15) {
        goto LABEL_49;
      }
      uint64_t v45 = (uint64_t)(v43 + v43);
      if (v45 >= 1) {
        --v45;
      }
    }
    double v44 = (double)(v45 >> 1);
LABEL_49:
    if (v44 >= 9.22337204e18)
    {
      uint64_t v30 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_15;
    }
    if (v43 >= 0.0)
    {
      if (v43 < 4.50359963e15)
      {
        uint64_t v46 = (uint64_t)(v43 + v43) + 1;
LABEL_58:
        double v43 = (double)(v46 >> 1);
      }
    }
    else if (v43 > -4.50359963e15)
    {
      uint64_t v46 = (uint64_t)(v43 + v43);
      if (v46 >= 1) {
        --v46;
      }
      goto LABEL_58;
    }
    uint64_t v30 = (uint64_t)v43;
    goto LABEL_15;
  }
  char v19 = (uint64_t **)a1;
  uint64_t v20 = sub_3750CC((void *)*a1);
  uint64_t v17 = v50;
  sub_2954EC(v20, (uint64_t)v50[4], (uint64_t)v53);
  uint64_t v21 = __p;
  if (__p == v55)
  {
    int v25 = 0x7FFFFFFF;
    unint64_t v26 = 0xFFFFFFFF00000000;
    uint64_t v27 = 0xFFFFFFFFLL;
    if (!__p) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  unint64_t v22 = sub_2E1AA4((uint64_t)v53);
  unsigned int v23 = v22;
  int v25 = v24;
  unint64_t v26 = v22 & 0xFFFFFFFF00000000;
  uint64_t v21 = __p;
  uint64_t v27 = v23;
  if (__p)
  {
LABEL_9:
    long long v55 = v21;
    operator delete(v21);
  }
LABEL_10:
  v13[1] = v26 | v27;
  *((_DWORD *)v13 + 4) = v25;
  *(_DWORD *)(a4 + 8) = v25;
  *(void *)a4 = v26 | v27;
  if (*((unsigned char *)v50 + 38) && (v28 = (unsigned __int16 *)((char *)*v50 - **v50), *v28 >= 9u) && (uint64_t v29 = v28[4]) != 0) {
    uint64_t v30 = *(unsigned int *)((char *)*v50 + v29);
  }
  else {
    uint64_t v30 = 0;
  }
LABEL_15:
  void v13[3] = v30;
  uint64_t v31 = *v19;
  char v52 = 8;
  strcpy((char *)v51, "standard");
  uint64_t v32 = sub_374E14(v31, (uint64_t)v51);
  sub_F2CD30((uint64_t)v53, v32);
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  double v33 = (double)(v58 + 1) / 3.6;
  if (*v47 >= v33) {
    double v33 = *v47;
  }
  *uint64_t v47 = v33;
  uint64_t v34 = v17[1];
  uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
  unsigned int v36 = *v35;
  if (*((unsigned char *)v17 + 38))
  {
    if (v36 >= 9)
    {
      unsigned int v37 = v35[4];
      int v38 = v48;
      if (v37)
      {
LABEL_22:
        __int16 v39 = *(_WORD *)((char *)v34 + v37);
        goto LABEL_27;
      }
      goto LABEL_25;
    }
  }
  else if (v36 >= 5)
  {
    unsigned int v37 = v35[2];
    int v38 = v48;
    if (v37) {
      goto LABEL_22;
    }
LABEL_25:
    __int16 v39 = 0;
    goto LABEL_27;
  }
  __int16 v39 = 0;
  int v38 = v48;
LABEL_27:
  *(_WORD *)(a4 + 50) = v39;
  *(void *)(a4 + 16) = *(void *)(v14 + 16);
  *(_DWORD *)(a4 + 160) = v38;
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    char v60 = v59;
    operator delete(v59);
  }
  sub_3817F8(v57);
  if (v56 < 0) {
    operator delete(__p);
  }
}

void sub_109F7B0(_Unwind_Exception *a1)
{
  sub_C08338(v1);
  _Unwind_Resume(a1);
}

void sub_109F7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_C08338(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_109F838(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = sub_DAA288(a2);
  BOOL v7 = *(void *)(a2 + 16) != -1 && v6;
  if (sub_46E088(a3) && !v7)
  {
    uint64_t v8 = *a1;
    uint64_t v16 = 0;
    uint64_t v17 = operator new(0x19uLL);
    long long v18 = xmmword_20B9250;
    strcpy((char *)v17, "DrivingDirectionsUpdate");
    long long __p = 0;
    long long v15 = 0;
    uint64_t v9 = sub_374CDC(v8, (uint64_t)&v17, (uint64_t *)&__p);
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v15;
      __int16 v12 = __p;
      if (v15 != __p)
      {
        do
        {
          if (*((char *)v11 - 1) < 0) {
            operator delete(*(v11 - 3));
          }
          v11 -= 3;
        }
        while (v11 != v10);
        __int16 v12 = __p;
      }
      long long v15 = v10;
      operator delete(v12);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17);
    }
    uint64_t v17 = operator new(0x20uLL);
    long long v18 = xmmword_20B8E90;
    strcpy((char *)v17, "min_required_time_on_user_route");
    sub_319F48(v9, (uint64_t)&v17);
    if (SHIBYTE(v18) < 0) {
      operator delete(v17);
    }
    sub_3DCBC0(a1 + 2, a3, &v17);
  }
  return 0;
}

void sub_109FAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_109FAFC(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (sub_3EB32C(*(void *)(*a1 + 8), (int **)a2)) {
    return 1;
  }
  sub_3EB6C8(*(void *)(v4 + 8), *(void *)(a2 + 32), (uint64_t)&__p);
  BOOL v6 = __p;
  if (__p == v27)
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = *(void **)v7;
    uint64_t v9 = *(void **)(v7 + 8);
    if (*(void **)v7 == v9)
    {
      uint64_t v5 = 0;
    }
    else
    {
      do
      {
        int v10 = *(unsigned __int8 *)v8;
        if (v10 == 4 || v10 == 2)
        {
          __int16 v12 = (void *)v8[1];
          unint64_t v13 = v8[2];
          uint64_t v14 = (void *)v8[3];
          unint64_t v15 = v8[4];
          if (v12)
          {
            if (v14)
            {
              while (1)
              {
                unint64_t v18 = sub_46C760(v12);
                unint64_t v19 = sub_46C760(v14);
                if (v13 >= v18 || v15 >= v19)
                {
                  if (v13 < v18 == v15 < v19) {
                    goto LABEL_7;
                  }
                }
                else
                {
                  uint64_t v20 = sub_46C8EC(v12, v13);
                  if (v20 == sub_46C8EC(v14, v15)) {
                    goto LABEL_7;
                  }
                }
                uint64_t v21 = *(void *)(sub_46C8EC(v12, v13) + 32);
                unint64_t v22 = *(void *)(a2 + 32);
                if ((v21 & 0xFFFFFFFFFFFFLL) == (v22 & 0xFFFFFFFFFFFFLL)
                  && ((v21 & 0xFF000000000000) == 0) != (HIWORD(v22) & 1))
                {
                  goto LABEL_35;
                }
                ++v13;
              }
            }
            if (v13 < sub_46C760((void *)v8[1]))
            {
              while (1)
              {
                uint64_t v16 = *(void *)(sub_46C8EC(v12, v13) + 32);
                unint64_t v17 = *(void *)(a2 + 32);
                if ((v16 & 0xFFFFFFFFFFFFLL) == (v17 & 0xFFFFFFFFFFFFLL)
                  && ((v16 & 0xFF000000000000) == 0) != (HIWORD(v17) & 1))
                {
                  break;
                }
                if (++v13 >= sub_46C760(v12)) {
                  goto LABEL_7;
                }
              }
LABEL_35:
              uint64_t v5 = 1;
              goto LABEL_36;
            }
          }
          else if (v14 && v15 < sub_46C760((void *)v8[3]))
          {
            do
            {
              uint64_t v23 = *(void *)(sub_46C8EC(0, v13) + 32);
              unint64_t v24 = *(void *)(a2 + 32);
              if ((v23 & 0xFFFFFFFFFFFFLL) == (v24 & 0xFFFFFFFFFFFFLL)
                && ((v23 & 0xFF000000000000) == 0) != (HIWORD(v24) & 1))
              {
                goto LABEL_35;
              }
              ++v13;
            }
            while (v15 < sub_46C760(v14));
          }
        }
LABEL_7:
        v8 += 5;
      }
      while (v8 != v9);
      uint64_t v5 = 0;
LABEL_36:
      BOOL v6 = __p;
    }
  }
  else
  {
    uint64_t v5 = 1;
  }
  if (v6)
  {
    uint64_t v27 = v6;
    operator delete(v6);
  }
  return v5;
}

void sub_109FD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_109FD70()
{
  unk_25FDF27 = 16641;
  word_25FDF10 = 65;
  byte_25FDF3F = 1;
  byte_25FDF29 = 0;
}

void sub_109FD98(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, unsigned int *a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v11 = 1065353216;
  sub_10A4600(a1, a2, a3, a4, 0, 0, (uint64_t)v9, a5, a6);
  BOOL v6 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      BOOL v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = v9[0];
  v9[0] = 0;
  if (v8) {
    operator delete(v8);
  }
}

void sub_109FE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_109FE1C(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int *a6@<X5>, uint64_t a7@<X8>)
{
}

void sub_109FE34()
{
  unk_25FDF57 = 16641;
  word_25FDF40 = 65;
  byte_25FDF6F = 1;
  byte_25FDF59 = 0;
}

uint64_t sub_109FE5C(uint64_t a1, void *a2, char a3)
{
  *(unsigned char *)a1 = a3;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  HIBYTE(v13[2]) = 19;
  strcpy((char *)v13, "IntersectionSnapper");
  long long __p = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v5 = sub_374CDC((uint64_t)a2, (uint64_t)v13, (uint64_t *)&__p);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  sub_10A1AA0(a1 + 16, v5);
  BOOL v6 = (void **)__p;
  if (__p)
  {
    uint64_t v7 = v11;
    uint64_t v8 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = __p;
    }
    int v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_109FF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_109FF98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, void **a5@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v10 + 7774))
  {
    uint64_t v12 = sub_290DEC(v10 + 3896, v11, 1);
    if (!v12
      || (unint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 < 5u)
      || (uint64_t v14 = *((unsigned __int16 *)v13 + 2)) == 0
      || *(_DWORD *)&v12[v14 + *(unsigned int *)&v12[v14]] <= HIDWORD(v11)
      || !sub_295DB4(v10, v11))
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = *(void *)(a2 + 32);
  }
  sub_29549C(v10, v11, (uint64_t)&v140);
  sub_2E4B5C((uint64_t)&v140, &v144);
  if (__p)
  {
    unint64_t v142 = (double *)__p;
    operator delete(__p);
  }
  uint64_t v16 = v144;
  if (0xAAAAAAAAAAAAAAABLL * ((v145 - (unsigned char *)v144) >> 2) > 1)
  {
    sub_10A0D00(v15, (uint64_t)v144, 0, (double *)(a2 + 8), (uint64_t *)&v144);
    double v19 = v18 * 100.0;
    if (v19 >= 0.0)
    {
      double v20 = v19;
      if (v19 >= 4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v21 = (uint64_t)(v19 + v19) + 1;
    }
    else
    {
      double v20 = v19;
      if (v19 <= -4.50359963e15) {
        goto LABEL_22;
      }
      uint64_t v21 = (uint64_t)(v19 + v19);
      if (v21 >= 1) {
        --v21;
      }
    }
    double v20 = (double)(v21 >> 1);
LABEL_22:
    if (v20 >= 9.22337204e18)
    {
      uint64_t v23 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_33;
    }
    if (v19 >= 0.0)
    {
      if (v19 < 4.50359963e15)
      {
        uint64_t v22 = (uint64_t)(v19 + v19) + 1;
LABEL_31:
        double v19 = (double)(v22 >> 1);
      }
    }
    else if (v19 > -4.50359963e15)
    {
      uint64_t v22 = (uint64_t)(v19 + v19);
      if (v22 >= 1) {
        --v22;
      }
      goto LABEL_31;
    }
    uint64_t v23 = (uint64_t)v19;
LABEL_33:
    sub_10A0D00(v19, v17, 1, (double *)(a2 + 8), (uint64_t *)&v144);
    double v25 = v24 * 100.0;
    if (v25 >= 0.0)
    {
      double v26 = v25;
      if (v25 >= 4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v27 = (uint64_t)(v25 + v25) + 1;
    }
    else
    {
      double v26 = v25;
      if (v25 <= -4.50359963e15) {
        goto LABEL_41;
      }
      uint64_t v27 = (uint64_t)(v25 + v25);
      if (v27 >= 1) {
        --v27;
      }
    }
    double v26 = (double)(v27 >> 1);
LABEL_41:
    int v133 = a4;
    if (v26 >= 9.22337204e18)
    {
      uint64_t v29 = 0x7FFFFFFFFFFFFFFELL;
      goto LABEL_52;
    }
    if (v25 >= 0.0)
    {
      if (v25 < 4.50359963e15)
      {
        uint64_t v28 = (uint64_t)(v25 + v25) + 1;
LABEL_50:
        double v25 = (double)(v28 >> 1);
      }
    }
    else if (v25 > -4.50359963e15)
    {
      uint64_t v28 = (uint64_t)(v25 + v25);
      if (v28 >= 1) {
        --v28;
      }
      goto LABEL_50;
    }
    uint64_t v29 = (uint64_t)v25;
LABEL_52:
    uint64_t v138 = -1;
    int v139 = 0x7FFFFFFF;
    uint64_t v30 = (unsigned int *)sub_2D5EC4(*(void *)(a1 + 8), *(void *)(a2 + 32), 0);
    uint64_t v31 = (unsigned int *)sub_2D5EC4(*(void *)(a1 + 8), *(void *)(a2 + 32), 1);
    if (v23 < v29 && v23 < *(void *)(a1 + 24))
    {
      sub_2E4F74(*(void *)(a1 + 8), v30, (unint64_t *)&v140);
      double v33 = (unint64_t *)v140;
      uint64_t v32 = (unint64_t *)__p;
      if (v140 == __p)
      {
        unint64_t v34 = 0;
      }
      else
      {
        unint64_t v34 = 0;
        do
          v34 += sub_10A0FB8((unsigned __int8 *)a1, v33++, v133);
        while (v33 != v32);
        double v33 = (unint64_t *)v140;
      }
      if (v33)
      {
        long long __p = v33;
        operator delete(v33);
      }
      if (v34 >= 3)
      {
        uint64_t v35 = v144;
        goto LABEL_71;
      }
    }
    if (v29 >= *(void *)(a1 + 24))
    {
LABEL_146:
      __int16 v108 = *(_WORD *)(a2 + 40);
      __int16 v109 = *(_WORD *)(a2 + 42);
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      unint64_t v110 = operator new(0x40uLL);
      a5[1] = v110 + 4;
      a5[2] = v110 + 4;
      long long v111 = *(_OWORD *)(a2 + 16);
      _OWORD *v110 = *(_OWORD *)a2;
      v110[1] = v111;
      *((void *)v110 + 4) = *(void *)(a2 + 32);
      *((_WORD *)v110 + 20) = v108;
      *((_WORD *)v110 + 21) = v109;
      *((void *)v110 + 6) = *(void *)(a2 + 48);
      *((unsigned char *)v110 + 56) = *(unsigned char *)(a2 + 56);
      *a5 = v110;
      goto LABEL_150;
    }
    sub_2E4F74(*(void *)(a1 + 8), v31, (unint64_t *)&v140);
    unsigned int v37 = (char *)v140;
    unsigned int v36 = (char *)__p;
    if (v140 == __p)
    {
      unint64_t v38 = 0;
      if (v140)
      {
LABEL_68:
        long long __p = v37;
        operator delete(v37);
      }
    }
    else
    {
      unint64_t v38 = 0;
      do
      {
        v38 += sub_10A0FB8((unsigned __int8 *)a1, (unint64_t *)v37, v133);
        v37 += 8;
      }
      while (v37 != v36);
      unsigned int v37 = (char *)v140;
      if (v140) {
        goto LABEL_68;
      }
    }
    if (v38 >= 3)
    {
      uint64_t v35 = v145 - 12;
      uint64_t v30 = v31;
LABEL_71:
      uint64_t v39 = *(void *)v35;
      int v139 = v35[2];
      uint64_t v138 = v39;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      unsigned int v41 = *(_DWORD *)a3;
      unsigned int v40 = *((_DWORD *)a3 + 1);
      int v42 = v133;
      if (*(_DWORD *)a3 == -1 && v40 == -1 || v138 == -1)
      {
        uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_75:
        uint64_t v128 = v43;
        sub_2E4F74(*(void *)(a1 + 8), v30, (unint64_t *)&v136);
        uint64_t v45 = v136;
        double v44 = v137;
        if (v136 != v137)
        {
          unint64_t v129 = v137;
          uint64_t v130 = a3;
          while (1)
          {
            uint64_t v46 = *(void *)(a1 + 8);
            if (!*(unsigned char *)(v46 + 7774)
              || (unint64_t v47 = *v45, (v48 = sub_290DEC(v46 + 3896, *v45, 1)) != 0)
              && (unsigned int v49 = &v48[-*(int *)v48], *(unsigned __int16 *)v49 >= 5u)
              && (uint64_t v50 = *((unsigned __int16 *)v49 + 2)) != 0
              && *(_DWORD *)&v48[v50 + *(unsigned int *)&v48[v50]] > HIDWORD(v47)
              && sub_295DB4(v46, v47))
            {
              if (sub_10A0FB8((unsigned __int8 *)a1, v45, v42)) {
                break;
              }
            }
LABEL_78:
            if (++v45 == v44)
            {
              uint64_t v45 = v136;
              goto LABEL_148;
            }
          }
          sub_29549C(*(void *)(a1 + 8), *v45, (uint64_t)&v140);
          sub_2E4B5C((uint64_t)&v140, &v134);
          if (__p)
          {
            unint64_t v142 = (double *)__p;
            operator delete(__p);
          }
          char v51 = (int *)sub_2D5D58(*(void *)(a1 + 8), *v45);
          long long v55 = (unsigned __int16 *)((char *)v51 - *v51);
          if (*v55 >= 9u && (uint64_t v56 = v55[4]) != 0) {
            uint64_t v57 = *(unsigned int *)((char *)v51 + v56);
          }
          else {
            uint64_t v57 = 0;
          }
          uint64_t v148 = 0x7FEFFFFFFFFFFFFFLL;
          double v58 = NAN;
          uint64_t v146 = -1;
          int v147 = 0x7FFFFFFF;
          double v140 = &v138;
          long long __p = &v148;
          unint64_t v142 = (double *)&v146;
          char v60 = v134;
          uint64_t v59 = v135;
          if (v134 != v135 && (char *)v134 + 12 != v135)
          {
            do
            {
              sub_457FB8((uint64_t)&v140, v60, v60 + 3, v58, v52, v53, v54);
              uint64_t v61 = v60 + 6;
              v60 += 3;
            }
            while (v61 != v59);
            char v60 = v134;
            uint64_t v59 = v135;
          }
          double v150 = 0.0;
          double v151 = 0.0;
          uint64_t v149 = 0x7FEFFFFFFFFFFFFFLL;
          double v140 = &v146;
          long long __p = &v149;
          unint64_t v142 = &v150;
          int v143 = &v151;
          if (v60 == v59 || v60 + 3 == v59)
          {
            double v63 = 0.0;
          }
          else
          {
            do
            {
              double v58 = sub_4582C8((double **)&v140, (uint64_t)v60, v60 + 3, v58);
              uint64_t v62 = v60 + 6;
              v60 += 3;
            }
            while (v62 != v59);
            double v63 = 0.0;
            if (v151 != 0.0)
            {
              double v63 = v150 / v151;
              if (v150 / v151 > 1.0) {
                double v63 = 1.0;
              }
            }
          }
          double v64 = v63 * (double)v57;
          uint64_t v65 = (uint64_t)(v64 + v64);
          uint64_t v66 = v65 - 1;
          if (v65 < 1) {
            uint64_t v66 = (uint64_t)(v64 + v64);
          }
          double v67 = (double)(v66 >> 1);
          if (v64 <= -4.50359963e15) {
            double v67 = v64;
          }
          double v68 = (double)((v65 + 1) >> 1);
          if (v64 >= 4.50359963e15) {
            double v68 = v64;
          }
          if (v64 >= 0.0) {
            double v69 = v68;
          }
          else {
            double v69 = v67;
          }
          unint64_t v70 = sub_450B4C((uint64_t *)&v134, 0, -1 - 0x5555555555555555 * ((v135 - (unsigned char *)v134) >> 2), a3, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v64, v67, v68, v54);
          uint64_t v72 = (char *)v134 + 12 * v70;
          uint64_t v73 = *(void *)((char *)v72 + 12);
          v74.i64[0] = v73;
          v74.i64[1] = HIDWORD(v73);
          float64x2_t v75 = vcvtq_f64_u64(v74);
          v74.i64[0] = *v72;
          v74.i64[1] = HIDWORD(*v72);
          float64x2_t v76 = vcvtq_f64_u64(v74);
          v74.i64[0] = *a3;
          v74.i64[1] = HIDWORD(*a3);
          int8x16_t v77 = (int8x16_t)vsubq_f64(vcvtq_f64_u64(v74), v75);
          float64x2_t v78 = (float64x2_t)vextq_s8(v77, v77, 8uLL);
          int64x2_t v79 = (int64x2_t)vmulq_f64(vsubq_f64(v76, v75), v78);
          double v80 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v79, 1), (float64x2_t)v79).f64[0];
          if (v80 == 0.0) {
            __int16 v81 = 2;
          }
          else {
            __int16 v81 = 1;
          }
          if (v80 >= 0.0) {
            __int16 v82 = v81;
          }
          else {
            __int16 v82 = 0;
          }
          unsigned int v83 = *((unsigned __int16 *)a3 + 25);
          __int16 v131 = v82;
          if (v83 >> 5 > 0x464)
          {
            __int16 v86 = 0;
            __int16 v85 = 0;
            if (!*(unsigned char *)(a1 + 40)) {
              goto LABEL_126;
            }
          }
          else
          {
            sub_109B93C((uint64_t *)&v134, a3, (double)v83 / 100.0, 100.0, v78.f64[0], v71);
            __int16 v85 = fabs(v84) > 90.0;
            __int16 v86 = 1;
            if (!*(unsigned char *)(a1 + 40)) {
              goto LABEL_126;
            }
          }
          if (*(unsigned char *)a1 == 2)
          {
            unint64_t v87 = *v45;
            int v42 = v133;
            double v44 = v129;
            if (!sub_10A10B8(a1, v130, *v45, 0)) {
              goto LABEL_142;
            }
            int v42 = v133;
            double v44 = v129;
            if (!sub_10A10B8(a1, v130, v87, 1)) {
              goto LABEL_142;
            }
          }
LABEL_126:
          uint64_t v88 = (uint64_t)v69;
          long long v90 = (char *)a5[1];
          long long v89 = (char *)a5[2];
          if (v90 < v89)
          {
            unint64_t v91 = *v45;
            *(void *)long long v90 = v128;
            int v92 = v139;
            *((void *)v90 + 1) = v138;
            *((_DWORD *)v90 + 4) = v92;
            *((void *)v90 + 3) = v88;
            *((void *)v90 + 4) = v91;
            *((_WORD *)v90 + 20) = v85 | (v86 << 8);
            *((_WORD *)v90 + 21) = v131 | 0x100;
            *((void *)v90 + 6) = 0;
            v90[56] = 0;
            unint64_t v93 = v90 + 64;
LABEL_141:
            a5[1] = v93;
            double v44 = v129;
LABEL_142:
            if (v134)
            {
              double v135 = v134;
              operator delete(v134);
            }
            a3 = v130;
            goto LABEL_78;
          }
          BOOL v94 = (char *)*a5;
          uint64_t v95 = (v90 - (unsigned char *)*a5) >> 6;
          unint64_t v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 58) {
            sub_2E00();
          }
          uint64_t v97 = v89 - v94;
          if (v97 >> 5 > v96) {
            unint64_t v96 = v97 >> 5;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v98 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v98 = v96;
          }
          if (v98 >> 58) {
            sub_188D718();
          }
          uint64_t v99 = (char *)operator new(v98 << 6);
          unint64_t v100 = *v45;
          uint64_t v101 = v138;
          BOOL v102 = &v99[64 * v95];
          *(void *)BOOL v102 = v128;
          *((void *)v102 + 1) = v101;
          *((_DWORD *)v102 + 4) = v139;
          *((void *)v102 + 3) = v88;
          *((void *)v102 + 4) = v100;
          *((_WORD *)v102 + 20) = v85 | (v86 << 8);
          *((_WORD *)v102 + 21) = v131 | 0x100;
          *((void *)v102 + 6) = 0;
          v102[56] = 0;
          if (v90 == v94)
          {
            unint64_t v93 = v102 + 64;
            *a5 = v102;
            a5[1] = v102 + 64;
            a5[2] = &v99[64 * v98];
            if (!v94) {
              goto LABEL_140;
            }
          }
          else
          {
            int v103 = &v99[64 * v95];
            do
            {
              uint64_t v104 = v103 - 64;
              long long v105 = *((_OWORD *)v90 - 4);
              long long v106 = *((_OWORD *)v90 - 3);
              *((void *)v103 - 4) = *((void *)v90 - 4);
              *((_OWORD *)v103 - 4) = v105;
              *((_OWORD *)v103 - 3) = v106;
              *((_WORD *)v103 - 12) = *((_WORD *)v90 - 12);
              *((_WORD *)v103 - 11) = *((_WORD *)v90 - 11);
              uint64_t v107 = *((void *)v90 - 2);
              *(v103 - 8) = *(v90 - 8);
              *((void *)v103 - 2) = v107;
              v90 -= 64;
              v103 -= 64;
            }
            while (v90 != v94);
            unint64_t v93 = v102 + 64;
            *a5 = v104;
            a5[1] = v102 + 64;
            a5[2] = &v99[64 * v98];
            if (!v94) {
              goto LABEL_140;
            }
          }
          operator delete(v94);
LABEL_140:
          int v42 = v133;
          goto LABEL_141;
        }
LABEL_148:
        if (v45)
        {
          long long v137 = v45;
          operator delete(v45);
        }
LABEL_150:
        uint64_t v16 = v144;
        if (!v144) {
          return;
        }
        goto LABEL_151;
      }
      long double v112 = exp(3.14159265 - (double)v40 * 6.28318531 / 4294967300.0);
      long double v113 = atan((v112 - 1.0 / v112) * 0.5) * 57.2957795 * 0.0174532925;
      v114.i64[0] = v41;
      v114.i64[1] = v138;
      long double v115 = exp(3.14159265 - (double)HIDWORD(v138) * 6.28318531 / 4294967300.0);
      long double v116 = atan((v115 - 1.0 / v115) * 0.5) * 57.2957795 * 0.0174532925;
      int64x2_t v117 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v114), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
      double v132 = vsubq_f64((float64x2_t)v117, (float64x2_t)vdupq_laneq_s64(v117, 1)).f64[0];
      long double v118 = sin((v113 - v116) * 0.5);
      long double v119 = v118 * v118;
      double v120 = cos(v113);
      long double v121 = v120 * cos(v116);
      long double v122 = sin(0.5 * v132);
      long double v123 = atan2(sqrt(v122 * v122 * v121 + v119), sqrt(1.0 - (v122 * v122 * v121 + v119)));
      double v124 = (v123 + v123) * 6372797.56 * 100.0;
      if (v124 >= 0.0)
      {
        double v125 = v124;
        if (v124 >= 4.50359963e15) {
          goto LABEL_163;
        }
        uint64_t v126 = (uint64_t)(v124 + v124) + 1;
      }
      else
      {
        double v125 = v124;
        if (v124 <= -4.50359963e15) {
          goto LABEL_163;
        }
        uint64_t v126 = (uint64_t)(v124 + v124);
        if (v126 >= 1) {
          --v126;
        }
      }
      double v125 = (double)(v126 >> 1);
LABEL_163:
      if (v125 >= 9.22337204e18)
      {
        uint64_t v43 = 0x7FFFFFFFFFFFFFFELL;
        goto LABEL_75;
      }
      if (v124 >= 0.0)
      {
        if (v124 < 4.50359963e15)
        {
          uint64_t v127 = (uint64_t)(v124 + v124) + 1;
LABEL_172:
          double v124 = (double)(v127 >> 1);
        }
      }
      else if (v124 > -4.50359963e15)
      {
        uint64_t v127 = (uint64_t)(v124 + v124);
        if (v127 >= 1) {
          --v127;
        }
        goto LABEL_172;
      }
      uint64_t v43 = (uint64_t)v124;
      goto LABEL_75;
    }
    goto LABEL_146;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (!v16) {
    return;
  }
LABEL_151:
  uint64_t v145 = v16;
  operator delete(v16);
}

void sub_10A0C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v32 = *(void **)v30;
  if (*(void *)v30)
  {
    *(void *)(v30 + 8) = v32;
    operator delete(v32);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10A0D00(double a1, uint64_t a2, uint64_t a3, double *a4, uint64_t *a5)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0x7FEFFFFFFFFFFFFFLL;
  v35[0] = a4;
  v35[1] = (double *)&v36;
  int v35[2] = (double *)&v37;
  v35[3] = (double *)&v38;
  uint64_t v6 = *a5;
  uint64_t v7 = a5[1];
  if (*a5 != v7 && *a5 + 12 != v7)
  {
    do
    {
      a1 = sub_4582C8(v35, v6, (unsigned int *)(v6 + 12), a1);
      uint64_t v9 = v6 + 24;
      v6 += 12;
    }
    while (v9 != v7);
  }
  uint64_t v10 = *a5;
  unint64_t v11 = (unsigned int *)a5[1];
  uint64_t v12 = (unsigned int *)(v10 + 12);
  double v13 = 0.0;
  if ((unsigned int *)v10 != v11 && v12 != v11)
  {
    float64x2_t v32 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v33 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    HIDWORD(v15) = 1096306543;
    do
    {
      LODWORD(v15) = *(v12 - 2);
      long double v16 = exp(3.14159265 - (double)*(unint64_t *)&v15 * 6.28318531 / 4294967300.0);
      *(double *)&unint64_t v17 = atan((v16 - 1.0 / v16) * 0.5) * 57.2957795;
      long double v18 = *(double *)&v17 * 0.0174532925;
      unsigned int v19 = *(v12 - 3);
      LODWORD(v17) = v12[1];
      long double v20 = exp(3.14159265 - (double)v17 * 6.28318531 / 4294967300.0);
      long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
      v22.i64[0] = v19;
      v22.i64[1] = *v12;
      int64x2_t v23 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v22), v33), v31), v32), v30);
      double v34 = vsubq_f64((float64x2_t)v23, (float64x2_t)vdupq_laneq_s64(v23, 1)).f64[0];
      long double v24 = sin((v18 - v21) * 0.5);
      long double v25 = v24 * v24;
      double v26 = cos(v18);
      long double v27 = v26 * cos(v21);
      long double v28 = sin(0.5 * v34);
      long double v29 = atan2(sqrt(v25 + v27 * (v28 * v28)), sqrt(1.0 - (v25 + v27 * (v28 * v28))));
      double v15 = (v29 + v29) * 6372797.56;
      double v13 = v13 + v15;
      v12 += 3;
    }
    while (v12 != v11);
  }
}

BOOL sub_10A0FB8(unsigned __int8 *a1, unint64_t *a2, int a3)
{
  int v6 = *a1;
  uint64_t v7 = (int *)sub_2D5D58(*((void *)a1 + 1), *a2);
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (v6)
  {
    if (v9 < 0x39) {
      return 0;
    }
    uint64_t v10 = v8[28];
    if (!v10) {
      return 0;
    }
    int v11 = *(int *)((char *)v7 + v10);
    if ((v11 & 0x23) == 0 && (v11 & 7) != 4) {
      return 0;
    }
  }
  else
  {
    if (v9 < 0xB) {
      return 0;
    }
    uint64_t v13 = v8[5];
    if (!v13 || (*((unsigned char *)v7 + v13) & 3) == 0) {
      return 0;
    }
  }
  if (a3 == 1
    && (uint64_t v14 = (int *)sub_2D5D58(*((void *)a1 + 1), *a2), v15 = (unsigned __int16 *)((char *)v14 - *v14), *v15 >= 0xBu)
    && (uint64_t v16 = v15[5]) != 0)
  {
    return (*((unsigned char *)v14 + v16) & 8) == 0;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_10A10B8(uint64_t a1, uint64_t *a2, unint64_t a3, int a4)
{
  uint64_t v105 = *a2;
  int v106 = *((_DWORD *)a2 + 2);
  sub_29549C(*(void *)(a1 + 8), a3, (uint64_t)v102);
  uint64_t v7 = v103;
  if (v103 == v104)
  {
    uint64_t v10 = 0;
    if (!v103) {
      return v10;
    }
    goto LABEL_114;
  }
  if (a4) {
    unint64_t v8 = sub_2E40A4((uint64_t)v102);
  }
  else {
    unint64_t v8 = sub_2E1AA4((uint64_t)v102);
  }
  unint64_t v11 = v8;
  unsigned int v12 = v9;
  unsigned int v13 = v105;
  if (v105 == -1 || (unint64_t v14 = HIDWORD(v8), v8 == -1))
  {
    if (*(void *)(a1 + 48) != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_10;
    }
LABEL_112:
    uint64_t v10 = 1;
    goto LABEL_113;
  }
  long double v22 = exp(3.14159265 - (double)HIDWORD(v105) * 6.28318531 / 4294967300.0);
  long double v23 = atan((v22 - 1.0 / v22) * 0.5) * 57.2957795 * 0.0174532925;
  v24.i64[0] = v13;
  v24.i64[1] = v11;
  long double v25 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
  long double v26 = atan((v25 - 1.0 / v25) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v27 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v24), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v86 = vsubq_f64((float64x2_t)v27, (float64x2_t)vdupq_laneq_s64(v27, 1)).f64[0];
  long double v28 = sin((v23 - v26) * 0.5);
  long double v29 = v28 * v28;
  double v30 = cos(v23);
  long double v31 = v30 * cos(v26);
  long double v32 = sin(0.5 * v86);
  long double v33 = atan2(sqrt(v32 * v32 * v31 + v29), sqrt(1.0 - (v32 * v32 * v31 + v29)));
  double v34 = (v33 + v33) * 6372797.56 * 100.0;
  if (v34 >= 0.0)
  {
    double v35 = v34;
    if (v34 >= 4.50359963e15) {
      goto LABEL_86;
    }
    uint64_t v36 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    double v35 = v34;
    if (v34 <= -4.50359963e15) {
      goto LABEL_86;
    }
    uint64_t v36 = (uint64_t)(v34 + v34);
    if (v36 >= 1) {
      --v36;
    }
  }
  double v35 = (double)(v36 >> 1);
LABEL_86:
  if (v35 >= 9.22337204e18)
  {
    if (*(void *)(a1 + 48) == 0x7FFFFFFFFFFFFFFFLL || *(void *)(a1 + 48) == 0x7FFFFFFFFFFFFFFELL) {
      goto LABEL_112;
    }
    goto LABEL_10;
  }
  if (v34 >= 0.0)
  {
    if (v34 >= 4.50359963e15) {
      goto LABEL_111;
    }
    uint64_t v83 = (uint64_t)(v34 + v34) + 1;
  }
  else
  {
    if (v34 <= -4.50359963e15) {
      goto LABEL_111;
    }
    uint64_t v83 = (uint64_t)(v34 + v34);
    if (v83 >= 1) {
      --v83;
    }
  }
  double v34 = (double)(v83 >> 1);
LABEL_111:
  if ((uint64_t)v34 <= *(void *)(a1 + 48)) {
    goto LABEL_112;
  }
LABEL_10:
  sub_2E4B5C((uint64_t)v102, &v100);
  if (v100 == v101)
  {
    uint64_t v98 = -1;
    int v99 = 0x7FFFFFFF;
    goto LABEL_25;
  }
  if ((char *)v101 - (unsigned char *)v100 == 12)
  {
    uint64_t v19 = *(void *)v100;
    int v20 = *((_DWORD *)v100 + 2);
    uint64_t v21 = HIDWORD(*(void *)v100);
    uint64_t v98 = v19;
    int v99 = v20;
    if ((v21 & v19) == 0xFFFFFFFF) {
      goto LABEL_25;
    }
LABEL_24:
    if (v11 == -1) {
      goto LABEL_25;
    }
    long double v68 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
    long double v69 = atan((v68 - 1.0 / v68) * 0.5) * 57.2957795 * 0.0174532925;
    v70.i64[0] = v19;
    v70.i64[1] = v11;
    long double v71 = exp(3.14159265 - (double)HIDWORD(v11) * 6.28318531 / 4294967300.0);
    long double v72 = atan((v71 - 1.0 / v71) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v73 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v70), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v87 = vsubq_f64((float64x2_t)v73, (float64x2_t)vdupq_laneq_s64(v73, 1)).f64[0];
    long double v74 = sin((v69 - v72) * 0.5);
    long double v75 = v74 * v74;
    double v76 = cos(v69);
    long double v77 = v76 * cos(v72);
    long double v78 = sin(0.5 * v87);
    long double v79 = atan2(sqrt(v78 * v78 * v77 + v75), sqrt(1.0 - (v78 * v78 * v77 + v75)));
    double v80 = (v79 + v79) * 6372797.56 * 100.0;
    if (v80 >= 0.0)
    {
      double v81 = v80;
      if (v80 >= 4.50359963e15) {
        goto LABEL_100;
      }
      uint64_t v82 = (uint64_t)(v80 + v80) + 1;
    }
    else
    {
      double v81 = v80;
      if (v80 <= -4.50359963e15) {
        goto LABEL_100;
      }
      uint64_t v82 = (uint64_t)(v80 + v80);
      if (v82 >= 1) {
        --v82;
      }
    }
    double v81 = (double)(v82 >> 1);
LABEL_100:
    if (v81 >= 9.22337204e18)
    {
      uint64_t v43 = *(void *)(a1 + 48);
      if (v43 != 0x7FFFFFFFFFFFFFFFLL && v43 != 0x7FFFFFFFFFFFFFFELL) {
        goto LABEL_35;
      }
      goto LABEL_26;
    }
    if (v80 >= 0.0)
    {
      if (v80 >= 4.50359963e15) {
        goto LABEL_119;
      }
      uint64_t v84 = (uint64_t)(v80 + v80) + 1;
    }
    else
    {
      if (v80 <= -4.50359963e15) {
        goto LABEL_119;
      }
      uint64_t v84 = (uint64_t)(v80 + v80);
      if (v84 >= 1) {
        --v84;
      }
    }
    double v80 = (double)(v84 >> 1);
LABEL_119:
    uint64_t v43 = *(void *)(a1 + 48);
    if ((uint64_t)v80 > v43) {
      goto LABEL_35;
    }
LABEL_26:
    unint64_t v44 = (unint64_t)(v101 - 3);
    if (*(v101 - 3) == v11
      && *((void *)v101 - 1) == __PAIR64__(v12, HIDWORD(v11))
      && v100 != v101
      && v44 > (unint64_t)v100)
    {
      uint64_t v45 = (char *)v100 + 12;
      do
      {
        int v46 = *((_DWORD *)v45 - 1);
        uint64_t v47 = *(void *)(v45 - 12);
        int v48 = *(_DWORD *)(v44 + 8);
        *(void *)(v45 - 12) = *(void *)v44;
        *((_DWORD *)v45 - 1) = v48;
        *(void *)unint64_t v44 = v47;
        *(_DWORD *)(v44 + 8) = v46;
        v44 -= 12;
        BOOL v49 = (unint64_t)v45 >= v44;
        v45 += 12;
      }
      while (!v49);
      uint64_t v43 = *(void *)(a1 + 48);
    }
    uint64_t v98 = sub_72B688((unsigned int **)&v100, v43);
    int v99 = v50;
    goto LABEL_35;
  }
  unint64_t v37 = sub_450B4C((uint64_t *)&v100, 0, 0xAAAAAAAAAAAAAAABLL * (((char *)v101 - (unsigned char *)v100) >> 2) - 1, &v105, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v15, v16, v17, v18);
  if (v37 >= -1 - 0x5555555555555555 * (((char *)v101 - (unsigned char *)v100) >> 2)) {
    unint64_t v40 = v37;
  }
  else {
    unint64_t v40 = v37 + 1;
  }
  unint64_t v41 = sub_450830((_DWORD *)v100 + 3 * v37, (_DWORD *)v100 + 3 * v40, &v105, v38, v39);
  LODWORD(v19) = v41;
  uint64_t v21 = HIDWORD(v41);
  uint64_t v98 = v41;
  int v99 = v42;
  if ((HIDWORD(v41) & v41) != 0xFFFFFFFF) {
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v43 = *(void *)(a1 + 48);
  if (v43 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_26;
  }
LABEL_35:
  uint64_t v95 = 0;
  unint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v51 = *(void *)(a1 + 8);
  double v52 = (unsigned int *)sub_2D5EC4(v51, a3, a4);
  sub_2E45D4(v51, v52, (uint64_t)&v95, 0, 1, 1);
  double v53 = (int **)v95;
  double v54 = v96;
  if (v95 != v96)
  {
    while (1)
    {
      uint64_t v57 = *((unsigned __int16 *)v53 + 18);
      uint64_t v58 = *((unsigned int *)v53 + 8);
      if (v58 == a3 && v57 == HIDWORD(a3)) {
        goto LABEL_40;
      }
      sub_29549C(*(void *)(a1 + 8), v58 | (v57 << 32), (uint64_t)v92);
      char v60 = *v53;
      uint64_t v61 = (unsigned __int16 *)((char *)*v53 - **v53);
      unsigned int v62 = *v61;
      if (*((unsigned char *)v53 + 38))
      {
        if (v62 >= 0x39)
        {
          if (v61[28] && (*(int *)((char *)v60 + v61[28]) & 0x4000) != 0) {
            goto LABEL_37;
          }
          goto LABEL_55;
        }
      }
      else if (v62 >= 0x39)
      {
        if (v61[28] && (*(int *)((char *)v60 + v61[28]) & 0x2000) != 0)
        {
LABEL_37:
          int v55 = 1;
          uint64_t v56 = __p;
          if (!__p) {
            goto LABEL_39;
          }
LABEL_38:
          BOOL v94 = v56;
          operator delete(v56);
          goto LABEL_39;
        }
        goto LABEL_55;
      }
      if (v62 < 0x1B)
      {
        if (v62 < 0x15) {
          goto LABEL_69;
        }
        int v63 = 0;
        uint64_t v64 = v61[10];
        if (!v61[10]) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
LABEL_55:
      if (v61[13] && *((unsigned __int8 *)v60 + v61[13]) > 7u) {
        goto LABEL_37;
      }
      int v63 = 1;
      uint64_t v64 = v61[10];
      if (!v61[10]) {
        goto LABEL_62;
      }
LABEL_61:
      if (*((unsigned __int8 *)v60 + v64) > 3u) {
        goto LABEL_69;
      }
LABEL_62:
      if (v62 < 0x2F)
      {
        if (!v63) {
          goto LABEL_69;
        }
      }
      else if (v61[23] && !*((unsigned char *)v60 + v61[23]))
      {
        goto LABEL_69;
      }
      uint64_t v65 = v61[13];
      if (v65 && *((unsigned __int8 *)v60 + v65) > 2u) {
        goto LABEL_37;
      }
LABEL_69:
      unint64_t v90 = sub_2E1AA4((uint64_t)v92);
      int v91 = v66;
      unint64_t v88 = sub_2E40A4((uint64_t)v92);
      int v89 = v67;
      if (!sub_3B9C8(&v105, &v98, &v90, &v88)) {
        goto LABEL_37;
      }
      int v55 = 0;
      uint64_t v56 = __p;
      if (__p) {
        goto LABEL_38;
      }
LABEL_39:
      if (!v55)
      {
        uint64_t v10 = 0;
        double v53 = (int **)v95;
        if (v95) {
          goto LABEL_73;
        }
        goto LABEL_74;
      }
LABEL_40:
      v53 += 5;
      if (v53 == v54)
      {
        uint64_t v10 = 1;
        double v53 = (int **)v95;
        if (!v95) {
          goto LABEL_74;
        }
        goto LABEL_73;
      }
    }
  }
  uint64_t v10 = 1;
  if (v95)
  {
LABEL_73:
    unint64_t v96 = v53;
    operator delete(v53);
  }
LABEL_74:
  if (v100)
  {
    uint64_t v101 = v100;
    operator delete(v100);
  }
LABEL_113:
  uint64_t v7 = v103;
  if (v103)
  {
LABEL_114:
    uint64_t v104 = v7;
    operator delete(v7);
  }
  return v10;
}

void sub_10A19DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p)
  {
    operator delete(__p);
    long double v31 = a29;
    if (a29) {
      goto LABEL_3;
    }
  }
  else
  {
    long double v31 = a29;
    if (a29)
    {
LABEL_3:
      operator delete(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_10A1AA0(uint64_t a1, void *a2)
{
  HIBYTE(v7) = 7;
  strcpy((char *)&__p, "enabled");
  *(unsigned char *)a1 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B5EB0;
  strcpy((char *)__p, "enabled_for_transit_entity");
  *(unsigned char *)(a1 + 1) = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x30uLL);
  long long v7 = xmmword_20B93D0;
  strcpy((char *)__p, "snap_to_intersection_threshold_distance_m");
  sub_5C8A4(a2, (uint64_t)&__p, (uint64_t *)(a1 + 8));
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x30uLL);
  long long v7 = xmmword_20B93C0;
  strcpy((char *)__p, "snap_to_intersection_threshold_speed_kph");
  *(double *)(a1 + 16) = sub_5D138(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B8870;
  strcpy((char *)__p, "enable_reachability_check");
  uint64_t v4 = sub_58070(a2, (uint64_t)&__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 24) = v5 == 4;
    if ((SHIBYTE(v7) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) != 0;
    if ((SHIBYTE(v7) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  operator delete(__p);
LABEL_15:
  long long __p = operator new(0x28uLL);
  long long v7 = xmmword_20B9260;
  strcpy((char *)__p, "close_to_intersection_threshold_m");
  sub_5C8A4(a2, (uint64_t)&__p, (uint64_t *)(a1 + 32));
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
}

void sub_10A1CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10A1D28()
{
  unk_25FDF87 = 16641;
  word_25FDF70 = 65;
  byte_25FDF9F = 1;
  byte_25FDF89 = 0;
}

void sub_10A1D50(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_DA6A30((char **)a4, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  long long __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if ((a3 & 0xFFFFFFFB) != 0)
  {
    if ((a3 - 1) <= 2)
    {
      unsigned int v8 = *a1;
      if (v8 <= 3)
      {
        unsigned int v9 = off_243F860;
        uint64_t v10 = off_243F840;
LABEL_7:
        sub_147D0(&__p, (char *)*v9[(char)v8], (char *)*v10[(char)v8], (*v10[(char)v8] - *v9[(char)v8]) >> 2);
      }
    }
  }
  else
  {
    unsigned int v8 = *a1;
    if (v8 < 4)
    {
      unsigned int v9 = off_243F820;
      uint64_t v10 = off_243F800;
      goto LABEL_7;
    }
  }
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v21 = (void **)a4;
  unsigned int v13 = __p;
  if (v12 != v11 && __p != v19)
  {
    do
    {
      unint64_t v14 = *(_DWORD **)(v12 + 80);
      double v15 = __p;
      if (__p != v19 && *(void *)(v12 + 72) != (void)v14)
      {
        while (1)
        {
          double v17 = *(_DWORD **)(v12 + 72);
          while (*v17 != *v15)
          {
            if (++v17 == v14)
            {
              double v17 = *(_DWORD **)(v12 + 80);
              break;
            }
          }
          if (v17 != v14) {
            break;
          }
          if (++v15 == v19) {
            goto LABEL_12;
          }
        }
        sub_10A1F10(&v21, v12);
      }
LABEL_12:
      v12 += 104;
    }
    while (v12 != v11);
    unsigned int v13 = __p;
  }
  if (v13)
  {
    uint64_t v19 = v13;
    operator delete(v13);
  }
}

void sub_10A1ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4364F4(v10);
  _Unwind_Resume(a1);
}

void ***sub_10A1F10(void ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int v5 = (char *)(*a1)[1];
  if (v5 >= (*a1)[2])
  {
    double v15 = sub_DA98C4(*a1, a2);
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)(a2 + 32);
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v5 + 63) = *(_DWORD *)(a2 + 63);
    *((_OWORD *)v5 + 2) = v7;
    *((_OWORD *)v5 + 3) = v8;
    *((void *)v5 + 9) = 0;
    *((_OWORD *)v5 + 1) = v6;
    *((void *)v5 + 10) = 0;
    *((void *)v5 + 11) = 0;
    uint64_t v10 = *(unsigned char **)(a2 + 72);
    unsigned int v9 = *(unsigned char **)(a2 + 80);
    int64_t v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      uint64_t v12 = (char *)operator new(v9 - v10);
      *((void *)v5 + 9) = v12;
      *((void *)v5 + 10) = v12;
      unsigned int v13 = &v12[4 * (v11 >> 2)];
      *((void *)v5 + 11) = v13;
      memcpy(v12, v10, v11);
      *((void *)v5 + 10) = v13;
    }
    int v14 = *(_DWORD *)(a2 + 96);
    v5[100] = *(unsigned char *)(a2 + 100);
    *((_DWORD *)v5 + 24) = v14;
    double v15 = v5 + 104;
    v4[1] = v5 + 104;
  }
  v4[1] = v15;
  return a1;
}

void sub_10A1FFC(_Unwind_Exception *exception_object)
{
  int v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 80) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_10A201C()
{
  qword_25FDFA0 = 0;
  qword_25FDFA8 = 0;
  qword_25FDFB0 = 0;
  v0 = operator new(8uLL);
  qword_25FDFA0 = (uint64_t)v0;
  void *v0 = 0xA00000005;
  qword_25FDFA8 = (uint64_t)(v0 + 1);
  qword_25FDFB0 = (uint64_t)(v0 + 1);
  qword_25FDFC0 = 0;
  qword_25FDFC8 = 0;
  qword_25FDFB8 = 0;
  uint64_t v1 = operator new(0xCuLL);
  *(void *)uint64_t v1 = 0x400000003;
  v1[2] = 9;
  qword_25FDFB8 = (uint64_t)v1;
  qword_25FDFC0 = (uint64_t)(v1 + 3);
  qword_25FDFC8 = (uint64_t)(v1 + 3);
  qword_25FDFD0 = 0;
  qword_25FDFD8 = 0;
  unk_25FDFE0 = 0;
  uint64_t v2 = operator new(4uLL);
  qword_25FDFD0 = (uint64_t)v2;
  *uint64_t v2 = 2;
  qword_25FDFD8 = (uint64_t)(v2 + 1);
  unk_25FDFE0 = v2 + 1;
  qword_25FDFF0 = 0;
  unk_25FDFF8 = 0;
  qword_25FDFE8 = 0;
  uint64_t v3 = operator new(8uLL);
  qword_25FDFE8 = (uint64_t)v3;
  *uint64_t v3 = 0x100000000;
  qword_25FDFF0 = (uint64_t)(v3 + 1);
  unk_25FDFF8 = v3 + 1;
  qword_25FE008 = 0;
  unk_25FE010 = 0;
  qword_25FE000 = 0;
  uint64_t v4 = operator new(8uLL);
  qword_25FE000 = (uint64_t)v4;
  *uint64_t v4 = 0x200000008;
  qword_25FE008 = (uint64_t)(v4 + 1);
  unk_25FE010 = v4 + 1;
  qword_25FE020 = 0;
  unk_25FE028 = 0;
  qword_25FE018 = 0;
  int v5 = operator new(0x10uLL);
  qword_25FE018 = (uint64_t)v5;
  *int v5 = xmmword_20F2880;
  uint64_t result = (uint64_t)(v5 + 1);
  qword_25FE020 = result;
  unk_25FE028 = result;
  return result;
}

uint64_t sub_10A2118(uint64_t a1, void *a2)
{
  long long __p = operator new(0x28uLL);
  long long v14 = xmmword_20B9260;
  strcpy((char *)__p, "enable_access_points_number_check");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  long long __p = operator new(0x20uLL);
  long long v14 = xmmword_20B9800;
  strcpy((char *)__p, "access_points_number_threshold");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 8) = v5;
  long long __p = operator new(0x28uLL);
  long long v14 = xmmword_20B93A0;
  strcpy((char *)__p, "enable_access_points_distance_check");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v6;
  long long __p = operator new(0x28uLL);
  long long v14 = xmmword_20B9280;
  strcpy((char *)__p, "access_points_distance_threshold_m");
  *(void *)(a1 + 24) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x38uLL);
  long long v14 = xmmword_20B99F0;
  strcpy((char *)__p, "enable_access_points_parking_destination_road_check");
  BOOL v7 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 32) = v7;
  long long __p = operator new(0x40uLL);
  long long v14 = xmmword_20B9A90;
  strcpy((char *)__p, "access_points_not_parking_destination_road_number_threshold");
  unint64_t v8 = sub_5C9BC(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 40) = v8;
  long long __p = operator new(0x20uLL);
  long long v14 = xmmword_20B8890;
  strcpy((char *)__p, "enable_access_points_kh_check");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 48) = v9;
  long long __p = operator new(0x30uLL);
  long long v14 = xmmword_20B93C0;
  strcpy((char *)__p, "enable_origin_destination_distance_check");
  BOOL v10 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 49) = v10;
  long long __p = operator new(0x28uLL);
  long long v14 = xmmword_20B9960;
  strcpy((char *)__p, "origin_destination_distance_threshold_m");
  *(void *)(a1 + 56) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v14 = xmmword_20B8890;
  strcpy((char *)__p, "access_points_distance_factor");
  double v11 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 64) = v11;
  return a1;
}

void sub_10A24D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10A2514(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  char v12 = 15;
  uint64_t v10 = 0;
  strcpy((char *)v11, "AccessPointSnap");
  long long __p = 0;
  BOOL v9 = 0;
  uint64_t v3 = sub_374CDC(a2, (uint64_t)v11, (uint64_t *)&__p);
  sub_10A2118((uint64_t)(a1 + 1), v3);
  BOOL v4 = (void **)__p;
  if (__p)
  {
    unint64_t v5 = v9;
    BOOL v6 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      BOOL v6 = __p;
    }
    BOOL v9 = v4;
    operator delete(v6);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return a1;
}

void sub_10A2604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10A262C(uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int *a4, int a5, unsigned int *a6)
{
  if (sub_10A2CBC(a1, a2, a3, a4, a5, a6))
  {
    *(unsigned char *)(a2 + 158) = 1;
    uint64_t v9 = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 112);
    if (v9 != v10)
    {
      float64x2_t v65 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v67 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v61 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      float64x2_t v63 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      do
      {
        unsigned int v13 = *a4;
        unsigned int v12 = a4[1];
        BOOL v14 = *a4 == -1 && v12 == -1;
        if (v14
          || ((unsigned int v15 = *(_DWORD *)(v9 + 8), v16 = *(_DWORD *)(v9 + 12), v15 == -1) ? (v17 = v16 == -1) : (v17 = 0), v17))
        {
          double v11 = *(double *)(a1 + 72) * (double)0x7FFFFFFFFFFFFFFFLL;
          if (v11 >= 0.0) {
            goto LABEL_39;
          }
          goto LABEL_20;
        }
        long double v18 = exp(3.14159265 - (double)v12 * 6.28318531 / 4294967300.0);
        long double v19 = atan((v18 - 1.0 / v18) * 0.5) * 57.2957795 * 0.0174532925;
        v20.i64[0] = v13;
        v20.i64[1] = v15;
        long double v21 = exp(3.14159265 - (double)v16 * 6.28318531 / 4294967300.0);
        long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
        float64x2_t v23 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v20), v67), v65), v63), v61);
        double v69 = vsubq_f64(v23, (float64x2_t)vdupq_laneq_s64((int64x2_t)v23, 1)).f64[0];
        long double v24 = sin((v19 - v22) * 0.5);
        long double v25 = v24 * v24;
        double v26 = cos(v19);
        long double v27 = v26 * cos(v22);
        long double v28 = sin(0.5 * v69);
        long double v29 = atan2(sqrt(v28 * v28 * v27 + v25), sqrt(1.0 - (v28 * v28 * v27 + v25)));
        double v30 = (v29 + v29) * 6372797.56 * 100.0;
        if (v30 >= 0.0)
        {
          double v31 = v30;
          if (v30 >= 4.50359963e15) {
            goto LABEL_27;
          }
          uint64_t v32 = (uint64_t)(v30 + v30) + 1;
        }
        else
        {
          double v31 = v30;
          if (v30 <= -4.50359963e15) {
            goto LABEL_27;
          }
          uint64_t v32 = (uint64_t)(v30 + v30);
          if (v32 >= 1) {
            --v32;
          }
        }
        double v31 = (double)(v32 >> 1);
LABEL_27:
        if (v31 >= 9.22337204e18)
        {
          double v11 = *(double *)(a1 + 72) * (double)0x7FFFFFFFFFFFFFFELL;
          if (v11 >= 0.0) {
            goto LABEL_39;
          }
          goto LABEL_20;
        }
        if (v30 >= 0.0)
        {
          if (v30 >= 4.50359963e15) {
            goto LABEL_38;
          }
          uint64_t v34 = (uint64_t)(v30 + v30) + 1;
        }
        else
        {
          if (v30 <= -4.50359963e15) {
            goto LABEL_38;
          }
          uint64_t v34 = (uint64_t)(v30 + v30);
          if (v34 >= 1) {
            --v34;
          }
        }
        double v30 = (double)(v34 >> 1);
LABEL_38:
        double v11 = *(double *)(a1 + 72) * (double)(uint64_t)v30;
        if (v11 >= 0.0)
        {
LABEL_39:
          if (v11 >= 4.50359963e15) {
            goto LABEL_5;
          }
          uint64_t v33 = (uint64_t)(v11 + v11) + 1;
          goto LABEL_4;
        }
LABEL_20:
        if (v11 <= -4.50359963e15) {
          goto LABEL_5;
        }
        uint64_t v33 = (uint64_t)(v11 + v11);
        if (v33 >= 1) {
          --v33;
        }
LABEL_4:
        double v11 = (double)(v33 >> 1);
LABEL_5:
        *(void *)uint64_t v9 = (uint64_t)v11;
        v9 += 64;
      }
      while (v9 != v10);
    }
    uint64_t v36 = *(void *)(a2 + 128);
    uint64_t v35 = *(void *)(a2 + 136);
    if (v36 != v35)
    {
      float64x2_t v66 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v68 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v62 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      float64x2_t v64 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      do
      {
        unsigned int v39 = *a4;
        unsigned int v38 = a4[1];
        BOOL v40 = *a4 == -1 && v38 == -1;
        if (v40
          || ((v42 = *(_DWORD *)(v36 + 8), v41 = *(_DWORD *)(v36 + 12), v42 == -1) ? (BOOL v43 = v41 == -1) : (BOOL v43 = 0), v43))
        {
          double v37 = *(double *)(a1 + 72) * (double)0x7FFFFFFFFFFFFFFFLL;
          if (v37 >= 0.0) {
            goto LABEL_78;
          }
          goto LABEL_59;
        }
        long double v44 = exp(3.14159265 - (double)v38 * 6.28318531 / 4294967300.0);
        long double v45 = atan((v44 - 1.0 / v44) * 0.5) * 57.2957795 * 0.0174532925;
        v46.i64[0] = v39;
        v46.i64[1] = v42;
        long double v47 = exp(3.14159265 - (double)v41 * 6.28318531 / 4294967300.0);
        long double v48 = atan((v47 - 1.0 / v47) * 0.5) * 57.2957795 * 0.0174532925;
        float64x2_t v49 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v46), v68), v66), v64), v62);
        double v70 = vsubq_f64(v49, (float64x2_t)vdupq_laneq_s64((int64x2_t)v49, 1)).f64[0];
        long double v50 = sin((v45 - v48) * 0.5);
        long double v51 = v50 * v50;
        double v52 = cos(v45);
        long double v53 = v52 * cos(v48);
        long double v54 = sin(0.5 * v70);
        long double v55 = atan2(sqrt(v54 * v54 * v53 + v51), sqrt(1.0 - (v54 * v54 * v53 + v51)));
        double v56 = (v55 + v55) * 6372797.56 * 100.0;
        if (v56 >= 0.0)
        {
          double v57 = v56;
          if (v56 >= 4.50359963e15) {
            goto LABEL_66;
          }
          uint64_t v58 = (uint64_t)(v56 + v56) + 1;
        }
        else
        {
          double v57 = v56;
          if (v56 <= -4.50359963e15) {
            goto LABEL_66;
          }
          uint64_t v58 = (uint64_t)(v56 + v56);
          if (v58 >= 1) {
            --v58;
          }
        }
        double v57 = (double)(v58 >> 1);
LABEL_66:
        if (v57 >= 9.22337204e18)
        {
          double v37 = *(double *)(a1 + 72) * (double)0x7FFFFFFFFFFFFFFELL;
          if (v37 >= 0.0) {
            goto LABEL_78;
          }
          goto LABEL_59;
        }
        if (v56 >= 0.0)
        {
          if (v56 >= 4.50359963e15) {
            goto LABEL_77;
          }
          uint64_t v60 = (uint64_t)(v56 + v56) + 1;
        }
        else
        {
          if (v56 <= -4.50359963e15) {
            goto LABEL_77;
          }
          uint64_t v60 = (uint64_t)(v56 + v56);
          if (v60 >= 1) {
            --v60;
          }
        }
        double v56 = (double)(v60 >> 1);
LABEL_77:
        double v37 = *(double *)(a1 + 72) * (double)(uint64_t)v56;
        if (v37 >= 0.0)
        {
LABEL_78:
          if (v37 >= 4.50359963e15) {
            goto LABEL_44;
          }
          uint64_t v59 = (uint64_t)(v37 + v37) + 1;
          goto LABEL_43;
        }
LABEL_59:
        if (v37 <= -4.50359963e15) {
          goto LABEL_44;
        }
        uint64_t v59 = (uint64_t)(v37 + v37);
        if (v59 >= 1) {
          --v59;
        }
LABEL_43:
        double v37 = (double)(v59 >> 1);
LABEL_44:
        *(void *)uint64_t v36 = (uint64_t)v37;
        v36 += 64;
      }
      while (v36 != v35);
    }
  }
}

uint64_t sub_10A2CBC(uint64_t a1, uint64_t a2, unsigned int **a3, unsigned int *a4, int a5, unsigned int *a6)
{
  if (a5 != 1) {
    return 0;
  }
  BOOL v7 = *a6 == -1 && a6[1] == -1;
  if (v7 || (unint64_t)(0x4EC4EC4EC4EC4EC5 * (((char *)a3[1] - (char *)*a3) >> 3)) < 2) {
    return 0;
  }
  uint64_t v13 = sub_3750CC(*(void **)a1);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v15 = *(void *)(a2 + 104);
    for (uint64_t i = *(void *)(a2 + 112); v15 != i; v15 += 64)
    {
      BOOL v17 = (int *)sub_2D5D58(v13, *(void *)(v15 + 32));
      long double v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 < 0xBu) {
        return 0;
      }
      uint64_t v19 = v18[5];
      if (!v19 || (*((unsigned char *)v17 + v19 + 3) & 2) == 0) {
        return 0;
      }
    }
  }
  if (*(unsigned char *)(a1 + 8)
    && (unint64_t)(0x4EC4EC4EC4EC4EC5 * (((char *)a3[1] - (char *)*a3) >> 3)) < *(void *)(a1 + 16))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64x2_t v20 = *a3;
    long double v21 = a3[1];
    if (*a3 != v21)
    {
      uint64_t v57 = *(void *)(a1 + 32);
      unsigned int v23 = *a4;
      unsigned int v22 = a4[1];
      int v24 = *a4 & v22;
      double v25 = 3.14159265;
      double v14 = exp((double)v22 * -6.28318531 / 4294967300.0 + 3.14159265);
      if (v24 != -1)
      {
        double __x = (v14 + -1.0 / v14) * 0.5;
        double v58 = ((double)v23 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
        double v14 = 6372797.56;
        while (1)
        {
          unsigned int v27 = *v20;
          unsigned int v26 = v20[1];
          if (*v20 == -1 && v26 == -1)
          {
            uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_46;
          }
          double v29 = v25;
          long double v30 = exp((double)v26 * -6.28318531 / 4294967300.0 + v25);
          long double v31 = atan((v30 - 1.0 / v30) * 0.5) * 57.2957795 * 0.0174532925;
          long double v32 = atan(__x) * 57.2957795 * 0.0174532925;
          long double v33 = sin((v31 - v32) * 0.5);
          long double v34 = v33 * v33;
          double v35 = cos(v31);
          long double v36 = v35 * cos(v32);
          long double v37 = sin((((double)v27 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925 - v58) * 0.5);
          long double v38 = atan2(sqrt(v37 * v37 * v36 + v34), sqrt(1.0 - (v37 * v37 * v36 + v34)));
          double v14 = (v38 + v38) * 6372797.56 * 100.0;
          if (v14 >= 0.0)
          {
            double v39 = v14;
            if (v14 < 4.50359963e15)
            {
              uint64_t v40 = (uint64_t)(v14 + v14) + 1;
LABEL_34:
              double v39 = (double)(v40 >> 1);
            }
          }
          else
          {
            double v39 = v14;
            if (v14 > -4.50359963e15)
            {
              uint64_t v40 = (uint64_t)(v14 + v14);
              if (v40 >= 1) {
                --v40;
              }
              goto LABEL_34;
            }
          }
          double v25 = v29;
          if (v39 < 9.22337204e18)
          {
            if (v14 >= 0.0)
            {
              if (v14 < 4.50359963e15)
              {
                uint64_t v42 = (uint64_t)(v14 + v14) + 1;
                goto LABEL_44;
              }
            }
            else if (v14 > -4.50359963e15)
            {
              uint64_t v42 = (uint64_t)(v14 + v14);
              if (v42 >= 1) {
                --v42;
              }
LABEL_44:
              double v14 = (double)(v42 >> 1);
            }
            uint64_t v41 = (uint64_t)v14;
            goto LABEL_46;
          }
          uint64_t v41 = 0x7FFFFFFFFFFFFFFELL;
LABEL_46:
          if (v41 > v57) {
            return 0;
          }
          v20 += 26;
          if (v20 == v21) {
            goto LABEL_50;
          }
        }
      }
      if (v57 != 0x7FFFFFFFFFFFFFFFLL) {
        return 0;
      }
    }
  }
LABEL_50:
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v44 = *(void *)(a2 + 104);
    uint64_t v43 = *(void *)(a2 + 112);
    if (v44 != v43)
    {
      unint64_t v45 = 0;
      do
      {
        uint64x2_t v46 = (int *)sub_2D5D58(v13, *(void *)(v44 + 32));
        long double v47 = (unsigned __int16 *)((char *)v46 - *v46);
        if (*v47 < 0x2Fu
          || (uint64_t v48 = v47[23]) == 0
          || ((unsigned int v49 = *((unsigned __int8 *)v46 + v48), v50 = v49 > 0x2D, v51 = (1 << v49) & 0x208040000000, !v50)
            ? (BOOL v52 = v51 == 0)
            : (BOOL v52 = 1),
              v52))
        {
          long double v53 = (int *)sub_2D5D58(v13, *(void *)(v44 + 32));
          long double v54 = (unsigned __int16 *)((char *)v53 - *v53);
          if (*v54 < 0x2Fu || (uint64_t v55 = v54[23]) == 0 || *((unsigned char *)v53 + v55) != 47) {
            ++v45;
          }
        }
        v44 += 64;
      }
      while (v44 != v43);
      if (v45 > *(void *)(a1 + 48)) {
        return 0;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 57)) {
    return 1;
  }
  uint64_t v56 = sub_10A31E8(a6, a4, v14);
  uint64_t result = 0;
  if (v56 >= *(void *)(a1 + 64)) {
    return sub_10A3300(*a3, a3[1], a6, a1) ^ 1;
  }
  return result;
}

uint64_t sub_10A31E8(_DWORD *a1, unsigned int *a2, double a3)
{
  if (*a1 == -1 && a1[1] == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if (*a2 == -1 && a2[1] == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_33150((uint64_t)a1, a2, a3);
  double v6 = v5 * 100.0;
  if (v6 >= 0.0)
  {
    double v7 = v6;
    if (v6 >= 4.50359963e15) {
      goto LABEL_18;
    }
    uint64_t v8 = (uint64_t)(v6 + v6) + 1;
  }
  else
  {
    double v7 = v6;
    if (v6 <= -4.50359963e15) {
      goto LABEL_18;
    }
    uint64_t v8 = (uint64_t)(v6 + v6);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_18:
  if (v7 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v6 >= 0.0)
  {
    if (v6 < 4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v6 + v6) + 1;
      return (uint64_t)(double)(v10 >> 1);
    }
  }
  else if (v6 > -4.50359963e15)
  {
    uint64_t v10 = (uint64_t)(v6 + v6);
    if (v10 >= 1) {
      --v10;
    }
    return (uint64_t)(double)(v10 >> 1);
  }
  return (uint64_t)v6;
}

uint64_t sub_10A3300(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  double v7 = a1;
  float64x2_t v33 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v32 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  while (1)
  {
    unsigned int v9 = *v7;
    unsigned int v8 = v7[1];
    if (*v7 == -1 && v8 == -1) {
      goto LABEL_31;
    }
    unsigned int v12 = *a3;
    unsigned int v11 = a3[1];
    if (*a3 == -1 && v11 == -1) {
      goto LABEL_31;
    }
    long double v14 = exp(3.14159265 - (double)v8 * 6.28318531 / 4294967300.0);
    long double v15 = atan((v14 - 1.0 / v14) * 0.5) * 57.2957795 * 0.0174532925;
    v16.i64[0] = v9;
    v16.i64[1] = v12;
    long double v17 = exp(3.14159265 - (double)v11 * 6.28318531 / 4294967300.0);
    long double v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795 * 0.0174532925;
    float64x2_t v19 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v16), v34), v33), v32), v31);
    double v35 = vsubq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0];
    long double v20 = sin((v15 - v18) * 0.5);
    long double v21 = v20 * v20;
    double v22 = cos(v15);
    long double v23 = v22 * cos(v18);
    long double v24 = sin(0.5 * v35);
    long double v25 = atan2(sqrt(v24 * v24 * v23 + v21), sqrt(1.0 - (v24 * v24 * v23 + v21)));
    double v26 = (v25 + v25) * 6372797.56 * 100.0;
    if (v26 >= 0.0)
    {
      double v27 = v26;
      if (v26 >= 4.50359963e15) {
        goto LABEL_21;
      }
      uint64_t v28 = (uint64_t)(v26 + v26) + 1;
    }
    else
    {
      double v27 = v26;
      if (v26 <= -4.50359963e15) {
        goto LABEL_21;
      }
      uint64_t v28 = (uint64_t)(v26 + v26);
      if (v28 >= 1) {
        --v28;
      }
    }
    double v27 = (double)(v28 >> 1);
LABEL_21:
    if (v27 < 9.22337204e18) {
      break;
    }
    if (*(void *)(a4 + 64) == 0x7FFFFFFFFFFFFFFFLL) {
      return 1;
    }
LABEL_31:
    v7 += 26;
    if (v7 == a2) {
      return 0;
    }
  }
  if (v26 >= 0.0)
  {
    if (v26 < 4.50359963e15)
    {
      uint64_t v29 = (uint64_t)(v26 + v26) + 1;
      goto LABEL_29;
    }
  }
  else if (v26 > -4.50359963e15)
  {
    uint64_t v29 = (uint64_t)(v26 + v26);
    if (v29 >= 1) {
      --v29;
    }
LABEL_29:
    double v26 = (double)(v29 >> 1);
  }
  if ((uint64_t)v26 >= *(void *)(a4 + 64)) {
    goto LABEL_31;
  }
  return 1;
}

void sub_10A3624()
{
  unk_25FE047 = 16641;
  word_25FE030 = 65;
  byte_25FE05F = 1;
  byte_25FE049 = 0;
}

uint64_t sub_10A364C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "max_num_best_segments");
  unint64_t v4 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = v4;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "max_num_best_segments_for_access_point");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 8) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "best_segments_relative_score_threshold");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "best_segments_absolute_score_threshold");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v7;
  strcpy((char *)__p, "lowest_score_threshold");
  HIBYTE(__p[2]) = 22;
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "min_deviation_from_segment_direction");
  __int16 v9 = sub_376928(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 40) = v9;
  strcpy((char *)__p, "bearing_diff_threshold");
  HIBYTE(__p[2]) = 22;
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 48) = v10;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_side_of_street");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 56) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "enable_roads_non_navigable_error");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 57) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "enable_access_point_ranking");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 58) = v13;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_coverage_check");
  BOOL v14 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 59) = v14;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "filter_by_available_regions");
  BOOL v15 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 60) = v15;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "water_snapper_config");
  uint64_t v16 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v16 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 64), *(void **)v16, *(void *)(v16 + 8));
  }
  else
  {
    long long v17 = *(_OWORD *)v16;
    *(void *)(a1 + 80) = *(void *)(v16 + 16);
    *(_OWORD *)(a1 + 64) = v17;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "navigable_road_types");
  long double v18 = (void *)sub_560F4(a2, (uint64_t)__p);
  char v28 = 6;
  strcpy((char *)v27, "origin");
  float64x2_t v19 = (void *)sub_560F4(v18, (uint64_t)v27);
  sub_10A3DE4((BOOL *)(a1 + 88), v19);
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(__p[0]);
LABEL_32:
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "navigable_road_types");
  long double v20 = (void *)sub_560F4(a2, (uint64_t)__p);
  char v28 = 11;
  strcpy((char *)v27, "destination");
  long double v21 = (void *)sub_560F4(v20, (uint64_t)v27);
  sub_10A3DE4((BOOL *)(a1 + 93), v21);
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__p[0]);
LABEL_34:
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "navigable_road_types");
  double v22 = (void *)sub_560F4(a2, (uint64_t)__p);
  char v28 = 8;
  strcpy((char *)v27, "waypoint");
  long double v23 = (void *)sub_560F4(v22, (uint64_t)v27);
  sub_10A3DE4((BOOL *)(a1 + 98), v23);
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(__p[0]);
LABEL_36:
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "navigable_road_types");
  long double v24 = (void *)sub_560F4(a2, (uint64_t)__p);
  char v28 = 14;
  strcpy((char *)v27, "transit_entity");
  long double v25 = (void *)sub_560F4(v24, (uint64_t)v27);
  sub_10A3DE4((BOOL *)(a1 + 103), v25);
  if (v28 < 0)
  {
    operator delete(v27[0]);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return a1;
    }
LABEL_46:
    operator delete(__p[0]);
    return a1;
  }
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_46;
  }
  return a1;
}

void sub_10A3D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v23 + 87) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((*(char *)(v23 + 87) & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(*v24);
  goto LABEL_6;
}

BOOL *sub_10A3DE4(BOOL *a1, void *a2)
{
  char v11 = 8;
  strcpy(__p, "cyclable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  *a1 = v4;
  char v11 = 8;
  strcpy(__p, "drivable");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  a1[1] = v5;
  char v11 = 5;
  strcpy(__p, "ferry");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  a1[2] = v6;
  char v11 = 8;
  strcpy(__p, "walkable");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  a1[3] = v7;
  char v11 = 19;
  strcpy(__p, "transit_access_only");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  a1[4] = v8;
  return a1;
}

void sub_10A3F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10A3FA0(uint64_t a1, void *a2, char a3, char a4, char a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  *(unsigned char *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 17) = a4;
  *(unsigned char *)(a1 + 18) = a5;
  operator new();
}

void sub_10A4188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  uint64_t v21 = v19[5];
  v19[5] = 0;
  if (v21) {
    operator delete();
  }
  sub_10A424C(v19 + 4);
  uint64_t v22 = v19[3];
  v19[3] = 0;
  if (v22) {
    operator delete();
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_10A424C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 48);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)*v2;
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    BOOL v4 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = 0;
    if (v4) {
      operator delete(v4);
    }
    operator delete();
  }
  return result;
}

void sub_10A42C8(uint64_t a1, void *a2, char a3, char a4, char a5)
{
}

void sub_10A42F0(uint64_t a1, void *a2, char a3, char a4, char a5)
{
}

uint64_t sub_10A4318(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v9) {
LABEL_3:
    }
      operator delete();
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v2) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    BOOL v4 = *(void **)(v3 + 48);
    if (v4)
    {
      do
      {
        BOOL v5 = (void *)*v4;
        operator delete(v4);
        BOOL v4 = v5;
      }
      while (v5);
    }
    BOOL v6 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = 0;
    if (v6) {
      operator delete(v6);
    }
    operator delete();
  }
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v7) {
    operator delete();
  }
  return a1;
}

void sub_10A43F0(uint64_t a1, void *a2, char a3, uint64_t a4, char a5, char a6)
{
}

void sub_10A45A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5450C((uint64_t)va);
  sub_10A4318(v2);
  _Unwind_Resume(a1);
}

void sub_10A45BC(_Unwind_Exception *a1)
{
  sub_10A4318(v1);
  _Unwind_Resume(a1);
}

void sub_10A45D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_1A668(&a10);
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10A4318(v20);
  _Unwind_Resume(a1);
}

void sub_10A4600(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, unsigned int *a8@<X7>, uint64_t a9@<X8>)
{
  if (*(void *)(a2 + 32) == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)&long long v57 = -1;
    DWORD2(v57) = 0x7FFFFFFF;
    *(void *)&long long v58 = -1;
    *((void *)&v58 + 1) = -1;
    long long v59 = 0x7FFFFFFFFFFFFFFFuLL;
    *(_DWORD *)uint64_t v60 = -1935635296;
    *(void *)&v60[8] = 0;
    *(_DWORD *)&v60[15] = 0;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    int v63 = 0;
    char v64 = 100;
    memset(v65, 0, 55);
    if (a4 > 5) {
      uint64_t v17 = 22;
    }
    else {
      uint64_t v17 = qword_20F2BC0[a4];
    }
    uint64_t v45 = v17;
    sub_5F3038(&v56, *((unsigned char *)a1 + 16));
    sub_10A1D50(&v56, a3, a4, (uint64_t)&v54);
    sub_10B04D8((uint64_t)v53, (uint64_t *)&v54, a2);
    long double v18 = sub_10B04DC((uint64_t *)v53);
    sub_483C30(&v51, v18);
    uint64_t v43 = a9;
    if (a4 == 5) {
      char v19 = 1;
    }
    else {
      char v19 = a6;
    }
    sub_10B31FC((uint64_t)v46, a2, *a1, (uint64_t)(a1 + 15), (uint64_t)a1[6]);
    uint64_t v21 = (uint64_t *)v51;
    uint64_t v20 = v52;
    if (v51 == v52)
    {
      uint64_t v44 = &off_2439090;
    }
    else
    {
      uint64_t v44 = &off_2439090;
      do
      {
        if (v65[0] != v65[1]) {
          break;
        }
        if (v21 != v20)
        {
          do
          {
            BOOL v22 = sub_DAA300(v21, (uint64_t *)a2);
            sub_10A51A0(a1, (uint64_t)v46, v21, a5, a4, v19, a7, v22, (uint64_t)v66);
            if (LOBYTE(v66[0]))
            {
              sub_109C3C8((char **)v65, (uint64_t)v65[1], (long long *)v68, v69, ((char *)v69 - (unsigned char *)v68) >> 6);
              sub_109C3C8((char **)&v65[3], (uint64_t)v65[4], (long long *)__p, v71, ((char *)v71 - (unsigned char *)__p) >> 6);
              if (__p)
              {
                long double v71 = (long long *)__p;
                operator delete(__p);
              }
              if (v68) {
                operator delete(v68);
              }
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              uint64_t v44 = (void (***)(std::error_category *__hidden))v66[2];
              uint64_t v45 = v66[1];
            }
            v21 += 13;
          }
          while (v21 != v20);
          if (v65[0] != v65[1]) {
            break;
          }
        }
        uint64_t v23 = sub_10B04DC((uint64_t *)v53);
        if (&v51 != (void **)v23) {
          sub_5A31DC((uint64_t *)&v51, *v23, v23[1], 0x4EC4EC4EC4EC4EC5 * ((v23[1] - *v23) >> 3));
        }
        uint64_t v21 = (uint64_t *)v51;
        uint64_t v20 = v52;
      }
      while (v51 != v52);
    }
    if (!*((unsigned char *)a1 + 115)
      || (uint64_t v24 = sub_3777C0(*a1), v65[0] == v65[1])
      || sub_3D3604(v24, (unint64_t *)v65[0] + 4, *((unsigned __int8 *)a1 + 18)))
    {
      if (v65[0] == v65[1])
      {
        *(unsigned char *)uint64_t v43 = 0;
        *(void *)(v43 + 8) = v45;
        *(void *)(v43 + 16) = v44;
        float64x2_t v32 = v49;
        if (!v49)
        {
LABEL_43:
          if (v47)
          {
            uint64_t v48 = v47;
            operator delete(v47);
          }
          float64x2_t v33 = (uint64_t *)v51;
          if (v51)
          {
            float64x2_t v34 = v52;
            double v35 = v51;
            if (v52 != v51)
            {
              do
              {
                long double v36 = (void *)*(v34 - 4);
                if (v36)
                {
                  *(v34 - 3) = (uint64_t)v36;
                  operator delete(v36);
                }
                v34 -= 13;
              }
              while (v34 != v33);
              double v35 = v51;
            }
            BOOL v52 = v33;
            operator delete(v35);
          }
          sub_10A714C(v53);
          long double v37 = (char *)v54;
          if (v54)
          {
            long double v38 = v55;
            double v39 = v54;
            if (v55 != v54)
            {
              do
              {
                uint64_t v40 = (void *)*((void *)v38 - 4);
                if (v40)
                {
                  *((void *)v38 - 3) = v40;
                  operator delete(v40);
                }
                v38 -= 104;
              }
              while (v38 != v37);
              double v39 = v54;
            }
            uint64_t v55 = v37;
            operator delete(v39);
          }
          if (v65[3])
          {
            v65[4] = v65[3];
            operator delete(v65[3]);
          }
          if (v65[0])
          {
            v65[1] = v65[0];
            operator delete(v65[0]);
          }
          if ((void)v61)
          {
            *((void *)&v61 + 1) = v61;
            operator delete((void *)v61);
          }
          return;
        }
      }
      else
      {
        if (*((unsigned char *)a1 + 114) && sub_10B0658(v53))
        {
          sub_10A2628(v66, (uint64_t)*a1);
          sub_10A262C((uint64_t)v66, (uint64_t)&v57, (unsigned int **)&v51, (unsigned int *)a2, a4, a8);
        }
        long long v25 = *(_OWORD *)(a2 + 48);
        long long v59 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)uint64_t v60 = v25;
        *(_DWORD *)&v60[15] = *(_DWORD *)(a2 + 63);
        long long v26 = *(_OWORD *)(a2 + 16);
        long long v57 = *(_OWORD *)a2;
        long long v58 = v26;
        if (&v57 != (long long *)a2) {
          sub_147D0(&v61, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
        }
        int v63 = *(_DWORD *)(a2 + 96);
        char v64 = *(unsigned char *)(a2 + 100);
        LODWORD(v65[6]) = a4;
        BYTE4(v65[6]) = sub_10B0638((uint64_t)v53);
        BOOL v27 = sub_10B0658(v53);
        long long v28 = v57;
        *(_OWORD *)(v43 + 24) = v58;
        long long v29 = *(_OWORD *)v60;
        *(_OWORD *)(v43 + 40) = v59;
        *(_OWORD *)(v43 + 56) = v29;
        BYTE5(v65[6]) = v27;
        *(unsigned char *)uint64_t v43 = 1;
        *(_DWORD *)(v43 + 71) = *(_DWORD *)&v60[15];
        long double v30 = v65[2];
        *(void *)(v43 + 96) = v62;
        *(_OWORD *)(v43 + 8) = v28;
        *(_OWORD *)(v43 + 80) = v61;
        uint64_t v62 = 0;
        long long v61 = 0uLL;
        *(_DWORD *)(v43 + 104) = v63;
        *(unsigned char *)(v43 + 108) = v64;
        *(_OWORD *)(v43 + 112) = *(_OWORD *)v65;
        *(void *)(v43 + 128) = v30;
        memset(v65, 0, 24);
        *(_OWORD *)(v43 + 136) = *(_OWORD *)&v65[3];
        *(void **)(v43 + 152) = v65[5];
        memset(&v65[3], 0, 24);
        int v31 = (int)v65[6];
        *(_DWORD *)(v43 + 163) = *(_DWORD *)((char *)&v65[6] + 3);
        *(_DWORD *)(v43 + 160) = v31;
        float64x2_t v32 = v49;
        if (!v49) {
          goto LABEL_43;
        }
      }
    }
    else
    {
      if (a4 > 5) {
        uint64_t v41 = 16;
      }
      else {
        uint64_t v41 = qword_20F2B30[a4];
      }
      *(unsigned char *)uint64_t v43 = 0;
      *(void *)(v43 + 8) = v41;
      *(void *)(v43 + 16) = &off_2439090;
      float64x2_t v32 = v49;
      if (!v49) {
        goto LABEL_43;
      }
    }
    BOOL v50 = v32;
    operator delete(v32);
    goto LABEL_43;
  }

  sub_10A4CA8(a1, a2, a4, a9);
}

void sub_10A4C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
}

void sub_10A4CA8(void **a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = sub_3750CC(*a1);
  if (v8 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = -v8;
  }
  unint64_t v11 = sub_2FD4C0(v9, v10);
  BOOL v13 = v11 > 0xFFFFFFFEFFFFFFFFLL || v11 == 0;
  int v14 = v8 < 1 || v13;
  if (v13) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15)
  {
    if (a3 > 5) {
      uint64_t v27 = 16;
    }
    else {
      uint64_t v27 = qword_20F2B30[a3];
    }
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = v27;
    *(void *)(a4 + 16) = &off_2439090;
    return;
  }
  *(void *)&long long v66 = -1;
  DWORD2(v66) = 0x7FFFFFFF;
  *(void *)&long long v67 = -1;
  *((void *)&v67 + 1) = -1;
  long long v68 = 0x7FFFFFFFFFFFFFFFuLL;
  *(_DWORD *)double v69 = -1935635296;
  *(void *)&v69[8] = 0;
  *(_DWORD *)&v69[15] = 0;
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  int v72 = 0;
  char v73 = 100;
  memset(v74, 0, 55);
  uint64_t v16 = sub_3750CC(*a1);
  uint64_t v17 = (int *)sub_2D5D58(v16, v15);
  if (*(unsigned char *)(v16 + 7772)) {
    sub_2DB8E0(v16 + 3896, v15, 0);
  }
  sub_2E5C38(v16, v15, 1);
  uint64_t v18 = 0x1000000000000;
  if (!v14) {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v18 | v15;
  uint64_t v20 = *a1;
  unsigned int v48 = a3;
  if (a3)
  {
    uint64_t v21 = sub_3750CC(v20);
    sub_2954EC(v21, v19, (uint64_t)__p);
    BOOL v22 = (void *)sub_2E40A4((uint64_t)__p);
    int v24 = v23;
    if (__p[1])
    {
      *(void **)&long long v58 = __p[1];
      operator delete(__p[1]);
    }
    long long v25 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v25 >= 9u && (uint64_t v26 = v25[4]) != 0) {
      uint64_t v47 = *(unsigned int *)((char *)v17 + v26);
    }
    else {
      uint64_t v47 = 0;
    }
    goto LABEL_34;
  }
  uint64_t v28 = sub_3750CC(v20);
  sub_2954EC(v28, v19, (uint64_t)__p);
  long long v29 = __p[1];
  if (__p[1] == (void *)v58)
  {
    unint64_t v32 = 0xFFFFFFFF00000000;
    int v24 = 0x7FFFFFFF;
    uint64_t v33 = 0xFFFFFFFFLL;
    if (!__p[1]) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v30 = sub_2E1AA4((uint64_t)__p);
  unsigned int v31 = v30;
  unint64_t v32 = v30 & 0xFFFFFFFF00000000;
  long long v29 = __p[1];
  uint64_t v33 = v31;
  int v24 = v34;
  if (__p[1])
  {
LABEL_32:
    *(void *)&long long v58 = v29;
    operator delete(v29);
  }
LABEL_33:
  uint64_t v47 = 0;
  BOOL v22 = (void *)(v32 | v33);
LABEL_34:
  long long v35 = *(_OWORD *)(a2 + 48);
  long long v59 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v60 = v35;
  *(_DWORD *)&v60[15] = *(_DWORD *)(a2 + 63);
  long long v36 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)a2;
  long long v58 = v36;
  uint64_t v62 = 0;
  int v63 = 0;
  long long v61 = 0;
  long double v38 = *(unsigned char **)(a2 + 72);
  long double v37 = *(unsigned char **)(a2 + 80);
  int64_t v39 = v37 - v38;
  if (v37 == v38)
  {
    uint64_t v41 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    if (v39 < 0) {
      sub_2E00();
    }
    uint64_t v40 = (char *)operator new(v37 - v38);
    uint64_t v41 = &v40[4 * (v39 >> 2)];
    long long v61 = v40;
    int v63 = v41;
    memcpy(v40, v38, v39);
    uint64_t v62 = v41;
  }
  int v42 = *(_DWORD *)(a2 + 96);
  char v65 = *(unsigned char *)(a2 + 100);
  __p[0] = v22;
  int v64 = v42;
  LODWORD(__p[1]) = v24;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = v22;
  int v50 = v24;
  uint64_t v51 = v47;
  uint64_t v52 = v15;
  __int16 v53 = (v8 < 1) | 0x100;
  __int16 v54 = 257;
  uint64_t v55 = 0;
  char v56 = 0;
  sub_10AC81C((char **)v74, &v49);
  long long v68 = v59;
  *(_OWORD *)double v69 = *(_OWORD *)v60;
  *(_DWORD *)&v69[15] = *(_DWORD *)&v60[15];
  long long v66 = *(_OWORD *)__p;
  long long v67 = v58;
  sub_147D0(&v70, v40, v41, (v41 - v40) >> 2);
  long long v43 = v66;
  *(_OWORD *)(a4 + 24) = v67;
  long long v44 = *(_OWORD *)v69;
  *(_OWORD *)(a4 + 40) = v68;
  *(_OWORD *)(a4 + 56) = v44;
  int v72 = v64;
  char v73 = v65;
  LODWORD(v74[6]) = v48;
  *(unsigned char *)a4 = 1;
  *(_DWORD *)(a4 + 71) = *(_DWORD *)&v69[15];
  *(_OWORD *)(a4 + 8) = v43;
  *(_OWORD *)(a4 + 80) = v70;
  uint64_t v45 = v74[2];
  *(void *)(a4 + 96) = v71;
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  *(_DWORD *)(a4 + 104) = v64;
  *(unsigned char *)(a4 + 108) = v65;
  *(_OWORD *)(a4 + 112) = *(_OWORD *)v74;
  *(void *)(a4 + 128) = v45;
  memset(v74, 0, 24);
  *(_OWORD *)(a4 + 136) = *(_OWORD *)&v74[3];
  *(void **)(a4 + 152) = v74[5];
  memset(&v74[3], 0, 24);
  int v46 = (int)v74[6];
  *(_DWORD *)(a4 + 163) = *(_DWORD *)((char *)&v74[6] + 3);
  *(_DWORD *)(a4 + 160) = v46;
  if (v40)
  {
    operator delete(v40);
    if (v74[3])
    {
      v74[4] = v74[3];
      operator delete(v74[3]);
    }
  }
  if (v74[0])
  {
    v74[1] = v74[0];
    operator delete(v74[0]);
  }
  if ((void)v70)
  {
    *((void *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
}

void sub_10A50E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    sub_C08338(&a33);
    _Unwind_Resume(a1);
  }
  sub_C08338(&a33);
  _Unwind_Resume(a1);
}

void sub_10A51A0(void **a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v11 = (uint64_t)a3;
  int v182 = a4;
  int v181 = a5;
  int v178 = a1;
  unint64_t v179 = &v180;
  uint64_t v180 = 0;
  if (*((unsigned char *)a1 + 116))
  {
    BOOL v15 = *a3 == -1 && a3[1] == -1;
    if (!v15 && (sub_37D100(*a1, a3) & 1) == 0)
    {
      ++*v179;
      *(unsigned char *)a9 = 0;
      *(void *)(a9 + 8) = 23;
      *(void *)(a9 + 16) = &off_2439090;
      return;
    }
  }
  v177[0] = (uint64_t)a1;
  v177[1] = (uint64_t)&v181;
  v177[2] = (uint64_t)&v182;
  v176[0] = a1;
  v176[1] = &v181;
  *(void *)&long long v173 = a7;
  *((void *)&v173 + 1) = a1;
  *(void *)&long long v174 = &v181;
  *((void *)&v174 + 1) = v177;
  uint64_t v175 = v176;
  sub_DAA084((uint64_t)v159, (uint64_t *)v11);
  double v185 = *(double *)v159;
  LODWORD(v186) = v159[1];
  if (*(void *)(a2 + 120) == *(void *)(a2 + 128))
  {
    sub_10A74D8((char **)__p, *(void *)(a2 + 104), (unsigned int *)&v185, *(_DWORD *)(a2 + 156), *(void *)(a2 + 176), (uint64_t)&v173, &v178);
    unint64_t v32 = (long long *)__p[0];
    uint64_t v21 = (long long *)__p[1];
    int v34 = 1;
    goto LABEL_56;
  }
  __p[1] = 0;
  __p[0] = 0;
  *(void *)&long long v191 = 0;
  if (*(_DWORD *)(a2 + 152))
  {
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    do
    {
      LODWORD(v16) = *(_DWORD *)(a2 + 156);
      double v19 = (double)*(unint64_t *)&v16;
      long double v20 = exp((double)v17);
      sub_10A74D8((char **)v187, *(void *)(a2 + 104), (unsigned int *)&v185, (v20 * v19), *(void *)(a2 + 176), (uint64_t)&v173, &v178);
      if (v18) {
        operator delete(v18);
      }
      uint64_t v18 = (long long *)v187[0];
      uint64_t v21 = (long long *)v187[1];
      if (v187[0] == v187[1])
      {
        uint64_t v21 = (long long *)v187[0];
LABEL_51:
        uint64_t v33 = 0;
        int v34 = 1;
        unint64_t v32 = (long long *)__p[0];
        goto LABEL_52;
      }
      char v22 = 0;
      int v23 = (long long *)v187[0];
      do
      {
        int v24 = sub_10B42C4(a2, (unsigned int *)v159, (uint64_t)v23);
        *((_DWORD *)v23 + 10) = v24;
        v22 |= v24 != 0;
        v23 += 3;
      }
      while (v23 != v21);
      if (!v22) {
        goto LABEL_51;
      }
      v187[0] = __p;
      uint64_t v27 = v18;
      do
      {
        if (sub_10B424C(a2, (uint64_t)v27, v25.n128_f64[0], *(double *)&v26)) {
          sub_5E15F4((char ***)v187, v27);
        }
        v27 += 3;
      }
      while (v27 != v21);
      uint64_t v28 = v18;
      while (!sub_10B424C(a2, (uint64_t)v28, v25.n128_f64[0], *(double *)&v26))
      {
        v28 += 3;
        if (v28 == v21) {
          goto LABEL_32;
        }
      }
      if (v28 != v21)
      {
        for (uint64_t i = v28 + 3; i != v21; i += 3)
        {
          if (!sub_10B424C(a2, (uint64_t)i, v25.n128_f64[0], *(double *)&v26))
          {
            __n128 v25 = (__n128)*i;
            long long v26 = i[1];
            *(long long *)((char *)v28 + 28) = *(long long *)((char *)i + 28);
            long long *v28 = (__int128)v25;
            v28[1] = v26;
            v28 += 3;
          }
        }
      }
      if (v28 != v21) {
        uint64_t v21 = v28;
      }
LABEL_32:
      unint64_t v30 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v21 - v18));
      uint64_t v31 = v21 == v18 ? 0 : v30;
      double v16 = sub_10A88E4((unint64_t)v18, v21, v31, 1, v25);
      if (v21 != v18) {
        goto LABEL_51;
      }
      ++v17;
    }
    while (v17 < *(_DWORD *)(a2 + 152));
    unint64_t v32 = (long long *)__p[0];
    uint64_t v33 = v18;
    int v34 = 0;
    uint64_t v21 = (long long *)&off_2439090;
    uint64_t v18 = (_OWORD *)(&dword_14 + 1);
    if (*(unsigned char *)(a2 + 145)) {
      goto LABEL_41;
    }
    goto LABEL_52;
  }
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  uint64_t v21 = (long long *)&off_2439090;
  uint64_t v18 = (_OWORD *)(&dword_14 + 1);
  if (!*(unsigned char *)(a2 + 145)) {
    goto LABEL_52;
  }
LABEL_41:
  if (a6)
  {
LABEL_52:
    if (!v32) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (v32 == __p[1])
  {
    int v34 = 0;
    uint64_t v18 = (_OWORD *)(&dword_14 + 1);
    if (!v32)
    {
LABEL_54:
      unint64_t v32 = v18;
      if (!v33) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
LABEL_53:
    __p[1] = v32;
    operator delete(v32);
    goto LABEL_54;
  }
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)v32) >> 4);
  LODWORD(v36) = *(_DWORD *)(a2 + 156);
  if (v36 >= v35) {
    unint64_t v36 = v35;
  }
  else {
    unint64_t v36 = v36;
  }
  if (v36 > v35)
  {
    sub_10A9F70(__p, v36 - v35);
    int v34 = 1;
    unint64_t v32 = (long long *)__p[0];
    uint64_t v21 = (long long *)__p[1];
    if (!v33) {
      goto LABEL_56;
    }
LABEL_55:
    operator delete(v33);
    goto LABEL_56;
  }
  if (v36 >= v35) {
    uint64_t v21 = (long long *)__p[1];
  }
  else {
    uint64_t v21 = &v32[3 * v36];
  }
  int v34 = 1;
  if (v33) {
    goto LABEL_55;
  }
LABEL_56:
  if (v163[0])
  {
    v163[1] = v163[0];
    operator delete(v163[0]);
  }
  if (v34)
  {
    if (v32 != v21)
    {
      int v148 = v34;
      uint64_t v170 = 0;
      unint64_t v171 = 0;
      unint64_t v172 = 0;
      double v150 = v32;
      if ((0xAAAAAAAAAAAAAAABLL * (v21 - v32)) >> 58) {
        sub_2E00();
      }
      int v154 = a8;
      double v156 = (uint64_t *)v11;
      uint64_t v170 = (uint64_t *)operator new(0xAAAAAAAAAAAAAAC0 * (v21 - v32));
      unint64_t v171 = v170;
      unint64_t v172 = &v170[0xF555555555555558 * (v21 - v32)];
      uint64_t v37 = (uint64_t)v32;
      while (1)
      {
        unint64_t v38 = *(void *)(v37 + 8);
        sub_29549C((uint64_t)a1[1], v38, (uint64_t)v159);
        sub_2E4B5C((uint64_t)v159, __p);
        if (v159[1])
        {
          *(void **)&long long v160 = v159[1];
          operator delete(v159[1]);
        }
        int64_t v39 = (int *)sub_2D5D58((uint64_t)a1[1], v38);
        long long v43 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v43 >= 9u && (uint64_t v44 = v43[4]) != 0) {
          uint64_t v45 = *(unsigned int *)((char *)v39 + v44);
        }
        else {
          uint64_t v45 = 0;
        }
        uint64_t v183 = 0x7FEFFFFFFFFFFFFFLL;
        double v46 = NAN;
        v187[0] = (void *)-1;
        LODWORD(v187[1]) = 0x7FFFFFFF;
        v159[0] = (void *)(v37 + 16);
        v159[1] = &v183;
        *(void *)&long long v160 = v187;
        uint64_t v47 = __p[0];
        unsigned int v48 = __p[1];
        if (__p[0] != __p[1] && (char *)__p[0] + 12 != __p[1])
        {
          do
          {
            sub_457FB8((uint64_t)v159, v47, v47 + 3, v46, v40, v41, v42);
            long long v49 = v47 + 6;
            v47 += 3;
          }
          while (v49 != v48);
          uint64_t v47 = __p[0];
          unsigned int v48 = __p[1];
        }
        uint64_t v184 = 0x7FEFFFFFFFFFFFFFLL;
        double v185 = 0.0;
        v169[0] = 0;
        v159[0] = v187;
        v159[1] = &v184;
        *(void *)&long long v160 = v169;
        *((void *)&v160 + 1) = &v185;
        if (v47 == v48 || v47 + 3 == v48)
        {
          double v51 = (double)v45;
          double v52 = 0.0 * (double)v45;
          if (v52 < 0.0) {
            goto LABEL_78;
          }
        }
        else
        {
          do
          {
            double v46 = sub_4582C8((double **)v159, (uint64_t)v47, v47 + 3, v46);
            int v50 = v47 + 6;
            v47 += 3;
          }
          while (v50 != v48);
          if (v185 == 0.0)
          {
            double v51 = (double)v45;
            double v52 = 0.0 * (double)v45;
            if (v52 < 0.0) {
              goto LABEL_78;
            }
          }
          else
          {
            double v61 = *(double *)v169 / v185;
            if (*(double *)v169 / v185 > 1.0) {
              double v61 = 1.0;
            }
            double v51 = (double)v45;
            double v52 = v61 * (double)v45;
            if (v52 < 0.0)
            {
LABEL_78:
              double v53 = -4.50359963e15;
              if (v52 > -4.50359963e15)
              {
                double v53 = v52 + v52;
                uint64_t v54 = (uint64_t)(v52 + v52);
                if (v54 >= 1) {
                  --v54;
                }
                goto LABEL_85;
              }
              goto LABEL_86;
            }
          }
        }
        double v53 = 4.50359963e15;
        if (v52 < 4.50359963e15)
        {
          double v53 = v52 + v52;
          uint64_t v54 = (uint64_t)(v52 + v52) + 1;
LABEL_85:
          double v52 = (double)(v54 >> 1);
        }
LABEL_86:
        char v55 = sub_10B424C(a2, v37, v53, v51);
        sub_10A6938((uint64_t)a1, v11, v37, (uint64_t)v52, (uint64_t *)__p, v55, (uint64_t)v159, v56, v57, v58, v59);
        sub_10AC81C((char **)&v170, (long long *)v159);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v37 += 48;
        if ((long long *)v37 == v21)
        {
          sub_10A6AC8((uint64_t)a1, &v170, v11, v181, (uint64_t)v169, v60);
          v159[0] = (void *)-1;
          LODWORD(v159[1]) = 0x7FFFFFFF;
          *(void *)&long long v160 = -1;
          *((void *)&v160 + 1) = -1;
          long long v161 = 0x7FFFFFFFFFFFFFFFuLL;
          *(_DWORD *)long long v162 = -1935635296;
          *(void *)&v162[8] = 0;
          *(_DWORD *)&v162[15] = 0;
          v163[0] = 0;
          v163[1] = 0;
          uint64_t v164 = 0;
          int v165 = 0;
          char v166 = 100;
          long long v167 = 0u;
          memset(v168, 0, 39);
          LODWORD(v168[4]) = v181;
          sub_10A6C14((double *)a1, (uint64_t)v159, v169, (_DWORD *)v11, v154);
          uint64_t v62 = a1[5];
          int v63 = (char *)operator new(0x30uLL);
          *(void *)int v63 = off_243F890;
          long long v64 = v174;
          *(_OWORD *)(v63 + 8) = v173;
          *(_OWORD *)(v63 + 24) = v64;
          *((void *)v63 + 5) = v175;
          *((void *)&v191 + 1) = v63;
          sub_109B0F8(v62, v159, v11, (uint64_t)__p);
          if (*((void ***)&v191 + 1) == __p)
          {
            (*((void (**)(void **))__p[0] + 4))(__p);
          }
          else if (*((void *)&v191 + 1))
          {
            (*(void (**)(void))(**((void **)&v191 + 1) + 40))();
          }
          uint64_t v85 = (uint64_t)a1[3];
          int v155 = v182;
          v157[0] = v173;
          v157[1] = v174;
          double v158 = v175;
          if (!*(unsigned char *)(v85 + 16)
            || LODWORD(v168[4]) == 5 && !*(unsigned char *)(v85 + 17)
            || *(double *)(v11 + 56) > *(double *)(v85 + 32) / 3.6)
          {
            sub_44479C((uint64_t)__p, (uint64_t)v159);
            goto LABEL_137;
          }
          long long v194 = 0uLL;
          int v196 = 0;
          uint64_t v195 = 0;
          char v197 = 100;
          memset(v198, 0, 55);
          long long v192 = v161;
          *(_OWORD *)uint64_t v193 = *(_OWORD *)v162;
          *(_DWORD *)&v193[15] = *(_DWORD *)&v162[15];
          *(_OWORD *)long long __p = *(_OWORD *)v159;
          long long v191 = v160;
          sub_147D0(&v194, (char *)v163[0], (char *)v163[1], ((char *)v163[1] - (char *)v163[0]) >> 2);
          int v196 = v165;
          char v197 = v166;
          LODWORD(v198[6]) = v168[4];
          *(_OWORD *)uint64_t v187 = 0u;
          *(_OWORD *)float64x2_t v188 = 0u;
          int v189 = 1065353216;
          uint64_t v152 = *((void *)&v167 + 1);
          uint64_t v94 = v167;
          if ((void)v167 != *((void *)&v167 + 1))
          {
            while (2)
            {
              sub_109FF98(v85, v94, (uint64_t *)v11, v155, (void **)&v185);
              double v96 = v185;
              double v95 = v186;
              if (*(void *)&v185 == *(void *)&v186)
              {
                if (v185 == 0.0) {
                  goto LABEL_153;
                }
              }
              else
              {
                do
                {
                  if (sub_10A8628((uint64_t)v157, *(void *)(*(void *)&v96 + 32)))
                  {
                    sub_299508((uint64_t)v187, (void *)(*(void *)&v96 + 32), (void *)(*(void *)&v96 + 32));
                    if (v101)
                    {
                      BOOL v102 = v198[1];
                      if (v198[1] < v198[2])
                      {
                        long long v97 = **(_OWORD **)&v96;
                        long long v98 = *(_OWORD *)(*(void *)&v96 + 16);
                        *((void *)v198[1] + 4) = *(void *)(*(void *)&v96 + 32);
                        *BOOL v102 = v97;
                        v102[1] = v98;
                        *((_WORD *)v102 + 20) = *(_WORD *)(*(void *)&v96 + 40);
                        *((_WORD *)v102 + 21) = *(_WORD *)(*(void *)&v96 + 42);
                        uint64_t v99 = *(void *)(*(void *)&v96 + 48);
                        *((unsigned char *)v102 + 56) = *(unsigned char *)(*(void *)&v96 + 56);
                        *((void *)v102 + 6) = v99;
                        unint64_t v100 = v102 + 4;
                      }
                      else
                      {
                        int v103 = v198[0];
                        int64_t v104 = ((char *)v198[1] - (char *)v198[0]) >> 6;
                        unint64_t v105 = v104 + 1;
                        if ((unint64_t)(v104 + 1) >> 58) {
                          sub_2E00();
                        }
                        int64_t v106 = (char *)v198[2] - (char *)v198[0];
                        if (((char *)v198[2] - (char *)v198[0]) >> 5 > v105) {
                          unint64_t v105 = v106 >> 5;
                        }
                        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFC0) {
                          unint64_t v107 = 0x3FFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v107 = v105;
                        }
                        if (v107)
                        {
                          if (v107 >> 58) {
                            sub_188D718();
                          }
                          __int16 v108 = (char *)operator new(v107 << 6);
                        }
                        else
                        {
                          __int16 v108 = 0;
                        }
                        __int16 v109 = &v108[64 * v104];
                        long long v110 = **(_OWORD **)&v96;
                        long long v111 = *(_OWORD *)(*(void *)&v96 + 16);
                        *((void *)v109 + 4) = *(void *)(*(void *)&v96 + 32);
                        *(_OWORD *)__int16 v109 = v110;
                        *((_OWORD *)v109 + 1) = v111;
                        *((_WORD *)v109 + 20) = *(_WORD *)(*(void *)&v96 + 40);
                        *((_WORD *)v109 + 21) = *(_WORD *)(*(void *)&v96 + 42);
                        uint64_t v112 = *(void *)(*(void *)&v96 + 48);
                        v109[56] = *(unsigned char *)(*(void *)&v96 + 56);
                        *((void *)v109 + 6) = v112;
                        long double v113 = v109;
                        if (v102 != v103)
                        {
                          do
                          {
                            long long v114 = *(v102 - 4);
                            long long v115 = *(v102 - 3);
                            *((void *)v113 - 4) = *((void *)v102 - 4);
                            *((_OWORD *)v113 - 4) = v114;
                            *((_OWORD *)v113 - 3) = v115;
                            *((_WORD *)v113 - 12) = *((_WORD *)v102 - 12);
                            *((_WORD *)v113 - 11) = *((_WORD *)v102 - 11);
                            uint64_t v116 = *((void *)v102 - 2);
                            *(v113 - 8) = *((unsigned char *)v102 - 8);
                            *((void *)v113 - 2) = v116;
                            v113 -= 64;
                            v102 -= 4;
                          }
                          while (v102 != v103);
                          BOOL v102 = v198[0];
                        }
                        unint64_t v100 = v109 + 64;
                        v198[0] = v113;
                        v198[1] = v109 + 64;
                        v198[2] = &v108[64 * v107];
                        if (v102) {
                          operator delete(v102);
                        }
                      }
                      v198[1] = v100;
                    }
                  }
                  *(void *)&v96 += 64;
                }
                while (*(void *)&v96 != *(void *)&v95);
                double v96 = v185;
                if (v185 == 0.0)
                {
LABEL_153:
                  v94 += 64;
                  uint64_t v11 = (uint64_t)v156;
                  if (v94 == v152) {
                    goto LABEL_180;
                  }
                  continue;
                }
              }
              break;
            }
            double v186 = v96;
            operator delete(*(void **)&v96);
            goto LABEL_153;
          }
LABEL_180:
          if (v198[0] == v198[1]) {
            sub_BE7EAC((char **)v198, (long long *)v167, *((long long **)&v167 + 1), (uint64_t)(*((void *)&v167 + 1) - v167) >> 6);
          }
          uint64_t v117 = v168[1];
          uint64_t v153 = v168[2];
          if (v168[1] != v168[2])
          {
            while (2)
            {
              sub_109FF98(v85, v117, v156, v155, (void **)&v185);
              double v119 = v185;
              double v118 = v186;
              if (*(void *)&v185 == *(void *)&v186)
              {
                if (v185 == 0.0) {
                  goto LABEL_184;
                }
              }
              else
              {
                do
                {
                  if (sub_10A8628((uint64_t)v157, *(void *)(*(void *)&v119 + 32)))
                  {
                    sub_299508((uint64_t)v187, (void *)(*(void *)&v119 + 32), (void *)(*(void *)&v119 + 32));
                    if (v124)
                    {
                      double v125 = v198[4];
                      if (v198[4] < v198[5])
                      {
                        long long v120 = **(_OWORD **)&v119;
                        long long v121 = *(_OWORD *)(*(void *)&v119 + 16);
                        *((void *)v198[4] + 4) = *(void *)(*(void *)&v119 + 32);
                        *double v125 = v120;
                        v125[1] = v121;
                        *((_WORD *)v125 + 20) = *(_WORD *)(*(void *)&v119 + 40);
                        *((_WORD *)v125 + 21) = *(_WORD *)(*(void *)&v119 + 42);
                        uint64_t v122 = *(void *)(*(void *)&v119 + 48);
                        *((unsigned char *)v125 + 56) = *(unsigned char *)(*(void *)&v119 + 56);
                        *((void *)v125 + 6) = v122;
                        long double v123 = v125 + 4;
                      }
                      else
                      {
                        uint64_t v126 = v198[3];
                        int64_t v127 = ((char *)v198[4] - (char *)v198[3]) >> 6;
                        unint64_t v128 = v127 + 1;
                        if ((unint64_t)(v127 + 1) >> 58) {
                          sub_2E00();
                        }
                        int64_t v129 = (char *)v198[5] - (char *)v198[3];
                        if (((char *)v198[5] - (char *)v198[3]) >> 5 > v128) {
                          unint64_t v128 = v129 >> 5;
                        }
                        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFC0) {
                          unint64_t v130 = 0x3FFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v130 = v128;
                        }
                        if (v130)
                        {
                          if (v130 >> 58) {
                            sub_188D718();
                          }
                          __int16 v131 = (char *)operator new(v130 << 6);
                        }
                        else
                        {
                          __int16 v131 = 0;
                        }
                        double v132 = &v131[64 * v127];
                        long long v133 = **(_OWORD **)&v119;
                        long long v134 = *(_OWORD *)(*(void *)&v119 + 16);
                        *((void *)v132 + 4) = *(void *)(*(void *)&v119 + 32);
                        *(_OWORD *)double v132 = v133;
                        *((_OWORD *)v132 + 1) = v134;
                        *((_WORD *)v132 + 20) = *(_WORD *)(*(void *)&v119 + 40);
                        *((_WORD *)v132 + 21) = *(_WORD *)(*(void *)&v119 + 42);
                        uint64_t v135 = *(void *)(*(void *)&v119 + 48);
                        v132[56] = *(unsigned char *)(*(void *)&v119 + 56);
                        *((void *)v132 + 6) = v135;
                        double v136 = v132;
                        if (v125 != v126)
                        {
                          do
                          {
                            long long v137 = *(v125 - 4);
                            long long v138 = *(v125 - 3);
                            *((void *)v136 - 4) = *((void *)v125 - 4);
                            *((_OWORD *)v136 - 4) = v137;
                            *((_OWORD *)v136 - 3) = v138;
                            *((_WORD *)v136 - 12) = *((_WORD *)v125 - 12);
                            *((_WORD *)v136 - 11) = *((_WORD *)v125 - 11);
                            uint64_t v139 = *((void *)v125 - 2);
                            *(v136 - 8) = *((unsigned char *)v125 - 8);
                            *((void *)v136 - 2) = v139;
                            v136 -= 64;
                            v125 -= 4;
                          }
                          while (v125 != v126);
                          double v125 = v198[3];
                        }
                        long double v123 = v132 + 64;
                        v198[3] = v136;
                        v198[4] = v132 + 64;
                        v198[5] = &v131[64 * v130];
                        if (v125) {
                          operator delete(v125);
                        }
                      }
                      v198[4] = v123;
                    }
                  }
                  *(void *)&v119 += 64;
                }
                while (*(void *)&v119 != *(void *)&v118);
                double v119 = v185;
                if (v185 == 0.0)
                {
LABEL_184:
                  v117 += 64;
                  if (v117 == v153) {
                    goto LABEL_211;
                  }
                  continue;
                }
              }
              break;
            }
            double v186 = v119;
            operator delete(*(void **)&v119);
            goto LABEL_184;
          }
LABEL_211:
          double v140 = v188[0];
          if (v188[0])
          {
            do
            {
              unint64_t v141 = (void *)*v140;
              operator delete(v140);
              double v140 = v141;
            }
            while (v141);
          }
          unint64_t v142 = v187[0];
          v187[0] = 0;
          if (v142) {
            operator delete(v142);
          }
LABEL_137:
          v159[0] = __p[0];
          LODWORD(v159[1]) = __p[1];
          long long v160 = v191;
          long long v161 = v192;
          *(_OWORD *)long long v162 = *(_OWORD *)v193;
          *(_DWORD *)&v162[15] = *(_DWORD *)&v193[15];
          if (v163[0])
          {
            v163[1] = v163[0];
            operator delete(v163[0]);
          }
          *(_OWORD *)long double v163 = v194;
          uint64_t v164 = v195;
          uint64_t v195 = 0;
          long long v194 = 0uLL;
          int v165 = v196;
          char v166 = v197;
          if ((void)v167)
          {
            *((void *)&v167 + 1) = v167;
            operator delete((void *)v167);
          }
          long long v167 = *(_OWORD *)v198;
          v168[0] = v198[2];
          memset(v198, 0, 24);
          double v86 = (void *)v168[1];
          if (v168[1])
          {
            v168[2] = v168[1];
            operator delete((void *)v168[1]);
            double v86 = v198[0];
          }
          *(_OWORD *)&v168[1] = *(_OWORD *)&v198[3];
          v168[3] = v198[5];
          memset(&v198[3], 0, 24);
          LODWORD(v168[4]) = v198[6];
          *(_DWORD *)((char *)&v168[4] + 3) = *(_DWORD *)((char *)&v198[6] + 3);
          if (v86)
          {
            v198[1] = v86;
            operator delete(v86);
          }
          if ((void)v194)
          {
            *((void *)&v194 + 1) = v194;
            operator delete((void *)v194);
          }
          long long v87 = *(_OWORD *)v159;
          *(_OWORD *)(a9 + 24) = v160;
          long long v88 = *(_OWORD *)v162;
          *(_OWORD *)(a9 + 40) = v161;
          *(_OWORD *)(a9 + 56) = v88;
          *(unsigned char *)a9 = 1;
          *(_DWORD *)(a9 + 71) = *(_DWORD *)&v162[15];
          uint64_t v89 = v168[0];
          *(void *)(a9 + 96) = v164;
          *(_OWORD *)(a9 + 8) = v87;
          *(_OWORD *)(a9 + 80) = *(_OWORD *)v163;
          v163[1] = 0;
          uint64_t v164 = 0;
          v163[0] = 0;
          int v90 = v165;
          *(unsigned char *)(a9 + 108) = v166;
          *(_DWORD *)(a9 + 104) = v90;
          *(_OWORD *)(a9 + 112) = v167;
          *(void *)(a9 + 128) = v89;
          long long v167 = 0uLL;
          v168[0] = 0;
          *(_OWORD *)(a9 + 136) = *(_OWORD *)&v168[1];
          *(void *)(a9 + 152) = v168[3];
          int v91 = v168[4];
          *(_DWORD *)(a9 + 163) = *(_DWORD *)((char *)&v168[4] + 3);
          *(_DWORD *)(a9 + 160) = v91;
          if (v169[0])
          {
            v169[1] = v169[0];
            operator delete(v169[0]);
          }
          int v92 = v170;
          int v93 = v148;
          if (v170)
          {
            unint64_t v171 = v170;
            goto LABEL_258;
          }
          goto LABEL_259;
        }
      }
    }
  }
  else if (v21 == (long long *)&off_2439090 && v32 == 21)
  {
    if (v181 > 5) {
      uint64_t v65 = 21;
    }
    else {
      uint64_t v65 = qword_20F2B60[v181];
    }
    *(unsigned char *)a9 = 0;
    *(void *)(a9 + 8) = v65;
    *(void *)(a9 + 16) = &off_2439090;
    return;
  }
  int v149 = v34;
  double v150 = v32;
  if (!*((unsigned char *)a1 + 113))
  {
LABEL_249:
    if (v180)
    {
      uint64_t v147 = 23;
      int v93 = v149;
    }
    else
    {
      int v93 = v149;
      if (v181 > 5) {
        uint64_t v147 = 22;
      }
      else {
        uint64_t v147 = qword_20F2BC0[v181];
      }
    }
    *(unsigned char *)a9 = 0;
    *(void *)(a9 + 8) = v147;
    *(void *)(a9 + 16) = &off_2439090;
    goto LABEL_259;
  }
  sub_DAA084((uint64_t)v159, (uint64_t *)v11);
  double v185 = *(double *)v159;
  LODWORD(v186) = v159[1];
  if (*(void *)(a2 + 120) == *(void *)(a2 + 128))
  {
    sub_10AA140((char **)__p, *(void *)(a2 + 104), (unsigned int *)&v185, *(_DWORD *)(a2 + 156), *(void *)(a2 + 176), v177, &v178);
    uint64_t v83 = (long long *)__p[0];
    int v72 = (long long *)__p[1];
    int v143 = 1;
    goto LABEL_241;
  }
  uint64_t v67 = a9;
  __p[1] = 0;
  __p[0] = 0;
  *(void *)&long long v191 = 0;
  if (*(_DWORD *)(a2 + 152))
  {
    unsigned int v68 = 0;
    double v69 = 0;
    while (1)
    {
      LODWORD(v66) = *(_DWORD *)(a2 + 156);
      double v70 = (double)*(unint64_t *)&v66;
      long double v71 = exp((double)v68);
      sub_10AA140((char **)v187, *(void *)(a2 + 104), (unsigned int *)&v185, (v71 * v70), *(void *)(a2 + 176), v177, &v178);
      if (v69) {
        operator delete(v69);
      }
      double v69 = (long long *)v187[0];
      int v72 = (long long *)v187[1];
      if (v187[0] == v187[1]) {
        break;
      }
      char v73 = 0;
      long double v74 = (long long *)v187[0];
      do
      {
        int v75 = sub_10B42C4(a2, (unsigned int *)v159, (uint64_t)v74);
        *((_DWORD *)v74 + 10) = v75;
        v73 |= v75 != 0;
        v74 += 3;
      }
      while (v74 != v72);
      if (!v73) {
        goto LABEL_236;
      }
      v187[0] = __p;
      long double v78 = v69;
      do
      {
        if (sub_10B424C(a2, (uint64_t)v78, v76.n128_f64[0], *(double *)&v77)) {
          sub_5E15F4((char ***)v187, v78);
        }
        v78 += 3;
      }
      while (v78 != v72);
      long double v79 = v69;
      while (!sub_10B424C(a2, (uint64_t)v79, v76.n128_f64[0], *(double *)&v77))
      {
        v79 += 3;
        if (v79 == v72) {
          goto LABEL_125;
        }
      }
      if (v79 != v72)
      {
        for (double j = v79 + 3; j != v72; j += 3)
        {
          if (!sub_10B424C(a2, (uint64_t)j, v76.n128_f64[0], *(double *)&v77))
          {
            __n128 v76 = (__n128)*j;
            long long v77 = j[1];
            *(long long *)((char *)v79 + 28) = *(long long *)((char *)j + 28);
            long long *v79 = (__int128)v76;
            v79[1] = v77;
            v79 += 3;
          }
        }
      }
      if (v79 != v72) {
        int v72 = v79;
      }
LABEL_125:
      unint64_t v81 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v72 - v69));
      uint64_t v82 = v72 == v69 ? 0 : v81;
      double v66 = sub_10AB34C((unint64_t)v69, v72, v82, 1, v76);
      if (v72 != v69) {
        goto LABEL_236;
      }
      if (++v68 >= *(_DWORD *)(a2 + 152))
      {
        uint64_t v83 = (long long *)__p[0];
        uint64_t v84 = v69;
        goto LABEL_219;
      }
    }
    int v72 = (long long *)v187[0];
LABEL_236:
    uint64_t v84 = 0;
    int v143 = 1;
    uint64_t v83 = (long long *)__p[0];
LABEL_237:
    if (!v83) {
      goto LABEL_239;
    }
    goto LABEL_238;
  }
  uint64_t v83 = 0;
  uint64_t v84 = 0;
LABEL_219:
  int v143 = 0;
  int v72 = (long long *)&off_2439090;
  double v69 = (_OWORD *)(&dword_14 + 1);
  if (!*(unsigned char *)(a2 + 145) || (a6 & 1) != 0) {
    goto LABEL_237;
  }
  if (v83 == __p[1])
  {
    int v143 = 0;
    double v69 = (_OWORD *)(&dword_14 + 1);
    if (!v83)
    {
LABEL_239:
      uint64_t v83 = v69;
      a9 = v67;
      if (!v84) {
        goto LABEL_241;
      }
      goto LABEL_240;
    }
LABEL_238:
    __p[1] = v83;
    operator delete(v83);
    goto LABEL_239;
  }
  unint64_t v144 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)v83) >> 4);
  LODWORD(v145) = *(_DWORD *)(a2 + 156);
  if (v145 >= v144) {
    unint64_t v145 = v144;
  }
  else {
    unint64_t v145 = v145;
  }
  if (v145 > v144)
  {
    sub_10A9F70(__p, v145 - v144);
    a9 = v67;
    int v143 = 1;
    uint64_t v83 = (long long *)__p[0];
    int v72 = (long long *)__p[1];
    if (!v84) {
      goto LABEL_241;
    }
LABEL_240:
    operator delete(v84);
    goto LABEL_241;
  }
  if (v145 >= v144) {
    int v72 = (long long *)__p[1];
  }
  else {
    int v72 = &v83[3 * v145];
  }
  int v143 = 1;
  a9 = v67;
  if (v84) {
    goto LABEL_240;
  }
LABEL_241:
  if (v163[0])
  {
    v163[1] = v163[0];
    operator delete(v163[0]);
  }
  if (!v143) {
    goto LABEL_249;
  }
  if (v83 == v72)
  {
    if (v83) {
      operator delete(v83);
    }
    goto LABEL_249;
  }
  if (v181 > 5) {
    uint64_t v146 = 20;
  }
  else {
    uint64_t v146 = qword_20F2B90[v181];
  }
  int v93 = v149;
  *(unsigned char *)a9 = 0;
  *(void *)(a9 + 8) = v146;
  *(void *)(a9 + 16) = &off_2439090;
  if (v83)
  {
    int v92 = (uint64_t *)v83;
LABEL_258:
    operator delete(v92);
  }
LABEL_259:
  if (v93)
  {
    if (v150) {
      operator delete(v150);
    }
  }
}

void sub_10A6528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
  int v34 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v34;
    operator delete(v34);
    if (!v32)
    {
LABEL_3:
      unint64_t v35 = __p;
      if (!__p) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v32)
  {
    goto LABEL_3;
  }
  operator delete(v32);
  unint64_t v35 = __p;
  if (!__p)
  {
LABEL_5:
    if (a13)
    {
      if (a14) {
        operator delete(a14);
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v35);
  goto LABEL_5;
}

void *sub_10A6764(void *a1)
{
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_10A67A8(uint64_t a1, unint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      uint64_t v5 = a1 + 144;
      if (*(unsigned char *)(a1 + 144)) {
        goto LABEL_9;
      }
      goto LABEL_12;
    case 2:
    case 3:
    case 4:
      uint64_t v5 = a1 + 154;
      if (!*(unsigned char *)(a1 + 154)) {
        goto LABEL_12;
      }
      goto LABEL_9;
    case 5:
      uint64_t v5 = a1 + 159;
      if (*(unsigned char *)(a1 + 159)) {
        goto LABEL_9;
      }
      goto LABEL_12;
    default:
      uint64_t v5 = a1 + 149;
      if (!*(unsigned char *)(a1 + 149)) {
        goto LABEL_12;
      }
LABEL_9:
      BOOL v6 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
      uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
      if (*v7 >= 0x47u)
      {
        uint64_t v8 = v7[35];
        if (v8)
        {
          if ((*((unsigned char *)v6 + v8) & 3) != 0) {
            return 1;
          }
        }
      }
LABEL_12:
      if (*(unsigned char *)(v5 + 1))
      {
        uint64_t v9 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
        uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 >= 0xBu)
        {
          uint64_t v11 = v10[5];
          if (v11)
          {
            if ((*((unsigned char *)v9 + v11) & 3) != 0) {
              return 1;
            }
          }
        }
      }
      if (!*(unsigned char *)(v5 + 3)) {
        return 0;
      }
      BOOL v12 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2);
      BOOL v13 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v13 < 0x39u) {
        return 0;
      }
      uint64_t v14 = v13[28];
      if (!v14) {
        return 0;
      }
      unsigned int v15 = *(int *)((char *)v12 + v14);
      if ((v15 & 3) != 0 || (v15 & 7) == 4) {
        return 1;
      }
      else {
        return (v15 >> 5) & 1;
      }
  }
}

uint64_t sub_10A6938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, float64x2_t a10@<Q2>, double a11@<D3>)
{
  if (*(unsigned char *)(a1 + 112))
  {
    __int16 v18 = 1;
    double v19 = (void *)(*a5
                   + 12
                   * sub_450B4C(a5, 0, 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 2) - 1, (_DWORD *)a2, 0, 0x7FFFFFFFFFFFFFFFLL, 1, a8, a9, a10.f64[0], a11));
    uint64_t v20 = *(void *)((char *)v19 + 12);
    v21.i64[0] = v20;
    v21.i64[1] = HIDWORD(v20);
    float64x2_t v22 = vcvtq_f64_u64(v21);
    v21.i64[0] = *v19;
    v21.i64[1] = HIDWORD(*v19);
    float64x2_t v23 = vcvtq_f64_u64(v21);
    v21.i64[0] = *(void *)a2;
    v21.i64[1] = HIDWORD(*(void *)a2);
    int8x16_t v24 = (int8x16_t)vsubq_f64(vcvtq_f64_u64(v21), v22);
    a10 = (float64x2_t)vextq_s8(v24, v24, 8uLL);
    int64x2_t v25 = (int64x2_t)vmulq_f64(vsubq_f64(v23, v22), a10);
    double v26 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v25, 1), (float64x2_t)v25).f64[0];
    if (v26 == 0.0) {
      __int16 v27 = 2;
    }
    else {
      __int16 v27 = 1;
    }
    if (v26 >= 0.0) {
      __int16 v28 = v27;
    }
    else {
      __int16 v28 = 0;
    }
    unsigned int v29 = *(unsigned __int16 *)(a2 + 50);
    if (v29 >> 5 <= 0x464) {
      goto LABEL_9;
    }
LABEL_11:
    __int16 v33 = 0;
    __int16 v32 = 0;
    goto LABEL_12;
  }
  __int16 v28 = 0;
  __int16 v18 = 0;
  unsigned int v29 = *(unsigned __int16 *)(a2 + 50);
  if (v29 >> 5 > 0x464) {
    goto LABEL_11;
  }
LABEL_9:
  sub_109B93C(a5, (_DWORD *)a2, (double)v29 / 100.0, 100.0, a10.f64[0], a11);
  LOWORD(v31) = *(_WORD *)(a1 + 96);
  __int16 v32 = fabs(v30) > (double)v31;
  __int16 v33 = 1;
LABEL_12:
  __int16 v36 = v32 | (v33 << 8);
  __int16 v35 = v28 | (v18 << 8);
  return sub_10A72E0(a7, a3, a4, a6, &v36, &v35);
}

float sub_10A6AC8@<S0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = (char *)v11 - (char *)*a2;
  if (v11 == *a2)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    if (v12 < 0) {
      sub_2E00();
    }
    uint64_t v13 = v12 >> 6;
    uint64_t v14 = (char *)operator new(72 * (v12 >> 6));
    uint64_t v15 = (uint64_t)v14;
    *(void *)a5 = v14;
    *(void *)(a5 + 8) = v14;
    *(void *)(a5 + 16) = &v14[72 * v13];
    if (v11 != v10)
    {
      do
      {
        float v19 = 0.0;
        float v19 = sub_10B0BC8(*(uint64_t **)(a1 + 32), v10, a3, a4, *(unsigned __int8 *)(a1 + 17));
        sub_10ACAD0((char **)a5, (long long *)v10, &v19);
        v10 += 8;
      }
      while (v10 != v11);
      uint64_t v14 = *(char **)a5;
      uint64_t v15 = *(void *)(a5 + 8);
    }
  }
  unint64_t v16 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v15 - (uint64_t)v14) >> 3));
  if ((char *)v15 == v14) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  return sub_10ACCB0((uint64_t)v14, v15, v17, 1, a6);
}

void sub_10A6BF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10A6C14(double *a1, uint64_t a2, void *a3, _DWORD *a4, int a5)
{
  uint64_t v5 = a4;
  BOOL v6 = a3;
  uint64_t v7 = *a3;
  float v8 = *(float *)(*a3 + 64);
  if (a1[11] <= v8)
  {
    uint64_t v11 = 8;
    if (a5) {
      uint64_t v11 = 7;
    }
    unint64_t v10 = *(void *)&a1[v11];
    uint64_t v9 = a3[1];
    unint64_t v49 = 0x8E38E38E38E38E39 * ((v9 - v7) >> 3);
    if (v49 < v10) {
      unint64_t v10 = 0x8E38E38E38E38E39 * ((v9 - v7) >> 3);
    }
  }
  else
  {
    uint64_t v9 = a3[1];
    unint64_t v49 = 0x8E38E38E38E38E39 * ((v9 - v7) >> 3);
    unint64_t v10 = 1;
  }
  unint64_t v50 = v10;
  long long __p = 0;
  if (v8 < 1.0) {
    float v8 = 1.0;
  }
  double v12 = v8;
  double v13 = a1[9] * v12;
  double v14 = a1[10] + v12;
  if (v13 >= v14) {
    double v15 = v13;
  }
  else {
    double v15 = v14;
  }
  if (v9 != v7)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v47 = 0;
    unsigned int v48 = (void **)(a2 + 128);
    double v46 = (void **)(a2 + 104);
    while (1)
    {
      uint64_t v19 = *v6 + 72 * v18;
      if (v18 < v50 && v15 >= *(float *)(*v6 + 72 * v18 + 64)) {
        break;
      }
      sub_4486B0(v48, (long long *)(*v6 + 72 * v18));
LABEL_15:
      if (++v18 == v49)
      {
        if (__p)
        {
          operator delete(__p);
        }
        return;
      }
    }
    int v20 = *(_DWORD *)(v19 + 8);
    unsigned int v21 = v20 - *v5;
    if (v20 == *v5)
    {
      unsigned int v22 = v5[1];
      unsigned int v23 = *(_DWORD *)(v19 + 12);
      double i = 0.0;
      if (v22 == v23) {
        goto LABEL_29;
      }
    }
    else
    {
      unsigned int v23 = *(_DWORD *)(v19 + 12);
      unsigned int v22 = v5[1];
    }
    double v25 = -(double)-v21;
    if (v21 < -v21) {
      double v25 = (double)v21;
    }
    for (double i = (atan2((double)v23 - (double)v22, v25) + 1.57079633) * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
      ;
    while (i < -180.0)
      double i = i + 360.0;
LABEL_29:
    if (v17 != v16)
    {
      double v26 = v17;
      while (vabdd_f64(i, *v26) >= a1[13])
      {
        if (++v26 == v16) {
          goto LABEL_33;
        }
      }
      sub_4486B0(v48, (long long *)v19);
      goto LABEL_15;
    }
LABEL_33:
    sub_4486B0(v46, (long long *)v19);
    if (v16 < v47)
    {
      *unint64_t v16 = i;
      uint64_t v27 = (uint64_t)(v16 + 1);
LABEL_53:
      unint64_t v16 = (double *)v27;
      goto LABEL_15;
    }
    uint64_t v28 = v16 - v17;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61) {
      sub_2E00();
    }
    if (((char *)v47 - (char *)v17) >> 2 > v29) {
      unint64_t v29 = ((char *)v47 - (char *)v17) >> 2;
    }
    if ((unint64_t)((char *)v47 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    if (v30)
    {
      if (v30 >> 61) {
        sub_188D718();
      }
      unint64_t v31 = v30;
      __int16 v32 = operator new(8 * v30);
      unint64_t v30 = v31;
      __int16 v33 = (double *)&v32[8 * v28];
      double *v33 = i;
      uint64_t v27 = (uint64_t)(v33 + 1);
      if (v17 == v16) {
        goto LABEL_50;
      }
    }
    else
    {
      __int16 v32 = 0;
      __int16 v33 = (double *)(8 * v28);
      *(double *)(8 * v28) = i;
      uint64_t v27 = 8 * v28 + 8;
      if (v17 == v16) {
        goto LABEL_50;
      }
    }
    unint64_t v34 = (char *)(v16 - 1) - (char *)v17;
    if (v34 >= 0x168)
    {
      if (&v32[(char *)v16 - (char *)v17 - 8 - (v34 & 0xFFFFFFFFFFFFFFF8)] > &v32[(char *)v16 - (char *)v17 - 8])
      {
        __int16 v35 = v16;
      }
      else if ((double *)((char *)v16 - (v34 & 0xFFFFFFFFFFFFFFF8) - 8) > v16 - 1)
      {
        __int16 v35 = v16;
      }
      else if ((unint64_t)((char *)v17 - v32) >= 0x20)
      {
        uint64_t v37 = (v34 >> 3) + 1;
        uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        __int16 v35 = &v16[v38 / 0xFFFFFFFFFFFFFFF8];
        __int16 v33 = (double *)((char *)v33 - v38);
        int64_t v39 = &v32[8 * v28 - 16];
        double v40 = v16 - 2;
        uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *(_OWORD *)v40;
          *(v39 - 1) = *((_OWORD *)v40 - 1);
          *int64_t v39 = v42;
          v39 -= 2;
          v40 -= 4;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_50;
        }
      }
      else
      {
        __int16 v35 = v16;
      }
    }
    else
    {
      __int16 v35 = v16;
    }
    do
    {
      uint64_t v36 = *((void *)v35-- - 1);
      *((void *)v33-- - 1) = v36;
    }
    while (v35 != v17);
LABEL_50:
    long long __p = v33;
    uint64_t v47 = (double *)&v32[8 * v30];
    if (v17) {
      operator delete(v17);
    }
    uint64_t v17 = v33;
    BOOL v6 = a3;
    uint64_t v5 = a4;
    goto LABEL_53;
  }
}

void sub_10A7098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10A70BC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void **sub_10A714C(void **a1)
{
  uint64_t v2 = (char *)a1[12];
  if (v2)
  {
    uint64_t v3 = (char *)a1[13];
    BOOL v4 = a1[12];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 104;
      }
      while (v3 != v2);
      BOOL v4 = a1[12];
    }
    a1[13] = v2;
    operator delete(v4);
  }
  BOOL v6 = (char *)a1[9];
  if (v6)
  {
    uint64_t v7 = (char *)a1[10];
    float v8 = a1[9];
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v7 - 4);
        if (v9)
        {
          *((void *)v7 - 3) = v9;
          operator delete(v9);
        }
        v7 -= 104;
      }
      while (v7 != v6);
      float v8 = a1[9];
    }
    a1[10] = v6;
    operator delete(v8);
  }
  unint64_t v10 = (char *)a1[6];
  if (v10)
  {
    uint64_t v11 = (char *)a1[7];
    double v12 = a1[6];
    if (v11 != v10)
    {
      do
      {
        double v13 = (void *)*((void *)v11 - 4);
        if (v13)
        {
          *((void *)v11 - 3) = v13;
          operator delete(v13);
        }
        v11 -= 104;
      }
      while (v11 != v10);
      double v12 = a1[6];
    }
    a1[7] = v10;
    operator delete(v12);
  }
  double v14 = (char *)a1[3];
  if (v14)
  {
    double v15 = (char *)a1[4];
    unint64_t v16 = a1[3];
    if (v15 != v14)
    {
      do
      {
        uint64_t v17 = (void *)*((void *)v15 - 4);
        if (v17)
        {
          *((void *)v15 - 3) = v17;
          operator delete(v17);
        }
        v15 -= 104;
      }
      while (v15 != v14);
      unint64_t v16 = a1[3];
    }
    a1[4] = v14;
    operator delete(v16);
  }
  unint64_t v18 = (char *)*a1;
  if (*a1)
  {
    uint64_t v19 = (char *)a1[1];
    int v20 = *a1;
    if (v19 != v18)
    {
      do
      {
        unsigned int v21 = (void *)*((void *)v19 - 4);
        if (v21)
        {
          *((void *)v19 - 3) = v21;
          operator delete(v21);
        }
        v19 -= 104;
      }
      while (v19 != v18);
      int v20 = *a1;
    }
    a1[1] = v18;
    operator delete(v20);
  }
  return a1;
}

uint64_t sub_10A72E0(uint64_t result, uint64_t a2, uint64_t a3, char a4, _WORD *a5, _WORD *a6)
{
  *(void *)uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = *(void *)(a2 + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 24);
  *(void *)(result + 8) = v6;
  *(void *)(result + 24) = a3;
  *(void *)(result + 32) = *(void *)(a2 + 8);
  *(_WORD *)(result + 40) = *a5;
  *(_WORD *)(result + 42) = *a6;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = a4;
  double v7 = *(double *)a2 * 100.0;
  if (v7 >= 0.0)
  {
    double v8 = *(double *)a2 * 100.0;
    if (v7 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v9 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    double v8 = *(double *)a2 * 100.0;
    if (v7 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v9 = (uint64_t)(v7 + v7);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_9:
  if (v8 >= 9.22337204e18)
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_20;
  }
  if (v7 >= 0.0)
  {
    if (v7 < 4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v7 + v7) + 1;
LABEL_18:
      double v7 = (double)(v10 >> 1);
    }
  }
  else if (v7 > -4.50359963e15)
  {
    uint64_t v10 = (uint64_t)(v7 + v7);
    if (v10 >= 1) {
      --v10;
    }
    goto LABEL_18;
  }
  uint64_t v11 = (uint64_t)v7;
LABEL_20:
  *(void *)uint64_t result = v11;
  LODWORD(v7) = *(_DWORD *)(a2 + 40);
  double v12 = (double)*(unint64_t *)&v7 * 100.0;
  if (v12 >= 0.0)
  {
    double v13 = v12;
    if (v12 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v14 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    double v13 = v12;
    if (v12 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v14 = (uint64_t)(v12 + v12);
    if (v14 >= 1) {
      --v14;
    }
  }
  double v13 = (double)(v14 >> 1);
LABEL_28:
  if (v13 >= 9.22337204e18)
  {
    *(void *)(result + 48) = 0x7FFFFFFFFFFFFFFELL;
    return result;
  }
  if (v12 >= 0.0)
  {
    if (v12 < 4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v12 + v12) + 1;
LABEL_37:
      double v12 = (double)(v15 >> 1);
    }
  }
  else if (v12 > -4.50359963e15)
  {
    uint64_t v15 = (uint64_t)(v12 + v12);
    if (v15 >= 1) {
      --v15;
    }
    goto LABEL_37;
  }
  *(void *)(result + 48) = (uint64_t)v12;
  return result;
}

void sub_10A74D8(char **a1, uint64_t a2, unsigned int *a3, unsigned int a4, uint64_t a5, uint64_t a6, void ***a7)
{
  BOOL v8 = *a3 == -1 && a3[1] == -1;
  if (v8
    || (unint64_t v177 = (uint64_t *)(a2 + 3880), (sub_73930((void ***)(a2 + 3880), a3) & 1) == 0)
    || !a4
    || (*a3 & a3[1]) == 0xFFFFFFFF)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v15 = 1.79769313e308;
  }
  else
  {
    if (a5 < 0) {
      __int16 v16 = -50;
    }
    else {
      __int16 v16 = 50;
    }
    double v15 = (double)(a5 / 100
                 + (int)(((5243 * (__int16)(v16 + a5 % 100)) >> 19)
                       + ((5243 * (__int16)(v16 + a5 % 100)) >> 31)));
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_40889C((uint64_t)&__p, a4);
  char v188 = 0;
  uint64_t v186 = 0x3E4CCCCD3F000000;
  int v189 = 0;
  int v190 = 0;
  uint64_t v191 = 0;
  uint64_t v192 = 0;
  uint64_t v193 = 32;
  long long v185 = xmmword_20B98A0;
  __int16 v187 = 256;
  int v194 = 1;
  int v182 = a1;
  uint64_t v195 = malloc_type_malloc(0x80uLL, 0x100004052888210uLL);
  int32x4_t v17 = vdupq_n_s32(1u);
  unint64_t v18 = (int32x4_t *)((char *)v195 + 16);
  uint64_t v19 = 32;
  do
  {
    v18[-1] = v17;
    *unint64_t v18 = v17;
    v18 += 2;
    v19 -= 8;
  }
  while (v19);
  sub_518C8(*a3 >> 17, a3[1] >> 17);
  int v21 = v20 | 0x40000000;
  int v184 = v20 | 0x40000000;
  unsigned int v22 = (char *)operator new(0x40uLL);
  uint64_t v173 = a6;
  uint64_t v174 = a2;
  int v181 = a3;
  unint64_t v172 = a7;
  *(void *)unsigned int v22 = 0;
  *((_DWORD *)v22 + 14) = 0;
  *((_DWORD *)v22 + 2) = v21;
  sub_408B84((uint64_t)&v185, 1);
  sub_408E60((uint64_t)&v185, (unsigned int *)&v184, (uint64_t)v200);
  int8x16_t v24 = v22 + 64;
  uint64_t v176 = (unsigned char *)(a2 + 7774);
  uint64_t v175 = a2 + 3896;
  unint64_t v178 = a4;
  unint64_t v179 = v22 + 64;
  while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4) < v178)
  {
    double v25 = *(double *)v22;
    double v26 = (long long *)(v22 + 8);
    int v27 = *((_DWORD *)v22 + 14);
    int v201 = v27;
    if (v27 == 1)
    {
      long long v29 = *v26;
      long long v30 = *(_OWORD *)(v22 + 40);
      unint64_t v23 = (unint64_t)v199;
      v200[1] = *(_OWORD *)(v22 + 24);
      v200[2] = v30;
      v200[0] = v29;
      uint64_t v28 = v24 - v22;
      if (v24 - v22 < 65) {
        goto LABEL_80;
      }
    }
    else
    {
      if (!v27)
      {
        LODWORD(v23) = *(_DWORD *)v26;
        LODWORD(v200[0]) = *(_DWORD *)v26;
      }
      uint64_t v28 = v24 - v22;
      if (v24 - v22 < 65) {
        goto LABEL_80;
      }
    }
    double v31 = *(double *)v22;
    if (v27 == 1)
    {
      LODWORD(v23) = *((_DWORD *)v22 + 2);
      long long v32 = *(_OWORD *)(v22 + 12);
      long long v33 = *(_OWORD *)(v22 + 28);
      *(_OWORD *)&v199[28] = *(_OWORD *)(v22 + 40);
      *(_OWORD *)uint64_t v199 = v32;
      *(_OWORD *)&v199[16] = v33;
    }
    else if (!v27)
    {
      LODWORD(v23) = *(_DWORD *)v26;
    }
    uint64_t v34 = 0;
    uint64_t v35 = v28 >> 6;
    int64_t v36 = (unint64_t)((v28 >> 6) - 2) >> 1;
    uint64_t v37 = v22;
    do
    {
      double v40 = v37;
      v37 += 64 * v34 + 64;
      uint64_t v41 = 2 * v34;
      uint64_t v34 = (2 * v34) | 1;
      uint64_t v42 = v41 + 2;
      if (v42 < v35 && *(double *)v37 > *((double *)v37 + 8))
      {
        v37 += 64;
        uint64_t v34 = v42;
      }
      long long v43 = (long long *)(v37 + 8);
      *(void *)double v40 = *(void *)v37;
      uint64_t v44 = v40 + 8;
      if (v40 != v37)
      {
        int v45 = *((_DWORD *)v40 + 14);
        int v46 = *((_DWORD *)v37 + 14);
        if (v45 == v46)
        {
          if (v45 == 1)
          {
            long long v47 = *v43;
            long long v48 = *(_OWORD *)(v37 + 24);
            *(_OWORD *)(v40 + 36) = *(_OWORD *)(v37 + 36);
            _OWORD *v44 = v47;
            *(_OWORD *)(v40 + 24) = v48;
          }
          else if (!v45)
          {
            *(_DWORD *)uint64_t v44 = *(_DWORD *)v43;
          }
        }
        else
        {
          if (v46 == 1)
          {
            long long v38 = *v43;
            long long v39 = *(_OWORD *)(v37 + 40);
            *(_OWORD *)(v40 + 24) = *(_OWORD *)(v37 + 24);
            *(_OWORD *)(v40 + 40) = v39;
            _OWORD *v44 = v38;
          }
          else if (!v46)
          {
            *(_DWORD *)uint64_t v44 = *(_DWORD *)v43;
          }
          *((_DWORD *)v40 + 14) = *((_DWORD *)v37 + 14);
        }
      }
    }
    while (v34 <= v36);
    if (v37 != v24 - 64)
    {
      *(void *)uint64_t v37 = *((void *)v24 - 8);
      unint64_t v49 = v24 - 56;
      int v50 = *((_DWORD *)v37 + 14);
      int v51 = *((_DWORD *)v24 - 2);
      if (v50 == v51)
      {
        if (v50 == 1)
        {
          long long v52 = *(_OWORD *)v49;
          long long v53 = *(_OWORD *)(v24 - 40);
          *(_OWORD *)(v37 + 36) = *(_OWORD *)(v24 - 28);
          long long *v43 = v52;
          *(_OWORD *)(v37 + 24) = v53;
        }
        else if (!v50)
        {
          *(_DWORD *)long long v43 = *(_DWORD *)v49;
          *((double *)v24 - 8) = v31;
          if (*((_DWORD *)v24 - 2) != v27) {
            goto LABEL_63;
          }
LABEL_71:
          if (v27 == 1)
          {
            *((_DWORD *)v24 - 14) = v23;
            long long v58 = *(_OWORD *)v199;
            long long v59 = *(_OWORD *)&v199[16];
            *(void *)(v24 - 20) = *(void *)&v199[32];
            *(_OWORD *)(v24 - 36) = v59;
            *(_OWORD *)(v24 - 52) = v58;
          }
          else if (!v27)
          {
            *(_DWORD *)unint64_t v49 = v23;
          }
LABEL_79:
          sub_4089D4((uint64_t)v22, (uint64_t)(v37 + 64), (v37 + 64 - v22) >> 6);
          goto LABEL_80;
        }
        *((double *)v24 - 8) = v31;
        if (*((_DWORD *)v24 - 2) != v27) {
          goto LABEL_63;
        }
        goto LABEL_71;
      }
      if (v51 == 1)
      {
        long long v54 = *(_OWORD *)v49;
        long long v55 = *(_OWORD *)(v24 - 24);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v24 - 40);
        *(_OWORD *)(v37 + 40) = v55;
        long long *v43 = v54;
        *((_DWORD *)v37 + 14) = *((_DWORD *)v24 - 2);
        *((double *)v24 - 8) = v31;
        if (*((_DWORD *)v24 - 2) == v27) {
          goto LABEL_71;
        }
      }
      else
      {
        if (!v51) {
          *(_DWORD *)long long v43 = *(_DWORD *)v49;
        }
        *((_DWORD *)v37 + 14) = *((_DWORD *)v24 - 2);
        *((double *)v24 - 8) = v31;
        if (*((_DWORD *)v24 - 2) == v27) {
          goto LABEL_71;
        }
      }
LABEL_63:
      if (v27 == 1)
      {
        *((_DWORD *)v24 - 14) = v23;
        long long v56 = *(_OWORD *)v199;
        long long v57 = *(_OWORD *)&v199[16];
        *(_OWORD *)(v24 - 24) = *(_OWORD *)&v199[28];
        *(_OWORD *)(v24 - 36) = v57;
        *(_OWORD *)(v24 - 52) = v56;
      }
      else if (!v27)
      {
        *(_DWORD *)unint64_t v49 = v23;
      }
      *((_DWORD *)v24 - 2) = v27;
      goto LABEL_79;
    }
    *(double *)uint64_t v37 = v31;
    if (*((_DWORD *)v37 + 14) == v27)
    {
      if (v27 == 1)
      {
        *((_DWORD *)v37 + 2) = v23;
        long long v74 = *(_OWORD *)v199;
        long long v75 = *(_OWORD *)&v199[16];
        *(void *)(v37 + 44) = *(void *)&v199[32];
        *(_OWORD *)(v37 + 28) = v75;
        *(_OWORD *)(v37 + 12) = v74;
      }
      else if (!v27)
      {
        *(_DWORD *)long long v43 = v23;
      }
    }
    else
    {
      if (v27 == 1)
      {
        *((_DWORD *)v37 + 2) = v23;
        long long v76 = *(_OWORD *)v199;
        long long v77 = *(_OWORD *)&v199[16];
        *(_OWORD *)(v37 + 40) = *(_OWORD *)&v199[28];
        *(_OWORD *)(v37 + 28) = v77;
        *(_OWORD *)(v37 + 12) = v76;
LABEL_101:
        *((_DWORD *)v37 + 14) = v27;
        goto LABEL_80;
      }
      if (v27) {
        goto LABEL_101;
      }
      *(_DWORD *)long long v43 = v23;
      *((_DWORD *)v37 + 14) = 0;
    }
LABEL_80:
    if (v25 > v15) {
      break;
    }
    LODWORD(v23) = v198;
    double v60 = v198 == (v197 - (unsigned char *)__p) >> 3 ? *(double *)__p : 1.79769313e308;
    if (v25 > v60) {
      break;
    }
    v24 -= 64;
    if (v201 != 1)
    {
      unsigned int v64 = v200[0];
      uint64_t v65 = (unsigned int *)sub_2AB884(*v177, 1, v200[0], 1);
      if (v66)
      {
        uint64_t v67 = (int *)((char *)v65 + *v65);
        unsigned int v68 = (unsigned __int16 *)((char *)v67 - *v67);
        if (*v68 >= 5u)
        {
          uint64_t v69 = v68[2];
          if (v69)
          {
            double v70 = (unsigned int *)((char *)v67 + v69 + *(unsigned int *)((char *)v67 + v69));
            uint64_t v71 = *v70;
            if (v71)
            {
              uint64_t v72 = 0;
              char v73 = v70 + 1;
              do
              {
                double v80 = (int *)((char *)&v73[v72] + v73[v72]);
                *(void *)&long long v202 = __PAIR64__(v64, v72);
                sub_408360(v80, v181, v67, (uint64_t)&v202, (uint64_t)v199);
                if (*(double *)v199 != 1.79769313e308)
                {
                  if (v198 == (v197 - (unsigned char *)__p) >> 3)
                  {
                    if (*(double *)v199 < *(double *)__p && *(double *)v199 < v15) {
                      goto LABEL_118;
                    }
                  }
                  else if (*(double *)v199 < 1.79769313e308 && *(double *)v199 < v15)
                  {
LABEL_118:
                    unint64_t v83 = *(void *)&v199[8];
                    if (!*v176
                      || (uint64_t v84 = sub_290DEC(v175, *(unsigned int *)&v199[8], 1)) != 0
                      && (uint64_t v85 = &v84[-*(int *)v84], *(unsigned __int16 *)v85 >= 5u)
                      && (uint64_t v86 = *((unsigned __int16 *)v85 + 2)) != 0
                      && *(_DWORD *)&v84[v86 + *(unsigned int *)&v84[v86]] > HIDWORD(v83)
                      && sub_295DB4(v174, v83))
                    {
                      if (sub_10A8628(v173, v83))
                      {
                        if (!*((unsigned char *)*v172 + 116)
                          || *(_DWORD *)&v199[16] == -1 && *(_DWORD *)&v199[20] == -1
                          || (sub_37D100(**v172, &v199[16]) & 1) != 0)
                        {
                          sub_295550(v174, v83, (unint64_t *)&v202);
                          long long v87 = (void *)*((void *)&v202 + 1);
                          long long v88 = (void *)v202;
                          if ((void)v202 != *((void *)&v202 + 1))
                          {
                            long long v88 = (void *)v202;
                            do
                            {
                              if (v64 == *v88 && v72 == HIDWORD(*v88)) {
                                goto LABEL_137;
                              }
                              ++v88;
                            }
                            while (v88 != *((void **)&v202 + 1));
                            long long v88 = (void *)*((void *)&v202 + 1);
                          }
LABEL_137:
                          if ((void)v202)
                          {
                            *((void *)&v202 + 1) = v202;
                            operator delete((void *)v202);
                          }
                          if (v88 != v87)
                          {
                            *(void *)&long long v202 = *(void *)v199;
                            sub_408754((uint64_t)&__p, (double *)&v202);
                            uint64_t v90 = *(void *)v199;
                            int v91 = *(_DWORD *)v199;
                            if (v24 < v179)
                            {
                              long long v202 = *(_OWORD *)&v199[4];
                              v203[0] = *(_OWORD *)&v199[20];
                              *(_OWORD *)((char *)v203 + 12) = *(_OWORD *)&v199[32];
                              *(void *)int8x16_t v24 = *(void *)v199;
                              *((_DWORD *)v24 + 14) = 1;
                              *((_DWORD *)v24 + 2) = v91;
                              long long v79 = v202;
                              long long v78 = v203[0];
                              *(_OWORD *)(v24 + 40) = *(_OWORD *)((char *)v203 + 12);
                              *(_OWORD *)(v24 + 12) = v79;
                              *(_OWORD *)(v24 + 28) = v78;
                              v24 += 64;
                            }
                            else
                            {
                              uint64_t v92 = (v24 - v22) >> 6;
                              unint64_t v93 = v92 + 1;
                              if ((unint64_t)(v92 + 1) >> 58) {
                                sub_2E00();
                              }
                              if ((v179 - v22) >> 5 > v93) {
                                unint64_t v93 = (v179 - v22) >> 5;
                              }
                              if ((unint64_t)(v179 - v22) >= 0x7FFFFFFFFFFFFFC0) {
                                unint64_t v94 = 0x3FFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v94 = v93;
                              }
                              if (v94)
                              {
                                int v180 = *(_DWORD *)v199;
                                if (v94 >> 58) {
                                  sub_188D718();
                                }
                                unint64_t v95 = v94;
                                double v96 = (char *)operator new(v94 << 6);
                                unint64_t v94 = v95;
                                int v91 = v180;
                              }
                              else
                              {
                                double v96 = 0;
                              }
                              long long v97 = &v96[64 * v92];
                              *(void *)long long v97 = v90;
                              *((_DWORD *)v97 + 14) = 1;
                              *((_DWORD *)v97 + 2) = v91;
                              long long v98 = *(_OWORD *)&v199[20];
                              *(_OWORD *)(v97 + 12) = *(_OWORD *)&v199[4];
                              *(_OWORD *)(v97 + 28) = v98;
                              *(_OWORD *)(v97 + 40) = *(_OWORD *)&v199[32];
                              if (v24 == v22)
                              {
                                int64_t v106 = &v96[64 * v92];
                              }
                              else
                              {
                                uint64_t v99 = 0;
                                do
                                {
                                  BOOL v102 = &v97[v99];
                                  *((void *)v102 - 8) = *(void *)&v24[v99 - 64];
                                  int v103 = &v97[v99 - 56];
                                  int64_t v104 = &v24[v99 - 56];
                                  int v105 = *(_DWORD *)&v24[v99 - 8];
                                  *((_DWORD *)v102 - 2) = v105;
                                  if (v105 == 1)
                                  {
                                    long long v100 = *(_OWORD *)v104;
                                    long long v101 = *(_OWORD *)&v24[v99 - 24];
                                    *(_OWORD *)&v97[v99 - 40] = *(_OWORD *)&v24[v99 - 40];
                                    *(_OWORD *)&v97[v99 - 24] = v101;
                                    *(_OWORD *)int v103 = v100;
                                  }
                                  else if (!v105)
                                  {
                                    *(_DWORD *)int v103 = *(_DWORD *)v104;
                                  }
                                  v99 -= 64;
                                }
                                while (&v24[v99] != v22);
                                int64_t v106 = &v97[v99];
                              }
                              unint64_t v179 = &v96[64 * v94];
                              int8x16_t v24 = v97 + 64;
                              if (v22) {
                                operator delete(v22);
                              }
                              unsigned int v22 = v106;
                            }
                            sub_4089D4((uint64_t)v22, (uint64_t)v24, (v24 - v22) >> 6);
                          }
                        }
                        else
                        {
                          *v172[1] = (void *)((char *)*v172[1] + 1);
                        }
                      }
                    }
                  }
                }
                ++v72;
              }
              while (v72 != v71);
            }
          }
        }
      }
      int v107 = -1;
      while (2)
      {
        int v108 = -1;
LABEL_169:
        unsigned int v109 = sub_511FC(v64);
        char v110 = v109 & 0xFE;
        unsigned int v111 = v64 & ~(-1 << (v109 & 0xFE));
        int v112 = sub_51938(v111);
        int v113 = sub_51938(v111 >> 1);
        int v114 = 1 << (v109 >> 1);
        unsigned int v115 = (int)(((((((v112 + v107) & ~((v112 + v107) >> 31)) - (v112 + v107) + ((v112 + v107) >> 31)) >> (v109 >> 1))
                     + ((v112 + v107) >> 31)) << (v109 >> 1))
                   + v112
                   + v107)
             % v114;
        unsigned int v116 = (int)(((((((v113 + v108) & ~((v113 + v108) >> 31)) - (v113 + v108) + ((v113 + v108) >> 31)) >> (v109 >> 1))
                     + ((v113 + v108) >> 31)) << (v109 >> 1))
                   + v113
                   + v108)
             % v114;
        int v117 = -1 << (v109 >> 1);
        if (~v117 < v115) {
          unsigned int v118 = ~v117;
        }
        else {
          unsigned int v118 = v115;
        }
        if (~v117 < v116) {
          unsigned int v119 = ~v117;
        }
        else {
          unsigned int v119 = v116;
        }
        sub_518C8(v118, v119);
        uint64_t v121 = v120 | (1 << v110);
        int v183 = v120 | (1 << v110);
        unint64_t v23 = v193 - 1;
        uint64_t v122 = (v193 - 1) & v121;
        int v123 = *((_DWORD *)v195 + v122);
        if (v194 != v123)
        {
          if (v191)
          {
            uint64_t v132 = 1;
            while (v190 == v123 || v121 != v123)
            {
              uint64_t v122 = (v122 + v132) & v23;
              int v123 = *((_DWORD *)v195 + v122);
              ++v132;
              if (v194 == v123) {
                goto LABEL_176;
              }
            }
          }
          else
          {
            uint64_t v148 = 1;
            while (v121 != v123)
            {
              uint64_t v122 = (v122 + v148) & v23;
              int v123 = *((_DWORD *)v195 + v122);
              ++v148;
              if (v194 == v123) {
                goto LABEL_176;
              }
            }
          }
          if (v122 != -1)
          {
            a1 = v182;
            goto LABEL_168;
          }
        }
LABEL_176:
        sub_408B84((uint64_t)&v185, 1);
        uint64_t v124 = v191;
        uint64_t v125 = v193 - 1;
        uint64_t v126 = (v193 - 1) & v183;
        int v127 = *((_DWORD *)v195 + v126);
        if (v194 == v127)
        {
          a1 = v182;
          goto LABEL_178;
        }
        a1 = v182;
        if (v191)
        {
          uint64_t v128 = -1;
          uint64_t v133 = 1;
          do
          {
            if (v190 == v127)
            {
              if (v128 == -1) {
                uint64_t v128 = v126;
              }
            }
            else if (v183 == v127)
            {
              goto LABEL_202;
            }
            uint64_t v126 = (v126 + v133) & v125;
            int v127 = *((_DWORD *)v195 + v126);
            ++v133;
          }
          while (v194 != v127);
          if (v128 == -1) {
LABEL_178:
          }
            uint64_t v128 = v126;
        }
        else
        {
          uint64_t v149 = 1;
          while (v183 != v127)
          {
            uint64_t v126 = (v126 + v149) & v125;
            int v127 = *((_DWORD *)v195 + v126);
            ++v149;
            if (v194 == v127)
            {
              uint64_t v124 = 0;
              goto LABEL_178;
            }
          }
LABEL_202:
          if (v126 != -1) {
            goto LABEL_185;
          }
          uint64_t v128 = -1;
        }
        if ((unint64_t)(v192 - v124) >= 0x3FFFFFFFFFFFFFFFLL)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "insert overflow");
        }
        if (v124 && v190 == *((_DWORD *)v195 + v128)) {
          uint64_t v191 = v124 - 1;
        }
        else {
          ++v192;
        }
        *((_DWORD *)v195 + v128) = v183;
LABEL_185:
        sub_383CC((unsigned int *)&v183, (uint64_t)&v202);
        double v130 = sub_35C04((unsigned int *)&v202, v181, 0, v129);
        int v131 = v197 - __p;
        LODWORD(v23) = v198;
        if (v198 == (v197 - (unsigned char *)__p) >> 3)
        {
          if (v130 >= *(double *)__p) {
            goto LABEL_168;
          }
        }
        else if (v130 >= 1.79769313e308)
        {
          goto LABEL_168;
        }
        if (v130 >= v15) {
          goto LABEL_168;
        }
        unsigned int v134 = v183;
        if (v24 < v179)
        {
          *(double *)int8x16_t v24 = v130;
          *((_DWORD *)v24 + 14) = 0;
          *((_DWORD *)v24 + 2) = v134;
          v24 += 64;
          unint64_t v135 = v24 - v22;
          if (v24 - v22 < 65) {
            goto LABEL_168;
          }
          goto LABEL_236;
        }
        uint64_t v136 = (v24 - v22) >> 6;
        unint64_t v137 = v136 + 1;
        if ((unint64_t)(v136 + 1) >> 58) {
          sub_2E00();
        }
        if ((v179 - v22) >> 5 > v137) {
          unint64_t v137 = (v179 - v22) >> 5;
        }
        if ((unint64_t)(v179 - v22) >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v138 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v138 = v137;
        }
        if (v138 >> 58) {
          sub_188D718();
        }
        uint64_t v139 = (char *)operator new(v138 << 6);
        double v140 = &v139[64 * v136];
        *(double *)double v140 = v130;
        *((_DWORD *)v140 + 14) = 0;
        *((_DWORD *)v140 + 2) = v134;
        if (v24 == v22)
        {
          double v150 = &v139[64 * v136];
          int v131 = v139 + (v138 << 6);
          unint64_t v179 = &v139[64 * v138];
          int8x16_t v24 = v140 + 64;
          if (v22) {
            goto LABEL_234;
          }
        }
        else
        {
          uint64_t v141 = 0;
          do
          {
            unint64_t v144 = &v140[v141];
            *((void *)v144 - 8) = *(void *)&v24[v141 - 64];
            unint64_t v145 = &v140[v141 - 56];
            uint64_t v146 = &v24[v141 - 56];
            int v147 = *(_DWORD *)&v24[v141 - 8];
            *((_DWORD *)v144 - 2) = v147;
            if (v147 == 1)
            {
              long long v142 = *(_OWORD *)v146;
              long long v143 = *(_OWORD *)&v24[v141 - 24];
              *(_OWORD *)&v140[v141 - 40] = *(_OWORD *)&v24[v141 - 40];
              *(_OWORD *)&v140[v141 - 24] = v143;
              *(_OWORD *)unint64_t v145 = v142;
            }
            else if (!v147)
            {
              *(_DWORD *)unint64_t v145 = *(_DWORD *)v146;
            }
            v141 -= 64;
            LODWORD(v23) = v24 + v141;
          }
          while (&v24[v141] != v22);
          double v150 = &v140[v141];
          int v131 = v139 + (v138 << 6);
          unint64_t v179 = &v139[64 * v138];
          int8x16_t v24 = v140 + 64;
          if (v22) {
LABEL_234:
          }
            operator delete(v22);
        }
        unsigned int v22 = v150;
        unint64_t v135 = v24 - v150;
        if (v24 - v150 < 65) {
          goto LABEL_168;
        }
LABEL_236:
        unint64_t v23 = ((v135 >> 6) - 2) >> 1;
        double v151 = (double *)&v22[64 * v23];
        uint64_t v152 = v24 - 64;
        double v153 = *((double *)v24 - 8);
        double v154 = *v151;
        if (*v151 <= v153) {
          goto LABEL_168;
        }
        int v155 = *((_DWORD *)v24 - 2);
        if (v155 == 1)
        {
          int v131 = *((_DWORD *)v24 - 14);
          long long v156 = *(_OWORD *)(v24 - 52);
          long long v157 = *(_OWORD *)(v24 - 36);
          *(_OWORD *)&v199[28] = *(_OWORD *)(v24 - 24);
          *(_OWORD *)uint64_t v199 = v156;
          *(_OWORD *)&v199[16] = v157;
        }
        else if (!v155)
        {
          int v131 = *((_DWORD *)v24 - 14);
        }
        do
        {
          double v158 = v151;
          *(double *)uint64_t v152 = v154;
          unint64_t v159 = v152 + 8;
          long long v160 = (long long *)(v158 + 1);
          if (v152 != (char *)v158)
          {
            int v161 = *((_DWORD *)v152 + 14);
            int v162 = *((_DWORD *)v158 + 14);
            if (v161 == v162)
            {
              if (v161 == 1)
              {
                long long v163 = *v160;
                long long v164 = *(_OWORD *)(v158 + 3);
                *(_OWORD *)(v152 + 36) = *(_OWORD *)((char *)v158 + 36);
                *unint64_t v159 = v163;
                *(_OWORD *)(v152 + 24) = v164;
              }
              else if (!v161)
              {
                *(_DWORD *)unint64_t v159 = *(_DWORD *)v160;
              }
            }
            else
            {
              if (v162 == 1)
              {
                long long v165 = *v160;
                long long v166 = *(_OWORD *)(v158 + 5);
                *(_OWORD *)(v152 + 24) = *(_OWORD *)(v158 + 3);
                *(_OWORD *)(v152 + 40) = v166;
                *unint64_t v159 = v165;
              }
              else if (!v162)
              {
                *(_DWORD *)unint64_t v159 = *(_DWORD *)v160;
              }
              *((_DWORD *)v152 + 14) = *((_DWORD *)v158 + 14);
            }
          }
          if (!v23) {
            break;
          }
          unint64_t v23 = (v23 - 1) >> 1;
          double v151 = (double *)&v22[64 * v23];
          double v154 = *v151;
          uint64_t v152 = (char *)v158;
        }
        while (*v151 > v153);
        *double v158 = v153;
        LODWORD(v23) = *((_DWORD *)v158 + 14);
        if (v23 == v155)
        {
          if (v155 == 1)
          {
            *((_DWORD *)v158 + 2) = v131;
            long long v167 = *(_OWORD *)v199;
            long long v168 = *(_OWORD *)&v199[16];
            *(double *)((char *)v158 + 44) = *(double *)&v199[32];
            *(_OWORD *)((char *)v158 + 28) = v168;
            *(_OWORD *)((char *)v158 + 12) = v167;
          }
          else if (!v155)
          {
            *(_DWORD *)long long v160 = v131;
          }
        }
        else
        {
          if (v155 == 1)
          {
            *((_DWORD *)v158 + 2) = v131;
            long long v169 = *(_OWORD *)v199;
            long long v170 = *(_OWORD *)&v199[16];
            *(_OWORD *)(v158 + 5) = *(_OWORD *)&v199[28];
            *(_OWORD *)((char *)v158 + 28) = v170;
            *(_OWORD *)((char *)v158 + 12) = v169;
          }
          else if (!v155)
          {
            *(_DWORD *)long long v160 = v131;
            *((_DWORD *)v158 + 14) = 0;
            goto LABEL_168;
          }
          *((_DWORD *)v158 + 14) = v155;
        }
LABEL_168:
        if (++v108 == 2)
        {
          if (++v107 == 2) {
            goto LABEL_21;
          }
          continue;
        }
        goto LABEL_169;
      }
    }
    double v61 = *a1;
    uint64_t v62 = a1[1];
    if (*a1 != v62)
    {
      LODWORD(v23) = DWORD2(v200[0]);
      while (*((_DWORD *)v61 + 2) != DWORD2(v200[0]) || *((_DWORD *)v61 + 3) != HIDWORD(v200[0]))
      {
        v61 += 48;
        if (v61 == v62)
        {
          double v61 = a1[1];
          break;
        }
      }
    }
    if (v61 == v62) {
      sub_408220(a1, v200);
    }
LABEL_21:
    if (v22 == v24) {
      goto LABEL_267;
    }
  }
  int8x16_t v24 = v22;
LABEL_267:
  if (v195) {
    free(v195);
  }
  if (v24) {
    operator delete(v24);
  }
  if (__p)
  {
    char v197 = __p;
    operator delete(__p);
  }
}

void sub_10A855C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (a32)
  {
    free(a32);
    if (!v35)
    {
LABEL_3:
      uint64_t v37 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
    goto LABEL_3;
  }
  operator delete(v35);
  uint64_t v37 = __p;
  if (!__p)
  {
LABEL_4:
    long long v38 = *(void **)a21;
    if (!*(void *)a21) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v37);
  long long v38 = *(void **)a21;
  if (!*(void *)a21) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  *(void *)(a21 + 8) = v38;
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10A8628(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v26 = a2;
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v4[3])
  {
    uint64_t result = (uint64_t)sub_36F918(v4, &v26);
    if (!result) {
      return result;
    }
    unint64_t v2 = v26;
  }
  uint64_t v8 = *(void *)(v5 + 8);
  if (!*(unsigned char *)(v8 + 7774)) {
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)sub_290DEC(v8 + 3896, v2, 1);
  if (!result) {
    return result;
  }
  uint64_t v9 = (unsigned __int16 *)(result - *(int *)result);
  if (*v9 < 5u) {
    return 0;
  }
  uint64_t v10 = v9[2];
  if (!v10 || *(_DWORD *)(result + v10 + *(unsigned int *)(result + v10)) <= HIDWORD(v2)) {
    return 0;
  }
  uint64_t result = sub_295DB4(v8, v2);
  if (result)
  {
    unint64_t v2 = v26;
LABEL_11:
    uint64_t result = sub_10A67A8(v5, v2, **(_DWORD **)(a1 + 16));
    if (result)
    {
      uint64_t v11 = *(uint64_t **)(a1 + 24);
      uint64_t v12 = *v11;
      switch(*(_DWORD *)v11[1])
      {
        case 0:
          if (*(_DWORD *)v11[2] == 1 || *(unsigned char *)(v12 + 146) == 0) {
            goto LABEL_35;
          }
          goto LABEL_38;
        case 2:
        case 3:
        case 4:
          if (*(_DWORD *)v11[2] != 1 && *(unsigned char *)(v12 + 156) != 0) {
            goto LABEL_38;
          }
          goto LABEL_35;
        case 5:
          if (*(_DWORD *)v11[2] != 1 && *(unsigned char *)(v12 + 161) != 0) {
            goto LABEL_38;
          }
          goto LABEL_35;
        default:
          if (*(_DWORD *)v11[2] != 1 && *(unsigned char *)(v12 + 151) != 0) {
            goto LABEL_38;
          }
LABEL_35:
          int32x4_t v17 = (int *)sub_2D5D58(*(void *)(v12 + 8), v26);
          unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
          if (*v18 >= 0xBu)
          {
            uint64_t v19 = v18[5];
            if (v19)
            {
              if ((*((unsigned char *)v17 + v19) & 8) != 0) {
                return 0;
              }
            }
          }
LABEL_38:
          int v20 = *(uint64_t **)(a1 + 32);
          uint64_t v21 = *v20;
          switch(*(_DWORD *)v20[1])
          {
            case 0:
              uint64_t v22 = v21 + 144;
              break;
            case 2:
            case 3:
            case 4:
              uint64_t v22 = v21 + 154;
              break;
            case 5:
              uint64_t v22 = v21 + 159;
              break;
            default:
              uint64_t v22 = v21 + 149;
              break;
          }
          uint64_t result = *(unsigned char *)(v22 + 4)
                || (unint64_t v23 = (int *)sub_2D5D58(*(void *)(v21 + 8), v26),
                    int8x16_t v24 = (unsigned __int16 *)((char *)v23 - *v23),
                    *v24 < 0x75u)
                || (uint64_t v25 = v24[58]) == 0
                || (*((unsigned char *)v23 + v25) & 0x10) == 0;
          break;
      }
    }
  }
  return result;
}

double sub_10A88E4(unint64_t a1, long long *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    uint64_t v11 = (double *)(a2 - 3);
    uint64_t v12 = (double *)(a2 - 6);
    double v13 = (double *)(a2 - 9);
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 4);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return a5.n128_f64[0];
              case 2:
                double v117 = *((double *)a2 - 6);
                unsigned int v116 = a2 - 3;
                a5.n128_f64[0] = v117;
                if (v117 <= *(double *)v14) {
                  return a5.n128_f64[0];
                }
                goto LABEL_101;
              case 3:
                unsigned int v118 = (__n128 *)(v14 + 48);
                a5.n128_u64[0] = *(void *)(v14 + 48);
                double v119 = *((double *)a2 - 6);
                unsigned int v116 = a2 - 3;
                double v120 = v119;
                if (a5.n128_f64[0] > *(double *)v14)
                {
                  if (v120 <= a5.n128_f64[0])
                  {
                    *(_OWORD *)v254 = *(_OWORD *)(v14 + 16);
                    *(_OWORD *)&v254[16] = *(_OWORD *)(v14 + 32);
                    __n128 v219 = *(__n128 *)v14;
                    long long v180 = *(_OWORD *)(v14 + 64);
                    *(__n128 *)unint64_t v14 = *v118;
                    *(_OWORD *)(v14 + 16) = v180;
                    *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
                    *unsigned int v118 = v219;
                    *(_OWORD *)(v14 + 64) = *(_OWORD *)v254;
                    *(_OWORD *)(v14 + 76) = *(_OWORD *)&v254[12];
                    a5.n128_u64[0] = *(void *)v116;
                    if (*(double *)v116 <= *(double *)(v14 + 48)) {
                      return a5.n128_f64[0];
                    }
                    long long v123 = *(_OWORD *)(v14 + 64);
                    *(_DWORD *)&v243[12] = HIDWORD(v123);
                    *(_OWORD *)&v243[16] = *(_OWORD *)(v14 + 80);
                    a5 = *v118;
                    long long v182 = *v116;
                    long long v181 = v116[1];
                    *(_OWORD *)(v14 + 76) = *(long long *)((char *)v116 + 28);
                    *unsigned int v118 = (__n128)v182;
                    *(_OWORD *)(v14 + 64) = v181;
                  }
                  else
                  {
LABEL_101:
                    *(_OWORD *)int v243 = *(_OWORD *)(v14 + 16);
                    *(_OWORD *)&v243[16] = *(_OWORD *)(v14 + 32);
                    __n128 v212 = *(__n128 *)v14;
                    long long v121 = *v116;
                    long long v122 = v116[1];
                    *(_OWORD *)(v14 + 28) = *(long long *)((char *)v116 + 28);
                    *(_OWORD *)unint64_t v14 = v121;
                    *(_OWORD *)(v14 + 16) = v122;
                    a5 = v212;
                    long long v123 = *(_OWORD *)v243;
                  }
                  *(long long *)((char *)v116 + 28) = *(_OWORD *)&v243[12];
                  *unsigned int v116 = (__int128)a5;
                  v116[1] = v123;
                  return a5.n128_f64[0];
                }
                if (v120 > a5.n128_f64[0])
                {
                  *(_OWORD *)v251 = *(_OWORD *)(v14 + 64);
                  *(_OWORD *)&v251[16] = *(_OWORD *)(v14 + 80);
                  a5 = *v118;
                  long long v174 = *v116;
                  long long v173 = v116[1];
                  *(_OWORD *)(v14 + 76) = *(long long *)((char *)v116 + 28);
                  *unsigned int v118 = (__n128)v174;
                  *(_OWORD *)(v14 + 64) = v173;
                  *(long long *)((char *)v116 + 28) = *(_OWORD *)&v251[12];
                  *unsigned int v116 = (__int128)a5;
                  v116[1] = *(_OWORD *)v251;
                  a5.n128_u64[0] = *(void *)(v14 + 48);
                  if (a5.n128_f64[0] > *(double *)v14)
                  {
                    *(_OWORD *)v252 = *(_OWORD *)(v14 + 16);
                    *(_OWORD *)&v252[16] = *(_OWORD *)(v14 + 32);
                    __n128 v217 = *(__n128 *)v14;
                    long long v175 = *(_OWORD *)(v14 + 64);
                    *(__n128 *)unint64_t v14 = *v118;
                    *(_OWORD *)(v14 + 16) = v175;
                    *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
                    *unsigned int v118 = v217;
                    *(_OWORD *)(v14 + 64) = *(_OWORD *)v252;
                    a5.n128_u64[0] = *(void *)&v252[12];
                    *(_OWORD *)(v14 + 76) = *(_OWORD *)&v252[12];
                  }
                }
                break;
              case 4:
                a5.n128_u64[0] = sub_10A9DB4((long long *)v14, (long long *)(v14 + 48), (long long *)(v14 + 96), a2 - 3).n128_u64[0];
                return a5.n128_f64[0];
              case 5:
                uint64_t v124 = (long long *)(v14 + 48);
                uint64_t v125 = (__n128 *)(v14 + 96);
                uint64_t v126 = (__n128 *)(v14 + 144);
                sub_10A9DB4((long long *)v14, (long long *)(v14 + 48), (long long *)(v14 + 96), (long long *)(v14 + 144));
                double v128 = *((double *)a2 - 6);
                int v127 = a2 - 3;
                a5.n128_f64[0] = v128;
                if (v128 > *(double *)(v14 + 144))
                {
                  *(_OWORD *)unsigned int v244 = *(_OWORD *)(v14 + 160);
                  *(_OWORD *)&v244[16] = *(_OWORD *)(v14 + 176);
                  a5 = *v126;
                  __n128 v130 = (__n128)*v127;
                  long long v129 = v127[1];
                  *(_OWORD *)(v14 + 172) = *(long long *)((char *)v127 + 28);
                  __n128 *v126 = v130;
                  *(_OWORD *)(v14 + 160) = v129;
                  *(long long *)((char *)v127 + 28) = *(_OWORD *)&v244[12];
                  *int v127 = (__int128)a5;
                  v127[1] = *(_OWORD *)v244;
                  a5.n128_u64[0] = v126->n128_u64[0];
                  if (v126->n128_f64[0] > v125->n128_f64[0])
                  {
                    __n128 v131 = *v125;
                    *(_OWORD *)unsigned int v245 = *(_OWORD *)(v14 + 112);
                    *(_OWORD *)&v245[16] = *(_OWORD *)(v14 + 128);
                    long long v132 = *(_OWORD *)(v14 + 160);
                    *uint64_t v125 = *v126;
                    *(_OWORD *)(v14 + 112) = v132;
                    *(_OWORD *)(v14 + 124) = *(_OWORD *)(v14 + 172);
                    __n128 *v126 = v131;
                    *(_OWORD *)(v14 + 160) = *(_OWORD *)v245;
                    *(_OWORD *)(v14 + 172) = *(_OWORD *)&v245[12];
                    a5.n128_u64[0] = v125->n128_u64[0];
                    if (v125->n128_f64[0] > *(double *)v124)
                    {
                      long long v133 = *v124;
                      *(_OWORD *)int v246 = *(_OWORD *)(v14 + 64);
                      *(_OWORD *)&v246[16] = *(_OWORD *)(v14 + 80);
                      long long v134 = *(_OWORD *)(v14 + 112);
                      *uint64_t v124 = (__int128)*v125;
                      *(_OWORD *)(v14 + 64) = v134;
                      *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
                      *uint64_t v125 = (__n128)v133;
                      *(_OWORD *)(v14 + 112) = *(_OWORD *)v246;
                      *(_OWORD *)(v14 + 124) = *(_OWORD *)&v246[12];
                      a5.n128_u64[0] = *(void *)(v14 + 48);
                      if (a5.n128_f64[0] > *(double *)v14)
                      {
                        *(_OWORD *)int v247 = *(_OWORD *)(v14 + 16);
                        *(_OWORD *)&v247[16] = *(_OWORD *)(v14 + 32);
                        long long v213 = *(_OWORD *)v14;
                        long long v135 = *(_OWORD *)(v14 + 64);
                        *(_OWORD *)unint64_t v14 = *v124;
                        *(_OWORD *)(v14 + 16) = v135;
                        *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
                        *uint64_t v124 = v213;
                        *(_OWORD *)(v14 + 64) = *(_OWORD *)v247;
                        a5.n128_u64[0] = *(void *)&v247[12];
                        *(_OWORD *)(v14 + 76) = *(_OWORD *)&v247[12];
                      }
                    }
                  }
                }
                return a5.n128_f64[0];
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v15 <= 1151)
          {
            uint64_t v136 = (long long *)(v14 + 48);
            BOOL v138 = (long long *)v14 == a2 || v136 == a2;
            if (a4)
            {
              if (!v138)
              {
                uint64_t v139 = 0;
                unint64_t v140 = v14;
                do
                {
                  long long v142 = v136;
                  a5.n128_u64[0] = *(void *)(v140 + 48);
                  if (a5.n128_f64[0] > *(double *)v140)
                  {
                    long long v214 = *(_OWORD *)(v140 + 56);
                    long long v248 = *(_OWORD *)(v140 + 72);
                    uint64_t v255 = *(void *)(v140 + 88);
                    uint64_t v143 = v139;
                    do
                    {
                      unint64_t v144 = (_OWORD *)(v14 + v143);
                      long long v145 = *(_OWORD *)(v14 + v143 + 16);
                      v144[3] = *(_OWORD *)(v14 + v143);
                      v144[4] = v145;
                      *(_OWORD *)((char *)v144 + 76) = *(_OWORD *)(v14 + v143 + 28);
                      if (!v143)
                      {
                        uint64_t v141 = v14;
                        goto LABEL_121;
                      }
                      v143 -= 48;
                    }
                    while (a5.n128_f64[0] > *((double *)v144 - 6));
                    uint64_t v141 = v14 + v143 + 48;
LABEL_121:
                    *(void *)uint64_t v141 = a5.n128_u64[0];
                    a5.n128_u64[0] = v214;
                    *(_DWORD *)(v141 + 40) = v255;
                    *(_OWORD *)(v141 + 24) = v248;
                    *(_OWORD *)(v141 + 8) = v214;
                  }
                  uint64_t v136 = v142 + 3;
                  v139 += 48;
                  unint64_t v140 = (unint64_t)v142;
                }
                while (v142 + 3 != a2);
              }
            }
            else if (!v138)
            {
              do
              {
                unint64_t v176 = (unint64_t)v136;
                a5.n128_u64[0] = *(void *)(a1 + 48);
                if (a5.n128_f64[0] > *(double *)a1)
                {
                  long long v218 = *(_OWORD *)(a1 + 56);
                  long long v253 = *(_OWORD *)(a1 + 72);
                  uint64_t v257 = *(void *)(a1 + 88);
                  unint64_t v177 = v136;
                  do
                  {
                    long long v178 = *(v177 - 2);
                    long long *v177 = *(v177 - 3);
                    v177[1] = v178;
                    *(long long *)((char *)v177 + 28) = *(long long *)((char *)v177 - 20);
                    double v179 = *((double *)v177 - 12);
                    v177 -= 3;
                  }
                  while (a5.n128_f64[0] > v179);
                  *(void *)unint64_t v177 = a5.n128_u64[0];
                  a5.n128_u64[0] = v218;
                  *((_DWORD *)v177 + 10) = v257;
                  *(long long *)((char *)v177 + 24) = v253;
                  *(long long *)((char *)v177 + 8) = v218;
                }
                v136 += 3;
                a1 = v176;
              }
              while ((long long *)(v176 + 48) != a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if ((long long *)v14 != a2)
            {
              int64_t v146 = (unint64_t)(v16 - 2) >> 1;
              int64_t v147 = v146;
              do
              {
                if (v146 >= v147)
                {
                  uint64_t v149 = (2 * v147) | 1;
                  unint64_t v150 = v14 + 48 * v149;
                  if (2 * v147 + 2 < v16 && *(double *)v150 > *(double *)(v150 + 48))
                  {
                    v150 += 48;
                    uint64_t v149 = 2 * v147 + 2;
                  }
                  unint64_t v151 = v14 + 48 * v147;
                  double v152 = *(double *)v151;
                  if (*(double *)v150 <= *(double *)v151)
                  {
                    uint64_t v256 = *(void *)(v151 + 40);
                    long long v215 = *(_OWORD *)(v151 + 8);
                    long long v249 = *(_OWORD *)(v151 + 24);
                    do
                    {
                      double v153 = (_OWORD *)v151;
                      unint64_t v151 = v150;
                      long long v154 = *(_OWORD *)v150;
                      long long v155 = *(_OWORD *)(v150 + 16);
                      *(_OWORD *)((char *)v153 + 28) = *(_OWORD *)(v150 + 28);
                      *double v153 = v154;
                      v153[1] = v155;
                      if (v146 < v149) {
                        break;
                      }
                      uint64_t v156 = 2 * v149;
                      uint64_t v149 = (2 * v149) | 1;
                      unint64_t v150 = v14 + 48 * v149;
                      uint64_t v157 = v156 + 2;
                      if (v157 < v16 && *(double *)v150 > *(double *)(v150 + 48))
                      {
                        v150 += 48;
                        uint64_t v149 = v157;
                      }
                    }
                    while (*(double *)v150 <= v152);
                    *(double *)unint64_t v151 = v152;
                    *(_DWORD *)(v151 + 40) = v256;
                    *(_OWORD *)(v151 + 24) = v249;
                    *(_OWORD *)(v151 + 8) = v215;
                  }
                }
                BOOL v148 = v147-- <= 0;
              }
              while (!v148);
              int64_t v158 = v15 / 0x30uLL;
              do
              {
                uint64_t v159 = 0;
                *(_OWORD *)unint64_t v250 = *(_OWORD *)(v14 + 16);
                *(_OWORD *)&v250[16] = *(_OWORD *)(v14 + 32);
                long long v216 = *(_OWORD *)v14;
                long long v160 = (long long *)v14;
                do
                {
                  long long v163 = v160;
                  v160 += 3 * v159 + 3;
                  uint64_t v164 = 2 * v159;
                  uint64_t v159 = (2 * v159) | 1;
                  int64_t v165 = v164 + 2;
                  if (v165 < v158 && *(double *)v160 > *((double *)v160 + 6))
                  {
                    v160 += 3;
                    uint64_t v159 = v165;
                  }
                  long long v161 = *v160;
                  long long v162 = v160[1];
                  *(long long *)((char *)v163 + 28) = *(long long *)((char *)v160 + 28);
                  *long long v163 = v161;
                  v163[1] = v162;
                }
                while (v159 <= (uint64_t)((unint64_t)(v158 - 2) >> 1));
                a2 -= 3;
                if (v160 == a2)
                {
                  a5.n128_u64[0] = v216;
                  *(long long *)((char *)v160 + 28) = *(_OWORD *)&v250[12];
                  *long long v160 = v216;
                  v160[1] = *(_OWORD *)v250;
                }
                else
                {
                  a5 = (__n128)*a2;
                  long long v166 = a2[1];
                  *(long long *)((char *)v160 + 28) = *(long long *)((char *)a2 + 28);
                  *long long v160 = (__int128)a5;
                  v160[1] = v166;
                  a5.n128_u64[0] = v216;
                  *(long long *)((char *)a2 + 28) = *(_OWORD *)&v250[12];
                  *a2 = v216;
                  a2[1] = *(_OWORD *)v250;
                  uint64_t v167 = (uint64_t)v160 - v14 + 48;
                  if (v167 >= 49)
                  {
                    unint64_t v168 = (v167 / 0x30uLL - 2) >> 1;
                    long long v169 = (long long *)(v14 + 48 * v168);
                    a5.n128_u64[0] = *(void *)v160;
                    if (*(double *)v169 > *(double *)v160)
                    {
                      uint64_t v192 = *((void *)v160 + 5);
                      long long v186 = *(long long *)((char *)v160 + 8);
                      long long v189 = *(long long *)((char *)v160 + 24);
                      do
                      {
                        long long v170 = v160;
                        long long v160 = v169;
                        long long v171 = *v169;
                        long long v172 = v169[1];
                        *(long long *)((char *)v170 + 28) = *(long long *)((char *)v169 + 28);
                        *long long v170 = v171;
                        v170[1] = v172;
                        if (!v168) {
                          break;
                        }
                        unint64_t v168 = (v168 - 1) >> 1;
                        long long v169 = (long long *)(v14 + 48 * v168);
                      }
                      while (*(double *)v169 > a5.n128_f64[0]);
                      *(void *)long long v160 = a5.n128_u64[0];
                      a5.n128_u64[0] = v186;
                      *((_DWORD *)v160 + 10) = v192;
                      *(long long *)((char *)v160 + 24) = v189;
                      *(long long *)((char *)v160 + 8) = v186;
                    }
                  }
                }
                BOOL v148 = v158-- <= 2;
              }
              while (!v148);
            }
            return a5.n128_f64[0];
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          unint64_t v18 = (long long *)(v14 + 48 * ((unint64_t)v16 >> 1));
          double v19 = *v11;
          if ((unint64_t)v15 >= 0x1801) {
            break;
          }
          double v23 = *(double *)v14;
          if (*(double *)v14 > *(double *)v18)
          {
            if (v19 <= v23)
            {
              *(_OWORD *)unint64_t v230 = v18[1];
              *(_OWORD *)&v230[16] = v18[2];
              long long v201 = *v18;
              long long v54 = *(_OWORD *)v14;
              long long v55 = *(_OWORD *)(v14 + 16);
              *(long long *)((char *)v18 + 28) = *(_OWORD *)(v14 + 28);
              *unint64_t v18 = v54;
              v18[1] = v55;
              *(_OWORD *)(v14 + 28) = *(_OWORD *)&v230[12];
              *(_OWORD *)unint64_t v14 = v201;
              *(_OWORD *)(v14 + 16) = *(_OWORD *)v230;
              if (*v11 <= *(double *)v14) {
                goto LABEL_32;
              }
              *(_OWORD *)v221 = *(_OWORD *)(v14 + 16);
              *(_OWORD *)&v221[16] = *(_OWORD *)(v14 + 32);
              long long v194 = *(_OWORD *)v14;
              long long v56 = *(_OWORD *)v11;
              long long v57 = *(a2 - 2);
              *(_OWORD *)(v14 + 28) = *(long long *)((char *)a2 - 20);
              *(_OWORD *)unint64_t v14 = v56;
              *(_OWORD *)(v14 + 16) = v57;
            }
            else
            {
              *(_OWORD *)v221 = v18[1];
              *(_OWORD *)&v221[16] = v18[2];
              long long v194 = *v18;
              long long v24 = *(_OWORD *)v11;
              long long v25 = *(a2 - 2);
              *(long long *)((char *)v18 + 28) = *(long long *)((char *)a2 - 20);
              *unint64_t v18 = v24;
              v18[1] = v25;
            }
            *(long long *)((char *)a2 - 20) = *(_OWORD *)&v221[12];
            *(_OWORD *)uint64_t v11 = v194;
            *(a2 - 2) = *(_OWORD *)v221;
LABEL_32:
            --a3;
            double v34 = *(double *)v14;
            if (a4) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
          if (v19 <= v23) {
            goto LABEL_32;
          }
          *(_OWORD *)v224 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v224[16] = *(_OWORD *)(v14 + 32);
          long long v197 = *(_OWORD *)v14;
          long long v30 = *(_OWORD *)v11;
          long long v31 = *(a2 - 2);
          *(_OWORD *)(v14 + 28) = *(long long *)((char *)a2 - 20);
          *(_OWORD *)unint64_t v14 = v30;
          *(_OWORD *)(v14 + 16) = v31;
          *(long long *)((char *)a2 - 20) = *(_OWORD *)&v224[12];
          *(_OWORD *)uint64_t v11 = v197;
          *(a2 - 2) = *(_OWORD *)v224;
          if (*(double *)v14 <= *(double *)v18) {
            goto LABEL_32;
          }
          *(_OWORD *)v225 = v18[1];
          *(_OWORD *)&v225[16] = v18[2];
          long long v198 = *v18;
          long long v32 = *(_OWORD *)v14;
          long long v33 = *(_OWORD *)(v14 + 16);
          *(long long *)((char *)v18 + 28) = *(_OWORD *)(v14 + 28);
          *unint64_t v18 = v32;
          v18[1] = v33;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)&v225[12];
          *(_OWORD *)unint64_t v14 = v198;
          *(_OWORD *)(v14 + 16) = *(_OWORD *)v225;
          --a3;
          double v34 = *(double *)v14;
          if (a4) {
            goto LABEL_57;
          }
LABEL_56:
          if (*(double *)(v14 - 48) > v34) {
            goto LABEL_57;
          }
          uint64_t v191 = *(void *)(v14 + 40);
          long long v185 = *(_OWORD *)(v14 + 8);
          long long v188 = *(_OWORD *)(v14 + 24);
          if (v34 > *v11)
          {
            do
            {
              double v106 = *(double *)(v14 + 48);
              v14 += 48;
            }
            while (v34 <= v106);
          }
          else
          {
            unint64_t v107 = v14 + 48;
            do
            {
              unint64_t v14 = v107;
              if (v107 >= (unint64_t)a2) {
                break;
              }
              v107 += 48;
            }
            while (v34 <= *(double *)v14);
          }
          int v108 = a2;
          if (v14 < (unint64_t)a2)
          {
            int v108 = a2;
            do
            {
              double v109 = *((double *)v108 - 6);
              v108 -= 3;
            }
            while (v34 > v109);
          }
          while (v14 < (unint64_t)v108)
          {
            *(_OWORD *)int v242 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v242[16] = *(_OWORD *)(v14 + 32);
            long long v211 = *(_OWORD *)v14;
            long long v110 = *v108;
            long long v111 = v108[1];
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)v108 + 28);
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v111;
            *(long long *)((char *)v108 + 28) = *(_OWORD *)&v242[12];
            *int v108 = v211;
            v108[1] = *(_OWORD *)v242;
            do
            {
              double v112 = *(double *)(v14 + 48);
              v14 += 48;
            }
            while (v34 <= v112);
            do
            {
              double v113 = *((double *)v108 - 6);
              v108 -= 3;
            }
            while (v34 > v113);
          }
          BOOL v5 = v14 - 48 >= a1;
          BOOL v6 = v14 - 48 == a1;
          if (v14 - 48 != a1)
          {
            long long v114 = *(_OWORD *)(v14 - 48);
            long long v115 = *(_OWORD *)(v14 - 32);
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
            *(_OWORD *)a1 = v114;
            *(_OWORD *)(a1 + 16) = v115;
          }
          a4 = 0;
          *(double *)(v14 - 48) = v34;
          a5.n128_u64[0] = v185;
          *(_DWORD *)(v14 - 8) = v191;
          *(_OWORD *)(v14 - 24) = v188;
          *(_OWORD *)(v14 - 40) = v185;
        }
        double v20 = *(double *)v18;
        if (*(double *)v18 <= *(double *)v14)
        {
          if (v19 > v20)
          {
            *(_OWORD *)uint64_t v222 = v18[1];
            *(_OWORD *)&v222[16] = v18[2];
            long long v195 = *v18;
            long long v26 = *(_OWORD *)v11;
            long long v27 = *(a2 - 2);
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)a2 - 20);
            *unint64_t v18 = v26;
            v18[1] = v27;
            *(long long *)((char *)a2 - 20) = *(_OWORD *)&v222[12];
            *(_OWORD *)uint64_t v11 = v195;
            *(a2 - 2) = *(_OWORD *)v222;
            if (*(double *)v18 > *(double *)v14)
            {
              *(_OWORD *)v223 = *(_OWORD *)(v14 + 16);
              *(_OWORD *)&v223[16] = *(_OWORD *)(v14 + 32);
              long long v196 = *(_OWORD *)v14;
              long long v28 = *v18;
              long long v29 = v18[1];
              *(_OWORD *)(v14 + 28) = *(long long *)((char *)v18 + 28);
              *(_OWORD *)unint64_t v14 = v28;
              *(_OWORD *)(v14 + 16) = v29;
              *(long long *)((char *)v18 + 28) = *(_OWORD *)&v223[12];
              *unint64_t v18 = v196;
              v18[1] = *(_OWORD *)v223;
            }
          }
        }
        else
        {
          if (v19 <= v20)
          {
            *(_OWORD *)v226 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v226[16] = *(_OWORD *)(v14 + 32);
            long long v199 = *(_OWORD *)v14;
            long long v35 = *v18;
            long long v36 = v18[1];
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)v18 + 28);
            *(_OWORD *)unint64_t v14 = v35;
            *(_OWORD *)(v14 + 16) = v36;
            *(long long *)((char *)v18 + 28) = *(_OWORD *)&v226[12];
            *unint64_t v18 = v199;
            v18[1] = *(_OWORD *)v226;
            if (*v11 <= *(double *)v18) {
              goto LABEL_23;
            }
            *(_OWORD *)unsigned int v220 = v18[1];
            *(_OWORD *)&v220[16] = v18[2];
            long long v193 = *v18;
            long long v37 = *(_OWORD *)v11;
            long long v38 = *(a2 - 2);
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)a2 - 20);
            *unint64_t v18 = v37;
            v18[1] = v38;
          }
          else
          {
            *(_OWORD *)unsigned int v220 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v220[16] = *(_OWORD *)(v14 + 32);
            long long v193 = *(_OWORD *)v14;
            long long v21 = *(_OWORD *)v11;
            long long v22 = *(a2 - 2);
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)a2 - 20);
            *(_OWORD *)unint64_t v14 = v21;
            *(_OWORD *)(v14 + 16) = v22;
          }
          *(long long *)((char *)a2 - 20) = *(_OWORD *)&v220[12];
          *(_OWORD *)uint64_t v11 = v193;
          *(a2 - 2) = *(_OWORD *)v220;
        }
LABEL_23:
        long long v39 = (double *)(v14 + 48);
        unint64_t v40 = v14 + 48 * v17;
        double v42 = *(double *)(v40 - 48);
        uint64_t v41 = (long long *)(v40 - 48);
        double v43 = v42;
        double v44 = *v12;
        if (v42 <= *(double *)(v14 + 48))
        {
          if (v44 > v43)
          {
            *(_OWORD *)v228 = v41[1];
            *(_OWORD *)&v228[16] = v41[2];
            long long v200 = *v41;
            long long v49 = *(_OWORD *)v12;
            long long v50 = *(a2 - 5);
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)a2 - 68);
            long long *v41 = v49;
            v41[1] = v50;
            *(long long *)((char *)a2 - 68) = *(_OWORD *)&v228[12];
            *(_OWORD *)uint64_t v12 = v200;
            *(a2 - 5) = *(_OWORD *)v228;
            if (*(double *)v41 > *v39)
            {
              *(_OWORD *)unint64_t v229 = *(_OWORD *)(v14 + 64);
              *(_OWORD *)&v229[16] = *(_OWORD *)(v14 + 80);
              long long v51 = *(_OWORD *)v39;
              long long v53 = *v41;
              long long v52 = v41[1];
              *(_OWORD *)(v14 + 76) = *(long long *)((char *)v41 + 28);
              *(_OWORD *)long long v39 = v53;
              *(_OWORD *)(v14 + 64) = v52;
              *(long long *)((char *)v41 + 28) = *(_OWORD *)&v229[12];
              long long *v41 = v51;
              v41[1] = *(_OWORD *)v229;
            }
          }
        }
        else
        {
          if (v44 <= v43)
          {
            *(_OWORD *)unint64_t v231 = *(_OWORD *)(v14 + 64);
            *(_OWORD *)&v231[16] = *(_OWORD *)(v14 + 80);
            long long v58 = *(_OWORD *)v39;
            long long v60 = *v41;
            long long v59 = v41[1];
            *(_OWORD *)(v14 + 76) = *(long long *)((char *)v41 + 28);
            *(_OWORD *)long long v39 = v60;
            *(_OWORD *)(v14 + 64) = v59;
            *(long long *)((char *)v41 + 28) = *(_OWORD *)&v231[12];
            long long *v41 = v58;
            v41[1] = *(_OWORD *)v231;
            if (*v12 <= *(double *)v41) {
              goto LABEL_37;
            }
            *(_OWORD *)uint64_t v227 = v41[1];
            *(_OWORD *)&v227[16] = v41[2];
            long long v202 = *v41;
            long long v61 = *(_OWORD *)v12;
            long long v62 = *(a2 - 5);
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)a2 - 68);
            long long *v41 = v61;
            v41[1] = v62;
            long long v46 = v202;
            long long v45 = *(_OWORD *)v227;
          }
          else
          {
            long long v45 = *(_OWORD *)(v14 + 64);
            *(_DWORD *)&v227[12] = HIDWORD(v45);
            *(_OWORD *)&v227[16] = *(_OWORD *)(v14 + 80);
            long long v46 = *(_OWORD *)v39;
            long long v48 = *(_OWORD *)v12;
            long long v47 = *(a2 - 5);
            *(_OWORD *)(v14 + 76) = *(long long *)((char *)a2 - 68);
            *(_OWORD *)long long v39 = v48;
            *(_OWORD *)(v14 + 64) = v47;
          }
          *(long long *)((char *)a2 - 68) = *(_OWORD *)&v227[12];
          *(_OWORD *)uint64_t v12 = v46;
          *(a2 - 5) = v45;
        }
LABEL_37:
        int v63 = (double *)(v14 + 96);
        unint64_t v64 = v14 + 48 * v17;
        double v66 = *(double *)(v64 + 48);
        uint64_t v65 = (long long *)(v64 + 48);
        double v67 = v66;
        double v68 = *v13;
        if (v66 <= *(double *)(v14 + 96))
        {
          if (v68 > v67)
          {
            *(_OWORD *)unint64_t v233 = v65[1];
            *(_OWORD *)&v233[16] = v65[2];
            long long v203 = *v65;
            long long v73 = *(_OWORD *)v13;
            long long v74 = *(a2 - 8);
            *(long long *)((char *)v65 + 28) = *(long long *)((char *)a2 - 116);
            *uint64_t v65 = v73;
            v65[1] = v74;
            *(long long *)((char *)a2 - 116) = *(_OWORD *)&v233[12];
            *(_OWORD *)double v13 = v203;
            *(a2 - 8) = *(_OWORD *)v233;
            if (*(double *)v65 > *v63)
            {
              *(_OWORD *)BOOL v234 = *(_OWORD *)(v14 + 112);
              *(_OWORD *)&v234[16] = *(_OWORD *)(v14 + 128);
              long long v75 = *(_OWORD *)v63;
              long long v77 = *v65;
              long long v76 = v65[1];
              *(_OWORD *)(v14 + 124) = *(long long *)((char *)v65 + 28);
              *(_OWORD *)int v63 = v77;
              *(_OWORD *)(v14 + 112) = v76;
              *(long long *)((char *)v65 + 28) = *(_OWORD *)&v234[12];
              *uint64_t v65 = v75;
              v65[1] = *(_OWORD *)v234;
            }
          }
        }
        else
        {
          if (v68 <= v67)
          {
            *(_OWORD *)unsigned int v235 = *(_OWORD *)(v14 + 112);
            *(_OWORD *)&v235[16] = *(_OWORD *)(v14 + 128);
            long long v78 = *(_OWORD *)v63;
            long long v80 = *v65;
            long long v79 = v65[1];
            *(_OWORD *)(v14 + 124) = *(long long *)((char *)v65 + 28);
            *(_OWORD *)int v63 = v80;
            *(_OWORD *)(v14 + 112) = v79;
            *(long long *)((char *)v65 + 28) = *(_OWORD *)&v235[12];
            *uint64_t v65 = v78;
            v65[1] = *(_OWORD *)v235;
            if (*v13 <= *(double *)v65) {
              goto LABEL_46;
            }
            *(_OWORD *)unint64_t v232 = v65[1];
            *(_OWORD *)&v232[16] = v65[2];
            long long v204 = *v65;
            long long v81 = *(_OWORD *)v13;
            long long v82 = *(a2 - 8);
            *(long long *)((char *)v65 + 28) = *(long long *)((char *)a2 - 116);
            *uint64_t v65 = v81;
            v65[1] = v82;
            long long v70 = v204;
            long long v69 = *(_OWORD *)v232;
          }
          else
          {
            long long v69 = *(_OWORD *)(v14 + 112);
            *(_DWORD *)&v232[12] = HIDWORD(v69);
            *(_OWORD *)&v232[16] = *(_OWORD *)(v14 + 128);
            long long v70 = *(_OWORD *)v63;
            long long v72 = *(_OWORD *)v13;
            long long v71 = *(a2 - 8);
            *(_OWORD *)(v14 + 124) = *(long long *)((char *)a2 - 116);
            *(_OWORD *)int v63 = v72;
            *(_OWORD *)(v14 + 112) = v71;
          }
          *(long long *)((char *)a2 - 116) = *(_OWORD *)&v232[12];
          *(_OWORD *)double v13 = v70;
          *(a2 - 8) = v69;
        }
LABEL_46:
        double v83 = *(double *)v18;
        double v84 = *(double *)v65;
        if (*(double *)v18 <= *(double *)v41)
        {
          if (v84 > v83)
          {
            *(_OWORD *)v237 = v18[1];
            *(_OWORD *)&v237[16] = v18[2];
            long long v206 = *v18;
            long long v86 = v65[1];
            *unint64_t v18 = *v65;
            v18[1] = v86;
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)v65 + 28);
            *(long long *)((char *)v65 + 28) = *(_OWORD *)&v237[12];
            *uint64_t v65 = v206;
            v65[1] = *(_OWORD *)v237;
            if (*(double *)v18 > *(double *)v41)
            {
              *(_OWORD *)uint64_t v238 = v41[1];
              *(_OWORD *)&v238[16] = v41[2];
              long long v207 = *v41;
              long long v87 = v18[1];
              long long *v41 = *v18;
              v41[1] = v87;
              *(long long *)((char *)v41 + 28) = *(long long *)((char *)v18 + 28);
              *(long long *)((char *)v18 + 28) = *(_OWORD *)&v238[12];
              *unint64_t v18 = v207;
              v18[1] = *(_OWORD *)v238;
            }
          }
        }
        else
        {
          if (v84 <= v83)
          {
            *(_OWORD *)v239 = v41[1];
            *(_OWORD *)&v239[16] = v41[2];
            long long v208 = *v41;
            long long v88 = v18[1];
            long long *v41 = *v18;
            v41[1] = v88;
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)v18 + 28);
            *(long long *)((char *)v18 + 28) = *(_OWORD *)&v239[12];
            *unint64_t v18 = v208;
            v18[1] = *(_OWORD *)v239;
            if (*(double *)v65 <= *(double *)v18) {
              goto LABEL_55;
            }
            *(_OWORD *)uint64_t v236 = v18[1];
            *(_OWORD *)&v236[16] = v18[2];
            long long v205 = *v18;
            long long v89 = v65[1];
            *unint64_t v18 = *v65;
            v18[1] = v89;
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)v65 + 28);
          }
          else
          {
            *(_OWORD *)uint64_t v236 = v41[1];
            *(_OWORD *)&v236[16] = v41[2];
            long long v205 = *v41;
            long long v85 = v65[1];
            long long *v41 = *v65;
            v41[1] = v85;
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)v65 + 28);
          }
          *(long long *)((char *)v65 + 28) = *(_OWORD *)&v236[12];
          *uint64_t v65 = v205;
          v65[1] = *(_OWORD *)v236;
        }
LABEL_55:
        *(_OWORD *)v240 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)&v240[16] = *(_OWORD *)(v14 + 32);
        long long v209 = *(_OWORD *)v14;
        long long v90 = *v18;
        long long v91 = v18[1];
        *(_OWORD *)(v14 + 28) = *(long long *)((char *)v18 + 28);
        *(_OWORD *)unint64_t v14 = v90;
        *(_OWORD *)(v14 + 16) = v91;
        *(long long *)((char *)v18 + 28) = *(_OWORD *)&v240[12];
        *unint64_t v18 = v209;
        v18[1] = *(_OWORD *)v240;
        --a3;
        double v34 = *(double *)v14;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_57:
        uint64_t v92 = 0;
        uint64_t v190 = *(void *)(v14 + 40);
        long long v184 = *(_OWORD *)(v14 + 8);
        long long v187 = *(_OWORD *)(v14 + 24);
        do
        {
          double v93 = *(double *)(v14 + v92 + 48);
          v92 += 48;
        }
        while (v93 > v34);
        unint64_t v94 = v14 + v92;
        unint64_t v95 = a2;
        if (v92 == 48)
        {
          unint64_t v95 = a2;
          do
          {
            if (v94 >= (unint64_t)v95) {
              break;
            }
            double v97 = *((double *)v95 - 6);
            v95 -= 3;
          }
          while (v97 <= v34);
        }
        else
        {
          do
          {
            double v96 = *((double *)v95 - 6);
            v95 -= 3;
          }
          while (v96 <= v34);
        }
        v14 += v92;
        if (v94 < (unint64_t)v95)
        {
          long long v98 = v95;
          do
          {
            *(_OWORD *)v241 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v241[16] = *(_OWORD *)(v14 + 32);
            long long v210 = *(_OWORD *)v14;
            long long v99 = *v98;
            long long v100 = v98[1];
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)v98 + 28);
            *(_OWORD *)unint64_t v14 = v99;
            *(_OWORD *)(v14 + 16) = v100;
            *(long long *)((char *)v98 + 28) = *(_OWORD *)&v241[12];
            long long *v98 = v210;
            v98[1] = *(_OWORD *)v241;
            do
            {
              double v101 = *(double *)(v14 + 48);
              v14 += 48;
            }
            while (v101 > v34);
            do
            {
              double v102 = *((double *)v98 - 6);
              v98 -= 3;
            }
            while (v102 <= v34);
          }
          while (v14 < (unint64_t)v98);
        }
        if (v14 - 48 != a1)
        {
          long long v103 = *(_OWORD *)(v14 - 48);
          long long v104 = *(_OWORD *)(v14 - 32);
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
          *(_OWORD *)a1 = v103;
          *(_OWORD *)(a1 + 16) = v104;
        }
        *(double *)(v14 - 48) = v34;
        *(_DWORD *)(v14 - 8) = v190;
        *(_OWORD *)(v14 - 24) = v187;
        *(_OWORD *)(v14 - 40) = v184;
        if (v94 >= (unint64_t)v95) {
          break;
        }
LABEL_76:
        sub_10A88E4(a1, v14 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v105 = sub_10A98B8((long long *)a1, (long long *)(v14 - 48));
      if (sub_10A98B8((long long *)v14, a2)) {
        break;
      }
      if (!v105) {
        goto LABEL_76;
      }
    }
    a2 = (long long *)(v14 - 48);
    if (!v105) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL sub_10A98B8(long long *a1, long long *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = a2 - 3;
      if (*((double *)a2 - 6) > *(double *)a1) {
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      double v7 = a1 + 3;
      double v8 = *((double *)a1 + 6);
      BOOL v6 = a2 - 3;
      double v9 = *((double *)a2 - 6);
      if (v8 <= *(double *)a1)
      {
        if (v9 > v8)
        {
          long long v36 = *v7;
          *(_OWORD *)uint64_t v65 = a1[4];
          *(_OWORD *)&v65[16] = a1[5];
          long long v37 = *(long long *)((char *)a2 - 20);
          long long v38 = *(a2 - 2);
          *double v7 = *v6;
          a1[4] = v38;
          *(long long *)((char *)a1 + 76) = v37;
          long long *v6 = v36;
          *(a2 - 2) = *(_OWORD *)v65;
          *(long long *)((char *)a2 - 20) = *(_OWORD *)&v65[12];
          if (*((double *)a1 + 6) > *(double *)a1)
          {
            long long v39 = *a1;
            *(_OWORD *)double v66 = a1[1];
            *(_OWORD *)&v66[16] = a1[2];
            long long v40 = a1[4];
            *a1 = *v7;
            a1[1] = v40;
            *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
            *double v7 = v39;
            a1[4] = *(_OWORD *)v66;
            *(long long *)((char *)a1 + 76) = *(_OWORD *)&v66[12];
          }
        }
      }
      else
      {
        if (v9 > v8)
        {
LABEL_7:
          long long v10 = a1[1];
          long long v11 = *a1;
          *(_DWORD *)long long v72 = HIDWORD(v10);
          *(_OWORD *)&v72[4] = a1[2];
          long long v12 = *(long long *)((char *)v6 + 28);
          long long v13 = v6[1];
          *a1 = *v6;
          a1[1] = v13;
          *(long long *)((char *)a1 + 28) = v12;
LABEL_8:
          long long *v6 = v11;
          v6[1] = v10;
          *(long long *)((char *)v6 + 28) = *(_OWORD *)v72;
          return result;
        }
        long long v45 = *a1;
        *(_OWORD *)long long v69 = a1[1];
        *(_OWORD *)&v69[16] = a1[2];
        long long v46 = a1[4];
        *a1 = *v7;
        a1[1] = v46;
        *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
        *double v7 = v45;
        a1[4] = *(_OWORD *)v69;
        *(long long *)((char *)a1 + 76) = *(_OWORD *)&v69[12];
        if (*(double *)v6 > *((double *)a1 + 6))
        {
          long long v10 = a1[4];
          long long v11 = *v7;
          *(_DWORD *)long long v72 = HIDWORD(v10);
          *(_OWORD *)&v72[4] = a1[5];
          long long v47 = *(long long *)((char *)a2 - 20);
          long long v48 = *(a2 - 2);
          *double v7 = *v6;
          a1[4] = v48;
          *(long long *)((char *)a1 + 76) = v47;
          goto LABEL_8;
        }
      }
      return result;
    case 4uLL:
      sub_10A9DB4(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      long long v22 = a1 + 3;
      double v23 = a1 + 6;
      long long v24 = a1 + 9;
      sub_10A9DB4(a1, a1 + 3, a1 + 6, a1 + 9);
      double v26 = *((double *)a2 - 6);
      long long v25 = a2 - 3;
      if (v26 > *((double *)a1 + 18))
      {
        long long v27 = *v24;
        *(_OWORD *)long long v61 = a1[10];
        *(_OWORD *)&v61[16] = a1[11];
        long long v28 = *(long long *)((char *)v25 + 28);
        long long v29 = v25[1];
        long long *v24 = *v25;
        a1[10] = v29;
        *(long long *)((char *)a1 + 172) = v28;
        *long long v25 = v27;
        v25[1] = *(_OWORD *)v61;
        *(long long *)((char *)v25 + 28) = *(_OWORD *)&v61[12];
        if (*(double *)v24 > *(double *)v23)
        {
          long long v30 = *v23;
          *(_OWORD *)long long v62 = a1[7];
          *(_OWORD *)&v62[16] = a1[8];
          long long v31 = a1[10];
          *double v23 = *v24;
          a1[7] = v31;
          *(long long *)((char *)a1 + 124) = *(long long *)((char *)a1 + 172);
          long long *v24 = v30;
          a1[10] = *(_OWORD *)v62;
          *(long long *)((char *)a1 + 172) = *(_OWORD *)&v62[12];
          if (*(double *)v23 > *(double *)v22)
          {
            long long v32 = *v22;
            *(_OWORD *)int v63 = a1[4];
            *(_OWORD *)&v63[16] = a1[5];
            long long v33 = a1[7];
            *long long v22 = *v23;
            a1[4] = v33;
            *(long long *)((char *)a1 + 76) = *(long long *)((char *)a1 + 124);
            *double v23 = v32;
            a1[7] = *(_OWORD *)v63;
            *(long long *)((char *)a1 + 124) = *(_OWORD *)&v63[12];
            if (*((double *)a1 + 6) > *(double *)a1)
            {
              long long v34 = *a1;
              *(_OWORD *)unint64_t v64 = a1[1];
              *(_OWORD *)&v64[16] = a1[2];
              long long v35 = a1[4];
              *a1 = *v22;
              a1[1] = v35;
              *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
              *long long v22 = v34;
              a1[4] = *(_OWORD *)v64;
              *(long long *)((char *)a1 + 76) = *(_OWORD *)&v64[12];
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v14 = a1 + 6;
      double v15 = *((double *)a1 + 12);
      uint64_t v16 = a1 + 3;
      double v17 = *((double *)a1 + 6);
      double v18 = *(double *)a1;
      if (v17 <= *(double *)a1)
      {
        if (v15 > v17)
        {
          long long v41 = *v16;
          *(_OWORD *)double v67 = a1[4];
          *(_OWORD *)&v67[16] = a1[5];
          long long v42 = a1[7];
          *uint64_t v16 = *v14;
          a1[4] = v42;
          *(long long *)((char *)a1 + 76) = *(long long *)((char *)a1 + 124);
          *unint64_t v14 = v41;
          a1[7] = *(_OWORD *)v67;
          *(long long *)((char *)a1 + 124) = *(_OWORD *)&v67[12];
          if (*(double *)v16 > v18)
          {
            long long v43 = *a1;
            *(_OWORD *)double v68 = a1[1];
            *(_OWORD *)&v68[16] = a1[2];
            long long v44 = a1[4];
            *a1 = *v16;
            a1[1] = v44;
            *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
            *uint64_t v16 = v43;
            a1[4] = *(_OWORD *)v68;
            *(long long *)((char *)a1 + 76) = *(_OWORD *)&v68[12];
          }
        }
      }
      else
      {
        if (v15 <= v17)
        {
          long long v49 = *a1;
          *(_OWORD *)long long v70 = a1[1];
          *(_OWORD *)&v70[16] = a1[2];
          long long v50 = a1[4];
          *a1 = *v16;
          a1[1] = v50;
          *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
          *uint64_t v16 = v49;
          a1[4] = *(_OWORD *)v70;
          *(long long *)((char *)a1 + 76) = *(_OWORD *)&v70[12];
          if (v15 <= *((double *)a1 + 6)) {
            goto LABEL_29;
          }
          long long v19 = a1[4];
          long long v20 = *v16;
          *(_DWORD *)long long v73 = HIDWORD(v19);
          *(_OWORD *)&v73[4] = a1[5];
          long long v51 = a1[7];
          *uint64_t v16 = *v14;
          a1[4] = v51;
          *(long long *)((char *)a1 + 76) = *(long long *)((char *)a1 + 124);
        }
        else
        {
          long long v19 = a1[1];
          long long v20 = *a1;
          *(_DWORD *)long long v73 = HIDWORD(v19);
          *(_OWORD *)&v73[4] = a1[2];
          long long v21 = a1[7];
          *a1 = *v14;
          a1[1] = v21;
          *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 124);
        }
        *unint64_t v14 = v20;
        a1[7] = v19;
        *(long long *)((char *)a1 + 124) = *(_OWORD *)v73;
      }
LABEL_29:
      long long v52 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v53 = 0;
      int v54 = 0;
      while (1)
      {
        double v56 = *(double *)v52;
        if (*(double *)v52 > *(double *)v14)
        {
          long long v60 = *(long long *)((char *)v52 + 8);
          long long v71 = *(long long *)((char *)v52 + 24);
          uint64_t v74 = *((void *)v52 + 5);
          uint64_t v57 = v53;
          do
          {
            long long v58 = (char *)a1 + v57;
            long long v59 = *(long long *)((char *)a1 + v57 + 112);
            *((_OWORD *)v58 + 9) = *(long long *)((char *)a1 + v57 + 96);
            *((_OWORD *)v58 + 10) = v59;
            *(_OWORD *)(v58 + 172) = *(long long *)((char *)a1 + v57 + 124);
            if (v57 == -96)
            {
              uint64_t v55 = (uint64_t)a1;
              goto LABEL_32;
            }
            v57 -= 48;
          }
          while (v56 > *((double *)v58 + 6));
          uint64_t v55 = (uint64_t)a1 + v57 + 144;
LABEL_32:
          *(double *)uint64_t v55 = v56;
          *(_OWORD *)(v55 + 8) = v60;
          *(_OWORD *)(v55 + 24) = v71;
          *(_DWORD *)(v55 + 40) = v74;
          if (++v54 == 8) {
            return v52 + 3 == a2;
          }
        }
        unint64_t v14 = v52;
        v53 += 48;
        v52 += 3;
        if (v52 == a2) {
          return 1;
        }
      }
  }
}

__n128 sub_10A9DB4(long long *a1, long long *a2, long long *a3, long long *a4)
{
  double v4 = *(double *)a2;
  double v5 = *(double *)a3;
  if (*(double *)a2 <= *(double *)a1)
  {
    if (v5 > v4)
    {
      long long v10 = *a2;
      *(_OWORD *)long long v28 = a2[1];
      *(_OWORD *)&v28[16] = a2[2];
      __n128 result = *(__n128 *)((char *)a3 + 28);
      long long v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *(long long *)((char *)a2 + 28) = (__int128)result;
      *a3 = v10;
      a3[1] = *(_OWORD *)v28;
      result.n128_u64[1] = *(void *)&v28[20];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)&v28[12];
      if (*(double *)a2 > *(double *)a1)
      {
        long long v13 = *a1;
        *(_OWORD *)long long v29 = a1[1];
        *(_OWORD *)&v29[16] = a1[2];
        __n128 result = *(__n128 *)((char *)a2 + 28);
        long long v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *(long long *)((char *)a1 + 28) = (__int128)result;
        *a2 = v13;
        a2[1] = *(_OWORD *)v29;
        result.n128_u64[1] = *(void *)&v29[20];
        *(long long *)((char *)a2 + 28) = *(_OWORD *)&v29[12];
      }
    }
  }
  else
  {
    if (v5 > v4)
    {
      long long v6 = a1[1];
      long long v7 = *a1;
      *(_DWORD *)long long v34 = HIDWORD(v6);
      *(_OWORD *)&void v34[4] = a1[2];
      long long v8 = *(long long *)((char *)a3 + 28);
      long long v9 = a3[1];
      *a1 = *a3;
      a1[1] = v9;
      *(long long *)((char *)a1 + 28) = v8;
LABEL_9:
      *a3 = v7;
      a3[1] = v6;
      result.n128_u64[1] = *(void *)&v34[8];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)v34;
      goto LABEL_10;
    }
    long long v15 = *a1;
    *(_OWORD *)long long v30 = a1[1];
    *(_OWORD *)&v30[16] = a1[2];
    __n128 result = *(__n128 *)((char *)a2 + 28);
    long long v16 = a2[1];
    *a1 = *a2;
    a1[1] = v16;
    *(long long *)((char *)a1 + 28) = (__int128)result;
    *a2 = v15;
    a2[1] = *(_OWORD *)v30;
    result.n128_u64[1] = *(void *)&v30[20];
    *(long long *)((char *)a2 + 28) = *(_OWORD *)&v30[12];
    if (*(double *)a3 > *(double *)a2)
    {
      long long v6 = a2[1];
      long long v7 = *a2;
      *(_DWORD *)long long v34 = HIDWORD(v6);
      *(_OWORD *)&void v34[4] = a2[2];
      long long v17 = *(long long *)((char *)a3 + 28);
      long long v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *(long long *)((char *)a2 + 28) = v17;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = *(void *)a4;
  if (*(double *)a4 > *(double *)a3)
  {
    long long v19 = *a3;
    *(_OWORD *)long long v31 = a3[1];
    *(_OWORD *)&v31[16] = a3[2];
    long long v20 = *(long long *)((char *)a4 + 28);
    long long v21 = a4[1];
    *a3 = *a4;
    a3[1] = v21;
    *(long long *)((char *)a3 + 28) = v20;
    *a4 = v19;
    a4[1] = *(_OWORD *)v31;
    result.n128_u64[1] = *(void *)&v31[20];
    *(long long *)((char *)a4 + 28) = *(_OWORD *)&v31[12];
    result.n128_u64[0] = *(void *)a3;
    if (*(double *)a3 > *(double *)a2)
    {
      long long v22 = *a2;
      *(_OWORD *)long long v32 = a2[1];
      *(_OWORD *)&v32[16] = a2[2];
      long long v23 = *(long long *)((char *)a3 + 28);
      long long v24 = a3[1];
      *a2 = *a3;
      a2[1] = v24;
      *(long long *)((char *)a2 + 28) = v23;
      *a3 = v22;
      a3[1] = *(_OWORD *)v32;
      result.n128_u64[1] = *(void *)&v32[20];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)&v32[12];
      result.n128_u64[0] = *(void *)a2;
      if (*(double *)a2 > *(double *)a1)
      {
        long long v25 = *a1;
        *(_OWORD *)long long v33 = a1[1];
        *(_OWORD *)&v33[16] = a1[2];
        long long v26 = *(long long *)((char *)a2 + 28);
        long long v27 = a2[1];
        *a1 = *a2;
        a1[1] = v27;
        *(long long *)((char *)a1 + 28) = v26;
        *a2 = v25;
        a2[1] = *(_OWORD *)v33;
        __n128 result = *(__n128 *)&v33[12];
        *(long long *)((char *)a2 + 28) = *(_OWORD *)&v33[12];
      }
    }
  }
  return result;
}

void sub_10A9F70(void **a1, unint64_t a2)
{
  double v5 = a1[1];
  double v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v5) >> 4) >= a2)
  {
    if (a2)
    {
      long long v11 = &v5[6 * a2];
      uint64_t v12 = 48 * a2;
      long long v13 = v5 + 4;
      do
      {
        *(v13 - 4) = 0x7FEFFFFFFFFFFFFFLL;
        *(v13 - 3) = 0xFFFFFFFF00000000;
        *(v13 - 2) = -1;
        *(v13 - 1) = 0;
        *((_DWORD *)v13 - 2) = 0x7FFFFFFF;
        *long long v13 = -1;
        v13[1] = 0;
        v13 += 6;
        v12 -= 48;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v9 = 0x555555555555555;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x555555555555555) {
        sub_188D718();
      }
      long long v10 = (char *)operator new(48 * v9);
    }
    else
    {
      long long v10 = 0;
    }
    long long v14 = &v10[48 * v6];
    uint64_t v15 = 48 * a2;
    long long v16 = &v14[48 * a2];
    long long v17 = v14 + 16;
    do
    {
      *(v17 - 2) = 0x7FEFFFFFFFFFFFFFLL;
      *(v17 - 1) = 0xFFFFFFFF00000000;
      *long long v17 = -1;
      v17[1] = 0;
      *((_DWORD *)v17 + 2) = 0x7FFFFFFF;
      void v17[2] = -1;
      v17[3] = 0;
      v17 += 6;
      v15 -= 48;
    }
    while (v15);
    long long v18 = &v10[48 * v9];
    long long v20 = (char *)*a1;
    long long v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        long long v21 = *((_OWORD *)v19 - 3);
        long long v22 = *((_OWORD *)v19 - 2);
        *(_OWORD *)(v14 - 20) = *(_OWORD *)(v19 - 20);
        *((_OWORD *)v14 - 3) = v21;
        *((_OWORD *)v14 - 2) = v22;
        v14 -= 48;
        v19 -= 48;
      }
      while (v19 != v20);
      long long v19 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

void sub_10AA140(char **a1, uint64_t a2, unsigned int *a3, unsigned int a4, uint64_t a5, uint64_t *a6, void ***a7)
{
  BOOL v8 = *a3 == -1 && a3[1] == -1;
  if (v8
    || (long long v185 = (uint64_t *)(a2 + 3880), (sub_73930((void ***)(a2 + 3880), a3) & 1) == 0)
    || !a4
    || (*a3 & a3[1]) == 0xFFFFFFFF)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  if (a5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v15 = 1.79769313e308;
  }
  else
  {
    if (a5 < 0) {
      __int16 v16 = -50;
    }
    else {
      __int16 v16 = 50;
    }
    double v15 = (double)(a5 / 100
                 + (int)(((5243 * (__int16)(v16 + a5 % 100)) >> 19)
                       + ((5243 * (__int16)(v16 + a5 % 100)) >> 31)));
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_40889C((uint64_t)&__p, a4);
  char v196 = 0;
  uint64_t v194 = 0x3E4CCCCD3F000000;
  int v197 = 0;
  int v198 = 0;
  uint64_t v199 = 0;
  uint64_t v200 = 0;
  uint64_t v201 = 32;
  long long v193 = xmmword_20B98A0;
  __int16 v195 = 256;
  int v202 = 1;
  uint64_t v190 = a1;
  long long v203 = malloc_type_malloc(0x80uLL, 0x100004052888210uLL);
  int32x4_t v17 = vdupq_n_s32(1u);
  long long v18 = (int32x4_t *)((char *)v203 + 16);
  uint64_t v19 = 32;
  do
  {
    v18[-1] = v17;
    *long long v18 = v17;
    v18 += 2;
    v19 -= 8;
  }
  while (v19);
  sub_518C8(*a3 >> 17, a3[1] >> 17);
  int v21 = v20 | 0x40000000;
  int v192 = v20 | 0x40000000;
  long long v22 = (char *)operator new(0x40uLL);
  long long v180 = a7;
  uint64_t v181 = a2;
  long long v189 = a3;
  int v183 = a6;
  *(void *)long long v22 = 0;
  *((_DWORD *)v22 + 14) = 0;
  *((_DWORD *)v22 + 2) = v21;
  sub_408B84((uint64_t)&v193, 1);
  sub_408E60((uint64_t)&v193, (unsigned int *)&v192, (uint64_t)v208);
  long long v24 = v22 + 64;
  long long v184 = (unsigned char *)(a2 + 7774);
  uint64_t v182 = a2 + 3896;
  unint64_t v186 = a4;
  long long v187 = v22 + 64;
  while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4) < v186)
  {
    double v25 = *(double *)v22;
    long long v26 = (long long *)(v22 + 8);
    int v27 = *((_DWORD *)v22 + 14);
    int v209 = v27;
    if (v27 == 1)
    {
      long long v29 = *v26;
      long long v30 = *(_OWORD *)(v22 + 40);
      unint64_t v23 = (unint64_t)v207;
      v208[1] = *(_OWORD *)(v22 + 24);
      v208[2] = v30;
      v208[0] = v29;
      uint64_t v28 = v24 - v22;
      if (v24 - v22 < 65) {
        goto LABEL_80;
      }
    }
    else
    {
      if (!v27)
      {
        LODWORD(v23) = *(_DWORD *)v26;
        LODWORD(v208[0]) = *(_DWORD *)v26;
      }
      uint64_t v28 = v24 - v22;
      if (v24 - v22 < 65) {
        goto LABEL_80;
      }
    }
    double v31 = *(double *)v22;
    if (v27 == 1)
    {
      LODWORD(v23) = *((_DWORD *)v22 + 2);
      long long v32 = *(_OWORD *)(v22 + 12);
      long long v33 = *(_OWORD *)(v22 + 28);
      *(_OWORD *)&v207[28] = *(_OWORD *)(v22 + 40);
      *(_OWORD *)long long v207 = v32;
      *(_OWORD *)&v207[16] = v33;
    }
    else if (!v27)
    {
      LODWORD(v23) = *(_DWORD *)v26;
    }
    uint64_t v34 = 0;
    uint64_t v35 = v28 >> 6;
    int64_t v36 = (unint64_t)((v28 >> 6) - 2) >> 1;
    long long v37 = v22;
    do
    {
      long long v40 = v37;
      v37 += 64 * v34 + 64;
      uint64_t v41 = 2 * v34;
      uint64_t v34 = (2 * v34) | 1;
      uint64_t v42 = v41 + 2;
      if (v42 < v35 && *(double *)v37 > *((double *)v37 + 8))
      {
        v37 += 64;
        uint64_t v34 = v42;
      }
      long long v43 = (long long *)(v37 + 8);
      *(void *)long long v40 = *(void *)v37;
      long long v44 = v40 + 8;
      if (v40 != v37)
      {
        int v45 = *((_DWORD *)v40 + 14);
        int v46 = *((_DWORD *)v37 + 14);
        if (v45 == v46)
        {
          if (v45 == 1)
          {
            long long v47 = *v43;
            long long v48 = *(_OWORD *)(v37 + 24);
            *(_OWORD *)(v40 + 36) = *(_OWORD *)(v37 + 36);
            _OWORD *v44 = v47;
            *(_OWORD *)(v40 + 24) = v48;
          }
          else if (!v45)
          {
            *(_DWORD *)long long v44 = *(_DWORD *)v43;
          }
        }
        else
        {
          if (v46 == 1)
          {
            long long v38 = *v43;
            long long v39 = *(_OWORD *)(v37 + 40);
            *(_OWORD *)(v40 + 24) = *(_OWORD *)(v37 + 24);
            *(_OWORD *)(v40 + 40) = v39;
            _OWORD *v44 = v38;
          }
          else if (!v46)
          {
            *(_DWORD *)long long v44 = *(_DWORD *)v43;
          }
          *((_DWORD *)v40 + 14) = *((_DWORD *)v37 + 14);
        }
      }
    }
    while (v34 <= v36);
    if (v37 != v24 - 64)
    {
      *(void *)long long v37 = *((void *)v24 - 8);
      long long v49 = v24 - 56;
      int v50 = *((_DWORD *)v37 + 14);
      int v51 = *((_DWORD *)v24 - 2);
      if (v50 == v51)
      {
        if (v50 == 1)
        {
          long long v52 = *(_OWORD *)v49;
          long long v53 = *(_OWORD *)(v24 - 40);
          *(_OWORD *)(v37 + 36) = *(_OWORD *)(v24 - 28);
          long long *v43 = v52;
          *(_OWORD *)(v37 + 24) = v53;
        }
        else if (!v50)
        {
          *(_DWORD *)long long v43 = *(_DWORD *)v49;
          *((double *)v24 - 8) = v31;
          if (*((_DWORD *)v24 - 2) != v27) {
            goto LABEL_63;
          }
LABEL_71:
          if (v27 == 1)
          {
            *((_DWORD *)v24 - 14) = v23;
            long long v58 = *(_OWORD *)v207;
            long long v59 = *(_OWORD *)&v207[16];
            *(void *)(v24 - 20) = *(void *)&v207[32];
            *(_OWORD *)(v24 - 36) = v59;
            *(_OWORD *)(v24 - 52) = v58;
          }
          else if (!v27)
          {
            *(_DWORD *)long long v49 = v23;
          }
LABEL_79:
          sub_4089D4((uint64_t)v22, (uint64_t)(v37 + 64), (v37 + 64 - v22) >> 6);
          goto LABEL_80;
        }
        *((double *)v24 - 8) = v31;
        if (*((_DWORD *)v24 - 2) != v27) {
          goto LABEL_63;
        }
        goto LABEL_71;
      }
      if (v51 == 1)
      {
        long long v54 = *(_OWORD *)v49;
        long long v55 = *(_OWORD *)(v24 - 24);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v24 - 40);
        *(_OWORD *)(v37 + 40) = v55;
        long long *v43 = v54;
        *((_DWORD *)v37 + 14) = *((_DWORD *)v24 - 2);
        *((double *)v24 - 8) = v31;
        if (*((_DWORD *)v24 - 2) == v27) {
          goto LABEL_71;
        }
      }
      else
      {
        if (!v51) {
          *(_DWORD *)long long v43 = *(_DWORD *)v49;
        }
        *((_DWORD *)v37 + 14) = *((_DWORD *)v24 - 2);
        *((double *)v24 - 8) = v31;
        if (*((_DWORD *)v24 - 2) == v27) {
          goto LABEL_71;
        }
      }
LABEL_63:
      if (v27 == 1)
      {
        *((_DWORD *)v24 - 14) = v23;
        long long v56 = *(_OWORD *)v207;
        long long v57 = *(_OWORD *)&v207[16];
        *(_OWORD *)(v24 - 24) = *(_OWORD *)&v207[28];
        *(_OWORD *)(v24 - 36) = v57;
        *(_OWORD *)(v24 - 52) = v56;
      }
      else if (!v27)
      {
        *(_DWORD *)long long v49 = v23;
      }
      *((_DWORD *)v24 - 2) = v27;
      goto LABEL_79;
    }
    *(double *)long long v37 = v31;
    if (*((_DWORD *)v37 + 14) == v27)
    {
      if (v27 == 1)
      {
        *((_DWORD *)v37 + 2) = v23;
        long long v175 = *(_OWORD *)v207;
        long long v176 = *(_OWORD *)&v207[16];
        *(void *)(v37 + 44) = *(void *)&v207[32];
        *(_OWORD *)(v37 + 28) = v176;
        *(_OWORD *)(v37 + 12) = v175;
      }
      else if (!v27)
      {
        *(_DWORD *)long long v43 = v23;
      }
    }
    else
    {
      if (v27 == 1)
      {
        *((_DWORD *)v37 + 2) = v23;
        long long v177 = *(_OWORD *)v207;
        long long v178 = *(_OWORD *)&v207[16];
        *(_OWORD *)(v37 + 40) = *(_OWORD *)&v207[28];
        *(_OWORD *)(v37 + 28) = v178;
        *(_OWORD *)(v37 + 12) = v177;
LABEL_277:
        *((_DWORD *)v37 + 14) = v27;
        goto LABEL_80;
      }
      if (v27) {
        goto LABEL_277;
      }
      *(_DWORD *)long long v43 = v23;
      *((_DWORD *)v37 + 14) = 0;
    }
LABEL_80:
    if (v25 > v15) {
      break;
    }
    LODWORD(v23) = v206;
    double v60 = v206 == (v205 - (unsigned char *)__p) >> 3 ? *(double *)__p : 1.79769313e308;
    if (v25 > v60) {
      break;
    }
    v24 -= 64;
    if (v209 != 1)
    {
      unsigned int v64 = v208[0];
      uint64_t v65 = (unsigned int *)sub_2AB884(*v185, 1, v208[0], 1);
      if (v66)
      {
        double v67 = (int *)((char *)v65 + *v65);
        double v68 = (unsigned __int16 *)((char *)v67 - *v67);
        if (*v68 >= 5u)
        {
          uint64_t v69 = v68[2];
          if (v69)
          {
            long long v70 = (unsigned int *)((char *)v67 + v69 + *(unsigned int *)((char *)v67 + v69));
            uint64_t v71 = *v70;
            if (v71)
            {
              uint64_t v72 = 0;
              long long v73 = v70 + 1;
              while (2)
              {
                long long v76 = (int *)((char *)&v73[v72] + v73[v72]);
                *(void *)&long long v210 = __PAIR64__(v64, v72);
                sub_408360(v76, v189, v67, (uint64_t)&v210, (uint64_t)v207);
                if (*(double *)v207 == 1.79769313e308) {
                  goto LABEL_101;
                }
                if (v206 == (v205 - (unsigned char *)__p) >> 3)
                {
                  if (*(double *)v207 >= *(double *)__p || *(double *)v207 >= v15) {
                    goto LABEL_101;
                  }
                }
                else if (*(double *)v207 >= 1.79769313e308 || *(double *)v207 >= v15)
                {
                  goto LABEL_101;
                }
                unint64_t v79 = *(void *)&v207[8];
                if (*v184)
                {
                  long long v80 = sub_290DEC(v182, *(unsigned int *)&v207[8], 1);
                  if (!v80) {
                    goto LABEL_101;
                  }
                  long long v81 = &v80[-*(int *)v80];
                  if (*(unsigned __int16 *)v81 < 5u) {
                    goto LABEL_101;
                  }
                  uint64_t v82 = *((unsigned __int16 *)v81 + 2);
                  if (!v82
                    || *(_DWORD *)&v80[v82 + *(unsigned int *)&v80[v82]] <= HIDWORD(v79)
                    || !sub_295DB4(v181, v79))
                  {
                    goto LABEL_101;
                  }
                }
                uint64_t v83 = *v183;
                switch(*(_DWORD *)v183[1])
                {
                  case 0:
                    uint64_t v84 = v83 + 144;
                    break;
                  case 2:
                  case 3:
                  case 4:
                    uint64_t v84 = v83 + 154;
                    break;
                  case 5:
                    uint64_t v84 = v83 + 159;
                    break;
                  default:
                    uint64_t v84 = v83 + 149;
                    break;
                }
                int v85 = *(unsigned __int8 *)(v84 + 2);
                if (*(_DWORD *)v183[2] == 1 || v85 == 0)
                {
                  long long v87 = (int *)sub_2D5D58(*(void *)(v83 + 8), v79);
                  long long v88 = (unsigned __int16 *)((char *)v87 - *v87);
                  if (*v88 >= 0xBu)
                  {
                    uint64_t v89 = v88[5];
                    if (v89)
                    {
                      if ((*((unsigned char *)v87 + v89) & 8) != 0) {
                        goto LABEL_101;
                      }
                    }
                  }
                }
                if (*((unsigned char *)*v180 + 116)
                  && (*(_DWORD *)&v207[16] != -1 || *(_DWORD *)&v207[20] != -1)
                  && (sub_37D100(**v180, &v207[16]) & 1) == 0)
                {
                  *v180[1] = (void *)((char *)*v180[1] + 1);
                  goto LABEL_101;
                }
                sub_295550(v181, v79, (unint64_t *)&v210);
                long long v90 = (void *)*((void *)&v210 + 1);
                long long v91 = (void *)v210;
                if ((void)v210 != *((void *)&v210 + 1))
                {
                  long long v91 = (void *)v210;
                  do
                  {
                    if (v64 == *v91 && v72 == HIDWORD(*v91)) {
                      goto LABEL_146;
                    }
                    ++v91;
                  }
                  while (v91 != *((void **)&v210 + 1));
                  long long v91 = (void *)*((void *)&v210 + 1);
                }
LABEL_146:
                if ((void)v210)
                {
                  *((void *)&v210 + 1) = v210;
                  operator delete((void *)v210);
                }
                if (v91 == v90) {
                  goto LABEL_101;
                }
                *(void *)&long long v210 = *(void *)v207;
                sub_408754((uint64_t)&__p, (double *)&v210);
                uint64_t v93 = *(void *)v207;
                int v94 = *(_DWORD *)v207;
                if (v24 < v187)
                {
                  long long v210 = *(_OWORD *)&v207[4];
                  v211[0] = *(_OWORD *)&v207[20];
                  *(_OWORD *)((char *)v211 + 12) = *(_OWORD *)&v207[32];
                  *(void *)long long v24 = *(void *)v207;
                  *((_DWORD *)v24 + 14) = 1;
                  *((_DWORD *)v24 + 2) = v94;
                  long long v75 = v210;
                  long long v74 = v211[0];
                  *(_OWORD *)(v24 + 40) = *(_OWORD *)((char *)v211 + 12);
                  *(_OWORD *)(v24 + 12) = v75;
                  *(_OWORD *)(v24 + 28) = v74;
                  v24 += 64;
                }
                else
                {
                  uint64_t v95 = (v24 - v22) >> 6;
                  unint64_t v96 = v95 + 1;
                  if ((unint64_t)(v95 + 1) >> 58) {
                    sub_2E00();
                  }
                  if ((v187 - v22) >> 5 > v96) {
                    unint64_t v96 = (v187 - v22) >> 5;
                  }
                  if ((unint64_t)(v187 - v22) >= 0x7FFFFFFFFFFFFFC0) {
                    unint64_t v97 = 0x3FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v97 = v96;
                  }
                  if (v97)
                  {
                    long long v188 = v73;
                    if (v97 >> 58) {
                      sub_188D718();
                    }
                    int v98 = *(_DWORD *)v207;
                    unint64_t v99 = v97;
                    long long v100 = (char *)operator new(v97 << 6);
                    unint64_t v97 = v99;
                    int v94 = v98;
                    long long v73 = v188;
                  }
                  else
                  {
                    long long v100 = 0;
                  }
                  double v101 = &v100[64 * v95];
                  *(void *)double v101 = v93;
                  *((_DWORD *)v101 + 14) = 1;
                  *((_DWORD *)v101 + 2) = v94;
                  long long v102 = *(_OWORD *)&v207[20];
                  *(_OWORD *)(v101 + 12) = *(_OWORD *)&v207[4];
                  *(_OWORD *)(v101 + 28) = v102;
                  *(_OWORD *)(v101 + 40) = *(_OWORD *)&v207[32];
                  if (v24 == v22)
                  {
                    long long v110 = &v100[64 * v95];
                    long long v187 = &v100[64 * v97];
                    long long v24 = v101 + 64;
                    if (v22) {
                      goto LABEL_169;
                    }
                  }
                  else
                  {
                    uint64_t v103 = 0;
                    do
                    {
                      double v106 = &v101[v103];
                      *((void *)v106 - 8) = *(void *)&v24[v103 - 64];
                      unint64_t v107 = &v101[v103 - 56];
                      int v108 = &v24[v103 - 56];
                      int v109 = *(_DWORD *)&v24[v103 - 8];
                      *((_DWORD *)v106 - 2) = v109;
                      if (v109 == 1)
                      {
                        long long v104 = *(_OWORD *)v108;
                        long long v105 = *(_OWORD *)&v24[v103 - 24];
                        *(_OWORD *)&v101[v103 - 40] = *(_OWORD *)&v24[v103 - 40];
                        *(_OWORD *)&v101[v103 - 24] = v105;
                        *(_OWORD *)unint64_t v107 = v104;
                      }
                      else if (!v109)
                      {
                        *(_DWORD *)unint64_t v107 = *(_DWORD *)v108;
                      }
                      v103 -= 64;
                    }
                    while (&v24[v103] != v22);
                    long long v110 = &v101[v103];
                    long long v187 = &v100[64 * v97];
                    long long v24 = v101 + 64;
                    if (v22) {
LABEL_169:
                    }
                      operator delete(v22);
                  }
                  long long v22 = v110;
                }
                sub_4089D4((uint64_t)v22, (uint64_t)v24, (v24 - v22) >> 6);
LABEL_101:
                if (++v72 == v71) {
                  break;
                }
                continue;
              }
            }
          }
        }
      }
      int v111 = -1;
      while (2)
      {
        int v112 = -1;
LABEL_178:
        unsigned int v113 = sub_511FC(v64);
        char v114 = v113 & 0xFE;
        unsigned int v115 = v64 & ~(-1 << (v113 & 0xFE));
        int v116 = sub_51938(v115);
        int v117 = sub_51938(v115 >> 1);
        int v118 = 1 << (v113 >> 1);
        unsigned int v119 = (int)(((((((v116 + v111) & ~((v116 + v111) >> 31)) - (v116 + v111) + ((v116 + v111) >> 31)) >> (v113 >> 1))
                     + ((v116 + v111) >> 31)) << (v113 >> 1))
                   + v116
                   + v111)
             % v118;
        unsigned int v120 = (int)(((((((v117 + v112) & ~((v117 + v112) >> 31)) - (v117 + v112) + ((v117 + v112) >> 31)) >> (v113 >> 1))
                     + ((v117 + v112) >> 31)) << (v113 >> 1))
                   + v117
                   + v112)
             % v118;
        int v121 = -1 << (v113 >> 1);
        if (~v121 < v119) {
          unsigned int v122 = ~v121;
        }
        else {
          unsigned int v122 = v119;
        }
        if (~v121 < v120) {
          unsigned int v123 = ~v121;
        }
        else {
          unsigned int v123 = v120;
        }
        sub_518C8(v122, v123);
        uint64_t v125 = v124 | (1 << v114);
        int v191 = v124 | (1 << v114);
        unint64_t v23 = v201 - 1;
        uint64_t v126 = (v201 - 1) & v125;
        int v127 = *((_DWORD *)v203 + v126);
        if (v202 != v127)
        {
          if (v199)
          {
            uint64_t v136 = 1;
            while (v198 == v127 || v125 != v127)
            {
              uint64_t v126 = (v126 + v136) & v23;
              int v127 = *((_DWORD *)v203 + v126);
              ++v136;
              if (v202 == v127) {
                goto LABEL_185;
              }
            }
          }
          else
          {
            uint64_t v152 = 1;
            while (v125 != v127)
            {
              uint64_t v126 = (v126 + v152) & v23;
              int v127 = *((_DWORD *)v203 + v126);
              ++v152;
              if (v202 == v127) {
                goto LABEL_185;
              }
            }
          }
          if (v126 != -1)
          {
            a1 = v190;
            goto LABEL_177;
          }
        }
LABEL_185:
        sub_408B84((uint64_t)&v193, 1);
        uint64_t v128 = v199;
        uint64_t v129 = v201 - 1;
        uint64_t v130 = (v201 - 1) & v191;
        int v131 = *((_DWORD *)v203 + v130);
        if (v202 == v131)
        {
          a1 = v190;
          goto LABEL_187;
        }
        a1 = v190;
        if (v199)
        {
          uint64_t v132 = -1;
          uint64_t v137 = 1;
          do
          {
            if (v198 == v131)
            {
              if (v132 == -1) {
                uint64_t v132 = v130;
              }
            }
            else if (v191 == v131)
            {
              goto LABEL_211;
            }
            uint64_t v130 = (v130 + v137) & v129;
            int v131 = *((_DWORD *)v203 + v130);
            ++v137;
          }
          while (v202 != v131);
          if (v132 == -1) {
LABEL_187:
          }
            uint64_t v132 = v130;
        }
        else
        {
          uint64_t v153 = 1;
          while (v191 != v131)
          {
            uint64_t v130 = (v130 + v153) & v129;
            int v131 = *((_DWORD *)v203 + v130);
            ++v153;
            if (v202 == v131)
            {
              uint64_t v128 = 0;
              goto LABEL_187;
            }
          }
LABEL_211:
          if (v130 != -1) {
            goto LABEL_194;
          }
          uint64_t v132 = -1;
        }
        if ((unint64_t)(v200 - v128) >= 0x3FFFFFFFFFFFFFFFLL)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "insert overflow");
        }
        if (v128 && v198 == *((_DWORD *)v203 + v132)) {
          uint64_t v199 = v128 - 1;
        }
        else {
          ++v200;
        }
        *((_DWORD *)v203 + v132) = v191;
LABEL_194:
        sub_383CC((unsigned int *)&v191, (uint64_t)&v210);
        double v134 = sub_35C04((unsigned int *)&v210, v189, 0, v133);
        int v135 = v205 - __p;
        LODWORD(v23) = v206;
        if (v206 == (v205 - (unsigned char *)__p) >> 3)
        {
          if (v134 >= *(double *)__p) {
            goto LABEL_177;
          }
        }
        else if (v134 >= 1.79769313e308)
        {
          goto LABEL_177;
        }
        if (v134 >= v15) {
          goto LABEL_177;
        }
        unsigned int v138 = v191;
        if (v24 < v187)
        {
          *(double *)long long v24 = v134;
          *((_DWORD *)v24 + 14) = 0;
          *((_DWORD *)v24 + 2) = v138;
          v24 += 64;
          unint64_t v139 = v24 - v22;
          if (v24 - v22 < 65) {
            goto LABEL_177;
          }
          goto LABEL_245;
        }
        uint64_t v140 = (v24 - v22) >> 6;
        unint64_t v141 = v140 + 1;
        if ((unint64_t)(v140 + 1) >> 58) {
          sub_2E00();
        }
        if ((v187 - v22) >> 5 > v141) {
          unint64_t v141 = (v187 - v22) >> 5;
        }
        if ((unint64_t)(v187 - v22) >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v142 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v142 = v141;
        }
        if (v142 >> 58) {
          sub_188D718();
        }
        uint64_t v143 = (char *)operator new(v142 << 6);
        unint64_t v144 = &v143[64 * v140];
        *(double *)unint64_t v144 = v134;
        *((_DWORD *)v144 + 14) = 0;
        *((_DWORD *)v144 + 2) = v138;
        if (v24 == v22)
        {
          long long v154 = &v143[64 * v140];
          int v135 = v143 + (v142 << 6);
          long long v187 = &v143[64 * v142];
          long long v24 = v144 + 64;
          if (v22) {
            goto LABEL_243;
          }
        }
        else
        {
          uint64_t v145 = 0;
          do
          {
            BOOL v148 = &v144[v145];
            *((void *)v148 - 8) = *(void *)&v24[v145 - 64];
            uint64_t v149 = &v144[v145 - 56];
            unint64_t v150 = &v24[v145 - 56];
            int v151 = *(_DWORD *)&v24[v145 - 8];
            *((_DWORD *)v148 - 2) = v151;
            if (v151 == 1)
            {
              long long v146 = *(_OWORD *)v150;
              long long v147 = *(_OWORD *)&v24[v145 - 24];
              *(_OWORD *)&v144[v145 - 40] = *(_OWORD *)&v24[v145 - 40];
              *(_OWORD *)&v144[v145 - 24] = v147;
              *(_OWORD *)uint64_t v149 = v146;
            }
            else if (!v151)
            {
              *(_DWORD *)uint64_t v149 = *(_DWORD *)v150;
            }
            v145 -= 64;
            LODWORD(v23) = v24 + v145;
          }
          while (&v24[v145] != v22);
          long long v154 = &v144[v145];
          int v135 = v143 + (v142 << 6);
          long long v187 = &v143[64 * v142];
          long long v24 = v144 + 64;
          if (v22) {
LABEL_243:
          }
            operator delete(v22);
        }
        long long v22 = v154;
        unint64_t v139 = v24 - v154;
        if (v24 - v154 < 65) {
          goto LABEL_177;
        }
LABEL_245:
        unint64_t v23 = ((v139 >> 6) - 2) >> 1;
        long long v155 = (double *)&v22[64 * v23];
        uint64_t v156 = v24 - 64;
        double v157 = *((double *)v24 - 8);
        double v158 = *v155;
        if (*v155 <= v157) {
          goto LABEL_177;
        }
        int v159 = *((_DWORD *)v24 - 2);
        if (v159 == 1)
        {
          int v135 = *((_DWORD *)v24 - 14);
          long long v160 = *(_OWORD *)(v24 - 52);
          long long v161 = *(_OWORD *)(v24 - 36);
          *(_OWORD *)&v207[28] = *(_OWORD *)(v24 - 24);
          *(_OWORD *)long long v207 = v160;
          *(_OWORD *)&v207[16] = v161;
        }
        else if (!v159)
        {
          int v135 = *((_DWORD *)v24 - 14);
        }
        do
        {
          long long v162 = v155;
          *(double *)uint64_t v156 = v158;
          long long v163 = v156 + 8;
          uint64_t v164 = (long long *)(v162 + 1);
          if (v156 != (char *)v162)
          {
            int v165 = *((_DWORD *)v156 + 14);
            int v166 = *((_DWORD *)v162 + 14);
            if (v165 == v166)
            {
              if (v165 == 1)
              {
                long long v167 = *v164;
                long long v168 = *(_OWORD *)(v162 + 3);
                *(_OWORD *)(v156 + 36) = *(_OWORD *)((char *)v162 + 36);
                *long long v163 = v167;
                *(_OWORD *)(v156 + 24) = v168;
              }
              else if (!v165)
              {
                *(_DWORD *)long long v163 = *(_DWORD *)v164;
              }
            }
            else
            {
              if (v166 == 1)
              {
                long long v169 = *v164;
                long long v170 = *(_OWORD *)(v162 + 5);
                *(_OWORD *)(v156 + 24) = *(_OWORD *)(v162 + 3);
                *(_OWORD *)(v156 + 40) = v170;
                *long long v163 = v169;
              }
              else if (!v166)
              {
                *(_DWORD *)long long v163 = *(_DWORD *)v164;
              }
              *((_DWORD *)v156 + 14) = *((_DWORD *)v162 + 14);
            }
          }
          if (!v23) {
            break;
          }
          unint64_t v23 = (v23 - 1) >> 1;
          long long v155 = (double *)&v22[64 * v23];
          double v158 = *v155;
          uint64_t v156 = (char *)v162;
        }
        while (*v155 > v157);
        *long long v162 = v157;
        LODWORD(v23) = *((_DWORD *)v162 + 14);
        if (v23 == v159)
        {
          if (v159 == 1)
          {
            *((_DWORD *)v162 + 2) = v135;
            long long v171 = *(_OWORD *)v207;
            long long v172 = *(_OWORD *)&v207[16];
            *(double *)((char *)v162 + 44) = *(double *)&v207[32];
            *(_OWORD *)((char *)v162 + 28) = v172;
            *(_OWORD *)((char *)v162 + 12) = v171;
          }
          else if (!v159)
          {
            *(_DWORD *)uint64_t v164 = v135;
          }
        }
        else
        {
          if (v159 == 1)
          {
            *((_DWORD *)v162 + 2) = v135;
            long long v173 = *(_OWORD *)v207;
            long long v174 = *(_OWORD *)&v207[16];
            *(_OWORD *)(v162 + 5) = *(_OWORD *)&v207[28];
            *(_OWORD *)((char *)v162 + 28) = v174;
            *(_OWORD *)((char *)v162 + 12) = v173;
          }
          else if (!v159)
          {
            *(_DWORD *)uint64_t v164 = v135;
            *((_DWORD *)v162 + 14) = 0;
            goto LABEL_177;
          }
          *((_DWORD *)v162 + 14) = v159;
        }
LABEL_177:
        if (++v112 == 2)
        {
          if (++v111 == 2) {
            goto LABEL_21;
          }
          continue;
        }
        goto LABEL_178;
      }
    }
    long long v61 = *a1;
    long long v62 = a1[1];
    if (*a1 != v62)
    {
      LODWORD(v23) = DWORD2(v208[0]);
      while (*((_DWORD *)v61 + 2) != DWORD2(v208[0]) || *((_DWORD *)v61 + 3) != HIDWORD(v208[0]))
      {
        v61 += 48;
        if (v61 == v62)
        {
          long long v61 = a1[1];
          break;
        }
      }
    }
    if (v61 == v62) {
      sub_408220(a1, v208);
    }
LABEL_21:
    if (v22 == v24) {
      goto LABEL_279;
    }
  }
  long long v24 = v22;
LABEL_279:
  if (v203) {
    free(v203);
  }
  if (v24) {
    operator delete(v24);
  }
  if (__p)
  {
    long long v205 = __p;
    operator delete(__p);
  }
}

void sub_10AB268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (a32)
  {
    free(a32);
    if (!v35)
    {
LABEL_3:
      long long v37 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
    goto LABEL_3;
  }
  operator delete(v35);
  long long v37 = __p;
  if (!__p)
  {
LABEL_4:
    long long v38 = *(void **)a21;
    if (!*(void *)a21) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v37);
  long long v38 = *(void **)a21;
  if (!*(void *)a21) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  *(void *)(a21 + 8) = v38;
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

double sub_10AB34C(unint64_t a1, long long *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    long long v11 = (double *)(a2 - 3);
    uint64_t v12 = (double *)(a2 - 6);
    long long v13 = (double *)(a2 - 9);
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 4);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return a5.n128_f64[0];
              case 2:
                double v117 = *((double *)a2 - 6);
                int v116 = a2 - 3;
                a5.n128_f64[0] = v117;
                if (v117 <= *(double *)v14) {
                  return a5.n128_f64[0];
                }
                goto LABEL_101;
              case 3:
                int v118 = (__n128 *)(v14 + 48);
                a5.n128_u64[0] = *(void *)(v14 + 48);
                double v119 = *((double *)a2 - 6);
                int v116 = a2 - 3;
                double v120 = v119;
                if (a5.n128_f64[0] > *(double *)v14)
                {
                  if (v120 <= a5.n128_f64[0])
                  {
                    *(_OWORD *)v254 = *(_OWORD *)(v14 + 16);
                    *(_OWORD *)&v254[16] = *(_OWORD *)(v14 + 32);
                    __n128 v219 = *(__n128 *)v14;
                    long long v180 = *(_OWORD *)(v14 + 64);
                    *(__n128 *)unint64_t v14 = *v118;
                    *(_OWORD *)(v14 + 16) = v180;
                    *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
                    *int v118 = v219;
                    *(_OWORD *)(v14 + 64) = *(_OWORD *)v254;
                    *(_OWORD *)(v14 + 76) = *(_OWORD *)&v254[12];
                    a5.n128_u64[0] = *(void *)v116;
                    if (*(double *)v116 <= *(double *)(v14 + 48)) {
                      return a5.n128_f64[0];
                    }
                    long long v123 = *(_OWORD *)(v14 + 64);
                    *(_DWORD *)&v243[12] = HIDWORD(v123);
                    *(_OWORD *)&v243[16] = *(_OWORD *)(v14 + 80);
                    a5 = *v118;
                    long long v182 = *v116;
                    long long v181 = v116[1];
                    *(_OWORD *)(v14 + 76) = *(long long *)((char *)v116 + 28);
                    *int v118 = (__n128)v182;
                    *(_OWORD *)(v14 + 64) = v181;
                  }
                  else
                  {
LABEL_101:
                    *(_OWORD *)int v243 = *(_OWORD *)(v14 + 16);
                    *(_OWORD *)&v243[16] = *(_OWORD *)(v14 + 32);
                    __n128 v212 = *(__n128 *)v14;
                    long long v121 = *v116;
                    long long v122 = v116[1];
                    *(_OWORD *)(v14 + 28) = *(long long *)((char *)v116 + 28);
                    *(_OWORD *)unint64_t v14 = v121;
                    *(_OWORD *)(v14 + 16) = v122;
                    a5 = v212;
                    long long v123 = *(_OWORD *)v243;
                  }
                  *(long long *)((char *)v116 + 28) = *(_OWORD *)&v243[12];
                  *int v116 = (__int128)a5;
                  v116[1] = v123;
                  return a5.n128_f64[0];
                }
                if (v120 > a5.n128_f64[0])
                {
                  *(_OWORD *)v251 = *(_OWORD *)(v14 + 64);
                  *(_OWORD *)&v251[16] = *(_OWORD *)(v14 + 80);
                  a5 = *v118;
                  long long v174 = *v116;
                  long long v173 = v116[1];
                  *(_OWORD *)(v14 + 76) = *(long long *)((char *)v116 + 28);
                  *int v118 = (__n128)v174;
                  *(_OWORD *)(v14 + 64) = v173;
                  *(long long *)((char *)v116 + 28) = *(_OWORD *)&v251[12];
                  *int v116 = (__int128)a5;
                  v116[1] = *(_OWORD *)v251;
                  a5.n128_u64[0] = *(void *)(v14 + 48);
                  if (a5.n128_f64[0] > *(double *)v14)
                  {
                    *(_OWORD *)v252 = *(_OWORD *)(v14 + 16);
                    *(_OWORD *)&v252[16] = *(_OWORD *)(v14 + 32);
                    __n128 v217 = *(__n128 *)v14;
                    long long v175 = *(_OWORD *)(v14 + 64);
                    *(__n128 *)unint64_t v14 = *v118;
                    *(_OWORD *)(v14 + 16) = v175;
                    *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
                    *int v118 = v217;
                    *(_OWORD *)(v14 + 64) = *(_OWORD *)v252;
                    a5.n128_u64[0] = *(void *)&v252[12];
                    *(_OWORD *)(v14 + 76) = *(_OWORD *)&v252[12];
                  }
                }
                break;
              case 4:
                a5.n128_u64[0] = sub_10A9DB4((long long *)v14, (long long *)(v14 + 48), (long long *)(v14 + 96), a2 - 3).n128_u64[0];
                return a5.n128_f64[0];
              case 5:
                int v124 = (long long *)(v14 + 48);
                uint64_t v125 = (__n128 *)(v14 + 96);
                uint64_t v126 = (__n128 *)(v14 + 144);
                sub_10A9DB4((long long *)v14, (long long *)(v14 + 48), (long long *)(v14 + 96), (long long *)(v14 + 144));
                double v128 = *((double *)a2 - 6);
                int v127 = a2 - 3;
                a5.n128_f64[0] = v128;
                if (v128 > *(double *)(v14 + 144))
                {
                  *(_OWORD *)unsigned int v244 = *(_OWORD *)(v14 + 160);
                  *(_OWORD *)&v244[16] = *(_OWORD *)(v14 + 176);
                  a5 = *v126;
                  __n128 v130 = (__n128)*v127;
                  long long v129 = v127[1];
                  *(_OWORD *)(v14 + 172) = *(long long *)((char *)v127 + 28);
                  __n128 *v126 = v130;
                  *(_OWORD *)(v14 + 160) = v129;
                  *(long long *)((char *)v127 + 28) = *(_OWORD *)&v244[12];
                  *int v127 = (__int128)a5;
                  v127[1] = *(_OWORD *)v244;
                  a5.n128_u64[0] = v126->n128_u64[0];
                  if (v126->n128_f64[0] > v125->n128_f64[0])
                  {
                    __n128 v131 = *v125;
                    *(_OWORD *)unsigned int v245 = *(_OWORD *)(v14 + 112);
                    *(_OWORD *)&v245[16] = *(_OWORD *)(v14 + 128);
                    long long v132 = *(_OWORD *)(v14 + 160);
                    *uint64_t v125 = *v126;
                    *(_OWORD *)(v14 + 112) = v132;
                    *(_OWORD *)(v14 + 124) = *(_OWORD *)(v14 + 172);
                    __n128 *v126 = v131;
                    *(_OWORD *)(v14 + 160) = *(_OWORD *)v245;
                    *(_OWORD *)(v14 + 172) = *(_OWORD *)&v245[12];
                    a5.n128_u64[0] = v125->n128_u64[0];
                    if (v125->n128_f64[0] > *(double *)v124)
                    {
                      long long v133 = *v124;
                      *(_OWORD *)int v246 = *(_OWORD *)(v14 + 64);
                      *(_OWORD *)&v246[16] = *(_OWORD *)(v14 + 80);
                      long long v134 = *(_OWORD *)(v14 + 112);
                      *int v124 = (__int128)*v125;
                      *(_OWORD *)(v14 + 64) = v134;
                      *(_OWORD *)(v14 + 76) = *(_OWORD *)(v14 + 124);
                      *uint64_t v125 = (__n128)v133;
                      *(_OWORD *)(v14 + 112) = *(_OWORD *)v246;
                      *(_OWORD *)(v14 + 124) = *(_OWORD *)&v246[12];
                      a5.n128_u64[0] = *(void *)(v14 + 48);
                      if (a5.n128_f64[0] > *(double *)v14)
                      {
                        *(_OWORD *)int v247 = *(_OWORD *)(v14 + 16);
                        *(_OWORD *)&v247[16] = *(_OWORD *)(v14 + 32);
                        long long v213 = *(_OWORD *)v14;
                        long long v135 = *(_OWORD *)(v14 + 64);
                        *(_OWORD *)unint64_t v14 = *v124;
                        *(_OWORD *)(v14 + 16) = v135;
                        *(_OWORD *)(v14 + 28) = *(_OWORD *)(v14 + 76);
                        *int v124 = v213;
                        *(_OWORD *)(v14 + 64) = *(_OWORD *)v247;
                        a5.n128_u64[0] = *(void *)&v247[12];
                        *(_OWORD *)(v14 + 76) = *(_OWORD *)&v247[12];
                      }
                    }
                  }
                }
                return a5.n128_f64[0];
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v15 <= 1151)
          {
            uint64_t v136 = (long long *)(v14 + 48);
            BOOL v138 = (long long *)v14 == a2 || v136 == a2;
            if (a4)
            {
              if (!v138)
              {
                uint64_t v139 = 0;
                unint64_t v140 = v14;
                do
                {
                  unint64_t v142 = v136;
                  a5.n128_u64[0] = *(void *)(v140 + 48);
                  if (a5.n128_f64[0] > *(double *)v140)
                  {
                    long long v214 = *(_OWORD *)(v140 + 56);
                    long long v248 = *(_OWORD *)(v140 + 72);
                    uint64_t v255 = *(void *)(v140 + 88);
                    uint64_t v143 = v139;
                    do
                    {
                      unint64_t v144 = (_OWORD *)(v14 + v143);
                      long long v145 = *(_OWORD *)(v14 + v143 + 16);
                      v144[3] = *(_OWORD *)(v14 + v143);
                      v144[4] = v145;
                      *(_OWORD *)((char *)v144 + 76) = *(_OWORD *)(v14 + v143 + 28);
                      if (!v143)
                      {
                        uint64_t v141 = v14;
                        goto LABEL_121;
                      }
                      v143 -= 48;
                    }
                    while (a5.n128_f64[0] > *((double *)v144 - 6));
                    uint64_t v141 = v14 + v143 + 48;
LABEL_121:
                    *(void *)uint64_t v141 = a5.n128_u64[0];
                    a5.n128_u64[0] = v214;
                    *(_DWORD *)(v141 + 40) = v255;
                    *(_OWORD *)(v141 + 24) = v248;
                    *(_OWORD *)(v141 + 8) = v214;
                  }
                  uint64_t v136 = v142 + 3;
                  v139 += 48;
                  unint64_t v140 = (unint64_t)v142;
                }
                while (v142 + 3 != a2);
              }
            }
            else if (!v138)
            {
              do
              {
                unint64_t v176 = (unint64_t)v136;
                a5.n128_u64[0] = *(void *)(a1 + 48);
                if (a5.n128_f64[0] > *(double *)a1)
                {
                  long long v218 = *(_OWORD *)(a1 + 56);
                  long long v253 = *(_OWORD *)(a1 + 72);
                  uint64_t v257 = *(void *)(a1 + 88);
                  long long v177 = v136;
                  do
                  {
                    long long v178 = *(v177 - 2);
                    long long *v177 = *(v177 - 3);
                    v177[1] = v178;
                    *(long long *)((char *)v177 + 28) = *(long long *)((char *)v177 - 20);
                    double v179 = *((double *)v177 - 12);
                    v177 -= 3;
                  }
                  while (a5.n128_f64[0] > v179);
                  *(void *)long long v177 = a5.n128_u64[0];
                  a5.n128_u64[0] = v218;
                  *((_DWORD *)v177 + 10) = v257;
                  *(long long *)((char *)v177 + 24) = v253;
                  *(long long *)((char *)v177 + 8) = v218;
                }
                v136 += 3;
                a1 = v176;
              }
              while ((long long *)(v176 + 48) != a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if ((long long *)v14 != a2)
            {
              int64_t v146 = (unint64_t)(v16 - 2) >> 1;
              int64_t v147 = v146;
              do
              {
                if (v146 >= v147)
                {
                  uint64_t v149 = (2 * v147) | 1;
                  unint64_t v150 = v14 + 48 * v149;
                  if (2 * v147 + 2 < v16 && *(double *)v150 > *(double *)(v150 + 48))
                  {
                    v150 += 48;
                    uint64_t v149 = 2 * v147 + 2;
                  }
                  unint64_t v151 = v14 + 48 * v147;
                  double v152 = *(double *)v151;
                  if (*(double *)v150 <= *(double *)v151)
                  {
                    uint64_t v256 = *(void *)(v151 + 40);
                    long long v215 = *(_OWORD *)(v151 + 8);
                    long long v249 = *(_OWORD *)(v151 + 24);
                    do
                    {
                      uint64_t v153 = (_OWORD *)v151;
                      unint64_t v151 = v150;
                      long long v154 = *(_OWORD *)v150;
                      long long v155 = *(_OWORD *)(v150 + 16);
                      *(_OWORD *)((char *)v153 + 28) = *(_OWORD *)(v150 + 28);
                      *uint64_t v153 = v154;
                      v153[1] = v155;
                      if (v146 < v149) {
                        break;
                      }
                      uint64_t v156 = 2 * v149;
                      uint64_t v149 = (2 * v149) | 1;
                      unint64_t v150 = v14 + 48 * v149;
                      uint64_t v157 = v156 + 2;
                      if (v157 < v16 && *(double *)v150 > *(double *)(v150 + 48))
                      {
                        v150 += 48;
                        uint64_t v149 = v157;
                      }
                    }
                    while (*(double *)v150 <= v152);
                    *(double *)unint64_t v151 = v152;
                    *(_DWORD *)(v151 + 40) = v256;
                    *(_OWORD *)(v151 + 24) = v249;
                    *(_OWORD *)(v151 + 8) = v215;
                  }
                }
                BOOL v148 = v147-- <= 0;
              }
              while (!v148);
              int64_t v158 = v15 / 0x30uLL;
              do
              {
                uint64_t v159 = 0;
                *(_OWORD *)unint64_t v250 = *(_OWORD *)(v14 + 16);
                *(_OWORD *)&v250[16] = *(_OWORD *)(v14 + 32);
                long long v216 = *(_OWORD *)v14;
                long long v160 = (long long *)v14;
                do
                {
                  long long v163 = v160;
                  v160 += 3 * v159 + 3;
                  uint64_t v164 = 2 * v159;
                  uint64_t v159 = (2 * v159) | 1;
                  int64_t v165 = v164 + 2;
                  if (v165 < v158 && *(double *)v160 > *((double *)v160 + 6))
                  {
                    v160 += 3;
                    uint64_t v159 = v165;
                  }
                  long long v161 = *v160;
                  long long v162 = v160[1];
                  *(long long *)((char *)v163 + 28) = *(long long *)((char *)v160 + 28);
                  *long long v163 = v161;
                  v163[1] = v162;
                }
                while (v159 <= (uint64_t)((unint64_t)(v158 - 2) >> 1));
                a2 -= 3;
                if (v160 == a2)
                {
                  a5.n128_u64[0] = v216;
                  *(long long *)((char *)v160 + 28) = *(_OWORD *)&v250[12];
                  *long long v160 = v216;
                  v160[1] = *(_OWORD *)v250;
                }
                else
                {
                  a5 = (__n128)*a2;
                  long long v166 = a2[1];
                  *(long long *)((char *)v160 + 28) = *(long long *)((char *)a2 + 28);
                  *long long v160 = (__int128)a5;
                  v160[1] = v166;
                  a5.n128_u64[0] = v216;
                  *(long long *)((char *)a2 + 28) = *(_OWORD *)&v250[12];
                  *a2 = v216;
                  a2[1] = *(_OWORD *)v250;
                  uint64_t v167 = (uint64_t)v160 - v14 + 48;
                  if (v167 >= 49)
                  {
                    unint64_t v168 = (v167 / 0x30uLL - 2) >> 1;
                    long long v169 = (long long *)(v14 + 48 * v168);
                    a5.n128_u64[0] = *(void *)v160;
                    if (*(double *)v169 > *(double *)v160)
                    {
                      uint64_t v192 = *((void *)v160 + 5);
                      long long v186 = *(long long *)((char *)v160 + 8);
                      long long v189 = *(long long *)((char *)v160 + 24);
                      do
                      {
                        long long v170 = v160;
                        long long v160 = v169;
                        long long v171 = *v169;
                        long long v172 = v169[1];
                        *(long long *)((char *)v170 + 28) = *(long long *)((char *)v169 + 28);
                        *long long v170 = v171;
                        v170[1] = v172;
                        if (!v168) {
                          break;
                        }
                        unint64_t v168 = (v168 - 1) >> 1;
                        long long v169 = (long long *)(v14 + 48 * v168);
                      }
                      while (*(double *)v169 > a5.n128_f64[0]);
                      *(void *)long long v160 = a5.n128_u64[0];
                      a5.n128_u64[0] = v186;
                      *((_DWORD *)v160 + 10) = v192;
                      *(long long *)((char *)v160 + 24) = v189;
                      *(long long *)((char *)v160 + 8) = v186;
                    }
                  }
                }
                BOOL v148 = v158-- <= 2;
              }
              while (!v148);
            }
            return a5.n128_f64[0];
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          long long v18 = (long long *)(v14 + 48 * ((unint64_t)v16 >> 1));
          double v19 = *v11;
          if ((unint64_t)v15 >= 0x1801) {
            break;
          }
          double v23 = *(double *)v14;
          if (*(double *)v14 > *(double *)v18)
          {
            if (v19 <= v23)
            {
              *(_OWORD *)unint64_t v230 = v18[1];
              *(_OWORD *)&v230[16] = v18[2];
              long long v201 = *v18;
              long long v54 = *(_OWORD *)v14;
              long long v55 = *(_OWORD *)(v14 + 16);
              *(long long *)((char *)v18 + 28) = *(_OWORD *)(v14 + 28);
              *long long v18 = v54;
              v18[1] = v55;
              *(_OWORD *)(v14 + 28) = *(_OWORD *)&v230[12];
              *(_OWORD *)unint64_t v14 = v201;
              *(_OWORD *)(v14 + 16) = *(_OWORD *)v230;
              if (*v11 <= *(double *)v14) {
                goto LABEL_32;
              }
              *(_OWORD *)v221 = *(_OWORD *)(v14 + 16);
              *(_OWORD *)&v221[16] = *(_OWORD *)(v14 + 32);
              long long v194 = *(_OWORD *)v14;
              long long v56 = *(_OWORD *)v11;
              long long v57 = *(a2 - 2);
              *(_OWORD *)(v14 + 28) = *(long long *)((char *)a2 - 20);
              *(_OWORD *)unint64_t v14 = v56;
              *(_OWORD *)(v14 + 16) = v57;
            }
            else
            {
              *(_OWORD *)v221 = v18[1];
              *(_OWORD *)&v221[16] = v18[2];
              long long v194 = *v18;
              long long v24 = *(_OWORD *)v11;
              long long v25 = *(a2 - 2);
              *(long long *)((char *)v18 + 28) = *(long long *)((char *)a2 - 20);
              *long long v18 = v24;
              v18[1] = v25;
            }
            *(long long *)((char *)a2 - 20) = *(_OWORD *)&v221[12];
            *(_OWORD *)long long v11 = v194;
            *(a2 - 2) = *(_OWORD *)v221;
LABEL_32:
            --a3;
            double v34 = *(double *)v14;
            if (a4) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
          if (v19 <= v23) {
            goto LABEL_32;
          }
          *(_OWORD *)v224 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)&v224[16] = *(_OWORD *)(v14 + 32);
          long long v197 = *(_OWORD *)v14;
          long long v30 = *(_OWORD *)v11;
          long long v31 = *(a2 - 2);
          *(_OWORD *)(v14 + 28) = *(long long *)((char *)a2 - 20);
          *(_OWORD *)unint64_t v14 = v30;
          *(_OWORD *)(v14 + 16) = v31;
          *(long long *)((char *)a2 - 20) = *(_OWORD *)&v224[12];
          *(_OWORD *)long long v11 = v197;
          *(a2 - 2) = *(_OWORD *)v224;
          if (*(double *)v14 <= *(double *)v18) {
            goto LABEL_32;
          }
          *(_OWORD *)v225 = v18[1];
          *(_OWORD *)&v225[16] = v18[2];
          long long v198 = *v18;
          long long v32 = *(_OWORD *)v14;
          long long v33 = *(_OWORD *)(v14 + 16);
          *(long long *)((char *)v18 + 28) = *(_OWORD *)(v14 + 28);
          *long long v18 = v32;
          v18[1] = v33;
          *(_OWORD *)(v14 + 28) = *(_OWORD *)&v225[12];
          *(_OWORD *)unint64_t v14 = v198;
          *(_OWORD *)(v14 + 16) = *(_OWORD *)v225;
          --a3;
          double v34 = *(double *)v14;
          if (a4) {
            goto LABEL_57;
          }
LABEL_56:
          if (*(double *)(v14 - 48) > v34) {
            goto LABEL_57;
          }
          uint64_t v191 = *(void *)(v14 + 40);
          long long v185 = *(_OWORD *)(v14 + 8);
          long long v188 = *(_OWORD *)(v14 + 24);
          if (v34 > *v11)
          {
            do
            {
              double v106 = *(double *)(v14 + 48);
              v14 += 48;
            }
            while (v34 <= v106);
          }
          else
          {
            unint64_t v107 = v14 + 48;
            do
            {
              unint64_t v14 = v107;
              if (v107 >= (unint64_t)a2) {
                break;
              }
              v107 += 48;
            }
            while (v34 <= *(double *)v14);
          }
          int v108 = a2;
          if (v14 < (unint64_t)a2)
          {
            int v108 = a2;
            do
            {
              double v109 = *((double *)v108 - 6);
              v108 -= 3;
            }
            while (v34 > v109);
          }
          while (v14 < (unint64_t)v108)
          {
            *(_OWORD *)int v242 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v242[16] = *(_OWORD *)(v14 + 32);
            long long v211 = *(_OWORD *)v14;
            long long v110 = *v108;
            long long v111 = v108[1];
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)v108 + 28);
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 16) = v111;
            *(long long *)((char *)v108 + 28) = *(_OWORD *)&v242[12];
            *int v108 = v211;
            v108[1] = *(_OWORD *)v242;
            do
            {
              double v112 = *(double *)(v14 + 48);
              v14 += 48;
            }
            while (v34 <= v112);
            do
            {
              double v113 = *((double *)v108 - 6);
              v108 -= 3;
            }
            while (v34 > v113);
          }
          BOOL v5 = v14 - 48 >= a1;
          BOOL v6 = v14 - 48 == a1;
          if (v14 - 48 != a1)
          {
            long long v114 = *(_OWORD *)(v14 - 48);
            long long v115 = *(_OWORD *)(v14 - 32);
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
            *(_OWORD *)a1 = v114;
            *(_OWORD *)(a1 + 16) = v115;
          }
          a4 = 0;
          *(double *)(v14 - 48) = v34;
          a5.n128_u64[0] = v185;
          *(_DWORD *)(v14 - 8) = v191;
          *(_OWORD *)(v14 - 24) = v188;
          *(_OWORD *)(v14 - 40) = v185;
        }
        double v20 = *(double *)v18;
        if (*(double *)v18 <= *(double *)v14)
        {
          if (v19 > v20)
          {
            *(_OWORD *)uint64_t v222 = v18[1];
            *(_OWORD *)&v222[16] = v18[2];
            long long v195 = *v18;
            long long v26 = *(_OWORD *)v11;
            long long v27 = *(a2 - 2);
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)a2 - 20);
            *long long v18 = v26;
            v18[1] = v27;
            *(long long *)((char *)a2 - 20) = *(_OWORD *)&v222[12];
            *(_OWORD *)long long v11 = v195;
            *(a2 - 2) = *(_OWORD *)v222;
            if (*(double *)v18 > *(double *)v14)
            {
              *(_OWORD *)v223 = *(_OWORD *)(v14 + 16);
              *(_OWORD *)&v223[16] = *(_OWORD *)(v14 + 32);
              long long v196 = *(_OWORD *)v14;
              long long v28 = *v18;
              long long v29 = v18[1];
              *(_OWORD *)(v14 + 28) = *(long long *)((char *)v18 + 28);
              *(_OWORD *)unint64_t v14 = v28;
              *(_OWORD *)(v14 + 16) = v29;
              *(long long *)((char *)v18 + 28) = *(_OWORD *)&v223[12];
              *long long v18 = v196;
              v18[1] = *(_OWORD *)v223;
            }
          }
        }
        else
        {
          if (v19 <= v20)
          {
            *(_OWORD *)v226 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v226[16] = *(_OWORD *)(v14 + 32);
            long long v199 = *(_OWORD *)v14;
            long long v35 = *v18;
            long long v36 = v18[1];
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)v18 + 28);
            *(_OWORD *)unint64_t v14 = v35;
            *(_OWORD *)(v14 + 16) = v36;
            *(long long *)((char *)v18 + 28) = *(_OWORD *)&v226[12];
            *long long v18 = v199;
            v18[1] = *(_OWORD *)v226;
            if (*v11 <= *(double *)v18) {
              goto LABEL_23;
            }
            *(_OWORD *)unsigned int v220 = v18[1];
            *(_OWORD *)&v220[16] = v18[2];
            long long v193 = *v18;
            long long v37 = *(_OWORD *)v11;
            long long v38 = *(a2 - 2);
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)a2 - 20);
            *long long v18 = v37;
            v18[1] = v38;
          }
          else
          {
            *(_OWORD *)unsigned int v220 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v220[16] = *(_OWORD *)(v14 + 32);
            long long v193 = *(_OWORD *)v14;
            long long v21 = *(_OWORD *)v11;
            long long v22 = *(a2 - 2);
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)a2 - 20);
            *(_OWORD *)unint64_t v14 = v21;
            *(_OWORD *)(v14 + 16) = v22;
          }
          *(long long *)((char *)a2 - 20) = *(_OWORD *)&v220[12];
          *(_OWORD *)long long v11 = v193;
          *(a2 - 2) = *(_OWORD *)v220;
        }
LABEL_23:
        long long v39 = (double *)(v14 + 48);
        unint64_t v40 = v14 + 48 * v17;
        double v42 = *(double *)(v40 - 48);
        uint64_t v41 = (long long *)(v40 - 48);
        double v43 = v42;
        double v44 = *v12;
        if (v42 <= *(double *)(v14 + 48))
        {
          if (v44 > v43)
          {
            *(_OWORD *)v228 = v41[1];
            *(_OWORD *)&v228[16] = v41[2];
            long long v200 = *v41;
            long long v49 = *(_OWORD *)v12;
            long long v50 = *(a2 - 5);
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)a2 - 68);
            long long *v41 = v49;
            v41[1] = v50;
            *(long long *)((char *)a2 - 68) = *(_OWORD *)&v228[12];
            *(_OWORD *)uint64_t v12 = v200;
            *(a2 - 5) = *(_OWORD *)v228;
            if (*(double *)v41 > *v39)
            {
              *(_OWORD *)unint64_t v229 = *(_OWORD *)(v14 + 64);
              *(_OWORD *)&v229[16] = *(_OWORD *)(v14 + 80);
              long long v51 = *(_OWORD *)v39;
              long long v53 = *v41;
              long long v52 = v41[1];
              *(_OWORD *)(v14 + 76) = *(long long *)((char *)v41 + 28);
              *(_OWORD *)long long v39 = v53;
              *(_OWORD *)(v14 + 64) = v52;
              *(long long *)((char *)v41 + 28) = *(_OWORD *)&v229[12];
              long long *v41 = v51;
              v41[1] = *(_OWORD *)v229;
            }
          }
        }
        else
        {
          if (v44 <= v43)
          {
            *(_OWORD *)unint64_t v231 = *(_OWORD *)(v14 + 64);
            *(_OWORD *)&v231[16] = *(_OWORD *)(v14 + 80);
            long long v58 = *(_OWORD *)v39;
            long long v60 = *v41;
            long long v59 = v41[1];
            *(_OWORD *)(v14 + 76) = *(long long *)((char *)v41 + 28);
            *(_OWORD *)long long v39 = v60;
            *(_OWORD *)(v14 + 64) = v59;
            *(long long *)((char *)v41 + 28) = *(_OWORD *)&v231[12];
            long long *v41 = v58;
            v41[1] = *(_OWORD *)v231;
            if (*v12 <= *(double *)v41) {
              goto LABEL_37;
            }
            *(_OWORD *)uint64_t v227 = v41[1];
            *(_OWORD *)&v227[16] = v41[2];
            long long v202 = *v41;
            long long v61 = *(_OWORD *)v12;
            long long v62 = *(a2 - 5);
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)a2 - 68);
            long long *v41 = v61;
            v41[1] = v62;
            long long v46 = v202;
            long long v45 = *(_OWORD *)v227;
          }
          else
          {
            long long v45 = *(_OWORD *)(v14 + 64);
            *(_DWORD *)&v227[12] = HIDWORD(v45);
            *(_OWORD *)&v227[16] = *(_OWORD *)(v14 + 80);
            long long v46 = *(_OWORD *)v39;
            long long v48 = *(_OWORD *)v12;
            long long v47 = *(a2 - 5);
            *(_OWORD *)(v14 + 76) = *(long long *)((char *)a2 - 68);
            *(_OWORD *)long long v39 = v48;
            *(_OWORD *)(v14 + 64) = v47;
          }
          *(long long *)((char *)a2 - 68) = *(_OWORD *)&v227[12];
          *(_OWORD *)uint64_t v12 = v46;
          *(a2 - 5) = v45;
        }
LABEL_37:
        int v63 = (double *)(v14 + 96);
        unint64_t v64 = v14 + 48 * v17;
        double v66 = *(double *)(v64 + 48);
        uint64_t v65 = (long long *)(v64 + 48);
        double v67 = v66;
        double v68 = *v13;
        if (v66 <= *(double *)(v14 + 96))
        {
          if (v68 > v67)
          {
            *(_OWORD *)unint64_t v233 = v65[1];
            *(_OWORD *)&v233[16] = v65[2];
            long long v203 = *v65;
            long long v73 = *(_OWORD *)v13;
            long long v74 = *(a2 - 8);
            *(long long *)((char *)v65 + 28) = *(long long *)((char *)a2 - 116);
            *uint64_t v65 = v73;
            v65[1] = v74;
            *(long long *)((char *)a2 - 116) = *(_OWORD *)&v233[12];
            *(_OWORD *)long long v13 = v203;
            *(a2 - 8) = *(_OWORD *)v233;
            if (*(double *)v65 > *v63)
            {
              *(_OWORD *)BOOL v234 = *(_OWORD *)(v14 + 112);
              *(_OWORD *)&v234[16] = *(_OWORD *)(v14 + 128);
              long long v75 = *(_OWORD *)v63;
              long long v77 = *v65;
              long long v76 = v65[1];
              *(_OWORD *)(v14 + 124) = *(long long *)((char *)v65 + 28);
              *(_OWORD *)int v63 = v77;
              *(_OWORD *)(v14 + 112) = v76;
              *(long long *)((char *)v65 + 28) = *(_OWORD *)&v234[12];
              *uint64_t v65 = v75;
              v65[1] = *(_OWORD *)v234;
            }
          }
        }
        else
        {
          if (v68 <= v67)
          {
            *(_OWORD *)unsigned int v235 = *(_OWORD *)(v14 + 112);
            *(_OWORD *)&v235[16] = *(_OWORD *)(v14 + 128);
            long long v78 = *(_OWORD *)v63;
            long long v80 = *v65;
            long long v79 = v65[1];
            *(_OWORD *)(v14 + 124) = *(long long *)((char *)v65 + 28);
            *(_OWORD *)int v63 = v80;
            *(_OWORD *)(v14 + 112) = v79;
            *(long long *)((char *)v65 + 28) = *(_OWORD *)&v235[12];
            *uint64_t v65 = v78;
            v65[1] = *(_OWORD *)v235;
            if (*v13 <= *(double *)v65) {
              goto LABEL_46;
            }
            *(_OWORD *)unint64_t v232 = v65[1];
            *(_OWORD *)&v232[16] = v65[2];
            long long v204 = *v65;
            long long v81 = *(_OWORD *)v13;
            long long v82 = *(a2 - 8);
            *(long long *)((char *)v65 + 28) = *(long long *)((char *)a2 - 116);
            *uint64_t v65 = v81;
            v65[1] = v82;
            long long v70 = v204;
            long long v69 = *(_OWORD *)v232;
          }
          else
          {
            long long v69 = *(_OWORD *)(v14 + 112);
            *(_DWORD *)&v232[12] = HIDWORD(v69);
            *(_OWORD *)&v232[16] = *(_OWORD *)(v14 + 128);
            long long v70 = *(_OWORD *)v63;
            long long v72 = *(_OWORD *)v13;
            long long v71 = *(a2 - 8);
            *(_OWORD *)(v14 + 124) = *(long long *)((char *)a2 - 116);
            *(_OWORD *)int v63 = v72;
            *(_OWORD *)(v14 + 112) = v71;
          }
          *(long long *)((char *)a2 - 116) = *(_OWORD *)&v232[12];
          *(_OWORD *)long long v13 = v70;
          *(a2 - 8) = v69;
        }
LABEL_46:
        double v83 = *(double *)v18;
        double v84 = *(double *)v65;
        if (*(double *)v18 <= *(double *)v41)
        {
          if (v84 > v83)
          {
            *(_OWORD *)v237 = v18[1];
            *(_OWORD *)&v237[16] = v18[2];
            long long v206 = *v18;
            long long v86 = v65[1];
            *long long v18 = *v65;
            v18[1] = v86;
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)v65 + 28);
            *(long long *)((char *)v65 + 28) = *(_OWORD *)&v237[12];
            *uint64_t v65 = v206;
            v65[1] = *(_OWORD *)v237;
            if (*(double *)v18 > *(double *)v41)
            {
              *(_OWORD *)uint64_t v238 = v41[1];
              *(_OWORD *)&v238[16] = v41[2];
              long long v207 = *v41;
              long long v87 = v18[1];
              long long *v41 = *v18;
              v41[1] = v87;
              *(long long *)((char *)v41 + 28) = *(long long *)((char *)v18 + 28);
              *(long long *)((char *)v18 + 28) = *(_OWORD *)&v238[12];
              *long long v18 = v207;
              v18[1] = *(_OWORD *)v238;
            }
          }
        }
        else
        {
          if (v84 <= v83)
          {
            *(_OWORD *)v239 = v41[1];
            *(_OWORD *)&v239[16] = v41[2];
            long long v208 = *v41;
            long long v88 = v18[1];
            long long *v41 = *v18;
            v41[1] = v88;
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)v18 + 28);
            *(long long *)((char *)v18 + 28) = *(_OWORD *)&v239[12];
            *long long v18 = v208;
            v18[1] = *(_OWORD *)v239;
            if (*(double *)v65 <= *(double *)v18) {
              goto LABEL_55;
            }
            *(_OWORD *)uint64_t v236 = v18[1];
            *(_OWORD *)&v236[16] = v18[2];
            long long v205 = *v18;
            long long v89 = v65[1];
            *long long v18 = *v65;
            v18[1] = v89;
            *(long long *)((char *)v18 + 28) = *(long long *)((char *)v65 + 28);
          }
          else
          {
            *(_OWORD *)uint64_t v236 = v41[1];
            *(_OWORD *)&v236[16] = v41[2];
            long long v205 = *v41;
            long long v85 = v65[1];
            long long *v41 = *v65;
            v41[1] = v85;
            *(long long *)((char *)v41 + 28) = *(long long *)((char *)v65 + 28);
          }
          *(long long *)((char *)v65 + 28) = *(_OWORD *)&v236[12];
          *uint64_t v65 = v205;
          v65[1] = *(_OWORD *)v236;
        }
LABEL_55:
        *(_OWORD *)v240 = *(_OWORD *)(v14 + 16);
        *(_OWORD *)&v240[16] = *(_OWORD *)(v14 + 32);
        long long v209 = *(_OWORD *)v14;
        long long v90 = *v18;
        long long v91 = v18[1];
        *(_OWORD *)(v14 + 28) = *(long long *)((char *)v18 + 28);
        *(_OWORD *)unint64_t v14 = v90;
        *(_OWORD *)(v14 + 16) = v91;
        *(long long *)((char *)v18 + 28) = *(_OWORD *)&v240[12];
        *long long v18 = v209;
        v18[1] = *(_OWORD *)v240;
        --a3;
        double v34 = *(double *)v14;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_57:
        uint64_t v92 = 0;
        uint64_t v190 = *(void *)(v14 + 40);
        long long v184 = *(_OWORD *)(v14 + 8);
        long long v187 = *(_OWORD *)(v14 + 24);
        do
        {
          double v93 = *(double *)(v14 + v92 + 48);
          v92 += 48;
        }
        while (v93 > v34);
        unint64_t v94 = v14 + v92;
        uint64_t v95 = a2;
        if (v92 == 48)
        {
          uint64_t v95 = a2;
          do
          {
            if (v94 >= (unint64_t)v95) {
              break;
            }
            double v97 = *((double *)v95 - 6);
            v95 -= 3;
          }
          while (v97 <= v34);
        }
        else
        {
          do
          {
            double v96 = *((double *)v95 - 6);
            v95 -= 3;
          }
          while (v96 <= v34);
        }
        v14 += v92;
        if (v94 < (unint64_t)v95)
        {
          int v98 = v95;
          do
          {
            *(_OWORD *)v241 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)&v241[16] = *(_OWORD *)(v14 + 32);
            long long v210 = *(_OWORD *)v14;
            long long v99 = *v98;
            long long v100 = v98[1];
            *(_OWORD *)(v14 + 28) = *(long long *)((char *)v98 + 28);
            *(_OWORD *)unint64_t v14 = v99;
            *(_OWORD *)(v14 + 16) = v100;
            *(long long *)((char *)v98 + 28) = *(_OWORD *)&v241[12];
            long long *v98 = v210;
            v98[1] = *(_OWORD *)v241;
            do
            {
              double v101 = *(double *)(v14 + 48);
              v14 += 48;
            }
            while (v101 > v34);
            do
            {
              double v102 = *((double *)v98 - 6);
              v98 -= 3;
            }
            while (v102 <= v34);
          }
          while (v14 < (unint64_t)v98);
        }
        if (v14 - 48 != a1)
        {
          long long v103 = *(_OWORD *)(v14 - 48);
          long long v104 = *(_OWORD *)(v14 - 32);
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(v14 - 20);
          *(_OWORD *)a1 = v103;
          *(_OWORD *)(a1 + 16) = v104;
        }
        *(double *)(v14 - 48) = v34;
        *(_DWORD *)(v14 - 8) = v190;
        *(_OWORD *)(v14 - 24) = v187;
        *(_OWORD *)(v14 - 40) = v184;
        if (v94 >= (unint64_t)v95) {
          break;
        }
LABEL_76:
        sub_10AB34C(a1, v14 - 48, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v105 = sub_10AC320((long long *)a1, (long long *)(v14 - 48));
      if (sub_10AC320((long long *)v14, a2)) {
        break;
      }
      if (!v105) {
        goto LABEL_76;
      }
    }
    a2 = (long long *)(v14 - 48);
    if (!v105) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL sub_10AC320(long long *a1, long long *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = a2 - 3;
      if (*((double *)a2 - 6) > *(double *)a1) {
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      unint64_t v7 = a1 + 3;
      double v8 = *((double *)a1 + 6);
      BOOL v6 = a2 - 3;
      double v9 = *((double *)a2 - 6);
      if (v8 <= *(double *)a1)
      {
        if (v9 > v8)
        {
          long long v36 = *v7;
          *(_OWORD *)uint64_t v65 = a1[4];
          *(_OWORD *)&v65[16] = a1[5];
          long long v37 = *(long long *)((char *)a2 - 20);
          long long v38 = *(a2 - 2);
          *unint64_t v7 = *v6;
          a1[4] = v38;
          *(long long *)((char *)a1 + 76) = v37;
          long long *v6 = v36;
          *(a2 - 2) = *(_OWORD *)v65;
          *(long long *)((char *)a2 - 20) = *(_OWORD *)&v65[12];
          if (*((double *)a1 + 6) > *(double *)a1)
          {
            long long v39 = *a1;
            *(_OWORD *)double v66 = a1[1];
            *(_OWORD *)&v66[16] = a1[2];
            long long v40 = a1[4];
            *a1 = *v7;
            a1[1] = v40;
            *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
            *unint64_t v7 = v39;
            a1[4] = *(_OWORD *)v66;
            *(long long *)((char *)a1 + 76) = *(_OWORD *)&v66[12];
          }
        }
      }
      else
      {
        if (v9 > v8)
        {
LABEL_7:
          long long v10 = a1[1];
          long long v11 = *a1;
          *(_DWORD *)long long v72 = HIDWORD(v10);
          *(_OWORD *)&v72[4] = a1[2];
          long long v12 = *(long long *)((char *)v6 + 28);
          long long v13 = v6[1];
          *a1 = *v6;
          a1[1] = v13;
          *(long long *)((char *)a1 + 28) = v12;
LABEL_8:
          long long *v6 = v11;
          v6[1] = v10;
          *(long long *)((char *)v6 + 28) = *(_OWORD *)v72;
          return result;
        }
        long long v45 = *a1;
        *(_OWORD *)long long v69 = a1[1];
        *(_OWORD *)&v69[16] = a1[2];
        long long v46 = a1[4];
        *a1 = *v7;
        a1[1] = v46;
        *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
        *unint64_t v7 = v45;
        a1[4] = *(_OWORD *)v69;
        *(long long *)((char *)a1 + 76) = *(_OWORD *)&v69[12];
        if (*(double *)v6 > *((double *)a1 + 6))
        {
          long long v10 = a1[4];
          long long v11 = *v7;
          *(_DWORD *)long long v72 = HIDWORD(v10);
          *(_OWORD *)&v72[4] = a1[5];
          long long v47 = *(long long *)((char *)a2 - 20);
          long long v48 = *(a2 - 2);
          *unint64_t v7 = *v6;
          a1[4] = v48;
          *(long long *)((char *)a1 + 76) = v47;
          goto LABEL_8;
        }
      }
      return result;
    case 4uLL:
      sub_10A9DB4(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      long long v22 = a1 + 3;
      double v23 = a1 + 6;
      long long v24 = a1 + 9;
      sub_10A9DB4(a1, a1 + 3, a1 + 6, a1 + 9);
      double v26 = *((double *)a2 - 6);
      long long v25 = a2 - 3;
      if (v26 > *((double *)a1 + 18))
      {
        long long v27 = *v24;
        *(_OWORD *)long long v61 = a1[10];
        *(_OWORD *)&v61[16] = a1[11];
        long long v28 = *(long long *)((char *)v25 + 28);
        long long v29 = v25[1];
        long long *v24 = *v25;
        a1[10] = v29;
        *(long long *)((char *)a1 + 172) = v28;
        *long long v25 = v27;
        v25[1] = *(_OWORD *)v61;
        *(long long *)((char *)v25 + 28) = *(_OWORD *)&v61[12];
        if (*(double *)v24 > *(double *)v23)
        {
          long long v30 = *v23;
          *(_OWORD *)long long v62 = a1[7];
          *(_OWORD *)&v62[16] = a1[8];
          long long v31 = a1[10];
          *double v23 = *v24;
          a1[7] = v31;
          *(long long *)((char *)a1 + 124) = *(long long *)((char *)a1 + 172);
          long long *v24 = v30;
          a1[10] = *(_OWORD *)v62;
          *(long long *)((char *)a1 + 172) = *(_OWORD *)&v62[12];
          if (*(double *)v23 > *(double *)v22)
          {
            long long v32 = *v22;
            *(_OWORD *)int v63 = a1[4];
            *(_OWORD *)&v63[16] = a1[5];
            long long v33 = a1[7];
            *long long v22 = *v23;
            a1[4] = v33;
            *(long long *)((char *)a1 + 76) = *(long long *)((char *)a1 + 124);
            *double v23 = v32;
            a1[7] = *(_OWORD *)v63;
            *(long long *)((char *)a1 + 124) = *(_OWORD *)&v63[12];
            if (*((double *)a1 + 6) > *(double *)a1)
            {
              long long v34 = *a1;
              *(_OWORD *)unint64_t v64 = a1[1];
              *(_OWORD *)&v64[16] = a1[2];
              long long v35 = a1[4];
              *a1 = *v22;
              a1[1] = v35;
              *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
              *long long v22 = v34;
              a1[4] = *(_OWORD *)v64;
              *(long long *)((char *)a1 + 76) = *(_OWORD *)&v64[12];
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v14 = a1 + 6;
      double v15 = *((double *)a1 + 12);
      uint64_t v16 = a1 + 3;
      double v17 = *((double *)a1 + 6);
      double v18 = *(double *)a1;
      if (v17 <= *(double *)a1)
      {
        if (v15 > v17)
        {
          long long v41 = *v16;
          *(_OWORD *)double v67 = a1[4];
          *(_OWORD *)&v67[16] = a1[5];
          long long v42 = a1[7];
          *uint64_t v16 = *v14;
          a1[4] = v42;
          *(long long *)((char *)a1 + 76) = *(long long *)((char *)a1 + 124);
          *unint64_t v14 = v41;
          a1[7] = *(_OWORD *)v67;
          *(long long *)((char *)a1 + 124) = *(_OWORD *)&v67[12];
          if (*(double *)v16 > v18)
          {
            long long v43 = *a1;
            *(_OWORD *)double v68 = a1[1];
            *(_OWORD *)&v68[16] = a1[2];
            long long v44 = a1[4];
            *a1 = *v16;
            a1[1] = v44;
            *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
            *uint64_t v16 = v43;
            a1[4] = *(_OWORD *)v68;
            *(long long *)((char *)a1 + 76) = *(_OWORD *)&v68[12];
          }
        }
      }
      else
      {
        if (v15 <= v17)
        {
          long long v49 = *a1;
          *(_OWORD *)long long v70 = a1[1];
          *(_OWORD *)&v70[16] = a1[2];
          long long v50 = a1[4];
          *a1 = *v16;
          a1[1] = v50;
          *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
          *uint64_t v16 = v49;
          a1[4] = *(_OWORD *)v70;
          *(long long *)((char *)a1 + 76) = *(_OWORD *)&v70[12];
          if (v15 <= *((double *)a1 + 6)) {
            goto LABEL_29;
          }
          long long v19 = a1[4];
          long long v20 = *v16;
          *(_DWORD *)long long v73 = HIDWORD(v19);
          *(_OWORD *)&v73[4] = a1[5];
          long long v51 = a1[7];
          *uint64_t v16 = *v14;
          a1[4] = v51;
          *(long long *)((char *)a1 + 76) = *(long long *)((char *)a1 + 124);
        }
        else
        {
          long long v19 = a1[1];
          long long v20 = *a1;
          *(_DWORD *)long long v73 = HIDWORD(v19);
          *(_OWORD *)&v73[4] = a1[2];
          long long v21 = a1[7];
          *a1 = *v14;
          a1[1] = v21;
          *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 124);
        }
        *unint64_t v14 = v20;
        a1[7] = v19;
        *(long long *)((char *)a1 + 124) = *(_OWORD *)v73;
      }
LABEL_29:
      long long v52 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v53 = 0;
      int v54 = 0;
      while (1)
      {
        double v56 = *(double *)v52;
        if (*(double *)v52 > *(double *)v14)
        {
          long long v60 = *(long long *)((char *)v52 + 8);
          long long v71 = *(long long *)((char *)v52 + 24);
          uint64_t v74 = *((void *)v52 + 5);
          uint64_t v57 = v53;
          do
          {
            long long v58 = (char *)a1 + v57;
            long long v59 = *(long long *)((char *)a1 + v57 + 112);
            *((_OWORD *)v58 + 9) = *(long long *)((char *)a1 + v57 + 96);
            *((_OWORD *)v58 + 10) = v59;
            *(_OWORD *)(v58 + 172) = *(long long *)((char *)a1 + v57 + 124);
            if (v57 == -96)
            {
              uint64_t v55 = (uint64_t)a1;
              goto LABEL_32;
            }
            v57 -= 48;
          }
          while (v56 > *((double *)v58 + 6));
          uint64_t v55 = (uint64_t)a1 + v57 + 144;
LABEL_32:
          *(double *)uint64_t v55 = v56;
          *(_OWORD *)(v55 + 8) = v60;
          *(_OWORD *)(v55 + 24) = v71;
          *(_DWORD *)(v55 + 40) = v74;
          if (++v54 == 8) {
            return v52 + 3 == a2;
          }
        }
        unint64_t v14 = v52;
        v53 += 48;
        v52 += 3;
        if (v52 == a2) {
          return 1;
        }
      }
  }
}

char *sub_10AC81C(char **a1, long long *a2)
{
  BOOL v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    long long v10 = *a1;
    uint64_t v11 = (v5 - *a1) >> 6;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 58) {
      sub_2E00();
    }
    uint64_t v13 = v4 - (void)v10;
    if (v13 >> 5 > v12) {
      unint64_t v12 = v13 >> 5;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 58) {
        sub_188D718();
      }
      double v15 = (char *)operator new(v14 << 6);
    }
    else
    {
      double v15 = 0;
    }
    long long v16 = a2[1];
    double v17 = &v15[64 * v11];
    *(_OWORD *)double v17 = *a2;
    *((_OWORD *)v17 + 1) = v16;
    *((void *)v17 + 4) = *((void *)a2 + 4);
    *((_DWORD *)v17 + 10) = *((_DWORD *)a2 + 10);
    *((void *)v17 + 6) = *((void *)a2 + 6);
    char v18 = *((unsigned char *)a2 + 56);
    double v9 = v17 + 64;
    v17[56] = v18;
    if (v5 != v10)
    {
      do
      {
        long long v19 = *((_OWORD *)v5 - 4);
        long long v20 = *((_OWORD *)v5 - 3);
        *((void *)v17 - 4) = *((void *)v5 - 4);
        *((_OWORD *)v17 - 4) = v19;
        *((_OWORD *)v17 - 3) = v20;
        *((_WORD *)v17 - 12) = *((_WORD *)v5 - 12);
        *((_WORD *)v17 - 11) = *((_WORD *)v5 - 11);
        uint64_t v21 = *((void *)v5 - 2);
        *(v17 - 8) = *(v5 - 8);
        *((void *)v17 - 2) = v21;
        v17 -= 64;
        v5 -= 64;
      }
      while (v5 != v10);
      BOOL v5 = *a1;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = &v15[64 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)BOOL v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    *((_WORD *)v5 + 20) = *((_WORD *)a2 + 20);
    *((_WORD *)v5 + 21) = *((_WORD *)a2 + 21);
    uint64_t v8 = *((void *)a2 + 6);
    v5[56] = *((unsigned char *)a2 + 56);
    *((void *)v5 + 6) = v8;
    double v9 = v5 + 64;
  }
  a1[1] = v9;
  return v9 - 64;
}

void sub_10AC998()
{
}

__n128 sub_10AC9AC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = off_243F890;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_10ACA08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243F890;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10ACA48(uint64_t a1, unint64_t *a2)
{
  return sub_10A8628(a1 + 8, *a2);
}

uint64_t sub_10ACA54(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing11RoadSnapper14snap_candidateERKNS0_12WaterSnapperERKNS0_15LocationDetailsENS0_11Fer"
                     "ryOptionENS_4data13SnapPointTypeEbRKNSt3__113unordered_setINS9_17TypeSafeObjectRefINS9_16RoadSegmen"
                     "tIdTagEEENSB_4hashISF_EENSB_8equal_toISF_EENSB_9allocatorISF_EEEEbE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing11RoadSnapper14snap_candidateERKNS0_12WaterSnapperERKNS0_15LocationDetail"
                                "sENS0_11FerryOptionENS_4data13SnapPointTypeEbRKNSt3__113unordered_setINS9_17TypeSafeObje"
                                "ctRefINS9_16RoadSegmentIdTagEEENSB_4hashISF_EENSB_8equal_toISF_EENSB_9allocatorISF_EEEEbE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing11RoadSnapper14snap_candidateERKNS0_12WaterSnapperERKNS0_15LocationDetailsENS0_11FerryOptionENS_4data13SnapPointTypeEbRKNSt3__113unordered_setINS9_17TypeSafeObjectRefINS9_16RoadSegmentIdTagEEENSB_4hashISF_EENSB_8equal_toISF_EENSB_9allocatorISF_EEEEbE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing11RoadSnapper14snap_candidateERKNS0_12WaterSnapperERKNS0_15LocationDetailsENS0_11FerryOptionENS_4data13SnapPointTypeEbRKNSt3__113unordered_setINS9_17TypeSafeObjectRefINS9_16RoadSegmentIdTagEEENSB_4hashISF_EENSB_8equal_toISF_EENSB_9allocatorISF_EEEEbE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10ACAC4()
{
}

char *sub_10ACAD0(char **a1, long long *a2, _DWORD *a3)
{
  long long v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v12 = *a1;
    unint64_t v13 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x1C71C71C71C71C7) {
      unint64_t v16 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    uint64_t v17 = 72 * v16;
    char v18 = (char *)operator new(72 * v16);
    long long v19 = a2[1];
    long long v20 = &v18[72 * v13];
    *(_OWORD *)long long v20 = *a2;
    *((_OWORD *)v20 + 1) = v19;
    *((void *)v20 + 4) = *((void *)a2 + 4);
    *((_DWORD *)v20 + 10) = *((_DWORD *)a2 + 10);
    *((void *)v20 + 6) = *((void *)a2 + 6);
    v20[56] = *((unsigned char *)a2 + 56);
    *((_DWORD *)v20 + 16) = *a3;
    uint64_t v11 = v20 + 72;
    if (v7 != v12)
    {
      uint64_t v21 = 0;
      do
      {
        long long v22 = &v20[v21];
        long long v23 = *(_OWORD *)&v7[v21 - 72];
        long long v24 = *(_OWORD *)&v7[v21 - 56];
        *((void *)v22 - 5) = *(void *)&v7[v21 - 40];
        *(_OWORD *)(v22 - 56) = v24;
        *(_OWORD *)(v22 - 72) = v23;
        *((_WORD *)v22 - 16) = *(_WORD *)&v7[v21 - 32];
        *((_WORD *)v22 - 15) = *(_WORD *)&v7[v21 - 30];
        uint64_t v25 = *(void *)&v7[v21 - 24];
        *(v22 - 16) = v7[v21 - 16];
        *((void *)v22 - 3) = v25;
        *((_DWORD *)v22 - 2) = *(_DWORD *)&v7[v21 - 8];
        v21 -= 72;
      }
      while (&v7[v21] != v12);
      v20 += v21;
    }
    *a1 = v20;
    a1[1] = v11;
    a1[2] = &v18[v17];
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *((void *)v7 + 4) = *((void *)a2 + 4);
    *(_OWORD *)long long v7 = v8;
    *((_OWORD *)v7 + 1) = v9;
    *((_WORD *)v7 + 20) = *((_WORD *)a2 + 20);
    *((_WORD *)v7 + 21) = *((_WORD *)a2 + 21);
    uint64_t v10 = *((void *)a2 + 6);
    v7[56] = *((unsigned char *)a2 + 56);
    *((void *)v7 + 6) = v10;
    *((_DWORD *)v7 + 16) = *a3;
    uint64_t v11 = v7 + 72;
  }
  a1[1] = v11;
  return v11 - 72;
}

float sub_10ACCB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, float result)
{
  uint64_t v10 = &v210;
LABEL_2:
  long long v208 = (uint64_t *)(a2 - 72);
  long long v205 = (uint64_t *)(a2 - 216);
  long long v206 = (uint64_t *)(a2 - 144);
  unint64_t v11 = a1;
  uint64_t v207 = a2;
  while (1)
  {
    a1 = v11;
    uint64_t v12 = a2 - v11;
    unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v11) >> 3);
    if (v6 || !v5) {
      break;
    }
    if (v12 <= 1727)
    {
      if (a4)
      {
        if (v11 == a2) {
          return result;
        }
        long long v103 = (void *)(v11 + 72);
        if (v11 + 72 == a2) {
          return result;
        }
        uint64_t v104 = 0;
        unint64_t v105 = v11;
        while (2)
        {
          int v108 = v103;
          __n128 result = *(float *)(v105 + 136);
          if (result < *(float *)(v105 + 64))
          {
            uint64_t v109 = *v103;
            *(void *)long long v215 = *(void *)(v105 + 80);
            *(_DWORD *)&v215[8] = *(_DWORD *)(v105 + 88);
            *(_DWORD *)&v219[16] = *(_DWORD *)(v105 + 108);
            *(_OWORD *)__n128 v219 = *(_OWORD *)(v105 + 92);
            unsigned int v110 = *(unsigned __int16 *)(v105 + 112);
            unsigned int v111 = *(unsigned __int16 *)(v105 + 114);
            *(void *)&v212[4] = *(void *)(v105 + 120);
            v212[12] = *(unsigned char *)(v105 + 128);
            uint64_t v112 = v104;
            __n128 result = *(float *)(v105 + 136);
            while (1)
            {
              uint64_t v113 = v11 + v112;
              uint64_t v114 = *(void *)(v11 + v112 + 8);
              *(void *)(v113 + 72) = *(void *)(v11 + v112);
              *(void *)(v113 + 80) = v114;
              *(_DWORD *)(v113 + 88) = *(_DWORD *)(v11 + v112 + 16);
              *(_OWORD *)(v113 + 96) = *(_OWORD *)(v11 + v112 + 24);
              char v115 = *(unsigned char *)(v11 + v112 + 41);
              if (v115)
              {
                *(unsigned char *)(v113 + 112) = *(unsigned char *)(v113 + 40);
                char v115 = 1;
              }
              *(unsigned char *)(v113 + 113) = v115;
              if (*(unsigned char *)(v113 + 43))
              {
                *(unsigned char *)(v11 + v112 + 114) = *(unsigned char *)(v11 + v112 + 42);
                char v116 = 1;
              }
              else
              {
                char v116 = 0;
              }
              uint64_t v117 = v11 + v112;
              *(unsigned char *)(v117 + 115) = v116;
              *(void *)(v117 + 120) = *(void *)(v11 + v112 + 48);
              *(unsigned char *)(v117 + 128) = *(unsigned char *)(v11 + v112 + 56);
              *(_DWORD *)(v117 + 136) = *(_DWORD *)(v11 + v112 + 64);
              if (!v112) {
                break;
              }
              v112 -= 72;
              if (result >= *(float *)(v117 - 8))
              {
                uint64_t v118 = v11 + v112 + 72;
                goto LABEL_139;
              }
            }
            uint64_t v118 = v11;
LABEL_139:
            *(void *)uint64_t v118 = v109;
            uint64_t v119 = *(void *)v215;
            *(_DWORD *)(v117 + 16) = *(_DWORD *)&v215[8];
            *(void *)(v117 + 8) = v119;
            *(_OWORD *)(v117 + 24) = *(_OWORD *)&v219[4];
            if (v110 < 0x100)
            {
              *(unsigned char *)(v118 + 41) = 0;
              if (v111 >= 0x100) {
                goto LABEL_125;
              }
LABEL_141:
              char v106 = 0;
            }
            else
            {
              *(unsigned char *)(v118 + 40) = v110;
              *(unsigned char *)(v118 + 41) = 1;
              if (v111 < 0x100) {
                goto LABEL_141;
              }
LABEL_125:
              *(unsigned char *)(v118 + 42) = v111;
              char v106 = 1;
            }
            *(unsigned char *)(v118 + 43) = v106;
            uint64_t v107 = *(void *)&v212[4];
            *(unsigned char *)(v117 + 56) = v212[12];
            *(void *)(v117 + 48) = v107;
            *(float *)(v118 + 64) = result;
          }
          long long v103 = v108 + 9;
          v104 += 72;
          unint64_t v105 = (unint64_t)v108;
          if (v108 + 9 == (void *)a2) {
            return result;
          }
          continue;
        }
      }
      if (v11 == a2) {
        return result;
      }
      long long v189 = (void *)(v11 + 72);
      if (v11 + 72 == a2) {
        return result;
      }
      uint64_t v190 = (_DWORD *)(v11 + 136);
      while (2)
      {
        long long v194 = v189;
        __n128 result = *(float *)(a1 + 136);
        if (result < *(float *)(a1 + 64))
        {
          uint64_t v195 = *v189;
          *(void *)long long v215 = *(void *)(a1 + 80);
          *(_DWORD *)&v215[8] = *(_DWORD *)(a1 + 88);
          *(_DWORD *)&v219[16] = *(_DWORD *)(a1 + 108);
          *(_OWORD *)__n128 v219 = *(_OWORD *)(a1 + 92);
          unsigned int v196 = *(unsigned __int16 *)(a1 + 112);
          unsigned int v197 = *(unsigned __int16 *)(a1 + 114);
          *(void *)&v212[4] = *(void *)(a1 + 120);
          v212[12] = *(unsigned char *)(a1 + 128);
          long long v198 = v190;
          __n128 result = *(float *)(a1 + 136);
          do
          {
            uint64_t v199 = *((void *)v198 - 16);
            *((void *)v198 - 8) = *((void *)v198 - 17);
            *((void *)v198 - 7) = v199;
            *(v198 - 12) = *(v198 - 30);
            *(_OWORD *)(v198 - 10) = *((_OWORD *)v198 - 7);
            char v200 = *((unsigned char *)v198 - 95);
            if (v200)
            {
              *((unsigned char *)v198 - 24) = *((unsigned char *)v198 - 96);
              char v200 = 1;
            }
            *((unsigned char *)v198 - 23) = v200;
            char v201 = *((unsigned char *)v198 - 93);
            if (v201)
            {
              *((unsigned char *)v198 - 22) = *((unsigned char *)v198 - 94);
              char v201 = 1;
            }
            *((unsigned char *)v198 - 21) = v201;
            *((void *)v198 - 2) = *((void *)v198 - 11);
            *((unsigned char *)v198 - 8) = *((unsigned char *)v198 - 80);
            long long v202 = (float *)(v198 - 18);
            _DWORD *v198 = *(v198 - 18);
            float v203 = *((float *)v198 - 36);
            v198 -= 18;
          }
          while (result < v203);
          *((void *)v202 - 8) = v195;
          uint64_t v204 = *(void *)v215;
          *(v202 - 12) = *(float *)&v215[8];
          *((void *)v202 - 7) = v204;
          *(_OWORD *)(v202 - 10) = *(_OWORD *)&v219[4];
          if (v196 < 0x100)
          {
            *((unsigned char *)v202 - 23) = 0;
            if (v197 >= 0x100) {
              goto LABEL_215;
            }
LABEL_227:
            char v191 = 0;
          }
          else
          {
            *((unsigned char *)v202 - 24) = v196;
            *((unsigned char *)v202 - 23) = 1;
            if (v197 < 0x100) {
              goto LABEL_227;
            }
LABEL_215:
            *((unsigned char *)v202 - 22) = v197;
            char v191 = 1;
          }
          uint64_t v192 = v202 - 4;
          *((unsigned char *)v202 - 21) = v191;
          uint64_t v193 = *(void *)&v212[4];
          *((unsigned char *)v192 + 8) = v212[12];
          *(void *)uint64_t v192 = v193;
          float *v202 = result;
        }
        long long v189 = v194 + 9;
        v190 += 18;
        a1 = (uint64_t)v194;
        if (v194 + 9 == (void *)a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3)
    {
      if (v11 == a2) {
        return result;
      }
      int64_t v120 = (v13 - 2) >> 1;
      int64_t v121 = v120;
      while (2)
      {
        int64_t v123 = v121;
        if (v120 >= v121)
        {
          uint64_t v124 = (2 * v121) | 1;
          unint64_t v125 = v11 + 72 * v124;
          if (2 * v121 + 2 < (uint64_t)v13 && *(float *)(v125 + 64) < *(float *)(v125 + 136))
          {
            v125 += 72;
            uint64_t v124 = 2 * v121 + 2;
          }
          unint64_t v126 = v11 + 72 * v121;
          float v127 = *(float *)(v126 + 64);
          if (*(float *)(v125 + 64) >= v127)
          {
            uint64_t v128 = *(void *)v126;
            uint64_t v129 = *(void *)(v126 + 8);
            *(_DWORD *)&v215[8] = *(_DWORD *)(v126 + 16);
            *(void *)long long v215 = v129;
            long long v130 = *(_OWORD *)(v126 + 20);
            *(_DWORD *)&v219[16] = *(_DWORD *)(v126 + 36);
            *(_OWORD *)__n128 v219 = v130;
            unsigned int v131 = *(unsigned __int16 *)(v126 + 40);
            unsigned int v132 = *(unsigned __int16 *)(v126 + 42);
            uint64_t v133 = *(void *)(v126 + 48);
            v212[12] = *(unsigned char *)(v126 + 56);
            *(void *)&v212[4] = v133;
            do
            {
              unint64_t v134 = v126;
              unint64_t v126 = v125;
              *(void *)unint64_t v134 = *(void *)v125;
              unint64_t v135 = v125 + 8;
              uint64_t v136 = *(void *)(v125 + 8);
              *(_DWORD *)(v134 + 16) = *(_DWORD *)(v125 + 16);
              *(void *)(v134 + 8) = v136;
              *(_OWORD *)(v134 + 24) = *(_OWORD *)(v125 + 24);
              char v137 = *(unsigned char *)(v125 + 41);
              if (v137)
              {
                *(unsigned char *)(v134 + 40) = *(unsigned char *)(v125 + 40);
                char v137 = 1;
              }
              *(unsigned char *)(v134 + 41) = v137;
              char v138 = *(unsigned char *)(v125 + 43);
              if (v138)
              {
                *(unsigned char *)(v134 + 42) = *(unsigned char *)(v125 + 42);
                char v138 = 1;
              }
              *(unsigned char *)(v134 + 43) = v138;
              uint64_t v139 = (void *)(v125 + 48);
              uint64_t v140 = *(void *)(v125 + 48);
              *(unsigned char *)(v134 + 56) = *(unsigned char *)(v126 + 56);
              *(void *)(v134 + 48) = v140;
              *(_DWORD *)(v134 + 64) = *(_DWORD *)(v126 + 64);
              if (v120 < v124) {
                break;
              }
              uint64_t v141 = 2 * v124;
              uint64_t v124 = (2 * v124) | 1;
              unint64_t v125 = v11 + 72 * v124;
              uint64_t v142 = v141 + 2;
              if (v142 < (uint64_t)v13 && *(float *)(v125 + 64) < *(float *)(v125 + 136))
              {
                v125 += 72;
                uint64_t v124 = v142;
              }
            }
            while (*(float *)(v125 + 64) >= v127);
            *(void *)unint64_t v126 = v128;
            int v143 = *(_DWORD *)&v215[8];
            *(void *)unint64_t v135 = *(void *)v215;
            *(_DWORD *)(v135 + 8) = v143;
            *(_OWORD *)(v135 + 16) = *(_OWORD *)&v219[4];
            if (v131 < 0x100)
            {
              *(unsigned char *)(v126 + 41) = 0;
              if (v132 >= 0x100) {
                goto LABEL_146;
              }
LABEL_166:
              char v122 = 0;
            }
            else
            {
              *(unsigned char *)(v126 + 40) = v131;
              *(unsigned char *)(v126 + 41) = 1;
              if (v132 < 0x100) {
                goto LABEL_166;
              }
LABEL_146:
              *(unsigned char *)(v126 + 42) = v132;
              char v122 = 1;
            }
            *(unsigned char *)(v126 + 43) = v122;
            *uint64_t v139 = *(void *)&v212[4];
            *(unsigned char *)(v126 + 56) = v212[12];
            *(float *)(v126 + 64) = v127;
          }
        }
        int64_t v121 = v123 - 1;
        if (v123) {
          continue;
        }
        break;
      }
      int64_t v144 = v12 / 0x48uLL;
      while (2)
      {
        uint64_t v148 = 0;
        uint64_t v149 = *(void *)v11;
        uint64_t v213 = *(void *)(v11 + 8);
        int v214 = *(_DWORD *)(v11 + 16);
        *(_DWORD *)&v212[16] = *(_DWORD *)(v11 + 36);
        *(_OWORD *)__n128 v212 = *(_OWORD *)(v11 + 20);
        unsigned int v150 = *(unsigned __int16 *)(v11 + 40);
        unsigned int v151 = *(unsigned __int16 *)(v11 + 42);
        uint64_t v210 = *(void *)(v11 + 48);
        char v211 = *(unsigned char *)(v11 + 56);
        unint64_t v152 = v11;
        __n128 result = *(float *)(v11 + 64);
        do
        {
          uint64_t v153 = v152 + 72 * v148 + 72;
          uint64_t v154 = 2 * v148;
          uint64_t v148 = (2 * v148) | 1;
          int64_t v155 = v154 + 2;
          if (v155 < v144 && *(float *)(v153 + 64) < *(float *)(v153 + 136))
          {
            v153 += 72;
            uint64_t v148 = v155;
          }
          *(void *)unint64_t v152 = *(void *)v153;
          uint64_t v157 = (uint64_t *)(v153 + 8);
          uint64_t v156 = *(void *)(v153 + 8);
          *(_DWORD *)(v152 + 16) = *(_DWORD *)(v153 + 16);
          *(void *)(v152 + 8) = v156;
          *(_OWORD *)(v152 + 24) = *(_OWORD *)(v153 + 24);
          char v158 = *(unsigned char *)(v153 + 41);
          if (v158)
          {
            *(unsigned char *)(v152 + 40) = *(unsigned char *)(v153 + 40);
            char v158 = 1;
          }
          *(unsigned char *)(v152 + 41) = v158;
          char v159 = *(unsigned char *)(v153 + 43);
          if (v159)
          {
            *(unsigned char *)(v152 + 42) = *(unsigned char *)(v153 + 42);
            char v159 = 1;
          }
          *(unsigned char *)(v152 + 43) = v159;
          long long v160 = (uint64_t *)(v153 + 48);
          uint64_t v161 = *(void *)(v153 + 48);
          *(unsigned char *)(v152 + 56) = *(unsigned char *)(v153 + 56);
          *(void *)(v152 + 48) = v161;
          *(_DWORD *)(v152 + 64) = *(_DWORD *)(v153 + 64);
          unint64_t v152 = v153;
        }
        while (v148 <= (uint64_t)((unint64_t)(v144 - 2) >> 1));
        long long v162 = (_OWORD *)(v153 + 24);
        uint64_t v163 = a2 - 72;
        if (v153 != a2 - 72)
        {
          *(void *)uint64_t v153 = *(void *)(a2 - 72);
          uint64_t v164 = *(void *)(a2 - 64);
          *(_DWORD *)(v153 + 16) = *(_DWORD *)(a2 - 56);
          *uint64_t v157 = v164;
          *long long v162 = *(_OWORD *)(a2 - 48);
          char v165 = *(unsigned char *)(a2 - 31);
          if (v165)
          {
            *(unsigned char *)(v153 + 40) = *(unsigned char *)(a2 - 32);
            char v165 = 1;
          }
          *(unsigned char *)(v153 + 41) = v165;
          char v166 = *(unsigned char *)(a2 - 29);
          if (v166)
          {
            *(unsigned char *)(v153 + 42) = *(unsigned char *)(a2 - 30);
            char v166 = 1;
          }
          *(unsigned char *)(v153 + 43) = v166;
          uint64_t v167 = *(void *)(a2 - 24);
          *(unsigned char *)(v153 + 56) = *(unsigned char *)(a2 - 16);
          *long long v160 = v167;
          *(_DWORD *)(v153 + 64) = *(_DWORD *)(a2 - 8);
          *(void *)(a2 - 72) = v149;
          uint64_t v168 = v213;
          *(_DWORD *)(a2 - 56) = v214;
          *(void *)(a2 - 64) = v168;
          *(_OWORD *)(a2 - 48) = *(_OWORD *)&v212[4];
          if (v150 < 0x100)
          {
            *(unsigned char *)(a2 - 31) = 0;
            if (v151 < 0x100) {
              goto LABEL_207;
            }
LABEL_189:
            *(unsigned char *)(a2 - 30) = v151;
            char v169 = 1;
          }
          else
          {
            *(unsigned char *)(a2 - 32) = v150;
            *(unsigned char *)(a2 - 31) = 1;
            if (v151 >= 0x100) {
              goto LABEL_189;
            }
LABEL_207:
            char v169 = 0;
          }
          *(unsigned char *)(a2 - 29) = v169;
          uint64_t v170 = v210;
          *(unsigned char *)(a2 - 16) = v211;
          *(void *)(a2 - 24) = v170;
          *(float *)(a2 - 8) = result;
          uint64_t v171 = v153 + 72 - v11;
          if (v171 >= 73)
          {
            unint64_t v172 = (v171 / 0x48uLL - 2) >> 1;
            unint64_t v173 = v11 + 72 * v172;
            __n128 result = *(float *)(v153 + 64);
            if (*(float *)(v173 + 64) < result)
            {
              uint64_t v174 = *(void *)v153;
              uint64_t v175 = *v157;
              int v218 = *(_DWORD *)(v153 + 16);
              uint64_t v217 = v175;
              long long v176 = *(_OWORD *)(v153 + 20);
              *(_DWORD *)&v219[16] = *(_DWORD *)(v153 + 36);
              *(_OWORD *)__n128 v219 = v176;
              unsigned int v177 = *(unsigned __int16 *)(v153 + 40);
              unsigned int v178 = *(unsigned __int16 *)(v153 + 42);
              uint64_t v179 = *v160;
              char v216 = *(unsigned char *)(v153 + 56);
              *(void *)&v215[4] = v179;
              do
              {
                uint64_t v180 = v173;
                *(void *)uint64_t v153 = *(void *)v173;
                unint64_t v181 = v173 + 8;
                uint64_t v182 = *(void *)(v173 + 8);
                *(_DWORD *)(v153 + 16) = *(_DWORD *)(v173 + 16);
                *(void *)(v153 + 8) = v182;
                *(_OWORD *)(v153 + 24) = *(_OWORD *)(v173 + 24);
                char v183 = *(unsigned char *)(v173 + 41);
                if (v183)
                {
                  *(unsigned char *)(v153 + 40) = *(unsigned char *)(v173 + 40);
                  char v183 = 1;
                }
                *(unsigned char *)(v153 + 41) = v183;
                char v184 = *(unsigned char *)(v173 + 43);
                if (v184)
                {
                  *(unsigned char *)(v153 + 42) = *(unsigned char *)(v173 + 42);
                  char v184 = 1;
                }
                *(unsigned char *)(v153 + 43) = v184;
                uint64_t v185 = *(void *)(v173 + 48);
                *(unsigned char *)(v153 + 56) = *(unsigned char *)(v180 + 56);
                *(void *)(v153 + 48) = v185;
                *(_DWORD *)(v153 + 64) = *(_DWORD *)(v180 + 64);
                if (!v172) {
                  break;
                }
                unint64_t v172 = (v172 - 1) >> 1;
                unint64_t v173 = v11 + 72 * v172;
                uint64_t v153 = v180;
              }
              while (*(float *)(v173 + 64) < result);
              *(void *)uint64_t v180 = v174;
              int v186 = v218;
              *(void *)unint64_t v181 = v217;
              *(_DWORD *)(v181 + 8) = v186;
              *(_OWORD *)(v181 + 16) = *(_OWORD *)&v219[4];
              if (v177 < 0x100)
              {
                *(unsigned char *)(v180 + 41) = 0;
                if (v178 < 0x100) {
                  goto LABEL_211;
                }
LABEL_201:
                *(unsigned char *)(v180 + 42) = v178;
                char v187 = 1;
              }
              else
              {
                *(unsigned char *)(v180 + 40) = v177;
                *(unsigned char *)(v180 + 41) = 1;
                if (v178 >= 0x100) {
                  goto LABEL_201;
                }
LABEL_211:
                char v187 = 0;
              }
              *(unsigned char *)(v180 + 43) = v187;
              *(void *)(v180 + 48) = *(void *)&v215[4];
              *(unsigned char *)(v180 + 56) = v216;
              *(float *)(v180 + 64) = result;
            }
          }
LABEL_172:
          a2 = v163;
          if (v144-- <= 2) {
            return result;
          }
          continue;
        }
        break;
      }
      *(void *)uint64_t v153 = v149;
      uint64_t v188 = v213;
      *(_DWORD *)(v153 + 16) = v214;
      *uint64_t v157 = v188;
      *long long v162 = *(_OWORD *)&v212[4];
      if (v150 < 0x100)
      {
        *(unsigned char *)(v153 + 41) = 0;
        if (v151 >= 0x100) {
          goto LABEL_170;
        }
LABEL_205:
        char v145 = 0;
      }
      else
      {
        *(unsigned char *)(v153 + 40) = v150;
        *(unsigned char *)(v153 + 41) = 1;
        if (v151 < 0x100) {
          goto LABEL_205;
        }
LABEL_170:
        *(unsigned char *)(v153 + 42) = v151;
        char v145 = 1;
      }
      *(unsigned char *)(v153 + 43) = v145;
      char v146 = v211;
      *long long v160 = v210;
      *(unsigned char *)(v153 + 56) = v146;
      *(float *)(v153 + 64) = result;
      goto LABEL_172;
    }
    unint64_t v14 = a2;
    unint64_t v15 = v10;
    unint64_t v16 = v13 >> 1;
    unint64_t v17 = v11 + 72 * (v13 >> 1);
    if ((unint64_t)v12 >= 0x2401)
    {
      sub_10AE6E8((uint64_t *)a1, (uint64_t *)(a1 + 72 * (v13 >> 1)), v208);
      sub_10AE6E8((uint64_t *)(a1 + 72), (uint64_t *)(72 * v16 + a1 - 72), v206);
      sub_10AE6E8((uint64_t *)(a1 + 144), (uint64_t *)(a1 + 72 + 72 * v16), v205);
      sub_10AE6E8((uint64_t *)(72 * v16 + a1 - 72), (uint64_t *)v17, (uint64_t *)(a1 + 72 + 72 * v16));
      uint64_t v18 = *(void *)a1;
      *(void *)long long v215 = *(void *)(a1 + 8);
      *(_DWORD *)&v215[8] = *(_DWORD *)(a1 + 16);
      *(_DWORD *)&v219[16] = *(_DWORD *)(a1 + 36);
      *(_OWORD *)__n128 v219 = *(_OWORD *)(a1 + 20);
      unsigned int v19 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v20 = *(unsigned __int16 *)(a1 + 42);
      *(void *)&v212[4] = *(void *)(a1 + 48);
      v212[12] = *(unsigned char *)(a1 + 56);
      uint64_t v21 = *(void *)(v17 + 8);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v17 + 16);
      *(void *)a1 = *(void *)v17;
      *(void *)(a1 + 8) = v21;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v17 + 24);
      char v22 = *(unsigned char *)(v17 + 41);
      if (v22)
      {
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(v17 + 40);
        char v22 = 1;
      }
      *(unsigned char *)(a1 + 41) = v22;
      if (*(unsigned char *)(v17 + 43))
      {
        *(unsigned char *)(a1 + 42) = *(unsigned char *)(v17 + 42);
        char v23 = 1;
      }
      else
      {
        char v23 = 0;
      }
      unint64_t v14 = v207;
      uint64_t v24 = *(void *)(v17 + 48);
      *(unsigned char *)(a1 + 43) = v23;
      char v25 = *(unsigned char *)(v17 + 56);
      *(void *)(a1 + 48) = v24;
      *(unsigned char *)(a1 + 56) = v25;
      *(void *)unint64_t v17 = v18;
      uint64_t v26 = *(void *)v215;
      *(_DWORD *)(v17 + 16) = *(_DWORD *)&v215[8];
      *(void *)(v17 + 8) = v26;
      *(_OWORD *)(v17 + 24) = *(_OWORD *)&v219[4];
      if (v19 < 0x100)
      {
        *(unsigned char *)(v17 + 41) = 0;
        if (v20 < 0x100) {
          goto LABEL_96;
        }
LABEL_15:
        *(unsigned char *)(v17 + 42) = v20;
        char v27 = 1;
      }
      else
      {
        *(unsigned char *)(v17 + 40) = v19;
        *(unsigned char *)(v17 + 41) = 1;
        if (v20 >= 0x100) {
          goto LABEL_15;
        }
LABEL_96:
        char v27 = 0;
      }
      *(unsigned char *)(v17 + 43) = v27;
      uint64_t v28 = *(void *)&v212[4];
      *(unsigned char *)(v17 + 56) = v212[12];
      *(void *)(v17 + 48) = v28;
      uint64_t v29 = a1 + 72 * v16;
      int v30 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(v29 + 64);
      *(_DWORD *)(v29 + 64) = v30;
      --a3;
      uint64_t v10 = v15;
      if (a4) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
    sub_10AE6E8((uint64_t *)(a1 + 72 * (v13 >> 1)), (uint64_t *)a1, v208);
    --a3;
    uint64_t v10 = v15;
    if (a4)
    {
LABEL_23:
      float v31 = *(float *)(a1 + 64);
      a2 = v14;
      goto LABEL_24;
    }
LABEL_17:
    float v31 = *(float *)(a1 + 64);
    a2 = v14;
    if (*(float *)(a1 - 8) >= v31)
    {
      uint64_t v32 = *(void *)a1;
      uint64_t v213 = *(void *)(a1 + 8);
      int v214 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)&v212[16] = *(_DWORD *)(a1 + 36);
      *(_OWORD *)__n128 v212 = *(_OWORD *)(a1 + 20);
      unsigned int v33 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v34 = *(unsigned __int16 *)(a1 + 42);
      *uint64_t v10 = *(void *)(a1 + 48);
      *((unsigned char *)v10 + 8) = *(unsigned char *)(a1 + 56);
      __n128 result = *(float *)(a1 + 64);
      if (result >= *(float *)(v14 - 8))
      {
        unint64_t v69 = a1 + 72;
        do
        {
          unint64_t v11 = v69;
          if (v69 >= v14) {
            break;
          }
          float v70 = *(float *)(v69 + 64);
          v69 += 72;
        }
        while (result >= v70);
      }
      else
      {
        uint64_t v35 = a1;
        do
        {
          unint64_t v11 = v35 + 72;
          float v36 = *(float *)(v35 + 136);
          v35 += 72;
        }
        while (result >= v36);
      }
      unint64_t v71 = v14;
      if (v11 < v14)
      {
        unint64_t v72 = v14;
        do
        {
          unint64_t v71 = v72 - 72;
          float v73 = *(float *)(v72 - 8);
          v72 -= 72;
        }
        while (result < v73);
      }
LABEL_68:
      if (v11 >= v71)
      {
        if (v11 - 72 != a1)
        {
          *(void *)a1 = *(void *)(v11 - 72);
          uint64_t v86 = *(void *)(v11 - 64);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 - 56);
          *(void *)(a1 + 8) = v86;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v11 - 48);
          char v87 = *(unsigned char *)(v11 - 31);
          if (v87)
          {
            *(unsigned char *)(a1 + 40) = *(unsigned char *)(v11 - 32);
            char v87 = 1;
          }
          *(unsigned char *)(a1 + 41) = v87;
          char v88 = *(unsigned char *)(v11 - 29);
          if (v88)
          {
            *(unsigned char *)(a1 + 42) = *(unsigned char *)(v11 - 30);
            char v88 = 1;
          }
          *(unsigned char *)(a1 + 43) = v88;
          uint64_t v89 = *(void *)(v11 - 24);
          *(unsigned char *)(a1 + 56) = *(unsigned char *)(v11 - 16);
          *(void *)(a1 + 48) = v89;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(v11 - 8);
        }
        *(void *)(v11 - 72) = v32;
        uint64_t v90 = v213;
        *(_DWORD *)(v11 - 56) = v214;
        *(void *)(v11 - 64) = v90;
        *(_OWORD *)(v11 - 48) = *(_OWORD *)&v212[4];
        if (v33 < 0x100)
        {
          *(unsigned char *)(v11 - 31) = 0;
          BOOL v5 = v34 >= 0x100;
          BOOL v6 = v34 == 256;
          if (v34 < 0x100) {
            goto LABEL_98;
          }
LABEL_90:
          *(unsigned char *)(v11 - 30) = v34;
          char v91 = 1;
        }
        else
        {
          *(unsigned char *)(v11 - 32) = v33;
          *(unsigned char *)(v11 - 31) = 1;
          BOOL v5 = v34 >= 0x100;
          BOOL v6 = v34 == 256;
          if (v34 >= 0x100) {
            goto LABEL_90;
          }
LABEL_98:
          char v91 = 0;
        }
        a4 = 0;
        *(unsigned char *)(v11 - 29) = v91;
        uint64_t v92 = *v10;
        *(unsigned char *)(v11 - 16) = *((unsigned char *)v10 + 8);
        *(void *)(v11 - 24) = v92;
        *(float *)(v11 - 8) = result;
        continue;
      }
      uint64_t v74 = *(void *)v11;
      uint64_t v217 = *(void *)(v11 + 8);
      int v218 = *(_DWORD *)(v11 + 16);
      *(_DWORD *)&v219[16] = *(_DWORD *)(v11 + 36);
      *(_OWORD *)__n128 v219 = *(_OWORD *)(v11 + 20);
      unsigned int v75 = *(unsigned __int16 *)(v11 + 40);
      unsigned int v76 = *(unsigned __int16 *)(v11 + 42);
      *(void *)&v215[4] = *(void *)(v11 + 48);
      char v216 = *(unsigned char *)(v11 + 56);
      *(void *)unint64_t v11 = *(void *)v71;
      uint64_t v77 = *(void *)(v71 + 8);
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(v71 + 16);
      *(void *)(v11 + 8) = v77;
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v71 + 24);
      char v78 = *(unsigned char *)(v71 + 41);
      if (v78)
      {
        *(unsigned char *)(v11 + 40) = *(unsigned char *)(v71 + 40);
        char v78 = 1;
      }
      *(unsigned char *)(v11 + 41) = v78;
      char v79 = *(unsigned char *)(v71 + 43);
      if (v79)
      {
        *(unsigned char *)(v11 + 42) = *(unsigned char *)(v71 + 42);
        char v79 = 1;
      }
      *(unsigned char *)(v11 + 43) = v79;
      uint64_t v80 = *(void *)(v71 + 48);
      *(unsigned char *)(v11 + 56) = *(unsigned char *)(v71 + 56);
      *(void *)(v11 + 48) = v80;
      *(void *)unint64_t v71 = v74;
      int v81 = v218;
      *(void *)(v71 + 8) = v217;
      *(_DWORD *)(v71 + 16) = v81;
      *(_OWORD *)(v71 + 24) = *(_OWORD *)&v219[4];
      if (v75 < 0x100)
      {
        *(unsigned char *)(v71 + 41) = 0;
        if (v76 < 0x100) {
          goto LABEL_81;
        }
LABEL_75:
        *(unsigned char *)(v71 + 42) = v76;
        char v82 = 1;
      }
      else
      {
        *(unsigned char *)(v71 + 40) = v75;
        *(unsigned char *)(v71 + 41) = 1;
        if (v76 >= 0x100) {
          goto LABEL_75;
        }
LABEL_81:
        char v82 = 0;
      }
      *(unsigned char *)(v71 + 43) = v82;
      *(void *)(v71 + 48) = *(void *)&v215[4];
      *(unsigned char *)(v71 + 56) = v216;
      int v83 = *(_DWORD *)(v11 + 64);
      *(_DWORD *)(v11 + 64) = *(_DWORD *)(v71 + 64);
      *(_DWORD *)(v71 + 64) = v83;
      do
      {
        float v84 = *(float *)(v11 + 136);
        v11 += 72;
      }
      while (result >= v84);
      do
      {
        float v85 = *(float *)(v71 - 8);
        v71 -= 72;
      }
      while (result < v85);
      goto LABEL_68;
    }
LABEL_24:
    uint64_t v37 = 0;
    uint64_t v38 = *(void *)a1;
    uint64_t v213 = *(void *)(a1 + 8);
    int v214 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)&v212[16] = *(_DWORD *)(a1 + 36);
    *(_OWORD *)__n128 v212 = *(_OWORD *)(a1 + 20);
    unsigned int v39 = *(unsigned __int16 *)(a1 + 40);
    *uint64_t v10 = *(void *)(a1 + 48);
    *((unsigned char *)v10 + 8) = *(unsigned char *)(a1 + 56);
    unsigned int v40 = *(unsigned __int16 *)(a1 + 42);
    do
    {
      float v41 = *(float *)(a1 + v37 + 136);
      v37 += 72;
    }
    while (v41 < v31);
    unint64_t v42 = a1 + v37;
    uint64_t v43 = a2;
    if (v37 == 72)
    {
      unint64_t v46 = a2;
      while (v42 < v46)
      {
        unint64_t v44 = v46 - 72;
        float v47 = *(float *)(v46 - 8);
        v46 -= 72;
        if (v47 < v31) {
          goto LABEL_32;
        }
      }
      unint64_t v44 = v46;
      unint64_t v11 = v42;
    }
    else
    {
      do
      {
        unint64_t v44 = v43 - 72;
        float v45 = *(float *)(v43 - 8);
        v43 -= 72;
      }
      while (v45 >= v31);
LABEL_32:
      unint64_t v11 = v42;
      if (v42 < v44)
      {
        unint64_t v48 = v44;
        do
        {
          uint64_t v49 = *(void *)v11;
          uint64_t v217 = *(void *)(v11 + 8);
          int v218 = *(_DWORD *)(v11 + 16);
          *(_DWORD *)&v219[16] = *(_DWORD *)(v11 + 36);
          *(_OWORD *)__n128 v219 = *(_OWORD *)(v11 + 20);
          unsigned int v50 = *(unsigned __int16 *)(v11 + 40);
          unsigned int v51 = *(unsigned __int16 *)(v11 + 42);
          *(void *)&v215[4] = *(void *)(v11 + 48);
          char v216 = *(unsigned char *)(v11 + 56);
          *(void *)unint64_t v11 = *(void *)v48;
          uint64_t v52 = *(void *)(v48 + 8);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v48 + 16);
          *(void *)(v11 + 8) = v52;
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v48 + 24);
          char v53 = *(unsigned char *)(v48 + 41);
          if (v53)
          {
            *(unsigned char *)(v11 + 40) = *(unsigned char *)(v48 + 40);
            char v53 = 1;
          }
          *(unsigned char *)(v11 + 41) = v53;
          char v54 = *(unsigned char *)(v48 + 43);
          if (v54)
          {
            *(unsigned char *)(v11 + 42) = *(unsigned char *)(v48 + 42);
            char v54 = 1;
          }
          *(unsigned char *)(v11 + 43) = v54;
          uint64_t v55 = *(void *)(v48 + 48);
          *(unsigned char *)(v11 + 56) = *(unsigned char *)(v48 + 56);
          *(void *)(v11 + 48) = v55;
          *(void *)unint64_t v48 = v49;
          int v56 = v218;
          *(void *)(v48 + 8) = v217;
          *(_DWORD *)(v48 + 16) = v56;
          *(_OWORD *)(v48 + 24) = *(_OWORD *)&v219[4];
          if (v50 < 0x100)
          {
            *(unsigned char *)(v48 + 41) = 0;
            if (v51 >= 0x100)
            {
LABEL_40:
              *(unsigned char *)(v48 + 42) = v51;
              char v57 = 1;
              goto LABEL_41;
            }
          }
          else
          {
            *(unsigned char *)(v48 + 40) = v50;
            *(unsigned char *)(v48 + 41) = 1;
            if (v51 >= 0x100) {
              goto LABEL_40;
            }
          }
          char v57 = 0;
LABEL_41:
          *(unsigned char *)(v48 + 43) = v57;
          *(void *)(v48 + 48) = *(void *)&v215[4];
          *(unsigned char *)(v48 + 56) = v216;
          int v58 = *(_DWORD *)(v11 + 64);
          *(_DWORD *)(v11 + 64) = *(_DWORD *)(v48 + 64);
          *(_DWORD *)(v48 + 64) = v58;
          do
          {
            float v59 = *(float *)(v11 + 136);
            v11 += 72;
          }
          while (v59 < v31);
          do
          {
            float v60 = *(float *)(v48 - 8);
            v48 -= 72;
          }
          while (v60 >= v31);
        }
        while (v11 < v48);
      }
    }
    if (v11 - 72 != a1)
    {
      *(void *)a1 = *(void *)(v11 - 72);
      uint64_t v61 = *(void *)(v11 - 64);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 - 56);
      *(void *)(a1 + 8) = v61;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v11 - 48);
      char v62 = *(unsigned char *)(v11 - 31);
      if (v62)
      {
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(v11 - 32);
        char v62 = 1;
      }
      *(unsigned char *)(a1 + 41) = v62;
      char v63 = *(unsigned char *)(v11 - 29);
      if (v63)
      {
        *(unsigned char *)(a1 + 42) = *(unsigned char *)(v11 - 30);
        char v63 = 1;
      }
      *(unsigned char *)(a1 + 43) = v63;
      uint64_t v64 = *(void *)(v11 - 24);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(v11 - 16);
      *(void *)(a1 + 48) = v64;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(v11 - 8);
    }
    *(void *)(v11 - 72) = v38;
    uint64_t v65 = v213;
    *(_DWORD *)(v11 - 56) = v214;
    *(void *)(v11 - 64) = v65;
    *(_OWORD *)(v11 - 48) = *(_OWORD *)&v212[4];
    if (v39 < 0x100)
    {
      *(unsigned char *)(v11 - 31) = 0;
      if (v40 >= 0x100)
      {
LABEL_57:
        *(unsigned char *)(v11 - 30) = v40;
        char v66 = 1;
        goto LABEL_58;
      }
    }
    else
    {
      *(unsigned char *)(v11 - 32) = v39;
      *(unsigned char *)(v11 - 31) = 1;
      if (v40 >= 0x100) {
        goto LABEL_57;
      }
    }
    char v66 = 0;
LABEL_58:
    *(unsigned char *)(v11 - 29) = v66;
    uint64_t v67 = *v10;
    *(unsigned char *)(v11 - 16) = *((unsigned char *)v10 + 8);
    *(void *)(v11 - 24) = v67;
    *(float *)(v11 - 8) = v31;
    if (v42 >= v44)
    {
      BOOL v68 = sub_10AED38(a1, v11 - 72);
      if (sub_10AED38(v11, a2))
      {
        a2 = v11 - 72;
        if (v68) {
          return result;
        }
        goto LABEL_2;
      }
      if (v68) {
        continue;
      }
    }
    sub_10ACCB0(a1, v11 - 72, a3, a4 & 1);
    a4 = 0;
  }
  switch(v13)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      __n128 result = *(float *)(a2 - 8);
      if (result >= *(float *)(v11 + 64)) {
        return result;
      }
      uint64_t v93 = *(void *)v11;
      *(void *)long long v215 = *(void *)(v11 + 8);
      *(_DWORD *)&v215[8] = *(_DWORD *)(v11 + 16);
      *(_DWORD *)&v219[16] = *(_DWORD *)(v11 + 36);
      *(_OWORD *)__n128 v219 = *(_OWORD *)(v11 + 20);
      unsigned int v94 = *(unsigned __int16 *)(v11 + 40);
      unsigned int v95 = *(unsigned __int16 *)(v11 + 42);
      *(void *)&v212[4] = *(void *)(v11 + 48);
      v212[12] = *(unsigned char *)(v11 + 56);
      *(void *)unint64_t v11 = *(void *)(a2 - 72);
      uint64_t v96 = *(void *)(a2 - 64);
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(a2 - 56);
      *(void *)(v11 + 8) = v96;
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 - 48);
      char v97 = *(unsigned char *)(a2 - 31);
      if (v97)
      {
        *(unsigned char *)(v11 + 40) = *(unsigned char *)(a2 - 32);
        char v97 = 1;
      }
      *(unsigned char *)(v11 + 41) = v97;
      char v98 = *(unsigned char *)(a2 - 29);
      if (v98)
      {
        *(unsigned char *)(v11 + 42) = *(unsigned char *)(a2 - 30);
        char v98 = 1;
      }
      *(unsigned char *)(v11 + 43) = v98;
      uint64_t v99 = *(void *)(a2 - 24);
      *(unsigned char *)(v11 + 56) = *(unsigned char *)(a2 - 16);
      *(void *)(v11 + 48) = v99;
      *(void *)(a2 - 72) = v93;
      uint64_t v100 = *(void *)v215;
      *(_DWORD *)(a2 - 56) = *(_DWORD *)&v215[8];
      *(void *)(a2 - 64) = v100;
      *(_OWORD *)(a2 - 48) = *(_OWORD *)&v219[4];
      if (v94 < 0x100)
      {
        *(unsigned char *)(a2 - 31) = 0;
        if (v95 >= 0x100) {
          goto LABEL_110;
        }
      }
      else
      {
        *(unsigned char *)(a2 - 32) = v94;
        *(unsigned char *)(a2 - 31) = 1;
        if (v95 >= 0x100)
        {
LABEL_110:
          *(unsigned char *)(a2 - 30) = v95;
          char v101 = 1;
          goto LABEL_111;
        }
      }
      char v101 = 0;
LABEL_111:
      *(unsigned char *)(a2 - 29) = v101;
      uint64_t v102 = *(void *)&v212[4];
      *(unsigned char *)(a2 - 16) = v212[12];
      *(void *)(a2 - 24) = v102;
      __n128 result = *(float *)(v11 + 64);
      *(_DWORD *)(v11 + 64) = *(_DWORD *)(a2 - 8);
      *(float *)(a2 - 8) = result;
      break;
    case 3uLL:
      return sub_10AE6E8((uint64_t *)v11, (uint64_t *)(v11 + 72), v208);
    case 4uLL:
      return sub_10AF188(v11, v11 + 72, v11 + 144, (uint64_t)v208);
    case 5uLL:
      return sub_10AE184(v11, v11 + 72, v11 + 144, v11 + 216, (uint64_t)v208);
    default:
      JUMPOUT(0);
  }
  return result;
}

float sub_10AE184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10AF188(a1, a2, a3, a4);
  float result = *(float *)(a5 + 64);
  if (result < *(float *)(a4 + 64))
  {
    uint64_t v11 = *(void *)a4;
    uint64_t v12 = (uint64_t *)(a4 + 8);
    uint64_t v64 = *(void *)(a4 + 8);
    int v68 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)float v60 = *(_OWORD *)(a4 + 20);
    *(_DWORD *)&v60[16] = *(_DWORD *)(a4 + 36);
    unsigned int v13 = *(unsigned __int16 *)(a4 + 40);
    unsigned int v14 = *(unsigned __int16 *)(a4 + 42);
    unint64_t v15 = (uint64_t *)(a4 + 48);
    uint64_t v52 = *(void *)(a4 + 48);
    char v56 = *(unsigned char *)(a4 + 56);
    *(void *)a4 = *(void *)a5;
    uint64_t v16 = *(void *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    *(void *)(a4 + 8) = v16;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    char v17 = *(unsigned char *)(a5 + 41);
    if (v17)
    {
      *(unsigned char *)(a4 + 40) = *(unsigned char *)(a5 + 40);
      char v17 = 1;
    }
    *(unsigned char *)(a4 + 41) = v17;
    char v18 = *(unsigned char *)(a5 + 43);
    if (v18)
    {
      *(unsigned char *)(a4 + 42) = *(unsigned char *)(a5 + 42);
      char v18 = 1;
    }
    *(unsigned char *)(a4 + 43) = v18;
    uint64_t v19 = *(void *)(a5 + 48);
    *(unsigned char *)(a4 + 56) = *(unsigned char *)(a5 + 56);
    *unint64_t v15 = v19;
    *(void *)a5 = v11;
    *(void *)(a5 + 8) = v64;
    *(_DWORD *)(a5 + 16) = v68;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)&v60[4];
    if (v13 < 0x100)
    {
      *(unsigned char *)(a5 + 41) = 0;
      if (v14 >= 0x100) {
        goto LABEL_8;
      }
    }
    else
    {
      *(unsigned char *)(a5 + 40) = v13;
      *(unsigned char *)(a5 + 41) = 1;
      if (v14 >= 0x100)
      {
LABEL_8:
        *(unsigned char *)(a5 + 42) = v14;
        char v20 = 1;
        goto LABEL_9;
      }
    }
    char v20 = 0;
LABEL_9:
    *(unsigned char *)(a5 + 43) = v20;
    *(void *)(a5 + 48) = v52;
    *(unsigned char *)(a5 + 56) = v56;
    int v21 = *(_DWORD *)(a4 + 64);
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(a5 + 64);
    *(_DWORD *)(a5 + 64) = v21;
    float result = *(float *)(a4 + 64);
    if (result >= *(float *)(a3 + 64)) {
      return result;
    }
    uint64_t v22 = *(void *)a3;
    char v23 = (uint64_t *)(a3 + 8);
    uint64_t v65 = *(void *)(a3 + 8);
    int v69 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)uint64_t v61 = *(_OWORD *)(a3 + 20);
    *(_DWORD *)&v61[16] = *(_DWORD *)(a3 + 36);
    unsigned int v24 = *(unsigned __int16 *)(a3 + 40);
    unsigned int v25 = *(unsigned __int16 *)(a3 + 42);
    uint64_t v26 = (uint64_t *)(a3 + 48);
    uint64_t v53 = *(void *)(a3 + 48);
    char v57 = *(unsigned char *)(a3 + 56);
    *(void *)a3 = *(void *)a4;
    uint64_t v27 = *v12;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(void *)(a3 + 8) = v27;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    char v28 = *(unsigned char *)(a4 + 41);
    if (v28)
    {
      *(unsigned char *)(a3 + 40) = *(unsigned char *)(a4 + 40);
      char v28 = 1;
    }
    *(unsigned char *)(a3 + 41) = v28;
    if (*(unsigned char *)(a4 + 43))
    {
      *(unsigned char *)(a3 + 42) = *(unsigned char *)(a4 + 42);
      char v29 = 1;
    }
    else
    {
      char v29 = 0;
    }
    *(unsigned char *)(a3 + 43) = v29;
    uint64_t v30 = *v15;
    *(unsigned char *)(a3 + 56) = *(unsigned char *)(a4 + 56);
    *uint64_t v26 = v30;
    *(void *)a4 = v22;
    *uint64_t v12 = v65;
    *(_DWORD *)(a4 + 16) = v69;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v61[4];
    if (v24 < 0x100)
    {
      *(unsigned char *)(a4 + 41) = 0;
      if (v25 >= 0x100) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)(a4 + 40) = v24;
      *(unsigned char *)(a4 + 41) = 1;
      if (v25 >= 0x100)
      {
LABEL_16:
        *(unsigned char *)(a4 + 42) = v25;
        char v31 = 1;
        goto LABEL_17;
      }
    }
    char v31 = 0;
LABEL_17:
    *(unsigned char *)(a4 + 43) = v31;
    *unint64_t v15 = v53;
    *(unsigned char *)(a4 + 56) = v57;
    int v32 = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(_DWORD *)(a4 + 64) = v32;
    float result = *(float *)(a3 + 64);
    if (result >= *(float *)(a2 + 64)) {
      return result;
    }
    uint64_t v33 = *(void *)a2;
    unsigned int v34 = (uint64_t *)(a2 + 8);
    uint64_t v66 = *(void *)(a2 + 8);
    int v70 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)char v62 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)&v62[16] = *(_DWORD *)(a2 + 36);
    unsigned int v35 = *(unsigned __int16 *)(a2 + 40);
    unsigned int v36 = *(unsigned __int16 *)(a2 + 42);
    uint64_t v37 = (uint64_t *)(a2 + 48);
    uint64_t v54 = *(void *)(a2 + 48);
    char v58 = *(unsigned char *)(a2 + 56);
    *(void *)a2 = *(void *)a3;
    uint64_t v38 = *v23;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    *(void *)(a2 + 8) = v38;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    char v39 = *(unsigned char *)(a3 + 41);
    if (v39)
    {
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(a3 + 40);
      char v39 = 1;
    }
    *(unsigned char *)(a2 + 41) = v39;
    if (*(unsigned char *)(a3 + 43))
    {
      *(unsigned char *)(a2 + 42) = *(unsigned char *)(a3 + 42);
      char v40 = 1;
    }
    else
    {
      char v40 = 0;
    }
    *(unsigned char *)(a2 + 43) = v40;
    uint64_t v41 = *v26;
    *(unsigned char *)(a2 + 56) = *(unsigned char *)(a3 + 56);
    *uint64_t v37 = v41;
    *(void *)a3 = v33;
    *char v23 = v66;
    *(_DWORD *)(a3 + 16) = v70;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v62[4];
    if (v35 < 0x100)
    {
      *(unsigned char *)(a3 + 41) = 0;
      if (v36 >= 0x100) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 40) = v35;
      *(unsigned char *)(a3 + 41) = 1;
      if (v36 >= 0x100)
      {
LABEL_24:
        *(unsigned char *)(a3 + 42) = v36;
        char v42 = 1;
        goto LABEL_25;
      }
    }
    char v42 = 0;
LABEL_25:
    *(unsigned char *)(a3 + 43) = v42;
    *uint64_t v26 = v54;
    *(unsigned char *)(a3 + 56) = v58;
    int v43 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(a3 + 64) = v43;
    float result = *(float *)(a2 + 64);
    if (result >= *(float *)(a1 + 64)) {
      return result;
    }
    uint64_t v44 = *(void *)a1;
    uint64_t v67 = *(void *)(a1 + 8);
    int v71 = *(_DWORD *)(a1 + 16);
    *(_OWORD *)char v63 = *(_OWORD *)(a1 + 20);
    *(_DWORD *)&v63[16] = *(_DWORD *)(a1 + 36);
    unsigned int v45 = *(unsigned __int16 *)(a1 + 40);
    unsigned int v46 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v55 = *(void *)(a1 + 48);
    char v59 = *(unsigned char *)(a1 + 56);
    *(void *)a1 = *(void *)a2;
    uint64_t v47 = *v34;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(a1 + 8) = v47;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    char v48 = *(unsigned char *)(a2 + 41);
    if (v48)
    {
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      char v48 = 1;
    }
    *(unsigned char *)(a1 + 41) = v48;
    if (*(unsigned char *)(a2 + 43))
    {
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
      char v49 = 1;
    }
    else
    {
      char v49 = 0;
    }
    *(unsigned char *)(a1 + 43) = v49;
    uint64_t v50 = *v37;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v50;
    *(void *)a2 = v44;
    uint64_t *v34 = v67;
    *(_DWORD *)(a2 + 16) = v71;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v63[4];
    if (v45 < 0x100)
    {
      *(unsigned char *)(a2 + 41) = 0;
      if (v46 >= 0x100) {
        goto LABEL_32;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 40) = v45;
      *(unsigned char *)(a2 + 41) = 1;
      if (v46 >= 0x100)
      {
LABEL_32:
        *(unsigned char *)(a2 + 42) = v46;
        char v51 = 1;
LABEL_33:
        *(unsigned char *)(a2 + 43) = v51;
        *uint64_t v37 = v55;
        *(unsigned char *)(a2 + 56) = v59;
        float result = *(float *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(float *)(a2 + 64) = result;
        return result;
      }
    }
    char v51 = 0;
    goto LABEL_33;
  }
  return result;
}

float sub_10AE6E8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = (float *)(a2 + 8);
  float result = *((float *)a2 + 16);
  BOOL v5 = (float *)(a1 + 8);
  float v6 = *((float *)a3 + 16);
  if (result < *((float *)a1 + 16))
  {
    long long v7 = a1 + 1;
    long long v8 = (_OWORD *)((char *)a1 + 20);
    long long v9 = a1 + 6;
    uint64_t v10 = a1 + 3;
    if (v6 < result)
    {
      uint64_t v11 = *a1;
      uint64_t v73 = *v7;
      int v78 = *((_DWORD *)a1 + 4);
      *(_OWORD *)int v68 = *v8;
      *(_DWORD *)&v68[16] = *((_DWORD *)a1 + 9);
      unsigned int v12 = *((unsigned __int16 *)a1 + 20);
      unsigned int v13 = *((unsigned __int16 *)a1 + 21);
      uint64_t v58 = *v9;
      char v63 = *((unsigned char *)a1 + 56);
      *a1 = *a3;
      uint64_t v14 = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      *long long v7 = v14;
      *uint64_t v10 = *(_OWORD *)(a3 + 3);
      char v15 = *((unsigned char *)a3 + 41);
      if (v15)
      {
        *((unsigned char *)a1 + 40) = *((unsigned char *)a3 + 40);
        char v15 = 1;
      }
      *((unsigned char *)a1 + 41) = v15;
      char v16 = *((unsigned char *)a3 + 43);
      if (v16)
      {
        *((unsigned char *)a1 + 42) = *((unsigned char *)a3 + 42);
        char v16 = 1;
      }
      *((unsigned char *)a1 + 43) = v16;
      uint64_t v17 = a3[6];
      *((unsigned char *)v9 + 8) = *((unsigned char *)a3 + 56);
      *long long v9 = v17;
      *a3 = v11;
      a3[1] = v73;
      *((_DWORD *)a3 + 4) = v78;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v68[4];
      if (v12 < 0x100)
      {
        *((unsigned char *)a3 + 41) = 0;
        if (v13 >= 0x100) {
          goto LABEL_9;
        }
      }
      else
      {
        *((unsigned char *)a3 + 40) = v12;
        *((unsigned char *)a3 + 41) = 1;
        if (v13 >= 0x100)
        {
LABEL_9:
          *((unsigned char *)a3 + 42) = v13;
          char v18 = 1;
LABEL_10:
          *((unsigned char *)a3 + 43) = v18;
          a3[6] = v58;
          *((unsigned char *)a3 + 56) = v63;
LABEL_44:
          unint64_t v3 = (float *)(a3 + 8);
          goto LABEL_45;
        }
      }
      char v18 = 0;
      goto LABEL_10;
    }
    uint64_t v39 = *a1;
    uint64_t v76 = *v7;
    int v81 = *((_DWORD *)a1 + 4);
    *(_OWORD *)int v71 = *v8;
    *(_DWORD *)&v71[16] = *((_DWORD *)a1 + 9);
    unsigned int v40 = *((unsigned __int16 *)a1 + 20);
    unsigned int v41 = *((unsigned __int16 *)a1 + 21);
    uint64_t v61 = *v9;
    char v66 = *((unsigned char *)a1 + 56);
    *a1 = *a2;
    char v42 = a2 + 1;
    uint64_t v43 = a2[1];
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *long long v7 = v43;
    *uint64_t v10 = *(_OWORD *)(a2 + 3);
    char v44 = *((unsigned char *)a2 + 41);
    if (v44)
    {
      *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
      char v44 = 1;
    }
    unsigned int v45 = a2 + 3;
    *((unsigned char *)a1 + 41) = v44;
    char v46 = *((unsigned char *)a2 + 43);
    if (v46)
    {
      *((unsigned char *)a1 + 42) = *((unsigned char *)a2 + 42);
      char v46 = 1;
    }
    *((unsigned char *)a1 + 43) = v46;
    char v48 = a2 + 6;
    uint64_t v47 = a2[6];
    *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
    *long long v9 = v47;
    *a2 = v39;
    uint64_t *v42 = v76;
    *((_DWORD *)a2 + 4) = v81;
    _OWORD *v45 = *(_OWORD *)&v71[4];
    if (v40 < 0x100)
    {
      *((unsigned char *)a2 + 41) = 0;
      if (v41 >= 0x100) {
        goto LABEL_34;
      }
    }
    else
    {
      *((unsigned char *)a2 + 40) = v40;
      *((unsigned char *)a2 + 41) = 1;
      if (v41 >= 0x100)
      {
LABEL_34:
        *((unsigned char *)a2 + 42) = v41;
        char v49 = 1;
        goto LABEL_35;
      }
    }
    char v49 = 0;
LABEL_35:
    *((unsigned char *)a2 + 43) = v49;
    *char v48 = v61;
    *((unsigned char *)a2 + 56) = v66;
    float result = *v5;
    *BOOL v5 = *((float *)a2 + 16);
    *((float *)a2 + 16) = result;
    if (*((float *)a3 + 16) >= result) {
      return result;
    }
    uint64_t v50 = *a2;
    uint64_t v77 = *v42;
    int v82 = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v72 = *(_OWORD *)((char *)a2 + 20);
    *(_DWORD *)&v72[16] = *((_DWORD *)a2 + 9);
    unsigned int v51 = *((unsigned __int16 *)a2 + 20);
    unsigned int v52 = *((unsigned __int16 *)a2 + 21);
    uint64_t v62 = *v48;
    char v67 = *((unsigned char *)a2 + 56);
    *a2 = *a3;
    uint64_t v53 = a3[1];
    *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
    uint64_t *v42 = v53;
    _OWORD *v45 = *(_OWORD *)(a3 + 3);
    char v54 = *((unsigned char *)a3 + 41);
    if (v54)
    {
      *((unsigned char *)a2 + 40) = *((unsigned char *)a3 + 40);
      char v54 = 1;
    }
    *((unsigned char *)a2 + 41) = v54;
    char v55 = *((unsigned char *)a3 + 43);
    if (v55)
    {
      *((unsigned char *)a2 + 42) = *((unsigned char *)a3 + 42);
      char v55 = 1;
    }
    *((unsigned char *)a2 + 43) = v55;
    uint64_t v56 = a3[6];
    *((unsigned char *)a2 + 56) = *((unsigned char *)a3 + 56);
    *char v48 = v56;
    *a3 = v50;
    a3[1] = v77;
    *((_DWORD *)a3 + 4) = v82;
    *(_OWORD *)(a3 + 3) = *(_OWORD *)&v72[4];
    if (v51 < 0x100)
    {
      *((unsigned char *)a3 + 41) = 0;
      if (v52 >= 0x100) {
        goto LABEL_42;
      }
    }
    else
    {
      *((unsigned char *)a3 + 40) = v51;
      *((unsigned char *)a3 + 41) = 1;
      if (v52 >= 0x100)
      {
LABEL_42:
        *((unsigned char *)a3 + 42) = v52;
        char v57 = 1;
LABEL_43:
        *((unsigned char *)a3 + 43) = v57;
        a3[6] = v62;
        *((unsigned char *)a3 + 56) = v67;
        BOOL v5 = (float *)(a2 + 8);
        goto LABEL_44;
      }
    }
    char v57 = 0;
    goto LABEL_43;
  }
  if (v6 >= result) {
    return result;
  }
  uint64_t v19 = *a2;
  char v20 = a2 + 1;
  uint64_t v74 = a2[1];
  int v79 = *((_DWORD *)a2 + 4);
  *(_OWORD *)int v69 = *(_OWORD *)((char *)a2 + 20);
  *(_DWORD *)&v69[16] = *((_DWORD *)a2 + 9);
  unsigned int v21 = *((unsigned __int16 *)a2 + 20);
  unsigned int v22 = *((unsigned __int16 *)a2 + 21);
  char v23 = a2 + 6;
  uint64_t v59 = a2[6];
  char v64 = *((unsigned char *)a2 + 56);
  *a2 = *a3;
  uint64_t v24 = a3[1];
  *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
  a2[1] = v24;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
  char v25 = *((unsigned char *)a3 + 41);
  if (v25)
  {
    *((unsigned char *)a2 + 40) = *((unsigned char *)a3 + 40);
    char v25 = 1;
  }
  *((unsigned char *)a2 + 41) = v25;
  char v26 = *((unsigned char *)a3 + 43);
  if (v26)
  {
    *((unsigned char *)a2 + 42) = *((unsigned char *)a3 + 42);
    char v26 = 1;
  }
  *((unsigned char *)a2 + 43) = v26;
  uint64_t v27 = a3[6];
  *((unsigned char *)a2 + 56) = *((unsigned char *)a3 + 56);
  *char v23 = v27;
  *a3 = v19;
  a3[1] = v74;
  *((_DWORD *)a3 + 4) = v79;
  *(_OWORD *)(a3 + 3) = *(_OWORD *)&v69[4];
  if (v21 < 0x100)
  {
    *((unsigned char *)a3 + 41) = 0;
    if (v22 >= 0x100) {
      goto LABEL_18;
    }
  }
  else
  {
    *((unsigned char *)a3 + 40) = v21;
    *((unsigned char *)a3 + 41) = 1;
    if (v22 >= 0x100)
    {
LABEL_18:
      *((unsigned char *)a3 + 42) = v22;
      char v28 = 1;
      goto LABEL_19;
    }
  }
  char v28 = 0;
LABEL_19:
  *((unsigned char *)a3 + 43) = v28;
  a3[6] = v59;
  *((unsigned char *)a3 + 56) = v64;
  float v29 = *v3;
  *unint64_t v3 = *((float *)a3 + 16);
  *((float *)a3 + 16) = v29;
  float result = *v3;
  if (*v3 >= *v5) {
    return result;
  }
  uint64_t v30 = *a1;
  uint64_t v75 = a1[1];
  int v80 = *((_DWORD *)a1 + 4);
  *(_OWORD *)int v70 = *(_OWORD *)((char *)a1 + 20);
  *(_DWORD *)&v70[16] = *((_DWORD *)a1 + 9);
  unsigned int v31 = *((unsigned __int16 *)a1 + 20);
  unsigned int v32 = *((unsigned __int16 *)a1 + 21);
  uint64_t v33 = a1 + 6;
  uint64_t v60 = a1[6];
  char v65 = *((unsigned char *)a1 + 56);
  *a1 = *a2;
  uint64_t v34 = *v20;
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  a1[1] = v34;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  char v35 = *((unsigned char *)a2 + 41);
  if (v35)
  {
    *((unsigned char *)a1 + 40) = *((unsigned char *)a2 + 40);
    char v35 = 1;
  }
  *((unsigned char *)a1 + 41) = v35;
  if (*((unsigned char *)a2 + 43))
  {
    *((unsigned char *)a1 + 42) = *((unsigned char *)a2 + 42);
    char v36 = 1;
  }
  else
  {
    char v36 = 0;
  }
  *((unsigned char *)a1 + 43) = v36;
  uint64_t v37 = *v23;
  *((unsigned char *)v33 + 8) = *((unsigned char *)a2 + 56);
  uint64_t *v33 = v37;
  *a2 = v30;
  *char v20 = v75;
  *((_DWORD *)a2 + 4) = v80;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)&v70[4];
  if (v31 < 0x100)
  {
    *((unsigned char *)a2 + 41) = 0;
    if (v32 >= 0x100) {
      goto LABEL_26;
    }
LABEL_55:
    char v38 = 0;
    goto LABEL_27;
  }
  *((unsigned char *)a2 + 40) = v31;
  *((unsigned char *)a2 + 41) = 1;
  if (v32 < 0x100) {
    goto LABEL_55;
  }
LABEL_26:
  *((unsigned char *)a2 + 42) = v32;
  char v38 = 1;
LABEL_27:
  *((unsigned char *)a2 + 43) = v38;
  *char v23 = v60;
  *((unsigned char *)a2 + 56) = v65;
LABEL_45:
  float result = *v5;
  *BOOL v5 = *v3;
  *unint64_t v3 = result;
  return result;
}

BOOL sub_10AED38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 8) >= *(float *)(a1 + 64)) {
        return result;
      }
      uint64_t v22 = *(void *)a1;
      uint64_t v38 = *(void *)(a1 + 8);
      int v40 = *(_DWORD *)(a1 + 16);
      *(_OWORD *)char v36 = *(_OWORD *)(a1 + 20);
      *(_DWORD *)&v36[16] = *(_DWORD *)(a1 + 36);
      unsigned int v23 = *(unsigned __int16 *)(a1 + 40);
      unsigned int v24 = *(unsigned __int16 *)(a1 + 42);
      uint64_t v32 = *(void *)(a1 + 48);
      char v34 = *(unsigned char *)(a1 + 56);
      *(void *)a1 = *(void *)(a2 - 72);
      uint64_t v25 = *(void *)(a2 - 64);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 56);
      *(void *)(a1 + 8) = v25;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 48);
      char v26 = *(unsigned char *)(a2 - 31);
      if (v26)
      {
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 - 32);
        char v26 = 1;
      }
      *(unsigned char *)(a1 + 41) = v26;
      char v27 = *(unsigned char *)(a2 - 29);
      if (v27)
      {
        *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 - 30);
        char v27 = 1;
      }
      *(unsigned char *)(a1 + 43) = v27;
      uint64_t v28 = *(void *)(a2 - 24);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 - 16);
      *(void *)(a1 + 48) = v28;
      *(void *)(a2 - 72) = v22;
      *(void *)(a2 - 64) = v38;
      *(_DWORD *)(a2 - 56) = v40;
      *(_OWORD *)(a2 - 48) = *(_OWORD *)&v36[4];
      if (v23 < 0x100)
      {
        *(unsigned char *)(a2 - 31) = 0;
        if (v24 >= 0x100) {
          goto LABEL_31;
        }
      }
      else
      {
        *(unsigned char *)(a2 - 32) = v23;
        *(unsigned char *)(a2 - 31) = 1;
        if (v24 >= 0x100)
        {
LABEL_31:
          *(unsigned char *)(a2 - 30) = v24;
          char v29 = 1;
          goto LABEL_32;
        }
      }
      char v29 = 0;
LABEL_32:
      *(unsigned char *)(a2 - 29) = v29;
      *(void *)(a2 - 24) = v32;
      *(unsigned char *)(a2 - 16) = v34;
      int v30 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = v30;
      return result;
    case 3uLL:
      sub_10AE6E8((uint64_t *)a1, (uint64_t *)(a1 + 72), (uint64_t *)(a2 - 72));
      return 1;
    case 4uLL:
      sub_10AF188(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_10AE184(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v6 = a1 + 144;
      sub_10AE6E8((uint64_t *)a1, (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 144));
      uint64_t v7 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    float v10 = *(float *)(v7 + 64);
    if (v10 < *(float *)(v6 + 64)) {
      break;
    }
LABEL_5:
    uint64_t v6 = v7;
    v8 += 72;
    v7 += 72;
    if (v7 == a2) {
      return 1;
    }
  }
  uint64_t v11 = *(void *)v7;
  uint64_t v37 = *(void *)(v7 + 8);
  int v39 = *(_DWORD *)(v7 + 16);
  *(_OWORD *)char v35 = *(_OWORD *)(v7 + 20);
  *(_DWORD *)&v35[16] = *(_DWORD *)(v7 + 36);
  unsigned int v12 = *(unsigned __int16 *)(v7 + 40);
  uint64_t v31 = *(void *)(v7 + 48);
  char v33 = *(unsigned char *)(v7 + 56);
  uint64_t v13 = v8;
  unsigned int v14 = *(unsigned __int16 *)(v7 + 42);
  while (1)
  {
    uint64_t v15 = a1 + v13;
    uint64_t v16 = *(void *)(a1 + v13 + 152);
    *(void *)(v15 + 216) = *(void *)(a1 + v13 + 144);
    *(void *)(v15 + 224) = v16;
    *(_DWORD *)(v15 + 232) = *(_DWORD *)(a1 + v13 + 160);
    *(_OWORD *)(v15 + 240) = *(_OWORD *)(a1 + v13 + 168);
    char v17 = *(unsigned char *)(a1 + v13 + 185);
    if (v17)
    {
      *(unsigned char *)(v15 + 256) = *(unsigned char *)(v15 + 184);
      char v17 = 1;
    }
    *(unsigned char *)(v15 + 257) = v17;
    if (*(unsigned char *)(v15 + 187))
    {
      *(unsigned char *)(a1 + v13 + 258) = *(unsigned char *)(a1 + v13 + 186);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
    }
    uint64_t v19 = a1 + v13;
    *(unsigned char *)(v19 + 259) = v18;
    *(void *)(v19 + 264) = *(void *)(a1 + v13 + 192);
    *(unsigned char *)(v19 + 272) = *(unsigned char *)(a1 + v13 + 200);
    *(_DWORD *)(v19 + 280) = *(_DWORD *)(a1 + v13 + 208);
    if (v13 == -144) {
      break;
    }
    v13 -= 72;
    if (v10 >= *(float *)(v19 + 136))
    {
      uint64_t v20 = a1 + v13 + 216;
      goto LABEL_17;
    }
  }
  uint64_t v20 = a1;
LABEL_17:
  *(void *)uint64_t v20 = v11;
  *(void *)(v19 + 152) = v37;
  *(_DWORD *)(v19 + 160) = v39;
  *(_OWORD *)(v19 + 168) = *(_OWORD *)&v35[4];
  if (v12 < 0x100)
  {
    *(unsigned char *)(v20 + 41) = 0;
    if (v14 >= 0x100) {
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)(v20 + 40) = v12;
    *(unsigned char *)(v20 + 41) = 1;
    if (v14 >= 0x100)
    {
LABEL_19:
      *(unsigned char *)(v20 + 42) = v14;
      char v21 = 1;
      goto LABEL_20;
    }
  }
  char v21 = 0;
LABEL_20:
  *(unsigned char *)(v20 + 43) = v21;
  *(void *)(v19 + 192) = v31;
  *(unsigned char *)(v19 + 200) = v33;
  *(float *)(v20 + 64) = v10;
  if (++v9 == 8) {
    return v7 + 72 == a2;
  }
  goto LABEL_5;
}

float sub_10AF188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10AE6E8((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  float result = *(float *)(a4 + 64);
  if (result < *(float *)(a3 + 64))
  {
    uint64_t v9 = *(void *)a3;
    float v10 = (uint64_t *)(a3 + 8);
    uint64_t v48 = *(void *)(a3 + 8);
    int v51 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)unsigned int v45 = *(_OWORD *)(a3 + 20);
    *(_DWORD *)&v45[16] = *(_DWORD *)(a3 + 36);
    unsigned int v11 = *(unsigned __int16 *)(a3 + 40);
    unsigned int v12 = *(unsigned __int16 *)(a3 + 42);
    uint64_t v13 = (uint64_t *)(a3 + 48);
    uint64_t v39 = *(void *)(a3 + 48);
    char v42 = *(unsigned char *)(a3 + 56);
    *(void *)a3 = *(void *)a4;
    uint64_t v14 = *(void *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
    *(void *)(a3 + 8) = v14;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    char v15 = *(unsigned char *)(a4 + 41);
    if (v15)
    {
      *(unsigned char *)(a3 + 40) = *(unsigned char *)(a4 + 40);
      char v15 = 1;
    }
    *(unsigned char *)(a3 + 41) = v15;
    char v16 = *(unsigned char *)(a4 + 43);
    if (v16)
    {
      *(unsigned char *)(a3 + 42) = *(unsigned char *)(a4 + 42);
      char v16 = 1;
    }
    *(unsigned char *)(a3 + 43) = v16;
    uint64_t v17 = *(void *)(a4 + 48);
    *(unsigned char *)(a3 + 56) = *(unsigned char *)(a4 + 56);
    *uint64_t v13 = v17;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v48;
    *(_DWORD *)(a4 + 16) = v51;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v45[4];
    if (v11 < 0x100)
    {
      *(unsigned char *)(a4 + 41) = 0;
      if (v12 >= 0x100) {
        goto LABEL_8;
      }
    }
    else
    {
      *(unsigned char *)(a4 + 40) = v11;
      *(unsigned char *)(a4 + 41) = 1;
      if (v12 >= 0x100)
      {
LABEL_8:
        *(unsigned char *)(a4 + 42) = v12;
        char v18 = 1;
        goto LABEL_9;
      }
    }
    char v18 = 0;
LABEL_9:
    *(unsigned char *)(a4 + 43) = v18;
    *(void *)(a4 + 48) = v39;
    *(unsigned char *)(a4 + 56) = v42;
    int v19 = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(_DWORD *)(a4 + 64) = v19;
    float result = *(float *)(a3 + 64);
    if (result >= *(float *)(a2 + 64)) {
      return result;
    }
    uint64_t v20 = *(void *)a2;
    char v21 = (uint64_t *)(a2 + 8);
    uint64_t v49 = *(void *)(a2 + 8);
    int v52 = *(_DWORD *)(a2 + 16);
    *(_OWORD *)char v46 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)&v46[16] = *(_DWORD *)(a2 + 36);
    unsigned int v22 = *(unsigned __int16 *)(a2 + 40);
    unsigned int v23 = *(unsigned __int16 *)(a2 + 42);
    unsigned int v24 = (uint64_t *)(a2 + 48);
    uint64_t v40 = *(void *)(a2 + 48);
    char v43 = *(unsigned char *)(a2 + 56);
    *(void *)a2 = *(void *)a3;
    uint64_t v25 = *v10;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
    *(void *)(a2 + 8) = v25;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    char v26 = *(unsigned char *)(a3 + 41);
    if (v26)
    {
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(a3 + 40);
      char v26 = 1;
    }
    *(unsigned char *)(a2 + 41) = v26;
    if (*(unsigned char *)(a3 + 43))
    {
      *(unsigned char *)(a2 + 42) = *(unsigned char *)(a3 + 42);
      char v27 = 1;
    }
    else
    {
      char v27 = 0;
    }
    *(unsigned char *)(a2 + 43) = v27;
    uint64_t v28 = *v13;
    *(unsigned char *)(a2 + 56) = *(unsigned char *)(a3 + 56);
    uint64_t *v24 = v28;
    *(void *)a3 = v20;
    *float v10 = v49;
    *(_DWORD *)(a3 + 16) = v52;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v46[4];
    if (v22 < 0x100)
    {
      *(unsigned char *)(a3 + 41) = 0;
      if (v23 >= 0x100) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)(a3 + 40) = v22;
      *(unsigned char *)(a3 + 41) = 1;
      if (v23 >= 0x100)
      {
LABEL_16:
        *(unsigned char *)(a3 + 42) = v23;
        char v29 = 1;
        goto LABEL_17;
      }
    }
    char v29 = 0;
LABEL_17:
    *(unsigned char *)(a3 + 43) = v29;
    *uint64_t v13 = v40;
    *(unsigned char *)(a3 + 56) = v43;
    int v30 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(a3 + 64) = v30;
    float result = *(float *)(a2 + 64);
    if (result >= *(float *)(a1 + 64)) {
      return result;
    }
    uint64_t v31 = *(void *)a1;
    uint64_t v50 = *(void *)(a1 + 8);
    int v53 = *(_DWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v47 = *(_OWORD *)(a1 + 20);
    *(_DWORD *)&v47[16] = *(_DWORD *)(a1 + 36);
    unsigned int v32 = *(unsigned __int16 *)(a1 + 40);
    unsigned int v33 = *(unsigned __int16 *)(a1 + 42);
    uint64_t v41 = *(void *)(a1 + 48);
    char v44 = *(unsigned char *)(a1 + 56);
    *(void *)a1 = *(void *)a2;
    uint64_t v34 = *v21;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(a1 + 8) = v34;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    char v35 = *(unsigned char *)(a2 + 41);
    if (v35)
    {
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      char v35 = 1;
    }
    *(unsigned char *)(a1 + 41) = v35;
    if (*(unsigned char *)(a2 + 43))
    {
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
      char v36 = 1;
    }
    else
    {
      char v36 = 0;
    }
    *(unsigned char *)(a1 + 43) = v36;
    uint64_t v37 = *v24;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(void *)(a1 + 48) = v37;
    *(void *)a2 = v31;
    uint64_t *v21 = v50;
    *(_DWORD *)(a2 + 16) = v53;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v47[4];
    if (v32 < 0x100)
    {
      *(unsigned char *)(a2 + 41) = 0;
      if (v33 >= 0x100) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)(a2 + 40) = v32;
      *(unsigned char *)(a2 + 41) = 1;
      if (v33 >= 0x100)
      {
LABEL_24:
        *(unsigned char *)(a2 + 42) = v33;
        char v38 = 1;
LABEL_25:
        *(unsigned char *)(a2 + 43) = v38;
        uint64_t *v24 = v41;
        *(unsigned char *)(a2 + 56) = v44;
        float result = *(float *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(float *)(a2 + 64) = result;
        return result;
      }
    }
    char v38 = 0;
    goto LABEL_25;
  }
  return result;
}

void sub_10AF598()
{
  byte_25FE077 = 1;
  word_25FE060 = 65;
  byte_25FE08F = 8;
  strcpy((char *)&qword_25FE078, "any_mode");
  byte_25FE0A7 = 7;
  strcpy((char *)&dword_25FE090, "cycling");
  byte_25FE0BF = 7;
  strcpy((char *)&dword_25FE0A8, "driving");
  byte_25FE0D7 = 7;
  strcpy((char *)&dword_25FE0C0, "walking");
  byte_25FE0EF = 1;
  word_25FE0D8 = 65;
}

double sub_10AF640@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v16);
  uint64_t v4 = *(char **)(a1 + 8);
  BOOL v5 = *(char **)(a1 + 16);
  if (v4 != v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    while (*(_DWORD *)v6)
    {
      v6 += 168;
      if (v6 == v5) {
        goto LABEL_9;
      }
    }
    uint64_t v7 = *(char **)(a1 + 8);
    do
    {
      if (*(_DWORD *)v7 == 1) {
        sub_C7E5DC(&v15, 0xCF3CF3CF3CF3CF3DLL * ((v5 - v4) >> 3));
      }
      v7 += 168;
    }
    while (v7 != v5);
  }
LABEL_9:
  v14.n128_u64[0] = 1;
  v14.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)v10, &v14);
  *(unsigned char *)a2 = 0;
  double result = *(double *)v10;
  long long v9 = *(_OWORD *)__p;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)v10;
  *(_OWORD *)(a2 + 24) = v9;
  *(void *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 48) = v13;
  return result;
}

void sub_10AFEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_10A45FC(&a61);
  uint64_t v62 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v62;
    operator delete(v62);
  }
  sub_C7EAC4((char **)&STACK[0x260]);
  _Unwind_Resume(a1);
}

uint64_t sub_10AFFA4(unsigned int **a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  unint64_t v3 = *a1 + 1;
  if (*a1 != v2 && v3 != v2)
  {
    while (1)
    {
      int v5 = *v3 - 16;
      if (v5 > 0x15)
      {
        unsigned int v6 = -1;
        unsigned int v7 = *v1 - 16;
        if (v7 <= 0x15) {
          goto LABEL_6;
        }
LABEL_13:
        if (v6 != -1) {
          uint64_t v1 = v3;
        }
        if (++v3 == v2) {
          return *v1;
        }
      }
      else
      {
        unsigned int v6 = dword_20F2BF0[v5];
        unsigned int v7 = *v1 - 16;
        if (v7 > 0x15) {
          goto LABEL_13;
        }
LABEL_6:
        if (v6 < dword_20F2BF0[v7]) {
          uint64_t v1 = v3;
        }
        if (++v3 == v2) {
          return *v1;
        }
      }
    }
  }
  return *v1;
}

void sub_10B0038()
{
  unk_25FE107 = 16641;
  word_25FE0F0 = 65;
  byte_25FE11F = 1;
  byte_25FE109 = 0;
}

uint64_t sub_10B0060(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  char v57 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  char v55 = (void **)(a1 + 72);
  uint64_t v56 = (void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 104) = sub_DA98C4((void **)(a1 + 96), a3);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    unsigned int v7 = *(_DWORD **)(v5 + 72);
    uint64_t v8 = *(_DWORD **)(v5 + 80);
    if (v7 != v8) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v12 = (int *)(v5 + 96);
    int v11 = *(_DWORD *)(v5 + 96);
    if (v11)
    {
      if (v11 == 2)
      {
        unint64_t v33 = *(void *)(a1 + 56);
        if (v33 >= *(void *)(a1 + 64))
        {
          *(void *)(a1 + 56) = sub_DA98C4(v57, v5);
        }
        else
        {
          *(_OWORD *)unint64_t v33 = *(_OWORD *)v5;
          long long v34 = *(_OWORD *)(v5 + 16);
          long long v35 = *(_OWORD *)(v5 + 32);
          long long v36 = *(_OWORD *)(v5 + 48);
          *(_DWORD *)(v33 + 63) = *(_DWORD *)(v5 + 63);
          *(_OWORD *)(v33 + 32) = v35;
          *(_OWORD *)(v33 + 48) = v36;
          *(void *)(v33 + 72) = 0;
          *(_OWORD *)(v33 + 16) = v34;
          *(void *)(v33 + 80) = 0;
          *(void *)(v33 + 88) = 0;
          char v38 = *(unsigned char **)(v5 + 72);
          uint64_t v37 = *(unsigned char **)(v5 + 80);
          int64_t v39 = v37 - v38;
          if (v37 != v38)
          {
            if (v39 < 0) {
              sub_2E00();
            }
            uint64_t v40 = (char *)operator new(v37 - v38);
            *(void *)(v33 + 72) = v40;
            *(void *)(v33 + 80) = v40;
            uint64_t v41 = &v40[4 * (v39 >> 2)];
            *(void *)(v33 + 88) = v41;
            memcpy(v40, v38, v39);
            *(void *)(v33 + 80) = v41;
          }
          int v42 = *v12;
          *(unsigned char *)(v33 + 100) = *(unsigned char *)(v5 + 100);
          *(_DWORD *)(v33 + 96) = v42;
          *(void *)(a1 + 56) = v33 + 104;
          *(void *)(a1 + 56) = v33 + 104;
        }
      }
      else if (v11 == 1)
      {
        unint64_t v13 = *(void *)(a1 + 32);
        if (v13 >= *(void *)(a1 + 40))
        {
          *(void *)(a1 + 32) = sub_DA98C4(v56, v5);
        }
        else
        {
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v5;
          long long v14 = *(_OWORD *)(v5 + 16);
          long long v15 = *(_OWORD *)(v5 + 32);
          long long v16 = *(_OWORD *)(v5 + 48);
          *(_DWORD *)(v13 + 63) = *(_DWORD *)(v5 + 63);
          *(_OWORD *)(v13 + 32) = v15;
          *(_OWORD *)(v13 + 48) = v16;
          *(void *)(v13 + 72) = 0;
          *(_OWORD *)(v13 + 16) = v14;
          *(void *)(v13 + 80) = 0;
          *(void *)(v13 + 88) = 0;
          char v18 = *(unsigned char **)(v5 + 72);
          uint64_t v17 = *(unsigned char **)(v5 + 80);
          int64_t v19 = v17 - v18;
          if (v17 != v18)
          {
            if (v19 < 0) {
              sub_2E00();
            }
            uint64_t v20 = (char *)operator new(v17 - v18);
            *(void *)(v13 + 72) = v20;
            *(void *)(v13 + 80) = v20;
            char v21 = &v20[4 * (v19 >> 2)];
            *(void *)(v13 + 88) = v21;
            memcpy(v20, v18, v19);
            *(void *)(v13 + 80) = v21;
          }
          int v22 = *v12;
          *(unsigned char *)(v13 + 100) = *(unsigned char *)(v5 + 100);
          *(_DWORD *)(v13 + 96) = v22;
          *(void *)(a1 + 32) = v13 + 104;
          *(void *)(a1 + 32) = v13 + 104;
        }
      }
    }
    else
    {
      unint64_t v43 = *(void *)(a1 + 80);
      if (v43 >= *(void *)(a1 + 88))
      {
        int v53 = sub_DA98C4(v55, v5);
      }
      else
      {
        *(_OWORD *)unint64_t v43 = *(_OWORD *)v5;
        long long v44 = *(_OWORD *)(v5 + 16);
        long long v45 = *(_OWORD *)(v5 + 32);
        long long v46 = *(_OWORD *)(v5 + 48);
        *(_DWORD *)(v43 + 63) = *(_DWORD *)(v5 + 63);
        *(_OWORD *)(v43 + 32) = v45;
        *(_OWORD *)(v43 + 48) = v46;
        *(void *)(v43 + 72) = 0;
        *(_OWORD *)(v43 + 16) = v44;
        *(void *)(v43 + 80) = 0;
        *(void *)(v43 + 88) = 0;
        uint64_t v48 = *(unsigned char **)(v5 + 72);
        uint64_t v47 = *(unsigned char **)(v5 + 80);
        int64_t v49 = v47 - v48;
        if (v47 != v48)
        {
          if (v49 < 0) {
            sub_2E00();
          }
          uint64_t v50 = (char *)operator new(v47 - v48);
          *(void *)(v43 + 72) = v50;
          *(void *)(v43 + 80) = v50;
          int v51 = &v50[4 * (v49 >> 2)];
          *(void *)(v43 + 88) = v51;
          memcpy(v50, v48, v49);
          *(void *)(v43 + 80) = v51;
        }
        int v52 = *v12;
        *(unsigned char *)(v43 + 100) = *(unsigned char *)(v5 + 100);
        *(_DWORD *)(v43 + 96) = v52;
        int v53 = (char *)(v43 + 104);
        *(void *)(a1 + 80) = v43 + 104;
      }
      *(void *)(a1 + 80) = v53;
    }
    while (1)
    {
      v5 += 104;
      if (v5 == v6) {
        break;
      }
      unsigned int v7 = *(_DWORD **)(v5 + 72);
      uint64_t v8 = *(_DWORD **)(v5 + 80);
      if (v7 == v8) {
        goto LABEL_14;
      }
LABEL_8:
      while (*v7 > 6u || ((1 << *v7) & 0x49) == 0)
      {
        if (++v7 == v8) {
          goto LABEL_14;
        }
      }
      unint64_t v23 = *(void *)(a1 + 8);
      if (v23 >= *(void *)(a1 + 16))
      {
        long long v9 = sub_DA98C4((void **)a1, v5);
      }
      else
      {
        *(_OWORD *)unint64_t v23 = *(_OWORD *)v5;
        long long v24 = *(_OWORD *)(v5 + 16);
        long long v25 = *(_OWORD *)(v5 + 32);
        long long v26 = *(_OWORD *)(v5 + 48);
        *(_DWORD *)(v23 + 63) = *(_DWORD *)(v5 + 63);
        *(_OWORD *)(v23 + 32) = v25;
        *(_OWORD *)(v23 + 48) = v26;
        *(void *)(v23 + 72) = 0;
        *(_OWORD *)(v23 + 16) = v24;
        *(void *)(v23 + 80) = 0;
        *(void *)(v23 + 88) = 0;
        uint64_t v28 = *(unsigned char **)(v5 + 72);
        char v27 = *(unsigned char **)(v5 + 80);
        int64_t v29 = v27 - v28;
        if (v27 != v28)
        {
          if (v29 < 0) {
            sub_2E00();
          }
          int v30 = (char *)operator new(v27 - v28);
          *(void *)(v23 + 72) = v30;
          *(void *)(v23 + 80) = v30;
          uint64_t v31 = &v30[4 * (v29 >> 2)];
          *(void *)(v23 + 88) = v31;
          memcpy(v30, v28, v29);
          *(void *)(v23 + 80) = v31;
        }
        int v32 = *(_DWORD *)(v5 + 96);
        *(unsigned char *)(v23 + 100) = *(unsigned char *)(v5 + 100);
        *(_DWORD *)(v23 + 96) = v32;
        long long v9 = (char *)(v23 + 104);
        *(void *)(a1 + 8) = v23 + 104;
      }
      *(void *)(a1 + 8) = v9;
    }
  }
  return a1;
}

void sub_10B0420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  long long v16 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 80) = v16;
    operator delete(v16);
  }
  *(void *)(v12 + 80) = v13;
  sub_4364F4(a9);
  sub_4364F4(a10);
  sub_4364F4(a12);
  sub_4364F4(a11);
  sub_4364F4((void **)v12);
  _Unwind_Resume(a1);
}

uint64_t *sub_10B04DC(uint64_t *result)
{
  if (*((unsigned char *)result + 120) || (*((unsigned char *)result + 120) = 1, *result == result[1]))
  {
    if (!*((unsigned char *)result + 121))
    {
      uint64_t v1 = result + 3;
      uint64_t v2 = result[3];
      *((unsigned char *)result + 121) = 1;
      if (v2 != result[4]) {
        return v1;
      }
    }
    if (!*((unsigned char *)result + 122))
    {
      uint64_t v1 = result + 6;
      uint64_t v3 = result[6];
      *((unsigned char *)result + 122) = 1;
      if (v3 != result[7]) {
        return v1;
      }
    }
    if (!*((unsigned char *)result + 123))
    {
      uint64_t v1 = result + 9;
      uint64_t v4 = result[9];
      *((unsigned char *)result + 123) = 1;
      if (v4 != result[10]) {
        return v1;
      }
    }
    if (!*((unsigned char *)result + 124))
    {
      *((unsigned char *)result + 124) = 1;
      result += 12;
      return result;
    }
    uint64_t v1 = &qword_25FE128;
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_25FE120, memory_order_acquire)) {
      return v1;
    }
    if (__cxa_guard_acquire(&qword_25FE120))
    {
      qword_25FE130 = 0;
      unk_25FE138 = 0;
      qword_25FE128 = 0;
      __cxa_guard_release(&qword_25FE120);
    }
    return &qword_25FE128;
  }
  return result;
}

BOOL sub_10B0638(uint64_t a1)
{
  return *(unsigned char *)(a1 + 120) && *(unsigned char *)(a1 + 121) == 0;
}

BOOL sub_10B0658(unsigned char *a1)
{
  return (a1[121] || a1[122] || a1[123]) && a1[124] == 0;
}

uint64_t sub_10B0688(uint64_t a1, void *a2, char a3)
{
  *(void *)a1 = sub_3750CC(a2);
  *(unsigned char *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  return a1;
}

float sub_10B06E4(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  float v4 = 0.0;
  if (*(unsigned char *)(a2 + 52) && *(unsigned __int16 *)(a4 + 50) >> 5 <= 0x464u && *a3 <= *(void *)(a2 + 72))
  {
    BOOL v8 = *(double *)(a4 + 56) < *(double *)(a2 + 64) / 3.6 && *(unsigned char *)(a2 + 124) == 0;
    if (!v8 || *(unsigned char *)(a4 + 65) != 0)
    {
      sub_29549C(*a1, a3[4], (uint64_t)&v33);
      sub_2E4B5C((uint64_t)&v33, v36);
      if (__p)
      {
        long long v35 = __p;
        operator delete(__p);
      }
      LOWORD(v11) = *(_WORD *)(a4 + 50);
      sub_109B93C((uint64_t *)v36, (_DWORD *)a4, (double)v11 / 100.0, 100.0, v12, v13);
      double v15 = v14;
      __int16 v32 = 256;
      BOOL v16 = sub_10B0990((uint64_t)a1, (uint64_t)a3, (unsigned __int8 *)&v32);
      __int16 v31 = 257;
      BOOL v17 = sub_10B0990((uint64_t)a1, (uint64_t)a3, (unsigned __int8 *)&v31);
      double v18 = fabs(v15);
      if (*(unsigned char *)(a2 + 124))
      {
        unsigned int v19 = *(unsigned __int16 *)(a4 + 48);
        if (v19 >> 5 > 0x464)
        {
          char v21 = (float *)(a2 + 60);
        }
        else
        {
          float v20 = (double)v19 / 100.0;
          float v33 = v20;
          char v21 = (float *)(a2 + 60);
          if (*(float *)(a2 + 60) <= v20) {
            char v21 = &v33;
          }
        }
        double v25 = *v21;
        BOOL v26 = v18 < v25 && v16;
        BOOL v27 = 180.0 - v18 < v25 && v17;
        float v4 = 0.0;
        if (v26 || v27) {
          goto LABEL_39;
        }
        if (!v16) {
          double v18 = 180.0 - v18;
        }
        double v28 = vabdd_f64(v18, v25);
      }
      else
      {
        double v22 = *(float *)(a2 + 60);
        if (v18 <= v22)
        {
          float v4 = 0.0;
          if (v16 || !v17) {
            goto LABEL_39;
          }
          double v29 = vabdd_f64(v22, v18);
        }
        else
        {
          double v23 = fabs(v18 + -180.0);
          if (v23 > v22)
          {
            float v24 = v22 - vabdd_f64(90.0, v18) * *(float *)(a2 + 56);
            float v4 = fabsf(v24);
            goto LABEL_39;
          }
          float v4 = 0.0;
          if (v17 || !v16)
          {
LABEL_39:
            if (v36[0])
            {
              v36[1] = v36[0];
              operator delete(v36[0]);
            }
            return v4;
          }
          double v29 = vabdd_f64(v22, v23);
        }
        double v28 = v29 + 90.0;
      }
      float v4 = v28 * *(float *)(a2 + 56);
      goto LABEL_39;
    }
  }
  return v4;
}

void sub_10B0958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10B0990(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v11 = *(void *)a1;
    unint64_t v12 = *(void *)(a2 + 32);
    if (a3[1])
    {
      int v13 = *a3;
      unsigned int v7 = (int *)sub_2D5D58(v11, v12);
      double v14 = (unsigned __int16 *)((char *)v7 - *v7);
      unsigned int v15 = *v14;
      if (v13)
      {
        if (v15 < 0xB) {
          return 0;
        }
        unsigned int v10 = v14[5];
        if (!v10) {
          return 0;
        }
        return (*(int *)((char *)v7 + v10) & 2) != 0;
      }
      if (v15 < 0xB) {
        return 0;
      }
      unsigned int v37 = v14[5];
      if (!v37) {
        return 0;
      }
      return (*(int *)((char *)v7 + v37) & 1) != 0;
    }
    double v29 = (int *)sub_2D5D58(v11, v12);
    int v30 = (unsigned __int16 *)((char *)v29 - *v29);
    if (*v30 < 0xBu) {
      return 0;
    }
    uint64_t v31 = v30[5];
    if (!v31) {
      return 0;
    }
    unsigned int v32 = *(int *)((char *)v29 + v31);
    if ((v32 & 1) == 0) {
      return (v32 >> 1) & 1;
    }
    return 1;
  }
  if (v3 != 2)
  {
    if (v3 == 3)
    {
      uint64_t v4 = *(void *)a1;
      unint64_t v5 = *(void *)(a2 + 32);
      if (a3[1])
      {
        int v6 = *a3;
        unsigned int v7 = (int *)sub_2D5D58(v4, v5);
        BOOL v8 = (unsigned __int16 *)((char *)v7 - *v7);
        unsigned int v9 = *v8;
        if (v6)
        {
          if (v9 < 0x47) {
            return 0;
          }
          unsigned int v10 = v8[35];
          if (!v10) {
            return 0;
          }
          return (*(int *)((char *)v7 + v10) & 2) != 0;
        }
        if (v9 < 0x47) {
          return 0;
        }
        unsigned int v37 = v8[35];
        if (!v37) {
          return 0;
        }
        return (*(int *)((char *)v7 + v37) & 1) != 0;
      }
      double v25 = (int *)sub_2D5D58(v4, v5);
      BOOL v26 = (unsigned __int16 *)((char *)v25 - *v25);
      if (*v26 < 0x47u) {
        return 0;
      }
      uint64_t v27 = v26[35];
      if (!v27) {
        return 0;
      }
      unsigned int v28 = *(int *)((char *)v25 + v27);
      if ((v28 & 1) == 0) {
        return (v28 >> 1) & 1;
      }
      return 1;
    }
    return 0;
  }
  uint64_t v17 = *(void *)a1;
  unint64_t v18 = *(void *)(a2 + 32);
  if (a3[1])
  {
    int v19 = *a3;
    float v20 = (int *)sub_2D5D58(v17, v18);
    char v21 = (unsigned __int16 *)((char *)v20 - *v20);
    unsigned int v22 = *v21;
    if (v19)
    {
      if (v22 < 0x39) {
        return 0;
      }
      uint64_t v23 = v21[28];
      if (!v23) {
        return 0;
      }
      unsigned int v24 = *(int *)((char *)v20 + v23);
      if ((v24 & 2) != 0) {
        return 1;
      }
    }
    else
    {
      if (v22 < 0x39) {
        return 0;
      }
      uint64_t v38 = v21[28];
      if (!v38) {
        return 0;
      }
      unsigned int v24 = *(int *)((char *)v20 + v38);
      if (v24) {
        return 1;
      }
    }
    if ((v24 & 7) == 4) {
      return 1;
    }
    if ((v24 & 3) != 0) {
      return 0;
    }
  }
  else
  {
    float v33 = (int *)sub_2D5D58(v17, v18);
    long long v34 = (unsigned __int16 *)((char *)v33 - *v33);
    if (*v34 < 0x39u) {
      return 0;
    }
    uint64_t v35 = v34[28];
    if (!v35) {
      return 0;
    }
    unsigned int v24 = *(int *)((char *)v33 + v35);
    if ((v24 & 3) != 0 || (v24 & 7) == 4) {
      return 1;
    }
  }
  return (v24 >> 5) & 1;
}

float sub_10B0BC8(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5)
{
  BOOL v8 = sub_10B11F0((uint64_t)(a1 + 2), a3, a4, a5);
  unsigned int v9 = (int *)sub_2D5D58(*a1, a2[4]);
  unsigned int v10 = (unsigned __int16 *)((char *)v9 - *v9);
  float v11 = 0.0;
  if (*v10 >= 0xBu)
  {
    uint64_t v12 = v10[5];
    if (v12)
    {
      float v11 = *((float *)v8 + 1) + 0.0;
      if ((*(int *)((char *)v9 + v12) & 8) == 0) {
        float v11 = 0.0;
      }
    }
  }
  float v13 = (double)(a2[6] + *a2) / 100.0 * *(float *)v8 + v11;
  double v14 = (int *)sub_2D5D58(*a1, a2[4]);
  unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0x2Fu && (uint64_t v16 = v15[23]) != 0 && !*((unsigned char *)v14 + v16))
  {
    float v13 = *((float *)v8 + 2) + v13;
    if (*a2 > v8[2])
    {
      double v24 = (double)*a2 / 100.0;
      float v25 = *((float *)v8 + 6);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v17 = (int *)sub_2D5D58(*a1, a2[4]);
    unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 >= 0x2Fu)
    {
      uint64_t v19 = v18[23];
      if (v19)
      {
        unsigned int v20 = *((unsigned __int8 *)v17 + v19);
        BOOL v21 = v20 > 0x2A;
        uint64_t v22 = (1 << v20) & 0x50426810004;
        if (!v21 && v22 != 0)
        {
          float v13 = *((float *)v8 + 7) + v13;
          if (*a2 > v8[4])
          {
            double v24 = (double)*a2 / 100.0;
            float v25 = *((float *)v8 + 10);
LABEL_18:
            float v13 = v24 * v25 + v13;
          }
        }
      }
    }
  }
  BOOL v26 = (int *)sub_2D5D58(*a1, a2[4]);
  uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 >= 0xBu)
  {
    uint64_t v28 = v27[5];
    if (v28)
    {
      if ((*((unsigned char *)v26 + v28 + 1) & 8) != 0)
      {
        float v32 = *((float *)v8 + 12);
        goto LABEL_27;
      }
    }
  }
  double v29 = (int *)sub_2D5D58(*a1, a2[4]);
  int v30 = (unsigned __int16 *)((char *)v29 - *v29);
  if (*v30 >= 0xBu)
  {
    uint64_t v31 = v30[5];
    if (v31)
    {
      if ((*((unsigned char *)v29 + v31 + 1) & 4) != 0)
      {
        float v32 = *((float *)v8 + 11);
LABEL_27:
        float v13 = v13 + v32;
      }
    }
  }
  __int16 v85 = 0;
  BOOL v33 = sub_10B0990((uint64_t)a1, (uint64_t)a2, (unsigned __int8 *)&v85);
  float v34 = *((float *)v8 + 20);
  if (v33) {
    float v34 = -0.0;
  }
  float v35 = v13 + v34;
  long long v36 = (int *)sub_2D5D58(*a1, a2[4]);
  unsigned int v37 = (unsigned __int16 *)((char *)v36 - *v36);
  unsigned int v38 = *v37;
  if (v38 >= 0xB)
  {
    if (v37[5])
    {
      if (v38 < 0x39 || (*(int *)((char *)v36 + v37[5]) & 3) != 0) {
        goto LABEL_43;
      }
    }
    else if (v38 < 0x39)
    {
      goto LABEL_43;
    }
    uint64_t v39 = v37[28];
    if (v39)
    {
      int v40 = *(int *)((char *)v36 + v39);
      if ((v40 & 0x23) != 0 || (v40 & 7) == 4) {
        float v35 = (double)*a2 / 100.0 * *((float *)v8 + 21) + v35;
      }
    }
  }
LABEL_43:
  uint64_t v42 = *a1;
  unint64_t v43 = (int *)sub_2D5D58(*a1, a2[4]);
  long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v44 >= 0xBu)
  {
    uint64_t v45 = v44[5];
    if (v45)
    {
      if ((*((unsigned char *)v43 + v45) & 3) != 0) {
        goto LABEL_67;
      }
    }
  }
  long long v46 = (int *)sub_2D5D58(v42, a2[4]);
  uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v47 < 0x39u) {
    goto LABEL_67;
  }
  uint64_t v48 = v47[28];
  if (!v48) {
    goto LABEL_67;
  }
  int v49 = *(int *)((char *)v46 + v48);
  if ((v49 & 0x23) == 0 && (v49 & 7) != 4) {
    goto LABEL_67;
  }
  uint64_t v50 = (int *)sub_2D5D58(v42, a2[4]);
  int v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 >= 0x47u)
  {
    uint64_t v52 = v51[35];
    if (v52)
    {
      if ((*((unsigned char *)v50 + v52) & 3) != 0) {
        goto LABEL_67;
      }
    }
  }
  int v53 = (int *)sub_2D5D58(*a1, a2[4]);
  char v54 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v54 < 0x2Fu) {
    goto LABEL_67;
  }
  uint64_t v55 = v54[23];
  if (!v55 || *((unsigned char *)v53 + v55) != 44) {
    goto LABEL_67;
  }
  if (*((unsigned char *)v8 + 92))
  {
LABEL_66:
    float v35 = v35 + *((float *)v8 + 22);
    goto LABEL_67;
  }
  uint64_t v56 = (int *)sub_2D5D58(*a1, a2[4]);
  char v57 = (unsigned __int16 *)((char *)v56 - *v56);
  unsigned int v58 = *v57;
  if (v58 < 0x5F)
  {
    LODWORD(v59) = 0;
LABEL_64:
    LODWORD(v60) = 0;
    goto LABEL_65;
  }
  uint64_t v59 = v57[47];
  if (v57[47]) {
    LODWORD(v59) = *(int *)((char *)v56 + v59 + *(unsigned int *)((char *)v56 + v59));
  }
  if (v58 < 0x61) {
    goto LABEL_64;
  }
  uint64_t v60 = v57[48];
  if (v60) {
    LODWORD(v60) = *(int *)((char *)v56 + v60 + *(unsigned int *)((char *)v56 + v60));
  }
LABEL_65:
  if (!(v60 + v59)) {
    goto LABEL_66;
  }
LABEL_67:
  uint64_t v61 = (int *)sub_2D5D58(*a1, a2[4]);
  uint64_t v62 = (unsigned __int16 *)((char *)v61 - *v61);
  if (*v62 >= 0x2Fu)
  {
    uint64_t v63 = v62[23];
    if (v63)
    {
      float v64 = *((float *)v8 + 24);
      if (*((unsigned char *)v61 + v63) != 10) {
        float v64 = -0.0;
      }
      float v35 = v35 + v64;
    }
  }
  char v65 = (int *)sub_2D5D58(*a1, a2[4]);
  char v66 = (unsigned __int16 *)((char *)v65 - *v65);
  if (*v66 >= 0x45u)
  {
    uint64_t v67 = v66[34];
    if (v67)
    {
      float v68 = *((float *)v8 + 25);
      if (*((unsigned char *)v65 + v67) != 3) {
        float v68 = -0.0;
      }
      float v35 = v35 + v68;
    }
  }
  int v69 = (int *)sub_2D5D58(*a1, a2[4]);
  int v70 = (unsigned __int16 *)((char *)v69 - *v69);
  if (*v70 >= 0x45u)
  {
    uint64_t v71 = v70[34];
    if (v71)
    {
      float v72 = *((float *)v8 + 26);
      if (*((unsigned char *)v69 + v71) != 1) {
        float v72 = -0.0;
      }
      float v35 = v35 + v72;
    }
  }
  uint64_t v73 = (int *)sub_2D5D58(*a1, a2[4]);
  uint64_t v74 = (unsigned __int16 *)((char *)v73 - *v73);
  if (*v74 >= 0x45u)
  {
    uint64_t v75 = v74[34];
    if (v75)
    {
      float v76 = *((float *)v8 + 27);
      if (*((unsigned char *)v73 + v75) != 2) {
        float v76 = -0.0;
      }
      float v35 = v35 + v76;
    }
  }
  uint64_t v77 = (int *)sub_2D5D58(*a1, a2[4]);
  int v78 = (unsigned __int16 *)((char *)v77 - *v77);
  if (*v78 >= 0xBu)
  {
    uint64_t v79 = v78[5];
    if (v79)
    {
      if ((*((unsigned char *)v77 + v79 + 2) & 4) != 0) {
        float v35 = (double)*a2 / 100.0 * *((float *)v8 + 29) + (float)(v35 + *((float *)v8 + 28));
      }
    }
  }
  int v80 = (int *)sub_2D5D58(*a1, a2[4]);
  int v81 = (unsigned __int16 *)((char *)v80 - *v80);
  if (*v81 >= 0x2Fu)
  {
    uint64_t v82 = v81[23];
    if (v82)
    {
      float v83 = *((float *)v8 + 30);
      if (*((unsigned char *)v80 + v82) != 9) {
        float v83 = -0.0;
      }
      float v35 = v35 + v83;
    }
  }
  return v35 + sub_10B06E4(a1, (uint64_t)v8, a2, a3);
}

uint64_t *sub_10B11F0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (*(void *)(a2 + 72) == *(void *)(a2 + 80))
  {
    unsigned int v8 = 1;
    switch(a3)
    {
      case 0u:
        if (a4) {
          unsigned int v8 = 5;
        }
        else {
          unsigned int v8 = 0;
        }
        break;
      case 1u:
      case 3u:
        unsigned int v8 = 2;
        break;
      case 2u:
        break;
      case 5u:
        unsigned int v8 = 3;
        break;
      default:
        unsigned int v8 = 0;
        break;
    }
  }
  else
  {
    unsigned int v8 = 4;
  }
  unsigned int v50 = v8;
  unsigned int v9 = (void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10)
  {
    unint64_t v11 = v8;
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v10 <= v8) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    double v14 = *(uint64_t ***)(*v9 + 8 * v13);
    if (v14)
    {
      unsigned int v15 = *v14;
      if (v15)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v8)
            {
              if (*((_DWORD *)v15 + 4) == v8) {
                goto LABEL_54;
              }
            }
            else if ((v17 & (v10 - 1)) != v13)
            {
              goto LABEL_25;
            }
            unsigned int v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v8)
          {
            if (*((_DWORD *)v15 + 4) == v8) {
              goto LABEL_54;
            }
          }
          else
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
            if (v16 != v13) {
              break;
            }
          }
          unsigned int v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_25:
  uint64_t v18 = *(void *)a1;
  HIBYTE(v49) = 10;
  strcpy((char *)v48, "SnapScorer");
  long long __p = 0uLL;
  uint64_t v47 = 0;
  uint64_t v19 = sub_374CDC(v18, (uint64_t)v48, (uint64_t *)&__p);
  uint64_t v20 = __p;
  if ((void)__p)
  {
    uint64_t v21 = *((void *)&__p + 1);
    uint64_t v22 = (void *)__p;
    if (*((void *)&__p + 1) != (void)__p)
    {
      do
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 24;
      }
      while (v21 != v20);
      uint64_t v22 = (void *)__p;
    }
    *((void *)&__p + 1) = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v48[0]);
  }
  uint64_t v24 = *(void *)(a2 + 72);
  uint64_t v23 = *(void *)(a2 + 80);
  HIBYTE(v47) = 8;
  strcpy((char *)&__p, "any_mode");
  float v25 = (void *)sub_560F4(v19, (uint64_t)&__p);
  sub_10B1760(v25, a3, v24 != v23, a4, v48);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    int v26 = *(unsigned __int8 *)(a1 + 8);
    if (*(unsigned char *)(a1 + 8)) {
      goto LABEL_37;
    }
LABEL_41:
    HIBYTE(v45) = 7;
    LODWORD(v44[0]) = 1986622052;
    unsigned __int16 v27 = 26998;
    goto LABEL_43;
  }
  operator delete((void *)__p);
  int v26 = *(unsigned __int8 *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 8)) {
    goto LABEL_41;
  }
LABEL_37:
  if (v26 == 2)
  {
    HIBYTE(v45) = 7;
    LODWORD(v44[0]) = 1802264951;
    unsigned __int16 v27 = 26987;
    goto LABEL_43;
  }
  if (v26 == 3)
  {
    HIBYTE(v45) = 7;
    LODWORD(v44[0]) = 1818458467;
    unsigned __int16 v27 = 26988;
LABEL_43:
    *(_DWORD *)((char *)v44 + 3) = v27 | 0x676E0000;
    HIBYTE(v44[0]) = 0;
    goto LABEL_45;
  }
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v45 = 0;
LABEL_45:
  uint64_t v28 = (void *)sub_560F4(v19, (uint64_t)v44);
  sub_10B1760(v28, a3, v24 != v23, a4, &__p);
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  sub_59234(v48, (uint64_t)&__p);
  unint64_t v43 = v48;
  v44[0] = &v50;
  sub_10B26F8((uint64_t *)(a1 + 16), (uint64_t)&unk_20F06E0, (_DWORD **)v44, &v43);
  double v29 = v47;
  if (v47)
  {
    do
    {
      float v35 = (void **)*v29;
      sub_55198((uint64_t)(v29 + 5));
      if (*((char *)v29 + 39) < 0) {
        operator delete(v29[2]);
      }
      operator delete(v29);
      double v29 = v35;
    }
    while (v35);
  }
  int v30 = (void *)__p;
  *(void *)&long long __p = 0;
  if (v30) {
    operator delete(v30);
  }
  uint64_t v31 = v49;
  if (v49)
  {
    do
    {
      long long v36 = (void **)*v31;
      sub_55198((uint64_t)(v31 + 5));
      if (*((char *)v31 + 39) < 0) {
        operator delete(v31[2]);
      }
      operator delete(v31);
      uint64_t v31 = v36;
    }
    while (v36);
  }
  float v32 = v48[0];
  v48[0] = 0;
  if (v32) {
    operator delete(v32);
  }
  unint64_t v11 = v50;
  unint64_t v10 = *(void *)(a1 + 24);
  unsigned int v8 = v50;
LABEL_54:
  if (!v10) {
    goto LABEL_86;
  }
  uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    unint64_t v34 = v11;
    if (v10 <= v11) {
      unint64_t v34 = v11 % v10;
    }
  }
  else
  {
    unint64_t v34 = (v10 - 1) & v11;
  }
  unsigned int v37 = *(uint64_t ***)(*v9 + 8 * v34);
  if (!v37 || (unsigned int v38 = *v37) == 0) {
LABEL_86:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v33.u32[0] < 2uLL)
  {
    unint64_t v39 = v10 - 1;
    while (1)
    {
      uint64_t v41 = v38[1];
      if (v41 == v11)
      {
        if (*((_DWORD *)v38 + 4) == v8) {
          return v38 + 3;
        }
      }
      else if ((v41 & v39) != v34)
      {
        goto LABEL_86;
      }
      unsigned int v38 = (uint64_t *)*v38;
      if (!v38) {
        goto LABEL_86;
      }
    }
  }
  while (1)
  {
    unint64_t v40 = v38[1];
    if (v40 == v11) {
      break;
    }
    if (v40 >= v10) {
      v40 %= v10;
    }
    if (v40 != v34) {
      goto LABEL_86;
    }
LABEL_70:
    unsigned int v38 = (uint64_t *)*v38;
    if (!v38) {
      goto LABEL_86;
    }
  }
  if (*((_DWORD *)v38 + 4) != v8) {
    goto LABEL_70;
  }
  return v38 + 3;
}

void sub_10B16D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void sub_10B172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10B1724);
}

void sub_10B1760(void *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25FE140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25FE140))
  {
    xmmword_25FE178[1] = 0u;
    xmmword_25FE178[0] = 0u;
    dword_25FE198 = 1065353216;
    __cxa_guard_release(&qword_25FE140);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "any_point");
  unint64_t v10 = sub_58070(a1, (uint64_t)&__p);
  if (v10 && *((_DWORD *)v10 + 12) == 2) {
    unint64_t v11 = (_OWORD *)v10[5];
  }
  else {
    unint64_t v11 = xmmword_25FE178;
  }
  sub_54214((uint64_t)a5, (uint64_t)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!a3) {
      goto LABEL_14;
    }
LABEL_10:
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "access_point");
    uint8x8_t v12 = sub_58070(a1, (uint64_t)&__p);
    unint64_t v13 = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v13) {
        goto LABEL_14;
      }
    }
    else if (!v12)
    {
      goto LABEL_14;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "access_point");
    uint64_t v14 = sub_560F4(a1, (uint64_t)&__p);
    sub_59234(a5, v14);
    goto LABEL_27;
  }
  if (a3) {
    goto LABEL_10;
  }
LABEL_14:
  memset(&__p, 0, sizeof(__p));
  if (a2 < 6) {
    std::string::assign(&__p, off_243F910[a2]);
  }
  unsigned int v15 = sub_58070(a1, (uint64_t)&__p);
  if (v15 && *((_DWORD *)v15 + 12) == 2) {
    unint64_t v16 = (_OWORD *)v15[5];
  }
  else {
    unint64_t v16 = xmmword_25FE178;
  }
  sub_59234(a5, (uint64_t)v16);
  if (a2 || !a4)
  {
LABEL_27:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  char v21 = 14;
  strcpy((char *)v20, "reroute_origin");
  uint64_t v17 = sub_58070(a1, (uint64_t)v20);
  uint64_t v18 = v17;
  if (v21 < 0)
  {
    operator delete(v20[0]);
    if (!v18) {
      goto LABEL_27;
    }
  }
  else if (!v17)
  {
    goto LABEL_27;
  }
  char v21 = 14;
  strcpy((char *)v20, "reroute_origin");
  uint64_t v19 = sub_560F4(a1, (uint64_t)v20);
  sub_59234(a5, v19);
  if ((v21 & 0x80000000) == 0) {
    goto LABEL_27;
  }
  operator delete(v20[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
}

void sub_10B1A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_5450C(v20);
  _Unwind_Resume(a1);
}

void sub_10B1A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10B1A64(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "distance_penalty_factor");
  float v4 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)a1 = v4;
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "ferry_penalty");
  float v5 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 4) = v5;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "freeway_penalty");
  float v6 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 8) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "freeway_penalty_threshold_meters");
  double v7 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v7 >= 0.0)
  {
    double v8 = v7;
    if (v7 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v9 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    double v8 = v7;
    if (v7 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v9 = (uint64_t)(v7 + v7);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_15:
  if (v8 < 9.22337204e18)
  {
    if (v7 >= 0.0)
    {
      if (v7 >= 4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v10 = (uint64_t)(v7 + v7) + 1;
    }
    else
    {
      if (v7 <= -4.50359963e15) {
        goto LABEL_26;
      }
      uint64_t v10 = (uint64_t)(v7 + v7);
      if (v10 >= 1) {
        --v10;
      }
    }
    double v7 = (double)(v10 >> 1);
LABEL_26:
    *(void *)(a1 + 16) = (uint64_t)v7;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_27:
  operator delete(__p[0]);
LABEL_28:
  strcpy((char *)__p, "freeway_penalty_factor");
  HIBYTE(__p[2]) = 22;
  float v11 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 24) = v11;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "ramp_penalty");
  float v12 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 28) = v12;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "ramp_penalty_threshold_meters");
  double v13 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v13 >= 0.0)
  {
    double v14 = v13;
    if (v13 >= 4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v15 = (uint64_t)(v13 + v13) + 1;
  }
  else
  {
    double v14 = v13;
    if (v13 <= -4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v15 = (uint64_t)(v13 + v13);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v14 = (double)(v15 >> 1);
LABEL_40:
  if (v14 < 9.22337204e18)
  {
    if (v13 >= 0.0)
    {
      if (v13 >= 4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v16 = (uint64_t)(v13 + v13) + 1;
    }
    else
    {
      if (v13 <= -4.50359963e15) {
        goto LABEL_51;
      }
      uint64_t v16 = (uint64_t)(v13 + v13);
      if (v16 >= 1) {
        --v16;
      }
    }
    double v13 = (double)(v16 >> 1);
LABEL_51:
    *(void *)(a1 + 32) = (uint64_t)v13;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_53;
  }
LABEL_52:
  operator delete(__p[0]);
LABEL_53:
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "ramp_penalty_factor");
  float v17 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 40) = v17;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "bridge_penalty");
  float v18 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 44) = v18;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "tunnel_penalty");
  float v19 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 48) = v19;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "enable_direction_penalty");
  BOOL v20 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 52) = v20;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "direction_penalty_factor");
  float v21 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 56) = v21;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "direction_penalty_angle_threshold");
  float v22 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 60) = v22;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "min_speed_to_consider_direction_kph");
  *(double *)(a1 + 64) = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93D0;
  strcpy((char *)__p[0], "max_distance_meters_to_consider_direction");
  double v23 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v23 >= 0.0)
  {
    double v24 = v23;
    if (v23 >= 4.50359963e15) {
      goto LABEL_75;
    }
    uint64_t v25 = (uint64_t)(v23 + v23) + 1;
  }
  else
  {
    double v24 = v23;
    if (v23 <= -4.50359963e15) {
      goto LABEL_75;
    }
    uint64_t v25 = (uint64_t)(v23 + v23);
    if (v25 >= 1) {
      --v25;
    }
  }
  double v24 = (double)(v25 >> 1);
LABEL_75:
  if (v24 < 9.22337204e18)
  {
    if (v23 >= 0.0)
    {
      if (v23 >= 4.50359963e15) {
        goto LABEL_86;
      }
      uint64_t v26 = (uint64_t)(v23 + v23) + 1;
    }
    else
    {
      if (v23 <= -4.50359963e15) {
        goto LABEL_86;
      }
      uint64_t v26 = (uint64_t)(v23 + v23);
      if (v26 >= 1) {
        --v26;
      }
    }
    double v23 = (double)(v26 >> 1);
LABEL_86:
    *(void *)(a1 + 72) = (uint64_t)v23;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  *(void *)(a1 + 72) = 0x7FFFFFFFFFFFFFFELL;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    goto LABEL_88;
  }
LABEL_87:
  operator delete(__p[0]);
LABEL_88:
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "non_navigable_segment_penalty");
  float v27 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 80) = v27;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "walking_only_segment_penalty_factor");
  float v28 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 84) = v28;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "sidewalk_walking_only_penalty");
  float v29 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 88) = v29;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "enable_sidewalk_penalty_for_buddies");
  BOOL v30 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 92) = v30;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "logical_connection_penalty");
  float v31 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 96) = v31;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "underground_penalty");
  float v32 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 100) = v32;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "indoor_penalty");
  float v33 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 104) = v33;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "covered_penalty");
  float v34 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 108) = v34;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "terminal_use_penalty");
  float v35 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 112) = v35;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "terminal_use_penalty_factor");
  float v36 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 116) = v36;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "stairs_penalty");
  float v37 = sub_10B2638(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(float *)(a1 + 120) = v37;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "consider_dead_reckoning_course");
  BOOL v38 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 124) = v38;
  return a1;
}

void sub_10B25B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_10B2638(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    float v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_10B26C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10B26F8(uint64_t *a1, uint64_t a2, _DWORD **a3, void **a4)
{
  double v7 = operator new(0x98uLL);
  *double v7 = 0;
  v7[1] = 0;
  *((_DWORD *)v7 + 4) = **a3;
  sub_10B1A64((uint64_t)(v7 + 3), *a4);
  unint64_t v8 = *((unsigned int *)v7 + 4);
  v7[1] = v8;
  uint64_t v9 = sub_10B2870((uint64_t)a1, v8, (int *)v7 + 4);
  if (v9)
  {
    operator delete(v7);
    return v9;
  }
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = v7[1];
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  uint64_t v14 = *a1;
  uint64_t v15 = *(void **)(*a1 + 8 * v12);
  if (v15)
  {
    *double v7 = *v15;
LABEL_15:
    *uint64_t v15 = v7;
    goto LABEL_16;
  }
  *double v7 = a1[2];
  a1[2] = (uint64_t)v7;
  *(void *)(v14 + 8 * v12) = a1 + 2;
  if (*v7)
  {
    unint64_t v16 = *(void *)(*v7 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v11) {
        v16 %= *(void *)&v11;
      }
    }
    else
    {
      v16 &= *(void *)&v11 - 1;
    }
    uint64_t v15 = (void *)(*a1 + 8 * v16);
    goto LABEL_15;
  }
LABEL_16:
  ++a1[3];
  return v7;
}

void sub_10B2848(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10B285C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10B2870(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_22;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2 % v4;
    if (v4 > a2) {
      unint64_t v6 = a2;
    }
    double v7 = *(uint64_t ***)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & a2;
    double v7 = *(uint64_t ***)(*(void *)a1 + 8 * v6);
    if (!v7) {
      goto LABEL_22;
    }
  }
  double result = *v7;
  if (*v7)
  {
    int v9 = *a3;
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v11 = result[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)result + 4) == v9) {
            return result;
          }
        }
        else if ((v11 & (v4 - 1)) != v6)
        {
          goto LABEL_22;
        }
        double result = (uint64_t *)*result;
        if (!result) {
          goto LABEL_22;
        }
      }
    }
    do
    {
      unint64_t v10 = result[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)result + 4) == v9) {
          return result;
        }
      }
      else
      {
        if (v10 >= v4) {
          v10 %= v4;
        }
        if (v10 != v6) {
          break;
        }
      }
      double result = (uint64_t *)*result;
    }
    while (result);
  }
LABEL_22:
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (v4 && (float)(v13 * (float)v4) >= v12) {
    return 0;
  }
  BOOL v14 = 1;
  if (v4 >= 3) {
    BOOL v14 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v4);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    size_t prime = v16;
  }
  else {
    size_t prime = v15;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_46;
  }
  if (prime < v4)
  {
    size_t v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      size_t v21 = std::__next_prime(v18);
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2) {
        size_t v18 = v20;
      }
      if (prime <= v18) {
        size_t prime = v18;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_46:
    sub_B6C0(a1, prime);
  }
  return 0;
}

void sub_10B2A80()
{
  unk_25FE15F = 16641;
  word_25FE148 = 65;
  byte_25FE177 = 1;
  byte_25FE161 = 0;
}

uint64_t sub_10B2AA8(uint64_t a1, void *a2, uint64_t a3)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "avoid_snapping_across_water_bodies");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "use_non_water_body_snapping_fallback");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "num_water_boundaries_to_search");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "max_num_attempts_candidate_search");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 8) = v9;
  strcpy((char *)__p, "num_segments_to_return");
  HIBYTE(__p[2]) = 22;
  int v10 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 12) = v10;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "water_boundary_search_accuracy_m");
  double v11 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "max_allowable_bbox_water_perimeter");
  double v12 = sub_5C7E8(a2, (uint64_t)__p) * 100.0;
  if (v12 >= 0.0)
  {
    double v13 = v12;
    if (v12 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v14 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    double v13 = v12;
    if (v12 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v14 = (uint64_t)(v12 + v12);
    if (v14 >= 1) {
      --v14;
    }
  }
  double v13 = (double)(v14 >> 1);
LABEL_21:
  if (v13 >= 9.22337204e18)
  {
    *(void *)(a1 + 24) = 0x7FFFFFFFFFFFFFFELL;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_32;
    }
    uint64_t v15 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_32;
    }
    uint64_t v15 = (uint64_t)(v12 + v12);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v12 = (double)(v15 >> 1);
LABEL_32:
  *(void *)(a1 + 24) = (uint64_t)v12;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_34;
    }
LABEL_37:
    *(void *)(a1 + 32) = a3;
    return a1;
  }
LABEL_36:
  operator delete(__p[0]);
  if (a3 != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_37;
  }
LABEL_34:
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "max_search_distance_m");
  *(void *)(a1 + 32) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_10B2E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10B2EAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)(a1 + 48) = v12;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v14 = *(unsigned char **)(a2 + 72);
  double v13 = *(unsigned char **)(a2 + 80);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    unint64_t v16 = (char *)operator new(v13 - v14);
    *(void *)(a1 + 72) = v16;
    *(void *)(a1 + 80) = v16;
    float v17 = &v16[4 * (v15 >> 2)];
    *(void *)(a1 + 88) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 80) = v17;
  }
  int v18 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = sub_3750CC(a3);
  uint64_t v19 = sub_376E8C(a3);
  *(void *)(a1 + 120) = 0;
  uint64_t v20 = (void **)(a1 + 120);
  *(void *)(a1 + 112) = v19;
  *(_WORD *)(a1 + 144) = 0;
  size_t v21 = (_OWORD *)(a1 + 144);
  *(void *)(a1 + 156) = 0;
  *(void *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(int64x2_t *)(a1 + 168) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  HIBYTE(v38) = 12;
  strcpy((char *)v37, "WaterSnapper");
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v35 = 0;
  float v22 = sub_374CDC((uint64_t)a3, (uint64_t)v37, (uint64_t *)__p);
  double v23 = (void **)__p[0];
  if (__p[0])
  {
    double v24 = (void **)__p[1];
    uint64_t v25 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v23);
      uint64_t v25 = __p[0];
    }
    __p[1] = v23;
    operator delete(v25);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  BYTE7(v35) = 8;
  strcpy((char *)__p, "standard");
  uint64_t v26 = sub_560F4(v22, (uint64_t)__p);
  sub_54214((uint64_t)v37, v26);
  if (SBYTE7(v35) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v27 = sub_560F4(v22, a4);
  sub_59234(v37, v27);
  sub_10B2AA8((uint64_t)__p, v37, a5);
  long long v28 = v35;
  _OWORD *v21 = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 160) = v28;
  *(void *)(a1 + 176) = v36;
  if (*(unsigned char *)v21)
  {
    sub_10B3200(*(uint64_t **)(a1 + 112), (unsigned int *)a1, *(_DWORD *)(a1 + 148), *(void *)(a1 + 176), (unsigned int (*)(__n128))sub_29C8, (char **)__p);
    float v29 = *v20;
    if (*v20)
    {
      *(void *)(a1 + 128) = v29;
      operator delete(v29);
    }
    *(_OWORD *)(a1 + 120) = *(_OWORD *)__p;
    *(void *)(a1 + 136) = v35;
  }
  BOOL v30 = v38;
  if (v38)
  {
    do
    {
      float v33 = (void **)*v30;
      sub_55198((uint64_t)(v30 + 5));
      if (*((char *)v30 + 39) < 0) {
        operator delete(v30[2]);
      }
      operator delete(v30);
      BOOL v30 = v33;
    }
    while (v33);
  }
  float v31 = v37[0];
  v37[0] = 0;
  if (v31) {
    operator delete(v31);
  }
  return a1;
}

void sub_10B3180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_5450C((uint64_t)&__p);
  uint64_t v26 = *v24;
  if (*v24)
  {
    *(void *)(v22 + 128) = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v23;
  if (*v23)
  {
    *(void *)(v22 + 80) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

void sub_10B3200(uint64_t *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned int (*a5)(__n128)@<X4>, char **a6@<X8>)
{
  BOOL v6 = a6;
  if (!a3 || (*a2 & a2[1]) == 0xFFFFFFFF)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
    return;
  }
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v8 = 1.79769313e308;
  }
  else
  {
    if (a4 < 0) {
      __int16 v9 = -50;
    }
    else {
      __int16 v9 = 50;
    }
    double v8 = (double)(a4 / 100
                + (int)(((5243 * (__int16)(v9 + a4 % 100)) >> 19)
                      + ((5243 * (__int16)(v9 + a4 % 100)) >> 31)));
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_40889C((uint64_t)&__p, a3);
  char v177 = 0;
  uint64_t v175 = 0x3E4CCCCD3F000000;
  int v178 = 0;
  int v179 = 0;
  uint64_t v180 = 0;
  uint64_t v181 = 0;
  uint64_t v182 = 32;
  long long v174 = xmmword_20B98A0;
  __int16 v176 = 256;
  int v183 = 1;
  char v184 = malloc_type_malloc(0x80uLL, 0x100004052888210uLL);
  int32x4_t v10 = vdupq_n_s32(1u);
  long long v11 = (int32x4_t *)((char *)v184 + 16);
  uint64_t v12 = 32;
  do
  {
    v11[-1] = v10;
    *long long v11 = v10;
    v11 += 2;
    v12 -= 8;
  }
  while (v12);
  sub_518C8(*a2 >> 17, a2[1] >> 17);
  int v14 = v13 | 0x40000000;
  int v173 = v13 | 0x40000000;
  int64_t v15 = (char *)operator new(0x40uLL);
  *(void *)int64_t v15 = 0;
  *((_DWORD *)v15 + 14) = 0;
  *((_DWORD *)v15 + 2) = v14;
  sub_408B84((uint64_t)&v174, 1);
  sub_408E60((uint64_t)&v174, (unsigned int *)&v173, (uint64_t)v189);
  float v17 = v15 + 64;
  char v169 = v15 + 64;
  unint64_t v18 = a3;
  uint64_t v171 = v6;
  unint64_t v165 = a3;
  while (0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4) < v18)
  {
    double v19 = *(double *)v15;
    uint64_t v20 = (long long *)(v15 + 8);
    int v21 = *((_DWORD *)v15 + 14);
    int v190 = v21;
    if (v21 == 1)
    {
      long long v23 = *v20;
      long long v24 = *(_OWORD *)(v15 + 40);
      unint64_t v16 = (unint64_t)v188;
      v189[1] = *(_OWORD *)(v15 + 24);
      v189[2] = v24;
      v189[0] = v23;
      uint64_t v22 = v17 - v15;
      if (v17 - v15 < 65) {
        goto LABEL_73;
      }
    }
    else
    {
      if (!v21)
      {
        LODWORD(v16) = *(_DWORD *)v20;
        LODWORD(v189[0]) = *(_DWORD *)v20;
      }
      uint64_t v22 = v17 - v15;
      if (v17 - v15 < 65) {
        goto LABEL_73;
      }
    }
    double v25 = *(double *)v15;
    if (v21 == 1)
    {
      LODWORD(v16) = *((_DWORD *)v15 + 2);
      long long v26 = *(_OWORD *)(v15 + 12);
      long long v27 = *(_OWORD *)(v15 + 28);
      *(_OWORD *)&v188[28] = *(_OWORD *)(v15 + 40);
      *(_OWORD *)uint64_t v188 = v26;
      *(_OWORD *)&v188[16] = v27;
    }
    else if (!v21)
    {
      LODWORD(v16) = *(_DWORD *)v20;
    }
    uint64_t v28 = 0;
    uint64_t v29 = v22 >> 6;
    int64_t v30 = (unint64_t)((v22 >> 6) - 2) >> 1;
    float v31 = v15;
    do
    {
      float v34 = v31;
      v31 += 64 * v28 + 64;
      uint64_t v35 = 2 * v28;
      uint64_t v28 = (2 * v28) | 1;
      uint64_t v36 = v35 + 2;
      if (v36 < v29 && *(double *)v31 > *((double *)v31 + 8))
      {
        v31 += 64;
        uint64_t v28 = v36;
      }
      float v37 = (long long *)(v31 + 8);
      *(void *)float v34 = *(void *)v31;
      BOOL v38 = v34 + 8;
      if (v34 != v31)
      {
        int v39 = *((_DWORD *)v34 + 14);
        int v40 = *((_DWORD *)v31 + 14);
        if (v39 == v40)
        {
          if (v39 == 1)
          {
            long long v41 = *v37;
            long long v42 = *(_OWORD *)(v31 + 24);
            *(_OWORD *)(v34 + 36) = *(_OWORD *)(v31 + 36);
            _OWORD *v38 = v41;
            *(_OWORD *)(v34 + 24) = v42;
          }
          else if (!v39)
          {
            *(_DWORD *)BOOL v38 = *(_DWORD *)v37;
          }
        }
        else
        {
          if (v40 == 1)
          {
            long long v32 = *v37;
            long long v33 = *(_OWORD *)(v31 + 40);
            *(_OWORD *)(v34 + 24) = *(_OWORD *)(v31 + 24);
            *(_OWORD *)(v34 + 40) = v33;
            _OWORD *v38 = v32;
          }
          else if (!v40)
          {
            *(_DWORD *)BOOL v38 = *(_DWORD *)v37;
          }
          *((_DWORD *)v34 + 14) = *((_DWORD *)v31 + 14);
        }
      }
    }
    while (v28 <= v30);
    if (v31 != v17 - 64)
    {
      *(void *)float v31 = *((void *)v17 - 8);
      unint64_t v43 = v17 - 56;
      int v44 = *((_DWORD *)v31 + 14);
      int v45 = *((_DWORD *)v17 - 2);
      if (v44 == v45)
      {
        if (v44 == 1)
        {
          long long v46 = *(_OWORD *)v43;
          long long v47 = *(_OWORD *)(v17 - 40);
          *(_OWORD *)(v31 + 36) = *(_OWORD *)(v17 - 28);
          *float v37 = v46;
          *(_OWORD *)(v31 + 24) = v47;
        }
        else if (!v44)
        {
          *(_DWORD *)float v37 = *(_DWORD *)v43;
          *((double *)v17 - 8) = v25;
          if (*((_DWORD *)v17 - 2) != v21) {
            goto LABEL_56;
          }
LABEL_64:
          if (v21 == 1)
          {
            *((_DWORD *)v17 - 14) = v16;
            long long v52 = *(_OWORD *)v188;
            long long v53 = *(_OWORD *)&v188[16];
            *(void *)(v17 - 20) = *(void *)&v188[32];
            *(_OWORD *)(v17 - 36) = v53;
            *(_OWORD *)(v17 - 52) = v52;
          }
          else if (!v21)
          {
            *(_DWORD *)unint64_t v43 = v16;
          }
LABEL_72:
          sub_4089D4((uint64_t)v15, (uint64_t)(v31 + 64), (v31 + 64 - v15) >> 6);
          goto LABEL_73;
        }
        *((double *)v17 - 8) = v25;
        if (*((_DWORD *)v17 - 2) != v21) {
          goto LABEL_56;
        }
        goto LABEL_64;
      }
      if (v45 == 1)
      {
        long long v48 = *(_OWORD *)v43;
        long long v49 = *(_OWORD *)(v17 - 24);
        *(_OWORD *)(v31 + 24) = *(_OWORD *)(v17 - 40);
        *(_OWORD *)(v31 + 40) = v49;
        *float v37 = v48;
        *((_DWORD *)v31 + 14) = *((_DWORD *)v17 - 2);
        *((double *)v17 - 8) = v25;
        if (*((_DWORD *)v17 - 2) == v21) {
          goto LABEL_64;
        }
      }
      else
      {
        if (!v45) {
          *(_DWORD *)float v37 = *(_DWORD *)v43;
        }
        *((_DWORD *)v31 + 14) = *((_DWORD *)v17 - 2);
        *((double *)v17 - 8) = v25;
        if (*((_DWORD *)v17 - 2) == v21) {
          goto LABEL_64;
        }
      }
LABEL_56:
      if (v21 == 1)
      {
        *((_DWORD *)v17 - 14) = v16;
        long long v50 = *(_OWORD *)v188;
        long long v51 = *(_OWORD *)&v188[16];
        *(_OWORD *)(v17 - 24) = *(_OWORD *)&v188[28];
        *(_OWORD *)(v17 - 36) = v51;
        *(_OWORD *)(v17 - 52) = v50;
      }
      else if (!v21)
      {
        *(_DWORD *)unint64_t v43 = v16;
      }
      *((_DWORD *)v17 - 2) = v21;
      goto LABEL_72;
    }
    *(double *)float v31 = v25;
    if (*((_DWORD *)v31 + 14) == v21)
    {
      if (v21 == 1)
      {
        *((_DWORD *)v31 + 2) = v16;
        long long v160 = *(_OWORD *)v188;
        long long v161 = *(_OWORD *)&v188[16];
        *(void *)(v31 + 44) = *(void *)&v188[32];
        *(_OWORD *)(v31 + 28) = v161;
        *(_OWORD *)(v31 + 12) = v160;
      }
      else if (!v21)
      {
        *(_DWORD *)float v37 = v16;
      }
    }
    else
    {
      if (v21 == 1)
      {
        *((_DWORD *)v31 + 2) = v16;
        long long v162 = *(_OWORD *)v188;
        long long v163 = *(_OWORD *)&v188[16];
        *(_OWORD *)(v31 + 40) = *(_OWORD *)&v188[28];
        *(_OWORD *)(v31 + 28) = v163;
        *(_OWORD *)(v31 + 12) = v162;
      }
      else if (!v21)
      {
        *(_DWORD *)float v37 = v16;
        *((_DWORD *)v31 + 14) = 0;
        goto LABEL_73;
      }
      *((_DWORD *)v31 + 14) = v21;
    }
LABEL_73:
    if (v19 > v8) {
      break;
    }
    LODWORD(v16) = v187;
    if (v187 == (v186 - (unsigned char *)__p) >> 3)
    {
      if (v19 > *(double *)__p) {
        break;
      }
    }
    else if (v19 > 1.79769313e308)
    {
      break;
    }
    v17 -= 64;
    if (v190 != 1)
    {
      unsigned int v57 = v189[0];
      unsigned int v58 = (unsigned int *)sub_2AB884(*a1, 10, v189[0], 1);
      if (v63)
      {
        float v64 = (int *)((char *)v58 + *v58);
        char v65 = (unsigned __int16 *)((char *)v64 - *v64);
        if (*v65 >= 5u)
        {
          uint64_t v66 = v65[2];
          if (v66)
          {
            uint64_t v67 = (unsigned int *)((char *)v64 + v66 + *(unsigned int *)((char *)v64 + v66));
            uint64_t v68 = *v67;
            if (v68)
            {
              uint64_t v69 = 0;
              int v70 = v67 + 1;
              while (2)
              {
                uint64_t v73 = (int *)((char *)&v70[v69] + v70[v69]);
                *(void *)&long long v191 = __PAIR64__(v57, v69);
                sub_10B509C(v73, a2, (unsigned int *)&v191, (uint64_t)v188, v59.n128_u64[0], v60, v61, v62);
                v59.n128_u64[0] = *(void *)v188;
                double v60 = 1.79769313e308;
                if (*(double *)v188 != 1.79769313e308)
                {
                  if (v187 == (v186 - (unsigned char *)__p) >> 3)
                  {
                    double v60 = *(double *)__p;
                    if (*(double *)v188 >= *(double *)__p || *(double *)v188 >= v8) {
                      goto LABEL_96;
                    }
                  }
                  else
                  {
                    double v60 = 1.79769313e308;
                    if (*(double *)v188 >= 1.79769313e308 || *(double *)v188 >= v8) {
                      goto LABEL_96;
                    }
                  }
                  unint64_t v168 = v168 & 0xFFFFFFFF00000000 | *(unsigned int *)&v188[24];
                  if (a5(v59))
                  {
                    *(void *)&long long v191 = *(void *)v188;
                    sub_408754((uint64_t)&__p, (double *)&v191);
                    uint64_t v76 = *(void *)v188;
                    int v77 = *(_DWORD *)v188;
                    if (v17 < v169)
                    {
                      long long v191 = *(_OWORD *)&v188[4];
                      v192[0] = *(_OWORD *)&v188[20];
                      *(_OWORD *)((char *)v192 + 12) = *(_OWORD *)&v188[32];
                      *(void *)float v17 = *(void *)v188;
                      *((_DWORD *)v17 + 14) = 1;
                      *((_DWORD *)v17 + 2) = v77;
                      long long v72 = v191;
                      long long v71 = v192[0];
                      *(_OWORD *)(v17 + 40) = *(_OWORD *)((char *)v192 + 12);
                      *(_OWORD *)(v17 + 12) = v72;
                      *(_OWORD *)(v17 + 28) = v71;
                      v17 += 64;
                    }
                    else
                    {
                      uint64_t v78 = (v17 - v15) >> 6;
                      unint64_t v79 = v78 + 1;
                      if ((unint64_t)(v78 + 1) >> 58) {
                        sub_2E00();
                      }
                      if ((v169 - v15) >> 5 > v79) {
                        unint64_t v79 = (v169 - v15) >> 5;
                      }
                      if ((unint64_t)(v169 - v15) >= 0x7FFFFFFFFFFFFFC0) {
                        unint64_t v80 = 0x3FFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v80 = v79;
                      }
                      if (v80)
                      {
                        if (v80 >> 58) {
                          sub_188D718();
                        }
                        int v81 = *(_DWORD *)v188;
                        uint64_t v82 = v68;
                        float v83 = v70;
                        unint64_t v84 = v80;
                        __int16 v85 = (char *)operator new(v80 << 6);
                        unint64_t v80 = v84;
                        int v70 = v83;
                        uint64_t v68 = v82;
                        int v77 = v81;
                      }
                      else
                      {
                        __int16 v85 = 0;
                      }
                      uint64_t v86 = &v85[64 * v78];
                      *(void *)uint64_t v86 = v76;
                      *((_DWORD *)v86 + 14) = 1;
                      *((_DWORD *)v86 + 2) = v77;
                      long long v87 = *(_OWORD *)&v188[20];
                      *(_OWORD *)(v86 + 12) = *(_OWORD *)&v188[4];
                      *(_OWORD *)(v86 + 28) = v87;
                      *(_OWORD *)(v86 + 40) = *(_OWORD *)&v188[32];
                      if (v17 == v15)
                      {
                        unsigned int v95 = &v85[64 * v78];
                        char v169 = &v85[64 * v80];
                        float v17 = v86 + 64;
                        if (v15) {
                          goto LABEL_130;
                        }
                      }
                      else
                      {
                        uint64_t v88 = 0;
                        do
                        {
                          char v91 = &v86[v88];
                          *((void *)v91 - 8) = *(void *)&v17[v88 - 64];
                          uint64_t v92 = &v86[v88 - 56];
                          uint64_t v93 = &v17[v88 - 56];
                          int v94 = *(_DWORD *)&v17[v88 - 8];
                          *((_DWORD *)v91 - 2) = v94;
                          if (v94 == 1)
                          {
                            long long v89 = *(_OWORD *)v93;
                            long long v90 = *(_OWORD *)&v17[v88 - 24];
                            *(_OWORD *)&v86[v88 - 40] = *(_OWORD *)&v17[v88 - 40];
                            *(_OWORD *)&v86[v88 - 24] = v90;
                            *(_OWORD *)uint64_t v92 = v89;
                          }
                          else if (!v94)
                          {
                            *(_DWORD *)uint64_t v92 = *(_DWORD *)v93;
                          }
                          v88 -= 64;
                        }
                        while (&v17[v88] != v15);
                        unsigned int v95 = &v86[v88];
                        char v169 = &v85[64 * v80];
                        float v17 = v86 + 64;
                        if (v15) {
LABEL_130:
                        }
                          operator delete(v15);
                      }
                      int64_t v15 = v95;
                    }
                    sub_4089D4((uint64_t)v15, (uint64_t)v17, (v17 - v15) >> 6);
                  }
                }
LABEL_96:
                if (++v69 == v68) {
                  break;
                }
                continue;
              }
            }
          }
        }
      }
      int v96 = -1;
      while (2)
      {
        int v97 = -1;
LABEL_139:
        unsigned int v98 = sub_511FC(v57);
        char v99 = v98 & 0xFE;
        unsigned int v100 = v57 & ~(-1 << (v98 & 0xFE));
        int v101 = sub_51938(v100);
        int v102 = sub_51938(v100 >> 1);
        int v103 = 1 << (v98 >> 1);
        unsigned int v104 = (int)(((((((v101 + v96) & ~((v101 + v96) >> 31)) - (v101 + v96) + ((v101 + v96) >> 31)) >> (v98 >> 1))
                     + ((v101 + v96) >> 31)) << (v98 >> 1))
                   + v101
                   + v96)
             % v103;
        unsigned int v105 = (int)(((((((v102 + v97) & ~((v102 + v97) >> 31)) - (v102 + v97) + ((v102 + v97) >> 31)) >> (v98 >> 1))
                     + ((v102 + v97) >> 31)) << (v98 >> 1))
                   + v102
                   + v97)
             % v103;
        int v106 = -1 << (v98 >> 1);
        if (~v106 < v104) {
          unsigned int v107 = ~v106;
        }
        else {
          unsigned int v107 = v104;
        }
        if (~v106 < v105) {
          unsigned int v108 = ~v106;
        }
        else {
          unsigned int v108 = v105;
        }
        sub_518C8(v107, v108);
        uint64_t v110 = v109 | (1 << v99);
        int v172 = v109 | (1 << v99);
        unint64_t v16 = v182 - 1;
        uint64_t v111 = (v182 - 1) & v110;
        int v112 = *((_DWORD *)v184 + v111);
        if (v183 != v112)
        {
          if (v180)
          {
            uint64_t v121 = 1;
            while (v179 == v112 || v110 != v112)
            {
              uint64_t v111 = (v111 + v121) & v16;
              int v112 = *((_DWORD *)v184 + v111);
              ++v121;
              if (v183 == v112) {
                goto LABEL_146;
              }
            }
          }
          else
          {
            uint64_t v137 = 1;
            while (v110 != v112)
            {
              uint64_t v111 = (v111 + v137) & v16;
              int v112 = *((_DWORD *)v184 + v111);
              ++v137;
              if (v183 == v112) {
                goto LABEL_146;
              }
            }
          }
          if (v111 != -1)
          {
            BOOL v6 = v171;
            goto LABEL_138;
          }
        }
LABEL_146:
        sub_408B84((uint64_t)&v174, 1);
        uint64_t v113 = v180;
        uint64_t v114 = v182 - 1;
        uint64_t v115 = (v182 - 1) & v172;
        int v116 = *((_DWORD *)v184 + v115);
        BOOL v6 = v171;
        if (v183 == v116) {
          goto LABEL_147;
        }
        if (v180)
        {
          uint64_t v117 = -1;
          uint64_t v122 = 1;
          do
          {
            if (v179 == v116)
            {
              if (v117 == -1) {
                uint64_t v117 = v115;
              }
            }
            else if (v172 == v116)
            {
              goto LABEL_171;
            }
            uint64_t v115 = (v115 + v122) & v114;
            int v116 = *((_DWORD *)v184 + v115);
            ++v122;
          }
          while (v183 != v116);
          if (v117 == -1) {
LABEL_147:
          }
            uint64_t v117 = v115;
        }
        else
        {
          uint64_t v138 = 1;
          while (v172 != v116)
          {
            uint64_t v115 = (v115 + v138) & v114;
            int v116 = *((_DWORD *)v184 + v115);
            ++v138;
            if (v183 == v116)
            {
              uint64_t v113 = 0;
              goto LABEL_147;
            }
          }
LABEL_171:
          if (v115 != -1) {
            goto LABEL_154;
          }
          uint64_t v117 = -1;
        }
        if ((unint64_t)(v181 - v113) >= 0x3FFFFFFFFFFFFFFFLL)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "insert overflow");
        }
        if (v113 && v179 == *((_DWORD *)v184 + v117)) {
          uint64_t v180 = v113 - 1;
        }
        else {
          ++v181;
        }
        *((_DWORD *)v184 + v117) = v172;
LABEL_154:
        sub_383CC((unsigned int *)&v172, (uint64_t)&v191);
        double v119 = sub_35C04((unsigned int *)&v191, a2, 0, v118);
        int v120 = v186 - __p;
        LODWORD(v16) = v187;
        if (v187 == (v186 - (unsigned char *)__p) >> 3)
        {
          if (v119 >= *(double *)__p) {
            goto LABEL_138;
          }
        }
        else if (v119 >= 1.79769313e308)
        {
          goto LABEL_138;
        }
        if (v119 >= v8) {
          goto LABEL_138;
        }
        unsigned int v123 = v172;
        if (v17 < v169)
        {
          *(double *)float v17 = v119;
          *((_DWORD *)v17 + 14) = 0;
          *((_DWORD *)v17 + 2) = v123;
          v17 += 64;
          unint64_t v124 = v17 - v15;
          if (v17 - v15 < 65) {
            goto LABEL_138;
          }
          goto LABEL_205;
        }
        uint64_t v125 = (v17 - v15) >> 6;
        unint64_t v126 = v125 + 1;
        if ((unint64_t)(v125 + 1) >> 58) {
          sub_2E00();
        }
        if ((v169 - v15) >> 5 > v126) {
          unint64_t v126 = (v169 - v15) >> 5;
        }
        if ((unint64_t)(v169 - v15) >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v127 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v126;
        }
        if (v127 >> 58) {
          sub_188D718();
        }
        uint64_t v128 = (char *)operator new(v127 << 6);
        uint64_t v129 = &v128[64 * v125];
        *(double *)uint64_t v129 = v119;
        *((_DWORD *)v129 + 14) = 0;
        *((_DWORD *)v129 + 2) = v123;
        if (v17 == v15)
        {
          uint64_t v139 = &v128[64 * v125];
          int v120 = v128 + (v127 << 6);
          char v169 = &v128[64 * v127];
          float v17 = v129 + 64;
          if (v15) {
            goto LABEL_203;
          }
        }
        else
        {
          uint64_t v130 = 0;
          do
          {
            uint64_t v133 = &v129[v130];
            *((void *)v133 - 8) = *(void *)&v17[v130 - 64];
            unint64_t v134 = &v129[v130 - 56];
            unint64_t v135 = &v17[v130 - 56];
            int v136 = *(_DWORD *)&v17[v130 - 8];
            *((_DWORD *)v133 - 2) = v136;
            if (v136 == 1)
            {
              long long v131 = *(_OWORD *)v135;
              long long v132 = *(_OWORD *)&v17[v130 - 24];
              *(_OWORD *)&v129[v130 - 40] = *(_OWORD *)&v17[v130 - 40];
              *(_OWORD *)&v129[v130 - 24] = v132;
              *(_OWORD *)unint64_t v134 = v131;
            }
            else if (!v136)
            {
              *(_DWORD *)unint64_t v134 = *(_DWORD *)v135;
            }
            v130 -= 64;
            LODWORD(v16) = v17 + v130;
          }
          while (&v17[v130] != v15);
          uint64_t v139 = &v129[v130];
          int v120 = v128 + (v127 << 6);
          char v169 = &v128[64 * v127];
          float v17 = v129 + 64;
          if (v15) {
LABEL_203:
          }
            operator delete(v15);
        }
        int64_t v15 = v139;
        unint64_t v124 = v17 - v139;
        if (v17 - v139 < 65) {
          goto LABEL_138;
        }
LABEL_205:
        unint64_t v16 = ((v124 >> 6) - 2) >> 1;
        uint64_t v140 = (double *)&v15[64 * v16];
        uint64_t v141 = v17 - 64;
        double v142 = *((double *)v17 - 8);
        double v143 = *v140;
        if (*v140 <= v142) {
          goto LABEL_138;
        }
        int v144 = *((_DWORD *)v17 - 2);
        if (v144 == 1)
        {
          int v120 = *((_DWORD *)v17 - 14);
          long long v145 = *(_OWORD *)(v17 - 52);
          long long v146 = *(_OWORD *)(v17 - 36);
          *(_OWORD *)&v188[28] = *(_OWORD *)(v17 - 24);
          *(_OWORD *)uint64_t v188 = v145;
          *(_OWORD *)&v188[16] = v146;
        }
        else if (!v144)
        {
          int v120 = *((_DWORD *)v17 - 14);
        }
        do
        {
          int64_t v147 = v140;
          *(double *)uint64_t v141 = v143;
          uint64_t v148 = v141 + 8;
          uint64_t v149 = (long long *)(v147 + 1);
          if (v141 != (char *)v147)
          {
            int v150 = *((_DWORD *)v141 + 14);
            int v151 = *((_DWORD *)v147 + 14);
            if (v150 == v151)
            {
              if (v150 == 1)
              {
                long long v152 = *v149;
                long long v153 = *(_OWORD *)(v147 + 3);
                *(_OWORD *)(v141 + 36) = *(_OWORD *)((char *)v147 + 36);
                *uint64_t v148 = v152;
                *(_OWORD *)(v141 + 24) = v153;
              }
              else if (!v150)
              {
                *(_DWORD *)uint64_t v148 = *(_DWORD *)v149;
              }
            }
            else
            {
              if (v151 == 1)
              {
                long long v154 = *v149;
                long long v155 = *(_OWORD *)(v147 + 5);
                *(_OWORD *)(v141 + 24) = *(_OWORD *)(v147 + 3);
                *(_OWORD *)(v141 + 40) = v155;
                *uint64_t v148 = v154;
              }
              else if (!v151)
              {
                *(_DWORD *)uint64_t v148 = *(_DWORD *)v149;
              }
              *((_DWORD *)v141 + 14) = *((_DWORD *)v147 + 14);
            }
          }
          if (!v16) {
            break;
          }
          unint64_t v16 = (v16 - 1) >> 1;
          uint64_t v140 = (double *)&v15[64 * v16];
          double v143 = *v140;
          uint64_t v141 = (char *)v147;
        }
        while (*v140 > v142);
        *int64_t v147 = v142;
        LODWORD(v16) = *((_DWORD *)v147 + 14);
        if (v16 == v144)
        {
          if (v144 == 1)
          {
            *((_DWORD *)v147 + 2) = v120;
            long long v156 = *(_OWORD *)v188;
            long long v157 = *(_OWORD *)&v188[16];
            *(double *)((char *)v147 + 44) = *(double *)&v188[32];
            *(_OWORD *)((char *)v147 + 28) = v157;
            *(_OWORD *)((char *)v147 + 12) = v156;
          }
          else if (!v144)
          {
            *(_DWORD *)uint64_t v149 = v120;
          }
        }
        else
        {
          if (v144 == 1)
          {
            *((_DWORD *)v147 + 2) = v120;
            long long v158 = *(_OWORD *)v188;
            long long v159 = *(_OWORD *)&v188[16];
            *(_OWORD *)(v147 + 5) = *(_OWORD *)&v188[28];
            *(_OWORD *)((char *)v147 + 28) = v159;
            *(_OWORD *)((char *)v147 + 12) = v158;
          }
          else if (!v144)
          {
            *(_DWORD *)uint64_t v149 = v120;
            *((_DWORD *)v147 + 14) = 0;
            goto LABEL_138;
          }
          *((_DWORD *)v147 + 14) = v144;
        }
LABEL_138:
        if (++v97 == 2)
        {
          if (++v96 == 2)
          {
            unint64_t v18 = v165;
            goto LABEL_14;
          }
          continue;
        }
        goto LABEL_139;
      }
    }
    char v54 = *v6;
    uint64_t v55 = v6[1];
    if (*v6 != v55)
    {
      LODWORD(v16) = DWORD2(v189[0]);
      while (*((_DWORD *)v54 + 2) != DWORD2(v189[0]) || *((_DWORD *)v54 + 3) != HIDWORD(v189[0]))
      {
        v54 += 48;
        if (v54 == v55)
        {
          char v54 = v6[1];
          break;
        }
      }
    }
    if (v54 == v55) {
      sub_408220(v6, v189);
    }
LABEL_14:
    if (v15 == v17) {
      goto LABEL_239;
    }
  }
  float v17 = v15;
LABEL_239:
  if (v184) {
    free(v184);
  }
  if (v17) {
    operator delete(v17);
  }
  if (__p)
  {
    int v186 = __p;
    operator delete(__p);
  }
}

void sub_10B417C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (a34)
  {
    free(a34);
    if (!v37)
    {
LABEL_3:
      int v39 = __p;
      if (!__p) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v37)
  {
    goto LABEL_3;
  }
  operator delete(v37);
  int v39 = __p;
  if (!__p)
  {
LABEL_4:
    int v40 = *(void **)a23;
    if (!*(void *)a23) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v39);
  int v40 = *(void **)a23;
  if (!*(void *)a23) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  *(void *)(a23 + 8) = v40;
  operator delete(v40);
  _Unwind_Resume(exception_object);
}

BOOL sub_10B424C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v5 = v4 / 100;
  __int16 v6 = v4 % 100;
  if (v4 < 0) {
    __int16 v7 = -50;
  }
  else {
    __int16 v7 = 50;
  }
  LODWORD(a4) = *(_DWORD *)(a2 + 40);
  return *(double *)a2 + (double)*(unint64_t *)&a4 > (double)(v5
                                                                   + (int)(((5243 * (__int16)(v7 + v6)) >> 19)
                                                                         + ((5243 * (__int16)(v7 + v6)) >> 31)));
}

uint64_t sub_10B42C4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v26 = *(void *)(a2 + 1);
  uint64_t v27 = *(void *)(a3 + 16);
  int v6 = *(_DWORD *)(a3 + 24);
  double v7 = *((double *)a2 + 5);
  double v8 = (int *)sub_2D5D58(*(void *)(a1 + 104), *(void *)(a3 + 8));
  __int16 v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0xBu && (uint64_t v10 = v9[5]) != 0) {
    int v11 = (*((unsigned __int8 *)v8 + v10 + 1) >> 2) & 1;
  }
  else {
    LOBYTE(v11) = 0;
  }
  double v12 = *(double *)a3;
  int v13 = (char *)operator new(0x18uLL);
  uint64_t v35 = v13 + 24;
  uint64_t v36 = v13 + 24;
  *(_DWORD *)int v13 = v5;
  *(void *)&long long v14 = v26;
  *((void *)&v14 + 1) = v27;
  *(_OWORD *)(v13 + 4) = v14;
  *((_DWORD *)v13 + 5) = v6;
  float v34 = v13;
  unsigned int v15 = sub_10B4564(a1, &v34, v11, v12, v7);
  if (!v15)
  {
    uint64_t v23 = 0;
    goto LABEL_25;
  }
  unint64_t v16 = (char *)operator new(0x24uLL);
  long long v32 = v16 + 36;
  long long v33 = v16 + 36;
  if (HIDWORD(v27) >= 0xFFFFFFFE) {
    uint64_t v17 = 4294967294;
  }
  else {
    uint64_t v17 = HIDWORD(v27);
  }
  *(_DWORD *)unint64_t v16 = v5;
  *(void *)(v16 + 4) = v26;
  *(void *)(v16 + 12) = v5 | (v17 << 32);
  *((_DWORD *)v16 + 5) = 0x7FFFFFFF;
  *((void *)v16 + 3) = v27;
  *((_DWORD *)v16 + 8) = v6;
  float v31 = v16;
  unint64_t v18 = (char *)operator new(0x24uLL);
  double v19 = v18;
  if (v26 >= 0xFFFFFFFE) {
    uint64_t v20 = 4294967294;
  }
  else {
    uint64_t v20 = v26;
  }
  uint64_t v29 = v18 + 36;
  int64_t v30 = v18 + 36;
  *(_DWORD *)unint64_t v18 = v5;
  *(void *)(v18 + 4) = v26;
  *(void *)(v18 + 12) = v27 | (unint64_t)(v20 << 32);
  *((_DWORD *)v18 + 5) = 0x7FFFFFFF;
  *((void *)v18 + 3) = v27;
  *((_DWORD *)v18 + 8) = v6;
  std::string __p = v18;
  unsigned int v21 = sub_10B4564(a1, &v31, v11, v12, v7);
  if (v21 < v15) {
    unsigned int v15 = v21;
  }
  if (!v15)
  {
    uint64_t v23 = 0;
    goto LABEL_23;
  }
  unsigned int v22 = sub_10B4564(a1, &__p, v11, v12, v7);
  if (v22 >= v15) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v22;
  }
  double v19 = (char *)__p;
  if (__p)
  {
LABEL_23:
    uint64_t v29 = v19;
    operator delete(v19);
    long long v24 = (char *)v31;
    if (!v31) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  long long v24 = (char *)v31;
  if (v31)
  {
LABEL_24:
    long long v32 = v24;
    operator delete(v24);
  }
LABEL_25:
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  return v23;
}

void sub_10B44E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    unsigned int v22 = a17;
    if (!a17)
    {
LABEL_3:
      uint64_t v23 = a20;
      if (!a20) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v22 = a17;
    if (!a17) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  uint64_t v23 = a20;
  if (!a20) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10B4564(uint64_t a1, void *a2, char a3, double a4, double a5)
{
  *(_OWORD *)char v54 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v56 = 1065353216;
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 128);
  if (v7 != v6)
  {
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v51 = *(void *)(a1 + 128);
    while (1)
    {
      if (*(double *)v7 > a4) {
        goto LABEL_61;
      }
      double v17 = *(double *)(a1 + 160);
      if (v17 < a5) {
        double v17 = a5;
      }
      if (*(double *)v7 > v17) {
        break;
      }
LABEL_8:
      v7 += 48;
      if (v7 == v6) {
        goto LABEL_61;
      }
    }
    unint64_t v18 = *(void *)(v7 + 8);
    unint64_t v53 = 0;
    uint64_t v19 = sub_10B4BA4(*(void *)(a1 + 112), v18);
    uint64_t v20 = (unsigned __int16 *)(v19 - *(int *)v19);
    if (*v20 < 7u)
    {
      unsigned int v21 = 0;
    }
    else
    {
      unsigned int v21 = (char *)v20[3];
      if (v21) {
        unsigned int v21 = *(char **)&v21[v19];
      }
    }
    unint64_t v53 = (unint64_t)v21;
    uint64_t v22 = -1 - 0x5555555555555555 * ((uint64_t)(a2[1] - *a2) >> 2);
    if (!v22) {
      goto LABEL_29;
    }
    unsigned int v52 = v12;
    int v23 = 0;
    unint64_t v24 = 0;
    do
    {
      if (v23 >= 2)
      {
        int v25 = 0;
        ++v24;
      }
      else
      {
        uint64_t v26 = *(void *)(a1 + 112);
        uint64_t v27 = (void *)sub_413C0(a2, v24++);
        uint64_t v28 = (void *)sub_413C0(a2, v24);
        int v25 = sub_10B49C4(v26, v27, v28, v18);
      }
      v23 += v25;
    }
    while (v24 != v22);
    uint64_t v12 = v52;
    uint64_t v6 = v51;
    if (v23 > 0)
    {
      BOOL v29 = 1;
      if (v23 == 1 && (a3 & 1) == 0)
      {
        if (v54[1])
        {
          uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v54[1]);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            unint64_t v31 = v53;
            if ((void *)v53 >= v54[1]) {
              unint64_t v31 = v53 % (unint64_t)v54[1];
            }
          }
          else
          {
            unint64_t v31 = ((unint64_t)v54[1] - 1) & v53;
          }
          long long v32 = (void *)*((void *)v54[0] + v31);
          if (v32)
          {
            long long v32 = (void *)*v32;
            if (v32)
            {
              if (v30.u32[0] < 2uLL)
              {
                while (1)
                {
                  unint64_t v34 = v32[1];
                  if (v53 == v34)
                  {
                    if (v32[2] == v53) {
                      goto LABEL_49;
                    }
                  }
                  else if ((v34 & ((unint64_t)v54[1] - 1)) != v31)
                  {
                    goto LABEL_48;
                  }
                  long long v32 = (void *)*v32;
                  if (!v32) {
                    goto LABEL_49;
                  }
                }
              }
              do
              {
                unint64_t v33 = v32[1];
                if (v53 == v33)
                {
                  if (v32[2] == v53) {
                    break;
                  }
                }
                else
                {
                  if ((void *)v33 >= v54[1]) {
                    v33 %= (unint64_t)v54[1];
                  }
                  if (v33 != v31) {
                    goto LABEL_48;
                  }
                }
                long long v32 = (void *)*v32;
              }
              while (v32);
            }
          }
        }
        else
        {
LABEL_48:
          long long v32 = 0;
        }
LABEL_49:
        BOOL v29 = v32 != 0;
      }
      sub_10B5234((uint64_t)v54, &v53, &v53);
      if (v29) {
        goto LABEL_51;
      }
    }
    else
    {
LABEL_29:
      if (v11)
      {
LABEL_51:
        uint64_t v35 = (int *)sub_10B4BA4(*(void *)(a1 + 112), v18);
        uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
        if (*v36 >= 9u && (uint64_t v37 = v36[4]) != 0) {
          int v38 = *(int *)((char *)v35 + v37);
        }
        else {
          int v38 = 0;
        }
        int v39 = (int *)sub_10B4BA4(*(void *)(a1 + 112), v18);
        int v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 < 0xBu)
        {
          LODWORD(v41) = 0;
        }
        else
        {
          uint64_t v41 = v40[5];
          if (v41) {
            LODWORD(v41) = *(int *)((char *)v39 + v41);
          }
        }
        uint64_t v12 = (v38 + v12 + v41);
        char v11 = 1;
LABEL_4:
        uint64_t v13 = *(void *)(a1 + 168);
        uint64_t v14 = v13 / 100;
        __int16 v15 = v13 % 100;
        if (v13 < 0) {
          __int16 v16 = -50;
        }
        else {
          __int16 v16 = 50;
        }
        if (v14 + (int)(((5243 * (__int16)(v16 + v15)) >> 19) + ((5243 * (__int16)(v16 + v15)) >> 31)) <= v12)
        {
          uint64_t v46 = *(void *)(a1 + 176);
          int v47 = (int)v46 / 100;
          int v48 = (int)v46 % 100;
          if (v46 < 0) {
            __int16 v49 = -50;
          }
          else {
            __int16 v49 = 50;
          }
          uint64_t v12 = v47 + ((5243 * (__int16)(v49 + v48)) >> 19) + ((5243 * (__int16)(v49 + v48)) >> 31);
          long long v42 = __p[0];
          if (__p[0]) {
            goto LABEL_62;
          }
          goto LABEL_63;
        }
        goto LABEL_8;
      }
    }
    char v11 = 0;
    goto LABEL_4;
  }
  uint64_t v12 = 0;
LABEL_61:
  long long v42 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_62:
      unint64_t v43 = (void *)*v42;
      operator delete(v42);
      long long v42 = v43;
    }
    while (v43);
  }
LABEL_63:
  int v44 = v54[0];
  v54[0] = 0;
  if (v44) {
    operator delete(v44);
  }
  return v12;
}

void sub_10B4974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10B4988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10B499C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10B49B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10B49C4(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  unsigned int v4 = a4;
  uint64_t v5 = (int *)sub_10B4BA4(a1, a4);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 < 5u) {
    return 0;
  }
  uint64_t v7 = v6[2];
  if (!v6[2]) {
    return 0;
  }
  double v8 = v5;
  uint64_t v9 = *(unsigned int *)((char *)v5 + v7);
  uint64_t v10 = (char *)v5 + v7 + v9;
  int v11 = *((unsigned __int16 *)v10 + 2);
  int v33 = *((unsigned __int16 *)v10 + 3);
  unsigned int v12 = sub_511FC(v4);
  unsigned int v13 = v4 & ~(-1 << (v12 & 0xFE));
  int v14 = sub_51938(v13);
  int v15 = sub_51938(v13 >> 1);
  int v16 = 1 << -(char)(v12 >> 1);
  if (v12 < 2) {
    int v16 = -2;
  }
  uint64_t v17 = (v16 * v14 + 4 * v11);
  LODWORD(v18) = v16 * v15 + 4 * v33;
  if (v18 >= 0xFFFFFFFE) {
    uint64_t v18 = 4294967294;
  }
  else {
    uint64_t v18 = v18;
  }
  uint64_t v38 = v17 | (v18 << 32);
  int v39 = 0x7FFFFFFF;
  int v19 = *(_DWORD *)v10;
  uint64_t v20 = 0;
  uint64_t v21 = (*(_DWORD *)v10 - 1);
  if (v19 != 1)
  {
    uint64_t v22 = (unsigned __int16 *)((char *)v8 + v9 + v7 + 10);
    do
    {
      int v23 = *(v22 - 1);
      int v24 = *v22;
      unsigned int v25 = sub_511FC(v4);
      unsigned int v26 = v4 & ~(-1 << (v25 & 0xFE));
      int v27 = sub_51938(v26);
      int v28 = sub_51938(v26 >> 1);
      int v29 = 1 << -(char)(v25 >> 1);
      if (v25 < 2) {
        int v29 = -2;
      }
      uint64_t v30 = (v29 * v27 + 4 * v23);
      LODWORD(v31) = v29 * v28 + 4 * v24;
      if (v31 >= 0xFFFFFFFE) {
        uint64_t v31 = 4294967294;
      }
      else {
        uint64_t v31 = v31;
      }
      uint64_t v36 = v30 | (v31 << 32);
      int v37 = 0x7FFFFFFF;
      uint64_t v20 = (v20 + sub_3B9C8(&v38, &v36, a2, a3));
      if (v20 == 2) {
        break;
      }
      v22 += 2;
      uint64_t v38 = v36;
      int v39 = v37;
      --v21;
    }
    while (v21);
  }
  return v20;
}

uint64_t sub_10B4BA4(uint64_t a1, unint64_t a2)
{
  int v3 = sub_10B4CE0(a1 + 16, a2, 1);
  if (!v3 || (v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 5u) || (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) == 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v12, a2);
    uint64_t v9 = std::string::insert(&v12, 0, "Water body access could not find quad node ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    long long v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = (void *)sub_2F404((uint64_t)exception, &v13);
  }
  uint64_t v6 = (uint64_t)&v3[4 * HIDWORD(a2) + v5 + *(unsigned int *)&v3[v5]];
  return v6 + 4 + *(unsigned int *)(v6 + 4);
}

void sub_10B4C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10B4CE0(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 976) == a2)
    {
      unsigned int v7 = 40;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1000) == a2)
    {
      unsigned int v7 = 41;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1024) == a2)
    {
      unsigned int v7 = 42;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1048) == a2)
    {
      unsigned int v7 = 43;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 1032);
    unint64_t v12 = *(void *)(a1 + 1008);
    unint64_t v13 = *(void *)(a1 + 984);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 984);
    }
    int v15 = 40;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 1008);
    }
    int v17 = 41;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 1032);
    }
    unint64_t v19 = *(void *)(a1 + 1056);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 42;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 10, a2, 1);
    unsigned int v22 = 43;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_10B4E70(v24);
  return 0;
}

uint64_t sub_10B4E70(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0xAu);
      long long v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_10B4FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_10B509C(int *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X4>, uint64_t a4@<X8>, unint64_t a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 5u)
  {
    uint64_t v10 = v9[2];
    if (v10)
    {
      long long v11 = (unsigned int *)((char *)a1 + v10);
      uint64_t v12 = *v11;
      BOOL v14 = (unsigned __int16 *)((char *)v11 + v12 + 4);
      uint64_t v13 = *(unsigned int *)((char *)v11 + v12);
      if (v13)
      {
        unsigned int v15 = a3[1];
        std::string v16 = &v14[2 * v13];
        do
        {
          int v17 = *v14;
          int v18 = v14[1];
          unsigned int v19 = sub_511FC(v15);
          unsigned int v20 = v15 & ~(-1 << (v19 & 0xFE));
          int v21 = sub_51938(v20);
          int v22 = sub_51938(v20 >> 1);
          int v23 = 1 << -(v19 >> 1);
          if (v19 < 2) {
            int v23 = -2;
          }
          uint64_t v24 = (v21 * v23 + 4 * v17);
          LODWORD(v25) = v22 * v23 + 4 * v18;
          if (v25 >= 0xFFFFFFFE) {
            uint64_t v25 = 4294967294;
          }
          else {
            uint64_t v25 = v25;
          }
          uint64_t v31 = v24 | (v25 << 32);
          LODWORD(v32) = 0x7FFFFFFF;
          sub_30C0C((char **)&v35, &v31);
          v14 += 2;
        }
        while (v14 != v16);
      }
    }
  }
  sub_3B8BC4(&v35, a2, 0, 0, (uint64_t)&v31, a5, a6, a7, a8);
  uint64_t v27 = v34;
  unsigned int v26 = v35;
  *(void *)a4 = v31;
  uint64_t v28 = v32;
  *(void *)(a4 + 8) = a3[1] | ((unint64_t)*a3 << 32);
  *(void *)(a4 + 16) = v28;
  *(_DWORD *)(a4 + 24) = v33;
  *(void *)(a4 + 32) = v27;
  *(_DWORD *)(a4 + 40) = 0;
  if (v26)
  {
    uint64_t v36 = v26;
    operator delete(v26);
  }
}

void sub_10B5214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10B5234(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  BOOL v14 = operator new(0x18uLL);
  *BOOL v14 = 0;
  v14[1] = v6;
  long long v14[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    int v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *BOOL v14 = *v18;
LABEL_61:
      *int v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        int v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        int v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      int v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *BOOL v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    int v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10B5544(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10B5558()
{
  unk_25FE1B7 = 16641;
  word_25FE1A0 = 65;
  byte_25FE1CF = 1;
  byte_25FE1B9 = 0;
}

uint64_t sub_10B5580(uint64_t a1, uint64_t a2)
{
  int64x2_t v3 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 8) = v3;
  *(int64x2_t *)(a1 + 24) = v3;
  HIBYTE(v12[2]) = 14;
  strcpy((char *)v12, "TransitSnapper");
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v4 = sub_374CDC(a2, (uint64_t)v12, (uint64_t *)&__p);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    unint64_t v6 = v10;
    unint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = __p;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  HIBYTE(v12[2]) = 20;
  strcpy((char *)v12, "enable_stop_snapping");
  *(unsigned char *)a1 = sub_29D62C(v4, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v12[1] = xmmword_20B9250;
  strcpy(v12[0], "enable_station_snapping");
  *(unsigned char *)(a1 + 1) = sub_29D62C(v4, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v12[1] = xmmword_20B9260;
  strcpy(v12[0], "enable_uncertain_station_snapping");
  *(unsigned char *)(a1 + 2) = sub_29D62C(v4, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v12[1] = xmmword_20B91A0;
  strcpy(v12[0], "filter_by_available_regions");
  *(unsigned char *)(a1 + 3) = sub_29D62C(v4, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v12[1] = xmmword_20B9800;
  strcpy(v12[0], "minimum_stop_search_distance_m");
  *(void *)(a1 + 8) = sub_5CDE0(v4, v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v12[1] = xmmword_20B9800;
  strcpy(v12[0], "maximum_stop_search_distance_m");
  *(void *)(a1 + 16) = sub_5CDE0(v4, v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v12[1] = xmmword_20B9260;
  strcpy(v12[0], "minimum_station_search_distance_m");
  *(void *)(a1 + 24) = sub_5CDE0(v4, v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v12[1] = xmmword_20B9260;
  strcpy(v12[0], "maximum_station_search_distance_m");
  *(void *)(a1 + 32) = sub_5CDE0(v4, v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  v12[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v12[1] = xmmword_20B9250;
  strcpy(v12[0], "maximum_search_entities");
  *(_DWORD *)(a1 + 40) = sub_31AC04(v4, (uint64_t)v12);
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_10B5950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (*(char *)(v16 - 41) < 0) {
    operator delete(*(void **)(v16 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_10B5A04(uint64_t a1, void *a2)
{
  *(void *)(sub_10B5580(a1, (uint64_t)a2) + 48) = a2;
  *(void *)(a1 + 56) = sub_375500(a2);
  *(void *)(a1 + 64) = sub_375C38(a2);
  sub_10A42C8(a1 + 72, a2, 2, 0, 0);
}

double sub_10B5A68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int ***a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  sub_10B5BA4(a1, a2, a3, a4, a5, (uint64_t)v8);
  if (v8[0])
  {
    sub_8EB7C4((void *)a6, (uint64_t)&v9);
    if (v8[0])
    {
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        float v15 = v14;
        operator delete(v14);
      }
      if (v12)
      {
        uint64_t v13 = v12;
        operator delete(v12);
      }
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
    }
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a6 + 8) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_OWORD *)(a6 + 88) = 0u;
    *(_OWORD *)(a6 + 72) = 0u;
    *(_OWORD *)(a6 + 136) = 0u;
    *(_OWORD *)(a6 + 120) = 0u;
    *(_OWORD *)(a6 + 104) = 0u;
    *(void *)a6 = -1;
    *(_DWORD *)(a6 + 8) = 0x7FFFFFFF;
    *(void *)(a6 + 16) = -1;
    *(void *)(a6 + 24) = -1;
    *(void *)(a6 + 32) = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a6 + 48) = -1935635296;
    *(void *)(a6 + 56) = 0;
    *(_DWORD *)(a6 + 63) = 0;
    *(void *)(a6 + 80) = 0;
    *(void *)(a6 + 88) = 0;
    *(_DWORD *)(a6 + 96) = 0;
    *(void *)(a6 + 72) = 0;
    *(unsigned char *)(a6 + 100) = 100;
    *(void *)(a6 + 152) = 0;
    *(void *)(a6 + 160) = 0;
    *(void *)(a6 + 151) = 0;
    *(_OWORD *)(a6 + 136) = 0u;
    *(_OWORD *)(a6 + 120) = 0u;
    *(_OWORD *)(a6 + 104) = 0u;
    *(void *)(a6 + 168) = 0;
    *(void *)(a6 + 176) = 0;
  }
  return result;
}

void sub_10B5B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10B5BA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int ***a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  v88[0] = 0;
  v88[1] = 0;
  int v90 = 0;
  uint64_t v89 = 0;
  char v91 = 100;
  long long v92 = 0u;
  memset(v93, 0, 39);
  unsigned int v95 = 0;
  int v96 = 0;
  int v94 = 0;
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v86 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v87 = v12;
  *(_DWORD *)&v87[15] = *(_DWORD *)(a2 + 63);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v84 = *(_OWORD *)a2;
  long long v85 = v13;
  if (&v84 != (long long *)a2) {
    sub_147D0(v88, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  }
  uint64_t v78 = a3;
  int v90 = *(_DWORD *)(a2 + 96);
  char v91 = *(unsigned char *)(a2 + 100);
  unsigned int v79 = a5;
  LODWORD(v93[4]) = a5;
  BOOL v14 = (unsigned int *)sub_DAA2E4(a2);
  if (v14 != (unsigned int *)-1)
  {
    sub_10B6634(a1, v14, a2, (uint64_t)&v102);
    if (v105)
    {
      float v15 = v95;
      if (v95 >= v96)
      {
        uint64_t v17 = (char *)v94;
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v95 - (unsigned char *)v94) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0x666666666666666) {
          sub_2E00();
        }
        if (0x999999999999999ALL * ((v96 - (unsigned char *)v94) >> 3) > v19) {
          unint64_t v19 = 0x999999999999999ALL * ((v96 - (unsigned char *)v94) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v96 - (unsigned char *)v94) >> 3) >= 0x333333333333333) {
          unint64_t v20 = 0x666666666666666;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20)
        {
          if (v20 > 0x666666666666666) {
            sub_188D718();
          }
          unint64_t v21 = (char *)operator new(40 * v20);
        }
        else
        {
          unint64_t v21 = 0;
        }
        int v22 = &v21[40 * v18];
        long long v23 = v103;
        *(_OWORD *)int v22 = v102;
        *((_OWORD *)v22 + 1) = v23;
        *((void *)v22 + 4) = v104;
        uint64_t v16 = v22 + 40;
        if (v15 != v17)
        {
          do
          {
            long long v24 = *(_OWORD *)(v15 - 40);
            long long v25 = *(_OWORD *)(v15 - 24);
            *(v22 - 8) = *(v15 - 8);
            *(_OWORD *)(v22 - 24) = v25;
            *(_OWORD *)(v22 - 40) = v24;
            v22 -= 40;
            v15 -= 40;
          }
          while (v15 != v17);
          float v15 = (char *)v94;
        }
        int v94 = v22;
        unsigned int v95 = v16;
        int v96 = &v21[40 * v20];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(_OWORD *)unsigned int v95 = v102;
        *((_OWORD *)v15 + 1) = v103;
        *((void *)v15 + 4) = v104;
        uint64_t v16 = v15 + 40;
      }
      unsigned int v95 = v16;
    }
  }
  unint64_t v26 = v94;
  unint64_t v27 = v95;
  if (v94 != v95) {
    goto LABEL_24;
  }
  uint64_t v35 = *a4;
  uint64_t v34 = a4[1];
  if (*a4 != v34)
  {
    do
    {
      sub_10B6634(a1, *v35, (uint64_t)(v35 + 1), (uint64_t)&v102);
      if (v105)
      {
        uint64_t v37 = v95;
        if (v95 < v96)
        {
          *(_OWORD *)unsigned int v95 = v102;
          *((_OWORD *)v37 + 1) = v103;
          *((void *)v37 + 4) = v104;
          uint64_t v36 = v37 + 40;
        }
        else
        {
          uint64_t v38 = (char *)v94;
          unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((v95 - (unsigned char *)v94) >> 3);
          unint64_t v40 = v39 + 1;
          if (v39 + 1 > 0x666666666666666) {
            sub_2E00();
          }
          if (0x999999999999999ALL * ((v96 - (unsigned char *)v94) >> 3) > v40) {
            unint64_t v40 = 0x999999999999999ALL * ((v96 - (unsigned char *)v94) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v96 - (unsigned char *)v94) >> 3) >= 0x333333333333333) {
            unint64_t v41 = 0x666666666666666;
          }
          else {
            unint64_t v41 = v40;
          }
          if (v41)
          {
            if (v41 > 0x666666666666666) {
              sub_188D718();
            }
            long long v42 = (char *)operator new(40 * v41);
          }
          else
          {
            long long v42 = 0;
          }
          unint64_t v43 = &v42[40 * v39];
          long long v44 = v103;
          *(_OWORD *)unint64_t v43 = v102;
          *((_OWORD *)v43 + 1) = v44;
          *((void *)v43 + 4) = v104;
          int v45 = v43;
          if (v37 != v38)
          {
            do
            {
              long long v46 = *(_OWORD *)(v37 - 40);
              long long v47 = *(_OWORD *)(v37 - 24);
              *(v45 - 8) = *(v37 - 8);
              *(_OWORD *)(v45 - 24) = v47;
              *(_OWORD *)(v45 - 40) = v46;
              v45 -= 40;
              v37 -= 40;
            }
            while (v37 != v38);
            uint64_t v37 = (char *)v94;
          }
          uint64_t v36 = v43 + 40;
          int v94 = v45;
          unsigned int v95 = v43 + 40;
          int v96 = &v42[40 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        unsigned int v95 = v36;
      }
      v35 += 3;
    }
    while (v35 != v34);
    unint64_t v26 = v94;
    unint64_t v27 = v95;
    if (v94 != v95)
    {
LABEL_24:
      long long v28 = v84;
      *(_OWORD *)(a6 + 24) = v85;
      long long v29 = *(_OWORD *)v87;
      *(_OWORD *)(a6 + 40) = v86;
      *(_OWORD *)(a6 + 56) = v29;
      *(unsigned char *)a6 = 1;
      *(_DWORD *)(a6 + 71) = *(_DWORD *)&v87[15];
      uint64_t v30 = v93[0];
      *(void *)(a6 + 96) = v89;
      *(_OWORD *)(a6 + 8) = v28;
      *(_OWORD *)(a6 + 80) = *(_OWORD *)v88;
      v88[1] = 0;
      uint64_t v89 = 0;
      v88[0] = 0;
      int v31 = v90;
      *(unsigned char *)(a6 + 108) = v91;
      *(_DWORD *)(a6 + 104) = v31;
      *(_OWORD *)(a6 + 112) = v92;
      *(void *)(a6 + 128) = v30;
      long long v92 = 0uLL;
      v93[0] = 0;
      *(_OWORD *)(a6 + 136) = *(_OWORD *)&v93[1];
      uint64_t v32 = v96;
      *(void *)(a6 + 152) = v93[3];
      memset(&v93[1], 0, 24);
      int v33 = v93[4];
      *(_DWORD *)(a6 + 163) = *(_DWORD *)((char *)&v93[4] + 3);
      *(_DWORD *)(a6 + 160) = v33;
      *(void *)(a6 + 168) = v26;
      *(void *)(a6 + 176) = v27;
      *(void *)(a6 + 184) = v32;
      unsigned int v95 = 0;
      int v96 = 0;
      int v94 = 0;
      goto LABEL_25;
    }
  }
  sub_10B6990(a1, a2, v79, (char **)&v82);
  __int16 v49 = (long long *)v82;
  int v48 = v83;
  *(void *)&long long v102 = &v94;
  if (v82 != v83)
  {
    do
    {
      sub_A0F948((char ***)&v102, v49);
      __int16 v49 = (long long *)((char *)v49 + 40);
    }
    while (v49 != v48);
  }
  long long v50 = v94;
  uint64_t v51 = v95;
  if (v94 != v95)
  {
    unsigned int v52 = (double *)v94;
    while (v52[3] < 1.0)
    {
      v52 += 5;
      if (v52 == (double *)v95) {
        goto LABEL_62;
      }
    }
    long long v64 = v84;
    *(_OWORD *)(a6 + 24) = v85;
    long long v65 = *(_OWORD *)v87;
    *(_OWORD *)(a6 + 40) = v86;
    *(_OWORD *)(a6 + 56) = v65;
    *(unsigned char *)a6 = 1;
    *(_DWORD *)(a6 + 71) = *(_DWORD *)&v87[15];
    uint64_t v66 = v93[0];
    *(void *)(a6 + 96) = v89;
    *(_OWORD *)(a6 + 8) = v64;
    *(_OWORD *)(a6 + 80) = *(_OWORD *)v88;
    v88[1] = 0;
    uint64_t v89 = 0;
    v88[0] = 0;
    int v67 = v90;
    *(unsigned char *)(a6 + 108) = v91;
    *(_DWORD *)(a6 + 104) = v67;
    *(_OWORD *)(a6 + 112) = v92;
    *(void *)(a6 + 128) = v66;
    long long v92 = 0uLL;
    v93[0] = 0;
    *(_OWORD *)(a6 + 136) = *(_OWORD *)&v93[1];
    uint64_t v68 = v96;
    *(void *)(a6 + 152) = v93[3];
    memset(&v93[1], 0, 24);
    int v69 = v93[4];
    *(_DWORD *)(a6 + 163) = *(_DWORD *)((char *)&v93[4] + 3);
    *(_DWORD *)(a6 + 160) = v69;
    *(void *)(a6 + 168) = v50;
    *(void *)(a6 + 176) = v51;
    *(void *)(a6 + 184) = v68;
    unsigned int v95 = 0;
    int v96 = 0;
    int v94 = 0;
    goto LABEL_88;
  }
LABEL_62:
  sub_10B7598(a1, a2, &v80);
  char v54 = (long long *)v80;
  unint64_t v53 = v81;
  *(void *)&long long v102 = &v94;
  if (v80 != v81)
  {
    do
    {
      sub_A0F948((char ***)&v102, v54);
      char v54 = (long long *)((char *)v54 + 40);
    }
    while (v54 != v53);
  }
  *(_OWORD *)char v99 = 0u;
  *(_OWORD *)unsigned int v100 = 0u;
  int v101 = 1065353216;
  uint64_t v97 = -1;
  int v98 = 0x7FFFFFFF;
  sub_10A4600((void **)(a1 + 72), a2, v78, v79, 1, 1, (uint64_t)v99, (unsigned int *)&v97, (uint64_t)&v102);
  uint64_t v55 = v100[0];
  if (v100[0])
  {
    do
    {
      int v56 = (void *)*v55;
      operator delete(v55);
      uint64_t v55 = v56;
    }
    while (v56);
  }
  unsigned int v57 = v99[0];
  v99[0] = 0;
  if (v57) {
    operator delete(v57);
  }
  if ((_BYTE)v102)
  {
    unsigned int v58 = v108;
    __n128 v59 = v109;
    if (v108 != v109)
    {
      if ((void)v92)
      {
        *((void *)&v92 + 1) = v92;
        operator delete((void *)v92);
        unsigned int v58 = v108;
        __n128 v59 = v109;
      }
      *(void *)&long long v92 = v58;
      *((void *)&v92 + 1) = v59;
      v93[0] = v110;
      int v109 = 0;
      uint64_t v110 = 0;
      unsigned int v108 = 0;
      if (v93[1])
      {
        v93[2] = v93[1];
        operator delete((void *)v93[1]);
      }
      *(_OWORD *)&v93[1] = v111;
      v93[3] = v112;
      uint64_t v112 = 0;
      long long v111 = 0uLL;
    }
  }
  double v60 = v94;
  double v61 = v95;
  long long v62 = v92;
  if (v94 == v95)
  {
    int v63 = v102;
    if ((void)v92 == *((void *)&v92 + 1))
    {
      if ((_BYTE)v102)
      {
        uint64_t v76 = 17;
        if (v79 == 1) {
          uint64_t v76 = 34;
        }
        if (!v79) {
          uint64_t v76 = 27;
        }
      }
      else
      {
        uint64_t v77 = 17;
        if (v79 == 1) {
          uint64_t v77 = 34;
        }
        if (!v79) {
          uint64_t v77 = 27;
        }
        uint64_t v76 = 23;
        if (DWORD2(v102) != 23) {
          uint64_t v76 = v77;
        }
      }
      *(unsigned char *)a6 = 0;
      *(void *)(a6 + 8) = v76;
      *(void *)(a6 + 16) = &off_2439090;
      if (!v63) {
        goto LABEL_86;
      }
      goto LABEL_80;
    }
  }
  else
  {
    int v63 = v102;
  }
  long long v70 = v84;
  *(_OWORD *)(a6 + 24) = v85;
  long long v71 = *(_OWORD *)v87;
  *(_OWORD *)(a6 + 40) = v86;
  *(_OWORD *)(a6 + 56) = v71;
  *(unsigned char *)a6 = 1;
  *(_DWORD *)(a6 + 71) = *(_DWORD *)&v87[15];
  uint64_t v72 = v93[0];
  *(void *)(a6 + 96) = v89;
  *(_OWORD *)(a6 + 8) = v70;
  *(_OWORD *)(a6 + 80) = *(_OWORD *)v88;
  v88[1] = 0;
  uint64_t v89 = 0;
  v88[0] = 0;
  int v73 = v90;
  *(unsigned char *)(a6 + 108) = v91;
  *(_DWORD *)(a6 + 104) = v73;
  *(_OWORD *)(a6 + 112) = v62;
  *(void *)(a6 + 128) = v72;
  v93[0] = 0;
  long long v92 = 0uLL;
  *(_OWORD *)(a6 + 136) = *(_OWORD *)&v93[1];
  uint64_t v74 = v96;
  *(void *)(a6 + 152) = v93[3];
  memset(&v93[1], 0, 24);
  int v75 = v93[4];
  *(_DWORD *)(a6 + 163) = *(_DWORD *)((char *)&v93[4] + 3);
  *(_DWORD *)(a6 + 160) = v75;
  *(void *)(a6 + 168) = v60;
  *(void *)(a6 + 176) = v61;
  *(void *)(a6 + 184) = v74;
  unsigned int v95 = 0;
  int v96 = 0;
  int v94 = 0;
  if (v63)
  {
LABEL_80:
    if ((void)v111)
    {
      *((void *)&v111 + 1) = v111;
      operator delete((void *)v111);
    }
    if (v108)
    {
      int v109 = v108;
      operator delete(v108);
    }
    if (v106)
    {
      unsigned int v107 = v106;
      operator delete(v106);
    }
  }
LABEL_86:
  if (v80)
  {
    int v81 = (long long *)v80;
    operator delete(v80);
  }
LABEL_88:
  if (v82)
  {
    float v83 = (long long *)v82;
    operator delete(v82);
  }
  if (v94)
  {
    unsigned int v95 = (char *)v94;
    operator delete(v94);
  }
LABEL_25:
  if (v93[1])
  {
    v93[2] = v93[1];
    operator delete((void *)v93[1]);
  }
  if ((void)v92)
  {
    *((void *)&v92 + 1) = v92;
    operator delete((void *)v92);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_10B6524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_12168((uint64_t)&a49);
  if (__p)
  {
    operator delete(__p);
    long long v50 = a20;
    if (!a20)
    {
LABEL_3:
      sub_BC2E88(&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v50 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v50);
  sub_BC2E88(&a23);
  _Unwind_Resume(a1);
}

void sub_10B6620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_BC2E88((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10B6634(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2A24E8(*(void *)(a1 + 64), a2, a3, (uint64_t)&v38);
  int v6 = v39;
  if (v39 != 8)
  {
LABEL_14:
    if (v6 == 9)
    {
      unint64_t v14 = v38;
      if (!*(unsigned char *)(a1 + 3)) {
        goto LABEL_20;
      }
      float v15 = *(void **)(a1 + 48);
      uint64_t v16 = (int *)sub_498D5C(*(void *)(a1 + 56), v38, 0, "stop");
      uint64_t v17 = (uint64_t)v16 + *(unsigned __int16 *)((char *)v16 - *v16 + 6);
      uint64_t v18 = *(unsigned int *)v17;
      LODWORD(v17) = *(_DWORD *)(v17 + 4);
      uint64_t v17 = v17 >= 0xFFFFFFFE ? 4294967294 : v17;
      uint64_t v36 = (void *)(v18 | (v17 << 32));
      LODWORD(v37) = 0x7FFFFFFF;
      if (sub_37D100(v15, &v36))
      {
LABEL_20:
        unint64_t v19 = HIDWORD(v14);
        BOOL v20 = HIDWORD(v14) == 0xFFFFFFFF || v14 == 0;
        *(unsigned char *)(a4 + 40) = 1;
        *(_DWORD *)a4 = 0;
LABEL_50:
        uint64_t v34 = v19 | (v14 << 32);
        if (v20) {
          uint64_t v34 = 0xFFFFFFFFLL;
        }
        goto LABEL_57;
      }
      int v6 = v39;
    }
    if (v6 == 3)
    {
      unint64_t v35 = v38;
      sub_C3557C(*(void *)(a1 + 56), &v35, (uint64_t)&v36);
      unint64_t v21 = v36;
      int v22 = v37;
      if (v36)
      {
        uint64_t v37 = v36;
        operator delete(v36);
      }
      if (v21 != v22)
      {
        unint64_t v23 = v35;
        if (!*(unsigned char *)(a1 + 3))
        {
LABEL_35:
          if (v23)
          {
            uint64_t v28 = HIDWORD(v35);
            unint64_t v29 = v23 << 32;
            if (HIDWORD(v35) == -1)
            {
              unint64_t v29 = 0;
              uint64_t v28 = 0xFFFFFFFFLL;
            }
          }
          else
          {
            unint64_t v29 = 0;
            uint64_t v28 = 0xFFFFFFFFLL;
          }
          *(unsigned char *)(a4 + 40) = 1;
          uint64_t v34 = v28 | v29;
          *(_DWORD *)a4 = 1;
          goto LABEL_57;
        }
        long long v24 = *(void **)(a1 + 48);
        long long v25 = (int *)sub_8ED3D4(*(void *)(a1 + 56), v35, 0, "hall");
        uint64_t v26 = (uint64_t)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 6);
        uint64_t v27 = *(unsigned int *)v26;
        LODWORD(v26) = *(_DWORD *)(v26 + 4);
        if (v26 >= 0xFFFFFFFE) {
          uint64_t v26 = 4294967294;
        }
        else {
          uint64_t v26 = v26;
        }
        uint64_t v36 = (void *)(v27 | (v26 << 32));
        LODWORD(v37) = 0x7FFFFFFF;
        if (sub_37D100(v24, &v36))
        {
          unint64_t v23 = v35;
          goto LABEL_35;
        }
      }
      int v6 = v39;
    }
    if (v6) {
      goto LABEL_41;
    }
    unint64_t v14 = v38;
    if (*(unsigned char *)(a1 + 3))
    {
      uint64_t v30 = *(void **)(a1 + 48);
      int v31 = (int *)sub_499804(*(void *)(a1 + 56), v38, 0, "access point");
      uint64_t v32 = (uint64_t)v31 + *(unsigned __int16 *)((char *)v31 - *v31 + 14);
      uint64_t v33 = *(unsigned int *)v32;
      LODWORD(v32) = *(_DWORD *)(v32 + 4);
      uint64_t v32 = v32 >= 0xFFFFFFFE ? 4294967294 : v32;
      uint64_t v36 = (void *)(v33 | (v32 << 32));
      LODWORD(v37) = 0x7FFFFFFF;
      if (!sub_37D100(v30, &v36))
      {
LABEL_41:
        *(_OWORD *)(a4 + 16) = 0u;
        *(_OWORD *)(a4 + 32) = 0u;
        *(_OWORD *)a4 = 0u;
        return;
      }
    }
    unint64_t v19 = HIDWORD(v14);
    *(unsigned char *)(a4 + 40) = 1;
    *(_DWORD *)a4 = 3;
    BOOL v20 = HIDWORD(v14) == 0xFFFFFFFF || v14 == 0;
    goto LABEL_50;
  }
  unint64_t v35 = v38;
  if (!sub_10B7AC8(*(void *)(a1 + 56), &v35))
  {
LABEL_13:
    int v6 = v39;
    goto LABEL_14;
  }
  unint64_t v7 = v35;
  if (*(unsigned char *)(a1 + 3))
  {
    uint8x8_t v8 = *(void **)(a1 + 48);
    uint64_t v9 = (int *)sub_8ED928(*(void *)(a1 + 56), v35, 0, "station");
    uint64_t v10 = (uint64_t)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6);
    uint64_t v11 = *(unsigned int *)v10;
    LODWORD(v10) = *(_DWORD *)(v10 + 4);
    if (v10 >= 0xFFFFFFFE) {
      uint64_t v10 = 4294967294;
    }
    else {
      uint64_t v10 = v10;
    }
    uint64_t v36 = (void *)(v11 | (v10 << 32));
    LODWORD(v37) = 0x7FFFFFFF;
    if (sub_37D100(v8, &v36))
    {
      unint64_t v7 = v35;
      goto LABEL_9;
    }
    goto LABEL_13;
  }
LABEL_9:
  if (v7)
  {
    uint64_t v12 = HIDWORD(v35);
    unint64_t v13 = v7 << 32;
    if (HIDWORD(v35) == -1)
    {
      unint64_t v13 = 0;
      uint64_t v12 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  *(unsigned char *)(a4 + 40) = 1;
  uint64_t v34 = v12 | v13;
  *(_DWORD *)a4 = 2;
LABEL_57:
  *(void *)(a4 + 4) = v34;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0x3FF0000000000000;
  *(unsigned char *)(a4 + 32) = 0;
}

void sub_10B6990(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  double v8 = *(double *)(a2 + 40) * 100.0;
  if (v8 >= 0.0)
  {
    double v9 = *(double *)(a2 + 40) * 100.0;
    if (v8 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v10 = (uint64_t)(v8 + v8) + 1;
  }
  else
  {
    double v9 = *(double *)(a2 + 40) * 100.0;
    if (v8 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v10 = (uint64_t)(v8 + v8);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_9:
  if (v9 < 9.22337204e18)
  {
    if (v8 >= 0.0)
    {
      if (v8 < 4.50359963e15)
      {
        uint64_t v11 = (uint64_t)(v8 + v8) + 1;
LABEL_18:
        double v8 = (double)(v11 >> 1);
      }
    }
    else if (v8 > -4.50359963e15)
    {
      uint64_t v11 = (uint64_t)(v8 + v8);
      if (v11 >= 1) {
        --v11;
      }
      goto LABEL_18;
    }
    uint64_t v12 = (uint64_t)v8;
    goto LABEL_20;
  }
  uint64_t v12 = 0x7FFFFFFFFFFFFFFELL;
LABEL_20:
  if (v12 <= *(void *)(a1 + 24)) {
    uint64_t v12 = *(void *)(a1 + 24);
  }
  if (*(void *)(a1 + 32) >= v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = *(void *)(a1 + 32);
  }
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (!*(unsigned char *)(a1 + 1)) {
    return;
  }
  uint64_t v14 = sub_DAA2E4(a2);
  BOOL v15 = 0;
  if (!a3 && v14 == -1) {
    BOOL v15 = *(void *)(a2 + 72) == *(void *)(a2 + 80) && *(unsigned char *)(a1 + 2) != 0;
  }
  sub_10B8920();
  uint64_t v107 = v13;
  unsigned int v108 = (unsigned int *)a2;
  *(_OWORD *)double v119 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v121 = 1065353216;
  uint64_t v17 = (double *)v122;
  uint64_t v16 = v123;
  uint64_t v114 = a4;
  int v18 = 0;
  if (v122 != v123)
  {
    unint64_t v19 = "station polygon";
    BOOL v110 = v15;
    int v109 = v123;
    do
    {
      unint64_t v21 = *((void *)v17 + 1);
      int v22 = (int *)sub_10BBC30(*(void *)(a1 + 56), v21, 0, v19);
      unint64_t v23 = *(void *)((char *)v22 + *(unsigned __int16 *)((char *)v22 - *v22 + 4));
      uint64_t v115 = (unint64_t *)v23;
      if (*(unsigned char *)(a1 + 3))
      {
        long long v24 = *(void **)(a1 + 48);
        long long v25 = (int *)sub_8ED928(*(void *)(a1 + 56), v23, 0, "station");
        uint64_t v26 = (uint64_t)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 6);
        uint64_t v27 = *(unsigned int *)v26;
        LODWORD(v26) = *(_DWORD *)(v26 + 4);
        uint64_t v26 = v26 >= 0xFFFFFFFE ? 4294967294 : v26;
        uint64_t v117 = (char *)(v27 | (v26 << 32));
        LODWORD(v118) = 0x7FFFFFFF;
        if ((sub_37D100(v24, &v117) & 1) == 0) {
          goto LABEL_35;
        }
      }
      double v28 = *v17 > 0.0 ? 0.0 : 1.0;
      v18 |= *v17 <= 0.0;
      int v29 = *v17 <= 0.0 || v15;
      if (v29 != 1 || !sub_10B7AC8(*(void *)(a1 + 56), (unint64_t *)&v115)) {
        goto LABEL_35;
      }
      sub_10BC184((uint64_t)v119, &v115, &v115);
      int v112 = v18;
      if (!v115 || (uint64_t v30 = HIDWORD(v115), HIDWORD(v115) == -1))
      {
        unint64_t v31 = 0;
        uint64_t v30 = 0xFFFFFFFFLL;
        double v32 = *v17 * 100.0;
        if (v32 >= 0.0)
        {
LABEL_52:
          double v33 = v32;
          if (v32 >= 4.50359963e15) {
            goto LABEL_59;
          }
          uint64_t v34 = (uint64_t)(v32 + v32) + 1;
          goto LABEL_58;
        }
      }
      else
      {
        unint64_t v31 = (unint64_t)v115 << 32;
        double v32 = *v17 * 100.0;
        if (v32 >= 0.0) {
          goto LABEL_52;
        }
      }
      double v33 = v32;
      if (v32 <= -4.50359963e15) {
        goto LABEL_59;
      }
      uint64_t v34 = (uint64_t)(v32 + v32);
      if (v34 >= 1) {
        --v34;
      }
LABEL_58:
      double v33 = (double)(v34 >> 1);
LABEL_59:
      if (v33 >= 9.22337204e18)
      {
        uint64_t v36 = 0x7FFFFFFFFFFFFFFELL;
        goto LABEL_70;
      }
      if (v32 >= 0.0)
      {
        if (v32 < 4.50359963e15)
        {
          uint64_t v35 = (uint64_t)(v32 + v32) + 1;
LABEL_68:
          double v32 = (double)(v35 >> 1);
        }
      }
      else if (v32 > -4.50359963e15)
      {
        uint64_t v35 = (uint64_t)(v32 + v32);
        if (v35 >= 1) {
          --v35;
        }
        goto LABEL_68;
      }
      uint64_t v36 = (uint64_t)v32;
LABEL_70:
      uint64_t v37 = v19;
      unint64_t v38 = (int *)sub_10BBC30(*(void *)(a1 + 56), v21, 0, v19);
      int v39 = (unsigned __int16 *)((char *)v38 - *v38);
      if (*v39 < 9u)
      {
        BOOL v41 = 0;
        a4 = v114;
        unint64_t v42 = v30 | v31;
        long long v44 = v114[1];
        unint64_t v43 = (unint64_t)v114[2];
        if ((unint64_t)v44 < v43) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v40 = v39[4];
        a4 = v114;
        if (v40)
        {
          BOOL v41 = *((unsigned char *)v38 + v40) != 0;
          unint64_t v42 = v30 | v31;
          long long v44 = v114[1];
          unint64_t v43 = (unint64_t)v114[2];
          if ((unint64_t)v44 < v43) {
            goto LABEL_33;
          }
        }
        else
        {
          BOOL v41 = 0;
          unint64_t v42 = v30 | v31;
          long long v44 = v114[1];
          unint64_t v43 = (unint64_t)v114[2];
          if ((unint64_t)v44 < v43)
          {
LABEL_33:
            *(_DWORD *)long long v44 = 2;
            *(void *)(v44 + 4) = v42;
            *((void *)v44 + 2) = v36;
            *((double *)v44 + 3) = v28;
            BOOL v20 = v44 + 40;
            v44[32] = v41;
            BOOL v15 = v110;
            uint64_t v16 = v109;
            goto LABEL_34;
          }
        }
      }
      int v45 = *a4;
      unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - *a4) >> 3);
      unint64_t v47 = v46 + 1;
      if (v46 + 1 > 0x666666666666666) {
        sub_2E00();
      }
      unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v43 - (void)v45) >> 3);
      if (2 * v48 > v47) {
        unint64_t v47 = 2 * v48;
      }
      if (v48 >= 0x333333333333333) {
        unint64_t v49 = 0x666666666666666;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49 > 0x666666666666666) {
        sub_188D718();
      }
      long long v50 = (char *)operator new(40 * v49);
      uint64_t v51 = &v50[40 * v46];
      *(_DWORD *)uint64_t v51 = 2;
      *(void *)(v51 + 4) = v42;
      *((void *)v51 + 2) = v36;
      *((double *)v51 + 3) = v28;
      v51[32] = v41;
      if (v44 != v45)
      {
        unsigned int v52 = &v50[40 * v46];
        a4 = v114;
        BOOL v15 = v110;
        uint64_t v16 = v109;
        do
        {
          long long v53 = *(_OWORD *)(v44 - 40);
          long long v54 = *(_OWORD *)(v44 - 24);
          uint64_t v55 = v52 - 40;
          *(v52 - 8) = *(v44 - 8);
          *(_OWORD *)(v52 - 24) = v54;
          *(_OWORD *)(v52 - 40) = v53;
          v44 -= 40;
          v52 -= 40;
        }
        while (v44 != v45);
        int v56 = &v50[40 * v49];
        BOOL v20 = v51 + 40;
        *uint64_t v114 = v55;
        v114[1] = v51 + 40;
        v114[2] = v56;
        if (!v45) {
          goto LABEL_34;
        }
LABEL_90:
        operator delete(v45);
        goto LABEL_34;
      }
      a4 = v114;
      BOOL v15 = v110;
      uint64_t v16 = v109;
      unsigned int v57 = &v50[40 * v49];
      BOOL v20 = v51 + 40;
      *uint64_t v114 = v51;
      v114[1] = v51 + 40;
      v114[2] = v57;
      if (v45) {
        goto LABEL_90;
      }
LABEL_34:
      int v18 = v112;
      a4[1] = v20;
      unint64_t v19 = v37;
LABEL_35:
      v17 += 6;
    }
    while (v17 != v16);
  }
  if ((v18 & 1) != 0 || !v15) {
    goto LABEL_179;
  }
  sub_10B8D98(*(void *)(a1 + 56), v108, *(_DWORD *)(a1 + 40), v107, &v117);
  unsigned int v58 = v117;
  uint64_t v113 = v118;
  if (v117 == v118) {
    goto LABEL_177;
  }
  while (2)
  {
    uint64_t v59 = *(void *)(a1 + 56);
    int32x2_t v124 = vrev64_s32(*(int32x2_t *)(v58 + 8));
    sub_8ED2E4(v59, (unint64_t *)&v124, (uint64_t)&v115);
    double v60 = v115;
    double v61 = (unsigned int *)v116;
    if (v115 == v116)
    {
      if (v115) {
        goto LABEL_175;
      }
      goto LABEL_95;
    }
    do
    {
      unint64_t v63 = *v60;
      if (v119[1])
      {
        unint64_t v64 = __ROR8__(v63, 32);
        unint64_t v65 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v64 ^ (v64 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v64 ^ (v64 >> 33))) >> 33));
        unint64_t v66 = v65 ^ (v65 >> 33);
        uint8x8_t v67 = (uint8x8_t)vcnt_s8((int8x8_t)v119[1]);
        v67.i16[0] = vaddlv_u8(v67);
        if (v67.u32[0] > 1uLL)
        {
          unint64_t v68 = v66;
          if ((void *)v66 >= v119[1]) {
            unint64_t v68 = v66 % (unint64_t)v119[1];
          }
        }
        else
        {
          unint64_t v68 = v66 & ((unint64_t)v119[1] - 1);
        }
        int v69 = (uint64_t **)*((void *)v119[0] + v68);
        if (v69)
        {
          long long v70 = *v69;
          if (v70)
          {
            if (v67.u32[0] < 2uLL)
            {
              while (1)
              {
                unint64_t v72 = v70[1];
                if (v66 == v72)
                {
                  if (*((_DWORD *)v70 + 4) == v63 && *((_DWORD *)v70 + 5) == HIDWORD(v63)) {
                    goto LABEL_101;
                  }
                }
                else if ((v72 & ((unint64_t)v119[1] - 1)) != v68)
                {
                  goto LABEL_128;
                }
                long long v70 = (uint64_t *)*v70;
                if (!v70) {
                  goto LABEL_128;
                }
              }
            }
            do
            {
              unint64_t v74 = v70[1];
              if (v66 == v74)
              {
                if (*((_DWORD *)v70 + 4) == v63 && *((_DWORD *)v70 + 5) == HIDWORD(v63)) {
                  goto LABEL_101;
                }
              }
              else
              {
                if ((void *)v74 >= v119[1]) {
                  v74 %= (unint64_t)v119[1];
                }
                if (v74 != v68) {
                  break;
                }
              }
              long long v70 = (uint64_t *)*v70;
            }
            while (v70);
          }
        }
      }
LABEL_128:
      int v75 = (int *)sub_8ED928(*(void *)(a1 + 56), v63, 0, "station");
      uint64_t v76 = (unsigned __int16 *)((char *)v75 - *v75);
      if (*v76 >= 0x15u)
      {
        uint64_t v77 = v76[10];
        if (v77)
        {
          if (*((unsigned char *)v75 + v77) == 3 && sub_10B7AC8(*(void *)(a1 + 56), v60))
          {
            if (!*(unsigned char *)(a1 + 3)) {
              goto LABEL_137;
            }
            uint64_t v78 = *(void **)(a1 + 48);
            unsigned int v79 = (int *)sub_8ED928(*(void *)(a1 + 56), *v60, 0, "station");
            uint64_t v80 = (uint64_t)v79 + *(unsigned __int16 *)((char *)v79 - *v79 + 6);
            uint64_t v81 = *(unsigned int *)v80;
            LODWORD(v80) = *(_DWORD *)(v80 + 4);
            uint64_t v80 = v80 >= 0xFFFFFFFE ? 4294967294 : v80;
            int32x2_t v124 = (int32x2_t)(v81 | (v80 << 32));
            int v125 = 0x7FFFFFFF;
            if (sub_37D100(v78, &v124))
            {
LABEL_137:
              uint64_t v82 = *(unsigned int *)v60;
              if (!v82 || (uint64_t v83 = *((unsigned int *)v60 + 1), v83 == -1))
              {
                uint64_t v84 = 0;
                uint64_t v83 = 0xFFFFFFFFLL;
                double v85 = *(double *)v58 * 100.0;
                if (v85 >= 0.0) {
                  goto LABEL_140;
                }
              }
              else
              {
                uint64_t v84 = v82 << 32;
                double v85 = *(double *)v58 * 100.0;
                if (v85 >= 0.0)
                {
LABEL_140:
                  double v86 = v85;
                  if (v85 >= 4.50359963e15) {
                    goto LABEL_147;
                  }
                  uint64_t v87 = (uint64_t)(v85 + v85) + 1;
                  goto LABEL_146;
                }
              }
              double v86 = v85;
              if (v85 <= -4.50359963e15) {
                goto LABEL_147;
              }
              uint64_t v87 = (uint64_t)(v85 + v85);
              if (v87 >= 1) {
                --v87;
              }
LABEL_146:
              double v86 = (double)(v87 >> 1);
LABEL_147:
              if (v86 >= 9.22337204e18)
              {
                uint64_t v89 = 0x7FFFFFFFFFFFFFFELL;
                uint64_t v90 = v83 | v84;
                long long v92 = a4[1];
                unint64_t v91 = (unint64_t)a4[2];
                if ((unint64_t)v92 >= v91)
                {
LABEL_159:
                  long long v111 = v58;
                  uint64_t v93 = *a4;
                  unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL * ((v92 - *a4) >> 3);
                  unint64_t v95 = v94 + 1;
                  if (v94 + 1 > 0x666666666666666) {
                    sub_2E00();
                  }
                  unint64_t v96 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - (void)v93) >> 3);
                  if (2 * v96 > v95) {
                    unint64_t v95 = 2 * v96;
                  }
                  if (v96 >= 0x333333333333333) {
                    unint64_t v97 = 0x666666666666666;
                  }
                  else {
                    unint64_t v97 = v95;
                  }
                  if (v97 > 0x666666666666666) {
                    sub_188D718();
                  }
                  int v98 = (char *)operator new(40 * v97);
                  char v99 = &v98[40 * v94];
                  *(_DWORD *)char v99 = 2;
                  *(void *)(v99 + 4) = v90;
                  *((void *)v99 + 2) = v89;
                  *((void *)v99 + 3) = 0;
                  v99[32] = 0;
                  if (v92 == v93)
                  {
                    a4 = v114;
                    long long v62 = v99 + 40;
                    *uint64_t v114 = v99;
                    v114[1] = v99 + 40;
                    v114[2] = &v98[40 * v97];
                    if (!v93) {
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    unsigned int v100 = &v98[40 * v94];
                    a4 = v114;
                    do
                    {
                      long long v101 = *(_OWORD *)(v92 - 40);
                      long long v102 = *(_OWORD *)(v92 - 24);
                      long long v103 = v100 - 40;
                      *(v100 - 8) = *(v92 - 8);
                      *(_OWORD *)(v100 - 24) = v102;
                      *(_OWORD *)(v100 - 40) = v101;
                      v92 -= 40;
                      v100 -= 40;
                    }
                    while (v92 != v93);
                    long long v62 = v99 + 40;
                    *uint64_t v114 = v103;
                    v114[1] = v99 + 40;
                    v114[2] = &v98[40 * v97];
                    if (!v93) {
                      goto LABEL_171;
                    }
                  }
                  operator delete(v93);
LABEL_171:
                  unsigned int v58 = v111;
                  goto LABEL_100;
                }
LABEL_99:
                *(_DWORD *)long long v92 = 2;
                *(void *)(v92 + 4) = v90;
                *((void *)v92 + 2) = v89;
                *((void *)v92 + 3) = 0;
                long long v62 = v92 + 40;
                v92[32] = 0;
LABEL_100:
                a4[1] = v62;
                goto LABEL_101;
              }
              if (v85 >= 0.0)
              {
                if (v85 >= 4.50359963e15) {
                  goto LABEL_158;
                }
                uint64_t v88 = (uint64_t)(v85 + v85) + 1;
              }
              else
              {
                if (v85 <= -4.50359963e15) {
                  goto LABEL_158;
                }
                uint64_t v88 = (uint64_t)(v85 + v85);
                if (v88 >= 1) {
                  --v88;
                }
              }
              double v85 = (double)(v88 >> 1);
LABEL_158:
              uint64_t v89 = (uint64_t)v85;
              uint64_t v90 = v83 | v84;
              long long v92 = a4[1];
              unint64_t v91 = (unint64_t)a4[2];
              if ((unint64_t)v92 >= v91) {
                goto LABEL_159;
              }
              goto LABEL_99;
            }
          }
        }
      }
LABEL_101:
      ++v60;
    }
    while (v60 != (unint64_t *)v61);
    double v60 = v115;
    if (v115)
    {
LABEL_175:
      int v116 = v60;
      operator delete(v60);
    }
LABEL_95:
    v58 += 48;
    if (v58 != v113) {
      continue;
    }
    break;
  }
  unsigned int v58 = v117;
LABEL_177:
  if (v58)
  {
    long double v118 = v58;
    operator delete(v58);
  }
LABEL_179:
  uint64_t v104 = __p[0];
  if (__p[0])
  {
    do
    {
      char v105 = (void *)*v104;
      operator delete(v104);
      uint64_t v104 = v105;
    }
    while (v105);
  }
  int v106 = v119[0];
  v119[0] = 0;
  if (v106) {
    operator delete(v106);
  }
  if (v122)
  {
    unsigned int v123 = (double *)v122;
    operator delete(v122);
  }
}

void sub_10B749C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  sub_12168((uint64_t)&a21);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v30 = *(void **)v28;
    if (!*(void *)v28) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v30 = *(void **)v28;
    if (!*(void *)v28) {
      goto LABEL_3;
    }
  }
  *(void *)(v28 + 8) = v30;
  operator delete(v30);
  _Unwind_Resume(a1);
}

void sub_10B7598(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  double v5 = *(double *)(a2 + 40) * 100.0;
  if (v5 >= 0.0)
  {
    double v6 = *(double *)(a2 + 40) * 100.0;
    if (v5 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t)(v5 + v5) + 1;
  }
  else
  {
    double v6 = *(double *)(a2 + 40) * 100.0;
    if (v5 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t)(v5 + v5);
    if (v7 >= 1) {
      --v7;
    }
  }
  double v6 = (double)(v7 >> 1);
LABEL_9:
  if (v6 < 9.22337204e18)
  {
    if (v5 >= 0.0)
    {
      if (v5 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v8 = (uint64_t)(v5 + v5) + 1;
    }
    else
    {
      if (v5 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v8 = (uint64_t)(v5 + v5);
      if (v8 >= 1) {
        --v8;
      }
    }
    double v5 = (double)(v8 >> 1);
LABEL_20:
    uint64_t v9 = (uint64_t)v5;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 16);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (!*(unsigned char *)a1) {
      return;
    }
    goto LABEL_21;
  }
  uint64_t v9 = 0x7FFFFFFFFFFFFFFELL;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (!*(unsigned char *)a1) {
    return;
  }
LABEL_21:
  if (v9 <= v11) {
    uint64_t v9 = v11;
  }
  if (v10 >= v9) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  sub_10B7B9C(*(void *)(a1 + 56), (unsigned int *)a2, *(_DWORD *)(a1 + 40), v12, &v44);
  uint64_t v13 = v44;
  uint64_t v14 = v45;
  if (v44 != v45)
  {
    BOOL v15 = 0;
    while (1)
    {
      unint64_t v16 = *((unsigned int *)v13 + 3) | ((unint64_t)*((unsigned int *)v13 + 2) << 32);
      uint64_t v17 = (int *)sub_498D5C(*(void *)(a1 + 56), v16, 0, "stop");
      unint64_t v18 = *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 12));
      if (v18 <= 0xFFFFFFFEFFFFFFFFLL
        && *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 12)) != 0)
      {
        BOOL v20 = (int *)sub_8ED928(*(void *)(a1 + 56), v18, 0, "station");
        unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 >= 0xBu)
        {
          uint64_t v22 = v21[5];
          if (v22)
          {
            if (*(int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22))) {
              goto LABEL_30;
            }
          }
        }
      }
      if (*(unsigned char *)(a1 + 3))
      {
        unint64_t v23 = *(void **)(a1 + 48);
        long long v24 = (int *)sub_498D5C(*(void *)(a1 + 56), v16, 0, "stop");
        uint64_t v25 = (uint64_t)v24 + *(unsigned __int16 *)((char *)v24 - *v24 + 6);
        uint64_t v26 = *(unsigned int *)v25;
        LODWORD(v25) = *(_DWORD *)(v25 + 4);
        if (v25 >= 0xFFFFFFFE) {
          uint64_t v25 = 4294967294;
        }
        else {
          uint64_t v25 = v25;
        }
        uint64_t v46 = v26 | (v25 << 32);
        int v47 = 0x7FFFFFFF;
        if ((sub_37D100(v23, &v46) & 1) == 0) {
          goto LABEL_30;
        }
        double v27 = *(double *)v13 * 100.0;
        if (v27 < 0.0)
        {
LABEL_44:
          double v28 = v27;
          if (v27 <= -4.50359963e15) {
            goto LABEL_52;
          }
          uint64_t v29 = (uint64_t)(v27 + v27);
          if (v29 >= 1) {
            --v29;
          }
          goto LABEL_51;
        }
      }
      else
      {
        double v27 = *(double *)v13 * 100.0;
        if (v27 < 0.0) {
          goto LABEL_44;
        }
      }
      double v28 = v27;
      if (v27 >= 4.50359963e15) {
        goto LABEL_52;
      }
      uint64_t v29 = (uint64_t)(v27 + v27) + 1;
LABEL_51:
      double v28 = (double)(v29 >> 1);
LABEL_52:
      if (v28 >= 9.22337204e18)
      {
        uint64_t v31 = 0x7FFFFFFFFFFFFFFELL;
        double v32 = a3[2];
        if (v15 < (void *)v32) {
          goto LABEL_28;
        }
        goto LABEL_64;
      }
      if (v27 >= 0.0)
      {
        if (v27 >= 4.50359963e15) {
          goto LABEL_63;
        }
        uint64_t v30 = (uint64_t)(v27 + v27) + 1;
      }
      else
      {
        if (v27 <= -4.50359963e15) {
          goto LABEL_63;
        }
        uint64_t v30 = (uint64_t)(v27 + v27);
        if (v30 >= 1) {
          --v30;
        }
      }
      double v27 = (double)(v30 >> 1);
LABEL_63:
      uint64_t v31 = (uint64_t)v27;
      double v32 = a3[2];
      if (v15 < (void *)v32)
      {
LABEL_28:
        *(_DWORD *)BOOL v15 = 0;
        *(void *)((char *)v15 + 4) = v13[1];
        _OWORD v15[2] = v31;
        v15[3] = 0;
        *((unsigned char *)v15 + 32) = 0;
        v15 += 5;
        goto LABEL_29;
      }
LABEL_64:
      double v33 = *a3;
      unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v15 - (unsigned char *)*a3) >> 3);
      unint64_t v35 = v34 + 1;
      if (v34 + 1 > 0x666666666666666) {
        sub_2E00();
      }
      unint64_t v36 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - v33) >> 3);
      if (2 * v36 > v35) {
        unint64_t v35 = 2 * v36;
      }
      if (v36 >= 0x333333333333333) {
        unint64_t v37 = 0x666666666666666;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37 > 0x666666666666666) {
        sub_188D718();
      }
      unint64_t v38 = (char *)operator new(40 * v37);
      int v39 = &v38[40 * v34];
      *(_DWORD *)int v39 = 0;
      *(void *)(v39 + 4) = v13[1];
      *((void *)v39 + 2) = v31;
      *((void *)v39 + 3) = 0;
      v39[32] = 0;
      if (v15 == (void *)v33)
      {
        BOOL v15 = v39 + 40;
        *a3 = v39;
        a3[1] = v39 + 40;
        a3[2] = &v38[40 * v37];
        if (!v33) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v40 = &v38[40 * v34];
        do
        {
          long long v41 = *(_OWORD *)(v15 - 5);
          long long v42 = *(_OWORD *)(v15 - 3);
          unint64_t v43 = v40 - 40;
          *(v40 - 8) = *((unsigned char *)v15 - 8);
          *(_OWORD *)(v40 - 24) = v42;
          *(_OWORD *)(v40 - 40) = v41;
          v15 -= 5;
          v40 -= 40;
        }
        while (v15 != (void *)v33);
        BOOL v15 = v39 + 40;
        *a3 = v43;
        a3[1] = v39 + 40;
        a3[2] = &v38[40 * v37];
        if (!v33) {
          goto LABEL_29;
        }
      }
      operator delete(v33);
LABEL_29:
      a3[1] = v15;
LABEL_30:
      v13 += 6;
      if (v13 == v14)
      {
        uint64_t v13 = v44;
        break;
      }
    }
  }
  if (v13)
  {
    int v45 = v13;
    operator delete(v13);
  }
}

void sub_10B7A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = *(void **)v11;
  if (!*(void *)v11) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

BOOL sub_10B7AC8(uint64_t a1, unint64_t *a2)
{
  sub_C3548C(a1, a2, (uint64_t)&__p);
  int64x2_t v3 = (char *)__p;
  unint64_t v4 = v12;
  if (__p == v12)
  {
    BOOL v6 = 0;
    if (!__p) {
      return v6;
    }
    goto LABEL_10;
  }
  double v5 = (char *)__p + 8;
  do
  {
    unint64_t v13 = *((void *)v5 - 1);
    sub_C3557C(a1, &v13, (uint64_t)&v14);
    uint64_t v8 = v14;
    uint64_t v9 = v15;
    if (v14)
    {
      BOOL v15 = v14;
      operator delete(v14);
    }
    BOOL v7 = v8 == v9;
    BOOL v6 = v8 != v9;
    BOOL v7 = !v7 || v5 == v4;
    v5 += 8;
  }
  while (!v7);
  int64x2_t v3 = (char *)__p;
  if (__p)
  {
LABEL_10:
    uint64_t v12 = v3;
    operator delete(v3);
  }
  return v6;
}

void sub_10B7B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10B7B9C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (!*(void *)(a1 + 3872) || !a3 || (*a2 & a2[1]) == 0xFFFFFFFF)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v129 = 1.79769313e308;
  }
  else
  {
    if (a4 < 0) {
      __int16 v9 = -50;
    }
    else {
      __int16 v9 = 50;
    }
    double v129 = (double)(a4 / 100
                  + (int)(((5243 * (__int16)(v9 + a4 % 100)) >> 19)
                        + ((5243 * (__int16)(v9 + a4 % 100)) >> 31)));
  }
  long long v131 = 0;
  long long v132 = 0;
  uint64_t v133 = 0;
  sub_40889C((uint64_t)&v139, a3);
  unsigned int v123 = a5;
  int v136 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  LODWORD(v149[0]) = 1;
  int v150 = 0;
  sub_C06F58((uint64_t *)&v136, v149, 0.0);
  uint64_t v10 = (uint64_t)v136;
  uint64_t v11 = v137;
  if (v136 == v137)
  {
LABEL_163:
    uint64_t v11 = (double *)v10;
    if (v10) {
      goto LABEL_167;
    }
    goto LABEL_168;
  }
  unint64_t v12 = a3;
  float64x2_t v127 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v128 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v126 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v125 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  unint64_t v124 = a3;
  while (1)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v132 - v131) >> 4) >= v12) {
      goto LABEL_163;
    }
    double v14 = *(double *)v10;
    BOOL v15 = (long long *)(v10 + 8);
    int v16 = *(_DWORD *)(v10 + 56);
    int v148 = v16;
    if (v16 == 1)
    {
      long long v19 = *v15;
      long long v20 = *(_OWORD *)(v10 + 40);
      unint64_t v13 = &v142;
      v147[1] = *(_OWORD *)(v10 + 24);
      v147[2] = v20;
      v147[0] = v19;
      uint64_t v17 = (uint64_t)v11 - v10;
      if ((uint64_t)v11 - v10 < 65) {
        goto LABEL_24;
      }
    }
    else
    {
      if (!v16)
      {
        LODWORD(v13) = *(_DWORD *)v15;
        LODWORD(v147[0]) = *(_DWORD *)v15;
      }
      uint64_t v17 = (uint64_t)v11 - v10;
      if ((uint64_t)v11 - v10 < 65)
      {
LABEL_24:
        v11 -= 8;
        uint64_t v137 = v11;
        if (v14 > v129) {
          goto LABEL_165;
        }
        goto LABEL_75;
      }
    }
    double v18 = *(double *)v10;
    if (v16 == 1)
    {
      LODWORD(v13) = *(_DWORD *)(v10 + 8);
      long long v142 = *(_OWORD *)(v10 + 12);
      *(_OWORD *)double v143 = *(_OWORD *)(v10 + 28);
      *(_OWORD *)&v143[12] = *(_OWORD *)(v10 + 40);
    }
    else if (!v16)
    {
      LODWORD(v13) = *(_DWORD *)v15;
    }
    uint64_t v21 = 0;
    uint64_t v22 = v17 >> 6;
    int64_t v23 = (unint64_t)((v17 >> 6) - 2) >> 1;
    uint64_t v24 = v10;
    do
    {
      uint64_t v27 = v24;
      v24 += (v21 << 6) + 64;
      uint64_t v28 = 2 * v21;
      uint64_t v21 = (2 * v21) | 1;
      uint64_t v29 = v28 + 2;
      if (v29 < v22 && *(double *)v24 > *(double *)(v24 + 64))
      {
        v24 += 64;
        uint64_t v21 = v29;
      }
      uint64_t v30 = (long long *)(v24 + 8);
      *(void *)uint64_t v27 = *(void *)v24;
      uint64_t v31 = (_OWORD *)(v27 + 8);
      if (v27 != v24)
      {
        int v32 = *(_DWORD *)(v27 + 56);
        int v33 = *(_DWORD *)(v24 + 56);
        if (v32 == v33)
        {
          if (v32 == 1)
          {
            long long v34 = *v30;
            long long v35 = *(_OWORD *)(v24 + 24);
            *(_OWORD *)(v27 + 36) = *(_OWORD *)(v24 + 36);
            _OWORD *v31 = v34;
            *(_OWORD *)(v27 + 24) = v35;
          }
          else if (!v32)
          {
            *(_DWORD *)uint64_t v31 = *(_DWORD *)v30;
          }
        }
        else
        {
          if (v33 == 1)
          {
            long long v25 = *v30;
            long long v26 = *(_OWORD *)(v24 + 40);
            *(_OWORD *)(v27 + 24) = *(_OWORD *)(v24 + 24);
            *(_OWORD *)(v27 + 40) = v26;
            _OWORD *v31 = v25;
          }
          else if (!v33)
          {
            *(_DWORD *)uint64_t v31 = *(_DWORD *)v30;
          }
          *(_DWORD *)(v27 + 56) = *(_DWORD *)(v24 + 56);
        }
      }
    }
    while (v21 <= v23);
    if ((double *)v24 != v11 - 8)
    {
      *(double *)uint64_t v24 = *(v11 - 8);
      unint64_t v36 = v11 - 7;
      int v37 = *(_DWORD *)(v24 + 56);
      int v38 = *((_DWORD *)v11 - 2);
      if (v37 != v38)
      {
        if (v38 == 1)
        {
          long long v41 = *(_OWORD *)v36;
          long long v42 = *(_OWORD *)(v11 - 3);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(v11 - 5);
          *(_OWORD *)(v24 + 40) = v42;
          *uint64_t v30 = v41;
          *(_DWORD *)(v24 + 56) = *((_DWORD *)v11 - 2);
          *(v11 - 8) = v18;
          if (*((_DWORD *)v11 - 2) != v16) {
            goto LABEL_57;
          }
        }
        else
        {
          if (!v38) {
            *(_DWORD *)uint64_t v30 = *(_DWORD *)v36;
          }
          *(_DWORD *)(v24 + 56) = *((_DWORD *)v11 - 2);
          *(v11 - 8) = v18;
          if (*((_DWORD *)v11 - 2) != v16) {
            goto LABEL_57;
          }
        }
        goto LABEL_65;
      }
      if (v37 == 1)
      {
        long long v39 = *(_OWORD *)v36;
        long long v40 = *(_OWORD *)(v11 - 5);
        *(_OWORD *)(v24 + 36) = *(_OWORD *)((char *)v11 - 28);
        *uint64_t v30 = v39;
        *(_OWORD *)(v24 + 24) = v40;
      }
      else if (!v37)
      {
        *(_DWORD *)uint64_t v30 = *(_DWORD *)v36;
        *(v11 - 8) = v18;
        if (*((_DWORD *)v11 - 2) != v16) {
          goto LABEL_57;
        }
        goto LABEL_65;
      }
      *(v11 - 8) = v18;
      if (*((_DWORD *)v11 - 2) != v16)
      {
LABEL_57:
        if (v16 == 1)
        {
          *((_DWORD *)v11 - 14) = v13;
          long long v43 = v142;
          long long v44 = *(_OWORD *)v143;
          *(_OWORD *)(v11 - 3) = *(_OWORD *)&v143[12];
          *(_OWORD *)((char *)v11 - 36) = v44;
          *(_OWORD *)((char *)v11 - 52) = v43;
        }
        else if (!v16)
        {
          *(_DWORD *)unint64_t v36 = v13;
        }
        *((_DWORD *)v11 - 2) = v16;
LABEL_73:
        sub_4089D4(v10, v24 + 64, (v24 + 64 - v10) >> 6);
        goto LABEL_74;
      }
LABEL_65:
      if (v16 == 1)
      {
        *((_DWORD *)v11 - 14) = v13;
        long long v45 = v142;
        long long v46 = *(_OWORD *)v143;
        *(double *)((char *)v11 - 20) = *(double *)&v143[16];
        *(_OWORD *)((char *)v11 - 36) = v46;
        *(_OWORD *)((char *)v11 - 52) = v45;
      }
      else if (!v16)
      {
        *(_DWORD *)unint64_t v36 = v13;
      }
      goto LABEL_73;
    }
    *(double *)uint64_t v24 = v18;
    if (*(_DWORD *)(v24 + 56) == v16)
    {
      if (v16 == 1)
      {
        *(_DWORD *)(v24 + 8) = v13;
        long long v115 = v142;
        long long v116 = *(_OWORD *)v143;
        *(void *)(v24 + 44) = *(void *)&v143[16];
        *(_OWORD *)(v24 + 28) = v116;
        *(_OWORD *)(v24 + 12) = v115;
      }
      else if (!v16)
      {
        *(_DWORD *)uint64_t v30 = v13;
      }
    }
    else
    {
      if (v16 == 1)
      {
        *(_DWORD *)(v24 + 8) = v13;
        long long v117 = v142;
        long long v118 = *(_OWORD *)v143;
        *(_OWORD *)(v24 + 40) = *(_OWORD *)&v143[12];
        *(_OWORD *)(v24 + 28) = v118;
        *(_OWORD *)(v24 + 12) = v117;
      }
      else if (!v16)
      {
        *(_DWORD *)uint64_t v30 = v13;
        *(_DWORD *)(v24 + 56) = 0;
        goto LABEL_74;
      }
      *(_DWORD *)(v24 + 56) = v16;
    }
LABEL_74:
    uint64_t v11 = v137 - 8;
    v137 -= 8;
    if (v14 > v129) {
      goto LABEL_165;
    }
LABEL_75:
    LODWORD(v13) = v141;
    if (v141 != (v140 - (unsigned char *)v139) >> 3) {
      break;
    }
    if (v14 > *(double *)v139) {
      goto LABEL_165;
    }
LABEL_79:
    int v47 = v148;
    if (!v148)
    {
      uint64_t v54 = LODWORD(v147[0]);
      uint64_t v55 = (unsigned int *)sub_2AB884(*(void *)(a1 + 3872), 6, v147[0], 1);
      if (v56)
      {
        uint64_t v57 = *v55;
        unsigned int v58 = (char *)v55 + v57;
        uint64_t v59 = (unsigned __int16 *)((char *)v55 + v57 - *(int *)((char *)v55 + v57));
        if (*v59 >= 0x1Du)
        {
          uint64_t v60 = v59[14];
          if (v60)
          {
            double v61 = &v58[v60];
            uint64_t v62 = *(unsigned int *)&v58[v60];
            uint64_t v63 = *(unsigned int *)&v61[v62];
            if (v63)
            {
              uint64_t v64 = 0;
              uint64_t v65 = 0;
              uint64_t v66 = 4 * v63;
              uint8x8_t v67 = (char *)v55 + v60 + v57 + v62;
              do
              {
                unint64_t v68 = (unint64_t)&v67[v64
                                           + *(unsigned int *)&v67[v64 + 4]
                                           + *(unsigned __int16 *)&v67[v64
                                                                     + 10
                                                                     + *(unsigned int *)&v67[v64 + 4]
                                                                     - (uint64_t)*(int *)&v67[v64
                                                                                           + 4
                                                                                           + *(unsigned int *)&v67[v64 + 4]]]];
                uint64_t v70 = *(unsigned int *)(v68 + 4);
                unsigned int v69 = *(_DWORD *)(v68 + 8);
                if (v69 >= 0xFFFFFFFE) {
                  uint64_t v71 = 4294967294;
                }
                else {
                  uint64_t v71 = v69;
                }
                long double v72 = exp(3.14159265 - (double)v71 * 6.28318531 / 4294967300.0);
                *(double *)&unint64_t v73 = atan((v72 - 1.0 / v72) * 0.5) * 57.2957795;
                long double v74 = *(double *)&v73 * 0.0174532925;
                LODWORD(v73) = a2[1];
                long double v75 = exp(3.14159265 - (double)v73 * 6.28318531 / 4294967300.0);
                long double v76 = atan((v75 - 1.0 / v75) * 0.5) * 57.2957795 * 0.0174532925;
                v77.i64[0] = v70;
                v77.i64[1] = *a2;
                int64x2_t v78 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v77), v128), v127), v126), v125);
                double v130 = vsubq_f64((float64x2_t)v78, (float64x2_t)vdupq_laneq_s64(v78, 1)).f64[0];
                long double v79 = sin((v74 - v76) * 0.5);
                long double v80 = v79 * v79;
                double v81 = cos(v74);
                long double v82 = v81 * cos(v76);
                long double v83 = sin(0.5 * v130);
                long double v84 = atan2(sqrt(v80 + v82 * (v83 * v83)), sqrt(1.0 - (v80 + v82 * (v83 * v83))));
                double v85 = (v84 + v84) * 6372797.56;
                if (v85 != 1.79769313e308)
                {
                  if (v141 == (v140 - (unsigned char *)v139) >> 3)
                  {
                    if (v85 < *(double *)v139 && v85 < v129) {
                      goto LABEL_124;
                    }
                  }
                  else if (v85 < 1.79769313e308 && v85 < v129)
                  {
LABEL_124:
                    if (sub_29C8())
                    {
                      *(double *)&long long v142 = v85;
                      sub_408754((uint64_t)&v139, (double *)&v142);
                      *(double *)&long long v142 = v85;
                      *((void *)&v142 + 1) = v65 | (v54 << 32);
                      *(void *)double v143 = v70 | (v71 << 32);
                      *(_DWORD *)&v143[8] = 0x7FFFFFFF;
                      *(void *)&v143[16] = -1;
                      *(_DWORD *)&v143[24] = 0;
                      int v144 = 1;
                      sub_C06F58((uint64_t *)&v136, &v142, v85);
                    }
                  }
                }
                ++v65;
                v64 += 4;
              }
              while (v66 != v64);
            }
          }
        }
      }
      uint64_t v88 = 0;
      uint64_t v89 = v136;
      int v90 = 4 * v54;
      unint64_t v12 = v124;
      while (2)
      {
        if (sub_511FC(v54) >= 0x1E)
        {
LABEL_13:
          int v136 = v89;
          uint64_t v11 = v137;
          goto LABEL_14;
        }
        LODWORD(__p[0]) = v88 + v90;
        long long v92 = (unsigned int *)sub_2AB884(*(void *)(a1 + 3872), 6, (int)v88 + v90, 1);
        if (!v93
          || (unint64_t v94 = (int *)((char *)v92 + *v92),
              unint64_t v95 = (unsigned __int16 *)((char *)v94 - *v94),
              LODWORD(v13) = *v95,
              v13 < 0x37)
          || (uint64_t v96 = v95[27]) == 0
          || !*((unsigned char *)v94 + v96))
        {
LABEL_129:
          if (++v88 == 4) {
            goto LABEL_13;
          }
          continue;
        }
        break;
      }
      sub_383CC((unsigned int *)__p, (uint64_t)&v142);
      double v98 = sub_35C04((unsigned int *)&v142, a2, 0, v97);
      LODWORD(v13) = v141;
      if (v141 == (v140 - (unsigned char *)v139) >> 3)
      {
        if (v98 >= *(double *)v139) {
          goto LABEL_129;
        }
      }
      else if (v98 >= 1.79769313e308)
      {
        goto LABEL_129;
      }
      if (v98 >= v129) {
        goto LABEL_129;
      }
      int v99 = (int)__p[0];
      unsigned int v100 = v137;
      if (v137 < v138)
      {
        *uint64_t v137 = v98;
        *((_DWORD *)v100 + 14) = 0;
        uint64_t v91 = (uint64_t)(v100 + 8);
        *((_DWORD *)v100 + 2) = v99;
      }
      else
      {
        uint64_t v101 = ((char *)v137 - (char *)v89) >> 6;
        unint64_t v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 58)
        {
          int v136 = v89;
          sub_2E00();
        }
        uint64_t v103 = (char *)v138 - (char *)v89;
        if (((char *)v138 - (char *)v89) >> 5 > v102) {
          unint64_t v102 = v103 >> 5;
        }
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v104 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v104 = v102;
        }
        if (v104 >> 58)
        {
          int v136 = v89;
          sub_188D718();
        }
        char v105 = (char *)operator new(v104 << 6);
        int v106 = &v105[64 * v101];
        *(double *)int v106 = v98;
        *((_DWORD *)v106 + 14) = 0;
        *((_DWORD *)v106 + 2) = v99;
        if (v100 == v89)
        {
          uint64_t v114 = &v105[64 * v101];
          uint64_t v91 = (uint64_t)(v106 + 64);
          uint64_t v137 = (double *)(v106 + 64);
          uint64_t v138 = (double *)&v105[64 * v104];
          if (v89) {
            goto LABEL_156;
          }
        }
        else
        {
          uint64_t v107 = 0;
          do
          {
            BOOL v110 = &v106[v107 * 8];
            *((double *)v110 - 8) = v100[v107 - 8];
            long long v111 = &v106[v107 * 8 - 56];
            int v112 = &v100[v107 - 7];
            int v113 = LODWORD(v100[v107 - 1]);
            *((_DWORD *)v110 - 2) = v113;
            if (v113 == 1)
            {
              long long v108 = *(_OWORD *)v112;
              long long v109 = *(_OWORD *)&v100[v107 - 3];
              *(_OWORD *)&v106[v107 * 8 - 40] = *(_OWORD *)&v100[v107 - 5];
              *(_OWORD *)&v106[v107 * 8 - 24] = v109;
              *(_OWORD *)long long v111 = v108;
            }
            else if (!v113)
            {
              *(_DWORD *)long long v111 = *(_DWORD *)v112;
            }
            v107 -= 8;
          }
          while (&v100[v107] != v89);
          uint64_t v114 = &v106[v107 * 8];
          uint64_t v91 = (uint64_t)(v106 + 64);
          uint64_t v137 = (double *)(v106 + 64);
          uint64_t v138 = (double *)&v105[64 * v104];
          if (v89) {
LABEL_156:
          }
            operator delete(v89);
        }
        uint64_t v89 = (double *)v114;
        unint64_t v12 = v124;
      }
      uint64_t v137 = (double *)v91;
      sub_4089D4((uint64_t)v89, v91, (v91 - (uint64_t)v89) >> 6);
      goto LABEL_129;
    }
    if (v148 == 1) {
      unint64_t v48 = v147;
    }
    else {
      unint64_t v48 = 0;
    }
    if (v148 != 1 && sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v142);
      sub_188FC78(&v142, (uint64_t)"NN search ignored result_t element!", 35);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v135 < 0) {
        operator delete(__p[0]);
      }
      *(void *)&long long v142 = v122;
      *(void *)&v143[*(void *)(v122 - 24) - 16] = v121;
      if (v146 < 0) {
        operator delete(v145);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    unint64_t v49 = v131;
    if (v131 != v132)
    {
      long long v50 = dword_8;
      if (v47 == 1) {
        long long v50 = (_DWORD *)v147 + 2;
      }
      unsigned int v52 = v50;
      int v51 = *v50;
      LODWORD(v13) = v52[1];
      while (*((_DWORD *)v49 + 3) != v13 || *((_DWORD *)v49 + 2) != v51)
      {
        v49 += 48;
        if (v49 == v132)
        {
          unint64_t v49 = v132;
          break;
        }
      }
    }
    if (v49 == v132) {
      sub_408220(&v131, v48);
    }
LABEL_14:
    uint64_t v10 = (uint64_t)v136;
    if (v136 == v11) {
      goto LABEL_166;
    }
  }
  if (v14 <= 1.79769313e308) {
    goto LABEL_79;
  }
LABEL_165:
  uint64_t v11 = v136;
LABEL_166:
  if (v11)
  {
LABEL_167:
    uint64_t v137 = v11;
    operator delete(v11);
  }
LABEL_168:
  if (v139)
  {
    uint64_t v140 = v139;
    operator delete(v139);
  }
  int v120 = v131;
  double v119 = v132;
  v123[1] = 0;
  v123[2] = 0;
  void *v123 = 0;
  *(void *)&long long v142 = v123;
  if (v120 != v119)
  {
    do
    {
      sub_5E15F4((char ***)&v142, v120);
      v120 += 48;
    }
    while (v120 != v119);
    double v119 = v131;
  }
  if (v119)
  {
    long long v132 = v119;
    operator delete(v119);
  }
}

void sub_10B8864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a50);
  if (a41) {
    operator delete(a41);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_10B8920()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  unsigned int v4 = v3;
  BOOL v6 = v5;
  uint64_t v7 = v0;
  __int16 v9 = v8;
  long long v40 = (uint64_t *)(v0 + 3872);
  sub_382D20((uint64_t)v43, (void *)(v0 + 3872));
  sub_10B9B1C((uint64_t)v43, v6, (uint64_t)v47, v4, v2, 0, &v41);
  *__int16 v9 = 0;
  v9[1] = 0;
  uint64_t v9[2] = 0;
  uint64_t v11 = v41;
  uint64_t v10 = v42;
  uint64_t v12 = (char *)v42 - (char *)v41;
  if (v42 != v41)
  {
    if ((unint64_t)v12 >= 0x5555555555555551) {
      sub_2E00();
    }
    uint64_t v13 = v12 >> 4;
    double v14 = (char *)operator new(48 * (v12 >> 4));
    *__int16 v9 = v14;
    v9[1] = v14;
    uint64_t v9[2] = &v14[48 * v13];
    BOOL v15 = "station polygon";
    while (1)
    {
      uint64_t v17 = sub_10BB9AC((uint64_t)v43, *v11);
      double v18 = &v17[-*(int *)v17];
      if (*(unsigned __int16 *)v18 >= 5u && (unsigned __int16 v19 = *((_WORD *)v18 + 2)) != 0) {
        unint64_t v20 = *(unsigned int *)&v17[v19 + 4] | ((unint64_t)*(unsigned int *)&v17[v19] << 32);
      }
      else {
        unint64_t v20 = 0xFFFFFFFFLL;
      }
      unint64_t v21 = __ROR8__(v20, 32);
      sub_10BBC30(v7, v21, 0, v15);
      if (*(unsigned char *)(v7 + 3888) && (sub_2AB7E4(*v40) & 1) == 0) {
        goto LABEL_6;
      }
      int64_t v23 = (char *)v9[1];
      uint64_t v22 = (char *)v9[2];
      double v24 = (double)(uint64_t)v11[1] / 100.0;
      if (v23 >= v22) {
        break;
      }
      *(double *)int64_t v23 = v24;
      *((void *)v23 + 1) = v21;
      *((void *)v23 + 2) = -1;
      *((_DWORD *)v23 + 6) = 0x7FFFFFFF;
      *((void *)v23 + 4) = -1;
      int v16 = v23 + 48;
      *((_DWORD *)v23 + 10) = 0;
LABEL_5:
      v9[1] = v16;
LABEL_6:
      v11 += 2;
      if (v11 == v10)
      {
        uint64_t v10 = v41;
        goto LABEL_30;
      }
    }
    long long v25 = v15;
    long long v26 = (char *)*v9;
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (unsigned char *)*v9) >> 4);
    unint64_t v28 = v27 + 1;
    if (v27 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v26) >> 4);
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v30 = 0x555555555555555;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v31 = (char *)operator new(48 * v30);
    int v32 = &v31[48 * v27];
    *(double *)int v32 = v24;
    *((void *)v32 + 1) = v21;
    *((void *)v32 + 2) = -1;
    *((_DWORD *)v32 + 6) = 0x7FFFFFFF;
    *((void *)v32 + 4) = -1;
    *((_DWORD *)v32 + 10) = 0;
    if (v23 == v26)
    {
      int v16 = v32 + 48;
      *__int16 v9 = v32;
      v9[1] = v32 + 48;
      uint64_t v9[2] = &v31[48 * v30];
      if (!v26) {
        goto LABEL_26;
      }
    }
    else
    {
      int v33 = &v31[48 * v27];
      do
      {
        long long v34 = *((_OWORD *)v23 - 3);
        long long v35 = *((_OWORD *)v23 - 2);
        unint64_t v36 = v33 - 48;
        *(_OWORD *)(v33 - 20) = *(_OWORD *)(v23 - 20);
        *((_OWORD *)v33 - 3) = v34;
        *((_OWORD *)v33 - 2) = v35;
        v23 -= 48;
        v33 -= 48;
      }
      while (v23 != v26);
      int v16 = v32 + 48;
      *__int16 v9 = v36;
      v9[1] = v32 + 48;
      uint64_t v9[2] = &v31[48 * v30];
      if (!v26) {
        goto LABEL_26;
      }
    }
    operator delete(v26);
LABEL_26:
    BOOL v15 = v25;
    goto LABEL_5;
  }
LABEL_30:
  if (v10)
  {
    long long v42 = v10;
    operator delete(v10);
  }
  int v37 = v46;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  int v38 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  long long v39 = v44;
  if (v44)
  {
    if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_10B8D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_B36CB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10B8D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
    uint64_t v17 = __p;
    if (!__p)
    {
LABEL_3:
      sub_B36CB4(&a14);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  sub_B36CB4(&a14);
  _Unwind_Resume(a1);
}

void sub_10B8D98(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (!*(void *)(a1 + 3872) || !a3 || (*a2 & a2[1]) == 0xFFFFFFFF)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  if (a4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v129 = 1.79769313e308;
  }
  else
  {
    if (a4 < 0) {
      __int16 v9 = -50;
    }
    else {
      __int16 v9 = 50;
    }
    double v129 = (double)(a4 / 100
                  + (int)(((5243 * (__int16)(v9 + a4 % 100)) >> 19)
                        + ((5243 * (__int16)(v9 + a4 % 100)) >> 31)));
  }
  long long v131 = 0;
  long long v132 = 0;
  uint64_t v133 = 0;
  sub_40889C((uint64_t)&v139, a3);
  unsigned int v123 = a5;
  int v136 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  LODWORD(v149[0]) = 1;
  int v150 = 0;
  sub_C06F58((uint64_t *)&v136, v149, 0.0);
  uint64_t v10 = (uint64_t)v136;
  uint64_t v11 = v137;
  if (v136 == v137)
  {
LABEL_163:
    uint64_t v11 = (double *)v10;
    if (v10) {
      goto LABEL_167;
    }
    goto LABEL_168;
  }
  unint64_t v12 = a3;
  float64x2_t v127 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v128 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v126 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v125 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  unint64_t v124 = a3;
  while (1)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v132 - v131) >> 4) >= v12) {
      goto LABEL_163;
    }
    double v14 = *(double *)v10;
    BOOL v15 = (long long *)(v10 + 8);
    int v16 = *(_DWORD *)(v10 + 56);
    int v148 = v16;
    if (v16 == 1)
    {
      long long v19 = *v15;
      long long v20 = *(_OWORD *)(v10 + 40);
      uint64_t v13 = &v142;
      v147[1] = *(_OWORD *)(v10 + 24);
      v147[2] = v20;
      v147[0] = v19;
      uint64_t v17 = (uint64_t)v11 - v10;
      if ((uint64_t)v11 - v10 < 65) {
        goto LABEL_24;
      }
    }
    else
    {
      if (!v16)
      {
        LODWORD(v13) = *(_DWORD *)v15;
        LODWORD(v147[0]) = *(_DWORD *)v15;
      }
      uint64_t v17 = (uint64_t)v11 - v10;
      if ((uint64_t)v11 - v10 < 65)
      {
LABEL_24:
        v11 -= 8;
        uint64_t v137 = v11;
        if (v14 > v129) {
          goto LABEL_165;
        }
        goto LABEL_75;
      }
    }
    double v18 = *(double *)v10;
    if (v16 == 1)
    {
      LODWORD(v13) = *(_DWORD *)(v10 + 8);
      long long v142 = *(_OWORD *)(v10 + 12);
      *(_OWORD *)double v143 = *(_OWORD *)(v10 + 28);
      *(_OWORD *)&v143[12] = *(_OWORD *)(v10 + 40);
    }
    else if (!v16)
    {
      LODWORD(v13) = *(_DWORD *)v15;
    }
    uint64_t v21 = 0;
    uint64_t v22 = v17 >> 6;
    int64_t v23 = (unint64_t)((v17 >> 6) - 2) >> 1;
    uint64_t v24 = v10;
    do
    {
      uint64_t v27 = v24;
      v24 += (v21 << 6) + 64;
      uint64_t v28 = 2 * v21;
      uint64_t v21 = (2 * v21) | 1;
      uint64_t v29 = v28 + 2;
      if (v29 < v22 && *(double *)v24 > *(double *)(v24 + 64))
      {
        v24 += 64;
        uint64_t v21 = v29;
      }
      unint64_t v30 = (long long *)(v24 + 8);
      *(void *)uint64_t v27 = *(void *)v24;
      uint64_t v31 = (_OWORD *)(v27 + 8);
      if (v27 != v24)
      {
        int v32 = *(_DWORD *)(v27 + 56);
        int v33 = *(_DWORD *)(v24 + 56);
        if (v32 == v33)
        {
          if (v32 == 1)
          {
            long long v34 = *v30;
            long long v35 = *(_OWORD *)(v24 + 24);
            *(_OWORD *)(v27 + 36) = *(_OWORD *)(v24 + 36);
            _OWORD *v31 = v34;
            *(_OWORD *)(v27 + 24) = v35;
          }
          else if (!v32)
          {
            *(_DWORD *)uint64_t v31 = *(_DWORD *)v30;
          }
        }
        else
        {
          if (v33 == 1)
          {
            long long v25 = *v30;
            long long v26 = *(_OWORD *)(v24 + 40);
            *(_OWORD *)(v27 + 24) = *(_OWORD *)(v24 + 24);
            *(_OWORD *)(v27 + 40) = v26;
            _OWORD *v31 = v25;
          }
          else if (!v33)
          {
            *(_DWORD *)uint64_t v31 = *(_DWORD *)v30;
          }
          *(_DWORD *)(v27 + 56) = *(_DWORD *)(v24 + 56);
        }
      }
    }
    while (v21 <= v23);
    if ((double *)v24 != v11 - 8)
    {
      *(double *)uint64_t v24 = *(v11 - 8);
      unint64_t v36 = v11 - 7;
      int v37 = *(_DWORD *)(v24 + 56);
      int v38 = *((_DWORD *)v11 - 2);
      if (v37 != v38)
      {
        if (v38 == 1)
        {
          long long v41 = *(_OWORD *)v36;
          long long v42 = *(_OWORD *)(v11 - 3);
          *(_OWORD *)(v24 + 24) = *(_OWORD *)(v11 - 5);
          *(_OWORD *)(v24 + 40) = v42;
          *unint64_t v30 = v41;
          *(_DWORD *)(v24 + 56) = *((_DWORD *)v11 - 2);
          *(v11 - 8) = v18;
          if (*((_DWORD *)v11 - 2) != v16) {
            goto LABEL_57;
          }
        }
        else
        {
          if (!v38) {
            *(_DWORD *)unint64_t v30 = *(_DWORD *)v36;
          }
          *(_DWORD *)(v24 + 56) = *((_DWORD *)v11 - 2);
          *(v11 - 8) = v18;
          if (*((_DWORD *)v11 - 2) != v16) {
            goto LABEL_57;
          }
        }
        goto LABEL_65;
      }
      if (v37 == 1)
      {
        long long v39 = *(_OWORD *)v36;
        long long v40 = *(_OWORD *)(v11 - 5);
        *(_OWORD *)(v24 + 36) = *(_OWORD *)((char *)v11 - 28);
        *unint64_t v30 = v39;
        *(_OWORD *)(v24 + 24) = v40;
      }
      else if (!v37)
      {
        *(_DWORD *)unint64_t v30 = *(_DWORD *)v36;
        *(v11 - 8) = v18;
        if (*((_DWORD *)v11 - 2) != v16) {
          goto LABEL_57;
        }
        goto LABEL_65;
      }
      *(v11 - 8) = v18;
      if (*((_DWORD *)v11 - 2) != v16)
      {
LABEL_57:
        if (v16 == 1)
        {
          *((_DWORD *)v11 - 14) = v13;
          long long v43 = v142;
          long long v44 = *(_OWORD *)v143;
          *(_OWORD *)(v11 - 3) = *(_OWORD *)&v143[12];
          *(_OWORD *)((char *)v11 - 36) = v44;
          *(_OWORD *)((char *)v11 - 52) = v43;
        }
        else if (!v16)
        {
          *(_DWORD *)unint64_t v36 = v13;
        }
        *((_DWORD *)v11 - 2) = v16;
LABEL_73:
        sub_4089D4(v10, v24 + 64, (v24 + 64 - v10) >> 6);
        goto LABEL_74;
      }
LABEL_65:
      if (v16 == 1)
      {
        *((_DWORD *)v11 - 14) = v13;
        long long v45 = v142;
        long long v46 = *(_OWORD *)v143;
        *(double *)((char *)v11 - 20) = *(double *)&v143[16];
        *(_OWORD *)((char *)v11 - 36) = v46;
        *(_OWORD *)((char *)v11 - 52) = v45;
      }
      else if (!v16)
      {
        *(_DWORD *)unint64_t v36 = v13;
      }
      goto LABEL_73;
    }
    *(double *)uint64_t v24 = v18;
    if (*(_DWORD *)(v24 + 56) == v16)
    {
      if (v16 == 1)
      {
        *(_DWORD *)(v24 + 8) = v13;
        long long v115 = v142;
        long long v116 = *(_OWORD *)v143;
        *(void *)(v24 + 44) = *(void *)&v143[16];
        *(_OWORD *)(v24 + 28) = v116;
        *(_OWORD *)(v24 + 12) = v115;
      }
      else if (!v16)
      {
        *(_DWORD *)unint64_t v30 = v13;
      }
    }
    else
    {
      if (v16 == 1)
      {
        *(_DWORD *)(v24 + 8) = v13;
        long long v117 = v142;
        long long v118 = *(_OWORD *)v143;
        *(_OWORD *)(v24 + 40) = *(_OWORD *)&v143[12];
        *(_OWORD *)(v24 + 28) = v118;
        *(_OWORD *)(v24 + 12) = v117;
      }
      else if (!v16)
      {
        *(_DWORD *)unint64_t v30 = v13;
        *(_DWORD *)(v24 + 56) = 0;
        goto LABEL_74;
      }
      *(_DWORD *)(v24 + 56) = v16;
    }
LABEL_74:
    uint64_t v11 = v137 - 8;
    v137 -= 8;
    if (v14 > v129) {
      goto LABEL_165;
    }
LABEL_75:
    LODWORD(v13) = v141;
    if (v141 != (v140 - (unsigned char *)v139) >> 3) {
      break;
    }
    if (v14 > *(double *)v139) {
      goto LABEL_165;
    }
LABEL_79:
    int v47 = v148;
    if (!v148)
    {
      uint64_t v54 = LODWORD(v147[0]);
      uint64_t v55 = (unsigned int *)sub_2AB884(*(void *)(a1 + 3872), 6, v147[0], 1);
      if (v56)
      {
        uint64_t v57 = *v55;
        unsigned int v58 = (char *)v55 + v57;
        uint64_t v59 = (unsigned __int16 *)((char *)v55 + v57 - *(int *)((char *)v55 + v57));
        if (*v59 >= 5u)
        {
          uint64_t v60 = v59[2];
          if (v60)
          {
            double v61 = &v58[v60];
            uint64_t v62 = *(unsigned int *)&v58[v60];
            uint64_t v63 = *(unsigned int *)&v61[v62];
            if (v63)
            {
              uint64_t v64 = 0;
              uint64_t v65 = 0;
              uint64_t v66 = 4 * v63;
              uint8x8_t v67 = (char *)v55 + v60 + v57 + v62;
              do
              {
                unint64_t v68 = (unint64_t)&v67[v64
                                           + *(unsigned int *)&v67[v64 + 4]
                                           + *(unsigned __int16 *)&v67[v64
                                                                     + 18
                                                                     + *(unsigned int *)&v67[v64 + 4]
                                                                     - (uint64_t)*(int *)&v67[v64
                                                                                           + 4
                                                                                           + *(unsigned int *)&v67[v64 + 4]]]];
                uint64_t v70 = *(unsigned int *)(v68 + 4);
                unsigned int v69 = *(_DWORD *)(v68 + 8);
                if (v69 >= 0xFFFFFFFE) {
                  uint64_t v71 = 4294967294;
                }
                else {
                  uint64_t v71 = v69;
                }
                long double v72 = exp(3.14159265 - (double)v71 * 6.28318531 / 4294967300.0);
                *(double *)&unint64_t v73 = atan((v72 - 1.0 / v72) * 0.5) * 57.2957795;
                long double v74 = *(double *)&v73 * 0.0174532925;
                LODWORD(v73) = a2[1];
                long double v75 = exp(3.14159265 - (double)v73 * 6.28318531 / 4294967300.0);
                long double v76 = atan((v75 - 1.0 / v75) * 0.5) * 57.2957795 * 0.0174532925;
                v77.i64[0] = v70;
                v77.i64[1] = *a2;
                int64x2_t v78 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v77), v128), v127), v126), v125);
                double v130 = vsubq_f64((float64x2_t)v78, (float64x2_t)vdupq_laneq_s64(v78, 1)).f64[0];
                long double v79 = sin((v74 - v76) * 0.5);
                long double v80 = v79 * v79;
                double v81 = cos(v74);
                long double v82 = v81 * cos(v76);
                long double v83 = sin(0.5 * v130);
                long double v84 = atan2(sqrt(v80 + v82 * (v83 * v83)), sqrt(1.0 - (v80 + v82 * (v83 * v83))));
                double v85 = (v84 + v84) * 6372797.56;
                if (v85 != 1.79769313e308)
                {
                  if (v141 == (v140 - (unsigned char *)v139) >> 3)
                  {
                    if (v85 < *(double *)v139 && v85 < v129) {
                      goto LABEL_124;
                    }
                  }
                  else if (v85 < 1.79769313e308 && v85 < v129)
                  {
LABEL_124:
                    if (sub_29C8())
                    {
                      *(double *)&long long v142 = v85;
                      sub_408754((uint64_t)&v139, (double *)&v142);
                      *(double *)&long long v142 = v85;
                      *((void *)&v142 + 1) = v65 | (v54 << 32);
                      *(void *)double v143 = v70 | (v71 << 32);
                      *(_DWORD *)&v143[8] = 0x7FFFFFFF;
                      *(void *)&v143[16] = -1;
                      *(_DWORD *)&v143[24] = 0;
                      int v144 = 1;
                      sub_C06F58((uint64_t *)&v136, &v142, v85);
                    }
                  }
                }
                ++v65;
                v64 += 4;
              }
              while (v66 != v64);
            }
          }
        }
      }
      uint64_t v88 = 0;
      uint64_t v89 = v136;
      int v90 = 4 * v54;
      unint64_t v12 = v124;
      while (2)
      {
        if (sub_511FC(v54) >= 0x1E)
        {
LABEL_13:
          int v136 = v89;
          uint64_t v11 = v137;
          goto LABEL_14;
        }
        LODWORD(__p[0]) = v88 + v90;
        long long v92 = (unsigned int *)sub_2AB884(*(void *)(a1 + 3872), 6, (int)v88 + v90, 1);
        if (!v93
          || (unint64_t v94 = (int *)((char *)v92 + *v92),
              unint64_t v95 = (unsigned __int16 *)((char *)v94 - *v94),
              LODWORD(v13) = *v95,
              v13 < 0x37)
          || (uint64_t v96 = v95[27]) == 0
          || !*((unsigned char *)v94 + v96))
        {
LABEL_129:
          if (++v88 == 4) {
            goto LABEL_13;
          }
          continue;
        }
        break;
      }
      sub_383CC((unsigned int *)__p, (uint64_t)&v142);
      double v98 = sub_35C04((unsigned int *)&v142, a2, 0, v97);
      LODWORD(v13) = v141;
      if (v141 == (v140 - (unsigned char *)v139) >> 3)
      {
        if (v98 >= *(double *)v139) {
          goto LABEL_129;
        }
      }
      else if (v98 >= 1.79769313e308)
      {
        goto LABEL_129;
      }
      if (v98 >= v129) {
        goto LABEL_129;
      }
      int v99 = (int)__p[0];
      unsigned int v100 = v137;
      if (v137 < v138)
      {
        *uint64_t v137 = v98;
        *((_DWORD *)v100 + 14) = 0;
        uint64_t v91 = (uint64_t)(v100 + 8);
        *((_DWORD *)v100 + 2) = v99;
      }
      else
      {
        uint64_t v101 = ((char *)v137 - (char *)v89) >> 6;
        unint64_t v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 58)
        {
          int v136 = v89;
          sub_2E00();
        }
        uint64_t v103 = (char *)v138 - (char *)v89;
        if (((char *)v138 - (char *)v89) >> 5 > v102) {
          unint64_t v102 = v103 >> 5;
        }
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v104 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v104 = v102;
        }
        if (v104 >> 58)
        {
          int v136 = v89;
          sub_188D718();
        }
        char v105 = (char *)operator new(v104 << 6);
        int v106 = &v105[64 * v101];
        *(double *)int v106 = v98;
        *((_DWORD *)v106 + 14) = 0;
        *((_DWORD *)v106 + 2) = v99;
        if (v100 == v89)
        {
          uint64_t v114 = &v105[64 * v101];
          uint64_t v91 = (uint64_t)(v106 + 64);
          uint64_t v137 = (double *)(v106 + 64);
          uint64_t v138 = (double *)&v105[64 * v104];
          if (v89) {
            goto LABEL_156;
          }
        }
        else
        {
          uint64_t v107 = 0;
          do
          {
            BOOL v110 = &v106[v107 * 8];
            *((double *)v110 - 8) = v100[v107 - 8];
            long long v111 = &v106[v107 * 8 - 56];
            int v112 = &v100[v107 - 7];
            int v113 = LODWORD(v100[v107 - 1]);
            *((_DWORD *)v110 - 2) = v113;
            if (v113 == 1)
            {
              long long v108 = *(_OWORD *)v112;
              long long v109 = *(_OWORD *)&v100[v107 - 3];
              *(_OWORD *)&v106[v107 * 8 - 40] = *(_OWORD *)&v100[v107 - 5];
              *(_OWORD *)&v106[v107 * 8 - 24] = v109;
              *(_OWORD *)long long v111 = v108;
            }
            else if (!v113)
            {
              *(_DWORD *)long long v111 = *(_DWORD *)v112;
            }
            v107 -= 8;
          }
          while (&v100[v107] != v89);
          uint64_t v114 = &v106[v107 * 8];
          uint64_t v91 = (uint64_t)(v106 + 64);
          uint64_t v137 = (double *)(v106 + 64);
          uint64_t v138 = (double *)&v105[64 * v104];
          if (v89) {
LABEL_156:
          }
            operator delete(v89);
        }
        uint64_t v89 = (double *)v114;
        unint64_t v12 = v124;
      }
      uint64_t v137 = (double *)v91;
      sub_4089D4((uint64_t)v89, v91, (v91 - (uint64_t)v89) >> 6);
      goto LABEL_129;
    }
    if (v148 == 1) {
      unint64_t v48 = v147;
    }
    else {
      unint64_t v48 = 0;
    }
    if (v148 != 1 && sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v142);
      sub_188FC78(&v142, (uint64_t)"NN search ignored result_t element!", 35);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v135 < 0) {
        operator delete(__p[0]);
      }
      *(void *)&long long v142 = v122;
      *(void *)&v143[*(void *)(v122 - 24) - 16] = v121;
      if (v146 < 0) {
        operator delete(v145);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    unint64_t v49 = v131;
    if (v131 != v132)
    {
      long long v50 = dword_8;
      if (v47 == 1) {
        long long v50 = (_DWORD *)v147 + 2;
      }
      unsigned int v52 = v50;
      int v51 = *v50;
      LODWORD(v13) = v52[1];
      while (*((_DWORD *)v49 + 3) != v13 || *((_DWORD *)v49 + 2) != v51)
      {
        v49 += 48;
        if (v49 == v132)
        {
          unint64_t v49 = v132;
          break;
        }
      }
    }
    if (v49 == v132) {
      sub_408220(&v131, v48);
    }
LABEL_14:
    uint64_t v10 = (uint64_t)v136;
    if (v136 == v11) {
      goto LABEL_166;
    }
  }
  if (v14 <= 1.79769313e308) {
    goto LABEL_79;
  }
LABEL_165:
  uint64_t v11 = v136;
LABEL_166:
  if (v11)
  {
LABEL_167:
    uint64_t v137 = v11;
    operator delete(v11);
  }
LABEL_168:
  if (v139)
  {
    uint64_t v140 = v139;
    operator delete(v139);
  }
  int v120 = v131;
  double v119 = v132;
  v123[1] = 0;
  v123[2] = 0;
  void *v123 = 0;
  *(void *)&long long v142 = v123;
  if (v120 != v119)
  {
    do
    {
      sub_5E15F4((char ***)&v142, v120);
      v120 += 48;
    }
    while (v120 != v119);
    double v119 = v131;
  }
  if (v119)
  {
    long long v132 = v119;
    operator delete(v119);
  }
}

void sub_10B9A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a50);
  if (a41) {
    operator delete(a41);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_10B9B1C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v9[2] = a3;
  v9[3] = a4;
  uint64_t v8 = 0x7FFFFFFFFFFFFFFELL;
  if (a5 < 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v8 = a5;
  }
  v9[4] = v8;
  char v10 = a6;
  uint64_t v13 = 0;
  double v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  long long v12 = 0u;
  if (*a2 == -1 && a2[1] == -1)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  else
  {
    sub_10B9C10(v9);
    sub_10BA830(v9, a7);
    if (__p)
    {
      long long v20 = __p;
      operator delete(__p);
    }
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v13)
  {
    double v14 = v13;
    operator delete(v13);
  }
  if (v11[1])
  {
    *(void **)&long long v12 = v11[1];
    operator delete(v11[1]);
  }
}

void sub_10B9BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_E7DBA8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10B9C10(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  LODWORD(v172) = 0;
  sub_E7EE60((uint64_t)(a1 + 7), &v172, a1 + 4);
  LODWORD(v170) = 1;
  *(void *)&long long v172 = 0;
  sub_E7EE60(v2, &v170, (uint64_t *)&v172);
  unsigned int v3 = (long long *)a1[7];
  unsigned int v4 = (long long *)a1[8];
  if (v3 != v4)
  {
    uint64_t v5 = a1[11];
    unint64_t v168 = (void **)(a1 + 11);
    char v169 = a1 + 15;
    uint64_t v6 = a1[12];
    unint64_t v7 = a1[3];
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) < v7)
    {
      unsigned int v8 = *(_DWORD *)v3;
      uint64_t v9 = *((void *)v3 + 1);
      uint64_t v10 = (char *)v4 - (char *)v3;
      if ((char *)v4 - (char *)v3 >= 17)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v10 >> 4;
        long long v172 = *v3;
        int64_t v13 = (unint64_t)((v10 >> 4) - 2) >> 1;
        double v14 = v3;
        do
        {
          uint64_t v15 = &v14[v11 + 1];
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v17 = 2 * v11 + 2;
          if (v17 < v12)
          {
            uint64_t v18 = *((void *)v15 + 1);
            uint64_t v19 = *((void *)v15 + 3);
            v15 += v18 > v19;
            if (v18 > v19) {
              uint64_t v16 = v17;
            }
          }
          *double v14 = *v15;
          double v14 = v15;
          uint64_t v11 = v16;
        }
        while (v16 <= v13);
        long long v20 = v4 - 1;
        if (v15 == v20)
        {
          *uint64_t v15 = v172;
        }
        else
        {
          *uint64_t v15 = *v20;
          *long long v20 = v172;
          uint64_t v21 = (char *)v15 - (char *)v3 + 16;
          if (v21 >= 17)
          {
            unint64_t v22 = (((unint64_t)v21 >> 4) - 2) >> 1;
            uint64_t v23 = *((void *)v15 + 1);
            if (*((void *)&v3[v22] + 1) > v23)
            {
              uint64_t v24 = *(void *)v15;
              do
              {
                long long v25 = v15;
                uint64_t v15 = &v3[v22];
                *long long v25 = *v15;
                if (!v22) {
                  break;
                }
                unint64_t v22 = (v22 - 1) >> 1;
              }
              while (*((void *)&v3[v22] + 1) > v23);
              *(void *)uint64_t v15 = v24;
              *((void *)v15 + 1) = v23;
            }
          }
        }
        unsigned int v4 = (long long *)a1[8];
      }
      a1[8] = v4 - 1;
      a1[6] = v9;
      if (v8) {
        sub_10BAE64((uint64_t)a1, v8);
      }
      while (1)
      {
        long long v26 = (char *)a1[19];
        uint64_t v27 = (char *)a1[20];
        if (v26 == v27) {
          break;
        }
        uint64_t v28 = *((void *)v26 + 1);
        if (v28 > a1[6]) {
          break;
        }
        uint64_t v29 = *(void *)v26;
        uint64_t v30 = *((void *)v26 + 2);
        if (v27 - v26 >= 25)
        {
          uint64_t v31 = 0;
          int64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3);
          long long v172 = *(_OWORD *)v26;
          uint64_t v173 = *((void *)v26 + 2);
          int v33 = v26;
          do
          {
            uint64_t v35 = v31 + 1;
            unint64_t v36 = &v33[24 * v31 + 24];
            uint64_t v37 = (2 * v31) | 1;
            uint64_t v38 = 2 * v31 + 2;
            if (v38 < v32)
            {
              uint64_t v39 = *(void *)&v33[24 * v35 + 8];
              uint64_t v40 = *((void *)v36 + 4);
              v36 += 24 * (v39 > v40);
              if (v39 > v40) {
                uint64_t v37 = v38;
              }
            }
            long long v34 = *(_OWORD *)v36;
            *((void *)v33 + 2) = *((void *)v36 + 2);
            *(_OWORD *)int v33 = v34;
            int v33 = v36;
            uint64_t v31 = v37;
          }
          while (v37 <= (uint64_t)((unint64_t)(v32 - 2) >> 1));
          long long v41 = v27 - 24;
          if (v36 == v41)
          {
            long long v50 = v172;
            *((void *)v36 + 2) = v173;
            *(_OWORD *)unint64_t v36 = v50;
          }
          else
          {
            long long v42 = *(_OWORD *)v41;
            *((void *)v36 + 2) = *((void *)v41 + 2);
            *(_OWORD *)unint64_t v36 = v42;
            *(_OWORD *)long long v41 = v172;
            *((void *)v41 + 2) = v173;
            uint64_t v43 = v36 - v26 + 24;
            if (v43 >= 25)
            {
              unint64_t v44 = (v43 / 0x18uLL - 2) >> 1;
              uint64_t v45 = *((void *)v36 + 1);
              if (*(void *)&v26[24 * v44 + 8] > v45)
              {
                uint64_t v46 = *(void *)v36;
                uint64_t v47 = *((void *)v36 + 2);
                do
                {
                  unint64_t v48 = v36;
                  unint64_t v36 = &v26[24 * v44];
                  long long v49 = *(_OWORD *)v36;
                  *((void *)v48 + 2) = *((void *)v36 + 2);
                  *(_OWORD *)unint64_t v48 = v49;
                  if (!v44) {
                    break;
                  }
                  unint64_t v44 = (v44 - 1) >> 1;
                }
                while (*(void *)&v26[24 * v44 + 8] > v45);
                *(void *)unint64_t v36 = v46;
                *((void *)v36 + 1) = v45;
                *((void *)v36 + 2) = v47;
              }
            }
          }
          uint64_t v27 = (char *)a1[20];
        }
        a1[20] = v27 - 24;
        unsigned int v52 = (void *)a1[16];
        unint64_t v51 = a1[17];
        if ((unint64_t)v52 >= v51)
        {
          uint64_t v56 = (void *)*v169;
          unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v52 - *v169) >> 3);
          unint64_t v58 = v57 + 1;
          if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (void)v56) >> 3);
          if (2 * v59 > v58) {
            unint64_t v58 = 2 * v59;
          }
          if (v59 >= 0x555555555555555) {
            unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60 > 0xAAAAAAAAAAAAAAALL) {
LABEL_157:
          }
            sub_188D718();
          uint64_t v61 = 24 * v60;
          uint64_t v62 = (char *)operator new(24 * v60);
          uint64_t v63 = &v62[24 * v57];
          *(void *)uint64_t v63 = v29;
          *((void *)v63 + 1) = v28;
          *((void *)v63 + 2) = v30;
          if (v52 == v56)
          {
            long long v53 = v63 + 24;
            a1[15] = v63;
            a1[16] = v63 + 24;
            a1[17] = &v62[v61];
            if (!v56) {
              goto LABEL_57;
            }
          }
          else
          {
            uint64_t v64 = &v62[24 * v57];
            do
            {
              long long v65 = *(_OWORD *)(v52 - 3);
              uint64_t v66 = v64 - 24;
              *((void *)v64 - 1) = *(v52 - 1);
              *(_OWORD *)(v64 - 24) = v65;
              v52 -= 3;
              v64 -= 24;
            }
            while (v52 != v56);
            long long v53 = v63 + 24;
            a1[15] = v66;
            a1[16] = v63 + 24;
            a1[17] = &v62[v61];
            if (!v56) {
              goto LABEL_57;
            }
          }
          operator delete(v56);
LABEL_57:
          a1[16] = v53;
          uint64_t v54 = a1[15];
          uint64_t v55 = (uint64_t)v53 - v54;
          if ((uint64_t)v53 - v54 >= 25)
          {
LABEL_58:
            unint64_t v67 = (v55 / 0x18uLL - 2) >> 1;
            uint64_t v68 = *(v53 - 1);
            if (*(void *)(v54 + 24 * v67 + 16) > v68)
            {
              unsigned int v69 = v53 - 3;
              long long v172 = *(_OWORD *)(v53 - 3);
              do
              {
                uint64_t v70 = v69;
                unsigned int v69 = (void *)(v54 + 24 * v67);
                long long v71 = *(_OWORD *)v69;
                v70[2] = v69[2];
                *(_OWORD *)uint64_t v70 = v71;
                if (!v67) {
                  break;
                }
                unint64_t v67 = (v67 - 1) >> 1;
              }
              while (*(void *)(v54 + 24 * v67 + 16) > v68);
              *(_OWORD *)unsigned int v69 = v172;
              v69[2] = v68;
            }
          }
        }
        else
        {
          void *v52 = v29;
          v52[1] = v28;
          long long v53 = v52 + 3;
          v52[2] = v30;
          a1[16] = v52 + 3;
          uint64_t v54 = a1[15];
          uint64_t v55 = (uint64_t)v52 - v54 + 24;
          if (v55 >= 25) {
            goto LABEL_58;
          }
        }
      }
      long double v72 = (char *)a1[15];
      unint64_t v73 = (char *)a1[16];
      if (v72 != v73)
      {
        while (1)
        {
          uint64_t v75 = *((void *)v72 + 2);
          if (v75 >= a1[6])
          {
            long double v74 = v73;
            goto LABEL_112;
          }
          uint64_t v77 = *(void *)v72;
          uint64_t v76 = *((void *)v72 + 1);
          if (v73 - v72 >= 25)
          {
            uint64_t v78 = 0;
            int64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 3);
            long long v172 = *(_OWORD *)v72;
            uint64_t v173 = *((void *)v72 + 2);
            long double v80 = v72;
            do
            {
              uint64_t v82 = v78 + 1;
              long double v83 = &v80[24 * v78 + 24];
              uint64_t v84 = (2 * v78) | 1;
              uint64_t v85 = 2 * v78 + 2;
              if (v85 < v79)
              {
                uint64_t v86 = *(void *)&v80[24 * v82 + 16];
                uint64_t v87 = *((void *)v83 + 5);
                v83 += 24 * (v86 > v87);
                if (v86 > v87) {
                  uint64_t v84 = v85;
                }
              }
              long long v81 = *(_OWORD *)v83;
              *((void *)v80 + 2) = *((void *)v83 + 2);
              *(_OWORD *)long double v80 = v81;
              long double v80 = v83;
              uint64_t v78 = v84;
            }
            while (v84 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
            uint64_t v88 = v73 - 24;
            if (v83 == v88)
            {
              long long v95 = v172;
              *((void *)v83 + 2) = v173;
              *(_OWORD *)long double v83 = v95;
            }
            else
            {
              long long v89 = *(_OWORD *)v88;
              *((void *)v83 + 2) = *((void *)v88 + 2);
              *(_OWORD *)long double v83 = v89;
              *(_OWORD *)uint64_t v88 = v172;
              *((void *)v88 + 2) = v173;
              uint64_t v90 = v83 - v72 + 24;
              if (v90 >= 25)
              {
                unint64_t v91 = (v90 / 0x18uLL - 2) >> 1;
                uint64_t v92 = *((void *)v83 + 2);
                if (*(void *)&v72[24 * v91 + 16] > v92)
                {
                  long long v170 = *(_OWORD *)v83;
                  do
                  {
                    uint64_t v93 = v83;
                    long double v83 = &v72[24 * v91];
                    long long v94 = *(_OWORD *)v83;
                    *((void *)v93 + 2) = *((void *)v83 + 2);
                    *(_OWORD *)uint64_t v93 = v94;
                    if (!v91) {
                      break;
                    }
                    unint64_t v91 = (v91 - 1) >> 1;
                  }
                  while (*(void *)&v72[24 * v91 + 16] > v92);
                  *(_OWORD *)long double v83 = v170;
                  *((void *)v83 + 2) = v92;
                }
              }
            }
            unint64_t v73 = (char *)a1[16];
          }
          a1[16] = v73 - 24;
          long double v97 = (char *)a1[12];
          unint64_t v96 = a1[13];
          if ((unint64_t)v97 < v96)
          {
            *(void *)long double v97 = v77;
            *((void *)v97 + 1) = v76;
            double v98 = v97 + 24;
            *((void *)v97 + 2) = v75;
            a1[12] = v97 + 24;
            uint64_t v99 = a1[11];
            uint64_t v100 = (uint64_t)&v97[-v99 + 24];
            if (v100 >= 25) {
              goto LABEL_102;
            }
            goto LABEL_68;
          }
          uint64_t v101 = (char *)*v168;
          unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((v97 - (unsigned char *)*v168) >> 3);
          unint64_t v103 = v102 + 1;
          if (v102 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_158:
          }
            sub_2E00();
          unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (void)v101) >> 3);
          if (2 * v104 > v103) {
            unint64_t v103 = 2 * v104;
          }
          if (v104 >= 0x555555555555555) {
            unint64_t v105 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v105 = v103;
          }
          if (v105 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_157;
          }
          uint64_t v106 = 24 * v105;
          uint64_t v107 = (char *)operator new(24 * v105);
          long long v108 = &v107[24 * v102];
          *(void *)long long v108 = v77;
          *((void *)v108 + 1) = v76;
          *((void *)v108 + 2) = v75;
          if (v97 == v101)
          {
            double v98 = v108 + 24;
            a1[11] = v108;
            a1[12] = v108 + 24;
            a1[13] = &v107[v106];
            if (v101) {
              goto LABEL_100;
            }
          }
          else
          {
            long long v109 = &v107[24 * v102];
            do
            {
              long long v110 = *(_OWORD *)(v97 - 24);
              long long v111 = v109 - 24;
              *((void *)v109 - 1) = *((void *)v97 - 1);
              *(_OWORD *)(v109 - 24) = v110;
              v97 -= 24;
              v109 -= 24;
            }
            while (v97 != v101);
            double v98 = v108 + 24;
            a1[11] = v111;
            a1[12] = v108 + 24;
            a1[13] = &v107[v106];
            if (v101) {
LABEL_100:
            }
              operator delete(v101);
          }
          a1[12] = v98;
          uint64_t v99 = a1[11];
          uint64_t v100 = (uint64_t)v98 - v99;
          if ((uint64_t)v98 - v99 >= 25)
          {
LABEL_102:
            unint64_t v112 = (v100 / 0x18uLL - 2) >> 1;
            uint64_t v113 = *(v98 - 2);
            if (*(void *)(v99 + 24 * v112 + 8) > v113)
            {
              uint64_t v116 = *(v98 - 3);
              long long v115 = v98 - 3;
              uint64_t v114 = v116;
              uint64_t v117 = v115[2];
              do
              {
                long long v118 = v115;
                long long v115 = (void *)(v99 + 24 * v112);
                long long v119 = *(_OWORD *)v115;
                v118[2] = v115[2];
                *(_OWORD *)long long v118 = v119;
                if (!v112) {
                  break;
                }
                unint64_t v112 = (v112 - 1) >> 1;
              }
              while (*(void *)(v99 + 24 * v112 + 8) > v113);
              *long long v115 = v114;
              v115[1] = v113;
              v115[2] = v117;
            }
          }
LABEL_68:
          long double v72 = (char *)a1[15];
          unint64_t v73 = (char *)a1[16];
          long double v74 = v72;
          if (v72 == v73) {
            goto LABEL_112;
          }
        }
      }
      long double v74 = (char *)a1[15];
LABEL_112:
      while (2)
      {
        uint64_t v5 = a1[11];
        uint64_t v6 = a1[12];
        unint64_t v7 = a1[3];
        uint64_t v120 = v74 - v72;
        if (v74 != v72)
        {
          int64_t v121 = 0xAAAAAAAAAAAAAAABLL * (v120 >> 3);
          if (v121 - 0x5555555555555555 * ((v6 - v5) >> 3) >= v7 && *((void *)v72 + 1) < *((void *)v72 + 2))
          {
            long long v122 = *(_OWORD *)v72;
            uint64_t v171 = *((void *)v72 + 2);
            long long v170 = v122;
            if (v120 >= 25)
            {
              uint64_t v123 = 0;
              long long v124 = *(_OWORD *)v72;
              uint64_t v173 = *((void *)v72 + 2);
              long long v172 = v124;
              float64x2_t v125 = v72;
              do
              {
                uint64_t v127 = v123 + 1;
                float64x2_t v128 = &v125[24 * v123 + 24];
                uint64_t v129 = (2 * v123) | 1;
                uint64_t v130 = 2 * v123 + 2;
                if (v130 < v121)
                {
                  uint64_t v131 = *(void *)&v125[24 * v127 + 16];
                  uint64_t v132 = *((void *)v128 + 5);
                  v128 += 24 * (v131 > v132);
                  if (v131 > v132) {
                    uint64_t v129 = v130;
                  }
                }
                long long v126 = *(_OWORD *)v128;
                *((void *)v125 + 2) = *((void *)v128 + 2);
                *(_OWORD *)float64x2_t v125 = v126;
                float64x2_t v125 = v128;
                uint64_t v123 = v129;
              }
              while (v129 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
              uint64_t v133 = v74 - 24;
              if (v128 == v133)
              {
                long long v141 = v172;
                *((void *)v128 + 2) = v173;
                *(_OWORD *)float64x2_t v128 = v141;
              }
              else
              {
                long long v134 = *(_OWORD *)v133;
                *((void *)v128 + 2) = *((void *)v133 + 2);
                *(_OWORD *)float64x2_t v128 = v134;
                long long v135 = v172;
                *((void *)v133 + 2) = v173;
                *(_OWORD *)uint64_t v133 = v135;
                uint64_t v136 = v128 - v72 + 24;
                if (v136 >= 25)
                {
                  unint64_t v137 = (v136 / 0x18uLL - 2) >> 1;
                  uint64_t v138 = *((void *)v128 + 2);
                  if (*(void *)&v72[24 * v137 + 16] > v138)
                  {
                    long long v174 = *(_OWORD *)v128;
                    do
                    {
                      uint64_t v139 = v128;
                      float64x2_t v128 = &v72[24 * v137];
                      long long v140 = *(_OWORD *)v128;
                      *((void *)v139 + 2) = *((void *)v128 + 2);
                      *(_OWORD *)uint64_t v139 = v140;
                      if (!v137) {
                        break;
                      }
                      unint64_t v137 = (v137 - 1) >> 1;
                    }
                    while (*(void *)&v72[24 * v137 + 16] > v138);
                    *(_OWORD *)float64x2_t v128 = v174;
                    *((void *)v128 + 2) = v138;
                  }
                }
              }
              long double v74 = (char *)a1[16];
            }
            a1[16] = v74 - 24;
            uint64_t v142 = sub_10BB250((uint64_t)a1, (unint64_t *)&v170);
            *(void *)&long long v172 = v142;
            *(void *)&long long v174 = v142;
            uint64_t v143 = a1[6];
            if (v143 <= v142)
            {
              if (v143 < v142) {
                sub_E7F5D8((uint64_t)(a1 + 19), &v170, (uint64_t *)&v172, (uint64_t *)&v174);
              }
              else {
                sub_E7F3DC((uint64_t)v169, &v170, (uint64_t *)&v172, (uint64_t *)&v174);
              }
            }
            else
            {
              unint64_t v144 = v142;
              char v146 = (char *)a1[12];
              unint64_t v145 = a1[13];
              if ((unint64_t)v146 < v145)
              {
                *(void *)char v146 = v170;
                *((void *)v146 + 1) = v142;
                *((void *)v146 + 2) = v142;
                int64_t v147 = v146 + 24;
                goto LABEL_148;
              }
              int v148 = (char *)*v168;
              unint64_t v149 = 0xAAAAAAAAAAAAAAABLL * ((v146 - (unsigned char *)*v168) >> 3);
              unint64_t v150 = v149 + 1;
              if (v149 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_158;
              }
              unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - (void)v148) >> 3);
              if (2 * v151 > v150) {
                unint64_t v150 = 2 * v151;
              }
              if (v151 >= 0x555555555555555) {
                unint64_t v152 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v152 = v150;
              }
              if (v152 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_157;
              }
              uint64_t v153 = 24 * v152;
              long long v154 = (char *)operator new(24 * v152);
              long long v155 = &v154[24 * v149];
              *(void *)long long v155 = v170;
              *(int64x2_t *)(v155 + 8) = vdupq_n_s64(v144);
              if (v146 == v148)
              {
                int64_t v147 = v155 + 24;
                a1[11] = v155;
                a1[12] = v155 + 24;
                a1[13] = &v154[v153];
                if (v148) {
                  goto LABEL_147;
                }
              }
              else
              {
                long long v156 = &v154[24 * v149];
                do
                {
                  long long v157 = *(_OWORD *)(v146 - 24);
                  long long v158 = v156 - 24;
                  *((void *)v156 - 1) = *((void *)v146 - 1);
                  *(_OWORD *)(v156 - 24) = v157;
                  v146 -= 24;
                  v156 -= 24;
                }
                while (v146 != v148);
                int64_t v147 = v155 + 24;
                a1[11] = v158;
                a1[12] = v155 + 24;
                a1[13] = &v154[v153];
                if (!v148) {
                  goto LABEL_148;
                }
LABEL_147:
                operator delete(v148);
              }
LABEL_148:
              a1[12] = v147;
              uint64_t v159 = a1[11];
              if ((uint64_t)v147 - v159 >= 25)
              {
                unint64_t v160 = (((unint64_t)v147 - v159) / 0x18 - 2) >> 1;
                uint64_t v161 = *(v147 - 2);
                if (*(void *)(v159 + 24 * v160 + 8) > v161)
                {
                  uint64_t v164 = *(v147 - 3);
                  long long v163 = v147 - 3;
                  uint64_t v162 = v164;
                  uint64_t v165 = v163[2];
                  do
                  {
                    char v166 = v163;
                    long long v163 = (void *)(v159 + 24 * v160);
                    long long v167 = *(_OWORD *)v163;
                    v166[2] = v163[2];
                    *(_OWORD *)char v166 = v167;
                    if (!v160) {
                      break;
                    }
                    unint64_t v160 = (v160 - 1) >> 1;
                  }
                  while (*(void *)(v159 + 24 * v160 + 8) > v161);
                  *long long v163 = v162;
                  v163[1] = v161;
                  v163[2] = v165;
                }
              }
            }
            long double v72 = (char *)a1[15];
            long double v74 = (char *)a1[16];
            continue;
          }
        }
        break;
      }
      unsigned int v3 = (long long *)a1[7];
      unsigned int v4 = (long long *)a1[8];
      if (v3 == v4) {
        return;
      }
    }
  }
}

void sub_10BA830(void *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (long long *)a1[15];
  for (double i = (long long *)a1[16]; v4 != i; double i = (long long *)a1[16])
  {
    long long v6 = *v4;
    uint64_t v73 = *((void *)v4 + 2);
    long long v72 = v6;
    if ((char *)i - (char *)v4 >= 25)
    {
      uint64_t v7 = 0;
      int64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)i - (char *)v4) >> 3);
      long long v75 = *v4;
      uint64_t v76 = *((void *)v4 + 2);
      uint64_t v9 = v4;
      do
      {
        uint64_t v11 = v7 + 1;
        uint64_t v12 = (long long *)((char *)v9 + 24 * v7 + 24);
        uint64_t v13 = (2 * v7) | 1;
        uint64_t v14 = 2 * v7 + 2;
        if (v14 < v8)
        {
          uint64_t v15 = *((void *)v9 + 3 * v11 + 2);
          uint64_t v16 = *((void *)v12 + 5);
          uint64_t v12 = (long long *)((char *)v12 + 24 * (v15 > v16));
          if (v15 > v16) {
            uint64_t v13 = v14;
          }
        }
        long long v10 = *v12;
        *((void *)v9 + 2) = *((void *)v12 + 2);
        *uint64_t v9 = v10;
        uint64_t v9 = v12;
        uint64_t v7 = v13;
      }
      while (v13 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      uint64_t v17 = (long long *)((char *)i - 24);
      if (v12 == v17)
      {
        long long v24 = v75;
        *((void *)v12 + 2) = v76;
        *uint64_t v12 = v24;
      }
      else
      {
        long long v18 = *v17;
        *((void *)v12 + 2) = *((void *)v17 + 2);
        *uint64_t v12 = v18;
        *uint64_t v17 = v75;
        *((void *)v17 + 2) = v76;
        uint64_t v19 = (char *)v12 - (char *)v4 + 24;
        if (v19 >= 25)
        {
          unint64_t v20 = (v19 / 0x18uLL - 2) >> 1;
          uint64_t v21 = *((void *)v12 + 2);
          if (*((void *)v4 + 3 * v20 + 2) > v21)
          {
            long long v74 = *v12;
            do
            {
              unint64_t v22 = v12;
              uint64_t v12 = (long long *)((char *)v4 + 24 * v20);
              long long v23 = *v12;
              *((void *)v22 + 2) = *((void *)v12 + 2);
              *unint64_t v22 = v23;
              if (!v20) {
                break;
              }
              unint64_t v20 = (v20 - 1) >> 1;
            }
            while (*((void *)v4 + 3 * v20 + 2) > v21);
            *uint64_t v12 = v74;
            *((void *)v12 + 2) = v21;
          }
        }
      }
      double i = (long long *)a1[16];
    }
    a1[16] = (char *)i - 24;
    *(void *)&long long v75 = sub_10BB250((uint64_t)a1, (unint64_t *)&v72);
    if ((uint64_t)v75 <= a1[4]) {
      sub_E7F5D8((uint64_t)(a1 + 11), &v72, (uint64_t *)&v75, (uint64_t *)&v75);
    }
    unsigned int v4 = (long long *)a1[15];
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[3])
  {
    uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      long long v26 = (long long *)a1[11];
      uint64_t v27 = (long long *)a1[12];
      if (v26 == v27) {
        break;
      }
      long long v28 = *v26;
      uint64_t v73 = *((void *)v26 + 2);
      long long v72 = v28;
      if ((char *)v27 - (char *)v26 >= 25)
      {
        uint64_t v29 = 0;
        int64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3);
        long long v75 = *v26;
        uint64_t v76 = *((void *)v26 + 2);
        uint64_t v31 = v26;
        do
        {
          uint64_t v33 = v29 + 1;
          long long v34 = (long long *)((char *)v31 + 24 * v29 + 24);
          uint64_t v35 = (2 * v29) | 1;
          uint64_t v36 = 2 * v29 + 2;
          if (v36 < v30)
          {
            uint64_t v37 = *((void *)v31 + 3 * v33 + 1);
            uint64_t v38 = *((void *)v34 + 4);
            long long v34 = (long long *)((char *)v34 + 24 * (v37 > v38));
            if (v37 > v38) {
              uint64_t v35 = v36;
            }
          }
          long long v32 = *v34;
          *((void *)v31 + 2) = *((void *)v34 + 2);
          long long *v31 = v32;
          uint64_t v31 = v34;
          uint64_t v29 = v35;
        }
        while (v35 <= (uint64_t)((unint64_t)(v30 - 2) >> 1));
        uint64_t v39 = (long long *)((char *)v27 - 24);
        if (v34 == v39)
        {
          long long v48 = v75;
          *((void *)v34 + 2) = v76;
          long long *v34 = v48;
        }
        else
        {
          long long v40 = *v39;
          *((void *)v34 + 2) = *((void *)v39 + 2);
          long long *v34 = v40;
          *uint64_t v39 = v75;
          *((void *)v39 + 2) = v76;
          uint64_t v41 = (char *)v34 - (char *)v26 + 24;
          if (v41 >= 25)
          {
            unint64_t v42 = (v41 / 0x18uLL - 2) >> 1;
            uint64_t v43 = *((void *)v34 + 1);
            if (*((void *)v26 + 3 * v42 + 1) > v43)
            {
              uint64_t v44 = *(void *)v34;
              uint64_t v45 = *((void *)v34 + 2);
              do
              {
                uint64_t v46 = v34;
                long long v34 = (long long *)((char *)v26 + 24 * v42);
                long long v47 = *v34;
                *((void *)v46 + 2) = *((void *)v34 + 2);
                long long *v46 = v47;
                if (!v42) {
                  break;
                }
                unint64_t v42 = (v42 - 1) >> 1;
              }
              while (*((void *)v26 + 3 * v42 + 1) > v43);
              *(void *)long long v34 = v44;
              *((void *)v34 + 1) = v43;
              *((void *)v34 + 2) = v45;
            }
          }
        }
        uint64_t v27 = (long long *)a1[12];
      }
      a1[12] = (char *)v27 - 24;
      if (*((void *)&v72 + 1) == v73)
      {
        sub_29AC28((uint64_t)a2, &v72, (uint64_t *)&v72 + 1);
        uint64_t v25 = v73;
      }
      else
      {
        *(void *)&long long v75 = sub_10BB250((uint64_t)a1, (unint64_t *)&v72);
        sub_E7F5D8((uint64_t)(a1 + 11), &v72, (uint64_t *)&v75, (uint64_t *)&v75);
      }
    }
    while (a1[3] > (unint64_t)((uint64_t)(a2[1] - *a2) >> 4));
  }
  else
  {
    uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
  long long v49 = (long long *)a1[11];
  for (double j = (long long *)a1[12]; v49 != j; double j = (long long *)a1[12])
  {
    if (*((void *)v49 + 1) != v25) {
      break;
    }
    long long v51 = *v49;
    uint64_t v73 = *((void *)v49 + 2);
    long long v72 = v51;
    if ((char *)j - (char *)v49 >= 25)
    {
      uint64_t v52 = 0;
      int64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)j - (char *)v49) >> 3);
      long long v75 = *v49;
      uint64_t v76 = *((void *)v49 + 2);
      uint64_t v54 = v49;
      do
      {
        uint64_t v56 = v52 + 1;
        unint64_t v57 = (long long *)((char *)v54 + 24 * v52 + 24);
        uint64_t v58 = (2 * v52) | 1;
        uint64_t v59 = 2 * v52 + 2;
        if (v59 < v53)
        {
          uint64_t v60 = *((void *)v54 + 3 * v56 + 1);
          uint64_t v61 = *((void *)v57 + 4);
          unint64_t v57 = (long long *)((char *)v57 + 24 * (v60 > v61));
          if (v60 > v61) {
            uint64_t v58 = v59;
          }
        }
        long long v55 = *v57;
        *((void *)v54 + 2) = *((void *)v57 + 2);
        long long *v54 = v55;
        uint64_t v54 = v57;
        uint64_t v52 = v58;
      }
      while (v58 <= (uint64_t)((unint64_t)(v53 - 2) >> 1));
      uint64_t v62 = (long long *)((char *)j - 24);
      if (v57 == v62)
      {
        long long v71 = v75;
        *((void *)v57 + 2) = v76;
        *unint64_t v57 = v71;
      }
      else
      {
        long long v63 = *v62;
        *((void *)v57 + 2) = *((void *)v62 + 2);
        *unint64_t v57 = v63;
        *uint64_t v62 = v75;
        *((void *)v62 + 2) = v76;
        uint64_t v64 = (char *)v57 - (char *)v49 + 24;
        if (v64 >= 25)
        {
          unint64_t v65 = (v64 / 0x18uLL - 2) >> 1;
          uint64_t v66 = *((void *)v57 + 1);
          if (*((void *)v49 + 3 * v65 + 1) > v66)
          {
            uint64_t v67 = *(void *)v57;
            uint64_t v68 = *((void *)v57 + 2);
            do
            {
              unsigned int v69 = v57;
              unint64_t v57 = (long long *)((char *)v49 + 24 * v65);
              long long v70 = *v57;
              *((void *)v69 + 2) = *((void *)v57 + 2);
              *unsigned int v69 = v70;
              if (!v65) {
                break;
              }
              unint64_t v65 = (v65 - 1) >> 1;
            }
            while (*((void *)v49 + 3 * v65 + 1) > v66);
            *(void *)unint64_t v57 = v67;
            *((void *)v57 + 1) = v66;
            *((void *)v57 + 2) = v68;
          }
        }
      }
      double j = (long long *)a1[12];
    }
    a1[12] = (char *)j - 24;
    if (*((void *)&v72 + 1) == v73)
    {
      sub_29AC28((uint64_t)a2, &v72, (uint64_t *)&v72 + 1);
    }
    else
    {
      *(void *)&long long v75 = sub_10BB250((uint64_t)a1, (unint64_t *)&v72);
      sub_E7F5D8((uint64_t)(a1 + 11), &v72, (uint64_t *)&v75, (uint64_t *)&v75);
    }
    long long v49 = (long long *)a1[11];
  }
}

void sub_10BAE3C(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10BAE64(uint64_t a1, unsigned int a2)
{
  if (sub_511FC(a2) <= 0x1D)
  {
    unsigned int v4 = sub_511FC(a2);
    unsigned int v5 = sub_511FC(a2);
    if (v4 <= 0x1D)
    {
      unsigned int v6 = v4 >> 1;
      if (v5 >> 1 <= v6)
      {
        unsigned int v7 = sub_511FC(a2);
        unsigned int v8 = 2 * (v6 - (v7 >> 1)) + 2;
        uint64_t v9 = (1 << (2 * (v6 - (v7 >> 1)) + 2));
        long long v10 = (int32x4_t *)operator new(4 * v9);
        bzero(v10, 4 * v9);
        unsigned int v11 = a2 << v8;
        if (v8 < 3) {
          goto LABEL_8;
        }
        int32x4_t v12 = vdupq_n_s32(v11);
        int32x4_t v13 = vdupq_n_s32(v11 + 4);
        int32x4_t v14 = (int32x4_t)xmmword_20B5E90;
        uint64_t v15 = v10 + 1;
        v16.i64[0] = 0x800000008;
        v16.i64[1] = 0x800000008;
        uint64_t v17 = v9 & 0x55555550;
        do
        {
          v15[-1] = vaddq_s32(v12, v14);
          *uint64_t v15 = vaddq_s32(v13, v14);
          int32x4_t v14 = vaddq_s32(v14, v16);
          v15 += 2;
          v17 -= 8;
        }
        while (v17);
        if ((v9 & 0x55555550) == 0)
        {
LABEL_8:
          long long v18 = v10;
          int v19 = v9;
          do
          {
            v18->i32[0] = v11;
            long long v18 = (int32x4_t *)((char *)v18 + 4);
            ++v11;
            --v19;
          }
          while (v19);
        }
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = sub_B37630(*(void *)a1, v10->u32[v20], 1);
          if (!v21) {
            goto LABEL_11;
          }
          unint64_t v22 = &v21[-*(int *)v21];
          if (*(unsigned __int16 *)v22 < 7u || !*((_WORD *)v22 + 3)) {
            goto LABEL_11;
          }
          sub_383CC(&v10->u32[v20], (uint64_t)v41);
          double v24 = sub_35C04((unsigned int *)v41, *(unsigned int **)(a1 + 8), *(unsigned __int8 *)(a1 + 40), v23) * 100.0;
          if (v24 >= 0.0)
          {
            double v25 = v24;
            if (v24 >= 4.50359963e15) {
              goto LABEL_23;
            }
            uint64_t v26 = (uint64_t)(v24 + v24) + 1;
          }
          else
          {
            double v25 = v24;
            if (v24 <= -4.50359963e15) {
              goto LABEL_23;
            }
            uint64_t v26 = (uint64_t)(v24 + v24);
            if (v26 >= 1) {
              --v26;
            }
          }
          double v25 = (double)(v26 >> 1);
LABEL_23:
          if (v25 >= 9.22337204e18)
          {
            uint64_t v42 = 0x7FFFFFFFFFFFFFFELL;
            if (*(void *)(a1 + 32) != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a1 + 32) != 0x7FFFFFFFFFFFFFFELL) {
              goto LABEL_11;
            }
LABEL_36:
            sub_E7EE60(a1 + 56, &v10->i32[v20], &v42);
            goto LABEL_11;
          }
          if (v24 >= 0.0)
          {
            if (v24 >= 4.50359963e15) {
              goto LABEL_35;
            }
            uint64_t v27 = (uint64_t)(v24 + v24) + 1;
          }
          else
          {
            if (v24 <= -4.50359963e15) {
              goto LABEL_35;
            }
            uint64_t v27 = (uint64_t)(v24 + v24);
            if (v27 >= 1) {
              --v27;
            }
          }
          double v24 = (double)(v27 >> 1);
LABEL_35:
          uint64_t v42 = (uint64_t)v24;
          if ((uint64_t)v24 <= *(void *)(a1 + 32)) {
            goto LABEL_36;
          }
LABEL_11:
          if (v9 == ++v20)
          {
            operator delete(v10);
            break;
          }
        }
      }
    }
  }
  long long v28 = sub_B37630(*(void *)a1, a2, 1);
  if (v28)
  {
    uint64_t v29 = &v28[-*(int *)v28];
    if (*(unsigned __int16 *)v29 >= 7u)
    {
      uint64_t v30 = *((unsigned __int16 *)v29 + 3);
      if (v30)
      {
        uint64_t v31 = &v28[v30 + *(unsigned int *)&v28[v30]];
        long long v32 = &v31[-*(int *)v31];
        if (*(unsigned __int16 *)v32 >= 5u)
        {
          uint64_t v33 = *((unsigned __int16 *)v32 + 2);
          if (v33)
          {
            int v34 = *(_DWORD *)&v31[v33 + *(unsigned int *)&v31[v33]];
            if (v34)
            {
              for (unsigned int i = 0; i != v34; ++i)
              {
                while (1)
                {
                  while (1)
                  {
                    unint64_t v40 = __PAIR64__(i, a2);
                    sub_10BB424(*(void *)a1, __PAIR64__(i, a2), (uint64_t)v41);
                    uint64_t v37 = sub_E7F998(a1, (unsigned int *)v41, v36);
                    v41[0] = v37;
                    uint64_t v42 = v38;
                    uint64_t v39 = *(void *)(a1 + 48);
                    if (v39 <= v38) {
                      break;
                    }
                    sub_E7F5D8(a1 + 88, &v40, v41, &v42);
                    if (v34 == ++i) {
                      return;
                    }
                  }
                  if (v39 >= v37) {
                    break;
                  }
                  sub_E7F5D8(a1 + 152, &v40, v41, &v42);
                  if (v34 == ++i) {
                    return;
                  }
                }
                sub_E7F3DC(a1 + 120, &v40, v41, &v42);
              }
            }
          }
        }
      }
    }
  }
}

void sub_10BB214(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10BB228(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10BB23C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10BB250(uint64_t a1, unint64_t *a2)
{
  sub_10BB7B4(*(void *)a1, *a2, &__p);
  sub_E7C844((uint64_t *)&__p, *(unsigned int **)(a1 + 8), *(unsigned __int8 *)(a1 + 40), (uint64_t)v20);
  double v3 = v20[0] * 100.0;
  if (v20[0] * 100.0 >= 0.0)
  {
    double v4 = v20[0] * 100.0;
    if (v3 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    double v4 = v20[0] * 100.0;
    if (v3 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3);
    if (v5 >= 1) {
      --v5;
    }
  }
  double v4 = (double)(v5 >> 1);
LABEL_9:
  if (v4 < 9.22337204e18)
  {
    if (v3 >= 0.0)
    {
      if (v3 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v6 = (uint64_t)(v3 + v3) + 1;
    }
    else
    {
      if (v3 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v6 = (uint64_t)(v3 + v3);
      if (v6 >= 1) {
        --v6;
      }
    }
    double v3 = (double)(v6 >> 1);
LABEL_20:
    uint64_t v7 = (uint64_t)v3;
    unsigned int v8 = (void **)__p;
    if (!__p) {
      return v7;
    }
    goto LABEL_21;
  }
  uint64_t v7 = 0x7FFFFFFFFFFFFFFELL;
  unsigned int v8 = (void **)__p;
  if (!__p) {
    return v7;
  }
LABEL_21:
  uint64_t v9 = v22;
  long long v10 = v8;
  if (v22 != v8)
  {
    unsigned int v11 = v22;
    do
    {
      int32x4_t v14 = (char *)*(v11 - 3);
      v11 -= 3;
      int32x4_t v13 = v14;
      if (v14)
      {
        uint64_t v15 = (char *)*(v9 - 2);
        int32x4_t v12 = v13;
        if (v15 != v13)
        {
          int32x4_t v16 = (char *)*(v9 - 2);
          do
          {
            long long v18 = (void *)*((void *)v16 - 3);
            v16 -= 24;
            uint64_t v17 = v18;
            if (v18)
            {
              *((void *)v15 - 2) = v17;
              operator delete(v17);
            }
            uint64_t v15 = v16;
          }
          while (v16 != v13);
          int32x4_t v12 = *v11;
        }
        *(v9 - 2) = v13;
        operator delete(v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != v8);
    long long v10 = __p;
  }
  unint64_t v22 = v8;
  operator delete(v10);
  return v7;
}

void sub_10BB410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_4CBF8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10BB424@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v26 = a2;
  uint64_t v5 = sub_B37630(a1, a2, 1);
  if (!v5
    || (uint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 7u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 3)) == 0
    || (v8 = &v5[v7 + *(unsigned int *)&v5[v7]], uint64_t v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (long long v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_10BB648((unsigned int *)&v26, &v22);
    uint64_t v17 = std::string::insert(&v22, 0, "Referenced polygon ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = std::string::append(&v23, " does not exist.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v19->__r_.__value_.__r.__words[2];
    long long v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = (void *)sub_2F404((uint64_t)exception, &v24);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = (uint64_t)&v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 6]];
  LODWORD(v13) = *(_DWORD *)(v12 + 4);
  if (v13 >= 0xFFFFFFFE) {
    uint64_t v13 = 4294967294;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)&long long v24 = *(unsigned int *)v12 | (unint64_t)(v13 << 32);
  DWORD2(v24) = 0x7FFFFFFF;
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  LODWORD(v12) = *(_DWORD *)(v12 + 12);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  v23.__r_.__value_.__r.__words[0] = v14 | (v12 << 32);
  LODWORD(v23.__r_.__value_.__r.__words[1]) = 0x7FFFFFFF;
  return sub_3392C(a3, (unsigned int *)&v24, (unsigned int *)&v23);
}

void sub_10BB5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_10BB648(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  double v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unsigned int v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_10BB740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_10BB7B4(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a2;
  long long v5 = sub_B37630(a1, a2, 1);
  if (!v5
    || (uint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 7u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 3)) == 0
    || (v8 = &v5[v7 + *(unsigned int *)&v5[v7]], uint64_t v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (std::string v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_10BB648((unsigned int *)&v24, &v20);
    uint64_t v15 = std::string::insert(&v20, 0, "Referenced polygon ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    uint64_t v17 = std::string::append(&v21, " does not exist.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
    long long v22 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  std::string v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
  uint64_t v13 = (int *)&v12[*(unsigned int *)v12];

  sub_2A9A54(v13, a3);
}

void sub_10BB92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_10BB9AC(uint64_t a1, unint64_t a2)
{
  unint64_t v26 = a2;
  double v3 = sub_B37630(a1, a2, 1);
  if (!v3
    || (double v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 7u)
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 3)) == 0
    || (v6 = &v3[v5 + *(unsigned int *)&v3[v5]], uint64_t v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
    || !*((_WORD *)v7 + 2)
    || (unsigned int v8 = &v6[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 2)]],
        *(_DWORD *)v8 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v24);
    int v19 = std::string::insert(&v24, 0, "Referenced polygon ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::string v21 = std::string::append(&v25, " does not exist.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v28 = v21->__r_.__value_.__r.__words[2];
    long long v27 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v23 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  uint64_t v9 = &v8[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v8[4 * HIDWORD(a2) + 4]];
  std::string v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 9u) {
    return 0;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 4);
  if (!v11) {
    return 0;
  }
  double result = 0;
  uint64_t v13 = (unsigned int *)&v9[v11 + *(unsigned int *)&v9[v11]];
  unsigned int v16 = *v13;
  uint64_t v15 = v13 + 1;
  uint64_t v14 = v16;
  *((void *)&v27 + 1) = v16;
  uint64_t v28 = 0xF424000000040;
  int v29 = 257;
  *(void *)&long long v27 = v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (v16 < 0xC) {
    return result;
  }
  unint64_t v17 = *v15;
  if ((int)v17 < 1) {
    return 0;
  }
  if (v14 - 1 >= v17)
  {
    if (sub_3E2ECC((int *)((char *)v15 + v17), (uint64_t *)&v27)) {
      return (char *)v15 + *v15;
    }
    return 0;
  }
  return 0;
}

void sub_10BBBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10BBC30(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v61.__r_.__value_.__l.__data_) = a2;
  LODWORD(v60.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v62 = &v60;
  *((void *)&v62 + 1) = &v61;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 592) == a2)
  {
    unsigned int v12 = 24;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 616) == a2)
  {
    unsigned int v12 = 25;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 640) == a2)
  {
    unsigned int v12 = 26;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 664) == a2)
  {
    unsigned int v12 = 27;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    uint64_t v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_2A54B4((int **)&v62);
    long long v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
    return 0;
  }
  unint64_t v20 = *(void *)(a1 + 648);
  unint64_t v21 = *(void *)(a1 + 624);
  if (*(void *)(a1 + 600) >= v9)
  {
    int v22 = 0;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    int v22 = 24;
  }
  BOOL v23 = v21 >= v9;
  if (v21 < v9) {
    unint64_t v9 = *(void *)(a1 + 624);
  }
  int v24 = 25;
  if (v23) {
    int v24 = v22;
  }
  if (v20 >= v9) {
    unint64_t v25 = v9;
  }
  else {
    unint64_t v25 = *(void *)(a1 + 648);
  }
  unint64_t v26 = *(void *)(a1 + 672);
  if (v20 >= v9) {
    int v27 = v24;
  }
  else {
    int v27 = 26;
  }
  uint64_t v14 = (unsigned int *)sub_2AB884(v10, 6, a2, 1);
  unsigned int v28 = 27;
  if (v26 >= v25) {
    unsigned int v28 = v27;
  }
  uint64_t v29 = v11 + 24 * v28;
  *(_DWORD *)uint64_t v29 = v61.__r_.__value_.__l.__data_;
  *(void *)(v29 + 8) = *(void *)(a1 + 3856);
  *(void *)(v29 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  uint64_t v15 = (int *)((char *)v14 + *v14);
  unsigned int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x1Bu)
  {
    long long v18 = 0;
    if (a3 != 1) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v17 = v16[13];
    if (v17)
    {
      long long v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
      if (*v18 > v8) {
        return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
      }
    }
    else
    {
      long long v18 = 0;
    }
    if (a3 != 1)
    {
LABEL_19:
      if (!a3)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        uint64_t v31 = a4;
        uint64_t v32 = (uint64_t)exception;
        sub_5E5C(&v55, v31);
        uint64_t v33 = std::string::insert(&v55, 0, "Failed to acquire entity \"");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        uint64_t v35 = std::string::append(&v56, "\" in quad node ");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v54, v6);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v54;
        }
        else {
          uint64_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        uint64_t v39 = std::string::append(&v57, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = std::string::append(&v58, " at position ");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v53, v8);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v43 = &v53;
        }
        else {
          uint64_t v43 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v53.__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v59, (const std::string::value_type *)v43, v44);
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        long long v47 = std::string::append(&v60, " on layer ");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        long long v49 = sub_736EC(6u);
        long long v50 = std::string::append(&v61, v49);
        long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        std::string::size_type v63 = v50->__r_.__value_.__r.__words[2];
        long long v62 = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        uint64_t v52 = (void *)sub_2F404(v32, &v62);
      }
      return (uint64_t)&v18[v8 + 1] + v18[v8 + 1];
    }
  }
  return 0;
}

void sub_10BBFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 137) < 0)
  {
    operator delete(*(void **)(v54 - 160));
    if ((*(char *)(v54 - 169) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*(char *)(v54 - 169) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v54 - 192));
  if ((a15 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a10);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
LABEL_20:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_21:
  }
    _Unwind_Resume(a1);
LABEL_12:
  operator delete(__p);
  goto LABEL_21;
}

uint64_t *sub_10BC184(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unsigned int v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  int v19 = operator new(0x18uLL);
  *int v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    BOOL v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *int v19 = *v23;
LABEL_69:
      *BOOL v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      BOOL v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *int v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_10BC4D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10BC4EC()
{
  unk_25FE1E7 = 16641;
  word_25FE1D0 = 65;
  byte_25FE1FF = 1;
  byte_25FE1E9 = 0;
}

uint64_t sub_10BC514(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  double v4 = (void **)*a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  do
  {
    uint64_t v6 = a1 + v5;
    *(_DWORD *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 48) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 56) = 0;
    v5 += 48;
  }
  while (v5 != 3840);
  *(_OWORD *)(a1 + 3864) = 0u;
  unint64_t v7 = (void **)*a2;
  *(_DWORD *)(a1 + 3880) = -1;
  if (v7) {
    LOBYTE(v7) = sub_2ABCE4(v7);
  }
  *(unsigned char *)(a1 + 3884) = (_BYTE)v7;
  return a1;
}

void sub_10BC59C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    sub_20B1D34(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_10BC5B4()
{
  double result = (uint64_t **)__chkstk_darwin();
  if (*v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = result;
    double v4 = (std::__shared_weak_count *)(*result)[1];
    uint64_t v95 = **result;
    unint64_t v96 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_327C18((uint64_t)v97, &v95);
    uint64_t v5 = v96;
    if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v94[0] = &unk_20E1710;
    memset(&v94[1], 0, 24);
    v94[5] = 0;
    v94[6] = &unk_20E1710;
    v94[11] = 0;
    v94[12] = &unk_20E1710;
    memset(&v94[7], 0, 24);
    memset(&v94[13], 0, 24);
    v94[17] = 0;
    v94[18] = &unk_20E1710;
    memset(&v94[19], 0, 24);
    v94[23] = 0;
    v94[24] = &unk_20E1710;
    memset(&v94[25], 0, 24);
    v94[29] = 0;
    v94[30] = &unk_20E1710;
    v94[35] = 0;
    v94[36] = &unk_20E1710;
    memset(&v94[31], 0, 24);
    memset(&v94[37], 0, 24);
    v94[41] = 0;
    v94[42] = &unk_20E1710;
    memset(&v94[43], 0, 24);
    v94[47] = 0;
    v94[48] = &unk_20E1710;
    memset(&v94[49], 0, 24);
    v94[53] = 0;
    v94[54] = &unk_20E1710;
    memset(&v94[55], 0, 24);
    v94[59] = 0;
    v94[65] = 0;
    v94[60] = &unk_20E1710;
    memset(&v94[61], 0, 24);
    v94[66] = &unk_20E1710;
    v94[71] = 0;
    memset(&v94[67], 0, 24);
    v94[72] = &unk_20E1710;
    v94[77] = 0;
    memset(&v94[73], 0, 24);
    v94[78] = &unk_20E1710;
    v94[83] = 0;
    memset(&v94[79], 0, 24);
    v94[84] = &unk_20E1710;
    v94[89] = 0;
    memset(&v94[85], 0, 24);
    v94[90] = &unk_20E1710;
    v94[95] = 0;
    memset(&v94[91], 0, 24);
    uint64_t v6 = *v2;
    uint64_t v7 = *(void *)(*v2 + 8);
    uint64_t v8 = *(void *)(*v2 + 16);
    if (v7 != v8)
    {
      int v93 = *(_DWORD *)(v6 + 504);
      uint64_t v9 = (uint64_t)(v3 + 1);
      uint64_t v85 = *(void *)(*v2 + 16);
      uint64_t v86 = v3;
      uint64_t v90 = (uint64_t)(v3 + 1);
      do
      {
        if (*(uint64_t *)v7 >= 0) {
          uint64_t v10 = *(void *)v7;
        }
        else {
          uint64_t v10 = -*(void *)v7;
        }
        unint64_t v11 = sub_2FD4C0((uint64_t)v97, v10);
        if (v11) {
          BOOL v12 = v11 > 0xFFFFFFFEFFFFFFFFLL;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = v11 & 0xFFFFFFFFFFFFLL;
        }
        if (!v13) {
          goto LABEL_9;
        }
        unsigned int v14 = *(_DWORD *)(v7 + 8);
        uint64_t v101 = 0;
        unint64_t v102 = 0;
        uint64_t v103 = 0;
        LODWORD(v15) = *((_DWORD *)v3 + 970);
        if (v15 == -1)
        {
          uint64_t v16 = sub_F93238(v9, 1u, 1);
          if (!v16) {
            goto LABEL_32;
          }
          uint64_t v17 = &v16[-*(int *)v16];
          unsigned int v18 = *(unsigned __int16 *)v17;
          if (v18 < 0xB)
          {
            if (v18 >= 9)
            {
LABEL_28:
              uint64_t v21 = *((unsigned __int16 *)v17 + 4);
              if (v21)
              {
                uint64_t v22 = sub_F930D4((unsigned int *)&v16[v21 + *(unsigned int *)&v16[v21]], 0);
                BOOL v23 = (unsigned __int16 *)(v22 - *(int *)v22);
                if (*v23 < 5u)
                {
                  LODWORD(v15) = 0;
                }
                else
                {
                  uint64_t v15 = (char *)v23[2];
                  if (v15) {
                    LODWORD(v15) = v15[v22];
                  }
                }
                *((_DWORD *)v3 + 970) = v15;
                goto LABEL_36;
              }
            }
LABEL_32:
            LODWORD(v15) = 1;
            goto LABEL_36;
          }
          if (!*((_WORD *)v17 + 5)) {
            goto LABEL_28;
          }
          uint64_t v15 = &v16[*((unsigned __int16 *)v17 + 5) + *(unsigned int *)&v16[*((unsigned __int16 *)v17 + 5)]];
          int v19 = &v15[-*(int *)v15];
          if (*(unsigned __int16 *)v19 >= 5u && (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) != 0) {
            LODWORD(v15) = v15[v20];
          }
          else {
            LODWORD(v15) = 0;
          }
        }
LABEL_36:
        uint64_t v91 = v13;
        int v24 = 0;
        uint64_t v25 = (v15 - 1);
        double v98 = 0;
        uint64_t v99 = 0;
        uint64_t v100 = 0;
        do
        {
          if ((v14 >> v24))
          {
            v104[0] = v24;
            sub_32B764((unint64_t *)&v98, v99, v104);
          }
          ++v24;
        }
        while (v24 != 32);
        unint64_t v26 = v98;
        uint64_t v88 = v99;
        if (v98 != v99)
        {
          uint64_t v87 = v7;
          if (v25)
          {
            uint64_t v27 = v91;
            while (1)
            {
              uint64_t v28 = 0;
              long long v89 = v26;
              uint64_t v29 = *v26;
              LOWORD(v104[0]) = 1;
              do
              {
                sub_10BD074(v9, v27, *((unsigned __int8 *)v104 + v28), &v101);
                uint64_t v92 = v28;
                uint64_t v30 = 0;
                do
                {
                  uint64_t v31 = 0;
                  ++v30;
                  unint64_t v32 = *(void *)&v101[8 * v30];
                  unint64_t v33 = (HIDWORD(v32)
                       + 2654435769
                       + ((unint64_t)v32 << 6)
                       + ((unint64_t)v32 >> 2)) ^ v32;
                  unint64_t v34 = (v29 + 2654435769 + (v33 << 6) + (v33 >> 2)) ^ v33;
                  uint64_t v35 = (v34 << 6) + 2654435769u + (v34 >> 2);
                  unint64_t v36 = v35 ^ v34;
                  unint64_t v37 = (v35 ^ ~v34) + ((v35 ^ v34) << 21);
                  unint64_t v38 = 21 * ((265 * (v37 ^ (v37 >> 24))) ^ ((265 * (v37 ^ (v37 >> 24))) >> 14));
                  unint64_t v39 = 2147483649u * (v38 ^ (v38 >> 28));
                  long long v40 = &v94[6
                           * (((((unsigned __int16)(v38 ^ (v38 >> 28)) >> 8) ^ ((-2147483647
                                                                                                * (v38 ^ (v38 >> 28))) >> 16)) ^ ((-2147483647 * (v38 ^ (v38 >> 28))) >> 24)) & 0xF)];
                  unint64_t v41 = v39 >> 7;
                  uint64_t v42 = v40[3];
                  uint64_t v43 = *v40;
                  uint64_t v44 = 0x101010101010101 * (v39 & 0x7F);
                  for (unint64_t i = v39 >> 7; ; unint64_t i = v31 + v46)
                  {
                    unint64_t v46 = i & v42;
                    uint64_t v47 = *(void *)(v43 + v46);
                    unint64_t v48 = ((v47 ^ v44) - 0x101010101010101) & ~(v47 ^ v44) & 0x8080808080808080;
                    if (v48) {
                      break;
                    }
LABEL_53:
                    if ((v47 & (~v47 << 6) & 0x8080808080808080) != 0) {
                      goto LABEL_56;
                    }
                    v31 += 8;
                  }
                  while (1)
                  {
                    unint64_t v49 = (v46 + (__clz(__rbit64(v48)) >> 3)) & v42;
                    uint64_t v50 = v40[1] + 16 * v49;
                    if (*(_DWORD *)v50 == v32
                      && *(void *)(v50 + 4) == __PAIR64__(v29, HIDWORD(v32))
                      && !*(unsigned char *)(v50 + 12))
                    {
                      break;
                    }
                    v48 &= v48 - 1;
                    if (!v48) {
                      goto LABEL_53;
                    }
                  }
                  if (v42 != v49) {
                    continue;
                  }
LABEL_56:
                  for (j = 0; ; unint64_t v41 = j + v52)
                  {
                    unint64_t v52 = v41 & v42;
                    uint64_t v53 = *(void *)(v43 + v52);
                    unint64_t v54 = ((v53 ^ v44) - 0x101010101010101) & ~(v53 ^ v44) & 0x8080808080808080;
                    if (v54) {
                      break;
                    }
LABEL_62:
                    if ((v53 & (~v53 << 6) & 0x8080808080808080) != 0)
                    {
                      unint64_t v56 = v40[1] + 16 * sub_10BD564(v40, v39);
                      *(void *)unint64_t v56 = v32;
                      *(_DWORD *)(v56 + 8) = v29;
                      *(unsigned char *)(v56 + 12) = 0;
                      goto LABEL_65;
                    }
                    j += 8;
                  }
                  while (1)
                  {
                    unint64_t v55 = v40[1] + 16 * ((v52 + (__clz(__rbit64(v54)) >> 3)) & v42);
                    if (*(_DWORD *)v55 == v32
                      && *(void *)(v55 + 4) == __PAIR64__(v29, HIDWORD(v32))
                      && !*(unsigned char *)(v55 + 12))
                    {
                      break;
                    }
                    v54 &= v54 - 1;
                    if (!v54) {
                      goto LABEL_62;
                    }
                  }
LABEL_65:
                  uint64_t v57 = 0;
                  uint64_t v58 = *(void *)(v6 + 656) - 1;
                  uint64_t v59 = -1;
                  for (unint64_t k = v36; ; unint64_t k = v57 + v61)
                  {
                    uint64_t v61 = k & v58;
                    uint64_t v62 = *(void *)(v6 + 688) + 20 * (k & v58);
                    int v63 = *(_DWORD *)v62;
                    if (*(_DWORD *)(v6 + 664) == *(_DWORD *)v62
                      && *(_DWORD *)(v6 + 668) == *(_DWORD *)(v62 + 4)
                      && *(_DWORD *)(v6 + 672) == *(_DWORD *)(v62 + 8)
                      && *(unsigned __int8 *)(v6 + 676) == *(unsigned __int8 *)(v62 + 12))
                    {
                      if (v59 == -1) {
                        uint64_t v64 = v61;
                      }
                      else {
                        uint64_t v64 = v59;
                      }
                      goto LABEL_86;
                    }
                    if (!*(void *)(v6 + 640)
                      || *(_DWORD *)(v6 + 624) != v63
                      || *(_DWORD *)(v6 + 628) != *(_DWORD *)(v62 + 4)
                      || *(_DWORD *)(v6 + 632) != *(_DWORD *)(v62 + 8)
                      || *(unsigned __int8 *)(v6 + 636) != *(unsigned __int8 *)(v62 + 12))
                    {
                      break;
                    }
                    if (v59 == -1) {
                      uint64_t v59 = v61;
                    }
LABEL_68:
                    ++v57;
                  }
                  if (v63 != v32
                    || __PAIR64__(v29, HIDWORD(v32)) != *(void *)(v62 + 4)
                    || *(unsigned char *)(v62 + 12))
                  {
                    goto LABEL_68;
                  }
                  if (v61 != -1) {
                    goto LABEL_127;
                  }
                  uint64_t v64 = -1;
LABEL_86:
                  if (!sub_10BDB60(v6 + 592, 1))
                  {
                    uint64_t v76 = *(void *)(v6 + 648);
                    uint64_t v77 = *(void *)(v6 + 640);
                    if ((unint64_t)(v76 - v77) < 0xCCCCCCCCCCCCCCCLL)
                    {
                      uint64_t v78 = *(void *)(v6 + 688);
                      if (v77
                        && (uint64_t v79 = v78 + 20 * v64, *(_DWORD *)(v6 + 624) == *(_DWORD *)v79)
                        && *(_DWORD *)(v6 + 628) == *(_DWORD *)(v79 + 4)
                        && *(_DWORD *)(v6 + 632) == *(_DWORD *)(v79 + 8)
                        && *(unsigned __int8 *)(v6 + 636) == *(unsigned __int8 *)(v79 + 12))
                      {
                        *(void *)(v6 + 640) = v77 - 1;
                      }
                      else
                      {
                        *(void *)(v6 + 648) = v76 + 1;
                      }
                      uint64_t v80 = v78 + 20 * v64;
                      goto LABEL_126;
                    }
LABEL_141:
                    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(exception, "insert overflow");
                  }
                  uint64_t v65 = 0;
                  uint64_t v66 = *(void *)(v6 + 656) - 1;
                  uint64_t v67 = *(void *)(v6 + 688);
                  uint64_t v68 = *(void *)(v6 + 640);
                  int v69 = *(_DWORD *)(v6 + 624);
                  int v70 = *(_DWORD *)(v6 + 628);
                  int v71 = *(_DWORD *)(v6 + 632);
                  uint64_t v72 = -1;
                  int v73 = *(unsigned __int8 *)(v6 + 636);
                  while (2)
                  {
                    uint64_t v74 = v36 & v66;
                    uint64_t v62 = v67 + 20 * (v36 & v66);
                    int v75 = *(_DWORD *)v62;
                    if (*(_DWORD *)(v6 + 664) == *(_DWORD *)v62
                      && *(_DWORD *)(v6 + 668) == *(_DWORD *)(v62 + 4)
                      && *(_DWORD *)(v6 + 672) == *(_DWORD *)(v62 + 8)
                      && *(unsigned __int8 *)(v6 + 676) == *(unsigned __int8 *)(v62 + 12))
                    {
                      if (v72 == -1) {
                        uint64_t v64 = v36 & v66;
                      }
                      else {
                        uint64_t v64 = v72;
                      }
LABEL_117:
                      uint64_t v81 = *(void *)(v6 + 648);
                      if ((unint64_t)(v81 - v68) < 0xCCCCCCCCCCCCCCCLL)
                      {
                        if (v68
                          && (uint64_t v82 = v67 + 20 * v64, v69 == *(_DWORD *)v82)
                          && v70 == *(_DWORD *)(v82 + 4)
                          && v71 == *(_DWORD *)(v82 + 8)
                          && v73 == *(unsigned __int8 *)(v82 + 12))
                        {
                          *(void *)(v6 + 640) = v68 - 1;
                        }
                        else
                        {
                          *(void *)(v6 + 648) = v81 + 1;
                        }
                        uint64_t v80 = v67 + 20 * v64;
LABEL_126:
                        *(void *)uint64_t v80 = v32;
                        *(_DWORD *)(v80 + 8) = v29;
                        *(unsigned char *)(v80 + 12) = 0;
                        *(_DWORD *)(v80 + 16) = 0x7FFFFFFF;
                        uint64_t v62 = *(void *)(v6 + 688) + 20 * v64;
                        goto LABEL_127;
                      }
                      goto LABEL_141;
                    }
                    if (v68
                      && v69 == v75
                      && v70 == *(_DWORD *)(v62 + 4)
                      && v71 == *(_DWORD *)(v62 + 8)
                      && v73 == *(unsigned __int8 *)(v62 + 12))
                    {
                      if (v72 == -1) {
                        uint64_t v72 = v36 & v66;
                      }
LABEL_90:
                      unint64_t v36 = ++v65 + v74;
                      continue;
                    }
                    break;
                  }
                  if (v75 != v32
                    || __PAIR64__(v29, HIDWORD(v32)) != *(void *)(v62 + 4)
                    || *(unsigned char *)(v62 + 12))
                  {
                    goto LABEL_90;
                  }
                  if (v74 == -1)
                  {
                    uint64_t v64 = -1;
                    goto LABEL_117;
                  }
LABEL_127:
                  *(_DWORD *)(v62 + 16) = v93;
                }
                while (v30 != v25);
                uint64_t v27 = v91;
                uint64_t v28 = v92 + 1;
                uint64_t v9 = v90;
              }
              while (v92 != 1);
              unint64_t v26 = v89 + 1;
              if (v89 + 1 == v88) {
                goto LABEL_134;
              }
            }
          }
          long double v83 = v98;
          do
          {
            sub_10BD074(v9, v91, 1, &v101);
            sub_10BD074(v9, v91, 0, &v101);
            ++v83;
          }
          while (v83 != v88);
LABEL_134:
          unint64_t v26 = v98;
          uint64_t v3 = v86;
          uint64_t v7 = v87;
          uint64_t v8 = v85;
        }
        if (v26)
        {
          uint64_t v99 = v26;
          operator delete(v26);
        }
        if (v101)
        {
          unint64_t v102 = v101;
          operator delete(v101);
        }
LABEL_9:
        v7 += 16;
      }
      while (v7 != v8);
    }
    sub_328138((uint64_t)v94);
    return (uint64_t **)sub_32834C(v97);
  }
  return result;
}

void sub_10BCFB0(_Unwind_Exception *a1)
{
}

void sub_10BCFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  uint64_t v13 = *(void **)(v11 - 120);
  if (!v13)
  {
    sub_328138((uint64_t)va);
    sub_32834C(&STACK[0x360]);
    _Unwind_Resume(a1);
  }
  *(void *)(v11 - 112) = v13;
  operator delete(v13);
  sub_328138((uint64_t)va);
  sub_32834C(&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_10BD074(uint64_t a1, uint64_t a2, int a3, char **a4)
{
  unsigned int v6 = HIDWORD(a2);
  a4[1] = *a4;
  uint64_t v8 = sub_F93238(a1, a2, 1);
  if (!v8) {
    return;
  }
  uint64_t v9 = (int *)v8;
  uint64_t v10 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v10 < 5u) {
    goto LABEL_13;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 2);
  if (!v11) {
    goto LABEL_13;
  }
  uint64_t v12 = sub_F965E8((unsigned int *)&v8[v11 + *(unsigned int *)&v8[v11]], v6);
  uint64_t v13 = 0;
  uint64_t v14 = 2;
  if (a3) {
    uint64_t v14 = 0;
  }
  unsigned int v15 = *(unsigned __int16 *)(v12 + v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v16 < 7u)
  {
LABEL_9:
    unsigned int v18 = (int *)sub_F96748(v13, v15);
    int v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 < 5u) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  uint64_t v17 = v16[3];
  if (v17)
  {
    uint64_t v13 = (unsigned int *)((char *)v9 + v17 + *(unsigned int *)((char *)v9 + v17));
    goto LABEL_9;
  }
  unsigned int v18 = (int *)sub_F96748(0, v15);
  int v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 < 5u) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v20 = v19[2];
  if (v20)
  {
    uint64_t v21 = (int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v21 = 0;
LABEL_14:
  unint64_t v22 = (*v21 + 1);
  BOOL v23 = a4[1];
  int v24 = *a4;
  if (v22 <= (a4[2] - *a4) >> 3)
  {
    uint64_t v29 = *a4;
    uint64_t v28 = a4[1];
    goto LABEL_26;
  }
  uint64_t v25 = 8 * v22;
  unint64_t v26 = (char *)operator new(8 * v22);
  uint64_t v27 = v23 - v24;
  uint64_t v28 = &v26[(v23 - v24) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v29 = v28;
  if (v23 != v24)
  {
    if ((unint64_t)(v27 - 8) < 0x58)
    {
      uint64_t v29 = &v26[(v23 - v24) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_23:
        uint64_t v38 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v29 - 1) = v38;
        v29 -= 8;
      }
      while (v23 != v24);
      goto LABEL_24;
    }
    uint64_t v29 = &v26[(v23 - v24) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v23[-(v27 & 0xFFFFFFFFFFFFFFF8)] - v26) < 0x20) {
      goto LABEL_23;
    }
    uint64_t v30 = v27 >> 3;
    unint64_t v31 = ((unint64_t)(v27 - 8) >> 3) + 1;
    uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v33 = &v23[-v32];
    uint64_t v29 = &v28[-v32];
    unint64_t v34 = &v26[8 * v30 - 16];
    uint64_t v35 = (long long *)(v23 - 16);
    uint64_t v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)unint64_t v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    BOOL v23 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_23;
    }
  }
LABEL_24:
  *a4 = v29;
  a4[1] = v28;
  a4[2] = &v26[v25];
  if (v24)
  {
    operator delete(v24);
    uint64_t v29 = *a4;
    uint64_t v28 = a4[1];
  }
LABEL_26:
  unint64_t v39 = v28 - v29;
  if (!v39)
  {
    sub_10BD33C(a4, 1uLL);
    unsigned int v43 = *v21;
    unint64_t v41 = (unint64_t *)(v21 + 1);
    uint64_t v40 = v43;
    if (!v43) {
      return;
    }
    goto LABEL_32;
  }
  if (v39 >= 9) {
    a4[1] = v29 + 8;
  }
  unsigned int v42 = *v21;
  unint64_t v41 = (unint64_t *)(v21 + 1);
  uint64_t v40 = v42;
  if (v42)
  {
LABEL_32:
    uint64_t v44 = 8 * v40;
    do
    {
      unint64_t v46 = *v41;
      if (!*(unsigned char *)(a1 + 3876)
        || (uint64_t v47 = sub_F93238(a1, v46, 1), v45 = 0xFFFFFFFF00000000, v47)
        && (unint64_t v48 = &v47[-*(int *)v47], *(unsigned __int16 *)v48 >= 9u)
        && (uint64_t v49 = *((unsigned __int16 *)v48 + 4)) != 0
        && *(_DWORD *)&v47[v49 + *(unsigned int *)&v47[v49]])
      {
        unint64_t v45 = v46;
      }
      unint64_t v50 = v45;
      sub_29603C((void **)a4, &v50);
      ++v41;
      v44 -= 8;
    }
    while (v44);
  }
}

void sub_10BD33C(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  double v4 = a1[2];
  unsigned int v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      unint64_t v14 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v14 < 7) {
        goto LABEL_41;
      }
      unint64_t v15 = v14 + 1;
      unsigned int v6 = &v5[8 * (v15 & 0x3FFFFFFFFFFFFFF8)];
      uint64_t v16 = v5 + 32;
      *(void *)&long long v17 = 0xFFFFFFFF00000000;
      *((void *)&v17 + 1) = 0xFFFFFFFF00000000;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *(v16 - 2) = v17;
        *(v16 - 1) = v17;
        *uint64_t v16 = v17;
        v16[1] = v17;
        v16 += 4;
        v18 -= 8;
      }
      while (v18);
      if (v15 != (v15 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_41:
        do
        {
          *(void *)unsigned int v6 = 0xFFFFFFFF00000000;
          v6 += 8;
        }
        while (v6 != &v5[8 * a2]);
      }
      unsigned int v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v5 - *a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v19 = &v13[8 * v9];
    uint64_t v20 = &v19[8 * a2];
    unint64_t v21 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v22 = v19;
    if (v21 < 7) {
      goto LABEL_42;
    }
    unint64_t v23 = v21 + 1;
    unint64_t v22 = &v19[8 * (v23 & 0x3FFFFFFFFFFFFFF8)];
    int v24 = v19 + 32;
    *(void *)&long long v25 = 0xFFFFFFFF00000000;
    *((void *)&v25 + 1) = 0xFFFFFFFF00000000;
    uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      *(v24 - 2) = v25;
      *(v24 - 1) = v25;
      _OWORD *v24 = v25;
      v24[1] = v25;
      v24 += 4;
      v26 -= 8;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_42:
      do
      {
        *(void *)unint64_t v22 = 0xFFFFFFFF00000000;
        v22 += 8;
      }
      while (v22 != v20);
    }
    uint64_t v27 = &v13[8 * v12];
    if (v5 != v7)
    {
      unint64_t v28 = v5 - v7 - 8;
      if (v28 < 0x58) {
        goto LABEL_43;
      }
      if ((unint64_t)(v5 - &v13[v8]) < 0x20) {
        goto LABEL_43;
      }
      uint64_t v29 = (v28 >> 3) + 1;
      uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v6 = &v5[-v30];
      v19 -= v30;
      unint64_t v31 = &v13[8 * v9 - 16];
      uint64_t v32 = (long long *)(v5 - 16);
      uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *v32;
        *((_OWORD *)v31 - 1) = *(v32 - 1);
        *(_OWORD *)unint64_t v31 = v34;
        v31 -= 32;
        v32 -= 2;
        v33 -= 4;
      }
      while (v33);
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
        {
          uint64_t v35 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v19 - 1) = v35;
          v19 -= 8;
        }
        while (v6 != v7);
      }
    }
    uint64_t v36 = *a1;
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v27;
    if (v36)
    {
      operator delete(v36);
    }
  }
}

unint64_t sub_10BD564(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_10BD65C((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_10BD65C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_10BD68C((char **)a1, v2);
    return;
  }
  sub_10BD86C(a1);
}

void sub_10BD68C(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  uint64_t v8 = (char *)operator new(v7 + 16 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v13 = &v5[16 * (void)i];
        unint64_t v14 = (*((unsigned int *)v13 + 1)
             + 2654435769
             + ((unint64_t)*(unsigned int *)v13 << 6)
             + ((unint64_t)*(unsigned int *)v13 >> 2)) ^ *(unsigned int *)v13;
        unint64_t v15 = (*((unsigned int *)v13 + 2) + 2654435769 + (v14 << 6) + (v14 >> 2)) ^ v14;
        uint64_t v16 = v13[12] + 2654435769 + (v15 << 6) + (v15 >> 2);
        unint64_t v17 = (v16 ^ ~v15) + ((v16 ^ v15) << 21);
        unint64_t v18 = 21 * ((265 * (v17 ^ (v17 >> 24))) ^ ((265 * (v17 ^ (v17 >> 24))) >> 14));
        unint64_t v19 = 2147483649u * (v18 ^ (v18 >> 28));
        uint64_t v20 = a1[3];
        unint64_t v21 = *a1;
        unint64_t v22 = (unint64_t)v20 & (v19 >> 7);
        unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
        if (!v23)
        {
          uint64_t v24 = 8;
          do
          {
            unint64_t v22 = (v22 + v24) & (unint64_t)v20;
            v24 += 8;
            unint64_t v23 = *(void *)&v21[v22] & (~*(void *)&v21[v22] << 7) & 0x8080808080808080;
          }
          while (!v23);
        }
        unint64_t v11 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v20;
        char v12 = v19 & 0x7F;
        v21[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        *(_OWORD *)&a1[1][16 * v11] = *(_OWORD *)v13;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_10BD86C(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = (unsigned int *)(*(void *)(result + 8) + 16 * i);
        unint64_t v19 = (v18[1] + 2654435769 + ((unint64_t)*v18 << 6) + ((unint64_t)*v18 >> 2)) ^ *v18;
        unint64_t v20 = (v18[2] + 2654435769 + (v19 << 6) + (v19 >> 2)) ^ v19;
        uint64_t v21 = *((unsigned __int8 *)v18 + 12) + 2654435769 + (v20 << 6) + (v20 >> 2);
        unint64_t v22 = (v21 ^ ~v20) + ((v21 ^ v20) << 21);
        unint64_t v23 = 21 * ((265 * (v22 ^ (v22 >> 24))) ^ ((265 * (v22 ^ (v22 >> 24))) >> 14));
        unint64_t v24 = 2147483649u * (v23 ^ (v23 >> 28));
        unint64_t v25 = v13 & (v24 >> 7);
        unint64_t v26 = *(uint64_t *)((unsigned char *)v17->i64 + v25) & (~*(uint64_t *)((char *)v17->i64 + v25) << 7) & 0x8080808080808080;
        if (v26)
        {
          unint64_t v15 = v13 & (v24 >> 7);
        }
        else
        {
          uint64_t v27 = 8;
          unint64_t v15 = v13 & (v24 >> 7);
          do
          {
            unint64_t v15 = (v15 + v27) & v13;
            v27 += 8;
            unint64_t v26 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v26);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v26)) >> 3)) & v13;
        if ((((v16 - v25) ^ (i - v25)) & v13) > 7)
        {
          int v28 = v17->u8[v16];
          v17->i8[v16] = v24 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v24 & 0x7F;
          uint64_t v29 = *(void *)(result + 8);
          if (v28 == 128)
          {
            *(_OWORD *)(v29 + 16 * v16) = *(_OWORD *)(v29 + 16 * i);
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v30 = *(_OWORD *)(v29 + 16 * i);
            *(_OWORD *)(v29 + 16 * i) = *(_OWORD *)(v29 + 16 * v16);
            *(_OWORD *)(*(void *)(result + 8) + 16 * v16) = v30;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v24 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v24 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v31 = i - (i >> 3);
    BOOL v32 = i == 7;
    uint64_t v33 = 6;
    if (!v32) {
      uint64_t v33 = v31;
    }
  }
  else
  {
    uint64_t v33 = 0;
  }
  *(void *)(result + 40) = v33 - *(void *)(result + 16);
  return result;
}