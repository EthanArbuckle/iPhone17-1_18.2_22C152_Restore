void *sub_159D758@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "ag_search.proto.AddressSuggestionEntry");
}

void *sub_159D768(void *a1)
{
  v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DE8(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_159D7E4(void *a1)
{
  sub_159D768(a1);

  operator delete();
}

uint64_t sub_159D81C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)v38 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v38, a3[11].i32[1])) {
    goto LABEL_2;
  }
  v7 = (uint64_t **)(a1 + 24);
  v8 = (void *)(a1 + 8);
  while (2)
  {
    v9 = (char *)(*(void *)v38 + 1);
    unsigned int v10 = **(unsigned char **)v38;
    if ((char)**(unsigned char **)v38 < 0)
    {
      unsigned int v11 = v10 + (*v9 << 7);
      unsigned int v10 = v11 - 128;
      if (*v9 < 0)
      {
        v9 = (char *)sub_188C180(*(uint64_t *)v38, v11 - 128);
        unsigned int v10 = v12;
      }
      else
      {
        v9 = (char *)(*(void *)v38 + 2);
      }
    }
    *(void *)v38 = v9;
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8) {
          goto LABEL_38;
        }
        v5 |= 1u;
        v13 = v9 + 1;
        uint64_t v14 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v15 = *v13;
        uint64_t v14 = v14 + (v15 << 7) - 128;
        if ((v15 & 0x80000000) == 0)
        {
          v13 = v9 + 2;
LABEL_13:
          *(void *)v38 = v13;
          *(void *)(a1 + 48) = v14;
          goto LABEL_45;
        }
        uint64_t v32 = sub_188C138((uint64_t)v9, v14);
        *(void *)v38 = v32;
        *(void *)(a1 + 48) = v33;
        if (v32) {
          goto LABEL_45;
        }
        goto LABEL_60;
      case 2u:
        if (v10 != 16) {
          goto LABEL_38;
        }
        v16 = v9 + 1;
        unint64_t v17 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_18;
        }
        int v18 = *v16;
        int v19 = v17 + (v18 << 7);
        unint64_t v17 = (v19 - 128);
        if (v18 < 0)
        {
          *(void *)v38 = sub_188C138((uint64_t)v9, (v19 - 128));
          if (!*(void *)v38) {
            goto LABEL_60;
          }
          unint64_t v17 = v34;
        }
        else
        {
          v16 = v9 + 2;
LABEL_18:
          *(void *)v38 = v16;
        }
        if (sub_15207B0(v17))
        {
          *(_DWORD *)(a1 + 16) |= 4u;
          *(_DWORD *)(a1 + 64) = v17;
        }
        else
        {
          if (*v8) {
            v37 = (std::string *)((*v8 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            v37 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(2, v17, v37);
        }
        goto LABEL_45;
      case 3u:
        if (v10 != 26) {
          goto LABEL_38;
        }
        v20 = v9 - 1;
        while (1)
        {
          v21 = (char *)(v20 + 1);
          *(void *)v38 = v20 + 1;
          v22 = *(_DWORD **)(a1 + 40);
          if (v22 && (uint64_t v23 = *(int *)(a1 + 32), (int)v23 < *v22))
          {
            *(_DWORD *)(a1 + 32) = v23 + 1;
            v24 = *(std::string **)&v22[2 * v23 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            void *v26 = v25;
            v26[1] = sub_3A6EDC;
            void *v25 = 0;
            v25[1] = 0;
            v25[2] = 0;
            v24 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v25);
            v21 = *(char **)v38;
          }
          v20 = sub_188C244(v24, v21, (uint64_t)a3);
          *(void *)v38 = v20;
          if (!v20) {
            goto LABEL_60;
          }
          if (*(void *)a3 <= (unint64_t)v20 || *v20 != 26) {
            goto LABEL_45;
          }
        }
      case 4u:
        if (v10 != 32) {
          goto LABEL_38;
        }
        v5 |= 2u;
        v27 = v9 + 1;
        uint64_t v28 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_37;
        }
        int v29 = *v27;
        uint64_t v28 = v28 + (v29 << 7) - 128;
        if (v29 < 0)
        {
          uint64_t v35 = sub_188C138((uint64_t)v9, v28);
          *(void *)v38 = v35;
          *(void *)(a1 + 56) = v36;
          if (!v35) {
            goto LABEL_60;
          }
        }
        else
        {
          v27 = v9 + 2;
LABEL_37:
          *(void *)v38 = v27;
          *(void *)(a1 + 56) = v28;
        }
        goto LABEL_45;
      default:
LABEL_38:
        if (v10) {
          BOOL v30 = (v10 & 7) == 4;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30)
        {
          if (*v8)
          {
            v31 = (std::string *)((*v8 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            v31 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            v9 = *(char **)v38;
          }
          *(void *)v38 = sub_1885AC0(v10, v31, v9, a3);
          if (!*(void *)v38) {
            goto LABEL_60;
          }
LABEL_45:
          if (sub_11947B8((uint64_t)a3, (char **)v38, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v9) {
          a3[10].i32[0] = v10 - 1;
        }
        else {
LABEL_60:
        }
          *(void *)v38 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v38;
    }
  }
}

char *sub_159DBC4(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(void *)(a1 + 48);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 64);
    char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    do
    {
      v16 = *(void **)(*(void *)(a1 + 40) + v14 + 8);
      if (*((char *)v16 + 23) < 0)
      {
        int64_t v17 = v16[1];
        if (v17 > 127) {
          goto LABEL_26;
        }
      }
      else
      {
        int64_t v17 = *((unsigned __int8 *)v16 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v17)
      {
        char *v4 = 26;
        v4[1] = v17;
        if (*((char *)v16 + 23) < 0) {
          v16 = (void *)*v16;
        }
        int v18 = v4 + 2;
        memcpy(v18, v16, v17);
        v4 = &v18[v17];
        goto LABEL_24;
      }
LABEL_26:
      v4 = (char *)sub_188A868(a3, 3, (uint64_t)v16, v4);
LABEL_24:
      v14 += 8;
    }
    while (v15 != v14);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v19 = *(void *)(a1 + 56);
    char *v4 = 32;
    v4[1] = v19;
    if (v19 > 0x7F)
    {
      v4[1] = v19 | 0x80;
      unint64_t v20 = v19 >> 7;
      v4[2] = v19 >> 7;
      v4 += 3;
      if (v19 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v21 = v20 >> 14;
          v20 >>= 7;
          *v4++ = v20;
        }
        while (v21);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v22 = *(void *)(a1 + 8);
  if ((v22 & 1) == 0) {
    return v4;
  }
  unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v24 + 31) < 0)
  {
    v25 = *(void **)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
  }
  else
  {
    v25 = (void *)(v24 + 8);
    LODWORD(v26) = *(unsigned __int8 *)(v24 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v26)
  {
    uint64_t v27 = (int)v26;
    memcpy(v4, v25, (int)v26);
    v4 += v27;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v25, v26, v4);
}

uint64_t sub_159DEA4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  int v7 = *(_DWORD *)(a1 + 16);
  if ((v7 & 7) != 0)
  {
    if (v7)
    {
      v3 += ((9 * (__clz(*(void *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
      if ((v7 & 2) == 0)
      {
LABEL_11:
        if ((v7 & 4) == 0) {
          goto LABEL_19;
        }
        goto LABEL_15;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_11;
    }
    v3 += ((9 * (__clz(*(void *)(a1 + 56) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v7 & 4) == 0) {
      goto LABEL_19;
    }
LABEL_15:
    int v8 = *(_DWORD *)(a1 + 64);
    if (v8 < 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v3 += v9;
  }
LABEL_19:
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v3 += v13;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_159DFD0()
{
  return 1;
}

void *sub_159DFD8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "ag_search.proto.TransitSuggestionEntry");
}

double sub_159DFE8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)a1 = off_24C3DF8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a2;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = a2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = a2;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = a2;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = a2;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a2;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = a2;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a2;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a2;
  *(void *)(a1 + 352) = a2;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = a2;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a2;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = a2;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = &qword_2550250;
  *(void *)(a1 + 456) = &qword_2550250;
  *(void *)(a1 + 464) = &qword_2550250;
  *(void *)(a1 + 472) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 768) = -1;
  return result;
}

void *sub_159E0C4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_159E210((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_124E4CC(a1 + 53);
  sub_124E44C(a1 + 50);
  sub_124E3CC(a1 + 47);
  sub_124D714(a1 + 44);
  sub_1889DA8((uint64_t)(a1 + 42));
  sub_124E14C(a1 + 39);
  sub_124E04C(a1 + 36);
  sub_124DD4C(a1 + 33);
  sub_124E0CC(a1 + 30);
  sub_15A7A8C(a1 + 27);
  sub_1889DE8(a1 + 24);
  sub_124DECC(a1 + 21);
  sub_122BA8C(a1 + 18);
  sub_149037C(a1 + 15);
  sub_124DE4C(a1 + 12);
  sub_1889DE8(a1 + 9);
  sub_1889DA8((uint64_t)(a1 + 7));
  sub_15A7A8C(a1 + 4);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t sub_159E210(uint64_t result)
{
  uint64_t v1 = (void *)result;
  if (*(uint64_t **)(result + 448) != &qword_2550250) {
    sub_1881C6C((void ***)(result + 448));
  }
  if (*(uint64_t **)(result + 456) != &qword_2550250) {
    sub_1881C6C((void ***)(result + 456));
  }
  if (*(uint64_t **)(result + 464) != &qword_2550250) {
    sub_1881C6C((void ***)(result + 464));
  }
  if (*(uint64_t **)(result + 472) != &qword_2550250) {
    sub_1881C6C((void ***)(result + 472));
  }
  if ((uint64_t (***)())result != &off_253EE00)
  {
    if (*(void *)(result + 480))
    {
      sub_15B8F7C();
      operator delete();
    }
    if (*(void *)(result + 488))
    {
      sub_15B0994();
      operator delete();
    }
    if (*(void *)(result + 496))
    {
      sub_15B6D48();
      operator delete();
    }
    uint64_t v2 = *(void *)(result + 504);
    if (v2)
    {
      sub_1405194(v2);
      operator delete();
    }
    uint64_t v3 = (void *)v1[64];
    if (v3)
    {
      sub_15A5150(v3);
      operator delete();
    }
    uint64_t v4 = (void *)v1[65];
    if (v4)
    {
      sub_15A5150(v4);
      operator delete();
    }
    if (v1[66])
    {
      sub_1418750();
      operator delete();
    }
    uint64_t v5 = v1[67];
    if (v5)
    {
      sub_141D048(v5);
      operator delete();
    }
    uint64_t v6 = (void *)v1[68];
    if (v6)
    {
      sub_15A5150(v6);
      operator delete();
    }
    int v7 = (void *)v1[69];
    if (v7)
    {
      sub_15A5150(v7);
      operator delete();
    }
    int v8 = (void *)v1[70];
    if (v8)
    {
      sub_15A5150(v8);
      operator delete();
    }
    uint64_t v9 = (void *)v1[71];
    if (v9)
    {
      sub_15A5150(v9);
      operator delete();
    }
    uint64_t v10 = (void *)v1[72];
    if (v10)
    {
      sub_15A5150(v10);
      operator delete();
    }
    unint64_t v11 = (void *)v1[73];
    if (v11)
    {
      sub_15A5150(v11);
      operator delete();
    }
    unint64_t v12 = (void *)v1[74];
    if (v12)
    {
      sub_15A5150(v12);
      operator delete();
    }
    uint64_t v13 = (void *)v1[75];
    if (v13)
    {
      sub_14180F4(v13);
      operator delete();
    }
    uint64_t v14 = (void *)v1[76];
    if (v14)
    {
      sub_15A5150(v14);
      operator delete();
    }
    uint64_t v15 = (void *)v1[77];
    if (v15)
    {
      sub_15A5150(v15);
      operator delete();
    }
    v16 = (void *)v1[78];
    if (v16)
    {
      sub_15A5150(v16);
      operator delete();
    }
    int64_t v17 = (void *)v1[79];
    if (v17)
    {
      sub_15A5150(v17);
      operator delete();
    }
    int v18 = (void *)v1[80];
    if (v18)
    {
      sub_141A3FC(v18);
      operator delete();
    }
    uint64_t v19 = v1[81];
    if (v19)
    {
      sub_143A430(v19);
      operator delete();
    }
    if (v1[82])
    {
      sub_13F6F8C();
      operator delete();
    }
    uint64_t v20 = v1[83];
    if (v20)
    {
      sub_140C74C(v20);
      operator delete();
    }
    double result = v1[84];
    if (result)
    {
      sub_13F6F8C();
      operator delete();
    }
  }
  return result;
}

void sub_159E5D4(void *a1)
{
  sub_159E0C4(a1);

  operator delete();
}

char *sub_159E60C(uint64_t a1, char *a2, int32x2_t *a3)
{
  v212[0] = a2;
  char v5 = sub_11947B8((uint64_t)a3, v212, a3[11].i32[1]);
  double result = v212[0];
  if (v5) {
    return result;
  }
  v198 = (uint64_t *)(a1 + 8);
  v210 = (uint64_t *)(a1 + 424);
  v208 = (uint64_t *)(a1 + 376);
  v209 = (uint64_t *)(a1 + 400);
  v199 = (uint64_t *)(a1 + 352);
  v206 = (uint64_t *)(a1 + 288);
  v207 = (uint64_t *)(a1 + 312);
  v204 = (uint64_t *)(a1 + 240);
  v205 = (uint64_t *)(a1 + 264);
  v203 = (uint64_t *)(a1 + 216);
  v211 = (uint64_t **)(a1 + 192);
  v201 = (uint64_t *)(a1 + 144);
  v202 = (uint64_t *)(a1 + 168);
  v200 = (uint64_t *)(a1 + 120);
  int v7 = (uint64_t **)(a1 + 72);
  while (2)
  {
    int v8 = result + 1;
    unsigned int v9 = *result;
    if (*result < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)result, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        int v8 = result + 2;
      }
    }
    v212[0] = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x20000000u;
        unint64_t v12 = v8 + 1;
        uint64_t v13 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v14 = *v12;
        uint64_t v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          unint64_t v12 = v8 + 2;
LABEL_13:
          v212[0] = v12;
          *(void *)(a1 + 680) = v13;
          goto LABEL_347;
        }
        double result = (char *)sub_188C138((uint64_t)v8, v13);
        v212[0] = result;
        *(void *)(a1 + 680) = v184;
        if (!result) {
          return result;
        }
        goto LABEL_347;
      case 2u:
        if (v9 != 18) {
          goto LABEL_443;
        }
        double result = v8 - 1;
        while (1)
        {
          v89 = (unsigned __int8 *)(result + 1);
          v212[0] = result + 1;
          v90 = *(_DWORD **)(a1 + 48);
          if (v90 && (uint64_t v91 = *(int *)(a1 + 40), (int)v91 < *v90))
          {
            *(_DWORD *)(a1 + 40) = v91 + 1;
            uint64_t v92 = *(void *)&v90[2 * v91 + 2];
          }
          else
          {
            uint64_t v93 = sub_15A563C(*(void *)(a1 + 32));
            uint64_t v92 = sub_188CDC8(a1 + 32, v93);
            v89 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_15A0170(a3, v92, v89);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 18) {
            goto LABEL_347;
          }
        }
      case 3u:
        if (v9 != 26) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v94 = *(void *)(a1 + 480);
        if (!v94)
        {
          v95 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v95 = (void *)*v95;
          }
          uint64_t v94 = sub_15C1EF4((uint64_t)v95);
          *(void *)(a1 + 480) = v94;
          int v8 = v212[0];
        }
        double result = (char *)sub_1198E84(a3, v94, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 4u:
        if (v9 != 34) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v96 = *(void *)(a1 + 488);
        if (!v96)
        {
          v97 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v97 = (void *)*v97;
          }
          uint64_t v96 = sub_15C1918((uint64_t)v97);
          *(void *)(a1 + 488) = v96;
          int v8 = v212[0];
        }
        double result = sub_1198F14(a3, v96, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 5u:
        if (v9 != 41) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x40000000u;
        uint64_t v16 = *(void *)v8;
        uint64_t v15 = v8 + 8;
        *(void *)(a1 + 688) = v16;
        goto LABEL_397;
      case 6u:
        if (v9 == 48)
        {
          double result = v8 - 1;
          while (1)
          {
            v212[0] = result + 1;
            uint64_t v98 = result[1];
            if (result[1] < 0)
            {
              int v99 = v98 + (result[2] << 7);
              uint64_t v98 = (v99 - 128);
              if (result[2] < 0)
              {
                double result = (char *)sub_188C138((uint64_t)(result + 1), (v99 - 128));
                uint64_t v98 = v100;
              }
              else
              {
                result += 3;
              }
            }
            else
            {
              result += 2;
            }
            v212[0] = result;
            uint64_t v101 = *(unsigned int *)(a1 + 56);
            if (v101 == *(_DWORD *)(a1 + 60))
            {
              int v102 = v101 + 1;
              sub_188CA54((unsigned int *)(a1 + 56), v101 + 1);
              *(void *)(*(void *)(a1 + 64) + 8 * v101) = v98;
              double result = v212[0];
            }
            else
            {
              *(void *)(*(void *)(a1 + 64) + 8 * v101) = v98;
              int v102 = v101 + 1;
            }
            *(_DWORD *)(a1 + 56) = v102;
            if (!result) {
              return result;
            }
            if (*(void *)a3 <= (unint64_t)result || *result != 48) {
              goto LABEL_347;
            }
          }
        }
        if (v9 != 50) {
          goto LABEL_443;
        }
        v193 = (unsigned int *)(a1 + 56);
        goto LABEL_442;
      case 7u:
        if (v9 != 58) {
          goto LABEL_443;
        }
        double result = v8 - 1;
        while (1)
        {
          v103 = result + 1;
          v212[0] = result + 1;
          v104 = *(_DWORD **)(a1 + 88);
          if (v104 && (uint64_t v105 = *(int *)(a1 + 80), (int)v105 < *v104))
          {
            *(_DWORD *)(a1 + 80) = v105 + 1;
            v106 = *(std::string **)&v104[2 * v105 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            void *v108 = v107;
            v108[1] = sub_3A6EDC;
            void *v107 = 0;
            v107[1] = 0;
            v107[2] = 0;
            v106 = (std::string *)sub_188CDC8(a1 + 72, (uint64_t)v107);
            v103 = v212[0];
          }
          double result = (char *)sub_188C244(v106, v103, (uint64_t)a3);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 58) {
            goto LABEL_347;
          }
        }
      case 8u:
        if (v9 != 66) {
          goto LABEL_443;
        }
        double result = v8 - 1;
        while (1)
        {
          v109 = (unsigned __int8 *)(result + 1);
          v212[0] = result + 1;
          v110 = *(_DWORD **)(a1 + 112);
          if (v110 && (uint64_t v111 = *(int *)(a1 + 104), (int)v111 < *v110))
          {
            *(_DWORD *)(a1 + 104) = v111 + 1;
            uint64_t v112 = *(void *)&v110[2 * v111 + 2];
          }
          else
          {
            uint64_t v113 = sub_144A420(*(void *)(a1 + 96));
            uint64_t v112 = sub_188CDC8(a1 + 96, v113);
            v109 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_123B094(a3, v112, v109);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 66) {
            goto LABEL_347;
          }
        }
      case 9u:
        if (v9 != 74) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        v114 = *(void **)(a1 + 496);
        if (!v114)
        {
          v115 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v115 = (void *)*v115;
          }
          v114 = sub_15C1E94((uint64_t)v115);
          *(void *)(a1 + 496) = v114;
          int v8 = v212[0];
        }
        double result = sub_11EA9CC(a3, (uint64_t)v114, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0xAu:
        if (v9 != 82) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v17 = *(void *)(a1 + 8);
        int v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          int v18 = (uint64_t *)*v18;
        }
        uint64_t v19 = (void *)(a1 + 448);
        goto LABEL_258;
      case 0xBu:
        if (v9 != 90) {
          goto LABEL_443;
        }
        double result = v8 - 1;
        while (1)
        {
          v116 = (unsigned __int8 *)(result + 1);
          v212[0] = result + 1;
          v117 = *(_DWORD **)(a1 + 136);
          if (v117 && (uint64_t v118 = *(int *)(a1 + 128), (int)v118 < *v117))
          {
            *(_DWORD *)(a1 + 128) = v118 + 1;
            uint64_t v119 = *(void *)&v117[2 * v118 + 2];
          }
          else
          {
            v120 = sub_1478378(*v200);
            uint64_t v119 = sub_188CDC8((uint64_t)v200, (uint64_t)v120);
            v116 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_140C410(a3, v119, v116);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 90) {
            goto LABEL_347;
          }
        }
      case 0xCu:
        if (v9 != 98) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v20 = *(void *)(a1 + 8);
        int v18 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          int v18 = (uint64_t *)*v18;
        }
        uint64_t v19 = (void *)(a1 + 456);
        goto LABEL_258;
      case 0xDu:
        if (v9 != 106) {
          goto LABEL_443;
        }
        double result = v8 - 1;
        while (1)
        {
          unint64_t v21 = (unsigned __int8 *)(result + 1);
          v212[0] = result + 1;
          uint64_t v22 = *(_DWORD **)(a1 + 160);
          if (v22 && (uint64_t v23 = *(int *)(a1 + 152), (int)v23 < *v22))
          {
            *(_DWORD *)(a1 + 152) = v23 + 1;
            uint64_t v24 = *(void *)&v22[2 * v23 + 2];
          }
          else
          {
            v25 = sub_14A23B8(*v201);
            uint64_t v24 = sub_188CDC8((uint64_t)v201, (uint64_t)v25);
            unint64_t v21 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_11EAAEC(a3, v24, v21);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 106) {
            goto LABEL_347;
          }
        }
      case 0xEu:
        if (v9 != 113) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x80000000;
        uint64_t v121 = *(void *)v8;
        uint64_t v15 = v8 + 8;
        *(void *)(a1 + 696) = v121;
        goto LABEL_397;
      case 0xFu:
        if (v9 != 121) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 1u;
        uint64_t v26 = *(void *)v8;
        uint64_t v15 = v8 + 8;
        *(void *)(a1 + 704) = v26;
        goto LABEL_397;
      case 0x10u:
        if (v9 != 130) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v122 = *(void *)(a1 + 8);
        int v18 = (uint64_t *)(v122 & 0xFFFFFFFFFFFFFFFCLL);
        if (v122) {
          int v18 = (uint64_t *)*v18;
        }
        uint64_t v19 = (void *)(a1 + 464);
        goto LABEL_258;
      case 0x11u:
        if (v9 != 138) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          uint64_t v27 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          uint64_t v28 = *(_DWORD **)(a1 + 184);
          if (v28 && (uint64_t v29 = *(int *)(a1 + 176), (int)v29 < *v28))
          {
            *(_DWORD *)(a1 + 176) = v29 + 1;
            uint64_t v30 = *(void *)&v28[2 * v29 + 2];
          }
          else
          {
            uint64_t v31 = sub_178B458(*v202);
            uint64_t v30 = sub_188CDC8((uint64_t)v202, v31);
            uint64_t v27 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_123B124(a3, v30, v27);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 394) {
            goto LABEL_347;
          }
        }
      case 0x12u:
        if (v9 != 146) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x80u;
        uint64_t v124 = *(void *)(a1 + 504);
        if (!v124)
        {
          v125 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v125 = (void *)*v125;
          }
          sub_1449D48((uint64_t)v125);
          uint64_t v124 = v126;
          *(void *)(a1 + 504) = v126;
          int v8 = v212[0];
        }
        double result = sub_123B2D4(a3, v124, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x13u:
        if (v9 != 152) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 2u;
        v127 = v8 + 1;
        uint64_t v128 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_269;
        }
        int v129 = *v127;
        uint64_t v128 = v128 + (v129 << 7) - 128;
        if (v129 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, v128);
          v212[0] = result;
          *(void *)(a1 + 712) = v189;
          if (!result) {
            return result;
          }
        }
        else
        {
          v127 = v8 + 2;
LABEL_269:
          v212[0] = v127;
          *(void *)(a1 + 712) = v128;
        }
        goto LABEL_347;
      case 0x14u:
        if (v9 != 162) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v130 = result + 2;
          v212[0] = result + 2;
          v131 = *(_DWORD **)(a1 + 208);
          if (v131 && (uint64_t v132 = *(int *)(a1 + 200), (int)v132 < *v131))
          {
            *(_DWORD *)(a1 + 200) = v132 + 1;
            v133 = *(std::string **)&v131[2 * v132 + 2];
          }
          else
          {
            if (!*v211) {
              operator new();
            }
            void *v135 = v134;
            v135[1] = sub_3A6EDC;
            void *v134 = 0;
            v134[1] = 0;
            v134[2] = 0;
            v133 = (std::string *)sub_188CDC8((uint64_t)v211, (uint64_t)v134);
            v130 = v212[0];
          }
          double result = (char *)sub_188C244(v133, v130, (uint64_t)a3);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 418) {
            goto LABEL_347;
          }
        }
      case 0x15u:
        if (v9 != 170) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x100u;
        uint64_t v37 = *(void *)(a1 + 512);
        if (v37) {
          goto LABEL_345;
        }
        v136 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v136 = (void *)*v136;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v136);
        *(void *)(a1 + 512) = v37;
        goto LABEL_344;
      case 0x16u:
        if (v9 != 178) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x200u;
        uint64_t v37 = *(void *)(a1 + 520);
        if (v37) {
          goto LABEL_345;
        }
        v137 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v137 = (void *)*v137;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v137);
        *(void *)(a1 + 520) = v37;
        goto LABEL_344;
      case 0x17u:
        if (v9 != 186) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x400u;
        v138 = *(void **)(a1 + 528);
        if (!v138)
        {
          v139 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v139 = (void *)*v139;
          }
          v138 = sub_144A82C((uint64_t)v139);
          *(void *)(a1 + 528) = v138;
          int v8 = v212[0];
        }
        double result = (char *)sub_123B244(a3, (uint64_t)v138, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x18u:
        if (v9 != 194) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x800u;
        uint64_t v140 = *(void *)(a1 + 536);
        if (!v140)
        {
          v141 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v141 = (void *)*v141;
          }
          uint64_t v140 = sub_144ACEC((uint64_t)v141);
          *(void *)(a1 + 536) = v140;
          int v8 = v212[0];
        }
        double result = sub_123B3F4(a3, v140, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x19u:
        if (v9 != 202) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          uint64_t v32 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          uint64_t v33 = *(_DWORD **)(a1 + 232);
          if (v33 && (uint64_t v34 = *(int *)(a1 + 224), (int)v34 < *v33))
          {
            *(_DWORD *)(a1 + 224) = v34 + 1;
            uint64_t v35 = *(void *)&v33[2 * v34 + 2];
          }
          else
          {
            uint64_t v36 = sub_15A563C(*v203);
            uint64_t v35 = sub_188CDC8((uint64_t)v203, v36);
            uint64_t v32 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_15A0170(a3, v35, v32);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 458) {
            goto LABEL_347;
          }
        }
      case 0x1Au:
        if (v9 != 210) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x1000u;
        uint64_t v37 = *(void *)(a1 + 544);
        if (v37) {
          goto LABEL_345;
        }
        v38 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v38 = (void *)*v38;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v38);
        *(void *)(a1 + 544) = v37;
        goto LABEL_344;
      case 0x1Bu:
        if (v9 != 218) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x2000u;
        uint64_t v37 = *(void *)(a1 + 552);
        if (v37) {
          goto LABEL_345;
        }
        v142 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v142 = (void *)*v142;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v142);
        *(void *)(a1 + 552) = v37;
        goto LABEL_344;
      case 0x1Cu:
        if (v9 != 224) {
          goto LABEL_443;
        }
        v39 = v8 + 1;
        unint64_t v40 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_65;
        }
        int v41 = *v39;
        int v42 = v40 + (v41 << 7);
        unint64_t v40 = (v42 - 128);
        if (v41 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, (v42 - 128));
          v212[0] = result;
          if (!result) {
            return result;
          }
          unint64_t v40 = v185;
        }
        else
        {
          v39 = v8 + 2;
LABEL_65:
          v212[0] = v39;
        }
        if (sub_13F4B38(v40))
        {
          *(_DWORD *)(a1 + 20) |= 0x400u;
          *(_DWORD *)(a1 + 768) = v40;
          goto LABEL_347;
        }
        if (*v198) {
          v196 = (std::string *)((*v198 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          v196 = (std::string *)sub_188DBD8(v198);
        }
        int v197 = 28;
        goto LABEL_456;
      case 0x1Du:
        if (v9 != 234) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x4000u;
        uint64_t v37 = *(void *)(a1 + 560);
        if (v37) {
          goto LABEL_345;
        }
        v143 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v143 = (void *)*v143;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v143);
        *(void *)(a1 + 560) = v37;
        goto LABEL_344;
      case 0x1Eu:
        if (v9 != 242) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x8000u;
        uint64_t v37 = *(void *)(a1 + 568);
        if (v37) {
          goto LABEL_345;
        }
        v144 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v144 = (void *)*v144;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v144);
        *(void *)(a1 + 568) = v37;
        goto LABEL_344;
      case 0x1Fu:
        if (v9 != 250) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x10000u;
        uint64_t v37 = *(void *)(a1 + 576);
        if (v37) {
          goto LABEL_345;
        }
        v145 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v145 = (void *)*v145;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v145);
        *(void *)(a1 + 576) = v37;
        goto LABEL_344;
      case 0x20u:
        if (v9 != 2) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x20000u;
        uint64_t v37 = *(void *)(a1 + 584);
        if (v37) {
          goto LABEL_345;
        }
        v146 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v146 = (void *)*v146;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v146);
        *(void *)(a1 + 584) = v37;
        goto LABEL_344;
      case 0x21u:
        if (v9 != 10) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x40000u;
        uint64_t v37 = *(void *)(a1 + 592);
        if (v37) {
          goto LABEL_345;
        }
        v147 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v147 = (void *)*v147;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v147);
        *(void *)(a1 + 592) = v37;
        goto LABEL_344;
      case 0x22u:
        if (v9 != 18) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x80000u;
        v43 = *(void **)(a1 + 600);
        if (!v43)
        {
          v44 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v44 = (void *)*v44;
          }
          v43 = sub_144A794((uint64_t)v44);
          *(void *)(a1 + 600) = v43;
          int v8 = v212[0];
        }
        double result = sub_123B484(a3, (uint64_t)v43, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x23u:
        if (v9 != 24) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 4u;
        v45 = v8 + 1;
        uint64_t v46 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_78;
        }
        int v47 = *v45;
        uint64_t v46 = v46 + (v47 << 7) - 128;
        if (v47 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, v46);
          v212[0] = result;
          *(unsigned char *)(a1 + 720) = v186 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          v45 = v8 + 2;
LABEL_78:
          v212[0] = v45;
          *(unsigned char *)(a1 + 720) = v46 != 0;
        }
        goto LABEL_347;
      case 0x24u:
        if (v9 != 32) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 8u;
        v48 = v8 + 1;
        uint64_t v49 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_83;
        }
        int v50 = *v48;
        uint64_t v49 = v49 + (v50 << 7) - 128;
        if (v50 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, v49);
          v212[0] = result;
          *(unsigned char *)(a1 + 721) = v187 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          v48 = v8 + 2;
LABEL_83:
          v212[0] = v48;
          *(unsigned char *)(a1 + 721) = v49 != 0;
        }
        goto LABEL_347;
      case 0x25u:
        if (v9 != 42) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x100000u;
        uint64_t v37 = *(void *)(a1 + 608);
        if (v37) {
          goto LABEL_345;
        }
        v51 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v51 = (void *)*v51;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v51);
        *(void *)(a1 + 608) = v37;
        goto LABEL_344;
      case 0x26u:
        if (v9 != 50) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x200000u;
        uint64_t v37 = *(void *)(a1 + 616);
        if (v37) {
          goto LABEL_345;
        }
        v52 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v52 = (void *)*v52;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v52);
        *(void *)(a1 + 616) = v37;
        goto LABEL_344;
      case 0x27u:
        if (v9 != 58) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x400000u;
        uint64_t v37 = *(void *)(a1 + 624);
        if (v37) {
          goto LABEL_345;
        }
        v148 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v148 = (void *)*v148;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v148);
        *(void *)(a1 + 624) = v37;
        goto LABEL_344;
      case 0x28u:
        if (v9 != 66) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x800000u;
        uint64_t v37 = *(void *)(a1 + 632);
        if (v37) {
          goto LABEL_345;
        }
        v149 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v149 = (void *)*v149;
        }
        uint64_t v37 = sub_15A5754((uint64_t)v149);
        *(void *)(a1 + 632) = v37;
LABEL_344:
        int v8 = v212[0];
LABEL_345:
        double result = sub_14E7D98(a3, v37, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x29u:
        if (v9 != 74) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x1000000u;
        uint64_t v53 = *(void *)(a1 + 640);
        if (!v53)
        {
          v54 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v54 = (void *)*v54;
          }
          uint64_t v53 = sub_144A9F8((uint64_t)v54);
          *(void *)(a1 + 640) = v53;
          int v8 = v212[0];
        }
        double result = sub_123B514(a3, v53, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x2Au:
        if (v9 != 82) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x2000000u;
        uint64_t v151 = *(void *)(a1 + 648);
        if (!v151)
        {
          v152 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v152 = (void *)*v152;
          }
          uint64_t v151 = sub_144C3E0((uint64_t)v152);
          *(void *)(a1 + 648) = v151;
          int v8 = v212[0];
        }
        double result = sub_123B754(a3, v151, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x2Bu:
        if (v9 != 90) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v153 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v154 = *(_DWORD **)(a1 + 256);
          if (v154 && (uint64_t v155 = *(int *)(a1 + 248), (int)v155 < *v154))
          {
            *(_DWORD *)(a1 + 248) = v155 + 1;
            uint64_t v156 = *(void *)&v154[2 * v155 + 2];
          }
          else
          {
            sub_15A3DBC(*v204);
            uint64_t v156 = sub_188CDC8((uint64_t)v204, v157);
            v153 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_123B7E4(a3, v156, v153);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 730) {
            goto LABEL_347;
          }
        }
      case 0x2Cu:
        if (v9 != 96) {
          goto LABEL_443;
        }
        v55 = v8 + 1;
        unint64_t v40 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_104;
        }
        int v56 = *v55;
        int v57 = v40 + (v56 << 7);
        unint64_t v40 = (v57 - 128);
        if (v56 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, (v57 - 128));
          v212[0] = result;
          if (!result) {
            return result;
          }
          unint64_t v40 = v188;
        }
        else
        {
          v55 = v8 + 2;
LABEL_104:
          v212[0] = v55;
        }
        if (sub_15207B0(v40))
        {
          *(_DWORD *)(a1 + 20) |= 0x10u;
          *(_DWORD *)(a1 + 724) = v40;
        }
        else
        {
          if (*v198) {
            v196 = (std::string *)((*v198 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            v196 = (std::string *)sub_188DBD8(v198);
          }
          int v197 = 44;
LABEL_456:
          sub_188C020(v197, v40, v196);
        }
        goto LABEL_347;
      case 0x2Du:
        if (v9 != 106) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v58 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v59 = *(_DWORD **)(a1 + 280);
          if (v59 && (uint64_t v60 = *(int *)(a1 + 272), (int)v60 < *v59))
          {
            *(_DWORD *)(a1 + 272) = v60 + 1;
            uint64_t v61 = *(void *)&v59[2 * v60 + 2];
          }
          else
          {
            uint64_t v62 = sub_14785D4(*v205);
            uint64_t v61 = sub_188CDC8((uint64_t)v205, v62);
            v58 = (unsigned __int8 *)v212[0];
          }
          double result = sub_123AF74(a3, v61, v58);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 746) {
            goto LABEL_347;
          }
        }
      case 0x2Eu:
        if (v9 != 114) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v158 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v159 = *(_DWORD **)(a1 + 304);
          if (v159 && (uint64_t v160 = *(int *)(a1 + 296), (int)v160 < *v159))
          {
            *(_DWORD *)(a1 + 296) = v160 + 1;
            uint64_t v161 = *(void *)&v159[2 * v160 + 2];
          }
          else
          {
            uint64_t v162 = sub_144A378(*v206);
            uint64_t v161 = sub_188CDC8((uint64_t)v206, v162);
            v158 = (unsigned __int8 *)v212[0];
          }
          double result = sub_123B6C4(a3, v161, v158);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 754) {
            goto LABEL_347;
          }
        }
      case 0x2Fu:
        if (v9 != 120) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 0x20u;
        v163 = v8 + 1;
        uint64_t v164 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_379;
        }
        int v165 = *v163;
        uint64_t v164 = v164 + (v165 << 7) - 128;
        if (v165 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, v164);
          v212[0] = result;
          *(void *)(a1 + 728) = v190;
          if (!result) {
            return result;
          }
        }
        else
        {
          v163 = v8 + 2;
LABEL_379:
          v212[0] = v163;
          *(void *)(a1 + 728) = v164;
        }
        goto LABEL_347;
      case 0x30u:
        if (v9 != 130) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v63 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v64 = *(_DWORD **)(a1 + 328);
          if (v64 && (uint64_t v65 = *(int *)(a1 + 320), (int)v65 < *v64))
          {
            *(_DWORD *)(a1 + 320) = v65 + 1;
            uint64_t v66 = *(void *)&v64[2 * v65 + 2];
          }
          else
          {
            uint64_t v67 = sub_144CB80(*v207);
            uint64_t v66 = sub_188CDC8((uint64_t)v207, v67);
            v63 = (unsigned __int8 *)v212[0];
          }
          double result = sub_123B874(a3, v66, v63);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 898) {
            goto LABEL_347;
          }
        }
      case 0x31u:
        if (v9 != 136)
        {
          if (v9 == 138)
          {
            v193 = (unsigned int *)(a1 + 336);
LABEL_442:
            double result = (char *)sub_188C2EC(v193, (unsigned __int8 *)v8, (uint64_t)a3);
          }
          else
          {
LABEL_443:
            if (v9) {
              BOOL v194 = (v9 & 7) == 4;
            }
            else {
              BOOL v194 = 1;
            }
            if (v194)
            {
              if (!v8) {
                return 0;
              }
              a3[10].i32[0] = v9 - 1;
              return v8;
            }
            if (*v198)
            {
              v195 = (std::string *)((*v198 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else
            {
              v195 = (std::string *)sub_188DBD8(v198);
              int v8 = v212[0];
            }
            double result = (char *)sub_1885AC0(v9, v195, v8, a3);
          }
LABEL_346:
          v212[0] = result;
          if (!result) {
            return result;
          }
LABEL_347:
          int v150 = sub_11947B8((uint64_t)a3, v212, a3[11].i32[1]);
          double result = v212[0];
          if (v150) {
            return result;
          }
          continue;
        }
        double result = v8 - 2;
        while (1)
        {
          v212[0] = result + 2;
          uint64_t v68 = result[2];
          if (result[2] < 0)
          {
            int v69 = v68 + (result[3] << 7);
            uint64_t v68 = (v69 - 128);
            if (result[3] < 0)
            {
              double result = (char *)sub_188C138((uint64_t)(result + 2), (v69 - 128));
              uint64_t v68 = v70;
            }
            else
            {
              result += 4;
            }
          }
          else
          {
            result += 3;
          }
          v212[0] = result;
          uint64_t v71 = *(unsigned int *)(a1 + 336);
          if (v71 == *(_DWORD *)(a1 + 340))
          {
            int v72 = v71 + 1;
            sub_188CA54((unsigned int *)(a1 + 336), v71 + 1);
            *(void *)(*(void *)(a1 + 344) + 8 * v71) = v68;
            double result = v212[0];
          }
          else
          {
            *(void *)(*(void *)(a1 + 344) + 8 * v71) = v68;
            int v72 = v71 + 1;
          }
          *(_DWORD *)(a1 + 336) = v72;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 904) {
            goto LABEL_347;
          }
        }
      case 0x32u:
        if (v9 != 146) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x4000000u;
        v73 = *(void **)(a1 + 656);
        if (v73) {
          goto LABEL_404;
        }
        v74 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v74 = (void *)*v74;
        }
        v73 = sub_1448DC4((uint64_t)v74);
        *(void *)(a1 + 656) = v73;
        goto LABEL_403;
      case 0x33u:
        if (v9 != 154) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x8000000u;
        v75 = *(void **)(a1 + 664);
        if (!v75)
        {
          v76 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v198) {
            v76 = (void *)*v76;
          }
          v75 = sub_1449EB4((uint64_t)v76);
          *(void *)(a1 + 664) = v75;
          int v8 = v212[0];
        }
        double result = (char *)sub_123257C(a3, (uint64_t)v75, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x34u:
        if (v9 != 162) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v166 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v167 = *(_DWORD **)(a1 + 368);
          if (v167 && (uint64_t v168 = *(int *)(a1 + 360), (int)v168 < *v167))
          {
            *(_DWORD *)(a1 + 360) = v168 + 1;
            uint64_t v169 = *(void *)&v167[2 * v168 + 2];
          }
          else
          {
            v170 = sub_1449EB4(*v199);
            uint64_t v169 = sub_188CDC8((uint64_t)v199, (uint64_t)v170);
            v166 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_123257C(a3, v169, v166);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 930) {
            goto LABEL_347;
          }
        }
      case 0x35u:
        if (v9 != 168) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 0x40u;
        v171 = v8 + 1;
        uint64_t v172 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_394;
        }
        int v173 = *v171;
        uint64_t v172 = v172 + (v173 << 7) - 128;
        if (v173 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, v172);
          v212[0] = result;
          *(void *)(a1 + 736) = v191;
          if (!result) {
            return result;
          }
        }
        else
        {
          v171 = v8 + 2;
LABEL_394:
          v212[0] = v171;
          *(void *)(a1 + 736) = v172;
        }
        goto LABEL_347;
      case 0x36u:
        if (v9 != 177) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 0x80u;
        uint64_t v77 = *(void *)v8;
        uint64_t v15 = v8 + 8;
        *(void *)(a1 + 744) = v77;
        goto LABEL_397;
      case 0x37u:
        if (v9 != 185) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 0x100u;
        uint64_t v174 = *(void *)v8;
        uint64_t v15 = v8 + 8;
        *(void *)(a1 + 752) = v174;
LABEL_397:
        v212[0] = v15;
        goto LABEL_347;
      case 0x38u:
        if (v9 != 194) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 0x10000000u;
        v73 = *(void **)(a1 + 672);
        if (v73) {
          goto LABEL_404;
        }
        v175 = (void *)(*v198 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v198) {
          v175 = (void *)*v175;
        }
        v73 = sub_1448DC4((uint64_t)v175);
        *(void *)(a1 + 672) = v73;
LABEL_403:
        int v8 = v212[0];
LABEL_404:
        double result = (char *)sub_123B5A4(a3, (uint64_t)v73, (unsigned __int8 *)v8);
        goto LABEL_346;
      case 0x39u:
        if (v9 != 202) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v78 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v79 = *(_DWORD **)(a1 + 392);
          if (v79 && (uint64_t v80 = *(int *)(a1 + 384), (int)v80 < *v79))
          {
            *(_DWORD *)(a1 + 384) = v80 + 1;
            uint64_t v81 = *(void *)&v79[2 * v80 + 2];
          }
          else
          {
            v82 = sub_1448DC4(*v208);
            uint64_t v81 = sub_188CDC8((uint64_t)v208, (uint64_t)v82);
            v78 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_123B5A4(a3, v81, v78);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 970) {
            goto LABEL_347;
          }
        }
      case 0x3Au:
        if (v9 != 208) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 20) |= 0x200u;
        v176 = v8 + 1;
        uint64_t v177 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_409;
        }
        int v178 = *v176;
        uint64_t v177 = v177 + (v178 << 7) - 128;
        if (v178 < 0)
        {
          double result = (char *)sub_188C138((uint64_t)v8, v177);
          v212[0] = result;
          *(void *)(a1 + 760) = v192;
          if (!result) {
            return result;
          }
        }
        else
        {
          v176 = v8 + 2;
LABEL_409:
          v212[0] = v176;
          *(void *)(a1 + 760) = v177;
        }
        goto LABEL_347;
      case 0x3Bu:
        if (v9 != 218) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v83 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v84 = *(_DWORD **)(a1 + 416);
          if (v84 && (uint64_t v85 = *(int *)(a1 + 408), (int)v85 < *v84))
          {
            *(_DWORD *)(a1 + 408) = v85 + 1;
            uint64_t v86 = *(void *)&v84[2 * v85 + 2];
          }
          else
          {
            uint64_t v87 = sub_144BD58(*v209);
            uint64_t v86 = sub_188CDC8((uint64_t)v209, v87);
            v83 = (unsigned __int8 *)v212[0];
          }
          double result = (char *)sub_123BC64(a3, v86, v83);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 986) {
            goto LABEL_347;
          }
        }
      case 0x3Cu:
        if (v9 != 226) {
          goto LABEL_443;
        }
        double result = v8 - 2;
        while (1)
        {
          v179 = (unsigned __int8 *)(result + 2);
          v212[0] = result + 2;
          v180 = *(_DWORD **)(a1 + 440);
          if (v180 && (uint64_t v181 = *(int *)(a1 + 432), (int)v181 < *v180))
          {
            *(_DWORD *)(a1 + 432) = v181 + 1;
            uint64_t v182 = *(void *)&v180[2 * v181 + 2];
          }
          else
          {
            uint64_t v183 = sub_144CE80(*v210);
            uint64_t v182 = sub_188CDC8((uint64_t)v210, v183);
            v179 = (unsigned __int8 *)v212[0];
          }
          double result = sub_123BCF4(a3, v182, v179);
          v212[0] = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 994) {
            goto LABEL_347;
          }
        }
      case 0x3Du:
        if (v9 != 234) {
          goto LABEL_443;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v88 = *(void *)(a1 + 8);
        int v18 = (uint64_t *)(v88 & 0xFFFFFFFFFFFFFFFCLL);
        if (v88) {
          int v18 = (uint64_t *)*v18;
        }
        uint64_t v19 = (void *)(a1 + 472);
LABEL_258:
        v123 = (std::string *)sub_1880F84(v19, v18);
        double result = (char *)sub_188C244(v123, v212[0], (uint64_t)a3);
        goto LABEL_346;
      default:
        goto LABEL_443;
    }
  }
}

uint64_t sub_15A0170(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15A40D4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15A0200(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x20000000) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(void *)(a1 + 680);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  int v10 = *(_DWORD *)(a1 + 40);
  if (v10)
  {
    for (int i = 0; i != v10; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8 * i + 8);
      char *v4 = 18;
      unsigned int v13 = *(_DWORD *)(v12 + 20);
      v4[1] = v13;
      if (v13 > 0x7F) {
        int v14 = sub_188A9CC(v13, v4 + 1);
      }
      else {
        int v14 = v4 + 2;
      }
      uint64_t v4 = sub_15A4448(v12, v14, a3);
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v15 = *(void *)(a1 + 480);
    char *v4 = 26;
    unsigned int v16 = *(_DWORD *)(v15 + 20);
    v4[1] = v16;
    if (v16 > 0x7F) {
      uint64_t v17 = sub_188A9CC(v16, v4 + 1);
    }
    else {
      uint64_t v17 = v4 + 2;
    }
    uint64_t v4 = sub_15B9320(v15, v17, a3);
    if ((v6 & 0x20) == 0)
    {
LABEL_18:
      if ((v6 & 0x40000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_32;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_18;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v18 = *(void *)(a1 + 488);
  char *v4 = 34;
  unsigned int v19 = *(_DWORD *)(v18 + 44);
  v4[1] = v19;
  if (v19 > 0x7F) {
    uint64_t v20 = sub_188A9CC(v19, v4 + 1);
  }
  else {
    uint64_t v20 = v4 + 2;
  }
  uint64_t v4 = sub_15B0C0C(v18, v20, a3);
  if ((v6 & 0x40000000) != 0)
  {
LABEL_32:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v21 = *(void *)(a1 + 688);
    char *v4 = 41;
    *(void *)(v4 + 1) = v21;
    v4 += 9;
  }
LABEL_35:
  uint64_t v22 = *(unsigned int *)(a1 + 56);
  if ((int)v22 >= 1)
  {
    for (uint64_t j = 0; j != v22; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8 * j);
      char *v4 = 48;
      v4[1] = v24;
      if (v24 > 0x7F)
      {
        v4[1] = v24 | 0x80;
        unint64_t v25 = v24 >> 7;
        v4[2] = v24 >> 7;
        v4 += 3;
        if (v24 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v26 = v25 >> 14;
            v25 >>= 7;
            *v4++ = v25;
          }
          while (v26);
        }
      }
      else
      {
        v4 += 2;
      }
    }
  }
  uint64_t v27 = *(unsigned int *)(a1 + 80);
  if ((int)v27 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 8 * v27;
    do
    {
      uint64_t v30 = *(void **)(*(void *)(a1 + 88) + v28 + 8);
      if (*((char *)v30 + 23) < 0)
      {
        int64_t v31 = v30[1];
        if (v31 > 127) {
          goto LABEL_55;
        }
      }
      else
      {
        int64_t v31 = *((unsigned __int8 *)v30 + 23);
      }
      if ((uint64_t)(*a3 - (void)v4 + 14) >= v31)
      {
        char *v4 = 58;
        v4[1] = v31;
        if (*((char *)v30 + 23) < 0) {
          uint64_t v30 = (void *)*v30;
        }
        uint64_t v32 = v4 + 2;
        memcpy(v32, v30, v31);
        uint64_t v4 = &v32[v31];
        goto LABEL_53;
      }
LABEL_55:
      uint64_t v4 = (char *)sub_188A868(a3, 7, (uint64_t)v30, v4);
LABEL_53:
      v28 += 8;
    }
    while (v29 != v28);
  }
  int v33 = *(_DWORD *)(a1 + 104);
  if (v33)
  {
    for (int k = 0; k != v33; ++k)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v35 = *(void *)(*(void *)(a1 + 112) + 8 * k + 8);
      char *v4 = 66;
      unsigned int v36 = *(_DWORD *)(v35 + 20);
      v4[1] = v36;
      if (v36 > 0x7F) {
        uint64_t v37 = sub_188A9CC(v36, v4 + 1);
      }
      else {
        uint64_t v37 = v4 + 2;
      }
      uint64_t v4 = sub_1412FD8(v35, v37, a3);
    }
  }
  if ((v6 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v38 = *(void *)(a1 + 496);
    char *v4 = 74;
    unsigned int v39 = *(_DWORD *)(v38 + 20);
    v4[1] = v39;
    if (v39 > 0x7F) {
      unint64_t v40 = sub_188A9CC(v39, v4 + 1);
    }
    else {
      unint64_t v40 = v4 + 2;
    }
    uint64_t v4 = sub_15B7AE4(v38, v40, a3);
  }
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 10, (const void **)(*(void *)(a1 + 448) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  int v41 = *(_DWORD *)(a1 + 128);
  if (v41)
  {
    for (int m = 0; m != v41; ++m)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v43 = *(void *)(*(void *)(a1 + 136) + 8 * m + 8);
      char *v4 = 90;
      unsigned int v44 = *(_DWORD *)(v43 + 20);
      v4[1] = v44;
      if (v44 > 0x7F) {
        v45 = sub_188A9CC(v44, v4 + 1);
      }
      else {
        v45 = v4 + 2;
      }
      uint64_t v4 = sub_1451A58(v43, (unint64_t)v45, a3);
    }
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 12, (const void **)(*(void *)(a1 + 456) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  int v46 = *(_DWORD *)(a1 + 152);
  if (v46)
  {
    for (int n = 0; n != v46; ++n)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v48 = *(void *)(*(void *)(a1 + 160) + 8 * n + 8);
      char *v4 = 106;
      unsigned int v49 = *(_DWORD *)(v48 + 20);
      v4[1] = v49;
      if (v49 > 0x7F) {
        int v50 = sub_188A9CC(v49, v4 + 1);
      }
      else {
        int v50 = v4 + 2;
      }
      uint64_t v4 = sub_149FD00(v48, v50, a3);
    }
  }
  if (v6 < 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v51 = *(void *)(a1 + 696);
    char *v4 = 113;
    *(void *)(v4 + 1) = v51;
    v4 += 9;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v52 = *(void *)(a1 + 704);
    char *v4 = 121;
    *(void *)(v4 + 1) = v52;
    v4 += 9;
  }
  int v53 = *(_DWORD *)(a1 + 16);
  if ((v53 & 4) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 16, (const void **)(*(void *)(a1 + 464) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  int v54 = *(_DWORD *)(a1 + 176);
  if (v54)
  {
    for (iint i = 0; ii != v54; ++ii)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v56 = *(void *)(*(void *)(a1 + 184) + 8 * ii + 8);
      *(_WORD *)uint64_t v4 = 394;
      unsigned int v57 = *(_DWORD *)(v56 + 44);
      v4[2] = v57;
      if (v57 > 0x7F) {
        v58 = sub_188A9CC(v57, v4 + 2);
      }
      else {
        v58 = v4 + 3;
      }
      uint64_t v4 = sub_1740568(v56, v58, a3);
    }
  }
  if ((v53 & 0x80) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v59 = *(void *)(a1 + 504);
    *(_WORD *)uint64_t v4 = 402;
    unsigned int v60 = *(_DWORD *)(v59 + 24);
    v4[2] = v60;
    if (v60 > 0x7F) {
      uint64_t v61 = sub_188A9CC(v60, v4 + 2);
    }
    else {
      uint64_t v61 = v4 + 3;
    }
    uint64_t v4 = sub_1408344(v59, (unint64_t)v61, a3);
  }
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v62 = *(void *)(a1 + 712);
    *(_WORD *)uint64_t v4 = 408;
    v4[2] = v62;
    if (v62 > 0x7F)
    {
      v4[2] = v62 | 0x80;
      unint64_t v63 = v62 >> 7;
      v4[3] = v62 >> 7;
      v4 += 4;
      if (v62 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v64 = v63 >> 14;
          v63 >>= 7;
          *v4++ = v63;
        }
        while (v64);
      }
    }
    else
    {
      v4 += 3;
    }
  }
  uint64_t v65 = *(unsigned int *)(a1 + 200);
  if ((int)v65 >= 1)
  {
    uint64_t v66 = 0;
    uint64_t v67 = 8 * v65;
    do
    {
      uint64_t v68 = *(void **)(*(void *)(a1 + 208) + v66 + 8);
      if (*((char *)v68 + 23) < 0)
      {
        int64_t v69 = v68[1];
        if (v69 > 127) {
          goto LABEL_134;
        }
      }
      else
      {
        int64_t v69 = *((unsigned __int8 *)v68 + 23);
      }
      if ((uint64_t)(*a3 - (void)v4 + 13) >= v69)
      {
        *(_WORD *)uint64_t v4 = 418;
        v4[2] = v69;
        if (*((char *)v68 + 23) < 0) {
          uint64_t v68 = (void *)*v68;
        }
        uint64_t v70 = v4 + 3;
        memcpy(v70, v68, v69);
        uint64_t v4 = &v70[v69];
        goto LABEL_132;
      }
LABEL_134:
      uint64_t v4 = (char *)sub_188A868(a3, 20, (uint64_t)v68, v4);
LABEL_132:
      v66 += 8;
    }
    while (v67 != v66);
  }
  int v71 = *(_DWORD *)(a1 + 16);
  if ((v71 & 0x100) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v72 = *(void *)(a1 + 512);
    *(_WORD *)uint64_t v4 = 426;
    unsigned int v73 = *(_DWORD *)(v72 + 40);
    v4[2] = v73;
    if (v73 > 0x7F) {
      v74 = sub_188A9CC(v73, v4 + 2);
    }
    else {
      v74 = v4 + 3;
    }
    uint64_t v4 = sub_15A5438(v72, v74, a3);
    if ((v71 & 0x200) == 0)
    {
LABEL_137:
      if ((v71 & 0x400) == 0) {
        goto LABEL_138;
      }
      goto LABEL_152;
    }
  }
  else if ((v71 & 0x200) == 0)
  {
    goto LABEL_137;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v75 = *(void *)(a1 + 520);
  *(_WORD *)uint64_t v4 = 434;
  unsigned int v76 = *(_DWORD *)(v75 + 40);
  v4[2] = v76;
  if (v76 > 0x7F) {
    uint64_t v77 = sub_188A9CC(v76, v4 + 2);
  }
  else {
    uint64_t v77 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v75, v77, a3);
  if ((v71 & 0x400) == 0)
  {
LABEL_138:
    if ((v71 & 0x800) == 0) {
      goto LABEL_164;
    }
    goto LABEL_158;
  }
LABEL_152:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v78 = *(void *)(a1 + 528);
  *(_WORD *)uint64_t v4 = 442;
  unsigned int v79 = *(_DWORD *)(v78 + 20);
  v4[2] = v79;
  if (v79 > 0x7F) {
    uint64_t v80 = sub_188A9CC(v79, v4 + 2);
  }
  else {
    uint64_t v80 = v4 + 3;
  }
  uint64_t v4 = sub_141894C(v78, v80, a3);
  if ((v71 & 0x800) != 0)
  {
LABEL_158:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v81 = *(void *)(a1 + 536);
    *(_WORD *)uint64_t v4 = 450;
    unsigned int v82 = *(_DWORD *)(v81 + 20);
    v4[2] = v82;
    if (v82 > 0x7F) {
      v83 = sub_188A9CC(v82, v4 + 2);
    }
    else {
      v83 = v4 + 3;
    }
    uint64_t v4 = sub_141E08C(v81, (unint64_t)v83, a3);
  }
LABEL_164:
  int v84 = *(_DWORD *)(a1 + 224);
  if (v84)
  {
    for (juint64_t j = 0; jj != v84; ++jj)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v86 = *(void *)(*(void *)(a1 + 232) + 8 * jj + 8);
      *(_WORD *)uint64_t v4 = 458;
      unsigned int v87 = *(_DWORD *)(v86 + 20);
      v4[2] = v87;
      if (v87 > 0x7F) {
        uint64_t v88 = sub_188A9CC(v87, v4 + 2);
      }
      else {
        uint64_t v88 = v4 + 3;
      }
      uint64_t v4 = sub_15A4448(v86, v88, a3);
    }
  }
  if ((v71 & 0x1000) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v89 = *(void *)(a1 + 544);
    *(_WORD *)uint64_t v4 = 466;
    unsigned int v90 = *(_DWORD *)(v89 + 40);
    v4[2] = v90;
    if (v90 > 0x7F) {
      uint64_t v91 = sub_188A9CC(v90, v4 + 2);
    }
    else {
      uint64_t v91 = v4 + 3;
    }
    uint64_t v4 = sub_15A5438(v89, v91, a3);
  }
  if ((v71 & 0x2000) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v92 = *(void *)(a1 + 552);
    *(_WORD *)uint64_t v4 = 474;
    unsigned int v93 = *(_DWORD *)(v92 + 40);
    v4[2] = v93;
    if (v93 > 0x7F) {
      uint64_t v94 = sub_188A9CC(v93, v4 + 2);
    }
    else {
      uint64_t v94 = v4 + 3;
    }
    uint64_t v4 = sub_15A5438(v92, v94, a3);
  }
  if ((*(unsigned char *)(a1 + 21) & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v95 = *(int *)(a1 + 768);
    *(_WORD *)uint64_t v4 = 480;
    v4[2] = v95;
    if (v95 > 0x7F)
    {
      v4[2] = v95 | 0x80;
      unint64_t v96 = v95 >> 7;
      v4[3] = v95 >> 7;
      v4 += 4;
      if (v95 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v97 = v96 >> 14;
          v96 >>= 7;
          *v4++ = v96;
        }
        while (v97);
      }
    }
    else
    {
      v4 += 3;
    }
  }
  int v98 = *(_DWORD *)(a1 + 16);
  if ((v98 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v99 = *(void *)(a1 + 560);
    *(_WORD *)uint64_t v4 = 490;
    unsigned int v100 = *(_DWORD *)(v99 + 40);
    v4[2] = v100;
    if (v100 > 0x7F) {
      uint64_t v101 = sub_188A9CC(v100, v4 + 2);
    }
    else {
      uint64_t v101 = v4 + 3;
    }
    uint64_t v4 = sub_15A5438(v99, v101, a3);
    if ((v98 & 0x8000) == 0)
    {
LABEL_195:
      if ((v98 & 0x10000) == 0) {
        goto LABEL_196;
      }
      goto LABEL_212;
    }
  }
  else if ((v98 & 0x8000) == 0)
  {
    goto LABEL_195;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v102 = *(void *)(a1 + 568);
  *(_WORD *)uint64_t v4 = 498;
  unsigned int v103 = *(_DWORD *)(v102 + 40);
  v4[2] = v103;
  if (v103 > 0x7F) {
    v104 = sub_188A9CC(v103, v4 + 2);
  }
  else {
    v104 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v102, v104, a3);
  if ((v98 & 0x10000) == 0)
  {
LABEL_196:
    if ((v98 & 0x20000) == 0) {
      goto LABEL_197;
    }
    goto LABEL_218;
  }
LABEL_212:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v105 = *(void *)(a1 + 576);
  *(_WORD *)uint64_t v4 = 506;
  unsigned int v106 = *(_DWORD *)(v105 + 40);
  v4[2] = v106;
  if (v106 > 0x7F) {
    v107 = sub_188A9CC(v106, v4 + 2);
  }
  else {
    v107 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v105, v107, a3);
  if ((v98 & 0x20000) == 0)
  {
LABEL_197:
    if ((v98 & 0x40000) == 0) {
      goto LABEL_198;
    }
    goto LABEL_224;
  }
LABEL_218:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v108 = *(void *)(a1 + 584);
  *(_WORD *)uint64_t v4 = 642;
  unsigned int v109 = *(_DWORD *)(v108 + 40);
  v4[2] = v109;
  if (v109 > 0x7F) {
    v110 = sub_188A9CC(v109, v4 + 2);
  }
  else {
    v110 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v108, v110, a3);
  if ((v98 & 0x40000) == 0)
  {
LABEL_198:
    if ((v98 & 0x80000) == 0) {
      goto LABEL_236;
    }
    goto LABEL_230;
  }
LABEL_224:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v111 = *(void *)(a1 + 592);
  *(_WORD *)uint64_t v4 = 650;
  unsigned int v112 = *(_DWORD *)(v111 + 40);
  v4[2] = v112;
  if (v112 > 0x7F) {
    uint64_t v113 = sub_188A9CC(v112, v4 + 2);
  }
  else {
    uint64_t v113 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v111, v113, a3);
  if ((v98 & 0x80000) != 0)
  {
LABEL_230:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v114 = *(void *)(a1 + 600);
    *(_WORD *)uint64_t v4 = 658;
    unsigned int v115 = *(_DWORD *)(v114 + 20);
    v4[2] = v115;
    if (v115 > 0x7F) {
      v116 = sub_188A9CC(v115, v4 + 2);
    }
    else {
      v116 = v4 + 3;
    }
    uint64_t v4 = sub_1418408(v114, (unint64_t)v116, a3);
  }
LABEL_236:
  int v117 = *(_DWORD *)(a1 + 20);
  if ((v117 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v118 = *(unsigned char *)(a1 + 720);
    *(_WORD *)uint64_t v4 = 664;
    v4[2] = v118;
    v4 += 3;
  }
  if ((v117 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v119 = *(unsigned char *)(a1 + 721);
    *(_WORD *)uint64_t v4 = 672;
    v4[2] = v119;
    v4 += 3;
  }
  int v120 = *(_DWORD *)(a1 + 16);
  if ((v120 & 0x100000) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v121 = *(void *)(a1 + 608);
    *(_WORD *)uint64_t v4 = 682;
    unsigned int v122 = *(_DWORD *)(v121 + 40);
    v4[2] = v122;
    if (v122 > 0x7F) {
      v123 = sub_188A9CC(v122, v4 + 2);
    }
    else {
      v123 = v4 + 3;
    }
    uint64_t v4 = sub_15A5438(v121, v123, a3);
    if ((v120 & 0x200000) == 0)
    {
LABEL_246:
      if ((v120 & 0x400000) == 0) {
        goto LABEL_247;
      }
      goto LABEL_263;
    }
  }
  else if ((v120 & 0x200000) == 0)
  {
    goto LABEL_246;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v124 = *(void *)(a1 + 616);
  *(_WORD *)uint64_t v4 = 690;
  unsigned int v125 = *(_DWORD *)(v124 + 40);
  v4[2] = v125;
  if (v125 > 0x7F) {
    uint64_t v126 = sub_188A9CC(v125, v4 + 2);
  }
  else {
    uint64_t v126 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v124, v126, a3);
  if ((v120 & 0x400000) == 0)
  {
LABEL_247:
    if ((v120 & 0x800000) == 0) {
      goto LABEL_248;
    }
    goto LABEL_269;
  }
LABEL_263:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v127 = *(void *)(a1 + 624);
  *(_WORD *)uint64_t v4 = 698;
  unsigned int v128 = *(_DWORD *)(v127 + 40);
  v4[2] = v128;
  if (v128 > 0x7F) {
    int v129 = sub_188A9CC(v128, v4 + 2);
  }
  else {
    int v129 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v127, v129, a3);
  if ((v120 & 0x800000) == 0)
  {
LABEL_248:
    if ((v120 & 0x1000000) == 0) {
      goto LABEL_249;
    }
    goto LABEL_275;
  }
LABEL_269:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v130 = *(void *)(a1 + 632);
  *(_WORD *)uint64_t v4 = 706;
  unsigned int v131 = *(_DWORD *)(v130 + 40);
  v4[2] = v131;
  if (v131 > 0x7F) {
    uint64_t v132 = sub_188A9CC(v131, v4 + 2);
  }
  else {
    uint64_t v132 = v4 + 3;
  }
  uint64_t v4 = sub_15A5438(v130, v132, a3);
  if ((v120 & 0x1000000) == 0)
  {
LABEL_249:
    if ((v120 & 0x2000000) == 0) {
      goto LABEL_287;
    }
    goto LABEL_281;
  }
LABEL_275:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v133 = *(void *)(a1 + 640);
  *(_WORD *)uint64_t v4 = 714;
  unsigned int v134 = *(_DWORD *)(v133 + 112);
  v4[2] = v134;
  if (v134 > 0x7F) {
    v135 = sub_188A9CC(v134, v4 + 2);
  }
  else {
    v135 = v4 + 3;
  }
  uint64_t v4 = sub_141A868(v133, v135, a3);
  if ((v120 & 0x2000000) != 0)
  {
LABEL_281:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v136 = *(void *)(a1 + 648);
    *(_WORD *)uint64_t v4 = 722;
    unsigned int v137 = *(_DWORD *)(v136 + 20);
    v4[2] = v137;
    if (v137 > 0x7F) {
      v138 = sub_188A9CC(v137, v4 + 2);
    }
    else {
      v138 = v4 + 3;
    }
    uint64_t v4 = sub_143A80C(v136, (unint64_t)v138, a3);
  }
LABEL_287:
  int v139 = *(_DWORD *)(a1 + 248);
  if (v139)
  {
    for (kint k = 0; kk != v139; ++kk)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v141 = *(void *)(*(void *)(a1 + 256) + 8 * kk + 8);
      *(_WORD *)uint64_t v4 = 730;
      unsigned int v142 = *(_DWORD *)(v141 + 20);
      v4[2] = v142;
      if (v142 > 0x7F) {
        v143 = sub_188A9CC(v142, v4 + 2);
      }
      else {
        v143 = v4 + 3;
      }
      uint64_t v4 = sub_15A30C0(v141, v143, a3);
    }
  }
  int v144 = *(_DWORD *)(a1 + 20);
  if ((v144 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v145 = *(int *)(a1 + 724);
    *(_WORD *)uint64_t v4 = 736;
    v4[2] = v145;
    if (v145 > 0x7F)
    {
      v4[2] = v145 | 0x80;
      unint64_t v146 = v145 >> 7;
      v4[3] = v145 >> 7;
      v4 += 4;
      if (v145 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v147 = v146 >> 14;
          v146 >>= 7;
          *v4++ = v146;
        }
        while (v147);
      }
    }
    else
    {
      v4 += 3;
    }
  }
  int v148 = *(_DWORD *)(a1 + 272);
  if (v148)
  {
    for (mint m = 0; mm != v148; ++mm)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v150 = *(void *)(*(void *)(a1 + 280) + 8 * mm + 8);
      *(_WORD *)uint64_t v4 = 746;
      unsigned int v151 = *(_DWORD *)(v150 + 56);
      v4[2] = v151;
      if (v151 > 0x7F) {
        v152 = sub_188A9CC(v151, v4 + 2);
      }
      else {
        v152 = v4 + 3;
      }
      uint64_t v4 = sub_14536EC(v150, v152, a3);
    }
  }
  int v153 = *(_DWORD *)(a1 + 296);
  if (v153)
  {
    for (nint n = 0; nn != v153; ++nn)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v155 = *(void *)(*(void *)(a1 + 304) + 8 * nn + 8);
      *(_WORD *)uint64_t v4 = 754;
      unsigned int v156 = *(_DWORD *)(v155 + 20);
      v4[2] = v156;
      if (v156 > 0x7F) {
        uint64_t v157 = sub_188A9CC(v156, v4 + 2);
      }
      else {
        uint64_t v157 = v4 + 3;
      }
      uint64_t v4 = sub_1411F40(v155, (unint64_t)v157, a3);
    }
  }
  if ((v144 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v158 = *(void *)(a1 + 728);
    *(_WORD *)uint64_t v4 = 760;
    v4[2] = v158;
    if (v158 > 0x7F)
    {
      v4[2] = v158 | 0x80;
      unint64_t v159 = v158 >> 7;
      v4[3] = v158 >> 7;
      v4 += 4;
      if (v158 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v160 = v159 >> 14;
          v159 >>= 7;
          *v4++ = v159;
        }
        while (v160);
      }
    }
    else
    {
      v4 += 3;
    }
  }
  int v161 = *(_DWORD *)(a1 + 320);
  if (v161)
  {
    for (int i1 = 0; i1 != v161; ++i1)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v163 = *(void *)(*(void *)(a1 + 328) + 8 * i1 + 8);
      *(_WORD *)uint64_t v4 = 898;
      unsigned int v164 = *(_DWORD *)(v163 + 44);
      v4[2] = v164;
      if (v164 > 0x7F) {
        int v165 = sub_188A9CC(v164, v4 + 2);
      }
      else {
        int v165 = v4 + 3;
      }
      uint64_t v4 = sub_1443EFC(v163, v165, a3);
    }
  }
  uint64_t v166 = *(unsigned int *)(a1 + 336);
  if ((int)v166 >= 1)
  {
    for (uint64_t i2 = 0; i2 != v166; ++i2)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v168 = *(void *)(*(void *)(a1 + 344) + 8 * i2);
      *(_WORD *)uint64_t v4 = 904;
      v4[2] = v168;
      if (v168 > 0x7F)
      {
        v4[2] = v168 | 0x80;
        unint64_t v169 = v168 >> 7;
        v4[3] = v168 >> 7;
        v4 += 4;
        if (v168 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v170 = v169 >> 14;
            v169 >>= 7;
            *v4++ = v169;
          }
          while (v170);
        }
      }
      else
      {
        v4 += 3;
      }
    }
  }
  int v171 = *(_DWORD *)(a1 + 16);
  if ((v171 & 0x4000000) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v172 = *(void *)(a1 + 656);
    *(_WORD *)uint64_t v4 = 914;
    unsigned int v173 = *(_DWORD *)(v172 + 20);
    v4[2] = v173;
    if (v173 > 0x7F) {
      uint64_t v174 = sub_188A9CC(v173, v4 + 2);
    }
    else {
      uint64_t v174 = v4 + 3;
    }
    uint64_t v4 = sub_13F721C(v172, v174, a3);
  }
  if ((v171 & 0x8000000) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v175 = *(void *)(a1 + 664);
    *(_WORD *)uint64_t v4 = 922;
    unsigned int v176 = *(_DWORD *)(v175 + 20);
    v4[2] = v176;
    if (v176 > 0x7F) {
      uint64_t v177 = sub_188A9CC(v176, v4 + 2);
    }
    else {
      uint64_t v177 = v4 + 3;
    }
    uint64_t v4 = sub_140CAC4(v175, v177, a3);
  }
  int v178 = *(_DWORD *)(a1 + 360);
  if (v178)
  {
    for (int i3 = 0; i3 != v178; ++i3)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v180 = *(void *)(*(void *)(a1 + 368) + 8 * i3 + 8);
      *(_WORD *)uint64_t v4 = 930;
      unsigned int v181 = *(_DWORD *)(v180 + 20);
      v4[2] = v181;
      if (v181 > 0x7F) {
        uint64_t v182 = sub_188A9CC(v181, v4 + 2);
      }
      else {
        uint64_t v182 = v4 + 3;
      }
      uint64_t v4 = sub_140CAC4(v180, v182, a3);
    }
  }
  int v183 = *(_DWORD *)(a1 + 20);
  if ((v183 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v184 = *(void *)(a1 + 736);
    *(_WORD *)uint64_t v4 = 936;
    v4[2] = v184;
    if (v184 > 0x7F)
    {
      v4[2] = v184 | 0x80;
      unint64_t v185 = v184 >> 7;
      v4[3] = v184 >> 7;
      v4 += 4;
      if (v184 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v186 = v185 >> 14;
          v185 >>= 7;
          *v4++ = v185;
        }
        while (v186);
      }
    }
    else
    {
      v4 += 3;
    }
  }
  if ((v183 & 0x80) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v187 = *(void *)(a1 + 744);
    *(_WORD *)uint64_t v4 = 945;
    *(void *)(v4 + 2) = v187;
    v4 += 10;
  }
  if ((v183 & 0x100) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v188 = *(void *)(a1 + 752);
    *(_WORD *)uint64_t v4 = 953;
    *(void *)(v4 + 2) = v188;
    v4 += 10;
  }
  if ((*(unsigned char *)(a1 + 19) & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v189 = *(void *)(a1 + 672);
    *(_WORD *)uint64_t v4 = 962;
    unsigned int v190 = *(_DWORD *)(v189 + 20);
    v4[2] = v190;
    if (v190 > 0x7F) {
      uint64_t v191 = sub_188A9CC(v190, v4 + 2);
    }
    else {
      uint64_t v191 = v4 + 3;
    }
    uint64_t v4 = sub_13F721C(v189, v191, a3);
  }
  int v192 = *(_DWORD *)(a1 + 384);
  if (v192)
  {
    for (int i4 = 0; i4 != v192; ++i4)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v194 = *(void *)(*(void *)(a1 + 392) + 8 * i4 + 8);
      *(_WORD *)uint64_t v4 = 970;
      unsigned int v195 = *(_DWORD *)(v194 + 20);
      v4[2] = v195;
      if (v195 > 0x7F) {
        v196 = sub_188A9CC(v195, v4 + 2);
      }
      else {
        v196 = v4 + 3;
      }
      uint64_t v4 = sub_13F721C(v194, v196, a3);
    }
  }
  if ((*(unsigned char *)(a1 + 21) & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v197 = *(void *)(a1 + 760);
    *(_WORD *)uint64_t v4 = 976;
    v4[2] = v197;
    if (v197 > 0x7F)
    {
      v4[2] = v197 | 0x80;
      unint64_t v198 = v197 >> 7;
      v4[3] = v197 >> 7;
      v4 += 4;
      if (v197 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v199 = v198 >> 14;
          v198 >>= 7;
          *v4++ = v198;
        }
        while (v199);
      }
    }
    else
    {
      v4 += 3;
    }
  }
  int v200 = *(_DWORD *)(a1 + 408);
  if (v200)
  {
    for (int i5 = 0; i5 != v200; ++i5)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v202 = *(void *)(*(void *)(a1 + 416) + 8 * i5 + 8);
      *(_WORD *)uint64_t v4 = 986;
      unsigned int v203 = *(_DWORD *)(v202 + 20);
      v4[2] = v203;
      if (v203 > 0x7F) {
        v204 = sub_188A9CC(v203, v4 + 2);
      }
      else {
        v204 = v4 + 3;
      }
      uint64_t v4 = sub_1431148(v202, (unint64_t)v204, a3);
    }
  }
  int v205 = *(_DWORD *)(a1 + 432);
  if (v205)
  {
    for (int i6 = 0; i6 != v205; ++i6)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v207 = *(void *)(*(void *)(a1 + 440) + 8 * i6 + 8);
      *(_WORD *)uint64_t v4 = 994;
      unsigned int v208 = *(_DWORD *)(v207 + 20);
      v4[2] = v208;
      if (v208 > 0x7F) {
        v209 = sub_188A9CC(v208, v4 + 2);
      }
      else {
        v209 = v4 + 3;
      }
      uint64_t v4 = sub_14489E4(v207, (unint64_t)v209, a3);
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 8) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 61, (const void **)(*(void *)(a1 + 472) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v210 = *(void *)(a1 + 8);
  if ((v210 & 1) == 0) {
    return v4;
  }
  unint64_t v212 = v210 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v212 + 31) < 0)
  {
    v213 = *(void **)(v212 + 8);
    uint64_t v214 = *(void *)(v212 + 16);
  }
  else
  {
    v213 = (void *)(v212 + 8);
    LODWORD(v214) = *(unsigned __int8 *)(v212 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v214)
  {
    uint64_t v215 = (int)v214;
    memcpy(v4, v213, (int)v214);
    v4 += v215;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v213, v214, v4);
}

uint64_t sub_15A1C38(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 19) & 0x20) != 0) {
    unint64_t v2 = ((9 * (__clz(*(void *)(a1 + 680) | 1) ^ 0x3F) + 73) >> 6) + 1;
  }
  else {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *(int *)(a1 + 40);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_15A4744(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v10 = sub_188D5A8((unsigned int *)(a1 + 56));
  uint64_t v11 = *(unsigned int *)(a1 + 80);
  uint64_t v12 = v10 + v11 + v4 + *(unsigned int *)(a1 + 56);
  if ((int)v11 >= 1)
  {
    unsigned int v13 = (uint64_t *)(*(void *)(a1 + 88) + 8);
    do
    {
      uint64_t v14 = *v13++;
      uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
      uint64_t v16 = *(void *)(v14 + 8);
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = v15;
      }
      v12 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6);
      --v11;
    }
    while (v11);
  }
  uint64_t v17 = *(int *)(a1 + 104);
  uint64_t v18 = v12 + v17;
  uint64_t v19 = *(void *)(a1 + 112);
  if (v19) {
    uint64_t v20 = (uint64_t *)(v19 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
  if (v17)
  {
    uint64_t v21 = 8 * v17;
    do
    {
      uint64_t v22 = *v20++;
      uint64_t v23 = sub_1413324(v22);
      v18 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6);
      v21 -= 8;
    }
    while (v21);
  }
  uint64_t v24 = *(int *)(a1 + 128);
  uint64_t v25 = v18 + v24;
  uint64_t v26 = *(void *)(a1 + 136);
  if (v26) {
    uint64_t v27 = (uint64_t *)(v26 + 8);
  }
  else {
    uint64_t v27 = 0;
  }
  if (v24)
  {
    uint64_t v28 = 8 * v24;
    do
    {
      uint64_t v29 = *v27++;
      uint64_t v30 = sub_1451D74(v29);
      v25 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6);
      v28 -= 8;
    }
    while (v28);
  }
  uint64_t v31 = *(int *)(a1 + 152);
  uint64_t v32 = v25 + v31;
  uint64_t v33 = *(void *)(a1 + 160);
  if (v33) {
    uint64_t v34 = (uint64_t *)(v33 + 8);
  }
  else {
    uint64_t v34 = 0;
  }
  if (v31)
  {
    uint64_t v35 = 8 * v31;
    do
    {
      uint64_t v36 = *v34++;
      uint64_t v37 = sub_149FDEC(v36);
      v32 += v37 + ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6);
      v35 -= 8;
    }
    while (v35);
  }
  uint64_t v38 = *(int *)(a1 + 176);
  uint64_t v39 = v32 + 2 * v38;
  uint64_t v40 = *(void *)(a1 + 184);
  if (v40) {
    int v41 = (uint64_t *)(v40 + 8);
  }
  else {
    int v41 = 0;
  }
  if (v38)
  {
    uint64_t v42 = 8 * v38;
    do
    {
      uint64_t v43 = *v41++;
      uint64_t v44 = sub_1740D5C(v43);
      v39 += v44 + ((9 * (__clz(v44 | 1) ^ 0x1F) + 73) >> 6);
      v42 -= 8;
    }
    while (v42);
  }
  uint64_t v45 = *(unsigned int *)(a1 + 200);
  uint64_t v46 = v39 + 2 * v45;
  if ((int)v45 >= 1)
  {
    int v47 = (uint64_t *)(*(void *)(a1 + 208) + 8);
    do
    {
      uint64_t v48 = *v47++;
      uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
      uint64_t v50 = *(void *)(v48 + 8);
      if ((v49 & 0x80u) == 0) {
        uint64_t v50 = v49;
      }
      v46 += v50 + ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6);
      --v45;
    }
    while (v45);
  }
  uint64_t v51 = *(int *)(a1 + 224);
  uint64_t v52 = v46 + 2 * v51;
  uint64_t v53 = *(void *)(a1 + 232);
  if (v53) {
    int v54 = (uint64_t *)(v53 + 8);
  }
  else {
    int v54 = 0;
  }
  if (v51)
  {
    uint64_t v55 = 8 * v51;
    do
    {
      uint64_t v56 = *v54++;
      uint64_t v57 = sub_15A4744(v56);
      v52 += v57 + ((9 * (__clz(v57 | 1) ^ 0x1F) + 73) >> 6);
      v55 -= 8;
    }
    while (v55);
  }
  uint64_t v58 = *(int *)(a1 + 248);
  uint64_t v59 = v52 + 2 * v58;
  uint64_t v60 = *(void *)(a1 + 256);
  if (v60) {
    uint64_t v61 = (uint64_t *)(v60 + 8);
  }
  else {
    uint64_t v61 = 0;
  }
  if (v58)
  {
    uint64_t v62 = 8 * v58;
    do
    {
      uint64_t v63 = *v61++;
      uint64_t v64 = sub_15A34CC(v63);
      v59 += v64 + ((9 * (__clz(v64 | 1) ^ 0x1F) + 73) >> 6);
      v62 -= 8;
    }
    while (v62);
  }
  uint64_t v65 = *(int *)(a1 + 272);
  uint64_t v66 = v59 + 2 * v65;
  uint64_t v67 = *(void *)(a1 + 280);
  if (v67) {
    uint64_t v68 = (uint64_t *)(v67 + 8);
  }
  else {
    uint64_t v68 = 0;
  }
  if (v65)
  {
    uint64_t v69 = 8 * v65;
    do
    {
      uint64_t v70 = *v68++;
      uint64_t v71 = sub_14538CC(v70);
      v66 += v71 + ((9 * (__clz(v71 | 1) ^ 0x1F) + 73) >> 6);
      v69 -= 8;
    }
    while (v69);
  }
  uint64_t v72 = *(int *)(a1 + 296);
  uint64_t v73 = v66 + 2 * v72;
  uint64_t v74 = *(void *)(a1 + 304);
  if (v74) {
    uint64_t v75 = (uint64_t *)(v74 + 8);
  }
  else {
    uint64_t v75 = 0;
  }
  if (v72)
  {
    uint64_t v76 = 8 * v72;
    do
    {
      uint64_t v77 = *v75++;
      uint64_t v78 = sub_14121EC(v77);
      v73 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6);
      v76 -= 8;
    }
    while (v76);
  }
  uint64_t v79 = *(int *)(a1 + 320);
  uint64_t v80 = v73 + 2 * v79;
  uint64_t v81 = *(void *)(a1 + 328);
  if (v81) {
    unsigned int v82 = (uint64_t *)(v81 + 8);
  }
  else {
    unsigned int v82 = 0;
  }
  if (v79)
  {
    uint64_t v83 = 8 * v79;
    do
    {
      uint64_t v84 = *v82++;
      uint64_t v85 = sub_1445008(v84);
      v80 += v85 + ((9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6);
      v83 -= 8;
    }
    while (v83);
  }
  uint64_t v86 = sub_188D5A8((unsigned int *)(a1 + 336));
  uint64_t v87 = *(int *)(a1 + 360);
  uint64_t v88 = v86 + v80 + 2 * (v87 + *(unsigned int *)(a1 + 336));
  uint64_t v89 = *(void *)(a1 + 368);
  if (v89) {
    unsigned int v90 = (uint64_t *)(v89 + 8);
  }
  else {
    unsigned int v90 = 0;
  }
  if (v87)
  {
    uint64_t v91 = 8 * v87;
    do
    {
      uint64_t v92 = *v90++;
      uint64_t v93 = sub_140CC00(v92);
      v88 += v93 + ((9 * (__clz(v93 | 1) ^ 0x1F) + 73) >> 6);
      v91 -= 8;
    }
    while (v91);
  }
  uint64_t v94 = *(int *)(a1 + 384);
  uint64_t v95 = v88 + 2 * v94;
  uint64_t v96 = *(void *)(a1 + 392);
  if (v96) {
    unint64_t v97 = (uint64_t *)(v96 + 8);
  }
  else {
    unint64_t v97 = 0;
  }
  if (v94)
  {
    uint64_t v98 = 8 * v94;
    do
    {
      uint64_t v99 = *v97++;
      uint64_t v100 = sub_13F73A8(v99);
      v95 += v100 + ((9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6);
      v98 -= 8;
    }
    while (v98);
  }
  uint64_t v101 = *(int *)(a1 + 408);
  uint64_t v102 = v95 + 2 * v101;
  uint64_t v103 = *(void *)(a1 + 416);
  if (v103) {
    v104 = (uint64_t *)(v103 + 8);
  }
  else {
    v104 = 0;
  }
  if (v101)
  {
    uint64_t v105 = 8 * v101;
    do
    {
      uint64_t v106 = *v104++;
      uint64_t v107 = sub_1431344(v106);
      v102 += v107 + ((9 * (__clz(v107 | 1) ^ 0x1F) + 73) >> 6);
      v105 -= 8;
    }
    while (v105);
  }
  uint64_t v108 = *(int *)(a1 + 432);
  uint64_t v109 = v102 + 2 * v108;
  uint64_t v110 = *(void *)(a1 + 440);
  if (v110) {
    uint64_t v111 = (uint64_t *)(v110 + 8);
  }
  else {
    uint64_t v111 = 0;
  }
  if (v108)
  {
    uint64_t v112 = 8 * v108;
    do
    {
      uint64_t v113 = *v111++;
      uint64_t v114 = sub_1448BF8(v113);
      v109 += v114 + ((9 * (__clz(v114 | 1) ^ 0x1F) + 73) >> 6);
      v112 -= 8;
    }
    while (v112);
  }
  int v115 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v115) {
    goto LABEL_108;
  }
  if (v115)
  {
    unint64_t v128 = *(void *)(a1 + 448) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v129 = *(unsigned __int8 *)(v128 + 23);
    uint64_t v130 = *(void *)(v128 + 8);
    if ((v129 & 0x80u) == 0) {
      uint64_t v130 = v129;
    }
    v109 += v130 + ((9 * (__clz(v130 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v115 & 2) == 0)
    {
LABEL_101:
      if ((v115 & 4) == 0) {
        goto LABEL_102;
      }
      goto LABEL_176;
    }
  }
  else if ((v115 & 2) == 0)
  {
    goto LABEL_101;
  }
  unint64_t v131 = *(void *)(a1 + 456) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v132 = *(unsigned __int8 *)(v131 + 23);
  uint64_t v133 = *(void *)(v131 + 8);
  if ((v132 & 0x80u) == 0) {
    uint64_t v133 = v132;
  }
  v109 += v133 + ((9 * (__clz(v133 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v115 & 4) == 0)
  {
LABEL_102:
    if ((v115 & 8) == 0) {
      goto LABEL_103;
    }
    goto LABEL_179;
  }
LABEL_176:
  unint64_t v134 = *(void *)(a1 + 464) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v135 = *(unsigned __int8 *)(v134 + 23);
  uint64_t v136 = *(void *)(v134 + 8);
  if ((v135 & 0x80u) == 0) {
    uint64_t v136 = v135;
  }
  v109 += v136 + ((9 * (__clz(v136 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 8) == 0)
  {
LABEL_103:
    if ((v115 & 0x10) == 0) {
      goto LABEL_104;
    }
    goto LABEL_182;
  }
LABEL_179:
  unint64_t v137 = *(void *)(a1 + 472) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v138 = *(unsigned __int8 *)(v137 + 23);
  uint64_t v139 = *(void *)(v137 + 8);
  if ((v138 & 0x80u) == 0) {
    uint64_t v139 = v138;
  }
  v109 += v139 + ((9 * (__clz(v139 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x10) == 0)
  {
LABEL_104:
    if ((v115 & 0x20) == 0) {
      goto LABEL_105;
    }
LABEL_183:
    uint64_t v141 = sub_15B0D90(*(void *)(a1 + 488));
    v109 += v141 + ((9 * (__clz(v141 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v115 & 0x40) == 0)
    {
LABEL_106:
      if ((v115 & 0x80) == 0) {
        goto LABEL_108;
      }
      goto LABEL_107;
    }
    goto LABEL_184;
  }
LABEL_182:
  uint64_t v140 = sub_15B956C(*(void *)(a1 + 480));
  v109 += v140 + ((9 * (__clz(v140 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v115 & 0x20) != 0) {
    goto LABEL_183;
  }
LABEL_105:
  if ((v115 & 0x40) == 0) {
    goto LABEL_106;
  }
LABEL_184:
  uint64_t v142 = sub_15B806C(*(void *)(a1 + 496));
  v109 += v142 + ((9 * (__clz(v142 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v115 & 0x80) != 0)
  {
LABEL_107:
    uint64_t v116 = sub_1409CD0(*(void *)(a1 + 504));
    v109 += v116 + ((9 * (__clz(v116 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_108:
  if ((v115 & 0xFF00) == 0) {
    goto LABEL_118;
  }
  if ((v115 & 0x100) != 0)
  {
    uint64_t v143 = sub_15A557C(*(void *)(a1 + 512));
    v109 += v143 + ((9 * (__clz(v143 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v115 & 0x200) == 0)
    {
LABEL_111:
      if ((v115 & 0x400) == 0) {
        goto LABEL_112;
      }
      goto LABEL_188;
    }
  }
  else if ((v115 & 0x200) == 0)
  {
    goto LABEL_111;
  }
  uint64_t v144 = sub_15A557C(*(void *)(a1 + 520));
  v109 += v144 + ((9 * (__clz(v144 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x400) == 0)
  {
LABEL_112:
    if ((v115 & 0x800) == 0) {
      goto LABEL_113;
    }
    goto LABEL_189;
  }
LABEL_188:
  uint64_t v145 = sub_1418A38(*(void *)(a1 + 528));
  v109 += v145 + ((9 * (__clz(v145 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x800) == 0)
  {
LABEL_113:
    if ((v115 & 0x1000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_190;
  }
LABEL_189:
  uint64_t v146 = sub_141EC10(*(void *)(a1 + 536));
  v109 += v146 + ((9 * (__clz(v146 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x1000) == 0)
  {
LABEL_114:
    if ((v115 & 0x2000) == 0) {
      goto LABEL_115;
    }
    goto LABEL_191;
  }
LABEL_190:
  uint64_t v147 = sub_15A557C(*(void *)(a1 + 544));
  v109 += v147 + ((9 * (__clz(v147 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x2000) == 0)
  {
LABEL_115:
    if ((v115 & 0x4000) == 0) {
      goto LABEL_116;
    }
    goto LABEL_192;
  }
LABEL_191:
  uint64_t v148 = sub_15A557C(*(void *)(a1 + 552));
  v109 += v148 + ((9 * (__clz(v148 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x4000) == 0)
  {
LABEL_116:
    if ((v115 & 0x8000) == 0) {
      goto LABEL_118;
    }
    goto LABEL_117;
  }
LABEL_192:
  uint64_t v149 = sub_15A557C(*(void *)(a1 + 560));
  v109 += v149 + ((9 * (__clz(v149 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x8000) != 0)
  {
LABEL_117:
    uint64_t v117 = sub_15A557C(*(void *)(a1 + 568));
    v109 += v117 + ((9 * (__clz(v117 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_118:
  if ((v115 & 0xFF0000) == 0) {
    goto LABEL_128;
  }
  if ((v115 & 0x10000) != 0)
  {
    uint64_t v150 = sub_15A557C(*(void *)(a1 + 576));
    v109 += v150 + ((9 * (__clz(v150 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v115 & 0x20000) == 0)
    {
LABEL_121:
      if ((v115 & 0x40000) == 0) {
        goto LABEL_122;
      }
      goto LABEL_196;
    }
  }
  else if ((v115 & 0x20000) == 0)
  {
    goto LABEL_121;
  }
  uint64_t v151 = sub_15A557C(*(void *)(a1 + 584));
  v109 += v151 + ((9 * (__clz(v151 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x40000) == 0)
  {
LABEL_122:
    if ((v115 & 0x80000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_197;
  }
LABEL_196:
  uint64_t v152 = sub_15A557C(*(void *)(a1 + 592));
  v109 += v152 + ((9 * (__clz(v152 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x80000) == 0)
  {
LABEL_123:
    if ((v115 & 0x100000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_198;
  }
LABEL_197:
  uint64_t v153 = sub_14185D8(*(void *)(a1 + 600));
  v109 += v153 + ((9 * (__clz(v153 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x100000) == 0)
  {
LABEL_124:
    if ((v115 & 0x200000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_199;
  }
LABEL_198:
  uint64_t v154 = sub_15A557C(*(void *)(a1 + 608));
  v109 += v154 + ((9 * (__clz(v154 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x200000) == 0)
  {
LABEL_125:
    if ((v115 & 0x400000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_200;
  }
LABEL_199:
  uint64_t v155 = sub_15A557C(*(void *)(a1 + 616));
  v109 += v155 + ((9 * (__clz(v155 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x400000) == 0)
  {
LABEL_126:
    if ((v115 & 0x800000) == 0) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }
LABEL_200:
  uint64_t v156 = sub_15A557C(*(void *)(a1 + 624));
  v109 += v156 + ((9 * (__clz(v156 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x800000) != 0)
  {
LABEL_127:
    uint64_t v118 = sub_15A557C(*(void *)(a1 + 632));
    v109 += v118 + ((9 * (__clz(v118 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_128:
  if ((v115 & 0x1F000000) == 0) {
    goto LABEL_135;
  }
  if ((v115 & 0x1000000) != 0)
  {
    uint64_t v157 = sub_141AB38(*(void *)(a1 + 640));
    v109 += v157 + ((9 * (__clz(v157 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v115 & 0x2000000) == 0)
    {
LABEL_131:
      if ((v115 & 0x4000000) == 0) {
        goto LABEL_132;
      }
      goto LABEL_204;
    }
  }
  else if ((v115 & 0x2000000) == 0)
  {
    goto LABEL_131;
  }
  uint64_t v158 = sub_143AA34(*(void *)(a1 + 648));
  v109 += v158 + ((9 * (__clz(v158 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x4000000) == 0)
  {
LABEL_132:
    if ((v115 & 0x8000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_205;
  }
LABEL_204:
  uint64_t v159 = sub_13F73A8(*(void *)(a1 + 656));
  v109 += v159 + ((9 * (__clz(v159 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x8000000) == 0)
  {
LABEL_133:
    if ((v115 & 0x10000000) == 0) {
      goto LABEL_135;
    }
    goto LABEL_134;
  }
LABEL_205:
  uint64_t v160 = sub_140CC00(*(void *)(a1 + 664));
  v109 += v160 + ((9 * (__clz(v160 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v115 & 0x10000000) != 0)
  {
LABEL_134:
    uint64_t v119 = sub_13F73A8(*(void *)(a1 + 672));
    v109 += v119 + ((9 * (__clz(v119 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_135:
  uint64_t v120 = v109 + 9;
  if ((v115 & 0x40000000) == 0) {
    uint64_t v120 = v109;
  }
  if (v115 < 0) {
    v120 += 9;
  }
  if (v115 >> 30) {
    uint64_t result = v120;
  }
  else {
    uint64_t result = v109;
  }
  int v122 = *(_DWORD *)(a1 + 20);
  if ((_BYTE)v122)
  {
    uint64_t v123 = result + 9;
    if ((v122 & 1) == 0) {
      uint64_t v123 = result;
    }
    if ((v122 & 2) != 0) {
      v123 += ((9 * (__clz(*(void *)(a1 + 712) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v122 & 4) != 0) {
      v123 += 3;
    }
    if ((v122 & 8) != 0) {
      v123 += 3;
    }
    if ((v122 & 0x10) != 0)
    {
      int v161 = *(_DWORD *)(a1 + 724);
      uint64_t v162 = ((9 * (__clz(v161 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v161 >= 0) {
        uint64_t v163 = v162;
      }
      else {
        uint64_t v163 = 12;
      }
      v123 += v163;
      if ((v122 & 0x20) == 0)
      {
LABEL_153:
        if ((v122 & 0x40) == 0) {
          goto LABEL_155;
        }
        goto LABEL_154;
      }
    }
    else if ((v122 & 0x20) == 0)
    {
      goto LABEL_153;
    }
    v123 += ((9 * (__clz(*(void *)(a1 + 728) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v122 & 0x40) == 0)
    {
LABEL_155:
      if ((v122 & 0x80) != 0) {
        uint64_t result = v123 + 10;
      }
      else {
        uint64_t result = v123;
      }
      goto LABEL_158;
    }
LABEL_154:
    v123 += ((9 * (__clz(*(void *)(a1 + 736) | 1) ^ 0x3F) + 73) >> 6) + 2;
    goto LABEL_155;
  }
LABEL_158:
  if ((v122 & 0x700) != 0)
  {
    if ((v122 & 0x100) != 0) {
      result += 10;
    }
    if ((v122 & 0x200) != 0) {
      result += ((9 * (__clz(*(void *)(a1 + 760) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v122 & 0x400) != 0)
    {
      int v124 = *(_DWORD *)(a1 + 768);
      uint64_t v125 = ((9 * (__clz(v124 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v124 >= 0) {
        uint64_t v126 = v125;
      }
      else {
        uint64_t v126 = 12;
      }
      result += v126;
    }
  }
  uint64_t v127 = *(void *)(a1 + 8);
  if (v127)
  {
    unint64_t v164 = v127 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v164 + 31) < 0) {
      uint64_t v165 = *(void *)(v164 + 16);
    }
    else {
      uint64_t v165 = *(unsigned __int8 *)(v164 + 31);
    }
    result += v165;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

void *sub_15A29C8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "ag_search.proto.SuggestionBusinessCard");
}

uint64_t sub_15A29D8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 72);
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 80) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 80));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  sub_1889DE8((void *)(a1 + 48));
  sub_1889DE8((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15A2AA0(uint64_t a1)
{
  sub_15A29D8(a1);

  operator delete();
}

uint64_t sub_15A2AD8(uint64_t a1)
{
  sub_188CC00(a1 + 24);
  uint64_t result = sub_188CC00(a1 + 48);
  int v3 = *(_DWORD *)(a1 + 16);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v5 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x7C) != 0)
  {
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
  }
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = a1 + 8;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

uint64_t sub_15A2BB0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v51 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v51, a3[11].i32[1])) {
    goto LABEL_2;
  }
  char v7 = (uint64_t **)(a1 + 48);
  uint64_t v8 = (uint64_t **)(a1 + 24);
  uint64_t v9 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v10 = (char *)(*(void *)v51 + 1);
    unsigned int v11 = **(unsigned char **)v51;
    if ((char)**(unsigned char **)v51 < 0)
    {
      unsigned int v12 = v11 + (*v10 << 7);
      unsigned int v11 = v12 - 128;
      if (*v10 < 0)
      {
        uint64_t v10 = (char *)sub_188C180(*(uint64_t *)v51, v12 - 128);
        unsigned int v11 = v13;
      }
      else
      {
        uint64_t v10 = (char *)(*(void *)v51 + 2);
      }
    }
    *(void *)uint64_t v51 = v10;
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10) {
          goto LABEL_61;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (uint64_t *)*v15;
        }
        uint64_t v16 = (void *)(a1 + 72);
        goto LABEL_17;
      case 2u:
        if (v11 != 18) {
          goto LABEL_61;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v15 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          uint64_t v15 = (uint64_t *)*v15;
        }
        uint64_t v16 = (void *)(a1 + 80);
LABEL_17:
        uint64_t v18 = (std::string *)sub_1880F84(v16, v15);
        uint64_t v19 = (void *)sub_188C244(v18, *(char **)v51, (uint64_t)a3);
        goto LABEL_68;
      case 3u:
        if (v11 != 24) {
          goto LABEL_61;
        }
        uint64_t v20 = v10 + 1;
        unint64_t v21 = *v10;
        if ((*v10 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        int v22 = *v20;
        int v23 = v21 + (v22 << 7);
        unint64_t v21 = (v23 - 128);
        if (v22 < 0)
        {
          *(void *)uint64_t v51 = sub_188C138((uint64_t)v10, (v23 - 128));
          if (!*(void *)v51) {
            goto LABEL_82;
          }
          unint64_t v21 = v47;
        }
        else
        {
          uint64_t v20 = v10 + 2;
LABEL_22:
          *(void *)uint64_t v51 = v20;
        }
        if (v21 > 0xF)
        {
          if (*v9) {
            uint64_t v50 = (std::string *)((*v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v50 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(3, v21, v50);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 4u;
          *(_DWORD *)(a1 + 88) = v21;
        }
        goto LABEL_69;
      case 4u:
        if (v11 != 32) {
          goto LABEL_61;
        }
        v5 |= 8u;
        uint64_t v24 = v10 + 1;
        int v25 = *v10;
        if ((*v10 & 0x80000000) == 0) {
          goto LABEL_29;
        }
        int v26 = *v24;
        int v25 = v25 + (v26 << 7) - 128;
        if (v26 < 0)
        {
          uint64_t v48 = sub_188C0D0((uint64_t)v10, v25);
          *(void *)uint64_t v51 = v48;
          *(_DWORD *)(a1 + 92) = v49;
          if (!v48) {
            goto LABEL_82;
          }
        }
        else
        {
          uint64_t v24 = v10 + 2;
LABEL_29:
          *(void *)uint64_t v51 = v24;
          *(_DWORD *)(a1 + 92) = v25;
        }
        goto LABEL_69;
      case 5u:
        if (v11 != 42) {
          goto LABEL_61;
        }
        uint64_t v27 = v10 - 1;
        while (1)
        {
          uint64_t v28 = (char *)(v27 + 1);
          *(void *)uint64_t v51 = v27 + 1;
          uint64_t v29 = *(_DWORD **)(a1 + 40);
          if (v29 && (uint64_t v30 = *(int *)(a1 + 32), (int)v30 < *v29))
          {
            *(_DWORD *)(a1 + 32) = v30 + 1;
            uint64_t v31 = *(std::string **)&v29[2 * v30 + 2];
          }
          else
          {
            if (!*v8) {
              operator new();
            }
            *uint64_t v33 = v32;
            v33[1] = sub_3A6EDC;
            *uint64_t v32 = 0;
            v32[1] = 0;
            v32[2] = 0;
            uint64_t v31 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v32);
            uint64_t v28 = *(char **)v51;
          }
          uint64_t v27 = sub_188C244(v31, v28, (uint64_t)a3);
          *(void *)uint64_t v51 = v27;
          if (!v27) {
            goto LABEL_82;
          }
          if (*(void *)a3 <= (unint64_t)v27 || *v27 != 42) {
            goto LABEL_69;
          }
        }
      case 6u:
        if (v11 != 50) {
          goto LABEL_61;
        }
        uint64_t v34 = v10 - 1;
        while (1)
        {
          uint64_t v35 = (char *)(v34 + 1);
          *(void *)uint64_t v51 = v34 + 1;
          uint64_t v36 = *(_DWORD **)(a1 + 64);
          if (v36 && (uint64_t v37 = *(int *)(a1 + 56), (int)v37 < *v36))
          {
            *(_DWORD *)(a1 + 56) = v37 + 1;
            uint64_t v38 = *(std::string **)&v36[2 * v37 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            *uint64_t v40 = v39;
            v40[1] = sub_3A6EDC;
            void *v39 = 0;
            v39[1] = 0;
            v39[2] = 0;
            uint64_t v38 = (std::string *)sub_188CDC8(a1 + 48, (uint64_t)v39);
            uint64_t v35 = *(char **)v51;
          }
          uint64_t v34 = sub_188C244(v38, v35, (uint64_t)a3);
          *(void *)uint64_t v51 = v34;
          if (!v34) {
            goto LABEL_82;
          }
          if (*(void *)a3 <= (unint64_t)v34 || *v34 != 50) {
            goto LABEL_69;
          }
        }
      case 7u:
        if (v11 != 57) {
          goto LABEL_61;
        }
        uint64_t v42 = *(void *)v10;
        int v41 = v10 + 8;
        v5 |= 0x10u;
        *(void *)(a1 + 96) = v42;
        goto LABEL_60;
      case 8u:
        if (v11 != 65) {
          goto LABEL_61;
        }
        uint64_t v43 = *(void *)v10;
        int v41 = v10 + 8;
        v5 |= 0x20u;
        *(void *)(a1 + 104) = v43;
        goto LABEL_60;
      case 9u:
        if (v11 != 73) {
          goto LABEL_61;
        }
        uint64_t v44 = *(void *)v10;
        int v41 = v10 + 8;
        v5 |= 0x40u;
        *(void *)(a1 + 112) = v44;
LABEL_60:
        *(void *)uint64_t v51 = v41;
        goto LABEL_69;
      default:
LABEL_61:
        if (v11) {
          BOOL v45 = (v11 & 7) == 4;
        }
        else {
          BOOL v45 = 1;
        }
        if (!v45)
        {
          if (*v9)
          {
            uint64_t v46 = (std::string *)((*v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v46 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v10 = *(char **)v51;
          }
          uint64_t v19 = sub_1885AC0(v11, v46, v10, a3);
LABEL_68:
          *(void *)uint64_t v51 = v19;
          if (!v19) {
            goto LABEL_82;
          }
LABEL_69:
          if (sub_11947B8((uint64_t)a3, (char **)v51, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v10) {
          a3[10].i32[0] = v11 - 1;
        }
        else {
LABEL_82:
        }
          *(void *)uint64_t v51 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v51;
    }
  }
}

char *sub_15A30C0(uint64_t a1, char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  unint64_t v7 = *(int *)(a1 + 88);
  char *v4 = 24;
  v4[1] = v7;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
  else
  {
    v4 += 2;
  }
LABEL_13:
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unsigned int v10 = *(_DWORD *)(a1 + 92);
    char *v4 = 32;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *(void **)(*(void *)(a1 + 40) + v14 + 8);
      if (*((char *)v16 + 23) < 0)
      {
        int64_t v17 = v16[1];
        if (v17 > 127) {
          goto LABEL_31;
        }
      }
      else
      {
        int64_t v17 = *((unsigned __int8 *)v16 + 23);
      }
      if (*a3 - (void)v4 + 14 >= v17)
      {
        char *v4 = 42;
        v4[1] = v17;
        if (*((char *)v16 + 23) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        uint64_t v18 = v4 + 2;
        memcpy(v18, v16, v17);
        unint64_t v4 = &v18[v17];
        goto LABEL_29;
      }
LABEL_31:
      unint64_t v4 = (char *)sub_188A868(a3, 5, (uint64_t)v16, v4);
LABEL_29:
      v14 += 8;
    }
    while (v15 != v14);
  }
  uint64_t v19 = *(unsigned int *)(a1 + 56);
  if ((int)v19 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 8 * v19;
    do
    {
      int v22 = *(void **)(*(void *)(a1 + 64) + v20 + 8);
      if (*((char *)v22 + 23) < 0)
      {
        int64_t v23 = v22[1];
        if (v23 > 127) {
          goto LABEL_43;
        }
      }
      else
      {
        int64_t v23 = *((unsigned __int8 *)v22 + 23);
      }
      if (*a3 - (void)v4 + 14 >= v23)
      {
        char *v4 = 50;
        v4[1] = v23;
        if (*((char *)v22 + 23) < 0) {
          int v22 = (void *)*v22;
        }
        uint64_t v24 = v4 + 2;
        memcpy(v24, v22, v23);
        unint64_t v4 = &v24[v23];
        goto LABEL_41;
      }
LABEL_43:
      unint64_t v4 = (char *)sub_188A868(a3, 6, (uint64_t)v22, v4);
LABEL_41:
      v20 += 8;
    }
    while (v21 != v20);
  }
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v25 = *(void *)(a1 + 96);
    char *v4 = 57;
    *(void *)(v4 + 1) = v25;
    v4 += 9;
    if ((v6 & 0x20) == 0)
    {
LABEL_46:
      if ((v6 & 0x40) == 0) {
        goto LABEL_57;
      }
      goto LABEL_54;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_46;
  }
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v26 = *(void *)(a1 + 104);
  char *v4 = 65;
  *(void *)(v4 + 1) = v26;
  v4 += 9;
  if ((v6 & 0x40) != 0)
  {
LABEL_54:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v27 = *(void *)(a1 + 112);
    char *v4 = 73;
    *(void *)(v4 + 1) = v27;
    v4 += 9;
  }
LABEL_57:
  uint64_t v28 = *(void *)(a1 + 8);
  if ((v28 & 1) == 0) {
    return v4;
  }
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v30 + 31) < 0)
  {
    uint64_t v31 = *(void **)(v30 + 8);
    uint64_t v32 = *(void *)(v30 + 16);
  }
  else
  {
    uint64_t v31 = (void *)(v30 + 8);
    LODWORD(v32) = *(unsigned __int8 *)(v30 + 31);
  }
  if (*a3 - (void)v4 >= (int)v32)
  {
    uint64_t v33 = (int)v32;
    memcpy(v4, v31, (int)v32);
    v4 += v33;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v31, v32, v4);
}

uint64_t sub_15A34CC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  uint64_t v8 = v3 + v7;
  if ((int)v7 >= 1)
  {
    unint64_t v9 = (uint64_t *)(*(void *)(a1 + 64) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v12 = *(void *)(v10 + 8);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v11;
      }
      v8 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      --v7;
    }
    while (v7);
  }
  int v13 = *(_DWORD *)(a1 + 16);
  if ((v13 & 0x7F) != 0)
  {
    if (v13)
    {
      unint64_t v16 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      uint64_t v18 = *(void *)(v16 + 8);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = v17;
      }
      v8 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_33;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    unint64_t v19 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
    uint64_t v21 = *(void *)(v19 + 8);
    if ((v20 & 0x80u) == 0) {
      uint64_t v21 = v20;
    }
    v8 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
      {
LABEL_19:
        if ((v13 & 0x10) != 0) {
          v8 += 9;
        }
        if ((v13 & 0x20) != 0) {
          v8 += 9;
        }
        if ((v13 & 0x40) != 0) {
          v8 += 9;
        }
        goto LABEL_25;
      }
LABEL_18:
      v8 += ((9 * (__clz(*(_DWORD *)(a1 + 92) | 1) ^ 0x1F) + 73) >> 6) + 1;
      goto LABEL_19;
    }
LABEL_33:
    int v22 = *(_DWORD *)(a1 + 88);
    uint64_t v23 = ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v22 >= 0) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 11;
    }
    v8 += v24;
    if ((v13 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_25:
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v25 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v25 + 31) < 0) {
      uint64_t v26 = *(void *)(v25 + 16);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 31);
    }
    v8 += v26;
  }
  *(_DWORD *)(a1 + 20) = v8;
  return v8;
}

std::string *sub_15A36E0(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[1], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (const std::string **)(*(void *)(a2 + 64) + 8);
    uint64_t v11 = (std::string **)sub_188CCE4((uint64_t)&v3[2], *(_DWORD *)(a2 + 56));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[2], v11, v10, v9, *(_DWORD *)v3[2].__r_.__value_.__r.__words[2]- LODWORD(v3[2].__r_.__value_.__r.__words[1]));
    int v12 = LODWORD(v3[2].__r_.__value_.__r.__words[1]) + v9;
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v12;
    int v13 = (int *)v3[2].__r_.__value_.__r.__words[2];
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if ((v14 & 0x7F) != 0)
  {
    if (v14)
    {
      unint64_t v16 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v18 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v18 = (uint64_t *)*v18;
      }
      uint64_t result = sub_1881DF4((std::string **)&v3[3], v16, v18);
      if ((v14 & 2) == 0)
      {
LABEL_10:
        if ((v14 & 4) == 0) {
          goto LABEL_11;
        }
        goto LABEL_27;
      }
    }
    else if ((v14 & 2) == 0)
    {
      goto LABEL_10;
    }
    unint64_t v19 = (long long *)(*(void *)(a2 + 80) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    std::string::size_type v20 = v3->__r_.__value_.__l.__size_;
    uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (uint64_t *)*v21;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[3].__r_.__value_.__l.__size_, v19, v21);
    if ((v14 & 4) == 0)
    {
LABEL_11:
      if ((v14 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_28;
    }
LABEL_27:
    LODWORD(v3[3].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 88);
    if ((v14 & 8) == 0)
    {
LABEL_12:
      if ((v14 & 0x10) == 0) {
        goto LABEL_13;
      }
      goto LABEL_29;
    }
LABEL_28:
    HIDWORD(v3[3].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 92);
    if ((v14 & 0x10) == 0)
    {
LABEL_13:
      if ((v14 & 0x20) == 0) {
        goto LABEL_14;
      }
      goto LABEL_30;
    }
LABEL_29:
    v3[4].__r_.__value_.__r.__words[0] = *(void *)(a2 + 96);
    if ((v14 & 0x20) == 0)
    {
LABEL_14:
      if ((v14 & 0x40) == 0)
      {
LABEL_16:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v14;
        goto LABEL_17;
      }
LABEL_15:
      v3[4].__r_.__value_.__r.__words[2] = *(void *)(a2 + 112);
      goto LABEL_16;
    }
LABEL_30:
    v3[4].__r_.__value_.__l.__size_ = *(void *)(a2 + 104);
    if ((v14 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_17:
  uint64_t v15 = *(void *)(a2 + 8);
  if (v15)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v15 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15A38EC()
{
  return 1;
}

void *sub_15A38F4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "ag_search.proto.BusinessAlternateName");
}

double sub_15A3904(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_24C3A78;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  double result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 132) = 0u;
  return result;
}

void *sub_15A39CC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = off_24C3AF8;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

void *sub_15A3A50(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *double result = off_24C3B78;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = a1;
  result[7] = 0;
  result[8] = 0;
  result[9] = &qword_2550250;
  return result;
}

void *sub_15A3B00(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *double result = off_24C3BF8;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = &qword_2550250;
  result[7] = &qword_2550250;
  return result;
}

void *sub_15A3BA4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = off_24C3C78;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  return result;
}

double sub_15A3C2C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_24C3CF8;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_DWORD *)(v2 + 64) = 0;
  return result;
}

uint64_t sub_15A3CBC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C3D78;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

double sub_15A3D5C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  return sub_159DFE8(v2, a1, 0);
}

double sub_15A3DBC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_24C3E78;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = &qword_2550250;
  *(void *)(v2 + 80) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  return result;
}

uint64_t sub_15A3E78(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_15;
    }
  }
  else if (v4)
  {
    goto LABEL_15;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 48));
  }
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 56));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_15:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15A3F6C(uint64_t a1)
{
  sub_15A3E78(a1);

  operator delete();
}

uint64_t sub_15A3FA4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0x1F) != 0)
  {
    if ((v1 & 1) == 0)
    {
      if ((v1 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_12:
      unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v3 + 23) < 0)
      {
        **(unsigned char **)unint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if ((v1 & 4) != 0) {
          goto LABEL_16;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
        if ((v1 & 4) != 0) {
          goto LABEL_16;
        }
      }
LABEL_5:
      if ((v1 & 8) == 0) {
        goto LABEL_6;
      }
LABEL_20:
      unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v1 & 0x10) == 0) {
          goto LABEL_27;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(unsigned char *)(v5 + 23) = 0;
        if ((v1 & 0x10) == 0) {
          goto LABEL_27;
        }
      }
      goto LABEL_24;
    }
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_12;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_16:
    unint64_t v4 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_20;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_20;
      }
    }
LABEL_6:
    if ((v1 & 0x10) == 0) {
      goto LABEL_27;
    }
LABEL_24:
    unint64_t v6 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
LABEL_27:
  if ((v1 & 0x60) != 0)
  {
    *(unsigned char *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 64) = 0;
  }
  char v8 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v8) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15A40D4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v33 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v33, a3[11].i32[1])) {
    goto LABEL_2;
  }
  int v7 = (void *)(a1 + 8);
  while (2)
  {
    char v8 = (char *)(*(void *)v33 + 1);
    unsigned int v9 = **(unsigned char **)v33;
    if ((char)**(unsigned char **)v33 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        char v8 = (char *)sub_188C180(*(uint64_t *)v33, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        char v8 = (char *)(*(void *)v33 + 2);
      }
    }
    *(void *)uint64_t v33 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        int v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          int v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 24);
        goto LABEL_39;
      case 2u:
        if (v9 != 18) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        int v13 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          int v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 32);
        goto LABEL_39;
      case 3u:
        if (v9 != 26) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v16 = *(void *)(a1 + 8);
        int v13 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          int v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 40);
        goto LABEL_39;
      case 4u:
        if (v9 != 32) {
          goto LABEL_43;
        }
        v5 |= 0x20u;
        uint64_t v17 = v8 + 1;
        int v18 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_25;
        }
        int v19 = *v17;
        int v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          uint64_t v29 = sub_188C0D0((uint64_t)v8, v18);
          *(void *)uint64_t v33 = v29;
          *(_DWORD *)(a1 + 64) = v30;
          if (!v29) {
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v17 = v8 + 2;
LABEL_25:
          *(void *)uint64_t v33 = v17;
          *(_DWORD *)(a1 + 64) = v18;
        }
        goto LABEL_41;
      case 5u:
        if (v9 != 42) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v20 = *(void *)(a1 + 8);
        int v13 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          int v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 48);
        goto LABEL_39;
      case 6u:
        if (v9 != 48) {
          goto LABEL_43;
        }
        v5 |= 0x40u;
        uint64_t v21 = v8 + 1;
        uint64_t v22 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_34;
        }
        int v23 = *v21;
        uint64_t v22 = v22 + (v23 << 7) - 128;
        if (v23 < 0)
        {
          uint64_t v31 = sub_188C138((uint64_t)v8, v22);
          *(void *)uint64_t v33 = v31;
          *(unsigned char *)(a1 + 68) = v32 != 0;
          if (!v31) {
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v21 = v8 + 2;
LABEL_34:
          *(void *)uint64_t v33 = v21;
          *(unsigned char *)(a1 + 68) = v22 != 0;
        }
        goto LABEL_41;
      case 7u:
        if (v9 != 58) {
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v24 = *(void *)(a1 + 8);
        int v13 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          int v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 56);
LABEL_39:
        unint64_t v25 = (std::string *)sub_1880F84(v14, v13);
        uint64_t v26 = (void *)sub_188C244(v25, *(char **)v33, (uint64_t)a3);
        goto LABEL_40;
      default:
LABEL_43:
        if (v9) {
          BOOL v27 = (v9 & 7) == 4;
        }
        else {
          BOOL v27 = 1;
        }
        if (!v27)
        {
          if (*v7)
          {
            uint64_t v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v28 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            char v8 = *(char **)v33;
          }
          uint64_t v26 = sub_1885AC0(v9, v28, v8, a3);
LABEL_40:
          *(void *)uint64_t v33 = v26;
          if (!v26) {
            goto LABEL_57;
          }
LABEL_41:
          if (sub_11947B8((uint64_t)a3, (char **)v33, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_57:
        }
          *(void *)uint64_t v33 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v33;
    }
  }
}

unsigned char *sub_15A4448(uint64_t a1, unsigned char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x20) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 64);
  unsigned char *v4 = 32;
  v4[1] = v7;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unsigned int v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
  else
  {
    v4 += 2;
  }
LABEL_15:
  if ((v6 & 8) != 0)
  {
    unint64_t v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
    if ((v6 & 0x40) == 0)
    {
LABEL_17:
      if ((v6 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v12 = *(unsigned char *)(a1 + 68);
  unsigned char *v4 = 48;
  v4[1] = v12;
  v4 += 2;
  if ((v6 & 0x10) != 0) {
LABEL_18:
  }
    unint64_t v4 = sub_117A0AC(a3, 7, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_19:
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    int v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    int v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if (*a3 - (void)v4 >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(v4, v14, (int)v15);
    v4 += v16;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v14, v15, v4);
}

uint64_t sub_15A4664(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  if ((v1 & 4) != 0)
  {
    unint64_t v9 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  return v2;
}

uint64_t sub_15A4744(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((~v2 & 7) != 0)
  {
    uint64_t result = sub_15A4664(a1);
  }
  else
  {
    unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
    uint64_t v5 = *(void *)(v3 + 8);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = v4;
    }
    uint64_t v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    uint64_t v10 = (9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6;
    unint64_t v11 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
    uint64_t v13 = *(void *)(v11 + 8);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = v12;
    }
    uint64_t result = v5 + v9 + v13 + v6 + v10 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 3;
  }
  if ((v2 & 0x78) != 0)
  {
    if ((v2 & 8) != 0)
    {
      unint64_t v16 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      uint64_t v18 = *(void *)(v16 + 8);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = v17;
      }
      result += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v2 & 0x10) == 0)
      {
LABEL_13:
        if ((v2 & 0x20) == 0) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else if ((v2 & 0x10) == 0)
    {
      goto LABEL_13;
    }
    unint64_t v19 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
    uint64_t v21 = *(void *)(v19 + 8);
    if ((v20 & 0x80u) == 0) {
      uint64_t v21 = v20;
    }
    result += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
LABEL_14:
    result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
    if ((v2 & 0x40) != 0) {
      result += 2;
    }
  }
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    unint64_t v22 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v22 + 31) < 0) {
      uint64_t v23 = *(void *)(v22 + 16);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v22 + 31);
    }
    result += v23;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

std::string *sub_15A4930(std::string *result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x7F) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      unint64_t v7 = (std::string **)&result[1];
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v9 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      uint64_t result = sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_21;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    uint64_t v10 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    std::string::size_type v11 = v3->__r_.__value_.__l.__size_;
    uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__l.__size_, v10, v12);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_24;
    }
LABEL_21:
    uint64_t v13 = (long long *)(*(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
    std::string::size_type v14 = v3->__r_.__value_.__l.__size_;
    uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (uint64_t *)*v15;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__r.__words[2], v13, v15);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
LABEL_24:
    unint64_t v16 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
    std::string::size_type v17 = v3->__r_.__value_.__l.__size_;
    uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (uint64_t *)*v18;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[2], v16, v18);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_30;
    }
LABEL_27:
    unint64_t v19 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10u;
    std::string::size_type v20 = v3->__r_.__value_.__l.__size_;
    uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (uint64_t *)*v21;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[2].__r_.__value_.__l.__size_, v19, v21);
    if ((v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v4 & 0x40) == 0)
      {
LABEL_10:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
        goto LABEL_11;
      }
LABEL_9:
      v3[2].__r_.__value_.__s.__data_[20] = *(unsigned char *)(a2 + 68);
      goto LABEL_10;
    }
LABEL_30:
    LODWORD(v3[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 64);
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

BOOL sub_15A4AE0(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 7) == 0;
}

void *sub_15A4AF4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "ag_search.proto.TrieName");
}

uint64_t sub_15A4B04(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)(a1 + 8);
  *(void *)a1 = off_24C3F78;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(void *)(a1 + 24) = &qword_2550250;
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      unint64_t v7 = (uint64_t *)*v7;
    }
    sub_1881DF4((std::string **)(a1 + 24), (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL), v7);
    int v6 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 32) = &qword_2550250;
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v8 = (uint64_t *)*v8;
    }
    sub_1881DF4((std::string **)(a1 + 32), (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL), v8);
  }
  return a1;
}

void sub_15A4BE0(_Unwind_Exception *a1)
{
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15A4C14(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15A4CCC(uint64_t a1)
{
  sub_15A4C14(a1);

  operator delete();
}

uint64_t sub_15A4D04(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15A4D80(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)std::string::size_type v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  int v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)std::string::size_type v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unint64_t v16 = (uint64_t *)*v16;
        }
        std::string::size_type v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      unint64_t v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        unint64_t v16 = (uint64_t *)*v16;
      }
      std::string::size_type v17 = (void *)(a1 + 24);
LABEL_27:
      unint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      std::string::size_type v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = *(char **)v20;
    }
    std::string::size_type v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)std::string::size_type v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)std::string::size_type v20 = 0;
  return *(void *)v20;
}

char *sub_15A4F28(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    int v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15A5014(uint64_t a1)
{
  if ((~*(_DWORD *)(a1 + 16) & 3) != 0)
  {
    uint64_t result = sub_1231798(a1);
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = v3;
    }
    uint64_t v5 = (9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6;
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    uint64_t result = v4 + v8 + v5 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

BOOL sub_15A50F4(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 3) == 0;
}

void *sub_15A5108@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "ag_search.proto.Map.Pair");
}

uint64_t sub_15A5118(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)uint64_t result = off_24C3FF8;
  *(void *)(result + 8) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a2;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void *sub_15A5150(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_15A7C24(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15A51D0(void *a1)
{
  sub_15A5150(a1);

  operator delete();
}

char *sub_15A5208(uint64_t a1, char *a2, int32x2_t *a3)
{
  unint64_t v19 = a2;
  if ((sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v19 + 1;
      unsigned int v7 = *v19;
      if (*v19 < 0)
      {
        unsigned int v8 = v7 + (*v6 << 7);
        unsigned int v7 = v8 - 128;
        if (*v6 < 0)
        {
          unint64_t v6 = (char *)sub_188C180((uint64_t)v19, v8 - 128);
          unsigned int v7 = v9;
        }
        else
        {
          unint64_t v6 = v19 + 2;
        }
      }
      unint64_t v19 = v6;
      if (v7 == 10)
      {
        uint64_t v12 = v6 - 1;
        while (1)
        {
          uint64_t v13 = (unsigned __int8 *)(v12 + 1);
          unint64_t v19 = v12 + 1;
          std::string::size_type v14 = *(_DWORD **)(a1 + 32);
          if (v14 && (uint64_t v15 = *(int *)(a1 + 24), (int)v15 < *v14))
          {
            *(_DWORD *)(a1 + 24) = v15 + 1;
            uint64_t v16 = *(void *)&v14[2 * v15 + 2];
          }
          else
          {
            std::string::size_type v17 = sub_15A56D0(*(void *)(a1 + 16));
            uint64_t v16 = sub_188CDC8(a1 + 16, (uint64_t)v17);
            uint64_t v13 = (unsigned __int8 *)v19;
          }
          uint64_t v12 = (char *)sub_15A53A8(a3, v16, v13);
          unint64_t v19 = v12;
          if (!v12) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
            goto LABEL_24;
          }
        }
      }
      if (!v7 || (v7 & 7) == 4) {
        break;
      }
      if (*v5)
      {
        unint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        unint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        unint64_t v6 = v19;
      }
      unint64_t v19 = (char *)sub_1885AC0(v7, v11, v6, a3);
      if (!v19) {
        return 0;
      }
LABEL_24:
      if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
        return v19;
      }
    }
    if (v6)
    {
      a3[10].i32[0] = v7 - 1;
      return v19;
    }
    return 0;
  }
  return v19;
}

uint64_t sub_15A53A8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15A4D80(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15A5438(uint64_t a1, char *__dst, void *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        uint64_t v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        uint64_t v10 = __dst + 2;
      }
      __dst = sub_15A4F28(v8, v10, a3);
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return __dst;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    std::string::size_type v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    std::string::size_type v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if (*a3 - (void)__dst >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(__dst, v14, (int)v15);
    __dst += v16;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v14, v15, __dst);
}

uint64_t sub_15A557C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15A5014(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void *sub_15A562C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "ag_search.proto.Map");
}

uint64_t sub_15A563C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C3EF8;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(void *)(result + 32) = &qword_2550250;
  *(void *)(result + 40) = &qword_2550250;
  *(void *)(result + 48) = &qword_2550250;
  *(void *)(result + 56) = &qword_2550250;
  *(_DWORD *)(result + 64) = 0;
  *(unsigned char *)(result + 68) = 0;
  return result;
}

void *sub_15A56D0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C3F78;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

uint64_t sub_15A5754(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C3FF8;
  *(void *)(result + 8) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_15A57F4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_11;
    }
  }
  else if (v4)
  {
    goto LABEL_11;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_11:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15A58C0(uint64_t a1)
{
  sub_15A57F4(a1);

  operator delete();
}

uint64_t sub_15A58F8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) == 0) {
    goto LABEL_17;
  }
  if (v1)
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    unint64_t v4 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_10:
  unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v1 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  *(unsigned char *)unint64_t v3 = 0;
  *(unsigned char *)(v3 + 23) = 0;
  if ((v1 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_17:
  char v6 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v6) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15A59B4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v26 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v26, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = (char *)(*(void *)v26 + 1);
    unsigned int v9 = **(unsigned char **)v26;
    if ((char)**(unsigned char **)v26 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v26, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (char *)(*(void *)v26 + 2);
      }
    }
    *(void *)uint64_t v26 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_27;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        std::string::size_type v14 = (void *)(a1 + 24);
        goto LABEL_26;
      case 2u:
        if (v9 != 18) {
          goto LABEL_27;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        std::string::size_type v14 = (void *)(a1 + 32);
        goto LABEL_26;
      case 3u:
        if (v9 != 24) {
          goto LABEL_27;
        }
        v5 |= 8u;
        uint64_t v16 = v8 + 1;
        uint64_t v17 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_21;
        }
        int v18 = *v16;
        uint64_t v17 = v17 + (v18 << 7) - 128;
        if (v18 < 0)
        {
          uint64_t v24 = sub_188C138((uint64_t)v8, v17);
          *(void *)uint64_t v26 = v24;
          *(void *)(a1 + 48) = v25;
          if (!v24) {
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v16 = v8 + 2;
LABEL_21:
          *(void *)uint64_t v26 = v16;
          *(void *)(a1 + 48) = v17;
        }
        goto LABEL_35;
      case 4u:
        if (v9 != 34) {
          goto LABEL_27;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v19 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        std::string::size_type v14 = (void *)(a1 + 40);
LABEL_26:
        std::string::size_type v20 = (std::string *)sub_1880F84(v14, v13);
        uint64_t v21 = (void *)sub_188C244(v20, *(char **)v26, (uint64_t)a3);
        goto LABEL_34;
      default:
LABEL_27:
        if (v9) {
          BOOL v22 = (v9 & 7) == 4;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22)
        {
          if (*v7)
          {
            uint64_t v23 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v23 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = *(char **)v26;
          }
          uint64_t v21 = sub_1885AC0(v9, v23, v8, a3);
LABEL_34:
          *(void *)uint64_t v26 = v21;
          if (!v21) {
            goto LABEL_42;
          }
LABEL_35:
          if (sub_11947B8((uint64_t)a3, (char **)v26, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_42:
        }
          *(void *)uint64_t v26 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v26;
    }
  }
}

unsigned char *sub_15A5C38(uint64_t a1, unsigned char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  unint64_t v7 = *(void *)(a1 + 48);
  unsigned char *v4 = 24;
  v4[1] = v7;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
  else
  {
    v4 += 2;
  }
LABEL_13:
  if ((v6 & 4) != 0) {
    unint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    unint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    unint64_t v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if (*a3 - (void)v4 >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15A5DCC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_15;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) == 0)
  {
    if ((v1 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  unint64_t v11 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  uint64_t v13 = *(void *)(v11 + 8);
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v12;
  }
  v2 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 8) != 0) {
LABEL_14:
  }
    v2 += ((9 * (__clz(*(void *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_15:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v14 + 31) < 0) {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 31);
    }
    v2 += v15;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15A5F18()
{
  return 1;
}

void *sub_15A5F20@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo.streaming.VersionInfo");
}

uint64_t sub_15A5F30(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_11;
    }
  }
  else if (v4)
  {
    goto LABEL_11;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_11:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15A5FFC(uint64_t a1)
{
  sub_15A5F30(a1);

  operator delete();
}

uint64_t sub_15A6034(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) == 0) {
    goto LABEL_17;
  }
  if (v1)
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    unint64_t v4 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_10:
  unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v1 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  *(unsigned char *)unint64_t v3 = 0;
  *(unsigned char *)(v3 + 23) = 0;
  if ((v1 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_17:
  char v6 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v6) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15A60EC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)BOOL v22 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v22, a3[11].i32[1])) {
    return *(void *)v22;
  }
  char v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v22 + 1);
    unsigned int v8 = **(unsigned char **)v22;
    if ((char)**(unsigned char **)v22 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v22, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v22 + 2);
      }
    }
    *(void *)BOOL v22 = v7;
    unsigned int v11 = v8 >> 3;
    if (v8 >> 3 == 3)
    {
      if (v8 == 26)
      {
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v16 = *(void *)(a1 + 8);
        uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v17 = (uint64_t *)*v17;
        }
        int v18 = (void *)(a1 + 40);
        goto LABEL_32;
      }
    }
    else if (v11 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v17 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          uint64_t v17 = (uint64_t *)*v17;
        }
        int v18 = (void *)(a1 + 32);
        goto LABEL_32;
      }
    }
    else if (v11 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v20 = *(void *)(a1 + 8);
      uint64_t v17 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
      if (v20) {
        uint64_t v17 = (uint64_t *)*v17;
      }
      int v18 = (void *)(a1 + 24);
LABEL_32:
      uint64_t v21 = (std::string *)sub_1880F84(v18, v17);
      uint64_t v15 = (void *)sub_188C244(v21, *(char **)v22, (uint64_t)a3);
      goto LABEL_33;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      unint64_t v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v22;
    }
    uint64_t v15 = sub_1885AC0(v8, v14, v7, a3);
LABEL_33:
    *(void *)BOOL v22 = v15;
    if (!v15) {
      goto LABEL_39;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v22, a3[11].i32[1])) {
      return *(void *)v22;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v22;
  }
LABEL_39:
  *(void *)BOOL v22 = 0;
  return *(void *)v22;
}

char *sub_15A62DC(uint64_t a1, char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) != 0) {
LABEL_4:
  }
    unint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_5:
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15A63F4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_16;
  }
  if (v1)
  {
    unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
    uint64_t v5 = *(void *)(v3 + 8);
    if ((v4 & 0x80u) == 0) {
      uint64_t v5 = v4;
    }
    uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    unint64_t v9 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_16:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v14 + 31) < 0) {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 31);
    }
    v2 += v15;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15A6514()
{
  return 1;
}

void *sub_15A651C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo.streaming.OriginInfo");
}

void *sub_15A652C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C4078;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = &qword_2550250;
  result[6] = 0;
  return result;
}

void *sub_15A65B4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C40F8;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = &qword_2550250;
  return result;
}

void sub_15A663C()
{
}

void *sub_15A668C(uint64_t a1, uint64_t a2)
{
  return sub_158C054(a2);
}

uint64_t sub_15A6694(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A669C()
{
}

uint64_t sub_15A66F4(uint64_t a1, uint64_t a2)
{
  return sub_158C0D0(a2);
}

uint64_t sub_15A66FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6704()
{
}

uint64_t sub_15A676C(uint64_t a1, uint64_t a2)
{
  return sub_15A563C(a2);
}

uint64_t sub_15A6774(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A677C()
{
}

void *sub_15A67D4(uint64_t a1, uint64_t a2)
{
  return sub_15A56D0(a2);
}

uint64_t sub_15A67DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A67E4()
{
}

uint64_t sub_15A6838(uint64_t a1, uint64_t a2)
{
  return sub_15A5754(a2);
}

uint64_t sub_15A6840(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void sub_15A6848()
{
}

double sub_15A68A8(uint64_t a1, uint64_t a2)
{
  return sub_15A3904(a2);
}

uint64_t sub_15A68B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A68B8()
{
}

void *sub_15A6910(uint64_t a1, uint64_t a2)
{
  return sub_15A39CC(a2);
}

uint64_t sub_15A6918(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6920()
{
}

void *sub_15A6980(uint64_t a1, uint64_t a2)
{
  return sub_15A3A50(a2);
}

uint64_t sub_15A6988(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6990()
{
}

void *sub_15A69EC(uint64_t a1, uint64_t a2)
{
  return sub_15A3B00(a2);
}

uint64_t sub_15A69F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A69FC()
{
}

void *sub_15A6A58(uint64_t a1, uint64_t a2)
{
  return sub_15A3BA4(a2);
}

uint64_t sub_15A6A60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6A68()
{
}

double sub_15A6ACC(uint64_t a1, uint64_t a2)
{
  return sub_15A3C2C(a2);
}

uint64_t sub_15A6AD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6ADC()
{
}

uint64_t sub_15A6B34(uint64_t a1, uint64_t a2)
{
  return sub_15A3CBC(a2);
}

uint64_t sub_15A6B3C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6B44()
{
}

double sub_15A6B88(uint64_t a1, uint64_t a2)
{
  return sub_15A3D5C(a2);
}

uint64_t sub_15A6B90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void sub_15A6B98()
{
}

double sub_15A6C04(uint64_t a1, uint64_t a2)
{
  return sub_15A3DBC(a2);
}

uint64_t sub_15A6C0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6C14()
{
}

uint64_t sub_15A6C68(uint64_t a1, uint64_t a2)
{
  return sub_1592C84(a2);
}

uint64_t sub_15A6C70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void sub_15A6C78()
{
}

uint64_t sub_15A6CCC(uint64_t a1, uint64_t a2)
{
  return sub_1592D24(a2);
}

uint64_t sub_15A6CD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6CDC()
{
}

uint64_t sub_15A6D2C(uint64_t a1, uint64_t a2)
{
  return sub_1592DA4(a2);
}

uint64_t sub_15A6D34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6D3C()
{
}

uint64_t sub_15A6DA4(uint64_t a1, uint64_t a2)
{
  return sub_1592E20(a2);
}

uint64_t sub_15A6DAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6DB4()
{
}

void *sub_15A6E04(uint64_t a1, uint64_t a2)
{
  return sub_1592ED4(a2);
}

uint64_t sub_15A6E0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6E14()
{
}

uint64_t sub_15A6E64(uint64_t a1, uint64_t a2)
{
  return sub_1592F50(a2);
}

uint64_t sub_15A6E6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6E74()
{
}

void *sub_15A6ED4(uint64_t a1, uint64_t a2)
{
  return sub_1592FCC(a2);
}

uint64_t sub_15A6EDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6EE4()
{
}

uint64_t sub_15A6F4C(uint64_t a1, uint64_t a2)
{
  return sub_159307C(a2);
}

uint64_t sub_15A6F54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6F5C()
{
}

void *sub_15A6FAC(uint64_t a1, uint64_t a2)
{
  return sub_1593140(a2);
}

uint64_t sub_15A6FB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A6FBC()
{
}

void *sub_15A7020(uint64_t a1, uint64_t a2)
{
  return sub_15931BC(a2);
}

uint64_t sub_15A7028(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A7030()
{
}

uint64_t sub_15A7084(uint64_t a1, uint64_t a2)
{
  return sub_159326C(a2);
}

uint64_t sub_15A708C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A7094()
{
}

uint64_t sub_15A70E8(uint64_t a1, uint64_t a2)
{
  return sub_1593308(a2);
}

uint64_t sub_15A70F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A70F8()
{
}

uint64_t sub_15A714C(uint64_t a1, uint64_t a2)
{
  return sub_1596A3C(a2);
}

uint64_t sub_15A7154(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

void sub_15A715C()
{
}

uint64_t sub_15A71B8(uint64_t a1, uint64_t a2)
{
  return sub_1596AE0(a2);
}

uint64_t sub_15A71C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A71C8()
{
}

uint64_t sub_15A7224(uint64_t a1, uint64_t a2)
{
  return sub_1596B90(a2);
}

uint64_t sub_15A722C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void sub_15A7234()
{
}

double sub_15A7290(uint64_t a1, uint64_t a2)
{
  return sub_1596C48(a2);
}

uint64_t sub_15A7298(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A72A0()
{
}

void *sub_15A72EC(uint64_t a1, uint64_t a2)
{
  return sub_1596D00(a2);
}

uint64_t sub_15A72F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A72FC()
{
}

void *sub_15A7358(uint64_t a1, uint64_t a2)
{
  return sub_15A652C(a2);
}

uint64_t sub_15A7360(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A7368()
{
}

void *sub_15A73C4(uint64_t a1, uint64_t a2)
{
  return sub_15A65B4(a2);
}

uint64_t sub_15A73CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

void sub_15A73D4(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_158AE80(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

std::string *sub_15A7454(std::string *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = result->__r_.__value_.__r.__words[0];
    uint64_t v10 = &a2[a5];
    do
    {
      uint64_t result = (std::string *)sub_158C054(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      uint64_t result = sub_15A74D0(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_15A74D0(uint64_t a1, std::string *a2)
{
  return sub_158B36C(a2, a1);
}

void sub_15A74E0(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_158C7B0(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_15A7560(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = (void **)(v2 + 2);
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_1592618(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_15A75E0(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_158F124(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_15A7660(uint64_t *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      uint64_t result = (uint64_t *)sub_1592D24(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      uint64_t result = (uint64_t *)sub_15A76DC(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_15A76DC(uint64_t a1, std::string *a2)
{
  return sub_158CF1C(a2, a1);
}

uint64_t *sub_15A76EC(uint64_t *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      uint64_t result = (uint64_t *)sub_1593308(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      uint64_t result = (uint64_t *)sub_122B4EC(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_15A7768(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = (uint64_t)sub_1592FCC(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_15A77E4(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_15A77E4(uint64_t a1, uint64_t a2)
{
}

void sub_15A77F4(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_1593D04(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_15A7874(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_15958E0(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_15A78F4(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = sub_1596AE0(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_15A7970(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_15A7970(uint64_t a1, uint64_t a2)
{
}

void sub_15A7980(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      sub_1596C48(v9);
      *v10++ = v11;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v12 = v13;
      uint64_t v14 = *v7++;
      sub_15A79FC(v12, v14);
      --v5;
    }
    while (v5);
  }
}

void sub_15A79FC(uint64_t a1, uint64_t a2)
{
}

void sub_15A7A0C(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_159A8C4(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_15A7A8C(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_15A3E78(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_15A7B0C(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = &a2[a5];
    do
    {
      *v10++ = (uint64_t)sub_15A3BA4(v9);
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      sub_15A7B88(v11, v13);
      --v5;
    }
    while (v5);
  }
}

void sub_15A7B88(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_15A7B98(uint64_t *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = *result;
    uint64_t v10 = (uint64_t **)&a2[a5];
    do
    {
      uint64_t result = (uint64_t *)sub_15A563C(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      uint64_t result = (uint64_t *)sub_15A7C14(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

std::string *sub_15A7C14(uint64_t a1, std::string *a2)
{
  return sub_15A4930(a2, a1);
}

void sub_15A7C24(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sub_15A4C14(*v3);
          operator delete();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

std::string *sub_15A7CA4(std::string *result, std::string **a2, uint64_t *a3, int a4, int a5)
{
  LODWORD(v5) = a4;
  uint64_t v7 = a2;
  int v8 = a4 - a5;
  if (a4 > a5)
  {
    uint64_t v9 = result->__r_.__value_.__r.__words[0];
    uint64_t v10 = &a2[a5];
    do
    {
      uint64_t result = (std::string *)sub_15A56D0(v9);
      *v10++ = result;
      --v8;
    }
    while (v8);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v5 = v5;
    do
    {
      uint64_t v12 = *a3++;
      uint64_t v11 = v12;
      uint64_t v13 = *v7++;
      uint64_t result = sub_122B1A4(v11, v13);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_15A7D20()
{
  dword_26101C8 = 1;
  dword_26101E0 = 2;
  dword_26101F8 = 3;
  dword_2610228 = 5;
  qword_2610248 = (uint64_t)&aAacGeoTypeAdmi[180];
  dword_2610258 = 7;
  qword_26102D8 = (uint64_t)&aAacGeoTypeAdmi[351];
  qword_2610338 = (uint64_t)&aAacGeoTypeAdmi[491];
  qword_2610380 = (uint64_t)&aAacGeoTypeAdmi[596];
  qword_26103B0 = (uint64_t)&aAacGeoTypeAdmi[666];
  qword_26103C8 = (uint64_t)&aAacGeoTypeAdmi[701];
  qword_26103E0 = (uint64_t)&aAacGeoTypeAdmi[736];
  qword_26103F8 = (uint64_t)&aAacGeoTypeAdmi[771];
  qword_2610410 = (uint64_t)&aAacGeoTypeAdmi[806];
  qword_2610428 = (uint64_t)&aAacGeoTypeAdmi[841];
  qword_2610440 = (uint64_t)&aAacGeoTypeAdmi[876];
  qword_2610458 = (uint64_t)&aAacGeoTypeAdmi[911];
  qword_2610470 = (uint64_t)&aAacGeoTypeAdmi[946];
  qword_2610488 = (uint64_t)&aAacGeoTypeAdmi[981];
  qword_26104A0 = (uint64_t)&aAacGeoTypeAdmi[1016];
  qword_26104B8 = (uint64_t)&aAacGeoTypeAdmi[1051];
  qword_26104D0 = (uint64_t)&aAacGeoTypeAdmi[1086];
  qword_26104E8 = (uint64_t)&aAacGeoTypeAdmi[1121];
  qword_2610500 = (uint64_t)&aAacGeoTypeAdmi[1156];
  qword_2610518 = (uint64_t)&aAacGeoTypeAdmi[1191];
  qword_2610530 = (uint64_t)&aAacGeoTypeAdmi[1226];
  qword_2610548 = (uint64_t)&aAacGeoTypeAdmi[1261];
  qword_2610560 = (uint64_t)&aAacGeoTypeAdmi[1296];
  qword_2610578 = (uint64_t)&aAacGeoTypeAdmi[1331];
  qword_2610590 = (uint64_t)&aAacGeoTypeAdmi[1366];
  qword_26105A8 = (uint64_t)&aAacGeoTypeAdmi[1401];
  qword_26105C0 = (uint64_t)&aAacGeoTypeAdmi[1436];
  qword_26105D8 = (uint64_t)&aAacGeoTypeAdmi[1471];
  qword_26105F0 = (uint64_t)&aAacGeoTypeAdmi[1506];
  dword_2610600 = 46;
  qword_2610608 = (uint64_t)&aAacGeoTypeAdmi[1541];
  dword_2610618 = 47;
  qword_2610620 = (uint64_t)&aAacGeoTypeAdmi[1576];
  qword_2610638 = (uint64_t)&aAacGeoTypeAdmi[1611];
  qword_2610650 = (uint64_t)&aAacGeoTypeAdmi[1646];
  dword_2610660 = 50;
  qword_2610668 = (uint64_t)&aAacGeoTypeAdmi[1681];
  qword_2610680 = (uint64_t)&aAacGeoTypeAdmi[1716];
  qword_2610698 = (uint64_t)&aAacGeoTypeAdmi[1751];
  dword_26106A8 = 53;
  qword_26106B0 = (uint64_t)&aAacGeoTypeAdmi[1777];
  dword_26106C0 = 54;
  qword_26106C8 = (uint64_t)&aAacGeoTypeAdmi[1801];
  dword_26106D8 = 55;
  qword_26106E0 = (uint64_t)&aAacGeoTypeAdmi[1829];
  dword_26106F0 = 56;
  qword_26106F8 = (uint64_t)&aAacGeoTypeAdmi[1865];
  dword_2610708 = 57;
  qword_2610710 = (uint64_t)&aAacGeoTypeAdmi[1901];
  dword_2610720 = 58;
  qword_2610728 = (uint64_t)&aAacGeoTypeAdmi[1937];
  dword_2610738 = 59;
  qword_2610740 = (uint64_t)&aAacGeoTypeAdmi[1973];
  qword_2610758 = (uint64_t)&aAacGeoTypeAdmi[2009];
  dword_2610768 = 61;
  qword_2610770 = (uint64_t)&aAacGeoTypeAdmi[2036];
  dword_2610780 = 62;
  qword_2610788 = (uint64_t)&aAacGeoTypeAdmi[2071];
  dword_2610798 = 63;
  qword_26107A0 = (uint64_t)&aAacGeoTypeAdmi[2106];
  dword_26107B0 = 64;
  qword_26107B8 = (uint64_t)&aAacGeoTypeAdmi[2141];
  dword_26107C8 = 65;
  qword_26107D0 = (uint64_t)&aAacGeoTypeAdmi[2167];
  dword_26107E0 = 66;
  qword_26107E8 = (uint64_t)&aAacGeoTypeAdmi[2201];
  dword_26107F8 = 67;
  qword_2610800 = (uint64_t)&aAacGeoTypeAdmi[2235];
  dword_2610810 = 68;
  qword_2610818 = (uint64_t)&aAacGeoTypeAdmi[2269];
  dword_2610828 = 69;
  qword_2610830 = (uint64_t)&aAacGeoTypeAdmi[2303];
  dword_2610840 = 70;
  qword_2610848 = (uint64_t)&aAacGeoTypeAdmi[2337];
  dword_2610858 = 71;
  qword_2610860 = (uint64_t)&aAacGeoTypeAdmi[2369];
  qword_2610868 = 42;
  dword_2610870 = 72;
  qword_2610878 = (uint64_t)&aAacGeoTypeAdmi[2411];
  qword_2610880 = 31;
  dword_2610888 = 73;
  qword_2610890 = (uint64_t)&aAacGeoTypeAdmi[2442];
  qword_2610898 = 41;
  dword_26108A0 = 74;
  qword_26108A8 = (uint64_t)&aAacGeoTypeAdmi[2483];
  qword_26108B0 = 35;
  dword_26108B8 = 75;
  qword_26108C0 = (uint64_t)&aAacGeoTypeAdmi[2518];
  qword_26108C8 = 28;
  dword_26108D0 = 76;
  qword_26108D8 = (uint64_t)&aAacGeoTypeAdmi[2546];
  qword_26108E0 = 14;
  dword_26108E8 = 77;
  qword_26108F0 = (uint64_t)&aAacGeoTypeAdmi[2560];
  qword_26108F8 = 16;
  dword_2610900 = 78;
  qword_2610908 = (uint64_t)&aAacGeoTypeAdmi[2576];
  qword_2610910 = 13;
  dword_2610918 = 79;
  qword_2610920 = (uint64_t)&aAacGeoTypeAdmi[2589];
  qword_2610928 = 16;
  dword_2610930 = 80;
  qword_2610938 = (uint64_t)&aAacGeoTypeAdmi[2605];
  qword_2610940 = 29;
  dword_2610948 = 81;
  qword_2610950 = (uint64_t)&aAacGeoTypeAdmi[2634];
  qword_2610958 = 38;
  dword_2610960 = 82;
  qword_2610968 = (uint64_t)&aAacGeoTypeAdmi[2672];
  qword_2610970 = 31;
  dword_2610978 = 83;
  qword_2610980 = (uint64_t)&aAacGeoTypeAdmi[2703];
  qword_2610988 = 23;
  dword_2610990 = 84;
  qword_2610998 = (uint64_t)&aAacGeoTypeAdmi[2726];
  qword_26109A0 = 26;
  dword_26109A8 = 85;
  qword_26109B0 = (uint64_t)&aAacGeoTypeAdmi[2752];
  qword_26109B8 = 12;
  dword_26109C0 = 86;
  qword_26109C8 = (uint64_t)&aAacGeoTypeAdmi[2764];
  qword_26109D0 = 13;
  dword_26109D8 = 87;
  qword_26109E0 = (uint64_t)&aAacGeoTypeAdmi[2777];
  qword_26109E8 = 23;
  dword_26109F0 = 88;
  qword_26109F8 = (uint64_t)&aAacGeoTypeAdmi[2800];
  qword_2610A00 = 27;
  dword_2610A08 = 89;
  qword_2610A10 = (uint64_t)&aAacGeoTypeAdmi[2827];
  qword_2610A18 = 13;
  dword_2610A20 = 90;
  qword_2610A28 = (uint64_t)&aAacGeoTypeAdmi[2840];
  qword_2610A30 = 15;
  dword_2610A38 = 91;
  qword_2610A40 = (uint64_t)&aAacGeoTypeAdmi[2855];
  qword_2610A48 = 12;
  dword_2610A50 = 92;
  qword_2610A58 = (uint64_t)&aAacGeoTypeAdmi[2867];
  qword_2610A60 = 28;
  dword_2610A68 = 93;
  qword_2610A70 = (uint64_t)&aAacGeoTypeAdmi[2895];
  qword_2610A78 = 27;
  dword_2610A80 = 94;
  qword_2610A88 = (uint64_t)&aAacGeoTypeAdmi[2922];
  qword_2610A90 = 21;
  dword_2610A98 = 95;
  qword_2610AA0 = (uint64_t)&aAacGeoTypeAdmi[2943];
  qword_2610AA8 = 17;
  dword_2610AB0 = 96;
  qword_2610AB8 = (uint64_t)&aAacGeoTypeAdmi[2960];
  qword_2610AC0 = 15;
  dword_2610AC8 = 97;
  qword_2610AD0 = (uint64_t)&aAacGeoTypeAdmi[2975];
  qword_2610AD8 = 18;
  dword_2610AE0 = 98;
  qword_2610AE8 = (uint64_t)&aAacGeoTypeAdmi[2993];
  qword_2610AF0 = 25;
  dword_2610AF8 = 99;
  qword_2610B00 = (uint64_t)&aAacGeoTypeAdmi[3018];
  qword_2610B08 = 24;
  dword_2610B10 = 100;
  qword_2610B18 = (uint64_t)&aAacGeoTypeAdmi[3042];
  qword_2610B20 = 20;
  dword_2610B28 = 101;
  qword_2610B30 = (uint64_t)&aAacGeoTypeAdmi[3062];
  qword_2610B38 = 22;
  dword_2610B40 = 102;
  qword_2610B48 = (uint64_t)&aAacGeoTypeAdmi[3084];
  qword_2610B50 = 28;
  dword_2610B58 = 103;
  qword_2610B60 = (uint64_t)&aAacGeoTypeAdmi[3112];
  qword_2610B68 = 16;
  dword_2610B70 = 104;
  qword_2610B78 = (uint64_t)&aAacGeoTypeAdmi[3128];
  qword_2610B80 = 20;
  dword_2610B88 = 105;
  qword_2610B90 = (uint64_t)&aAacGeoTypeAdmi[3148];
  qword_2610B98 = 14;
  dword_2610BA0 = 106;
  qword_2610BA8 = (uint64_t)&aAacGeoTypeAdmi[3162];
  qword_2610BB0 = 20;
  dword_2610BB8 = 107;
  qword_2610BC0 = (uint64_t)&aAacGeoTypeAdmi[3182];
  qword_2610BC8 = 17;
  dword_2610BD0 = 108;
  qword_2610BD8 = (uint64_t)&aAacGeoTypeAdmi[3199];
  qword_2610BE0 = 24;
  dword_2610BE8 = 109;
  qword_2610BF0 = (uint64_t)&aAacGeoTypeAdmi[3223];
  qword_2610BF8 = 29;
  dword_2610C00 = 110;
  qword_2610C08 = (uint64_t)&aAacGeoTypeAdmi[3252];
  qword_2610C10 = 19;
  dword_2610C18 = 111;
  qword_2610C20 = (uint64_t)&aAacGeoTypeAdmi[3271];
  qword_2610C28 = 17;
  dword_2610C30 = 112;
  qword_2610C38 = (uint64_t)&aAacGeoTypeAdmi[3288];
  qword_2610C40 = 16;
  dword_2610C48 = 113;
  qword_2610C50 = (uint64_t)&aAacGeoTypeAdmi[3304];
  qword_2610C58 = 15;
  dword_2610C60 = 114;
  qword_2610C68 = (uint64_t)&aAacGeoTypeAdmi[3319];
  qword_2610C70 = 21;
  dword_2610C78 = 115;
  qword_2610C80 = (uint64_t)&aAacGeoTypeAdmi[3340];
  qword_2610C88 = 15;
  dword_2610C90 = 116;
  qword_2610C98 = (uint64_t)&aAacGeoTypeAdmi[3355];
  qword_2610CA0 = 19;
  dword_2610CA8 = 117;
  qword_2610CB0 = (uint64_t)&aAacGeoTypeAdmi[3374];
  qword_2610CB8 = 27;
  dword_2610CC0 = 118;
  qword_2610CC8 = (uint64_t)&aAacGeoTypeAdmi[3401];
  qword_2610CD0 = 34;
  dword_2610CD8 = 119;
  qword_2610CE0 = (uint64_t)&aAacGeoTypeAdmi[3435];
  qword_2610CE8 = 32;
  dword_2610CF0 = 120;
  qword_2610CF8 = (uint64_t)&aAacGeoTypeAdmi[3467];
  qword_2610D00 = 28;
  dword_2610D08 = 121;
  qword_2610D10 = (uint64_t)&aAacGeoTypeAdmi[3495];
  qword_2610D18 = 25;
  dword_2610D20 = 122;
  qword_2610D28 = (uint64_t)&aAacGeoTypeAdmi[3520];
  qword_2610D30 = 27;
  dword_2610D38 = 123;
  qword_2610D40 = (uint64_t)&aAacGeoTypeAdmi[3547];
  qword_2610D48 = 14;
  dword_2610D50 = 124;
  qword_2610D58 = (uint64_t)&aAacGeoTypeAdmi[3561];
  qword_2610D60 = 12;
  dword_2610D68 = 125;
  qword_2610D70 = (uint64_t)&aAacGeoTypeAdmi[3573];
  qword_2610D78 = 26;
  dword_2610D80 = 126;
  qword_2610D88 = (uint64_t)&aAacGeoTypeAdmi[3599];
  qword_2610D90 = 25;
  dword_2610D98 = 127;
  qword_2610DA0 = (uint64_t)&aAacGeoTypeAdmi[3624];
  qword_2610DA8 = 14;
  qword_2610FD0 = 15;
  dword_2610FD8 = 141;
  qword_2610FB0 = (uint64_t)&aAacGeoTypeAdmi[3983];
  qword_2610FB8 = 16;
  dword_2610FC0 = 158;
  qword_2610FC8 = (uint64_t)&aAacGeoTypeAdmi[3999];
  qword_2610F98 = (uint64_t)&aAacGeoTypeAdmi[3967];
  qword_2610FA0 = 16;
  dword_2610FA8 = 157;
  dword_2610F78 = 155;
  qword_2610F80 = (uint64_t)&aAacGeoTypeAdmi[3951];
  qword_2610F88 = 16;
  dword_2610F90 = 156;
  qword_2610F58 = 16;
  dword_2610F60 = 154;
  qword_2610F68 = (uint64_t)&aAacGeoTypeAdmi[3935];
  qword_2610F70 = 16;
  qword_2610F40 = 16;
  dword_2610F48 = 153;
  qword_2610F50 = (uint64_t)&aAacGeoTypeAdmi[3919];
  qword_2610F20 = (uint64_t)&aAacGeoTypeAdmi[3887];
  qword_2610F28 = 16;
  dword_2610F30 = 152;
  qword_2610F38 = (uint64_t)&aAacGeoTypeAdmi[3903];
  qword_2610F08 = (uint64_t)&aAacGeoTypeAdmi[3871];
  qword_2610F10 = 16;
  dword_2610F18 = 151;
  dword_2610EE8 = 149;
  qword_2610EF0 = (uint64_t)&aAacGeoTypeAdmi[3855];
  qword_2610EF8 = 16;
  dword_2610F00 = 150;
  qword_2610EC8 = 15;
  dword_2610ED0 = 140;
  qword_2610ED8 = (uint64_t)&aAacGeoTypeAdmi[3839];
  qword_2610EE0 = 16;
  qword_2610EB0 = 15;
  dword_2610EB8 = 139;
  qword_2610EC0 = (uint64_t)&aAacGeoTypeAdmi[3824];
  qword_2610E90 = (uint64_t)&aAacGeoTypeAdmi[3796];
  qword_2610E98 = 13;
  dword_2610EA0 = 138;
  qword_2610EA8 = (uint64_t)&aAacGeoTypeAdmi[3809];
  dword_2610DB0 = 128;
  qword_2610E80 = 15;
  dword_2610E88 = 137;
  qword_2610E60 = (uint64_t)&aAacGeoTypeAdmi[3748];
  qword_2610E68 = 33;
  dword_2610E70 = 136;
  qword_2610E78 = (uint64_t)&aAacGeoTypeAdmi[3781];
  qword_2610E48 = (uint64_t)&aAacGeoTypeAdmi[3732];
  qword_2610E50 = 16;
  dword_2610E58 = 135;
  dword_2610E28 = 133;
  qword_2610E30 = (uint64_t)&aAacGeoTypeAdmi[3709];
  qword_2610E38 = 23;
  dword_2610E40 = 134;
  dword_2610E10 = 132;
  qword_2610E18 = (uint64_t)&aAacGeoTypeAdmi[3692];
  qword_2610E20 = 17;
  qword_2610DB8 = (uint64_t)&aAacGeoTypeAdmi[3638];
  dword_2610DF8 = 131;
  qword_2610E00 = (uint64_t)&aAacGeoTypeAdmi[3675];
  qword_2610E08 = 17;
  qword_2610DD8 = 12;
  dword_2610DE0 = 130;
  qword_2610DE8 = (uint64_t)&aAacGeoTypeAdmi[3667];
  qword_2610DF0 = 8;
  qword_2610DC0 = 17;
  dword_2610DC8 = 129;
  qword_2610DD0 = (uint64_t)&aAacGeoTypeAdmi[3655];
  qword_2610FE0 = (uint64_t)&aAacGeoTypeAdmi[4014];
  dword_2610FF0 = 142;
  qword_2610FF8 = (uint64_t)&aAacGeoTypeAdmi[4029];
  dword_2611008 = 143;
  qword_2611010 = (uint64_t)&aAacGeoTypeAdmi[4044];
  dword_2611020 = 144;
  qword_2611028 = (uint64_t)&aAacGeoTypeAdmi[4059];
  dword_2611038 = 145;
  qword_2611040 = (uint64_t)&aAacGeoTypeAdmi[4074];
  dword_2611050 = 146;
  qword_2611058 = (uint64_t)&aAacGeoTypeAdmi[4089];
  dword_2611068 = 147;
  qword_2611070 = (uint64_t)&aAacGeoTypeAdmi[4104];
  dword_2611080 = 148;
  qword_2611088 = (uint64_t)&aAacGeoTypeAdmi[4119];
  dword_2611098 = 159;
  qword_26110A0 = (uint64_t)&aAacGeoTypeAdmi[4137];
  dword_26110B0 = 160;
  qword_26110B8 = (uint64_t)&aAacGeoTypeAdmi[4163];
  dword_26110C8 = 161;
  qword_26110D0 = (uint64_t)&aAacGeoTypeAdmi[4189];
  dword_26110E0 = 162;
  qword_26110E8 = (uint64_t)&aAacGeoTypeAdmi[4215];
  dword_26110F8 = 163;
  qword_2611100 = (uint64_t)&aAacGeoTypeAdmi[4233];
  dword_2611110 = 164;
  qword_2611118 = (uint64_t)&aAacGeoTypeAdmi[4264];
  dword_2611128 = 165;
  qword_2611130 = (uint64_t)&aAacGeoTypeAdmi[4288];
  dword_2611140 = 166;
  qword_2611148 = (uint64_t)&aAacGeoTypeAdmi[4324];
  dword_2611158 = 167;
  qword_2611160 = (uint64_t)&aAacGeoTypeAdmi[4338];
  dword_2611170 = 168;
  qword_2611178 = (uint64_t)&aAacGeoTypeAdmi[4350];
  dword_2611188 = 169;
  qword_2611190 = (uint64_t)&aAacGeoTypeAdmi[4364];
  dword_26111A0 = 170;
  qword_26111A8 = (uint64_t)&aAacGeoTypeAdmi[4378];
  dword_26111B8 = 179;
  qword_26111C0 = (uint64_t)&aAacGeoTypeAdmi[4393];
  dword_26111D0 = 180;
  qword_26111D8 = (uint64_t)&aAacGeoTypeAdmi[4408];
  dword_26111E8 = 181;
  qword_26111F0 = (uint64_t)&aAacGeoTypeAdmi[4423];
  dword_2611200 = 182;
  qword_2611208 = (uint64_t)&aAacGeoTypeAdmi[4438];
  dword_2611218 = 183;
  qword_2611220 = (uint64_t)&aAacGeoTypeAdmi[4453];
  dword_2611230 = 184;
  qword_2611238 = (uint64_t)&aAacGeoTypeAdmi[4468];
  dword_2611248 = 185;
  qword_2611250 = (uint64_t)&aAacGeoTypeAdmi[4483];
  dword_2611260 = 186;
  qword_2611268 = (uint64_t)&aAacGeoTypeAdmi[4498];
  dword_2611278 = 187;
  qword_2611280 = (uint64_t)&aAacGeoTypeAdmi[4513];
  dword_2611290 = 188;
  qword_2611298 = (uint64_t)&aAacGeoTypeAdmi[4528];
  dword_26112A8 = 171;
  qword_26112B0 = (uint64_t)&aAacGeoTypeAdmi[4542];
  dword_26112C0 = 172;
  qword_26112C8 = (uint64_t)&aAacGeoTypeAdmi[4556];
  dword_26112D8 = 173;
  qword_26112E0 = (uint64_t)&aAacGeoTypeAdmi[4570];
  dword_26112F0 = 174;
  qword_26112F8 = (uint64_t)&aAacGeoTypeAdmi[4584];
  dword_2611308 = 175;
  qword_2611310 = (uint64_t)&aAacGeoTypeAdmi[4598];
  dword_2611320 = 176;
  qword_2611328 = (uint64_t)&aAacGeoTypeAdmi[4612];
  dword_2611338 = 177;
  qword_2611340 = (uint64_t)&aAacGeoTypeAdmi[4626];
  dword_2611350 = 178;
  qword_2611358 = (uint64_t)&aAacGeoTypeAdmi[4640];
  dword_2611368 = 189;
  qword_2611370 = (uint64_t)&aAacGeoTypeAdmi[4649];
  dword_2611380 = 190;
  qword_2611388 = (uint64_t)&aAacGeoTypeAdmi[4658];
  dword_2611398 = 191;
  qword_26113A0 = (uint64_t)&aAacGeoTypeAdmi[4667];
  dword_26113B0 = 5786;
  qword_26113B8 = (uint64_t)&aAacGeoTypeAdmi[4693];
  dword_26113C8 = 192;
  qword_26113D0 = (uint64_t)&aAacGeoTypeAdmi[4709];
  dword_26113E0 = 193;
  qword_26113E8 = (uint64_t)&aAacGeoTypeAdmi[4729];
  dword_26113F8 = 194;
  qword_2611400 = (uint64_t)&aAacGeoTypeAdmi[4753];
  dword_2611410 = 5787;
  qword_2611418 = (uint64_t)&aAacGeoTypeAdmi[4782];
  dword_2611428 = 195;
  qword_2611430 = (uint64_t)&aAacGeoTypeAdmi[4799];
  dword_2611440 = 196;
  qword_2611448 = (uint64_t)&aAacGeoTypeAdmi[4830];
  dword_2611458 = 197;
  qword_2611460 = (uint64_t)&aAacGeoTypeAdmi[4862];
  dword_2611470 = 198;
  qword_2611478 = (uint64_t)&aAacGeoTypeAdmi[4885];
  dword_2611488 = 199;
  qword_2611490 = (uint64_t)&aAacGeoTypeAdmi[4908];
  dword_26114A0 = 200;
  qword_26114A8 = (uint64_t)&aAacGeoTypeAdmi[4931];
  dword_26114B8 = 201;
  qword_26114C0 = (uint64_t)&aAacGeoTypeAdmi[4945];
  dword_26114D0 = 202;
  qword_26114D8 = (uint64_t)&aAacGeoTypeAdmi[4971];
  dword_26114E8 = 203;
  qword_26114F0 = (uint64_t)&aAacGeoTypeAdmi[4981];
  dword_2611500 = 204;
  qword_2611508 = (uint64_t)&aAacGeoTypeAdmi[5010];
  dword_2611518 = 205;
  qword_2611520 = (uint64_t)&aAacGeoTypeAdmi[5026];
  dword_2611530 = 206;
  qword_2611538 = (uint64_t)&aAacGeoTypeAdmi[5046];
  dword_2611548 = 207;
  qword_2611550 = (uint64_t)&aAacGeoTypeAdmi[5067];
  dword_2611560 = 208;
  qword_2611568 = (uint64_t)&aAacGeoTypeAdmi[5087];
  dword_2611578 = 209;
  qword_2611580 = (uint64_t)&aAacGeoTypeAdmi[5102];
  dword_2611590 = 210;
  qword_2611598 = (uint64_t)&aAacGeoTypeAdmi[5132];
  dword_26115A8 = 211;
  qword_26115B0 = (uint64_t)&aAacGeoTypeAdmi[5157];
  dword_26115C0 = 212;
  qword_26115C8 = (uint64_t)&aAacGeoTypeAdmi[5191];
  dword_26115D8 = 213;
  qword_26115E0 = (uint64_t)&aAacGeoTypeAdmi[5220];
  dword_26115F0 = 214;
  qword_26115F8 = (uint64_t)&aAacGeoTypeAdmi[5249];
  dword_2611608 = 215;
  qword_2611610 = (uint64_t)&aAacGeoTypeAdmi[5262];
  dword_2611620 = 216;
  qword_2611628 = (uint64_t)&aAacGeoTypeAdmi[5307];
  dword_2611638 = 217;
  qword_2611640 = (uint64_t)&aAacGeoTypeAdmi[5343];
  dword_2611650 = 218;
  qword_2611658 = (uint64_t)&aAacGeoTypeAdmi[5369];
  dword_2611668 = 219;
  qword_2611670 = (uint64_t)&aAacGeoTypeAdmi[5410];
  dword_2611680 = 220;
  qword_2611688 = (uint64_t)&aAacGeoTypeAdmi[5432];
  dword_2611698 = 221;
  qword_26116A0 = (uint64_t)&aAacGeoTypeAdmi[5456];
  dword_26116B0 = 222;
  qword_26116B8 = (uint64_t)&aAacGeoTypeAdmi[5484];
  dword_26116C8 = 223;
  qword_26116D0 = (uint64_t)&aAacGeoTypeAdmi[5506];
  dword_26116E0 = 224;
  qword_26116E8 = (uint64_t)&aAacGeoTypeAdmi[5516];
  dword_26116F8 = 225;
  qword_2611700 = (uint64_t)&aAacGeoTypeAdmi[5534];
  dword_2611710 = 226;
  qword_2611718 = (uint64_t)&aAacGeoTypeAdmi[5559];
  dword_2611728 = 227;
  qword_2611730 = (uint64_t)&aAacGeoTypeAdmi[5579];
  dword_2611740 = 228;
  qword_2611748 = (uint64_t)&aAacGeoTypeAdmi[5601];
  dword_2611758 = 229;
  qword_2611760 = (uint64_t)&aAacGeoTypeAdmi[5624];
  dword_2611770 = 230;
  qword_2611778 = (uint64_t)&aAacGeoTypeAdmi[5645];
  dword_2611788 = 231;
  qword_2611790 = (uint64_t)&aAacGeoTypeAdmi[5665];
  dword_26117A0 = 232;
  qword_26117A8 = (uint64_t)&aAacGeoTypeAdmi[5685];
  dword_26117B8 = 233;
  qword_26117C0 = (uint64_t)&aAacGeoTypeAdmi[5707];
  dword_26117D0 = 234;
  qword_26117D8 = (uint64_t)&aAacGeoTypeAdmi[5729];
  dword_26117E8 = 235;
  qword_26117F0 = (uint64_t)&aAacGeoTypeAdmi[5753];
  dword_2611800 = 236;
  qword_2611808 = (uint64_t)&aAacGeoTypeAdmi[5779];
  qword_2610850 = 32;
  dword_2611818 = 237;
  qword_2611820 = (uint64_t)&aAacGeoTypeAdmi[5805];
  qword_2610838 = 34;
  dword_2611830 = 238;
  qword_2611838 = (uint64_t)&aAacGeoTypeAdmi[5838];
  qword_2610820 = 34;
  dword_2611848 = 239;
  qword_2611850 = (uint64_t)&aAacGeoTypeAdmi[5864];
  qword_2610808 = 34;
  dword_2611860 = 240;
  qword_2611868 = (uint64_t)&aAacGeoTypeAdmi[5912];
  qword_26107F0 = 34;
  dword_2611878 = 241;
  qword_2611880 = (uint64_t)&aAacGeoTypeAdmi[5928];
  qword_26107D8 = 34;
  dword_2611890 = 242;
  qword_2611898 = (uint64_t)&aAacGeoTypeAdmi[5942];
  qword_26107C0 = 26;
  dword_26118A8 = 243;
  qword_26118B0 = (uint64_t)&aAacGeoTypeAdmi[5950];
  qword_26107A8 = 35;
  dword_26118C0 = 244;
  qword_26118C8 = (uint64_t)&aAacGeoTypeAdmi[5962];
  qword_2610790 = 35;
  dword_26118D8 = 245;
  qword_26118E0 = (uint64_t)&aAacGeoTypeAdmi[5977];
  qword_2610778 = 35;
  dword_26118F0 = 246;
  qword_26118F8 = (uint64_t)&aAacGeoTypeAdmi[5988];
  qword_2610760 = 27;
  dword_2611908 = 247;
  qword_2610748 = 36;
  dword_2610750 = 60;
  qword_2611910 = (uint64_t)&aAacGeoTypeAdmi[5999];
  dword_2611920 = 248;
  qword_2610730 = 36;
  qword_2611928 = (uint64_t)&aAacGeoTypeAdmi[6007];
  dword_2611938 = 249;
  qword_2610718 = 36;
  qword_2611940 = (uint64_t)&aAacGeoTypeAdmi[6026];
  dword_2611950 = 250;
  qword_2610700 = 36;
  qword_2611958 = (uint64_t)&aAacGeoTypeAdmi[6036];
  dword_2611968 = 251;
  qword_26106E8 = 36;
  qword_2611970 = (uint64_t)&aAacGeoTypeAdmi[6048];
  dword_2611980 = 252;
  qword_26106D0 = 28;
  qword_2611988 = (uint64_t)&aAacGeoTypeAdmi[6063];
  dword_2611998 = 253;
  qword_26106B8 = 24;
  qword_26119A0 = (uint64_t)&aAacGeoTypeAdmi[6079];
  dword_2610690 = 52;
  qword_26106A0 = 26;
  dword_26119B0 = 254;
  dword_2610678 = 51;
  qword_2610688 = 35;
  qword_26119B8 = (uint64_t)&aAacGeoTypeAdmi[6106];
  dword_26119C8 = 255;
  qword_2610670 = 35;
  qword_26119D0 = (uint64_t)&aAacGeoTypeAdmi[6133];
  qword_2610640 = 35;
  dword_2610648 = 49;
  qword_2610658 = 35;
  dword_26119E0 = 256;
  qword_2610628 = 35;
  dword_2610630 = 48;
  qword_26119E8 = (uint64_t)&aAacGeoTypeAdmi[6160];
  dword_26119F8 = 257;
  qword_2610610 = 35;
  qword_2611A00 = (uint64_t)&aAacGeoTypeAdmi[6184];
  dword_2611A10 = 258;
  qword_26105F8 = 35;
  qword_2611A18 = (uint64_t)&aAacGeoTypeAdmi[6208];
  qword_26105E0 = 35;
  dword_26105E8 = 45;
  dword_2611A28 = 259;
  qword_26105C8 = 35;
  dword_26105D0 = 44;
  qword_2611A30 = (uint64_t)&aAacGeoTypeAdmi[6232];
  dword_2611A40 = 260;
  qword_26105B0 = 35;
  dword_26105B8 = 43;
  qword_2611A48 = (uint64_t)&aAacGeoTypeAdmi[6243];
  dword_2610588 = 41;
  qword_2610598 = 35;
  dword_26105A0 = 42;
  dword_2611A58 = 261;
  dword_2610570 = 40;
  qword_2610580 = 35;
  qword_2611A60 = (uint64_t)&aAacGeoTypeAdmi[6261];
  qword_2610550 = 35;
  dword_2610558 = 39;
  qword_2610568 = 35;
  dword_2611A70 = 262;
  qword_2610538 = 35;
  dword_2610540 = 38;
  qword_2611A78 = (uint64_t)&aAacGeoTypeAdmi[6304];
  dword_2610510 = 36;
  qword_2610520 = 35;
  dword_2610528 = 37;
  dword_2611A88 = 263;
  qword_26104F0 = 35;
  dword_26104F8 = 35;
  qword_2610508 = 35;
  qword_2611A90 = (uint64_t)&aAacGeoTypeAdmi[6341];
  dword_2611AA0 = 264;
  qword_26104D8 = 35;
  dword_26104E0 = 34;
  qword_2611AA8 = (uint64_t)&aAacGeoTypeAdmi[6369];
  dword_2611AB8 = 265;
  qword_26104C0 = 35;
  dword_26104C8 = 33;
  qword_2611AC0 = (uint64_t)&aAacGeoTypeAdmi[6399];
  dword_2610498 = 31;
  qword_26104A8 = 35;
  dword_26104B0 = 32;
  dword_2611AD0 = 266;
  qword_2610478 = 35;
  dword_2610480 = 30;
  qword_2610490 = 35;
  qword_2611AD8 = (uint64_t)&aAacGeoTypeAdmi[6429];
  qword_2610460 = 35;
  dword_2610468 = 29;
  dword_2611AE8 = 267;
  dword_2610438 = 27;
  qword_2610448 = 35;
  dword_2610450 = 28;
  qword_2611AF0 = (uint64_t)&aAacGeoTypeAdmi[6457];
  dword_2611B00 = 268;
  qword_2610418 = 35;
  dword_2610420 = 26;
  qword_2610430 = 35;
  qword_2611B08 = (uint64_t)&aAacGeoTypeAdmi[6498];
  qword_2610400 = 35;
  dword_2610408 = 25;
  dword_2611B18 = 269;
  dword_26103D8 = 23;
  qword_26103E8 = 35;
  dword_26103F0 = 24;
  qword_2611B20 = (uint64_t)&aAacGeoTypeAdmi[6533];
  dword_2611B30 = 270;
  qword_26103B8 = 35;
  dword_26103C0 = 22;
  qword_26103D0 = 35;
  qword_2610398 = (uint64_t)&aAacGeoTypeAdmi[631];
  unk_26103A0 = 35;
  dword_2610390 = 20;
  dword_26103A8 = 21;
  qword_2610368 = (uint64_t)&aAacGeoTypeAdmi[561];
  unk_2610370 = 35;
  dword_2610378 = 19;
  qword_2610388 = 35;
  qword_2611B38 = (uint64_t)&aAacGeoTypeAdmi[6559];
  qword_2610350 = (uint64_t)&aAacGeoTypeAdmi[526];
  unk_2610358 = 35;
  dword_2610348 = 17;
  dword_2610360 = 18;
  qword_2610320 = (uint64_t)&aAacGeoTypeAdmi[456];
  unk_2610328 = 35;
  dword_2610330 = 16;
  qword_2610340 = 35;
  dword_2611B48 = 271;
  qword_2610308 = (uint64_t)&aAacGeoTypeAdmi[421];
  unk_2610310 = 35;
  dword_2610318 = 15;
  qword_26102F0 = (uint64_t)&aAacGeoTypeAdmi[386];
  unk_26102F8 = 35;
  dword_26102E8 = 13;
  dword_2610300 = 14;
  qword_2611B50 = (uint64_t)&aAacGeoTypeAdmi[6581];
  qword_26102C0 = (uint64_t)&aAacGeoTypeAdmi[316];
  unk_26102C8 = 35;
  dword_26102D0 = 12;
  qword_26102E0 = 35;
  qword_26102A8 = (uint64_t)&aAacGeoTypeAdmi[284];
  unk_26102B0 = 32;
  dword_26102B8 = 11;
  dword_2611B60 = 272;
  qword_2610290 = (uint64_t)&aAacGeoTypeAdmi[258];
  unk_2610298 = 26;
  dword_26102A0 = 10;
  qword_2610278 = (uint64_t)&aAacGeoTypeAdmi[232];
  unk_2610280 = 26;
  dword_2610288 = 9;
  qword_2611B68 = (uint64_t)&aAacGeoTypeAdmi[6601];
  qword_2610260 = (uint64_t)&aAacGeoTypeAdmi[206];
  unk_2610268 = 26;
  dword_2610270 = 8;
  qword_2610230 = (uint64_t)&aAacGeoTypeAdmi[154];
  unk_2610238 = 26;
  dword_2610240 = 6;
  qword_2610250 = 26;
  dword_2611B78 = 5785;
  qword_2610218 = (uint64_t)&aAacGeoTypeAdmi[128];
  unk_2610220 = 26;
  qword_2610200 = (uint64_t)&aAacGeoTypeAdmi[102];
  unk_2610208 = 26;
  dword_2610210 = 4;
  qword_2611B80 = (uint64_t)&aAacGeoTypeAdmi[6631];
  dword_2611B90 = 273;
  qword_26101E8 = (uint64_t)&aAacGeoTypeAdmi[76];
  unk_26101F0 = 26;
  qword_2611B98 = (uint64_t)&aAacGeoTypeAdmi[6639];
  qword_26101D0 = (uint64_t)&aAacGeoTypeAdmi[50];
  unk_26101D8 = 26;
  dword_2611BA8 = 274;
  qword_26101B8 = (uint64_t)&aAacGeoTypeAdmi[24];
  unk_26101C0 = 26;
  dword_26101B0 = 0;
  qword_2611BB0 = (uint64_t)&aAacGeoTypeAdmi[6664];
  qword_26101A0 = (uint64_t)aAacGeoTypeAdmi;
  *(void *)algn_26101A8 = 24;
  dword_2611BC0 = 275;
  qword_2610FE8 = 15;
  qword_2611000 = 15;
  dword_2611FB0 = 317;
  qword_26123C0 = (uint64_t)&aAacGeoTypeAdmi[8499];
  dword_26123E8 = 352;
  dword_2612400 = 353;
  qword_2612738 = (uint64_t)&aAacGeoTypeAdmi[9554];
  dword_2612748 = 387;
  qword_2612740 = 29;
  qword_2612720 = (uint64_t)&aAacGeoTypeAdmi[9524];
  dword_2612730 = 386;
  qword_2612728 = 30;
  qword_2612708 = (uint64_t)&aAacGeoTypeAdmi[9494];
  dword_2612718 = 385;
  qword_2612710 = 30;
  qword_26126F0 = (uint64_t)&aAacGeoTypeAdmi[9456];
  dword_2612700 = 384;
  qword_26126F8 = 38;
  qword_26126D8 = (uint64_t)&aAacGeoTypeAdmi[9421];
  dword_26126E8 = 383;
  qword_26126E0 = 35;
  qword_26126C0 = (uint64_t)&aAacGeoTypeAdmi[9395];
  dword_26126D0 = 382;
  qword_26126C8 = 26;
  qword_26126A8 = (uint64_t)&aAacGeoTypeAdmi[9358];
  dword_26126B8 = 381;
  qword_26126B0 = 37;
  qword_2612690 = (uint64_t)&aAacGeoTypeAdmi[9343];
  dword_26126A0 = 380;
  qword_2612698 = 15;
  qword_2612678 = (uint64_t)&aAacGeoTypeAdmi[9332];
  dword_2612688 = 379;
  qword_2612680 = 11;
  qword_2612660 = (uint64_t)&aAacGeoTypeAdmi[9317];
  dword_2612670 = 378;
  qword_2612668 = 15;
  qword_2612648 = (uint64_t)&aAacGeoTypeAdmi[9292];
  dword_2612658 = 5776;
  qword_2612650 = 25;
  qword_2612630 = (uint64_t)&aAacGeoTypeAdmi[9278];
  dword_2612640 = 377;
  qword_2612638 = 14;
  qword_2612618 = (uint64_t)&aAacGeoTypeAdmi[9263];
  dword_2612628 = 376;
  qword_2612620 = 15;
  qword_2612600 = (uint64_t)&aAacGeoTypeAdmi[9244];
  dword_2612610 = 375;
  qword_2612608 = 19;
  qword_26125E8 = (uint64_t)&aAacGeoTypeAdmi[9224];
  dword_26125F8 = 374;
  qword_26125F0 = 20;
  qword_26125D0 = (uint64_t)&aAacGeoTypeAdmi[9202];
  dword_26125E0 = 373;
  qword_26125D8 = 22;
  qword_26125B8 = (uint64_t)&aAacGeoTypeAdmi[9190];
  dword_26125C8 = 372;
  qword_26125C0 = 12;
  qword_26125A0 = (uint64_t)&aAacGeoTypeAdmi[9161];
  dword_26125B0 = 371;
  qword_26125A8 = 29;
  qword_2612588 = (uint64_t)&aAacGeoTypeAdmi[9133];
  dword_2612598 = 370;
  qword_2612590 = 28;
  qword_2612570 = (uint64_t)&aAacGeoTypeAdmi[9106];
  dword_2612580 = 369;
  qword_2612578 = 27;
  qword_2612558 = (uint64_t)&aAacGeoTypeAdmi[9079];
  dword_2612568 = 368;
  qword_2612560 = 27;
  qword_2612540 = (uint64_t)&aAacGeoTypeAdmi[9048];
  dword_2612550 = 367;
  qword_2612548 = 31;
  qword_2612528 = (uint64_t)&aAacGeoTypeAdmi[9023];
  dword_2612538 = 366;
  qword_2612530 = 25;
  qword_2612510 = (uint64_t)&aAacGeoTypeAdmi[8995];
  dword_2612520 = 365;
  qword_2612518 = 28;
  qword_26124F8 = (uint64_t)&aAacGeoTypeAdmi[8965];
  dword_2612508 = 364;
  qword_2612500 = 30;
  qword_26124E0 = (uint64_t)&aAacGeoTypeAdmi[8932];
  dword_26124F0 = 363;
  qword_26124E8 = 33;
  qword_26124C8 = (uint64_t)&aAacGeoTypeAdmi[8892];
  dword_26124D8 = 362;
  qword_26124D0 = 40;
  qword_26124B0 = (uint64_t)&aAacGeoTypeAdmi[8855];
  dword_26124C0 = 361;
  qword_26124B8 = 37;
  qword_2612498 = (uint64_t)&aAacGeoTypeAdmi[8816];
  dword_26124A8 = 360;
  qword_26124A0 = 39;
  qword_2612480 = (uint64_t)&aAacGeoTypeAdmi[8786];
  dword_2612490 = 359;
  qword_2612488 = 30;
  qword_2612468 = (uint64_t)&aAacGeoTypeAdmi[8748];
  dword_2612478 = 358;
  qword_2612470 = 38;
  qword_2612450 = (uint64_t)&aAacGeoTypeAdmi[8709];
  dword_2612460 = 357;
  qword_2612458 = 39;
  qword_2612438 = (uint64_t)&aAacGeoTypeAdmi[8676];
  dword_2612448 = 356;
  qword_2612440 = 33;
  qword_2612420 = (uint64_t)&aAacGeoTypeAdmi[8646];
  dword_2612430 = 355;
  qword_2612428 = 30;
  qword_2612408 = (uint64_t)&aAacGeoTypeAdmi[8612];
  dword_2612418 = 354;
  qword_2612410 = 34;
  qword_26123F0 = (uint64_t)&aAacGeoTypeAdmi[8569];
  qword_2611A68 = 43;
  qword_26123F8 = 43;
  dword_26123D0 = 351;
  qword_26123D8 = (uint64_t)&aAacGeoTypeAdmi[8535];
  qword_26123C8 = 36;
  qword_26123E0 = 34;
  qword_2611660 = 41;
  qword_2611AF8 = 41;
  qword_26123B0 = 41;
  dword_26123B8 = 350;
  dword_2611F98 = 316;
  dword_26123A0 = 349;
  qword_26123A8 = (uint64_t)&aAacGeoTypeAdmi[8458];
  dword_2611F80 = 315;
  qword_2611F88 = (uint64_t)&aAacGeoTypeAdmi[7450];
  qword_2611F90 = 11;
  dword_2611F68 = 314;
  qword_2611F70 = (uint64_t)&aAacGeoTypeAdmi[7441];
  qword_2611F78 = 9;
  dword_2611F50 = 313;
  qword_2611F58 = (uint64_t)&aAacGeoTypeAdmi[7432];
  qword_2611F60 = 9;
  dword_2611F38 = 312;
  qword_2611F40 = (uint64_t)&aAacGeoTypeAdmi[7422];
  qword_2611F48 = 10;
  dword_2611F20 = 311;
  qword_2611F28 = (uint64_t)&aAacGeoTypeAdmi[7406];
  qword_2611F30 = 16;
  dword_2611F08 = 310;
  qword_2611F10 = (uint64_t)&aAacGeoTypeAdmi[7389];
  qword_2611F18 = 17;
  dword_2611EF0 = 309;
  qword_2611EF8 = (uint64_t)&aAacGeoTypeAdmi[7369];
  qword_2611F00 = 20;
  dword_2611ED8 = 308;
  qword_2611EE0 = (uint64_t)&aAacGeoTypeAdmi[7349];
  qword_2611EE8 = 20;
  dword_2611EC0 = 307;
  qword_2611EC8 = (uint64_t)&aAacGeoTypeAdmi[7332];
  qword_2611ED0 = 17;
  dword_2611EA8 = 306;
  qword_2611EB0 = (uint64_t)&aAacGeoTypeAdmi[7312];
  qword_2611EB8 = 20;
  dword_2611E90 = 305;
  qword_2611E98 = (uint64_t)&aAacGeoTypeAdmi[7299];
  qword_2611EA0 = 13;
  dword_2611E78 = 304;
  qword_2611E80 = (uint64_t)&aAacGeoTypeAdmi[7282];
  qword_2611E88 = 17;
  dword_2611E60 = 303;
  qword_2611E68 = (uint64_t)&aAacGeoTypeAdmi[7265];
  qword_2611E70 = 17;
  dword_2611E48 = 302;
  qword_2611E50 = (uint64_t)&aAacGeoTypeAdmi[7248];
  qword_2611E58 = 17;
  dword_2611E30 = 301;
  qword_2611E38 = (uint64_t)&aAacGeoTypeAdmi[7233];
  qword_2611E40 = 15;
  dword_2611E18 = 300;
  qword_2611E20 = (uint64_t)&aAacGeoTypeAdmi[7216];
  qword_2611E28 = 17;
  dword_2611E00 = 299;
  qword_2611E08 = (uint64_t)&aAacGeoTypeAdmi[7199];
  qword_2611E10 = 17;
  dword_2611DE8 = 298;
  qword_2611DF0 = (uint64_t)&aAacGeoTypeAdmi[7182];
  qword_2611DF8 = 17;
  dword_2611DD0 = 297;
  qword_2611DD8 = (uint64_t)&aAacGeoTypeAdmi[7167];
  qword_2611DE0 = 15;
  dword_2611DB8 = 296;
  qword_2611DC0 = (uint64_t)&aAacGeoTypeAdmi[7150];
  qword_2611DC8 = 17;
  dword_2611DA0 = 295;
  qword_2611DA8 = (uint64_t)&aAacGeoTypeAdmi[7133];
  qword_2611DB0 = 17;
  dword_2611D88 = 294;
  qword_2611D90 = (uint64_t)&aAacGeoTypeAdmi[7116];
  qword_2611D98 = 17;
  dword_2611D70 = 293;
  qword_2611D78 = (uint64_t)&aAacGeoTypeAdmi[7101];
  qword_2611D80 = 15;
  dword_2611D58 = 292;
  qword_2611D60 = (uint64_t)&aAacGeoTypeAdmi[7078];
  qword_2611D68 = 23;
  dword_2611D40 = 291;
  qword_2611D48 = (uint64_t)&aAacGeoTypeAdmi[7068];
  qword_2611D50 = 10;
  dword_2611D28 = 290;
  qword_2611D30 = (uint64_t)&aAacGeoTypeAdmi[7058];
  qword_2611D38 = 10;
  dword_2611D10 = 289;
  qword_2611D18 = (uint64_t)&aAacGeoTypeAdmi[7032];
  qword_2611D20 = 26;
  dword_2611CF8 = 288;
  qword_2611D00 = (uint64_t)&aAacGeoTypeAdmi[7006];
  qword_2611D08 = 26;
  dword_2611CE0 = 287;
  qword_2611CE8 = (uint64_t)&aAacGeoTypeAdmi[6980];
  qword_2611CF0 = 26;
  dword_2611CC8 = 286;
  qword_2611CD0 = (uint64_t)&aAacGeoTypeAdmi[6953];
  qword_2611CD8 = 27;
  dword_2611CB0 = 285;
  qword_2611CB8 = (uint64_t)&aAacGeoTypeAdmi[6926];
  qword_2611CC0 = 27;
  dword_2611C98 = 284;
  qword_2611CA0 = (uint64_t)&aAacGeoTypeAdmi[6899];
  qword_2611CA8 = 27;
  dword_2611C80 = 283;
  qword_2611C88 = (uint64_t)&aAacGeoTypeAdmi[6887];
  qword_2611C90 = 12;
  dword_2611C68 = 282;
  qword_2611C70 = (uint64_t)&aAacGeoTypeAdmi[6872];
  qword_2611C78 = 15;
  dword_2611C50 = 281;
  qword_2611C58 = (uint64_t)&aAacGeoTypeAdmi[6846];
  qword_2611C60 = 26;
  dword_2611C38 = 280;
  qword_2611C40 = (uint64_t)&aAacGeoTypeAdmi[6832];
  qword_2611C48 = 14;
  dword_2611C20 = 279;
  qword_2611C28 = (uint64_t)&aAacGeoTypeAdmi[6817];
  qword_2611C30 = 15;
  dword_2611C08 = 278;
  qword_2611C10 = (uint64_t)&aAacGeoTypeAdmi[6788];
  qword_2611C18 = 29;
  dword_2611BF0 = 277;
  qword_2611BF8 = (uint64_t)&aAacGeoTypeAdmi[6759];
  qword_2611C00 = 29;
  dword_2611BD8 = 276;
  qword_2611BE0 = (uint64_t)&aAacGeoTypeAdmi[6714];
  qword_2611BE8 = 45;
  qword_2611BC8 = (uint64_t)&aAacGeoTypeAdmi[6682];
  qword_2611BD0 = 32;
  qword_2611FA0 = (uint64_t)&aAacGeoTypeAdmi[7461];
  qword_2611FB8 = (uint64_t)&aAacGeoTypeAdmi[7478];
  qword_2611BB8 = 18;
  dword_2611FC8 = 318;
  qword_2611FD0 = (uint64_t)&aAacGeoTypeAdmi[7492];
  qword_2611BA0 = 25;
  dword_2611FE0 = 319;
  qword_2611FE8 = (uint64_t)&aAacGeoTypeAdmi[7515];
  qword_2611B88 = 8;
  dword_2611FF8 = 320;
  qword_2612000 = (uint64_t)&aAacGeoTypeAdmi[7536];
  qword_2611B70 = 30;
  dword_2612010 = 321;
  qword_2612018 = (uint64_t)&aAacGeoTypeAdmi[7566];
  qword_2611B58 = 20;
  dword_2612028 = 322;
  qword_2612030 = (uint64_t)&aAacGeoTypeAdmi[7604];
  qword_2611B40 = 22;
  dword_2612040 = 5781;
  qword_2612048 = (uint64_t)&aAacGeoTypeAdmi[7628];
  qword_2611B28 = 26;
  dword_2612058 = 323;
  qword_2612060 = (uint64_t)&aAacGeoTypeAdmi[7659];
  qword_2611B10 = 35;
  dword_2612070 = 324;
  qword_2612078 = (uint64_t)&aAacGeoTypeAdmi[7690];
  dword_2612088 = 5780;
  qword_2612090 = (uint64_t)&aAacGeoTypeAdmi[7707];
  dword_26120A0 = 325;
  qword_2611AE0 = 28;
  qword_26120A8 = (uint64_t)&aAacGeoTypeAdmi[7731];
  dword_26120B8 = 326;
  qword_2611AC8 = 30;
  qword_26120C0 = (uint64_t)&aAacGeoTypeAdmi[7760];
  dword_26120D0 = 327;
  qword_2611AB0 = 30;
  dword_26120E8 = 5812;
  qword_26120F0 = (uint64_t)&aAacGeoTypeAdmi[7792];
  qword_2611A98 = 28;
  dword_2612100 = 5815;
  qword_2612108 = (uint64_t)&aAacGeoTypeAdmi[7825];
  qword_2611A80 = 37;
  dword_2612118 = 328;
  qword_2612120 = (uint64_t)&aAacGeoTypeAdmi[7840];
  dword_2612130 = 329;
  qword_2612138 = (uint64_t)&aAacGeoTypeAdmi[7858];
  qword_2611A50 = 18;
  dword_2612148 = 330;
  qword_2612150 = (uint64_t)&aAacGeoTypeAdmi[7887];
  qword_2611A38 = 11;
  dword_2612160 = 5778;
  qword_2612168 = (uint64_t)&aAacGeoTypeAdmi[7902];
  qword_2611A20 = 24;
  dword_2612178 = 331;
  qword_2612180 = (uint64_t)&aAacGeoTypeAdmi[7913];
  qword_2611A08 = 24;
  dword_2612190 = 332;
  qword_2612198 = (uint64_t)&aAacGeoTypeAdmi[7942];
  qword_26119F0 = 24;
  dword_26121A8 = 333;
  qword_26121B0 = (uint64_t)&aAacGeoTypeAdmi[7968];
  qword_26119D8 = 27;
  dword_26121C0 = 334;
  qword_26121C8 = (uint64_t)&aAacGeoTypeAdmi[7999];
  qword_26119C0 = 27;
  dword_26121D8 = 335;
  qword_26121E0 = (uint64_t)&aAacGeoTypeAdmi[8012];
  qword_26119A8 = 27;
  dword_26121F0 = 336;
  qword_26121F8 = (uint64_t)&aAacGeoTypeAdmi[8036];
  qword_2611990 = 16;
  dword_2612208 = 5804;
  qword_2612210 = (uint64_t)&aAacGeoTypeAdmi[8052];
  qword_2611978 = 15;
  dword_2612220 = 5803;
  qword_2612228 = (uint64_t)&aAacGeoTypeAdmi[8067];
  qword_2611960 = 12;
  dword_2612238 = 5797;
  qword_2612240 = (uint64_t)&aAacGeoTypeAdmi[8075];
  qword_2611948 = 10;
  dword_2612250 = 337;
  qword_2612258 = (uint64_t)&aAacGeoTypeAdmi[8086];
  qword_2611930 = 19;
  dword_2612268 = 5798;
  qword_2612270 = (uint64_t)&aAacGeoTypeAdmi[8094];
  qword_2611918 = 8;
  dword_2612280 = 338;
  qword_2612288 = (uint64_t)&aAacGeoTypeAdmi[8123];
  qword_2611900 = 11;
  dword_2612298 = 5790;
  qword_26122A0 = (uint64_t)&aAacGeoTypeAdmi[8136];
  qword_26118E8 = 11;
  dword_26122B0 = 339;
  qword_26122B8 = (uint64_t)&aAacGeoTypeAdmi[8160];
  qword_26118D0 = 15;
  dword_26122C8 = 340;
  qword_26122D0 = (uint64_t)&aAacGeoTypeAdmi[8180];
  qword_26118B8 = 12;
  dword_26122E0 = 341;
  qword_26122E8 = (uint64_t)&aAacGeoTypeAdmi[8205];
  qword_26118A0 = 8;
  dword_26122F8 = 342;
  qword_2612300 = (uint64_t)&aAacGeoTypeAdmi[8236];
  qword_2611888 = 14;
  dword_2612310 = 343;
  qword_2612318 = (uint64_t)&aAacGeoTypeAdmi[8272];
  qword_2611870 = 16;
  dword_2612328 = 344;
  qword_2612330 = (uint64_t)&aAacGeoTypeAdmi[8301];
  qword_2611858 = 48;
  dword_2612340 = 345;
  qword_2612348 = (uint64_t)&aAacGeoTypeAdmi[8341];
  qword_2611840 = 26;
  dword_2612358 = 346;
  qword_2612360 = (uint64_t)&aAacGeoTypeAdmi[8372];
  qword_2611828 = 33;
  dword_2612370 = 347;
  qword_2612378 = (uint64_t)&aAacGeoTypeAdmi[8401];
  qword_2611810 = 26;
  dword_2612388 = 348;
  qword_2612390 = (uint64_t)&aAacGeoTypeAdmi[8433];
  qword_26117F8 = 26;
  qword_2612750 = (uint64_t)&aAacGeoTypeAdmi[9583];
  dword_2612760 = 388;
  qword_26117E0 = 24;
  qword_2612768 = (uint64_t)&aAacGeoTypeAdmi[9594];
  dword_2612778 = 389;
  qword_26117C8 = 22;
  qword_2612780 = (uint64_t)&aAacGeoTypeAdmi[9623];
  dword_2612790 = 390;
  qword_26117B0 = 22;
  qword_2612798 = (uint64_t)&aAacGeoTypeAdmi[9638];
  dword_26127A8 = 391;
  qword_2611798 = 20;
  qword_26127B0 = (uint64_t)&aAacGeoTypeAdmi[9652];
  dword_26127C0 = 392;
  qword_2611780 = 20;
  qword_26127C8 = (uint64_t)&aAacGeoTypeAdmi[9660];
  dword_26127D8 = 393;
  qword_2611768 = 21;
  qword_26127E0 = (uint64_t)&aAacGeoTypeAdmi[9679];
  dword_26127F0 = 394;
  qword_2611750 = 23;
  qword_26127F8 = (uint64_t)&aAacGeoTypeAdmi[9702];
  dword_2612808 = 395;
  qword_2611738 = 22;
  qword_2612810 = (uint64_t)&aAacGeoTypeAdmi[9712];
  dword_2612820 = 396;
  qword_2611720 = 20;
  qword_2612828 = (uint64_t)&aAacGeoTypeAdmi[9732];
  dword_2612838 = 397;
  qword_2611708 = 25;
  qword_2612840 = (uint64_t)&aAacGeoTypeAdmi[9750];
  dword_2612850 = 398;
  qword_26116F0 = 18;
  qword_2612858 = (uint64_t)&aAacGeoTypeAdmi[9770];
  dword_2612868 = 399;
  qword_26116D8 = 10;
  qword_2612870 = (uint64_t)&aAacGeoTypeAdmi[9783];
  dword_2612880 = 400;
  qword_26116C0 = 22;
  qword_2612888 = (uint64_t)&aAacGeoTypeAdmi[9800];
  dword_2612898 = 401;
  qword_26116A8 = 28;
  qword_26128A0 = (uint64_t)&aAacGeoTypeAdmi[9828];
  dword_26128B0 = 402;
  qword_2611690 = 24;
  qword_26128B8 = (uint64_t)&aAacGeoTypeAdmi[9859];
  dword_26128C8 = 403;
  qword_2611678 = 22;
  qword_26128D0 = (uint64_t)&aAacGeoTypeAdmi[9882];
  dword_26128E0 = 404;
  qword_26128E8 = (uint64_t)&aAacGeoTypeAdmi[9902];
  dword_26128F8 = 405;
  qword_2611648 = 26;
  qword_2612900 = (uint64_t)&aAacGeoTypeAdmi[9917];
  dword_2612910 = 5784;
  qword_2611630 = 36;
  qword_2612918 = (uint64_t)&aAacGeoTypeAdmi[9939];
  dword_2612928 = 406;
  qword_2611618 = 45;
  qword_2612930 = (uint64_t)&aAacGeoTypeAdmi[9960];
  dword_2612940 = 407;
  qword_2611600 = 13;
  qword_2612948 = (uint64_t)&aAacGeoTypeAdmi[9983];
  dword_2612958 = 408;
  qword_26115E8 = 29;
  qword_2612960 = (uint64_t)&aAacGeoTypeAdmi[10010];
  dword_2612970 = 409;
  qword_26115D0 = 29;
  qword_2612978 = (uint64_t)&aAacGeoTypeAdmi[10047];
  dword_2612988 = 410;
  qword_26115B8 = 34;
  qword_2612990 = (uint64_t)&aAacGeoTypeAdmi[10064];
  dword_26129A0 = 411;
  qword_26115A0 = 25;
  qword_26129A8 = (uint64_t)&aAacGeoTypeAdmi[10093];
  dword_26129B8 = 412;
  qword_2611588 = 30;
  qword_26129C0 = (uint64_t)&aAacGeoTypeAdmi[10119];
  dword_26129D0 = 413;
  qword_2611570 = 15;
  qword_26129D8 = (uint64_t)&aAacGeoTypeAdmi[10129];
  dword_26129E8 = 414;
  qword_2611558 = 20;
  qword_26129F0 = (uint64_t)&aAacGeoTypeAdmi[10146];
  dword_2612A00 = 415;
  qword_2611540 = 21;
  qword_2612A08 = (uint64_t)&aAacGeoTypeAdmi[10180];
  dword_2612A18 = 416;
  qword_2611528 = 20;
  qword_2612A20 = (uint64_t)&aAacGeoTypeAdmi[10196];
  dword_2612A30 = 417;
  qword_2611510 = 16;
  qword_2612A38 = (uint64_t)&aAacGeoTypeAdmi[10209];
  dword_2612A48 = 418;
  qword_26114F8 = 29;
  qword_2612A50 = (uint64_t)&aAacGeoTypeAdmi[10230];
  dword_2612A60 = 419;
  qword_26114E0 = 10;
  qword_2612A68 = (uint64_t)&aAacGeoTypeAdmi[10241];
  dword_2612A78 = 5801;
  qword_26114C8 = 26;
  qword_2612A80 = (uint64_t)&aAacGeoTypeAdmi[10261];
  dword_2612A90 = 5802;
  qword_26114B0 = 14;
  qword_2612A98 = (uint64_t)&aAacGeoTypeAdmi[10281];
  dword_2612AA8 = 420;
  qword_2611498 = 23;
  qword_2612AB0 = (uint64_t)&aAacGeoTypeAdmi[10295];
  dword_2612AC0 = 421;
  qword_2611480 = 23;
  qword_2612AC8 = (uint64_t)&aAacGeoTypeAdmi[10319];
  dword_2612AD8 = 422;
  qword_2611468 = 23;
  qword_2612AE0 = (uint64_t)&aAacGeoTypeAdmi[10340];
  dword_2612AF0 = 423;
  qword_2611450 = 32;
  qword_2612AF8 = (uint64_t)&aAacGeoTypeAdmi[10379];
  dword_2612B08 = 424;
  qword_2611438 = 31;
  qword_2612B10 = (uint64_t)&aAacGeoTypeAdmi[10413];
  dword_2612B20 = 425;
  qword_2611420 = 17;
  qword_2612B28 = (uint64_t)&aAacGeoTypeAdmi[10447];
  dword_2612B38 = 426;
  qword_2611408 = 29;
  qword_2612B40 = (uint64_t)&aAacGeoTypeAdmi[10481];
  dword_2612B50 = 427;
  qword_26113F0 = 24;
  qword_2612B58 = (uint64_t)&aAacGeoTypeAdmi[10502];
  dword_2612B68 = 428;
  qword_26113D8 = 20;
  qword_2612B70 = (uint64_t)&aAacGeoTypeAdmi[10546];
  dword_2612B80 = 429;
  qword_26113C0 = 16;
  qword_2612B88 = (uint64_t)&aAacGeoTypeAdmi[10580];
  dword_2612B98 = 430;
  qword_26113A8 = 26;
  qword_2612BA0 = (uint64_t)&aAacGeoTypeAdmi[10609];
  dword_2612BB0 = 431;
  qword_2611390 = 9;
  qword_2612BB8 = (uint64_t)&aAacGeoTypeAdmi[10626];
  dword_2612BC8 = 432;
  qword_2611378 = 9;
  qword_2612BD0 = (uint64_t)&aAacGeoTypeAdmi[10660];
  dword_2612BE0 = 433;
  qword_2611360 = 9;
  qword_2612BE8 = (uint64_t)&aAacGeoTypeAdmi[10693];
  dword_2612BF8 = 434;
  qword_2611348 = 14;
  qword_2612C00 = (uint64_t)&aAacGeoTypeAdmi[10706];
  dword_2612C10 = 5799;
  qword_2611330 = 14;
  qword_2612C18 = (uint64_t)&aAacGeoTypeAdmi[10728];
  dword_2612C28 = 435;
  qword_2611318 = 14;
  qword_2612C30 = (uint64_t)&aAacGeoTypeAdmi[10744];
  dword_2612C40 = 5788;
  qword_2611300 = 14;
  qword_2612C48 = (uint64_t)&aAacGeoTypeAdmi[10753];
  dword_2612C58 = 5789;
  qword_26112E8 = 14;
  qword_2612C60 = (uint64_t)&aAacGeoTypeAdmi[10762];
  dword_2612C70 = 436;
  qword_26112D0 = 14;
  qword_2612C78 = (uint64_t)&aAacGeoTypeAdmi[10789];
  dword_2612C88 = 437;
  qword_26112B8 = 14;
  qword_2612C90 = (uint64_t)&aAacGeoTypeAdmi[10820];
  dword_2612CA0 = 5800;
  qword_26112A0 = 14;
  qword_2612CA8 = (uint64_t)&aAacGeoTypeAdmi[10841];
  dword_2612CB8 = 438;
  qword_2611288 = 15;
  qword_2612CC0 = (uint64_t)&aAacGeoTypeAdmi[10858];
  dword_2612CD0 = 439;
  qword_2611270 = 15;
  qword_2612CD8 = (uint64_t)&aAacGeoTypeAdmi[10880];
  dword_2612CE8 = 440;
  qword_2611258 = 15;
  qword_2612CF0 = (uint64_t)&aAacGeoTypeAdmi[10904];
  dword_2612D00 = 441;
  qword_2611240 = 15;
  qword_2612D08 = (uint64_t)&aAacGeoTypeAdmi[10922];
  dword_2612D18 = 442;
  qword_2611228 = 15;
  qword_2612D20 = (uint64_t)&aAacGeoTypeAdmi[10941];
  dword_2612D30 = 443;
  qword_2611210 = 15;
  qword_2612D38 = (uint64_t)&aAacGeoTypeAdmi[10969];
  dword_2612D48 = 444;
  qword_26111F8 = 15;
  qword_2612D50 = (uint64_t)&aAacGeoTypeAdmi[10984];
  dword_2612D60 = 445;
  qword_26111E0 = 15;
  qword_2612D68 = (uint64_t)&aAacGeoTypeAdmi[11008];
  dword_2612D78 = 5796;
  qword_26111C8 = 15;
  qword_2612D80 = (uint64_t)&aAacGeoTypeAdmi[11031];
  dword_2612D90 = 446;
  qword_26111B0 = 15;
  qword_2612D98 = (uint64_t)&aAacGeoTypeAdmi[11060];
  dword_2612DA8 = 447;
  qword_2611198 = 14;
  qword_2612DB0 = (uint64_t)&aAacGeoTypeAdmi[11100];
  dword_2612DC0 = 448;
  qword_2611180 = 14;
  qword_2612DC8 = (uint64_t)&aAacGeoTypeAdmi[11138];
  dword_2612DD8 = 449;
  qword_2611168 = 12;
  qword_2612DE0 = (uint64_t)&aAacGeoTypeAdmi[11171];
  dword_2612DF0 = 450;
  qword_2611150 = 14;
  qword_2612DF8 = (uint64_t)&aAacGeoTypeAdmi[11198];
  dword_2612E08 = 451;
  qword_2611138 = 36;
  qword_2612E10 = (uint64_t)&aAacGeoTypeAdmi[11237];
  dword_2612E20 = 452;
  qword_2611120 = 24;
  qword_2612E28 = (uint64_t)&aAacGeoTypeAdmi[11256];
  dword_2612E38 = 453;
  qword_2611108 = 31;
  qword_2612E40 = (uint64_t)&aAacGeoTypeAdmi[11279];
  dword_2612E50 = 5824;
  qword_26110F0 = 18;
  qword_2612E58 = (uint64_t)&aAacGeoTypeAdmi[11298];
  dword_2612E68 = 454;
  qword_26110D8 = 26;
  qword_2612E70 = (uint64_t)&aAacGeoTypeAdmi[11307];
  dword_2612E80 = 455;
  qword_26110C0 = 26;
  qword_2612E88 = (uint64_t)&aAacGeoTypeAdmi[11332];
  dword_2612E98 = 456;
  qword_26110A8 = 26;
  qword_2612EA0 = (uint64_t)&aAacGeoTypeAdmi[11371];
  dword_2612EB0 = 457;
  qword_2611090 = 18;
  qword_2612EB8 = (uint64_t)&aAacGeoTypeAdmi[11387];
  dword_2612EC8 = 5816;
  qword_2611078 = 15;
  qword_2612ED0 = (uint64_t)&aAacGeoTypeAdmi[11397];
  dword_2612EE0 = 458;
  qword_2611060 = 15;
  qword_2612EE8 = (uint64_t)&aAacGeoTypeAdmi[11409];
  dword_2612EF8 = 459;
  qword_2611048 = 15;
  qword_2612F00 = (uint64_t)&aAacGeoTypeAdmi[11427];
  dword_2612F10 = 460;
  qword_2611030 = 15;
  qword_2612F18 = (uint64_t)&aAacGeoTypeAdmi[11446];
  dword_2612F28 = 461;
  qword_2611018 = 15;
  qword_2612F30 = (uint64_t)&aAacGeoTypeAdmi[11472];
  dword_2612F40 = 5813;
  qword_2612398 = 25;
  qword_2612F48 = (uint64_t)&aAacGeoTypeAdmi[11483];
  qword_2611FA8 = 17;
  dword_2612F58 = 462;
  qword_2612368 = 29;
  qword_2612380 = 32;
  qword_2611FC0 = 14;
  qword_2611FD8 = 23;
  qword_2611FF0 = 21;
  qword_2612008 = 30;
  qword_2612338 = 40;
  qword_2612350 = 31;
  qword_2612020 = 38;
  qword_2612038 = 24;
  qword_2612050 = 31;
  qword_2612068 = 31;
  qword_2612308 = 36;
  qword_2612320 = 29;
  qword_2612080 = 17;
  qword_2612098 = 24;
  qword_26120B0 = 29;
  qword_26120C8 = 8;
  qword_26122D8 = 25;
  qword_26122F0 = 31;
  qword_26120E0 = 24;
  qword_26120F8 = 33;
  qword_2612110 = 15;
  qword_2612128 = 18;
  qword_26122A8 = 24;
  qword_26122C0 = 20;
  qword_2612140 = 29;
  qword_2612158 = 15;
  qword_2612170 = 11;
  qword_2612188 = 29;
  qword_2612278 = 29;
  qword_2612290 = 13;
  qword_26121A0 = 26;
  qword_26121B8 = 31;
  qword_26121D0 = 13;
  qword_26121E8 = 24;
  qword_2612248 = 11;
  qword_2612260 = 8;
  qword_2612200 = 16;
  qword_2612218 = 15;
  qword_2612230 = 8;
  qword_2612758 = 11;
  qword_2612770 = 29;
  qword_2612788 = 15;
  qword_26127A0 = 14;
  qword_26127B8 = 8;
  qword_26127D0 = 19;
  qword_26127E8 = 23;
  qword_2612800 = 10;
  qword_2612818 = 20;
  qword_2612830 = 18;
  qword_2612848 = 20;
  qword_2612860 = 13;
  qword_2612878 = 17;
  qword_2612890 = 28;
  qword_26128A8 = 31;
  qword_26128C0 = 23;
  qword_26128D8 = 20;
  qword_26128F0 = 15;
  qword_2612908 = 22;
  qword_2612920 = 21;
  qword_2612938 = 23;
  qword_2612950 = 27;
  qword_2612968 = 37;
  qword_2612980 = 17;
  qword_2612998 = 29;
  qword_26129B0 = 26;
  qword_26129C8 = 10;
  qword_26129E0 = 17;
  qword_26129F8 = 34;
  qword_2612A10 = 16;
  qword_2612A28 = 13;
  qword_2612A40 = 21;
  qword_2612A58 = 11;
  qword_2612A70 = 20;
  qword_2612A88 = 20;
  qword_2612AA0 = 14;
  qword_2612AB8 = 24;
  qword_2612AD0 = 21;
  qword_2612AE8 = 39;
  qword_2612B00 = 34;
  qword_2612B18 = 34;
  qword_2612B30 = 34;
  qword_2612B48 = 21;
  qword_2612B60 = 44;
  qword_2612B78 = 34;
  qword_2612B90 = 29;
  qword_2612BA8 = 17;
  qword_2612BC0 = 34;
  qword_2612BD8 = 33;
  qword_2612BF0 = 13;
  qword_2612C08 = 22;
  qword_2612C20 = 16;
  qword_2612C38 = 9;
  qword_2612C50 = 9;
  qword_2612C68 = 27;
  qword_2612C80 = 31;
  qword_2612C98 = 21;
  qword_2612CB0 = 17;
  qword_2612CC8 = 22;
  qword_2612CE0 = 24;
  qword_2612CF8 = 18;
  qword_2612D10 = 19;
  qword_2612D28 = 28;
  qword_2612D40 = 15;
  qword_2612D58 = 24;
  qword_2612D70 = 23;
  qword_2612D88 = 29;
  qword_2612DA0 = 40;
  qword_2612DB8 = 38;
  qword_2612DD0 = 33;
  qword_2612DE8 = 27;
  qword_2612E00 = 39;
  qword_2612E18 = 19;
  qword_2612E30 = 23;
  qword_2612E48 = 19;
  qword_2612E60 = 9;
  qword_2612E78 = 25;
  qword_2612E90 = 39;
  qword_2612EA8 = 16;
  qword_2612EC0 = 10;
  qword_2612ED8 = 12;
  qword_2612EF0 = 18;
  qword_2612F08 = 19;
  qword_2612F20 = 26;
  qword_2612F38 = 11;
  qword_2612F50 = 24;
  qword_2613EF8 = 20;
  *(int *)((char *)&dword_26101B0 + &loc_3FF0) = 817;
  *(int *)((char *)&dword_26101B0 + &loc_4008) = 818;
  *(int *)((char *)&dword_26101B0 + &loc_4020) = 819;
  *(int *)((char *)&dword_26101B0 + &loc_4038) = 820;
  *(int *)((char *)&dword_26101B0 + sub_4050) = 821;
  *(int *)((char *)&dword_26101B0 + sub_4068) = 822;
  *(int *)((char *)&dword_26101B0 + sub_4080) = 823;
  *(int *)((char *)&dword_26101B0 + &loc_4098) = 806;
  *(int *)((char *)&dword_26101B0 + &loc_40B0) = 824;
  *(int *)((char *)&dword_26101B0 + &loc_40C8) = 825;
  *(int *)((char *)&dword_26101B0 + &loc_40E0) = 826;
  *(int *)((char *)&dword_26101B0 + &loc_40F8) = 827;
  *(int *)((char *)&dword_26101B0 + &loc_4110) = 828;
  *(int *)((char *)&dword_26101B0 + &loc_4128) = 829;
  *(int *)((char *)&dword_26101B0 + &loc_4140) = 830;
  *(int *)((char *)&dword_26101B0 + &loc_4154 + 4) = 831;
  *(int *)((char *)&dword_26101B0 + &loc_4170) = 832;
  *(int *)((char *)&dword_26101B0 + &loc_4188) = 833;
  *(int *)((char *)&dword_26101B0 + &loc_41A0) = 807;
  *(int *)((char *)&dword_26101B0 + &loc_41B8) = 834;
  *(int *)((char *)&dword_26101B0 + &loc_41D0) = 835;
  *(int *)((char *)&dword_26101B0 + &loc_41E8) = 836;
  *(int *)((char *)&dword_26101B0 + sub_4200) = 837;
  *(int *)((char *)&dword_26101B0 + &loc_4218) = 838;
  *(int *)((char *)&dword_26101B0 + &loc_4230) = 839;
  *(int *)((char *)&dword_26101B0 + &loc_4248) = 840;
  *(int *)((char *)&dword_26101B0 + &loc_4260) = 841;
  *(int *)((char *)&dword_26101B0 + &loc_4278) = 842;
  *(int *)((char *)&dword_26101B0 + &loc_4290) = 843;
  *(int *)((char *)&dword_26101B0 + &loc_42A8) = 808;
  *(int *)((char *)&dword_26101B0 + &loc_42C0) = 844;
  *(int *)((char *)&dword_26101B0 + &loc_42D8) = 845;
  *(int *)((char *)&dword_26101B0 + &loc_42F0) = 846;
  *(int *)((char *)&dword_26101B0 + &loc_4308) = 847;
  *(int *)((char *)&dword_26101B0 + &loc_4320) = 848;
  *(int *)((char *)&dword_26101B0 + &loc_4338) = 849;
  *(int *)((char *)&dword_26101B0 + &loc_4348 + 8) = 850;
  *(int *)((char *)&dword_26101B0 + &loc_4368) = 851;
  *(int *)((char *)&dword_26101B0 + &loc_4380) = 852;
  *(int *)((char *)&dword_26101B0 + &loc_4394 + 4) = 853;
  *(int *)((char *)&dword_26101B0 + &loc_43B0) = 809;
  *(int *)((char *)&dword_26101B0 + &loc_43C4 + 4) = 810;
  *(int *)((char *)&dword_26101B0 + &loc_43E0) = 811;
  *(int *)((char *)&dword_26101B0 + &loc_43F8) = 812;
  *(int *)((char *)&dword_26101B0 + &loc_4410) = 813;
  *(int *)((char *)&dword_26101B0 + &loc_4428) = 854;
  *(int *)((char *)&dword_26101B0 + &loc_443C + 4) = 855;
  *(int *)((char *)&dword_26101B0 + sub_4458) = 856;
  *(int *)((char *)&dword_26101B0 + &loc_4470) = 857;
  *(int *)((char *)&dword_26101B0 + &loc_447C + 12) = 858;
  *(int *)((char *)&dword_26101B0 + sub_44A0) = 859;
  *(int *)((char *)&dword_26101B0 + &loc_44B8) = 860;
  *(int *)((char *)&dword_26101B0 + &loc_44C4 + 12) = 861;
  *(int *)((char *)&dword_26101B0 + sub_44E8) = 862;
  *(int *)((char *)&dword_26101B0 + &loc_4500) = 863;
  *(int *)((char *)&dword_26101B0 + &loc_4518) = 864;
  *(int *)((char *)&dword_26101B0 + &loc_4530) = 865;
  *(int *)((char *)&dword_26101B0 + sub_4548) = 866;
  *(int *)((char *)&dword_26101B0 + &loc_4560) = 867;
  *(int *)((char *)&dword_26101B0 + &loc_4578) = 868;
  *(int *)((char *)&dword_26101B0 + &locret_4590) = 869;
  *(int *)((char *)&dword_26101B0 + &loc_45A8) = 5791;
  *(int *)((char *)&dword_26101B0 + &loc_45C0) = 870;
  *(int *)((char *)&dword_26101B0 + &loc_45D8) = 5777;
  *(int *)((char *)&dword_26101B0 + &loc_45F0) = 871;
  *(int *)((char *)&dword_26101B0 + &loc_4608) = 872;
  *(int *)((char *)&dword_26101B0 + &loc_4620) = 873;
  *(int *)((char *)&dword_26101B0 + &loc_4638) = 874;
  *(int *)((char *)&dword_26101B0 + &loc_4650) = 875;
  *(int *)((char *)&dword_26101B0 + &loc_4668) = 876;
  *(int *)((char *)&dword_26101B0 + &loc_4680) = 877;
  *(int *)((char *)&dword_26101B0 + &loc_4698) = 878;
  *(int *)((char *)&dword_26101B0 + &loc_46B0) = 879;
  *(int *)((char *)&dword_26101B0 + &loc_46C8) = 880;
  *(int *)((char *)&dword_26101B0 + &loc_46E0) = 881;
  *(int *)((char *)&dword_26101B0 + &loc_46F8) = 882;
  *(int *)((char *)&dword_26101B0 + &loc_4710) = 883;
  *(int *)((char *)&dword_26101B0 + &loc_4728) = 884;
  *(int *)((char *)&dword_26101B0 + &loc_4740) = 885;
  *(int *)((char *)&dword_26101B0 + &loc_4758) = 886;
  *(int *)((char *)&dword_26101B0 + &loc_4764 + 12) = 887;
  *(int *)((char *)&dword_26101B0 + &loc_4788) = 888;
  *(int *)((char *)&dword_26101B0 + &loc_4794 + 12) = 889;
  *(int *)((char *)&dword_26101B0 + &locret_47B8) = 890;
  *(int *)((char *)&dword_26101B0 + &loc_47C4 + 12) = 891;
  *(int *)((char *)&dword_26101B0 + &loc_47E8) = 892;
  *(int *)((char *)&dword_26101B0 + &loc_4800) = 893;
  *(int *)((char *)&dword_26101B0 + &loc_4818) = 894;
  *(int *)((char *)&dword_26101B0 + &loc_4830) = 895;
  *(int *)((char *)&dword_26101B0 + &loc_4848) = 896;
  *(int *)((char *)&dword_26101B0 + &loc_485C + 4) = 897;
  *(int *)((char *)&dword_26101B0 + &loc_4878) = 898;
  *(int *)((char *)&dword_26101B0 + &loc_4890) = 899;
  *(int *)((char *)&dword_26101B0 + &loc_48A8) = 900;
  *(int *)((char *)&dword_26101B0 + &loc_48C0) = 901;
  *(int *)((char *)&dword_26101B0 + &loc_48D8) = 902;
  *(int *)((char *)&dword_26101B0 + &loc_48F0) = 903;
  *(int *)((char *)&dword_26101B0 + &loc_4908) = 904;
  *(int *)((char *)&dword_26101B0 + &loc_491C + 4) = 905;
  *(int *)((char *)&dword_26101B0 + &loc_4938) = 906;
  *(int *)((char *)&dword_26101B0 + &loc_494C + 4) = 907;
  *(int *)((char *)&dword_26101B0 + &loc_4968) = 908;
  *(int *)((char *)&dword_26101B0 + &loc_4980) = 909;
  *(int *)((char *)&dword_26101B0 + &loc_4998) = 5805;
  *(int *)((char *)&dword_26101B0 + &loc_49B0) = 5806;
  *(int *)((char *)&dword_26101B0 + &loc_49C8) = 5807;
  *(int *)((char *)&dword_26101B0 + &loc_49E0) = 5809;
  *(int *)((char *)&dword_26101B0 + &loc_49F8) = 5810;
  *(int *)((char *)&dword_26101B0 + &loc_4A10) = 910;
  *(int *)((char *)&dword_26101B0 + &loc_4A28) = 911;
  *(int *)((char *)&dword_26101B0 + &loc_4A40) = 912;
  *(int *)((char *)&dword_26101B0 + &loc_4A58) = 913;
  *(int *)((char *)&dword_26101B0 + &loc_4A64 + 12) = 914;
  *(int *)((char *)&dword_26101B0 + &loc_4A88) = 915;
  *(int *)((char *)&dword_26101B0 + &loc_4A94 + 12) = 916;
  *(int *)((char *)&dword_26101B0 + &loc_4AB8) = 917;
  *(int *)((char *)&dword_26101B0 + sub_4AD0) = 918;
  *(int *)((char *)&dword_26101B0 + &loc_4AE8) = 919;
  *(int *)((char *)&dword_26101B0 + &loc_4AFC + 4) = 920;
  *(int *)((char *)&dword_26101B0 + sub_4B18) = 921;
  *(int *)((char *)&dword_26101B0 + &loc_4B30) = 922;
  *(int *)((char *)&dword_26101B0 + &loc_4B48) = 923;
  *(int *)((char *)&dword_26101B0 + &loc_4B60) = 924;
  *(int *)((char *)&dword_26101B0 + &loc_4B78) = 925;
  *(int *)((char *)&dword_26101B0 + &locret_4B90) = 926;
  *(int *)((char *)&dword_26101B0 + &loc_4BA8) = 927;
  *(int *)((char *)&dword_26101B0 + &loc_4BC0) = 928;
  *(int *)((char *)&dword_26101B0 + &loc_4BD8) = 929;
  *(int *)((char *)&dword_26101B0 + &loc_4BF0) = 930;
  *(int *)((char *)&dword_26101B0 + &loc_4C08) = 931;
  *(int *)((char *)&dword_26101B0 + &loc_4C20) = 932;
  *(int *)((char *)&dword_26101B0 + &loc_4C38) = 933;
  *(int *)((char *)&dword_26101B0 + &loc_4C50) = 934;
  *(int *)((char *)&dword_26101B0 + &loc_4C68) = 935;
  *(int *)((char *)&dword_26101B0 + &loc_4C80) = 936;
  *(int *)((char *)&dword_26101B0 + &loc_4C98) = 937;
  *(int *)((char *)&dword_26101B0 + &loc_4CB0) = 938;
  *(int *)((char *)&dword_26101B0 + &loc_4CC8) = 939;
  *(int *)((char *)&dword_26101B0 + &loc_4CE0) = 940;
  qword_2612F60 = (uint64_t)&aAacGeoTypeAdmi[11507];
  dword_2612F70 = 463;
  qword_2612F78 = (uint64_t)&aAacGeoTypeAdmi[11533];
  dword_2612F88 = 464;
  qword_2612F90 = (uint64_t)&aAacGeoTypeAdmi[11556];
  dword_2612FA0 = 465;
  qword_2612FA8 = (uint64_t)&aAacGeoTypeAdmi[11569];
  dword_2612FB8 = 466;
  qword_2612FC0 = (uint64_t)&aAacGeoTypeAdmi[11585];
  dword_2612FD0 = 467;
  qword_2612FD8 = (uint64_t)&aAacGeoTypeAdmi[11613];
  dword_2612FE8 = 468;
  qword_2612FF0 = (uint64_t)&aAacGeoTypeAdmi[11631];
  dword_2613000 = 469;
  qword_2613008 = (uint64_t)&aAacGeoTypeAdmi[11649];
  dword_2613018 = 470;
  qword_2613020 = (uint64_t)&aAacGeoTypeAdmi[11667];
  dword_2613030 = 471;
  qword_2613038 = (uint64_t)&aAacGeoTypeAdmi[11685];
  dword_2613048 = 472;
  qword_2613050 = (uint64_t)&aAacGeoTypeAdmi[11703];
  dword_2613060 = 473;
  qword_2613068 = (uint64_t)&aAacGeoTypeAdmi[11707];
  dword_2613078 = 474;
  qword_2613080 = (uint64_t)&aAacGeoTypeAdmi[11723];
  dword_2613090 = 635;
  qword_2613098 = (uint64_t)&aAacGeoTypeAdmi[11753];
  dword_26130A8 = 636;
  qword_26130B0 = (uint64_t)&aAacGeoTypeAdmi[11786];
  dword_26130C0 = 637;
  qword_26130C8 = (uint64_t)&aAacGeoTypeAdmi[11794];
  dword_26130D8 = 638;
  qword_26130E0 = (uint64_t)&aAacGeoTypeAdmi[11804];
  dword_26130F0 = 639;
  qword_26130F8 = (uint64_t)&aAacGeoTypeAdmi[11816];
  dword_2613108 = 640;
  qword_2613110 = (uint64_t)&aAacGeoTypeAdmi[11833];
  dword_2613120 = 641;
  qword_2613128 = (uint64_t)&aAacGeoTypeAdmi[11843];
  dword_2613138 = 642;
  qword_2613140 = (uint64_t)&aAacGeoTypeAdmi[11855];
  dword_2613150 = 651;
  qword_2613158 = (uint64_t)&aAacGeoTypeAdmi[11868];
  dword_2613168 = 643;
  qword_2613170 = (uint64_t)&aAacGeoTypeAdmi[11880];
  dword_2613180 = 644;
  qword_2613188 = (uint64_t)&aAacGeoTypeAdmi[11892];
  dword_2613198 = 645;
  qword_26131A0 = (uint64_t)&aAacGeoTypeAdmi[11904];
  dword_26131B0 = 646;
  qword_26131B8 = (uint64_t)&aAacGeoTypeAdmi[11916];
  dword_26131C8 = 647;
  qword_26131D0 = (uint64_t)&aAacGeoTypeAdmi[11928];
  dword_26131E0 = 648;
  qword_26131E8 = (uint64_t)&aAacGeoTypeAdmi[11940];
  dword_26131F8 = 649;
  qword_2613200 = (uint64_t)&aAacGeoTypeAdmi[11952];
  dword_2613210 = 650;
  qword_2613218 = (uint64_t)&aAacGeoTypeAdmi[11964];
  dword_2613228 = 652;
  qword_2613230 = (uint64_t)&aAacGeoTypeAdmi[11975];
  dword_2613240 = 653;
  qword_2613248 = (uint64_t)&aAacGeoTypeAdmi[11984];
  dword_2613258 = 5811;
  qword_2613260 = (uint64_t)&aAacGeoTypeAdmi[12007];
  dword_2613270 = 5814;
  qword_2613278 = (uint64_t)&aAacGeoTypeAdmi[12039];
  dword_2613288 = 5792;
  qword_2613290 = (uint64_t)&aAacGeoTypeAdmi[12048];
  dword_26132A0 = 654;
  qword_26132A8 = (uint64_t)&aAacGeoTypeAdmi[12060];
  dword_26132B8 = 655;
  qword_26132C0 = (uint64_t)&aAacGeoTypeAdmi[12096];
  qword_26132C8 = 49;
  dword_26132D0 = 656;
  qword_26132D8 = (uint64_t)&aAacGeoTypeAdmi[12145];
  dword_26132E8 = 657;
  qword_26132F0 = (uint64_t)&aAacGeoTypeAdmi[12178];
  dword_2613300 = 658;
  qword_2613308 = (uint64_t)&aAacGeoTypeAdmi[12211];
  dword_2613318 = 5782;
  qword_2613320 = (uint64_t)&aAacGeoTypeAdmi[12229];
  dword_2613330 = 5783;
  qword_2613338 = (uint64_t)&aAacGeoTypeAdmi[12254];
  dword_2613348 = 659;
  qword_2613350 = (uint64_t)&aAacGeoTypeAdmi[12269];
  dword_2613360 = 660;
  qword_2613368 = (uint64_t)&aAacGeoTypeAdmi[12284];
  dword_2613378 = 661;
  qword_2613380 = (uint64_t)&aAacGeoTypeAdmi[12298];
  dword_2613390 = 662;
  qword_2613398 = (uint64_t)&aAacGeoTypeAdmi[12315];
  dword_26133A8 = 663;
  qword_26133B0 = (uint64_t)&aAacGeoTypeAdmi[12329];
  dword_26133C0 = 664;
  qword_26133C8 = (uint64_t)&aAacGeoTypeAdmi[12342];
  dword_26133D8 = 665;
  qword_26133E0 = (uint64_t)&aAacGeoTypeAdmi[12351];
  dword_26133F0 = 666;
  qword_26133F8 = (uint64_t)&aAacGeoTypeAdmi[12362];
  dword_2613408 = 667;
  qword_2613410 = (uint64_t)&aAacGeoTypeAdmi[12372];
  dword_2613420 = 668;
  qword_2613428 = (uint64_t)&aAacGeoTypeAdmi[12389];
  dword_2613438 = 669;
  qword_2613440 = (uint64_t)&aAacGeoTypeAdmi[12401];
  dword_2613450 = 670;
  qword_2613458 = (uint64_t)&aAacGeoTypeAdmi[12415];
  dword_2613468 = 671;
  qword_2613470 = (uint64_t)&aAacGeoTypeAdmi[12430];
  dword_2613480 = 672;
  qword_2613488 = (uint64_t)&aAacGeoTypeAdmi[12443];
  dword_2613498 = 673;
  qword_2613B48 = (uint64_t)&aAacGeoTypeAdmi[14005];
  qword_2613B30 = (uint64_t)&aAacGeoTypeAdmi[13986];
  dword_2613B40 = 743;
  qword_2613B38 = 19;
  qword_2613B18 = (uint64_t)&aAacGeoTypeAdmi[13973];
  dword_2613B28 = 742;
  qword_2613B20 = 13;
  qword_2613B00 = (uint64_t)&aAacGeoTypeAdmi[13953];
  dword_2613B10 = 741;
  qword_2613B08 = 20;
  qword_2613AE8 = (uint64_t)&aAacGeoTypeAdmi[13936];
  dword_2613AF8 = 740;
  qword_2613AF0 = 17;
  qword_2613AD0 = (uint64_t)&aAacGeoTypeAdmi[13900];
  dword_2613AE0 = 739;
  qword_2613AD8 = 36;
  qword_2613AB8 = (uint64_t)&aAacGeoTypeAdmi[13864];
  dword_2613AC8 = 738;
  qword_2613AC0 = 36;
  qword_2613AA0 = (uint64_t)&aAacGeoTypeAdmi[13849];
  dword_2613AB0 = 737;
  qword_2613AA8 = 15;
  qword_2613A88 = (uint64_t)&aAacGeoTypeAdmi[13837];
  dword_2613A98 = 736;
  qword_2613A90 = 12;
  qword_2613A70 = (uint64_t)&aAacGeoTypeAdmi[13819];
  dword_2613A80 = 735;
  qword_2613A78 = 18;
  qword_2613A58 = (uint64_t)&aAacGeoTypeAdmi[13793];
  dword_2613A68 = 734;
  qword_2613A60 = 26;
  qword_2613A40 = (uint64_t)&aAacGeoTypeAdmi[13782];
  dword_2613A50 = 733;
  qword_2613A48 = 11;
  qword_2613A28 = (uint64_t)&aAacGeoTypeAdmi[13768];
  dword_2613A38 = 732;
  qword_2613A30 = 14;
  qword_2613A10 = (uint64_t)&aAacGeoTypeAdmi[13755];
  dword_2613A20 = 731;
  qword_2613A18 = 13;
  qword_26139F8 = (uint64_t)&aAacGeoTypeAdmi[13742];
  dword_2613A08 = 730;
  qword_2613A00 = 13;
  qword_26139E0 = (uint64_t)&aAacGeoTypeAdmi[13710];
  dword_26139F0 = 729;
  qword_26139E8 = 32;
  qword_26139C8 = (uint64_t)&aAacGeoTypeAdmi[13678];
  dword_26139D8 = 728;
  qword_26139D0 = 32;
  qword_26139B0 = (uint64_t)&aAacGeoTypeAdmi[13650];
  dword_26139C0 = 727;
  qword_26139B8 = 28;
  qword_2613998 = (uint64_t)&aAacGeoTypeAdmi[13639];
  dword_26139A8 = 726;
  qword_26139A0 = 11;
  qword_2613980 = (uint64_t)&aAacGeoTypeAdmi[13621];
  dword_2613990 = 725;
  qword_2613988 = 18;
  qword_2613968 = (uint64_t)&aAacGeoTypeAdmi[13592];
  dword_2613978 = 724;
  qword_2613970 = 29;
  qword_2613950 = (uint64_t)&aAacGeoTypeAdmi[13575];
  dword_2613960 = 723;
  qword_2613958 = 17;
  qword_2613938 = (uint64_t)&aAacGeoTypeAdmi[13555];
  dword_2613948 = 722;
  qword_2613940 = 20;
  qword_2613920 = (uint64_t)&aAacGeoTypeAdmi[13528];
  dword_2613930 = 721;
  qword_2613928 = 27;
  qword_2613908 = (uint64_t)&aAacGeoTypeAdmi[13511];
  dword_2613918 = 720;
  qword_2613910 = 17;
  qword_26138F0 = (uint64_t)&aAacGeoTypeAdmi[13494];
  dword_2613900 = 719;
  qword_26138F8 = 17;
  qword_26138D8 = (uint64_t)&aAacGeoTypeAdmi[13477];
  dword_26138E8 = 718;
  qword_26138E0 = 17;
  qword_26138C0 = (uint64_t)&aAacGeoTypeAdmi[13460];
  dword_26138D0 = 717;
  qword_26138C8 = 17;
  qword_26138A8 = (uint64_t)&aAacGeoTypeAdmi[13443];
  dword_26138B8 = 716;
  qword_26138B0 = 17;
  qword_2613890 = (uint64_t)&aAacGeoTypeAdmi[13426];
  dword_26138A0 = 715;
  qword_2613898 = 17;
  qword_2613878 = (uint64_t)&aAacGeoTypeAdmi[13409];
  dword_2613888 = 714;
  qword_2613880 = 17;
  qword_2613860 = (uint64_t)&aAacGeoTypeAdmi[13392];
  dword_2613870 = 713;
  qword_2613868 = 17;
  qword_2613848 = (uint64_t)&aAacGeoTypeAdmi[13375];
  dword_2613858 = 712;
  qword_2613850 = 17;
  qword_2613830 = (uint64_t)&aAacGeoTypeAdmi[13358];
  dword_2613840 = 711;
  qword_2613838 = 17;
  qword_2613818 = (uint64_t)&aAacGeoTypeAdmi[13343];
  dword_2613828 = 710;
  qword_2613820 = 15;
  qword_2613800 = (uint64_t)&aAacGeoTypeAdmi[13314];
  dword_2613810 = 709;
  qword_2613808 = 29;
  qword_26137E8 = (uint64_t)&aAacGeoTypeAdmi[13296];
  dword_26137F8 = 708;
  qword_26137F0 = 18;
  qword_26137D0 = (uint64_t)&aAacGeoTypeAdmi[13278];
  dword_26137E0 = 707;
  qword_26137D8 = 18;
  qword_26137B8 = (uint64_t)&aAacGeoTypeAdmi[13260];
  dword_26137C8 = 706;
  qword_26137C0 = 18;
  qword_26137A0 = (uint64_t)&aAacGeoTypeAdmi[13242];
  dword_26137B0 = 705;
  qword_26137A8 = 18;
  qword_2613788 = (uint64_t)&aAacGeoTypeAdmi[13224];
  dword_2613798 = 704;
  qword_2613790 = 18;
  qword_2613770 = (uint64_t)&aAacGeoTypeAdmi[13206];
  dword_2613780 = 703;
  qword_2613778 = 18;
  qword_2613758 = (uint64_t)&aAacGeoTypeAdmi[13188];
  dword_2613768 = 702;
  qword_2613760 = 18;
  qword_2613740 = (uint64_t)&aAacGeoTypeAdmi[13170];
  dword_2613750 = 701;
  qword_2613748 = 18;
  qword_2613728 = (uint64_t)&aAacGeoTypeAdmi[13152];
  dword_2613738 = 700;
  qword_2613730 = 18;
  qword_2613710 = (uint64_t)&aAacGeoTypeAdmi[13134];
  dword_2613720 = 699;
  qword_2613718 = 18;
  qword_26136F8 = (uint64_t)&aAacGeoTypeAdmi[13118];
  dword_2613708 = 698;
  qword_2613700 = 16;
  qword_26136E0 = (uint64_t)&aAacGeoTypeAdmi[13103];
  dword_26136F0 = 697;
  qword_26136E8 = 15;
  qword_26136C8 = (uint64_t)&aAacGeoTypeAdmi[13085];
  dword_26136D8 = 696;
  qword_26136D0 = 18;
  qword_26136B0 = (uint64_t)&aAacGeoTypeAdmi[13061];
  dword_26136C0 = 695;
  qword_26136B8 = 24;
  qword_2613698 = (uint64_t)&aAacGeoTypeAdmi[13031];
  dword_26136A8 = 694;
  qword_26136A0 = 30;
  qword_2613680 = (uint64_t)&aAacGeoTypeAdmi[13000];
  dword_2613690 = 693;
  qword_2613688 = 31;
  qword_2613668 = (uint64_t)&aAacGeoTypeAdmi[12985];
  dword_2613678 = 692;
  qword_2613670 = 15;
  qword_2613650 = (uint64_t)&aAacGeoTypeAdmi[12969];
  dword_2613660 = 691;
  qword_2613658 = 16;
  qword_2613638 = (uint64_t)&aAacGeoTypeAdmi[12939];
  dword_2613648 = 690;
  qword_2613640 = 30;
  qword_2613620 = (uint64_t)&aAacGeoTypeAdmi[12907];
  dword_2613630 = 689;
  qword_2613628 = 32;
  qword_2613608 = (uint64_t)&aAacGeoTypeAdmi[12888];
  dword_2613618 = 688;
  qword_2613610 = 19;
  qword_26135F0 = (uint64_t)&aAacGeoTypeAdmi[12872];
  dword_2613600 = 687;
  qword_26135F8 = 16;
  qword_26135D8 = (uint64_t)&aAacGeoTypeAdmi[12855];
  dword_26135E8 = 686;
  qword_26135E0 = 17;
  qword_26135C0 = (uint64_t)&aAacGeoTypeAdmi[12824];
  dword_26135D0 = 685;
  qword_26135C8 = 31;
  qword_26135A8 = (uint64_t)&aAacGeoTypeAdmi[12780];
  dword_26135B8 = 684;
  qword_26135B0 = 44;
  qword_2613590 = (uint64_t)&aAacGeoTypeAdmi[12735];
  dword_26135A0 = 683;
  qword_2613598 = 45;
  qword_2613578 = (uint64_t)&aAacGeoTypeAdmi[12714];
  dword_2613588 = 5828;
  qword_2613580 = 21;
  qword_2613560 = (uint64_t)&aAacGeoTypeAdmi[12683];
  dword_2613570 = 682;
  qword_2613568 = 31;
  qword_2613548 = (uint64_t)&aAacGeoTypeAdmi[12652];
  dword_2613558 = 681;
  qword_2613550 = 31;
  qword_2613530 = (uint64_t)&aAacGeoTypeAdmi[12623];
  dword_2613540 = 680;
  qword_2613538 = 29;
  qword_2613518 = (uint64_t)&aAacGeoTypeAdmi[12585];
  dword_2613528 = 679;
  qword_2613520 = 38;
  qword_2613500 = (uint64_t)&aAacGeoTypeAdmi[12525];
  qword_2613508 = 60;
  dword_2613510 = 678;
  qword_26134E8 = (uint64_t)&aAacGeoTypeAdmi[12505];
  dword_26134F8 = 677;
  qword_26134F0 = 20;
  qword_26134D0 = (uint64_t)&aAacGeoTypeAdmi[12484];
  dword_26134E0 = 676;
  qword_26134D8 = 21;
  qword_26134B8 = (uint64_t)&aAacGeoTypeAdmi[12467];
  dword_26134C8 = 675;
  qword_26134C0 = 17;
  qword_26134A0 = (uint64_t)&aAacGeoTypeAdmi[12455];
  dword_26134B0 = 674;
  qword_2613B50 = 38;
  qword_26134A8 = 12;
  dword_2613B58 = 744;
  qword_2613B60 = (uint64_t)&aAacGeoTypeAdmi[14043];
  qword_2613490 = 12;
  dword_2613B70 = 745;
  qword_2613B78 = (uint64_t)&aAacGeoTypeAdmi[14073];
  qword_2613478 = 13;
  dword_2613B88 = 746;
  qword_2613B90 = (uint64_t)&aAacGeoTypeAdmi[14105];
  qword_2613460 = 15;
  dword_2613BA0 = 747;
  qword_2613BA8 = (uint64_t)&aAacGeoTypeAdmi[14120];
  qword_2613448 = 14;
  dword_2613BB8 = 748;
  qword_2613BC0 = (uint64_t)&aAacGeoTypeAdmi[14139];
  qword_2613430 = 12;
  dword_2613BD0 = 749;
  qword_2613BD8 = (uint64_t)&aAacGeoTypeAdmi[14152];
  qword_2613418 = 17;
  dword_2613BE8 = 750;
  qword_2613BF0 = (uint64_t)&aAacGeoTypeAdmi[14168];
  qword_2613400 = 10;
  dword_2613C00 = 751;
  qword_2613C08 = (uint64_t)&aAacGeoTypeAdmi[14194];
  qword_26133E8 = 11;
  dword_2613C18 = 752;
  qword_2613C20 = (uint64_t)&aAacGeoTypeAdmi[14222];
  qword_26133D0 = 9;
  dword_2613C30 = 753;
  qword_2613C38 = (uint64_t)&aAacGeoTypeAdmi[14250];
  qword_26133B8 = 13;
  dword_2613C48 = 754;
  qword_2613C50 = (uint64_t)&aAacGeoTypeAdmi[14278];
  qword_26133A0 = 14;
  dword_2613C60 = 755;
  qword_2613C68 = (uint64_t)&aAacGeoTypeAdmi[14308];
  qword_2613388 = 17;
  dword_2613C78 = 756;
  qword_2613C80 = (uint64_t)&aAacGeoTypeAdmi[14330];
  qword_2613370 = 14;
  dword_2613C90 = 757;
  qword_2613C98 = (uint64_t)&aAacGeoTypeAdmi[14362];
  qword_2613358 = 15;
  dword_2613CA8 = 758;
  qword_2613CB0 = (uint64_t)&aAacGeoTypeAdmi[14388];
  qword_2613340 = 15;
  dword_2613CC0 = 759;
  qword_2613CC8 = (uint64_t)&aAacGeoTypeAdmi[14417];
  qword_2613328 = 25;
  dword_2613CD8 = 760;
  qword_2613CE0 = (uint64_t)&aAacGeoTypeAdmi[14432];
  qword_2613310 = 18;
  dword_2613CF0 = 761;
  qword_2613CF8 = (uint64_t)&aAacGeoTypeAdmi[14457];
  qword_26132F8 = 33;
  dword_2613D08 = 762;
  qword_2613D10 = (uint64_t)&aAacGeoTypeAdmi[14484];
  qword_26132E0 = 33;
  dword_2613D20 = 763;
  qword_2613D28 = (uint64_t)&aAacGeoTypeAdmi[14506];
  dword_2613D38 = 764;
  qword_2613D40 = (uint64_t)&aAacGeoTypeAdmi[14525];
  qword_26132B0 = 36;
  dword_2613D50 = 765;
  qword_2613D58 = (uint64_t)&aAacGeoTypeAdmi[14543];
  qword_2613298 = 12;
  dword_2613D68 = 766;
  qword_2613D70 = (uint64_t)&aAacGeoTypeAdmi[14562];
  qword_2613280 = 9;
  dword_2613D80 = 767;
  qword_2613D88 = (uint64_t)&aAacGeoTypeAdmi[14590];
  qword_2613268 = 32;
  dword_2613D98 = 768;
  qword_2613DA0 = (uint64_t)&aAacGeoTypeAdmi[14610];
  qword_2613250 = 23;
  dword_2613DB0 = 769;
  qword_2613DB8 = (uint64_t)&aAacGeoTypeAdmi[14634];
  qword_2613238 = 9;
  dword_2613DC8 = 770;
  qword_2613DD0 = (uint64_t)&aAacGeoTypeAdmi[14660];
  qword_2613220 = 11;
  dword_2613DE0 = 771;
  qword_2613DE8 = (uint64_t)&aAacGeoTypeAdmi[14691];
  qword_2613208 = 12;
  dword_2613DF8 = 772;
  qword_2613E00 = (uint64_t)&aAacGeoTypeAdmi[14721];
  qword_26131F0 = 12;
  dword_2613E10 = 773;
  qword_2613E18 = (uint64_t)&aAacGeoTypeAdmi[14744];
  qword_26131D8 = 12;
  dword_2613E28 = 774;
  qword_2613E30 = (uint64_t)&aAacGeoTypeAdmi[14770];
  qword_26131C0 = 12;
  dword_2613E40 = 775;
  qword_2613E48 = (uint64_t)&aAacGeoTypeAdmi[14789];
  qword_26131A8 = 12;
  dword_2613E58 = 776;
  qword_2613E60 = (uint64_t)&aAacGeoTypeAdmi[14805];
  qword_2613190 = 12;
  dword_2613E70 = 777;
  qword_2613E78 = (uint64_t)&aAacGeoTypeAdmi[14828];
  qword_2613178 = 12;
  dword_2613E88 = 778;
  qword_2613E90 = (uint64_t)&aAacGeoTypeAdmi[14854];
  qword_2613160 = 12;
  dword_2613EA0 = 779;
  qword_2613EA8 = (uint64_t)&aAacGeoTypeAdmi[14876];
  qword_2613148 = 13;
  dword_2613EB8 = 780;
  qword_2613EC0 = (uint64_t)&aAacGeoTypeAdmi[14899];
  qword_2613130 = 12;
  dword_2613ED0 = 781;
  qword_2613ED8 = (uint64_t)&aAacGeoTypeAdmi[14922];
  qword_2613118 = 10;
  dword_2613EE8 = 782;
  qword_2613EF0 = (uint64_t)&aAacGeoTypeAdmi[14942];
  qword_26130E8 = 12;
  qword_2613100 = 17;
  qword_2612F68 = 26;
  qword_2612F80 = 23;
  qword_2612F98 = 13;
  qword_2612FB0 = 16;
  qword_26130B8 = 8;
  qword_26130D0 = 10;
  qword_2612FC8 = 28;
  qword_2612FE0 = 18;
  qword_2612FF8 = 18;
  qword_2613010 = 18;
  qword_2613088 = 30;
  qword_26130A0 = 33;
  qword_2613028 = 18;
  qword_2613040 = 18;
  qword_2613058 = 4;
  qword_2613070 = 16;
  qword_2613B68 = 30;
  qword_2613B80 = 32;
  qword_2613B98 = 15;
  qword_2613BB0 = 19;
  qword_2613BC8 = 13;
  qword_2613BE0 = 16;
  qword_2613BF8 = 26;
  qword_2613C10 = 28;
  qword_2613C28 = 28;
  qword_2613C40 = 28;
  qword_2613C58 = 30;
  qword_2613C70 = 22;
  qword_2613C88 = 32;
  qword_2613CA0 = 26;
  qword_2613CB8 = 29;
  qword_2613CD0 = 15;
  qword_2613CE8 = 25;
  qword_2613D00 = 27;
  qword_2613D18 = 22;
  qword_2613D30 = 19;
  qword_2613D48 = 18;
  qword_2613D60 = 19;
  qword_2613D78 = 28;
  qword_2613D90 = 20;
  qword_2613DA8 = 24;
  qword_2613DC0 = 26;
  qword_2613DD8 = 31;
  qword_2613DF0 = 30;
  qword_2613E08 = 23;
  qword_2613E20 = 26;
  qword_2613E38 = 19;
  uint64_t result = 19;
  qword_2613E50 = 16;
  qword_2613E68 = 23;
  qword_2613E80 = 26;
  qword_2613E98 = 22;
  qword_2613EB0 = 23;
  qword_2613EC8 = 23;
  qword_2613EE0 = 20;
  qword_2614E98 = (uint64_t)&aAacGeoTypeAdmi[18206];
  *(int *)((char *)&dword_26101B0 + &loc_4CF8) = 941;
  *(int *)((char *)&dword_26101B0 + &loc_4D10) = 942;
  *(int *)((char *)&dword_26101B0 + &loc_4D28) = 943;
  *(int *)((char *)&dword_26101B0 + sub_4D40) = 944;
  *(int *)((char *)&dword_26101B0 + &loc_4D58) = 945;
  *(int *)((char *)&dword_26101B0 + &loc_4D70) = 946;
  *(int *)((char *)&dword_26101B0 + &loc_4D88) = 947;
  *(int *)((char *)&dword_26101B0 + &loc_4DA0) = 948;
  *(int *)((char *)&dword_26101B0 + &loc_4DB8) = 949;
  *(int *)((char *)&dword_26101B0 + &loc_4DD0) = 950;
  *(int *)((char *)&dword_26101B0 + sub_4DE8) = 951;
  *(int *)((char *)&dword_26101B0 + &loc_4E00) = 952;
  *(int *)((char *)&dword_26101B0 + &loc_4E18) = 953;
  *(int *)((char *)&dword_26101B0 + &loc_4E30) = 954;
  *(int *)((char *)&dword_26101B0 + &loc_4E48) = 955;
  *(int *)((char *)&dword_26101B0 + &locret_4E60) = 956;
  *(int *)((char *)&dword_26101B0 + &loc_4E78) = 957;
  *(int *)((char *)&dword_26101B0 + &loc_4E90) = 958;
  *(int *)((char *)&dword_26101B0 + &loc_4EA8) = 959;
  *(int *)((char *)&dword_26101B0 + &loc_4EC0) = 960;
  *(int *)((char *)&dword_26101B0 + &loc_4ED8) = 961;
  *(int *)((char *)&dword_26101B0 + &loc_4EF0) = 962;
  *(int *)((char *)&dword_26101B0 + &loc_4F08) = 963;
  *(int *)((char *)&dword_26101B0 + &loc_4F1C + 4) = 964;
  *(int *)((char *)&dword_26101B0 + &loc_4F38) = 965;
  *(int *)((char *)&dword_26101B0 + &loc_4F50) = 966;
  *(int *)((char *)&dword_26101B0 + &loc_4F68) = 967;
  *(int *)((char *)&dword_26101B0 + &loc_4F80) = 968;
  *(int *)((char *)&dword_26101B0 + &loc_4F98) = 969;
  *(int *)((char *)&dword_26101B0 + &loc_4FAC + 4) = 970;
  *(int *)((char *)&dword_26101B0 + &loc_4FC8) = 971;
  *(int *)((char *)&dword_26101B0 + &loc_4FE0) = 5779;
  *(int *)((char *)&dword_26101B0 + &loc_4FF8) = 972;
  *(int *)((char *)&dword_26101B0 + &loc_5010) = 973;
  *(int *)((char *)&dword_26101B0 + &loc_5028) = 974;
  *(int *)((char *)&dword_26101B0 + &loc_503C + 4) = 975;
  *(int *)((char *)&dword_26101B0 + &loc_5058) = 976;
  *(int *)((char *)&dword_26101B0 + &loc_5070) = 977;
  *(int *)((char *)&dword_26101B0 + &loc_5088) = 978;
  *(int *)((char *)&dword_26101B0 + &loc_50A0) = 979;
  *(int *)((char *)&dword_26101B0 + &loc_50B8) = 980;
  *(int *)((char *)&dword_26101B0 + &loc_50D0) = 981;
  *(int *)((char *)&dword_26101B0 + &loc_50E8) = 982;
  *(int *)((char *)&dword_26101B0 + &loc_5100) = 983;
  *(int *)((char *)&dword_26101B0 + &loc_5118) = 984;
  *(int *)((char *)&dword_26101B0 + &loc_5130) = 985;
  *(int *)((char *)&dword_26101B0 + &loc_5148) = 986;
  *(int *)((char *)&dword_26101B0 + &loc_5160) = 987;
  *(int *)((char *)&dword_26101B0 + &loc_5178) = 988;
  *(int *)((char *)&dword_26101B0 + &loc_5190) = 989;
  *(int *)((char *)&dword_26101B0 + &loc_51A8) = 990;
  *(int *)((char *)&dword_26101B0 + &loc_51C0) = 991;
  *(int *)((char *)&dword_26101B0 + &loc_51D8) = 992;
  *(int *)((char *)&dword_26101B0 + &loc_51F0) = 993;
  *(int *)((char *)&dword_26101B0 + &loc_5208) = 5821;
  *(int *)((char *)&dword_26101B0 + &locret_5220) = 994;
  *(int *)((char *)&dword_26101B0 + &loc_5238) = 995;
  *(int *)((char *)&dword_26101B0 + &loc_5250) = 996;
  *(int *)((char *)&dword_26101B0 + &loc_5268) = 997;
  *(int *)((char *)&dword_26101B0 + &loc_5280) = 998;
  *(int *)((char *)&dword_26101B0 + &loc_5294 + 4) = 999;
  *(int *)((char *)&dword_26101B0 + &loc_52B0) = 1000;
  *(int *)((char *)&dword_26101B0 + &loc_52C4 + 4) = 1001;
  *(int *)((char *)&dword_26101B0 + &loc_52E0) = 1002;
  *(int *)((char *)&dword_26101B0 + &loc_52F8) = 1003;
  *(int *)((char *)&dword_26101B0 + &loc_5310) = 1004;
  *(int *)((char *)&dword_26101B0 + &loc_5328) = 1005;
  *(int *)((char *)&dword_26101B0 + &loc_5340) = 1006;
  *(int *)((char *)&dword_26101B0 + &loc_5358) = 1007;
  *(int *)((char *)&dword_26101B0 + &loc_5370) = 1008;
  *(int *)((char *)&dword_26101B0 + &loc_5388) = 1009;
  *(int *)((char *)&dword_26101B0 + &loc_53A0) = 1010;
  *(int *)((char *)&dword_26101B0 + &loc_53B8) = 1011;
  *(int *)((char *)&dword_26101B0 + sub_53D0) = 5822;
  *(int *)((char *)&dword_26101B0 + &loc_53E8) = 1012;
  *(int *)((char *)&dword_26101B0 + &loc_5400) = 1013;
  *(int *)((char *)&dword_26101B0 + &loc_5418) = 1014;
  *(int *)((char *)&dword_26101B0 + &loc_5430) = 1015;
  *(int *)((char *)&dword_26101B0 + &loc_5448) = 1016;
  *(int *)((char *)&dword_26101B0 + &loc_5460) = 1017;
  *(int *)((char *)&dword_26101B0 + &loc_5478) = 1018;
  *(int *)((char *)&dword_26101B0 + &loc_5490) = 1019;
  *(int *)((char *)&dword_26101B0 + &loc_54A8) = 1020;
  *(int *)((char *)&dword_26101B0 + &loc_54C0) = 1021;
  *(int *)((char *)&dword_26101B0 + &loc_54D8) = 1022;
  *(int *)((char *)&dword_26101B0 + &loc_54F0) = 1023;
  *(int *)((char *)&dword_26101B0 + &loc_5508) = 1024;
  *(int *)((char *)&dword_26101B0 + &loc_5520) = 1025;
  *(int *)((char *)&dword_26101B0 + &loc_5538) = 1026;
  *(int *)((char *)&dword_26101B0 + &locret_5550) = 1027;
  *(int *)((char *)&dword_26101B0 + &loc_5568) = 1028;
  *(int *)((char *)&dword_26101B0 + &loc_5580) = 1029;
  *(int *)((char *)&dword_26101B0 + &loc_5598) = 1030;
  *(int *)((char *)&dword_26101B0 + &loc_55B0) = 1031;
  *(int *)((char *)&dword_26101B0 + &loc_55C8) = 1032;
  *(int *)((char *)&dword_26101B0 + &loc_55E0) = 1033;
  *(int *)((char *)&dword_26101B0 + &loc_55F8) = 1034;
  *(int *)((char *)&dword_26101B0 + &loc_5610) = 1035;
  *(int *)((char *)&dword_26101B0 + &loc_5628) = 1036;
  *(int *)((char *)&dword_26101B0 + &loc_5640) = 1037;
  *(int *)((char *)&dword_26101B0 + &loc_5658) = 1038;
  *(int *)((char *)&dword_26101B0 + &loc_5670) = 1039;
  *(int *)((char *)&dword_26101B0 + &loc_5688) = 1040;
  *(int *)((char *)&dword_26101B0 + &loc_56A0) = 1041;
  *(int *)((char *)&dword_26101B0 + &loc_56B8) = 1042;
  *(int *)((char *)&dword_26101B0 + &loc_56D0) = 1043;
  *(int *)((char *)&dword_26101B0 + &loc_56E8) = 1044;
  *(int *)((char *)&dword_26101B0 + &loc_5700) = 1045;
  *(int *)((char *)&dword_26101B0 + &loc_5718) = 1046;
  *(int *)((char *)&dword_26101B0 + sub_5730) = 1047;
  *(int *)((char *)&dword_26101B0 + &loc_5748) = 1048;
  *(int *)((char *)&dword_26101B0 + &loc_5760) = 1049;
  *(int *)((char *)&dword_26101B0 + &loc_5778) = 1050;
  *(int *)((char *)&dword_26101B0 + &loc_5790) = 1051;
  qword_2614BC8 = (uint64_t)&aAacGeoTypeAdmi[17326];
  *(int *)((char *)&dword_26101B0 + &loc_57A8) = 1052;
  qword_2614BB8 = 27;
  *(int *)((char *)&dword_26101B0 + &loc_57C0) = 1053;
  qword_2614BB0 = (uint64_t)&aAacGeoTypeAdmi[17299];
  qword_2614BA0 = 34;
  qword_2614B98 = (uint64_t)&aAacGeoTypeAdmi[17265];
  *(int *)((char *)&dword_26101B0 + &loc_57D8) = 1054;
  qword_2614B80 = (uint64_t)&aAacGeoTypeAdmi[17231];
  qword_2614B88 = 34;
  *(int *)((char *)&dword_26101B0 + &loc_57F0) = 1055;
  qword_2614B70 = 34;
  *(int *)((char *)&dword_26101B0 + &loc_5808) = 1056;
  qword_2614B68 = (uint64_t)&aAacGeoTypeAdmi[17197];
  qword_2614B58 = 34;
  qword_2614B50 = (uint64_t)&aAacGeoTypeAdmi[17163];
  *(int *)((char *)&dword_26101B0 + &loc_5820) = 1057;
  qword_2614B38 = (uint64_t)&aAacGeoTypeAdmi[17129];
  qword_2614B40 = 34;
  *(int *)((char *)&dword_26101B0 + &loc_5838) = 1058;
  qword_2614B28 = 27;
  *(int *)((char *)&dword_26101B0 + &loc_5850) = 1059;
  qword_2614B20 = (uint64_t)&aAacGeoTypeAdmi[17102];
  qword_2614B10 = 27;
  qword_2614B08 = (uint64_t)&aAacGeoTypeAdmi[17075];
  *(int *)((char *)&dword_26101B0 + &loc_5868) = 1060;
  qword_2614AF0 = (uint64_t)&aAacGeoTypeAdmi[17048];
  qword_2614AF8 = 27;
  *(int *)((char *)&dword_26101B0 + &loc_5880) = 1061;
  qword_2614AE0 = 27;
  *(int *)((char *)&dword_26101B0 + &loc_5898) = 1062;
  qword_2614AD8 = (uint64_t)&aAacGeoTypeAdmi[17021];
  qword_2614AC8 = 27;
  qword_2614AC0 = (uint64_t)&aAacGeoTypeAdmi[16994];
  *(int *)((char *)&dword_26101B0 + &loc_58B0) = 1063;
  qword_2614AA8 = (uint64_t)&aAacGeoTypeAdmi[16977];
  qword_2614AB0 = 17;
  *(int *)((char *)&dword_26101B0 + &loc_58C8) = 1064;
  qword_2614A98 = 29;
  *(int *)((char *)&dword_26101B0 + sub_58E0) = 1065;
  qword_2614A90 = (uint64_t)&aAacGeoTypeAdmi[16948];
  qword_2614A80 = 26;
  qword_2614A78 = (uint64_t)&aAacGeoTypeAdmi[16922];
  *(int *)((char *)&dword_26101B0 + &loc_58F8) = 1066;
  qword_2614A60 = (uint64_t)&aAacGeoTypeAdmi[16898];
  qword_2614A68 = 24;
  *(int *)((char *)&dword_26101B0 + &loc_5910) = 1067;
  qword_2614A50 = 21;
  *(int *)((char *)&dword_26101B0 + &loc_5928) = 1068;
  qword_2614A48 = (uint64_t)&aAacGeoTypeAdmi[16877];
  qword_2614A38 = 21;
  qword_2614A30 = (uint64_t)&aAacGeoTypeAdmi[16856];
  *(int *)((char *)&dword_26101B0 + &loc_5940) = 1069;
  qword_2614A18 = (uint64_t)&aAacGeoTypeAdmi[16838];
  qword_2614A20 = 18;
  *(int *)((char *)&dword_26101B0 + &loc_5958) = 1070;
  qword_2614A08 = 32;
  *(int *)((char *)&dword_26101B0 + &loc_5970) = 1071;
  qword_2614A00 = (uint64_t)&aAacGeoTypeAdmi[16806];
  qword_26149F0 = 29;
  qword_26149E8 = (uint64_t)&aAacGeoTypeAdmi[16777];
  *(int *)((char *)&dword_26101B0 + &loc_5988) = 5794;
  qword_26149D0 = (uint64_t)&aAacGeoTypeAdmi[16765];
  qword_26149D8 = 12;
  *(int *)((char *)&dword_26101B0 + &loc_59A0) = 1072;
  qword_26149C0 = 25;
  *(int *)((char *)&dword_26101B0 + &loc_59B8) = 1073;
  qword_26149B8 = (uint64_t)&aAacGeoTypeAdmi[16740];
  qword_26149A8 = 10;
  qword_26149A0 = (uint64_t)&aAacGeoTypeAdmi[16730];
  *(int *)((char *)&dword_26101B0 + &loc_59D0) = 1074;
  qword_2614988 = (uint64_t)&aAacGeoTypeAdmi[16717];
  qword_2614990 = 13;
  *(int *)((char *)&dword_26101B0 + &loc_59E8) = 1075;
  qword_2614978 = 10;
  *(int *)((char *)&dword_26101B0 + &loc_5A00) = 1076;
  qword_2614970 = (uint64_t)&aAacGeoTypeAdmi[16707];
  qword_2614960 = 18;
  qword_2614958 = (uint64_t)&aAacGeoTypeAdmi[16689];
  *(int *)((char *)&dword_26101B0 + &loc_5A18) = 1077;
  qword_2614940 = (uint64_t)&aAacGeoTypeAdmi[16664];
  qword_2614948 = 25;
  *(int *)((char *)&dword_26101B0 + &loc_5A30) = 1078;
  qword_2614930 = 16;
  *(int *)((char *)&dword_26101B0 + &loc_5A48) = 1079;
  qword_2614928 = (uint64_t)&aAacGeoTypeAdmi[16648];
  qword_2614918 = 12;
  qword_2614910 = (uint64_t)&aAacGeoTypeAdmi[16636];
  *(int *)((char *)&dword_26101B0 + &loc_5A60) = 1080;
  qword_26148F8 = (uint64_t)&aAacGeoTypeAdmi[16611];
  qword_2614900 = 25;
  *(int *)((char *)&dword_26101B0 + &loc_5A78) = 1081;
  qword_26148E8 = 25;
  *(int *)((char *)&dword_26101B0 + &loc_5A90) = 1082;
  qword_26148E0 = (uint64_t)&aAacGeoTypeAdmi[16586];
  qword_26148D0 = 25;
  qword_26148C8 = (uint64_t)&aAacGeoTypeAdmi[16561];
  *(int *)((char *)&dword_26101B0 + &locret_5AA8) = 1083;
  qword_26148B0 = (uint64_t)&aAacGeoTypeAdmi[16529];
  qword_26148B8 = 32;
  *(int *)((char *)&dword_26101B0 + &loc_5AC0) = 1084;
  qword_26148A0 = 32;
  *(int *)((char *)&dword_26101B0 + &loc_5AD8) = 1085;
  qword_2614898 = (uint64_t)&aAacGeoTypeAdmi[16497];
  qword_2614888 = 32;
  qword_2614880 = (uint64_t)&aAacGeoTypeAdmi[16465];
  *(int *)((char *)&dword_26101B0 + &loc_5AF0) = 1086;
  qword_2614868 = (uint64_t)&aAacGeoTypeAdmi[16442];
  qword_2614870 = 23;
  *(int *)((char *)&dword_26101B0 + &loc_5B08) = 1087;
  qword_2614858 = 23;
  *(int *)((char *)&dword_26101B0 + &loc_5B20) = 5823;
  qword_2614850 = (uint64_t)&aAacGeoTypeAdmi[16419];
  qword_2614840 = 23;
  qword_2614838 = (uint64_t)&aAacGeoTypeAdmi[16396];
  *(int *)((char *)&dword_26101B0 + &loc_5B38) = 1088;
  qword_2614820 = (uint64_t)&aAacGeoTypeAdmi[16377];
  qword_2614828 = 19;
  *(int *)((char *)&dword_26101B0 + sub_5B44 + 12) = 1089;
  qword_2614810 = 19;
  *(int *)((char *)&dword_26101B0 + &locret_5B68) = 1090;
  qword_2614808 = (uint64_t)&aAacGeoTypeAdmi[16358];
  qword_26147F8 = 19;
  qword_26147F0 = (uint64_t)&aAacGeoTypeAdmi[16339];
  *(int *)((char *)&dword_26101B0 + &loc_5B80) = 1091;
  qword_26147D8 = (uint64_t)&aAacGeoTypeAdmi[16323];
  qword_26147E0 = 16;
  *(int *)((char *)&dword_26101B0 + &loc_5B98) = 1092;
  qword_26147C8 = 17;
  *(int *)((char *)&dword_26101B0 + &loc_5BB0) = 1093;
  qword_26147C0 = (uint64_t)&aAacGeoTypeAdmi[16306];
  qword_26147B0 = 12;
  qword_26147A8 = (uint64_t)&aAacGeoTypeAdmi[16294];
  *(int *)((char *)&dword_26101B0 + &loc_5BC8) = 1094;
  qword_2614790 = (uint64_t)&aAacGeoTypeAdmi[16283];
  qword_2614798 = 11;
  *(int *)((char *)&dword_26101B0 + &loc_5BE0) = 1095;
  qword_2614780 = 20;
  *(int *)((char *)&dword_26101B0 + &loc_5BF8) = 1096;
  qword_2614778 = (uint64_t)&aAacGeoTypeAdmi[16263];
  qword_2614768 = 11;
  qword_2614760 = (uint64_t)&aAacGeoTypeAdmi[16252];
  *(int *)((char *)&dword_26101B0 + &loc_5C10) = 1097;
  qword_2614748 = (uint64_t)&aAacGeoTypeAdmi[16240];
  qword_2614750 = 12;
  *(int *)((char *)&dword_26101B0 + &loc_5C28) = 1098;
  qword_2614738 = 20;
  *(int *)((char *)&dword_26101B0 + sub_5C40) = 1099;
  qword_2614730 = (uint64_t)&aAacGeoTypeAdmi[16220];
  qword_2614720 = 31;
  qword_2614718 = (uint64_t)&aAacGeoTypeAdmi[16189];
  *(int *)((char *)&dword_26101B0 + &loc_5C58) = 1100;
  qword_2614700 = (uint64_t)&aAacGeoTypeAdmi[16165];
  qword_2614708 = 24;
  qword_26146E8 = (uint64_t)&aAacGeoTypeAdmi[16152];
  qword_26146F0 = 13;
  *(int *)((char *)&dword_26101B0 + &loc_5C70) = 1101;
  qword_26146D0 = (uint64_t)&aAacGeoTypeAdmi[16129];
  qword_26146D8 = 23;
  dword_2613F00 = 783;
  qword_26146B8 = (uint64_t)&aAacGeoTypeAdmi[16099];
  qword_26146C0 = 30;
  qword_2613F08 = (uint64_t)&aAacGeoTypeAdmi[14962];
  dword_2613F18 = 784;
  qword_26146A8 = 17;
  qword_2613F20 = (uint64_t)&aAacGeoTypeAdmi[14982];
  qword_26146A0 = (uint64_t)&aAacGeoTypeAdmi[16082];
  qword_2614690 = 17;
  dword_2613F30 = 785;
  qword_2614688 = (uint64_t)&aAacGeoTypeAdmi[16065];
  qword_2613F38 = (uint64_t)&aAacGeoTypeAdmi[14999];
  qword_2614670 = (uint64_t)&aAacGeoTypeAdmi[16038];
  qword_2614678 = 27;
  dword_2613F48 = 786;
  qword_2614658 = (uint64_t)&aAacGeoTypeAdmi[16027];
  qword_2614660 = 11;
  qword_2614640 = (uint64_t)&aAacGeoTypeAdmi[16012];
  qword_2614648 = 15;
  qword_2613F50 = (uint64_t)&aAacGeoTypeAdmi[15022];
  qword_2614628 = (uint64_t)&aAacGeoTypeAdmi[15985];
  qword_2614630 = 27;
  dword_2613F60 = 787;
  qword_2614610 = (uint64_t)&aAacGeoTypeAdmi[15960];
  qword_2614618 = 25;
  qword_2613F68 = (uint64_t)&aAacGeoTypeAdmi[15041];
  qword_26145F8 = (uint64_t)&aAacGeoTypeAdmi[15941];
  qword_2614600 = 19;
  dword_2613F78 = 788;
  qword_26145E0 = (uint64_t)&aAacGeoTypeAdmi[15929];
  qword_26145E8 = 12;
  qword_26145C8 = (uint64_t)&aAacGeoTypeAdmi[15912];
  qword_26145D0 = 17;
  qword_2613F80 = (uint64_t)&aAacGeoTypeAdmi[15060];
  qword_26145B0 = (uint64_t)&aAacGeoTypeAdmi[15902];
  qword_26145B8 = 10;
  dword_2613F90 = 789;
  qword_2614598 = (uint64_t)&aAacGeoTypeAdmi[15892];
  qword_26145A0 = 10;
  qword_2613F98 = (uint64_t)&aAacGeoTypeAdmi[15087];
  dword_2613FA8 = 790;
  qword_2614588 = 10;
  qword_2613FB0 = (uint64_t)&aAacGeoTypeAdmi[15101];
  qword_2614580 = (uint64_t)&aAacGeoTypeAdmi[15882];
  qword_2614570 = 10;
  dword_2613FC0 = 791;
  qword_2614568 = (uint64_t)&aAacGeoTypeAdmi[15872];
  qword_2613FC8 = (uint64_t)&aAacGeoTypeAdmi[15131];
  qword_2614550 = (uint64_t)&aAacGeoTypeAdmi[15862];
  qword_2614558 = 10;
  dword_2613FD8 = 792;
  qword_2614538 = (uint64_t)&aAacGeoTypeAdmi[15851];
  qword_2614540 = 11;
  qword_2614520 = (uint64_t)&aAacGeoTypeAdmi[15840];
  qword_2614528 = 11;
  qword_2613FE0 = (uint64_t)&aAacGeoTypeAdmi[15161];
  qword_2614508 = (uint64_t)&aAacGeoTypeAdmi[15829];
  qword_2614510 = 11;
  dword_2613FF0 = 793;
  qword_26144F0 = (uint64_t)&aAacGeoTypeAdmi[15818];
  qword_26144F8 = 11;
  qword_2613FF8 = (uint64_t)&aAacGeoTypeAdmi[15191];
  qword_26144D8 = (uint64_t)&aAacGeoTypeAdmi[15807];
  qword_26144E0 = 11;
  dword_2614008 = 5793;
  qword_26144C0 = (uint64_t)&aAacGeoTypeAdmi[15796];
  qword_26144C8 = 11;
  qword_26144A8 = (uint64_t)&aAacGeoTypeAdmi[15785];
  qword_26144B0 = 11;
  qword_2614010 = (uint64_t)&aAacGeoTypeAdmi[15205];
  qword_2614490 = (uint64_t)&aAacGeoTypeAdmi[15774];
  qword_2614498 = 11;
  dword_2614020 = 794;
  qword_2614478 = (uint64_t)&aAacGeoTypeAdmi[15763];
  qword_2614480 = 11;
  qword_2614028 = (uint64_t)&aAacGeoTypeAdmi[15221];
  dword_2614038 = 795;
  qword_2614468 = 11;
  qword_2614040 = (uint64_t)&aAacGeoTypeAdmi[15234];
  qword_2614460 = (uint64_t)&aAacGeoTypeAdmi[15752];
  qword_2614450 = 10;
  dword_2614050 = 796;
  qword_2614448 = (uint64_t)&aAacGeoTypeAdmi[15742];
  qword_2614058 = (uint64_t)&aAacGeoTypeAdmi[15248];
  qword_2614430 = (uint64_t)&aAacGeoTypeAdmi[15731];
  qword_2614438 = 11;
  dword_2614068 = 797;
  qword_2614418 = (uint64_t)&aAacGeoTypeAdmi[15720];
  qword_2614420 = 11;
  qword_2614400 = (uint64_t)&aAacGeoTypeAdmi[15709];
  qword_2614408 = 11;
  qword_2614070 = (uint64_t)&aAacGeoTypeAdmi[15262];
  qword_26143E8 = (uint64_t)&aAacGeoTypeAdmi[15698];
  qword_26143F0 = 11;
  dword_2614080 = 798;
  qword_26143D0 = (uint64_t)&aAacGeoTypeAdmi[15687];
  qword_26143D8 = 11;
  qword_2614088 = (uint64_t)&aAacGeoTypeAdmi[15276];
  qword_26143B8 = (uint64_t)&aAacGeoTypeAdmi[15676];
  qword_26143C0 = 11;
  dword_2614098 = 799;
  qword_26143A0 = (uint64_t)&aAacGeoTypeAdmi[15665];
  qword_26143A8 = 11;
  qword_2614388 = (uint64_t)&aAacGeoTypeAdmi[15654];
  qword_2614390 = 11;
  qword_26140A0 = (uint64_t)&aAacGeoTypeAdmi[15290];
  qword_2614370 = (uint64_t)&aAacGeoTypeAdmi[15643];
  qword_2614378 = 11;
  dword_26140B0 = 800;
  qword_2614358 = (uint64_t)&aAacGeoTypeAdmi[15632];
  qword_2614360 = 11;
  qword_26140B8 = (uint64_t)&aAacGeoTypeAdmi[15304];
  dword_26140C8 = 801;
  qword_2614348 = 10;
  qword_26140D0 = (uint64_t)&aAacGeoTypeAdmi[15323];
  qword_2614340 = (uint64_t)&aAacGeoTypeAdmi[15622];
  qword_2614330 = 11;
  dword_26140E0 = 802;
  qword_2614328 = (uint64_t)&aAacGeoTypeAdmi[15611];
  qword_26140E8 = (uint64_t)&aAacGeoTypeAdmi[15339];
  qword_2614310 = (uint64_t)&aAacGeoTypeAdmi[15600];
  qword_2614318 = 11;
  dword_26140F8 = 5795;
  qword_26142F8 = (uint64_t)&aAacGeoTypeAdmi[15589];
  qword_2614300 = 11;
  qword_26142E0 = (uint64_t)&aAacGeoTypeAdmi[15578];
  qword_26142E8 = 11;
  qword_2614100 = (uint64_t)&aAacGeoTypeAdmi[15363];
  qword_26142C8 = (uint64_t)&aAacGeoTypeAdmi[15567];
  qword_26142D0 = 11;
  dword_2614110 = 803;
  qword_26142B0 = (uint64_t)&aAacGeoTypeAdmi[15556];
  qword_26142B8 = 11;
  qword_2614118 = (uint64_t)&aAacGeoTypeAdmi[15372];
  qword_2614298 = (uint64_t)&aAacGeoTypeAdmi[15545];
  qword_26142A0 = 11;
  dword_2614128 = 804;
  qword_2614280 = (uint64_t)&aAacGeoTypeAdmi[15534];
  qword_2614288 = 11;
  qword_2614268 = (uint64_t)&aAacGeoTypeAdmi[15523];
  qword_2614270 = 11;
  qword_2614130 = (uint64_t)&aAacGeoTypeAdmi[15382];
  qword_2614250 = (uint64_t)&aAacGeoTypeAdmi[15512];
  qword_2614258 = 11;
  dword_2614140 = 805;
  qword_2614238 = (uint64_t)&aAacGeoTypeAdmi[15502];
  qword_2614240 = 10;
  qword_2614148 = (uint64_t)&aAacGeoTypeAdmi[15392];
  dword_2614158 = 814;
  qword_2614228 = 11;
  qword_2614160 = (uint64_t)&aAacGeoTypeAdmi[15403];
  qword_2614220 = (uint64_t)&aAacGeoTypeAdmi[15491];
  qword_2614210 = 11;
  dword_2614170 = 815;
  qword_2614208 = (uint64_t)&aAacGeoTypeAdmi[15480];
  qword_2614178 = (uint64_t)&aAacGeoTypeAdmi[15414];
  qword_26141F0 = (uint64_t)&aAacGeoTypeAdmi[15469];
  qword_26141F8 = 11;
  dword_2614188 = 816;
  qword_26141D8 = (uint64_t)&aAacGeoTypeAdmi[15458];
  qword_26141E0 = 11;
  qword_26141C0 = (uint64_t)&aAacGeoTypeAdmi[15447];
  qword_26141C8 = 11;
  qword_2614190 = (uint64_t)&aAacGeoTypeAdmi[15425];
  qword_26141A8 = (uint64_t)&aAacGeoTypeAdmi[15436];
  qword_26141B0 = 11;
  qword_2614BE0 = (uint64_t)&aAacGeoTypeAdmi[17353];
  qword_2614BF8 = (uint64_t)&aAacGeoTypeAdmi[17380];
  qword_2614198 = 11;
  qword_2614C10 = (uint64_t)&aAacGeoTypeAdmi[17407];
  qword_2614180 = 11;
  qword_2614C28 = (uint64_t)&aAacGeoTypeAdmi[17434];
  qword_2614C40 = (uint64_t)&aAacGeoTypeAdmi[17464];
  qword_2614168 = 11;
  qword_2614C58 = (uint64_t)&aAacGeoTypeAdmi[17494];
  qword_2614C70 = (uint64_t)&aAacGeoTypeAdmi[17524];
  qword_2614C88 = (uint64_t)&aAacGeoTypeAdmi[17554];
  qword_2614CA0 = (uint64_t)&aAacGeoTypeAdmi[17584];
  qword_2614150 = 11;
  qword_2614CB8 = (uint64_t)&aAacGeoTypeAdmi[17613];
  qword_2614138 = 10;
  qword_2614CD0 = (uint64_t)&aAacGeoTypeAdmi[17642];
  qword_2614CE8 = (uint64_t)&aAacGeoTypeAdmi[17671];
  qword_2614120 = 10;
  qword_2614D00 = (uint64_t)&aAacGeoTypeAdmi[17700];
  qword_2614D18 = (uint64_t)&aAacGeoTypeAdmi[17729];
  qword_2614108 = 9;
  qword_2614D30 = (uint64_t)&aAacGeoTypeAdmi[17761];
  qword_26140F0 = 24;
  qword_2614D48 = (uint64_t)&aAacGeoTypeAdmi[17793];
  qword_2614D60 = (uint64_t)&aAacGeoTypeAdmi[17825];
  qword_26140D8 = 16;
  qword_2614D78 = (uint64_t)&aAacGeoTypeAdmi[17857];
  qword_2614D90 = (uint64_t)&aAacGeoTypeAdmi[17889];
  qword_2614DA8 = (uint64_t)&aAacGeoTypeAdmi[17917];
  qword_2614DC0 = (uint64_t)&aAacGeoTypeAdmi[17945];
  qword_26140C0 = 19;
  qword_2614DD8 = (uint64_t)&aAacGeoTypeAdmi[17973];
  qword_26140A8 = 14;
  qword_2614DF0 = (uint64_t)&aAacGeoTypeAdmi[18001];
  qword_2614E08 = (uint64_t)&aAacGeoTypeAdmi[18029];
  qword_2614090 = 14;
  qword_2614E20 = (uint64_t)&aAacGeoTypeAdmi[18058];
  qword_2614E38 = (uint64_t)&aAacGeoTypeAdmi[18087];
  qword_2614078 = 14;
  qword_2614E50 = (uint64_t)&aAacGeoTypeAdmi[18116];
  qword_2614060 = 14;
  qword_2614E68 = (uint64_t)&aAacGeoTypeAdmi[18145];
  qword_2614E80 = (uint64_t)&aAacGeoTypeAdmi[18174];
  qword_2614030 = 13;
  qword_2614048 = 14;
  qword_2613F10 = 20;
  qword_2613F28 = 17;
  qword_2613F40 = 23;
  qword_2613F58 = 19;
  qword_2614000 = 14;
  qword_2614018 = 16;
  qword_2613F70 = 19;
  qword_2613F88 = 27;
  qword_2613FA0 = 14;
  qword_2613FB8 = 30;
  qword_2613FD0 = 30;
  qword_2613FE8 = 30;
  qword_2614BD0 = 27;
  qword_2614BE8 = 27;
  qword_2614C00 = 27;
  qword_2614C18 = 27;
  qword_2614C30 = 30;
  qword_2614C48 = 30;
  qword_2614C60 = 30;
  qword_2614C78 = 30;
  qword_2614C90 = 30;
  qword_2614CA8 = 29;
  qword_2614CC0 = 29;
  qword_2614CD8 = 29;
  qword_2614CF0 = 29;
  qword_2614D08 = 29;
  qword_2614D20 = 32;
  qword_2614D38 = 32;
  qword_2614D50 = 32;
  qword_2614D68 = 32;
  qword_2614D80 = 32;
  qword_2614D98 = 28;
  qword_2614DB0 = 28;
  qword_2614DC8 = 28;
  qword_2614DE0 = 28;
  qword_2614DF8 = 28;
  qword_2614E10 = 29;
  qword_2614E28 = 29;
  qword_2614E40 = 29;
  qword_2614E58 = 29;
  qword_2614E70 = 29;
  qword_2614E88 = 32;
  *(int *)((char *)&dword_26101B0 + &loc_5C88) = 1102;
  *(int *)((char *)&dword_26101B0 + &loc_5CA0) = 1103;
  *(int *)((char *)&dword_26101B0 + &loc_5CB8) = 1104;
  *(int *)((char *)&dword_26101B0 + &loc_5CD0) = 1105;
  *(int *)((char *)&dword_26101B0 + &loc_5CE8) = 1106;
  *(int *)((char *)&dword_26101B0 + &loc_5D00) = 1107;
  *(int *)((char *)&dword_26101B0 + &loc_5D18) = 1108;
  *(int *)((char *)&dword_26101B0 + &loc_5D30) = 1109;
  *(int *)((char *)&dword_26101B0 + &loc_5D48) = 1110;
  *(int *)((char *)&dword_26101B0 + &loc_5D60) = 1111;
  *(int *)((char *)&dword_26101B0 + &loc_5D78) = 1112;
  *(int *)((char *)&dword_26101B0 + &loc_5D90) = 1113;
  *(int *)((char *)&dword_26101B0 + &loc_5DA8) = 1114;
  *(int *)((char *)&dword_26101B0 + &loc_5DC0) = 1115;
  *(int *)((char *)&dword_26101B0 + &loc_5DD8) = 1116;
  *(int *)((char *)&dword_26101B0 + &loc_5DF0) = 1117;
  *(int *)((char *)&dword_26101B0 + &loc_5E08) = 1118;
  *(int *)((char *)&dword_26101B0 + &loc_5E20) = 1119;
  *(int *)((char *)&dword_26101B0 + &loc_5E38) = 1120;
  *(int *)((char *)&dword_26101B0 + &loc_5E50) = 1121;
  *(int *)((char *)&dword_26101B0 + &loc_5E68) = 1122;
  *(int *)((char *)&dword_26101B0 + &loc_5E80) = 1123;
  *(int *)((char *)&dword_26101B0 + &loc_5E98) = 1124;
  *(int *)((char *)&dword_26101B0 + &loc_5EB0) = 1125;
  *(int *)((char *)&dword_26101B0 + &loc_5EC8) = 1126;
  *(int *)((char *)&dword_26101B0 + &loc_5EE0) = 1127;
  *(int *)((char *)&dword_26101B0 + &loc_5EF8) = 1128;
  *(int *)((char *)&dword_26101B0 + sub_5F10) = 1129;
  *(int *)((char *)&dword_26101B0 + &loc_5F28) = 1130;
  *(int *)((char *)&dword_26101B0 + &loc_5F40) = 1131;
  *(int *)((char *)&dword_26101B0 + &loc_5F58) = 1132;
  *(int *)((char *)&dword_26101B0 + &loc_5F70) = 1133;
  *(int *)((char *)&dword_26101B0 + &loc_5F88) = 5774;
  *(int *)((char *)&dword_26101B0 + &loc_5FA0) = 5819;
  *(int *)((char *)&dword_26101B0 + &loc_5FB8) = 5820;
  *(int *)((char *)&dword_26101B0 + &loc_5FD0) = 5817;
  *(int *)((char *)&dword_26101B0 + &loc_5FE8) = 5818;
  dword_26161B0 = 5775;
  *(int *)((char *)&dword_26101B0 + &loc_6018) = 5773;
  *(int *)((char *)&dword_26101B0 + &loc_6030) = 1134;
  *(int *)((char *)&dword_26101B0 + &loc_6048) = 1135;
  *(int *)((char *)&dword_26101B0 + &loc_6060) = 1136;
  *(int *)((char *)&dword_26101B0 + sub_6078) = 1137;
  *(int *)((char *)&dword_26101B0 + &loc_6090) = 1138;
  *(int *)((char *)&dword_26101B0 + sub_60A8) = 1139;
  *(int *)((char *)&dword_26101B0 + &loc_60C0) = 1140;
  *(int *)((char *)&dword_26101B0 + &loc_60D8) = 1141;
  *(int *)((char *)&dword_26101B0 + &loc_60F0) = 1142;
  *(int *)((char *)&dword_26101B0 + &loc_6108) = 1143;
  *(int *)((char *)&dword_26101B0 + &loc_611C + 4) = 1144;
  *(int *)((char *)&dword_26101B0 + &loc_6138) = 1145;
  *(int *)((char *)&dword_26101B0 + &loc_6150) = 1146;
  *(int *)((char *)&dword_26101B0 + &loc_6168) = 1147;
  *(int *)((char *)&dword_26101B0 + &loc_6180) = 1148;
  *(int *)((char *)&dword_26101B0 + &loc_6198) = 1149;
  *(int *)((char *)&dword_26101B0 + &loc_61B0) = 1150;
  *(int *)((char *)&dword_26101B0 + &loc_61C8) = 1151;
  *(int *)((char *)&dword_26101B0 + &loc_61E0) = 1152;
  *(int *)((char *)&dword_26101B0 + &loc_61F8) = 1153;
  *(int *)((char *)&dword_26101B0 + &loc_6210) = 1154;
  *(int *)((char *)&dword_26101B0 + sub_6228) = 1155;
  *(int *)((char *)&dword_26101B0 + &locret_6240) = 1156;
  *(int *)((char *)&dword_26101B0 + &loc_6258) = 1157;
  *(int *)((char *)&dword_26101B0 + &loc_6270) = 1158;
  *(int *)((char *)&dword_26101B0 + &loc_6288) = 1159;
  *(int *)((char *)&dword_26101B0 + &loc_62A0) = 1160;
  *(int *)((char *)&dword_26101B0 + &loc_62B8) = 1161;
  *(int *)((char *)&dword_26101B0 + &loc_62D0) = 1162;
  *(int *)((char *)&dword_26101B0 + &loc_62E8) = 1163;
  *(int *)((char *)&dword_26101B0 + &loc_6300) = 1164;
  *(int *)((char *)&dword_26101B0 + &loc_6318) = 1165;
  *(int *)((char *)&dword_26101B0 + &loc_6330) = 1166;
  *(int *)((char *)&dword_26101B0 + &loc_6348) = 1167;
  *(int *)((char *)&dword_26101B0 + &loc_6360) = 1168;
  *(int *)((char *)&dword_26101B0 + sub_6378) = 2615;
  *(int *)((char *)&dword_26101B0 + &locret_6390) = 2616;
  *(int *)((char *)&dword_26101B0 + &loc_63A8) = 3679;
  *(int *)((char *)&dword_26101B0 + &loc_63C0) = 3680;
  *(int *)((char *)&dword_26101B0 + &loc_63D8) = 3681;
  *(int *)((char *)&dword_26101B0 + &loc_63F0) = 3682;
  *(int *)((char *)&dword_26101B0 + &loc_6408) = 3683;
  *(int *)((char *)&dword_26101B0 + &loc_641C + 4) = 3684;
  *(int *)((char *)&dword_26101B0 + &loc_6438) = 3685;
  *(int *)((char *)&dword_26101B0 + &loc_6450) = 3686;
  *(int *)((char *)&dword_26101B0 + &loc_6468) = 3687;
  *(int *)((char *)&dword_26101B0 + &loc_6480) = 3688;
  *(int *)((char *)&dword_26101B0 + &loc_6494 + 4) = 3689;
  *(int *)((char *)&dword_26101B0 + &loc_64B0) = 3690;
  qword_26165C8 = 22;
  *(int *)((char *)&dword_26101B0 + &loc_64C8) = 3691;
  qword_26165C0 = (uint64_t)"browse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26165B0 = 22;
  qword_26165A8 = (uint64_t)"browse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_64E0) = 3692;
  qword_2616590 = (uint64_t)"browse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616598 = 22;
  *(int *)((char *)&dword_26101B0 + &loc_64F8) = 3693;
  qword_2616580 = 18;
  *(int *)((char *)&dword_26101B0 + &loc_6510) = 3694;
  qword_2616578 = (uint64_t)"browse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616568 = 15;
  qword_2616560 = (uint64_t)"browse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6528) = 3695;
  qword_2616548 = (uint64_t)"brand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616550 = 14;
  *(int *)((char *)&dword_26101B0 + &locret_6540) = 3696;
  qword_2616538 = 22;
  *(int *)((char *)&dword_26101B0 + &loc_6558) = 3697;
  qword_2616530 = (uint64_t)"available_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616520 = 18;
  qword_2616518 = (uint64_t)"addr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_656C + 4) = 3698;
  qword_2616500 = (uint64_t)"VP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616508 = 8;
  *(int *)((char *)&dword_26101B0 + sub_6588) = 3699;
  qword_26164F0 = 8;
  *(int *)((char *)&dword_26101B0 + &loc_65A0) = 3700;
  qword_26164E8 = (uint64_t)"VP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26164D8 = 8;
  qword_26164D0 = (uint64_t)"VP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_65B8) = 3701;
  qword_26164B8 = (uint64_t)"VP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26164C0 = 8;
  *(int *)((char *)&dword_26101B0 + &loc_65D0) = 3702;
  qword_26164A8 = 26;
  *(int *)((char *)&dword_26101B0 + &loc_65E8) = 3704;
  qword_26164A0 = (uint64_t)"VIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616490 = 22;
  qword_2616488 = (uint64_t)"VIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6600) = 3705;
  qword_2616470 = (uint64_t)"VIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616478 = 21;
  *(int *)((char *)&dword_26101B0 + &loc_6618) = 3707;
  qword_2616460 = 10;
  *(int *)((char *)&dword_26101B0 + &loc_6630) = 3769;
  qword_2616458 = (uint64_t)"VENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616448 = 11;
  qword_2616440 = (uint64_t)"V3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6648) = 3770;
  qword_2616428 = (uint64_t)"V3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616430 = 21;
  *(int *)((char *)&dword_26101B0 + &loc_6660) = 3771;
  qword_2616418 = 12;
  *(int *)((char *)&dword_26101B0 + &loc_6678) = 3775;
  qword_2616410 = (uint64_t)"V3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616400 = 22;
  qword_26163F8 = (uint64_t)"V3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &locret_6690) = 5827;
  qword_26163E0 = (uint64_t)"V2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26163E8 = 26;
  *(int *)((char *)&dword_26101B0 + sub_66A8) = 3776;
  qword_26163D0 = 21;
  *(int *)((char *)&dword_26101B0 + &loc_66C0) = 3777;
  qword_26163C8 = (uint64_t)"V2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26163B8 = 27;
  qword_26163B0 = (uint64_t)"V2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_66D8) = 3778;
  qword_2616398 = (uint64_t)"V2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26163A0 = 22;
  *(int *)((char *)&dword_26101B0 + &loc_66F0) = 3779;
  qword_2616388 = 30;
  *(int *)((char *)&dword_26101B0 + &loc_6708) = 3780;
  qword_2616380 = (uint64_t)"V1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616370 = 26;
  qword_2616368 = (uint64_t)"V1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6720) = 3781;
  qword_2616350 = (uint64_t)"V1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616358 = 27;
  *(int *)((char *)&dword_26101B0 + &loc_6738) = 3783;
  qword_2616340 = 23;
  *(int *)((char *)&dword_26101B0 + &loc_6750) = 4245;
  qword_2616338 = (uint64_t)"V1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616328 = 19;
  qword_2616320 = (uint64_t)"V1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6768) = 4246;
  qword_2616308 = (uint64_t)"V1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616310 = 23;
  *(int *)((char *)&dword_26101B0 + &loc_6780) = 4247;
  qword_26162F8 = 20;
  *(int *)((char *)&dword_26101B0 + &locret_6798) = 4248;
  qword_26162F0 = (uint64_t)"V1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26162E0 = 39;
  qword_26162D8 = (uint64_t)"V1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &locret_67B0) = 4249;
  qword_26162C0 = (uint64_t)"V1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26162C8 = 35;
  *(int *)((char *)&dword_26101B0 + &loc_67C8) = 4250;
  qword_26162B0 = 36;
  *(int *)((char *)&dword_26101B0 + &loc_67E0) = 4266;
  qword_26162A8 = (uint64_t)"V1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616298 = 32;
  qword_2616290 = (uint64_t)"V1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_67F4 + 4) = 4267;
  qword_2616278 = (uint64_t)"V1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616280 = 40;
  *(int *)((char *)&dword_26101B0 + &loc_6810) = 4268;
  qword_2616268 = 36;
  *(int *)((char *)&dword_26101B0 + &loc_6828) = 4269;
  qword_2616260 = (uint64_t)"V1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616250 = 37;
  qword_2616248 = (uint64_t)"V1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6840) = 4270;
  qword_2616230 = (uint64_t)"V1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616238 = 33;
  *(int *)((char *)&dword_26101B0 + &loc_6858) = 4271;
  qword_2616220 = 12;
  *(int *)((char *)&dword_26101B0 + &loc_6870) = 4272;
  qword_2616218 = (uint64_t)"V0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616208 = 13;
  qword_2616200 = (uint64_t)"V0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6888) = 4273;
  qword_26161E8 = (uint64_t)"UTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26161F0 = 22;
  *(int *)((char *)&dword_26101B0 + &loc_68A0) = 4274;
  qword_26161D8 = 26;
  *(int *)((char *)&dword_26101B0 + &loc_68B8) = 4275;
  qword_26161D0 = (uint64_t)"UTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26161C0 = 16;
  qword_26161B8 = (uint64_t)"UA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_68D0) = 4276;
  qword_26161A0 = (uint64_t)"UA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26161A8 = 19;
  *(int *)((char *)&dword_26101B0 + &loc_68E8) = 4277;
  qword_2616190 = 21;
  *(int *)((char *)&dword_26101B0 + &loc_6900) = 4278;
  qword_2616188 = (uint64_t)"UA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616178 = 12;
  qword_2616170 = (uint64_t)"UA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6918) = 4279;
  qword_2616158 = (uint64_t)"UA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616160 = 22;
  *(int *)((char *)&dword_26101B0 + &loc_6930) = 4280;
  qword_2616148 = 13;
  *(int *)((char *)&dword_26101B0 + &loc_6948) = 4281;
  qword_2616140 = (uint64_t)"UA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6960) = 4282;
  qword_2616128 = (uint64_t)"UA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616130 = 18;
  qword_2616110 = (uint64_t)"TYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616118 = 12;
  *(int *)((char *)&dword_26101B0 + &loc_6978) = 4283;
  qword_26160F8 = (uint64_t)"TYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616100 = 13;
  *(int *)((char *)&dword_26101B0 + &loc_6990) = 4284;
  qword_26160E8 = 16;
  *(int *)((char *)&dword_26101B0 + &loc_69A8) = 4285;
  qword_26160E0 = (uint64_t)"TYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26160D0 = 22;
  qword_26160C8 = (uint64_t)"TYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_69C0) = 4286;
  qword_26160B0 = (uint64_t)"TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26160B8 = 15;
  *(int *)((char *)&dword_26101B0 + &loc_69D8) = 4287;
  qword_26160A0 = 8;
  *(int *)((char *)&dword_26101B0 + &loc_69F0) = 4288;
  qword_2616098 = (uint64_t)"TYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6A08) = 4289;
  qword_2616080 = (uint64_t)"TILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616088 = 25;
  qword_2616068 = (uint64_t)"TERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616070 = 25;
  *(int *)((char *)&dword_26101B0 + &loc_6A20) = 4290;
  qword_2616058 = 8;
  *(int *)((char *)&dword_26101B0 + &loc_6A38) = 4291;
  qword_2616050 = (uint64_t)"TAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6A50) = 4292;
  qword_2616038 = (uint64_t)"STREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616040 = 22;
  qword_2616020 = (uint64_t)"STREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616028 = 18;
  *(int *)((char *)&dword_26101B0 + &loc_6A68) = 4293;
  qword_2616010 = 12;
  *(int *)((char *)&dword_26101B0 + &loc_6A80) = 4294;
  qword_2616008 = (uint64_t)"STREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6A98) = 4295;
  qword_2615FF0 = (uint64_t)"STOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615FF8 = 25;
  qword_2615FD8 = (uint64_t)"SPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615FE0 = 22;
  *(int *)((char *)&dword_26101B0 + &loc_6AB0) = 5825;
  qword_2615FC8 = 26;
  *(int *)((char *)&dword_26101B0 + &loc_6AC8) = 5535;
  qword_2615FC0 = (uint64_t)"SPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6AE0) = 5826;
  qword_2615FA8 = (uint64_t)"SPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615FB0 = 13;
  qword_2615F90 = (uint64_t)"SPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615F98 = 42;
  *(int *)((char *)&dword_26101B0 + &loc_6AF8) = 5640;
  qword_2615F80 = 51;
  *(int *)((char *)&dword_26101B0 + &loc_6B0C + 4) = 5641;
  qword_2615F78 = (uint64_t)"SPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6B28) = 5642;
  qword_2615F60 = (uint64_t)"SPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615F68 = 52;
  qword_2615F48 = (uint64_t)"SPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615F50 = 37;
  *(int *)((char *)&dword_26101B0 + &loc_6B40) = 5643;
  qword_2615F38 = 36;
  *(int *)((char *)&dword_26101B0 + &loc_6B54 + 4) = 5644;
  qword_2615F30 = (uint64_t)"SPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6B70) = 5765;
  qword_2615F18 = (uint64_t)"SPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615F20 = 35;
  qword_2615F00 = (uint64_t)"SPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615F08 = 39;
  *(int *)((char *)&dword_26101B0 + &loc_6B88) = 5766;
  qword_2615EE8 = (uint64_t)"SPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615EF0 = 21;
  qword_2615ED0 = (uint64_t)"SPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615ED8 = 21;
  *(int *)((char *)&dword_26101B0 + &loc_6BA0) = 5767;
  qword_2615EC0 = 25;
  *(int *)((char *)&dword_26101B0 + &loc_6BB8) = 5768;
  qword_2615EB8 = (uint64_t)"SPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6BD0) = 5769;
  qword_2615EA0 = (uint64_t)"SMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615EA8 = 19;
  *(int *)((char *)&dword_26101B0 + &loc_6BE8) = 5770;
  qword_2615E90 = 17;
  *(int *)((char *)&dword_26101B0 + &loc_6C00) = 5771;
  qword_2615E88 = (uint64_t)"SMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615E78 = 15;
  qword_2615E70 = (uint64_t)"SMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  *(int *)((char *)&dword_26101B0 + &loc_6C18) = 5772;
  qword_2615E58 = (uint64_t)"SMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615E60 = 19;
  qword_2614EB0 = (uint64_t)&aAacGeoTypeAdmi[18238];
  qword_2615E40 = (uint64_t)"SESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615E48 = 20;
  qword_2615E28 = (uint64_t)"SESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615E30 = 16;
  qword_2614EC8 = (uint64_t)&aAacGeoTypeAdmi[18270];
  qword_2615E10 = (uint64_t)"SESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615E18 = 17;
  qword_2614EE0 = (uint64_t)&aAacGeoTypeAdmi[18302];
  qword_2615DF8 = (uint64_t)"SEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615E00 = 15;
  qword_2615DE0 = (uint64_t)"SEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615DE8 = 22;
  qword_2614EF8 = (uint64_t)&aAacGeoTypeAdmi[18334];
  qword_2614F10 = (uint64_t)&aAacGeoTypeAdmi[18347];
  qword_2615DD0 = 21;
  qword_2614F28 = (uint64_t)&aAacGeoTypeAdmi[18363];
  qword_2615DC8 = (uint64_t)"SCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2614F40 = (uint64_t)&aAacGeoTypeAdmi[18380];
  qword_2615DB0 = (uint64_t)"SCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615DB8 = 22;
  qword_2615D98 = (uint64_t)"SCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615DA0 = 22;
  qword_2614F58 = (uint64_t)&aAacGeoTypeAdmi[18392];
  qword_2615D80 = (uint64_t)"SCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615D88 = 18;
  qword_2614F70 = (uint64_t)&aAacGeoTypeAdmi[18404];
  qword_2615D68 = (uint64_t)"SCORE_DIFFSCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615D70 = 10;
  qword_2615D50 = (uint64_t)"SCORE_CROSS_RANKSCORE_DIFFSCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615D58 = 16;
  qword_2614F88 = (uint64_t)&aAacGeoTypeAdmi[18413];
  qword_2614FA0 = (uint64_t)&aAacGeoTypeAdmi[18424];
  qword_2615D40 = 12;
  qword_2614FB8 = (uint64_t)&aAacGeoTypeAdmi[18437];
  qword_2615D38 = (uint64_t)"SAME_AS_PREVSCORE_CROSS_RANKSCORE_DIFFSCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2614FD0 = (uint64_t)&aAacGeoTypeAdmi[18453];
  qword_2615D20 = (uint64_t)"RTV0_RESULTTYPE_LOCALSCORESAME_AS_PREVSCORE_CROSS_RANKSCORE_DIFFSCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615D28 = 26;
  qword_2615D08 = (uint64_t)"RTV0_RESULTTYPE_GLOBALSCORERTV0_RESULTTYPE_LOCALSCORESAME_AS_PREVSCORE_CROSS_RANKSCORE_DIFFSCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615D10 = 27;
  qword_2614FE8 = (uint64_t)&aAacGeoTypeAdmi[18470];
  qword_2615CF0 = (uint64_t)"RTV0_AGG_SCORERTV0_RESULTTYPE_GLOBALSCORERTV0_RESULTTYPE_LOCALSCORESAME_AS_PREVSCORE_CROSS_RANKSCORE_DIFFSCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615CF8 = 14;
  qword_2615000 = (uint64_t)&aAacGeoTypeAdmi[18483];
  qword_2615CD8 = (uint64_t)"RESULT_TYPE_QSRTV0_AGG_SCORERTV0_RESULTTYPE_GLOBALSCORERTV0_RESULTTYPE_LOCALSCORESAME_AS_PREVSCORE_CROSS_RANKSCORE_DIFFSCORE_PER_CUM_IMPRSCORE_PER_CUM_IMPR_POSSCTR_SMOOTH_GLOBAL_SOCSCTR_SMOOTH_LOCAL_SOCSEARCH_SEQUENCE_NUMBERSEQUENCE_NUMBERSESSION_GUID_HIGHSESSION_GUID_LOWSESSION_RANKER_SCORESMOOTH_MAINLINE_CTRSMOOTH_TYPE_CTRSMOOTH_TYPE_CTR_BSMOOTH_TYPE_CTR_RAWSPELLER_COMPLETION_LENGTHSPELLER_EDIT_DISTANCESPELLER_IS_COMPLETIONSPELLER_RESULT_STATUS_NOT_IN_WHITE_LISTSPELLER_RESULT_STATUS_NOT_PROCESSEDSPELLER_RESULT_STATUS_NO_SUGGESTIONSSPELLER_RESULT_STATUS_SPELL_CORRECTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_ATTEMPTEDSPELLER_RESULT_STATUS_SPELL_CORRECTION_NOT_REQUIREDSPELLER_RESULT_STATUS_SPELL_NO_SUGGESTIONSSPELLER_SCORESPELL_SUGGESTION_RAW_SCORESPELL_SUGGESTION_SCORESTOP_WORD_PROCESSED_QUERYSTREET_MATCHSTREET_POI_DENSITYSTREET_TYPE_MATCH_TYPETAP_DIFFTERMINAL_INTENT_ATTRIBUTETILE_FREQUENCY_ZOOM_LEVELTYPE_IS_TYPE_IS_AddressTYPE_IS_BrowseCategoryTYPE_IS_BusinessTYPE_IS_QueryTYPING_SPEEDUA_ABANDONMENT_PCTUA_GLOBAL_CTRUA_GLOBAL_CTR_VARIANCEUA_LOCAL_CTRUA_LOCAL_CTR_VARIANCEUA_SEARCH_CLICK_PCTUA_TAP_BELOW_PCTUTILITY_CAT_EFFECTIVE_DISTUTILITY_CAT_RANK_BOOSTV0_GLOBAL_SOCV0_LOCAL_SOCV1JPTRANSIT5_TAPPED_PREFIX_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT5_TAPPED_PREFIX_ID_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_COUNTSV1JPTRANSIT_TAPPED_PREFIX_GEO_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_COUNTSV1JPTRANSIT_TAPPED_PREFIX_ID_GEO_COUNTSV1_SMOOTH_GLOBAL_SOCV1_SMOOTH_GLOBAL_SOC_CDV1_SMOOTH_LOCAL_SOCV1_TAPPED_PREFIX_COUNTSV1_TAPPED_PREFIX_GEO_COUNTSV1_TAPPED_PREFIX_ID_COUNTSV1_TAPPED_PREFIX_ID_GEO_COUNTSV2_GLOBAL_CLICK_COUNTSV2_GLOBAL_IMPRESSION_COUNTSV2_LOCAL_CLICK_COUNTSV2_LOCAL_IMPRESSION_COUNTSV3_GLOBAL_CLICK_COUNTSV3_GLOBAL_ECV3_LOCAL_CLICK_COUNTSV3_LOCAL_ECVENUE_NAMEVIEWPORT_ELAPSED_TIMEVIEWPORT_USER_DISTANCEVIEWPORT_USER_LOG_DISTANCEVP_LAT_NVP_LAT_SVP_LNG_EVP_LNG_Waddr_search_stringavailable_for_downloadbrand_muid_keybrowse_categorybrowse_country_keybrowse_country_key_ausbrowse_country_key_autbrowse_country_key_canbrowse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615CE0 = 14;
  qword_2615CC0 = (uint64_t)&aAacGeoTypeAdmi[21656];
  qword_2615CC8 = 14;
  qword_2615018 = (uint64_t)&aAacGeoTypeAdmi[18493];
  qword_2615CA8 = (uint64_t)&aAacGeoTypeAdmi[21641];
  qword_2615CB0 = 15;
  qword_2615030 = (uint64_t)&aAacGeoTypeAdmi[18504];
  qword_2615048 = (uint64_t)&aAacGeoTypeAdmi[18516];
  qword_2615C98 = 15;
  qword_2615060 = (uint64_t)&aAacGeoTypeAdmi[18534];
  qword_2615C90 = (uint64_t)&aAacGeoTypeAdmi[21626];
  qword_2615078 = (uint64_t)&aAacGeoTypeAdmi[18554];
  qword_2615C78 = (uint64_t)&aAacGeoTypeAdmi[21611];
  qword_2615C80 = 15;
  qword_2615C60 = (uint64_t)&aAacGeoTypeAdmi[21588];
  qword_2615C68 = 23;
  qword_2615090 = (uint64_t)&aAacGeoTypeAdmi[18579];
  qword_2615C48 = (uint64_t)&aAacGeoTypeAdmi[21566];
  qword_2615C50 = 22;
  qword_26150A8 = (uint64_t)&aAacGeoTypeAdmi[18595];
  qword_2615C30 = (uint64_t)&aAacGeoTypeAdmi[21548];
  qword_2615C38 = 18;
  qword_2615C18 = (uint64_t)&aAacGeoTypeAdmi[21539];
  qword_2615C20 = 9;
  qword_26150C0 = (uint64_t)&aAacGeoTypeAdmi[18617];
  qword_26150D8 = (uint64_t)&aAacGeoTypeAdmi[18643];
  qword_2615C08 = 25;
  qword_26150F0 = (uint64_t)&aAacGeoTypeAdmi[18671];
  qword_2615C00 = (uint64_t)&aAacGeoTypeAdmi[21514];
  qword_2615108 = (uint64_t)&aAacGeoTypeAdmi[18694];
  qword_2615BE8 = (uint64_t)&aAacGeoTypeAdmi[21495];
  qword_2615BF0 = 19;
  qword_2615BD0 = (uint64_t)&aAacGeoTypeAdmi[21476];
  qword_2615BD8 = 19;
  qword_2615120 = (uint64_t)&aAacGeoTypeAdmi[18719];
  qword_2615BB8 = (uint64_t)&aAacGeoTypeAdmi[21460];
  qword_2615BC0 = 16;
  qword_2615138 = (uint64_t)&aAacGeoTypeAdmi[18734];
  qword_2615BA0 = (uint64_t)&aAacGeoTypeAdmi[21433];
  qword_2615BA8 = 27;
  qword_2615B88 = (uint64_t)&aAacGeoTypeAdmi[21405];
  qword_2615B90 = 28;
  qword_2615150 = (uint64_t)&aAacGeoTypeAdmi[18753];
  qword_2615168 = (uint64_t)&aAacGeoTypeAdmi[18774];
  qword_2615B78 = 15;
  qword_2615B58 = (uint64_t)&aAacGeoTypeAdmi[21377];
  qword_2615B70 = (uint64_t)&aAacGeoTypeAdmi[21390];
  qword_2615B60 = 13;
  qword_2615180 = (uint64_t)&aAacGeoTypeAdmi[18798];
  qword_2614F78 = 9;
  qword_2615B48 = 9;
  qword_2615198 = (uint64_t)&aAacGeoTypeAdmi[18827];
  qword_2615B40 = (uint64_t)&aAacGeoTypeAdmi[21368];
  qword_26151B0 = (uint64_t)&aAacGeoTypeAdmi[18845];
  qword_2615B28 = (uint64_t)&aAacGeoTypeAdmi[21354];
  qword_2615B30 = 14;
  qword_26151C8 = (uint64_t)&aAacGeoTypeAdmi[18864];
  qword_2615B10 = (uint64_t)&aAacGeoTypeAdmi[21338];
  qword_2615B18 = 16;
  qword_2615AF8 = (uint64_t)&aAacGeoTypeAdmi[21324];
  qword_2615B00 = 14;
  qword_26151E0 = (uint64_t)&aAacGeoTypeAdmi[18891];
  qword_2615AE0 = (uint64_t)&aAacGeoTypeAdmi[21306];
  qword_2615AE8 = 18;
  qword_26151F8 = (uint64_t)&aAacGeoTypeAdmi[18922];
  qword_2615AC8 = (uint64_t)&aAacGeoTypeAdmi[21289];
  qword_2615AD0 = 17;
  qword_2615AB0 = (uint64_t)&aAacGeoTypeAdmi[21273];
  qword_2615AB8 = 16;
  qword_2615210 = (uint64_t)&aAacGeoTypeAdmi[18953];
  qword_2615228 = (uint64_t)&aAacGeoTypeAdmi[18981];
  qword_2615AA0 = 13;
  qword_2615240 = (uint64_t)&aAacGeoTypeAdmi[19009];
  qword_2615A98 = (uint64_t)&aAacGeoTypeAdmi[21260];
  qword_2615258 = (uint64_t)&aAacGeoTypeAdmi[19035];
  qword_2615A80 = (uint64_t)&aAacGeoTypeAdmi[21244];
  qword_2615A88 = 16;
  qword_2615A68 = (uint64_t)&aAacGeoTypeAdmi[21232];
  qword_2615A70 = 12;
  qword_2615270 = (uint64_t)&aAacGeoTypeAdmi[19061];
  qword_2615A50 = (uint64_t)&aAacGeoTypeAdmi[21220];
  qword_2615A58 = 12;
  qword_2615288 = (uint64_t)&aAacGeoTypeAdmi[19087];
  qword_2615A38 = (uint64_t)&aAacGeoTypeAdmi[21189];
  qword_2615A40 = 31;
  qword_2615A20 = (uint64_t)&aAacGeoTypeAdmi[21157];
  qword_2615A28 = 32;
  qword_26152A0 = (uint64_t)&aAacGeoTypeAdmi[19113];
  qword_2615A08 = (uint64_t)&aAacGeoTypeAdmi[21130];
  qword_2615A10 = 27;
  qword_26159F0 = (uint64_t)&aAacGeoTypeAdmi[21103];
  qword_26151D0 = 27;
  qword_26159F8 = 27;
  qword_26152B8 = (uint64_t)&aAacGeoTypeAdmi[19134];
  qword_26152D0 = (uint64_t)&aAacGeoTypeAdmi[19153];
  qword_26159E0 = 34;
  qword_26152E8 = (uint64_t)&aAacGeoTypeAdmi[19174];
  qword_26159D8 = (uint64_t)&aAacGeoTypeAdmi[21069];
  qword_2615300 = (uint64_t)&aAacGeoTypeAdmi[19203];
  qword_26159C0 = (uint64_t)&aAacGeoTypeAdmi[21041];
  qword_26159C8 = 28;
  qword_26159A8 = (uint64_t)&aAacGeoTypeAdmi[21006];
  qword_26159B0 = 35;
  qword_2615318 = (uint64_t)&aAacGeoTypeAdmi[19226];
  qword_2615990 = (uint64_t)&aAacGeoTypeAdmi[20989];
  qword_2615998 = 17;
  qword_2615330 = (uint64_t)&aAacGeoTypeAdmi[19250];
  qword_2615978 = (uint64_t)&aAacGeoTypeAdmi[20970];
  qword_2615980 = 19;
  qword_2615960 = (uint64_t)&aAacGeoTypeAdmi[20933];
  qword_2615968 = 37;
  qword_2615348 = (uint64_t)&aAacGeoTypeAdmi[19275];
  qword_2615948 = (uint64_t)&aAacGeoTypeAdmi[20896];
  qword_2615950 = 37;
  qword_2615360 = (uint64_t)&aAacGeoTypeAdmi[19304];
  qword_2615378 = (uint64_t)&aAacGeoTypeAdmi[19344];
  qword_2615938 = 37;
  qword_2615390 = (uint64_t)&aAacGeoTypeAdmi[19370];
  qword_2615930 = (uint64_t)&aAacGeoTypeAdmi[20859];
  qword_26153A8 = (uint64_t)&aAacGeoTypeAdmi[19395];
  qword_2615918 = (uint64_t)&aAacGeoTypeAdmi[20822];
  qword_2615920 = 37;
  qword_2615900 = (uint64_t)&aAacGeoTypeAdmi[20782];
  qword_2615908 = 40;
  qword_26153C0 = (uint64_t)&aAacGeoTypeAdmi[19412];
  qword_26158E8 = (uint64_t)&aAacGeoTypeAdmi[20742];
  qword_26158F0 = 40;
  qword_26153D8 = (uint64_t)&aAacGeoTypeAdmi[19426];
  qword_26158D0 = (uint64_t)&aAacGeoTypeAdmi[20703];
  qword_26158D8 = 39;
  qword_26158B8 = (uint64_t)&aAacGeoTypeAdmi[20659];
  qword_26158C0 = 44;
  qword_26153F0 = (uint64_t)&aAacGeoTypeAdmi[19454];
  qword_2615408 = (uint64_t)&aAacGeoTypeAdmi[19476];
  qword_26158A8 = 44;
  qword_2615420 = (uint64_t)&aAacGeoTypeAdmi[19496];
  qword_26158A0 = (uint64_t)&aAacGeoTypeAdmi[20615];
  qword_2615438 = (uint64_t)&aAacGeoTypeAdmi[19516];
  qword_2615888 = (uint64_t)&aAacGeoTypeAdmi[20586];
  qword_2615890 = 29;
  qword_2615870 = (uint64_t)&aAacGeoTypeAdmi[20538];
  qword_2615878 = 48;
  qword_2615450 = (uint64_t)&aAacGeoTypeAdmi[19542];
  qword_2615858 = (uint64_t)&aAacGeoTypeAdmi[20501];
  qword_2615860 = 37;
  qword_2615468 = (uint64_t)&aAacGeoTypeAdmi[19567];
  qword_2615840 = (uint64_t)&aAacGeoTypeAdmi[20464];
  qword_2615848 = 37;
  qword_2615480 = (uint64_t)&aAacGeoTypeAdmi[19591];
  qword_2615828 = (uint64_t)&aAacGeoTypeAdmi[20424];
  qword_2615830 = 40;
  qword_2615810 = (uint64_t)&aAacGeoTypeAdmi[20384];
  qword_2615818 = 40;
  qword_2615498 = (uint64_t)&aAacGeoTypeAdmi[19610];
  qword_26157F8 = (uint64_t)&aAacGeoTypeAdmi[20344];
  qword_2615800 = 40;
  qword_26154B0 = (uint64_t)&aAacGeoTypeAdmi[19626];
  qword_26157E0 = (uint64_t)&aAacGeoTypeAdmi[20304];
  qword_2615368 = 40;
  qword_26157E8 = 40;
  qword_26157C8 = (uint64_t)&aAacGeoTypeAdmi[20265];
  qword_26157D0 = 39;
  qword_26154C8 = (uint64_t)&aAacGeoTypeAdmi[19641];
  qword_26154E0 = (uint64_t)&aAacGeoTypeAdmi[19662];
  qword_26157B8 = 39;
  qword_2615750 = (uint64_t)&aAacGeoTypeAdmi[20142];
  qword_26157B0 = (uint64_t)&aAacGeoTypeAdmi[20226];
  qword_26157A0 = 15;
  qword_2615798 = (uint64_t)&aAacGeoTypeAdmi[20211];
  qword_2615788 = 18;
  qword_2615768 = (uint64_t)&aAacGeoTypeAdmi[20174];
  qword_2615780 = (uint64_t)&aAacGeoTypeAdmi[20193];
  qword_2614EA0 = 32;
  qword_2615770 = 19;
  qword_2614EB8 = 32;
  qword_2614ED0 = 32;
  qword_2614EE8 = 32;
  qword_2615758 = 32;
  qword_26154F8 = (uint64_t)&aAacGeoTypeAdmi[19676];
  qword_2615738 = (uint64_t)&aAacGeoTypeAdmi[20122];
  qword_2615740 = 20;
  qword_2615510 = (uint64_t)&aAacGeoTypeAdmi[19693];
  qword_2615720 = (uint64_t)&aAacGeoTypeAdmi[20103];
  qword_2615728 = 19;
  qword_2615528 = (uint64_t)&aAacGeoTypeAdmi[19709];
  qword_2615708 = (uint64_t)&aAacGeoTypeAdmi[20088];
  qword_2615710 = 15;
  qword_26156F0 = (uint64_t)&aAacGeoTypeAdmi[20074];
  qword_26156F8 = 14;
  qword_2615540 = (uint64_t)&aAacGeoTypeAdmi[19734];
  qword_2615558 = (uint64_t)&aAacGeoTypeAdmi[19747];
  qword_26156E0 = 18;
  qword_2615570 = (uint64_t)&aAacGeoTypeAdmi[19760];
  qword_26156D8 = (uint64_t)&aAacGeoTypeAdmi[20056];
  qword_2615588 = (uint64_t)&aAacGeoTypeAdmi[19785];
  qword_26156C0 = (uint64_t)&aAacGeoTypeAdmi[20035];
  qword_26156C8 = 21;
  qword_26156A8 = (uint64_t)&aAacGeoTypeAdmi[20014];
  qword_26156B0 = 21;
  qword_26155A0 = (uint64_t)&aAacGeoTypeAdmi[19802];
  qword_2615690 = (uint64_t)&aAacGeoTypeAdmi[19991];
  qword_2615698 = 23;
  qword_26155B8 = (uint64_t)&aAacGeoTypeAdmi[19815];
  qword_2615678 = (uint64_t)&aAacGeoTypeAdmi[19966];
  qword_2615680 = 25;
  qword_2615660 = (uint64_t)&aAacGeoTypeAdmi[19942];
  qword_2615668 = 24;
  qword_26155D0 = (uint64_t)&aAacGeoTypeAdmi[19834];
  qword_26155E8 = (uint64_t)&aAacGeoTypeAdmi[19847];
  qword_2615650 = 21;
  qword_2615618 = (uint64_t)&aAacGeoTypeAdmi[19885];
  qword_2615648 = (uint64_t)&aAacGeoTypeAdmi[19921];
  qword_2615638 = 17;
  qword_2615630 = (uint64_t)&aAacGeoTypeAdmi[19904];
  qword_2615620 = 19;
  qword_2615600 = (uint64_t)&aAacGeoTypeAdmi[19866];
  qword_2614F00 = 13;
  qword_2614FA8 = 13;
  qword_2614FF0 = 13;
  qword_26155F0 = 19;
  qword_2615608 = 19;
  qword_2615548 = 13;
  qword_2615560 = 13;
  qword_26155A8 = 13;
  qword_26155D8 = 13;
  qword_26165D8 = (uint64_t)"browse_country_key_chebrowse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26165F0 = (uint64_t)"browse_country_key_deubrowse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26155C0 = 19;
  qword_2616608 = (uint64_t)"browse_country_key_dnkbrowse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616620 = (uint64_t)"browse_country_key_finbrowse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616638 = (uint64_t)"browse_country_key_frabrowse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616650 = (uint64_t)"browse_country_key_gbrbrowse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616668 = (uint64_t)"browse_country_key_jpnbrowse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616680 = (uint64_t)"browse_country_key_nldbrowse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615590 = 17;
  qword_2616698 = (uint64_t)"browse_country_key_usabrowse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615578 = 25;
  qword_26166B0 = (uint64_t)"browse_localized_category_keybrowse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26166C8 = (uint64_t)"browse_nearby_localizationbrowse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26166E0 = (uint64_t)"browse_sytle_attribute_keybusiness_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26166F8 = (uint64_t)"business_idcat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616710 = (uint64_t)"cat_suggestion_rank_cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616728 = (uint64_t)"cat_suggestion_rank_0cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616740 = (uint64_t)"cat_suggestion_rank_1cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616758 = (uint64_t)"cat_suggestion_rank_2category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615518 = 16;
  qword_2615530 = 25;
  qword_2616770 = (uint64_t)"category_canonical_namechain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26150F8 = 23;
  qword_2615308 = 23;
  qword_26154E8 = 14;
  qword_2615500 = 17;
  qword_2615470 = 24;
  qword_2615488 = 19;
  qword_26154A0 = 16;
  qword_26154B8 = 15;
  qword_26154D0 = 21;
  qword_2616778 = 23;
  qword_2616788 = (uint64_t)"chain_nameclosest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26167A0 = (uint64_t)"closest_bizclosest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26167B8 = (uint64_t)"closest_chain_door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26167D0 = (uint64_t)"door_numberentity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26167E8 = (uint64_t)"entity_type_addressentity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616800 = (uint64_t)"entity_type_airportentity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616818 = (uint64_t)"entity_type_landmarkentity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616830 = (uint64_t)"entity_type_listentity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616848 = (uint64_t)"entity_type_propertyentity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616860 = (uint64_t)"entity_type_queryentity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616878 = (uint64_t)"entity_type_transitflyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616890 = (uint64_t)"flyover_idgeo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26168A8 = (uint64_t)"geo_idgeo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615440 = 26;
  qword_2615458 = 25;
  qword_26168B0 = 6;
  qword_26168C0 = (uint64_t)"geo_id_encryptedis_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26168D8 = (uint64_t)"is_short_circuitedmatched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26168F0 = (uint64_t)"matched_display_name_languagemixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615188 = 29;
  qword_2615410 = 20;
  qword_2615428 = 20;
  qword_26152F0 = 29;
  qword_2615350 = 29;
  qword_26153E0 = 28;
  qword_26153F8 = 22;
  qword_26166B8 = 29;
  qword_26168F8 = 29;
  qword_2616908 = (uint64_t)"mixed_intent_address_triggermixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616920 = (uint64_t)"mixed_intent_geo_idmixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616938 = (uint64_t)"mixed_intent_query_containment_display_stringmixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26153C8 = 14;
  qword_2616940 = 45;
  qword_2616950 = (uint64_t)"mixed_intent_query_highlight_extramixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26153B0 = 17;
  qword_2616958 = 34;
  qword_2616968 = (uint64_t)"mixed_intent_query_primary_entity_display_stringpopulation_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615380 = 26;
  qword_2615398 = 25;
  qword_2616970 = 48;
  qword_2616980 = (uint64_t)"population_less_10K_1K_distancepopulation_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616998 = (uint64_t)"population_less_10K_1K_distance_admin_0population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26169B0 = (uint64_t)"population_less_10K_1K_distance_admin_1population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26169C8 = (uint64_t)"population_less_10K_1K_distance_admin_2population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26169E0 = (uint64_t)"population_less_10K_1K_distance_admin_3population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26169F8 = (uint64_t)"population_less_10K_1K_distance_admin_4population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616A10 = (uint64_t)"population_less_10K_1K_distance_admin_5population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616A28 = (uint64_t)"population_less_10K_1K_distance_admin_6population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616A40 = (uint64_t)"population_less_10K_1K_distance_admin_7population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616A58 = (uint64_t)"population_less_10K_5K_distancepopulation_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615320 = 24;
  qword_2615338 = 25;
  qword_26151E8 = 31;
  qword_2615200 = 31;
  qword_2616988 = 31;
  qword_2616A60 = 31;
  qword_2616A70 = (uint64_t)"population_less_10K_5K_distance_admin_0population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616A88 = (uint64_t)"population_less_10K_5K_distance_admin_1population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616AA0 = (uint64_t)"population_less_10K_5K_distance_admin_2population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616AB8 = (uint64_t)"population_less_10K_5K_distance_admin_3population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26152D8 = 21;
  qword_2616AD0 = (uint64_t)"population_less_10K_5K_distance_admin_4population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616AE8 = (uint64_t)"population_less_10K_5K_distance_admin_5population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616B00 = (uint64_t)"population_less_10K_5K_distance_admin_6population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616B18 = (uint64_t)"population_less_10K_5K_distance_admin_7qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26152A8 = 21;
  qword_26152C0 = 19;
  qword_2615218 = 28;
  qword_2615230 = 28;
  qword_2615248 = 26;
  qword_2615260 = 26;
  qword_2615278 = 26;
  qword_2615290 = 26;
  qword_26169A0 = 39;
  qword_26169B8 = 39;
  qword_26169D0 = 39;
  qword_26169E8 = 39;
  qword_2616A00 = 39;
  qword_2616A18 = 39;
  qword_2616A30 = 39;
  qword_2616A48 = 39;
  qword_2616A78 = 39;
  qword_2616A90 = 39;
  qword_2616AA8 = 39;
  qword_2616AC0 = 39;
  qword_2616AD8 = 39;
  qword_2616AF0 = 39;
  qword_2616B08 = 39;
  qword_2616B20 = 39;
  qword_2616B30 = (uint64_t)"qu_metadataqu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2614F90 = 11;
  qword_2615020 = 11;
  qword_26151B8 = 19;
  qword_2616700 = 11;
  qword_26167A8 = 11;
  qword_26167D8 = 11;
  qword_2616B38 = 11;
  qword_2616B48 = (uint64_t)"qu_metadata_jsonqu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616B60 = (uint64_t)"qu_metadata_weightquery_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615050 = 18;
  qword_2615170 = 24;
  qword_26151A0 = 18;
  qword_26168E0 = 18;
  qword_2616B68 = 18;
  qword_2616B78 = (uint64_t)"query_is_categoryquery_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616B90 = (uint64_t)"query_is_chainquery_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616BA8 = (uint64_t)"query_is_keywordquery_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616BC0 = (uint64_t)"query_string_is_catquery_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615140 = 19;
  qword_2615158 = 21;
  qword_26167F0 = 19;
  qword_2616808 = 19;
  qword_2616880 = 19;
  qword_2616928 = 19;
  qword_2616BC8 = 19;
  qword_2616BD8 = (uint64_t)"query_string_is_chainquery_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615128 = 15;
  qword_2616BF0 = (uint64_t)"query_string_is_global_navquery_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26150C8 = 26;
  qword_2615110 = 25;
  qword_26166D0 = 26;
  qword_26166E8 = 26;
  qword_2616BF8 = 26;
  qword_2616C08 = (uint64_t)"query_string_is_local_navquery_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615080 = 25;
  qword_26150E0 = 28;
  qword_2616C10 = 25;
  qword_2616C20 = (uint64_t)"query_string_is_mixed_intentquery_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616910 = 28;
  qword_2616C28 = 28;
  qword_2616C38 = (uint64_t)"query_string_is_propertyquery_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615098 = 16;
  qword_26150B0 = 22;
  qword_2616C40 = 24;
  qword_2616C50 = (uint64_t)"query_type_allraw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_26167C0 = 14;
  qword_2616B98 = 14;
  qword_2616C58 = 14;
  qword_2616C68 = (uint64_t)"raw_prefixresult_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615008 = 10;
  qword_2615068 = 20;
  qword_2616790 = 10;
  qword_2616898 = 10;
  qword_2616C70 = 10;
  qword_2616C80 = (uint64_t)"result_type_allrewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616C98 = (uint64_t)"rewritten_query_indexserver_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616CB0 = (uint64_t)"server_result_normalized_scoreserver_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2615038 = 12;
  qword_2616CB8 = 30;
  qword_2616CC8 = (uint64_t)"server_type_jvmsort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616C88 = 15;
  qword_2616CD0 = 15;
  qword_2616CE0 = (uint64_t)"sort_priority_mappingstreet_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2614FC0 = 16;
  qword_2614FD8 = 17;
  qword_2616730 = 21;
  qword_2616748 = 21;
  qword_2616760 = 21;
  qword_2616BE0 = 21;
  qword_2616CA0 = 21;
  qword_2616CE8 = 21;
  qword_2616CF8 = (uint64_t)"street_closeness_trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2614F30 = 17;
  qword_2616868 = 17;
  qword_2616B80 = 17;
  qword_2616D00 = 17;
  qword_2616D10 = (uint64_t)"trigger_nametypevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2614F48 = 12;
  qword_2614F60 = 12;
  qword_2616D18 = 12;
  qword_2616D28 = (uint64_t)"typevenue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616D30 = 4;
  qword_2616D40 = (uint64_t)"venue_idyelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616D48 = 8;
  qword_2616D58 = (uint64_t)"yelp_LOG_NUM_RATINGSyelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616D70 = (uint64_t)"yelp_LOG_NUM_REVIEWSyelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616718 = 20;
  qword_2616820 = 20;
  qword_2616850 = 20;
  qword_2616D60 = 20;
  qword_2616D78 = 20;
  qword_2616D88 = (uint64_t)"yelp_NORMALIZED_RATINGyelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2614F18 = 16;
  qword_26165E0 = 22;
  qword_26165F8 = 22;
  qword_2616610 = 22;
  qword_2616628 = 22;
  qword_2616640 = 22;
  qword_2616658 = 22;
  qword_2616670 = 22;
  qword_2616688 = 22;
  qword_26166A0 = 22;
  qword_2616D90 = 22;
  qword_2616DA0 = (uint64_t)"yelp_NUM_RATINGSyelp_NUM_REVIEWS";
  qword_2616DB8 = (uint64_t)"yelp_NUM_REVIEWS";
  qword_2616838 = 16;
  qword_26168C8 = 16;
  qword_2616B50 = 16;
  qword_2616BB0 = 16;
  qword_2616DA8 = 16;
  qword_2616DC0 = 16;
  qword_26120D8 = (uint64_t)&aAacGeoTypeAdmi[7768];
  return result;
}

void sub_15AF91C()
{
  dword_254FF40 = 100;
  qword_254FF48 = (uint64_t)&off_253E888;
  sub_1882AC4((unint64_t)&off_2530690, 100, 11, 1, 0, (uint64_t)&off_253E888);
  dword_254FF50 = 100;
  qword_254FF58 = 0;
  sub_1882224((unint64_t)&off_254B738, 100, 4, 1, 0);
  dword_254FF60 = 1003;
  qword_254FF68 = (uint64_t)&off_253E8B0;
  sub_1882AC4((unint64_t)&off_25486C0, 1003, 11, 1, 0, (uint64_t)&off_253E8B0);
  dword_254FF70 = 1000;
  qword_254FF78 = (uint64_t)&off_2531210;
  sub_1882AC4((unint64_t)&off_254C5C8, 1000, 11, 0, 0, (uint64_t)&off_2531210);
  dword_254FF80 = 1001;
  qword_254FF88 = (uint64_t)&off_253E8D0;
  sub_1882AC4((unint64_t)&off_254C5C8, 1001, 11, 0, 0, (uint64_t)&off_253E8D0);
  dword_254FF90 = 1002;
  qword_254FF98 = (uint64_t)&off_253F2E8;
  sub_1882AC4((unint64_t)&off_254C5C8, 1002, 11, 0, 0, (uint64_t)&off_253F2E8);
  dword_254FFA0 = 1000;
  qword_254FFA8 = (uint64_t)&off_2531238;
  sub_1882AC4((unint64_t)&off_254C818, 1000, 11, 0, 0, (uint64_t)&off_2531238);
  dword_254FFB0 = 1001;
  qword_254FFB8 = (uint64_t)&off_253A320;
  sub_1882AC4((unint64_t)&off_254C818, 1001, 11, 0, 0, (uint64_t)&off_253A320);
  dword_254FFC0 = 1002;
  qword_254FFC8 = (uint64_t)&off_253E958;
  sub_1882AC4((unint64_t)&off_254C818, 1002, 11, 1, 0, (uint64_t)&off_253E958);
  dword_254FFD0 = 1003;
  qword_254FFD8 = (uint64_t)&off_253E9D8;
  sub_1882AC4((unint64_t)&off_254C818, 1003, 11, 0, 0, (uint64_t)&off_253E9D8);
  dword_254FFE0 = 1004;
  qword_254FFE8 = (uint64_t)&off_253E980;
  sub_1882AC4((unint64_t)&off_254C818, 1004, 11, 1, 0, (uint64_t)&off_253E980);
  dword_254FFF0 = 1005;
  qword_254FFF8 = (uint64_t)&off_252D978;
  sub_1882AC4((unint64_t)&off_254C818, 1005, 11, 0, 0, (uint64_t)&off_252D978);
  dword_2550000 = 100;
  qword_2550008 = (uint64_t)&unk_2156510;
  sub_1882224((unint64_t)&off_2549900, 100, 9, 1, 0);
  dword_2550010 = 100;
  qword_2550018 = (uint64_t)&off_253EA18;
  sub_1882AC4((unint64_t)&off_2549AE8, 100, 11, 0, 0, (uint64_t)&off_253EA18);
  dword_2550020 = 100;
  qword_2550028 = (uint64_t)&off_253EA18;
  sub_1882AC4((unint64_t)&off_254AAC8, 100, 11, 0, 0, (uint64_t)&off_253EA18);
  dword_2550030 = 100;
  qword_2550038 = 0;
  sub_1882224((unint64_t)&off_25498C0, 100, 1, 0, 0);
  dword_2550040 = 101;
  qword_2550048 = 0;
  sub_1882224((unint64_t)&off_25498C0, 101, 1, 0, 0);
  dword_2550050 = 102;
  qword_2550058 = 0;
  sub_1882224((unint64_t)&off_25498C0, 102, 1, 0, 0);
  dword_2550060 = 103;
  qword_2550068 = 0;
  sub_1882224((unint64_t)&off_25498C0, 103, 1, 0, 0);
  qword_2550070 = 104;
  sub_1882224((unint64_t)&off_25498C0, 104, 5, 0, 0);
  dword_2550078 = 105;
  qword_2550080 = (uint64_t)&unk_2156528;
  sub_1882224((unint64_t)&off_25498C0, 105, 9, 0, 0);
  qword_2550088 = 106;
  sub_1882224((unint64_t)&off_25498C0, 106, 5, 0, 0);
  dword_2550090 = 107;
  qword_2550098 = (uint64_t)&off_253F208;
  sub_1882AC4((unint64_t)&off_25498C0, 107, 11, 0, 0, (uint64_t)&off_253F208);
  dword_25500A0 = 108;
  qword_25500A8 = 0;
  sub_1882224((unint64_t)&off_25498C0, 108, 1, 0, 0);
  dword_25500B0 = 109;
  qword_25500B8 = (uint64_t)&unk_2156540;
  sub_1882224((unint64_t)&off_25498C0, 109, 9, 0, 0);
  dword_25500C0 = 1050;
  qword_25500C8 = (uint64_t)&unk_2156558;
  sub_1882224((unint64_t)&off_254D2B0, 1050, 9, 0, 0);
  qword_25500D0 = 101;
  sub_18829C0((unint64_t)&off_2549AE8, 101, 14, 0, 0, (uint64_t)sub_15933A4);
  dword_25500D8 = 102;
  qword_25500E0 = (uint64_t)&off_253EAF0;
  sub_1882AC4((unint64_t)&off_2549AE8, 102, 11, 0, 0, (uint64_t)&off_253EAF0);
  dword_25500E8 = 103;
  qword_25500F0 = (uint64_t)&off_253EA48;
  sub_1882AC4((unint64_t)&off_2549AE8, 103, 11, 0, 0, (uint64_t)&off_253EA48);
  dword_25500F8 = 1004;
  qword_2550100 = (uint64_t)&off_253EBC8;

  sub_1882AC4((unint64_t)&off_25486C0, 1004, 11, 0, 0, (uint64_t)&off_253EBC8);
}

uint64_t sub_15AFF3C()
{
  qword_260FBD0 = (uint64_t)"SetTimeSeriesTopN";
  *(void *)algn_260FBD8 = 3;
  dword_260FBE0 = 2;
  qword_260FBE8 = (uint64_t)"TimeSeriesTopN";
  unk_260FBF0 = 10;
  dword_260FBF8 = 1;
  qword_260FC00 = (uint64_t)"TopN";
  unk_260FC08 = 4;
  dword_260FC10 = 0;
  qword_260FC18 = (uint64_t)"DELETEINSERTREPLACE";
  unk_260FC20 = 6;
  dword_260FC28 = 2;
  qword_260FC30 = (uint64_t)"INSERTREPLACE";
  unk_260FC38 = 6;
  dword_260FC40 = 1;
  qword_260FC48 = (uint64_t)"REPLACE";
  unk_260FC50 = 7;
  dword_260FC58 = 0;
  qword_260FC60 = (uint64_t)"FEATURE_TYPE_BUSINESSFEATURE_TYPE_INTERPRETATIONFEATURE_TYPE_LOCALFEATURE_TYPE_QUERYFEATURE_T"
                           "YPE_QUERY_BUSINESSFEATURE_TYPE_TEMPORALFEATURE_TYPE_UNKNOWN";
  *(void *)algn_260FC68 = 21;
  dword_260FC70 = 1;
  qword_260FC78 = (uint64_t)"FEATURE_TYPE_INTERPRETATIONFEATURE_TYPE_LOCALFEATURE_TYPE_QUERYFEATURE_TYPE_QUERY_BUSINESSFEATURE_TYPE_TEMPORALFEATURE_TYPE_UNKNOWN";
  unk_260FC80 = 27;
  dword_260FC88 = 5;
  qword_260FC90 = (uint64_t)"FEATURE_TYPE_LOCALFEATURE_TYPE_QUERYFEATURE_TYPE_QUERY_BUSINESSFEATURE_TYPE_TEMPORALFEATURE_TYPE_UNKNOWN";
  unk_260FC98 = 18;
  dword_260FCA0 = 2;
  qword_260FCA8 = (uint64_t)"FEATURE_TYPE_QUERYFEATURE_TYPE_QUERY_BUSINESSFEATURE_TYPE_TEMPORALFEATURE_TYPE_UNKNOWN";
  unk_260FCB0 = 18;
  dword_260FCB8 = 4;
  qword_260FCC0 = (uint64_t)"FEATURE_TYPE_QUERY_BUSINESSFEATURE_TYPE_TEMPORALFEATURE_TYPE_UNKNOWN";
  unk_260FCC8 = 27;
  dword_260FCD0 = 6;
  qword_260FCD8 = (uint64_t)"FEATURE_TYPE_TEMPORALFEATURE_TYPE_UNKNOWN";
  unk_260FCE0 = 21;
  dword_260FCE8 = 3;
  qword_260FCF0 = (uint64_t)"FEATURE_TYPE_UNKNOWN";
  unk_260FCF8 = 20;
  dword_260FD00 = 0;
  qword_260FD08 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_AC_TAP_ADDRESSSEARCH_ENTRY_POINT_TYPE_AC_TAP_BUSINESSSEARCH_ENTRY_POI"
                           "NT_TYPE_AC_TAP_GUIDESEARCH_ENTRY_POINT_TYPE_AC_TAP_PUBLISHERSEARCH_ENTRY_POINT_TYPE_AC_TAP_QU"
                           "ERYSEARCH_ENTRY_POINT_TYPE_CATEGORY_SEARCHSEARCH_ENTRY_POINT_TYPE_SEARCHSEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FD10 = 38;
  dword_260FD18 = 4;
  qword_260FD20 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_AC_TAP_BUSINESSSEARCH_ENTRY_POINT_TYPE_AC_TAP_GUIDESEARCH_ENTRY_POINT_TYPE_AC_TAP_PUBLISHERSEARCH_ENTRY_POINT_TYPE_AC_TAP_QUERYSEARCH_ENTRY_POINT_TYPE_CATEGORY_SEARCHSEARCH_ENTRY_POINT_TYPE_SEARCHSEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FD28 = 39;
  dword_260FD30 = 3;
  qword_260FD38 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_AC_TAP_GUIDESEARCH_ENTRY_POINT_TYPE_AC_TAP_PUBLISHERSEARCH_ENTRY_POINT_TYPE_AC_TAP_QUERYSEARCH_ENTRY_POINT_TYPE_CATEGORY_SEARCHSEARCH_ENTRY_POINT_TYPE_SEARCHSEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FD40 = 36;
  dword_260FD48 = 6;
  qword_260FD50 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_AC_TAP_PUBLISHERSEARCH_ENTRY_POINT_TYPE_AC_TAP_QUERYSEARCH_ENTRY_POINT_TYPE_CATEGORY_SEARCHSEARCH_ENTRY_POINT_TYPE_SEARCHSEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FD58 = 40;
  dword_260FD60 = 7;
  qword_260FD68 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_AC_TAP_QUERYSEARCH_ENTRY_POINT_TYPE_CATEGORY_SEARCHSEARCH_ENTRY_POINT_TYPE_SEARCHSEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FD70 = 36;
  dword_260FD78 = 5;
  qword_260FD80 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_CATEGORY_SEARCHSEARCH_ENTRY_POINT_TYPE_SEARCHSEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FD88 = 39;
  dword_260FD90 = 2;
  qword_260FD98 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_SEARCHSEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FDA0 = 30;
  dword_260FDA8 = 1;
  qword_260FDB0 = (uint64_t)"SEARCH_ENTRY_POINT_TYPE_UNKNOWN";
  unk_260FDB8 = 31;
  dword_260FDC0 = 0;
  qword_260FDC8 = (uint64_t)"DYM_TYPE_GEO_ONLYDYM_TYPE_UNKNOWN";
  unk_260FDD0 = 17;
  dword_260FDD8 = 1;
  qword_260FDE0 = (uint64_t)"DYM_TYPE_UNKNOWN";
  unk_260FDE8 = 16;
  dword_260FDF0 = 0;
  qword_260FDF8 = (uint64_t)"AC_TAPGEONEURALNONEPERCEPTRONQISTREE_BASED";
  unk_260FE00 = 6;
  dword_260FE08 = 4;
  qword_260FE10 = (uint64_t)"GEONEURALNONEPERCEPTRONQISTREE_BASED";
  unk_260FE18 = 3;
  dword_260FE20 = 6;
  qword_260FE28 = (uint64_t)"NEURALNONEPERCEPTRONQISTREE_BASED";
  unk_260FE30 = 6;
  dword_260FE38 = 5;
  qword_260FE40 = (uint64_t)"NONEPERCEPTRONQISTREE_BASED";
  unk_260FE48 = 4;
  dword_260FE50 = 0;
  qword_260FE58 = (uint64_t)"PERCEPTRONQISTREE_BASED";
  unk_260FE60 = 10;
  dword_260FE68 = 1;
  qword_260FE70 = (uint64_t)"QISTREE_BASED";
  unk_260FE78 = 3;
  dword_260FE80 = 3;
  qword_260FE88 = (uint64_t)"TREE_BASED";
  unk_260FE90 = 10;
  dword_260FE98 = 2;
  qword_260FEA0 = (uint64_t)"SIGNIFICANCE_HIGHSIGNIFICANCE_LOWSIGNIFICANCE_MEDIUMSIGNIFICANCE_ULTRA";
  *(void *)algn_260FEA8 = 17;
  dword_260FEB0 = 2;
  qword_260FEB8 = (uint64_t)"SIGNIFICANCE_LOWSIGNIFICANCE_MEDIUMSIGNIFICANCE_ULTRA";
  unk_260FEC0 = 16;
  dword_260FEC8 = 0;
  qword_260FED0 = (uint64_t)"SIGNIFICANCE_MEDIUMSIGNIFICANCE_ULTRA";
  unk_260FED8 = 19;
  dword_260FEE0 = 1;
  qword_260FEE8 = (uint64_t)"SIGNIFICANCE_ULTRA";
  unk_260FEF0 = 18;
  dword_260FEF8 = 3;
  qword_260FF00 = (uint64_t)"ALT_NAME_COMPOUND_DECOMPOUNDALT_NAME_LOG_WINALT_NAME_LOG_WIN_SIMILARALT_NAME_MISSPELLINGALT_N"
                           "AME_NGRAMALT_NAME_PERMUTATIONALT_NAME_PHONETICALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_"
                           "PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT"
                           "_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  *(void *)algn_260FF08 = 28;
  dword_260FF10 = 4;
  qword_260FF18 = (uint64_t)"ALT_NAME_LOG_WINALT_NAME_LOG_WIN_SIMILARALT_NAME_MISSPELLINGALT_NAME_NGRAMALT_NAME_PERMUTATIONALT_NAME_PHONETICALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FF20 = 16;
  dword_260FF28 = 3;
  qword_260FF30 = (uint64_t)"ALT_NAME_LOG_WIN_SIMILARALT_NAME_MISSPELLINGALT_NAME_NGRAMALT_NAME_PERMUTATIONALT_NAME_PHONETICALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FF38 = 24;
  dword_260FF40 = 13;
  qword_260FF48 = (uint64_t)"ALT_NAME_MISSPELLINGALT_NAME_NGRAMALT_NAME_PERMUTATIONALT_NAME_PHONETICALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FF50 = 20;
  dword_260FF58 = 10;
  qword_260FF60 = (uint64_t)"ALT_NAME_NGRAMALT_NAME_PERMUTATIONALT_NAME_PHONETICALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FF68 = 14;
  dword_260FF70 = 7;
  qword_260FF78 = (uint64_t)"ALT_NAME_PERMUTATIONALT_NAME_PHONETICALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FF80 = 20;
  dword_260FF88 = 6;
  qword_260FF90 = (uint64_t)"ALT_NAME_PHONETICALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FF98 = 17;
  dword_260FFA0 = 2;
  qword_260FFA8 = (uint64_t)"ALT_NAME_REMOVE_CATEGORYALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FFB0 = 24;
  dword_260FFB8 = 5;
  qword_260FFC0 = (uint64_t)"ALT_NAME_REMOVE_COMMON_PHRASEALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FFC8 = 29;
  dword_260FFD0 = 9;
  qword_260FFD8 = (uint64_t)"ALT_NAME_SEMANTIC_MATCHALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FFE0 = 23;
  dword_260FFE8 = 15;
  qword_260FFF0 = (uint64_t)"ALT_NAME_SKIPGRAMALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_260FFF8 = 17;
  dword_2610000 = 8;
  qword_2610008 = (uint64_t)"ALT_NAME_SYNONYMALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_2610010 = 16;
  dword_2610018 = 1;
  qword_2610020 = (uint64_t)"ALT_NAME_UNKNOWNALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_2610028 = 16;
  dword_2610030 = 0;
  qword_2610038 = (uint64_t)"ALT_NAME_WEBALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_2610040 = 12;
  dword_2610048 = 12;
  qword_2610050 = (uint64_t)"ALT_NAME_WEB_CONTENT_MATCHALT_NAME_ZHUYIN";
  unk_2610058 = 26;
  dword_2610060 = 14;
  qword_2610068 = (uint64_t)"ALT_NAME_ZHUYIN";
  unk_2610070 = 15;
  dword_2610078 = 11;
  qword_2610080 = (uint64_t)"SUGGESTION_ADDRESSSUGGESTION_BROWSE_CATEGORYSUGGESTION_BUSINESSSUGGESTION_CATEGORYSUGGESTION_"
                           "CHAINSUGGESTION_COLLECTIONSUGGESTION_DIRECTION_INTENTSUGGESTION_MIXED_INTENTSUGGESTION_PUBLIS"
                           "HERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  *(void *)algn_2610088 = 18;
  dword_2610090 = 3;
  qword_2610098 = (uint64_t)"SUGGESTION_BROWSE_CATEGORYSUGGESTION_BUSINESSSUGGESTION_CATEGORYSUGGESTION_CHAINSUGGESTION_COLLECTIONSUGGESTION_DIRECTION_INTENTSUGGESTION_MIXED_INTENTSUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_26100A0 = 26;
  dword_26100A8 = 7;
  qword_26100B0 = (uint64_t)"SUGGESTION_BUSINESSSUGGESTION_CATEGORYSUGGESTION_CHAINSUGGESTION_COLLECTIONSUGGESTION_DIRECTION_INTENTSUGGESTION_MIXED_INTENTSUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_26100B8 = 19;
  dword_26100C0 = 2;
  qword_26100C8 = (uint64_t)"SUGGESTION_CATEGORYSUGGESTION_CHAINSUGGESTION_COLLECTIONSUGGESTION_DIRECTION_INTENTSUGGESTION_MIXED_INTENTSUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_26100D0 = 19;
  dword_26100D8 = 5;
  qword_26100E0 = (uint64_t)"SUGGESTION_CHAINSUGGESTION_COLLECTIONSUGGESTION_DIRECTION_INTENTSUGGESTION_MIXED_INTENTSUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_26100E8 = 16;
  dword_26100F0 = 6;
  qword_26100F8 = (uint64_t)"SUGGESTION_COLLECTIONSUGGESTION_DIRECTION_INTENTSUGGESTION_MIXED_INTENTSUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_2610100 = 21;
  dword_2610108 = 10;
  qword_2610110 = (uint64_t)"SUGGESTION_DIRECTION_INTENTSUGGESTION_MIXED_INTENTSUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_2610118 = 27;
  dword_2610120 = 9;
  qword_2610128 = (uint64_t)"SUGGESTION_MIXED_INTENTSUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_2610130 = 23;
  dword_2610138 = 8;
  qword_2610140 = (uint64_t)"SUGGESTION_PUBLISHERSUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_2610148 = 20;
  dword_2610150 = 11;
  qword_2610158 = (uint64_t)"SUGGESTION_QUERYSUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_2610160 = 16;
  dword_2610168 = 1;
  qword_2610170 = (uint64_t)"SUGGESTION_SENTINELSUGGESTION_TRANSIT";
  unk_2610178 = 19;
  dword_2610180 = 0;
  qword_2610188 = (uint64_t)"SUGGESTION_TRANSIT";
  unk_2610190 = 18;
  dword_2610198 = 4;
  uint64_t result = sub_15A7D20();
  qword_2616DD0 = (uint64_t)"UPDATE_NOTIFICATION_TYPE_POIUPDATE_NOTIFICATION_TYPE_UNKNOWNUPDATE_NOTIFICATION_TYPE_VOLATILE";
  *(void *)algn_2616DD8 = 28;
  dword_2616DE0 = 1;
  qword_2616DE8 = (uint64_t)"UPDATE_NOTIFICATION_TYPE_UNKNOWNUPDATE_NOTIFICATION_TYPE_VOLATILE";
  unk_2616DF0 = 32;
  dword_2616DF8 = 0;
  qword_2616E00 = (uint64_t)"UPDATE_NOTIFICATION_TYPE_VOLATILE";
  unk_2616E08 = 33;
  dword_2616E10 = 2;
  qword_2616E18 = (uint64_t)"RESOURCE_TYPE_BYTESRESOURCE_TYPE_POIRESOURCE_TYPE_POPULARITYRESOURCE_TYPE_UNKNOWNRESOURCE_TYP"
                           "E_UPDATE_NOTIFICATION";
  unk_2616E20 = 19;
  dword_2616E28 = 2;
  qword_2616E30 = (uint64_t)"RESOURCE_TYPE_POIRESOURCE_TYPE_POPULARITYRESOURCE_TYPE_UNKNOWNRESOURCE_TYPE_UPDATE_NOTIFICATION";
  unk_2616E38 = 17;
  dword_2616E40 = 1;
  qword_2616E48 = (uint64_t)"RESOURCE_TYPE_POPULARITYRESOURCE_TYPE_UNKNOWNRESOURCE_TYPE_UPDATE_NOTIFICATION";
  unk_2616E50 = 24;
  dword_2616E58 = 3;
  qword_2616E60 = (uint64_t)"RESOURCE_TYPE_UNKNOWNRESOURCE_TYPE_UPDATE_NOTIFICATION";
  unk_2616E68 = 21;
  dword_2616E70 = 0;
  qword_2616E78 = (uint64_t)"RESOURCE_TYPE_UPDATE_NOTIFICATION";
  unk_2616E80 = 33;
  dword_2616E88 = 4;
  qword_2616E90 = (uint64_t)"BYTES_RESOURCE_TYPE_PLACESBYTES_RESOURCE_TYPE_POPULARITYBYTES_RESOURCE_TYPE_SEARCHBYTES_RESOU"
                           "RCE_TYPE_SERVICE_DIRECTIVEBYTES_RESOURCE_TYPE_UNKNOWN";
  *(void *)algn_2616E98 = 26;
  dword_2616EA0 = 1;
  qword_2616EA8 = (uint64_t)"BYTES_RESOURCE_TYPE_POPULARITYBYTES_RESOURCE_TYPE_SEARCHBYTES_RESOURCE_TYPE_SERVICE_DIRECTIVEBYTES_RESOURCE_TYPE_UNKNOWN";
  qword_2616EB0 = 30;
  dword_2616EB8 = 3;
  qword_2616EC0 = (uint64_t)"BYTES_RESOURCE_TYPE_SEARCHBYTES_RESOURCE_TYPE_SERVICE_DIRECTIVEBYTES_RESOURCE_TYPE_UNKNOWN";
  unk_2616EC8 = 26;
  dword_2616ED0 = 2;
  qword_2616ED8 = (uint64_t)"BYTES_RESOURCE_TYPE_SERVICE_DIRECTIVEBYTES_RESOURCE_TYPE_UNKNOWN";
  unk_2616EE0 = 37;
  dword_2616EE8 = 4;
  qword_2616EF0 = (uint64_t)"BYTES_RESOURCE_TYPE_UNKNOWN";
  unk_2616EF8 = 27;
  dword_2616F00 = 0;
  return result;
}

uint64_t sub_15B043C(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_18843A4((unsigned char *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3) {
      uint64_t result = (uint64_t)sub_15B09D0(*(void *)(a1 + 48));
    }
    if ((v3 & 2) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 56);
      char v5 = *(unsigned char *)(v4 + 8);
      uint64_t result = v4 + 8;
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 8) = 0;
      if (v5) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
  }
  if ((v3 & 0xFC) != 0)
  {
    *(void *)(a1 + 96) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
  }
  if ((v3 & 0x1F00) != 0)
  {
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0x100000000;
  }
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = a1 + 8;
  *(_DWORD *)(v6 + 32) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

void sub_15B04F0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 40);
  if ((_BYTE)v4)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v6 = *(void *)(a1 + 48);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          int v8 = (void *)*v8;
        }
        uint64_t v6 = sub_15C1918((uint64_t)v8);
        *(void *)(a1 + 48) = v6;
      }
      if (*(void *)(a2 + 48)) {
        uint64_t v9 = *(uint64_t (****)())(a2 + 48);
      }
      else {
        uint64_t v9 = &off_253F1A0;
      }
      sub_15B0E24(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_40;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v10 = *(std::string **)(a1 + 56);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = (std::string *)sub_15C1C38((uint64_t)v12);
      *(void *)(a1 + 56) = v10;
    }
    if (*(void *)(a2 + 56)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 56);
    }
    else {
      uint64_t v13 = &off_253F2C8;
    }
    sub_11A7934(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_41;
    }
LABEL_40:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_42;
    }
LABEL_41:
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_43;
    }
LABEL_42:
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    if ((v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v4 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_44;
    }
LABEL_43:
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_9:
      if ((v4 & 0x80) == 0)
      {
LABEL_11:
        *(_DWORD *)(a1 + 40) |= v4;
        goto LABEL_12;
      }
LABEL_10:
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
      goto LABEL_11;
    }
LABEL_44:
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_12:
  if ((v4 & 0x1F00) == 0) {
    goto LABEL_20;
  }
  if ((v4 & 0x100) != 0)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    if ((v4 & 0x200) == 0)
    {
LABEL_15:
      if ((v4 & 0x400) == 0) {
        goto LABEL_16;
      }
      goto LABEL_48;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_15;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
LABEL_49:
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_48:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  if ((v4 & 0x800) != 0) {
    goto LABEL_49;
  }
LABEL_17:
  if ((v4 & 0x1000) != 0) {
LABEL_18:
  }
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
LABEL_19:
  *(_DWORD *)(a1 + 40) |= v4;
LABEL_20:
  sub_1884444(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15B06D8(uint64_t a1)
{
  uint64_t result = sub_18856CC(a1 + 16);
  if (result)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t result = sub_18856CC(v3 + 16);
      if (result) {
        return (~*(_DWORD *)(v3 + 40) & 3) == 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_15B0734(unsigned int a1)
{
  return a1 < 3;
}

BOOL sub_15B0740(unsigned int a1)
{
  return a1 < 3;
}

BOOL sub_15B074C(unsigned int a1)
{
  return a1 < 5;
}

BOOL sub_15B0758(unsigned int a1)
{
  return a1 < 5;
}

BOOL sub_15B0764(unsigned int a1)
{
  return a1 < 5;
}

BOOL sub_15B0770(unsigned int a1)
{
  return a1 < 0x14;
}

BOOL sub_15B077C(unsigned int a1)
{
  return a1 < 2;
}

BOOL sub_15B0788(unsigned int a1)
{
  return a1 < 2;
}

uint64_t sub_15B0794(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2 | 2;
  if (!a3) {
    uint64_t v4 = a2;
  }
  *(void *)(a1 + 8) = v4;
  *(void *)a1 = off_24C4490;
  sub_1882BC4(a1 + 16, a2);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

void sub_15B0800(_Unwind_Exception *a1)
{
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15B0834(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = off_24C4490;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  sub_1884444(v4, a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  return a1;
}

void sub_15B08DC(_Unwind_Exception *a1)
{
  sub_1882CC0(v3);
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B091C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1882CC0(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B0998(void *a1)
{
  sub_15B091C(a1);

  operator delete();
}

unsigned char *sub_15B09D0(uint64_t a1)
{
  uint64_t result = sub_18843A4((unsigned char *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 40) & 7) != 0)
  {
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  *(_DWORD *)(v3 + 32) = 0;
  if (v4)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_15B0A38(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v21 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v21, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    int v8 = v21 + 1;
    unsigned int v9 = *v21;
    if (*v21 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)v21, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        int v8 = v21 + 2;
      }
    }
    uint64_t v21 = v8;
    unsigned int v12 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 != 25) {
        goto LABEL_14;
      }
      uint64_t v17 = *(void *)v8;
      uint64_t v16 = v8 + 8;
      v5 |= 4u;
      *(void *)(a1 + 64) = v17;
      goto LABEL_25;
    }
    if (v12 == 2)
    {
      if (v9 != 17) {
        goto LABEL_14;
      }
      uint64_t v18 = *(void *)v8;
      uint64_t v16 = v8 + 8;
      v5 |= 2u;
      *(void *)(a1 + 56) = v18;
LABEL_25:
      uint64_t v21 = v16;
      goto LABEL_30;
    }
    if (v12 == 1 && v9 == 9)
    {
      uint64_t v19 = *(void *)v8;
      uint64_t v16 = v8 + 8;
      v5 |= 1u;
      *(void *)(a1 + 48) = v19;
      goto LABEL_25;
    }
LABEL_14:
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    if (v9 - 800 > 0x63F)
    {
      if (*v7)
      {
        uint64_t v20 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        uint64_t v20 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        int v8 = v21;
      }
      uint64_t v15 = sub_1885AC0(v9, v20, v8, a3);
    }
    else
    {
      uint64_t v15 = sub_18859DC((uint64_t **)(a1 + 16), v9, v8, (uint64_t)&off_253F1A0, (uint64_t *)(a1 + 8), a3);
    }
    uint64_t v21 = (char *)v15;
    if (!v15) {
      goto LABEL_35;
    }
LABEL_30:
    if (sub_11947B8((uint64_t)a3, &v21, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_35:
  uint64_t v21 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return v21;
}

char *sub_15B0C0C(uint64_t a1, char *a2, _DWORD *a3)
{
  char v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)a2);
    }
    uint64_t v7 = *(void *)(a1 + 48);
    char *v4 = 9;
    *(void *)(v4 + 1) = v7;
    v4 += 9;
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v8 = *(void *)(a1 + 56);
  char *v4 = 17;
  *(void *)(v4 + 1) = v8;
  v4 += 9;
  if ((v6 & 4) != 0)
  {
LABEL_11:
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v9 = *(void *)(a1 + 64);
    char *v4 = 25;
    *(void *)(v4 + 1) = v9;
    v4 += 9;
  }
LABEL_14:
  if (*(_WORD *)(a1 + 26)) {
    char v4 = sub_1886844(a1 + 16, 100, 300, v4, a3);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    uint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    uint64_t v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15B0D90(uint64_t a1)
{
  uint64_t v2 = sub_1889280(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = 9;
  if ((v3 & 1) == 0) {
    uint64_t v4 = 0;
  }
  if ((v3 & 2) != 0) {
    v4 += 9;
  }
  uint64_t v5 = v4 + v2;
  if ((~v3 & 3) != 0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v2 + 18;
  }
  if ((v3 & 4) != 0) {
    uint64_t result = v6 + 9;
  }
  else {
    uint64_t result = v6;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v9 + 31) < 0) {
      uint64_t v10 = *(void *)(v9 + 16);
    }
    else {
      uint64_t v10 = *(unsigned __int8 *)(v9 + 31);
    }
    result += v10;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_15B0E24(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 40);
  if ((v4 & 7) != 0)
  {
    if (v4)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0)
        {
LABEL_6:
          *(_DWORD *)(a1 + 40) |= v4;
          goto LABEL_7;
        }
LABEL_5:
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        goto LABEL_6;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_7:
  sub_1884444(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15B0ECC(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_15B09D0(a1);
    sub_15B0E24(a1, a2);
  }
}

uint64_t sub_15B0F18(uint64_t a1)
{
  uint64_t result = sub_18856CC(a1 + 16);
  if (result) {
    return (~*(_DWORD *)(a1 + 40) & 3) == 0;
  }
  return result;
}

void *sub_15B0F54@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.LatLng");
}

void *sub_15B0F64(void *result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *uint64_t result = off_24C4510;
  result[1] = v3;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_15B0F94(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_24C4510;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

void sub_15B1010(_Unwind_Exception *a1)
{
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B1044(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B10B8(void *a1)
{
  sub_15B1044(a1);

  operator delete();
}

uint64_t sub_15B10F0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0) {
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15B1114(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v18 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
    goto LABEL_29;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v18 + 1;
    unsigned int v8 = *v18;
    if (*v18 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v18, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v18 + 2;
      }
    }
    uint64_t v18 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 21)
      {
        int v15 = *(_DWORD *)v7;
        uint64_t v14 = v7 + 4;
        v5 |= 2u;
        *(_DWORD *)(a1 + 28) = v15;
LABEL_23:
        uint64_t v18 = v14;
        goto LABEL_24;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 13)
    {
      int v16 = *(_DWORD *)v7;
      uint64_t v14 = v7 + 4;
      v5 |= 1u;
      *(_DWORD *)(a1 + 24) = v16;
      goto LABEL_23;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v18;
    }
    uint64_t v18 = (char *)sub_1885AC0(v8, v13, v7, a3);
    if (!v18) {
      goto LABEL_30;
    }
LABEL_24:
    if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
      goto LABEL_29;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v18 = 0;
LABEL_29:
  *(_DWORD *)(a1 + 16) |= v5;
  return v18;
}

_OWORD *sub_15B1284(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (_OWORD *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    int v7 = *(_DWORD *)(a1 + 24);
    *(unsigned char *)uint64_t v4 = 13;
    *(_DWORD *)((char *)v4 + 1) = v7;
    uint64_t v4 = (_OWORD *)((char *)v4 + 5);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    int v8 = *(_DWORD *)(a1 + 28);
    *(unsigned char *)uint64_t v4 = 21;
    *(_DWORD *)((char *)v4 + 1) = v8;
    uint64_t v4 = (_OWORD *)((char *)v4 + 5);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    unint64_t v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    unint64_t v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    return (_OWORD *)((char *)v4 + v14);
  }

  return (_OWORD *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15B13A0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  uint64_t v2 = 5;
  if ((v1 & 1) == 0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 2) != 0) {
    v2 += 5;
  }
  BOOL v3 = (~v1 & 3) == 0;
  uint64_t v4 = 10;
  if (!v3) {
    uint64_t v4 = v2;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(void *)(v7 + 16);
    }
    else {
      uint64_t v8 = *(unsigned __int8 *)(v7 + 31);
    }
    v4 += v8;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

std::string *sub_15B1404(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    uint64_t v4 = result;
    sub_15B10F0((uint64_t)result);
    return sub_117EF04(v4, a2);
  }
  return result;
}

BOOL sub_15B1450(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 3) == 0;
}

void *sub_15B1464@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.LatLngE7");
}

double sub_15B1474(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)a1 = off_24C4590;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

uint64_t sub_15B14B8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_24C4590;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 20) = 0;
  int v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_10E4FFC(v5, v8, (uint64_t *)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    unsigned int v10 = *(int **)(a1 + 40);
    if (*v10 < v9) {
      *unsigned int v10 = v9;
    }
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    sub_188B4F8(v4, (v11 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = v13;
  return a1;
}

void sub_15B15B4(_Unwind_Exception *a1)
{
  sub_11DB7D4(v3);
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B15FC(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_11DB7D4(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B167C(void *a1)
{
  sub_15B15FC(a1);

  operator delete();
}

unsigned char *sub_15B16B4(unsigned char *result)
{
  int v1 = result;
  uint64_t v2 = *((unsigned int *)result + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*((void *)result + 5) + 8);
    do
    {
      uint64_t v4 = *v3++;
      double result = sub_15B09D0(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)v1 + 8) = 0;
  }
  if ((v1[16] & 0x1F) != 0)
  {
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_DWORD *)v1 + 20) = 1;
  }
  char v6 = v1[8];
  uint64_t v5 = v1 + 8;
  *((_DWORD *)v5 + 2) = 0;
  if (v6)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

char *sub_15B1750(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v31 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = v31 + 1;
    unsigned int v9 = *v31;
    if (*v31 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v31, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v31 + 2;
      }
    }
    uint64_t v31 = v8;
    switch(v9 >> 3)
    {
      case 5u:
        if (v9 != 41) {
          goto LABEL_37;
        }
        uint64_t v13 = *(void *)v8;
        long long v12 = v8 + 8;
        v5 |= 1u;
        *(void *)(a1 + 48) = v13;
        goto LABEL_17;
      case 6u:
        if (v9 != 49) {
          goto LABEL_37;
        }
        uint64_t v14 = *(void *)v8;
        long long v12 = v8 + 8;
        v5 |= 2u;
        *(void *)(a1 + 56) = v14;
        goto LABEL_17;
      case 7u:
        if (v9 != 57) {
          goto LABEL_37;
        }
        uint64_t v15 = *(void *)v8;
        long long v12 = v8 + 8;
        v5 |= 4u;
        *(void *)(a1 + 64) = v15;
        goto LABEL_17;
      case 8u:
        if (v9 != 65) {
          goto LABEL_37;
        }
        uint64_t v16 = *(void *)v8;
        long long v12 = v8 + 8;
        v5 |= 8u;
        *(void *)(a1 + 72) = v16;
LABEL_17:
        uint64_t v31 = v12;
        goto LABEL_18;
      case 9u:
        if (v9 != 74) {
          goto LABEL_37;
        }
        uint64_t v17 = v8 - 1;
        while (1)
        {
          uint64_t v18 = (unsigned __int8 *)(v17 + 1);
          uint64_t v31 = v17 + 1;
          uint64_t v19 = *(_DWORD **)(a1 + 40);
          if (v19 && (uint64_t v20 = *(int *)(a1 + 32), (int)v20 < *v19))
          {
            *(_DWORD *)(a1 + 32) = v20 + 1;
            uint64_t v21 = *(void *)&v19[2 * v20 + 2];
          }
          else
          {
            uint64_t v22 = sub_15C1918(*(void *)(a1 + 24));
            uint64_t v21 = sub_188CDC8(a1 + 24, v22);
            uint64_t v18 = (unsigned __int8 *)v31;
          }
          uint64_t v17 = sub_1198F14(a3, v21, v18);
          uint64_t v31 = v17;
          if (!v17) {
            goto LABEL_54;
          }
          if (*(void *)a3 <= (unint64_t)v17 || *v17 != 74) {
            goto LABEL_18;
          }
        }
      case 0xAu:
        if (v9 != 80) {
          goto LABEL_37;
        }
        uint64_t v23 = v8 + 1;
        unint64_t v24 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_34;
        }
        int v25 = *v23;
        int v26 = v24 + (v25 << 7);
        unint64_t v24 = (v26 - 128);
        if (v25 < 0)
        {
          uint64_t v31 = (char *)sub_188C138((uint64_t)v8, (v26 - 128));
          if (!v31) {
            goto LABEL_54;
          }
          unint64_t v24 = v29;
        }
        else
        {
          uint64_t v23 = v8 + 2;
LABEL_34:
          uint64_t v31 = v23;
        }
        if ((v24 - 1) > 0xC)
        {
          if (*v7) {
            int v30 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            int v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(10, v24, v30);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x10u;
          *(_DWORD *)(a1 + 80) = v24;
        }
        goto LABEL_18;
      default:
LABEL_37:
        if (v9) {
          BOOL v27 = (v9 & 7) == 4;
        }
        else {
          BOOL v27 = 1;
        }
        if (!v27)
        {
          if (*v7)
          {
            uint64_t v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v28 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = v31;
          }
          uint64_t v31 = (char *)sub_1885AC0(v9, v28, v8, a3);
          if (!v31) {
            goto LABEL_54;
          }
LABEL_18:
          if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_54:
        }
          uint64_t v31 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v31;
    }
  }
}

unsigned char *sub_15B1A68(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 48);
    unsigned char *v4 = 41;
    *(void *)(v4 + 1) = v7;
    v4 += 9;
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v8 = *(void *)(a1 + 56);
  unsigned char *v4 = 49;
  *(void *)(v4 + 1) = v8;
  v4 += 9;
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
LABEL_12:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v9 = *(void *)(a1 + 64);
  unsigned char *v4 = 57;
  *(void *)(v4 + 1) = v9;
  v4 += 9;
  if ((v6 & 8) != 0)
  {
LABEL_15:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 72);
    unsigned char *v4 = 65;
    *(void *)(v4 + 1) = v10;
    v4 += 9;
  }
LABEL_18:
  int v11 = *(_DWORD *)(a1 + 32);
  if (v11)
  {
    for (int i = 0; i != v11; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 74;
      unsigned int v14 = *(_DWORD *)(v13 + 44);
      v4[1] = v14;
      if (v14 > 0x7F) {
        uint64_t v15 = sub_188A9CC(v14, v4 + 1);
      }
      else {
        uint64_t v15 = v4 + 2;
      }
      uint64_t v4 = sub_15B0C0C(v13, v15, a3);
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v16 = *(int *)(a1 + 80);
    unsigned char *v4 = 80;
    v4[1] = v16;
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      unint64_t v17 = v16 >> 7;
      v4[2] = v16 >> 7;
      v4 += 3;
      if (v16 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v18 = v17 >> 14;
          v17 >>= 7;
          *v4++ = v17;
        }
        while (v18);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    uint64_t v22 = *(void **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    uint64_t v22 = (void *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v23)
  {
    uint64_t v24 = (int)v23;
    memcpy(v4, v22, (int)v23);
    v4 += v24;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v22, v23, v4);
}

uint64_t sub_15B1D1C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15B0D90(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 0x1F) != 0)
  {
    uint64_t v9 = v2 + 9;
    if ((v8 & 1) == 0) {
      uint64_t v9 = v2;
    }
    if ((v8 & 2) != 0) {
      v9 += 9;
    }
    if ((v8 & 4) != 0) {
      v9 += 9;
    }
    if ((v8 & 8) != 0) {
      uint64_t v2 = v9 + 9;
    }
    else {
      uint64_t v2 = v9;
    }
    if ((v8 & 0x10) != 0)
    {
      int v10 = *(_DWORD *)(a1 + 80);
      uint64_t v11 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v10 >= 0) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 11;
      }
      v2 += v12;
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    v2 += v16;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

void sub_15B1E3C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_10E4FFC((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    int v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 0x1F) != 0)
  {
    if (v9)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      if ((v9 & 2) == 0)
      {
LABEL_7:
        if ((v9 & 4) == 0) {
          goto LABEL_8;
        }
        goto LABEL_18;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_7;
    }
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    if ((v9 & 4) == 0)
    {
LABEL_8:
      if ((v9 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
LABEL_18:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0)
      {
LABEL_11:
        *(_DWORD *)(a1 + 16) |= v9;
        goto LABEL_12;
      }
LABEL_10:
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      goto LABEL_11;
    }
LABEL_19:
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    if ((v9 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15B1F74(unsigned char *a1, uint64_t a2)
{
  if ((unsigned char *)a2 != a1)
  {
    sub_15B16B4(a1);
    sub_15B1E3C((uint64_t)a1, a2);
  }
}

BOOL sub_15B1FC0(uint64_t a1)
{
  return sub_15B1FC8(a1 + 24);
}

BOOL sub_15B1FC8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  do
  {
    int v3 = v2;
    if ((int)v2 < 1) {
      break;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * v2);
    if (!sub_18856CC(v4 + 16)) {
      break;
    }
    --v2;
  }
  while ((~*(_DWORD *)(v4 + 40) & 3) == 0);
  return v3 < 1;
}

__n128 sub_15B2038(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v5;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v7;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a2 + 64) = v8;
  *(void *)(a2 + 72) = v9;
  LODWORD(v8) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = v8;
  return result;
}

void *sub_15B20AC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.MapRegion");
}

uint64_t sub_15B20BC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_24C4610;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (std::string *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 20) = 0;
  int v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_148E5A4(v5, v8, (uint64_t *)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    uint64_t v10 = *(int **)(a1 + 40);
    if (*v10 < v9) {
      *uint64_t v10 = v9;
    }
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    sub_188B4F8(v4, (v11 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_15B21B0(_Unwind_Exception *a1)
{
  sub_148CAC8(v3);
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B21F8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_148CAC8(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B2278(void *a1)
{
  sub_15B21F8(a1);

  operator delete();
}

uint64_t sub_15B22B0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      __n128 result = sub_15B10F0(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if ((*(unsigned char *)(v1 + 16) & 0xF) != 0)
  {
    *(void *)(v1 + 48) = 0;
    *(void *)(v1 + 56) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

char *sub_15B2340(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v25 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = v25 + 1;
    unsigned int v9 = *v25;
    if (*v25 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v25, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v25 + 2;
      }
    }
    int v25 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 13) {
          goto LABEL_30;
        }
        int v13 = *(_DWORD *)v8;
        uint64_t v12 = v8 + 4;
        v5 |= 1u;
        *(_DWORD *)(a1 + 48) = v13;
        goto LABEL_17;
      case 2u:
        if (v9 != 21) {
          goto LABEL_30;
        }
        int v14 = *(_DWORD *)v8;
        uint64_t v12 = v8 + 4;
        v5 |= 2u;
        *(_DWORD *)(a1 + 52) = v14;
        goto LABEL_17;
      case 3u:
        if (v9 != 29) {
          goto LABEL_30;
        }
        int v15 = *(_DWORD *)v8;
        uint64_t v12 = v8 + 4;
        v5 |= 4u;
        *(_DWORD *)(a1 + 56) = v15;
        goto LABEL_17;
      case 4u:
        if (v9 != 37) {
          goto LABEL_30;
        }
        int v16 = *(_DWORD *)v8;
        uint64_t v12 = v8 + 4;
        v5 |= 8u;
        *(_DWORD *)(a1 + 60) = v16;
LABEL_17:
        int v25 = v12;
        goto LABEL_18;
      case 5u:
        if (v9 != 42) {
          goto LABEL_30;
        }
        unint64_t v17 = v8 - 1;
        while (1)
        {
          unint64_t v18 = (unsigned __int8 *)(v17 + 1);
          int v25 = v17 + 1;
          uint64_t v19 = *(_DWORD **)(a1 + 40);
          if (v19 && (uint64_t v20 = *(int *)(a1 + 32), (int)v20 < *v19))
          {
            *(_DWORD *)(a1 + 32) = v20 + 1;
            uint64_t v21 = *(void *)&v19[2 * v20 + 2];
          }
          else
          {
            uint64_t v22 = sub_15C1974(*(void *)(a1 + 24));
            uint64_t v21 = sub_188CDC8(a1 + 24, (uint64_t)v22);
            unint64_t v18 = (unsigned __int8 *)v25;
          }
          unint64_t v17 = sub_11FF4E8(a3, v21, v18);
          int v25 = v17;
          if (!v17) {
            goto LABEL_41;
          }
          if (*(void *)a3 <= (unint64_t)v17 || *v17 != 42) {
            goto LABEL_18;
          }
        }
      default:
LABEL_30:
        if (v9) {
          BOOL v23 = (v9 & 7) == 4;
        }
        else {
          BOOL v23 = 1;
        }
        if (!v23)
        {
          if (*v7)
          {
            uint64_t v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v24 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = v25;
          }
          int v25 = (char *)sub_1885AC0(v9, v24, v8, a3);
          if (!v25) {
            goto LABEL_41;
          }
LABEL_18:
          if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_41:
        }
          int v25 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v25;
    }
  }
}

unsigned char *sub_15B25B0(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    int v7 = *(_DWORD *)(a1 + 48);
    unsigned char *v4 = 13;
    *(_DWORD *)(v4 + 1) = v7;
    v4 += 5;
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  int v8 = *(_DWORD *)(a1 + 52);
  unsigned char *v4 = 21;
  *(_DWORD *)(v4 + 1) = v8;
  v4 += 5;
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
LABEL_12:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  int v9 = *(_DWORD *)(a1 + 56);
  unsigned char *v4 = 29;
  *(_DWORD *)(v4 + 1) = v9;
  v4 += 5;
  if ((v6 & 8) != 0)
  {
LABEL_15:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    int v10 = *(_DWORD *)(a1 + 60);
    unsigned char *v4 = 37;
    *(_DWORD *)(v4 + 1) = v10;
    v4 += 5;
  }
LABEL_18:
  int v11 = *(_DWORD *)(a1 + 32);
  if (v11)
  {
    for (int i = 0; i != v11; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 42;
      unsigned int v14 = *(_DWORD *)(v13 + 20);
      v4[1] = v14;
      if (v14 > 0x7F) {
        int v15 = sub_188A9CC(v14, v4 + 1);
      }
      else {
        int v15 = v4 + 2;
      }
      uint64_t v4 = sub_15B1284(v13, (unint64_t)v15, a3);
    }
  }
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15B27E8(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15B13A0(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 0xF) != 0)
  {
    uint64_t v9 = v2 + 5;
    if ((v8 & 1) == 0) {
      uint64_t v9 = v2;
    }
    if ((v8 & 2) != 0) {
      v9 += 5;
    }
    if ((v8 & 4) != 0) {
      v9 += 5;
    }
    if ((v8 & 8) != 0) {
      uint64_t v2 = v9 + 5;
    }
    else {
      uint64_t v2 = v9;
    }
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v2 += v13;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

std::string *sub_15B28D4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    __n128 result = sub_148E5A4(v3 + 1, v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    int v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 0xF) != 0)
  {
    if (v9)
    {
      LODWORD(v3[2].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 48);
      if ((v9 & 2) == 0)
      {
LABEL_7:
        if ((v9 & 4) == 0) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_7;
    }
    HIDWORD(v3[2].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 52);
    if ((v9 & 4) == 0)
    {
LABEL_8:
      if ((v9 & 8) == 0)
      {
LABEL_10:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v9;
        goto LABEL_11;
      }
LABEL_9:
      HIDWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 60);
      goto LABEL_10;
    }
LABEL_17:
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 56);
    if ((v9 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

BOOL sub_15B29FC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  do
  {
    int v2 = v1;
    if ((int)v1 < 1) {
      break;
    }
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8 * v1--);
  }
  while ((~*(_DWORD *)(v3 + 16) & 3) == 0);
  return v2 < 1;
}

void *sub_15B2A34@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.MapRegionE7");
}

void *sub_15B2A44(void *result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *__n128 result = off_24C4690;
  result[1] = v3;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

uint64_t sub_15B2A80(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)(a1 + 8);
  *(void *)a1 = off_24C4690;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(void *)(a1 + 24) = &qword_2550250;
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6)
  {
    int v7 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      int v7 = (uint64_t *)*v7;
    }
    sub_1881DF4((std::string **)(a1 + 24), (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL), v7);
    int v6 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 32) = &qword_2550250;
  if ((v6 & 2) != 0)
  {
    int v8 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      int v8 = (uint64_t *)*v8;
    }
    sub_1881DF4((std::string **)(a1 + 32), (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL), v8);
  }
  return a1;
}

void sub_15B2B5C(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15B2B90(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B2C48(uint64_t a1)
{
  sub_15B2B90(a1);

  operator delete();
}

uint64_t sub_15B2C80(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15B2CFC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  int v6 = (void *)(a1 + 8);
  while (1)
  {
    int v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        int v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        int v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)uint64_t v20 = v7;
    if (v8 >> 3 == 3)
    {
      if (v8 == 26)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v16 = (uint64_t *)*v16;
        }
        unint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        uint64_t v16 = (uint64_t *)*v16;
      }
      unint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      unsigned int v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      int v7 = *(char **)v20;
    }
    unsigned int v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)uint64_t v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)uint64_t v20 = 0;
  return *(void *)v20;
}

char *sub_15B2EA4(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    int v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15B2F90(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

std::string *sub_15B306C(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    uint64_t v4 = result;
    sub_15B2C80((uint64_t)result);
    return sub_11EC100(v4, a2);
  }
  return result;
}

uint64_t sub_15B30B8()
{
  return 1;
}

uint64_t sub_15B30C0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(result + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(result + 32) = v4;
  return result;
}

void *sub_15B3104@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.LocalizedString");
}

uint64_t sub_15B3114(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B31CC(uint64_t a1)
{
  sub_15B3114(a1);

  operator delete();
}

uint64_t sub_15B3204(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15B3280(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)uint64_t v20 = v7;
    if (v8 >> 3 == 3)
    {
      if (v8 == 26)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v16 = (uint64_t *)*v16;
        }
        unint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        uint64_t v16 = (uint64_t *)*v16;
      }
      unint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      unsigned int v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v20;
    }
    unsigned int v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)uint64_t v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)uint64_t v20 = 0;
  return *(void *)v20;
}

char *sub_15B3428(uint64_t a1, char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15B3514(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15B35F0()
{
  return 1;
}

void *sub_15B35F8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.LocalizedBytes");
}

uint64_t sub_15B3608(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_24C4790;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void sub_15B3684(_Unwind_Exception *a1)
{
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B36B4(void *a1)
{
  unint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B3728(void *a1)
{
  sub_15B36B4(a1);

  operator delete();
}

uint64_t sub_15B3760(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15B3778(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  uint64_t v5 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v6 = v19 + 1;
    unsigned int v7 = *v19;
    if (*v19 < 0)
    {
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if (*v6 < 0)
      {
        unint64_t v6 = (char *)sub_188C180((uint64_t)v19, v8 - 128);
        unsigned int v7 = v9;
      }
      else
      {
        unint64_t v6 = v19 + 2;
      }
    }
    uint64_t v19 = v6;
    if (v7 == 8)
    {
      uint64_t v12 = v6 + 1;
      unint64_t v13 = *v6;
      if (*v6 < 0)
      {
        int v14 = *v12;
        int v15 = v13 + (v14 << 7);
        unint64_t v13 = (v15 - 128);
        if (v14 < 0)
        {
          uint64_t v19 = (char *)sub_188C138((uint64_t)v6, (v15 - 128));
          if (!v19) {
            return 0;
          }
          unint64_t v13 = v16;
          goto LABEL_20;
        }
        uint64_t v12 = v6 + 2;
      }
      uint64_t v19 = v12;
LABEL_20:
      if (v13 > 2)
      {
        if (*v5) {
          unint64_t v17 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          unint64_t v17 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        sub_188C020(1, v13, v17);
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 24) = v13;
      }
      goto LABEL_22;
    }
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    if (*v5)
    {
      unint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v6 = v19;
    }
    uint64_t v19 = (char *)sub_1885AC0(v7, v11, v6, a3);
    if (!v19) {
      return 0;
    }
LABEL_22:
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return v19;
  }
  return 0;
}

unsigned char *sub_15B3920(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v6 = *(int *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v6;
    if (v6 > 0x7F)
    {
      v4[1] = v6 | 0x80;
      unint64_t v7 = v6 >> 7;
      v4[2] = v6 >> 7;
      v4 += 3;
      if (v6 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v8 = v7 >> 14;
          v7 >>= 7;
          *v4++ = v7;
        }
        while (v8);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    uint64_t v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    uint64_t v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    v4 += v14;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15B3A48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    int v2 = *(_DWORD *)(a1 + 24);
    if (v2 < 0) {
      uint64_t v1 = 11;
    }
    else {
      uint64_t v1 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31);
    }
    v1 += v6;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

uint64_t sub_15B3ABC()
{
  return 1;
}

void *sub_15B3AC4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.Location.CoarseLocationMetadata");
}

uint64_t sub_15B3AD4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2 | 2;
  if (!a3) {
    uint64_t v4 = a2;
  }
  *(void *)(a1 + 8) = v4;
  *(void *)a1 = off_24C4810;
  sub_1882BC4(a1 + 16, a2);
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 132) = 1;
  return a1;
}

void sub_15B3B58(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15B3B88(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = off_24C4810;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  sub_1884444(v4, a2 + 16);
  int v6 = *(_DWORD *)(a2 + 40);
  if (v6) {
    operator new();
  }
  *(void *)(a1 + 48) = 0;
  if ((v6 & 2) != 0) {
    operator new();
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  return a1;
}

void sub_15B3CB0()
{
}

uint64_t sub_15B3D28(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_253F2E8)
  {
    uint64_t v5 = *(void **)(a1 + 48);
    if (v5)
    {
      sub_15B091C(v5);
      operator delete();
    }
    int v6 = *(void **)(a1 + 56);
    if (v6)
    {
      sub_15B36B4(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  sub_1882CC0(a1 + 16);
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B3E00(uint64_t a1)
{
  sub_15B3D28(a1);

  operator delete();
}

char *sub_15B3E38(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v48 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v48, a3[11].i32[1])) {
    goto LABEL_2;
  }
  long long v7 = (void *)(a1 + 8);
  while (2)
  {
    long long v8 = v48 + 1;
    unsigned int v9 = *v48;
    if (*v48 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        long long v8 = (char *)sub_188C180((uint64_t)v48, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        long long v8 = v48 + 2;
      }
    }
    uint64_t v48 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_60;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v12 = *(void *)(a1 + 48);
        if (!v12)
        {
          uint64_t v13 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v13 = (void *)*v13;
          }
          uint64_t v12 = sub_15C1918((uint64_t)v13);
          *(void *)(a1 + 48) = v12;
          long long v8 = v48;
        }
        uint64_t v14 = sub_1198F14(a3, v12, (unsigned __int8 *)v8);
        goto LABEL_69;
      case 2u:
        if (v9 != 16) {
          goto LABEL_60;
        }
        int v15 = v8 + 1;
        unint64_t v16 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_19;
        }
        int v17 = *v15;
        int v18 = v16 + (v17 << 7);
        unint64_t v16 = (v18 - 128);
        if (v17 < 0)
        {
          uint64_t v48 = (char *)sub_188C138((uint64_t)v8, (v18 - 128));
          if (!v48) {
            goto LABEL_92;
          }
          unint64_t v16 = v40;
        }
        else
        {
          int v15 = v8 + 2;
LABEL_19:
          uint64_t v48 = v15;
        }
        if ((v16 - 1) <= 3)
        {
          *(_DWORD *)(a1 + 40) |= 0x1000u;
          *(_DWORD *)(a1 + 132) = v16;
          goto LABEL_70;
        }
        if (*v7) {
          uint64_t v46 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v46 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v47 = 2;
        goto LABEL_86;
      case 3u:
        if (v9 != 25) {
          goto LABEL_60;
        }
        uint64_t v20 = *(void *)v8;
        uint64_t v19 = v8 + 8;
        v5 |= 4u;
        *(void *)(a1 + 64) = v20;
        goto LABEL_52;
      case 4u:
        if (v9 != 32) {
          goto LABEL_60;
        }
        v5 |= 0x40u;
        uint64_t v22 = v8 + 1;
        LODWORD(v21) = *v8;
        if ((v21 & 0x80) == 0) {
          goto LABEL_28;
        }
        int v23 = *v22;
        uint64_t v21 = v21 + (v23 << 7) - 128;
        if (v23 < 0)
        {
          int v41 = (char *)sub_188C138((uint64_t)v8, v21);
          uint64_t v48 = v41;
          *(_DWORD *)(a1 + 96) = v42;
          if (!v41) {
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v22 = v8 + 2;
LABEL_28:
          uint64_t v48 = v22;
          *(_DWORD *)(a1 + 96) = v21;
        }
        goto LABEL_70;
      case 5u:
        if (v9 != 41) {
          goto LABEL_60;
        }
        uint64_t v24 = *(void *)v8;
        uint64_t v19 = v8 + 8;
        v5 |= 8u;
        *(void *)(a1 + 72) = v24;
        goto LABEL_52;
      case 6u:
        if (v9 != 49) {
          goto LABEL_60;
        }
        uint64_t v25 = *(void *)v8;
        uint64_t v19 = v8 + 8;
        v5 |= 0x10u;
        *(void *)(a1 + 80) = v25;
        goto LABEL_52;
      case 7u:
        if (v9 != 57) {
          goto LABEL_60;
        }
        uint64_t v26 = *(void *)v8;
        uint64_t v19 = v8 + 8;
        v5 |= 0x20u;
        *(void *)(a1 + 88) = v26;
        goto LABEL_52;
      case 8u:
        if (v9 != 65) {
          goto LABEL_60;
        }
        uint64_t v27 = *(void *)v8;
        uint64_t v19 = v8 + 8;
        v5 |= 0x100u;
        *(void *)(a1 + 104) = v27;
        goto LABEL_52;
      case 9u:
        if (v9 != 73) {
          goto LABEL_60;
        }
        uint64_t v28 = *(void *)v8;
        uint64_t v19 = v8 + 8;
        v5 |= 0x200u;
        *(void *)(a1 + 112) = v28;
        goto LABEL_52;
      case 0xAu:
        if (v9 != 80) {
          goto LABEL_60;
        }
        v5 |= 0x80u;
        int v30 = v8 + 1;
        LODWORD(v29) = *v8;
        if ((v29 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v31 = *v30;
        uint64_t v29 = v29 + (v31 << 7) - 128;
        if (v31 < 0)
        {
          uint64_t v43 = (char *)sub_188C138((uint64_t)v8, v29);
          uint64_t v48 = v43;
          *(_DWORD *)(a1 + 100) = v44;
          if (!v43) {
            goto LABEL_92;
          }
        }
        else
        {
          int v30 = v8 + 2;
LABEL_43:
          uint64_t v48 = v30;
          *(_DWORD *)(a1 + 100) = v29;
        }
        goto LABEL_70;
      case 0xBu:
        if (v9 != 90) {
          goto LABEL_60;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v32 = *(void *)(a1 + 56);
        if (!v32)
        {
          uint64_t v33 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v33 = (void *)*v33;
          }
          uint64_t v32 = sub_15C1C38((uint64_t)v33);
          *(void *)(a1 + 56) = v32;
          long long v8 = v48;
        }
        uint64_t v14 = sub_15B4354(a3, v32, (unsigned __int8 *)v8);
        goto LABEL_69;
      case 0xCu:
        if (v9 != 97) {
          goto LABEL_60;
        }
        uint64_t v34 = *(void *)v8;
        uint64_t v19 = v8 + 8;
        v5 |= 0x400u;
        *(void *)(a1 + 120) = v34;
LABEL_52:
        uint64_t v48 = v19;
        goto LABEL_70;
      case 0xDu:
        if (v9 != 104) {
          goto LABEL_60;
        }
        uint64_t v35 = v8 + 1;
        unint64_t v16 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_57;
        }
        int v36 = *v35;
        int v37 = v16 + (v36 << 7);
        unint64_t v16 = (v37 - 128);
        if (v36 < 0)
        {
          uint64_t v48 = (char *)sub_188C138((uint64_t)v8, (v37 - 128));
          if (!v48) {
            goto LABEL_92;
          }
          unint64_t v16 = v45;
        }
        else
        {
          uint64_t v35 = v8 + 2;
LABEL_57:
          uint64_t v48 = v35;
        }
        if (v16 > 1)
        {
          if (*v7) {
            uint64_t v46 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v46 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          int v47 = 13;
LABEL_86:
          sub_188C020(v47, v16, v46);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800u;
          *(_DWORD *)(a1 + 128) = v16;
        }
        goto LABEL_70;
      default:
LABEL_60:
        if (v9) {
          BOOL v38 = (v9 & 7) == 4;
        }
        else {
          BOOL v38 = 1;
        }
        if (!v38)
        {
          if (v9 - 800 > 0x31F)
          {
            if (*v7)
            {
              uint64_t v39 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else
            {
              uint64_t v39 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              long long v8 = v48;
            }
            uint64_t v14 = (char *)sub_1885AC0(v9, v39, v8, a3);
          }
          else
          {
            uint64_t v14 = (char *)sub_18859DC((uint64_t **)(a1 + 16), v9, v8, (uint64_t)&off_253F2E8, (uint64_t *)(a1 + 8), a3);
          }
LABEL_69:
          uint64_t v48 = v14;
          if (!v14) {
            goto LABEL_92;
          }
LABEL_70:
          if (sub_11947B8((uint64_t)a3, &v48, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_92:
        }
          uint64_t v48 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 40) |= v5;
        return v48;
    }
  }
}

char *sub_15B4354(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15B3778(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15B43E4(uint64_t a1, char *a2, _DWORD *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)a2);
    }
    uint64_t v7 = *(void *)(a1 + 48);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15B0C0C(v7, v9, a3);
  }
  if ((v6 & 0x1000) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 132);
    char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v13 = *(void *)(a1 + 64);
    char *v4 = 25;
    *(void *)(v4 + 1) = v13;
    v4 += 9;
  }
  if ((v6 & 0x40) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v14 = *(int *)(a1 + 96);
    char *v4 = 32;
    v4[1] = v14;
    if (v14 > 0x7F)
    {
      v4[1] = v14 | 0x80;
      unint64_t v15 = v14 >> 7;
      v4[2] = v14 >> 7;
      v4 += 3;
      if (v14 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v16 = v15 >> 14;
          v15 >>= 7;
          *v4++ = v15;
        }
        while (v16);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 8) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v17 = *(void *)(a1 + 72);
    char *v4 = 41;
    *(void *)(v4 + 1) = v17;
    v4 += 9;
    if ((v6 & 0x10) == 0)
    {
LABEL_28:
      if ((v6 & 0x20) == 0) {
        goto LABEL_29;
      }
      goto LABEL_39;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_28;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v18 = *(void *)(a1 + 80);
  char *v4 = 49;
  *(void *)(v4 + 1) = v18;
  v4 += 9;
  if ((v6 & 0x20) == 0)
  {
LABEL_29:
    if ((v6 & 0x100) == 0) {
      goto LABEL_30;
    }
    goto LABEL_42;
  }
LABEL_39:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 88);
  char *v4 = 57;
  *(void *)(v4 + 1) = v19;
  v4 += 9;
  if ((v6 & 0x100) == 0)
  {
LABEL_30:
    if ((v6 & 0x200) == 0) {
      goto LABEL_31;
    }
    goto LABEL_45;
  }
LABEL_42:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v20 = *(void *)(a1 + 104);
  char *v4 = 65;
  *(void *)(v4 + 1) = v20;
  v4 += 9;
  if ((v6 & 0x200) == 0)
  {
LABEL_31:
    if ((v6 & 0x80) == 0) {
      goto LABEL_54;
    }
    goto LABEL_48;
  }
LABEL_45:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v21 = *(void *)(a1 + 112);
  char *v4 = 73;
  *(void *)(v4 + 1) = v21;
  v4 += 9;
  if ((v6 & 0x80) != 0)
  {
LABEL_48:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v22 = *(int *)(a1 + 100);
    char *v4 = 80;
    v4[1] = v22;
    if (v22 > 0x7F)
    {
      v4[1] = v22 | 0x80;
      unint64_t v23 = v22 >> 7;
      v4[2] = v22 >> 7;
      v4 += 3;
      if (v22 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v24 = v23 >> 14;
          v23 >>= 7;
          *v4++ = v23;
        }
        while (v24);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_54:
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v25 = *(void *)(a1 + 56);
    char *v4 = 90;
    unsigned int v26 = *(_DWORD *)(v25 + 20);
    v4[1] = v26;
    if (v26 > 0x7F) {
      uint64_t v27 = sub_188A9CC(v26, v4 + 1);
    }
    else {
      uint64_t v27 = v4 + 2;
    }
    uint64_t v4 = sub_15B3920(v25, (unint64_t)v27, a3);
    if ((v6 & 0x400) == 0)
    {
LABEL_56:
      if ((v6 & 0x800) == 0) {
        goto LABEL_73;
      }
      goto LABEL_67;
    }
  }
  else if ((v6 & 0x400) == 0)
  {
    goto LABEL_56;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v28 = *(void *)(a1 + 120);
  char *v4 = 97;
  *(void *)(v4 + 1) = v28;
  v4 += 9;
  if ((v6 & 0x800) != 0)
  {
LABEL_67:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v29 = *(int *)(a1 + 128);
    char *v4 = 104;
    v4[1] = v29;
    if (v29 > 0x7F)
    {
      v4[1] = v29 | 0x80;
      unint64_t v30 = v29 >> 7;
      v4[2] = v29 >> 7;
      v4 += 3;
      if (v29 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v31 = v30 >> 14;
          v30 >>= 7;
          *v4++ = v30;
        }
        while (v31);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_73:
  if (*(_WORD *)(a1 + 26)) {
    uint64_t v4 = sub_1886844(a1 + 16, 100, 200, v4, a3);
  }
  uint64_t v32 = *(void *)(a1 + 8);
  if ((v32 & 1) == 0) {
    return v4;
  }
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v34 + 31) < 0)
  {
    uint64_t v35 = *(void **)(v34 + 8);
    uint64_t v36 = *(void *)(v34 + 16);
  }
  else
  {
    uint64_t v35 = (void *)(v34 + 8);
    LODWORD(v36) = *(unsigned __int8 *)(v34 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v36)
  {
    uint64_t v37 = (int)v36;
    memcpy(v4, v35, (int)v36);
    v4 += v37;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v35, v36, v4);
}

uint64_t sub_15B4924(uint64_t a1)
{
  uint64_t v2 = sub_1889280(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = sub_15B0D90(*(void *)(a1 + 48));
    v2 += v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    int v3 = *(_DWORD *)(a1 + 40);
  }
  if ((v3 & 0xFE) != 0)
  {
    if ((v3 & 2) != 0)
    {
      uint64_t v5 = sub_15B3A48(*(void *)(a1 + 56));
      v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v6 = v2 + 9;
    if ((v3 & 4) == 0) {
      uint64_t v6 = v2;
    }
    if ((v3 & 8) != 0) {
      v6 += 9;
    }
    if ((v3 & 0x10) != 0) {
      v6 += 9;
    }
    if ((v3 & 0x20) != 0) {
      uint64_t v2 = v6 + 9;
    }
    else {
      uint64_t v2 = v6;
    }
    if ((v3 & 0x40) != 0)
    {
      int v7 = *(_DWORD *)(a1 + 96);
      uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v7 >= 0) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 11;
      }
      v2 += v9;
    }
    if ((v3 & 0x80) != 0)
    {
      int v10 = *(_DWORD *)(a1 + 100);
      uint64_t v11 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v10 >= 0) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 11;
      }
      v2 += v12;
    }
  }
  if ((v3 & 0x1F00) != 0)
  {
    uint64_t v13 = v2 + 9;
    if ((v3 & 0x100) == 0) {
      uint64_t v13 = v2;
    }
    if ((v3 & 0x200) != 0) {
      v13 += 9;
    }
    if ((v3 & 0x400) != 0) {
      uint64_t v2 = v13 + 9;
    }
    else {
      uint64_t v2 = v13;
    }
    if ((v3 & 0x800) != 0)
    {
      int v14 = *(_DWORD *)(a1 + 128);
      uint64_t v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v14 >= 0) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 11;
      }
      v2 += v16;
    }
    if ((v3 & 0x1000) != 0)
    {
      int v17 = *(_DWORD *)(a1 + 132);
      uint64_t v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v17 >= 0) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 11;
      }
      v2 += v19;
    }
  }
  uint64_t v20 = *(void *)(a1 + 8);
  if (v20)
  {
    unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v22 + 31) < 0) {
      uint64_t v23 = *(void *)(v22 + 16);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v22 + 31);
    }
    v2 += v23;
  }
  *(_DWORD *)(a1 + 44) = v2;
  return v2;
}

void sub_15B4B28(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_15B043C(a1);
    sub_15B04F0(a1, a2);
  }
}

void *sub_15B4B74@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.Location");
}

void *sub_15B4B84(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_148B948(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B4C04(void *a1)
{
  sub_15B4B84(a1);

  operator delete();
}

unsigned char *sub_15B4C3C(unsigned char *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((unsigned int *)result + 6);
  if ((int)v2 >= 1)
  {
    int v3 = (uint64_t *)(*((void *)result + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15B5354(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)v1 + 6) = 0;
  }
  char v6 = v1[8];
  uint64_t v5 = (uint64_t *)(v1 + 8);
  if (v6)
  {
    return (unsigned char *)sub_188B4AC(v5);
  }
  return result;
}

char *sub_15B4CB8(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  if ((sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      char v6 = v19 + 1;
      unsigned int v7 = *v19;
      if (*v19 < 0)
      {
        unsigned int v8 = v7 + (*v6 << 7);
        unsigned int v7 = v8 - 128;
        if (*v6 < 0)
        {
          char v6 = (char *)sub_188C180((uint64_t)v19, v8 - 128);
          unsigned int v7 = v9;
        }
        else
        {
          char v6 = v19 + 2;
        }
      }
      uint64_t v19 = v6;
      if (v7 == 10)
      {
        uint64_t v12 = v6 - 1;
        while (1)
        {
          uint64_t v13 = (unsigned __int8 *)(v12 + 1);
          uint64_t v19 = v12 + 1;
          int v14 = *(_DWORD **)(a1 + 32);
          if (v14 && (uint64_t v15 = *(int *)(a1 + 24), (int)v15 < *v14))
          {
            *(_DWORD *)(a1 + 24) = v15 + 1;
            uint64_t v16 = *(void *)&v14[2 * v15 + 2];
          }
          else
          {
            uint64_t v17 = sub_15C1DB0(*(void *)(a1 + 16));
            uint64_t v16 = sub_188CDC8(a1 + 16, v17);
            uint64_t v13 = (unsigned __int8 *)v19;
          }
          uint64_t v12 = (char *)sub_1382E38(a3, v16, v13);
          uint64_t v19 = v12;
          if (!v12) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
            goto LABEL_24;
          }
        }
      }
      if (!v7 || (v7 & 7) == 4) {
        break;
      }
      if (*v5)
      {
        uint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        uint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        char v6 = v19;
      }
      uint64_t v19 = (char *)sub_1885AC0(v7, v11, v6, a3);
      if (!v19) {
        return 0;
      }
LABEL_24:
      if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
        return v19;
      }
    }
    if (v6)
    {
      a3[10].i32[0] = v7 - 1;
      return v19;
    }
    return 0;
  }
  return v19;
}

char *sub_15B4E58(uint64_t a1, char *__dst, void *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        int v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        int v10 = __dst + 2;
      }
      __dst = sub_15B58D0(v8, v10, a3);
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return __dst;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    int v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    int v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if (*a3 - (void)__dst >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(__dst, v14, (int)v15);
    __dst += v16;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v14, v15, __dst);
}

uint64_t sub_15B4F9C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15B5BAC(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void sub_15B504C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 16, *(_DWORD *)(a2 + 24));
    sub_148D38C((uint64_t *)(a1 + 16), v6, v5, v4, **(_DWORD **)(a1 + 32) - *(_DWORD *)(a1 + 24));
    int v7 = *(_DWORD *)(a1 + 24) + v4;
    *(_DWORD *)(a1 + 24) = v7;
    uint64_t v8 = *(int **)(a1 + 32);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

BOOL sub_15B511C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  do
  {
    int v3 = v2;
    if ((int)v2 < 1) {
      break;
    }
    uint64_t v4 = v2 - 1;
    char v5 = sub_18856CC(*(void *)(*(void *)(a1 + 32) + 8 * v2) + 16);
    uint64_t v2 = v4;
  }
  while ((v5 & 1) != 0);
  return v3 < 1;
}

void *sub_15B5178@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.NameInfoList");
}

uint64_t sub_15B5188(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2 | 2;
  if (!a3) {
    uint64_t v4 = a2;
  }
  *(void *)(a1 + 8) = v4;
  *(void *)a1 = off_24C4910;
  sub_1882BC4(a1 + 16, a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &qword_2550250;
  *(void *)(a1 + 56) = &qword_2550250;
  *(void *)(a1 + 64) = &qword_2550250;
  *(void *)(a1 + 72) = &qword_2550250;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_15B5204(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15B5234(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_13;
    }
  }
  else if (v4)
  {
    goto LABEL_13;
  }
  char v5 = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 56));
  }
  if (*(uint64_t **)(a1 + 64) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 64));
  }
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 72));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_13:
  sub_1882CC0(a1 + 16);
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B531C(uint64_t a1)
{
  sub_15B5234(a1);

  operator delete();
}

unsigned char *sub_15B5354(uint64_t a1)
{
  uint64_t result = sub_18843A4((unsigned char *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0xF) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_11:
      unint64_t v5 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v3 & 4) != 0) {
          goto LABEL_15;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(unsigned char *)(v5 + 23) = 0;
        if ((v3 & 4) != 0) {
          goto LABEL_15;
        }
      }
LABEL_5:
      if ((v3 & 8) == 0) {
        goto LABEL_22;
      }
LABEL_19:
      unint64_t v7 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v7 + 23) < 0)
      {
        **(unsigned char **)unint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
      }
      else
      {
        *(unsigned char *)unint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
      }
      goto LABEL_22;
    }
    unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_11;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_11;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_15:
    unint64_t v6 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v3 & 8) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v3 & 8) == 0) {
        goto LABEL_22;
      }
    }
    goto LABEL_19;
  }
LABEL_22:
  if ((v3 & 0x70) != 0)
  {
    *(_DWORD *)(a1 + 88) = 0;
    *(void *)(a1 + 80) = 0;
  }
  char v9 = *(unsigned char *)(a1 + 8);
  uint64_t v8 = a1 + 8;
  *(_DWORD *)(v8 + 32) = 0;
  if (v9)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v8);
  }
  return result;
}

uint64_t sub_15B5490(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v35 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v35, a3[11].i32[1])) {
    goto LABEL_2;
  }
  unint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = (char *)(*(void *)v35 + 1);
    unsigned int v9 = **(unsigned char **)v35;
    if ((char)**(unsigned char **)v35 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v35, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (char *)(*(void *)v35 + 2);
      }
    }
    *(void *)uint64_t v35 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 48);
        goto LABEL_43;
      case 2u:
        if (v9 != 18) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 56);
        goto LABEL_43;
      case 3u:
        if (v9 != 26) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v16 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 64);
        goto LABEL_43;
      case 4u:
        if (v9 != 32) {
          goto LABEL_47;
        }
        uint64_t v17 = v8 + 1;
        LODWORD(v18) = *v8;
        if (*v8 < 0)
        {
          uint64_t v18 = v18 + (*v17 << 7) - 128;
          if (*v17 < 0) {
            uint64_t v17 = (char *)sub_188C138((uint64_t)v8, v18);
          }
          else {
            uint64_t v17 = v8 + 2;
          }
        }
        v5 |= 0x10u;
        *(void *)uint64_t v35 = v17;
        *(_DWORD *)(a1 + 80) = -(v18 & 1) ^ (v18 >> 1);
        if (!v17) {
          goto LABEL_75;
        }
        goto LABEL_45;
      case 5u:
        if (v9 != 40) {
          goto LABEL_47;
        }
        uint64_t v19 = v8 + 1;
        unint64_t v20 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_29;
        }
        int v21 = *v19;
        int v22 = v20 + (v21 << 7);
        unint64_t v20 = (v22 - 128);
        if (v21 < 0)
        {
          *(void *)uint64_t v35 = sub_188C138((uint64_t)v8, (v22 - 128));
          if (!*(void *)v35) {
            goto LABEL_75;
          }
          unint64_t v20 = v31;
        }
        else
        {
          uint64_t v19 = v8 + 2;
LABEL_29:
          *(void *)uint64_t v35 = v19;
        }
        if (v20 <= 2)
        {
          *(_DWORD *)(a1 + 40) |= 0x20u;
          *(_DWORD *)(a1 + 84) = v20;
          goto LABEL_45;
        }
        if (*v7) {
          uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v33 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v34 = 5;
        goto LABEL_69;
      case 6u:
        if (v9 != 48) {
          goto LABEL_47;
        }
        uint64_t v23 = v8 + 1;
        unint64_t v20 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v24 = *v23;
        int v25 = v20 + (v24 << 7);
        unint64_t v20 = (v25 - 128);
        if (v24 < 0)
        {
          *(void *)uint64_t v35 = sub_188C138((uint64_t)v8, (v25 - 128));
          if (!*(void *)v35) {
            goto LABEL_75;
          }
          unint64_t v20 = v32;
        }
        else
        {
          uint64_t v23 = v8 + 2;
LABEL_36:
          *(void *)uint64_t v35 = v23;
        }
        if (v20 > 3)
        {
          if (*v7) {
            uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v33 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          int v34 = 6;
LABEL_69:
          sub_188C020(v34, v20, v33);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x40u;
          *(_DWORD *)(a1 + 88) = v20;
        }
        goto LABEL_45;
      case 7u:
        if (v9 != 58) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v26 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 72);
LABEL_43:
        uint64_t v27 = (std::string *)sub_1880F84(v14, v13);
        uint64_t v28 = (void *)sub_188C244(v27, *(char **)v35, (uint64_t)a3);
        goto LABEL_44;
      default:
LABEL_47:
        if (v9) {
          BOOL v29 = (v9 & 7) == 4;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29)
        {
          if (v9 - 7600 > 0x18F)
          {
            if (*v7)
            {
              unint64_t v30 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else
            {
              unint64_t v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              uint64_t v8 = *(char **)v35;
            }
            uint64_t v28 = sub_1885AC0(v9, v30, v8, a3);
          }
          else
          {
            uint64_t v28 = sub_18859DC((uint64_t **)(a1 + 16), v9, v8, (uint64_t)&off_253F370, (uint64_t *)(a1 + 8), a3);
          }
LABEL_44:
          *(void *)uint64_t v35 = v28;
          if (!v28) {
            goto LABEL_75;
          }
LABEL_45:
          if (sub_11947B8((uint64_t)a3, (char **)v35, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_75:
        }
          *(void *)uint64_t v35 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 40) |= v5;
        return *(void *)v35;
    }
  }
}

char *sub_15B58D0(uint64_t a1, char *a2, void *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  int v7 = *(_DWORD *)(a1 + 80);
  char *v4 = 32;
  unsigned int v8 = (2 * v7) ^ (v7 >> 31);
  v4[1] = (2 * v7) ^ (v7 >> 31);
  if (v8 > 0x7F)
  {
    v4[1] = v8 | 0x80;
    unsigned int v9 = v8 >> 7;
    v4[2] = v8 >> 7;
    v4 += 3;
    if (v8 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unsigned int v10 = v9 >> 14;
        v9 >>= 7;
        *v4++ = v9;
      }
      while (v10);
    }
  }
  else
  {
    v4 += 2;
  }
LABEL_15:
  if ((v6 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v11 = *(int *)(a1 + 84);
    char *v4 = 40;
    v4[1] = v11;
    if (v11 > 0x7F)
    {
      v4[1] = v11 | 0x80;
      unint64_t v12 = v11 >> 7;
      v4[2] = v11 >> 7;
      v4 += 3;
      if (v11 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v13 = v12 >> 14;
          v12 >>= 7;
          *v4++ = v12;
        }
        while (v13);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v14 = *(int *)(a1 + 88);
    char *v4 = 48;
    v4[1] = v14;
    if (v14 > 0x7F)
    {
      v4[1] = v14 | 0x80;
      unint64_t v15 = v14 >> 7;
      v4[2] = v14 >> 7;
      v4 += 3;
      if (v14 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v16 = v15 >> 14;
          v15 >>= 7;
          *v4++ = v15;
        }
        while (v16);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 8) != 0) {
    unint64_t v4 = sub_117A0AC(a3, 7, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  if (*(_WORD *)(a1 + 26)) {
    unint64_t v4 = sub_1886844(a1 + 16, 950, 1000, v4, a3);
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if ((v17 & 1) == 0) {
    return v4;
  }
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v19 + 31) < 0)
  {
    unint64_t v20 = *(void **)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 16);
  }
  else
  {
    unint64_t v20 = (void *)(v19 + 8);
    LODWORD(v21) = *(unsigned __int8 *)(v19 + 31);
  }
  if (*a3 - (void)v4 >= (int)v21)
  {
    uint64_t v22 = (int)v21;
    memcpy(v4, v20, (int)v21);
    v4 += v22;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v20, v21, v4);
}

uint64_t sub_15B5BAC(uint64_t a1)
{
  uint64_t result = sub_1889280(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x7F) == 0) {
    goto LABEL_31;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v6 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v5;
    }
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_16;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  uint64_t v9 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v8;
  }
  result += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) == 0)
  {
LABEL_5:
    if ((v3 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_16:
  unint64_t v10 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  uint64_t v12 = *(void *)(v10 + 8);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v11;
  }
  result += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 8) == 0)
  {
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_19:
  unint64_t v13 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  uint64_t v15 = *(void *)(v13 + 8);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v14;
  }
  result += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  result += ((9 * (__clz((2 * *(_DWORD *)(a1 + 80)) ^ (*(int *)(a1 + 80) >> 31) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
LABEL_23:
  int v16 = *(_DWORD *)(a1 + 84);
  if (v16 < 0) {
    uint64_t v17 = 11;
  }
  else {
    uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v17;
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    int v18 = *(_DWORD *)(a1 + 88);
    if (v18 < 0) {
      uint64_t v19 = 11;
    }
    else {
      uint64_t v19 = ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    result += v19;
  }
LABEL_31:
  uint64_t v20 = *(void *)(a1 + 8);
  if (v20)
  {
    unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v21 + 31) < 0) {
      uint64_t v22 = *(void *)(v21 + 16);
    }
    else {
      uint64_t v22 = *(unsigned __int8 *)(v21 + 31);
    }
    result += v22;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_15B5DD4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 40);
  if ((v4 & 0x7F) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      unint64_t v7 = (std::string **)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_21;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    unint64_t v10 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    sub_1881DF4((std::string **)(a1 + 56), v10, v12);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_24;
    }
LABEL_21:
    unint64_t v13 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 4u;
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (uint64_t *)*v15;
    }
    sub_1881DF4((std::string **)(a1 + 64), v13, v15);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
LABEL_24:
    int v16 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 8u;
    uint64_t v17 = *(void *)(a1 + 8);
    int v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      int v18 = (uint64_t *)*v18;
    }
    sub_1881DF4((std::string **)(a1 + 72), v16, v18);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_28;
    }
LABEL_27:
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    if ((v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v4 & 0x40) == 0)
      {
LABEL_10:
        *(_DWORD *)(a1 + 40) |= v4;
        goto LABEL_11;
      }
LABEL_9:
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      goto LABEL_10;
    }
LABEL_28:
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  sub_1884444(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15B5F68(uint64_t a1)
{
  return sub_18856CC(a1 + 16);
}

void *sub_15B5F70@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.NameInfo");
}

uint64_t sub_15B5F80(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B6020(uint64_t a1)
{
  sub_15B5F80(a1);

  operator delete();
}

uint64_t sub_15B6058(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v1 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v3) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15B60A0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v24 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
    return *(void *)v24;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = (char *)(*(void *)v24 + 1);
    unsigned int v8 = **(unsigned char **)v24;
    if ((char)**(unsigned char **)v24 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180(*(uint64_t *)v24, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = (char *)(*(void *)v24 + 2);
      }
    }
    *(void *)int v24 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v15 = *(void *)(a1 + 8);
    int v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      int v16 = (uint64_t *)*v16;
    }
    uint64_t v17 = (std::string *)sub_1880F84((void *)(a1 + 24), v16);
    uint64_t v14 = (void *)sub_188C244(v17, *(char **)v24, (uint64_t)a3);
LABEL_24:
    *(void *)int v24 = v14;
    if (!v14) {
      goto LABEL_43;
    }
LABEL_32:
    if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
      return *(void *)v24;
    }
  }
  if (v8 >> 3 == 1 && v8 == 8)
  {
    int v18 = v7 + 1;
    unint64_t v19 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    int v20 = *v18;
    int v21 = v19 + (v20 << 7);
    unint64_t v19 = (v21 - 128);
    if (v20 < 0)
    {
      *(void *)int v24 = sub_188C138((uint64_t)v7, (v21 - 128));
      if (!*(void *)v24) {
        goto LABEL_43;
      }
      unint64_t v19 = v22;
    }
    else
    {
      int v18 = v7 + 2;
LABEL_29:
      *(void *)int v24 = v18;
    }
    if (v19 > 3)
    {
      if (*v6) {
        uint64_t v23 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v23 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(1, v19, v23);
    }
    else
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_DWORD *)(a1 + 32) = v19;
    }
    goto LABEL_32;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      unint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = *(char **)v24;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_24;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v24;
  }
LABEL_43:
  *(void *)int v24 = 0;
  return *(void *)v24;
}

unsigned char *sub_15B62B0(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  int v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*a3 <= __dst) {
      int v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 32);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6) {
    int v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    unint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    unint64_t v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15B63F8(uint64_t a1)
{
  if ((~*(_DWORD *)(a1 + 16) & 3) != 0)
  {
    uint64_t result = sub_14D9A40(a1);
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = v3;
    }
    uint64_t v5 = (9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6;
    int v6 = *(_DWORD *)(a1 + 32);
    uint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    if (v6 >= 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 10;
    }
    uint64_t result = v4 + v5 + v8 + 2;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

BOOL sub_15B64CC(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 3) == 0;
}

void *sub_15B64E0@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.StructuredAddress.SubPremise");
}

void *sub_15B64F0(void *result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *uint64_t result = off_24C4A10;
  result[1] = v3;
  result[2] = 0;
  result[3] = a2;
  result[4] = 0;
  result[5] = 0;
  result[6] = a2;
  result[7] = 0;
  result[8] = 0;
  result[9] = a2;
  result[10] = 0;
  result[11] = 0;
  result[12] = 0;
  result[13] = a2;
  result[14] = &qword_2550250;
  result[15] = &qword_2550250;
  result[16] = &qword_2550250;
  result[17] = &qword_2550250;
  result[18] = &qword_2550250;
  result[19] = &qword_2550250;
  result[20] = &qword_2550250;
  result[21] = &qword_2550250;
  result[22] = &qword_2550250;
  result[23] = &qword_2550250;
  result[24] = &qword_2550250;
  result[25] = &qword_2550250;
  result[26] = &qword_2550250;
  result[27] = &qword_2550250;
  result[28] = &qword_2550250;
  result[29] = &qword_2550250;
  result[30] = &qword_2550250;
  return result;
}

uint64_t sub_15B6560(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_24C4A10;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = a1 + 24;
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 20) = 0;
  int v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_188FB98(v5, v8, (const std::string **)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    uint64_t v10 = *(int **)(a1 + 40);
    if (*v10 < v9) {
      *uint64_t v10 = v9;
    }
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int v11 = *(_DWORD *)(a2 + 56);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 64);
    unint64_t v13 = (std::string **)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_188FB98(a1 + 48, v13, (const std::string **)(v12 + 8), v11, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v14 = *(_DWORD *)(a1 + 56) + v11;
    *(_DWORD *)(a1 + 56) = v14;
    uint64_t v15 = *(int **)(a1 + 64);
    if (*v15 < v14) {
      *uint64_t v15 = v14;
    }
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  int v16 = *(_DWORD *)(a2 + 80);
  if (v16)
  {
    uint64_t v17 = *(void *)(a2 + 88);
    int v18 = (std::string **)sub_188CCE4(a1 + 72, *(_DWORD *)(a2 + 80));
    sub_1638408((uint64_t *)(a1 + 72), v18, (uint64_t *)(v17 + 8), v16, **(_DWORD **)(a1 + 88) - *(_DWORD *)(a1 + 80));
    int v19 = *(_DWORD *)(a1 + 80) + v16;
    *(_DWORD *)(a1 + 80) = v19;
    int v20 = *(int **)(a1 + 88);
    if (*v20 < v19) {
      int *v20 = v19;
    }
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  int v21 = *(_DWORD *)(a2 + 96);
  if (v21)
  {
    sub_188CA54((unsigned int *)(a1 + 96), v21);
    unint64_t v22 = *(void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) += *(_DWORD *)(a2 + 96);
    memcpy(v22, *(const void **)(a2 + 104), 8 * *(int *)(a2 + 96));
  }
  uint64_t v23 = *(void *)(a2 + 8);
  if (v23) {
    sub_188B4F8(v4, (v23 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(void *)(a1 + 112) = &qword_2550250;
  int v24 = *(_DWORD *)(a2 + 16);
  if (v24)
  {
    int v25 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      int v25 = (uint64_t *)*v25;
    }
    sub_1881DF4((std::string **)(a1 + 112), (long long *)(*(void *)(a2 + 112) & 0xFFFFFFFFFFFFFFFELL), v25);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 120) = &qword_2550250;
  if ((v24 & 2) != 0)
  {
    uint64_t v26 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v26 = (uint64_t *)*v26;
    }
    sub_1881DF4((std::string **)(a1 + 120), (long long *)(*(void *)(a2 + 120) & 0xFFFFFFFFFFFFFFFELL), v26);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 128) = &qword_2550250;
  if ((v24 & 4) != 0)
  {
    uint64_t v27 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v27 = (uint64_t *)*v27;
    }
    sub_1881DF4((std::string **)(a1 + 128), (long long *)(*(void *)(a2 + 128) & 0xFFFFFFFFFFFFFFFELL), v27);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 136) = &qword_2550250;
  if ((v24 & 8) != 0)
  {
    uint64_t v28 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v28 = (uint64_t *)*v28;
    }
    sub_1881DF4((std::string **)(a1 + 136), (long long *)(*(void *)(a2 + 136) & 0xFFFFFFFFFFFFFFFELL), v28);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 144) = &qword_2550250;
  if ((v24 & 0x10) != 0)
  {
    BOOL v29 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      BOOL v29 = (uint64_t *)*v29;
    }
    sub_1881DF4((std::string **)(a1 + 144), (long long *)(*(void *)(a2 + 144) & 0xFFFFFFFFFFFFFFFELL), v29);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 152) = &qword_2550250;
  if ((v24 & 0x20) != 0)
  {
    unint64_t v30 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      unint64_t v30 = (uint64_t *)*v30;
    }
    sub_1881DF4((std::string **)(a1 + 152), (long long *)(*(void *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL), v30);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 160) = &qword_2550250;
  if ((v24 & 0x40) != 0)
  {
    unint64_t v31 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      unint64_t v31 = (uint64_t *)*v31;
    }
    sub_1881DF4((std::string **)(a1 + 160), (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL), v31);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 168) = &qword_2550250;
  if ((v24 & 0x80) != 0)
  {
    unint64_t v32 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      unint64_t v32 = (uint64_t *)*v32;
    }
    sub_1881DF4((std::string **)(a1 + 168), (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL), v32);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 176) = &qword_2550250;
  if ((v24 & 0x100) != 0)
  {
    uint64_t v33 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v33 = (uint64_t *)*v33;
    }
    sub_1881DF4((std::string **)(a1 + 176), (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL), v33);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 184) = &qword_2550250;
  if ((v24 & 0x200) != 0)
  {
    int v34 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      int v34 = (uint64_t *)*v34;
    }
    sub_1881DF4((std::string **)(a1 + 184), (long long *)(*(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL), v34);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 192) = &qword_2550250;
  if ((v24 & 0x400) != 0)
  {
    uint64_t v35 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v35 = (uint64_t *)*v35;
    }
    sub_1881DF4((std::string **)(a1 + 192), (long long *)(*(void *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL), v35);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 200) = &qword_2550250;
  if ((v24 & 0x800) != 0)
  {
    uint64_t v36 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v36 = (uint64_t *)*v36;
    }
    sub_1881DF4((std::string **)(a1 + 200), (long long *)(*(void *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL), v36);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 208) = &qword_2550250;
  if ((v24 & 0x1000) != 0)
  {
    uint64_t v37 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v37 = (uint64_t *)*v37;
    }
    sub_1881DF4((std::string **)(a1 + 208), (long long *)(*(void *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL), v37);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 216) = &qword_2550250;
  if ((v24 & 0x2000) != 0)
  {
    BOOL v38 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      BOOL v38 = (uint64_t *)*v38;
    }
    sub_1881DF4((std::string **)(a1 + 216), (long long *)(*(void *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL), v38);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 224) = &qword_2550250;
  if ((v24 & 0x4000) != 0)
  {
    uint64_t v39 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v39 = (uint64_t *)*v39;
    }
    sub_1881DF4((std::string **)(a1 + 224), (long long *)(*(void *)(a2 + 224) & 0xFFFFFFFFFFFFFFFELL), v39);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 232) = &qword_2550250;
  if ((v24 & 0x8000) != 0)
  {
    unint64_t v40 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      unint64_t v40 = (uint64_t *)*v40;
    }
    sub_1881DF4((std::string **)(a1 + 232), (long long *)(*(void *)(a2 + 232) & 0xFFFFFFFFFFFFFFFELL), v40);
    int v24 = *(_DWORD *)(a2 + 16);
  }
  *(void *)(a1 + 240) = &qword_2550250;
  if ((v24 & 0x10000) != 0)
  {
    int v41 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      int v41 = (uint64_t *)*v41;
    }
    sub_1881DF4((std::string **)(a1 + 240), (long long *)(*(void *)(a2 + 240) & 0xFFFFFFFFFFFFFFFELL), v41);
  }
  return a1;
}

void sub_15B6A98(_Unwind_Exception *a1)
{
  sub_1638388(v5);
  sub_1889DE8(v4);
  sub_1889DE8(v3);
  *unint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B6B10(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15B6BB8((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_1889DA8((uint64_t)(a1 + 12));
  sub_1638388(a1 + 9);
  sub_1889DE8(a1 + 6);
  sub_1889DE8(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void ***sub_15B6BB8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 112);
  uint64_t v2 = (void ***)(a1 + 112);
  if (v3 != &qword_2550250) {
    sub_1881C6C(v2);
  }
  if (*(uint64_t **)(a1 + 120) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 120));
  }
  if (*(uint64_t **)(a1 + 128) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 128));
  }
  if (*(uint64_t **)(a1 + 136) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 136));
  }
  if (*(uint64_t **)(a1 + 144) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 144));
  }
  if (*(uint64_t **)(a1 + 152) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 152));
  }
  if (*(uint64_t **)(a1 + 160) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 160));
  }
  if (*(uint64_t **)(a1 + 168) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 168));
  }
  if (*(uint64_t **)(a1 + 176) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 176));
  }
  if (*(uint64_t **)(a1 + 184) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 184));
  }
  if (*(uint64_t **)(a1 + 192) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 192));
  }
  if (*(uint64_t **)(a1 + 200) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 200));
  }
  if (*(uint64_t **)(a1 + 208) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 208));
  }
  if (*(uint64_t **)(a1 + 216) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 216));
  }
  if (*(uint64_t **)(a1 + 224) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 224));
  }
  uint64_t result = (void ***)(a1 + 232);
  if (*(uint64_t **)(a1 + 232) != &qword_2550250) {
    sub_1881C6C(result);
  }
  int v6 = *(uint64_t **)(a1 + 240);
  uint64_t v5 = (void ***)(a1 + 240);
  if (v6 != &qword_2550250)
  {
    sub_1881C6C(v5);
  }
  return result;
}

void sub_15B6D4C(void *a1)
{
  sub_15B6B10(a1);

  operator delete();
}

uint64_t sub_15B6D84(uint64_t a1)
{
  sub_188CC00(a1 + 24);
  uint64_t result = sub_188CC00(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = (uint64_t *)(*(void *)(a1 + 88) + 8);
    do
    {
      uint64_t v5 = *v4++;
      uint64_t result = sub_15B6058(v5);
      --v3;
    }
    while (v3);
    *(_DWORD *)(a1 + 80) = 0;
  }
  *(_DWORD *)(a1 + 96) = 0;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) == 0)
    {
      if ((v6 & 2) == 0) {
        goto LABEL_8;
      }
LABEL_19:
      unint64_t v8 = *(void *)(a1 + 120) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v8 + 23) < 0)
      {
        **(unsigned char **)unint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        if ((v6 & 4) != 0) {
          goto LABEL_23;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v8 = 0;
        *(unsigned char *)(v8 + 23) = 0;
        if ((v6 & 4) != 0) {
          goto LABEL_23;
        }
      }
LABEL_9:
      if ((v6 & 8) == 0) {
        goto LABEL_10;
      }
LABEL_27:
      unint64_t v10 = *(void *)(a1 + 136) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        **(unsigned char **)unint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        if ((v6 & 0x10) != 0) {
          goto LABEL_31;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v10 = 0;
        *(unsigned char *)(v10 + 23) = 0;
        if ((v6 & 0x10) != 0) {
          goto LABEL_31;
        }
      }
LABEL_11:
      if ((v6 & 0x20) == 0) {
        goto LABEL_12;
      }
LABEL_35:
      unint64_t v12 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v12 + 23) < 0)
      {
        **(unsigned char **)unint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        if ((v6 & 0x40) != 0) {
          goto LABEL_39;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v12 = 0;
        *(unsigned char *)(v12 + 23) = 0;
        if ((v6 & 0x40) != 0) {
          goto LABEL_39;
        }
      }
LABEL_13:
      if ((v6 & 0x80) == 0) {
        goto LABEL_46;
      }
LABEL_43:
      unint64_t v14 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v14 + 23) < 0)
      {
        **(unsigned char **)unint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
      }
      else
      {
        *(unsigned char *)unint64_t v14 = 0;
        *(unsigned char *)(v14 + 23) = 0;
      }
      goto LABEL_46;
    }
    unint64_t v7 = *(void *)(a1 + 112) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)unint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      if ((v6 & 2) != 0) {
        goto LABEL_19;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
      if ((v6 & 2) != 0) {
        goto LABEL_19;
      }
    }
LABEL_8:
    if ((v6 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_23:
    unint64_t v9 = *(void *)(a1 + 128) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0)
    {
      **(unsigned char **)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      if ((v6 & 8) != 0) {
        goto LABEL_27;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v9 = 0;
      *(unsigned char *)(v9 + 23) = 0;
      if ((v6 & 8) != 0) {
        goto LABEL_27;
      }
    }
LABEL_10:
    if ((v6 & 0x10) == 0) {
      goto LABEL_11;
    }
LABEL_31:
    unint64_t v11 = *(void *)(a1 + 144) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
    {
      **(unsigned char **)unint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      if ((v6 & 0x20) != 0) {
        goto LABEL_35;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v11 = 0;
      *(unsigned char *)(v11 + 23) = 0;
      if ((v6 & 0x20) != 0) {
        goto LABEL_35;
      }
    }
LABEL_12:
    if ((v6 & 0x40) == 0) {
      goto LABEL_13;
    }
LABEL_39:
    unint64_t v13 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0)
    {
      **(unsigned char **)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      if ((v6 & 0x80) == 0) {
        goto LABEL_46;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v13 = 0;
      *(unsigned char *)(v13 + 23) = 0;
      if ((v6 & 0x80) == 0) {
        goto LABEL_46;
      }
    }
    goto LABEL_43;
  }
LABEL_46:
  if ((v6 & 0xFF00) == 0) {
    goto LABEL_86;
  }
  if ((v6 & 0x100) == 0)
  {
    if ((v6 & 0x200) == 0) {
      goto LABEL_49;
    }
LABEL_60:
    unint64_t v16 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 23) < 0)
    {
      **(unsigned char **)unint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      if ((v6 & 0x400) != 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v16 = 0;
      *(unsigned char *)(v16 + 23) = 0;
      if ((v6 & 0x400) != 0) {
        goto LABEL_64;
      }
    }
LABEL_50:
    if ((v6 & 0x800) == 0) {
      goto LABEL_51;
    }
LABEL_68:
    unint64_t v18 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v18 + 23) < 0)
    {
      **(unsigned char **)unint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      if ((v6 & 0x1000) != 0) {
        goto LABEL_72;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v18 = 0;
      *(unsigned char *)(v18 + 23) = 0;
      if ((v6 & 0x1000) != 0) {
        goto LABEL_72;
      }
    }
LABEL_52:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_53;
    }
LABEL_76:
    unint64_t v20 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v20 + 23) < 0)
    {
      **(unsigned char **)unint64_t v20 = 0;
      *(void *)(v20 + 8) = 0;
      if ((v6 & 0x4000) != 0) {
        goto LABEL_80;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v20 = 0;
      *(unsigned char *)(v20 + 23) = 0;
      if ((v6 & 0x4000) != 0) {
        goto LABEL_80;
      }
    }
LABEL_54:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_84;
  }
  unint64_t v15 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 23) < 0)
  {
    **(unsigned char **)unint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
    if ((v6 & 0x200) != 0) {
      goto LABEL_60;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v15 = 0;
    *(unsigned char *)(v15 + 23) = 0;
    if ((v6 & 0x200) != 0) {
      goto LABEL_60;
    }
  }
LABEL_49:
  if ((v6 & 0x400) == 0) {
    goto LABEL_50;
  }
LABEL_64:
  unint64_t v17 = *(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v17 + 23) < 0)
  {
    **(unsigned char **)unint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    if ((v6 & 0x800) != 0) {
      goto LABEL_68;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v17 = 0;
    *(unsigned char *)(v17 + 23) = 0;
    if ((v6 & 0x800) != 0) {
      goto LABEL_68;
    }
  }
LABEL_51:
  if ((v6 & 0x1000) == 0) {
    goto LABEL_52;
  }
LABEL_72:
  unint64_t v19 = *(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v19 + 23) < 0)
  {
    **(unsigned char **)unint64_t v19 = 0;
    *(void *)(v19 + 8) = 0;
    if ((v6 & 0x2000) != 0) {
      goto LABEL_76;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v19 = 0;
    *(unsigned char *)(v19 + 23) = 0;
    if ((v6 & 0x2000) != 0) {
      goto LABEL_76;
    }
  }
LABEL_53:
  if ((v6 & 0x4000) == 0) {
    goto LABEL_54;
  }
LABEL_80:
  unint64_t v21 = *(void *)(a1 + 224) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v21 + 23) < 0)
  {
    **(unsigned char **)unint64_t v21 = 0;
    *(void *)(v21 + 8) = 0;
    if ((v6 & 0x8000) == 0) {
      goto LABEL_86;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v21 = 0;
    *(unsigned char *)(v21 + 23) = 0;
    if ((v6 & 0x8000) == 0) {
      goto LABEL_86;
    }
  }
LABEL_84:
  unint64_t v22 = *(void *)(a1 + 232) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v22 + 23) < 0)
  {
    **(unsigned char **)unint64_t v22 = 0;
    *(void *)(v22 + 8) = 0;
    if ((v6 & 0x10000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
  *(unsigned char *)unint64_t v22 = 0;
  *(unsigned char *)(v22 + 23) = 0;
LABEL_86:
  if ((v6 & 0x10000) == 0) {
    goto LABEL_91;
  }
LABEL_87:
  unint64_t v23 = *(void *)(a1 + 240) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 23) < 0)
  {
    **(unsigned char **)unint64_t v23 = 0;
    *(void *)(v23 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v23 = 0;
    *(unsigned char *)(v23 + 23) = 0;
  }
LABEL_91:
  char v25 = *(unsigned char *)(a1 + 8);
  uint64_t v24 = a1 + 8;
  *(_DWORD *)(v24 + 8) = 0;
  if (v25)
  {
    return sub_188B4AC((uint64_t *)v24);
  }
  return result;
}

char *sub_15B7194(uint64_t a1, char *a2, int32x2_t *a3)
{
  v62[0] = a2;
  if (sub_11947B8((uint64_t)a3, v62, a3[11].i32[1])) {
    return v62[0];
  }
  uint64_t v61 = (uint64_t *)(a1 + 8);
  int v6 = (uint64_t **)(a1 + 48);
  unint64_t v7 = (uint64_t **)(a1 + 24);
  while (2)
  {
    unint64_t v8 = v62[0] + 1;
    unsigned int v9 = *v62[0];
    if (*v62[0] < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        unint64_t v8 = (char *)sub_188C180((uint64_t)v62[0], v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        unint64_t v8 = v62[0] + 2;
      }
    }
    v62[0] = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 112);
        goto LABEL_126;
      case 2u:
        if (v9 != 18) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v21 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
        if (v21) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 120);
        goto LABEL_126;
      case 3u:
        if (v9 != 26) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v22 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        if (v22) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 128);
        goto LABEL_126;
      case 4u:
        if (v9 != 34) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v23 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if (v23) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 136);
        goto LABEL_126;
      case 5u:
        if (v9 != 42) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v24 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 144);
        goto LABEL_126;
      case 6u:
        if (v9 != 50) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v25 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
        if (v25) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 152);
        goto LABEL_126;
      case 7u:
        if (v9 != 58) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v26 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 160);
        goto LABEL_126;
      case 8u:
        if (v9 != 66) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x80u;
        uint64_t v27 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        if (v27) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 168);
        goto LABEL_126;
      case 9u:
        if (v9 != 74) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x100u;
        uint64_t v28 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
        if (v28) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 176);
        goto LABEL_126;
      case 0xAu:
        if (v9 != 82) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x200u;
        uint64_t v29 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
        if (v29) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 184);
        goto LABEL_126;
      case 0xBu:
        if (v9 != 90) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x400u;
        uint64_t v30 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
        if (v30) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 192);
        goto LABEL_126;
      case 0xCu:
        if (v9 != 98) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x800u;
        uint64_t v31 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
        if (v31) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 200);
        goto LABEL_126;
      case 0xDu:
        if (v9 != 106) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x1000u;
        uint64_t v32 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
        if (v32) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 208);
        goto LABEL_126;
      case 0xEu:
        if (v9 != 114) {
          goto LABEL_132;
        }
        uint64_t v33 = v8 - 1;
        while (1)
        {
          int v34 = (char *)(v33 + 1);
          v62[0] = (char *)(v33 + 1);
          uint64_t v35 = *(_DWORD **)(a1 + 40);
          if (v35 && (uint64_t v36 = *(int *)(a1 + 32), (int)v36 < *v35))
          {
            *(_DWORD *)(a1 + 32) = v36 + 1;
            uint64_t v37 = *(std::string **)&v35[2 * v36 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            void *v39 = v38;
            v39[1] = sub_3A6EDC;
            void *v38 = 0;
            v38[1] = 0;
            int v38[2] = 0;
            uint64_t v37 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v38);
            int v34 = v62[0];
          }
          uint64_t v33 = sub_188C244(v37, v34, (uint64_t)a3);
          v62[0] = (char *)v33;
          if (!v33) {
            goto LABEL_142;
          }
          if (*(void *)a3 <= (unint64_t)v33 || *v33 != 114) {
            goto LABEL_128;
          }
        }
      case 0xFu:
        if (v9 != 122) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x2000u;
        uint64_t v40 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
        if (v40) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 216);
        goto LABEL_126;
      case 0x10u:
        if (v9 != 130) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x4000u;
        uint64_t v41 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
        if (v41) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 224);
        goto LABEL_126;
      case 0x11u:
        if (v9 != 138) {
          goto LABEL_132;
        }
        int v42 = v8 - 2;
        while (1)
        {
          uint64_t v43 = (char *)(v42 + 2);
          v62[0] = (char *)(v42 + 2);
          int v44 = *(_DWORD **)(a1 + 64);
          if (v44 && (uint64_t v45 = *(int *)(a1 + 56), (int)v45 < *v44))
          {
            *(_DWORD *)(a1 + 56) = v45 + 1;
            uint64_t v46 = *(std::string **)&v44[2 * v45 + 2];
          }
          else
          {
            if (!*v6) {
              operator new();
            }
            void *v48 = v47;
            v48[1] = sub_3A6EDC;
            *int v47 = 0;
            v47[1] = 0;
            v47[2] = 0;
            uint64_t v46 = (std::string *)sub_188CDC8(a1 + 48, (uint64_t)v47);
            uint64_t v43 = v62[0];
          }
          int v42 = sub_188C244(v46, v43, (uint64_t)a3);
          v62[0] = (char *)v42;
          if (!v42) {
            goto LABEL_142;
          }
          if (*(void *)a3 <= (unint64_t)v42 || *(_WORD *)v42 != 394) {
            goto LABEL_128;
          }
        }
      case 0x12u:
        if (v9 != 146) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x8000u;
        uint64_t v49 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
        if (v49) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 232);
        goto LABEL_126;
      case 0x13u:
        if (v9 != 154) {
          goto LABEL_132;
        }
        uint64_t v50 = v8 - 2;
        while (1)
        {
          uint64_t v51 = (unsigned __int8 *)(v50 + 2);
          v62[0] = v50 + 2;
          uint64_t v52 = *(_DWORD **)(a1 + 88);
          if (v52 && (uint64_t v53 = *(int *)(a1 + 80), (int)v53 < *v52))
          {
            *(_DWORD *)(a1 + 80) = v53 + 1;
            uint64_t v54 = *(void *)&v52[2 * v53 + 2];
          }
          else
          {
            uint64_t v55 = sub_15C1E0C(*(void *)(a1 + 72));
            uint64_t v54 = sub_188CDC8(a1 + 72, v55);
            uint64_t v51 = (unsigned __int8 *)v62[0];
          }
          uint64_t v50 = (char *)sub_15B7A54(a3, v54, v51);
          v62[0] = v50;
          if (!v50) {
            goto LABEL_142;
          }
          if (*(void *)a3 <= (unint64_t)v50 || *(_WORD *)v50 != 410) {
            goto LABEL_128;
          }
        }
      case 0x14u:
        if (v9 != 162) {
          goto LABEL_132;
        }
        *(_DWORD *)(a1 + 16) |= 0x10000u;
        uint64_t v56 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
        if (v56) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 240);
LABEL_126:
        uint64_t v57 = (std::string *)sub_1880F84(v14, v13);
        uint64_t v58 = (char *)sub_188C244(v57, v62[0], (uint64_t)a3);
        goto LABEL_127;
      default:
        if (v9 >> 3 != 100) {
          goto LABEL_132;
        }
        if (v9 == 32)
        {
          unint64_t v15 = v8 - 2;
          while (1)
          {
            v62[0] = v15 + 2;
            uint64_t v16 = v15[2];
            if (v15[2] < 0)
            {
              int v17 = v16 + (v15[3] << 7);
              uint64_t v16 = (v17 - 128);
              if (v15[3] < 0)
              {
                unint64_t v15 = (char *)sub_188C138((uint64_t)(v15 + 2), (v17 - 128));
                uint64_t v16 = v18;
              }
              else
              {
                v15 += 4;
              }
            }
            else
            {
              v15 += 3;
            }
            v62[0] = v15;
            uint64_t v19 = *(unsigned int *)(a1 + 96);
            if (v19 == *(_DWORD *)(a1 + 100))
            {
              int v20 = v19 + 1;
              sub_188CA54((unsigned int *)(a1 + 96), v19 + 1);
              *(void *)(*(void *)(a1 + 104) + 8 * v19) = v16;
              unint64_t v15 = v62[0];
            }
            else
            {
              *(void *)(*(void *)(a1 + 104) + 8 * v19) = v16;
              int v20 = v19 + 1;
            }
            *(_DWORD *)(a1 + 96) = v20;
            if (!v15) {
              break;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *(_WORD *)v15 != 1696) {
              goto LABEL_128;
            }
          }
LABEL_142:
          v62[0] = 0;
          return v62[0];
        }
        if (v9 == 34)
        {
          uint64_t v58 = (char *)sub_188C2DC((unsigned int *)(a1 + 96), (unsigned __int8 *)v8, (uint64_t)a3);
LABEL_127:
          v62[0] = v58;
          if (!v58) {
            goto LABEL_142;
          }
LABEL_128:
          if (sub_11947B8((uint64_t)a3, v62, a3[11].i32[1])) {
            return v62[0];
          }
          continue;
        }
LABEL_132:
        if (v9) {
          BOOL v59 = (v9 & 7) == 4;
        }
        else {
          BOOL v59 = 1;
        }
        if (!v59)
        {
          if (*v61)
          {
            uint64_t v60 = (std::string *)((*v61 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v60 = (std::string *)sub_188DBD8(v61);
            unint64_t v8 = v62[0];
          }
          uint64_t v58 = (char *)sub_1885AC0(v9, v60, v8, a3);
          goto LABEL_127;
        }
        if (!v8) {
          goto LABEL_142;
        }
        a3[10].i32[0] = v9 - 1;
        return v62[0];
    }
  }
}

uint64_t sub_15B7A54(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15B60A0(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15B7AE4(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 112) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_68;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 120) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 128) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 136) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 144) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v4 = sub_117A0AC(a3, 6, (const void **)(*(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v4 = sub_117A0AC(a3, 7, (const void **)(*(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v4 = sub_117A0AC(a3, 8, (const void **)(*(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v4 = sub_117A0AC(a3, 9, (const void **)(*(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v4 = sub_117A0AC(a3, 10, (const void **)(*(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v4 = sub_117A0AC(a3, 11, (const void **)(*(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_77:
  uint64_t v4 = sub_117A0AC(a3, 12, (const void **)(*(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x1000) != 0) {
LABEL_14:
  }
    uint64_t v4 = sub_117A0AC(a3, 13, (const void **)(*(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_15:
  uint64_t v7 = *(unsigned int *)(a1 + 32);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * v7;
    do
    {
      unsigned int v10 = *(void **)(*(void *)(a1 + 40) + v8 + 8);
      if (*((char *)v10 + 23) < 0)
      {
        int64_t v11 = v10[1];
        if (v11 > 127) {
          goto LABEL_26;
        }
      }
      else
      {
        int64_t v11 = *((unsigned __int8 *)v10 + 23);
      }
      if ((uint64_t)(*a3 - (void)v4 + 14) >= v11)
      {
        char *v4 = 114;
        v4[1] = v11;
        if (*((char *)v10 + 23) < 0) {
          unsigned int v10 = (void *)*v10;
        }
        uint64_t v12 = v4 + 2;
        memcpy(v12, v10, v11);
        uint64_t v4 = &v12[v11];
        goto LABEL_24;
      }
LABEL_26:
      uint64_t v4 = (char *)sub_188A868(a3, 14, (uint64_t)v10, v4);
LABEL_24:
      v8 += 8;
    }
    while (v9 != v8);
  }
  if ((v6 & 0x2000) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 15, (const void **)(*(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  if ((v6 & 0x4000) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 16, (const void **)(*(void *)(a1 + 224) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 56);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *(void **)(*(void *)(a1 + 64) + v14 + 8);
      if (*((char *)v16 + 23) < 0)
      {
        int64_t v17 = v16[1];
        if (v17 > 127) {
          goto LABEL_42;
        }
      }
      else
      {
        int64_t v17 = *((unsigned __int8 *)v16 + 23);
      }
      if ((uint64_t)(*a3 - (void)v4 + 13) >= v17)
      {
        *(_WORD *)uint64_t v4 = 394;
        v4[2] = v17;
        if (*((char *)v16 + 23) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        uint64_t v18 = v4 + 3;
        memcpy(v18, v16, v17);
        uint64_t v4 = &v18[v17];
        goto LABEL_40;
      }
LABEL_42:
      uint64_t v4 = (char *)sub_188A868(a3, 17, (uint64_t)v16, v4);
LABEL_40:
      v14 += 8;
    }
    while (v15 != v14);
  }
  if ((v6 & 0x8000) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 18, (const void **)(*(void *)(a1 + 232) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  int v19 = *(_DWORD *)(a1 + 80);
  if (v19)
  {
    for (int i = 0; i != v19; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v21 = *(void *)(*(void *)(a1 + 88) + 8 * i + 8);
      *(_WORD *)uint64_t v4 = 410;
      unsigned int v22 = *(_DWORD *)(v21 + 20);
      v4[2] = v22;
      if (v22 > 0x7F) {
        uint64_t v23 = sub_188A9CC(v22, v4 + 2);
      }
      else {
        uint64_t v23 = v4 + 3;
      }
      uint64_t v4 = sub_15B62B0(v21, (unint64_t)v23, a3);
    }
  }
  if ((v6 & 0x10000) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 20, (const void **)(*(void *)(a1 + 240) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v24 = *(unsigned int *)(a1 + 96);
  if ((int)v24 >= 1)
  {
    for (uint64_t j = 0; j != v24; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v26 = *(void *)(*(void *)(a1 + 104) + 8 * j);
      *(_WORD *)uint64_t v4 = 1696;
      v4[2] = v26;
      if (v26 > 0x7F)
      {
        v4[2] = v26 | 0x80;
        unint64_t v27 = v26 >> 7;
        v4[3] = v26 >> 7;
        v4 += 4;
        if (v26 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v28 = v27 >> 14;
            v27 >>= 7;
            *v4++ = v27;
          }
          while (v28);
        }
      }
      else
      {
        v4 += 3;
      }
    }
  }
  uint64_t v29 = *(void *)(a1 + 8);
  if ((v29 & 1) == 0) {
    return v4;
  }
  unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v31 + 31) < 0)
  {
    uint64_t v32 = *(void **)(v31 + 8);
    uint64_t v33 = *(void *)(v31 + 16);
  }
  else
  {
    uint64_t v32 = (void *)(v31 + 8);
    LODWORD(v33) = *(unsigned __int8 *)(v31 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v33)
  {
    uint64_t v34 = (int)v33;
    memcpy(v4, v32, (int)v33);
    v4 += v34;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v32, v33, v4);
}

uint64_t sub_15B806C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 < 1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v7 = *(void *)(v5 + 8);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = v6;
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      --v2;
    }
    while (v2);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  uint64_t v9 = v4 + 2 * v8;
  if ((int)v8 >= 1)
  {
    unsigned int v10 = (uint64_t *)(*(void *)(a1 + 64) + 8);
    do
    {
      uint64_t v11 = *v10++;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v9 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      --v8;
    }
    while (v8);
  }
  uint64_t v14 = *(int *)(a1 + 80);
  uint64_t v15 = v9 + 2 * v14;
  uint64_t v16 = *(void *)(a1 + 88);
  if (v16) {
    int64_t v17 = (uint64_t *)(v16 + 8);
  }
  else {
    int64_t v17 = 0;
  }
  if (v14)
  {
    uint64_t v18 = 8 * v14;
    do
    {
      uint64_t v19 = *v17++;
      uint64_t v20 = sub_15B63F8(v19);
      v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
      v18 -= 8;
    }
    while (v18);
  }
  uint64_t result = sub_188D5A8((unsigned int *)(a1 + 96)) + v15 + 2 * *(unsigned int *)(a1 + 96);
  int v22 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v22) {
    goto LABEL_31;
  }
  if (v22)
  {
    unint64_t v33 = *(void *)(a1 + 112) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
    uint64_t v35 = *(void *)(v33 + 8);
    if ((v34 & 0x80u) == 0) {
      uint64_t v35 = v34;
    }
    result += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 2) == 0)
    {
LABEL_22:
      if ((v22 & 4) == 0) {
        goto LABEL_23;
      }
      goto LABEL_55;
    }
  }
  else if ((v22 & 2) == 0)
  {
    goto LABEL_22;
  }
  unint64_t v36 = *(void *)(a1 + 120) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
  uint64_t v38 = *(void *)(v36 + 8);
  if ((v37 & 0x80u) == 0) {
    uint64_t v38 = v37;
  }
  result += v38 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 4) == 0)
  {
LABEL_23:
    if ((v22 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_55:
  unint64_t v39 = *(void *)(a1 + 128) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v40 = *(unsigned __int8 *)(v39 + 23);
  uint64_t v41 = *(void *)(v39 + 8);
  if ((v40 & 0x80u) == 0) {
    uint64_t v41 = v40;
  }
  result += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 8) == 0)
  {
LABEL_24:
    if ((v22 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_58:
  unint64_t v42 = *(void *)(a1 + 136) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v43 = *(unsigned __int8 *)(v42 + 23);
  uint64_t v44 = *(void *)(v42 + 8);
  if ((v43 & 0x80u) == 0) {
    uint64_t v44 = v43;
  }
  result += v44 + ((9 * (__clz(v44 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x10) == 0)
  {
LABEL_25:
    if ((v22 & 0x20) == 0) {
      goto LABEL_26;
    }
LABEL_64:
    unint64_t v48 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
    uint64_t v50 = *(void *)(v48 + 8);
    if ((v49 & 0x80u) == 0) {
      uint64_t v50 = v49;
    }
    result += v50 + ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 0x40) == 0)
    {
LABEL_27:
      if ((v22 & 0x80) == 0) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }
    goto LABEL_67;
  }
LABEL_61:
  unint64_t v45 = *(void *)(a1 + 144) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
  uint64_t v47 = *(void *)(v45 + 8);
  if ((v46 & 0x80u) == 0) {
    uint64_t v47 = v46;
  }
  result += v47 + ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x20) != 0) {
    goto LABEL_64;
  }
LABEL_26:
  if ((v22 & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_67:
  unint64_t v51 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v52 = *(unsigned __int8 *)(v51 + 23);
  uint64_t v53 = *(void *)(v51 + 8);
  if ((v52 & 0x80u) == 0) {
    uint64_t v53 = v52;
  }
  result += v53 + ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x80) != 0)
  {
LABEL_28:
    unint64_t v23 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v24 = *(unsigned __int8 *)(v23 + 23);
    uint64_t v25 = *(void *)(v23 + 8);
    if ((v24 & 0x80u) == 0) {
      uint64_t v25 = v24;
    }
    result += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_31:
  if ((v22 & 0xFF00) == 0) {
    goto LABEL_43;
  }
  if ((v22 & 0x100) != 0)
  {
    unint64_t v54 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v55 = *(unsigned __int8 *)(v54 + 23);
    uint64_t v56 = *(void *)(v54 + 8);
    if ((v55 & 0x80u) == 0) {
      uint64_t v56 = v55;
    }
    result += v56 + ((9 * (__clz(v56 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v22 & 0x200) == 0)
    {
LABEL_34:
      if ((v22 & 0x400) == 0) {
        goto LABEL_35;
      }
      goto LABEL_77;
    }
  }
  else if ((v22 & 0x200) == 0)
  {
    goto LABEL_34;
  }
  unint64_t v57 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
  uint64_t v59 = *(void *)(v57 + 8);
  if ((v58 & 0x80u) == 0) {
    uint64_t v59 = v58;
  }
  result += v59 + ((9 * (__clz(v59 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x400) == 0)
  {
LABEL_35:
    if ((v22 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_80;
  }
LABEL_77:
  unint64_t v60 = *(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v61 = *(unsigned __int8 *)(v60 + 23);
  uint64_t v62 = *(void *)(v60 + 8);
  if ((v61 & 0x80u) == 0) {
    uint64_t v62 = v61;
  }
  result += v62 + ((9 * (__clz(v62 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x800) == 0)
  {
LABEL_36:
    if ((v22 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_83;
  }
LABEL_80:
  unint64_t v63 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
  uint64_t v65 = *(void *)(v63 + 8);
  if ((v64 & 0x80u) == 0) {
    uint64_t v65 = v64;
  }
  result += v65 + ((9 * (__clz(v65 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x1000) == 0)
  {
LABEL_37:
    if ((v22 & 0x2000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_83:
  unint64_t v66 = *(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v67 = *(unsigned __int8 *)(v66 + 23);
  uint64_t v68 = *(void *)(v66 + 8);
  if ((v67 & 0x80u) == 0) {
    uint64_t v68 = v67;
  }
  result += v68 + ((9 * (__clz(v68 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x2000) == 0)
  {
LABEL_38:
    if ((v22 & 0x4000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }
LABEL_86:
  unint64_t v69 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v70 = *(unsigned __int8 *)(v69 + 23);
  uint64_t v71 = *(void *)(v69 + 8);
  if ((v70 & 0x80u) == 0) {
    uint64_t v71 = v70;
  }
  result += v71 + ((9 * (__clz(v71 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v22 & 0x4000) == 0)
  {
LABEL_39:
    if ((v22 & 0x8000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_40;
  }
LABEL_89:
  unint64_t v72 = *(void *)(a1 + 224) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v73 = *(unsigned __int8 *)(v72 + 23);
  uint64_t v74 = *(void *)(v72 + 8);
  if ((v73 & 0x80u) == 0) {
    uint64_t v74 = v73;
  }
  result += v74 + ((9 * (__clz(v74 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v22 & 0x8000) != 0)
  {
LABEL_40:
    unint64_t v26 = *(void *)(a1 + 232) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
    uint64_t v28 = *(void *)(v26 + 8);
    if ((v27 & 0x80u) == 0) {
      uint64_t v28 = v27;
    }
    result += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_43:
  if ((v22 & 0x10000) != 0)
  {
    unint64_t v29 = *(void *)(a1 + 240) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
    uint64_t v31 = *(void *)(v29 + 8);
    if ((v30 & 0x80u) == 0) {
      uint64_t v31 = v30;
    }
    result += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  uint64_t v32 = *(void *)(a1 + 8);
  if (v32)
  {
    unint64_t v75 = v32 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v75 + 31) < 0) {
      uint64_t v76 = *(void *)(v75 + 16);
    }
    else {
      uint64_t v76 = *(unsigned __int8 *)(v75 + 31);
    }
    result += v76;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

std::string *sub_15B86B8(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[1], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    unsigned int v10 = (const std::string **)(*(void *)(a2 + 64) + 8);
    uint64_t v11 = (std::string **)sub_188CCE4((uint64_t)&v3[2], *(_DWORD *)(a2 + 56));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[2], v11, v10, v9, *(_DWORD *)v3[2].__r_.__value_.__r.__words[2]- LODWORD(v3[2].__r_.__value_.__r.__words[1]));
    int v12 = LODWORD(v3[2].__r_.__value_.__r.__words[1]) + v9;
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v12;
    uint64_t v13 = (int *)v3[2].__r_.__value_.__r.__words[2];
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 80);
  if (v14)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 88) + 8);
    uint64_t v16 = (std::string **)sub_188CCE4((uint64_t)&v3[3], *(_DWORD *)(a2 + 80));
    uint64_t result = (std::string *)sub_1638408((uint64_t *)&v3[3], v16, v15, v14, *(_DWORD *)v3[3].__r_.__value_.__r.__words[2]- LODWORD(v3[3].__r_.__value_.__r.__words[1]));
    int v17 = LODWORD(v3[3].__r_.__value_.__r.__words[1]) + v14;
    LODWORD(v3[3].__r_.__value_.__r.__words[1]) = v17;
    uint64_t v18 = (int *)v3[3].__r_.__value_.__r.__words[2];
    if (*v18 < v17) {
      *uint64_t v18 = v17;
    }
  }
  int v19 = *(_DWORD *)(a2 + 96);
  if (v19)
  {
    uint64_t data_low = SLODWORD(v3[4].__r_.__value_.__l.__data_);
    sub_188CA54((unsigned int *)&v3[4], data_low + v19);
    std::string::size_type size = v3[4].__r_.__value_.__l.__size_;
    LODWORD(v3[4].__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 96);
    uint64_t result = (std::string *)memcpy((void *)(size + 8 * data_low), *(const void **)(a2 + 104), 8 * *(int *)(a2 + 96));
  }
  int v22 = *(_DWORD *)(a2 + 16);
  if (!(_BYTE)v22) {
    goto LABEL_46;
  }
  if (v22)
  {
    unint64_t v23 = (long long *)(*(void *)(a2 + 112) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    std::string::size_type v24 = v3->__r_.__value_.__l.__size_;
    uint64_t v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      uint64_t v25 = (uint64_t *)*v25;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[4].__r_.__value_.__r.__words[2], v23, v25);
    if ((v22 & 2) == 0)
    {
LABEL_15:
      if ((v22 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_28;
    }
  }
  else if ((v22 & 2) == 0)
  {
    goto LABEL_15;
  }
  unint64_t v26 = (long long *)(*(void *)(a2 + 120) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
  std::string::size_type v27 = v3->__r_.__value_.__l.__size_;
  uint64_t v28 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
  if (v27) {
    uint64_t v28 = (uint64_t *)*v28;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[5], v26, v28);
  if ((v22 & 4) == 0)
  {
LABEL_16:
    if ((v22 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_28:
  unint64_t v29 = (long long *)(*(void *)(a2 + 128) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
  std::string::size_type v30 = v3->__r_.__value_.__l.__size_;
  uint64_t v31 = (uint64_t *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
  if (v30) {
    uint64_t v31 = (uint64_t *)*v31;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[5].__r_.__value_.__l.__size_, v29, v31);
  if ((v22 & 8) == 0)
  {
LABEL_17:
    if ((v22 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v32 = (long long *)(*(void *)(a2 + 136) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
  std::string::size_type v33 = v3->__r_.__value_.__l.__size_;
  uint64_t v34 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
  if (v33) {
    uint64_t v34 = (uint64_t *)*v34;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[5].__r_.__value_.__r.__words[2], v32, v34);
  if ((v22 & 0x10) == 0)
  {
LABEL_18:
    if ((v22 & 0x20) == 0) {
      goto LABEL_19;
    }
LABEL_37:
    uint64_t v38 = (long long *)(*(void *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x20u;
    std::string::size_type v39 = v3->__r_.__value_.__l.__size_;
    uint64_t v40 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if (v39) {
      uint64_t v40 = (uint64_t *)*v40;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[6].__r_.__value_.__l.__size_, v38, v40);
    if ((v22 & 0x40) == 0)
    {
LABEL_20:
      if ((v22 & 0x80) == 0) {
        goto LABEL_46;
      }
      goto LABEL_43;
    }
    goto LABEL_40;
  }
LABEL_34:
  uint64_t v35 = (long long *)(*(void *)(a2 + 144) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10u;
  std::string::size_type v36 = v3->__r_.__value_.__l.__size_;
  uint64_t v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
  if (v36) {
    uint64_t v37 = (uint64_t *)*v37;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[6], v35, v37);
  if ((v22 & 0x20) != 0) {
    goto LABEL_37;
  }
LABEL_19:
  if ((v22 & 0x40) == 0) {
    goto LABEL_20;
  }
LABEL_40:
  uint64_t v41 = (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x40u;
  std::string::size_type v42 = v3->__r_.__value_.__l.__size_;
  uint64_t v43 = (uint64_t *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
  if (v42) {
    uint64_t v43 = (uint64_t *)*v43;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[6].__r_.__value_.__r.__words[2], v41, v43);
  if ((v22 & 0x80) != 0)
  {
LABEL_43:
    uint64_t v44 = (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x80u;
    std::string::size_type v45 = v3->__r_.__value_.__l.__size_;
    uint64_t v46 = (uint64_t *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
    if (v45) {
      uint64_t v46 = (uint64_t *)*v46;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[7], v44, v46);
  }
LABEL_46:
  if ((v22 & 0xFF00) == 0) {
    goto LABEL_55;
  }
  if ((v22 & 0x100) != 0)
  {
    uint64_t v47 = (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x100u;
    std::string::size_type v48 = v3->__r_.__value_.__l.__size_;
    uint64_t v49 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
    if (v48) {
      uint64_t v49 = (uint64_t *)*v49;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[7].__r_.__value_.__l.__size_, v47, v49);
    if ((v22 & 0x200) == 0)
    {
LABEL_49:
      if ((v22 & 0x400) == 0) {
        goto LABEL_50;
      }
      goto LABEL_63;
    }
  }
  else if ((v22 & 0x200) == 0)
  {
    goto LABEL_49;
  }
  uint64_t v50 = (long long *)(*(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x200u;
  std::string::size_type v51 = v3->__r_.__value_.__l.__size_;
  uint64_t v52 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
  if (v51) {
    uint64_t v52 = (uint64_t *)*v52;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[7].__r_.__value_.__r.__words[2], v50, v52);
  if ((v22 & 0x400) == 0)
  {
LABEL_50:
    if ((v22 & 0x800) == 0) {
      goto LABEL_51;
    }
    goto LABEL_66;
  }
LABEL_63:
  uint64_t v53 = (long long *)(*(void *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x400u;
  std::string::size_type v54 = v3->__r_.__value_.__l.__size_;
  uint64_t v55 = (uint64_t *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
  if (v54) {
    uint64_t v55 = (uint64_t *)*v55;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[8], v53, v55);
  if ((v22 & 0x800) == 0)
  {
LABEL_51:
    if ((v22 & 0x1000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_69;
  }
LABEL_66:
  uint64_t v56 = (long long *)(*(void *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x800u;
  std::string::size_type v57 = v3->__r_.__value_.__l.__size_;
  uint64_t v58 = (uint64_t *)(v57 & 0xFFFFFFFFFFFFFFFCLL);
  if (v57) {
    uint64_t v58 = (uint64_t *)*v58;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[8].__r_.__value_.__l.__size_, v56, v58);
  if ((v22 & 0x1000) == 0)
  {
LABEL_52:
    if ((v22 & 0x2000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_72;
  }
LABEL_69:
  uint64_t v59 = (long long *)(*(void *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x1000u;
  std::string::size_type v60 = v3->__r_.__value_.__l.__size_;
  uint64_t v61 = (uint64_t *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
  if (v60) {
    uint64_t v61 = (uint64_t *)*v61;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[8].__r_.__value_.__r.__words[2], v59, v61);
  if ((v22 & 0x2000) == 0)
  {
LABEL_53:
    if ((v22 & 0x4000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_75;
  }
LABEL_72:
  uint64_t v62 = (long long *)(*(void *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x2000u;
  std::string::size_type v63 = v3->__r_.__value_.__l.__size_;
  uint64_t v64 = (uint64_t *)(v63 & 0xFFFFFFFFFFFFFFFCLL);
  if (v63) {
    uint64_t v64 = (uint64_t *)*v64;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[9], v62, v64);
  if ((v22 & 0x4000) == 0)
  {
LABEL_54:
    if ((v22 & 0x8000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_78;
  }
LABEL_75:
  uint64_t v65 = (long long *)(*(void *)(a2 + 224) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x4000u;
  std::string::size_type v66 = v3->__r_.__value_.__l.__size_;
  uint64_t v67 = (uint64_t *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
  if (v66) {
    uint64_t v67 = (uint64_t *)*v67;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[9].__r_.__value_.__l.__size_, v65, v67);
  if ((v22 & 0x8000) == 0)
  {
LABEL_55:
    if ((v22 & 0x10000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_81;
  }
LABEL_78:
  uint64_t v68 = (long long *)(*(void *)(a2 + 232) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x8000u;
  std::string::size_type v69 = v3->__r_.__value_.__l.__size_;
  uint64_t v70 = (uint64_t *)(v69 & 0xFFFFFFFFFFFFFFFCLL);
  if (v69) {
    uint64_t v70 = (uint64_t *)*v70;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[9].__r_.__value_.__r.__words[2], v68, v70);
  if ((v22 & 0x10000) != 0)
  {
LABEL_81:
    uint64_t v71 = (long long *)(*(void *)(a2 + 240) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10000u;
    std::string::size_type v72 = v3->__r_.__value_.__l.__size_;
    uint64_t v73 = (uint64_t *)(v72 & 0xFFFFFFFFFFFFFFFCLL);
    if (v72) {
      uint64_t v73 = (uint64_t *)*v73;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[10], v71, v73);
  }
LABEL_84:
  uint64_t v74 = *(void *)(a2 + 8);
  if (v74)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v74 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15B8C60(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    int v4 = result;
    sub_15B6D84((uint64_t)result);
    return sub_15B86B8(v4, a2);
  }
  return result;
}

BOOL sub_15B8CAC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 80);
  do
  {
    int v2 = v1;
    if ((int)v1 < 1) {
      break;
    }
    uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 8 * v1--);
  }
  while ((~*(_DWORD *)(v3 + 16) & 3) == 0);
  return v2 < 1;
}

void *sub_15B8CE4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.StructuredAddress");
}

uint64_t sub_15B8CF4(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)uint64_t result = off_24C4A90;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_15B8D30(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_24C4A90;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = a1 + 24;
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 20) = 0;
  int v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_188FB98(v5, v8, (const std::string **)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    unsigned int v10 = *(int **)(a1 + 40);
    if (*v10 < v9) {
      *unsigned int v10 = v9;
    }
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11) {
    sub_188B4F8(v4, (v11 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  if (*(unsigned char *)(a2 + 16)) {
    operator new();
  }
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_15B8E5C()
{
}

uint64_t sub_15B8EC0(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_253F4C8)
  {
    int v6 = *(void **)(a1 + 48);
    if (v6)
    {
      sub_15B6B10(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  sub_1889DE8((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B8F80(uint64_t a1)
{
  sub_15B8EC0(a1);

  operator delete();
}

uint64_t sub_15B8FB8(uint64_t a1)
{
  uint64_t result = sub_188CC00(a1 + 24);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t result = sub_15B6D84(*(void *)(a1 + 48));
  }
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15B9020(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v31 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
    return *(void *)v31;
  }
  int v6 = (void *)(a1 + 8);
  uint64_t v7 = (uint64_t **)(a1 + 24);
  while (1)
  {
    uint64_t v8 = (unsigned __int8 *)(*(void *)v31 + 1);
    unsigned int v9 = **(unsigned char **)v31;
    if ((char)**(unsigned char **)v31 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        uint64_t v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v31, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (unsigned __int8 *)(*(void *)v31 + 2);
      }
    }
    *(void *)uint64_t v31 = v8;
    unsigned int v12 = v9 >> 3;
    if (v9 >> 3 == 16)
    {
      if (v9 != 128) {
        goto LABEL_36;
      }
      uint64_t v20 = (char *)(v8 + 1);
      unint64_t v21 = *v8;
      if ((char)*v8 < 0)
      {
        int v22 = *v20;
        int v23 = v21 + (v22 << 7);
        unint64_t v21 = (v23 - 128);
        if (v22 < 0)
        {
          *(void *)uint64_t v31 = sub_188C138((uint64_t)v8, (v23 - 128));
          if (!*(void *)v31) {
            goto LABEL_55;
          }
          unint64_t v21 = v29;
          goto LABEL_28;
        }
        uint64_t v20 = (char *)(v8 + 2);
      }
      *(void *)uint64_t v31 = v20;
LABEL_28:
      if (v21 > 2)
      {
        if (*v6) {
          std::string::size_type v30 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          std::string::size_type v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        sub_188C020(16, v21, v30);
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        *(_DWORD *)(a1 + 56) = v21;
      }
      goto LABEL_44;
    }
    if (v12 != 15) {
      break;
    }
    if (v9 != 122) {
      goto LABEL_36;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    std::string::size_type v24 = *(void **)(a1 + 48);
    if (!v24)
    {
      uint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v25 = (void *)*v25;
      }
      std::string::size_type v24 = sub_15C1E94((uint64_t)v25);
      *(void *)(a1 + 48) = v24;
      uint64_t v8 = *(unsigned __int8 **)v31;
    }
    unint64_t v26 = sub_11EA9CC(a3, (uint64_t)v24, v8);
LABEL_43:
    *(void *)uint64_t v31 = v26;
    if (!v26) {
      goto LABEL_55;
    }
LABEL_44:
    if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
      return *(void *)v31;
    }
  }
  if (v12 == 11 && v9 == 90)
  {
    uint64_t v13 = (const std::string::value_type *)(v8 - 1);
    while (1)
    {
      int v14 = (char *)(v13 + 1);
      *(void *)uint64_t v31 = v13 + 1;
      uint64_t v15 = *(_DWORD **)(a1 + 40);
      if (v15 && (uint64_t v16 = *(int *)(a1 + 32), (int)v16 < *v15))
      {
        *(_DWORD *)(a1 + 32) = v16 + 1;
        int v17 = *(std::string **)&v15[2 * v16 + 2];
      }
      else
      {
        if (!*v7) {
          operator new();
        }
        *int v19 = v18;
        v19[1] = sub_3A6EDC;
        *uint64_t v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
        int v17 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v18);
        int v14 = *(char **)v31;
      }
      uint64_t v13 = sub_188C244(v17, v14, (uint64_t)a3);
      *(void *)uint64_t v31 = v13;
      if (!v13) {
        goto LABEL_55;
      }
      if (*(void *)a3 <= (unint64_t)v13 || *v13 != 90) {
        goto LABEL_44;
      }
    }
  }
LABEL_36:
  if (v9) {
    BOOL v27 = (v9 & 7) == 4;
  }
  else {
    BOOL v27 = 1;
  }
  if (!v27)
  {
    if (*v6)
    {
      uint64_t v28 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v28 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = *(unsigned __int8 **)v31;
    }
    unint64_t v26 = sub_1885AC0(v9, v28, (char *)v8, a3);
    goto LABEL_43;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    return *(void *)v31;
  }
LABEL_55:
  *(void *)uint64_t v31 = 0;
  return *(void *)v31;
}

char *sub_15B9320(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      unsigned int v9 = *(void **)(*(void *)(a1 + 40) + v7 + 8);
      if (*((char *)v9 + 23) < 0)
      {
        int64_t v10 = v9[1];
        if (v10 > 127) {
          goto LABEL_12;
        }
      }
      else
      {
        int64_t v10 = *((unsigned __int8 *)v9 + 23);
      }
      if ((uint64_t)(*a3 - (void)__dst + 14) >= v10)
      {
        *__dst = 90;
        __dst[1] = v10;
        if (*((char *)v9 + 23) < 0) {
          unsigned int v9 = (void *)*v9;
        }
        unsigned int v11 = __dst + 2;
        memcpy(v11, v9, v10);
        __dst = &v11[v10];
        goto LABEL_10;
      }
LABEL_12:
      __dst = (char *)sub_188A868(a3, 11, (uint64_t)v9, __dst);
LABEL_10:
      v7 += 8;
    }
    while (v8 != v7);
  }
  int v12 = *(_DWORD *)(a1 + 16);
  if (v12)
  {
    if (*a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v13 = *(void *)(a1 + 48);
    *__dst = 122;
    unsigned int v14 = *(_DWORD *)(v13 + 20);
    __dst[1] = v14;
    if (v14 > 0x7F) {
      uint64_t v15 = sub_188A9CC(v14, __dst + 1);
    }
    else {
      uint64_t v15 = __dst + 2;
    }
    __dst = sub_15B7AE4(v13, v15, a3);
  }
  if ((v12 & 2) != 0)
  {
    if (*a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    unint64_t v16 = *(int *)(a1 + 56);
    *(_WORD *)__dst = 384;
    __dst[2] = v16;
    if (v16 > 0x7F)
    {
      __dst[2] = v16 | 0x80;
      unint64_t v17 = v16 >> 7;
      __dst[3] = v16 >> 7;
      __dst += 4;
      if (v16 >= 0x4000)
      {
        do
        {
          *(__dst - 1) |= 0x80u;
          unint64_t v18 = v17 >> 14;
          v17 >>= 7;
          *__dst++ = v17;
        }
        while (v18);
      }
    }
    else
    {
      __dst += 3;
    }
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return __dst;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    int v22 = *(void **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    int v22 = (void *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v23)
  {
    uint64_t v24 = (int)v23;
    memcpy(__dst, v22, (int)v23);
    __dst += v24;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v22, v23, __dst);
}

uint64_t sub_15B956C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 < 1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v7 = *(void *)(v5 + 8);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = v6;
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      --v2;
    }
    while (v2);
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 3) != 0)
  {
    if (v8)
    {
      uint64_t v9 = sub_15B806C(*(void *)(a1 + 48));
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      int v10 = *(_DWORD *)(a1 + 56);
      if (v10 < 0) {
        uint64_t v11 = 12;
      }
      else {
        uint64_t v11 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 2;
      }
      v4 += v11;
    }
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v14 + 31) < 0) {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 31);
    }
    v4 += v15;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

std::string *sub_15B9698(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[1], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    int v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 3) != 0)
  {
    if (v9)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      data = (std::string *)v3[2].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        uint64_t v12 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          uint64_t v12 = (void *)*v12;
        }
        data = (std::string *)sub_15C1E94((uint64_t)v12);
        v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 48)) {
        uint64_t v13 = *(uint64_t (****)())(a2 + 48);
      }
      else {
        uint64_t v13 = &off_253F3D0;
      }
      uint64_t result = sub_15B86B8(data, (uint64_t)v13);
    }
    if ((v9 & 2) != 0) {
      LODWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 56);
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= v9;
  }
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15B97D8(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    int v4 = result;
    sub_15B8FB8((uint64_t)result);
    return sub_15B9698(v4, a2);
  }
  return result;
}

BOOL sub_15B9824(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 88);
  do
  {
    BOOL result = (int)v3 < 1;
    if ((int)v3 < 1) {
      break;
    }
    uint64_t v5 = *(void *)(v4 + 8 * v3--);
  }
  while ((~*(_DWORD *)(v5 + 16) & 3) == 0);
  return result;
}

__n128 sub_15B9868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v6;
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v7;
  return result;
}

void *sub_15B98CC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.Address");
}

uint64_t sub_15B98DC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_24C4B10;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  return a1;
}

void sub_15B9960(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B9994(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B9A08(void *a1)
{
  sub_15B9994(a1);

  operator delete();
}

uint64_t sub_15B9A40(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15B9A68(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v20 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
    goto LABEL_33;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v20 + 1;
    unsigned int v8 = *v20;
    if (*v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v20 + 2;
      }
    }
    uint64_t v20 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 16) {
      goto LABEL_12;
    }
    v5 |= 2u;
    uint64_t v14 = v7 + 1;
    int v15 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    int v16 = *v14;
    int v15 = v15 + (v16 << 7) - 128;
    if ((v16 & 0x80000000) == 0)
    {
      uint64_t v14 = v7 + 2;
LABEL_24:
      uint64_t v20 = v14;
      *(_DWORD *)(a1 + 32) = v15;
      goto LABEL_26;
    }
    unint64_t v17 = (char *)sub_188C0D0((uint64_t)v7, v15);
    uint64_t v20 = v17;
    *(_DWORD *)(a1 + 32) = v18;
    if (!v17) {
      goto LABEL_34;
    }
LABEL_26:
    if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
      goto LABEL_33;
    }
  }
  if (v8 >> 3 == 1 && v8 == 9)
  {
    v5 |= 1u;
    *(void *)(a1 + 24) = *(void *)v7;
    uint64_t v20 = v7 + 8;
    goto LABEL_26;
  }
LABEL_12:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v20;
    }
    uint64_t v20 = (char *)sub_1885AC0(v8, v13, v7, a3);
    if (!v20) {
      goto LABEL_34;
    }
    goto LABEL_26;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    goto LABEL_33;
  }
LABEL_34:
  uint64_t v20 = 0;
LABEL_33:
  *(_DWORD *)(a1 + 16) |= v5;
  return v20;
}

_OWORD *sub_15B9C18(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (_OWORD *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    *(unsigned char *)uint64_t v4 = 9;
    *(void *)((char *)v4 + 1) = v7;
    uint64_t v4 = (_OWORD *)((char *)v4 + 9);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 32);
    *(unsigned char *)uint64_t v4 = 16;
    *((unsigned char *)v4 + 1) = v8;
    if (v8 > 0x7F)
    {
      *((unsigned char *)v4 + 1) = v8 | 0x80;
      unsigned int v9 = v8 >> 7;
      *((unsigned char *)v4 + 2) = v8 >> 7;
      uint64_t v4 = (_OWORD *)((char *)v4 + 3);
      if (v8 >= 0x4000)
      {
        do
        {
          *((unsigned char *)v4 - 1) |= 0x80u;
          unsigned int v10 = v9 >> 14;
          v9 >>= 7;
          *(unsigned char *)uint64_t v4 = v9;
          uint64_t v4 = (_OWORD *)((char *)v4 + 1);
        }
        while (v10);
      }
    }
    else
    {
      uint64_t v4 = (_OWORD *)((char *)v4 + 2);
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return v4;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    uint64_t v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    uint64_t v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(v4, v14, (int)v15);
    return (_OWORD *)((char *)v4 + v16);
  }

  return (_OWORD *)sub_188A528(a3, (char *)v14, v15, v4);
}

uint64_t sub_15B9D78(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) != 0)
  {
    uint64_t v2 = 9;
    if ((v1 & 1) == 0) {
      uint64_t v2 = 0;
    }
    if ((v1 & 2) != 0) {
      v2 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31);
    }
    v2 += v6;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15B9DF8()
{
  return 1;
}

void *sub_15B9E00@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.InterpolationParameters");
}

uint64_t sub_15B9E10(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_24C4B90;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void sub_15B9E8C(_Unwind_Exception *a1)
{
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15B9EC0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15B9F34(void *a1)
{
  sub_15B9EC0(a1);

  operator delete();
}

uint64_t sub_15B9F6C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15B9F90(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v25 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    unsigned int v8 = v25 + 1;
    unsigned int v9 = *v25;
    if (*v25 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        unsigned int v8 = (char *)sub_188C180((uint64_t)v25, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        unsigned int v8 = v25 + 2;
      }
    }
    uint64_t v25 = v8;
    if (v9 >> 3 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_13;
    }
    v5 |= 2u;
    uint64_t v15 = v8 + 1;
    uint64_t v16 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    int v17 = *v15;
    uint64_t v16 = v16 + (v17 << 7) - 128;
    if ((v17 & 0x80000000) == 0)
    {
      uint64_t v15 = v8 + 2;
LABEL_25:
      uint64_t v25 = v15;
      *(void *)(a1 + 32) = v16;
      goto LABEL_30;
    }
    unint64_t v21 = (char *)sub_188C138((uint64_t)v8, v16);
    uint64_t v25 = v21;
    *(void *)(a1 + 32) = v22;
    if (!v21) {
      goto LABEL_39;
    }
LABEL_30:
    if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 >> 3 == 1 && v9 == 8)
  {
    v5 |= 1u;
    int v18 = v8 + 1;
    uint64_t v19 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    int v20 = *v18;
    uint64_t v19 = v19 + (v20 << 7) - 128;
    if ((v20 & 0x80000000) == 0)
    {
      int v18 = v8 + 2;
LABEL_29:
      uint64_t v25 = v18;
      *(void *)(a1 + 24) = v19;
      goto LABEL_30;
    }
    uint64_t v23 = (char *)sub_188C138((uint64_t)v8, v19);
    uint64_t v25 = v23;
    *(void *)(a1 + 24) = v24;
    if (!v23) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }
LABEL_13:
  if (v9) {
    BOOL v13 = (v9 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v7)
    {
      uint64_t v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unsigned int v8 = v25;
    }
    uint64_t v25 = (char *)sub_1885AC0(v9, v14, v8, a3);
    if (!v25) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_39:
  uint64_t v25 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v25;
}

unsigned char *sub_15BA180(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(void *)(a1 + 32);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

unint64_t sub_15BA324(uint64_t a1)
{
  if ((~*(_DWORD *)(a1 + 16) & 3) != 0) {
    unint64_t result = sub_1577078(a1);
  }
  else {
    unint64_t result = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6)
  }
           + ((9 * (__clz(*(void *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6)
           + 2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = *(void *)(v4 + 16);
    }
    else {
      uint64_t v5 = *(unsigned __int8 *)(v4 + 31);
    }
    result += v5;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

BOOL sub_15BA3C8(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 3) == 0;
}

void *sub_15BA3DC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.SessionID");
}

uint64_t sub_15BA3EC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BA4A4(uint64_t a1)
{
  sub_15BA3EC(a1);

  operator delete();
}

uint64_t sub_15BA4DC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15BA558(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  int v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)int v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v16 = (uint64_t *)*v16;
        }
        uint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        uint64_t v16 = (uint64_t *)*v16;
      }
      uint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      uint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = *(char **)v20;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)int v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)int v20 = 0;
  return *(void *)v20;
}

char *sub_15BA700(uint64_t a1, char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15BA7EC(uint64_t a1)
{
  if ((~*(_DWORD *)(a1 + 16) & 3) != 0)
  {
    uint64_t result = sub_1231798(a1);
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = v3;
    }
    uint64_t v5 = (9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6;
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    uint64_t result = v4 + v8 + v5 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

BOOL sub_15BA8CC(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 3) == 0;
}

void *sub_15BA8E0@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.AttributeKeyValue");
}

uint64_t sub_15BA8F0(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = a2 | 2;
  if (!a3) {
    uint64_t v3 = a2;
  }
  *(void *)uint64_t result = off_24C4C90;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_15BA930(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)a1 = off_24C4C90;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(void *)(a1 + 24) = &qword_2550250;
  if (*(unsigned char *)(a2 + 16))
  {
    unint64_t v6 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      unint64_t v6 = (uint64_t *)*v6;
    }
    sub_1881DF4((std::string **)(a1 + 24), (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL), v6);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

void sub_15BA9E4(_Unwind_Exception *a1)
{
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15BAA18(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BAAB8(uint64_t a1)
{
  sub_15BAA18(a1);

  operator delete();
}

uint64_t sub_15BAAF0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v1 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v3) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15BAB38(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v24 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
    return *(void *)v24;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v24 + 1);
    unsigned int v8 = **(unsigned char **)v24;
    if ((char)**(unsigned char **)v24 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v24, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v24 + 2);
      }
    }
    *(void *)uint64_t v24 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      uint64_t v16 = (uint64_t *)*v16;
    }
    uint64_t v17 = (std::string *)sub_1880F84((void *)(a1 + 24), v16);
    uint64_t v14 = (void *)sub_188C244(v17, *(char **)v24, (uint64_t)a3);
LABEL_24:
    *(void *)uint64_t v24 = v14;
    if (!v14) {
      goto LABEL_43;
    }
LABEL_32:
    if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
      return *(void *)v24;
    }
  }
  if (v8 >> 3 == 1 && v8 == 8)
  {
    uint64_t v18 = v7 + 1;
    unint64_t v19 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    int v20 = *v18;
    int v21 = v19 + (v20 << 7);
    unint64_t v19 = (v21 - 128);
    if (v20 < 0)
    {
      *(void *)uint64_t v24 = sub_188C138((uint64_t)v7, (v21 - 128));
      if (!*(void *)v24) {
        goto LABEL_43;
      }
      unint64_t v19 = v22;
    }
    else
    {
      uint64_t v18 = v7 + 2;
LABEL_29:
      *(void *)uint64_t v24 = v18;
    }
    if (sub_144CF00(v19))
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_DWORD *)(a1 + 32) = v19;
    }
    else
    {
      if (*v6) {
        uint64_t v23 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v23 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(1, v19, v23);
    }
    goto LABEL_32;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v24;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_24;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v24;
  }
LABEL_43:
  *(void *)uint64_t v24 = 0;
  return *(void *)v24;
}

unsigned char *sub_15BAD4C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 32);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    uint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    uint64_t v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15BAE94(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    int v6 = *(_DWORD *)(a1 + 32);
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v7;
  }
LABEL_11:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

std::string *sub_15BAF50(std::string *result, uint64_t a2)
{
  if ((std::string *)a2 != result)
  {
    uint64_t v4 = result;
    sub_15BAAF0((uint64_t)result);
    return sub_119E644(v4, a2);
  }
  return result;
}

uint64_t sub_15BAF9C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) & 1;
}

uint64_t sub_15BAFA8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(result + 24) = v3;
  LODWORD(v3) = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v3;
  return result;
}

void *sub_15BAFEC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.GeoServiceTag");
}

uint64_t sub_15BAFFC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_253F580)
  {
    int v6 = *(void **)(a1 + 24);
    if (v6)
    {
      sub_15B091C(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BB0B4(uint64_t a1)
{
  sub_15BAFFC(a1);

  operator delete();
}

unsigned char *sub_15BB0EC(unsigned char *result)
{
  int v1 = result;
  int v2 = *((_DWORD *)result + 4);
  if (v2) {
    uint64_t result = sub_15B09D0(*((void *)result + 3));
  }
  if ((v2 & 0xFE) != 0)
  {
    *((void *)v1 + 4) = 0;
    *((void *)v1 + 5) = 0;
    *((_DWORD *)v1 + 14) = 0;
    *((void *)v1 + 6) = 0;
  }
  char v4 = v1[8];
  uint64_t v3 = v1 + 8;
  *((_DWORD *)v3 + 13) = 0;
  *((_DWORD *)v3 + 2) = 0;
  if (v4)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_15BB160(uint64_t a1, char *a2, int32x2_t *a3)
{
  std::string::size_type v54 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v54, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = v54 + 1;
    unsigned int v9 = *v54;
    if (*v54 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v54, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v54 + 2;
      }
    }
    std::string::size_type v54 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_67;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 24);
        if (!v12)
        {
          uint64_t v13 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v13 = (void *)*v13;
          }
          uint64_t v12 = sub_15C1918((uint64_t)v13);
          *(void *)(a1 + 24) = v12;
          uint64_t v8 = v54;
        }
        uint64_t v14 = sub_1198F14(a3, v12, (unsigned __int8 *)v8);
        goto LABEL_74;
      case 2u:
        if (v9 != 16) {
          goto LABEL_67;
        }
        v5 |= 2u;
        uint64_t v15 = v8 + 1;
        uint64_t v16 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_19;
        }
        int v17 = *v15;
        uint64_t v16 = v16 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          std::string::size_type v42 = (char *)sub_188C138((uint64_t)v8, v16);
          std::string::size_type v54 = v42;
          *(unsigned char *)(a1 + 32) = v43 != 0;
          if (!v42) {
            goto LABEL_121;
          }
        }
        else
        {
          uint64_t v15 = v8 + 2;
LABEL_19:
          std::string::size_type v54 = v15;
          *(unsigned char *)(a1 + 32) = v16 != 0;
        }
        goto LABEL_75;
      case 3u:
        if (v9 != 24) {
          goto LABEL_67;
        }
        uint64_t v18 = v8 + 1;
        unint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_24;
        }
        int v20 = *v18;
        int v21 = v19 + (v20 << 7);
        unint64_t v19 = (v21 - 128);
        if (v20 < 0)
        {
          std::string::size_type v54 = (char *)sub_188C138((uint64_t)v8, (v21 - 128));
          if (!v54) {
            goto LABEL_121;
          }
          unint64_t v19 = v44;
        }
        else
        {
          uint64_t v18 = v8 + 2;
LABEL_24:
          std::string::size_type v54 = v18;
        }
        if (v19 <= 4)
        {
          *(_DWORD *)(a1 + 16) |= 4u;
          *(_DWORD *)(a1 + 36) = v19;
          goto LABEL_75;
        }
        if (*v7) {
          uint64_t v52 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v52 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v53 = 3;
        goto LABEL_111;
      case 4u:
        if (v9 != 32) {
          goto LABEL_67;
        }
        unint64_t v22 = v8 + 1;
        unint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_31;
        }
        int v23 = *v22;
        int v24 = v19 + (v23 << 7);
        unint64_t v19 = (v24 - 128);
        if (v23 < 0)
        {
          std::string::size_type v54 = (char *)sub_188C138((uint64_t)v8, (v24 - 128));
          if (!v54) {
            goto LABEL_121;
          }
          unint64_t v19 = v45;
        }
        else
        {
          unint64_t v22 = v8 + 2;
LABEL_31:
          std::string::size_type v54 = v22;
        }
        if (v19 <= 4)
        {
          *(_DWORD *)(a1 + 16) |= 8u;
          *(_DWORD *)(a1 + 40) = v19;
          goto LABEL_75;
        }
        if (*v7) {
          uint64_t v52 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v52 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v53 = 4;
        goto LABEL_111;
      case 5u:
        if (v9 != 40) {
          goto LABEL_67;
        }
        v5 |= 0x10u;
        uint64_t v25 = v8 + 1;
        int v26 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        int v27 = *v25;
        int v26 = v26 + (v27 << 7) - 128;
        if (v27 < 0)
        {
          uint64_t v46 = (char *)sub_188C0D0((uint64_t)v8, v26);
          std::string::size_type v54 = v46;
          *(_DWORD *)(a1 + 44) = v47;
          if (!v46) {
            goto LABEL_121;
          }
        }
        else
        {
          uint64_t v25 = v8 + 2;
LABEL_38:
          std::string::size_type v54 = v25;
          *(_DWORD *)(a1 + 44) = v26;
        }
        goto LABEL_75;
      case 0xBu:
        if (v9 != 88) {
          goto LABEL_67;
        }
        uint64_t v28 = v8 + 1;
        unint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_43;
        }
        int v29 = *v28;
        int v30 = v19 + (v29 << 7);
        unint64_t v19 = (v30 - 128);
        if (v29 < 0)
        {
          std::string::size_type v54 = (char *)sub_188C138((uint64_t)v8, (v30 - 128));
          if (!v54) {
            goto LABEL_121;
          }
          unint64_t v19 = v48;
        }
        else
        {
          uint64_t v28 = v8 + 2;
LABEL_43:
          std::string::size_type v54 = v28;
        }
        if (v19 <= 4)
        {
          *(_DWORD *)(a1 + 16) |= 0x20u;
          *(_DWORD *)(a1 + 48) = v19;
          goto LABEL_75;
        }
        if (*v7) {
          uint64_t v52 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v52 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v53 = 11;
        goto LABEL_111;
      case 0xCu:
        if (v9 != 96) {
          goto LABEL_67;
        }
        uint64_t v31 = v8 + 1;
        unint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_50;
        }
        int v32 = *v31;
        int v33 = v19 + (v32 << 7);
        unint64_t v19 = (v33 - 128);
        if (v32 < 0)
        {
          std::string::size_type v54 = (char *)sub_188C138((uint64_t)v8, (v33 - 128));
          if (!v54) {
            goto LABEL_121;
          }
          unint64_t v19 = v49;
        }
        else
        {
          uint64_t v31 = v8 + 2;
LABEL_50:
          std::string::size_type v54 = v31;
        }
        if (v19 <= 4)
        {
          *(_DWORD *)(a1 + 16) |= 0x40u;
          *(_DWORD *)(a1 + 52) = v19;
          goto LABEL_75;
        }
        if (*v7) {
          uint64_t v52 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v52 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v53 = 12;
        goto LABEL_111;
      case 0xDu:
        if (v9 != 104) {
          goto LABEL_67;
        }
        uint64_t v34 = v8 + 1;
        unint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_57;
        }
        int v35 = *v34;
        int v36 = v19 + (v35 << 7);
        unint64_t v19 = (v36 - 128);
        if (v35 < 0)
        {
          std::string::size_type v54 = (char *)sub_188C138((uint64_t)v8, (v36 - 128));
          if (!v54) {
            goto LABEL_121;
          }
          unint64_t v19 = v50;
        }
        else
        {
          uint64_t v34 = v8 + 2;
LABEL_57:
          std::string::size_type v54 = v34;
        }
        if (v19 <= 4)
        {
          *(_DWORD *)(a1 + 16) |= 0x80u;
          *(_DWORD *)(a1 + 56) = v19;
          goto LABEL_75;
        }
        if (*v7) {
          uint64_t v52 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v52 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v53 = 13;
        goto LABEL_111;
      case 0xEu:
        if (v9 != 112) {
          goto LABEL_67;
        }
        uint64_t v37 = v8 + 1;
        unint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_64;
        }
        int v38 = *v37;
        int v39 = v19 + (v38 << 7);
        unint64_t v19 = (v39 - 128);
        if (v38 < 0)
        {
          std::string::size_type v54 = (char *)sub_188C138((uint64_t)v8, (v39 - 128));
          if (!v54) {
            goto LABEL_121;
          }
          unint64_t v19 = v51;
        }
        else
        {
          uint64_t v37 = v8 + 2;
LABEL_64:
          std::string::size_type v54 = v37;
        }
        if (v19 > 4)
        {
          if (*v7) {
            uint64_t v52 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v52 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          int v53 = 14;
LABEL_111:
          sub_188C020(v53, v19, v52);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x100u;
          *(_DWORD *)(a1 + 60) = v19;
        }
        goto LABEL_75;
      default:
LABEL_67:
        if (v9) {
          BOOL v40 = (v9 & 7) == 4;
        }
        else {
          BOOL v40 = 1;
        }
        if (!v40)
        {
          if (*v7)
          {
            uint64_t v41 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v41 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = v54;
          }
          uint64_t v14 = (char *)sub_1885AC0(v9, v41, v8, a3);
LABEL_74:
          std::string::size_type v54 = v14;
          if (!v14) {
            goto LABEL_121;
          }
LABEL_75:
          if (sub_11947B8((uint64_t)a3, &v54, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_121:
        }
          std::string::size_type v54 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v54;
    }
  }
}

char *sub_15BB7A0(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  char v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_15B0C0C(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v10 = *(unsigned char *)(a1 + 32);
  char *v4 = 16;
  v4[1] = v10;
  v4 += 2;
  if ((v6 & 4) != 0)
  {
LABEL_14:
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v11 = *(int *)(a1 + 36);
    char *v4 = 24;
    v4[1] = v11;
    if (v11 > 0x7F)
    {
      v4[1] = v11 | 0x80;
      unint64_t v12 = v11 >> 7;
      v4[2] = v11 >> 7;
      v4 += 3;
      if (v11 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v13 = v12 >> 14;
          v12 >>= 7;
          *v4++ = v12;
        }
        while (v13);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_20:
  if ((v6 & 8) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v14 = *(int *)(a1 + 40);
    char *v4 = 32;
    v4[1] = v14;
    if (v14 > 0x7F)
    {
      v4[1] = v14 | 0x80;
      unint64_t v15 = v14 >> 7;
      v4[2] = v14 >> 7;
      v4 += 3;
      if (v14 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v16 = v15 >> 14;
          v15 >>= 7;
          *v4++ = v15;
        }
        while (v16);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unsigned int v17 = *(_DWORD *)(a1 + 44);
    char *v4 = 40;
    v4[1] = v17;
    if (v17 > 0x7F)
    {
      v4[1] = v17 | 0x80;
      unsigned int v18 = v17 >> 7;
      v4[2] = v17 >> 7;
      v4 += 3;
      if (v17 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v19 = v18 >> 14;
          v18 >>= 7;
          *v4++ = v18;
        }
        while (v19);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v20 = *(int *)(a1 + 48);
    char *v4 = 88;
    v4[1] = v20;
    if (v20 > 0x7F)
    {
      v4[1] = v20 | 0x80;
      unint64_t v21 = v20 >> 7;
      v4[2] = v20 >> 7;
      v4 += 3;
      if (v20 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v22 = v21 >> 14;
          v21 >>= 7;
          *v4++ = v21;
        }
        while (v22);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 0x40) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v23 = *(int *)(a1 + 52);
    char *v4 = 96;
    v4[1] = v23;
    if (v23 > 0x7F)
    {
      v4[1] = v23 | 0x80;
      unint64_t v24 = v23 >> 7;
      v4[2] = v23 >> 7;
      v4 += 3;
      if (v23 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v25 = v24 >> 14;
          v24 >>= 7;
          *v4++ = v24;
        }
        while (v25);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 0x80) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v26 = *(int *)(a1 + 56);
    char *v4 = 104;
    v4[1] = v26;
    if (v26 > 0x7F)
    {
      v4[1] = v26 | 0x80;
      unint64_t v27 = v26 >> 7;
      v4[2] = v26 >> 7;
      v4 += 3;
      if (v26 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v28 = v27 >> 14;
          v27 >>= 7;
          *v4++ = v27;
        }
        while (v28);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 0x100) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v29 = *(int *)(a1 + 60);
    char *v4 = 112;
    v4[1] = v29;
    if (v29 > 0x7F)
    {
      v4[1] = v29 | 0x80;
      unint64_t v30 = v29 >> 7;
      v4[2] = v29 >> 7;
      v4 += 3;
      if (v29 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v31 = v30 >> 14;
          v30 >>= 7;
          *v4++ = v30;
        }
        while (v31);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v32 = *(void *)(a1 + 8);
  if ((v32 & 1) == 0) {
    return v4;
  }
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v34 + 31) < 0)
  {
    int v35 = *(void **)(v34 + 8);
    uint64_t v36 = *(void *)(v34 + 16);
  }
  else
  {
    int v35 = (void *)(v34 + 8);
    LODWORD(v36) = *(unsigned __int8 *)(v34 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v36)
  {
    uint64_t v37 = (int)v36;
    memcpy(v4, v35, (int)v36);
    v4 += v37;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v35, v36, v4);
}

uint64_t sub_15BBC64(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    if ((v2 & 0x100) == 0) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  if (v2)
  {
    uint64_t v5 = sub_15B0D90(*(void *)(a1 + 24));
    uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  if ((v2 & 2) != 0) {
    uint64_t result = v3 + 2;
  }
  else {
    uint64_t result = v3;
  }
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    result += v7;
    if ((v2 & 8) == 0)
    {
LABEL_12:
      if ((v2 & 0x10) == 0) {
        goto LABEL_13;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_12;
  }
  int v8 = *(_DWORD *)(a1 + 40);
  if (v8 < 0) {
    uint64_t v9 = 11;
  }
  else {
    uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v9;
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 44) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_27:
  int v10 = *(_DWORD *)(a1 + 48);
  if (v10 < 0) {
    uint64_t v11 = 11;
  }
  else {
    uint64_t v11 = ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v11;
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_31:
  int v12 = *(_DWORD *)(a1 + 52);
  if (v12 < 0) {
    uint64_t v13 = 11;
  }
  else {
    uint64_t v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v13;
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
LABEL_35:
  int v14 = *(_DWORD *)(a1 + 56);
  if (v14 < 0) {
    uint64_t v15 = 11;
  }
  else {
    uint64_t v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v15;
  if ((v2 & 0x100) != 0)
  {
LABEL_39:
    int v16 = *(_DWORD *)(a1 + 60);
    if (v16 < 0) {
      uint64_t v17 = 11;
    }
    else {
      uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    result += v17;
  }
LABEL_43:
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18)
  {
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v19 + 31) < 0) {
      uint64_t v20 = *(void *)(v19 + 16);
    }
    else {
      uint64_t v20 = *(unsigned __int8 *)(v19 + 31);
    }
    result += v20;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_15BBE88(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v4)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v7 = *(void *)(a1 + 24);
      if (!v7)
      {
        uint64_t v8 = *(void *)(a1 + 8);
        uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
        if (v8) {
          uint64_t v9 = (void *)*v9;
        }
        uint64_t v7 = sub_15C1918((uint64_t)v9);
        *(void *)(a1 + 24) = v7;
      }
      if (*(void *)(a2 + 24)) {
        int v10 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        int v10 = &off_253F1A0;
      }
      sub_15B0E24(v7, (uint64_t)v10);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_27;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_28;
    }
LABEL_27:
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_30;
    }
LABEL_29:
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
    if ((v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v4 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
LABEL_30:
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    if ((v4 & 0x40) == 0)
    {
LABEL_9:
      if ((v4 & 0x80) == 0)
      {
LABEL_11:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_12;
      }
LABEL_10:
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      goto LABEL_11;
    }
LABEL_31:
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_12:
  if ((v4 & 0x100) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a1 + 16) |= 0x100u;
    *(_DWORD *)(a1 + 60) = v5;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15BBFD8(unsigned char *a1, uint64_t a2)
{
  if ((unsigned char *)a2 != a1)
  {
    sub_15BB0EC(a1);
    sub_15BBE88((uint64_t)a1, a2);
  }
}

uint64_t sub_15BC024(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v1 = *(void *)(a1 + 24);
    uint64_t result = sub_18856CC(v1 + 16);
    if (!result) {
      return result;
    }
    if ((~*(_DWORD *)(v1 + 40) & 3) != 0) {
      return 0;
    }
  }
  return 1;
}

void *sub_15BC074@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.RoadAccessPoint");
}

uint64_t sub_15BC084(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (void *)(a1 + 8);
  *(void *)a1 = off_24C4D90;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(void *)(a1 + 24) = &qword_2550250;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v6 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      uint64_t v6 = (uint64_t *)*v6;
    }
    sub_1881DF4((std::string **)(a1 + 24), (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL), v6);
  }
  return a1;
}

void sub_15BC130(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15BC164(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BC204(uint64_t a1)
{
  sub_15BC164(a1);

  operator delete();
}

uint64_t sub_15BC23C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v1 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v3) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15BC280(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v17 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v17, a3[11].i32[1])) {
    return *(void *)v17;
  }
  uint64_t v5 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v6 = (char *)(*(void *)v17 + 1);
    unsigned int v7 = **(unsigned char **)v17;
    if ((char)**(unsigned char **)v17 < 0)
    {
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if (*v6 < 0)
      {
        uint64_t v6 = (char *)sub_188C180(*(uint64_t *)v17, v8 - 128);
        unsigned int v7 = v9;
      }
      else
      {
        uint64_t v6 = (char *)(*(void *)v17 + 2);
      }
    }
    *(void *)uint64_t v17 = v6;
    if (v7 != 10) {
      break;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v13 = *(void *)(a1 + 8);
    int v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      int v14 = (uint64_t *)*v14;
    }
    uint64_t v15 = (std::string *)sub_1880F84((void *)(a1 + 24), v14);
    int v12 = (void *)sub_188C244(v15, *(char **)v17, (uint64_t)a3);
LABEL_18:
    *(void *)uint64_t v17 = v12;
    if (!v12) {
      goto LABEL_25;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v17, a3[11].i32[1])) {
      return *(void *)v17;
    }
  }
  if (v7) {
    BOOL v10 = (v7 & 7) == 4;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*v5)
    {
      uint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v6 = *(char **)v17;
    }
    int v12 = sub_1885AC0(v7, v11, v6, a3);
    goto LABEL_18;
  }
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return *(void *)v17;
  }
LABEL_25:
  *(void *)uint64_t v17 = 0;
  return *(void *)v17;
}

char *sub_15BC3D8(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  if (*(unsigned char *)(a1 + 16)) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if ((v6 & 1) == 0) {
    return v4;
  }
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v8 + 31) < 0)
  {
    unsigned int v9 = *(void **)(v8 + 8);
    uint64_t v10 = *(void *)(v8 + 16);
  }
  else
  {
    unsigned int v9 = (void *)(v8 + 8);
    LODWORD(v10) = *(unsigned __int8 *)(v8 + 31);
  }
  if (*a3 - (void)v4 >= (int)v10)
  {
    uint64_t v11 = (int)v10;
    memcpy(v4, v9, (int)v10);
    v4 += v11;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v9, v10, v4);
}

uint64_t sub_15BC4A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = v3;
    }
    uint64_t v1 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(void *)(v7 + 16);
    }
    else {
      uint64_t v8 = *(unsigned __int8 *)(v7 + 31);
    }
    v1 += v8;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

uint64_t sub_15BC528(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) & 1;
}

void *sub_15BC534@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.Timezone");
}

void *sub_15BC544(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BC5B8(void *a1)
{
  sub_15BC544(a1);

  operator delete();
}

uint64_t sub_15BC5F0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15BC614(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v18 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
    goto LABEL_29;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = v18 + 1;
    unsigned int v8 = *v18;
    if (*v18 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180((uint64_t)v18, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = v18 + 2;
      }
    }
    uint64_t v18 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 17)
      {
        uint64_t v15 = *(void *)v7;
        int v14 = v7 + 8;
        v5 |= 2u;
        *(void *)(a1 + 32) = v15;
LABEL_23:
        uint64_t v18 = v14;
        goto LABEL_24;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 9)
    {
      uint64_t v16 = *(void *)v7;
      int v14 = v7 + 8;
      v5 |= 1u;
      *(void *)(a1 + 24) = v16;
      goto LABEL_23;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = v18;
    }
    uint64_t v18 = (char *)sub_1885AC0(v8, v13, v7, a3);
    if (!v18) {
      goto LABEL_30;
    }
LABEL_24:
    if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
      goto LABEL_29;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v18 = 0;
LABEL_29:
  *(_DWORD *)(a1 + 16) |= v5;
  return v18;
}

_OWORD *sub_15BC784(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (_OWORD *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    *(unsigned char *)uint64_t v4 = 9;
    *(void *)((char *)v4 + 1) = v7;
    uint64_t v4 = (_OWORD *)((char *)v4 + 9);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    *(unsigned char *)uint64_t v4 = 17;
    *(void *)((char *)v4 + 1) = v8;
    uint64_t v4 = (_OWORD *)((char *)v4 + 9);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    int v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    int v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    return (_OWORD *)((char *)v4 + v14);
  }

  return (_OWORD *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15BC8A0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  uint64_t v2 = 9;
  if ((v1 & 1) == 0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 2) != 0) {
    v2 += 9;
  }
  if ((v1 & 3) != 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v6 + 31) < 0) {
      uint64_t v7 = *(void *)(v6 + 16);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(v6 + 31);
    }
    v3 += v7;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15BC8FC()
{
  return 1;
}

void *sub_15BC904@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.CarInfo.ScreenResolution");
}

void *sub_15BC914(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BC988(void *a1)
{
  sub_15BC914(a1);

  operator delete();
}

uint64_t sub_15BC9C0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15BC9E4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v18 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
    goto LABEL_29;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v18 + 1;
    unsigned int v8 = *v18;
    if (*v18 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v18, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v18 + 2;
      }
    }
    uint64_t v18 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 17)
      {
        uint64_t v15 = *(void *)v7;
        uint64_t v14 = v7 + 8;
        v5 |= 2u;
        *(void *)(a1 + 32) = v15;
LABEL_23:
        uint64_t v18 = v14;
        goto LABEL_24;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 9)
    {
      uint64_t v16 = *(void *)v7;
      uint64_t v14 = v7 + 8;
      v5 |= 1u;
      *(void *)(a1 + 24) = v16;
      goto LABEL_23;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v18;
    }
    uint64_t v18 = (char *)sub_1885AC0(v8, v13, v7, a3);
    if (!v18) {
      goto LABEL_30;
    }
LABEL_24:
    if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
      goto LABEL_29;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v18 = 0;
LABEL_29:
  *(_DWORD *)(a1 + 16) |= v5;
  return v18;
}

_OWORD *sub_15BCB54(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (_OWORD *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    *(unsigned char *)uint64_t v4 = 9;
    *(void *)((char *)v4 + 1) = v7;
    uint64_t v4 = (_OWORD *)((char *)v4 + 9);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    *(unsigned char *)uint64_t v4 = 17;
    *(void *)((char *)v4 + 1) = v8;
    uint64_t v4 = (_OWORD *)((char *)v4 + 9);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    int v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    int v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    return (_OWORD *)((char *)v4 + v14);
  }

  return (_OWORD *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15BCC70(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  uint64_t v2 = 9;
  if ((v1 & 1) == 0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 2) != 0) {
    v2 += 9;
  }
  if ((v1 & 3) != 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v6 + 31) < 0) {
      uint64_t v7 = *(void *)(v6 + 16);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(v6 + 31);
    }
    v3 += v7;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15BCCCC()
{
  return 1;
}

void *sub_15BCCD4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.CarInfo.ScreenDimension");
}

uint64_t sub_15BCCE4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_16;
    }
  }
  else if (v4)
  {
    goto LABEL_16;
  }
  int v5 = (void ***)(a1 + 56);
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 64) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 64));
  }
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 72));
  }
  if ((uint64_t (***)())a1 != &off_253F630)
  {
    unint64_t v6 = *(void **)(a1 + 80);
    if (v6)
    {
      sub_15BC544(v6);
      operator delete();
    }
    uint64_t v7 = *(void **)(a1 + 88);
    if (v7)
    {
      sub_15BC914(v7);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_16:
  sub_1889DA8(a1 + 40);
  sub_1889DA8(a1 + 24);
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BCE10(uint64_t a1)
{
  sub_15BCCE4(a1);

  operator delete();
}

uint64_t sub_15BCE48(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x1F) == 0) {
    goto LABEL_8;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_20:
    unint64_t v6 = *(void *)(result + 64) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_24;
      }
    }
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
  unint64_t v5 = *(void *)(result + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_20;
    }
  }
LABEL_4:
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_24:
  unint64_t v7 = *(void *)(result + 72) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_28;
    }
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *(unsigned char *)unint64_t v7 = 0;
  *(unsigned char *)(v7 + 23) = 0;
  if ((v2 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_28:
  uint64_t result = sub_15BC5F0(*(void *)(result + 80));
  if ((v2 & 0x10) != 0) {
LABEL_7:
  }
    uint64_t result = sub_15BC9C0(*(void *)(v1 + 88));
LABEL_8:
  if ((v2 & 0xE0) != 0)
  {
    *(_DWORD *)(v1 + 104) = 0;
    *(void *)(v1 + 96) = 0;
  }
  if ((v2 & 0x3F00) != 0)
  {
    *(void *)(v1 + 108) = 0;
    *(_DWORD *)(v1 + 116) = 1;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15BCF88(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)unsigned int v90 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v90, a3[11].i32[1])) {
    goto LABEL_2;
  }
  unint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = (unsigned __int8 *)(*(void *)v90 + 1);
    unsigned int v9 = **(unsigned char **)v90;
    if ((char)**(unsigned char **)v90 < 0)
    {
      int v10 = (char)*v8;
      unsigned int v11 = v9 + (v10 << 7);
      unsigned int v9 = v11 - 128;
      if (v10 < 0)
      {
        uint64_t v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v90, v11 - 128);
        unsigned int v9 = v12;
      }
      else
      {
        uint64_t v8 = (unsigned __int8 *)(*(void *)v90 + 2);
      }
    }
    *(void *)unsigned int v90 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_148;
        }
        uint64_t v13 = (char *)(v8 + 1);
        unint64_t v14 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v15 = *v13;
        int v16 = v14 + (v15 << 7);
        unint64_t v14 = (v16 - 128);
        if (v15 < 0)
        {
          *(void *)unsigned int v90 = sub_188C138((uint64_t)v8, (v16 - 128));
          if (!*(void *)v90) {
            goto LABEL_174;
          }
          unint64_t v14 = v70;
        }
        else
        {
          uint64_t v13 = (char *)(v8 + 2);
LABEL_13:
          *(void *)unsigned int v90 = v13;
        }
        if ((v14 - 1) <= 2)
        {
          *(_DWORD *)(a1 + 16) |= 0x2000u;
          *(_DWORD *)(a1 + 116) = v14;
          goto LABEL_156;
        }
        if (*v7) {
          uint64_t v88 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v88 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v89 = 1;
        goto LABEL_167;
      case 2u:
        if (v9 != 18) {
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          uint64_t v18 = (uint64_t *)*v18;
        }
        unint64_t v19 = (void *)(a1 + 56);
        goto LABEL_73;
      case 3u:
        if (v9 != 26) {
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v18 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          uint64_t v18 = (uint64_t *)*v18;
        }
        unint64_t v19 = (void *)(a1 + 64);
        goto LABEL_73;
      case 4u:
        if (v9 != 34) {
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        unint64_t v21 = *(void **)(a1 + 80);
        if (!v21)
        {
          unint64_t v22 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v22 = (void *)*v22;
          }
          unint64_t v21 = sub_15C22A0((uint64_t)v22);
          *(void *)(a1 + 80) = v21;
          uint64_t v8 = *(unsigned __int8 **)v90;
        }
        unint64_t v23 = sub_15BD908(a3, (uint64_t)v21, v8);
        goto LABEL_155;
      case 5u:
        if (v9 != 40) {
          goto LABEL_148;
        }
        unint64_t v24 = (char *)(v8 + 1);
        unint64_t v14 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_34;
        }
        int v25 = *v24;
        int v26 = v14 + (v25 << 7);
        unint64_t v14 = (v26 - 128);
        if (v25 < 0)
        {
          *(void *)unsigned int v90 = sub_188C138((uint64_t)v8, (v26 - 128));
          if (!*(void *)v90) {
            goto LABEL_174;
          }
          unint64_t v14 = v71;
        }
        else
        {
          unint64_t v24 = (char *)(v8 + 2);
LABEL_34:
          *(void *)unsigned int v90 = v24;
        }
        if (v14 <= 2)
        {
          *(_DWORD *)(a1 + 16) |= 0x20u;
          *(_DWORD *)(a1 + 96) = v14;
          goto LABEL_156;
        }
        if (*v7) {
          uint64_t v88 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v88 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v89 = 5;
        goto LABEL_167;
      case 6u:
        if (v9 != 48) {
          goto LABEL_148;
        }
        v5 |= 0x200u;
        unint64_t v27 = (char *)(v8 + 1);
        uint64_t v28 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_41;
        }
        int v29 = *v27;
        uint64_t v28 = v28 + (v29 << 7) - 128;
        if (v29 < 0)
        {
          uint64_t v72 = sub_188C138((uint64_t)v8, v28);
          *(void *)unsigned int v90 = v72;
          *(unsigned char *)(a1 + 112) = v73 != 0;
          if (!v72) {
            goto LABEL_174;
          }
        }
        else
        {
          unint64_t v27 = (char *)(v8 + 2);
LABEL_41:
          *(void *)unsigned int v90 = v27;
          *(unsigned char *)(a1 + 112) = v28 != 0;
        }
        goto LABEL_156;
      case 7u:
        if (v9 != 56) {
          goto LABEL_148;
        }
        unint64_t v30 = (char *)(v8 + 1);
        unint64_t v14 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_46;
        }
        int v31 = *v30;
        int v32 = v14 + (v31 << 7);
        unint64_t v14 = (v32 - 128);
        if (v31 < 0)
        {
          *(void *)unsigned int v90 = sub_188C138((uint64_t)v8, (v32 - 128));
          if (!*(void *)v90) {
            goto LABEL_174;
          }
          unint64_t v14 = v74;
        }
        else
        {
          unint64_t v30 = (char *)(v8 + 2);
LABEL_46:
          *(void *)unsigned int v90 = v30;
        }
        if (v14 > 3)
        {
          if (*v7) {
            uint64_t v88 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v88 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          int v89 = 7;
LABEL_167:
          sub_188C020(v89, v14, v88);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x40u;
          *(_DWORD *)(a1 + 100) = v14;
        }
        goto LABEL_156;
      case 8u:
        if (v9 == 64)
        {
          uint64_t v33 = (uint64_t)(v8 - 1);
          while (1)
          {
            *(void *)unsigned int v90 = v33 + 1;
            unint64_t v34 = *(unsigned __int8 *)(v33 + 1);
            int v35 = (char *)(v33 + 2);
            if (*(char *)(v33 + 1) < 0)
            {
              int v36 = *v35;
              int v37 = v34 + (v36 << 7);
              unint64_t v34 = (v37 - 128);
              if (v36 < 0)
              {
                *(void *)unsigned int v90 = sub_188C138(v33 + 1, (v37 - 128));
                if (!*(void *)v90) {
                  goto LABEL_174;
                }
                unint64_t v34 = v40;
                goto LABEL_55;
              }
              int v35 = (char *)(v33 + 3);
            }
            *(void *)unsigned int v90 = v35;
LABEL_55:
            if (v34 > 4)
            {
              if (*v7) {
                uint64_t v41 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
              }
              else {
                uint64_t v41 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              }
              sub_188C020(8, v34, v41);
            }
            else
            {
              uint64_t v38 = *(unsigned int *)(a1 + 24);
              if (v38 == *(_DWORD *)(a1 + 28))
              {
                int v39 = v38 + 1;
                sub_188C80C((unsigned int *)(a1 + 24), v38 + 1);
                *(_DWORD *)(*(void *)(a1 + 32) + 4 * v38) = v34;
              }
              else
              {
                *(_DWORD *)(*(void *)(a1 + 32) + 4 * v38) = v34;
                int v39 = v38 + 1;
              }
              *(_DWORD *)(a1 + 24) = v39;
            }
            uint64_t v33 = *(void *)v90;
            if (*(void *)a3 <= *(void *)v90 || **(unsigned char **)v90 != 64) {
              goto LABEL_156;
            }
          }
        }
        if (v9 != 66) {
          goto LABEL_148;
        }
        *(void *)&long long v91 = a1 + 24;
        *((void *)&v91 + 1) = sub_15B0764;
        uint64_t v92 = a1 + 8;
        int v85 = 8;
        goto LABEL_147;
      case 9u:
        if (v9 != 74) {
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v42 = *(void *)(a1 + 8);
        uint64_t v18 = (uint64_t *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
        if (v42) {
          uint64_t v18 = (uint64_t *)*v18;
        }
        unint64_t v19 = (void *)(a1 + 72);
LABEL_73:
        uint64_t v43 = (std::string *)sub_1880F84(v19, v18);
        unint64_t v23 = (void *)sub_188C244(v43, *(char **)v90, (uint64_t)a3);
        goto LABEL_155;
      case 0xAu:
        if (v9 != 82) {
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        unint64_t v44 = *(void **)(a1 + 88);
        if (!v44)
        {
          unint64_t v45 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v45 = (void *)*v45;
          }
          unint64_t v44 = sub_15C231C((uint64_t)v45);
          *(void *)(a1 + 88) = v44;
          uint64_t v8 = *(unsigned __int8 **)v90;
        }
        unint64_t v23 = sub_15BD998(a3, (uint64_t)v44, v8);
        goto LABEL_155;
      case 0xBu:
        if (v9 != 88) {
          goto LABEL_148;
        }
        v5 |= 0x80u;
        int v47 = (char *)(v8 + 1);
        LODWORD(v46) = *v8;
        if ((v46 & 0x80) == 0) {
          goto LABEL_84;
        }
        int v48 = *v47;
        uint64_t v46 = v46 + (v48 << 7) - 128;
        if (v48 < 0)
        {
          uint64_t v75 = sub_188C138((uint64_t)v8, v46);
          *(void *)unsigned int v90 = v75;
          *(_DWORD *)(a1 + 104) = v76;
          if (!v75) {
            goto LABEL_174;
          }
        }
        else
        {
          int v47 = (char *)(v8 + 2);
LABEL_84:
          *(void *)unsigned int v90 = v47;
          *(_DWORD *)(a1 + 104) = v46;
        }
        goto LABEL_156;
      case 0xCu:
        if (v9 != 96) {
          goto LABEL_148;
        }
        v5 |= 0x100u;
        unint64_t v50 = (char *)(v8 + 1);
        LODWORD(v49) = *v8;
        if ((v49 & 0x80) == 0) {
          goto LABEL_89;
        }
        int v51 = *v50;
        uint64_t v49 = v49 + (v51 << 7) - 128;
        if (v51 < 0)
        {
          uint64_t v77 = sub_188C138((uint64_t)v8, v49);
          *(void *)unsigned int v90 = v77;
          *(_DWORD *)(a1 + 108) = v78;
          if (!v77) {
            goto LABEL_174;
          }
        }
        else
        {
          unint64_t v50 = (char *)(v8 + 2);
LABEL_89:
          *(void *)unsigned int v90 = v50;
          *(_DWORD *)(a1 + 108) = v49;
        }
        goto LABEL_156;
      case 0xDu:
        if (v9 == 104)
        {
          uint64_t v52 = (uint64_t)(v8 - 1);
          while (1)
          {
            *(void *)unsigned int v90 = v52 + 1;
            unint64_t v53 = *(unsigned __int8 *)(v52 + 1);
            std::string::size_type v54 = (char *)(v52 + 2);
            if (*(char *)(v52 + 1) < 0)
            {
              int v55 = *v54;
              int v56 = v53 + (v55 << 7);
              unint64_t v53 = (v56 - 128);
              if (v55 < 0)
              {
                *(void *)unsigned int v90 = sub_188C138(v52 + 1, (v56 - 128));
                if (!*(void *)v90) {
                  goto LABEL_174;
                }
                unint64_t v53 = v59;
                goto LABEL_96;
              }
              std::string::size_type v54 = (char *)(v52 + 3);
            }
            *(void *)unsigned int v90 = v54;
LABEL_96:
            if (v53 > 4)
            {
              if (*v7) {
                std::string::size_type v60 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
              }
              else {
                std::string::size_type v60 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              }
              sub_188C020(13, v53, v60);
            }
            else
            {
              uint64_t v57 = *(unsigned int *)(a1 + 40);
              if (v57 == *(_DWORD *)(a1 + 44))
              {
                int v58 = v57 + 1;
                sub_188C80C((unsigned int *)(a1 + 40), v57 + 1);
                *(_DWORD *)(*(void *)(a1 + 48) + 4 * v57) = v53;
              }
              else
              {
                *(_DWORD *)(*(void *)(a1 + 48) + 4 * v57) = v53;
                int v58 = v57 + 1;
              }
              *(_DWORD *)(a1 + 40) = v58;
            }
            uint64_t v52 = *(void *)v90;
            if (*(void *)a3 <= *(void *)v90 || **(unsigned char **)v90 != 104) {
              goto LABEL_156;
            }
          }
        }
        if (v9 == 106)
        {
          *(void *)&long long v91 = a1 + 40;
          *((void *)&v91 + 1) = sub_15B0758;
          uint64_t v92 = a1 + 8;
          int v85 = 13;
LABEL_147:
          int v93 = v85;
          unint64_t v23 = sub_1112E88((uint64_t)a3, (char *)v8, &v91);
LABEL_155:
          *(void *)unsigned int v90 = v23;
          if (!v23) {
            goto LABEL_174;
          }
LABEL_156:
          if (sub_11947B8((uint64_t)a3, (char **)v90, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
LABEL_148:
        if (v9) {
          BOOL v86 = (v9 & 7) == 4;
        }
        else {
          BOOL v86 = 1;
        }
        if (!v86)
        {
          if (*v7)
          {
            uint64_t v87 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v87 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = *(unsigned __int8 **)v90;
          }
          unint64_t v23 = sub_1885AC0(v9, v87, (char *)v8, a3);
          goto LABEL_155;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_174:
        }
          *(void *)unsigned int v90 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v90;
      case 0xEu:
        if (v9 != 112) {
          goto LABEL_148;
        }
        v5 |= 0x400u;
        uint64_t v61 = (char *)(v8 + 1);
        uint64_t v62 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_114;
        }
        int v63 = *v61;
        uint64_t v62 = v62 + (v63 << 7) - 128;
        if (v63 < 0)
        {
          uint64_t v79 = sub_188C138((uint64_t)v8, v62);
          *(void *)unsigned int v90 = v79;
          *(unsigned char *)(a1 + 113) = v80 != 0;
          if (!v79) {
            goto LABEL_174;
          }
        }
        else
        {
          uint64_t v61 = (char *)(v8 + 2);
LABEL_114:
          *(void *)unsigned int v90 = v61;
          *(unsigned char *)(a1 + 113) = v62 != 0;
        }
        goto LABEL_156;
      case 0xFu:
        if (v9 != 120) {
          goto LABEL_148;
        }
        v5 |= 0x800u;
        uint64_t v64 = (char *)(v8 + 1);
        uint64_t v65 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_119;
        }
        int v66 = *v64;
        uint64_t v65 = v65 + (v66 << 7) - 128;
        if (v66 < 0)
        {
          uint64_t v81 = sub_188C138((uint64_t)v8, v65);
          *(void *)unsigned int v90 = v81;
          *(unsigned char *)(a1 + 114) = v82 != 0;
          if (!v81) {
            goto LABEL_174;
          }
        }
        else
        {
          uint64_t v64 = (char *)(v8 + 2);
LABEL_119:
          *(void *)unsigned int v90 = v64;
          *(unsigned char *)(a1 + 114) = v65 != 0;
        }
        goto LABEL_156;
      case 0x10u:
        if (v9 != 128) {
          goto LABEL_148;
        }
        v5 |= 0x1000u;
        uint64_t v67 = (char *)(v8 + 1);
        uint64_t v68 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_124;
        }
        int v69 = *v67;
        uint64_t v68 = v68 + (v69 << 7) - 128;
        if (v69 < 0)
        {
          uint64_t v83 = sub_188C138((uint64_t)v8, v68);
          *(void *)unsigned int v90 = v83;
          *(unsigned char *)(a1 + 115) = v84 != 0;
          if (!v83) {
            goto LABEL_174;
          }
        }
        else
        {
          uint64_t v67 = (char *)(v8 + 2);
LABEL_124:
          *(void *)unsigned int v90 = v67;
          *(unsigned char *)(a1 + 115) = v68 != 0;
        }
        goto LABEL_156;
      default:
        goto LABEL_148;
    }
  }
}

char *sub_15BD908(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15BC614(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15BD998(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15BC9E4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15BDA28(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x2000) != 0)
  {
    if (*a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 116);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    char v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
    if ((v6 & 2) == 0)
    {
LABEL_10:
      if ((v6 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_10;
  }
  char v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_11:
    if ((v6 & 0x20) == 0) {
      goto LABEL_27;
    }
    goto LABEL_21;
  }
LABEL_15:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 80);
  unsigned char *v4 = 34;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    unsigned int v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    unsigned int v12 = v4 + 2;
  }
  char v4 = sub_15BC784(v10, (unint64_t)v12, a3);
  if ((v6 & 0x20) != 0)
  {
LABEL_21:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(int *)(a1 + 96);
    unsigned char *v4 = 40;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_27:
  if ((v6 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v16 = *(unsigned char *)(a1 + 112);
    unsigned char *v4 = 48;
    v4[1] = v16;
    v4 += 2;
  }
  if ((v6 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v17 = *(int *)(a1 + 100);
    unsigned char *v4 = 56;
    v4[1] = v17;
    if (v17 > 0x7F)
    {
      v4[1] = v17 | 0x80;
      unint64_t v18 = v17 >> 7;
      v4[2] = v17 >> 7;
      v4 += 3;
      if (v17 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v19 = v18 >> 14;
          v18 >>= 7;
          *v4++ = v18;
        }
        while (v19);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v20 = *(unsigned int *)(a1 + 24);
  if ((int)v20 >= 1)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v22 = *(int *)(*(void *)(a1 + 32) + 4 * i);
      unsigned char *v4 = 64;
      v4[1] = v22;
      if (v22 > 0x7F)
      {
        v4[1] = v22 | 0x80;
        unint64_t v23 = v22 >> 7;
        v4[2] = v22 >> 7;
        v4 += 3;
        if (v22 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v24 = v23 >> 14;
            v23 >>= 7;
            *v4++ = v23;
          }
          while (v24);
        }
      }
      else
      {
        v4 += 2;
      }
    }
  }
  if ((v6 & 4) != 0)
  {
    char v4 = sub_117A0AC(a3, 9, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
    if ((v6 & 0x10) == 0)
    {
LABEL_49:
      if ((v6 & 0x80) == 0) {
        goto LABEL_64;
      }
      goto LABEL_58;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_49;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v25 = *(void *)(a1 + 88);
  unsigned char *v4 = 82;
  unsigned int v26 = *(_DWORD *)(v25 + 20);
  v4[1] = v26;
  if (v26 > 0x7F) {
    unint64_t v27 = sub_188A9CC(v26, v4 + 1);
  }
  else {
    unint64_t v27 = v4 + 2;
  }
  char v4 = sub_15BCB54(v25, (unint64_t)v27, a3);
  if ((v6 & 0x80) != 0)
  {
LABEL_58:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v28 = *(int *)(a1 + 104);
    unsigned char *v4 = 88;
    v4[1] = v28;
    if (v28 > 0x7F)
    {
      v4[1] = v28 | 0x80;
      unint64_t v29 = v28 >> 7;
      v4[2] = v28 >> 7;
      v4 += 3;
      if (v28 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v30 = v29 >> 14;
          v29 >>= 7;
          *v4++ = v29;
        }
        while (v30);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_64:
  if ((v6 & 0x100) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v31 = *(int *)(a1 + 108);
    unsigned char *v4 = 96;
    v4[1] = v31;
    if (v31 > 0x7F)
    {
      v4[1] = v31 | 0x80;
      unint64_t v32 = v31 >> 7;
      v4[2] = v31 >> 7;
      v4 += 3;
      if (v31 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v33 = v32 >> 14;
          v32 >>= 7;
          *v4++ = v32;
        }
        while (v33);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v34 = *(unsigned int *)(a1 + 40);
  if ((int)v34 >= 1)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v36 = *(int *)(*(void *)(a1 + 48) + 4 * j);
      unsigned char *v4 = 104;
      v4[1] = v36;
      if (v36 > 0x7F)
      {
        v4[1] = v36 | 0x80;
        unint64_t v37 = v36 >> 7;
        v4[2] = v36 >> 7;
        v4 += 3;
        if (v36 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v38 = v37 >> 14;
            v37 >>= 7;
            *v4++ = v37;
          }
          while (v38);
        }
      }
      else
      {
        v4 += 2;
      }
    }
  }
  if ((v6 & 0x400) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v39 = *(unsigned char *)(a1 + 113);
    unsigned char *v4 = 112;
    v4[1] = v39;
    v4 += 2;
    if ((v6 & 0x800) == 0)
    {
LABEL_82:
      if ((v6 & 0x1000) == 0) {
        goto LABEL_93;
      }
      goto LABEL_90;
    }
  }
  else if ((v6 & 0x800) == 0)
  {
    goto LABEL_82;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v40 = *(unsigned char *)(a1 + 114);
  unsigned char *v4 = 120;
  v4[1] = v40;
  v4 += 2;
  if ((v6 & 0x1000) != 0)
  {
LABEL_90:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v41 = *(unsigned char *)(a1 + 115);
    *(_WORD *)char v4 = 384;
    v4[2] = v41;
    v4 += 3;
  }
LABEL_93:
  uint64_t v42 = *(void *)(a1 + 8);
  if ((v42 & 1) == 0) {
    return v4;
  }
  unint64_t v44 = v42 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v44 + 31) < 0)
  {
    unint64_t v45 = *(void **)(v44 + 8);
    uint64_t v46 = *(void *)(v44 + 16);
  }
  else
  {
    unint64_t v45 = (void *)(v44 + 8);
    LODWORD(v46) = *(unsigned __int8 *)(v44 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v46)
  {
    uint64_t v47 = (int)v46;
    memcpy(v4, v45, (int)v46);
    v4 += v47;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v45, v46, v4);
}

uint64_t sub_15BE0C0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    do
    {
      int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v3);
      if (v5 < 0) {
        uint64_t v6 = 10;
      }
      else {
        uint64_t v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
      }
      v4 += v6;
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (v7)
  {
    int v8 = 0;
    uint64_t v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v8);
      if (v10 < 0) {
        uint64_t v11 = 10;
      }
      else {
        uint64_t v11 = (9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6;
      }
      v9 += v11;
      ++v8;
    }
    while (v7 != v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v12 = v4 + v2 + v7 + v9;
  int v13 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v13) {
    goto LABEL_50;
  }
  if (v13)
  {
    unint64_t v14 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v16 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v15;
    }
    v12 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v13 & 2) == 0)
    {
LABEL_20:
      if ((v13 & 4) == 0) {
        goto LABEL_21;
      }
      goto LABEL_33;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_20;
  }
  unint64_t v17 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v12 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 4) == 0)
  {
LABEL_21:
    if ((v13 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_36;
  }
LABEL_33:
  unint64_t v20 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  uint64_t v22 = *(void *)(v20 + 8);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = v21;
  }
  v12 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 8) == 0)
  {
LABEL_22:
    if ((v13 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v23 = sub_15BC8A0(*(void *)(a1 + 80));
  v12 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 0x10) == 0)
  {
LABEL_23:
    if ((v13 & 0x20) == 0) {
      goto LABEL_24;
    }
LABEL_38:
    int v25 = *(_DWORD *)(a1 + 96);
    if (v25 < 0) {
      uint64_t v26 = 11;
    }
    else {
      uint64_t v26 = ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v12 += v26;
    if ((v13 & 0x40) == 0)
    {
LABEL_25:
      if ((v13 & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_46;
    }
    goto LABEL_42;
  }
LABEL_37:
  uint64_t v24 = sub_15BCC70(*(void *)(a1 + 88));
  v12 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v13 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_24:
  if ((v13 & 0x40) == 0) {
    goto LABEL_25;
  }
LABEL_42:
  int v27 = *(_DWORD *)(a1 + 100);
  if (v27 < 0) {
    uint64_t v28 = 11;
  }
  else {
    uint64_t v28 = ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v12 += v28;
  if ((v13 & 0x80) != 0)
  {
LABEL_46:
    int v29 = *(_DWORD *)(a1 + 104);
    if (v29 < 0) {
      uint64_t v30 = 11;
    }
    else {
      uint64_t v30 = ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v12 += v30;
  }
LABEL_50:
  if ((v13 & 0x3F00) != 0)
  {
    if ((v13 & 0x100) != 0)
    {
      int v31 = *(_DWORD *)(a1 + 108);
      if (v31 < 0) {
        uint64_t v32 = 11;
      }
      else {
        uint64_t v32 = ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v12 += v32;
    }
    uint64_t v33 = v12 + 2;
    if ((v13 & 0x200) == 0) {
      uint64_t v33 = v12;
    }
    if ((v13 & 0x400) != 0) {
      v33 += 2;
    }
    if ((v13 & 0x800) != 0) {
      v33 += 2;
    }
    if ((v13 & 0x1000) != 0) {
      uint64_t v12 = v33 + 3;
    }
    else {
      uint64_t v12 = v33;
    }
    if ((v13 & 0x2000) != 0)
    {
      int v34 = *(_DWORD *)(a1 + 116);
      uint64_t v35 = ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v34 >= 0) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 11;
      }
      v12 += v36;
    }
  }
  uint64_t v37 = *(void *)(a1 + 8);
  if (v37)
  {
    unint64_t v39 = v37 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v39 + 31) < 0) {
      uint64_t v40 = *(void *)(v39 + 16);
    }
    else {
      uint64_t v40 = *(unsigned __int8 *)(v39 + 31);
    }
    v12 += v40;
  }
  *(_DWORD *)(a1 + 20) = v12;
  return v12;
}

std::string *sub_15BE464(std::string *result, uint64_t a2)
{
  int v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    int v5 = result + 1;
    uint64_t data_low = SLODWORD(result[1].__r_.__value_.__l.__data_);
    sub_188C80C((unsigned int *)&result[1], data_low + v4);
    std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v5->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    uint64_t result = (std::string *)memcpy((void *)(size + 4 * data_low), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  int v8 = *(_DWORD *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = SLODWORD(v3[1].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[1].__r_.__value_.__r.__words[2], v9 + v8);
    std::string::pointer data = v3[2].__r_.__value_.__l.__data_;
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 40);
    uint64_t result = (std::string *)memcpy(&data[4 * v9], *(const void **)(a2 + 48), 4 * *(int *)(a2 + 40));
  }
  int v11 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v11)
  {
    if (v11)
    {
      int v13 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::size_type v14 = v3->__r_.__value_.__l.__size_;
      uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        uint64_t v15 = (uint64_t *)*v15;
      }
      uint64_t result = sub_1881DF4((std::string **)&v3[2].__r_.__value_.__l.__size_, v13, v15);
      if ((v11 & 2) == 0)
      {
LABEL_8:
        if ((v11 & 4) == 0) {
          goto LABEL_9;
        }
        goto LABEL_35;
      }
    }
    else if ((v11 & 2) == 0)
    {
      goto LABEL_8;
    }
    uint64_t v16 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    std::string::size_type v17 = v3->__r_.__value_.__l.__size_;
    uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (uint64_t *)*v18;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[2].__r_.__value_.__r.__words[2], v16, v18);
    if ((v11 & 4) == 0)
    {
LABEL_9:
      if ((v11 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_38;
    }
LABEL_35:
    uint64_t v19 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
    std::string::size_type v20 = v3->__r_.__value_.__l.__size_;
    uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (uint64_t *)*v21;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[3], v19, v21);
    if ((v11 & 8) == 0)
    {
LABEL_10:
      if ((v11 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_46;
    }
LABEL_38:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
    uint64_t v22 = (std::string *)v3[3].__r_.__value_.__l.__size_;
    if (!v22)
    {
      std::string::size_type v23 = v3->__r_.__value_.__l.__size_;
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
      uint64_t v22 = (std::string *)sub_15C22A0((uint64_t)v24);
      v3[3].__r_.__value_.__l.__size_ = (std::string::size_type)v22;
    }
    if (*(void *)(a2 + 80)) {
      int v25 = *(uint64_t (****)())(a2 + 80);
    }
    else {
      int v25 = &off_253F5E0;
    }
    uint64_t result = sub_123BFCC(v22, (uint64_t)v25);
    if ((v11 & 0x10) == 0)
    {
LABEL_11:
      if ((v11 & 0x20) == 0) {
        goto LABEL_12;
      }
      goto LABEL_54;
    }
LABEL_46:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10u;
    uint64_t v26 = (std::string *)v3[3].__r_.__value_.__r.__words[2];
    if (!v26)
    {
      std::string::size_type v27 = v3->__r_.__value_.__l.__size_;
      uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if (v27) {
        uint64_t v28 = (void *)*v28;
      }
      uint64_t v26 = (std::string *)sub_15C231C((uint64_t)v28);
      v3[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v26;
    }
    if (*(void *)(a2 + 88)) {
      int v29 = *(uint64_t (****)())(a2 + 88);
    }
    else {
      int v29 = &off_253F608;
    }
    uint64_t result = sub_123BFCC(v26, (uint64_t)v29);
    if ((v11 & 0x20) == 0)
    {
LABEL_12:
      if ((v11 & 0x40) == 0) {
        goto LABEL_13;
      }
      goto LABEL_55;
    }
LABEL_54:
    LODWORD(v3[4].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 96);
    if ((v11 & 0x40) == 0)
    {
LABEL_13:
      if ((v11 & 0x80) == 0)
      {
LABEL_15:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v11;
        goto LABEL_16;
      }
LABEL_14:
      LODWORD(v3[4].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 104);
      goto LABEL_15;
    }
LABEL_55:
    HIDWORD(v3[4].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 100);
    if ((v11 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_16:
  if ((v11 & 0x3F00) == 0) {
    goto LABEL_25;
  }
  if ((v11 & 0x100) != 0)
  {
    HIDWORD(v3[4].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 108);
    if ((v11 & 0x200) == 0)
    {
LABEL_19:
      if ((v11 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_59;
    }
  }
  else if ((v11 & 0x200) == 0)
  {
    goto LABEL_19;
  }
  v3[4].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 112);
  if ((v11 & 0x400) == 0)
  {
LABEL_20:
    if ((v11 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_60;
  }
LABEL_59:
  v3[4].__r_.__value_.__s.__data_[17] = *(unsigned char *)(a2 + 113);
  if ((v11 & 0x800) == 0)
  {
LABEL_21:
    if ((v11 & 0x1000) == 0) {
      goto LABEL_22;
    }
LABEL_61:
    v3[4].__r_.__value_.__s.__data_[19] = *(unsigned char *)(a2 + 115);
    if ((v11 & 0x2000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_60:
  v3[4].__r_.__value_.__s.__data_[18] = *(unsigned char *)(a2 + 114);
  if ((v11 & 0x1000) != 0) {
    goto LABEL_61;
  }
LABEL_22:
  if ((v11 & 0x2000) != 0) {
LABEL_23:
  }
    HIDWORD(v3[4].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 116);
LABEL_24:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= v11;
LABEL_25:
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v12 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15BE750()
{
  return 1;
}

void *sub_15BE758@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.CarInfo");
}

uint64_t sub_15BE768(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2 | 2;
  if (!a3) {
    uint64_t v4 = a2;
  }
  *(void *)(a1 + 8) = v4;
  *(void *)a1 = off_24C4F90;
  sub_1882BC4(a1 + 16, a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_15BE7D0(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15BE800(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = off_24C4F90;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  sub_1884444(v4, a2 + 16);
  uint64_t v6 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 48) = v6;
  return a1;
}

void sub_15BE8A8(_Unwind_Exception *a1)
{
  sub_1882CC0(v3);
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15BE8E8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1882CC0(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BE964(void *a1)
{
  sub_15BE8E8(a1);

  operator delete();
}

unsigned char *sub_15BE99C(uint64_t a1)
{
  uint64_t result = sub_18843A4((unsigned char *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 40) & 3) != 0)
  {
    *(_DWORD *)(a1 + 56) = 0;
    *(void *)(a1 + 48) = 0;
  }
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  *(_DWORD *)(v3 + 32) = 0;
  if (v4)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_15BEA04(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v21 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v21, a3[11].i32[1])) {
    goto LABEL_35;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v21 + 1;
    unsigned int v8 = *v21;
    if (*v21 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v21, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v21 + 2;
      }
    }
    uint64_t v21 = v7;
    if (v8 >> 3 == 2) {
      break;
    }
    if (v8 >> 3 != 1 || v8 != 8) {
      goto LABEL_12;
    }
    v5 |= 1u;
    std::string::size_type v14 = v7 + 1;
    uint64_t v15 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    int v16 = *v14;
    uint64_t v15 = v15 + (v16 << 7) - 128;
    if ((v16 & 0x80000000) == 0)
    {
      std::string::size_type v14 = v7 + 2;
LABEL_23:
      uint64_t v21 = v14;
      *(void *)(a1 + 48) = v15;
      goto LABEL_28;
    }
    uint64_t v18 = (char *)sub_188C138((uint64_t)v7, v15);
    uint64_t v21 = v18;
    *(void *)(a1 + 48) = v19;
    if (!v18) {
      goto LABEL_36;
    }
LABEL_28:
    if (sub_11947B8((uint64_t)a3, &v21, a3[11].i32[1])) {
      goto LABEL_35;
    }
  }
  if (v8 == 21)
  {
    v5 |= 2u;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)v7;
    uint64_t v21 = v7 + 4;
    goto LABEL_28;
  }
LABEL_12:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (v8 - 16000 > 0x31F)
    {
      if (*v6)
      {
        std::string::size_type v17 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        std::string::size_type v17 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        uint64_t v7 = v21;
      }
      int v13 = sub_1885AC0(v8, v17, v7, a3);
    }
    else
    {
      int v13 = sub_18859DC((uint64_t **)(a1 + 16), v8, v7, (uint64_t)&off_253F6A8, (uint64_t *)(a1 + 8), a3);
    }
    uint64_t v21 = (char *)v13;
    if (!v13) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    goto LABEL_35;
  }
LABEL_36:
  uint64_t v21 = 0;
LABEL_35:
  *(_DWORD *)(a1 + 40) |= v5;
  return v21;
}

char *sub_15BEBF4(uint64_t a1, char *a2, _DWORD *a3)
{
  char v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)a2);
    }
    unint64_t v7 = *(void *)(a1 + 48);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    int v10 = *(_DWORD *)(a1 + 56);
    char *v4 = 21;
    *(_DWORD *)(v4 + 1) = v10;
    v4 += 5;
  }
  if (*(_WORD *)(a1 + 26)) {
    char v4 = sub_1886844(a1 + 16, 2000, 2100, v4, a3);
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return v4;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    std::string::size_type v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    std::string::size_type v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(v4, v14, (int)v15);
    v4 += v16;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v14, v15, v4);
}

uint64_t sub_15BED78(uint64_t a1)
{
  uint64_t result = sub_1889280(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3) {
      result += ((9 * (__clz(*(void *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0) {
      result += 5;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31);
    }
    result += v6;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_15BEE0C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 40);
  if ((v4 & 3) != 0)
  {
    if (v4) {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
    }
    if ((v4 & 2) != 0) {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    }
    *(_DWORD *)(a1 + 40) |= v4;
  }
  sub_1884444(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15BEE9C(uint64_t a1)
{
  return sub_18856CC(a1 + 16);
}

void *sub_15BEEA4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.LocalTime");
}

void *sub_15BEEB4(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2 | 2;
  if (!a3) {
    uint64_t v4 = a2;
  }
  a1[1] = v4;
  *a1 = off_24C5010;
  sub_1882BC4((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  a1[6] = &qword_2550250;
  a1[7] = 0;
  return a1;
}

void sub_15BEF24(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15BEF54(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(void *)a1 = off_24C5010;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  sub_1884444(v5, a2 + 16);
  *(void *)(a1 + 48) = &qword_2550250;
  if (*(unsigned char *)(a2 + 40))
  {
    unint64_t v7 = (uint64_t *)(*v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (*v4) {
      unint64_t v7 = (uint64_t *)*v7;
    }
    sub_1881DF4((std::string **)(a1 + 48), (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL), v7);
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void sub_15BF02C(_Unwind_Exception *a1)
{
  sub_1882CC0(v3);
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15BF06C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  sub_1882CC0(a1 + 16);
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BF114(uint64_t a1)
{
  sub_15BF06C(a1);

  operator delete();
}

unsigned char *sub_15BF14C(uint64_t a1)
{
  uint64_t result = sub_18843A4((unsigned char *)(a1 + 16));
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = a1 + 8;
  *(void *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  if (v5)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v4);
  }
  return result;
}

uint64_t sub_15BF1D4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v24 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
    goto LABEL_2;
  }
  unint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v8 = (char *)(*(void *)v24 + 1);
    unsigned int v9 = **(unsigned char **)v24;
    if ((char)**(unsigned char **)v24 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        unint64_t v8 = (char *)sub_188C180(*(uint64_t *)v24, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        unint64_t v8 = (char *)(*(void *)v24 + 2);
      }
    }
    *(void *)uint64_t v24 = v8;
    if (v9 >> 3 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_13;
    }
    v5 |= 2u;
    uint64_t v16 = v8 + 1;
    uint64_t v17 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    int v18 = *v16;
    uint64_t v17 = v17 + (v18 << 7) - 128;
    if ((v18 & 0x80000000) == 0)
    {
      uint64_t v16 = v8 + 2;
LABEL_26:
      *(void *)uint64_t v24 = v16;
      *(void *)(a1 + 56) = v17;
      goto LABEL_32;
    }
    uint64_t v22 = sub_188C138((uint64_t)v8, v17);
    *(void *)uint64_t v24 = v22;
    *(void *)(a1 + 56) = v23;
    if (!v22) {
      goto LABEL_39;
    }
LABEL_32:
    if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 >> 3 == 1 && v9 == 10)
  {
    *(_DWORD *)(a1 + 40) |= 1u;
    uint64_t v19 = *(void *)(a1 + 8);
    std::string::size_type v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19) {
      std::string::size_type v20 = (uint64_t *)*v20;
    }
    uint64_t v21 = (std::string *)sub_1880F84((void *)(a1 + 48), v20);
    uint64_t v15 = (void *)sub_188C244(v21, *(char **)v24, (uint64_t)a3);
LABEL_31:
    *(void *)uint64_t v24 = v15;
    if (!v15) {
      goto LABEL_39;
    }
    goto LABEL_32;
  }
LABEL_13:
  if (v9) {
    BOOL v13 = (v9 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if ((v9 & 0xFFFFFFF8) == 0x18 || v9 - 800 <= 0x31F)
    {
      uint64_t v15 = sub_18859DC((uint64_t **)(a1 + 16), v9, v8, (uint64_t)&off_253F6E8, (uint64_t *)(a1 + 8), a3);
    }
    else
    {
      if (*v7)
      {
        std::string::size_type v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        std::string::size_type v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        unint64_t v8 = *(char **)v24;
      }
      uint64_t v15 = sub_1885AC0(v9, v14, v8, a3);
    }
    goto LABEL_31;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_39:
  *(void *)uint64_t v24 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v24;
}

char *sub_15BF3F8(uint64_t a1, char *a2, void *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v7 = *(void *)(a1 + 56);
    char *v4 = 16;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (*(_WORD *)(a1 + 26)) {
    uint64_t v4 = sub_1886844(a1 + 16, 3, 200, v4, a3);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    BOOL v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    BOOL v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if (*a3 - (void)v4 >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15BF564(uint64_t a1)
{
  uint64_t result = sub_1889280(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0) {
      result += ((9 * (__clz(*(void *)(a1 + 56) | 1) ^ 0x3F) + 73) >> 6) + 1;
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    result += v9;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_15BF630(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 40);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      uint64_t v5 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v6 = (std::string **)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 8);
      unint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (v7) {
        unint64_t v8 = (uint64_t *)*v8;
      }
      sub_1881DF4(v6, v5, v8);
    }
    if ((v4 & 2) != 0) {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
    }
    *(_DWORD *)(a1 + 40) |= v4;
  }
  sub_1884444(a1 + 16, a2 + 16);
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15BF6F4(uint64_t a1)
{
  return sub_18856CC(a1 + 16);
}

void *sub_15BF6FC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.AbAssignInfo");
}

uint64_t sub_15BF70C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_24C5090;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  return a1;
}

void sub_15BF790(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15BF7C4(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BF838(void *a1)
{
  sub_15BF7C4(a1);

  operator delete();
}

uint64_t sub_15BF870(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15BF898(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v31 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v8 = v31 + 1;
    unsigned int v9 = *v31;
    if (*v31 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        unint64_t v8 = (char *)sub_188C180((uint64_t)v31, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        unint64_t v8 = v31 + 2;
      }
    }
    int v31 = v8;
    unsigned int v12 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 != 24) {
        goto LABEL_14;
      }
      v5 |= 4u;
      uint64_t v17 = v8 + 1;
      LODWORD(v16) = *v8;
      if ((v16 & 0x80) == 0) {
        goto LABEL_26;
      }
      int v18 = *v17;
      uint64_t v16 = v16 + (v18 << 7) - 128;
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t v17 = v8 + 2;
LABEL_26:
        int v31 = v17;
        *(_DWORD *)(a1 + 32) = v16;
        goto LABEL_36;
      }
      int v25 = (char *)sub_188C138((uint64_t)v8, v16);
      int v31 = v25;
      *(_DWORD *)(a1 + 32) = v26;
      if (!v25) {
        goto LABEL_47;
      }
      goto LABEL_36;
    }
    if (v12 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_14;
    }
    v5 |= 2u;
    std::string::size_type v20 = v8 + 1;
    LODWORD(v19) = *v8;
    if ((v19 & 0x80) == 0) {
      goto LABEL_31;
    }
    int v21 = *v20;
    uint64_t v19 = v19 + (v21 << 7) - 128;
    if ((v21 & 0x80000000) == 0)
    {
      std::string::size_type v20 = v8 + 2;
LABEL_31:
      int v31 = v20;
      *(_DWORD *)(a1 + 28) = v19;
      goto LABEL_36;
    }
    std::string::size_type v27 = (char *)sub_188C138((uint64_t)v8, v19);
    int v31 = v27;
    *(_DWORD *)(a1 + 28) = v28;
    if (!v27) {
      goto LABEL_47;
    }
LABEL_36:
    if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v12 == 1 && v9 == 8)
  {
    v5 |= 1u;
    uint64_t v23 = v8 + 1;
    LODWORD(v22) = *v8;
    if ((v22 & 0x80) == 0) {
      goto LABEL_35;
    }
    int v24 = *v23;
    uint64_t v22 = v22 + (v24 << 7) - 128;
    if ((v24 & 0x80000000) == 0)
    {
      uint64_t v23 = v8 + 2;
LABEL_35:
      int v31 = v23;
      *(_DWORD *)(a1 + 24) = v22;
      goto LABEL_36;
    }
    int v29 = (char *)sub_188C138((uint64_t)v8, v22);
    int v31 = v29;
    *(_DWORD *)(a1 + 24) = v30;
    if (!v29) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
LABEL_14:
  if (v9) {
    BOOL v14 = (v9 & 7) == 4;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*v7)
    {
      uint64_t v15 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v15 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v8 = v31;
    }
    int v31 = (char *)sub_1885AC0(v9, v15, v8, a3);
    if (!v31) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_47:
  int v31 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v31;
}

unsigned char *sub_15BFAE0(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 28);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(int *)(a1 + 32);
    unsigned char *v4 = 24;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15BFD00(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_19;
  }
  if (v1)
  {
    int v3 = *(_DWORD *)(a1 + 24);
    if (v3 < 0)
    {
      uint64_t v2 = 11;
      if ((v1 & 2) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v2 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_14;
    }
  }
  int v4 = *(_DWORD *)(a1 + 28);
  if (v4 < 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v2 += v5;
LABEL_14:
  if ((v1 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a1 + 32);
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v7;
  }
LABEL_19:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15BFDF4()
{
  return 1;
}

void *sub_15BFDFC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.TileCoordinate");
}

void *sub_15BFE0C(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15BFE80(void *a1)
{
  sub_15BFE0C(a1);

  operator delete();
}

uint64_t sub_15BFEB8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15BFEE0(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v31 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v8 = v31 + 1;
    unsigned int v9 = *v31;
    if (*v31 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v31, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v31 + 2;
      }
    }
    int v31 = v8;
    unsigned int v12 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 != 24) {
        goto LABEL_14;
      }
      v5 |= 4u;
      uint64_t v16 = v8 + 1;
      int v17 = *v8;
      if ((*v8 & 0x80000000) == 0) {
        goto LABEL_26;
      }
      int v18 = *v16;
      int v17 = v17 + (v18 << 7) - 128;
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t v16 = v8 + 2;
LABEL_26:
        int v31 = v16;
        *(_DWORD *)(a1 + 32) = v17;
        goto LABEL_36;
      }
      int v25 = (char *)sub_188C0D0((uint64_t)v8, v17);
      int v31 = v25;
      *(_DWORD *)(a1 + 32) = v26;
      if (!v25) {
        goto LABEL_47;
      }
      goto LABEL_36;
    }
    if (v12 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_14;
    }
    v5 |= 2u;
    uint64_t v19 = v8 + 1;
    int v20 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    int v21 = *v19;
    int v20 = v20 + (v21 << 7) - 128;
    if ((v21 & 0x80000000) == 0)
    {
      uint64_t v19 = v8 + 2;
LABEL_31:
      int v31 = v19;
      *(_DWORD *)(a1 + 28) = v20;
      goto LABEL_36;
    }
    std::string::size_type v27 = (char *)sub_188C0D0((uint64_t)v8, v20);
    int v31 = v27;
    *(_DWORD *)(a1 + 28) = v28;
    if (!v27) {
      goto LABEL_47;
    }
LABEL_36:
    if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v12 == 1 && v9 == 8)
  {
    v5 |= 1u;
    uint64_t v22 = v8 + 1;
    int v23 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    int v24 = *v22;
    int v23 = v23 + (v24 << 7) - 128;
    if ((v24 & 0x80000000) == 0)
    {
      uint64_t v22 = v8 + 2;
LABEL_35:
      int v31 = v22;
      *(_DWORD *)(a1 + 24) = v23;
      goto LABEL_36;
    }
    int v29 = (char *)sub_188C0D0((uint64_t)v8, v23);
    int v31 = v29;
    *(_DWORD *)(a1 + 24) = v30;
    if (!v29) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
LABEL_14:
  if (v9) {
    BOOL v14 = (v9 & 7) == 4;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*v7)
    {
      unint64_t v15 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v15 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = v31;
    }
    int v31 = (char *)sub_1885AC0(v9, v15, v8, a3);
    if (!v31) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_47:
  int v31 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v31;
}

unsigned char *sub_15C0134(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  int v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      int v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unsigned int v7 = *(_DWORD *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unsigned int v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unsigned int v13 = *(_DWORD *)(a1 + 32);
    unsigned char *v4 = 24;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unsigned int v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15C0354(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_10;
  }
  if (v1)
  {
    uint64_t v2 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = 0;
  if ((v1 & 2) != 0) {
LABEL_7:
  }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if ((v1 & 4) != 0) {
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31);
    }
    v2 += v6;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15C0420()
{
  return 1;
}

void *sub_15C0428@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.SlippyTile");
}

uint64_t sub_15C0438(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_24C5190;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 28) = 0;
  int v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_188C80C((unsigned int *)(a1 + 24), v5);
    uint64_t v6 = *(void **)(a1 + 32);
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
    memcpy(v6, *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    sub_188B4F8(v4, (v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

void sub_15C04F8(_Unwind_Exception *a1)
{
  sub_1889DA8(v3);
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15C053C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DA8((uint64_t)(a1 + 3));
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C05B8(void *a1)
{
  sub_15C053C(a1);

  operator delete();
}

uint64_t sub_15C05F0(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 32) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15C060C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v30 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v30, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    unsigned int v8 = v30 + 1;
    unsigned int v9 = *v30;
    if (*v30 < 0)
    {
      int v10 = *v8;
      unsigned int v11 = v9 + (v10 << 7);
      unsigned int v9 = v11 - 128;
      if (v10 < 0)
      {
        unsigned int v8 = (char *)sub_188C180((uint64_t)v30, v11 - 128);
        unsigned int v9 = v12;
      }
      else
      {
        unsigned int v8 = v30 + 2;
      }
    }
    int v30 = v8;
    if (v9 >> 3 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_39;
    }
    uint64_t v22 = v8 + 1;
    uint64_t v23 = *v8;
    if (*v8 < 0)
    {
      int v24 = *v22;
      uint64_t v23 = v23 + (v24 << 7) - 128;
      if (v24 < 0)
      {
        int v25 = (char *)sub_188C138((uint64_t)v8, v23);
        int v30 = v25;
        *(unsigned char *)(a1 + 40) = v26 != 0;
        int v5 = 1;
        if (!v25) {
          goto LABEL_52;
        }
        goto LABEL_47;
      }
      uint64_t v22 = v8 + 2;
    }
    int v30 = v22;
    *(unsigned char *)(a1 + 40) = v23 != 0;
    int v5 = 1;
LABEL_47:
    if (sub_11947B8((uint64_t)a3, &v30, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 >> 3 == 1)
  {
    if (v9 == 8)
    {
      unsigned int v13 = v8 - 1;
      while (1)
      {
        int v30 = v13 + 1;
        unint64_t v14 = v13[1];
        unsigned int v15 = v13 + 2;
        if (v13[1] < 0)
        {
          int v16 = *v15;
          int v17 = v14 + (v16 << 7);
          unint64_t v14 = (v17 - 128);
          if (v16 < 0)
          {
            int v30 = (char *)sub_188C138((uint64_t)(v13 + 1), (v17 - 128));
            if (!v30) {
              goto LABEL_52;
            }
            unint64_t v14 = v20;
            goto LABEL_16;
          }
          unsigned int v15 = v13 + 3;
        }
        int v30 = v15;
LABEL_16:
        if (v14 > 2)
        {
          if (*v7) {
            uint64_t v21 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v21 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(1, v14, v21);
        }
        else
        {
          uint64_t v18 = *(unsigned int *)(a1 + 24);
          if (v18 == *(_DWORD *)(a1 + 28))
          {
            int v19 = v18 + 1;
            sub_188C80C((unsigned int *)(a1 + 24), v18 + 1);
            *(_DWORD *)(*(void *)(a1 + 32) + 4 * v18) = v14;
          }
          else
          {
            *(_DWORD *)(*(void *)(a1 + 32) + 4 * v18) = v14;
            int v19 = v18 + 1;
          }
          *(_DWORD *)(a1 + 24) = v19;
        }
        unsigned int v13 = v30;
        if (*(void *)a3 <= (unint64_t)v30 || *v30 != 8) {
          goto LABEL_47;
        }
      }
    }
    if (v9 == 10)
    {
      *(void *)&long long v31 = a1 + 24;
      *((void *)&v31 + 1) = sub_15B0734;
      uint64_t v32 = a1 + 8;
      int v33 = 1;
      std::string::size_type v27 = sub_1112E88((uint64_t)a3, v8, &v31);
      goto LABEL_46;
    }
  }
LABEL_39:
  if (v9) {
    BOOL v28 = (v9 & 7) == 4;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28)
  {
    if (*v7)
    {
      int v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      int v29 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unsigned int v8 = v30;
    }
    std::string::size_type v27 = (char *)sub_1885AC0(v9, v29, v8, a3);
LABEL_46:
    int v30 = v27;
    if (!v27) {
      goto LABEL_52;
    }
    goto LABEL_47;
  }
  if (v8) {
    a3[10].i32[0] = v9 - 1;
  }
  else {
LABEL_52:
  }
    int v30 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v30;
}

char *sub_15C08F4(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v8 = *(int *)(*(void *)(a1 + 32) + 4 * i);
      *__dst = 8;
      __dst[1] = v8;
      if (v8 > 0x7F)
      {
        __dst[1] = v8 | 0x80;
        unint64_t v9 = v8 >> 7;
        __dst[2] = v8 >> 7;
        __dst += 3;
        if (v8 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v10 = v9 >> 14;
            v9 >>= 7;
            *__dst++ = v9;
          }
          while (v10);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    char v11 = *(unsigned char *)(a1 + 40);
    *__dst = 16;
    __dst[1] = v11;
    __dst += 2;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return __dst;
  }
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v14 + 31) < 0)
  {
    unsigned int v15 = *(void **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    unsigned int v15 = (void *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v16)
  {
    uint64_t v17 = (int)v16;
    memcpy(__dst, v15, (int)v16);
    __dst += v17;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v15, v16, __dst);
}

uint64_t sub_15C0A80(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = 0;
    do
    {
      int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v2);
      if (v4 < 0) {
        uint64_t v5 = 10;
      }
      else {
        uint64_t v5 = (9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6;
      }
      v3 += v5;
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v6 = v3 + v1;
  if (*(unsigned char *)(a1 + 16)) {
    v6 += 2;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v9 + 31) < 0) {
      uint64_t v10 = *(void *)(v9 + 16);
    }
    else {
      uint64_t v10 = *(unsigned __int8 *)(v9 + 31);
    }
    v6 += v10;
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_15C0B20(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = result + 1;
    uint64_t data_low = SLODWORD(result[1].__r_.__value_.__l.__data_);
    sub_188C80C((unsigned int *)&result[1], data_low + v4);
    std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v5->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    uint64_t result = (std::string *)memcpy((void *)(size + 4 * data_low), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::value_type v8 = *(unsigned char *)(a2 + 40);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    v3[1].__r_.__value_.__s.__data_[16] = v8;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15C0BE0()
{
  return 1;
}

void *sub_15C0BE8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.LocalizationCapabilities");
}

uint64_t sub_15C0BF8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_24C5210;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    sub_188B4F8((uint64_t *)(a1 + 8), (v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void sub_15C0C74(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

void *sub_15C0CA8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C0D1C(void *a1)
{
  sub_15C0CA8(a1);

  operator delete();
}

uint64_t sub_15C0D54(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15C0D6C(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v34 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v34, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    std::string::value_type v8 = v34 + 1;
    unsigned int v9 = *v34;
    if (*v34 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        std::string::value_type v8 = (char *)sub_188C180((uint64_t)v34, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        std::string::value_type v8 = v34 + 2;
      }
    }
    int v34 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_29;
        }
        v5 |= 1u;
        uint64_t v12 = v8 + 1;
        uint64_t v13 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v14 = *v12;
        uint64_t v13 = v13 + (v14 << 7) - 128;
        if ((v14 & 0x80000000) == 0)
        {
          uint64_t v12 = v8 + 2;
LABEL_13:
          int v34 = v12;
          *(unsigned char *)(a1 + 24) = v13 != 0;
          goto LABEL_36;
        }
        uint64_t v26 = (char *)sub_188C138((uint64_t)v8, v13);
        int v34 = v26;
        *(unsigned char *)(a1 + 24) = v27 != 0;
        if (v26) {
          goto LABEL_36;
        }
        goto LABEL_49;
      case 2u:
        if (v9 != 16) {
          goto LABEL_29;
        }
        v5 |= 2u;
        unsigned int v15 = v8 + 1;
        uint64_t v16 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_18;
        }
        int v17 = *v15;
        uint64_t v16 = v16 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          BOOL v28 = (char *)sub_188C138((uint64_t)v8, v16);
          int v34 = v28;
          *(unsigned char *)(a1 + 25) = v29 != 0;
          if (!v28) {
            goto LABEL_49;
          }
        }
        else
        {
          unsigned int v15 = v8 + 2;
LABEL_18:
          int v34 = v15;
          *(unsigned char *)(a1 + 25) = v16 != 0;
        }
        goto LABEL_36;
      case 3u:
        if (v9 != 24) {
          goto LABEL_29;
        }
        v5 |= 4u;
        uint64_t v18 = v8 + 1;
        uint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        int v20 = *v18;
        uint64_t v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          int v30 = (char *)sub_188C138((uint64_t)v8, v19);
          int v34 = v30;
          *(unsigned char *)(a1 + 26) = v31 != 0;
          if (!v30) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v18 = v8 + 2;
LABEL_23:
          int v34 = v18;
          *(unsigned char *)(a1 + 26) = v19 != 0;
        }
        goto LABEL_36;
      case 4u:
        if (v9 != 32) {
          goto LABEL_29;
        }
        v5 |= 8u;
        uint64_t v21 = v8 + 1;
        uint64_t v22 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_28;
        }
        int v23 = *v21;
        uint64_t v22 = v22 + (v23 << 7) - 128;
        if (v23 < 0)
        {
          uint64_t v32 = (char *)sub_188C138((uint64_t)v8, v22);
          int v34 = v32;
          *(unsigned char *)(a1 + 27) = v33 != 0;
          if (!v32) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v21 = v8 + 2;
LABEL_28:
          int v34 = v21;
          *(unsigned char *)(a1 + 27) = v22 != 0;
        }
        goto LABEL_36;
      default:
LABEL_29:
        if (v9) {
          BOOL v24 = (v9 & 7) == 4;
        }
        else {
          BOOL v24 = 1;
        }
        if (!v24)
        {
          if (*v7)
          {
            int v25 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            int v25 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            std::string::value_type v8 = v34;
          }
          int v34 = (char *)sub_1885AC0(v9, v25, v8, a3);
          if (!v34) {
            goto LABEL_49;
          }
LABEL_36:
          if (sub_11947B8((uint64_t)a3, &v34, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_49:
        }
          int v34 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v34;
    }
  }
}

unsigned char *sub_15C1084(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    char v7 = *(unsigned char *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v7;
    v4 += 2;
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v8 = *(unsigned char *)(a1 + 25);
  unsigned char *v4 = 16;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
LABEL_12:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v9 = *(unsigned char *)(a1 + 26);
  unsigned char *v4 = 24;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 8) != 0)
  {
LABEL_15:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v10 = *(unsigned char *)(a1 + 27);
    unsigned char *v4 = 32;
    v4[1] = v10;
    v4 += 2;
  }
LABEL_18:
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return v4;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    int v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    int v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(v4, v14, (int)v15);
    v4 += v16;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v14, v15, v4);
}

uint64_t sub_15C1220(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  uint64_t v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0) {
    v2 += 2;
  }
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    v2 += 2;
  }
  if ((v1 & 0xF) != 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v6 + 31) < 0) {
      uint64_t v7 = *(void *)(v6 + 16);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(v6 + 31);
    }
    v3 += v7;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15C1290()
{
  return 1;
}

void *sub_15C1298@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.PrivacyMetadata");
}

uint64_t sub_15C12A8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  int v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if ((uint64_t (***)())a1 != &off_253F7A0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_15B2B90(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C1374(uint64_t a1)
{
  sub_15C12A8(a1);

  operator delete();
}

uint64_t sub_15C13AC(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) == 0) {
      goto LABEL_5;
    }
    unint64_t v3 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
LABEL_5:
      if ((v2 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    **(unsigned char **)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v2 & 2) != 0) {
LABEL_6:
    }
      uint64_t result = sub_15B2C80(*(void *)(result + 32));
  }
LABEL_7:
  char v5 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = v1 + 8;
  *(_DWORD *)(v4 + 8) = 0;
  if (v5)
  {
    return sub_188B4AC((uint64_t *)v4);
  }
  return result;
}

uint64_t sub_15C1440(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v20 + 2);
      }
    }
    *(void *)int v20 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void **)(a1 + 32);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_15C1B30((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = *(unsigned __int8 **)v20;
    }
    uint64_t v14 = sub_125CF74(a3, (uint64_t)v15, v7);
LABEL_29:
    *(void *)int v20 = v14;
    if (!v14) {
      goto LABEL_35;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (uint64_t *)*v18;
    }
    uint64_t v19 = (std::string *)sub_1880F84((void *)(a1 + 24), v18);
    uint64_t v14 = (uint64_t)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
    goto LABEL_29;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      unint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(unsigned __int8 **)v20;
    }
    uint64_t v14 = (uint64_t)sub_1885AC0(v8, v13, (char *)v7, a3);
    goto LABEL_29;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_35:
  *(void *)int v20 = 0;
  return *(void *)v20;
}

char *sub_15C1600(uint64_t a1, char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    char *v4 = 18;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15B2EA4(v7, v9, a3);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    unint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    unint64_t v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if (*a3 - (void)v4 >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15C1730(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v7 = sub_15B2F90(*(void *)(a1 + 32));
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_10;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v3 += v11;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_15C1814(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      uint64_t v6 = (std::string **)&result[1];
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v8 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v8 = (uint64_t *)*v8;
      }
      uint64_t result = sub_1881DF4(v6, v5, v8);
    }
    if ((v4 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      unsigned int v9 = (std::string *)v3[1].__r_.__value_.__l.__size_;
      if (!v9)
      {
        std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        unsigned int v9 = (std::string *)sub_15C1B30((uint64_t)v11);
        v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      }
      if (*(void *)(a2 + 32)) {
        unint64_t v12 = *(uint64_t (****)())(a2 + 32);
      }
      else {
        unint64_t v12 = &off_253F2A0;
      }
      uint64_t result = sub_11EC100(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15C1900()
{
  return 1;
}

void *sub_15C1908@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.TextLink");
}

uint64_t sub_15C1918(uint64_t a1)
{
  if (!a1)
  {
    sub_1638484();
  }

  return sub_15B0794(v3, a1, 0);
}

void *sub_15C1974(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C4510;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_15C19EC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C4590;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 80) = 1;
  return result;
}

uint64_t sub_15C1A94(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C4610;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  return result;
}

void *sub_15C1B30(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C4690;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

void *sub_15C1BB4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C4710;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

uint64_t sub_15C1C38(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C4790;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_15C1CB4(uint64_t a1)
{
  if (!a1)
  {
    sub_16384F0();
  }

  return sub_15B3AD4(v3, a1, 0);
}

uint64_t sub_15C1D10(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C4890;
  *(void *)(result + 8) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_15C1DB0(uint64_t a1)
{
  if (!a1)
  {
    sub_163855C();
  }

  return sub_15B5188(v3, a1, 0);
}

uint64_t sub_15C1E0C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C4990;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_15C1E94(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  return sub_15B64F0(v2, a1, 0);
}

uint64_t sub_15C1EF4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C4A90;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_15C1F98(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C4B10;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_15C2014(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C4B90;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *sub_15C2090(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C4C10;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

uint64_t sub_15C2114(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C4C90;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

double sub_15C219C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = off_24C4D10;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  return result;
}

void *sub_15C221C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = off_24C4D90;
  result[2] = 0;
  result[3] = &qword_2550250;
  return result;
}

void *sub_15C22A0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = off_24C4E10;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *sub_15C231C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = off_24C4E90;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

double sub_15C2398(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = off_24C4F10;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = &qword_2550250;
  *(void *)(v2 + 64) = &qword_2550250;
  *(void *)(v2 + 72) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)(v2 + 112) = 0x100000000;
  return result;
}

uint64_t sub_15C2458(uint64_t a1)
{
  if (!a1)
  {
    sub_16385C8();
  }

  return sub_15BE768(v3, a1, 0);
}

void *sub_15C24B4(uint64_t a1)
{
  if (!a1)
  {
    sub_1638634();
  }

  return sub_15BEEB4(v3, a1, 0);
}

uint64_t sub_15C2510(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C5090;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_15C258C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C5110;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_15C2608(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C5190;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = a1;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

uint64_t sub_15C26A4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C5210;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *sub_15C2720(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = off_24C5290;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = 0;
  return result;
}

void *sub_15C27A4(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C2818(void *a1)
{
  sub_15C27A4(a1);

  operator delete();
}

uint64_t sub_15C2850(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15C2878(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v25 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v8 = v25 + 1;
    unsigned int v9 = *v25;
    if (*v25 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v25, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v25 + 2;
      }
    }
    int v25 = v8;
    if (v9 >> 3 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_13;
    }
    v5 |= 2u;
    uint64_t v16 = v8 + 1;
    LODWORD(v15) = *v8;
    if ((v15 & 0x80) == 0) {
      goto LABEL_25;
    }
    int v17 = *v16;
    uint64_t v15 = v15 + (v17 << 7) - 128;
    if ((v17 & 0x80000000) == 0)
    {
      uint64_t v16 = v8 + 2;
LABEL_25:
      int v25 = v16;
      *(_DWORD *)(a1 + 32) = v15;
      goto LABEL_30;
    }
    uint64_t v21 = (char *)sub_188C138((uint64_t)v8, v15);
    int v25 = v21;
    *(_DWORD *)(a1 + 32) = v22;
    if (!v21) {
      goto LABEL_39;
    }
LABEL_30:
    if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 >> 3 == 1 && v9 == 8)
  {
    v5 |= 1u;
    uint64_t v18 = v8 + 1;
    uint64_t v19 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    int v20 = *v18;
    uint64_t v19 = v19 + (v20 << 7) - 128;
    if ((v20 & 0x80000000) == 0)
    {
      uint64_t v18 = v8 + 2;
LABEL_29:
      int v25 = v18;
      *(void *)(a1 + 24) = v19;
      goto LABEL_30;
    }
    int v23 = (char *)sub_188C138((uint64_t)v8, v19);
    int v25 = v23;
    *(void *)(a1 + 24) = v24;
    if (!v23) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }
LABEL_13:
  if (v9) {
    BOOL v13 = (v9 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v7)
    {
      uint64_t v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = v25;
    }
    int v25 = (char *)sub_1885AC0(v9, v14, v8, a3);
    if (!v25) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_39:
  int v25 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v25;
}

unsigned char *sub_15C2A64(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  int v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      int v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 32);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

unint64_t sub_15C2C08(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    unint64_t result = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      return result;
    }
  }
  else
  {
    unint64_t result = 0;
    if ((v2 & 2) == 0) {
      return result;
    }
  }
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 < 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v5;
  return result;
}

unint64_t sub_15C2C78(uint64_t a1)
{
  if ((~*(_DWORD *)(a1 + 16) & 3) != 0)
  {
    unint64_t result = sub_15C2C08(a1);
  }
  else
  {
    unint64_t v2 = (9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6;
    int v3 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = (9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6;
    if (v3 >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 10;
    }
    unint64_t result = v2 + v5 + 2;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    result += v9;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

BOOL sub_15C2D30(uint64_t a1)
{
  return (~*(_DWORD *)(a1 + 16) & 3) == 0;
}

void *sub_15C2D44@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.Timestamp");
}

uint64_t sub_15C2D54(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_13;
    }
  }
  else if (v4)
  {
    goto LABEL_13;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 48));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_13:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C2E34(uint64_t a1)
{
  sub_15C2D54(a1);

  operator delete();
}

uint64_t sub_15C2E6C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0) {
    goto LABEL_22;
  }
  if ((v1 & 1) == 0)
  {
    if ((v1 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if ((v1 & 4) != 0) {
        goto LABEL_15;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
      if ((v1 & 4) != 0) {
        goto LABEL_15;
      }
    }
LABEL_5:
    if ((v1 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_19:
    unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
    goto LABEL_22;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v2 + 23) < 0)
  {
    **(unsigned char **)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_11;
    }
  }
LABEL_4:
  if ((v1 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_15:
  unint64_t v4 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    **(unsigned char **)unint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if ((v1 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  *(unsigned char *)unint64_t v4 = 0;
  *(unsigned char *)(v4 + 23) = 0;
  if ((v1 & 8) != 0) {
    goto LABEL_19;
  }
LABEL_22:
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v7) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15C2F58(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v21 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
    return *(void *)v21;
  }
  int v6 = (void *)(a1 + 8);
  while (2)
  {
    char v7 = (char *)(*(void *)v21 + 1);
    unsigned int v8 = **(unsigned char **)v21;
    if ((char)**(unsigned char **)v21 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        char v7 = (char *)sub_188C180(*(uint64_t *)v21, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        char v7 = (char *)(*(void *)v21 + 2);
      }
    }
    *(void *)uint64_t v21 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        unint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          unint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 24);
        goto LABEL_25;
      case 2u:
        if (v8 != 18) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void *)(a1 + 8);
        unint64_t v12 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          unint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 32);
        goto LABEL_25;
      case 3u:
        if (v8 != 26) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v12 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 40);
        goto LABEL_25;
      case 4u:
        if (v8 != 34) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v16 = *(void *)(a1 + 8);
        unint64_t v12 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          unint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 48);
LABEL_25:
        uint64_t v17 = (std::string *)sub_1880F84(v13, v12);
        uint64_t v18 = (void *)sub_188C244(v17, *(char **)v21, (uint64_t)a3);
        goto LABEL_26;
      default:
LABEL_29:
        if (v8) {
          BOOL v19 = (v8 & 7) == 4;
        }
        else {
          BOOL v19 = 1;
        }
        if (!v19)
        {
          if (*v6)
          {
            int v20 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            int v20 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            char v7 = *(char **)v21;
          }
          uint64_t v18 = sub_1885AC0(v8, v20, v7, a3);
LABEL_26:
          *(void *)uint64_t v21 = v18;
          if (!v18) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
            return *(void *)v21;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v21;
    }
  }
}

char *sub_15C31A8(uint64_t a1, char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_10:
  unint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) != 0) {
LABEL_5:
  }
    unint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15C32E4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_17;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) == 0)
  {
    if ((v1 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  unint64_t v14 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  uint64_t v16 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 8) != 0)
  {
LABEL_14:
    unint64_t v9 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v2 += v18;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15C3450()
{
  return 1;
}

void *sub_15C3458@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackAddressFields");
}

uint64_t sub_15C3468(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if ((uint64_t (***)())a1 != &off_253F828 && *(void *)(a1 + 32))
  {
    sub_16E9884();
    operator delete();
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C3534(uint64_t a1)
{
  sub_15C3468(a1);

  operator delete();
}

uint64_t sub_15C356C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) == 0) {
      goto LABEL_5;
    }
    unint64_t v3 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
LABEL_5:
      if ((v2 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    **(unsigned char **)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v2 & 2) != 0) {
LABEL_6:
    }
      uint64_t result = sub_16E98C0(*(void *)(result + 32));
  }
LABEL_7:
  if ((v2 & 0x1C) != 0)
  {
    *(void *)(v1 + 40) = 0;
    *(void *)(v1 + 48) = 0;
    *(_DWORD *)(v1 + 56) = 0;
  }
  char v5 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = v1 + 8;
  *(_DWORD *)(v4 + 8) = 0;
  if (v5)
  {
    return sub_188B4AC((uint64_t *)v4);
  }
  return result;
}

uint64_t sub_15C3610(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v36 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = (unsigned __int8 *)(*(void *)v36 + 1);
    unsigned int v9 = **(unsigned char **)v36;
    if ((char)**(unsigned char **)v36 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        uint64_t v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v36, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (unsigned __int8 *)(*(void *)v36 + 2);
      }
    }
    *(void *)uint64_t v36 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_36;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v12 = *(void **)(a1 + 32);
        if (!v12)
        {
          uint64_t v13 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v13 = (void *)*v13;
          }
          uint64_t v12 = sub_1788574((uint64_t)v13);
          *(void *)(a1 + 32) = v12;
          uint64_t v8 = *(unsigned __int8 **)v36;
        }
        unint64_t v14 = sub_12DE6D0(a3, (uint64_t)v12, v8);
        goto LABEL_43;
      case 2u:
        if (v9 != 16) {
          goto LABEL_36;
        }
        v5 |= 4u;
        uint64_t v15 = (char *)(v8 + 1);
        uint64_t v16 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_19;
        }
        int v17 = *v15;
        uint64_t v16 = v16 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          uint64_t v30 = sub_188C138((uint64_t)v8, v16);
          *(void *)uint64_t v36 = v30;
          *(void *)(a1 + 40) = v31;
          if (!v30) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v15 = (char *)(v8 + 2);
LABEL_19:
          *(void *)uint64_t v36 = v15;
          *(void *)(a1 + 40) = v16;
        }
        goto LABEL_44;
      case 3u:
        if (v9 != 24) {
          goto LABEL_36;
        }
        v5 |= 8u;
        uint64_t v18 = (char *)(v8 + 1);
        uint64_t v19 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_24;
        }
        int v20 = *v18;
        uint64_t v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          uint64_t v32 = sub_188C138((uint64_t)v8, v19);
          *(void *)uint64_t v36 = v32;
          *(void *)(a1 + 48) = v33;
          if (!v32) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v18 = (char *)(v8 + 2);
LABEL_24:
          *(void *)uint64_t v36 = v18;
          *(void *)(a1 + 48) = v19;
        }
        goto LABEL_44;
      case 4u:
        if (v9 != 34) {
          goto LABEL_36;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v21 = *(void *)(a1 + 8);
        int v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
        if (v21) {
          int v22 = (uint64_t *)*v22;
        }
        int v23 = (std::string *)sub_1880F84((void *)(a1 + 24), v22);
        unint64_t v14 = (void *)sub_188C244(v23, *(char **)v36, (uint64_t)a3);
        goto LABEL_43;
      case 5u:
        if (v9 != 40) {
          goto LABEL_36;
        }
        uint64_t v24 = (char *)(v8 + 1);
        unint64_t v25 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_33;
        }
        int v26 = *v24;
        int v27 = v25 + (v26 << 7);
        unint64_t v25 = (v27 - 128);
        if (v26 < 0)
        {
          *(void *)uint64_t v36 = sub_188C138((uint64_t)v8, (v27 - 128));
          if (!*(void *)v36) {
            goto LABEL_59;
          }
          unint64_t v25 = v34;
        }
        else
        {
          uint64_t v24 = (char *)(v8 + 2);
LABEL_33:
          *(void *)uint64_t v36 = v24;
        }
        if (v25 > 4)
        {
          if (*v7) {
            uint64_t v35 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v35 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(5, v25, v35);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x10u;
          *(_DWORD *)(a1 + 56) = v25;
        }
        goto LABEL_44;
      default:
LABEL_36:
        if (v9) {
          BOOL v28 = (v9 & 7) == 4;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          if (*v7)
          {
            uint64_t v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v29 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = *(unsigned __int8 **)v36;
          }
          unint64_t v14 = sub_1885AC0(v9, v29, (char *)v8, a3);
LABEL_43:
          *(void *)uint64_t v36 = v14;
          if (!v14) {
            goto LABEL_59;
          }
LABEL_44:
          if (sub_11947B8((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_59:
        }
          *(void *)uint64_t v36 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v36;
    }
  }
}

char *sub_15C396C(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_16E9DDC(v7, v9, a3);
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(void *)(a1 + 40);
    char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 8) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(void *)(a1 + 48);
    char *v4 = 24;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  if ((v6 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v16 = *(int *)(a1 + 56);
    char *v4 = 40;
    v4[1] = v16;
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      unint64_t v17 = v16 >> 7;
      v4[2] = v16 >> 7;
      v4 += 3;
      if (v16 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v18 = v17 >> 14;
          v17 >>= 7;
          *v4++ = v17;
        }
        while (v18);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    int v22 = *(void **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    int v22 = (void *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v23)
  {
    uint64_t v24 = (int)v23;
    memcpy(v4, v22, (int)v23);
    v4 += v24;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v22, v23, v4);
}

uint64_t sub_15C3C1C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x1F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_20;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v7 = sub_16EA048(*(void *)(a1 + 32));
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_10;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_10:
  if ((v2 & 4) != 0)
  {
    v3 += ((9 * (__clz(*(void *)(a1 + 40) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_12:
      if ((v2 & 0x10) == 0) {
        goto LABEL_20;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_12;
  }
  v3 += ((9 * (__clz(*(void *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_16:
  int v8 = *(_DWORD *)(a1 + 56);
  if (v8 < 0) {
    uint64_t v9 = 11;
  }
  else {
    uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v9;
LABEL_20:
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v3 += v13;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15C3D90(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x1F) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v7 = (std::string **)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_24;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void **)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      unint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        unint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = sub_1788574((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_2545950;
    }
    sub_16EA18C((uint64_t)v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_25;
    }
LABEL_24:
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0)
      {
LABEL_8:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_9;
      }
LABEL_7:
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      goto LABEL_8;
    }
LABEL_25:
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15C3EC0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_16EA300(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15C3EEC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackBusinessHours");
}

uint64_t sub_15C3EFC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_18;
    }
  }
  else if (v4)
  {
    goto LABEL_18;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 48));
  }
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 56));
  }
  if ((uint64_t (***)())a1 != &off_253F868)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      sub_15B3D28(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_18:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C4020(uint64_t a1)
{
  sub_15C3EFC(a1);

  operator delete();
}

uint64_t sub_15C4058(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x3F) == 0) {
    goto LABEL_9;
  }
  if (v2)
  {
    unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_19;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_19;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_23:
    unint64_t v7 = *(void *)(result + 40) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)unint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_27;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_27;
      }
    }
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_19:
  unint64_t v6 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(unsigned char **)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_23;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v6 = 0;
    *(unsigned char *)(v6 + 23) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_23;
    }
  }
LABEL_5:
  if ((v2 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_27:
  unint64_t v8 = *(void *)(result + 48) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v8 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v8 = 0;
    *(unsigned char *)(v8 + 23) = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_31;
    }
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  **(unsigned char **)unint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  if ((v2 & 0x10) == 0) {
    goto LABEL_7;
  }
LABEL_31:
  unint64_t v9 = *(void *)(result + 56) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v9 = 0;
    *(unsigned char *)(v9 + 23) = 0;
    if ((v2 & 0x20) == 0) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t result = sub_15B043C(*(void *)(result + 64));
    goto LABEL_9;
  }
  **(unsigned char **)unint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  if ((v2 & 0x20) != 0) {
    goto LABEL_8;
  }
LABEL_9:
  if ((v2 & 0xC0) != 0)
  {
    *(_DWORD *)(v1 + 80) = 0;
    *(void *)(v1 + 72) = 0;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15C41D4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v36 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
    goto LABEL_2;
  }
  unint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    unint64_t v8 = (unsigned __int8 *)(*(void *)v36 + 1);
    unsigned int v9 = **(unsigned char **)v36;
    if ((char)**(unsigned char **)v36 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        unint64_t v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v36, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        unint64_t v8 = (unsigned __int8 *)(*(void *)v36 + 2);
      }
    }
    *(void *)uint64_t v36 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 24);
        goto LABEL_47;
      case 2u:
        if (v9 != 18) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v13 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 32);
        goto LABEL_47;
      case 3u:
        if (v9 != 26) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v16 = *(void *)(a1 + 64);
        if (!v16)
        {
          unint64_t v17 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v17 = (void *)*v17;
          }
          uint64_t v16 = sub_15C1CB4((uint64_t)v17);
          *(void *)(a1 + 64) = v16;
          unint64_t v8 = *(unsigned __int8 **)v36;
        }
        unint64_t v18 = sub_11B3E48(a3, v16, v8);
        goto LABEL_48;
      case 4u:
        if (v9 != 32) {
          goto LABEL_51;
        }
        v5 |= 0x40u;
        uint64_t v19 = (char *)(v8 + 1);
        uint64_t v20 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_27;
        }
        int v21 = *v19;
        uint64_t v20 = v20 + (v21 << 7) - 128;
        if (v21 < 0)
        {
          uint64_t v32 = sub_188C138((uint64_t)v8, v20);
          *(void *)uint64_t v36 = v32;
          *(void *)(a1 + 72) = v33;
          if (!v32) {
            goto LABEL_69;
          }
        }
        else
        {
          uint64_t v19 = (char *)(v8 + 2);
LABEL_27:
          *(void *)uint64_t v36 = v19;
          *(void *)(a1 + 72) = v20;
        }
        goto LABEL_49;
      case 5u:
        if (v9 != 42) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v13 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
        if (v22) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 40);
        goto LABEL_47;
      case 6u:
        if (v9 != 48) {
          goto LABEL_51;
        }
        uint64_t v23 = (char *)(v8 + 1);
        unint64_t v24 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v25 = *v23;
        int v26 = v24 + (v25 << 7);
        unint64_t v24 = (v26 - 128);
        if (v25 < 0)
        {
          *(void *)uint64_t v36 = sub_188C138((uint64_t)v8, (v26 - 128));
          if (!*(void *)v36) {
            goto LABEL_69;
          }
          unint64_t v24 = v34;
        }
        else
        {
          uint64_t v23 = (char *)(v8 + 2);
LABEL_36:
          *(void *)uint64_t v36 = v23;
        }
        if (v24 > 2)
        {
          if (*v7) {
            uint64_t v35 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v35 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(6, v24, v35);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x80u;
          *(_DWORD *)(a1 + 80) = v24;
        }
        goto LABEL_49;
      case 7u:
        if (v9 != 58) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v27 = *(void *)(a1 + 8);
        uint64_t v13 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        if (v27) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 48);
        goto LABEL_47;
      case 8u:
        if (v9 != 66) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v28 = *(void *)(a1 + 8);
        uint64_t v13 = (uint64_t *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
        if (v28) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 56);
LABEL_47:
        uint64_t v29 = (std::string *)sub_1880F84(v14, v13);
        unint64_t v18 = (void *)sub_188C244(v29, *(char **)v36, (uint64_t)a3);
        goto LABEL_48;
      default:
LABEL_51:
        if (v9) {
          BOOL v30 = (v9 & 7) == 4;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30)
        {
          if (*v7)
          {
            uint64_t v31 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v31 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            unint64_t v8 = *(unsigned __int8 **)v36;
          }
          unint64_t v18 = sub_1885AC0(v9, v31, (char *)v8, a3);
LABEL_48:
          *(void *)uint64_t v36 = v18;
          if (!v18) {
            goto LABEL_69;
          }
LABEL_49:
          if (sub_11947B8((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_69:
        }
          *(void *)uint64_t v36 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v36;
    }
  }
}

char *sub_15C45D0(uint64_t a1, char *__dst, void *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    char v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  char v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_4:
    if ((v6 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
LABEL_8:
  if (*a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  char *v4 = 26;
  unsigned int v8 = *(_DWORD *)(v7 + 44);
  v4[1] = v8;
  if (v8 > 0x7F) {
    unsigned int v9 = sub_188A9CC(v8, v4 + 1);
  }
  else {
    unsigned int v9 = v4 + 2;
  }
  char v4 = sub_15B43E4(v7, v9, a3);
  if ((v6 & 0x40) != 0)
  {
LABEL_14:
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(void *)(a1 + 72);
    char *v4 = 32;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_20:
  if ((v6 & 4) != 0) {
    char v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  if ((v6 & 0x80) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(int *)(a1 + 80);
    char *v4 = 48;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 8) != 0) {
    char v4 = sub_117A0AC(a3, 7, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  if ((v6 & 0x10) != 0) {
    char v4 = sub_117A0AC(a3, 8, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*a3 - (void)v4 >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15C4894(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_34;
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0)
  {
LABEL_9:
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    unint64_t v10 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
    uint64_t v12 = *(void *)(v10 + 8);
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = v11;
    }
    v3 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*(unsigned char *)(a1 + 16) & 8) == 0)
    {
LABEL_14:
      if ((*(unsigned char *)(a1 + 16) & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
  }
  else if ((*(unsigned char *)(a1 + 16) & 8) == 0)
  {
    goto LABEL_14;
  }
  unint64_t v13 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  uint64_t v15 = *(void *)(v13 + 8);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v14;
  }
  v3 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*(unsigned char *)(a1 + 16) & 0x10) == 0)
  {
LABEL_15:
    if ((*(unsigned char *)(a1 + 16) & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_25:
  unint64_t v16 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  uint64_t v18 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v17;
  }
  v3 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*(unsigned char *)(a1 + 16) & 0x20) == 0)
  {
LABEL_16:
    if ((*(unsigned char *)(a1 + 16) & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v19 = sub_15B4924(*(void *)(a1 + 64));
  v3 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
LABEL_29:
  v3 += ((9 * (__clz(*(void *)(a1 + 72) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v2 & 0x80) == 0) {
    goto LABEL_34;
  }
LABEL_30:
  int v20 = *(_DWORD *)(a1 + 80);
  if (v20 < 0) {
    uint64_t v21 = 11;
  }
  else {
    uint64_t v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v21;
LABEL_34:
  uint64_t v22 = *(void *)(a1 + 8);
  if (v22)
  {
    unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v24 + 31) < 0) {
      uint64_t v25 = *(void *)(v24 + 16);
    }
    else {
      uint64_t v25 = *(unsigned __int8 *)(v24 + 31);
    }
    v3 += v25;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15C4AFC(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v4)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      unint64_t v7 = (std::string **)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_22;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    unint64_t v10 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    sub_1881DF4((std::string **)(a1 + 32), v10, v12);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_25;
    }
LABEL_22:
    unint64_t v13 = (long long *)(*(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (uint64_t *)*v15;
    }
    sub_1881DF4((std::string **)(a1 + 40), v13, v15);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_28;
    }
LABEL_25:
    unint64_t v16 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (uint64_t *)*v18;
    }
    sub_1881DF4((std::string **)(a1 + 48), v16, v18);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_31;
    }
LABEL_28:
    uint64_t v19 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 0x10u;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (uint64_t *)*v21;
    }
    sub_1881DF4((std::string **)(a1 + 56), v19, v21);
    if ((v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v4 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
LABEL_31:
    *(_DWORD *)(a1 + 16) |= 0x20u;
    uint64_t v22 = *(void *)(a1 + 64);
    if (!v22)
    {
      uint64_t v23 = *(void *)(a1 + 8);
      unint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        unint64_t v24 = (void *)*v24;
      }
      uint64_t v22 = sub_15C1CB4((uint64_t)v24);
      *(void *)(a1 + 64) = v22;
    }
    if (*(void *)(a2 + 64)) {
      uint64_t v25 = *(uint64_t (****)())(a2 + 64);
    }
    else {
      uint64_t v25 = &off_253F2E8;
    }
    sub_15B04F0(v22, (uint64_t)v25);
    if ((v4 & 0x40) == 0)
    {
LABEL_9:
      if ((v4 & 0x80) == 0)
      {
LABEL_11:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_12;
      }
LABEL_10:
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      goto LABEL_11;
    }
LABEL_39:
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15C4CFC(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 0x20) == 0) {
    return 1;
  }
  uint64_t result = sub_15B06D8(*(void *)(a1 + 64));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15C4D28@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PhotoMetadata");
}

void *sub_15C4D38(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DE8(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C4DB4(void *a1)
{
  sub_15C4D38(a1);

  operator delete();
}

uint64_t sub_15C4DEC(uint64_t a1)
{
  uint64_t result = sub_188CC00(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15C4E44(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v28 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v28, a3[11].i32[1])) {
    return *(void *)v28;
  }
  uint64_t v6 = (uint64_t **)(a1 + 24);
  unint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v8 = (char *)(*(void *)v28 + 1);
    unsigned int v9 = **(unsigned char **)v28;
    if ((char)**(unsigned char **)v28 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v28, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (char *)(*(void *)v28 + 2);
      }
    }
    *(void *)uint64_t v28 = v8;
    if (v9 >> 3 == 2)
    {
      if (v9 == 18)
      {
        uint64_t v15 = v8 - 1;
        while (1)
        {
          unint64_t v16 = (char *)(v15 + 1);
          *(void *)uint64_t v28 = v15 + 1;
          uint64_t v17 = *(_DWORD **)(a1 + 40);
          if (v17 && (uint64_t v18 = *(int *)(a1 + 32), (int)v18 < *v17))
          {
            *(_DWORD *)(a1 + 32) = v18 + 1;
            uint64_t v19 = *(std::string **)&v17[2 * v18 + 2];
          }
          else
          {
            if (!*v6) {
              operator new();
            }
            void *v21 = v20;
            v21[1] = sub_3A6EDC;
            void *v20 = 0;
            v20[1] = 0;
            int v20[2] = 0;
            uint64_t v19 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v20);
            unint64_t v16 = *(char **)v28;
          }
          uint64_t v15 = sub_188C244(v19, v16, (uint64_t)a3);
          *(void *)uint64_t v28 = v15;
          if (!v15) {
            goto LABEL_50;
          }
          if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
            goto LABEL_39;
          }
        }
      }
    }
    else if (v9 >> 3 == 1 && v9 == 8)
    {
      uint64_t v22 = v8 + 1;
      unint64_t v23 = *v8;
      if ((*v8 & 0x80000000) == 0) {
        goto LABEL_36;
      }
      int v24 = *v22;
      int v25 = v23 + (v24 << 7);
      unint64_t v23 = (v25 - 128);
      if (v24 < 0)
      {
        *(void *)uint64_t v28 = sub_188C138((uint64_t)v8, (v25 - 128));
        if (!*(void *)v28) {
          goto LABEL_50;
        }
        unint64_t v23 = v26;
      }
      else
      {
        uint64_t v22 = v8 + 2;
LABEL_36:
        *(void *)uint64_t v28 = v22;
      }
      if (v23 > 2)
      {
        if (*v7) {
          uint64_t v27 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v27 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        sub_188C020(1, v23, v27);
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 48) = v23;
      }
      goto LABEL_39;
    }
    if (!v9 || (v9 & 7) == 4) {
      break;
    }
    if (*v7)
    {
      uint64_t v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = *(char **)v28;
    }
    *(void *)uint64_t v28 = sub_1885AC0(v9, v14, v8, a3);
    if (!*(void *)v28) {
      goto LABEL_50;
    }
LABEL_39:
    if (sub_11947B8((uint64_t)a3, (char **)v28, a3[11].i32[1])) {
      return *(void *)v28;
    }
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    return *(void *)v28;
  }
LABEL_50:
  *(void *)uint64_t v28 = 0;
  return *(void *)v28;
}

char *sub_15C50E8(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  char v4 = (char *)__dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= __dst) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v6 = *(int *)(a1 + 48);
    char *v4 = 8;
    v4[1] = v6;
    if (v6 > 0x7F)
    {
      v4[1] = v6 | 0x80;
      unint64_t v7 = v6 >> 7;
      v4[2] = v6 >> 7;
      v4 += 3;
      if (v6 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v8 = v7 >> 14;
          v7 >>= 7;
          *v4++ = v7;
        }
        while (v8);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *(void **)(*(void *)(a1 + 40) + v10 + 8);
      if (*((char *)v12 + 23) < 0)
      {
        int64_t v13 = v12[1];
        if (v13 > 127) {
          goto LABEL_19;
        }
      }
      else
      {
        int64_t v13 = *((unsigned __int8 *)v12 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v13)
      {
        char *v4 = 18;
        v4[1] = v13;
        if (*((char *)v12 + 23) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        uint64_t v14 = v4 + 2;
        memcpy(v14, v12, v13);
        char v4 = &v14[v13];
        goto LABEL_17;
      }
LABEL_19:
      char v4 = (char *)sub_188A868(a3, 2, (uint64_t)v12, v4);
LABEL_17:
      v10 += 8;
    }
    while (v11 != v10);
  }
  uint64_t v15 = *(void *)(a1 + 8);
  if ((v15 & 1) == 0) {
    return v4;
  }
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v17 + 31) < 0)
  {
    uint64_t v18 = *(void **)(v17 + 8);
    uint64_t v19 = *(void *)(v17 + 16);
  }
  else
  {
    uint64_t v18 = (void *)(v17 + 8);
    LODWORD(v19) = *(unsigned __int8 *)(v17 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v19)
  {
    uint64_t v20 = (int)v19;
    memcpy(v4, v18, (int)v19);
    v4 += v20;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v18, v19, v4);
}

uint64_t sub_15C52D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    int v7 = *(_DWORD *)(a1 + 48);
    if (v7 < 0) {
      uint64_t v8 = 11;
    }
    else {
      uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v3 += v8;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v3 += v12;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15C53A0()
{
  return 1;
}

void *sub_15C53A8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.DebugSettings");
}

void *sub_15C53B8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DA8((uint64_t)(a1 + 10));
  sub_1889DA8((uint64_t)(a1 + 8));
  sub_1889DE8(a1 + 5);
  sub_1889DE8(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C544C(void *a1)
{
  sub_15C53B8(a1);

  operator delete();
}

uint64_t sub_15C5484(uint64_t a1)
{
  sub_188CC00(a1 + 16);
  uint64_t result = sub_188CC00(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15C54E4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)unint64_t v50 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v50, a3[11].i32[1])) {
    return *(void *)v50;
  }
  uint64_t v49 = (uint64_t *)(a1 + 8);
  uint64_t v6 = (uint64_t **)(a1 + 40);
  int v7 = (uint64_t **)(a1 + 16);
  while (2)
  {
    uint64_t v8 = (char *)(*(void *)v50 + 1);
    unsigned int v9 = **(unsigned char **)v50;
    if ((char)**(unsigned char **)v50 < 0)
    {
      int v10 = *v8;
      unsigned int v11 = v9 + (v10 << 7);
      unsigned int v9 = v11 - 128;
      if (v10 < 0)
      {
        uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v50, v11 - 128);
        unsigned int v9 = v12;
      }
      else
      {
        uint64_t v8 = (char *)(*(void *)v50 + 2);
      }
    }
    *(void *)unint64_t v50 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_78;
        }
        int64_t v13 = v8 - 1;
        while (1)
        {
          uint64_t v14 = (char *)(v13 + 1);
          *(void *)unint64_t v50 = v13 + 1;
          uint64_t v15 = *(_DWORD **)(a1 + 32);
          if (v15 && (uint64_t v16 = *(int *)(a1 + 24), (int)v16 < *v15))
          {
            *(_DWORD *)(a1 + 24) = v16 + 1;
            unint64_t v17 = *(std::string **)&v15[2 * v16 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            *uint64_t v19 = v18;
            v19[1] = sub_3A6EDC;
            *uint64_t v18 = 0;
            v18[1] = 0;
            v18[2] = 0;
            unint64_t v17 = (std::string *)sub_188CDC8(a1 + 16, (uint64_t)v18);
            uint64_t v14 = *(char **)v50;
          }
          int64_t v13 = sub_188C244(v17, v14, (uint64_t)a3);
          *(void *)unint64_t v50 = v13;
          if (!v13) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v13 || *v13 != 10) {
            goto LABEL_86;
          }
        }
      case 2u:
        if (v9 != 18) {
          goto LABEL_78;
        }
        uint64_t v20 = v8 - 1;
        while (1)
        {
          uint64_t v21 = (char *)(v20 + 1);
          *(void *)unint64_t v50 = v20 + 1;
          uint64_t v22 = *(_DWORD **)(a1 + 56);
          if (v22 && (uint64_t v23 = *(int *)(a1 + 48), (int)v23 < *v22))
          {
            *(_DWORD *)(a1 + 48) = v23 + 1;
            int v24 = *(std::string **)&v22[2 * v23 + 2];
          }
          else
          {
            if (!*v6) {
              operator new();
            }
            void *v26 = v25;
            v26[1] = sub_3A6EDC;
            void *v25 = 0;
            v25[1] = 0;
            v25[2] = 0;
            int v24 = (std::string *)sub_188CDC8(a1 + 40, (uint64_t)v25);
            uint64_t v21 = *(char **)v50;
          }
          uint64_t v20 = sub_188C244(v24, v21, (uint64_t)a3);
          *(void *)unint64_t v50 = v20;
          if (!v20) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v20 || *v20 != 18) {
            goto LABEL_86;
          }
        }
      case 3u:
        if (v9 == 24)
        {
          uint64_t v27 = (uint64_t)(v8 - 1);
          while (1)
          {
            *(void *)unint64_t v50 = v27 + 1;
            unint64_t v28 = *(unsigned __int8 *)(v27 + 1);
            uint64_t v29 = (char *)(v27 + 2);
            if (*(char *)(v27 + 1) < 0)
            {
              int v30 = *v29;
              int v31 = v28 + (v30 << 7);
              unint64_t v28 = (v31 - 128);
              if (v30 < 0)
              {
                *(void *)unint64_t v50 = sub_188C138(v27 + 1, (v31 - 128));
                if (!*(void *)v50) {
                  return 0;
                }
                unint64_t v28 = v34;
                goto LABEL_39;
              }
              uint64_t v29 = (char *)(v27 + 3);
            }
            *(void *)unint64_t v50 = v29;
LABEL_39:
            if (sub_16B59A8(v28))
            {
              uint64_t v32 = *(unsigned int *)(a1 + 64);
              if (v32 == *(_DWORD *)(a1 + 68))
              {
                int v33 = v32 + 1;
                sub_188C80C((unsigned int *)(a1 + 64), v32 + 1);
                *(_DWORD *)(*(void *)(a1 + 72) + 4 * v32) = v28;
              }
              else
              {
                *(_DWORD *)(*(void *)(a1 + 72) + 4 * v32) = v28;
                int v33 = v32 + 1;
              }
              *(_DWORD *)(a1 + 64) = v33;
            }
            else
            {
              if (*v49) {
                uint64_t v35 = (std::string *)((*v49 & 0xFFFFFFFFFFFFFFFCLL) + 8);
              }
              else {
                uint64_t v35 = (std::string *)sub_188DBD8(v49);
              }
              sub_188C020(3, v28, v35);
            }
            uint64_t v27 = *(void *)v50;
            if (*(void *)a3 <= *(void *)v50 || **(unsigned char **)v50 != 24) {
              goto LABEL_86;
            }
          }
        }
        if (v9 != 26) {
          goto LABEL_78;
        }
        *(void *)&long long v51 = a1 + 64;
        *((void *)&v51 + 1) = sub_16B59A8;
        uint64_t v52 = a1 + 8;
        int v45 = 3;
        goto LABEL_77;
      case 4u:
        if (v9 == 32)
        {
          uint64_t v36 = (uint64_t)(v8 - 1);
          while (1)
          {
            *(void *)unint64_t v50 = v36 + 1;
            unint64_t v37 = *(unsigned __int8 *)(v36 + 1);
            unint64_t v38 = (char *)(v36 + 2);
            if (*(char *)(v36 + 1) < 0)
            {
              int v39 = *v38;
              int v40 = v37 + (v39 << 7);
              unint64_t v37 = (v40 - 128);
              if (v39 < 0)
              {
                *(void *)unint64_t v50 = sub_188C138(v36 + 1, (v40 - 128));
                if (!*(void *)v50) {
                  return 0;
                }
                unint64_t v37 = v43;
                goto LABEL_59;
              }
              unint64_t v38 = (char *)(v36 + 3);
            }
            *(void *)unint64_t v50 = v38;
LABEL_59:
            if (sub_16B59A8(v37))
            {
              uint64_t v41 = *(unsigned int *)(a1 + 80);
              if (v41 == *(_DWORD *)(a1 + 84))
              {
                int v42 = v41 + 1;
                sub_188C80C((unsigned int *)(a1 + 80), v41 + 1);
                *(_DWORD *)(*(void *)(a1 + 88) + 4 * v41) = v37;
              }
              else
              {
                *(_DWORD *)(*(void *)(a1 + 88) + 4 * v41) = v37;
                int v42 = v41 + 1;
              }
              *(_DWORD *)(a1 + 80) = v42;
            }
            else
            {
              if (*v49) {
                unint64_t v44 = (std::string *)((*v49 & 0xFFFFFFFFFFFFFFFCLL) + 8);
              }
              else {
                unint64_t v44 = (std::string *)sub_188DBD8(v49);
              }
              sub_188C020(4, v37, v44);
            }
            uint64_t v36 = *(void *)v50;
            if (*(void *)a3 <= *(void *)v50 || **(unsigned char **)v50 != 32) {
              goto LABEL_86;
            }
          }
        }
        if (v9 == 34)
        {
          *(void *)&long long v51 = a1 + 80;
          *((void *)&v51 + 1) = sub_16B59A8;
          uint64_t v52 = a1 + 8;
          int v45 = 4;
LABEL_77:
          int v53 = v45;
          uint64_t v46 = sub_1112E88((uint64_t)a3, v8, &v51);
LABEL_85:
          *(void *)unint64_t v50 = v46;
          if (!v46) {
            return 0;
          }
LABEL_86:
          if (sub_11947B8((uint64_t)a3, (char **)v50, a3[11].i32[1])) {
            return *(void *)v50;
          }
          continue;
        }
LABEL_78:
        if (v9) {
          BOOL v47 = (v9 & 7) == 4;
        }
        else {
          BOOL v47 = 1;
        }
        if (!v47)
        {
          if (*v49)
          {
            int v48 = (std::string *)((*v49 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            int v48 = (std::string *)sub_188DBD8(v49);
            uint64_t v8 = *(char **)v50;
          }
          uint64_t v46 = sub_1885AC0(v9, v48, v8, a3);
          goto LABEL_85;
        }
        if (!v8) {
          return 0;
        }
        a3[10].i32[0] = v9 - 1;
        return *(void *)v50;
      default:
        goto LABEL_78;
    }
  }
}

char *sub_15C5A5C(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      unsigned int v9 = *(void **)(*(void *)(a1 + 32) + v7 + 8);
      if (*((char *)v9 + 23) < 0)
      {
        int64_t v10 = v9[1];
        if (v10 > 127) {
          goto LABEL_12;
        }
      }
      else
      {
        int64_t v10 = *((unsigned __int8 *)v9 + 23);
      }
      if (*(void *)a3 - (void)__dst + 14 >= v10)
      {
        *__dst = 10;
        __dst[1] = v10;
        if (*((char *)v9 + 23) < 0) {
          unsigned int v9 = (void *)*v9;
        }
        unsigned int v11 = __dst + 2;
        memcpy(v11, v9, v10);
        __dst = &v11[v10];
        goto LABEL_10;
      }
LABEL_12:
      __dst = (char *)sub_188A868(a3, 1, (uint64_t)v9, __dst);
LABEL_10:
      v7 += 8;
    }
    while (v8 != v7);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 48);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 8 * v12;
    do
    {
      uint64_t v15 = *(void **)(*(void *)(a1 + 56) + v13 + 8);
      if (*((char *)v15 + 23) < 0)
      {
        int64_t v16 = v15[1];
        if (v16 > 127) {
          goto LABEL_24;
        }
      }
      else
      {
        int64_t v16 = *((unsigned __int8 *)v15 + 23);
      }
      if (*(void *)a3 - (void)__dst + 14 >= v16)
      {
        *__dst = 18;
        __dst[1] = v16;
        if (*((char *)v15 + 23) < 0) {
          uint64_t v15 = (void *)*v15;
        }
        unint64_t v17 = __dst + 2;
        memcpy(v17, v15, v16);
        __dst = &v17[v16];
        goto LABEL_22;
      }
LABEL_24:
      __dst = (char *)sub_188A868(a3, 2, (uint64_t)v15, __dst);
LABEL_22:
      v13 += 8;
    }
    while (v14 != v13);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 64);
  if ((int)v18 >= 1)
  {
    for (uint64_t i = 0; i != v18; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v20 = *(int *)(*(void *)(a1 + 72) + 4 * i);
      *__dst = 24;
      __dst[1] = v20;
      if (v20 > 0x7F)
      {
        __dst[1] = v20 | 0x80;
        unint64_t v21 = v20 >> 7;
        __dst[2] = v20 >> 7;
        __dst += 3;
        if (v20 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v22 = v21 >> 14;
            v21 >>= 7;
            *__dst++ = v21;
          }
          while (v22);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  uint64_t v23 = *(unsigned int *)(a1 + 80);
  if ((int)v23 >= 1)
  {
    for (uint64_t j = 0; j != v23; ++j)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v25 = *(int *)(*(void *)(a1 + 88) + 4 * j);
      *__dst = 32;
      __dst[1] = v25;
      if (v25 > 0x7F)
      {
        __dst[1] = v25 | 0x80;
        unint64_t v26 = v25 >> 7;
        __dst[2] = v25 >> 7;
        __dst += 3;
        if (v25 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v27 = v26 >> 14;
            v26 >>= 7;
            *__dst++ = v26;
          }
          while (v27);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  uint64_t v28 = *(void *)(a1 + 8);
  if ((v28 & 1) == 0) {
    return __dst;
  }
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v30 + 31) < 0)
  {
    int v31 = *(void **)(v30 + 8);
    uint64_t v32 = *(void *)(v30 + 16);
  }
  else
  {
    int v31 = (void *)(v30 + 8);
    LODWORD(v32) = *(unsigned __int8 *)(v30 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v32)
  {
    uint64_t v33 = (int)v32;
    memcpy(__dst, v31, (int)v32);
    __dst += v33;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v31, v32, __dst);
}

uint64_t sub_15C5DA4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 32) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 48);
  uint64_t v8 = v3 + v7;
  if ((int)v7 >= 1)
  {
    unsigned int v9 = (uint64_t *)(*(void *)(a1 + 56) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v12 = *(void *)(v10 + 8);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v11;
      }
      v8 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      --v7;
    }
    while (v7);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 64);
  if (v13)
  {
    int v14 = 0;
    uint64_t v15 = 0;
    do
    {
      int v16 = *(_DWORD *)(*(void *)(a1 + 72) + 4 * v14);
      if (v16 < 0) {
        uint64_t v17 = 10;
      }
      else {
        uint64_t v17 = (9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6;
      }
      v15 += v17;
      ++v14;
    }
    while (v13 != v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18)
  {
    int v19 = 0;
    uint64_t v20 = 0;
    do
    {
      int v21 = *(_DWORD *)(*(void *)(a1 + 88) + 4 * v19);
      if (v21 < 0) {
        uint64_t v22 = 10;
      }
      else {
        uint64_t v22 = (9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6;
      }
      v20 += v22;
      ++v19;
    }
    while (v18 != v19);
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v23 = v8 + v13 + v15 + v18 + v20;
  uint64_t v24 = *(void *)(a1 + 8);
  if (v24)
  {
    unint64_t v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v26 + 31) < 0) {
      uint64_t v27 = *(void *)(v26 + 16);
    }
    else {
      uint64_t v27 = *(unsigned __int8 *)(v26 + 31);
    }
    v23 += v27;
  }
  *(_DWORD *)(a1 + 96) = v23;
  return v23;
}

std::string *sub_15C5F4C(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result->__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 24));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3->__r_.__value_.__r.__words[2], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    int v7 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v4;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v7;
    std::string::size_type size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v7) {
      *std::string::size_type size = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = (const std::string **)(*(void *)(a2 + 56) + 8);
    uint64_t v11 = (std::string **)sub_188CCE4((uint64_t)&v3[1].__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 48));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[1].__r_.__value_.__r.__words[2], v11, v10, v9, *(_DWORD *)v3[2].__r_.__value_.__l.__size_ - LODWORD(v3[2].__r_.__value_.__l.__data_));
    int v12 = LODWORD(v3[2].__r_.__value_.__l.__data_) + v9;
    LODWORD(v3[2].__r_.__value_.__l.__data_) = v12;
    uint64_t v13 = (int *)v3[2].__r_.__value_.__l.__size_;
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 64);
  if (v14)
  {
    uint64_t v15 = SLODWORD(v3[2].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[2].__r_.__value_.__r.__words[2], v15 + v14);
    std::string::pointer data = v3[3].__r_.__value_.__l.__data_;
    LODWORD(v3[2].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 64);
    uint64_t result = (std::string *)memcpy(&data[4 * v15], *(const void **)(a2 + 72), 4 * *(int *)(a2 + 64));
  }
  int v17 = *(_DWORD *)(a2 + 80);
  if (v17)
  {
    uint64_t v18 = SLODWORD(v3[3].__r_.__value_.__r.__words[1]);
    sub_188C80C((unsigned int *)&v3[3].__r_.__value_.__r.__words[1], v18 + v17);
    std::string::size_type v19 = v3[3].__r_.__value_.__r.__words[2];
    LODWORD(v3[3].__r_.__value_.__r.__words[1]) += *(_DWORD *)(a2 + 80);
    uint64_t result = (std::string *)memcpy((void *)(v19 + 4 * v18), *(const void **)(a2 + 88), 4 * *(int *)(a2 + 80));
  }
  uint64_t v20 = *(void *)(a2 + 8);
  if (v20)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v20 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15C6108()
{
  return 1;
}

void *sub_15C6110@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.AmenityCorrections");
}

uint64_t sub_15C6120(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C5310;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_15C619C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C5390;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = &qword_2550250;
  result[6] = &qword_2550250;
  return result;
}

uint64_t sub_15C6224(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C5410;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_15C62B0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C5490;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(void *)(result + 32) = &qword_2550250;
  *(void *)(result + 40) = &qword_2550250;
  *(void *)(result + 48) = &qword_2550250;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = &qword_2550250;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_15C6344(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C5510;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_15C63E0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C5590;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = a1;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = a1;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void *sub_15C6490(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15C6528((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_16386A0(a1 + 6);
  sub_1889DE8(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t sub_15C6528(uint64_t result)
{
  if ((uint64_t (***)())result != &off_253F960)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 72))
    {
      sub_1762C7C();
      operator delete();
    }
    uint64_t v2 = *(void *)(result + 80);
    if (v2)
    {
      sub_15CA4F0(v2);
      operator delete();
    }
    uint64_t v3 = *(void *)(v1 + 88);
    if (v3)
    {
      sub_15C91E4(v3);
      operator delete();
    }
    uint64_t result = *(void *)(v1 + 96);
    if (result)
    {
      sub_15C7DDC(result);
      operator delete();
    }
  }
  return result;
}

void sub_15C65F4(void *a1)
{
  sub_15C6490(a1);

  operator delete();
}

uint64_t sub_15C662C(uint64_t a1)
{
  uint64_t result = sub_188CC00(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  if ((int)v3 >= 1)
  {
    int v4 = (uint64_t *)(*(void *)(a1 + 64) + 8);
    do
    {
      uint64_t v5 = *v4++;
      uint64_t result = sub_15C88E4(v5);
      --v3;
    }
    while (v3);
    *(_DWORD *)(a1 + 56) = 0;
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0xF) == 0) {
    goto LABEL_11;
  }
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = sub_15C6704(*(void *)(a1 + 80));
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  uint64_t result = sub_175FE78(*(void *)(a1 + 72));
  if ((v6 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 4) == 0) {
    goto LABEL_9;
  }
LABEL_17:
  uint64_t result = sub_15C67B8(*(void *)(a1 + 88));
  if ((v6 & 8) != 0) {
LABEL_10:
  }
    uint64_t result = sub_15C6824(*(void *)(a1 + 96));
LABEL_11:
  char v8 = *(unsigned char *)(a1 + 8);
  uint64_t v7 = a1 + 8;
  *(_DWORD *)(v7 + 96) = 0;
  *(_DWORD *)(v7 + 8) = 0;
  if (v8)
  {
    return sub_188B4AC((uint64_t *)v7);
  }
  return result;
}

uint64_t sub_15C6704(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15C9EF4(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if (*(unsigned char *)(v1 + 16))
  {
    unint64_t v5 = *(void *)(v1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
  char v7 = *(unsigned char *)(v1 + 8);
  uint64_t v6 = v1 + 8;
  *(unsigned char *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

uint64_t sub_15C67B8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_15C6704(*(void *)(result + 24));
    }
    *(_DWORD *)(v1 + 32) = 1;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15C6824(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15B2C80(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v1 + 64) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = sub_16C5D20(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 56) = 0;
  }
  int v8 = *(_DWORD *)(v1 + 16);
  if ((v8 & 0xF) == 0) {
    goto LABEL_15;
  }
  if (v8)
  {
    unint64_t v11 = *(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
    {
      **(unsigned char **)unint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      if ((v8 & 2) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v11 = 0;
      *(unsigned char *)(v11 + 23) = 0;
      if ((v8 & 2) != 0) {
        goto LABEL_23;
      }
    }
LABEL_12:
    if ((v8 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
  if ((v8 & 2) == 0) {
    goto LABEL_12;
  }
LABEL_23:
  unint64_t v12 = *(void *)(v1 + 80) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v12 + 23) < 0)
  {
    **(unsigned char **)unint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    if ((v8 & 4) != 0) {
      goto LABEL_27;
    }
LABEL_13:
    if ((v8 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  *(unsigned char *)unint64_t v12 = 0;
  *(unsigned char *)(v12 + 23) = 0;
  if ((v8 & 4) == 0) {
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = (uint64_t)sub_16CD894(*(void *)(v1 + 88));
  if ((v8 & 8) != 0) {
LABEL_14:
  }
    uint64_t result = (uint64_t)sub_15B09D0(*(void *)(v1 + 96));
LABEL_15:
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v9 = v1 + 8;
  *(_DWORD *)(v9 + 8) = 0;
  if (v10)
  {
    return sub_188B4AC((uint64_t *)v9);
  }
  return result;
}

uint64_t sub_15C6960(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v42 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v42, a3[11].i32[1])) {
    return *(void *)v42;
  }
  uint64_t v6 = (void *)(a1 + 8);
  uint64_t v7 = (uint64_t **)(a1 + 24);
  while (2)
  {
    int v8 = (unsigned __int8 *)(*(void *)v42 + 1);
    unsigned int v9 = **(unsigned char **)v42;
    if ((char)**(unsigned char **)v42 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        int v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v42, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        int v8 = (unsigned __int8 *)(*(void *)v42 + 2);
      }
    }
    *(void *)int v42 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_62;
        }
        unint64_t v12 = (char *)(v8 + 1);
        unint64_t v13 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v14 = *v12;
        int v15 = v13 + (v14 << 7);
        unint64_t v13 = (v15 - 128);
        if (v14 < 0)
        {
          *(void *)int v42 = sub_188C138((uint64_t)v8, (v15 - 128));
          if (!*(void *)v42) {
            return 0;
          }
          unint64_t v13 = v40;
        }
        else
        {
          unint64_t v12 = (char *)(v8 + 2);
LABEL_13:
          *(void *)int v42 = v12;
        }
        if (v13 > 3)
        {
          if (*v6) {
            uint64_t v41 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v41 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(1, v13, v41);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x10u;
          *(_DWORD *)(a1 + 104) = v13;
        }
        goto LABEL_70;
      case 2u:
        if (v9 != 18) {
          goto LABEL_62;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v16 = *(void *)(a1 + 72);
        if (!v16)
        {
          int v17 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            int v17 = (void *)*v17;
          }
          uint64_t v16 = sub_178CDA8((uint64_t)v17);
          *(void *)(a1 + 72) = v16;
          int v8 = *(unsigned __int8 **)v42;
        }
        uint64_t v18 = sub_1265F8C(a3, v16, v8);
        goto LABEL_69;
      case 3u:
        if (v9 != 26) {
          goto LABEL_62;
        }
        std::string::size_type v19 = (const std::string::value_type *)(v8 - 1);
        while (1)
        {
          uint64_t v20 = (char *)(v19 + 1);
          *(void *)int v42 = v19 + 1;
          int v21 = *(_DWORD **)(a1 + 40);
          if (v21 && (uint64_t v22 = *(int *)(a1 + 32), (int)v22 < *v21))
          {
            *(_DWORD *)(a1 + 32) = v22 + 1;
            uint64_t v23 = *(std::string **)&v21[2 * v22 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            void *v25 = v24;
            v25[1] = sub_3A6EDC;
            void *v24 = 0;
            v24[1] = 0;
            int v24[2] = 0;
            uint64_t v23 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v24);
            uint64_t v20 = *(char **)v42;
          }
          std::string::size_type v19 = sub_188C244(v23, v20, (uint64_t)a3);
          *(void *)int v42 = v19;
          if (!v19) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v19 || *v19 != 26) {
            goto LABEL_70;
          }
        }
      case 4u:
        if (v9 != 34) {
          goto LABEL_62;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v26 = *(void *)(a1 + 80);
        if (!v26)
        {
          uint64_t v27 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v27 = (void *)*v27;
          }
          uint64_t v26 = sub_15CBC10((uint64_t)v27);
          *(void *)(a1 + 80) = v26;
          int v8 = *(unsigned __int8 **)v42;
        }
        uint64_t v18 = sub_15C6E18(a3, v26, v8);
        goto LABEL_69;
      case 5u:
        if (v9 != 42) {
          goto LABEL_62;
        }
        uint64_t v28 = v8 - 1;
        while (1)
        {
          uint64_t v29 = v28 + 1;
          *(void *)int v42 = v28 + 1;
          unint64_t v30 = *(_DWORD **)(a1 + 64);
          if (v30 && (uint64_t v31 = *(int *)(a1 + 56), (int)v31 < *v30))
          {
            *(_DWORD *)(a1 + 56) = v31 + 1;
            uint64_t v32 = *(void *)&v30[2 * v31 + 2];
          }
          else
          {
            uint64_t v33 = sub_15CBA08(*(void *)(a1 + 48));
            uint64_t v32 = sub_188CDC8(a1 + 48, v33);
            uint64_t v29 = *(unsigned __int8 **)v42;
          }
          uint64_t v28 = (unsigned __int8 *)sub_15C6EA8(a3, v32, v29);
          *(void *)int v42 = v28;
          if (!v28) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v28 || *v28 != 42) {
            goto LABEL_70;
          }
        }
      case 6u:
        if (v9 != 50) {
          goto LABEL_62;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v34 = *(void *)(a1 + 88);
        if (!v34)
        {
          uint64_t v35 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v35 = (void *)*v35;
          }
          uint64_t v34 = sub_15CBA90((uint64_t)v35);
          *(void *)(a1 + 88) = v34;
          int v8 = *(unsigned __int8 **)v42;
        }
        uint64_t v18 = (uint64_t)sub_152E060(a3, v34, v8);
        goto LABEL_69;
      case 7u:
        if (v9 != 58) {
          goto LABEL_62;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v36 = *(void **)(a1 + 96);
        if (!v36)
        {
          unint64_t v37 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unint64_t v37 = (void *)*v37;
          }
          uint64_t v36 = sub_15CB954((uint64_t)v37);
          *(void *)(a1 + 96) = v36;
          int v8 = *(unsigned __int8 **)v42;
        }
        uint64_t v18 = sub_15C6F38(a3, (uint64_t)v36, v8);
        goto LABEL_69;
      default:
LABEL_62:
        if (v9) {
          BOOL v38 = (v9 & 7) == 4;
        }
        else {
          BOOL v38 = 1;
        }
        if (!v38)
        {
          if (*v6)
          {
            int v39 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            int v39 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            int v8 = *(unsigned __int8 **)v42;
          }
          uint64_t v18 = (uint64_t)sub_1885AC0(v9, v39, (char *)v8, a3);
LABEL_69:
          *(void *)int v42 = v18;
          if (!v18) {
            return 0;
          }
LABEL_70:
          if (sub_11947B8((uint64_t)a3, (char **)v42, a3[11].i32[1])) {
            return *(void *)v42;
          }
          continue;
        }
        if (!v8) {
          return 0;
        }
        a3[10].i32[0] = v9 - 1;
        return *(void *)v42;
    }
  }
}

uint64_t sub_15C6E18(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15CA5D4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15C6EA8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15C89B8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15C6F38(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15C7F34(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15C6FC8(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 104);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 72);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 44);
    v4[1] = v11;
    if (v11 > 0x7F) {
      unint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      unint64_t v12 = v4 + 2;
    }
    uint64_t v4 = sub_1763540(v10, v12, a3);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *(void **)(*(void *)(a1 + 40) + v14 + 8);
      if (*((char *)v16 + 23) < 0)
      {
        int64_t v17 = v16[1];
        if (v17 > 127) {
          goto LABEL_26;
        }
      }
      else
      {
        int64_t v17 = *((unsigned __int8 *)v16 + 23);
      }
      if ((uint64_t)(*a3 - (void)v4 + 14) >= v17)
      {
        char *v4 = 26;
        v4[1] = v17;
        if (*((char *)v16 + 23) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        uint64_t v18 = v4 + 2;
        memcpy(v18, v16, v17);
        uint64_t v4 = &v18[v17];
        goto LABEL_24;
      }
LABEL_26:
      uint64_t v4 = (char *)sub_188A868(a3, 3, (uint64_t)v16, v4);
LABEL_24:
      v14 += 8;
    }
    while (v15 != v14);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v19 = *(void *)(a1 + 80);
    char *v4 = 34;
    unsigned int v20 = *(_DWORD *)(v19 + 20);
    v4[1] = v20;
    if (v20 > 0x7F) {
      int v21 = sub_188A9CC(v20, v4 + 1);
    }
    else {
      int v21 = v4 + 2;
    }
    uint64_t v4 = sub_15CA8F0(v19, v21, a3);
  }
  int v22 = *(_DWORD *)(a1 + 56);
  if (v22)
  {
    for (int i = 0; i != v22; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8 * i + 8);
      char *v4 = 42;
      unsigned int v25 = *(_DWORD *)(v24 + 20);
      v4[1] = v25;
      if (v25 > 0x7F) {
        uint64_t v26 = sub_188A9CC(v25, v4 + 1);
      }
      else {
        uint64_t v26 = v4 + 2;
      }
      uint64_t v4 = sub_15C8D10(v24, v26, a3);
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v27 = *(void *)(a1 + 88);
    char *v4 = 50;
    unsigned int v28 = *(_DWORD *)(v27 + 20);
    v4[1] = v28;
    if (v28 > 0x7F) {
      uint64_t v29 = sub_188A9CC(v28, v4 + 1);
    }
    else {
      uint64_t v29 = v4 + 2;
    }
    uint64_t v4 = sub_15C94E4(v27, (unint64_t)v29, a3);
  }
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v30 = *(void *)(a1 + 96);
    char *v4 = 58;
    unsigned int v31 = *(_DWORD *)(v30 + 20);
    v4[1] = v31;
    if (v31 > 0x7F) {
      uint64_t v32 = sub_188A9CC(v31, v4 + 1);
    }
    else {
      uint64_t v32 = v4 + 2;
    }
    uint64_t v4 = sub_15C82DC(v30, (unint64_t)v32, a3);
  }
  uint64_t v33 = *(void *)(a1 + 8);
  if ((v33 & 1) == 0) {
    return v4;
  }
  unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v35 + 31) < 0)
  {
    uint64_t v36 = *(void **)(v35 + 8);
    uint64_t v37 = *(void *)(v35 + 16);
  }
  else
  {
    uint64_t v36 = (void *)(v35 + 8);
    LODWORD(v37) = *(unsigned __int8 *)(v35 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v37)
  {
    uint64_t v38 = (int)v37;
    memcpy(v4, v36, (int)v37);
    v4 += v38;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v36, v37, v4);
}

uint64_t sub_15C73C4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 < 1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      uint64_t v7 = *(void *)(v5 + 8);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = v6;
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      --v2;
    }
    while (v2);
  }
  uint64_t v8 = *(int *)(a1 + 56);
  uint64_t v9 = v4 + v8;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    unsigned int v11 = (uint64_t *)(v10 + 8);
  }
  else {
    unsigned int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = sub_15C8EE8(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  int v15 = *(_DWORD *)(a1 + 16);
  if ((v15 & 0x1F) != 0)
  {
    if (v15)
    {
      uint64_t v21 = sub_1763C40(*(void *)(a1 + 72));
      v9 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v15 & 2) == 0)
      {
LABEL_17:
        if ((v15 & 4) == 0) {
          goto LABEL_18;
        }
        goto LABEL_28;
      }
    }
    else if ((v15 & 2) == 0)
    {
      goto LABEL_17;
    }
    uint64_t v22 = sub_15CAA90(*(void *)(a1 + 80));
    v9 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 4) == 0)
    {
LABEL_18:
      if ((v15 & 8) == 0) {
        goto LABEL_19;
      }
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v23 = sub_15C967C(*(void *)(a1 + 88));
    v9 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 8) == 0)
    {
LABEL_19:
      if ((v15 & 0x10) == 0) {
        goto LABEL_24;
      }
LABEL_20:
      int v16 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v16 >= 0) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 11;
      }
      v9 += v18;
      goto LABEL_24;
    }
LABEL_29:
    uint64_t v24 = sub_15C85B0(*(void *)(a1 + 96));
    v9 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
LABEL_24:
  uint64_t v19 = *(void *)(a1 + 8);
  if (v19)
  {
    unint64_t v25 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v25 + 31) < 0) {
      uint64_t v26 = *(void *)(v25 + 16);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 31);
    }
    v9 += v26;
  }
  *(_DWORD *)(a1 + 20) = v9;
  return v9;
}

void sub_15C75E4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_188FB98(a1 + 24, v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 64) + 8);
    unsigned int v11 = (uint64_t *)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_16388A0((uint64_t *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if ((v14 & 0x1F) != 0)
  {
    if (v14)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v16 = *(void *)(a1 + 72);
      if (!v16)
      {
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          uint64_t v18 = (void *)*v18;
        }
        uint64_t v16 = sub_178CDA8((uint64_t)v18);
        *(void *)(a1 + 72) = v16;
      }
      if (*(void *)(a2 + 72)) {
        uint64_t v19 = *(uint64_t (****)())(a2 + 72);
      }
      else {
        uint64_t v19 = &off_25486C0;
      }
      sub_1760D4C(v16, (uint64_t)v19);
      if ((v14 & 2) == 0)
      {
LABEL_10:
        if ((v14 & 4) == 0) {
          goto LABEL_11;
        }
        goto LABEL_35;
      }
    }
    else if ((v14 & 2) == 0)
    {
      goto LABEL_10;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    unsigned int v20 = *(std::string **)(a1 + 80);
    if (!v20)
    {
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        uint64_t v22 = (void *)*v22;
      }
      unsigned int v20 = (std::string *)sub_15CBC10((uint64_t)v22);
      *(void *)(a1 + 80) = v20;
    }
    if (*(void *)(a2 + 80)) {
      uint64_t v23 = *(uint64_t (****)(uint64_t))(a2 + 80);
    }
    else {
      uint64_t v23 = &off_253FAE8;
    }
    sub_15C7880(v20, (uint64_t)v23);
    if ((v14 & 4) == 0)
    {
LABEL_11:
      if ((v14 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_43;
    }
LABEL_35:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v24 = *(std::string **)(a1 + 88);
    if (!v24)
    {
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (void *)*v26;
      }
      uint64_t v24 = (std::string *)sub_15CBA90((uint64_t)v26);
      *(void *)(a1 + 88) = v24;
    }
    if (*(void *)(a2 + 88)) {
      uint64_t v27 = *(uint64_t (****)())(a2 + 88);
    }
    else {
      uint64_t v27 = &off_253FA70;
    }
    sub_15C79A8(v24, (uint64_t)v27);
    if ((v14 & 8) == 0)
    {
LABEL_12:
      if ((v14 & 0x10) == 0)
      {
LABEL_14:
        *(_DWORD *)(a1 + 16) |= v14;
        goto LABEL_15;
      }
LABEL_13:
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      goto LABEL_14;
    }
LABEL_43:
    *(_DWORD *)(a1 + 16) |= 8u;
    unsigned int v28 = *(void **)(a1 + 96);
    if (!v28)
    {
      uint64_t v29 = *(void *)(a1 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      unsigned int v28 = sub_15CB954((uint64_t)v30);
      *(void *)(a1 + 96) = v28;
    }
    if (*(void *)(a2 + 96)) {
      unsigned int v31 = *(uint64_t (****)())(a2 + 96);
    }
    else {
      unsigned int v31 = &off_253F9D0;
    }
    sub_15C7A78((uint64_t)v28, (uint64_t)v31);
    if ((v14 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v15 = *(void *)(a2 + 8);
  if (v15)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v15 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15C7880(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = sub_16389B8(v3 + 1, v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 3) != 0)
  {
    if (v9)
    {
      uint64_t v10 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      int v12 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        int v12 = (uint64_t *)*v12;
      }
      uint64_t result = sub_1881DF4((std::string **)&v3[2], v10, v12);
    }
    if ((v9 & 2) != 0) {
      v3[2].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a2 + 56);
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= v9;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15C79A8(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        int v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          int v7 = (void *)*v7;
        }
        std::string::pointer data = (std::string *)sub_15CBC10((uint64_t)v7);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v8 = *(uint64_t (****)(uint64_t))(a2 + 24);
      }
      else {
        uint64_t v8 = &off_253FAE8;
      }
      uint64_t result = sub_15C7880(data, (uint64_t)v8);
    }
    if ((v4 & 2) != 0) {
      LODWORD(v3[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

void sub_15C7A78(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_12C1E38((std::string *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 64) + 8);
    unsigned int v11 = (std::string **)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_163892C((std::string *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if ((v14 & 0xF) == 0) {
    goto LABEL_35;
  }
  if ((v14 & 1) == 0)
  {
    if ((v14 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v18 = (long long *)(*(void *)(a2 + 80) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v19 = *(void *)(a1 + 8);
    unsigned int v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19) {
      unsigned int v20 = (uint64_t *)*v20;
    }
    sub_1881DF4((std::string **)(a1 + 80), v18, v20);
    if ((v14 & 4) == 0)
    {
LABEL_11:
      if ((v14 & 8) == 0) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    goto LABEL_19;
  }
  uint64_t v15 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 16) |= 1u;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16) {
    uint64_t v17 = (uint64_t *)*v17;
  }
  sub_1881DF4((std::string **)(a1 + 72), v15, v17);
  if ((v14 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v14 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_19:
  *(_DWORD *)(a1 + 16) |= 4u;
  uint64_t v21 = *(void *)(a1 + 88);
  if (!v21)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22) {
      uint64_t v23 = (void *)*v23;
    }
    uint64_t v21 = sub_185089C((uint64_t)v23);
    *(void *)(a1 + 88) = v21;
  }
  if (*(void *)(a2 + 88)) {
    uint64_t v24 = *(uint64_t (****)())(a2 + 88);
  }
  else {
    uint64_t v24 = &off_254D2B0;
  }
  sub_16CE3CC(v21, (uint64_t)v24);
  if ((v14 & 8) != 0)
  {
LABEL_27:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v25 = *(void *)(a1 + 96);
    if (!v25)
    {
      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        uint64_t v27 = (void *)*v27;
      }
      uint64_t v25 = sub_15C1918((uint64_t)v27);
      *(void *)(a1 + 96) = v25;
    }
    if (*(void *)(a2 + 96)) {
      unsigned int v28 = *(uint64_t (****)())(a2 + 96);
    }
    else {
      unsigned int v28 = &off_253F1A0;
    }
    sub_15B0E24(v25, (uint64_t)v28);
  }
LABEL_35:
  uint64_t v29 = *(void *)(a2 + 8);
  if (v29)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v29 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15C7CC8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_15C919C(*(void *)(*(void *)(a1 + 64) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t result = sub_17612D4(*(void *)(a1 + 72));
    if (!result) {
      return result;
    }
    int v6 = *(_DWORD *)(a1 + 16);
  }
  if ((v6 & 8) == 0) {
    return 1;
  }
  uint64_t result = sub_15C7D40(*(void *)(a1 + 96));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15C7D40(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    BOOL v4 = sub_16C6274(*(void *)(*(void *)(a1 + 64) + 8 * v2));
    uint64_t v2 = v3;
    if (!v4) {
      return 0;
    }
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 4) != 0)
  {
    uint64_t result = sub_16CE508(*(void *)(a1 + 88));
    if (!result) {
      return result;
    }
    int v6 = *(_DWORD *)(a1 + 16);
  }
  if ((v6 & 8) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t result = sub_18856CC(v7 + 16);
    if (!result) {
      return result;
    }
    if ((~*(_DWORD *)(v7 + 40) & 3) != 0) {
      return 0;
    }
  }
  return 1;
}

void *sub_15C7DCC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiEnrichmentUpdate");
}

uint64_t sub_15C7DDC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_14;
    }
  }
  else if (v4)
  {
    goto LABEL_14;
  }
  uint64_t v5 = (void ***)(a1 + 72);
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 80) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 80));
  }
  if ((uint64_t (***)())a1 != &off_253F9D0)
  {
    if (*(void *)(a1 + 88))
    {
      sub_184B078();
      operator delete();
    }
    int v6 = *(void **)(a1 + 96);
    if (v6)
    {
      sub_15B091C(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_14:
  sub_1638720((void *)(a1 + 48));
  sub_12C1DB8((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C7EFC(uint64_t a1)
{
  sub_15C7DDC(a1);

  operator delete();
}

uint64_t sub_15C7F34(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)unint64_t v35 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v35, a3[11].i32[1])) {
    return *(void *)v35;
  }
  int v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v35 + 1);
    unsigned int v8 = **(unsigned char **)v35;
    if ((char)**(unsigned char **)v35 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v35, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v35 + 2);
      }
    }
    *(void *)unint64_t v35 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v11 = *(void *)(a1 + 88);
        if (!v11)
        {
          int v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            int v12 = (void *)*v12;
          }
          uint64_t v11 = sub_185089C((uint64_t)v12);
          *(void *)(a1 + 88) = v11;
          uint64_t v7 = *(unsigned __int8 **)v35;
        }
        uint64_t v13 = sub_12688D0(a3, v11, v7);
        goto LABEL_57;
      case 2u:
        if (v8 != 18) {
          goto LABEL_50;
        }
        int v14 = v7 - 1;
        while (1)
        {
          uint64_t v15 = v14 + 1;
          *(void *)unint64_t v35 = v14 + 1;
          uint64_t v16 = *(_DWORD **)(a1 + 40);
          if (v16 && (uint64_t v17 = *(int *)(a1 + 32), (int)v17 < *v16))
          {
            *(_DWORD *)(a1 + 32) = v17 + 1;
            uint64_t v18 = *(void *)&v16[2 * v17 + 2];
          }
          else
          {
            uint64_t v19 = sub_15C1B30(*(void *)(a1 + 24));
            uint64_t v18 = sub_188CDC8(a1 + 24, (uint64_t)v19);
            uint64_t v15 = *(unsigned __int8 **)v35;
          }
          int v14 = (unsigned __int8 *)sub_125CF74(a3, v18, v15);
          *(void *)unint64_t v35 = v14;
          if (!v14) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v14 || *v14 != 18) {
            goto LABEL_58;
          }
        }
      case 3u:
        if (v8 != 26) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          uint64_t v21 = (uint64_t *)*v21;
        }
        uint64_t v22 = (void *)(a1 + 72);
        goto LABEL_33;
      case 4u:
        if (v8 != 34) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v21 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if (v23) {
          uint64_t v21 = (uint64_t *)*v21;
        }
        uint64_t v22 = (void *)(a1 + 80);
LABEL_33:
        uint64_t v24 = (std::string *)sub_1880F84(v22, v21);
        uint64_t v13 = (void *)sub_188C244(v24, *(char **)v35, (uint64_t)a3);
        goto LABEL_57;
      case 5u:
        if (v8 != 42) {
          goto LABEL_50;
        }
        uint64_t v25 = v7 - 1;
        while (1)
        {
          uint64_t v26 = v25 + 1;
          *(void *)unint64_t v35 = v25 + 1;
          uint64_t v27 = *(_DWORD **)(a1 + 64);
          if (v27 && (uint64_t v28 = *(int *)(a1 + 56), (int)v28 < *v27))
          {
            *(_DWORD *)(a1 + 56) = v28 + 1;
            uint64_t v29 = *(void *)&v27[2 * v28 + 2];
          }
          else
          {
            uint64_t v30 = sub_1786998(*(void *)(a1 + 48));
            uint64_t v29 = sub_188CDC8(a1 + 48, (uint64_t)v30);
            uint64_t v26 = *(unsigned __int8 **)v35;
          }
          uint64_t v25 = (unsigned __int8 *)sub_159D170(a3, v29, v26);
          *(void *)unint64_t v35 = v25;
          if (!v25) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v25 || *v25 != 42) {
            goto LABEL_58;
          }
        }
      case 6u:
        if (v8 != 50) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v31 = *(void *)(a1 + 96);
        if (!v31)
        {
          uint64_t v32 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v32 = (void *)*v32;
          }
          uint64_t v31 = sub_15C1918((uint64_t)v32);
          *(void *)(a1 + 96) = v31;
          uint64_t v7 = *(unsigned __int8 **)v35;
        }
        uint64_t v13 = sub_1198F14(a3, v31, v7);
        goto LABEL_57;
      default:
LABEL_50:
        if (v8) {
          BOOL v33 = (v8 & 7) == 4;
        }
        else {
          BOOL v33 = 1;
        }
        if (!v33)
        {
          if (*v6)
          {
            uint64_t v34 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v34 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = *(unsigned __int8 **)v35;
          }
          uint64_t v13 = sub_1885AC0(v8, v34, (char *)v7, a3);
LABEL_57:
          *(void *)unint64_t v35 = v13;
          if (!v13) {
            return 0;
          }
LABEL_58:
          if (sub_11947B8((uint64_t)a3, (char **)v35, a3[11].i32[1])) {
            return *(void *)v35;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v35;
    }
  }
}

char *sub_15C82DC(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  BOOL v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 4) != 0)
  {
    if (*a3 <= __dst) {
      BOOL v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 88);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    BOOL v4 = sub_184B3AC(v7, v9, a3);
  }
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    for (int i = 0; i != v10; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        BOOL v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      char *v4 = 18;
      unsigned int v13 = *(_DWORD *)(v12 + 20);
      v4[1] = v13;
      if (v13 > 0x7F) {
        int v14 = sub_188A9CC(v13, v4 + 1);
      }
      else {
        int v14 = v4 + 2;
      }
      BOOL v4 = sub_15B2EA4(v12, v14, a3);
    }
  }
  if (v6) {
    BOOL v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  if ((v6 & 2) != 0) {
    BOOL v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  int v15 = *(_DWORD *)(a1 + 56);
  if (v15)
  {
    for (int j = 0; j != v15; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        BOOL v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8 * j + 8);
      char *v4 = 42;
      unsigned int v18 = *(_DWORD *)(v17 + 20);
      v4[1] = v18;
      if (v18 > 0x7F) {
        uint64_t v19 = sub_188A9CC(v18, v4 + 1);
      }
      else {
        uint64_t v19 = v4 + 2;
      }
      BOOL v4 = sub_16C5F74(v17, v19, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      BOOL v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v20 = *(void *)(a1 + 96);
    char *v4 = 50;
    unsigned int v21 = *(_DWORD *)(v20 + 44);
    v4[1] = v21;
    if (v21 > 0x7F) {
      uint64_t v22 = sub_188A9CC(v21, v4 + 1);
    }
    else {
      uint64_t v22 = v4 + 2;
    }
    BOOL v4 = sub_15B0C0C(v20, v22, a3);
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if ((v23 & 1) == 0) {
    return v4;
  }
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v25 + 31) < 0)
  {
    uint64_t v26 = *(void **)(v25 + 8);
    uint64_t v27 = *(void *)(v25 + 16);
  }
  else
  {
    uint64_t v26 = (void *)(v25 + 8);
    LODWORD(v27) = *(unsigned __int8 *)(v25 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v27)
  {
    uint64_t v28 = (int)v27;
    memcpy(v4, v26, (int)v27);
    v4 += v28;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v26, v27, v4);
}

uint64_t sub_15C85B0(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    BOOL v4 = (uint64_t *)(v3 + 8);
  }
  else {
    BOOL v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15B2F90(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 56);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    uint64_t v11 = (uint64_t *)(v10 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = sub_16C60A4(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  int v15 = *(_DWORD *)(a1 + 16);
  if ((v15 & 0xF) == 0) {
    goto LABEL_21;
  }
  if ((v15 & 1) == 0)
  {
    if ((v15 & 2) == 0) {
      goto LABEL_18;
    }
LABEL_26:
    unint64_t v22 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v24 = *(void *)(v22 + 8);
    if ((v23 & 0x80u) == 0) {
      uint64_t v24 = v23;
    }
    v9 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 4) == 0)
    {
LABEL_19:
      if ((v15 & 8) == 0) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  unint64_t v19 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
  uint64_t v21 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    uint64_t v21 = v20;
  }
  v9 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 2) != 0) {
    goto LABEL_26;
  }
LABEL_18:
  if ((v15 & 4) == 0) {
    goto LABEL_19;
  }
LABEL_29:
  uint64_t v25 = sub_184B568(*(void *)(a1 + 88));
  v9 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v15 & 8) != 0)
  {
LABEL_20:
    uint64_t v16 = sub_15B0D90(*(void *)(a1 + 96));
    v9 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_21:
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17)
  {
    unint64_t v26 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v26 + 31) < 0) {
      uint64_t v27 = *(void *)(v26 + 16);
    }
    else {
      uint64_t v27 = *(unsigned __int8 *)(v26 + 31);
    }
    v9 += v27;
  }
  *(_DWORD *)(a1 + 20) = v9;
  return v9;
}

void *sub_15C87B4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiEnrichmentPlaceContext");
}

uint64_t sub_15C87C4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
    goto LABEL_12;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if ((uint64_t (***)())a1 != &off_253FA38)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      sub_15C3EFC(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_12:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C88AC(uint64_t a1)
{
  sub_15C87C4(a1);

  operator delete();
}

uint64_t sub_15C88E4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_6;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
  unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_14;
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_14:
  unint64_t v6 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v6 = 0;
    *(unsigned char *)(v6 + 23) = 0;
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t result = sub_15C4058(*(void *)(result + 40));
    goto LABEL_6;
  }
  **(unsigned char **)unint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  if ((v2 & 4) != 0) {
    goto LABEL_5;
  }
LABEL_6:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15C89B8(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v27 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
    return *(void *)v27;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v27 + 1);
    unsigned int v8 = **(unsigned char **)v27;
    if ((char)**(unsigned char **)v27 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v27, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v27 + 2);
      }
    }
    *(void *)uint64_t v27 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_31;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 24);
        goto LABEL_17;
      case 2u:
        if (v8 != 18) {
          goto LABEL_31;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 32);
LABEL_17:
        int v15 = (std::string *)sub_1880F84(v13, v12);
        uint64_t v16 = (uint64_t)sub_188C244(v15, *(char **)v27, (uint64_t)a3);
        goto LABEL_38;
      case 3u:
        if (v8 != 24) {
          goto LABEL_31;
        }
        uint64_t v17 = (char *)(v7 + 1);
        unint64_t v18 = *v7;
        if (((char)*v7 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        int v19 = *v17;
        int v20 = v18 + (v19 << 7);
        unint64_t v18 = (v20 - 128);
        if (v19 < 0)
        {
          *(void *)uint64_t v27 = sub_188C138((uint64_t)v7, (v20 - 128));
          if (!*(void *)v27) {
            return 0;
          }
          unint64_t v18 = v25;
        }
        else
        {
          uint64_t v17 = (char *)(v7 + 2);
LABEL_22:
          *(void *)uint64_t v27 = v17;
        }
        if (v18 > 3)
        {
          if (*v6) {
            unint64_t v26 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            unint64_t v26 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(3, v18, v26);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 8u;
          *(_DWORD *)(a1 + 48) = v18;
        }
        goto LABEL_39;
      case 4u:
        if (v8 != 34) {
          goto LABEL_31;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v21 = *(void *)(a1 + 40);
        if (!v21)
        {
          unint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unint64_t v22 = (void *)*v22;
          }
          uint64_t v21 = sub_15C62B0((uint64_t)v22);
          *(void *)(a1 + 40) = v21;
          uint64_t v7 = *(unsigned __int8 **)v27;
        }
        uint64_t v16 = sub_15C8C80(a3, v21, v7);
        goto LABEL_38;
      default:
LABEL_31:
        if (v8) {
          BOOL v23 = (v8 & 7) == 4;
        }
        else {
          BOOL v23 = 1;
        }
        if (!v23)
        {
          if (*v6)
          {
            uint64_t v24 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v24 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = *(unsigned __int8 **)v27;
          }
          uint64_t v16 = (uint64_t)sub_1885AC0(v8, v24, (char *)v7, a3);
LABEL_38:
          *(void *)uint64_t v27 = v16;
          if (!v16) {
            return 0;
          }
LABEL_39:
          if (sub_11947B8((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
            return *(void *)v27;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v27;
    }
  }
}

uint64_t sub_15C8C80(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15C41D4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15C8D10(uint64_t a1, char *__dst, void *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    char v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  char v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  if (*a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  unint64_t v7 = *(int *)(a1 + 48);
  char *v4 = 24;
  v4[1] = v7;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unint64_t v8 = v7 >> 7;
    v4[2] = v7 >> 7;
    v4 += 3;
    if (v7 >= 0x4000)
    {
      do
      {
        *(v4 - 1) |= 0x80u;
        unint64_t v9 = v8 >> 14;
        v8 >>= 7;
        *v4++ = v8;
      }
      while (v9);
    }
  }
  else
  {
    v4 += 2;
  }
LABEL_13:
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 40);
    char *v4 = 34;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      uint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      uint64_t v12 = v4 + 2;
    }
    char v4 = sub_15C45D0(v10, v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*a3 - (void)v4 >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15C8EE8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0xF) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_20;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v2 & 4) != 0)
  {
    uint64_t v10 = sub_15C4894(*(void *)(a1 + 40));
    v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  int v11 = *(_DWORD *)(a1 + 48);
  if (v11 < 0) {
    uint64_t v12 = 11;
  }
  else {
    uint64_t v12 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v12;
LABEL_20:
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    v3 += v16;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15C9054(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      unint64_t v7 = (std::string **)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_18;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    uint64_t v10 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    sub_1881DF4((std::string **)(a1 + 32), v10, v12);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0)
      {
LABEL_7:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_8;
      }
LABEL_6:
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      goto LABEL_7;
    }
LABEL_18:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v13 = *(void *)(a1 + 40);
    if (!v13)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      unint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        unint64_t v15 = (void *)*v15;
      }
      uint64_t v13 = sub_15C62B0((uint64_t)v15);
      *(void *)(a1 + 40) = v13;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v16 = *(uint64_t (****)())(a2 + 40);
    }
    else {
      uint64_t v16 = &off_253F868;
    }
    sub_15C4AFC(v13, (uint64_t)v16);
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15C919C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 4) == 0) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 40);
  if ((*(unsigned char *)(v1 + 16) & 0x20) == 0) {
    return 1;
  }
  uint64_t result = sub_15B06D8(*(void *)(v1 + 64));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15C91D4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.ImageUpdate");
}

uint64_t sub_15C91E4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_253FA70)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      sub_15CA4F0(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C929C(uint64_t a1)
{
  sub_15C91E4(a1);

  operator delete();
}

char *sub_15C92D4(uint64_t a1, char *a2, int32x2_t *a3)
{
  BOOL v23 = a2;
  if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
    return v23;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = v23 + 1;
    unsigned int v8 = *v23;
    if (*v23 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180((uint64_t)v23, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = v23 + 2;
      }
    }
    BOOL v23 = v7;
    if (v8 >> 3 == 2) {
      break;
    }
    if (v8 >> 3 != 1 || v8 != 10) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v19 = *(void *)(a1 + 24);
    if (!v19)
    {
      int v20 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        int v20 = (void *)*v20;
      }
      uint64_t v19 = sub_15CBC10((uint64_t)v20);
      *(void *)(a1 + 24) = v19;
      unint64_t v7 = v23;
    }
    uint64_t v14 = (char *)sub_15C6E18(a3, v19, (unsigned __int8 *)v7);
LABEL_32:
    BOOL v23 = v14;
    if (!v14) {
      return 0;
    }
LABEL_33:
    if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
      return v23;
    }
  }
  if (v8 == 16)
  {
    unint64_t v15 = v7 + 1;
    unint64_t v16 = *v7;
    if (*v7 < 0)
    {
      int v17 = *v15;
      int v18 = v16 + (v17 << 7);
      unint64_t v16 = (v18 - 128);
      if (v17 < 0)
      {
        BOOL v23 = (char *)sub_188C138((uint64_t)v7, (v18 - 128));
        if (!v23) {
          return 0;
        }
        unint64_t v16 = v21;
        goto LABEL_25;
      }
      unint64_t v15 = v7 + 2;
    }
    BOOL v23 = v15;
LABEL_25:
    if (v16 > 3)
    {
      if (*v6) {
        unint64_t v22 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        unint64_t v22 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(2, v16, v22);
    }
    else
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_DWORD *)(a1 + 32) = v16;
    }
    goto LABEL_33;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = v23;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_32;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v23;
  }
  return 0;
}

unsigned char *sub_15C94E4(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  int v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      int v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    int v4 = sub_15CA8F0(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 32);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15C967C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t result = 0;
    goto LABEL_11;
  }
  if (v2)
  {
    uint64_t v4 = sub_15CAA90(*(void *)(a1 + 24));
    uint64_t result = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
  }
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 < 0) {
    uint64_t v6 = 11;
  }
  else {
    uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v6;
LABEL_11:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    result += v9;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

uint64_t sub_15C974C()
{
  return 1;
}

void *sub_15C9754@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.ScorecardUpdate");
}

uint64_t sub_15C9764(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_253FA98)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      sub_15B2B90(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C981C(uint64_t a1)
{
  sub_15C9764(a1);

  operator delete();
}

uint64_t sub_15C9854(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16)) {
    uint64_t result = sub_15B2C80(*(void *)(result + 24));
  }
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  *(_DWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 8) = 0;
  if (v3)
  {
    return sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

char *sub_15C98B4(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v20 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v8 = v20 + 1;
    unsigned int v9 = *v20;
    if (*v20 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        unint64_t v8 = (char *)sub_188C180((uint64_t)v20, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        unint64_t v8 = v20 + 2;
      }
    }
    int v20 = v8;
    if (v9 >> 3 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_13;
    }
    unint64_t v16 = v8 + 1;
    LODWORD(v17) = *v8;
    if (*v8 < 0)
    {
      uint64_t v17 = v17 + (*v16 << 7) - 128;
      if (*v16 < 0) {
        unint64_t v16 = (char *)sub_188C138((uint64_t)v8, v17);
      }
      else {
        unint64_t v16 = v8 + 2;
      }
    }
    v5 |= 2u;
    int v20 = v16;
    *(_DWORD *)(a1 + 32) = -(v17 & 1) ^ (v17 >> 1);
    if (!v16) {
      goto LABEL_38;
    }
LABEL_33:
    if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 >> 3 == 1 && v9 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v18 = *(void **)(a1 + 24);
    if (!v18)
    {
      uint64_t v19 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v7) {
        uint64_t v19 = (void *)*v19;
      }
      uint64_t v18 = sub_15C1B30((uint64_t)v19);
      *(void *)(a1 + 24) = v18;
      unint64_t v8 = v20;
    }
    unint64_t v15 = (char *)sub_125CF74(a3, (uint64_t)v18, (unsigned __int8 *)v8);
LABEL_29:
    int v20 = v15;
    if (!v15) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
LABEL_13:
  if (v9) {
    BOOL v13 = (v9 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v7)
    {
      uint64_t v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v8 = v20;
    }
    unint64_t v15 = (char *)sub_1885AC0(v9, v14, v8, a3);
    goto LABEL_29;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_38:
  int v20 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v20;
}

char *sub_15C9A9C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15B2EA4(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    int v10 = *(_DWORD *)(a1 + 32);
    char *v4 = 16;
    unsigned int v11 = (2 * v10) ^ (v10 >> 31);
    v4[1] = (2 * v10) ^ (v10 >> 31);
    if (v11 > 0x7F)
    {
      v4[1] = v11 | 0x80;
      unsigned int v12 = v11 >> 7;
      v4[2] = v11 >> 7;
      v4 += 3;
      if (v11 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v13 = v12 >> 14;
          v12 >>= 7;
          *v4++ = v12;
        }
        while (v13);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v4;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(v4, v17, (int)v18);
    v4 += v19;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v17, v18, v4);
}

uint64_t sub_15C9C3C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_15B2F90(*(void *)(a1 + 24));
    uint64_t result = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t result = 0;
  if ((v2 & 2) != 0) {
LABEL_7:
  }
    result += ((9 * (__clz((2 * *(_DWORD *)(a1 + 32)) ^ (*(int *)(a1 + 32) >> 31) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v6 + 31) < 0) {
      uint64_t v7 = *(void *)(v6 + 16);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(v6 + 31);
    }
    result += v7;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

std::string *sub_15C9D08(std::string *result, uint64_t a2)
{
  char v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        uint64_t v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          uint64_t v7 = (void *)*v7;
        }
        std::string::pointer data = (std::string *)sub_15C1B30((uint64_t)v7);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 24)) {
        unsigned int v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        unsigned int v8 = &off_253F2A0;
      }
      uint64_t result = sub_11EC100(data, (uint64_t)v8);
    }
    if ((v4 & 2) != 0) {
      LODWORD(v3[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15C9DD8()
{
  return 1;
}

void *sub_15C9DE0@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.Scorecard.RatingValue");
}

uint64_t sub_15C9DF0(uint64_t a1)
{
  char v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if ((uint64_t (***)())a1 != &off_253FAC0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_15C9764(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15C9EBC(uint64_t a1)
{
  sub_15C9DF0(a1);

  operator delete();
}

uint64_t sub_15C9EF4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) == 0) {
      goto LABEL_5;
    }
    unint64_t v3 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
LABEL_5:
      if ((v2 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    **(unsigned char **)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v2 & 2) != 0) {
LABEL_6:
    }
      uint64_t result = sub_15C9854(*(void *)(result + 32));
  }
LABEL_7:
  char v5 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = v1 + 8;
  *(_DWORD *)(v4 + 8) = 0;
  if (v5)
  {
    return sub_188B4AC((uint64_t *)v4);
  }
  return result;
}

uint64_t sub_15C9F88(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v20 + 2);
      }
    }
    *(void *)int v20 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      unint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        unint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_15CBB10((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = *(unsigned __int8 **)v20;
    }
    uint64_t v14 = sub_15CA148(a3, v15, v7);
LABEL_29:
    *(void *)int v20 = v14;
    if (!v14) {
      goto LABEL_35;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (uint64_t *)*v18;
    }
    uint64_t v19 = (std::string *)sub_1880F84((void *)(a1 + 24), v18);
    uint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
    goto LABEL_29;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      unsigned int v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unsigned int v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(unsigned __int8 **)v20;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, (char *)v7, a3);
    goto LABEL_29;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_35:
  *(void *)int v20 = 0;
  return *(void *)v20;
}

char *sub_15CA148(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15C98B4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15CA1D8(uint64_t a1, unsigned char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    unsigned char *v4 = 18;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15C9A9C(v7, (unint64_t)v9, a3);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    unsigned int v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    unsigned int v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15CA308(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v7 = sub_15C9C3C(*(void *)(a1 + 32));
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_10;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v3 += v11;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_15CA3EC(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      uint64_t v6 = (std::string **)&result[1];
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v8 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v8 = (uint64_t *)*v8;
      }
      uint64_t result = sub_1881DF4(v6, v5, v8);
    }
    if ((v4 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      unsigned int v9 = (std::string *)v3[1].__r_.__value_.__l.__size_;
      if (!v9)
      {
        std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        unsigned int v9 = (std::string *)sub_15CBB10((uint64_t)v11);
        v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      }
      if (*(void *)(a2 + 32)) {
        unint64_t v12 = *(uint64_t (****)())(a2 + 32);
      }
      else {
        unint64_t v12 = &off_253FA98;
      }
      uint64_t result = sub_15C9D08(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15CA4D8()
{
  return 1;
}

void *sub_15CA4E0@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.Scorecard.CategoryRating");
}

uint64_t sub_15CA4F0(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  sub_16387A0((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15CA59C(uint64_t a1)
{
  sub_15CA4F0(a1);

  operator delete();
}

uint64_t sub_15CA5D4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v31 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v8 = (char *)(*(void *)v31 + 1);
    unsigned int v9 = **(unsigned char **)v31;
    if ((char)**(unsigned char **)v31 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v31, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (char *)(*(void *)v31 + 2);
      }
    }
    *(void *)uint64_t v31 = v8;
    unsigned int v12 = v9 >> 3;
    if (v9 >> 3 == 3) {
      break;
    }
    if (v12 != 2)
    {
      if (v12 != 1 || v9 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v27 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        uint64_t v27 = (uint64_t *)*v27;
      }
      uint64_t v28 = (std::string *)sub_1880F84((void *)(a1 + 48), v27);
      unint64_t v16 = (void *)sub_188C244(v28, *(char **)v31, (uint64_t)a3);
LABEL_39:
      *(void *)uint64_t v31 = v16;
      if (!v16) {
        goto LABEL_47;
      }
      goto LABEL_40;
    }
    if (v9 != 16) {
      goto LABEL_14;
    }
    v5 |= 2u;
    BOOL v23 = v8 + 1;
    uint64_t v24 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    int v25 = *v23;
    uint64_t v24 = v24 + (v25 << 7) - 128;
    if ((v25 & 0x80000000) == 0)
    {
      BOOL v23 = v8 + 2;
LABEL_35:
      *(void *)uint64_t v31 = v23;
      *(unsigned char *)(a1 + 56) = v24 != 0;
      goto LABEL_40;
    }
    uint64_t v29 = sub_188C138((uint64_t)v8, v24);
    *(void *)uint64_t v31 = v29;
    *(unsigned char *)(a1 + 56) = v30 != 0;
    if (!v29) {
      goto LABEL_47;
    }
LABEL_40:
    if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 == 26)
  {
    uint64_t v17 = v8 - 1;
    while (1)
    {
      uint64_t v18 = (unsigned __int8 *)(v17 + 1);
      *(void *)uint64_t v31 = v17 + 1;
      uint64_t v19 = *(_DWORD **)(a1 + 40);
      if (v19 && (uint64_t v20 = *(int *)(a1 + 32), (int)v20 < *v19))
      {
        *(_DWORD *)(a1 + 32) = v20 + 1;
        uint64_t v21 = *(void *)&v19[2 * v20 + 2];
      }
      else
      {
        unint64_t v22 = sub_15CBB8C(*(void *)(a1 + 24));
        uint64_t v21 = sub_188CDC8(a1 + 24, (uint64_t)v22);
        uint64_t v18 = *(unsigned __int8 **)v31;
      }
      uint64_t v17 = (char *)sub_15CA860(a3, v21, v18);
      *(void *)uint64_t v31 = v17;
      if (!v17) {
        goto LABEL_47;
      }
      if (*(void *)a3 <= (unint64_t)v17 || *v17 != 26) {
        goto LABEL_40;
      }
    }
  }
LABEL_14:
  if (v9) {
    BOOL v14 = (v9 & 7) == 4;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*v7)
    {
      uint64_t v15 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v15 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = *(char **)v31;
    }
    unint64_t v16 = sub_1885AC0(v9, v15, v8, a3);
    goto LABEL_39;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_47:
  *(void *)uint64_t v31 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return *(void *)v31;
}

uint64_t sub_15CA860(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15C9F88(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15CA8F0(uint64_t a1, unsigned char *__dst, unint64_t *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v7 = *(unsigned char *)(a1 + 56);
    unsigned char *v4 = 16;
    v4[1] = v7;
    v4 += 2;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  if (v8)
  {
    for (int i = 0; i != v8; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 26;
      unsigned int v11 = *(_DWORD *)(v10 + 20);
      v4[1] = v11;
      if (v11 > 0x7F) {
        unsigned int v12 = sub_188A9CC(v11, v4 + 1);
      }
      else {
        unsigned int v12 = v4 + 2;
      }
      int v4 = sub_15CA1D8(v10, v12, a3);
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15CAA90(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    int v4 = (uint64_t *)(v3 + 8);
  }
  else {
    int v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15CA308(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 3) != 0)
  {
    if (v8)
    {
      unint64_t v9 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0) {
      v2 += 2;
    }
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v14 + 31) < 0) {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 31);
    }
    v2 += v15;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15CAB9C()
{
  return 1;
}

void *sub_15CABA4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.Scorecard");
}

uint64_t sub_15CABB4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_253FB28)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      sub_15CA4F0(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  sub_1638820((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15CAC78(uint64_t a1)
{
  sub_15CABB4(a1);

  operator delete();
}

uint64_t sub_15CACB0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15CB494(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if (*(unsigned char *)(v1 + 16)) {
    uint64_t result = sub_15C6704(*(void *)(v1 + 48));
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

char *sub_15CAD40(uint64_t a1, char *a2, int32x2_t *a3)
{
  BOOL v23 = a2;
  if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
    return v23;
  }
  char v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v23 + 1;
    unsigned int v8 = *v23;
    if (*v23 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v23, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v23 + 2;
      }
    }
    BOOL v23 = v7;
    if (v8 >> 3 == 2) {
      break;
    }
    if (v8 >> 3 != 1 || v8 != 10) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v21 = *(void *)(a1 + 48);
    if (!v21)
    {
      unint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        unint64_t v22 = (void *)*v22;
      }
      uint64_t v21 = sub_15CBC10((uint64_t)v22);
      *(void *)(a1 + 48) = v21;
      uint64_t v7 = v23;
    }
    unint64_t v14 = (char *)sub_15C6E18(a3, v21, (unsigned __int8 *)v7);
LABEL_35:
    BOOL v23 = v14;
    if (!v14) {
      return 0;
    }
LABEL_36:
    if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
      return v23;
    }
  }
  if (v8 == 18)
  {
    uint64_t v15 = v7 - 1;
    while (1)
    {
      unint64_t v16 = (unsigned __int8 *)(v15 + 1);
      BOOL v23 = v15 + 1;
      uint64_t v17 = *(_DWORD **)(a1 + 40);
      if (v17 && (uint64_t v18 = *(int *)(a1 + 32), (int)v18 < *v17))
      {
        *(_DWORD *)(a1 + 32) = v18 + 1;
        uint64_t v19 = *(void *)&v17[2 * v18 + 2];
      }
      else
      {
        uint64_t v20 = sub_15CBD54(*(void *)(a1 + 24));
        uint64_t v19 = sub_188CDC8(a1 + 24, (uint64_t)v20);
        unint64_t v16 = (unsigned __int8 *)v23;
      }
      uint64_t v15 = (char *)sub_15CAF48(a3, v19, v16);
      BOOL v23 = v15;
      if (!v15) {
        return 0;
      }
      if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
        goto LABEL_36;
      }
    }
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v23;
    }
    unint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_35;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v23;
  }
  return 0;
}

uint64_t sub_15CAF48(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15CB510(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15CAFD8(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v6 = *(void *)(a1 + 48);
    unsigned char *v4 = 10;
    unsigned int v7 = *(_DWORD *)(v6 + 20);
    v4[1] = v7;
    if (v7 > 0x7F) {
      unsigned int v8 = sub_188A9CC(v7, v4 + 1);
    }
    else {
      unsigned int v8 = v4 + 2;
    }
    uint64_t v4 = sub_15CA8F0(v6, v8, a3);
  }
  int v9 = *(_DWORD *)(a1 + 32);
  if (v9)
  {
    for (int i = 0; i != v9; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 18;
      unsigned int v12 = *(_DWORD *)(v11 + 20);
      v4[1] = v12;
      if (v12 > 0x7F) {
        uint64_t v13 = sub_188A9CC(v12, v4 + 1);
      }
      else {
        uint64_t v13 = v4 + 2;
      }
      uint64_t v4 = sub_15CB6B8(v11, v13, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v4;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(v4, v17, (int)v18);
    v4 += v19;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v17, v18, v4);
}

uint64_t sub_15CB184(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15CB7A4(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v8 = sub_15CAA90(*(void *)(a1 + 48));
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

std::string *sub_15CB268(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = sub_1638A44(v3 + 1, v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v9 = *(uint64_t (****)(uint64_t))(a2 + 48);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    std::string::pointer data = (std::string *)v3[2].__r_.__value_.__l.__data_;
    if (!data)
    {
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v12 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v12 = (void *)*v12;
      }
      std::string::pointer data = (std::string *)sub_15CBC10((uint64_t)v12);
      v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      uint64_t v9 = *(uint64_t (****)(uint64_t))(a2 + 48);
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = &off_253FAE8;
    }
    uint64_t result = sub_15C7880(data, (uint64_t)v13);
  }
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15CB38C()
{
  return 1;
}

void *sub_15CB394@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiEnrichment");
}

uint64_t sub_15CB3A4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15CB45C(uint64_t a1)
{
  sub_15CB3A4(a1);

  operator delete();
}

uint64_t sub_15CB494(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15CB510(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    int v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        int v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        int v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)uint64_t v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unint64_t v16 = (uint64_t *)*v16;
        }
        uint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      unint64_t v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        unint64_t v16 = (uint64_t *)*v16;
      }
      uint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      uint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      int v7 = *(char **)v20;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)uint64_t v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)uint64_t v20 = 0;
  return *(void *)v20;
}

char *sub_15CB6B8(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    int v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15CB7A4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15CB880()
{
  return 1;
}

void *sub_15CB888@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.EnrichmentImage");
}

double sub_15CB898(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = &off_24C5610;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  double result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_DWORD *)(v2 + 104) = 0;
  return result;
}

void *sub_15CB954(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *double result = &off_24C5690;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = a1;
  result[7] = 0;
  result[8] = 0;
  result[9] = &qword_2550250;
  result[10] = &qword_2550250;
  result[11] = 0;
  result[12] = 0;
  return result;
}

uint64_t sub_15CBA08(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C5710;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(void *)(result + 32) = &qword_2550250;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_15CBA90(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C5790;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 1;
  return result;
}

uint64_t sub_15CBB10(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C5810;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_15CBB8C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C5890;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = 0;
  return result;
}

uint64_t sub_15CBC10(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C5910;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = &qword_2550250;
  *(unsigned char *)(result + 56) = 0;
  return result;
}

void *sub_15CBCB8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *uint64_t result = &off_24C5990;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  return result;
}

void *sub_15CBD54(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C5A10;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

BOOL sub_15CBDD8(unsigned int a1)
{
  return a1 < 2;
}

uint64_t sub_15CBDE4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2 | 2;
  if (!a3) {
    uint64_t v5 = a2;
  }
  *(void *)(a1 + 8) = v5;
  *(void *)a1 = &off_24C5A90;
  sub_1882BC4(a1 + 16, a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  return a1;
}

void sub_15CBE68(_Unwind_Exception *a1)
{
  *int v1 = off_24E6998;
  sub_119475C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_15CBE98(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15CBF34((uint64_t (***)())a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_1889DA8(a1 + 72);
  sub_1889DE8((void *)(a1 + 48));
  sub_1882CC0(a1 + 16);
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t (***sub_15CBF34(uint64_t (***result)()))()
{
  if (result != &off_253FB60)
  {
    int v1 = result;
    uint64_t v2 = result[12];
    if (v2)
    {
      sub_15CDECC(v2);
      operator delete();
    }
    unint64_t v3 = v1[13];
    if (v3)
    {
      sub_15CFA74(v3);
      operator delete();
    }
    if (v1[14])
    {
      sub_184BFE0();
      operator delete();
    }
    if (v1[15])
    {
      sub_184DD50();
      operator delete();
    }
    uint64_t v4 = v1[16];
    if (v4)
    {
      sub_1278760(v4);
      operator delete();
    }
    if (v1[17])
    {
      sub_1306600();
      operator delete();
    }
    uint64_t result = (uint64_t (***)())v1[18];
    if (result)
    {
      sub_15C4D38(result);
      operator delete();
    }
  }
  return result;
}

void sub_15CC060(uint64_t a1)
{
  sub_15CBE98(a1);

  operator delete();
}

uint64_t sub_15CC098(uint64_t a1)
{
  sub_18843A4((unsigned char *)(a1 + 16));
  uint64_t result = sub_188CC00(a1 + 48);
  *(_DWORD *)(a1 + 72) = 0;
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x7F) == 0) {
    goto LABEL_10;
  }
  if (v3)
  {
    uint64_t result = sub_15CC178(*(void *)(a1 + 96));
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_16;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = sub_15CC240(*(void *)(a1 + 104));
  if ((v3 & 4) == 0)
  {
LABEL_5:
    if ((v3 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = sub_182A644(*(void *)(a1 + 112));
  if ((v3 & 8) == 0)
  {
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_18:
    uint64_t result = sub_127879C(*(void *)(a1 + 128));
    if ((v3 & 0x20) == 0)
    {
LABEL_8:
      if ((v3 & 0x40) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = sub_182A88C(*(void *)(a1 + 120));
  if ((v3 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_7:
  if ((v3 & 0x20) == 0) {
    goto LABEL_8;
  }
LABEL_19:
  uint64_t result = sub_130663C(*(void *)(a1 + 136));
  if ((v3 & 0x40) != 0) {
LABEL_9:
  }
    uint64_t result = sub_15C4DEC(*(void *)(a1 + 144));
LABEL_10:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = a1 + 8;
  *(_DWORD *)(v4 + 144) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  if (v5)
  {
    return sub_188B4AC((uint64_t *)v4);
  }
  return result;
}

uint64_t sub_15CC178(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x7F) == 0) {
    goto LABEL_10;
  }
  if (v2)
  {
    uint64_t result = sub_15CE0B4(*(void *)(result + 24));
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = sub_15CDD68(*(void *)(v1 + 32));
  if ((v2 & 4) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = sub_15CDDBC(*(void *)(v1 + 40));
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_18:
    uint64_t result = (uint64_t)sub_15CDE40(*(unsigned char **)(v1 + 56));
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = sub_15CE1B8(*(void *)(v1 + 48));
  if ((v2 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_7:
  if ((v2 & 0x20) == 0) {
    goto LABEL_8;
  }
LABEL_19:
  uint64_t result = sub_15CE23C(*(void *)(v1 + 64));
  if ((v2 & 0x40) != 0) {
LABEL_9:
  }
    uint64_t result = sub_15CE35C(*(void *)(v1 + 72));
LABEL_10:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15CC240(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = *(unsigned char *)(result + 16);
  if (!v2) {
    goto LABEL_11;
  }
  if ((*(unsigned char *)(result + 16) & 1) == 0)
  {
    if ((*(unsigned char *)(result + 16) & 2) == 0) {
      goto LABEL_4;
    }
LABEL_19:
    unint64_t v6 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_23;
      }
    }
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_27:
    unint64_t v8 = *(void *)(result + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)unint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      if ((v2 & 0x10) != 0) {
        goto LABEL_31;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
      if ((v2 & 0x10) != 0) {
        goto LABEL_31;
      }
    }
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_32:
    uint64_t result = sub_15CFC50(*(void *)(v1 + 64));
    if ((v2 & 0x40) == 0)
    {
LABEL_9:
      if ((v2 & 0x80) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_33;
  }
  unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_19;
    }
  }
LABEL_4:
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_23:
  unint64_t v7 = *(void *)(result + 40) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_27;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 0;
    *(unsigned char *)(v7 + 23) = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_27;
    }
  }
LABEL_6:
  if ((v2 & 0x10) == 0) {
    goto LABEL_7;
  }
LABEL_31:
  uint64_t result = sub_125D27C(*(void *)(result + 56));
  if ((v2 & 0x20) != 0) {
    goto LABEL_32;
  }
LABEL_8:
  if ((v2 & 0x40) == 0) {
    goto LABEL_9;
  }
LABEL_33:
  uint64_t result = sub_15CFC50(*(void *)(v1 + 72));
  if (v2 < 0) {
LABEL_10:
  }
    uint64_t result = sub_15CFD3C(*(void *)(v1 + 80));
LABEL_11:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15CC3A4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v49 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v49, a3[11].i32[1])) {
    return *(void *)v49;
  }
  unint64_t v6 = (void *)(a1 + 8);
  unint64_t v7 = (uint64_t **)(a1 + 48);
  while (2)
  {
    unint64_t v8 = (unsigned __int8 *)(*(void *)v49 + 1);
    unsigned int v9 = **(unsigned char **)v49;
    if ((char)**(unsigned char **)v49 < 0)
    {
      int v10 = (char)*v8;
      unsigned int v11 = v9 + (v10 << 7);
      unsigned int v9 = v11 - 128;
      if (v10 < 0)
      {
        unint64_t v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v49, v11 - 128);
        unsigned int v9 = v12;
      }
      else
      {
        unint64_t v8 = (unsigned __int8 *)(*(void *)v49 + 2);
      }
    }
    *(void *)uint64_t v49 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_79;
        }
        uint64_t v13 = (char *)(v8 + 1);
        unint64_t v14 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v15 = *v13;
        int v16 = v14 + (v15 << 7);
        unint64_t v14 = (v16 - 128);
        if (v15 < 0)
        {
          *(void *)uint64_t v49 = sub_188C138((uint64_t)v8, (v16 - 128));
          if (!*(void *)v49) {
            return 0;
          }
          unint64_t v14 = v43;
        }
        else
        {
          uint64_t v13 = (char *)(v8 + 2);
LABEL_13:
          *(void *)uint64_t v49 = v13;
        }
        if (v14 <= 7)
        {
          *(_DWORD *)(a1 + 40) |= 0x80u;
          *(_DWORD *)(a1 + 152) = v14;
          goto LABEL_89;
        }
        if (*v6) {
          BOOL v47 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          BOOL v47 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v48 = 1;
        goto LABEL_94;
      case 2u:
        if (v9 != 18) {
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v30 = *(void *)(a1 + 96);
        if (!v30)
        {
          uint64_t v31 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v31 = (void *)*v31;
          }
          sub_15F84D8((uint64_t)v31);
          uint64_t v30 = v32;
          *(void *)(a1 + 96) = v32;
          unint64_t v8 = *(unsigned __int8 **)v49;
        }
        uint64_t v19 = (uint64_t)sub_15CC9C8(a3, v30, v8);
        goto LABEL_88;
      case 3u:
        if (v9 != 26) {
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v22 = *(void *)(a1 + 104);
        if (!v22)
        {
          BOOL v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            BOOL v23 = (void *)*v23;
          }
          sub_15F8558((uint64_t)v23);
          uint64_t v22 = v24;
          *(void *)(a1 + 104) = v24;
          unint64_t v8 = *(unsigned __int8 **)v49;
        }
        uint64_t v19 = sub_15CCA58(a3, v22, v8);
        goto LABEL_88;
      case 4u:
        if (v9 != 34) {
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v25 = *(void *)(a1 + 112);
        if (!v25)
        {
          uint64_t v26 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v26 = (void *)*v26;
          }
          sub_1850970((uint64_t)v26);
          uint64_t v25 = v27;
          *(void *)(a1 + 112) = v27;
          unint64_t v8 = *(unsigned __int8 **)v49;
        }
        uint64_t v19 = sub_12799CC(a3, v25, v8);
        goto LABEL_88;
      case 5u:
        if (v9 != 42) {
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v20 = *(void *)(a1 + 120);
        if (!v20)
        {
          uint64_t v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v21 = (void *)*v21;
          }
          uint64_t v20 = sub_1850A04((uint64_t)v21);
          *(void *)(a1 + 120) = v20;
          unint64_t v8 = *(unsigned __int8 **)v49;
        }
        uint64_t v19 = sub_1279A5C(a3, v20, v8);
        goto LABEL_88;
      case 6u:
        if (v9 != 50) {
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 40) |= 0x10u;
        uint64_t v33 = *(void *)(a1 + 128);
        if (!v33)
        {
          uint64_t v34 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v34 = (void *)*v34;
          }
          sub_1284898((uint64_t)v34);
          uint64_t v33 = v35;
          *(void *)(a1 + 128) = v35;
          unint64_t v8 = *(unsigned __int8 **)v49;
        }
        uint64_t v19 = (uint64_t)sub_1279AEC(a3, v33, v8);
        goto LABEL_88;
      case 7u:
        if (v9 != 58) {
          goto LABEL_79;
        }
        uint64_t v36 = (const std::string::value_type *)(v8 - 1);
        while (1)
        {
          uint64_t v37 = (char *)(v36 + 1);
          *(void *)uint64_t v49 = v36 + 1;
          uint64_t v38 = *(_DWORD **)(a1 + 64);
          if (v38 && (uint64_t v39 = *(int *)(a1 + 56), (int)v39 < *v38))
          {
            *(_DWORD *)(a1 + 56) = v39 + 1;
            unint64_t v40 = *(std::string **)&v38[2 * v39 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            *int v42 = v41;
            v42[1] = sub_3A6EDC;
            *uint64_t v41 = 0;
            v41[1] = 0;
            v41[2] = 0;
            unint64_t v40 = (std::string *)sub_188CDC8(a1 + 48, (uint64_t)v41);
            uint64_t v37 = *(char **)v49;
          }
          uint64_t v36 = sub_188C244(v40, v37, (uint64_t)a3);
          *(void *)uint64_t v49 = v36;
          if (!v36) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v36 || *v36 != 58) {
            goto LABEL_89;
          }
        }
      case 8u:
        if (v9 != 66) {
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 40) |= 0x20u;
        uint64_t v28 = *(void **)(a1 + 136);
        if (!v28)
        {
          uint64_t v29 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v29 = (void *)*v29;
          }
          uint64_t v28 = sub_130BD74((uint64_t)v29);
          *(void *)(a1 + 136) = v28;
          unint64_t v8 = *(unsigned __int8 **)v49;
        }
        uint64_t v19 = (uint64_t)sub_127B5B0(a3, (uint64_t)v28, v8);
        goto LABEL_88;
      case 9u:
        if (v9 == 74)
        {
          *(void *)&long long v50 = a1 + 72;
          *((void *)&v50 + 1) = sub_15CBDD8;
          uint64_t v51 = a1 + 8;
          int v52 = 9;
          uint64_t v19 = (uint64_t)sub_1112E88((uint64_t)a3, (char *)v8, &v50);
          goto LABEL_88;
        }
        if (v9 == 72)
        {
          uint64_t v44 = sub_110DB5C((uint64_t *)v49);
          if (!*(void *)v49) {
            return 0;
          }
          unint64_t v14 = v44;
          if (v44 > 1)
          {
            if (*v6) {
              BOOL v47 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else {
              BOOL v47 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            }
            int v48 = 9;
LABEL_94:
            sub_188C020(v48, v14, v47);
          }
          else
          {
            sub_133704C(a1, v44);
          }
LABEL_89:
          if (sub_11947B8((uint64_t)a3, (char **)v49, a3[11].i32[1])) {
            return *(void *)v49;
          }
          continue;
        }
LABEL_79:
        if (v9) {
          BOOL v45 = (v9 & 7) == 4;
        }
        else {
          BOOL v45 = 1;
        }
        if (!v45)
        {
          if (v9 - 800 > 0x31F)
          {
            if (*v6)
            {
              uint64_t v46 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else
            {
              uint64_t v46 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              unint64_t v8 = *(unsigned __int8 **)v49;
            }
            uint64_t v19 = (uint64_t)sub_1885AC0(v9, v46, (char *)v8, a3);
          }
          else
          {
            uint64_t v19 = (uint64_t)sub_18859DC((uint64_t **)(a1 + 16), v9, (char *)v8, (uint64_t)&off_253FB60, (uint64_t *)(a1 + 8), a3);
          }
LABEL_88:
          *(void *)uint64_t v49 = v19;
          if (!v19) {
            return 0;
          }
          goto LABEL_89;
        }
        if (!v8) {
          return 0;
        }
        a3[10].i32[0] = v9 - 1;
        return *(void *)v49;
      default:
        if (v9 >> 3 != 201 || v9 != 74) {
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 40) |= 0x40u;
        uint64_t v17 = *(void *)(a1 + 144);
        if (!v17)
        {
          uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v18 = (void *)*v18;
          }
          uint64_t v17 = sub_15C6344((uint64_t)v18);
          *(void *)(a1 + 144) = v17;
          unint64_t v8 = *(unsigned __int8 **)v49;
        }
        uint64_t v19 = sub_1279B7C(a3, v17, v8);
        goto LABEL_88;
    }
  }
}

char *sub_15CC9C8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15CE40C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15CCA58(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15CFDFC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15CCAE8(uint64_t a1, char *a2, unint64_t *a3)
{
  char v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 0x80) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)a2);
    }
    unint64_t v7 = *(int *)(a1 + 152);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 96);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      unsigned int v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      unsigned int v12 = v4 + 2;
    }
    char v4 = sub_15CEB88(v10, (unint64_t)v12, a3);
    if ((v6 & 2) == 0)
    {
LABEL_10:
      if ((v6 & 4) == 0) {
        goto LABEL_11;
      }
      goto LABEL_26;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_10;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 104);
  char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    int v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    int v15 = v4 + 2;
  }
  char v4 = sub_15D02B0(v13, (unint64_t)v15, a3);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_26:
  if (*a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 112);
  char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 20);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  char v4 = sub_184C838(v16, v18, a3);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
LABEL_32:
  if (*a3 <= (unint64_t)v4) {
    char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 120);
  char *v4 = 42;
  unsigned int v20 = *(_DWORD *)(v19 + 44);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  char v4 = sub_184F13C(v19, v21, a3);
  if ((v6 & 0x10) != 0)
  {
LABEL_38:
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v22 = *(void *)(a1 + 128);
    char *v4 = 50;
    unsigned int v23 = *(_DWORD *)(v22 + 20);
    v4[1] = v23;
    if (v23 > 0x7F) {
      uint64_t v24 = sub_188A9CC(v23, v4 + 1);
    }
    else {
      uint64_t v24 = v4 + 2;
    }
    char v4 = sub_1278B7C(v22, (unint64_t)v24, a3);
  }
LABEL_44:
  uint64_t v25 = *(unsigned int *)(a1 + 56);
  if ((int)v25 >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 8 * v25;
    do
    {
      uint64_t v28 = *(void **)(*(void *)(a1 + 64) + v26 + 8);
      if (*((char *)v28 + 23) < 0)
      {
        int64_t v29 = v28[1];
        if (v29 > 127) {
          goto LABEL_55;
        }
      }
      else
      {
        int64_t v29 = *((unsigned __int8 *)v28 + 23);
      }
      if ((uint64_t)(*a3 - (void)v4 + 14) >= v29)
      {
        char *v4 = 58;
        v4[1] = v29;
        if (*((char *)v28 + 23) < 0) {
          uint64_t v28 = (void *)*v28;
        }
        uint64_t v30 = v4 + 2;
        memcpy(v30, v28, v29);
        char v4 = &v30[v29];
        goto LABEL_53;
      }
LABEL_55:
      char v4 = (char *)sub_188A868(a3, 7, (uint64_t)v28, v4);
LABEL_53:
      v26 += 8;
    }
    while (v27 != v26);
  }
  if ((v6 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v31 = *(void *)(a1 + 136);
    char *v4 = 66;
    unsigned int v32 = *(_DWORD *)(v31 + 20);
    v4[1] = v32;
    if (v32 > 0x7F) {
      uint64_t v33 = sub_188A9CC(v32, v4 + 1);
    }
    else {
      uint64_t v33 = v4 + 2;
    }
    char v4 = sub_1306AB4(v31, v33, a3);
  }
  unsigned int v34 = *(_DWORD *)(a1 + 88);
  if ((int)v34 >= 1)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char *v4 = 74;
    uint64_t v35 = v4 + 1;
    if (v34 >= 0x80)
    {
      do
      {
        *v35++ = v34 | 0x80;
        unsigned int v50 = v34 >> 14;
        v34 >>= 7;
      }
      while (v50);
      char v4 = v35 - 1;
    }
    v4 += 2;
    *uint64_t v35 = v34;
    uint64_t v36 = *(int **)(a1 + 80);
    uint64_t v37 = &v36[*(int *)(a1 + 72)];
    do
    {
      if (*a3 <= (unint64_t)v4) {
        char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v39 = *v36++;
      unint64_t v38 = v39;
      char *v4 = v39;
      if (v39 > 0x7F)
      {
        char *v4 = v38 | 0x80;
        unint64_t v40 = v38 >> 7;
        v4[1] = v38 >> 7;
        v4 += 2;
        if (v38 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v41 = v40 >> 14;
            v40 >>= 7;
            *v4++ = v40;
          }
          while (v41);
        }
      }
      else
      {
        ++v4;
      }
    }
    while (v36 < v37);
  }
  if (*(_WORD *)(a1 + 26)) {
    char v4 = sub_1886844(a1 + 16, 100, 200, v4, a3);
  }
  if ((v6 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v42 = *(void *)(a1 + 144);
    *(_WORD *)char v4 = 3274;
    unsigned int v43 = *(_DWORD *)(v42 + 20);
    v4[2] = v43;
    if (v43 > 0x7F) {
      uint64_t v44 = sub_188A9CC(v43, v4 + 2);
    }
    else {
      uint64_t v44 = v4 + 3;
    }
    char v4 = sub_15C50E8(v42, (unint64_t)v44, a3);
  }
  uint64_t v45 = *(void *)(a1 + 8);
  if ((v45 & 1) == 0) {
    return v4;
  }
  unint64_t v47 = v45 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v47 + 31) < 0)
  {
    int v48 = *(void **)(v47 + 8);
    uint64_t v49 = *(void *)(v47 + 16);
  }
  else
  {
    int v48 = (void *)(v47 + 8);
    LODWORD(v49) = *(unsigned __int8 *)(v47 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v49)
  {
    uint64_t v51 = (int)v49;
    memcpy(v4, v48, (int)v49);
    v4 += v51;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v48, v49, v4);
}

uint64_t sub_15CD0B0(uint64_t a1)
{
  uint64_t v2 = sub_1889280(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  uint64_t v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    unint64_t v5 = (uint64_t *)(*(void *)(a1 + 64) + 8);
    do
    {
      uint64_t v6 = *v5++;
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      uint64_t v8 = *(void *)(v6 + 8);
      if ((v7 & 0x80u) == 0) {
        uint64_t v8 = v7;
      }
      v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      --v3;
    }
    while (v3);
  }
  int v9 = *(_DWORD *)(a1 + 72);
  if (v9)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    do
    {
      int v12 = *(_DWORD *)(*(void *)(a1 + 80) + 4 * v10);
      if (v12 < 0) {
        uint64_t v13 = 10;
      }
      else {
        uint64_t v13 = (9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6;
      }
      v11 += v13;
      ++v10;
    }
    while (v9 != v10);
    if (v11)
    {
      if ((v11 & 0x80000000) != 0) {
        uint64_t v14 = 11;
      }
      else {
        uint64_t v14 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v4 += v14;
      int v9 = v11;
    }
    else
    {
      int v9 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(_DWORD *)(a1 + 88) = v9;
  uint64_t v15 = v4 + v11;
  char v16 = *(unsigned char *)(a1 + 40);
  if (v16)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v17 = sub_15CEF18(*(void *)(a1 + 96));
      v15 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v16 & 2) == 0)
      {
LABEL_22:
        if ((v16 & 4) == 0) {
          goto LABEL_23;
        }
        goto LABEL_31;
      }
    }
    else if ((*(unsigned char *)(a1 + 40) & 2) == 0)
    {
      goto LABEL_22;
    }
    uint64_t v18 = sub_15D0598(*(void *)(a1 + 104));
    v15 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v16 & 4) == 0)
    {
LABEL_23:
      if ((v16 & 8) == 0) {
        goto LABEL_24;
      }
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v19 = sub_184CE90(*(void *)(a1 + 112));
    v15 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v16 & 8) == 0)
    {
LABEL_24:
      if ((v16 & 0x10) == 0) {
        goto LABEL_25;
      }
      goto LABEL_33;
    }
LABEL_32:
    uint64_t v20 = sub_184FEFC(*(void *)(a1 + 120));
    v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v16 & 0x10) == 0)
    {
LABEL_25:
      if ((v16 & 0x20) == 0) {
        goto LABEL_26;
      }
      goto LABEL_34;
    }
LABEL_33:
    uint64_t v21 = sub_1278D98(*(void *)(a1 + 128));
    v15 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v16 & 0x20) == 0)
    {
LABEL_26:
      if ((v16 & 0x40) == 0) {
        goto LABEL_27;
      }
      goto LABEL_35;
    }
LABEL_34:
    uint64_t v22 = sub_1306CE4(*(void *)(a1 + 136));
    v15 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v16 & 0x40) == 0)
    {
LABEL_27:
      if ((v16 & 0x80) == 0) {
        goto LABEL_40;
      }
      goto LABEL_36;
    }
LABEL_35:
    uint64_t v23 = sub_15C52D0(*(void *)(a1 + 144));
    v15 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v16 & 0x80) == 0) {
      goto LABEL_40;
    }
LABEL_36:
    int v24 = *(_DWORD *)(a1 + 152);
    if (v24 < 0) {
      uint64_t v25 = 11;
    }
    else {
      uint64_t v25 = ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v15 += v25;
  }
LABEL_40:
  uint64_t v26 = *(void *)(a1 + 8);
  if (v26)
  {
    unint64_t v28 = v26 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v28 + 31) < 0) {
      uint64_t v29 = *(void *)(v28 + 16);
    }
    else {
      uint64_t v29 = *(unsigned __int8 *)(v28 + 31);
    }
    v15 += v29;
  }
  *(_DWORD *)(a1 + 44) = v15;
  return v15;
}

void sub_15CD3B0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 56);
  if (v4)
  {
    unint64_t v5 = (const std::string **)(*(void *)(a2 + 64) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_188FB98(a1 + 48, v6, v5, v4, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v7 = *(_DWORD *)(a1 + 56) + v4;
    *(_DWORD *)(a1 + 56) = v7;
    uint64_t v8 = *(int **)(a1 + 64);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 72);
  if (v9)
  {
    uint64_t v10 = *(int *)(a1 + 72);
    sub_188C80C((unsigned int *)(a1 + 72), v10 + v9);
    uint64_t v11 = *(void *)(a1 + 80);
    *(_DWORD *)(a1 + 72) += *(_DWORD *)(a2 + 72);
    memcpy((void *)(v11 + 4 * v10), *(const void **)(a2 + 80), 4 * *(int *)(a2 + 72));
  }
  int v12 = *(_DWORD *)(a2 + 40);
  if ((_BYTE)v12)
  {
    if (v12)
    {
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v14 = *(void *)(a1 + 96);
      if (!v14)
      {
        uint64_t v15 = *(void *)(a1 + 8);
        char v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          char v16 = (void *)*v16;
        }
        sub_15F84D8((uint64_t)v16);
        *(void *)(a1 + 96) = v14;
      }
      if (*(void *)(a2 + 96)) {
        uint64_t v17 = *(uint64_t (****)())(a2 + 96);
      }
      else {
        uint64_t v17 = &off_253FC00;
      }
      sub_15CD728(v14, (uint64_t)v17);
      if ((v12 & 2) == 0)
      {
LABEL_9:
        if ((v12 & 4) == 0) {
          goto LABEL_10;
        }
        goto LABEL_37;
      }
    }
    else if ((v12 & 2) == 0)
    {
      goto LABEL_9;
    }
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v18 = *(std::string **)(a1 + 104);
    if (!v18)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      sub_15F8558((uint64_t)v20);
      *(void *)(a1 + 104) = v18;
    }
    if (*(void *)(a2 + 104)) {
      uint64_t v21 = *(uint64_t (****)())(a2 + 104);
    }
    else {
      uint64_t v21 = &off_253FC50;
    }
    sub_15CD9C4(v18, (uint64_t)v21);
    if ((v12 & 4) == 0)
    {
LABEL_10:
      if ((v12 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_45;
    }
LABEL_37:
    *(_DWORD *)(a1 + 40) |= 4u;
    uint64_t v22 = *(void *)(a1 + 112);
    if (!v22)
    {
      uint64_t v23 = *(void *)(a1 + 8);
      int v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        int v24 = (void *)*v24;
      }
      sub_1850970((uint64_t)v24);
      *(void *)(a1 + 112) = v22;
    }
    if (*(void *)(a2 + 112)) {
      uint64_t v25 = *(uint64_t (****)())(a2 + 112);
    }
    else {
      uint64_t v25 = &off_254D310;
    }
    sub_182CCB8(v22, (uint64_t)v25);
    if ((v12 & 8) == 0)
    {
LABEL_11:
      if ((v12 & 0x10) == 0) {
        goto LABEL_12;
      }
      goto LABEL_53;
    }
LABEL_45:
    *(_DWORD *)(a1 + 40) |= 8u;
    uint64_t v26 = *(void *)(a1 + 120);
    if (!v26)
    {
      uint64_t v27 = *(void *)(a1 + 8);
      unint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if (v27) {
        unint64_t v28 = (void *)*v28;
      }
      uint64_t v26 = sub_1850A04((uint64_t)v28);
      *(void *)(a1 + 120) = v26;
    }
    if (*(void *)(a2 + 120)) {
      uint64_t v29 = *(uint64_t (****)())(a2 + 120);
    }
    else {
      uint64_t v29 = &off_254D3B0;
    }
    sub_182D0C4(v26, (uint64_t)v29);
    if ((v12 & 0x10) == 0)
    {
LABEL_12:
      if ((v12 & 0x20) == 0) {
        goto LABEL_13;
      }
      goto LABEL_61;
    }
LABEL_53:
    *(_DWORD *)(a1 + 40) |= 0x10u;
    uint64_t v30 = *(std::string **)(a1 + 128);
    if (!v30)
    {
      uint64_t v31 = *(void *)(a1 + 8);
      unsigned int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        unsigned int v32 = (void *)*v32;
      }
      sub_1284898((uint64_t)v32);
      *(void *)(a1 + 128) = v30;
    }
    if (*(void *)(a2 + 128)) {
      uint64_t v33 = *(void *(****)(void *))(a2 + 128);
    }
    else {
      uint64_t v33 = &off_252FBD0;
    }
    sub_1278E44(v30, (uint64_t)v33);
    if ((v12 & 0x20) == 0)
    {
LABEL_13:
      if ((v12 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_69;
    }
LABEL_61:
    *(_DWORD *)(a1 + 40) |= 0x20u;
    unsigned int v34 = *(void **)(a1 + 136);
    if (!v34)
    {
      uint64_t v35 = *(void *)(a1 + 8);
      uint64_t v36 = (void *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
      if (v35) {
        uint64_t v36 = (void *)*v36;
      }
      unsigned int v34 = sub_130BD74((uint64_t)v36);
      *(void *)(a1 + 136) = v34;
    }
    if (*(void *)(a2 + 136)) {
      uint64_t v37 = *(uint64_t (****)())(a2 + 136);
    }
    else {
      uint64_t v37 = &off_25324D8;
    }
    sub_1306E18((uint64_t)v34, (uint64_t)v37);
    if ((v12 & 0x40) == 0)
    {
LABEL_14:
      if ((v12 & 0x80) == 0)
      {
LABEL_16:
        *(_DWORD *)(a1 + 40) |= v12;
        goto LABEL_17;
      }
LABEL_15:
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      goto LABEL_16;
    }
LABEL_69:
    *(_DWORD *)(a1 + 40) |= 0x40u;
    unint64_t v38 = *(std::string **)(a1 + 144);
    if (!v38)
    {
      uint64_t v39 = *(void *)(a1 + 8);
      unint64_t v40 = (void *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
      if (v39) {
        unint64_t v40 = (void *)*v40;
      }
      unint64_t v38 = (std::string *)sub_15C6344((uint64_t)v40);
      *(void *)(a1 + 144) = v38;
    }
    if (*(void *)(a2 + 144)) {
      unint64_t v41 = *(uint64_t (****)())(a2 + 144);
    }
    else {
      unint64_t v41 = &off_253F8C0;
    }
    sub_121627C(v38, (uint64_t)v41);
    if ((v12 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_17:
  sub_1884444(a1 + 16, a2 + 16);
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15CD728(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x7F) == 0) {
    goto LABEL_66;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v5 = *(void *)(a1 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        int v7 = (void *)*v7;
      }
      sub_15F8C28((uint64_t)v7);
      *(void *)(a1 + 24) = v5;
    }
    if (*(void *)(a2 + 24)) {
      uint64_t v8 = *(uint64_t (****)())(a2 + 24);
    }
    else {
      uint64_t v8 = &off_253FF10;
    }
    sub_15CF0F4(v5, (uint64_t)v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_4;
  }
  *(_DWORD *)(a1 + 16) |= 2u;
  int v9 = *(std::string **)(a1 + 32);
  if (!v9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      uint64_t v11 = (void *)*v11;
    }
    int v9 = (std::string *)sub_1605D2C((uint64_t)v11);
    *(void *)(a1 + 32) = v9;
  }
  if (*(void *)(a2 + 32)) {
    int v12 = *(void *(****)(void *))(a2 + 32);
  }
  else {
    int v12 = &off_2540BC8;
  }
  sub_15CF32C(v9, (uint64_t)v12);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_26:
  *(_DWORD *)(a1 + 16) |= 4u;
  uint64_t v13 = *(std::string **)(a1 + 40);
  if (!v13)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    uint64_t v13 = (std::string *)sub_16066B4((uint64_t)v15);
    *(void *)(a1 + 40) = v13;
  }
  if (*(void *)(a2 + 40)) {
    char v16 = *(uint64_t (****)())(a2 + 40);
  }
  else {
    char v16 = &off_2540EC0;
  }
  sub_15CF440(v13, (uint64_t)v16);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_34:
  *(_DWORD *)(a1 + 16) |= 8u;
  uint64_t v17 = *(void *)(a1 + 48);
  if (!v17)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    uint64_t v17 = sub_15F8CBC((uint64_t)v19);
    *(void *)(a1 + 48) = v17;
  }
  if (*(void *)(a2 + 48)) {
    uint64_t v20 = *(void *(****)(void *))(a2 + 48);
  }
  else {
    uint64_t v20 = &off_253FF60;
  }
  sub_15CF588(v17, (uint64_t)v20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }
LABEL_42:
  *(_DWORD *)(a1 + 16) |= 0x10u;
  uint64_t v21 = *(void *)(a1 + 56);
  if (!v21)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22) {
      uint64_t v23 = (void *)*v23;
    }
    sub_160E698((uint64_t)v23);
    *(void *)(a1 + 56) = v21;
  }
  if (*(void *)(a2 + 56)) {
    int v24 = *(uint64_t (****)())(a2 + 56);
  }
  else {
    int v24 = &off_2541118;
  }
  sub_15CF674(v21, (uint64_t)v24);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_66;
    }
    goto LABEL_58;
  }
LABEL_50:
  *(_DWORD *)(a1 + 16) |= 0x20u;
  uint64_t v25 = *(std::string **)(a1 + 64);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (void *)*v27;
    }
    uint64_t v25 = (std::string *)sub_15F871C((uint64_t)v27);
    *(void *)(a1 + 64) = v25;
  }
  if (*(void *)(a2 + 64)) {
    unint64_t v28 = *(uint64_t (****)(uint64_t))(a2 + 64);
  }
  else {
    unint64_t v28 = &off_253FD28;
  }
  sub_128E79C(v25, (uint64_t)v28);
  if ((v4 & 0x40) != 0)
  {
LABEL_58:
    *(_DWORD *)(a1 + 16) |= 0x40u;
    uint64_t v29 = *(std::string **)(a1 + 72);
    if (!v29)
    {
      uint64_t v30 = *(void *)(a1 + 8);
      uint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
      if (v30) {
        uint64_t v31 = (void *)*v31;
      }
      uint64_t v29 = (std::string *)sub_15F8928((uint64_t)v31);
      *(void *)(a1 + 72) = v29;
    }
    if (*(void *)(a2 + 72)) {
      unsigned int v32 = *(uint64_t (****)())(a2 + 72);
    }
    else {
      unsigned int v32 = &off_253FDF8;
    }
    sub_15CF7EC(v29, (uint64_t)v32);
  }
LABEL_66:
  uint64_t v33 = *(void *)(a2 + 8);
  if (v33)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v33 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15CD9C4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(a2 + 16);
  if (!v4) {
    goto LABEL_56;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    uint64_t v6 = (std::string **)&result[1];
    std::string::size_type size = v3->__r_.__value_.__l.__size_;
    uint64_t v8 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
    if (size) {
      uint64_t v8 = (uint64_t *)*v8;
    }
    uint64_t result = sub_1881DF4(v6, v5, v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a2 + 16) & 2) == 0)
  {
    goto LABEL_4;
  }
  int v9 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
  std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
  uint64_t v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10) {
    uint64_t v11 = (uint64_t *)*v11;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__l.__size_, v9, v11);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_14:
  int v12 = (long long *)(*(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
  std::string::size_type v13 = v3->__r_.__value_.__l.__size_;
  uint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v13) {
    uint64_t v14 = (uint64_t *)*v14;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__r.__words[2], v12, v14);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v15 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
  std::string::size_type v16 = v3->__r_.__value_.__l.__size_;
  uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16) {
    uint64_t v17 = (uint64_t *)*v17;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[2], v15, v17);
  if ((v4 & 0x10) != 0)
  {
LABEL_20:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10u;
    uint64_t v18 = (std::string *)v3[2].__r_.__value_.__l.__size_;
    if (!v18)
    {
      std::string::size_type v19 = v3->__r_.__value_.__l.__size_;
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      uint64_t v18 = (std::string *)sub_12834B0((uint64_t)v20);
      v3[2].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    }
    if (*(void *)(a2 + 56)) {
      uint64_t v21 = *(uint64_t (****)(uint64_t))(a2 + 56);
    }
    else {
      uint64_t v21 = &off_252F330;
    }
    uint64_t result = sub_11EC100(v18, (uint64_t)v21);
  }
LABEL_28:
  if ((v4 & 0x20) != 0)
  {
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x20u;
    uint64_t v22 = (std::string *)v3[2].__r_.__value_.__r.__words[2];
    if (!v22)
    {
      std::string::size_type v23 = v3->__r_.__value_.__l.__size_;
      int v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        int v24 = (void *)*v24;
      }
      uint64_t v22 = (std::string *)sub_15F85EC((uint64_t)v24);
      v3[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
    }
    if (*(void *)(a2 + 64)) {
      uint64_t v25 = *(uint64_t (****)(uint64_t))(a2 + 64);
    }
    else {
      uint64_t v25 = &off_253FCA8;
    }
    uint64_t result = sub_1263010(v22, (uint64_t)v25);
    if ((v4 & 0x40) == 0)
    {
LABEL_30:
      if ((v4 & 0x80) == 0) {
        goto LABEL_56;
      }
      goto LABEL_48;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_30;
  }
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x40u;
  std::string::pointer data = (std::string *)v3[3].__r_.__value_.__l.__data_;
  if (!data)
  {
    std::string::size_type v27 = v3->__r_.__value_.__l.__size_;
    unint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
    if (v27) {
      unint64_t v28 = (void *)*v28;
    }
    std::string::pointer data = (std::string *)sub_15F85EC((uint64_t)v28);
    v3[3].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  }
  if (*(void *)(a2 + 72)) {
    uint64_t v29 = *(uint64_t (****)(uint64_t))(a2 + 72);
  }
  else {
    uint64_t v29 = &off_253FCA8;
  }
  uint64_t result = sub_1263010(data, (uint64_t)v29);
  if (v4 < 0)
  {
LABEL_48:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x80u;
    uint64_t v30 = (std::string *)v3[3].__r_.__value_.__l.__size_;
    if (!v30)
    {
      std::string::size_type v31 = v3->__r_.__value_.__l.__size_;
      unsigned int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        unsigned int v32 = (void *)*v32;
      }
      uint64_t v30 = (std::string *)sub_15F8674((uint64_t)v32);
      v3[3].__r_.__value_.__l.__size_ = (std::string::size_type)v30;
    }
    if (*(void *)(a2 + 80)) {
      uint64_t v33 = *(uint64_t (****)(uint64_t))(a2 + 80);
    }
    else {
      uint64_t v33 = &off_253FCE0;
    }
    uint64_t result = sub_15D07F4(v30, (uint64_t)v33);
  }
LABEL_56:
  uint64_t v34 = *(void *)(a2 + 8);
  if (v34)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v34 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15CDC44(uint64_t a1)
{
  uint64_t result = sub_18856CC(a1 + 16);
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 40);
    if (v3)
    {
      uint64_t result = sub_15CDCC4(*(void *)(a1 + 96));
      if (!result) {
        return result;
      }
      int v3 = *(_DWORD *)(a1 + 40);
    }
    if ((v3 & 4) != 0)
    {
      uint64_t result = sub_182D93C(*(void *)(a1 + 112));
      if (!result) {
        return result;
      }
      int v3 = *(_DWORD *)(a1 + 40);
    }
    if ((v3 & 8) != 0)
    {
      uint64_t result = sub_182D9C8(*(void *)(a1 + 120));
      if (!result) {
        return result;
      }
      int v3 = *(_DWORD *)(a1 + 40);
    }
    if ((v3 & 0x20) == 0) {
      return 1;
    }
    uint64_t result = sub_1306FA0(*(void *)(a1 + 136));
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_15CDCC4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_15CF94C(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 8) != 0)
  {
    uint64_t result = sub_12D6F20(*(void *)(a1 + 48) + 24);
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x10) != 0)
  {
    uint64_t result = sub_15CF9B8(*(void *)(a1 + 56));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  uint64_t result = 1;
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if ((*(unsigned char *)(v4 + 16) & 2) != 0 && (~*(_DWORD *)(*(void *)(v4 + 32) + 16) & 3) != 0) {
      return 0;
    }
  }
  return result;
}

void *sub_15CDD58@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackRequest");
}

uint64_t sub_15CDD68(uint64_t a1)
{
  uint64_t result = sub_188CC00(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  *(_DWORD *)(v3 + 32) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15CDDBC(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 24) = 0;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 40);
      char v4 = *(unsigned char *)(v3 + 8);
      uint64_t result = v3 + 8;
      *(void *)(result + 16) = 0;
      *(_DWORD *)(result + 8) = 0;
      if (v4) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_1603EA8(*(void *)(v1 + 48));
    }
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

unsigned char *sub_15CDE40(unsigned char *result)
{
  uint64_t v1 = result;
  int v2 = *((_DWORD *)result + 4);
  if ((v2 & 7) != 0)
  {
    if (v2)
    {
      uint64_t result = sub_15B16B4(*((unsigned char **)result + 3));
      if ((v2 & 2) == 0)
      {
LABEL_4:
        if ((v2 & 4) == 0) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    else if ((v2 & 2) == 0)
    {
      goto LABEL_4;
    }
    uint64_t result = sub_15B09D0(*((void *)v1 + 4));
    if ((v2 & 4) != 0) {
LABEL_5:
    }
      uint64_t result = sub_16CD894(*((void *)v1 + 5));
  }
LABEL_6:
  char v4 = v1[8];
  uint64_t v3 = v1 + 8;
  *((_DWORD *)v3 + 10) = 0;
  *((_DWORD *)v3 + 2) = 0;
  if (v4)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

void *sub_15CDECC(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15CDF50((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t sub_15CDF50(uint64_t result)
{
  if ((uint64_t (***)())result != &off_253FC00)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void **)(result + 24);
    if (v2)
    {
      sub_15D73D0(v2);
      operator delete();
    }
    uint64_t v3 = (void *)v1[4];
    if (v3)
    {
      sub_15FA98C(v3);
      operator delete();
    }
    uint64_t v4 = v1[5];
    if (v4)
    {
      sub_1603D98(v4);
      operator delete();
    }
    uint64_t v5 = (void *)v1[6];
    if (v5)
    {
      sub_15D9230(v5);
      operator delete();
    }
    uint64_t v6 = v1[7];
    if (v6)
    {
      sub_160AD14(v6);
      operator delete();
    }
    uint64_t v7 = v1[8];
    if (v7)
    {
      sub_15D1758(v7);
      operator delete();
    }
    uint64_t result = v1[9];
    if (result)
    {
      sub_15D373C(result);
      operator delete();
    }
  }
  return result;
}

void sub_15CE07C(void *a1)
{
  sub_15CDECC(a1);

  operator delete();
}

uint64_t sub_15CE0B4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x3F) == 0) {
    goto LABEL_9;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_17:
    unint64_t v6 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_21;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v2 & 4) != 0) {
        goto LABEL_21;
      }
    }
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_22:
    uint64_t result = sub_15D773C(*(void *)(v1 + 48));
    if ((v2 & 0x10) == 0)
    {
LABEL_7:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    goto LABEL_23;
  }
  unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_17;
    }
  }
LABEL_4:
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_21:
  uint64_t result = sub_15D7584(*(void *)(result + 40));
  if ((v2 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_6:
  if ((v2 & 0x10) == 0) {
    goto LABEL_7;
  }
LABEL_23:
  uint64_t result = sub_15D7880(*(void *)(v1 + 56));
  if ((v2 & 0x20) != 0) {
LABEL_8:
  }
    uint64_t result = sub_15D72A4(*(void *)(v1 + 64));
LABEL_9:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15CE1B8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15C4058(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(unsigned char *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

uint64_t sub_15CE23C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0x1F) == 0) {
    goto LABEL_27;
  }
  if (v1)
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_12;
      }
    }
LABEL_4:
    if ((v1 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_16:
    unint64_t v4 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_20;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v1 & 8) != 0) {
        goto LABEL_20;
      }
    }
LABEL_6:
    if ((v1 & 0x10) == 0) {
      goto LABEL_27;
    }
LABEL_24:
    unint64_t v6 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
    goto LABEL_27;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_12:
  unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v3 + 23) < 0)
  {
    **(unsigned char **)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v3 = 0;
    *(unsigned char *)(v3 + 23) = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_16;
    }
  }
LABEL_5:
  if ((v1 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_20:
  unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v1 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  *(unsigned char *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 23) = 0;
  if ((v1 & 0x10) != 0) {
    goto LABEL_24;
  }
LABEL_27:
  char v8 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v8) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15CE35C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_6;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
  unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_14;
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(unsigned char *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 23) = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_14:
  uint64_t result = sub_15C2850(*(void *)(result + 32));
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    uint64_t result = sub_15D3118(*(void *)(v1 + 40));
LABEL_6:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_15CE40C(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v30 = a2;
  if (sub_11947B8((uint64_t)a3, &v30, a3[11].i32[1])) {
    return v30;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = v30 + 1;
    unsigned int v8 = *v30;
    if (*v30 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v30, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v30 + 2;
      }
    }
    uint64_t v30 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 24);
        if (!v11)
        {
          int v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            int v12 = (void *)*v12;
          }
          sub_15F8C28((uint64_t)v12);
          uint64_t v11 = v13;
          *(void *)(a1 + 24) = v13;
          uint64_t v7 = v30;
        }
        uint64_t v14 = (char *)sub_15CE798(a3, v11, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 2u:
        if (v8 != 18) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 32);
        if (!v15)
        {
          std::string::size_type v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            std::string::size_type v16 = (void *)*v16;
          }
          uint64_t v15 = sub_1605D2C((uint64_t)v16);
          *(void *)(a1 + 32) = v15;
          uint64_t v7 = v30;
        }
        uint64_t v14 = (char *)sub_15CE828(a3, v15, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 3u:
        if (v8 != 26) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v17 = *(void **)(a1 + 40);
        if (!v17)
        {
          uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v18 = (void *)*v18;
          }
          uint64_t v17 = sub_16066B4((uint64_t)v18);
          *(void *)(a1 + 40) = v17;
          uint64_t v7 = v30;
        }
        uint64_t v14 = sub_15CE8B8(a3, (uint64_t)v17, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 4u:
        if (v8 != 34) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v19 = *(void *)(a1 + 48);
        if (!v19)
        {
          uint64_t v20 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v20 = (void *)*v20;
          }
          uint64_t v19 = sub_15F8CBC((uint64_t)v20);
          *(void *)(a1 + 48) = v19;
          uint64_t v7 = v30;
        }
        uint64_t v14 = sub_15CE948(a3, v19, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 5u:
        if (v8 != 42) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v21 = *(void *)(a1 + 56);
        if (!v21)
        {
          uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v22 = (void *)*v22;
          }
          sub_160E698((uint64_t)v22);
          uint64_t v21 = v23;
          *(void *)(a1 + 56) = v23;
          uint64_t v7 = v30;
        }
        uint64_t v14 = sub_15CE9D8(a3, v21, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 6u:
        if (v8 != 50) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        int v24 = *(void **)(a1 + 64);
        if (!v24)
        {
          uint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v25 = (void *)*v25;
          }
          int v24 = sub_15F871C((uint64_t)v25);
          *(void *)(a1 + 64) = v24;
          uint64_t v7 = v30;
        }
        uint64_t v14 = (char *)sub_15CEA68(a3, (uint64_t)v24, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 7u:
        if (v8 != 58) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v26 = *(void *)(a1 + 72);
        if (!v26)
        {
          std::string::size_type v27 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            std::string::size_type v27 = (void *)*v27;
          }
          uint64_t v26 = sub_15F8928((uint64_t)v27);
          *(void *)(a1 + 72) = v26;
          uint64_t v7 = v30;
        }
        uint64_t v14 = (char *)sub_15CEAF8(a3, v26, (unsigned __int8 *)v7);
        goto LABEL_58;
      default:
LABEL_51:
        if (v8) {
          BOOL v28 = (v8 & 7) == 4;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          if (*v6)
          {
            uint64_t v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v29 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = v30;
          }
          uint64_t v14 = (char *)sub_1885AC0(v8, v29, v7, a3);
LABEL_58:
          uint64_t v30 = v14;
          if (!v14) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, &v30, a3[11].i32[1])) {
            return v30;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return v30;
    }
  }
}

uint64_t sub_15CE798(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D7904(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15CE828(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15FAA48(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15CE8B8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_1603F18(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15CE948(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D92E8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15CE9D8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_160AE3C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15CEA68(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D1884(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15CEAF8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D3860(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15CEB88(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_15D7E78(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unsigned char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 56);
  v4[1] = v11;
  if (v11 > 0x7F) {
    int v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    int v12 = v4 + 2;
  }
  char v4 = sub_15FAD88(v10, v12, a3);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_21:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 40);
  unsigned char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    uint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    uint64_t v15 = v4 + 2;
  }
  char v4 = sub_1604348(v13, v15, a3);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_27:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  unsigned char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 20);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  char v4 = sub_15D9520(v16, v18, a3);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_33:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned char *v4 = 42;
  unsigned int v20 = *(_DWORD *)(v19 + 20);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  char v4 = sub_160B11C(v19, (unint64_t)v21, a3);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
LABEL_39:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v22 = *(void *)(a1 + 64);
  unsigned char *v4 = 50;
  unsigned int v23 = *(_DWORD *)(v22 + 20);
  v4[1] = v23;
  if (v23 > 0x7F) {
    int v24 = sub_188A9CC(v23, v4 + 1);
  }
  else {
    int v24 = v4 + 2;
  }
  char v4 = sub_15D1B18(v22, v24, a3);
  if ((v6 & 0x40) != 0)
  {
LABEL_45:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v25 = *(void *)(a1 + 72);
    unsigned char *v4 = 58;
    unsigned int v26 = *(_DWORD *)(v25 + 20);
    v4[1] = v26;
    if (v26 > 0x7F) {
      std::string::size_type v27 = sub_188A9CC(v26, v4 + 1);
    }
    else {
      std::string::size_type v27 = v4 + 2;
    }
    char v4 = sub_15D3BD0(v25, v27, a3);
  }
LABEL_51:
  uint64_t v28 = *(void *)(a1 + 8);
  if ((v28 & 1) == 0) {
    return v4;
  }
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v30 + 31) < 0)
  {
    std::string::size_type v31 = *(void **)(v30 + 8);
    uint64_t v32 = *(void *)(v30 + 16);
  }
  else
  {
    std::string::size_type v31 = (void *)(v30 + 8);
    LODWORD(v32) = *(unsigned __int8 *)(v30 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v32)
  {
    uint64_t v33 = (int)v32;
    memcpy(v4, v31, (int)v32);
    v4 += v33;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v31, v32, v4);
}

uint64_t sub_15CEF18(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x7F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_14;
  }
  if (v2)
  {
    uint64_t v4 = sub_15D8190(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15FAF8C(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    uint64_t v9 = sub_1604564(*(void *)(a1 + 40));
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_10:
      if ((v2 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v10 = sub_15D96A0(*(void *)(a1 + 48));
  v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v11 = sub_160B388(*(void *)(a1 + 56));
  v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_19:
  uint64_t v12 = sub_15D1C78(*(void *)(a1 + 64));
  v3 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) != 0)
  {
LABEL_13:
    uint64_t v6 = sub_15D3DF8(*(void *)(a1 + 72));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_14:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v13 + 31) < 0) {
      uint64_t v14 = *(void *)(v13 + 16);
    }
    else {
      uint64_t v14 = *(unsigned __int8 *)(v13 + 31);
    }
    v3 += v14;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15CF0F4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x7F) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v7 = (std::string **)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_21;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    uint64_t v10 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    sub_1881DF4((std::string **)(a1 + 32), v10, v12);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_29;
    }
LABEL_21:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v13 = *(void *)(a1 + 40);
    if (!v13)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        uint64_t v15 = (void *)*v15;
      }
      sub_15F93DC((uint64_t)v15);
      *(void *)(a1 + 40) = v13;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v16 = *(uint64_t (****)())(a2 + 40);
    }
    else {
      uint64_t v16 = &off_25401E8;
    }
    sub_15D8398(v13, (uint64_t)v16);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_37;
    }
LABEL_29:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v17 = *(void *)(a1 + 48);
    if (!v17)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        uint64_t v19 = (void *)*v19;
      }
      uint64_t v17 = sub_15F91FC((uint64_t)v19);
      *(void *)(a1 + 48) = v17;
    }
    if (*(void *)(a2 + 48)) {
      unsigned int v20 = *(uint64_t (****)())(a2 + 48);
    }
    else {
      unsigned int v20 = &off_25400E8;
    }
    sub_15D8A68(v17, (uint64_t)v20);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_45;
    }
LABEL_37:
    *(_DWORD *)(a1 + 16) |= 0x10u;
    uint64_t v21 = *(std::string **)(a1 + 56);
    if (!v21)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        unsigned int v23 = (void *)*v23;
      }
      uint64_t v21 = (std::string *)sub_15F90B4((uint64_t)v23);
      *(void *)(a1 + 56) = v21;
    }
    if (*(void *)(a2 + 56)) {
      int v24 = *(uint64_t (****)(uint64_t))(a2 + 56);
    }
    else {
      int v24 = &off_2540070;
    }
    sub_1196F3C(v21, (uint64_t)v24);
    if ((v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v4 & 0x40) == 0)
      {
LABEL_10:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_11;
      }
LABEL_9:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_10;
    }
LABEL_45:
    *(_DWORD *)(a1 + 16) |= 0x20u;
    uint64_t v25 = *(void **)(a1 + 64);
    if (!v25)
    {
      uint64_t v26 = *(void *)(a1 + 8);
      std::string::size_type v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        std::string::size_type v27 = (void *)*v27;
      }
      uint64_t v25 = sub_161D340((uint64_t)v27);
      *(void *)(a1 + 64) = v25;
    }
    if (*(void *)(a2 + 64)) {
      uint64_t v28 = *(uint64_t (****)())(a2 + 64);
    }
    else {
      uint64_t v28 = &off_2541768;
    }
    sub_15D8E8C((uint64_t)v25, (uint64_t)v28);
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15CF32C(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result->__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 24));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3->__r_.__value_.__r.__words[2], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    int v7 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v4;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v7;
    std::string::size_type size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v7) {
      *std::string::size_type size = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 40);
  if (v9)
  {
    uint64_t v10 = SLODWORD(v3[1].__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&v3[1].__r_.__value_.__r.__words[2], v10 + v9);
    std::string::pointer data = v3[2].__r_.__value_.__l.__data_;
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) += *(_DWORD *)(a2 + 40);
    uint64_t result = (std::string *)memcpy(&data[4 * v10], *(const void **)(a2 + 48), 4 * *(int *)(a2 + 40));
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v12 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15CF440(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = result + 1;
    uint64_t data_low = SLODWORD(result[1].__r_.__value_.__l.__data_);
    sub_188C80C((unsigned int *)&result[1], data_low + v4);
    std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v5->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    uint64_t result = (std::string *)memcpy((void *)(size + 4 * data_low), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  int v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 3) != 0)
  {
    if (v8)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      int v9 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
      if (!v9)
      {
        std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        int v9 = (std::string *)sub_160663C((uint64_t)v11);
        v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
      }
      if (*(void *)(a2 + 40)) {
        uint64_t v12 = *(void *(****)(void *))(a2 + 40);
      }
      else {
        uint64_t v12 = &off_2540EA0;
      }
      uint64_t result = sub_11A442C(v9, (uint64_t)v12);
    }
    if ((v8 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      std::string::pointer data = (std::string *)v3[2].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type v14 = v3->__r_.__value_.__l.__size_;
        uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (void *)*v15;
        }
        std::string::pointer data = (std::string *)sub_1606754((uint64_t)v15);
        v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 48)) {
        uint64_t v16 = *(uint64_t (****)())(a2 + 48);
      }
      else {
        uint64_t v16 = &off_2540EF8;
      }
      uint64_t result = sub_1604684(data, (uint64_t)v16);
    }
  }
  uint64_t v17 = *(void *)(a2 + 8);
  if (v17)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v17 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

void sub_15CF588(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1638E40((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    int v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    char v9 = *(unsigned char *)(a2 + 48);
    *(_DWORD *)(a1 + 16) |= 1u;
    *(unsigned char *)(a1 + 48) = v9;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15CF674(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          int v8 = (void *)*v8;
        }
        uint64_t v6 = sub_15C19EC((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        char v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        char v9 = &off_253F208;
      }
      sub_15B1E3C(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_28;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = sub_15C1918((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_253F1A0;
    }
    sub_15B0E24(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0)
      {
LABEL_7:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_8;
      }
LABEL_6:
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      goto LABEL_7;
    }
LABEL_28:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v14 = *(void *)(a1 + 40);
    if (!v14)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v14 = sub_185089C((uint64_t)v16);
      *(void *)(a1 + 40) = v14;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v17 = *(uint64_t (****)())(a2 + 40);
    }
    else {
      uint64_t v17 = &off_254D2B0;
    }
    sub_16CE3CC(v14, (uint64_t)v17);
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15CF7EC(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      uint64_t v7 = (std::string **)&result[1];
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      char v9 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        char v9 = (uint64_t *)*v9;
      }
      uint64_t result = sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_23;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    uint64_t v10 = (std::string *)v3[1].__r_.__value_.__l.__size_;
    if (!v10)
    {
      std::string::size_type v11 = v3->__r_.__value_.__l.__size_;
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = (std::string *)sub_15C6120((uint64_t)v12);
      v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_253F7C8;
    }
    uint64_t result = sub_12D45B4(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0)
      {
LABEL_7:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
        goto LABEL_8;
      }
LABEL_6:
      LODWORD(v3[2].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 48);
      goto LABEL_7;
    }
LABEL_23:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
    uint64_t v14 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    if (!v14)
    {
      std::string::size_type v15 = v3->__r_.__value_.__l.__size_;
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v14 = (std::string *)sub_15F88B0((uint64_t)v16);
      v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v14;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v17 = *(uint64_t (****)())(a2 + 40);
    }
    else {
      uint64_t v17 = &off_253FDD8;
    }
    uint64_t result = sub_15D3574(v14, (uint64_t)v17);
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15CF94C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 4) != 0)
  {
    uint64_t result = sub_15D9074(*(void *)(a1 + 40));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 8) != 0)
  {
    uint64_t result = sub_15D91CC(*(void *)(a1 + 48));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x20) == 0) {
    return 1;
  }
  uint64_t result = sub_161C544(*(void *)(a1 + 64) + 48);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15CF9B0(uint64_t a1)
{
  return sub_12D6F20(a1 + 24);
}

uint64_t sub_15CF9B8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_15B1FC8(*(void *)(a1 + 24) + 24);
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t result = sub_18856CC(v4 + 16);
    if (!result) {
      return result;
    }
    if ((~*(_DWORD *)(v4 + 40) & 3) != 0) {
      return 0;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 4) == 0) {
    return 1;
  }
  uint64_t result = sub_16CE508(*(void *)(a1 + 40));
  if (result) {
    return 1;
  }
  return result;
}

BOOL sub_15CFA38(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 16) & 2) == 0 || (~*(_DWORD *)(*(void *)(a1 + 32) + 16) & 3) == 0;
}

void *sub_15CFA64@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackRequestParameters");
}

void *sub_15CFA74(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15CFAF8((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void ***sub_15CFAF8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = (void ***)(a1 + 24);
  if (v3 != &qword_2550250) {
    sub_1881C6C(v2);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  uint64_t result = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_253FC50)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      sub_125D240(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      sub_15D0984(v6);
      operator delete();
    }
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7)
    {
      sub_15D0984(v7);
      operator delete();
    }
    uint64_t result = *(void ****)(a1 + 80);
    if (result)
    {
      sub_15D0FAC((uint64_t)result);
      operator delete();
    }
  }
  return result;
}

void sub_15CFC18(void *a1)
{
  sub_15CFA74(a1);

  operator delete();
}

uint64_t sub_15CFC50(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0) {
    goto LABEL_22;
  }
  if ((v1 & 1) == 0)
  {
    if ((v1 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if ((v1 & 4) != 0) {
        goto LABEL_15;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
      if ((v1 & 4) != 0) {
        goto LABEL_15;
      }
    }
LABEL_5:
    if ((v1 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_19:
    unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
    goto LABEL_22;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v2 + 23) < 0)
  {
    **(unsigned char **)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_11;
    }
  }
LABEL_4:
  if ((v1 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_15:
  unint64_t v4 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    **(unsigned char **)unint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if ((v1 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  *(unsigned char *)unint64_t v4 = 0;
  *(unsigned char *)(v4 + 23) = 0;
  if ((v1 & 8) != 0) {
    goto LABEL_19;
  }
LABEL_22:
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v7) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15CFD3C(uint64_t a1)
{
  uint64_t result = sub_188CC00(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 16);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v5 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v6 = a1 + 8;
  *(_WORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

uint64_t sub_15CFDFC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v28 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v28, a3[11].i32[1])) {
    return *(void *)v28;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    char v7 = (unsigned __int8 *)(*(void *)v28 + 1);
    unsigned int v8 = **(unsigned char **)v28;
    if ((char)**(unsigned char **)v28 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        char v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v28, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        char v7 = (unsigned __int8 *)(*(void *)v28 + 2);
      }
    }
    *(void *)uint64_t v28 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        std::string::size_type v11 = *(void **)(a1 + 56);
        if (!v11)
        {
          uint64_t v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v12 = (void *)*v12;
          }
          std::string::size_type v11 = sub_12834B0((uint64_t)v12);
          *(void *)(a1 + 56) = v11;
          char v7 = *(unsigned __int8 **)v28;
        }
        uint64_t v13 = sub_127993C(a3, (uint64_t)v11, v7);
        goto LABEL_57;
      case 2u:
        if (v8 != 18) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v14 = *(void *)(a1 + 8);
        std::string::size_type v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          std::string::size_type v15 = (uint64_t *)*v15;
        }
        uint64_t v16 = (void *)(a1 + 24);
        goto LABEL_31;
      case 3u:
        if (v8 != 26) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v17 = *(void *)(a1 + 8);
        std::string::size_type v15 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          std::string::size_type v15 = (uint64_t *)*v15;
        }
        uint64_t v16 = (void *)(a1 + 32);
        goto LABEL_31;
      case 4u:
        if (v8 != 34) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v18 = *(void *)(a1 + 8);
        std::string::size_type v15 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
        if (v18) {
          std::string::size_type v15 = (uint64_t *)*v15;
        }
        uint64_t v16 = (void *)(a1 + 40);
        goto LABEL_31;
      case 5u:
        if (v8 != 42) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v19 = *(void *)(a1 + 8);
        std::string::size_type v15 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          std::string::size_type v15 = (uint64_t *)*v15;
        }
        uint64_t v16 = (void *)(a1 + 48);
LABEL_31:
        unsigned int v20 = (std::string *)sub_1880F84(v16, v15);
        uint64_t v13 = (uint64_t)sub_188C244(v20, *(char **)v28, (uint64_t)a3);
        goto LABEL_57;
      case 6u:
        if (v8 != 50) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v21 = *(void **)(a1 + 64);
        if (v21) {
          goto LABEL_43;
        }
        uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          uint64_t v22 = (void *)*v22;
        }
        uint64_t v21 = sub_15F85EC((uint64_t)v22);
        *(void *)(a1 + 64) = v21;
        goto LABEL_42;
      case 7u:
        if (v8 != 58) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v21 = *(void **)(a1 + 72);
        if (v21) {
          goto LABEL_43;
        }
        unsigned int v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unsigned int v23 = (void *)*v23;
        }
        uint64_t v21 = sub_15F85EC((uint64_t)v23);
        *(void *)(a1 + 72) = v21;
LABEL_42:
        char v7 = *(unsigned __int8 **)v28;
LABEL_43:
        uint64_t v13 = sub_15D0190(a3, (uint64_t)v21, v7);
        goto LABEL_57;
      case 8u:
        if (v8 != 66) {
          goto LABEL_50;
        }
        *(_DWORD *)(a1 + 16) |= 0x80u;
        uint64_t v24 = *(void *)(a1 + 80);
        if (!v24)
        {
          uint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v25 = (void *)*v25;
          }
          uint64_t v24 = sub_15F8674((uint64_t)v25);
          *(void *)(a1 + 80) = v24;
          char v7 = *(unsigned __int8 **)v28;
        }
        uint64_t v13 = sub_15D0220(a3, v24, v7);
        goto LABEL_57;
      default:
LABEL_50:
        if (v8) {
          BOOL v26 = (v8 & 7) == 4;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          if (*v6)
          {
            std::string::size_type v27 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            std::string::size_type v27 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            char v7 = *(unsigned __int8 **)v28;
          }
          uint64_t v13 = (uint64_t)sub_1885AC0(v8, v27, (char *)v7, a3);
LABEL_57:
          *(void *)uint64_t v28 = v13;
          if (!v13) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, (char **)v28, a3[11].i32[1])) {
            return *(void *)v28;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v28;
    }
  }
}

uint64_t sub_15D0190(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D0A9C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15D0220(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D10A4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D02B0(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  unint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= __dst) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 56);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    unint64_t v4 = sub_125D4A0(v7, v9, a3);
    if ((v6 & 1) == 0)
    {
LABEL_3:
      if ((v6 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 2) == 0)
  {
LABEL_4:
    if ((v6 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_5:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  unint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  unint64_t v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_20:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 64);
  char *v4 = 50;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    uint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    uint64_t v12 = v4 + 2;
  }
  unint64_t v4 = sub_15D0CEC(v10, v12, a3);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_38;
    }
    goto LABEL_32;
  }
LABEL_26:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 72);
  char *v4 = 58;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    std::string::size_type v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    std::string::size_type v15 = v4 + 2;
  }
  unint64_t v4 = sub_15D0CEC(v13, v15, a3);
  if ((v6 & 0x80) != 0)
  {
LABEL_32:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v16 = *(void *)(a1 + 80);
    char *v4 = 66;
    unsigned int v17 = *(_DWORD *)(v16 + 20);
    v4[1] = v17;
    if (v17 > 0x7F) {
      uint64_t v18 = sub_188A9CC(v17, v4 + 1);
    }
    else {
      uint64_t v18 = v4 + 2;
    }
    unint64_t v4 = sub_15D1454(v16, v18, a3);
  }
LABEL_38:
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    uint64_t v22 = *(void **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    uint64_t v22 = (void *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v23)
  {
    uint64_t v24 = (int)v23;
    memcpy(v4, v22, (int)v23);
    v4 += v24;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v22, v23, v4);
}

uint64_t sub_15D0598(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_19;
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*(unsigned char *)(a1 + 16) & 2) != 0)
  {
LABEL_9:
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    unint64_t v13 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
    uint64_t v15 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = v14;
    }
    v3 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((*(unsigned char *)(a1 + 16) & 8) == 0)
    {
LABEL_14:
      if ((*(unsigned char *)(a1 + 16) & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_27;
    }
  }
  else if ((*(unsigned char *)(a1 + 16) & 8) == 0)
  {
    goto LABEL_14;
  }
  unint64_t v16 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  uint64_t v18 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v17;
  }
  v3 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((*(unsigned char *)(a1 + 16) & 0x10) == 0)
  {
LABEL_15:
    if ((*(unsigned char *)(a1 + 16) & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v19 = sub_125D58C(*(void *)(a1 + 56));
  v3 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v20 = sub_15D0E28(*(void *)(a1 + 64));
  v3 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_29:
  uint64_t v21 = sub_15D0E28(*(void *)(a1 + 72));
  v3 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v2 < 0)
  {
LABEL_18:
    uint64_t v10 = sub_15D15FC(*(void *)(a1 + 80));
    v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_19:
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    unint64_t v22 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v22 + 31) < 0) {
      uint64_t v23 = *(void *)(v22 + 16);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v22 + 31);
    }
    v3 += v23;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_15D07F4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[1], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 0xF) != 0)
  {
    if (v9)
    {
      uint64_t v11 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      unint64_t v13 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        unint64_t v13 = (uint64_t *)*v13;
      }
      uint64_t result = sub_1881DF4((std::string **)&v3[2], v11, v13);
      if ((v9 & 2) == 0)
      {
LABEL_7:
        if ((v9 & 4) == 0) {
          goto LABEL_8;
        }
        goto LABEL_21;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_7;
    }
    uint64_t v14 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    std::string::size_type v15 = v3->__r_.__value_.__l.__size_;
    unint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      unint64_t v16 = (uint64_t *)*v16;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[2].__r_.__value_.__l.__size_, v14, v16);
    if ((v9 & 4) == 0)
    {
LABEL_8:
      if ((v9 & 8) == 0)
      {
LABEL_10:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v9;
        goto LABEL_11;
      }
LABEL_9:
      v3[2].__r_.__value_.__s.__data_[17] = *(unsigned char *)(a2 + 65);
      goto LABEL_10;
    }
LABEL_21:
    v3[2].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 64);
    if ((v9 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15D096C()
{
  return 1;
}

void *sub_15D0974@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackUserInfo");
}

uint64_t sub_15D0984(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_13;
    }
  }
  else if (v4)
  {
    goto LABEL_13;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 48));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_13:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D0A64(uint64_t a1)
{
  sub_15D0984(a1);

  operator delete();
}

uint64_t sub_15D0A9C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v21 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
    return *(void *)v21;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    int v7 = (char *)(*(void *)v21 + 1);
    unsigned int v8 = **(unsigned char **)v21;
    if ((char)**(unsigned char **)v21 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        int v7 = (char *)sub_188C180(*(uint64_t *)v21, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        int v7 = (char *)(*(void *)v21 + 2);
      }
    }
    *(void *)uint64_t v21 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        unint64_t v13 = (void *)(a1 + 24);
        goto LABEL_25;
      case 2u:
        if (v8 != 18) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        unint64_t v13 = (void *)(a1 + 32);
        goto LABEL_25;
      case 3u:
        if (v8 != 26) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        unint64_t v13 = (void *)(a1 + 40);
        goto LABEL_25;
      case 4u:
        if (v8 != 34) {
          goto LABEL_29;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v16 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        unint64_t v13 = (void *)(a1 + 48);
LABEL_25:
        uint64_t v17 = (std::string *)sub_1880F84(v13, v12);
        uint64_t v18 = (void *)sub_188C244(v17, *(char **)v21, (uint64_t)a3);
        goto LABEL_26;
      default:
LABEL_29:
        if (v8) {
          BOOL v19 = (v8 & 7) == 4;
        }
        else {
          BOOL v19 = 1;
        }
        if (!v19)
        {
          if (*v6)
          {
            uint64_t v20 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v20 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            int v7 = *(char **)v21;
          }
          uint64_t v18 = sub_1885AC0(v8, v20, v7, a3);
LABEL_26:
          *(void *)uint64_t v21 = v18;
          if (!v18) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
            return *(void *)v21;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v21;
    }
  }
}

char *sub_15D0CEC(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  int v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_10:
  int v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) != 0) {
LABEL_5:
  }
    int v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15D0E28(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_17;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) == 0)
  {
    if ((v1 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  unint64_t v14 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  uint64_t v16 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 8) != 0)
  {
LABEL_14:
    unint64_t v9 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v2 += v18;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15D0F94()
{
  return 1;
}

void *sub_15D0F9C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.AppAttestInfo");
}

uint64_t sub_15D0FAC(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 56));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  sub_1889DE8((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D106C(uint64_t a1)
{
  sub_15D0FAC(a1);

  operator delete();
}

uint64_t sub_15D10A4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)unint64_t v38 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v38, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = (uint64_t **)(a1 + 24);
  while (2)
  {
    unint64_t v9 = (char *)(*(void *)v38 + 1);
    unsigned int v10 = **(unsigned char **)v38;
    if ((char)**(unsigned char **)v38 < 0)
    {
      unsigned int v11 = v10 + (*v9 << 7);
      unsigned int v10 = v11 - 128;
      if (*v9 < 0)
      {
        unint64_t v9 = (char *)sub_188C180(*(uint64_t *)v38, v11 - 128);
        unsigned int v10 = v12;
      }
      else
      {
        unint64_t v9 = (char *)(*(void *)v38 + 2);
      }
    }
    *(void *)unint64_t v38 = v9;
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v13 = *(void *)(a1 + 8);
        unint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
        if (v13) {
          unint64_t v14 = (uint64_t *)*v14;
        }
        uint64_t v15 = (void *)(a1 + 48);
        goto LABEL_34;
      case 2u:
        if (v10 != 16) {
          goto LABEL_40;
        }
        v5 |= 4u;
        uint64_t v16 = v9 + 1;
        uint64_t v17 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        int v18 = *v16;
        uint64_t v17 = v17 + (v18 << 7) - 128;
        if (v18 < 0)
        {
          uint64_t v34 = sub_188C138((uint64_t)v9, v17);
          *(void *)unint64_t v38 = v34;
          *(unsigned char *)(a1 + 64) = v35 != 0;
          if (!v34) {
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v16 = v9 + 2;
LABEL_17:
          *(void *)unint64_t v38 = v16;
          *(unsigned char *)(a1 + 64) = v17 != 0;
        }
        goto LABEL_48;
      case 3u:
        if (v10 != 26) {
          goto LABEL_40;
        }
        BOOL v19 = v9 - 1;
        while (1)
        {
          uint64_t v20 = (char *)(v19 + 1);
          *(void *)unint64_t v38 = v19 + 1;
          uint64_t v21 = *(_DWORD **)(a1 + 40);
          if (v21 && (uint64_t v22 = *(int *)(a1 + 32), (int)v22 < *v21))
          {
            *(_DWORD *)(a1 + 32) = v22 + 1;
            uint64_t v23 = *(std::string **)&v21[2 * v22 + 2];
          }
          else
          {
            if (!*v8) {
              operator new();
            }
            void *v25 = v24;
            v25[1] = sub_3A6EDC;
            void *v24 = 0;
            v24[1] = 0;
            int v24[2] = 0;
            uint64_t v23 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v24);
            uint64_t v20 = *(char **)v38;
          }
          BOOL v19 = sub_188C244(v23, v20, (uint64_t)a3);
          *(void *)unint64_t v38 = v19;
          if (!v19) {
            goto LABEL_57;
          }
          if (*(void *)a3 <= (unint64_t)v19 || *v19 != 26) {
            goto LABEL_48;
          }
        }
      case 4u:
        if (v10 != 34) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v26 = *(void *)(a1 + 8);
        unint64_t v14 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          unint64_t v14 = (uint64_t *)*v14;
        }
        uint64_t v15 = (void *)(a1 + 56);
LABEL_34:
        std::string::size_type v27 = (std::string *)sub_1880F84(v15, v14);
        uint64_t v28 = (void *)sub_188C244(v27, *(char **)v38, (uint64_t)a3);
        goto LABEL_47;
      case 5u:
        if (v10 != 40) {
          goto LABEL_40;
        }
        v5 |= 8u;
        uint64_t v29 = v9 + 1;
        uint64_t v30 = *v9;
        if ((*v9 & 0x80000000) == 0) {
          goto LABEL_39;
        }
        int v31 = *v29;
        uint64_t v30 = v30 + (v31 << 7) - 128;
        if (v31 < 0)
        {
          uint64_t v36 = sub_188C138((uint64_t)v9, v30);
          *(void *)unint64_t v38 = v36;
          *(unsigned char *)(a1 + 65) = v37 != 0;
          if (!v36) {
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v29 = v9 + 2;
LABEL_39:
          *(void *)unint64_t v38 = v29;
          *(unsigned char *)(a1 + 65) = v30 != 0;
        }
        goto LABEL_48;
      default:
LABEL_40:
        if (v10) {
          BOOL v32 = (v10 & 7) == 4;
        }
        else {
          BOOL v32 = 1;
        }
        if (!v32)
        {
          if (*v7)
          {
            uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v33 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            unint64_t v9 = *(char **)v38;
          }
          uint64_t v28 = sub_1885AC0(v10, v33, v9, a3);
LABEL_47:
          *(void *)unint64_t v38 = v28;
          if (!v28) {
            goto LABEL_57;
          }
LABEL_48:
          if (sub_11947B8((uint64_t)a3, (char **)v38, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v9) {
          a3[10].i32[0] = v10 - 1;
        }
        else {
LABEL_57:
        }
          *(void *)unint64_t v38 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v38;
    }
  }
}

unsigned char *sub_15D1454(uint64_t a1, unsigned char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v7 = *(unsigned char *)(a1 + 64);
    unsigned char *v4 = 16;
    v4[1] = v7;
    v4 += 2;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v4 = (unsigned char *)sub_125CE58(a3, 3, *(void *)(*(void *)(a1 + 40) + v9 + 8), v4);
      v9 += 8;
    }
    while (v10 != v9);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v11 = *(unsigned char *)(a1 + 65);
    unsigned char *v4 = 40;
    v4[1] = v11;
    v4 += 2;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return v4;
  }
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v14 + 31) < 0)
  {
    uint64_t v15 = *(void **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    uint64_t v15 = (void *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  if (*a3 - (void)v4 >= (int)v16)
  {
    uint64_t v17 = (int)v16;
    memcpy(v4, v15, (int)v16);
    v4 += v17;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v15, v16, v4);
}

uint64_t sub_15D15FC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  int v7 = *(_DWORD *)(a1 + 16);
  if ((v7 & 0xF) != 0)
  {
    if (v7)
    {
      unint64_t v8 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
      uint64_t v10 = *(void *)(v8 + 8);
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = v9;
      }
      v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v7 & 2) != 0)
    {
      unint64_t v11 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v3 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v7 & 4) != 0) {
      v3 += 2;
    }
    if ((v7 & 8) != 0) {
      v3 += 2;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v3 += v17;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15D1740()
{
  return 1;
}

void *sub_15D1748@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.TdmInfo");
}

uint64_t sub_15D1758(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_15;
    }
  }
  else if (v4)
  {
    goto LABEL_15;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 48));
  }
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 56));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_15:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D184C(uint64_t a1)
{
  sub_15D1758(a1);

  operator delete();
}

uint64_t sub_15D1884(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v22 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v22, a3[11].i32[1])) {
    return *(void *)v22;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    int v7 = (char *)(*(void *)v22 + 1);
    unsigned int v8 = **(unsigned char **)v22;
    if ((char)**(unsigned char **)v22 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        int v7 = (char *)sub_188C180(*(uint64_t *)v22, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        int v7 = (char *)(*(void *)v22 + 2);
      }
    }
    *(void *)uint64_t v22 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 24);
        goto LABEL_29;
      case 2u:
        if (v8 != 18) {
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 32);
        goto LABEL_29;
      case 3u:
        if (v8 != 26) {
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 40);
        goto LABEL_29;
      case 4u:
        if (v8 != 34) {
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v16 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 48);
        goto LABEL_29;
      case 5u:
        if (v8 != 42) {
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 56);
LABEL_29:
        int v18 = (std::string *)sub_1880F84(v13, v12);
        BOOL v19 = (void *)sub_188C244(v18, *(char **)v22, (uint64_t)a3);
        goto LABEL_30;
      default:
LABEL_33:
        if (v8) {
          BOOL v20 = (v8 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20)
        {
          if (*v6)
          {
            uint64_t v21 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v21 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            int v7 = *(char **)v22;
          }
          BOOL v19 = sub_1885AC0(v8, v21, v7, a3);
LABEL_30:
          *(void *)uint64_t v22 = v19;
          if (!v19) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, (char **)v22, a3[11].i32[1])) {
            return *(void *)v22;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v22;
    }
  }
}

char *sub_15D1B18(uint64_t a1, char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_12:
  uint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) != 0) {
LABEL_6:
  }
    uint64_t v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_7:
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15D1C78(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0x1F) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_18;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    unint64_t v14 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v16 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v15;
    }
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  unint64_t v17 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x10) != 0)
  {
LABEL_15:
    unint64_t v9 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_18:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v20 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v20 + 31) < 0) {
      uint64_t v21 = *(void *)(v20 + 16);
    }
    else {
      uint64_t v21 = *(unsigned __int8 *)(v20 + 31);
    }
    v2 += v21;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15D1E2C()
{
  return 1;
}

void *sub_15D1E34@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.TdmFraudNotificationParameters");
}

void *sub_15D1E44(void *a1)
{
  unint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D1EB8(void *a1)
{
  sub_15D1E44(a1);

  operator delete();
}

uint64_t sub_15D1EF0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(_WORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15D1F18(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v31 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v8 = v31 + 1;
    unsigned int v9 = *v31;
    if (*v31 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v31, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v31 + 2;
      }
    }
    int v31 = v8;
    unsigned int v12 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 != 24) {
        goto LABEL_14;
      }
      v5 |= 4u;
      uint64_t v16 = v8 + 1;
      uint64_t v17 = *v8;
      if ((*v8 & 0x80000000) == 0) {
        goto LABEL_26;
      }
      int v18 = *v16;
      uint64_t v17 = v17 + (v18 << 7) - 128;
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t v16 = v8 + 2;
LABEL_26:
        int v31 = v16;
        *(unsigned char *)(a1 + 33) = v17 != 0;
        goto LABEL_36;
      }
      uint64_t v25 = (char *)sub_188C138((uint64_t)v8, v17);
      int v31 = v25;
      *(unsigned char *)(a1 + 33) = v26 != 0;
      if (!v25) {
        goto LABEL_47;
      }
      goto LABEL_36;
    }
    if (v12 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_14;
    }
    v5 |= 1u;
    uint64_t v19 = v8 + 1;
    uint64_t v20 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    int v21 = *v19;
    uint64_t v20 = v20 + (v21 << 7) - 128;
    if ((v21 & 0x80000000) == 0)
    {
      uint64_t v19 = v8 + 2;
LABEL_31:
      int v31 = v19;
      *(void *)(a1 + 24) = v20;
      goto LABEL_36;
    }
    std::string::size_type v27 = (char *)sub_188C138((uint64_t)v8, v20);
    int v31 = v27;
    *(void *)(a1 + 24) = v28;
    if (!v27) {
      goto LABEL_47;
    }
LABEL_36:
    if (sub_11947B8((uint64_t)a3, &v31, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v12 == 1 && v9 == 8)
  {
    v5 |= 2u;
    uint64_t v22 = v8 + 1;
    uint64_t v23 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    int v24 = *v22;
    uint64_t v23 = v23 + (v24 << 7) - 128;
    if ((v24 & 0x80000000) == 0)
    {
      uint64_t v22 = v8 + 2;
LABEL_35:
      int v31 = v22;
      *(unsigned char *)(a1 + 32) = v23 != 0;
      goto LABEL_36;
    }
    uint64_t v29 = (char *)sub_188C138((uint64_t)v8, v23);
    int v31 = v29;
    *(unsigned char *)(a1 + 32) = v30 != 0;
    if (!v29) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
LABEL_14:
  if (v9) {
    BOOL v14 = (v9 & 7) == 4;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*v7)
    {
      uint64_t v15 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v15 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = v31;
    }
    int v31 = (char *)sub_1885AC0(v9, v15, v8, a3);
    if (!v31) {
      goto LABEL_47;
    }
    goto LABEL_36;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_47:
  int v31 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v31;
}

unsigned char *sub_15D218C(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    char v7 = *(unsigned char *)(a1 + 32);
    unsigned char *v4 = 8;
    v4[1] = v7;
    v4 += 2;
  }
  if (v6)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v8 = *(void *)(a1 + 24);
    unsigned char *v4 = 16;
    v4[1] = v8;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unint64_t v9 = v8 >> 7;
      v4[2] = v8 >> 7;
      v4 += 3;
      if (v8 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v10 = v9 >> 14;
          v9 >>= 7;
          *v4++ = v9;
        }
        while (v10);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v11 = *(unsigned char *)(a1 + 33);
    unsigned char *v4 = 24;
    v4[1] = v11;
    v4 += 2;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return v4;
  }
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v14 + 31) < 0)
  {
    uint64_t v15 = *(void **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    uint64_t v15 = (void *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v16)
  {
    uint64_t v17 = (int)v16;
    memcpy(v4, v15, (int)v16);
    v4 += v17;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v15, v16, v4);
}

unint64_t sub_15D2324(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) != 0)
  {
    if (v1) {
      unint64_t v2 = ((9 * (__clz(*(void *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
    }
    else {
      unint64_t v2 = 0;
    }
    if ((v1 & 2) != 0) {
      v2 += 2;
    }
    if ((v1 & 4) != 0) {
      unint64_t v3 = v2 + 2;
    }
    else {
      unint64_t v3 = v2;
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v6 + 31) < 0) {
      uint64_t v7 = *(void *)(v6 + 16);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(v6 + 31);
    }
    v3 += v7;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_15D23B4(std::string *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if ((v2 & 7) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    result[1].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  result[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 24);
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v2 & 4) != 0) {
LABEL_5:
  }
    result[1].__r_.__value_.__s.__data_[9] = *(unsigned char *)(a2 + 33);
LABEL_6:
  LODWORD(result->__r_.__value_.__r.__words[2]) |= v2;
LABEL_7:
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v3 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15D2418()
{
  return 1;
}

void *sub_15D2420@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.TdmUserMapsStatus");
}

uint64_t sub_15D2430(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_18;
    }
  }
  else if (v4)
  {
    goto LABEL_18;
  }
  int v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 48));
  }
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 56));
  }
  if ((uint64_t (***)())a1 != &off_253FD90)
  {
    unint64_t v6 = *(void **)(a1 + 64);
    if (v6)
    {
      sub_15D1E44(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_18:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D2554(uint64_t a1)
{
  sub_15D2430(a1);

  operator delete();
}

uint64_t sub_15D258C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x3F) == 0) {
    goto LABEL_9;
  }
  if (v2)
  {
    unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_17;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_21:
    unint64_t v7 = *(void *)(result + 40) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)unint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_25;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_25;
      }
    }
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_17:
  unint64_t v6 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(unsigned char **)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_21;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v6 = 0;
    *(unsigned char *)(v6 + 23) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_21;
    }
  }
LABEL_5:
  if ((v2 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_25:
  unint64_t v8 = *(void *)(result + 48) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v8 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v8 = 0;
    *(unsigned char *)(v8 + 23) = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_29;
    }
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  **(unsigned char **)unint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  if ((v2 & 0x10) == 0) {
    goto LABEL_7;
  }
LABEL_29:
  unint64_t v9 = *(void *)(result + 56) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v9 = 0;
    *(unsigned char *)(v9 + 23) = 0;
    if ((v2 & 0x20) == 0) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t result = sub_15D1EF0(*(void *)(result + 64));
    goto LABEL_9;
  }
  **(unsigned char **)unint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  if ((v2 & 0x20) != 0) {
    goto LABEL_8;
  }
LABEL_9:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15D26F8(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v24 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
    return *(void *)v24;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    unint64_t v7 = (unsigned __int8 *)(*(void *)v24 + 1);
    unsigned int v8 = **(unsigned char **)v24;
    if ((char)**(unsigned char **)v24 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        unint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v24, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = (unsigned __int8 *)(*(void *)v24 + 2);
      }
    }
    *(void *)int v24 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_39;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 24);
        goto LABEL_29;
      case 2u:
        if (v8 != 18) {
          goto LABEL_39;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 32);
        goto LABEL_29;
      case 3u:
        if (v8 != 26) {
          goto LABEL_39;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 40);
        goto LABEL_29;
      case 4u:
        if (v8 != 34) {
          goto LABEL_39;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v16 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 48);
        goto LABEL_29;
      case 5u:
        if (v8 != 42) {
          goto LABEL_39;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 56);
LABEL_29:
        int v18 = (std::string *)sub_1880F84(v13, v12);
        uint64_t v19 = (void *)sub_188C244(v18, *(char **)v24, (uint64_t)a3);
        goto LABEL_30;
      case 6u:
        if (v8 != 50) {
          goto LABEL_39;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v20 = *(void *)(a1 + 64);
        if (!v20)
        {
          int v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            int v21 = (void *)*v21;
          }
          uint64_t v20 = sub_15F87A8((uint64_t)v21);
          *(void *)(a1 + 64) = v20;
          unint64_t v7 = *(unsigned __int8 **)v24;
        }
        uint64_t v19 = sub_15D29E0(a3, v20, v7);
        goto LABEL_30;
      default:
LABEL_39:
        if (v8) {
          BOOL v22 = (v8 & 7) == 4;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22)
        {
          if (*v6)
          {
            uint64_t v23 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v23 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            unint64_t v7 = *(unsigned __int8 **)v24;
          }
          uint64_t v19 = sub_1885AC0(v8, v23, (char *)v7, a3);
LABEL_30:
          *(void *)int v24 = v19;
          if (!v19) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
            return *(void *)v24;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v24;
    }
  }
}

char *sub_15D29E0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D1F18(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15D2A70(uint64_t a1, unsigned char *__dst, void *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    char v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  char v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  char v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  char v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
LABEL_12:
  char v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x20) == 0) {
    goto LABEL_19;
  }
LABEL_13:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  unsigned char *v4 = 50;
  unsigned int v8 = *(_DWORD *)(v7 + 20);
  v4[1] = v8;
  if (v8 > 0x7F) {
    unsigned int v9 = sub_188A9CC(v8, v4 + 1);
  }
  else {
    unsigned int v9 = v4 + 2;
  }
  char v4 = sub_15D218C(v7, (unint64_t)v9, a3);
LABEL_19:
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    uint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    uint64_t v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if (*a3 - (void)v4 >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15D2C38(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x3F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_17;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v2 & 4) != 0)
  {
    unint64_t v13 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
    uint64_t v15 = *(void *)(v13 + 8);
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = v14;
    }
    v3 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_14:
      if ((v2 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_14;
  }
  unint64_t v16 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  uint64_t v18 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v17;
  }
  v3 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_25:
  unint64_t v19 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
  uint64_t v21 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    uint64_t v21 = v20;
  }
  v3 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) != 0)
  {
LABEL_16:
    unint64_t v10 = sub_15D2324(*(void *)(a1 + 64));
    v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    unint64_t v22 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v22 + 31) < 0) {
      uint64_t v23 = *(void *)(v22 + 16);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v22 + 31);
    }
    v3 += v23;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_15D2E3C(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x3F) == 0) {
    goto LABEL_32;
  }
  if (v4)
  {
    uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    uint64_t v6 = (std::string **)&result[1];
    std::string::size_type size = v3->__r_.__value_.__l.__size_;
    uint64_t v8 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
    if (size) {
      uint64_t v8 = (uint64_t *)*v8;
    }
    uint64_t result = sub_1881DF4(v6, v5, v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t v9 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
  std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
  uint64_t v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10) {
    uint64_t v11 = (uint64_t *)*v11;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__l.__size_, v9, v11);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_15:
  unint64_t v12 = (long long *)(*(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
  std::string::size_type v13 = v3->__r_.__value_.__l.__size_;
  uint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v13) {
    uint64_t v14 = (uint64_t *)*v14;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__r.__words[2], v12, v14);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v15 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
  std::string::size_type v16 = v3->__r_.__value_.__l.__size_;
  uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16) {
    uint64_t v17 = (uint64_t *)*v17;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[2], v15, v17);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v18 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10u;
  std::string::size_type v19 = v3->__r_.__value_.__l.__size_;
  uint64_t v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
  if (v19) {
    uint64_t v20 = (uint64_t *)*v20;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[2].__r_.__value_.__l.__size_, v18, v20);
  if ((v4 & 0x20) != 0)
  {
LABEL_24:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x20u;
    uint64_t v21 = (std::string *)v3[2].__r_.__value_.__r.__words[2];
    if (!v21)
    {
      std::string::size_type v22 = v3->__r_.__value_.__l.__size_;
      uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        uint64_t v23 = (void *)*v23;
      }
      uint64_t v21 = (std::string *)sub_15F87A8((uint64_t)v23);
      v3[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v21;
    }
    if (*(void *)(a2 + 64)) {
      int v24 = *(void *(****)(void *))(a2 + 64);
    }
    else {
      int v24 = &off_253FD68;
    }
    uint64_t result = sub_15D23B4(v21, (uint64_t)v24);
  }
LABEL_32:
  uint64_t v25 = *(void *)(a2 + 8);
  if (v25)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v25 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15D3010()
{
  return 1;
}

void *sub_15D3018@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.TdmFraudRequestInfo");
}

uint64_t sub_15D3028(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_253FDD8)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      sub_15D3F60(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D30E0(uint64_t a1)
{
  sub_15D3028(a1);

  operator delete();
}

uint64_t sub_15D3118(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16)) {
    uint64_t result = sub_15D3174(*(void *)(result + 24));
  }
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  *(_DWORD *)(v2 + 8) = 0;
  if (v3)
  {
    return sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

uint64_t sub_15D3174(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_WORD *)(result + 32) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15D31F4(uint64_t a1, char *a2, int32x2_t *a3)
{
  std::string::size_type v16 = a2;
  if (sub_11947B8((uint64_t)a3, &v16, a3[11].i32[1])) {
    return v16;
  }
  char v5 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v6 = v16 + 1;
    unsigned int v7 = *v16;
    if (*v16 < 0)
    {
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if (*v6 < 0)
      {
        uint64_t v6 = (char *)sub_188C180((uint64_t)v16, v8 - 128);
        unsigned int v7 = v9;
      }
      else
      {
        uint64_t v6 = v16 + 2;
      }
    }
    std::string::size_type v16 = v6;
    if (v7 != 10) {
      break;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13)
    {
      uint64_t v14 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v5) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v13 = sub_15F89B0((uint64_t)v14);
      *(void *)(a1 + 24) = v13;
      uint64_t v6 = v16;
    }
    unint64_t v12 = (char *)sub_15D334C(a3, v13, (unsigned __int8 *)v6);
LABEL_20:
    std::string::size_type v16 = v12;
    if (!v12) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v16, a3[11].i32[1])) {
      return v16;
    }
  }
  if (v7) {
    BOOL v10 = (v7 & 7) == 4;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*v5)
    {
      uint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v6 = v16;
    }
    unint64_t v12 = (char *)sub_1885AC0(v7, v11, v6, a3);
    goto LABEL_20;
  }
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return v16;
  }
  return 0;
}

uint64_t sub_15D334C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D4050(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15D33DC(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  int v4 = (unsigned char *)__dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*a3 <= __dst) {
      int v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v6 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v7 = *(_DWORD *)(v6 + 20);
    v4[1] = v7;
    if (v7 > 0x7F) {
      unsigned int v8 = sub_188A9CC(v7, v4 + 1);
    }
    else {
      unsigned int v8 = v4 + 2;
    }
    int v4 = sub_15D4318(v6, v8, a3);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    unint64_t v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    unint64_t v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    v4 += v14;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15D34EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = sub_15D4484(*(void *)(a1 + 24));
    uint64_t result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31);
    }
    result += v6;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

std::string *sub_15D3574(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v4 = *(uint64_t (****)(uint64_t))(a2 + 24);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
    if (!data)
    {
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      unsigned int v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        unsigned int v7 = (void *)*v7;
      }
      std::string::pointer data = (std::string *)sub_15F89B0((uint64_t)v7);
      v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      uint64_t v4 = *(uint64_t (****)(uint64_t))(a2 + 24);
    }
    if (v4) {
      unsigned int v8 = v4;
    }
    else {
      unsigned int v8 = &off_253FE30;
    }
    uint64_t result = sub_15D361C(data, (uint64_t)v8);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15D361C(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      unsigned int v7 = (std::string **)&result[1];
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v9 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      uint64_t result = sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_18;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    BOOL v10 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    std::string::size_type v11 = v3->__r_.__value_.__l.__size_;
    unint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      unint64_t v12 = (uint64_t *)*v12;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__l.__size_, v10, v12);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0)
      {
LABEL_7:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
        goto LABEL_8;
      }
LABEL_6:
      v3[1].__r_.__value_.__s.__data_[17] = *(unsigned char *)(a2 + 41);
      goto LABEL_7;
    }
LABEL_18:
    v3[1].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 40);
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15D3724()
{
  return 1;
}

void *sub_15D372C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackLogEventDetails");
}

uint64_t sub_15D373C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
    goto LABEL_12;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if ((uint64_t (***)())a1 != &off_253FDF8)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      sub_15C27A4(v6);
      operator delete();
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      sub_15D3028(v7);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_12:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D3828(uint64_t a1)
{
  sub_15D373C(a1);

  operator delete();
}

uint64_t sub_15D3860(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)std::string::size_type v27 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
    return *(void *)v27;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v27 + 1);
    unsigned int v8 = **(unsigned char **)v27;
    if ((char)**(unsigned char **)v27 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v27, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v27 + 2);
      }
    }
    *(void *)std::string::size_type v27 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        unint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          unint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (std::string *)sub_1880F84((void *)(a1 + 24), v12);
        uint64_t v14 = (void *)sub_188C244(v13, *(char **)v27, (uint64_t)a3);
        goto LABEL_39;
      case 2u:
        if (v8 != 18) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 32);
        if (!v15)
        {
          std::string::size_type v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            std::string::size_type v16 = (void *)*v16;
          }
          uint64_t v15 = sub_15C6120((uint64_t)v16);
          *(void *)(a1 + 32) = v15;
          uint64_t v7 = *(unsigned __int8 **)v27;
        }
        uint64_t v14 = sub_12FECD8(a3, v15, v7);
        goto LABEL_39;
      case 3u:
        if (v8 != 24) {
          goto LABEL_32;
        }
        uint64_t v17 = (char *)(v7 + 1);
        unint64_t v18 = *v7;
        if (((char)*v7 & 0x80000000) == 0) {
          goto LABEL_23;
        }
        int v19 = *v17;
        int v20 = v18 + (v19 << 7);
        unint64_t v18 = (v20 - 128);
        if (v19 < 0)
        {
          *(void *)std::string::size_type v27 = sub_188C138((uint64_t)v7, (v20 - 128));
          if (!*(void *)v27) {
            return 0;
          }
          unint64_t v18 = v25;
        }
        else
        {
          uint64_t v17 = (char *)(v7 + 2);
LABEL_23:
          *(void *)std::string::size_type v27 = v17;
        }
        if (v18 > 1)
        {
          if (*v6) {
            uint64_t v26 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v26 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(3, v18, v26);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 8u;
          *(_DWORD *)(a1 + 48) = v18;
        }
        goto LABEL_40;
      case 4u:
        if (v8 != 34) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v21 = *(void **)(a1 + 40);
        if (!v21)
        {
          std::string::size_type v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            std::string::size_type v22 = (void *)*v22;
          }
          uint64_t v21 = sub_15F88B0((uint64_t)v22);
          *(void *)(a1 + 40) = v21;
          uint64_t v7 = *(unsigned __int8 **)v27;
        }
        uint64_t v14 = sub_15D3B40(a3, (uint64_t)v21, v7);
        goto LABEL_39;
      default:
LABEL_32:
        if (v8) {
          BOOL v23 = (v8 & 7) == 4;
        }
        else {
          BOOL v23 = 1;
        }
        if (!v23)
        {
          if (*v6)
          {
            int v24 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            int v24 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = *(unsigned __int8 **)v27;
          }
          uint64_t v14 = sub_1885AC0(v8, v24, (char *)v7, a3);
LABEL_39:
          *(void *)std::string::size_type v27 = v14;
          if (!v14) {
            return 0;
          }
LABEL_40:
          if (sub_11947B8((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
            return *(void *)v27;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v27;
    }
  }
}

char *sub_15D3B40(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D31F4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15D3BD0(uint64_t a1, unsigned char *__dst, unint64_t *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  unsigned char *v4 = 18;
  unsigned int v8 = *(_DWORD *)(v7 + 20);
  v4[1] = v8;
  if (v8 > 0x7F) {
    unsigned int v9 = sub_188A9CC(v8, v4 + 1);
  }
  else {
    unsigned int v9 = v4 + 2;
  }
  int v4 = sub_15C2A64(v7, (unint64_t)v9, a3);
  if ((v6 & 8) != 0)
  {
LABEL_12:
    if (*a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 48);
    unsigned char *v4 = 24;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_18:
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v13 = *(void *)(a1 + 40);
    unsigned char *v4 = 34;
    unsigned int v14 = *(_DWORD *)(v13 + 20);
    v4[1] = v14;
    if (v14 > 0x7F) {
      uint64_t v15 = sub_188A9CC(v14, v4 + 1);
    }
    else {
      uint64_t v15 = v4 + 2;
    }
    int v4 = sub_15D33DC(v13, (unint64_t)v15, a3);
  }
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    int v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    int v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15D3DF8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0xF) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_18;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v7 = sub_15C2C78(*(void *)(a1 + 32));
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_10;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_10:
  if ((v2 & 4) != 0)
  {
    uint64_t v8 = sub_15D34EC(*(void *)(a1 + 40));
    v3 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  int v9 = *(_DWORD *)(a1 + 48);
  if (v9 < 0) {
    uint64_t v10 = 11;
  }
  else {
    uint64_t v10 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v10;
LABEL_18:
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v13 + 31) < 0) {
      uint64_t v14 = *(void *)(v13 + 16);
    }
    else {
      uint64_t v14 = *(unsigned __int8 *)(v13 + 31);
    }
    v3 += v14;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void *sub_15D3F50@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackLogEventParameters");
}

uint64_t sub_15D3F60(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D4018(uint64_t a1)
{
  sub_15D3F60(a1);

  operator delete();
}

uint64_t sub_15D4050(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v30 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v30, a3[11].i32[1])) {
    goto LABEL_2;
  }
  unint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = (char *)(*(void *)v30 + 1);
    unsigned int v9 = **(unsigned char **)v30;
    if ((char)**(unsigned char **)v30 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v30, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (char *)(*(void *)v30 + 2);
      }
    }
    *(void *)uint64_t v30 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        uint64_t v14 = (void *)(a1 + 24);
        goto LABEL_17;
      case 2u:
        if (v9 != 18) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        uint64_t v14 = (void *)(a1 + 32);
LABEL_17:
        uint64_t v16 = (std::string *)sub_1880F84(v14, v13);
        uint64_t v17 = (void *)sub_188C244(v16, *(char **)v30, (uint64_t)a3);
        goto LABEL_35;
      case 3u:
        if (v9 != 24) {
          goto LABEL_28;
        }
        v5 |= 4u;
        unint64_t v18 = v8 + 1;
        uint64_t v19 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        int v20 = *v18;
        uint64_t v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          uint64_t v26 = sub_188C138((uint64_t)v8, v19);
          *(void *)uint64_t v30 = v26;
          *(unsigned char *)(a1 + 40) = v27 != 0;
          if (!v26) {
            goto LABEL_45;
          }
        }
        else
        {
          unint64_t v18 = v8 + 2;
LABEL_22:
          *(void *)uint64_t v30 = v18;
          *(unsigned char *)(a1 + 40) = v19 != 0;
        }
        goto LABEL_36;
      case 4u:
        if (v9 != 32) {
          goto LABEL_28;
        }
        v5 |= 8u;
        uint64_t v21 = v8 + 1;
        uint64_t v22 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_27;
        }
        int v23 = *v21;
        uint64_t v22 = v22 + (v23 << 7) - 128;
        if (v23 < 0)
        {
          uint64_t v28 = sub_188C138((uint64_t)v8, v22);
          *(void *)uint64_t v30 = v28;
          *(unsigned char *)(a1 + 41) = v29 != 0;
          if (!v28) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v21 = v8 + 2;
LABEL_27:
          *(void *)uint64_t v30 = v21;
          *(unsigned char *)(a1 + 41) = v22 != 0;
        }
        goto LABEL_36;
      default:
LABEL_28:
        if (v9) {
          BOOL v24 = (v9 & 7) == 4;
        }
        else {
          BOOL v24 = 1;
        }
        if (!v24)
        {
          if (*v7)
          {
            unint64_t v25 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            unint64_t v25 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = *(char **)v30;
          }
          uint64_t v17 = sub_1885AC0(v9, v25, v8, a3);
LABEL_35:
          *(void *)uint64_t v30 = v17;
          if (!v17) {
            goto LABEL_45;
          }
LABEL_36:
          if (sub_11947B8((uint64_t)a3, (char **)v30, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_45:
        }
          *(void *)uint64_t v30 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v30;
    }
  }
}

unsigned char *sub_15D4318(uint64_t a1, unsigned char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
LABEL_8:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v7 = *(unsigned char *)(a1 + 40);
  unsigned char *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 8) != 0)
  {
LABEL_11:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v8 = *(unsigned char *)(a1 + 41);
    unsigned char *v4 = 32;
    v4[1] = v8;
    v4 += 2;
  }
LABEL_14:
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    uint64_t v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    uint64_t v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if (*a3 - (void)v4 >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    v4 += v14;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15D4484(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_17;
  }
  if (v1)
  {
    unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v6 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v5;
    }
    uint64_t v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    uint64_t v3 = v2 + 2;
  }
  else {
    uint64_t v3 = v2;
  }
LABEL_17:
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v3 += v13;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15D4578()
{
  return 1;
}

void *sub_15D4580@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.RapNotificationLogEvent");
}

uint64_t sub_15D4590(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_253FE60)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      sub_15D5604(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D4648(uint64_t a1)
{
  sub_15D4590(a1);

  operator delete();
}

uint64_t sub_15D4680(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if (v2) {
    uint64_t result = sub_15D46EC(*(void *)(result + 24));
  }
  if ((v2 & 0x1E) != 0)
  {
    *(_WORD *)(v1 + 40) = 0;
    *(void *)(v1 + 32) = 0;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15D46EC(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x7F) == 0) {
    goto LABEL_19;
  }
  if (v2)
  {
    uint64_t result = sub_15D57EC(*(void *)(result + 24));
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = sub_15D5478(*(void *)(v1 + 32));
  if ((v2 & 4) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = sub_15D54F4(*(void *)(v1 + 40));
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = (uint64_t)sub_15D58EC(*(std::string **)(v1 + 48));
  if ((v2 & 0x10) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v3 = *(void *)(v1 + 64);
    char v4 = *(unsigned char *)(v3 + 8);
    uint64_t result = v3 + 8;
    if (v4) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t result = sub_15D5588(*(void *)(v1 + 56));
  if ((v2 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_16:
  if ((v2 & 0x40) != 0)
  {
    uint64_t v5 = *(void *)(v1 + 72);
    char v6 = *(unsigned char *)(v5 + 8);
    uint64_t result = v5 + 8;
    if (v6) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
  }
LABEL_19:
  char v8 = *(unsigned char *)(v1 + 8);
  uint64_t v7 = v1 + 8;
  *(_DWORD *)(v7 + 8) = 0;
  if (v8)
  {
    return sub_188B4AC((uint64_t *)v7);
  }
  return result;
}

char *sub_15D47C0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v39 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v39, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    char v8 = v39 + 1;
    unsigned int v9 = *v39;
    if (*v39 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        char v8 = (char *)sub_188C180((uint64_t)v39, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        char v8 = v39 + 2;
      }
    }
    uint64_t v39 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_39;
        }
        unint64_t v12 = v8 + 1;
        unint64_t v13 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v14 = *v12;
        int v15 = v13 + (v14 << 7);
        unint64_t v13 = (v15 - 128);
        if (v14 < 0)
        {
          uint64_t v39 = (char *)sub_188C138((uint64_t)v8, (v15 - 128));
          if (!v39) {
            goto LABEL_69;
          }
          unint64_t v13 = v31;
        }
        else
        {
          unint64_t v12 = v8 + 2;
LABEL_13:
          uint64_t v39 = v12;
        }
        if (sub_13E78E4(v13))
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          *(_DWORD *)(a1 + 32) = v13;
          goto LABEL_47;
        }
        if (*v7) {
          uint64_t v37 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v37 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v38 = 1;
        goto LABEL_63;
      case 2u:
        if (v9 != 16) {
          goto LABEL_39;
        }
        uint64_t v16 = v8 + 1;
        unint64_t v13 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        int v17 = *v16;
        int v18 = v13 + (v17 << 7);
        unint64_t v13 = (v18 - 128);
        if (v17 < 0)
        {
          uint64_t v39 = (char *)sub_188C138((uint64_t)v8, (v18 - 128));
          if (!v39) {
            goto LABEL_69;
          }
          unint64_t v13 = v32;
        }
        else
        {
          uint64_t v16 = v8 + 2;
LABEL_20:
          uint64_t v39 = v16;
        }
        if (v13 > 7)
        {
          if (*v7) {
            uint64_t v37 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v37 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          int v38 = 2;
LABEL_63:
          sub_188C020(v38, v13, v37);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 4u;
          *(_DWORD *)(a1 + 36) = v13;
        }
        goto LABEL_47;
      case 3u:
        if (v9 != 26) {
          goto LABEL_39;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v19 = *(void *)(a1 + 24);
        if (!v19)
        {
          int v20 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            int v20 = (void *)*v20;
          }
          sub_15F8AB8((uint64_t)v20);
          uint64_t v19 = v21;
          *(void *)(a1 + 24) = v21;
          char v8 = v39;
        }
        uint64_t v22 = sub_15D4B90(a3, v19, (unsigned __int8 *)v8);
        goto LABEL_46;
      case 4u:
        if (v9 != 32) {
          goto LABEL_39;
        }
        v5 |= 8u;
        int v23 = v8 + 1;
        uint64_t v24 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_33;
        }
        int v25 = *v23;
        uint64_t v24 = v24 + (v25 << 7) - 128;
        if (v25 < 0)
        {
          uint64_t v33 = (char *)sub_188C138((uint64_t)v8, v24);
          uint64_t v39 = v33;
          *(unsigned char *)(a1 + 40) = v34 != 0;
          if (!v33) {
            goto LABEL_69;
          }
        }
        else
        {
          int v23 = v8 + 2;
LABEL_33:
          uint64_t v39 = v23;
          *(unsigned char *)(a1 + 40) = v24 != 0;
        }
        goto LABEL_47;
      case 5u:
        if (v9 != 40) {
          goto LABEL_39;
        }
        v5 |= 0x10u;
        uint64_t v26 = v8 + 1;
        uint64_t v27 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        int v28 = *v26;
        uint64_t v27 = v27 + (v28 << 7) - 128;
        if (v28 < 0)
        {
          uint64_t v35 = (char *)sub_188C138((uint64_t)v8, v27);
          uint64_t v39 = v35;
          *(unsigned char *)(a1 + 41) = v36 != 0;
          if (!v35) {
            goto LABEL_69;
          }
        }
        else
        {
          uint64_t v26 = v8 + 2;
LABEL_38:
          uint64_t v39 = v26;
          *(unsigned char *)(a1 + 41) = v27 != 0;
        }
        goto LABEL_47;
      default:
LABEL_39:
        if (v9) {
          BOOL v29 = (v9 & 7) == 4;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29)
        {
          if (*v7)
          {
            uint64_t v30 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            char v8 = v39;
          }
          uint64_t v22 = (char *)sub_1885AC0(v9, v30, v8, a3);
LABEL_46:
          uint64_t v39 = v22;
          if (!v22) {
            goto LABEL_69;
          }
LABEL_47:
          if (sub_11947B8((uint64_t)a3, &v39, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_69:
        }
          uint64_t v39 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v39;
    }
  }
}

char *sub_15D4B90(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D5988(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15D4C20(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 32);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 36);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v13 = *(void *)(a1 + 24);
    unsigned char *v4 = 26;
    unsigned int v14 = *(_DWORD *)(v13 + 20);
    v4[1] = v14;
    if (v14 > 0x7F) {
      int v15 = sub_188A9CC(v14, v4 + 1);
    }
    else {
      int v15 = v4 + 2;
    }
    char v4 = sub_15D6104(v13, (unint64_t)v15, a3);
    if ((v6 & 8) == 0)
    {
LABEL_17:
      if ((v6 & 0x10) == 0) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }
  }
  else if ((v6 & 8) == 0)
  {
    goto LABEL_17;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v16 = *(unsigned char *)(a1 + 40);
  unsigned char *v4 = 32;
  v4[1] = v16;
  v4 += 2;
  if ((v6 & 0x10) != 0)
  {
LABEL_28:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v17 = *(unsigned char *)(a1 + 41);
    unsigned char *v4 = 40;
    v4[1] = v17;
    v4 += 2;
  }
LABEL_31:
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v4;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v4, v21, (int)v22);
    v4 += v23;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v21, v22, v4);
}

uint64_t sub_15D4EB0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x1F) == 0)
  {
    uint64_t result = 0;
    goto LABEL_21;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_7:
    int v6 = *(_DWORD *)(a1 + 32);
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v3 += v7;
    goto LABEL_11;
  }
  uint64_t v5 = sub_15D6494(*(void *)(a1 + 24));
  uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_11:
  if ((v2 & 4) != 0)
  {
    int v8 = *(_DWORD *)(a1 + 36);
    if (v8 < 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v3 += v9;
  }
  if ((v2 & 8) != 0) {
    v3 += 2;
  }
  if ((v2 & 0x10) != 0) {
    uint64_t result = v3 + 2;
  }
  else {
    uint64_t result = v3;
  }
LABEL_21:
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_15D4FCC(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x1F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          int v8 = (void *)*v8;
        }
        sub_15F8AB8((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v9 = &off_253FE90;
      }
      sub_15D50D4(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_22;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
LABEL_22:
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0)
      {
LABEL_8:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_9;
      }
LABEL_7:
      *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
      goto LABEL_8;
    }
LABEL_23:
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15D50D4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x7F) == 0) {
    goto LABEL_66;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v5 = *(std::string **)(a1 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
      sub_15F9004((uint64_t)v7);
      *(void *)(a1 + 24) = v5;
    }
    if (*(void *)(a2 + 24)) {
      int v8 = *(uint64_t (****)())(a2 + 24);
    }
    else {
      int v8 = &off_2540018;
    }
    sub_15D66C0(v5, (uint64_t)v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_4;
  }
  *(_DWORD *)(a1 + 16) |= 2u;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      unint64_t v11 = (void *)*v11;
    }
    uint64_t v9 = sub_1605DD0((uint64_t)v11);
    *(void *)(a1 + 32) = v9;
  }
  if (*(void *)(a2 + 32)) {
    uint64_t v12 = *(void *(****)(void *))(a2 + 32);
  }
  else {
    uint64_t v12 = &off_2540C08;
  }
  sub_15D6914(v9, (uint64_t)v12);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_25:
  *(_DWORD *)(a1 + 16) |= 4u;
  uint64_t v13 = *(void **)(a1 + 40);
  if (!v13)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    int v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      int v15 = (void *)*v15;
    }
    uint64_t v13 = sub_16068F4((uint64_t)v15);
    *(void *)(a1 + 40) = v13;
  }
  if (*(void *)(a2 + 40)) {
    char v16 = *(void *(****)(void *))(a2 + 40);
  }
  else {
    char v16 = &off_2540F70;
  }
  sub_15D69E4((uint64_t)v13, (uint64_t)v16);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_41:
    *(_DWORD *)(a1 + 16) |= 0x10u;
    uint64_t v21 = *(std::string **)(a1 + 56);
    if (!v21)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        uint64_t v23 = (void *)*v23;
      }
      uint64_t v21 = (std::string *)sub_160E718((uint64_t)v23);
      *(void *)(a1 + 56) = v21;
    }
    if (*(void *)(a2 + 56)) {
      uint64_t v24 = *(void *(****)(void *))(a2 + 56);
    }
    else {
      uint64_t v24 = &off_2541150;
    }
    sub_15D6BB4(v21, (uint64_t)v24);
    if ((v4 & 0x20) == 0) {
      goto LABEL_57;
    }
    goto LABEL_49;
  }
LABEL_33:
  *(_DWORD *)(a1 + 16) |= 8u;
  char v17 = *(std::string **)(a1 + 48);
  if (!v17)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    char v17 = (std::string *)sub_15F8D58((uint64_t)v19);
    *(void *)(a1 + 48) = v17;
  }
  if (*(void *)(a2 + 48)) {
    unint64_t v20 = *(void *(****)(void *))(a2 + 48);
  }
  else {
    unint64_t v20 = &off_253FF98;
  }
  sub_15D6AE4(v17, (uint64_t)v20);
  if ((v4 & 0x10) != 0) {
    goto LABEL_41;
  }
LABEL_7:
  if ((v4 & 0x20) != 0)
  {
LABEL_49:
    *(_DWORD *)(a1 + 16) |= 0x20u;
    uint64_t v25 = *(void *)(a1 + 64);
    if (!v25)
    {
      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        uint64_t v27 = (void *)*v27;
      }
      uint64_t v25 = sub_15F8B38((uint64_t)v27);
      *(void *)(a1 + 64) = v25;
    }
    int v28 = *(void *(****)(void *))(a2 + 64);
    if (!v28) {
      int v28 = &off_253FEE0;
    }
    unint64_t v29 = (unint64_t)v28[1];
    if (v29) {
      sub_188B4F8((uint64_t *)(v25 + 8), (v29 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
  }
LABEL_57:
  if ((v4 & 0x40) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 0x40u;
    uint64_t v30 = *(void *)(a1 + 72);
    if (!v30)
    {
      uint64_t v31 = *(void *)(a1 + 8);
      unint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        unint64_t v32 = (void *)*v32;
      }
      uint64_t v30 = sub_15F8BB0((uint64_t)v32);
      *(void *)(a1 + 72) = v30;
    }
    uint64_t v33 = *(void *(****)(void *))(a2 + 72);
    if (!v33) {
      uint64_t v33 = &off_253FEF8;
    }
    unint64_t v34 = (unint64_t)v33[1];
    if (v34) {
      sub_188B4F8((uint64_t *)(v30 + 8), (v34 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
  }
LABEL_66:
  uint64_t v35 = *(void *)(a2 + 8);
  if (v35)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v35 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15D5394(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_15D53C0(*(void *)(a1 + 24));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15D53C0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(unsigned int *)(v3 + 24);
    while ((int)v4 >= 1)
    {
      uint64_t v5 = v4 - 1;
      char v6 = sub_15FBEA0(*(void *)(*(void *)(v3 + 32) + 8 * v4) + 24);
      uint64_t v4 = v5;
      if ((v6 & 1) == 0) {
        return 0;
      }
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 4) == 0) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(unsigned int *)(v8 + 32);
  do
  {
    BOOL v7 = (int)v9 < 1;
    if ((int)v9 < 1) {
      break;
    }
    uint64_t v10 = v9 - 1;
    char v11 = sub_15FBEA0(*(void *)(*(void *)(v8 + 40) + 8 * v9) + 24);
    uint64_t v9 = v10;
  }
  while ((v11 & 1) != 0);
  return v7;
}

void *sub_15D5468@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackResponse");
}

uint64_t sub_15D5478(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15FB668(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = (uint64_t *)(v1 + 8);
  if (v6)
  {
    return sub_188B4AC(v5);
  }
  return result;
}

uint64_t sub_15D54F4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15FB668(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if ((*(unsigned char *)(v1 + 16) & 3) != 0)
  {
    *(unsigned char *)(v1 + 52) = 0;
    *(_DWORD *)(v1 + 48) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

uint64_t sub_15D5588(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_160C704(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = (uint64_t *)(v1 + 8);
  if (v6)
  {
    return sub_188B4AC(v5);
  }
  return result;
}

uint64_t sub_15D5604(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15D5688((uint64_t (***)())a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t (***sub_15D5688(uint64_t (***result)()))()
{
  if (result != &off_253FE90)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[3];
    if (v2)
    {
      sub_15DB648(v2);
      operator delete();
    }
    uint64_t v3 = v1[4];
    if (v3)
    {
      sub_15FB098(v3);
      operator delete();
    }
    uint64_t v4 = v1[5];
    if (v4)
    {
      sub_16056E0(v4);
      operator delete();
    }
    uint64_t v5 = v1[6];
    if (v5)
    {
      sub_15D976C(v5);
      operator delete();
    }
    char v6 = v1[7];
    if (v6)
    {
      sub_160B4DC(v6);
      operator delete();
    }
    BOOL v7 = v1[8];
    if (v7)
    {
      sub_15D6D4C(v7);
      operator delete();
    }
    uint64_t result = (uint64_t (***)())v1[9];
    if (result)
    {
      sub_15D6FF8(result);
      operator delete();
    }
  }
  return result;
}

void sub_15D57B4(uint64_t a1)
{
  sub_15D5604(a1);

  operator delete();
}

uint64_t sub_15D57EC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15DA5F8(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  int v5 = *(_DWORD *)(v1 + 16);
  if ((v5 & 0x1F) == 0) {
    goto LABEL_12;
  }
  if (v5)
  {
    unint64_t v8 = *(void *)(v1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)unint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      if ((v5 & 2) != 0) {
        goto LABEL_20;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
      if ((v5 & 2) != 0) {
        goto LABEL_20;
      }
    }
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_21:
    uint64_t result = sub_15DB588(*(void *)(v1 + 64));
    if ((v5 & 8) == 0)
    {
LABEL_10:
      if ((v5 & 0x10) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    goto LABEL_22;
  }
  if ((v5 & 2) == 0) {
    goto LABEL_8;
  }
LABEL_20:
  uint64_t result = sub_15DAFF8(*(void *)(v1 + 56));
  if ((v5 & 4) != 0) {
    goto LABEL_21;
  }
LABEL_9:
  if ((v5 & 8) == 0) {
    goto LABEL_10;
  }
LABEL_22:
  uint64_t result = sub_15DB5E8(*(void *)(v1 + 72));
  if ((v5 & 0x10) != 0) {
LABEL_11:
  }
    uint64_t result = sub_15D258C(*(void *)(v1 + 80));
LABEL_12:
  char v7 = *(unsigned char *)(v1 + 8);
  uint64_t v6 = v1 + 8;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

std::string *sub_15D58EC(std::string *result)
{
  uint64_t v1 = result;
  uint64_t data_low = LODWORD(result[1].__r_.__value_.__l.__data_);
  if ((int)data_low >= 1)
  {
    uint64_t v3 = (std::string **)(result[1].__r_.__value_.__l.__size_ + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15D9D74(v4);
      --data_low;
    }
    while (data_low);
    LODWORD(v1[1].__r_.__value_.__l.__data_) = 0;
  }
  std::string::value_type v6 = v1->__r_.__value_.__s.__data_[8];
  p_std::string::size_type size = (uint64_t *)&v1->__r_.__value_.__l.__size_;
  if (v6)
  {
    return (std::string *)sub_188B4AC(p_size);
  }
  return result;
}

uint64_t *sub_15D5968(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  if (v2) {
    return (uint64_t *)sub_188B4AC(result);
  }
  return result;
}

uint64_t *sub_15D5978(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  if (v2) {
    return (uint64_t *)sub_188B4AC(result);
  }
  return result;
}

char *sub_15D5988(uint64_t a1, char *a2, int32x2_t *a3)
{
  unint64_t v29 = a2;
  if (sub_11947B8((uint64_t)a3, &v29, a3[11].i32[1])) {
    return v29;
  }
  std::string::value_type v6 = (void *)(a1 + 8);
  while (2)
  {
    char v7 = v29 + 1;
    unsigned int v8 = *v29;
    if (*v29 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        char v7 = (char *)sub_188C180((uint64_t)v29, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        char v7 = v29 + 2;
      }
    }
    unint64_t v29 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 24);
        if (!v11)
        {
          uint64_t v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v12 = (void *)*v12;
          }
          sub_15F9004((uint64_t)v12);
          uint64_t v11 = v13;
          *(void *)(a1 + 24) = v13;
          char v7 = v29;
        }
        uint64_t v14 = (char *)sub_15D5D14(a3, v11, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 2u:
        if (v8 != 18) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 32);
        if (!v15)
        {
          char v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            char v16 = (void *)*v16;
          }
          uint64_t v15 = sub_1605DD0((uint64_t)v16);
          *(void *)(a1 + 32) = v15;
          char v7 = v29;
        }
        uint64_t v14 = sub_15D5DA4(a3, v15, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 3u:
        if (v8 != 26) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        char v17 = *(void **)(a1 + 40);
        if (!v17)
        {
          uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v18 = (void *)*v18;
          }
          char v17 = sub_16068F4((uint64_t)v18);
          *(void *)(a1 + 40) = v17;
          char v7 = v29;
        }
        uint64_t v14 = sub_15D5E34(a3, (uint64_t)v17, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 4u:
        if (v8 != 34) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v19 = *(void *)(a1 + 48);
        if (!v19)
        {
          unint64_t v20 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unint64_t v20 = (void *)*v20;
          }
          uint64_t v19 = sub_15F8D58((uint64_t)v20);
          *(void *)(a1 + 48) = v19;
          char v7 = v29;
        }
        uint64_t v14 = sub_15D5EC4(a3, v19, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 5u:
        if (v8 != 42) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v21 = *(void *)(a1 + 56);
        if (!v21)
        {
          uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v22 = (void *)*v22;
          }
          uint64_t v21 = sub_160E718((uint64_t)v22);
          *(void *)(a1 + 56) = v21;
          char v7 = v29;
        }
        uint64_t v14 = sub_15D5F54(a3, v21, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 6u:
        if (v8 != 50) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v23 = *(void *)(a1 + 64);
        if (!v23)
        {
          uint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v24 = (void *)*v24;
          }
          uint64_t v23 = sub_15F8B38((uint64_t)v24);
          *(void *)(a1 + 64) = v23;
          char v7 = v29;
        }
        uint64_t v14 = sub_15D5FE4(a3, v23, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 7u:
        if (v8 != 58) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v25 = *(void *)(a1 + 72);
        if (!v25)
        {
          uint64_t v26 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v26 = (void *)*v26;
          }
          uint64_t v25 = sub_15F8BB0((uint64_t)v26);
          *(void *)(a1 + 72) = v25;
          char v7 = v29;
        }
        uint64_t v14 = sub_15D6074(a3, v25, (unsigned __int8 *)v7);
        goto LABEL_58;
      default:
LABEL_51:
        if (v8) {
          BOOL v27 = (v8 & 7) == 4;
        }
        else {
          BOOL v27 = 1;
        }
        if (!v27)
        {
          if (*v6)
          {
            int v28 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            int v28 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            char v7 = v29;
          }
          uint64_t v14 = (char *)sub_1885AC0(v8, v28, v7, a3);
LABEL_58:
          unint64_t v29 = v14;
          if (!v14) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, &v29, a3[11].i32[1])) {
            return v29;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return v29;
    }
  }
}

uint64_t sub_15D5D14(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DB7F4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D5DA4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15FB150(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D5E34(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_1605798(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D5EC4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D9824(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D5F54(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_160B594(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D5FE4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D6DF8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D6074(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D70A4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D6104(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15DBE3C(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 40);
  v4[1] = v11;
  if (v11 > 0x7F) {
    uint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    uint64_t v12 = v4 + 2;
  }
  uint64_t v4 = sub_15FB380(v10, v12, a3);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_21:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 40);
  char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    uint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    uint64_t v15 = v4 + 2;
  }
  uint64_t v4 = sub_1605A30(v13, v15, a3);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_27:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 40);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  uint64_t v4 = sub_15D9A54(v16, v18, a3);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_33:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  char *v4 = 42;
  unsigned int v20 = *(_DWORD *)(v19 + 40);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  uint64_t v4 = sub_160B7C4(v19, v21, a3);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
LABEL_39:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v22 = *(void *)(a1 + 64);
  char *v4 = 50;
  unsigned int v23 = *(_DWORD *)(v22 + 16);
  v4[1] = v23;
  if (v23 > 0x7F) {
    uint64_t v24 = sub_188A9CC(v23, v4 + 1);
  }
  else {
    uint64_t v24 = v4 + 2;
  }
  uint64_t v4 = sub_15D6EF8(v22, v24, a3);
  if ((v6 & 0x40) != 0)
  {
LABEL_45:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v25 = *(void *)(a1 + 72);
    char *v4 = 58;
    unsigned int v26 = *(_DWORD *)(v25 + 16);
    v4[1] = v26;
    if (v26 > 0x7F) {
      BOOL v27 = sub_188A9CC(v26, v4 + 1);
    }
    else {
      BOOL v27 = v4 + 2;
    }
    uint64_t v4 = sub_15D71A4(v25, v27, a3);
  }
LABEL_51:
  uint64_t v28 = *(void *)(a1 + 8);
  if ((v28 & 1) == 0) {
    return v4;
  }
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v30 + 31) < 0)
  {
    uint64_t v31 = *(void **)(v30 + 8);
    uint64_t v32 = *(void *)(v30 + 16);
  }
  else
  {
    uint64_t v31 = (void *)(v30 + 8);
    LODWORD(v32) = *(unsigned __int8 *)(v30 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v32)
  {
    uint64_t v33 = (int)v32;
    memcpy(v4, v31, (int)v32);
    v4 += v33;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v31, v32, v4);
}

uint64_t sub_15D6494(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x7F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_23;
  }
  if (v2)
  {
    uint64_t v4 = sub_15DC144(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15FB4C4(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = sub_1605C2C(*(void *)(a1 + 40));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_10:
      if ((v2 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v7 = sub_15D9B98(*(void *)(a1 + 48));
  v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v8 = sub_160B908(*(void *)(a1 + 56));
  v3 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(v9 + 8);
  if (v10)
  {
    unint64_t v19 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v19 + 31) < 0) {
      uint64_t v11 = *(void *)(v19 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v19 + 31);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(_DWORD *)(v9 + 16) = v11;
  v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) != 0)
  {
LABEL_20:
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13)
    {
      unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(char *)(v20 + 31) < 0) {
        uint64_t v14 = *(void *)(v20 + 16);
      }
      else {
        uint64_t v14 = *(unsigned __int8 *)(v20 + 31);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(_DWORD *)(v12 + 16) = v14;
    v3 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_23:
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v3 += v18;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_15D66C0(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result[1], *(_DWORD *)(a2 + 32));
    uint64_t result = sub_1638F58(v3 + 1, v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    int v7 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v4;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v7;
    uint64_t v8 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 0x1F) == 0) {
    goto LABEL_46;
  }
  if (v9)
  {
    uint64_t v10 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    std::string::size_type size = v3->__r_.__value_.__l.__size_;
    uint64_t v12 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
    if (size) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[2], v10, v12);
    if ((v9 & 2) == 0)
    {
LABEL_7:
      if ((v9 & 4) == 0) {
        goto LABEL_8;
      }
LABEL_22:
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
      unint64_t v17 = (std::string *)v3[2].__r_.__value_.__r.__words[2];
      if (!v17)
      {
        std::string::size_type v18 = v3->__r_.__value_.__l.__size_;
        unint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
        if (v18) {
          unint64_t v19 = (void *)*v19;
        }
        unint64_t v17 = (std::string *)sub_1623750((uint64_t)v19);
        v3[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
      }
      if (*(void *)(a2 + 64)) {
        unint64_t v20 = *(uint64_t (****)())(a2 + 64);
      }
      else {
        unint64_t v20 = &off_2541948;
      }
      uint64_t result = sub_15DC318(v17, (uint64_t)v20);
      if ((v9 & 8) == 0)
      {
LABEL_9:
        if ((v9 & 0x10) == 0) {
          goto LABEL_46;
        }
        goto LABEL_38;
      }
      goto LABEL_30;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_7;
  }
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
  uint64_t v13 = (std::string *)v3[2].__r_.__value_.__l.__size_;
  if (!v13)
  {
    std::string::size_type v14 = v3->__r_.__value_.__l.__size_;
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    uint64_t v13 = (std::string *)sub_15F8F88((uint64_t)v15);
    v3[2].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  }
  if (*(void *)(a2 + 56)) {
    uint64_t v16 = *(uint64_t (****)())(a2 + 56);
  }
  else {
    uint64_t v16 = &off_253FFF0;
  }
  uint64_t result = sub_15DB474(v13, (uint64_t)v16);
  if ((v9 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_8:
  if ((v9 & 8) == 0) {
    goto LABEL_9;
  }
LABEL_30:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
  std::string::pointer data = (std::string *)v3[3].__r_.__value_.__l.__data_;
  if (!data)
  {
    std::string::size_type v22 = v3->__r_.__value_.__l.__size_;
    unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22) {
      unsigned int v23 = (void *)*v23;
    }
    std::string::pointer data = (std::string *)sub_16238E8((uint64_t)v23);
    v3[3].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  }
  if (*(void *)(a2 + 72)) {
    uint64_t v24 = *(uint64_t (****)())(a2 + 72);
  }
  else {
    uint64_t v24 = &off_25419C8;
  }
  uint64_t result = sub_15DC410(data, (uint64_t)v24);
  if ((v9 & 0x10) != 0)
  {
LABEL_38:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10u;
    uint64_t v25 = (std::string *)v3[3].__r_.__value_.__l.__size_;
    if (!v25)
    {
      std::string::size_type v26 = v3->__r_.__value_.__l.__size_;
      BOOL v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        BOOL v27 = (void *)*v27;
      }
      uint64_t v25 = (std::string *)sub_15F8824((uint64_t)v27);
      v3[3].__r_.__value_.__l.__size_ = (std::string::size_type)v25;
    }
    if (*(void *)(a2 + 80)) {
      uint64_t v28 = *(uint64_t (****)())(a2 + 80);
    }
    else {
      uint64_t v28 = &off_253FD90;
    }
    uint64_t result = sub_15D2E3C(v25, (uint64_t)v28);
  }
LABEL_46:
  uint64_t v29 = *(void *)(a2 + 8);
  if (v29)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v29 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

void sub_15D6914(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 16, *(_DWORD *)(a2 + 24));
    sub_1639554((uint64_t *)(a1 + 16), v6, v5, v4, **(_DWORD **)(a1 + 32) - *(_DWORD *)(a1 + 24));
    int v7 = *(_DWORD *)(a1 + 24) + v4;
    *(_DWORD *)(a1 + 24) = v7;
    uint64_t v8 = *(int **)(a1 + 32);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15D69E4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1639554((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 3) != 0)
  {
    if (v9) {
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    }
    if ((v9 & 2) != 0) {
      *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
    }
    *(_DWORD *)(a1 + 16) |= v9;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15D6AE4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result->__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 24));
    uint64_t result = sub_1638ECC((std::string *)&v3->__r_.__value_.__r.__words[2], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    int v7 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v4;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v7;
    std::string::size_type size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v7) {
      *std::string::size_type size = v7;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15D6BB4(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result->__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 24));
    uint64_t result = (std::string *)sub_1639900((uint64_t *)&v3->__r_.__value_.__r.__words[2], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    int v7 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v4;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v7;
    std::string::size_type size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v7) {
      *std::string::size_type size = v7;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

BOOL sub_15D6C84(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  do
  {
    int v3 = v2;
    if ((int)v2 < 1) {
      break;
    }
    uint64_t v4 = v2 - 1;
    char v5 = sub_15FBEA0(*(void *)(*(void *)(a1 + 32) + 8 * v2) + 24);
    uint64_t v2 = v4;
  }
  while ((v5 & 1) != 0);
  return v3 < 1;
}

BOOL sub_15D6CE0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  do
  {
    int v3 = v2;
    if ((int)v2 < 1) {
      break;
    }
    uint64_t v4 = v2 - 1;
    char v5 = sub_15FBEA0(*(void *)(*(void *)(a1 + 40) + 8 * v2) + 24);
    uint64_t v2 = v4;
  }
  while ((v5 & 1) != 0);
  return v3 < 1;
}

void *sub_15D6D3C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackResult");
}

void *sub_15D6D4C(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D6DC0(void *a1)
{
  sub_15D6D4C(a1);

  operator delete();
}

char *sub_15D6DF8(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v12 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if (sub_11947B8((uint64_t)a3, &v12, a3[11].i32[1])) {
      return v12;
    }
    char v5 = v12 + 1;
    unsigned int v6 = *v12;
    if (*v12 < 0)
    {
      unsigned int v7 = v6 + (*v5 << 7);
      unsigned int v6 = v7 - 128;
      if (*v5 < 0)
      {
        char v5 = (char *)sub_188C180((uint64_t)v12, v7 - 128);
        unsigned int v6 = v8;
      }
      else
      {
        char v5 = v12 + 2;
      }
    }
    uint64_t v12 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    if (*v4)
    {
      uint64_t v10 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v10 = (std::string *)sub_188DBD8(v4);
      char v5 = v12;
    }
    uint64_t v12 = (char *)sub_1885AC0(v6, v10, v5, a3);
    if (!v12) {
      return 0;
    }
  }
  if (v5) {
    a3[10].i32[0] = v6 - 1;
  }
  return v5;
}

char *sub_15D6EF8(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0) {
    return __dst;
  }
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v6 + 31) < 0)
  {
    unsigned int v7 = *(void **)(v6 + 8);
    unint64_t v6 = *(void *)(v6 + 16);
  }
  else
  {
    unsigned int v7 = (void *)(v6 + 8);
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v6)
  {
    uint64_t v8 = (int)v6;
    memcpy(__dst, v7, (int)v6);
    __dst += v8;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v7, v6, __dst);
}

uint64_t sub_15D6F90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v2 = *(void *)(v4 + 16);
    }
    else {
      uint64_t v2 = *(unsigned __int8 *)(v4 + 31);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(a1 + 16) = v2;
  return v2;
}

std::string *sub_15D6FC4(std::string *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15D6FE0()
{
  return 1;
}

void *sub_15D6FE8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackTdmFraudNotificationResult");
}

void *sub_15D6FF8(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D706C(void *a1)
{
  sub_15D6FF8(a1);

  operator delete();
}

char *sub_15D70A4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v12 = a2;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if (sub_11947B8((uint64_t)a3, &v12, a3[11].i32[1])) {
      return v12;
    }
    char v5 = v12 + 1;
    unsigned int v6 = *v12;
    if (*v12 < 0)
    {
      unsigned int v7 = v6 + (*v5 << 7);
      unsigned int v6 = v7 - 128;
      if (*v5 < 0)
      {
        char v5 = (char *)sub_188C180((uint64_t)v12, v7 - 128);
        unsigned int v6 = v8;
      }
      else
      {
        char v5 = v12 + 2;
      }
    }
    uint64_t v12 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    if (*v4)
    {
      uint64_t v10 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v10 = (std::string *)sub_188DBD8(v4);
      char v5 = v12;
    }
    uint64_t v12 = (char *)sub_1885AC0(v6, v10, v5, a3);
    if (!v12) {
      return 0;
    }
  }
  if (v5) {
    a3[10].i32[0] = v6 - 1;
  }
  return v5;
}

char *sub_15D71A4(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0) {
    return __dst;
  }
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v6 + 31) < 0)
  {
    unsigned int v7 = *(void **)(v6 + 8);
    unint64_t v6 = *(void *)(v6 + 16);
  }
  else
  {
    unsigned int v7 = (void *)(v6 + 8);
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v6)
  {
    uint64_t v8 = (int)v6;
    memcpy(__dst, v7, (int)v6);
    __dst += v8;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v7, v6, __dst);
}

uint64_t sub_15D723C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v2 = *(void *)(v4 + 16);
    }
    else {
      uint64_t v2 = *(unsigned __int8 *)(v4 + 31);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(a1 + 16) = v2;
  return v2;
}

std::string *sub_15D7270(std::string *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15D728C()
{
  return 1;
}

void *sub_15D7294@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackLogEventResult");
}

uint64_t sub_15D72A4(uint64_t a1)
{
  uint64_t result = sub_188CC00(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 56);
  if ((int)v3 >= 1)
  {
    unint64_t v4 = (uint64_t *)(*(void *)(a1 + 64) + 8);
    do
    {
      uint64_t v5 = *v4++;
      uint64_t result = sub_161AD60(v5);
      --v3;
    }
    while (v3);
    *(_DWORD *)(a1 + 56) = 0;
  }
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) == 0)
    {
      if ((v6 & 2) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      unint64_t v8 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v8 + 23) < 0)
      {
        **(unsigned char **)unint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        if ((v6 & 4) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v8 = 0;
        *(unsigned char *)(v8 + 23) = 0;
        if ((v6 & 4) == 0) {
          goto LABEL_21;
        }
      }
      goto LABEL_18;
    }
    unint64_t v7 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)unint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      if ((v6 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
      if ((v6 & 2) != 0) {
        goto LABEL_14;
      }
    }
LABEL_8:
    if ((v6 & 4) == 0) {
      goto LABEL_21;
    }
LABEL_18:
    unint64_t v9 = *(void *)(a1 + 88) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0)
    {
      **(unsigned char **)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v9 = 0;
      *(unsigned char *)(v9 + 23) = 0;
    }
  }
LABEL_21:
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v10 = a1 + 8;
  *(_DWORD *)(v10 + 8) = 0;
  if (v11)
  {
    return sub_188B4AC((uint64_t *)v10);
  }
  return result;
}

void *sub_15D73D0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15D7454((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void ***sub_15D7454(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = (void ***)(a1 + 24);
  if (v3 != &qword_2550250) {
    sub_1881C6C(v2);
  }
  uint64_t result = (void ***)(a1 + 32);
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_253FF10)
  {
    uint64_t v5 = *(void **)(a1 + 40);
    if (v5)
    {
      sub_15DF490(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      sub_15DD348(v6);
      operator delete();
    }
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      sub_15DC520(v7);
      operator delete();
    }
    uint64_t result = *(void ****)(a1 + 64);
    if (result)
    {
      sub_161BBCC((uint64_t)result);
      operator delete();
    }
  }
  return result;
}

void sub_15D754C(void *a1)
{
  sub_15D73D0(a1);

  operator delete();
}

uint64_t sub_15D7584(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if (!(_BYTE)v2) {
    goto LABEL_11;
  }
  if (v2)
  {
    uint64_t result = sub_15DF818(*(void *)(result + 24));
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = sub_15DF8C0(*(void *)(v1 + 32));
  if ((v2 & 4) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = sub_15DF9B8(*(void *)(v1 + 40));
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = sub_15DFA38(*(void *)(v1 + 48));
  if ((v2 & 0x10) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_24:
    uint64_t result = sub_15DFB1C(*(void *)(v1 + 64));
    if ((v2 & 0x40) == 0)
    {
LABEL_9:
      if ((v2 & 0x80) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = sub_15DFAA8(*(void *)(v1 + 56));
  if ((v2 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_8:
  if ((v2 & 0x40) == 0) {
    goto LABEL_9;
  }
LABEL_25:
  uint64_t result = sub_15DFBB8(*(void *)(v1 + 72));
  if ((v2 & 0x80) != 0) {
LABEL_10:
  }
    uint64_t result = sub_15DFC2C(*(void *)(v1 + 80));
LABEL_11:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_39;
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t result = sub_15C662C(*(void *)(v1 + 88));
    if ((v2 & 0x200) == 0)
    {
LABEL_14:
      if ((v2 & 0x400) == 0) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_14;
  }
  uint64_t result = sub_15DF33C(*(void *)(v1 + 96));
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = sub_15DFC9C(*(void *)(v1 + 104));
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = sub_15DFD0C(*(void *)(v1 + 112));
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_34;
    }
LABEL_32:
    uint64_t v3 = *(void *)(v1 + 128);
    char v4 = *(unsigned char *)(v3 + 8);
    uint64_t result = v3 + 8;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)(result + 8) = 0;
    if (v4) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t result = (uint64_t)sub_15DFD8C(*(unsigned char **)(v1 + 120));
  if ((v2 & 0x2000) != 0) {
    goto LABEL_32;
  }
LABEL_34:
  if ((v2 & 0x4000) != 0) {
    uint64_t result = sub_15DFE0C(*(void *)(v1 + 136));
  }
  if ((v2 & 0x8000) != 0)
  {
    uint64_t v5 = *(void *)(v1 + 144);
    char v6 = *(unsigned char *)(v5 + 8);
    uint64_t result = v5 + 8;
    if (v6) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
  }
LABEL_39:
  if ((v2 & 0xF0000) == 0) {
    goto LABEL_45;
  }
  if ((v2 & 0x10000) != 0)
  {
    uint64_t result = sub_15DF3D8(*(void *)(v1 + 152));
    if ((v2 & 0x20000) == 0)
    {
LABEL_42:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_51;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_42;
  }
  uint64_t result = sub_15DF434(*(void *)(v1 + 160));
  if ((v2 & 0x40000) == 0)
  {
LABEL_43:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_51:
  uint64_t result = sub_15DFE8C(*(void *)(v1 + 168));
  if ((v2 & 0x80000) != 0) {
LABEL_44:
  }
    uint64_t result = sub_15DFED0(*(void *)(v1 + 176));
LABEL_45:
  char v8 = *(unsigned char *)(v1 + 8);
  uint64_t v7 = v1 + 8;
  *(_DWORD *)(v7 + 8) = 0;
  if (v8)
  {
    return sub_188B4AC((uint64_t *)v7);
  }
  return result;
}

uint64_t sub_15D773C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_127178C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  *(_DWORD *)(v1 + 48) = 0;
  uint64_t v5 = *(unsigned int *)(v1 + 72);
  if ((int)v5 >= 1)
  {
    char v6 = (uint64_t *)(*(void *)(v1 + 80) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = sub_126C990(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 72) = 0;
  }
  int v8 = *(_DWORD *)(v1 + 16);
  if ((v8 & 0x7F) == 0) {
    goto LABEL_18;
  }
  if (v8)
  {
    uint64_t result = (uint64_t)sub_12605AC(*(void *)(v1 + 88));
    if ((v8 & 2) == 0)
    {
LABEL_12:
      if ((v8 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_26;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_12;
  }
  uint64_t result = sub_1264E20(*(void *)(v1 + 96));
  if ((v8 & 4) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = sub_1264F70(*(void *)(v1 + 104));
  if ((v8 & 8) == 0)
  {
LABEL_14:
    if ((v8 & 0x10) == 0) {
      goto LABEL_15;
    }
LABEL_28:
    uint64_t result = sub_15DD5CC(*(void *)(v1 + 120));
    if ((v8 & 0x20) == 0)
    {
LABEL_16:
      if ((v8 & 0x40) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = sub_15DD550(*(void *)(v1 + 112));
  if ((v8 & 0x10) != 0) {
    goto LABEL_28;
  }
LABEL_15:
  if ((v8 & 0x20) == 0) {
    goto LABEL_16;
  }
LABEL_29:
  uint64_t result = sub_130726C(*(void *)(v1 + 128));
  if ((v8 & 0x40) != 0) {
LABEL_17:
  }
    uint64_t result = sub_15DCB94(*(void *)(v1 + 136));
LABEL_18:
  *(void *)(v1 + 144) = 0;
  if ((v8 & 0xF00) != 0)
  {
    *(void *)(v1 + 157) = 0;
    *(void *)(v1 + 152) = 0;
    *(_DWORD *)(v1 + 168) = -1;
  }
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v9 = v1 + 8;
  *(_DWORD *)(v9 + 8) = 0;
  if (v10)
  {
    return sub_188B4AC((uint64_t *)v9);
  }
  return result;
}

uint64_t sub_15D7880(uint64_t a1)
{
  uint64_t result = sub_188CC00(a1 + 24);
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v3 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = a1 + 8;
  *(_DWORD *)(v4 + 8) = 0;
  if (v5)
  {
    return sub_188B4AC((uint64_t *)v4);
  }
  return result;
}

uint64_t sub_15D7904(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)unint64_t v34 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v34, a3[11].i32[1])) {
    return *(void *)v34;
  }
  char v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v34 + 1);
    unsigned int v8 = **(unsigned char **)v34;
    if ((char)**(unsigned char **)v34 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v34, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v34 + 2);
      }
    }
    *(void *)unint64_t v34 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 24);
        goto LABEL_42;
      case 2u:
        if (v8 != 16) {
          goto LABEL_49;
        }
        std::string::size_type v14 = (char *)(v7 + 1);
        unint64_t v15 = *v7;
        if (((char)*v7 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        int v16 = *v14;
        int v17 = v15 + (v16 << 7);
        unint64_t v15 = (v17 - 128);
        if (v16 < 0)
        {
          *(void *)unint64_t v34 = sub_188C138((uint64_t)v7, (v17 - 128));
          if (!*(void *)v34) {
            return 0;
          }
          unint64_t v15 = v32;
        }
        else
        {
          std::string::size_type v14 = (char *)(v7 + 2);
LABEL_17:
          *(void *)unint64_t v34 = v14;
        }
        if (v15 > 0x15)
        {
          if (*v6) {
            uint64_t v33 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v33 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(2, v15, v33);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x40u;
          *(_DWORD *)(a1 + 72) = v15;
        }
        goto LABEL_57;
      case 3u:
        if (v8 != 26) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v18 = *(void *)(a1 + 40);
        if (!v18)
        {
          unint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unint64_t v19 = (void *)*v19;
          }
          sub_15F93DC((uint64_t)v19);
          uint64_t v18 = v20;
          *(void *)(a1 + 40) = v20;
          uint64_t v7 = *(unsigned __int8 **)v34;
        }
        uint64_t v21 = (uint64_t)sub_15D7CC8(a3, v18, v7);
        goto LABEL_56;
      case 4u:
        if (v8 != 34) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v22 = *(void *)(a1 + 48);
        if (!v22)
        {
          unsigned int v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unsigned int v23 = (void *)*v23;
          }
          uint64_t v22 = sub_15F91FC((uint64_t)v23);
          *(void *)(a1 + 48) = v22;
          uint64_t v7 = *(unsigned __int8 **)v34;
        }
        uint64_t v21 = (uint64_t)sub_15D7D58(a3, v22, v7);
        goto LABEL_56;
      case 5u:
        if (v8 != 42) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v24 = *(void **)(a1 + 56);
        if (!v24)
        {
          uint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v25 = (void *)*v25;
          }
          uint64_t v24 = sub_15F90B4((uint64_t)v25);
          *(void *)(a1 + 56) = v24;
          uint64_t v7 = *(unsigned __int8 **)v34;
        }
        uint64_t v21 = sub_15D7DE8(a3, (uint64_t)v24, v7);
        goto LABEL_56;
      case 6u:
        if (v8 != 50) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v26 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (void *)(a1 + 32);
LABEL_42:
        BOOL v27 = (std::string *)sub_1880F84(v13, v12);
        uint64_t v21 = (uint64_t)sub_188C244(v27, *(char **)v34, (uint64_t)a3);
        goto LABEL_56;
      case 7u:
        if (v8 != 58) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v28 = *(void **)(a1 + 64);
        if (!v28)
        {
          uint64_t v29 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v29 = (void *)*v29;
          }
          uint64_t v28 = sub_161D340((uint64_t)v29);
          *(void *)(a1 + 64) = v28;
          uint64_t v7 = *(unsigned __int8 **)v34;
        }
        uint64_t v21 = sub_12DDD38(a3, (uint64_t)v28, v7);
        goto LABEL_56;
      default:
LABEL_49:
        if (v8) {
          BOOL v30 = (v8 & 7) == 4;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30)
        {
          if (*v6)
          {
            uint64_t v31 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v31 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = *(unsigned __int8 **)v34;
          }
          uint64_t v21 = (uint64_t)sub_1885AC0(v8, v31, (char *)v7, a3);
LABEL_56:
          *(void *)unint64_t v34 = v21;
          if (!v21) {
            return 0;
          }
LABEL_57:
          if (sub_11947B8((uint64_t)a3, (char **)v34, a3[11].i32[1])) {
            return *(void *)v34;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v34;
    }
  }
}

char *sub_15D7CC8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DFF14(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D7D58(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DD648(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15D7DE8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DC600(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15D7E78(uint64_t a1, unsigned char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v7 = *(int *)(a1 + 72);
    unsigned char *v4 = 16;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 40);
    unsigned char *v4 = 26;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      uint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      uint64_t v12 = v4 + 2;
    }
    uint64_t v4 = sub_15E1104(v10, (unint64_t)v12, a3);
    if ((v6 & 8) == 0)
    {
LABEL_12:
      if ((v6 & 0x10) == 0) {
        goto LABEL_13;
      }
      goto LABEL_28;
    }
  }
  else if ((v6 & 8) == 0)
  {
    goto LABEL_12;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 48);
  unsigned char *v4 = 34;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    unint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    unint64_t v15 = v4 + 2;
  }
  uint64_t v4 = sub_15DDF94(v13, (unint64_t)v15, a3);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 56);
  unsigned char *v4 = 42;
  unsigned int v17 = *(_DWORD *)(v16 + 20);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  uint64_t v4 = sub_15DC854(v16, v18, a3);
  if ((v6 & 2) == 0)
  {
LABEL_14:
    if ((v6 & 0x20) == 0) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v4 = sub_117A0AC(a3, 6, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x20) == 0) {
    goto LABEL_41;
  }
LABEL_35:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 64);
  unsigned char *v4 = 58;
  unsigned int v20 = *(_DWORD *)(v19 + 20);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  uint64_t v4 = sub_161C104(v19, v21, a3);
LABEL_41:
  uint64_t v22 = *(void *)(a1 + 8);
  if ((v22 & 1) == 0) {
    return v4;
  }
  unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v24 + 31) < 0)
  {
    uint64_t v25 = *(void **)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
  }
  else
  {
    uint64_t v25 = (void *)(v24 + 8);
    LODWORD(v26) = *(unsigned __int8 *)(v24 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v26)
  {
    uint64_t v27 = (int)v26;
    memcpy(v4, v25, (int)v26);
    v4 += v27;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v25, v26, v4);
}

uint64_t sub_15D8190(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x7F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_26;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v2 & 4) != 0)
  {
    uint64_t v10 = sub_15E19DC(*(void *)(a1 + 40));
    v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_14:
      if ((v2 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_14;
  }
  uint64_t v11 = sub_15DE6C0(*(void *)(a1 + 48));
  v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v12 = sub_15DC9E0(*(void *)(a1 + 56));
  v3 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v13 = sub_161C354(*(void *)(a1 + 64));
  v3 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) == 0) {
    goto LABEL_26;
  }
LABEL_22:
  int v14 = *(_DWORD *)(a1 + 72);
  if (v14 < 0) {
    uint64_t v15 = 11;
  }
  else {
    uint64_t v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v15;
LABEL_26:
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16)
  {
    unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v18 + 31) < 0) {
      uint64_t v19 = *(void *)(v18 + 16);
    }
    else {
      uint64_t v19 = *(unsigned __int8 *)(v18 + 31);
    }
    v3 += v19;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15D8398(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if (!(_BYTE)v4) {
    goto LABEL_75;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v5 = *(void *)(a1 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        unint64_t v7 = (void *)*v7;
      }
      sub_15F9980((uint64_t)v7);
      *(void *)(a1 + 24) = v5;
    }
    if (*(void *)(a2 + 24)) {
      uint64_t v8 = *(uint64_t (****)())(a2 + 24);
    }
    else {
      uint64_t v8 = &off_2540510;
    }
    sub_15E1EC4(v5, (uint64_t)v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_4;
  }
  *(_DWORD *)(a1 + 16) |= 2u;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      uint64_t v11 = (void *)*v11;
    }
    sub_15F9A00((uint64_t)v11);
    *(void *)(a1 + 32) = v9;
  }
  if (*(void *)(a2 + 32)) {
    uint64_t v12 = *(uint64_t (****)())(a2 + 32);
  }
  else {
    uint64_t v12 = &off_2540550;
  }
  sub_15E209C(v9, (uint64_t)v12);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_27:
  *(_DWORD *)(a1 + 16) |= 4u;
  uint64_t v13 = *(void **)(a1 + 40);
  if (!v13)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    uint64_t v13 = sub_15F9BE8((uint64_t)v15);
    *(void *)(a1 + 40) = v13;
  }
  if (*(void *)(a2 + 40)) {
    uint64_t v16 = *(uint64_t (****)())(a2 + 40);
  }
  else {
    uint64_t v16 = &off_2540658;
  }
  sub_15E2338((uint64_t)v13, (uint64_t)v16);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }
LABEL_35:
  *(_DWORD *)(a1 + 16) |= 8u;
  unsigned int v17 = *(void **)(a1 + 48);
  if (!v17)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    unsigned int v17 = sub_15F9B6C((uint64_t)v19);
    *(void *)(a1 + 48) = v17;
  }
  if (*(void *)(a2 + 48)) {
    unsigned int v20 = *(uint64_t (****)())(a2 + 48);
  }
  else {
    unsigned int v20 = &off_2540630;
  }
  sub_15E243C((uint64_t)v17, (uint64_t)v20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_43:
  *(_DWORD *)(a1 + 16) |= 0x10u;
  uint64_t v21 = *(void *)(a1 + 56);
  if (!v21)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22) {
      unsigned int v23 = (void *)*v23;
    }
    uint64_t v21 = sub_15F9D7C((uint64_t)v23);
    *(void *)(a1 + 56) = v21;
  }
  if (*(void *)(a2 + 56)) {
    unint64_t v24 = *(uint64_t (****)())(a2 + 56);
  }
  else {
    unint64_t v24 = &off_25406D8;
  }
  sub_15E2540(v21, (uint64_t)v24);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_59;
  }
LABEL_51:
  *(_DWORD *)(a1 + 16) |= 0x20u;
  uint64_t v25 = *(void *)(a1 + 64);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (void *)*v27;
    }
    sub_15F9F80((uint64_t)v27);
    *(void *)(a1 + 64) = v25;
  }
  if (*(void *)(a2 + 64)) {
    uint64_t v28 = *(uint64_t (****)())(a2 + 64);
  }
  else {
    uint64_t v28 = &off_2540820;
  }
  sub_15E2668(v25, (uint64_t)v28);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_75;
    }
    goto LABEL_67;
  }
LABEL_59:
  *(_DWORD *)(a1 + 16) |= 0x40u;
  uint64_t v29 = *(void *)(a1 + 72);
  if (!v29)
  {
    uint64_t v30 = *(void *)(a1 + 8);
    uint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
    if (v30) {
      uint64_t v31 = (void *)*v31;
    }
    uint64_t v29 = sub_15FA078((uint64_t)v31);
    *(void *)(a1 + 72) = v29;
  }
  if (*(void *)(a2 + 72)) {
    unint64_t v32 = *(uint64_t (****)())(a2 + 72);
  }
  else {
    unint64_t v32 = &off_2540880;
  }
  sub_15E2830(v29, (uint64_t)v32);
  if ((v4 & 0x80) != 0)
  {
LABEL_67:
    *(_DWORD *)(a1 + 16) |= 0x80u;
    uint64_t v33 = *(void **)(a1 + 80);
    if (!v33)
    {
      uint64_t v34 = *(void *)(a1 + 8);
      uint64_t v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
      if (v34) {
        uint64_t v35 = (void *)*v35;
      }
      uint64_t v33 = sub_15FA0F8((uint64_t)v35);
      *(void *)(a1 + 80) = v33;
    }
    if (*(void *)(a2 + 80)) {
      uint64_t v36 = *(uint64_t (****)())(a2 + 80);
    }
    else {
      uint64_t v36 = &off_25408B0;
    }
    sub_15E2958((uint64_t)v33, (uint64_t)v36);
  }
LABEL_75:
  if ((v4 & 0xFF00) == 0) {
    goto LABEL_149;
  }
  if ((v4 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 0x100u;
    uint64_t v37 = *(void *)(a1 + 88);
    if (!v37)
    {
      uint64_t v38 = *(void *)(a1 + 8);
      uint64_t v39 = (void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
      if (v38) {
        uint64_t v39 = (void *)*v39;
      }
      sub_15CB898((uint64_t)v39);
      *(void *)(a1 + 88) = v37;
    }
    if (*(void *)(a2 + 88)) {
      unint64_t v40 = *(uint64_t (****)())(a2 + 88);
    }
    else {
      unint64_t v40 = &off_253F960;
    }
    sub_15C75E4(v37, (uint64_t)v40);
    if ((v4 & 0x200) == 0)
    {
LABEL_78:
      if ((v4 & 0x400) == 0) {
        goto LABEL_79;
      }
      goto LABEL_101;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_78;
  }
  *(_DWORD *)(a1 + 16) |= 0x200u;
  uint64_t v41 = *(void *)(a1 + 96);
  if (!v41)
  {
    uint64_t v42 = *(void *)(a1 + 8);
    unsigned int v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
    if (v42) {
      unsigned int v43 = (void *)*v43;
    }
    sub_160A950((uint64_t)v43);
    *(void *)(a1 + 96) = v41;
  }
  if (*(void *)(a2 + 96)) {
    uint64_t v44 = *(uint64_t (****)())(a2 + 96);
  }
  else {
    uint64_t v44 = &off_2540FA8;
  }
  sub_15E2A5C(v41, (uint64_t)v44);
  if ((v4 & 0x400) == 0)
  {
LABEL_79:
    if ((v4 & 0x800) == 0) {
      goto LABEL_80;
    }
    goto LABEL_109;
  }
LABEL_101:
  *(_DWORD *)(a1 + 16) |= 0x400u;
  uint64_t v45 = *(void **)(a1 + 104);
  if (!v45)
  {
    uint64_t v46 = *(void *)(a1 + 8);
    unint64_t v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
    if (v46) {
      unint64_t v47 = (void *)*v47;
    }
    uint64_t v45 = sub_15FA4E0((uint64_t)v47);
    *(void *)(a1 + 104) = v45;
  }
  if (*(void *)(a2 + 104)) {
    int v48 = *(uint64_t (****)())(a2 + 104);
  }
  else {
    int v48 = &off_2540A48;
  }
  sub_15E2C24((uint64_t)v45, (uint64_t)v48);
  if ((v4 & 0x800) == 0)
  {
LABEL_80:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_117;
  }
LABEL_109:
  *(_DWORD *)(a1 + 16) |= 0x800u;
  uint64_t v49 = *(std::string **)(a1 + 112);
  if (!v49)
  {
    uint64_t v50 = *(void *)(a1 + 8);
    uint64_t v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
    if (v50) {
      uint64_t v51 = (void *)*v51;
    }
    uint64_t v49 = (std::string *)sub_15FA338((uint64_t)v51);
    *(void *)(a1 + 112) = v49;
  }
  if (*(void *)(a2 + 112)) {
    int v52 = *(uint64_t (****)())(a2 + 112);
  }
  else {
    int v52 = &off_25409A0;
  }
  sub_15E2D28(v49, (uint64_t)v52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_81:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_125;
  }
LABEL_117:
  *(_DWORD *)(a1 + 16) |= 0x1000u;
  uint64_t v53 = *(void *)(a1 + 120);
  if (!v53)
  {
    uint64_t v54 = *(void *)(a1 + 8);
    int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFCLL);
    if (v54) {
      int v55 = (void *)*v55;
    }
    uint64_t v53 = sub_15FA66C((uint64_t)v55);
    *(void *)(a1 + 120) = v53;
  }
  if (*(void *)(a2 + 120)) {
    int v56 = *(uint64_t (****)())(a2 + 120);
  }
  else {
    int v56 = &off_2540AD0;
  }
  sub_15E2E2C(v53, (uint64_t)v56);
  if ((v4 & 0x2000) == 0)
  {
LABEL_82:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_133;
  }
LABEL_125:
  *(_DWORD *)(a1 + 16) |= 0x2000u;
  uint64_t v57 = *(std::string **)(a1 + 128);
  if (!v57)
  {
    uint64_t v58 = *(void *)(a1 + 8);
    unint64_t v59 = (void *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
    if (v58) {
      unint64_t v59 = (void *)*v59;
    }
    uint64_t v57 = (std::string *)sub_15FA708((uint64_t)v59);
    *(void *)(a1 + 128) = v57;
  }
  if (*(void *)(a2 + 128)) {
    std::string::size_type v60 = *(void *(****)(void *))(a2 + 128);
  }
  else {
    std::string::size_type v60 = &off_2540B08;
  }
  sub_13221BC(v57, (uint64_t)v60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_83:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_149;
    }
    goto LABEL_141;
  }
LABEL_133:
  *(_DWORD *)(a1 + 16) |= 0x4000u;
  uint64_t v61 = *(void **)(a1 + 136);
  if (!v61)
  {
    uint64_t v62 = *(void *)(a1 + 8);
    int v63 = (void *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
    if (v62) {
      int v63 = (void *)*v63;
    }
    uint64_t v61 = sub_15FA784((uint64_t)v63);
    *(void *)(a1 + 136) = v61;
  }
  if (*(void *)(a2 + 136)) {
    uint64_t v64 = *(uint64_t (****)())(a2 + 136);
  }
  else {
    uint64_t v64 = &off_2540B28;
  }
  sub_15E2F68((uint64_t)v61, (uint64_t)v64);
  if ((v4 & 0x8000) != 0)
  {
LABEL_141:
    *(_DWORD *)(a1 + 16) |= 0x8000u;
    uint64_t v65 = *(void *)(a1 + 144);
    if (!v65)
    {
      uint64_t v66 = *(void *)(a1 + 8);
      uint64_t v67 = (void *)(v66 & 0xFFFFFFFFFFFFFFFCLL);
      if (v66) {
        uint64_t v67 = (void *)*v67;
      }
      uint64_t v65 = sub_15FA800((uint64_t)v67);
      *(void *)(a1 + 144) = v65;
    }
    uint64_t v68 = *(void *(****)(void *))(a2 + 144);
    if (!v68) {
      uint64_t v68 = &off_2540B50;
    }
    unint64_t v69 = (unint64_t)v68[1];
    if (v69) {
      sub_188B4F8((uint64_t *)(v65 + 8), (v69 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
  }
LABEL_149:
  if ((v4 & 0xF0000) == 0) {
    goto LABEL_187;
  }
  if ((v4 & 0x10000) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 0x10000u;
    unint64_t v70 = *(std::string **)(a1 + 152);
    if (!v70)
    {
      uint64_t v71 = *(void *)(a1 + 8);
      uint64_t v72 = (void *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
      if (v71) {
        uint64_t v72 = (void *)*v72;
      }
      unint64_t v70 = (std::string *)sub_16236D8((uint64_t)v72);
      *(void *)(a1 + 152) = v70;
    }
    if (*(void *)(a2 + 152)) {
      uint64_t v73 = *(uint64_t (****)())(a2 + 152);
    }
    else {
      uint64_t v73 = &off_2541928;
    }
    sub_15E306C(v70, (uint64_t)v73);
    if ((v4 & 0x20000) == 0)
    {
LABEL_152:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_153;
      }
      goto LABEL_171;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_152;
  }
  *(_DWORD *)(a1 + 16) |= 0x20000u;
  unint64_t v74 = *(std::string **)(a1 + 160);
  if (!v74)
  {
    uint64_t v75 = *(void *)(a1 + 8);
    int v76 = (void *)(v75 & 0xFFFFFFFFFFFFFFFCLL);
    if (v75) {
      int v76 = (void *)*v76;
    }
    unint64_t v74 = (std::string *)sub_1623870((uint64_t)v76);
    *(void *)(a1 + 160) = v74;
  }
  if (*(void *)(a2 + 160)) {
    uint64_t v77 = *(uint64_t (****)())(a2 + 160);
  }
  else {
    uint64_t v77 = &off_25419A8;
  }
  sub_15E3114(v74, (uint64_t)v77);
  if ((v4 & 0x40000) == 0)
  {
LABEL_153:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_187;
    }
    goto LABEL_179;
  }
LABEL_171:
  *(_DWORD *)(a1 + 16) |= 0x40000u;
  int v78 = *(std::string **)(a1 + 168);
  if (!v78)
  {
    uint64_t v79 = *(void *)(a1 + 8);
    uint64_t v80 = (void *)(v79 & 0xFFFFFFFFFFFFFFFCLL);
    if (v79) {
      uint64_t v80 = (void *)*v80;
    }
    int v78 = (std::string *)sub_15FA878((uint64_t)v80);
    *(void *)(a1 + 168) = v78;
  }
  if (*(void *)(a2 + 168)) {
    uint64_t v81 = *(uint64_t (****)(uint64_t))(a2 + 168);
  }
  else {
    uint64_t v81 = &off_2540B68;
  }
  sub_12329D0(v78, (uint64_t)v81);
  if ((v4 & 0x80000) != 0)
  {
LABEL_179:
    *(_DWORD *)(a1 + 16) |= 0x80000u;
    uint64_t v82 = *(std::string **)(a1 + 176);
    if (!v82)
    {
      uint64_t v83 = *(void *)(a1 + 8);
      uint64_t v84 = (void *)(v83 & 0xFFFFFFFFFFFFFFFCLL);
      if (v83) {
        uint64_t v84 = (void *)*v84;
      }
      uint64_t v82 = (std::string *)sub_15FA8FC((uint64_t)v84);
      *(void *)(a1 + 176) = v82;
    }
    if (*(void *)(a2 + 176)) {
      int v85 = *(uint64_t (****)(uint64_t))(a2 + 176);
    }
    else {
      int v85 = &off_2540B88;
    }
    sub_12329D0(v82, (uint64_t)v85);
  }
LABEL_187:
  uint64_t v86 = *(void *)(a2 + 8);
  if (v86)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v86 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15D8A68(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_12C2B58((std::string *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(int *)(a1 + 48);
    sub_188C80C((unsigned int *)(a1 + 48), v10 + v9);
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
    memcpy((void *)(v11 + 4 * v10), *(const void **)(a2 + 56), 4 * *(int *)(a2 + 48));
  }
  int v12 = *(_DWORD *)(a2 + 72);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 80) + 8);
    uint64_t v14 = (std::string **)sub_188CCE4(a1 + 64, *(_DWORD *)(a2 + 72));
    sub_12C2CFC((std::string *)(a1 + 64), v14, v13, v12, **(_DWORD **)(a1 + 80) - *(_DWORD *)(a1 + 72));
    int v15 = *(_DWORD *)(a1 + 72) + v12;
    *(_DWORD *)(a1 + 72) = v15;
    uint64_t v16 = *(int **)(a1 + 80);
    if (*v16 < v15) {
      int *v16 = v15;
    }
  }
  int v17 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v17)
  {
    if (v17)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v19 = *(void *)(a1 + 88);
      if (!v19)
      {
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          uint64_t v21 = (void *)*v21;
        }
        uint64_t v19 = sub_1283F94((uint64_t)v21);
        *(void *)(a1 + 88) = v19;
      }
      if (*(void *)(a2 + 88)) {
        uint64_t v22 = *(uint64_t (****)())(a2 + 88);
      }
      else {
        uint64_t v22 = &off_252F8A0;
      }
      sub_12629B8(v19, (uint64_t)v22);
      if ((v17 & 2) == 0)
      {
LABEL_12:
        if ((v17 & 4) == 0) {
          goto LABEL_13;
        }
        goto LABEL_47;
      }
    }
    else if ((v17 & 2) == 0)
    {
      goto LABEL_12;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    unsigned int v23 = *(std::string **)(a1 + 96);
    if (!v23)
    {
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        uint64_t v25 = (void *)*v25;
      }
      unsigned int v23 = (std::string *)sub_1283BA0((uint64_t)v25);
      *(void *)(a1 + 96) = v23;
    }
    if (*(void *)(a2 + 96)) {
      uint64_t v26 = *(uint64_t (****)(uint64_t))(a2 + 96);
    }
    else {
      uint64_t v26 = &off_252F770;
    }
    sub_1267A24(v23, (uint64_t)v26);
    if ((v17 & 4) == 0)
    {
LABEL_13:
      if ((v17 & 8) == 0) {
        goto LABEL_14;
      }
      goto LABEL_55;
    }
LABEL_47:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v27 = *(std::string **)(a1 + 104);
    if (!v27)
    {
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
      if (v28) {
        uint64_t v29 = (void *)*v29;
      }
      sub_1283A8C((uint64_t)v29);
      *(void *)(a1 + 104) = v27;
    }
    if (*(void *)(a2 + 104)) {
      uint64_t v30 = *(uint64_t (****)(uint64_t))(a2 + 104);
    }
    else {
      uint64_t v30 = &off_252F728;
    }
    sub_1267C50(v27, (uint64_t)v30);
    if ((v17 & 8) == 0)
    {
LABEL_14:
      if ((v17 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_63;
    }
LABEL_55:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v31 = *(std::string **)(a1 + 112);
    if (!v31)
    {
      uint64_t v32 = *(void *)(a1 + 8);
      uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
      if (v32) {
        uint64_t v33 = (void *)*v33;
      }
      uint64_t v31 = (std::string *)sub_15F9358((uint64_t)v33);
      *(void *)(a1 + 112) = v31;
    }
    if (*(void *)(a2 + 112)) {
      uint64_t v34 = *(uint64_t (****)(uint64_t))(a2 + 112);
    }
    else {
      uint64_t v34 = &off_25401C0;
    }
    sub_11EC100(v31, (uint64_t)v34);
    if ((v17 & 0x10) == 0)
    {
LABEL_15:
      if ((v17 & 0x20) == 0) {
        goto LABEL_16;
      }
      goto LABEL_71;
    }
LABEL_63:
    *(_DWORD *)(a1 + 16) |= 0x10u;
    uint64_t v35 = *(std::string **)(a1 + 120);
    if (!v35)
    {
      uint64_t v36 = *(void *)(a1 + 8);
      uint64_t v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
      if (v36) {
        uint64_t v37 = (void *)*v37;
      }
      uint64_t v35 = (std::string *)sub_15F92D4((uint64_t)v37);
      *(void *)(a1 + 120) = v35;
    }
    if (*(void *)(a2 + 120)) {
      uint64_t v38 = *(uint64_t (****)(uint64_t))(a2 + 120);
    }
    else {
      uint64_t v38 = &off_2540198;
    }
    sub_11EC100(v35, (uint64_t)v38);
    if ((v17 & 0x20) == 0)
    {
LABEL_16:
      if ((v17 & 0x40) == 0) {
        goto LABEL_17;
      }
      goto LABEL_79;
    }
LABEL_71:
    *(_DWORD *)(a1 + 16) |= 0x20u;
    uint64_t v39 = *(void *)(a1 + 128);
    if (!v39)
    {
      uint64_t v40 = *(void *)(a1 + 8);
      uint64_t v41 = (void *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
      if (v40) {
        uint64_t v41 = (void *)*v41;
      }
      uint64_t v39 = sub_130BE18((uint64_t)v41);
      *(void *)(a1 + 128) = v39;
    }
    if (*(void *)(a2 + 128)) {
      uint64_t v42 = *(uint64_t (****)())(a2 + 128);
    }
    else {
      uint64_t v42 = &off_2532528;
    }
    sub_1308194(v39, (uint64_t)v42);
    if ((v17 & 0x40) == 0)
    {
LABEL_17:
      if ((v17 & 0x80) == 0)
      {
LABEL_19:
        *(_DWORD *)(a1 + 16) |= v17;
        goto LABEL_20;
      }
LABEL_18:
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      goto LABEL_19;
    }
LABEL_79:
    *(_DWORD *)(a1 + 16) |= 0x40u;
    unsigned int v43 = *(std::string **)(a1 + 136);
    if (!v43)
    {
      uint64_t v44 = *(void *)(a1 + 8);
      uint64_t v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
      if (v44) {
        uint64_t v45 = (void *)*v45;
      }
      unsigned int v43 = (std::string *)sub_15F9158((uint64_t)v45);
      *(void *)(a1 + 136) = v43;
    }
    if (*(void *)(a2 + 136)) {
      uint64_t v46 = *(uint64_t (****)())(a2 + 136);
    }
    else {
      uint64_t v46 = &off_25400A8;
    }
    sub_15DD21C(v43, (uint64_t)v46);
    if ((v17 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_20:
  if ((v17 & 0xF00) == 0) {
    goto LABEL_27;
  }
  if ((v17 & 0x100) != 0)
  {
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    if ((v17 & 0x200) == 0)
    {
LABEL_23:
      if ((v17 & 0x400) == 0) {
        goto LABEL_24;
      }
LABEL_90:
      *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
      if ((v17 & 0x800) == 0) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  else if ((v17 & 0x200) == 0)
  {
    goto LABEL_23;
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  if ((v17 & 0x400) != 0) {
    goto LABEL_90;
  }
LABEL_24:
  if ((v17 & 0x800) != 0) {
LABEL_25:
  }
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
LABEL_26:
  *(_DWORD *)(a1 + 16) |= v17;
LABEL_27:
  uint64_t v18 = *(void *)(a2 + 8);
  if (v18)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v18 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15D8E8C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (const std::string **)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_188FB98(a1 + 24, v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 64) + 8);
    uint64_t v11 = (uint64_t *)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_1639CA0((uint64_t *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if ((v14 & 7) != 0)
  {
    if (v14)
    {
      int v15 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v16 = *(void *)(a1 + 8);
      int v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        int v17 = (uint64_t *)*v17;
      }
      sub_1881DF4((std::string **)(a1 + 72), v15, v17);
      if ((v14 & 2) == 0)
      {
LABEL_10:
        if ((v14 & 4) == 0) {
          goto LABEL_21;
        }
        goto LABEL_18;
      }
    }
    else if ((v14 & 2) == 0)
    {
      goto LABEL_10;
    }
    uint64_t v18 = (long long *)(*(void *)(a2 + 80) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19) {
      uint64_t v20 = (uint64_t *)*v20;
    }
    sub_1881DF4((std::string **)(a1 + 80), v18, v20);
    if ((v14 & 4) != 0)
    {
LABEL_18:
      uint64_t v21 = (long long *)(*(void *)(a2 + 88) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 4u;
      uint64_t v22 = *(void *)(a1 + 8);
      unsigned int v23 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        unsigned int v23 = (uint64_t *)*v23;
      }
      sub_1881DF4((std::string **)(a1 + 88), v21, v23);
    }
  }
LABEL_21:
  uint64_t v24 = *(void *)(a2 + 8);
  if (v24)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v24 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15D9074(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_15E31BC(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) != 0)
  {
    uint64_t result = sub_15E321C(*(void *)(a1 + 32));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t result = sub_15ECE44(*(void *)(v4 + 24));
      if (!result) {
        return result;
      }
      int v2 = *(_DWORD *)(a1 + 16);
    }
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (*(unsigned char *)(v5 + 16))
    {
      uint64_t result = sub_12680E8(*(void *)(v5 + 24));
      if (!result) {
        return result;
      }
      int v2 = *(_DWORD *)(a1 + 16);
    }
  }
  if ((v2 & 0x10) != 0)
  {
    uint64_t result = sub_15E3328(*(void *)(a1 + 56));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x20) != 0)
  {
    uint64_t result = sub_15E3374(*(void *)(a1 + 64));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x40) != 0)
  {
    uint64_t result = sub_15E33D4(*(void *)(a1 + 72));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x80) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 80);
    if (*(unsigned char *)(v6 + 16))
    {
      uint64_t result = sub_15F2448(*(void *)(v6 + 24));
      if (!result) {
        return result;
      }
      int v2 = *(_DWORD *)(a1 + 16);
    }
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t result = sub_15C7CC8(*(void *)(a1 + 88));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x200) != 0)
  {
    uint64_t result = sub_15E344C(*(void *)(a1 + 96));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x400) != 0)
  {
    uint64_t result = sub_15E3498(*(void *)(a1 + 104));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x1000) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (*(unsigned char *)(v7 + 16))
    {
      uint64_t result = sub_16CE508(*(void *)(v7 + 40));
      if (!result) {
        return result;
      }
      int v2 = *(_DWORD *)(a1 + 16);
    }
  }
  if ((v2 & 0x4000) == 0) {
    return 1;
  }
  uint64_t result = sub_15E34FC(*(void *)(a1 + 136));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15D91CC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_1263380(*(void *)(a1 + 88));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x20) == 0) {
    return 1;
  }
  uint64_t result = sub_13085E8(*(void *)(a1 + 128));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15D9218(uint64_t a1)
{
  return sub_161C544(a1 + 48);
}

void *sub_15D9220@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackSubmissionParameters");
}

void *sub_15D9230(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1638AC0(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D92B0(void *a1)
{
  sub_15D9230(a1);

  operator delete();
}

char *sub_15D92E8(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v26 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v26, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v8 = v26 + 1;
    unsigned int v9 = *v26;
    if (*v26 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v26, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v26 + 2;
      }
    }
    uint64_t v26 = v8;
    if (v9 >> 3 != 2) {
      break;
    }
    if (v9 != 16) {
      goto LABEL_13;
    }
    int v15 = v8 + 1;
    uint64_t v16 = *v8;
    if ((*v8 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    int v17 = *v15;
    uint64_t v16 = v16 + (v17 << 7) - 128;
    if ((v17 & 0x80000000) == 0)
    {
      int v15 = v8 + 2;
LABEL_25:
      uint64_t v26 = v15;
      *(unsigned char *)(a1 + 48) = v16 != 0;
      int v5 = 1;
      goto LABEL_36;
    }
    uint64_t v24 = (char *)sub_188C138((uint64_t)v8, v16);
    uint64_t v26 = v24;
    *(unsigned char *)(a1 + 48) = v25 != 0;
    int v5 = 1;
    if (!v24) {
      goto LABEL_41;
    }
LABEL_36:
    if (sub_11947B8((uint64_t)a3, &v26, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 >> 3 == 1 && v9 == 10)
  {
    uint64_t v18 = v8 - 1;
    while (1)
    {
      uint64_t v19 = (unsigned __int8 *)(v18 + 1);
      uint64_t v26 = v18 + 1;
      uint64_t v20 = *(_DWORD **)(a1 + 40);
      if (v20 && (uint64_t v21 = *(int *)(a1 + 32), (int)v21 < *v20))
      {
        *(_DWORD *)(a1 + 32) = v21 + 1;
        uint64_t v22 = *(void *)&v20[2 * v21 + 2];
      }
      else
      {
        uint64_t v23 = sub_15C62B0(*(void *)(a1 + 24));
        uint64_t v22 = sub_188CDC8(a1 + 24, v23);
        uint64_t v19 = (unsigned __int8 *)v26;
      }
      uint64_t v18 = (char *)sub_15C8C80(a3, v22, v19);
      uint64_t v26 = v18;
      if (!v18) {
        goto LABEL_41;
      }
      if (*(void *)a3 <= (unint64_t)v18 || *v18 != 10) {
        goto LABEL_36;
      }
    }
  }
LABEL_13:
  if (v9) {
    BOOL v13 = (v9 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v7)
    {
      int v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      int v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = v26;
    }
    uint64_t v26 = (char *)sub_1885AC0(v9, v14, v8, a3);
    if (!v26) {
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_41:
  uint64_t v26 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v26;
}

char *sub_15D9520(uint64_t a1, char *__dst, void *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        unsigned int v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        unsigned int v10 = __dst + 2;
      }
      __dst = sub_15C45D0(v8, v10, a3);
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    char v11 = *(unsigned char *)(a1 + 48);
    *__dst = 16;
    __dst[1] = v11;
    __dst += 2;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return __dst;
  }
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v14 + 31) < 0)
  {
    int v15 = *(void **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    int v15 = (void *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  if (*a3 - (void)__dst >= (int)v16)
  {
    uint64_t v17 = (int)v16;
    memcpy(__dst, v15, (int)v16);
    __dst += v17;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v15, v16, __dst);
}

uint64_t sub_15D96A0(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15C4894(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t result = v2 + 2;
  }
  else {
    uint64_t result = v2;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    result += v11;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void *sub_15D975C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackImageUploadParameters");
}

void *sub_15D976C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1638B40(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D97EC(void *a1)
{
  sub_15D976C(a1);

  operator delete();
}

char *sub_15D9824(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  if ((sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v6 = v19 + 1;
      unsigned int v7 = *v19;
      if (*v19 < 0)
      {
        unsigned int v8 = v7 + (*v6 << 7);
        unsigned int v7 = v8 - 128;
        if (*v6 < 0)
        {
          uint64_t v6 = (char *)sub_188C180((uint64_t)v19, v8 - 128);
          unsigned int v7 = v9;
        }
        else
        {
          uint64_t v6 = v19 + 2;
        }
      }
      uint64_t v19 = v6;
      if (v7 == 10)
      {
        uint64_t v12 = v6 - 1;
        while (1)
        {
          BOOL v13 = (unsigned __int8 *)(v12 + 1);
          uint64_t v19 = v12 + 1;
          unint64_t v14 = *(_DWORD **)(a1 + 32);
          if (v14 && (uint64_t v15 = *(int *)(a1 + 24), (int)v15 < *v14))
          {
            *(_DWORD *)(a1 + 24) = v15 + 1;
            uint64_t v16 = *(void *)&v14[2 * v15 + 2];
          }
          else
          {
            uint64_t v17 = sub_15F8DF8(*(void *)(a1 + 16));
            uint64_t v16 = sub_188CDC8(a1 + 16, (uint64_t)v17);
            BOOL v13 = (unsigned __int8 *)v19;
          }
          uint64_t v12 = (char *)sub_15D99C4(a3, v16, v13);
          uint64_t v19 = v12;
          if (!v12) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
            goto LABEL_24;
          }
        }
      }
      if (!v7 || (v7 & 7) == 4) {
        break;
      }
      if (*v5)
      {
        uint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        uint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        uint64_t v6 = v19;
      }
      uint64_t v19 = (char *)sub_1885AC0(v7, v11, v6, a3);
      if (!v19) {
        return 0;
      }
LABEL_24:
      if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
        return v19;
      }
    }
    if (v6)
    {
      a3[10].i32[0] = v7 - 1;
      return v19;
    }
    return 0;
  }
  return v19;
}

uint64_t sub_15D99C4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D9E94(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15D9A54(uint64_t a1, char *__dst, void *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        unint64_t v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        unint64_t v10 = __dst + 2;
      }
      __dst = sub_15DA0FC(v8, v10, a3);
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return __dst;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    unint64_t v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    unint64_t v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if (*a3 - (void)__dst >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(__dst, v14, (int)v15);
    __dst += v16;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v14, v15, __dst);
}

uint64_t sub_15D9B98(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15DA238(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

uint64_t sub_15D9C48()
{
  return 1;
}

void *sub_15D9C50@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackImageUploadResult");
}

uint64_t sub_15D9C60(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_13;
    }
  }
  else if (v4)
  {
    goto LABEL_13;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(uint64_t **)(a1 + 40) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 40));
  }
  if (*(void *)(a1 + 48)) {
    sub_1881C6C((void ***)(a1 + 48));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_13:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15D9D3C(uint64_t a1)
{
  sub_15D9C60(a1);

  operator delete();
}

std::string *sub_15D9D74(std::string *result)
{
  uint64_t v1 = result;
  int v2 = result->__r_.__value_.__r.__words[2];
  if ((v2 & 0xF) == 0) {
    goto LABEL_20;
  }
  if (v2)
  {
    unint64_t v3 = result[1].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_11;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_11;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_11:
  unint64_t v4 = result[1].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    **(unsigned char **)unint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_15;
    }
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  *(unsigned char *)unint64_t v4 = 0;
  *(unsigned char *)(v4 + 23) = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_15:
  unint64_t v5 = result[1].__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  *(unsigned char *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 23) = 0;
  if ((v2 & 8) != 0) {
LABEL_19:
  }
    uint64_t result = sub_1882020(result + 2, &off_2540BA8);
LABEL_20:
  std::string::value_type v7 = v1->__r_.__value_.__s.__data_[8];
  p_std::string::size_type size = &v1->__r_.__value_.__l.__size_;
  *((_DWORD *)p_size + 2) = 0;
  if (v7)
  {
    return (std::string *)sub_188B4AC((uint64_t *)p_size);
  }
  return result;
}

uint64_t sub_15D9E94(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v22 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v22, a3[11].i32[1])) {
    return *(void *)v22;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    std::string::value_type v7 = (char *)(*(void *)v22 + 1);
    unsigned int v8 = **(unsigned char **)v22;
    if ((char)**(unsigned char **)v22 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        std::string::value_type v7 = (char *)sub_188C180(*(uint64_t *)v22, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        std::string::value_type v7 = (char *)(*(void *)v22 + 2);
      }
    }
    *(void *)uint64_t v22 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        unint64_t v13 = (void *)(a1 + 24);
        goto LABEL_21;
      case 2u:
        if (v8 != 18) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        unint64_t v13 = (void *)(a1 + 32);
        goto LABEL_21;
      case 3u:
        if (v8 != 26) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        unint64_t v13 = (void *)(a1 + 40);
LABEL_21:
        uint64_t v16 = (std::string *)sub_1880F84(v13, v12);
        goto LABEL_26;
      case 4u:
        if (v8 != 34) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          uint64_t v18 = (uint64_t *)*v18;
        }
        uint64_t v16 = (std::string *)sub_1881EAC((uint64_t *)(a1 + 48), &off_2540BA8, v18);
LABEL_26:
        uint64_t v19 = (void *)sub_188C244(v16, *(char **)v22, (uint64_t)a3);
        goto LABEL_27;
      default:
LABEL_30:
        if (v8) {
          BOOL v20 = (v8 & 7) == 4;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20)
        {
          if (*v6)
          {
            uint64_t v21 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v21 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            std::string::value_type v7 = *(char **)v22;
          }
          uint64_t v19 = sub_1885AC0(v8, v21, v7, a3);
LABEL_27:
          *(void *)uint64_t v22 = v19;
          if (!v19) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, (char **)v22, a3[11].i32[1])) {
            return *(void *)v22;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v22;
    }
  }
}

char *sub_15DA0FC(uint64_t a1, char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_10:
  unint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) != 0) {
LABEL_5:
  }
    unint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15DA238(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_17;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) == 0)
  {
    if ((v1 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  unint64_t v14 = *(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  uint64_t v16 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 8) != 0)
  {
LABEL_14:
    unint64_t v9 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    uint64_t v11 = *(void *)(v9 + 8);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = v10;
    }
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v2 += v18;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

std::string *sub_15DA3A4(std::string *result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) == 0) {
    goto LABEL_19;
  }
  if (v4)
  {
    uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    unint64_t v6 = (std::string **)&result[1];
    std::string::size_type size = v3->__r_.__value_.__l.__size_;
    uint64_t v8 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
    if (size) {
      uint64_t v8 = (uint64_t *)*v8;
    }
    uint64_t result = sub_1881DF4(v6, v5, v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v9 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
  std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
  uint64_t v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10) {
    uint64_t v11 = (uint64_t *)*v11;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__l.__size_, v9, v11);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v12 = (long long *)(*(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL);
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
  std::string::size_type v13 = v3->__r_.__value_.__l.__size_;
  unint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v13) {
    unint64_t v14 = (uint64_t *)*v14;
  }
  uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__r.__words[2], v12, v14);
  if ((v4 & 8) != 0)
  {
LABEL_16:
    uint64_t v15 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
    std::string::size_type v16 = v3->__r_.__value_.__l.__size_;
    unint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      unint64_t v17 = (uint64_t *)*v17;
    }
    uint64_t result = sub_1881E1C((std::string **)&v3[2], v15, v17);
  }
LABEL_19:
  uint64_t v18 = *(void *)(a2 + 8);
  if (v18)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v18 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15DA4F0()
{
  return 1;
}

void *sub_15DA4F8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackImageUploadInfo");
}

uint64_t sub_15DA508(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15DA5C0(uint64_t a1)
{
  sub_15DA508(a1);

  operator delete();
}

uint64_t sub_15DA5F8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15DA674(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)BOOL v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)BOOL v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        std::string::size_type v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          std::string::size_type v16 = (uint64_t *)*v16;
        }
        unint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      std::string::size_type v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        std::string::size_type v16 = (uint64_t *)*v16;
      }
      unint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      unint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      std::string::size_type v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      std::string::size_type v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v20;
    }
    unint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)BOOL v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)BOOL v20 = 0;
  return *(void *)v20;
}

char *sub_15DA81C(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    int v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15DA908(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15DA9E4()
{
  return 1;
}

void *sub_15DA9EC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackImageIdMapEntry");
}

uint64_t sub_15DA9FC(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15DAAB4(uint64_t a1)
{
  sub_15DA9FC(a1);

  operator delete();
}

uint64_t sub_15DAAEC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15DAB68(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)BOOL v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)BOOL v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        std::string::size_type v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          std::string::size_type v16 = (uint64_t *)*v16;
        }
        unint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      std::string::size_type v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        std::string::size_type v16 = (uint64_t *)*v16;
      }
      unint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      unint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      std::string::size_type v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      std::string::size_type v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v20;
    }
    unint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)BOOL v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)BOOL v20 = 0;
  return *(void *)v20;
}

char *sub_15DAD10(uint64_t a1, char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15DADFC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15DAED8()
{
  return 1;
}

void *sub_15DAEE0@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackClientImageInfo");
}

uint64_t sub_15DAEF0(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_253FFF0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15B2B90(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_15B2B90(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15DAFC0(uint64_t a1)
{
  sub_15DAEF0(a1);

  operator delete();
}

uint64_t sub_15DAFF8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_15B2C80(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_15B2C80(*(void *)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_15DB068(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v18 = a2;
  if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
    return v18;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v18 + 1;
    unsigned int v8 = *v18;
    if (*v18 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v18, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v18 + 2;
      }
    }
    uint64_t v18 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void **)(a1 + 32);
        if (!v15)
        {
          std::string::size_type v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            std::string::size_type v16 = (void *)*v16;
          }
          uint64_t v15 = sub_15C1B30((uint64_t)v16);
          *(void *)(a1 + 32) = v15;
LABEL_29:
          uint64_t v7 = v18;
        }
LABEL_30:
        unint64_t v14 = (char *)sub_125CF74(a3, (uint64_t)v15, (unsigned __int8 *)v7);
        goto LABEL_31;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v15 = *(void **)(a1 + 24);
      if (!v15)
      {
        unint64_t v17 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unint64_t v17 = (void *)*v17;
        }
        uint64_t v15 = sub_15C1B30((uint64_t)v17);
        *(void *)(a1 + 24) = v15;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      std::string::size_type v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      std::string::size_type v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v18;
    }
    unint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
LABEL_31:
    uint64_t v18 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
      return v18;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v18;
  }
  return 0;
}

char *sub_15DB21C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_15B2EA4(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      uint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      uint64_t v12 = v4 + 2;
    }
    char v4 = sub_15B2EA4(v10, v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    std::string::size_type v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    std::string::size_type v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15DB39C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_15B2F90(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15B2F90(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_15DB474(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        uint64_t v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          uint64_t v7 = (void *)*v7;
        }
        std::string::pointer data = (std::string *)sub_15C1B30((uint64_t)v7);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 24)) {
        unint64_t v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        unint64_t v8 = &off_253F2A0;
      }
      uint64_t result = sub_11EC100(data, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      uint64_t v9 = (std::string *)v3[1].__r_.__value_.__l.__size_;
      if (!v9)
      {
        std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
        unsigned int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          unsigned int v11 = (void *)*v11;
        }
        uint64_t v9 = (std::string *)sub_15C1B30((uint64_t)v11);
        v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      }
      if (*(void *)(a2 + 32)) {
        uint64_t v12 = *(uint64_t (****)())(a2 + 32);
      }
      else {
        uint64_t v12 = &off_253F2A0;
      }
      uint64_t result = sub_11EC100(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15DB570()
{
  return 1;
}

void *sub_15DB578@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.RapProfileInfo");
}

uint64_t sub_15DB588(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 24) = 0;
  if (*(unsigned char *)(result + 16)) {
    uint64_t result = sub_15FBF3C(*(void *)(result + 40));
  }
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  *(_DWORD *)(v2 + 8) = 0;
  if (v3)
  {
    return sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

uint64_t sub_15DB5E8(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 24) = 0;
  if (*(unsigned char *)(result + 16)) {
    uint64_t result = sub_15FBF84(*(void *)(result + 40));
  }
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  *(_DWORD *)(v2 + 8) = 0;
  if (v3)
  {
    return sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

void *sub_15DB648(void *a1)
{
  char v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15DB6D8((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_1638BC0(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void ***sub_15DB6D8(uint64_t a1)
{
  char v3 = *(uint64_t **)(a1 + 48);
  uint64_t result = (void ***)(a1 + 48);
  if (v3 != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_2540018)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4)
    {
      sub_15DAEF0(v4);
      operator delete();
    }
    uint64_t v5 = *(void *)(a1 + 64);
    if (v5)
    {
      sub_1621F70(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      sub_1622FF4(v6);
      operator delete();
    }
    uint64_t result = *(void ****)(a1 + 80);
    if (result)
    {
      sub_15D2430((uint64_t)result);
      operator delete();
    }
  }
  return result;
}

void sub_15DB7BC(void *a1)
{
  sub_15DB648(a1);

  operator delete();
}

uint64_t sub_15DB7F4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v31 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
    return *(void *)v31;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v31 + 1);
    unsigned int v8 = **(unsigned char **)v31;
    if ((char)**(unsigned char **)v31 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v31, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v31 + 2);
      }
    }
    *(void *)uint64_t v31 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          uint64_t v12 = (uint64_t *)*v12;
        }
        uint64_t v13 = (std::string *)sub_1880F84((void *)(a1 + 48), v12);
        uint64_t v14 = (uint64_t)sub_188C244(v13, *(char **)v31, (uint64_t)a3);
        goto LABEL_54;
      case 2u:
        if (v8 != 18) {
          goto LABEL_47;
        }
        unint64_t v15 = v7 - 1;
        while (1)
        {
          std::string::size_type v16 = v15 + 1;
          *(void *)uint64_t v31 = v15 + 1;
          uint64_t v17 = *(_DWORD **)(a1 + 40);
          if (v17 && (uint64_t v18 = *(int *)(a1 + 32), (int)v18 < *v17))
          {
            *(_DWORD *)(a1 + 32) = v18 + 1;
            uint64_t v19 = *(void *)&v17[2 * v18 + 2];
          }
          else
          {
            BOOL v20 = sub_15F8E80(*(void *)(a1 + 24));
            uint64_t v19 = sub_188CDC8(a1 + 24, (uint64_t)v20);
            std::string::size_type v16 = *(unsigned __int8 **)v31;
          }
          unint64_t v15 = (unsigned __int8 *)sub_15DBB6C(a3, v19, v16);
          *(void *)uint64_t v31 = v15;
          if (!v15) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
            goto LABEL_55;
          }
        }
      case 3u:
        if (v8 != 26) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v21 = *(void **)(a1 + 56);
        if (!v21)
        {
          uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v22 = (void *)*v22;
          }
          uint64_t v21 = sub_15F8F88((uint64_t)v22);
          *(void *)(a1 + 56) = v21;
          uint64_t v7 = *(unsigned __int8 **)v31;
        }
        uint64_t v14 = (uint64_t)sub_15DBBFC(a3, (uint64_t)v21, v7);
        goto LABEL_54;
      case 4u:
        if (v8 != 34) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v23 = *(void **)(a1 + 64);
        if (!v23)
        {
          uint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v24 = (void *)*v24;
          }
          uint64_t v23 = sub_1623750((uint64_t)v24);
          *(void *)(a1 + 64) = v23;
          uint64_t v7 = *(unsigned __int8 **)v31;
        }
        uint64_t v14 = (uint64_t)sub_15DBC8C(a3, (uint64_t)v23, v7);
        goto LABEL_54;
      case 5u:
        if (v8 != 42) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v25 = *(void **)(a1 + 72);
        if (!v25)
        {
          uint64_t v26 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v26 = (void *)*v26;
          }
          uint64_t v25 = sub_16238E8((uint64_t)v26);
          *(void *)(a1 + 72) = v25;
          uint64_t v7 = *(unsigned __int8 **)v31;
        }
        uint64_t v14 = (uint64_t)sub_15DBD1C(a3, (uint64_t)v25, v7);
        goto LABEL_54;
      case 6u:
        if (v8 != 50) {
          goto LABEL_47;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v27 = *(void **)(a1 + 80);
        if (!v27)
        {
          uint64_t v28 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v28 = (void *)*v28;
          }
          uint64_t v27 = sub_15F8824((uint64_t)v28);
          *(void *)(a1 + 80) = v27;
          uint64_t v7 = *(unsigned __int8 **)v31;
        }
        uint64_t v14 = sub_15DBDAC(a3, (uint64_t)v27, v7);
        goto LABEL_54;
      default:
LABEL_47:
        if (v8) {
          BOOL v29 = (v8 & 7) == 4;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29)
        {
          if (*v6)
          {
            uint64_t v30 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = *(unsigned __int8 **)v31;
          }
          uint64_t v14 = (uint64_t)sub_1885AC0(v8, v30, (char *)v7, a3);
LABEL_54:
          *(void *)uint64_t v31 = v14;
          if (!v14) {
            return 0;
          }
LABEL_55:
          if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
            return *(void *)v31;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v31;
    }
  }
}

uint64_t sub_15DBB6C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DA674(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15DBBFC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DB068(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15DBC8C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_1622068(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15DBD1C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_16230EC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15DBDAC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15D26F8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15DBE3C(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      char *v4 = 18;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      v4[1] = v10;
      if (v10 > 0x7F) {
        uint64_t v11 = sub_188A9CC(v10, v4 + 1);
      }
      else {
        uint64_t v11 = v4 + 2;
      }
      uint64_t v4 = sub_15DA81C(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v12 = *(void *)(a1 + 56);
    char *v4 = 26;
    unsigned int v13 = *(_DWORD *)(v12 + 20);
    v4[1] = v13;
    if (v13 > 0x7F) {
      uint64_t v14 = sub_188A9CC(v13, v4 + 1);
    }
    else {
      uint64_t v14 = v4 + 2;
    }
    uint64_t v4 = sub_15DB21C(v12, (unint64_t)v14, a3);
    if ((v6 & 4) == 0)
    {
LABEL_13:
      if ((v6 & 8) == 0) {
        goto LABEL_14;
      }
      goto LABEL_28;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_13;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v15 = *(void *)(a1 + 64);
  char *v4 = 34;
  unsigned int v16 = *(_DWORD *)(v15 + 20);
  v4[1] = v16;
  if (v16 > 0x7F) {
    uint64_t v17 = sub_188A9CC(v16, v4 + 1);
  }
  else {
    uint64_t v17 = v4 + 2;
  }
  uint64_t v4 = sub_162231C(v15, v17, a3);
  if ((v6 & 8) == 0)
  {
LABEL_14:
    if ((v6 & 0x10) == 0) {
      goto LABEL_40;
    }
    goto LABEL_34;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v18 = *(void *)(a1 + 72);
  char *v4 = 42;
  unsigned int v19 = *(_DWORD *)(v18 + 20);
  v4[1] = v19;
  if (v19 > 0x7F) {
    BOOL v20 = sub_188A9CC(v19, v4 + 1);
  }
  else {
    BOOL v20 = v4 + 2;
  }
  uint64_t v4 = sub_16233A0(v18, v20, a3);
  if ((v6 & 0x10) != 0)
  {
LABEL_34:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v21 = *(void *)(a1 + 80);
    char *v4 = 50;
    unsigned int v22 = *(_DWORD *)(v21 + 20);
    v4[1] = v22;
    if (v22 > 0x7F) {
      uint64_t v23 = sub_188A9CC(v22, v4 + 1);
    }
    else {
      uint64_t v23 = v4 + 2;
    }
    uint64_t v4 = sub_15D2A70(v21, v23, a3);
  }
LABEL_40:
  uint64_t v24 = *(void *)(a1 + 8);
  if ((v24 & 1) == 0) {
    return v4;
  }
  unint64_t v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v26 + 31) < 0)
  {
    uint64_t v27 = *(void **)(v26 + 8);
    uint64_t v28 = *(void *)(v26 + 16);
  }
  else
  {
    uint64_t v27 = (void *)(v26 + 8);
    LODWORD(v28) = *(unsigned __int8 *)(v26 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v28)
  {
    uint64_t v29 = (int)v28;
    memcpy(v4, v27, (int)v28);
    v4 += v29;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v27, v28, v4);
}

uint64_t sub_15DC144(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15DA908(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 0x1F) == 0) {
    goto LABEL_16;
  }
  if (v8)
  {
    unint64_t v12 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v14 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v13;
    }
    v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 2) == 0)
    {
LABEL_12:
      if ((v8 & 4) == 0) {
        goto LABEL_13;
      }
LABEL_22:
      uint64_t v16 = sub_16224D4(*(void *)(a1 + 64));
      v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v8 & 8) == 0)
      {
LABEL_14:
        if ((v8 & 0x10) == 0) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v15 = sub_15DB39C(*(void *)(a1 + 56));
  v2 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_13:
  if ((v8 & 8) == 0) {
    goto LABEL_14;
  }
LABEL_23:
  uint64_t v17 = sub_1623558(*(void *)(a1 + 72));
  v2 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x10) != 0)
  {
LABEL_15:
    uint64_t v9 = sub_15D2C38(*(void *)(a1 + 80));
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_16:
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v18 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v18 + 31) < 0) {
      uint64_t v19 = *(void *)(v18 + 16);
    }
    else {
      uint64_t v19 = *(unsigned __int8 *)(v18 + 31);
    }
    v2 += v19;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

std::string *sub_15DC318(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = result + 1;
    uint64_t data_low = SLODWORD(result[1].__r_.__value_.__l.__data_);
    sub_188C80C((unsigned int *)&result[1], data_low + v4);
    std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v5->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    uint64_t result = (std::string *)memcpy((void *)(size + 4 * data_low), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  if (*(unsigned char *)(a2 + 16))
  {
    int v8 = *(uint64_t (****)(uint64_t))(a2 + 40);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    uint64_t v9 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    if (!v9)
    {
      std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
      uint64_t v9 = (std::string *)sub_1623650((uint64_t)v11);
      v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
      int v8 = *(uint64_t (****)(uint64_t))(a2 + 40);
    }
    if (v8) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = &off_2541900;
    }
    uint64_t result = sub_142E300(v9, (uint64_t)v12);
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15DC410(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = result + 1;
    uint64_t data_low = SLODWORD(result[1].__r_.__value_.__l.__data_);
    sub_188C80C((unsigned int *)&result[1], data_low + v4);
    std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v5->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    uint64_t result = (std::string *)memcpy((void *)(size + 4 * data_low), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  if (*(unsigned char *)(a2 + 16))
  {
    int v8 = *(uint64_t (****)(uint64_t))(a2 + 40);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    uint64_t v9 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    if (!v9)
    {
      std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
      uint64_t v9 = (std::string *)sub_16237E8((uint64_t)v11);
      v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
      int v8 = *(uint64_t (****)(uint64_t))(a2 + 40);
    }
    if (v8) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = &off_2541978;
    }
    uint64_t result = sub_15D361C(v9, (uint64_t)v12);
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15DC508()
{
  return 1;
}

void *sub_15DC510@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackSubmissionResult");
}

uint64_t sub_15DC520(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  sub_1889DE8((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15DC5C8(uint64_t a1)
{
  sub_15DC520(a1);

  operator delete();
}

uint64_t sub_15DC600(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)unint64_t v26 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v26, a3[11].i32[1])) {
    return *(void *)v26;
  }
  uint64_t v6 = (uint64_t **)(a1 + 24);
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    int v8 = (char *)(*(void *)v26 + 1);
    unsigned int v9 = **(unsigned char **)v26;
    if ((char)**(unsigned char **)v26 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        int v8 = (char *)sub_188C180(*(uint64_t *)v26, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        int v8 = (char *)(*(void *)v26 + 2);
      }
    }
    *(void *)unint64_t v26 = v8;
    if (v9 >> 3 == 2) {
      break;
    }
    if (v9 >> 3 != 1 || v9 != 10) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      uint64_t v24 = (uint64_t *)*v24;
    }
    uint64_t v25 = (std::string *)sub_1880F84((void *)(a1 + 48), v24);
    uint64_t v15 = (void *)sub_188C244(v25, *(char **)v26, (uint64_t)a3);
LABEL_35:
    *(void *)unint64_t v26 = v15;
    if (!v15) {
      goto LABEL_41;
    }
LABEL_36:
    if (sub_11947B8((uint64_t)a3, (char **)v26, a3[11].i32[1])) {
      return *(void *)v26;
    }
  }
  if (v9 == 18)
  {
    uint64_t v16 = v8 - 1;
    while (1)
    {
      uint64_t v17 = (char *)(v16 + 1);
      *(void *)unint64_t v26 = v16 + 1;
      unint64_t v18 = *(_DWORD **)(a1 + 40);
      if (v18 && (uint64_t v19 = *(int *)(a1 + 32), (int)v19 < *v18))
      {
        *(_DWORD *)(a1 + 32) = v19 + 1;
        BOOL v20 = *(std::string **)&v18[2 * v19 + 2];
      }
      else
      {
        if (!*v6) {
          operator new();
        }
        void *v22 = v21;
        v22[1] = sub_3A6EDC;
        void *v21 = 0;
        v21[1] = 0;
        int v21[2] = 0;
        BOOL v20 = (std::string *)sub_188CDC8(a1 + 24, (uint64_t)v21);
        uint64_t v17 = *(char **)v26;
      }
      uint64_t v16 = sub_188C244(v20, v17, (uint64_t)a3);
      *(void *)unint64_t v26 = v16;
      if (!v16) {
        goto LABEL_41;
      }
      if (*(void *)a3 <= (unint64_t)v16 || *v16 != 18) {
        goto LABEL_36;
      }
    }
  }
LABEL_13:
  if (v9) {
    BOOL v13 = (v9 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v7)
    {
      uint64_t v14 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      int v8 = *(char **)v26;
    }
    uint64_t v15 = sub_1885AC0(v9, v14, v8, a3);
    goto LABEL_35;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    return *(void *)v26;
  }
LABEL_41:
  *(void *)unint64_t v26 = 0;
  return *(void *)v26;
}

char *sub_15DC854(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  if (*(unsigned char *)(a1 + 16)) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      unsigned int v9 = *(void **)(*(void *)(a1 + 40) + v7 + 8);
      if (*((char *)v9 + 23) < 0)
      {
        int64_t v10 = v9[1];
        if (v10 > 127) {
          goto LABEL_14;
        }
      }
      else
      {
        int64_t v10 = *((unsigned __int8 *)v9 + 23);
      }
      if (*a3 - (void)v4 + 14 >= v10)
      {
        char *v4 = 18;
        v4[1] = v10;
        if (*((char *)v9 + 23) < 0) {
          unsigned int v9 = (void *)*v9;
        }
        unsigned int v11 = v4 + 2;
        memcpy(v11, v9, v10);
        int v4 = &v11[v10];
        goto LABEL_12;
      }
LABEL_14:
      int v4 = (char *)sub_188A868(a3, 2, (uint64_t)v9, v4);
LABEL_12:
      v7 += 8;
    }
    while (v8 != v7);
  }
  uint64_t v12 = *(void *)(a1 + 8);
  if ((v12 & 1) == 0) {
    return v4;
  }
  unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v14 + 31) < 0)
  {
    uint64_t v15 = *(void **)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
  }
  else
  {
    uint64_t v15 = (void *)(v14 + 8);
    LODWORD(v16) = *(unsigned __int8 *)(v14 + 31);
  }
  if (*a3 - (void)v4 >= (int)v16)
  {
    uint64_t v17 = (int)v16;
    memcpy(v4, v15, (int)v16);
    v4 += v17;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v15, v16, v4);
}

uint64_t sub_15DC9E0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 40) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v7 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v3 += v13;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15DCAC0()
{
  return 1;
}

void *sub_15DCAC8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackCommonCorrections");
}

void *sub_15DCAD8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DE8(a1 + 4);
  sub_1889DA8((uint64_t)(a1 + 2));
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15DCB5C(void *a1)
{
  sub_15DCAD8(a1);

  operator delete();
}

uint64_t sub_15DCB94(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t result = sub_188CC00(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (v4)
  {
    return sub_188B4AC(v3);
  }
  return result;
}

uint64_t sub_15DCBE8(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v32 = a2;
  if ((sub_11947B8((uint64_t)a3, (char **)v32, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (uint64_t **)(a1 + 32);
    unint64_t v7 = (void *)(a1 + 8);
    do
    {
      uint64_t v8 = (char *)(*(void *)v32 + 1);
      unsigned int v9 = **(unsigned char **)v32;
      if ((char)**(unsigned char **)v32 < 0)
      {
        int v10 = *v8;
        unsigned int v11 = v9 + (v10 << 7);
        unsigned int v9 = v11 - 128;
        if (v10 < 0)
        {
          uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v32, v11 - 128);
          unsigned int v9 = v12;
        }
        else
        {
          uint64_t v8 = (char *)(*(void *)v32 + 2);
        }
      }
      *(void *)uint64_t v32 = v8;
      if (v9 >> 3 == 2)
      {
        if (v9 == 18)
        {
          unsigned int v22 = v8 - 1;
          while (1)
          {
            uint64_t v23 = (char *)(v22 + 1);
            *(void *)uint64_t v32 = v22 + 1;
            uint64_t v24 = *(_DWORD **)(a1 + 48);
            if (v24 && (uint64_t v25 = *(int *)(a1 + 40), (int)v25 < *v24))
            {
              *(_DWORD *)(a1 + 40) = v25 + 1;
              unint64_t v26 = *(std::string **)&v24[2 * v25 + 2];
            }
            else
            {
              if (!*v6) {
                operator new();
              }
              *uint64_t v28 = v27;
              v28[1] = sub_3A6EDC;
              void *v27 = 0;
              v27[1] = 0;
              int v27[2] = 0;
              unint64_t v26 = (std::string *)sub_188CDC8(a1 + 32, (uint64_t)v27);
              uint64_t v23 = *(char **)v32;
            }
            unsigned int v22 = sub_188C244(v26, v23, (uint64_t)a3);
            *(void *)uint64_t v32 = v22;
            if (!v22) {
              goto LABEL_57;
            }
            if (*(void *)a3 <= (unint64_t)v22 || *v22 != 18) {
              goto LABEL_52;
            }
          }
        }
      }
      else if (v9 >> 3 == 1)
      {
        if (v9 == 8)
        {
          uint64_t v13 = (uint64_t)(v8 - 1);
          while (1)
          {
            *(void *)uint64_t v32 = v13 + 1;
            unint64_t v14 = *(unsigned __int8 *)(v13 + 1);
            uint64_t v15 = (char *)(v13 + 2);
            if (*(char *)(v13 + 1) < 0)
            {
              int v16 = *v15;
              int v17 = v14 + (v16 << 7);
              unint64_t v14 = (v17 - 128);
              if (v16 < 0)
              {
                *(void *)uint64_t v32 = sub_188C138(v13 + 1, (v17 - 128));
                if (!*(void *)v32) {
                  goto LABEL_57;
                }
                unint64_t v14 = v20;
                goto LABEL_16;
              }
              uint64_t v15 = (char *)(v13 + 3);
            }
            *(void *)uint64_t v32 = v15;
LABEL_16:
            if (sub_13556D8(v14))
            {
              uint64_t v18 = *(unsigned int *)(a1 + 16);
              if (v18 == *(_DWORD *)(a1 + 20))
              {
                int v19 = v18 + 1;
                sub_188C80C((unsigned int *)(a1 + 16), v18 + 1);
                *(_DWORD *)(*(void *)(a1 + 24) + 4 * v18) = v14;
              }
              else
              {
                *(_DWORD *)(*(void *)(a1 + 24) + 4 * v18) = v14;
                int v19 = v18 + 1;
              }
              *(_DWORD *)(a1 + 16) = v19;
            }
            else
            {
              if (*v7) {
                uint64_t v21 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
              }
              else {
                uint64_t v21 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              }
              sub_188C020(1, v14, v21);
            }
            uint64_t v13 = *(void *)v32;
            if (*(void *)a3 <= *(void *)v32 || **(unsigned char **)v32 != 8) {
              goto LABEL_52;
            }
          }
        }
        if (v9 == 10)
        {
          *(void *)&long long v33 = a1 + 16;
          *((void *)&v33 + 1) = sub_13556D8;
          uint64_t v34 = a1 + 8;
          int v35 = 1;
          uint64_t v29 = sub_1112E88((uint64_t)a3, v8, &v33);
          goto LABEL_51;
        }
      }
      if (v9) {
        BOOL v30 = (v9 & 7) == 4;
      }
      else {
        BOOL v30 = 1;
      }
      if (v30)
      {
        if (v8)
        {
          a3[10].i32[0] = v9 - 1;
          return *(void *)v32;
        }
LABEL_57:
        *(void *)uint64_t v32 = 0;
        return *(void *)v32;
      }
      if (*v7)
      {
        uint64_t v31 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        uint64_t v31 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        uint64_t v8 = *(char **)v32;
      }
      uint64_t v29 = sub_1885AC0(v9, v31, v8, a3);
LABEL_51:
      *(void *)uint64_t v32 = v29;
      if (!v29) {
        goto LABEL_57;
      }
LABEL_52:
      ;
    }
    while (!sub_11947B8((uint64_t)a3, (char **)v32, a3[11].i32[1]));
  }
  return *(void *)v32;
}

char *sub_15DCF30(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v8 = *(int *)(*(void *)(a1 + 24) + 4 * i);
      *__dst = 8;
      __dst[1] = v8;
      if (v8 > 0x7F)
      {
        __dst[1] = v8 | 0x80;
        unint64_t v9 = v8 >> 7;
        __dst[2] = v8 >> 7;
        __dst += 3;
        if (v8 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v10 = v9 >> 14;
            v9 >>= 7;
            *__dst++ = v9;
          }
          while (v10);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 40);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 8 * v11;
    do
    {
      unint64_t v14 = *(void **)(*(void *)(a1 + 48) + v12 + 8);
      if (*((char *)v14 + 23) < 0)
      {
        int64_t v15 = v14[1];
        if (v15 > 127) {
          goto LABEL_21;
        }
      }
      else
      {
        int64_t v15 = *((unsigned __int8 *)v14 + 23);
      }
      if (*(void *)a3 - (void)__dst + 14 >= v15)
      {
        *__dst = 18;
        __dst[1] = v15;
        if (*((char *)v14 + 23) < 0) {
          unint64_t v14 = (void *)*v14;
        }
        int v16 = __dst + 2;
        memcpy(v16, v14, v15);
        __dst = &v16[v15];
        goto LABEL_19;
      }
LABEL_21:
      __dst = (char *)sub_188A868(a3, 2, (uint64_t)v14, __dst);
LABEL_19:
      v12 += 8;
    }
    while (v13 != v12);
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if ((v17 & 1) == 0) {
    return __dst;
  }
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v19 + 31) < 0)
  {
    unint64_t v20 = *(void **)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 16);
  }
  else
  {
    unint64_t v20 = (void *)(v19 + 8);
    LODWORD(v21) = *(unsigned __int8 *)(v19 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v21)
  {
    uint64_t v22 = (int)v21;
    memcpy(__dst, v20, (int)v21);
    __dst += v22;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v20, v21, __dst);
}

uint64_t sub_15DD134(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = 0;
    do
    {
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 4 * v2);
      if (v4 < 0) {
        uint64_t v5 = 10;
      }
      else {
        uint64_t v5 = (9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6;
      }
      v3 += v5;
      ++v2;
    }
    while (v1 != v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v6 = v3 + v1;
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  uint64_t v8 = v6 + v7;
  if ((int)v7 >= 1)
  {
    unint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v12 = *(void *)(v10 + 8);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v11;
      }
      v8 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      --v7;
    }
    while (v7);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    v8 += v16;
  }
  *(_DWORD *)(a1 + 56) = v8;
  return v8;
}

std::string *sub_15DD21C(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = &result->__r_.__value_.__r.__words[2];
    uint64_t v6 = SLODWORD(result->__r_.__value_.__r.__words[2]);
    sub_188C80C((unsigned int *)&result->__r_.__value_.__r.__words[2], v6 + v4);
    std::string::pointer data = v3[1].__r_.__value_.__l.__data_;
    *(_DWORD *)v5 += *(_DWORD *)(a2 + 16);
    uint64_t result = (std::string *)memcpy(&data[4 * v6], *(const void **)(a2 + 24), 4 * *(int *)(a2 + 16));
  }
  int v8 = *(_DWORD *)(a2 + 40);
  if (v8)
  {
    unint64_t v9 = (const std::string **)(*(void *)(a2 + 48) + 8);
    uint64_t v10 = (std::string **)sub_188CCE4((uint64_t)&v3[1].__r_.__value_.__l.__size_, *(_DWORD *)(a2 + 40));
    uint64_t result = (std::string *)sub_188FB98((uint64_t)&v3[1].__r_.__value_.__l.__size_, v10, v9, v8, *(_DWORD *)v3[2].__r_.__value_.__l.__data_ - LODWORD(v3[1].__r_.__value_.__r.__words[2]));
    int v11 = LODWORD(v3[1].__r_.__value_.__r.__words[2]) + v8;
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v11;
    uint64_t v12 = (int *)v3[2].__r_.__value_.__l.__data_;
    if (*v12 < v11) {
      *uint64_t v12 = v11;
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15DD330()
{
  return 1;
}

void *sub_15DD338@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.UserPath");
}

uint64_t sub_15DD348(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15DD3EC((uint64_t (***)())a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_12C21B4((void *)(a1 + 64));
  sub_1889DA8(a1 + 48);
  sub_12C2034((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t (***sub_15DD3EC(uint64_t (***result)()))()
{
  if (result != &off_25400E8)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[11];
    if (v2)
    {
      sub_126DDE8(v2);
      operator delete();
    }
    uint64_t v3 = (uint64_t)v1[12];
    if (v3)
    {
      sub_126A7DC(v3);
      operator delete();
    }
    uint64_t v4 = (uint64_t)v1[13];
    if (v4)
    {
      sub_12696C8(v4);
      operator delete();
    }
    uint64_t v5 = (uint64_t)v1[14];
    if (v5)
    {
      sub_15DEEC4(v5);
      operator delete();
    }
    uint64_t v6 = (uint64_t)v1[15];
    if (v6)
    {
      sub_15DEA4C(v6);
      operator delete();
    }
    if (v1[16])
    {
      sub_1307230();
      operator delete();
    }
    uint64_t result = (uint64_t (***)())v1[17];
    if (result)
    {
      sub_15DCAD8(result);
      operator delete();
    }
  }
  return result;
}

void sub_15DD518(uint64_t a1)
{
  sub_15DD348(a1);

  operator delete();
}

uint64_t sub_15DD550(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15DD5CC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15DD648(uint64_t a1, char *a2, int32x2_t *a3)
{
  unint64_t v70 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v70, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    int v8 = v70 + 1;
    unsigned int v9 = *v70;
    if (*v70 < 0)
    {
      int v10 = *v8;
      unsigned int v11 = v9 + (v10 << 7);
      unsigned int v9 = v11 - 128;
      if (v10 < 0)
      {
        int v8 = (char *)sub_188C180((uint64_t)v70, v11 - 128);
        unsigned int v9 = v12;
      }
      else
      {
        int v8 = v70 + 2;
      }
    }
    unint64_t v70 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_125;
        }
        uint64_t v13 = v8 + 1;
        unint64_t v14 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v15 = *v13;
        int v16 = v14 + (v15 << 7);
        unint64_t v14 = (v16 - 128);
        if (v15 < 0)
        {
          unint64_t v70 = (char *)sub_188C138((uint64_t)v8, (v16 - 128));
          if (!v70) {
            goto LABEL_142;
          }
          unint64_t v14 = v62;
        }
        else
        {
          uint64_t v13 = v8 + 2;
LABEL_13:
          unint64_t v70 = v13;
        }
        if (sub_125D158(v14))
        {
          *(_DWORD *)(a1 + 16) |= 0x800u;
          *(_DWORD *)(a1 + 168) = v14;
        }
        else
        {
          if (*v7) {
            unint64_t v69 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            unint64_t v69 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(1, v14, v69);
        }
        goto LABEL_133;
      case 2u:
        if (v9 != 18) {
          goto LABEL_125;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v17 = *(void *)(a1 + 88);
        if (!v17)
        {
          uint64_t v18 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v18 = (void *)*v18;
          }
          uint64_t v17 = sub_1283F94((uint64_t)v18);
          *(void *)(a1 + 88) = v17;
          int v8 = v70;
        }
        unint64_t v19 = (char *)sub_12614F0(a3, v17, (unsigned __int8 *)v8);
        goto LABEL_132;
      case 3u:
        if (v9 != 26) {
          goto LABEL_125;
        }
        unint64_t v20 = v8 - 1;
        while (1)
        {
          uint64_t v21 = (unsigned __int8 *)(v20 + 1);
          unint64_t v70 = v20 + 1;
          uint64_t v22 = *(_DWORD **)(a1 + 40);
          if (v22 && (uint64_t v23 = *(int *)(a1 + 32), (int)v23 < *v22))
          {
            *(_DWORD *)(a1 + 32) = v23 + 1;
            uint64_t v24 = *(void *)&v22[2 * v23 + 2];
          }
          else
          {
            uint64_t v25 = sub_1284334(*(void *)(a1 + 24));
            uint64_t v24 = sub_188CDC8(a1 + 24, (uint64_t)v25);
            uint64_t v21 = (unsigned __int8 *)v70;
          }
          unint64_t v20 = sub_1265EFC(a3, v24, v21);
          unint64_t v70 = v20;
          if (!v20) {
            goto LABEL_142;
          }
          if (*(void *)a3 <= (unint64_t)v20 || *v20 != 26) {
            goto LABEL_133;
          }
        }
      case 4u:
        if (v9 == 32)
        {
          unint64_t v26 = v8 - 1;
          while (1)
          {
            unint64_t v70 = v26 + 1;
            unint64_t v27 = v26[1];
            uint64_t v28 = v26 + 2;
            if (v26[1] < 0)
            {
              int v29 = *v28;
              int v30 = v27 + (v29 << 7);
              unint64_t v27 = (v30 - 128);
              if (v29 < 0)
              {
                unint64_t v70 = (char *)sub_188C138((uint64_t)(v26 + 1), (v30 - 128));
                if (!v70) {
                  goto LABEL_142;
                }
                unint64_t v27 = v33;
                goto LABEL_38;
              }
              uint64_t v28 = v26 + 3;
            }
            unint64_t v70 = v28;
LABEL_38:
            if (sub_125D168(v27))
            {
              uint64_t v31 = *(unsigned int *)(a1 + 48);
              if (v31 == *(_DWORD *)(a1 + 52))
              {
                int v32 = v31 + 1;
                sub_188C80C((unsigned int *)(a1 + 48), v31 + 1);
                *(_DWORD *)(*(void *)(a1 + 56) + 4 * v31) = v27;
              }
              else
              {
                *(_DWORD *)(*(void *)(a1 + 56) + 4 * v31) = v27;
                int v32 = v31 + 1;
              }
              *(_DWORD *)(a1 + 48) = v32;
            }
            else
            {
              if (*v7) {
                uint64_t v34 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
              }
              else {
                uint64_t v34 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              }
              sub_188C020(4, v27, v34);
            }
            unint64_t v26 = v70;
            if (*(void *)a3 <= (unint64_t)v70 || *v70 != 32) {
              goto LABEL_133;
            }
          }
        }
        if (v9 == 34)
        {
          *(void *)&long long v71 = a1 + 48;
          *((void *)&v71 + 1) = sub_125D168;
          uint64_t v72 = a1 + 8;
          int v73 = 4;
          unint64_t v19 = sub_1112E88((uint64_t)a3, v8, &v71);
LABEL_132:
          unint64_t v70 = v19;
          if (!v19) {
            goto LABEL_142;
          }
LABEL_133:
          if (sub_11947B8((uint64_t)a3, &v70, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
LABEL_125:
        if (v9) {
          BOOL v67 = (v9 & 7) == 4;
        }
        else {
          BOOL v67 = 1;
        }
        if (!v67)
        {
          if (*v7)
          {
            uint64_t v68 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v68 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            int v8 = v70;
          }
          unint64_t v19 = (char *)sub_1885AC0(v9, v68, v8, a3);
          goto LABEL_132;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_142:
        }
          unint64_t v70 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v70;
      case 5u:
        if (v9 != 41) {
          goto LABEL_125;
        }
        v5 |= 0x80u;
        *(void *)(a1 + 144) = *(void *)v8;
        unint64_t v70 = v8 + 8;
        goto LABEL_133;
      case 6u:
        if (v9 != 50) {
          goto LABEL_125;
        }
        int v35 = v8 - 1;
        while (1)
        {
          uint64_t v36 = (unsigned __int8 *)(v35 + 1);
          unint64_t v70 = v35 + 1;
          uint64_t v37 = *(_DWORD **)(a1 + 80);
          if (v37 && (uint64_t v38 = *(int *)(a1 + 72), (int)v38 < *v37))
          {
            *(_DWORD *)(a1 + 72) = v38 + 1;
            uint64_t v39 = *(void *)&v37[2 * v38 + 2];
          }
          else
          {
            uint64_t v40 = sub_1283E18(*(void *)(a1 + 64));
            uint64_t v39 = sub_188CDC8(a1 + 64, (uint64_t)v40);
            uint64_t v36 = (unsigned __int8 *)v70;
          }
          int v35 = sub_12660AC(a3, v39, v36);
          unint64_t v70 = v35;
          if (!v35) {
            goto LABEL_142;
          }
          if (*(void *)a3 <= (unint64_t)v35 || *v35 != 50) {
            goto LABEL_133;
          }
        }
      case 7u:
        if (v9 != 56) {
          goto LABEL_125;
        }
        v5 |= 0x100u;
        uint64_t v41 = v8 + 1;
        uint64_t v42 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_68;
        }
        int v43 = *v41;
        uint64_t v42 = v42 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          int v63 = (char *)sub_188C138((uint64_t)v8, v42);
          unint64_t v70 = v63;
          *(void *)(a1 + 152) = v64;
          if (!v63) {
            goto LABEL_142;
          }
        }
        else
        {
          uint64_t v41 = v8 + 2;
LABEL_68:
          unint64_t v70 = v41;
          *(void *)(a1 + 152) = v42;
        }
        goto LABEL_133;
      case 8u:
        if (v9 != 64) {
          goto LABEL_125;
        }
        uint64_t v44 = v8 + 1;
        LODWORD(v45) = *v8;
        if (*v8 < 0)
        {
          uint64_t v45 = v45 + (*v44 << 7) - 128;
          if (*v44 < 0) {
            uint64_t v44 = (char *)sub_188C138((uint64_t)v8, v45);
          }
          else {
            uint64_t v44 = v8 + 2;
          }
        }
        v5 |= 0x200u;
        unint64_t v70 = v44;
        *(_DWORD *)(a1 + 160) = -(v45 & 1) ^ (v45 >> 1);
        if (!v44) {
          goto LABEL_142;
        }
        goto LABEL_133;
      case 9u:
        if (v9 != 74) {
          goto LABEL_125;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v46 = *(void **)(a1 + 96);
        if (!v46)
        {
          unint64_t v47 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v47 = (void *)*v47;
          }
          uint64_t v46 = sub_1283BA0((uint64_t)v47);
          *(void *)(a1 + 96) = v46;
          int v8 = v70;
        }
        unint64_t v19 = (char *)sub_126637C(a3, (uint64_t)v46, (unsigned __int8 *)v8);
        goto LABEL_132;
      case 0xAu:
        if (v9 != 82) {
          goto LABEL_125;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v48 = *(void *)(a1 + 104);
        if (!v48)
        {
          uint64_t v49 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v49 = (void *)*v49;
          }
          sub_1283A8C((uint64_t)v49);
          uint64_t v48 = v50;
          *(void *)(a1 + 104) = v50;
          int v8 = v70;
        }
        unint64_t v19 = (char *)sub_126652C(a3, v48, (unsigned __int8 *)v8);
        goto LABEL_132;
      case 0xBu:
        if (v9 != 90) {
          goto LABEL_125;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v51 = *(void **)(a1 + 112);
        if (!v51)
        {
          int v52 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            int v52 = (void *)*v52;
          }
          uint64_t v51 = sub_15F9358((uint64_t)v52);
          *(void *)(a1 + 112) = v51;
          int v8 = v70;
        }
        unint64_t v19 = (char *)sub_15DDE74(a3, (uint64_t)v51, (unsigned __int8 *)v8);
        goto LABEL_132;
      case 0xCu:
        if (v9 != 98) {
          goto LABEL_125;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v53 = *(void **)(a1 + 120);
        if (!v53)
        {
          uint64_t v54 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v54 = (void *)*v54;
          }
          uint64_t v53 = sub_15F92D4((uint64_t)v54);
          *(void *)(a1 + 120) = v53;
          int v8 = v70;
        }
        unint64_t v19 = (char *)sub_15DDF04(a3, (uint64_t)v53, (unsigned __int8 *)v8);
        goto LABEL_132;
      case 0xDu:
        if (v9 != 106) {
          goto LABEL_125;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v55 = *(void *)(a1 + 128);
        if (!v55)
        {
          int v56 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            int v56 = (void *)*v56;
          }
          uint64_t v55 = sub_130BE18((uint64_t)v56);
          *(void *)(a1 + 128) = v55;
          int v8 = v70;
        }
        unint64_t v19 = (char *)sub_126625C(a3, v55, (unsigned __int8 *)v8);
        goto LABEL_132;
      case 0xEu:
        if (v9 != 112) {
          goto LABEL_125;
        }
        v5 |= 0x400u;
        uint64_t v57 = v8 + 1;
        uint64_t v58 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_107;
        }
        int v59 = *v57;
        uint64_t v58 = v58 + (v59 << 7) - 128;
        if (v59 < 0)
        {
          uint64_t v65 = (char *)sub_188C138((uint64_t)v8, v58);
          unint64_t v70 = v65;
          *(unsigned char *)(a1 + 164) = v66 != 0;
          if (!v65) {
            goto LABEL_142;
          }
        }
        else
        {
          uint64_t v57 = v8 + 2;
LABEL_107:
          unint64_t v70 = v57;
          *(unsigned char *)(a1 + 164) = v58 != 0;
        }
        goto LABEL_133;
      case 0xFu:
        if (v9 != 122) {
          goto LABEL_125;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v60 = *(void *)(a1 + 136);
        if (!v60)
        {
          uint64_t v61 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v61 = (void *)*v61;
          }
          uint64_t v60 = sub_15F9158((uint64_t)v61);
          *(void *)(a1 + 136) = v60;
          int v8 = v70;
        }
        unint64_t v19 = (char *)sub_12D598C(a3, v60, (unsigned __int8 *)v8);
        goto LABEL_132;
      default:
        goto LABEL_125;
    }
  }
}

uint64_t sub_15DDE74(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DEFB4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15DDF04(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DEB3C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15DDF94(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x800) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 168);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 88);
    unsigned char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 44);
    v4[1] = v11;
    if (v11 > 0x7F) {
      unsigned int v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      unsigned int v12 = v4 + 2;
    }
    uint64_t v4 = sub_126E168(v10, v12, a3);
  }
  int v13 = *(_DWORD *)(a1 + 32);
  if (v13)
  {
    for (int i = 0; i != v13; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 26;
      unsigned int v16 = *(_DWORD *)(v15 + 20);
      v4[1] = v16;
      if (v16 > 0x7F) {
        uint64_t v17 = sub_188A9CC(v16, v4 + 1);
      }
      else {
        uint64_t v17 = v4 + 2;
      }
      uint64_t v4 = sub_1271B94(v15, (unint64_t)v17, a3);
    }
  }
  uint64_t v18 = *(unsigned int *)(a1 + 48);
  if ((int)v18 >= 1)
  {
    for (uint64_t j = 0; j != v18; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v20 = *(int *)(*(void *)(a1 + 56) + 4 * j);
      unsigned char *v4 = 32;
      v4[1] = v20;
      if (v20 > 0x7F)
      {
        v4[1] = v20 | 0x80;
        unint64_t v21 = v20 >> 7;
        v4[2] = v20 >> 7;
        v4 += 3;
        if (v20 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v22 = v21 >> 14;
            v21 >>= 7;
            *v4++ = v21;
          }
          while (v22);
        }
      }
      else
      {
        v4 += 2;
      }
    }
  }
  if ((v6 & 0x80) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v23 = *(void *)(a1 + 144);
    unsigned char *v4 = 41;
    *(void *)(v4 + 1) = v23;
    v4 += 9;
  }
  int v24 = *(_DWORD *)(a1 + 72);
  if (v24)
  {
    for (int k = 0; k != v24; ++k)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 80) + 8 * k + 8);
      unsigned char *v4 = 50;
      unsigned int v27 = *(_DWORD *)(v26 + 20);
      v4[1] = v27;
      if (v27 > 0x7F) {
        uint64_t v28 = sub_188A9CC(v27, v4 + 1);
      }
      else {
        uint64_t v28 = v4 + 2;
      }
      uint64_t v4 = sub_126CDF4(v26, (unint64_t)v28, a3);
    }
  }
  if ((v6 & 0x100) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v29 = *(void *)(a1 + 152);
    unsigned char *v4 = 56;
    v4[1] = v29;
    if (v29 > 0x7F)
    {
      v4[1] = v29 | 0x80;
      unint64_t v30 = v29 >> 7;
      v4[2] = v29 >> 7;
      v4 += 3;
      if (v29 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v31 = v30 >> 14;
          v30 >>= 7;
          *v4++ = v30;
        }
        while (v31);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    int v32 = *(_DWORD *)(a1 + 160);
    unsigned char *v4 = 64;
    unsigned int v33 = (2 * v32) ^ (v32 >> 31);
    v4[1] = (2 * v32) ^ (v32 >> 31);
    if (v33 > 0x7F)
    {
      v4[1] = v33 | 0x80;
      unsigned int v34 = v33 >> 7;
      v4[2] = v33 >> 7;
      v4 += 3;
      if (v33 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v35 = v34 >> 14;
          v34 >>= 7;
          *v4++ = v34;
        }
        while (v35);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v36 = *(void *)(a1 + 96);
    unsigned char *v4 = 74;
    unsigned int v37 = *(_DWORD *)(v36 + 20);
    v4[1] = v37;
    if (v37 > 0x7F) {
      uint64_t v38 = sub_188A9CC(v37, v4 + 1);
    }
    else {
      uint64_t v38 = v4 + 2;
    }
    uint64_t v4 = sub_126AAF0(v36, v38, a3);
    if ((v6 & 4) == 0)
    {
LABEL_60:
      if ((v6 & 8) == 0) {
        goto LABEL_61;
      }
      goto LABEL_78;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_60;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v39 = *(void *)(a1 + 104);
  unsigned char *v4 = 82;
  unsigned int v40 = *(_DWORD *)(v39 + 20);
  v4[1] = v40;
  if (v40 > 0x7F) {
    uint64_t v41 = sub_188A9CC(v40, v4 + 1);
  }
  else {
    uint64_t v41 = v4 + 2;
  }
  uint64_t v4 = sub_1269CA0(v39, (unint64_t)v41, a3);
  if ((v6 & 8) == 0)
  {
LABEL_61:
    if ((v6 & 0x10) == 0) {
      goto LABEL_62;
    }
    goto LABEL_84;
  }
LABEL_78:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v42 = *(void *)(a1 + 112);
  unsigned char *v4 = 90;
  unsigned int v43 = *(_DWORD *)(v42 + 20);
  v4[1] = v43;
  if (v43 > 0x7F) {
    uint64_t v44 = sub_188A9CC(v43, v4 + 1);
  }
  else {
    uint64_t v44 = v4 + 2;
  }
  uint64_t v4 = sub_15DF15C(v42, v44, a3);
  if ((v6 & 0x10) == 0)
  {
LABEL_62:
    if ((v6 & 0x20) == 0) {
      goto LABEL_63;
    }
    goto LABEL_90;
  }
LABEL_84:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v45 = *(void *)(a1 + 120);
  unsigned char *v4 = 98;
  unsigned int v46 = *(_DWORD *)(v45 + 20);
  v4[1] = v46;
  if (v46 > 0x7F) {
    unint64_t v47 = sub_188A9CC(v46, v4 + 1);
  }
  else {
    unint64_t v47 = v4 + 2;
  }
  uint64_t v4 = sub_15DECE4(v45, v47, a3);
  if ((v6 & 0x20) == 0)
  {
LABEL_63:
    if ((v6 & 0x400) == 0) {
      goto LABEL_64;
    }
    goto LABEL_96;
  }
LABEL_90:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v48 = *(void *)(a1 + 128);
  unsigned char *v4 = 106;
  unsigned int v49 = *(_DWORD *)(v48 + 44);
  v4[1] = v49;
  if (v49 > 0x7F) {
    uint64_t v50 = sub_188A9CC(v49, v4 + 1);
  }
  else {
    uint64_t v50 = v4 + 2;
  }
  uint64_t v4 = sub_1307A10(v48, v50, a3);
  if ((v6 & 0x400) == 0)
  {
LABEL_64:
    if ((v6 & 0x40) == 0) {
      goto LABEL_105;
    }
    goto LABEL_99;
  }
LABEL_96:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v51 = *(unsigned char *)(a1 + 164);
  unsigned char *v4 = 112;
  v4[1] = v51;
  v4 += 2;
  if ((v6 & 0x40) != 0)
  {
LABEL_99:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v52 = *(void *)(a1 + 136);
    unsigned char *v4 = 122;
    unsigned int v53 = *(_DWORD *)(v52 + 56);
    v4[1] = v53;
    if (v53 > 0x7F) {
      uint64_t v54 = sub_188A9CC(v53, v4 + 1);
    }
    else {
      uint64_t v54 = v4 + 2;
    }
    uint64_t v4 = sub_15DCF30(v52, v54, a3);
  }
LABEL_105:
  uint64_t v55 = *(void *)(a1 + 8);
  if ((v55 & 1) == 0) {
    return v4;
  }
  unint64_t v57 = v55 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v57 + 31) < 0)
  {
    uint64_t v58 = *(void **)(v57 + 8);
    uint64_t v59 = *(void *)(v57 + 16);
  }
  else
  {
    uint64_t v58 = (void *)(v57 + 8);
    LODWORD(v59) = *(unsigned __int8 *)(v57 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v59)
  {
    uint64_t v60 = (int)v59;
    memcpy(v4, v58, (int)v59);
    v4 += v60;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v58, v59, v4);
}

uint64_t sub_15DE6C0(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_1271DD4(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    do
    {
      int v11 = *(_DWORD *)(*(void *)(a1 + 56) + 4 * v10);
      if (v11 < 0) {
        uint64_t v12 = 10;
      }
      else {
        uint64_t v12 = (9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6;
      }
      v9 += v12;
      ++v10;
    }
    while (v8 != v10);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v13 = *(int *)(a1 + 72);
  uint64_t v14 = v2 + v8 + v9 + v13;
  uint64_t v15 = *(void *)(a1 + 80);
  if (v15) {
    unsigned int v16 = (uint64_t *)(v15 + 8);
  }
  else {
    unsigned int v16 = 0;
  }
  if (v13)
  {
    uint64_t v17 = 8 * v13;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v19 = sub_126CF74(v18);
      v14 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6);
      v17 -= 8;
    }
    while (v17);
  }
  int v20 = *(_DWORD *)(a1 + 16);
  if ((_BYTE)v20)
  {
    if (v20)
    {
      uint64_t v27 = sub_126E400(*(void *)(a1 + 88));
      v14 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v20 & 2) == 0)
      {
LABEL_26:
        if ((v20 & 4) == 0) {
          goto LABEL_27;
        }
        goto LABEL_50;
      }
    }
    else if ((v20 & 2) == 0)
    {
      goto LABEL_26;
    }
    uint64_t v28 = sub_126AC78(*(void *)(a1 + 96));
    v14 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 4) == 0)
    {
LABEL_27:
      if ((v20 & 8) == 0) {
        goto LABEL_28;
      }
      goto LABEL_51;
    }
LABEL_50:
    uint64_t v29 = sub_126A094(*(void *)(a1 + 104));
    v14 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 8) == 0)
    {
LABEL_28:
      if ((v20 & 0x10) == 0) {
        goto LABEL_29;
      }
      goto LABEL_52;
    }
LABEL_51:
    uint64_t v30 = sub_15DF248(*(void *)(a1 + 112));
    v14 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 0x10) == 0)
    {
LABEL_29:
      if ((v20 & 0x20) == 0) {
        goto LABEL_30;
      }
      goto LABEL_53;
    }
LABEL_52:
    uint64_t v31 = sub_15DEDD0(*(void *)(a1 + 120));
    v14 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 0x20) == 0)
    {
LABEL_30:
      if ((v20 & 0x40) == 0) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
LABEL_53:
    uint64_t v32 = sub_1307F1C(*(void *)(a1 + 128));
    v14 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 0x40) == 0)
    {
LABEL_32:
      if ((v20 & 0x80) != 0) {
        v14 += 9;
      }
      goto LABEL_34;
    }
LABEL_31:
    uint64_t v21 = sub_15DD134(*(void *)(a1 + 136));
    v14 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_32;
  }
LABEL_34:
  if ((v20 & 0xF00) != 0)
  {
    if ((v20 & 0x100) != 0) {
      v14 += ((9 * (__clz(*(void *)(a1 + 152) | 1) ^ 0x3F) + 73) >> 6) + 1;
    }
    if ((v20 & 0x200) != 0) {
      v14 += ((9 * (__clz((2 * *(_DWORD *)(a1 + 160)) ^ (*(int *)(a1 + 160) >> 31) | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v20 & 0x400) != 0) {
      v14 += 2;
    }
    if ((v20 & 0x800) != 0)
    {
      int v22 = *(_DWORD *)(a1 + 168);
      uint64_t v23 = ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v22 >= 0) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 11;
      }
      v14 += v24;
    }
  }
  uint64_t v25 = *(void *)(a1 + 8);
  if (v25)
  {
    unint64_t v33 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v33 + 31) < 0) {
      uint64_t v34 = *(void *)(v33 + 16);
    }
    else {
      uint64_t v34 = *(unsigned __int8 *)(v33 + 31);
    }
    v14 += v34;
  }
  *(_DWORD *)(a1 + 20) = v14;
  return v14;
}

void *sub_15DEA3C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackCommonContext");
}

uint64_t sub_15DEA4C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15DEB04(uint64_t a1)
{
  sub_15DEA4C(a1);

  operator delete();
}

uint64_t sub_15DEB3C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)int v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unsigned int v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unsigned int v16 = (uint64_t *)*v16;
        }
        uint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      unsigned int v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        unsigned int v16 = (uint64_t *)*v16;
      }
      uint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      uint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v20;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)int v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)int v20 = 0;
  return *(void *)v20;
}

char *sub_15DECE4(uint64_t a1, char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15DEDD0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15DEEAC()
{
  return 1;
}

void *sub_15DEEB4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.SearchCommonContext");
}

uint64_t sub_15DEEC4(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15DEF7C(uint64_t a1)
{
  sub_15DEEC4(a1);

  operator delete();
}

uint64_t sub_15DEFB4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)int v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unsigned int v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unsigned int v16 = (uint64_t *)*v16;
        }
        uint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      unsigned int v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        unsigned int v16 = (uint64_t *)*v16;
      }
      uint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      uint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v20;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)int v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)int v20 = 0;
  return *(void *)v20;
}

char *sub_15DF15C(uint64_t a1, char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15DF248(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15DF324()
{
  return 1;
}

void *sub_15DF32C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.SourceInfo");
}

uint64_t sub_15DF33C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t result = sub_1606B98(*(void *)(v1 + 32));
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    goto LABEL_13;
  }
  uint64_t result = sub_1606B24(*(void *)(result + 24));
  if ((v2 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t result = sub_1606C58(*(void *)(v1 + 40));
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    uint64_t result = sub_1606CD4(*(void *)(v1 + 48));
LABEL_7:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DF3D8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16)) {
    uint64_t result = sub_15FBF3C(*(void *)(result + 24));
  }
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  *(_DWORD *)(v2 + 8) = 0;
  if (v3)
  {
    return sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

uint64_t sub_15DF434(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16)) {
    uint64_t result = sub_15FBF84(*(void *)(result + 24));
  }
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  *(_DWORD *)(v2 + 8) = 0;
  if (v3)
  {
    return sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

void *sub_15DF490(void *a1)
{
  char v3 = a1 + 1;
  uint64_t v2 = a1[1];
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15DF514((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t sub_15DF514(uint64_t result)
{
  if ((uint64_t (***)())result != &off_25401E8)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void **)(result + 24);
    if (v2)
    {
      sub_15E9434(v2);
      operator delete();
    }
    uint64_t v3 = v1[4];
    if (v3)
    {
      sub_15EA248(v3);
      operator delete();
    }
    uint64_t v4 = v1[5];
    if (v4)
    {
      sub_15EC638(v4);
      operator delete();
    }
    uint64_t v5 = v1[6];
    if (v5)
    {
      sub_15EC108(v5);
      operator delete();
    }
    uint64_t v6 = v1[7];
    if (v6)
    {
      sub_15ED8F4(v6);
      operator delete();
    }
    uint64_t v7 = v1[8];
    if (v7)
    {
      sub_15F0264(v7);
      operator delete();
    }
    uint64_t v8 = v1[9];
    if (v8)
    {
      sub_15F11B4(v8);
      operator delete();
    }
    uint64_t v9 = v1[10];
    if (v9)
    {
      sub_15F1848(v9);
      operator delete();
    }
    unsigned int v10 = (void *)v1[11];
    if (v10)
    {
      sub_15C6490(v10);
      operator delete();
    }
    uint64_t v11 = v1[12];
    if (v11)
    {
      sub_160699C(v11);
      operator delete();
    }
    uint64_t v12 = v1[13];
    if (v12)
    {
      sub_15F5494(v12);
      operator delete();
    }
    uint64_t v13 = v1[14];
    if (v13)
    {
      sub_15F4050(v13);
      operator delete();
    }
    uint64_t v14 = v1[15];
    if (v14)
    {
      sub_15F69C8(v14);
      operator delete();
    }
    uint64_t v15 = (void *)v1[16];
    if (v15)
    {
      sub_15F71F8(v15);
      operator delete();
    }
    uint64_t v16 = v1[17];
    if (v16)
    {
      sub_15F7570(v16);
      operator delete();
    }
    uint64_t v17 = (void *)v1[18];
    if (v17)
    {
      sub_15F7AA0(v17);
      operator delete();
    }
    uint64_t v18 = v1[19];
    if (v18)
    {
      sub_1621B78(v18);
      operator delete();
    }
    uint64_t v19 = v1[20];
    if (v19)
    {
      sub_1622BFC(v19);
      operator delete();
    }
    uint64_t v20 = v1[21];
    if (v20)
    {
      sub_15F7D4C(v20);
      operator delete();
    }
    uint64_t result = v1[22];
    if (result)
    {
      sub_15F80E4(result);
      operator delete();
    }
  }
  return result;
}

void sub_15DF7E0(void *a1)
{
  sub_15DF490(a1);

  operator delete();
}

uint64_t sub_15DF818(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_14:
    uint64_t result = sub_175FE78(*(void *)(v1 + 32));
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  uint64_t result = sub_15E377C(*(void *)(result + 24));
  if ((v2 & 2) != 0) {
    goto LABEL_14;
  }
LABEL_4:
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_15:
  uint64_t result = sub_182B368(*(void *)(v1 + 40));
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    uint64_t result = sub_15E95BC(*(void *)(v1 + 48));
LABEL_7:
  if ((v2 & 0x30) != 0)
  {
    *(unsigned char *)(v1 + 60) = 0;
    *(_DWORD *)(v1 + 56) = 0;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DF8C0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1627DF0(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v1 + 64) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = sub_162D688(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 56) = 0;
  }
  int v8 = *(_DWORD *)(v1 + 16);
  if ((v8 & 0xF) == 0) {
    goto LABEL_15;
  }
  if ((v8 & 1) == 0)
  {
    if ((v8 & 2) == 0) {
      goto LABEL_12;
    }
LABEL_20:
    uint64_t result = sub_175FE78(*(void *)(v1 + 80));
    if ((v8 & 4) == 0)
    {
LABEL_13:
      if ((v8 & 8) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  uint64_t result = sub_15EA3E8(*(void *)(v1 + 72));
  if ((v8 & 2) != 0) {
    goto LABEL_20;
  }
LABEL_12:
  if ((v8 & 4) == 0) {
    goto LABEL_13;
  }
LABEL_21:
  uint64_t result = sub_1264DA0(*(void *)(v1 + 88));
  if ((v8 & 8) != 0) {
LABEL_14:
  }
    uint64_t result = sub_182B368(*(void *)(v1 + 96));
LABEL_15:
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v9 = v1 + 8;
  *(_DWORD *)(v9 + 96) = 0;
  *(_DWORD *)(v9 + 8) = 0;
  if (v10)
  {
    return sub_188B4AC((uint64_t *)v9);
  }
  return result;
}

uint64_t sub_15DF9B8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_15EC740(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 32);
      char v4 = *(unsigned char *)(v3 + 8);
      uint64_t result = v3 + 8;
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 8) = 0;
      if (v4) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

uint64_t sub_15DFA38(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_1264FD4(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_1260A38(*(void *)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DFAA8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_15ED9FC(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_15EDB5C(*(void *)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DFB1C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_7;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t result = sub_175FE78(*(void *)(v1 + 32));
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    goto LABEL_13;
  }
  uint64_t result = sub_15E39C0(*(void *)(result + 24));
  if ((v2 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t result = sub_15F03EC(*(void *)(v1 + 40));
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    uint64_t result = sub_182B368(*(void *)(v1 + 48));
LABEL_7:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DFBB8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_1260340(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = (uint64_t)sub_1260464(*(unsigned char **)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DFC2C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_15F1950(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_15F1AA4(*(void *)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DFC9C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_15F559C(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_15F567C(*(void *)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15DFD0C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_15E95BC(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 32);
      char v4 = *(unsigned char *)(v3 + 8);
      uint64_t result = v3 + 8;
      *(_DWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 8) = 0;
      if (v4) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

unsigned char *sub_15DFD8C(unsigned char *result)
{
  uint64_t v1 = result;
  *((_DWORD *)result + 6) = 0;
  if (result[16]) {
    uint64_t result = sub_16CD894(*((void *)result + 5));
  }
  char v3 = v1[8];
  int v2 = v1 + 8;
  v2[42] = 0;
  *((_WORD *)v2 + 20) = 0;
  *((_DWORD *)v2 + 2) = 0;
  if (v3)
  {
    return (unsigned char *)sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

uint64_t sub_15DFDF4(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(unsigned char *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15DFE0C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_175FE78(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_182B368(*(void *)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t *sub_15DFE7C(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  if (v2) {
    return (uint64_t *)sub_188B4AC(result);
  }
  return result;
}

uint64_t sub_15DFE8C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v1 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v3) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15DFED0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v1 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v3) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15DFF14(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v59 = a2;
  if (sub_11947B8((uint64_t)a3, &v59, a3[11].i32[1])) {
    return v59;
  }
  char v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = v59 + 1;
    unsigned int v8 = *v59;
    if (*v59 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v59, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v59 + 2;
      }
    }
    uint64_t v59 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 24);
        if (!v11)
        {
          uint64_t v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v12 = (void *)*v12;
          }
          sub_15F9980((uint64_t)v12);
          uint64_t v11 = v13;
          *(void *)(a1 + 24) = v13;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E06E4(a3, v11, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 2u:
        if (v8 != 18) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 32);
        if (!v15)
        {
          uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v16 = (void *)*v16;
          }
          sub_15F9A00((uint64_t)v16);
          uint64_t v15 = v17;
          *(void *)(a1 + 32) = v17;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0774(a3, v15, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 3u:
        if (v8 != 26) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v18 = *(void **)(a1 + 40);
        if (!v18)
        {
          uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v19 = (void *)*v19;
          }
          uint64_t v18 = sub_15F9BE8((uint64_t)v19);
          *(void *)(a1 + 40) = v18;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0804(a3, (uint64_t)v18, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 4u:
        if (v8 != 34) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v20 = *(void **)(a1 + 48);
        if (!v20)
        {
          uint64_t v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v21 = (void *)*v21;
          }
          uint64_t v20 = sub_15F9B6C((uint64_t)v21);
          *(void *)(a1 + 48) = v20;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0894(a3, (uint64_t)v20, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 5u:
        if (v8 != 42) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v22 = *(void *)(a1 + 56);
        if (!v22)
        {
          uint64_t v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v23 = (void *)*v23;
          }
          uint64_t v22 = sub_15F9D7C((uint64_t)v23);
          *(void *)(a1 + 56) = v22;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0924(a3, v22, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 6u:
        if (v8 != 50) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v24 = *(void *)(a1 + 64);
        if (!v24)
        {
          uint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v25 = (void *)*v25;
          }
          sub_15F9F80((uint64_t)v25);
          uint64_t v24 = v26;
          *(void *)(a1 + 64) = v26;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E09B4(a3, v24, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 7u:
        if (v8 != 58) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v27 = *(void *)(a1 + 72);
        if (!v27)
        {
          uint64_t v28 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v28 = (void *)*v28;
          }
          uint64_t v27 = sub_15FA078((uint64_t)v28);
          *(void *)(a1 + 72) = v27;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0A44(a3, v27, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 8u:
        if (v8 != 66) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x80u;
        uint64_t v29 = *(void **)(a1 + 80);
        if (!v29)
        {
          uint64_t v30 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v30 = (void *)*v30;
          }
          uint64_t v29 = sub_15FA0F8((uint64_t)v30);
          *(void *)(a1 + 80) = v29;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0AD4(a3, (uint64_t)v29, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 9u:
        if (v8 != 74) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x100u;
        uint64_t v31 = *(void *)(a1 + 88);
        if (!v31)
        {
          uint64_t v32 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v32 = (void *)*v32;
          }
          sub_15CB898((uint64_t)v32);
          uint64_t v31 = v33;
          *(void *)(a1 + 88) = v33;
          uint64_t v7 = v59;
        }
        uint64_t v14 = (char *)sub_152DFD0(a3, v31, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0xAu:
        if (v8 != 82) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x200u;
        uint64_t v34 = *(void *)(a1 + 96);
        if (!v34)
        {
          unsigned int v35 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unsigned int v35 = (void *)*v35;
          }
          sub_160A950((uint64_t)v35);
          uint64_t v34 = v36;
          *(void *)(a1 + 96) = v36;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_12FF3F8(a3, v34, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0xBu:
        if (v8 != 90) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x400u;
        unsigned int v37 = *(void **)(a1 + 104);
        if (!v37)
        {
          uint64_t v38 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v38 = (void *)*v38;
          }
          unsigned int v37 = sub_15FA4E0((uint64_t)v38);
          *(void *)(a1 + 104) = v37;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0B64(a3, (uint64_t)v37, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0xCu:
        if (v8 != 98) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x800u;
        uint64_t v39 = *(void **)(a1 + 112);
        if (!v39)
        {
          unsigned int v40 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unsigned int v40 = (void *)*v40;
          }
          uint64_t v39 = sub_15FA338((uint64_t)v40);
          *(void *)(a1 + 112) = v39;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0BF4(a3, (uint64_t)v39, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0xDu:
        if (v8 != 106) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x1000u;
        uint64_t v41 = *(void *)(a1 + 120);
        if (!v41)
        {
          uint64_t v42 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v42 = (void *)*v42;
          }
          uint64_t v41 = sub_15FA66C((uint64_t)v42);
          *(void *)(a1 + 120) = v41;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0C84(a3, v41, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0xEu:
        if (v8 != 114) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x2000u;
        uint64_t v43 = *(void *)(a1 + 128);
        if (!v43)
        {
          uint64_t v44 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v44 = (void *)*v44;
          }
          uint64_t v43 = sub_15FA708((uint64_t)v44);
          *(void *)(a1 + 128) = v43;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0D14(a3, v43, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0xFu:
        if (v8 != 122) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x4000u;
        uint64_t v45 = *(void **)(a1 + 136);
        if (!v45)
        {
          unsigned int v46 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unsigned int v46 = (void *)*v46;
          }
          uint64_t v45 = sub_15FA784((uint64_t)v46);
          *(void *)(a1 + 136) = v45;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0DA4(a3, (uint64_t)v45, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0x10u:
        if (v8 != 130) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x8000u;
        uint64_t v47 = *(void *)(a1 + 144);
        if (!v47)
        {
          uint64_t v48 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v48 = (void *)*v48;
          }
          uint64_t v47 = sub_15FA800((uint64_t)v48);
          *(void *)(a1 + 144) = v47;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0E34(a3, v47, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0x11u:
        if (v8 != 138) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x10000u;
        unsigned int v49 = *(void **)(a1 + 152);
        if (!v49)
        {
          uint64_t v50 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v50 = (void *)*v50;
          }
          unsigned int v49 = sub_16236D8((uint64_t)v50);
          *(void *)(a1 + 152) = v49;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0EC4(a3, (uint64_t)v49, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0x12u:
        if (v8 != 146) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x20000u;
        char v51 = *(void **)(a1 + 160);
        if (!v51)
        {
          uint64_t v52 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v52 = (void *)*v52;
          }
          char v51 = sub_1623870((uint64_t)v52);
          *(void *)(a1 + 160) = v51;
          uint64_t v7 = v59;
        }
        uint64_t v14 = sub_15E0F54(a3, (uint64_t)v51, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0x13u:
        if (v8 != 154) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x40000u;
        unsigned int v53 = *(void **)(a1 + 168);
        if (!v53)
        {
          uint64_t v54 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v54 = (void *)*v54;
          }
          unsigned int v53 = sub_15FA878((uint64_t)v54);
          *(void *)(a1 + 168) = v53;
          uint64_t v7 = v59;
        }
        uint64_t v14 = (char *)sub_15E0FE4(a3, (uint64_t)v53, (unsigned __int8 *)v7);
        goto LABEL_136;
      case 0x14u:
        if (v8 != 162) {
          goto LABEL_129;
        }
        *(_DWORD *)(a1 + 16) |= 0x80000u;
        uint64_t v55 = *(void **)(a1 + 176);
        if (!v55)
        {
          int v56 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            int v56 = (void *)*v56;
          }
          uint64_t v55 = sub_15FA8FC((uint64_t)v56);
          *(void *)(a1 + 176) = v55;
          uint64_t v7 = v59;
        }
        uint64_t v14 = (char *)sub_15E1074(a3, (uint64_t)v55, (unsigned __int8 *)v7);
        goto LABEL_136;
      default:
LABEL_129:
        if (v8) {
          BOOL v57 = (v8 & 7) == 4;
        }
        else {
          BOOL v57 = 1;
        }
        if (!v57)
        {
          if (*v6)
          {
            uint64_t v58 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v58 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = v59;
          }
          uint64_t v14 = (char *)sub_1885AC0(v8, v58, v7, a3);
LABEL_136:
          uint64_t v59 = v14;
          if (!v14) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, &v59, a3[11].i32[1])) {
            return v59;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return v59;
    }
  }
}

char *sub_15E06E4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E96E8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0774(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15EA530(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0804(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15EC7E8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0894(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15EC210(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0924(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15EDC8C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E09B4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F0410(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0A44(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F12BC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0AD4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F1B04(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0B64(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F56C4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0BF4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F4170(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0C84(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F6AC0(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0D14(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F72A4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0DA4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F7678(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0E34(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F7B4C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0EC4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_1621C68(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E0F54(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_1622CEC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15E0FE4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F7E24(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15E1074(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F81BC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15E1104(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_15E9BC4(v7, (unint64_t)v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unsigned char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    uint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    uint64_t v12 = v4 + 2;
  }
  char v4 = sub_15EAA24(v10, (unint64_t)v12, a3);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_34:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 40);
  unsigned char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    uint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    uint64_t v15 = v4 + 2;
  }
  char v4 = sub_15ECAC8(v13, (unint64_t)v15, a3);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_40:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  unsigned char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 20);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  char v4 = sub_15EC3D0(v16, (unint64_t)v18, a3);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_46:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  unsigned char *v4 = 42;
  unsigned int v20 = *(_DWORD *)(v19 + 20);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  char v4 = sub_15EE014(v19, (unint64_t)v21, a3);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_58;
  }
LABEL_52:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v22 = *(void *)(a1 + 64);
  unsigned char *v4 = 50;
  unsigned int v23 = *(_DWORD *)(v22 + 20);
  v4[1] = v23;
  if (v23 > 0x7F) {
    uint64_t v24 = sub_188A9CC(v23, v4 + 1);
  }
  else {
    uint64_t v24 = v4 + 2;
  }
  char v4 = sub_15F07D4(v22, (unint64_t)v24, a3);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_64;
  }
LABEL_58:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v25 = *(void *)(a1 + 72);
  unsigned char *v4 = 58;
  unsigned int v26 = *(_DWORD *)(v25 + 20);
  v4[1] = v26;
  if (v26 > 0x7F) {
    uint64_t v27 = sub_188A9CC(v26, v4 + 1);
  }
  else {
    uint64_t v27 = v4 + 2;
  }
  char v4 = sub_15F1524(v25, (unint64_t)v27, a3);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }
LABEL_64:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v28 = *(void *)(a1 + 80);
  unsigned char *v4 = 66;
  unsigned int v29 = *(_DWORD *)(v28 + 20);
  v4[1] = v29;
  if (v29 > 0x7F) {
    uint64_t v30 = sub_188A9CC(v29, v4 + 1);
  }
  else {
    uint64_t v30 = v4 + 2;
  }
  char v4 = sub_15F1DE4(v28, (unint64_t)v30, a3);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_76;
  }
LABEL_70:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v31 = *(void *)(a1 + 88);
  unsigned char *v4 = 74;
  unsigned int v32 = *(_DWORD *)(v31 + 20);
  v4[1] = v32;
  if (v32 > 0x7F) {
    uint64_t v33 = sub_188A9CC(v32, v4 + 1);
  }
  else {
    uint64_t v33 = v4 + 2;
  }
  char v4 = sub_15C6FC8(v31, (unint64_t)v33, a3);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_82;
  }
LABEL_76:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v34 = *(void *)(a1 + 96);
  unsigned char *v4 = 82;
  unsigned int v35 = *(_DWORD *)(v34 + 20);
  v4[1] = v35;
  if (v35 > 0x7F) {
    uint64_t v36 = sub_188A9CC(v35, v4 + 1);
  }
  else {
    uint64_t v36 = v4 + 2;
  }
  char v4 = sub_1607270(v34, (unint64_t)v36, a3);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_88;
  }
LABEL_82:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v37 = *(void *)(a1 + 104);
  unsigned char *v4 = 90;
  unsigned int v38 = *(_DWORD *)(v37 + 20);
  v4[1] = v38;
  if (v38 > 0x7F) {
    uint64_t v39 = sub_188A9CC(v38, v4 + 1);
  }
  else {
    uint64_t v39 = v4 + 2;
  }
  char v4 = sub_15F59A4(v37, (unint64_t)v39, a3);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_94;
  }
LABEL_88:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v40 = *(void *)(a1 + 112);
  unsigned char *v4 = 98;
  unsigned int v41 = *(_DWORD *)(v40 + 20);
  v4[1] = v41;
  if (v41 > 0x7F) {
    uint64_t v42 = sub_188A9CC(v41, v4 + 1);
  }
  else {
    uint64_t v42 = v4 + 2;
  }
  char v4 = sub_15F43C0(v40, (unint64_t)v42, a3);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_100;
  }
LABEL_94:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v43 = *(void *)(a1 + 120);
  unsigned char *v4 = 106;
  unsigned int v44 = *(_DWORD *)(v43 + 20);
  v4[1] = v44;
  if (v44 > 0x7F) {
    uint64_t v45 = sub_188A9CC(v44, v4 + 1);
  }
  else {
    uint64_t v45 = v4 + 2;
  }
  char v4 = sub_15F6EA4(v43, (unint64_t)v45, a3);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_106;
  }
LABEL_100:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v46 = *(void *)(a1 + 128);
  unsigned char *v4 = 114;
  unsigned int v47 = *(_DWORD *)(v46 + 20);
  v4[1] = v47;
  if (v47 > 0x7F) {
    uint64_t v48 = sub_188A9CC(v47, v4 + 1);
  }
  else {
    uint64_t v48 = v4 + 2;
  }
  char v4 = sub_15F7434(v46, (unint64_t)v48, a3);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_112;
  }
LABEL_106:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v49 = *(void *)(a1 + 136);
  unsigned char *v4 = 122;
  unsigned int v50 = *(_DWORD *)(v49 + 20);
  v4[1] = v50;
  if (v50 > 0x7F) {
    char v51 = sub_188A9CC(v50, v4 + 1);
  }
  else {
    char v51 = v4 + 2;
  }
  char v4 = sub_15F7838(v49, (unint64_t)v51, a3);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_118;
  }
LABEL_112:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v52 = *(void *)(a1 + 144);
  *(_WORD *)char v4 = 386;
  unsigned int v53 = *(_DWORD *)(v52 + 16);
  v4[2] = v53;
  if (v53 > 0x7F) {
    uint64_t v54 = sub_188A9CC(v53, v4 + 2);
  }
  else {
    uint64_t v54 = v4 + 3;
  }
  char v4 = sub_15F7C4C(v52, v54, a3);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_124;
  }
LABEL_118:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v55 = *(void *)(a1 + 152);
  *(_WORD *)char v4 = 394;
  unsigned int v56 = *(_DWORD *)(v55 + 20);
  v4[2] = v56;
  if (v56 > 0x7F) {
    BOOL v57 = sub_188A9CC(v56, v4 + 2);
  }
  else {
    BOOL v57 = v4 + 3;
  }
  char v4 = sub_1621DC0(v55, (unint64_t)v57, a3);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_130;
  }
LABEL_124:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v58 = *(void *)(a1 + 160);
  *(_WORD *)char v4 = 402;
  unsigned int v59 = *(_DWORD *)(v58 + 20);
  v4[2] = v59;
  if (v59 > 0x7F) {
    uint64_t v60 = sub_188A9CC(v59, v4 + 2);
  }
  else {
    uint64_t v60 = v4 + 3;
  }
  char v4 = sub_1622E44(v58, (unint64_t)v60, a3);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_142;
    }
    goto LABEL_136;
  }
LABEL_130:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v61 = *(void *)(a1 + 168);
  *(_WORD *)char v4 = 410;
  unsigned int v62 = *(_DWORD *)(v61 + 20);
  v4[2] = v62;
  if (v62 > 0x7F) {
    int v63 = sub_188A9CC(v62, v4 + 2);
  }
  else {
    int v63 = v4 + 3;
  }
  char v4 = sub_15F7F7C(v61, v63, a3);
  if ((v6 & 0x80000) != 0)
  {
LABEL_136:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v64 = *(void *)(a1 + 176);
    *(_WORD *)char v4 = 418;
    unsigned int v65 = *(_DWORD *)(v64 + 20);
    v4[2] = v65;
    if (v65 > 0x7F) {
      uint64_t v66 = sub_188A9CC(v65, v4 + 2);
    }
    else {
      uint64_t v66 = v4 + 3;
    }
    char v4 = sub_15F8314(v64, v66, a3);
  }
LABEL_142:
  uint64_t v67 = *(void *)(a1 + 8);
  if ((v67 & 1) == 0) {
    return v4;
  }
  unint64_t v69 = v67 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v69 + 31) < 0)
  {
    unint64_t v70 = *(void **)(v69 + 8);
    uint64_t v71 = *(void *)(v69 + 16);
  }
  else
  {
    unint64_t v70 = (void *)(v69 + 8);
    LODWORD(v71) = *(unsigned __int8 *)(v69 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v71)
  {
    uint64_t v72 = (int)v71;
    memcpy(v4, v70, (int)v71);
    v4 += v72;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v70, v71, v4);
}

uint64_t sub_15E19DC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_15;
  }
  if (v2)
  {
    uint64_t v4 = sub_15E9ED4(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15EAE0C(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    uint64_t v7 = sub_15ECC48(*(void *)(a1 + 40));
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_10:
      if ((v2 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_27;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v8 = sub_15EC550(*(void *)(a1 + 48));
  v3 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v9 = sub_15EE21C(*(void *)(a1 + 56));
  v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v10 = sub_15F0AA4(*(void *)(a1 + 64));
  v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  uint64_t v11 = sub_15F172C(*(void *)(a1 + 72));
  v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v6 = sub_15F1F64(*(void *)(a1 + 80));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_15:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_42;
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t v12 = sub_15C73C4(*(void *)(a1 + 88));
    v3 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 0x200) == 0)
    {
LABEL_18:
      if ((v2 & 0x400) == 0) {
        goto LABEL_19;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_18;
  }
  uint64_t v13 = sub_1607544(*(void *)(a1 + 96));
  v3 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v14 = sub_15F5B24(*(void *)(a1 + 104));
  v3 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v15 = sub_15F4540(*(void *)(a1 + 112));
  v3 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v16 = sub_15F711C(*(void *)(a1 + 120));
  v3 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x2000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }
LABEL_36:
  uint64_t v17 = *(void *)(a1 + 128);
  uint64_t v18 = 2 * (*(_DWORD *)(v17 + 16) & 1);
  uint64_t v19 = *(void *)(v17 + 8);
  if (v19)
  {
    unint64_t v32 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v32 + 31) < 0) {
      uint64_t v33 = *(void *)(v32 + 16);
    }
    else {
      uint64_t v33 = *(unsigned __int8 *)(v32 + 31);
    }
    v18 += v33;
  }
  *(_DWORD *)(v17 + 20) = v18;
  v3 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v20 = sub_15F79B8(*(void *)(a1 + 136));
  v3 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x8000) == 0) {
    goto LABEL_42;
  }
LABEL_39:
  uint64_t v21 = *(void *)(a1 + 144);
  uint64_t v22 = *(void *)(v21 + 8);
  if (v22)
  {
    unint64_t v34 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v34 + 31) < 0) {
      uint64_t v23 = *(void *)(v34 + 16);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v34 + 31);
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  *(_DWORD *)(v21 + 16) = v23;
  v3 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_42:
  if ((v2 & 0xF0000) == 0) {
    goto LABEL_48;
  }
  if ((v2 & 0x10000) != 0)
  {
    uint64_t v27 = sub_1621ED0(*(void *)(a1 + 152));
    v3 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v2 & 0x20000) == 0)
    {
LABEL_45:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_46;
      }
      goto LABEL_52;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_45;
  }
  uint64_t v28 = sub_1622F54(*(void *)(a1 + 160));
  v3 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v2 & 0x40000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_52:
  uint64_t v29 = sub_15F8048(*(void *)(a1 + 168));
  v3 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v2 & 0x80000) != 0)
  {
LABEL_47:
    uint64_t v24 = sub_15F83E0(*(void *)(a1 + 176));
    v3 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_48:
  uint64_t v25 = *(void *)(a1 + 8);
  if (v25)
  {
    unint64_t v30 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v30 + 31) < 0) {
      uint64_t v31 = *(void *)(v30 + 16);
    }
    else {
      uint64_t v31 = *(unsigned __int8 *)(v30 + 31);
    }
    v3 += v31;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15E1EC4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x3F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          uint64_t v8 = (void *)*v8;
        }
        sub_15F946C((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v9 = &off_25402A0;
      }
      sub_15E4BE0(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_30;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = sub_178CDA8((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_25486C0;
    }
    sub_1760D4C(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_38;
    }
LABEL_30:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v14 = *(void *)(a1 + 40);
    if (!v14)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v14 = sub_1836E54((uint64_t)v16);
      *(void *)(a1 + 40) = v14;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v17 = *(uint64_t (****)())(a2 + 40);
    }
    else {
      uint64_t v17 = &off_254CA18;
    }
    sub_182C88C(v14, (uint64_t)v17);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_46;
    }
LABEL_38:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v18 = *(std::string **)(a1 + 48);
    if (!v18)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      uint64_t v18 = (std::string *)sub_15FA3B4((uint64_t)v20);
      *(void *)(a1 + 48) = v18;
    }
    if (*(void *)(a2 + 48)) {
      uint64_t v21 = *(uint64_t (****)(uint64_t))(a2 + 48);
    }
    else {
      uint64_t v21 = &off_25409C8;
    }
    sub_15EA054(v18, (uint64_t)v21);
    if ((v4 & 0x10) == 0)
    {
LABEL_7:
      if ((v4 & 0x20) == 0)
      {
LABEL_9:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_10;
      }
LABEL_8:
      *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
      goto LABEL_9;
    }
LABEL_46:
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E209C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_12C2BE4((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 64) + 8);
    uint64_t v11 = (uint64_t *)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_12C2C70((uint64_t *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    uint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if ((v14 & 0x1F) != 0)
  {
    if (v14)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v16 = *(void *)(a1 + 72);
      if (!v16)
      {
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          uint64_t v18 = (void *)*v18;
        }
        sub_15F9ABC((uint64_t)v18);
        *(void *)(a1 + 72) = v16;
      }
      if (*(void *)(a2 + 72)) {
        uint64_t v19 = *(uint64_t (****)())(a2 + 72);
      }
      else {
        uint64_t v19 = &off_25405C0;
      }
      sub_15EB020(v16, (uint64_t)v19);
      if ((v14 & 2) == 0)
      {
LABEL_10:
        if ((v14 & 4) == 0) {
          goto LABEL_11;
        }
        goto LABEL_35;
      }
    }
    else if ((v14 & 2) == 0)
    {
      goto LABEL_10;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v20 = *(void *)(a1 + 80);
    if (!v20)
    {
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        uint64_t v22 = (void *)*v22;
      }
      uint64_t v20 = sub_178CDA8((uint64_t)v22);
      *(void *)(a1 + 80) = v20;
    }
    if (*(void *)(a2 + 80)) {
      uint64_t v23 = *(uint64_t (****)())(a2 + 80);
    }
    else {
      uint64_t v23 = &off_25486C0;
    }
    sub_1760D4C(v20, (uint64_t)v23);
    if ((v14 & 4) == 0)
    {
LABEL_11:
      if ((v14 & 8) == 0) {
        goto LABEL_12;
      }
      goto LABEL_43;
    }
LABEL_35:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v24 = *(std::string **)(a1 + 88);
    if (!v24)
    {
      uint64_t v25 = *(void *)(a1 + 8);
      unsigned int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        unsigned int v26 = (void *)*v26;
      }
      uint64_t v24 = (std::string *)sub_1283D90((uint64_t)v26);
      *(void *)(a1 + 88) = v24;
    }
    if (*(void *)(a2 + 88)) {
      uint64_t v27 = *(uint64_t (****)(uint64_t))(a2 + 88);
    }
    else {
      uint64_t v27 = &off_252F7F8;
    }
    sub_126792C(v24, (uint64_t)v27);
    if ((v14 & 8) == 0)
    {
LABEL_12:
      if ((v14 & 0x10) == 0)
      {
LABEL_14:
        *(_DWORD *)(a1 + 16) |= v14;
        goto LABEL_15;
      }
LABEL_13:
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      goto LABEL_14;
    }
LABEL_43:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v28 = *(void *)(a1 + 96);
    if (!v28)
    {
      uint64_t v29 = *(void *)(a1 + 8);
      unint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        unint64_t v30 = (void *)*v30;
      }
      uint64_t v28 = sub_1836E54((uint64_t)v30);
      *(void *)(a1 + 96) = v28;
    }
    if (*(void *)(a2 + 96)) {
      uint64_t v31 = *(uint64_t (****)())(a2 + 96);
    }
    else {
      uint64_t v31 = &off_254CA18;
    }
    sub_182C88C(v28, (uint64_t)v31);
    if ((v14 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v15 = *(void *)(a2 + 8);
  if (v15)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v15 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2338(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v5 = *(void **)(a1 + 24);
      if (!v5)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        int v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6) {
          int v7 = (void *)*v7;
        }
        uint64_t v5 = sub_15F9C64((uint64_t)v7);
        *(void *)(a1 + 24) = v5;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v8 = &off_2540680;
      }
      sub_15ECD20((uint64_t)v5, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      int v9 = *(std::string **)(a1 + 32);
      if (!v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        int v9 = (std::string *)sub_15F9D00((uint64_t)v11);
        *(void *)(a1 + 32) = v9;
      }
      if (*(void *)(a2 + 32)) {
        int v12 = *(void *(****)(void *))(a2 + 32);
      }
      else {
        int v12 = &off_25406B8;
      }
      sub_11A7934(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E243C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v5 = *(void *)(a1 + 24);
      if (!v5)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        int v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6) {
          int v7 = (void *)*v7;
        }
        sub_1283984((uint64_t)v7);
        *(void *)(a1 + 24) = v5;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v8 = &off_252F688;
      }
      sub_1267D9C(v5, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      int v9 = *(std::string **)(a1 + 32);
      if (!v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        int v9 = (std::string *)sub_1283A10((uint64_t)v11);
        *(void *)(a1 + 32) = v9;
      }
      if (*(void *)(a2 + 32)) {
        int v12 = *(void *(****)(void *))(a2 + 32);
      }
      else {
        int v12 = &off_252F708;
      }
      sub_1263204(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2540(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 7) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          uint64_t v8 = (void *)*v8;
        }
        sub_15F9EB4((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        int v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        int v9 = &off_2540770;
      }
      sub_15EE328(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0)
        {
LABEL_6:
          *(_DWORD *)(a1 + 16) |= v4;
          goto LABEL_7;
        }
LABEL_5:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        goto LABEL_6;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      uint64_t v10 = sub_15F9DFC((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_2540708;
    }
    sub_15EE698(v10, (uint64_t)v13);
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2668(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x1F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          uint64_t v8 = (void *)*v8;
        }
        sub_15F962C((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        int v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        int v9 = &off_25403A0;
      }
      sub_15E4FD8(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_29;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      uint64_t v10 = sub_178CDA8((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_25486C0;
    }
    sub_1760D4C(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_37;
    }
LABEL_29:
    *(_DWORD *)(a1 + 16) |= 4u;
    int v14 = *(std::string **)(a1 + 40);
    if (!v14)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      int v14 = (std::string *)sub_15FA000((uint64_t)v16);
      *(void *)(a1 + 40) = v14;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v17 = *(void *(****)(void *))(a2 + 40);
    }
    else {
      uint64_t v17 = &off_2540860;
    }
    sub_117EF04(v14, (uint64_t)v17);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0)
      {
LABEL_8:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_9;
      }
LABEL_7:
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      goto LABEL_8;
    }
LABEL_37:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v18 = *(void *)(a1 + 48);
    if (!v18)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      uint64_t v18 = sub_1836E54((uint64_t)v20);
      *(void *)(a1 + 48) = v18;
    }
    if (*(void *)(a2 + 48)) {
      uint64_t v21 = *(uint64_t (****)())(a2 + 48);
    }
    else {
      uint64_t v21 = &off_254CA18;
    }
    sub_182C88C(v18, (uint64_t)v21);
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2830(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 7) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          uint64_t v8 = (void *)*v8;
        }
        uint64_t v6 = sub_1284178((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        int v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        int v9 = &off_252F928;
      }
      sub_1262494(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0)
        {
LABEL_6:
          *(_DWORD *)(a1 + 16) |= v4;
          goto LABEL_7;
        }
LABEL_5:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        goto LABEL_6;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void **)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      uint64_t v10 = sub_1284080((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_252F900;
    }
    sub_12626AC((uint64_t)v10, (uint64_t)v13);
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2958(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v5 = *(void *)(a1 + 24);
      if (!v5)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6) {
          uint64_t v7 = (void *)*v7;
        }
        sub_15FA1F0((uint64_t)v7);
        *(void *)(a1 + 24) = v5;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v8 = &off_25408D8;
      }
      sub_15F203C(v5, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      int v9 = *(std::string **)(a1 + 32);
      if (!v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        int v9 = (std::string *)sub_15FA2BC((uint64_t)v11);
        *(void *)(a1 + 32) = v9;
      }
      if (*(void *)(a2 + 32)) {
        int v12 = *(uint64_t (****)())(a2 + 32);
      }
      else {
        int v12 = &off_2540978;
      }
      sub_15F2378(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2A5C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x1F) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7) {
          uint64_t v8 = (void *)*v8;
        }
        uint64_t v6 = sub_160AC08((uint64_t)v8);
        *(void *)(a1 + 24) = v6;
      }
      if (*(void *)(a2 + 24)) {
        int v9 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        int v9 = &off_25410B0;
      }
      sub_16076BC(v6, (uint64_t)v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_29;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void **)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (void *)*v12;
      }
      uint64_t v10 = sub_160AC88((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_25410E0;
    }
    sub_16077E4((uint64_t)v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_37;
    }
LABEL_29:
    *(_DWORD *)(a1 + 16) |= 4u;
    int v14 = *(std::string **)(a1 + 40);
    if (!v14)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      int v14 = (std::string *)sub_160AA68((uint64_t)v16);
      *(void *)(a1 + 40) = v14;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v17 = *(uint64_t (****)())(a2 + 40);
    }
    else {
      uint64_t v17 = &off_2541018;
    }
    sub_11EC100(v14, (uint64_t)v17);
    if ((v4 & 8) == 0)
    {
LABEL_6:
      if ((v4 & 0x10) == 0)
      {
LABEL_8:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_9;
      }
LABEL_7:
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      goto LABEL_8;
    }
LABEL_37:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v18 = *(std::string **)(a1 + 48);
    if (!v18)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      uint64_t v18 = (std::string *)sub_160A9D0((uint64_t)v20);
      *(void *)(a1 + 48) = v18;
    }
    if (*(void *)(a2 + 48)) {
      uint64_t v21 = *(uint64_t (****)())(a2 + 48);
    }
    else {
      uint64_t v21 = &off_2540FE8;
    }
    sub_1607954(v18, (uint64_t)v21);
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2C24(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v5 = *(void **)(a1 + 24);
      if (!v5)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6) {
          uint64_t v7 = (void *)*v7;
        }
        uint64_t v5 = sub_15FA55C((uint64_t)v7);
        *(void *)(a1 + 24) = v5;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        uint64_t v8 = &off_2540A70;
      }
      sub_15F5BFC((uint64_t)v5, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      int v9 = *(std::string **)(a1 + 32);
      if (!v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        int v9 = (std::string *)sub_15FA5E4((uint64_t)v11);
        *(void *)(a1 + 32) = v9;
      }
      if (*(void *)(a2 + 32)) {
        int v12 = *(uint64_t (****)(uint64_t))(a2 + 32);
      }
      else {
        int v12 = &off_2540AA8;
      }
      sub_119E644(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15E2D28(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        uint64_t v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          uint64_t v7 = (void *)*v7;
        }
        std::string::pointer data = (std::string *)sub_15FA3B4((uint64_t)v7);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 24)) {
        uint64_t v8 = *(uint64_t (****)(uint64_t))(a2 + 24);
      }
      else {
        uint64_t v8 = &off_25409C8;
      }
      uint64_t result = sub_15EA054(data, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      int v9 = (std::string *)v3[1].__r_.__value_.__l.__size_;
      if (!v9)
      {
        std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        int v9 = (std::string *)sub_15FA464((uint64_t)v11);
        v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      }
      if (*(void *)(a2 + 32)) {
        int v12 = *(void *(****)(void *))(a2 + 32);
      }
      else {
        int v12 = &off_2540A28;
      }
      uint64_t result = sub_11A7934(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

void sub_15E2E2C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (_DWORD *)(a1 + 24);
    uint64_t v6 = *(int *)(a1 + 24);
    sub_188C80C((unsigned int *)(a1 + 24), v6 + v4);
    uint64_t v7 = *(void *)(a1 + 32);
    *v5 += *(_DWORD *)(a2 + 24);
    memcpy((void *)(v7 + 4 * v6), *(const void **)(a2 + 32), 4 * *(int *)(a2 + 24));
  }
  int v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 0xF) != 0)
  {
    if (v8)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v10 = *(void *)(a1 + 40);
      if (!v10)
      {
        uint64_t v11 = *(void *)(a1 + 8);
        int v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
        if (v11) {
          int v12 = (void *)*v12;
        }
        uint64_t v10 = sub_185089C((uint64_t)v12);
        *(void *)(a1 + 40) = v10;
      }
      if (*(void *)(a2 + 40)) {
        uint64_t v13 = *(uint64_t (****)())(a2 + 40);
      }
      else {
        uint64_t v13 = &off_254D2B0;
      }
      sub_16CE3CC(v10, (uint64_t)v13);
      if ((v8 & 2) == 0)
      {
LABEL_6:
        if ((v8 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_23;
      }
    }
    else if ((v8 & 2) == 0)
    {
      goto LABEL_6;
    }
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0)
      {
LABEL_9:
        *(_DWORD *)(a1 + 16) |= v8;
        goto LABEL_10;
      }
LABEL_8:
      *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
      goto LABEL_9;
    }
LABEL_23:
    *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
    if ((v8 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E2F68(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v5 = *(void *)(a1 + 24);
      if (!v5)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6) {
          uint64_t v7 = (void *)*v7;
        }
        uint64_t v5 = sub_178CDA8((uint64_t)v7);
        *(void *)(a1 + 24) = v5;
      }
      if (*(void *)(a2 + 24)) {
        int v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        int v8 = &off_25486C0;
      }
      sub_1760D4C(v5, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v9 = *(void *)(a1 + 32);
      if (!v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        uint64_t v9 = sub_1836E54((uint64_t)v11);
        *(void *)(a1 + 32) = v9;
      }
      if (*(void *)(a2 + 32)) {
        int v12 = *(uint64_t (****)())(a2 + 32);
      }
      else {
        int v12 = &off_254CA18;
      }
      sub_182C88C(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15E306C(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(a2 + 16))
  {
    int v4 = *(uint64_t (****)(uint64_t))(a2 + 24);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
    if (!data)
    {
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v7 = (void *)*v7;
      }
      std::string::pointer data = (std::string *)sub_1623650((uint64_t)v7);
      v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      int v4 = *(uint64_t (****)(uint64_t))(a2 + 24);
    }
    if (v4) {
      int v8 = v4;
    }
    else {
      int v8 = &off_2541900;
    }
    uint64_t result = sub_142E300(data, (uint64_t)v8);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15E3114(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(a2 + 16))
  {
    int v4 = *(uint64_t (****)(uint64_t))(a2 + 24);
    LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
    std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
    if (!data)
    {
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v7 = (void *)*v7;
      }
      std::string::pointer data = (std::string *)sub_16237E8((uint64_t)v7);
      v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      int v4 = *(uint64_t (****)(uint64_t))(a2 + 24);
    }
    if (v4) {
      int v8 = v4;
    }
    else {
      int v8 = &off_2541978;
    }
    uint64_t result = sub_15D361C(data, (uint64_t)v8);
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15E31BC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_15E5314(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) != 0)
  {
    uint64_t result = sub_17612D4(*(void *)(a1 + 32));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 4) == 0) {
    return 1;
  }
  uint64_t result = sub_182D83C(*(void *)(a1 + 40));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E321C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_162BBCC(*(void *)(*(void *)(a1 + 40) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  while ((int)v5 >= 1)
  {
    uint64_t v6 = v5 - 1;
    char v7 = sub_16320B4(*(void *)(*(void *)(a1 + 64) + 8 * v5));
    uint64_t v5 = v6;
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    uint64_t result = sub_15EB330(*(void *)(a1 + 72));
    if (!result) {
      return result;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  if ((v9 & 2) != 0)
  {
    uint64_t result = sub_17612D4(*(void *)(a1 + 80));
    if (!result) {
      return result;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  if ((v9 & 8) == 0) {
    return 1;
  }
  uint64_t result = sub_182D83C(*(void *)(a1 + 96));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E32D0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_15ECE44(*(void *)(a1 + 24));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E32FC(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_12680E8(*(void *)(a1 + 24));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E3328(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_15EE8B4(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_15EE9B0(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E3374(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_15E53C8(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) != 0)
  {
    uint64_t result = sub_17612D4(*(void *)(a1 + 32));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 8) == 0) {
    return 1;
  }
  uint64_t result = sub_182D83C(*(void *)(a1 + 48));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E33D4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_1263268(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_12632C0(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

BOOL sub_15E3420(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  BOOL result = sub_15F2448(*(void *)(a1 + 24));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E344C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_1607A40(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_1607A8C(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E3498(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if ((*(unsigned char *)(v1 + 16) & 4) == 0) {
    return 1;
  }
  uint64_t result = sub_17612D4(*(void *)(v1 + 40));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E34D0(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_16CE508(*(void *)(a1 + 40));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t sub_15E34FC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_17612D4(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_182D83C(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15E3548@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackDetails");
}

void *sub_15E3558(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15E35E8((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_1301728(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void ***sub_15E35E8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 48);
  uint64_t v2 = (void ***)(a1 + 48);
  if (v3 != &qword_2550250) {
    sub_1881C6C(v2);
  }
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 56));
  }
  if (*(uint64_t **)(a1 + 64) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 64));
  }
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 72));
  }
  if (*(uint64_t **)(a1 + 80) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 80));
  }
  if (*(uint64_t **)(a1 + 88) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 88));
  }
  uint64_t result = (void ***)(a1 + 96);
  if (*(uint64_t **)(a1 + 96) != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_25402A0)
  {
    uint64_t v5 = *(void **)(a1 + 104);
    if (v5)
    {
      sub_15E6344(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 112);
    if (v6)
    {
      sub_15E8690(v6);
      operator delete();
    }
    char v7 = *(void **)(a1 + 120);
    if (v7)
    {
      sub_15C53B8(v7);
      operator delete();
    }
    uint64_t result = *(void ****)(a1 + 128);
    if (result)
    {
      sub_15E5D88((uint64_t)result);
      operator delete();
    }
  }
  return result;
}

void sub_15E3744(void *a1)
{
  sub_15E3558(a1);

  operator delete();
}

uint64_t sub_15E377C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15C356C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  int v5 = *(_DWORD *)(v1 + 16);
  if (!(_BYTE)v5) {
    goto LABEL_15;
  }
  if (v5)
  {
    unint64_t v8 = *(void *)(v1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)unint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      if ((v5 & 2) != 0) {
        goto LABEL_31;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
      if ((v5 & 2) != 0) {
        goto LABEL_31;
      }
    }
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_35:
    unint64_t v10 = *(void *)(v1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
    {
      **(unsigned char **)unint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      if ((v5 & 8) != 0) {
        goto LABEL_39;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v10 = 0;
      *(unsigned char *)(v10 + 23) = 0;
      if ((v5 & 8) != 0) {
        goto LABEL_39;
      }
    }
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
LABEL_43:
    unint64_t v12 = *(void *)(v1 + 80) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 23) < 0)
    {
      **(unsigned char **)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      if ((v5 & 0x20) != 0) {
        goto LABEL_47;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v12 = 0;
      *(unsigned char *)(v12 + 23) = 0;
      if ((v5 & 0x20) != 0) {
        goto LABEL_47;
      }
    }
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
  if ((v5 & 2) == 0) {
    goto LABEL_8;
  }
LABEL_31:
  unint64_t v9 = *(void *)(v1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    **(unsigned char **)unint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    if ((v5 & 4) != 0) {
      goto LABEL_35;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v9 = 0;
    *(unsigned char *)(v9 + 23) = 0;
    if ((v5 & 4) != 0) {
      goto LABEL_35;
    }
  }
LABEL_9:
  if ((v5 & 8) == 0) {
    goto LABEL_10;
  }
LABEL_39:
  unint64_t v11 = *(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v11 + 23) < 0)
  {
    **(unsigned char **)unint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_43;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v11 = 0;
    *(unsigned char *)(v11 + 23) = 0;
    if ((v5 & 0x10) != 0) {
      goto LABEL_43;
    }
  }
LABEL_11:
  if ((v5 & 0x20) == 0) {
    goto LABEL_12;
  }
LABEL_47:
  unint64_t v13 = *(void *)(v1 + 88) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v13 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v13 = 0;
    *(unsigned char *)(v13 + 23) = 0;
    if ((v5 & 0x40) != 0) {
      goto LABEL_51;
    }
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  **(unsigned char **)unint64_t v13 = 0;
  *(void *)(v13 + 8) = 0;
  if ((v5 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_51:
  unint64_t v14 = *(void *)(v1 + 96) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v14 = 0;
    *(unsigned char *)(v14 + 23) = 0;
    if ((v5 & 0x80) == 0) {
      goto LABEL_15;
    }
LABEL_14:
    uint64_t result = sub_15E39C0(*(void *)(v1 + 104));
    goto LABEL_15;
  }
  **(unsigned char **)unint64_t v14 = 0;
  *(void *)(v14 + 8) = 0;
  if ((v5 & 0x80) != 0) {
    goto LABEL_14;
  }
LABEL_15:
  if ((v5 & 0x700) == 0) {
    goto LABEL_20;
  }
  if ((v5 & 0x100) != 0)
  {
    uint64_t result = sub_15E3A78(*(void *)(v1 + 112));
    if ((v5 & 0x200) == 0)
    {
LABEL_18:
      if ((v5 & 0x400) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_18;
  }
  uint64_t result = sub_15C5484(*(void *)(v1 + 120));
  if ((v5 & 0x400) != 0) {
LABEL_19:
  }
    uint64_t result = sub_15E3AD0(*(void *)(v1 + 128));
LABEL_20:
  char v7 = *(unsigned char *)(v1 + 8);
  uint64_t v6 = v1 + 8;
  *(_DWORD *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

uint64_t sub_15E39C0(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x3F) == 0) {
    goto LABEL_9;
  }
  if (v2)
  {
    uint64_t result = sub_15B8FB8(*(void *)(result + 24));
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t result = sub_15C2E6C(*(void *)(v1 + 32));
  if ((v2 & 4) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_16:
    uint64_t result = (uint64_t)sub_12605AC(*(void *)(v1 + 48));
    if ((v2 & 0x10) == 0)
    {
LABEL_7:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = (uint64_t)sub_1260464(*(unsigned char **)(v1 + 40));
  if ((v2 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_6:
  if ((v2 & 0x10) == 0) {
    goto LABEL_7;
  }
LABEL_17:
  uint64_t result = sub_15E650C(*(void *)(v1 + 56));
  if ((v2 & 0x20) != 0) {
LABEL_8:
  }
    uint64_t result = sub_15C2E6C(*(void *)(v1 + 64));
LABEL_9:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15E3A78(uint64_t a1)
{
  sub_188CC00(a1 + 16);
  uint64_t result = sub_188CC00(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (v4)
  {
    return sub_188B4AC(v3);
  }
  return result;
}

uint64_t sub_15E3AD0(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *(void *)(result + 24);
      char v4 = *(unsigned char *)(v3 + 8);
      uint64_t result = v3 + 8;
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 40) = 0;
      if (v4) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 32);
      char v6 = *(unsigned char *)(v5 + 8);
      uint64_t result = v5 + 8;
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 40) = 0;
      if (v6) {
        uint64_t result = sub_188B4AC((uint64_t *)result);
      }
    }
  }
  char v8 = *(unsigned char *)(v1 + 8);
  uint64_t v7 = v1 + 8;
  *(_DWORD *)(v7 + 8) = 0;
  if (v8)
  {
    return sub_188B4AC((uint64_t *)v7);
  }
  return result;
}

uint64_t sub_15E3B68(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v60 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v60, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    char v8 = (unsigned __int8 *)(*(void *)v60 + 1);
    unsigned int v9 = **(unsigned char **)v60;
    if ((char)**(unsigned char **)v60 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        char v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v60, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        char v8 = (unsigned __int8 *)(*(void *)v60 + 2);
      }
    }
    *(void *)uint64_t v60 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 48);
        goto LABEL_75;
      case 2u:
        if (v9 != 18) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 56);
        goto LABEL_75;
      case 3u:
        if (v9 != 26) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 0x80u;
        uint64_t v16 = *(void *)(a1 + 104);
        if (!v16)
        {
          uint64_t v17 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v17 = (void *)*v17;
          }
          sub_15F962C((uint64_t)v17);
          uint64_t v16 = v18;
          *(void *)(a1 + 104) = v18;
          char v8 = *(unsigned __int8 **)v60;
        }
        uint64_t v19 = (uint64_t)sub_15E4230(a3, v16, v8);
        goto LABEL_76;
      case 4u:
        if (v9 != 34) {
          goto LABEL_95;
        }
        uint64_t v20 = v8 - 1;
        while (1)
        {
          uint64_t v21 = v20 + 1;
          *(void *)uint64_t v60 = v20 + 1;
          uint64_t v22 = *(_DWORD **)(a1 + 40);
          if (v22 && (uint64_t v23 = *(int *)(a1 + 32), (int)v23 < *v22))
          {
            *(_DWORD *)(a1 + 32) = v23 + 1;
            uint64_t v24 = *(void *)&v22[2 * v23 + 2];
          }
          else
          {
            uint64_t v25 = sub_15C6224(*(void *)(a1 + 24));
            uint64_t v24 = sub_188CDC8(a1 + 24, v25);
            uint64_t v21 = *(unsigned __int8 **)v60;
          }
          uint64_t v20 = (unsigned __int8 *)sub_12DE760(a3, v24, v21);
          *(void *)uint64_t v60 = v20;
          if (!v20) {
            goto LABEL_113;
          }
          if (*(void *)a3 <= (unint64_t)v20 || *v20 != 34) {
            goto LABEL_77;
          }
        }
      case 5u:
        if (v9 != 42) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v26 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 64);
        goto LABEL_75;
      case 6u:
        if (v9 != 50) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 0x100u;
        uint64_t v27 = *(void *)(a1 + 112);
        if (!v27)
        {
          uint64_t v28 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v28 = (void *)*v28;
          }
          uint64_t v27 = sub_15F9860((uint64_t)v28);
          *(void *)(a1 + 112) = v27;
          char v8 = *(unsigned __int8 **)v60;
        }
        uint64_t v19 = sub_12DE7F0(a3, v27, v8);
        goto LABEL_76;
      case 7u:
        if (v9 != 58) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 0x200u;
        uint64_t v29 = *(void *)(a1 + 120);
        if (!v29)
        {
          unint64_t v30 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v30 = (void *)*v30;
          }
          uint64_t v29 = sub_15C63E0((uint64_t)v30);
          *(void *)(a1 + 120) = v29;
          char v8 = *(unsigned __int8 **)v60;
        }
        uint64_t v19 = sub_12DE880(a3, v29, v8);
        goto LABEL_76;
      case 8u:
        if (v9 != 64) {
          goto LABEL_95;
        }
        v5 |= 0x800u;
        uint64_t v31 = (char *)(v8 + 1);
        uint64_t v32 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_53;
        }
        int v33 = *v31;
        uint64_t v32 = v32 + (v33 << 7) - 128;
        if (v33 < 0)
        {
          uint64_t v52 = sub_188C138((uint64_t)v8, v32);
          *(void *)uint64_t v60 = v52;
          *(unsigned char *)(a1 + 136) = v53 != 0;
          if (!v52) {
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v31 = (char *)(v8 + 2);
LABEL_53:
          *(void *)uint64_t v60 = v31;
          *(unsigned char *)(a1 + 136) = v32 != 0;
        }
        goto LABEL_77;
      case 9u:
        if (v9 != 72) {
          goto LABEL_95;
        }
        v5 |= 0x1000u;
        unint64_t v34 = (char *)(v8 + 1);
        uint64_t v35 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_58;
        }
        int v36 = *v34;
        uint64_t v35 = v35 + (v36 << 7) - 128;
        if (v36 < 0)
        {
          uint64_t v54 = sub_188C138((uint64_t)v8, v35);
          *(void *)uint64_t v60 = v54;
          *(unsigned char *)(a1 + 137) = v55 != 0;
          if (!v54) {
            goto LABEL_113;
          }
        }
        else
        {
          unint64_t v34 = (char *)(v8 + 2);
LABEL_58:
          *(void *)uint64_t v60 = v34;
          *(unsigned char *)(a1 + 137) = v35 != 0;
        }
        goto LABEL_77;
      case 0xAu:
        if (v9 != 82) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v37 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
        if (v37) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 72);
        goto LABEL_75;
      case 0xBu:
        if (v9 != 90) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v38 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
        if (v38) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 80);
        goto LABEL_75;
      case 0xCu:
        if (v9 != 98) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v39 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
        if (v39) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 88);
        goto LABEL_75;
      case 0xDu:
        if (v9 != 106) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v40 = *(void *)(a1 + 8);
        unint64_t v13 = (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
        if (v40) {
          unint64_t v13 = (uint64_t *)*v13;
        }
        unint64_t v14 = (void *)(a1 + 96);
LABEL_75:
        unsigned int v41 = (std::string *)sub_1880F84(v14, v13);
        uint64_t v19 = (uint64_t)sub_188C244(v41, *(char **)v60, (uint64_t)a3);
        goto LABEL_76;
      case 0xEu:
        if (v9 != 114) {
          goto LABEL_95;
        }
        *(_DWORD *)(a1 + 16) |= 0x400u;
        uint64_t v42 = *(void **)(a1 + 128);
        if (!v42)
        {
          uint64_t v43 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v43 = (void *)*v43;
          }
          uint64_t v42 = sub_15F95B0((uint64_t)v43);
          *(void *)(a1 + 128) = v42;
          char v8 = *(unsigned __int8 **)v60;
        }
        uint64_t v19 = (uint64_t)sub_15E42C0(a3, (uint64_t)v42, v8);
        goto LABEL_76;
      case 0xFu:
        if (v9 != 120) {
          goto LABEL_95;
        }
        v5 |= 0x2000u;
        unsigned int v44 = (char *)(v8 + 1);
        uint64_t v45 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_89;
        }
        int v46 = *v44;
        uint64_t v45 = v45 + (v46 << 7) - 128;
        if (v46 < 0)
        {
          uint64_t v56 = sub_188C138((uint64_t)v8, v45);
          *(void *)uint64_t v60 = v56;
          *(unsigned char *)(a1 + 138) = v57 != 0;
          if (!v56) {
            goto LABEL_113;
          }
        }
        else
        {
          unsigned int v44 = (char *)(v8 + 2);
LABEL_89:
          *(void *)uint64_t v60 = v44;
          *(unsigned char *)(a1 + 138) = v45 != 0;
        }
        goto LABEL_77;
      case 0x10u:
        if (v9 != 128) {
          goto LABEL_95;
        }
        v5 |= 0x4000u;
        unsigned int v47 = (char *)(v8 + 1);
        uint64_t v48 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_94;
        }
        int v49 = *v47;
        uint64_t v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          uint64_t v58 = sub_188C138((uint64_t)v8, v48);
          *(void *)uint64_t v60 = v58;
          *(unsigned char *)(a1 + 139) = v59 != 0;
          if (!v58) {
            goto LABEL_113;
          }
        }
        else
        {
          unsigned int v47 = (char *)(v8 + 2);
LABEL_94:
          *(void *)uint64_t v60 = v47;
          *(unsigned char *)(a1 + 139) = v48 != 0;
        }
        goto LABEL_77;
      default:
LABEL_95:
        if (v9) {
          BOOL v50 = (v9 & 7) == 4;
        }
        else {
          BOOL v50 = 1;
        }
        if (!v50)
        {
          if (*v7)
          {
            char v51 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            char v51 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            char v8 = *(unsigned __int8 **)v60;
          }
          uint64_t v19 = (uint64_t)sub_1885AC0(v9, v51, (char *)v8, a3);
LABEL_76:
          *(void *)uint64_t v60 = v19;
          if (!v19) {
            goto LABEL_113;
          }
LABEL_77:
          if (sub_11947B8((uint64_t)a3, (char **)v60, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_113:
        }
          *(void *)uint64_t v60 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v60;
    }
  }
}

char *sub_15E4230(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E65D8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E42C0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E5E90(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15E4350(uint64_t a1, unsigned char *__dst, unint64_t *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    char v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), __dst);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  char v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x80) == 0) {
    goto LABEL_13;
  }
LABEL_7:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v7 = *(void *)(a1 + 104);
  unsigned char *v4 = 26;
  unsigned int v8 = *(_DWORD *)(v7 + 20);
  v4[1] = v8;
  if (v8 > 0x7F) {
    unsigned int v9 = sub_188A9CC(v8, v4 + 1);
  }
  else {
    unsigned int v9 = v4 + 2;
  }
  char v4 = sub_15E6994(v7, (unint64_t)v9, a3);
LABEL_13:
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    for (int i = 0; i != v10; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 34;
      unsigned int v13 = *(_DWORD *)(v12 + 20);
      v4[1] = v13;
      if (v13 > 0x7F) {
        unint64_t v14 = sub_188A9CC(v13, v4 + 1);
      }
      else {
        unint64_t v14 = v4 + 2;
      }
      char v4 = sub_15C396C(v12, (unint64_t)v14, a3);
    }
  }
  if ((v6 & 4) != 0)
  {
    char v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
    if ((v6 & 0x100) == 0)
    {
LABEL_23:
      if ((v6 & 0x200) == 0) {
        goto LABEL_24;
      }
      goto LABEL_41;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_23;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v15 = *(void *)(a1 + 112);
  unsigned char *v4 = 50;
  unsigned int v16 = *(_DWORD *)(v15 + 64);
  v4[1] = v16;
  if (v16 > 0x7F) {
    uint64_t v17 = sub_188A9CC(v16, v4 + 1);
  }
  else {
    uint64_t v17 = v4 + 2;
  }
  char v4 = sub_15E8A2C(v15, v17, a3);
  if ((v6 & 0x200) == 0)
  {
LABEL_24:
    if ((v6 & 0x800) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_41:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v18 = *(void *)(a1 + 120);
  unsigned char *v4 = 58;
  unsigned int v19 = *(_DWORD *)(v18 + 96);
  v4[1] = v19;
  if (v19 > 0x7F) {
    uint64_t v20 = sub_188A9CC(v19, v4 + 1);
  }
  else {
    uint64_t v20 = v4 + 2;
  }
  char v4 = sub_15C5A5C(v18, v20, a3);
  if ((v6 & 0x800) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_47:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v21 = *(unsigned char *)(a1 + 136);
  unsigned char *v4 = 64;
  v4[1] = v21;
  v4 += 2;
  if ((v6 & 0x1000) == 0)
  {
LABEL_26:
    if ((v6 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_50:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v22 = *(unsigned char *)(a1 + 137);
  unsigned char *v4 = 72;
  v4[1] = v22;
  v4 += 2;
  if ((v6 & 8) == 0)
  {
LABEL_27:
    if ((v6 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  char v4 = sub_117A0AC(a3, 10, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_28:
    if ((v6 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  char v4 = sub_117A0AC(a3, 11, (const void **)(*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_29:
    if ((v6 & 0x40) == 0) {
      goto LABEL_30;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v4 = sub_117A0AC(a3, 12, (const void **)(*(void *)(a1 + 88) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x40) == 0)
  {
LABEL_30:
    if ((v6 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_56:
  char v4 = sub_117A0AC(a3, 13, (const void **)(*(void *)(a1 + 96) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x400) == 0)
  {
LABEL_31:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }
LABEL_57:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v23 = *(void *)(a1 + 128);
  unsigned char *v4 = 114;
  unsigned int v24 = *(_DWORD *)(v23 + 20);
  v4[1] = v24;
  if (v24 > 0x7F) {
    uint64_t v25 = sub_188A9CC(v24, v4 + 1);
  }
  else {
    uint64_t v25 = v4 + 2;
  }
  char v4 = sub_15E60D4(v23, (unint64_t)v25, a3);
  if ((v6 & 0x2000) == 0)
  {
LABEL_32:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_66;
  }
LABEL_63:
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v26 = *(unsigned char *)(a1 + 138);
  unsigned char *v4 = 120;
  v4[1] = v26;
  v4 += 2;
  if ((v6 & 0x4000) != 0)
  {
LABEL_66:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v27 = *(unsigned char *)(a1 + 139);
    *(_WORD *)char v4 = 384;
    v4[2] = v27;
    v4 += 3;
  }
LABEL_69:
  uint64_t v28 = *(void *)(a1 + 8);
  if ((v28 & 1) == 0) {
    return v4;
  }
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v30 + 31) < 0)
  {
    uint64_t v31 = *(void **)(v30 + 8);
    uint64_t v32 = *(void *)(v30 + 16);
  }
  else
  {
    uint64_t v31 = (void *)(v30 + 8);
    LODWORD(v32) = *(unsigned __int8 *)(v30 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v32)
  {
    uint64_t v33 = (int)v32;
    memcpy(v4, v31, (int)v32);
    v4 += v33;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v31, v32, v4);
}

uint64_t sub_15E4824(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    char v4 = (uint64_t *)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15C3C1C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v8) {
    goto LABEL_19;
  }
  if (v8)
  {
    unint64_t v14 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    uint64_t v16 = *(void *)(v14 + 8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v15;
    }
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 2) == 0)
    {
LABEL_12:
      if ((v8 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_41;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_12;
  }
  unint64_t v17 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 4) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_41:
  unint64_t v20 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  uint64_t v22 = *(void *)(v20 + 8);
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = v21;
  }
  v2 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 8) == 0)
  {
LABEL_14:
    if ((v8 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_44:
  unint64_t v23 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v24 = *(unsigned __int8 *)(v23 + 23);
  uint64_t v25 = *(void *)(v23 + 8);
  if ((v24 & 0x80u) == 0) {
    uint64_t v25 = v24;
  }
  v2 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x10) == 0)
  {
LABEL_15:
    if ((v8 & 0x20) == 0) {
      goto LABEL_16;
    }
LABEL_50:
    unint64_t v29 = *(void *)(a1 + 88) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
    uint64_t v31 = *(void *)(v29 + 8);
    if ((v30 & 0x80u) == 0) {
      uint64_t v31 = v30;
    }
    v2 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 0x40) == 0)
    {
LABEL_17:
      if ((v8 & 0x80) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_47:
  unint64_t v26 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
  uint64_t v28 = *(void *)(v26 + 8);
  if ((v27 & 0x80u) == 0) {
    uint64_t v28 = v27;
  }
  v2 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x20) != 0) {
    goto LABEL_50;
  }
LABEL_16:
  if ((v8 & 0x40) == 0) {
    goto LABEL_17;
  }
LABEL_53:
  unint64_t v32 = *(void *)(a1 + 96) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  uint64_t v34 = *(void *)(v32 + 8);
  if ((v33 & 0x80u) == 0) {
    uint64_t v34 = v33;
  }
  v2 += v34 + ((9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x80) != 0)
  {
LABEL_18:
    uint64_t v9 = sub_15E6CBC(*(void *)(a1 + 104));
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_19:
  if ((v8 & 0x7F00) == 0) {
    goto LABEL_33;
  }
  if ((v8 & 0x100) == 0)
  {
    if ((v8 & 0x200) == 0) {
      goto LABEL_22;
    }
LABEL_58:
    uint64_t v36 = sub_15C5DA4(*(void *)(a1 + 120));
    v2 += v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v35 = sub_15E8C3C(*(void *)(a1 + 112));
  v2 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x200) != 0) {
    goto LABEL_58;
  }
LABEL_22:
  if ((v8 & 0x400) != 0)
  {
LABEL_23:
    uint64_t v10 = sub_15E6254(*(void *)(a1 + 128));
    v2 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_24:
  uint64_t v11 = v2 + 2;
  if ((v8 & 0x800) == 0) {
    uint64_t v11 = v2;
  }
  if ((v8 & 0x1000) != 0) {
    v11 += 2;
  }
  if ((v8 & 0x2000) != 0) {
    v11 += 2;
  }
  if ((v8 & 0x4000) != 0) {
    uint64_t v2 = v11 + 3;
  }
  else {
    uint64_t v2 = v11;
  }
LABEL_33:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v37 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v37 + 31) < 0) {
      uint64_t v38 = *(void *)(v37 + 16);
    }
    else {
      uint64_t v38 = *(unsigned __int8 *)(v37 + 31);
    }
    v2 += v38;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

void sub_15E4BE0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1301C3C((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    int v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (!(_BYTE)v9) {
    goto LABEL_43;
  }
  if (v9)
  {
    uint64_t v10 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    sub_1881DF4((std::string **)(a1 + 48), v10, v12);
    if ((v9 & 2) == 0)
    {
LABEL_7:
      if ((v9 & 4) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_7;
  }
  unsigned int v13 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 16) |= 2u;
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  if (v14) {
    uint64_t v15 = (uint64_t *)*v15;
  }
  sub_1881DF4((std::string **)(a1 + 56), v13, v15);
  if ((v9 & 4) == 0)
  {
LABEL_8:
    if ((v9 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v16 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 16) |= 4u;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
  if (v17) {
    uint64_t v18 = (uint64_t *)*v18;
  }
  sub_1881DF4((std::string **)(a1 + 64), v16, v18);
  if ((v9 & 8) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v19 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 16) |= 8u;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
  if (v20) {
    uint64_t v21 = (uint64_t *)*v21;
  }
  sub_1881DF4((std::string **)(a1 + 72), v19, v21);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_29:
    uint64_t v25 = (long long *)(*(void *)(a2 + 88) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 0x20u;
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (uint64_t *)*v27;
    }
    sub_1881DF4((std::string **)(a1 + 88), v25, v27);
    if ((v9 & 0x40) == 0)
    {
LABEL_12:
      if ((v9 & 0x80) == 0) {
        goto LABEL_43;
      }
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_26:
  uint64_t v22 = (long long *)(*(void *)(a2 + 80) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 16) |= 0x10u;
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
  if (v23) {
    uint64_t v24 = (uint64_t *)*v24;
  }
  sub_1881DF4((std::string **)(a1 + 80), v22, v24);
  if ((v9 & 0x20) != 0) {
    goto LABEL_29;
  }
LABEL_11:
  if ((v9 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_32:
  uint64_t v28 = (long long *)(*(void *)(a2 + 96) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 16) |= 0x40u;
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
  if (v29) {
    uint64_t v30 = (uint64_t *)*v30;
  }
  sub_1881DF4((std::string **)(a1 + 96), v28, v30);
  if ((v9 & 0x80) != 0)
  {
LABEL_35:
    *(_DWORD *)(a1 + 16) |= 0x80u;
    uint64_t v31 = *(void *)(a1 + 104);
    if (!v31)
    {
      uint64_t v32 = *(void *)(a1 + 8);
      uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
      if (v32) {
        uint64_t v33 = (void *)*v33;
      }
      sub_15F962C((uint64_t)v33);
      *(void *)(a1 + 104) = v31;
    }
    if (*(void *)(a2 + 104)) {
      uint64_t v34 = *(uint64_t (****)())(a2 + 104);
    }
    else {
      uint64_t v34 = &off_25403A0;
    }
    sub_15E4FD8(v31, (uint64_t)v34);
  }
LABEL_43:
  if ((v9 & 0x7F00) == 0) {
    goto LABEL_53;
  }
  if ((v9 & 0x100) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 0x100u;
    uint64_t v36 = *(std::string **)(a1 + 112);
    if (!v36)
    {
      uint64_t v37 = *(void *)(a1 + 8);
      uint64_t v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
      if (v37) {
        uint64_t v38 = (void *)*v38;
      }
      uint64_t v36 = (std::string *)sub_15F9860((uint64_t)v38);
      *(void *)(a1 + 112) = v36;
    }
    if (*(void *)(a2 + 112)) {
      uint64_t v39 = *(void *(****)(void *))(a2 + 112);
    }
    else {
      uint64_t v39 = &off_25404A0;
    }
    sub_1216B14(v36, (uint64_t)v39);
    if ((v9 & 0x200) == 0)
    {
LABEL_46:
      if ((v9 & 0x400) == 0) {
        goto LABEL_47;
      }
      goto LABEL_73;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 16) |= 0x200u;
  uint64_t v40 = *(std::string **)(a1 + 120);
  if (!v40)
  {
    uint64_t v41 = *(void *)(a1 + 8);
    uint64_t v42 = (void *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
    if (v41) {
      uint64_t v42 = (void *)*v42;
    }
    uint64_t v40 = (std::string *)sub_15C63E0((uint64_t)v42);
    *(void *)(a1 + 120) = v40;
  }
  if (*(void *)(a2 + 120)) {
    uint64_t v43 = *(uint64_t (****)())(a2 + 120);
  }
  else {
    uint64_t v43 = &off_253F8F8;
  }
  sub_15C5F4C(v40, (uint64_t)v43);
  if ((v9 & 0x400) == 0)
  {
LABEL_47:
    if ((v9 & 0x800) == 0) {
      goto LABEL_48;
    }
    goto LABEL_81;
  }
LABEL_73:
  *(_DWORD *)(a1 + 16) |= 0x400u;
  unsigned int v44 = *(std::string **)(a1 + 128);
  if (!v44)
  {
    uint64_t v45 = *(void *)(a1 + 8);
    int v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
    if (v45) {
      int v46 = (void *)*v46;
    }
    unsigned int v44 = (std::string *)sub_15F95B0((uint64_t)v46);
    *(void *)(a1 + 128) = v44;
  }
  if (*(void *)(a2 + 128)) {
    unsigned int v47 = *(uint64_t (****)())(a2 + 128);
  }
  else {
    unsigned int v47 = &off_2540378;
  }
  sub_15E5218(v44, (uint64_t)v47);
  if ((v9 & 0x800) == 0)
  {
LABEL_48:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_82;
  }
LABEL_81:
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  if ((v9 & 0x1000) == 0)
  {
LABEL_49:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_50;
    }
LABEL_83:
    *(unsigned char *)(a1 + 138) = *(unsigned char *)(a2 + 138);
    if ((v9 & 0x4000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_82:
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  if ((v9 & 0x2000) != 0) {
    goto LABEL_83;
  }
LABEL_50:
  if ((v9 & 0x4000) != 0) {
LABEL_51:
  }
    *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
LABEL_52:
  *(_DWORD *)(a1 + 16) |= v9;
LABEL_53:
  uint64_t v35 = *(void *)(a2 + 8);
  if (v35)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v35 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15E4FD8(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x3F) == 0) {
    goto LABEL_57;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v5 = *(std::string **)(a1 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        int v7 = (void *)*v7;
      }
      uint64_t v5 = (std::string *)sub_15C1EF4((uint64_t)v7);
      *(void *)(a1 + 24) = v5;
    }
    if (*(void *)(a2 + 24)) {
      int v8 = *(uint64_t (****)())(a2 + 24);
    }
    else {
      int v8 = &off_253F4C8;
    }
    sub_15B9698(v5, (uint64_t)v8);
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 2u;
    int v9 = *(std::string **)(a1 + 32);
    if (!v9)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
      int v9 = (std::string *)sub_15C619C((uint64_t)v11);
      *(void *)(a1 + 32) = v9;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v12 = *(uint64_t (****)(uint64_t))(a2 + 32);
    }
    else {
      uint64_t v12 = &off_253F7F0;
    }
    sub_1263010(v9, (uint64_t)v12);
    if ((v4 & 4) == 0)
    {
LABEL_13:
      if ((v4 & 8) == 0) {
        goto LABEL_14;
      }
      goto LABEL_33;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 16) |= 4u;
  unsigned int v13 = *(void **)(a1 + 40);
  if (!v13)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    unsigned int v13 = sub_1284080((uint64_t)v15);
    *(void *)(a1 + 40) = v13;
  }
  if (*(void *)(a2 + 40)) {
    uint64_t v16 = *(uint64_t (****)())(a2 + 40);
  }
  else {
    uint64_t v16 = &off_252F900;
  }
  sub_12626AC((uint64_t)v13, (uint64_t)v16);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_33:
  *(_DWORD *)(a1 + 16) |= 8u;
  uint64_t v17 = *(void *)(a1 + 48);
  if (!v17)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    uint64_t v17 = sub_1283F94((uint64_t)v19);
    *(void *)(a1 + 48) = v17;
  }
  if (*(void *)(a2 + 48)) {
    uint64_t v20 = *(uint64_t (****)())(a2 + 48);
  }
  else {
    uint64_t v20 = &off_252F8A0;
  }
  sub_12629B8(v17, (uint64_t)v20);
  if ((v4 & 0x10) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_57;
    }
    goto LABEL_49;
  }
LABEL_41:
  *(_DWORD *)(a1 + 16) |= 0x10u;
  uint64_t v21 = *(void *)(a1 + 56);
  if (!v21)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22) {
      uint64_t v23 = (void *)*v23;
    }
    uint64_t v21 = sub_15F972C((uint64_t)v23);
    *(void *)(a1 + 56) = v21;
  }
  if (*(void *)(a2 + 56)) {
    uint64_t v24 = *(void *(****)(void *))(a2 + 56);
  }
  else {
    uint64_t v24 = &off_2540418;
  }
  sub_15E6E64(v21, (uint64_t)v24);
  if ((v4 & 0x20) != 0)
  {
LABEL_49:
    *(_DWORD *)(a1 + 16) |= 0x20u;
    uint64_t v25 = *(std::string **)(a1 + 64);
    if (!v25)
    {
      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if (v26) {
        uint64_t v27 = (void *)*v27;
      }
      uint64_t v25 = (std::string *)sub_15C619C((uint64_t)v27);
      *(void *)(a1 + 64) = v25;
    }
    if (*(void *)(a2 + 64)) {
      uint64_t v28 = *(uint64_t (****)(uint64_t))(a2 + 64);
    }
    else {
      uint64_t v28 = &off_253F7F0;
    }
    sub_1263010(v25, (uint64_t)v28);
  }
LABEL_57:
  uint64_t v29 = *(void *)(a2 + 8);
  if (v29)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v29 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15E5218(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        int v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          int v7 = (void *)*v7;
        }
        std::string::pointer data = (std::string *)sub_15F94FC((uint64_t)v7);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 24)) {
        int v8 = *(void *(****)(void *))(a2 + 24);
      }
      else {
        int v8 = &off_2540330;
      }
      uint64_t result = sub_15E5C44(data, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      int v9 = (std::string *)v3[1].__r_.__value_.__l.__size_;
      if (!v9)
      {
        std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
        uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          uint64_t v11 = (void *)*v11;
        }
        int v9 = (std::string *)sub_15F94FC((uint64_t)v11);
        v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      }
      if (*(void *)(a2 + 32)) {
        uint64_t v12 = *(void *(****)(void *))(a2 + 32);
      }
      else {
        uint64_t v12 = &off_2540330;
      }
      uint64_t result = sub_15E5C44(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15E5314(uint64_t a1)
{
  uint64_t result = sub_15E5358(a1 + 24);
  if (result)
  {
    if ((*(unsigned char *)(a1 + 16) & 0x80) == 0) {
      return 1;
    }
    uint64_t result = sub_15E53C8(*(void *)(a1 + 104));
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_15E5358(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 1;
  }
  uint64_t v3 = v1 + 1;
  for (unsigned int i = v1 - 1; ; --i)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8 * i + 8);
    if ((*(unsigned char *)(v5 + 16) & 2) != 0)
    {
      uint64_t result = sub_16EA300(*(void *)(v5 + 32));
      if (!result) {
        break;
      }
    }
    if (--v3 <= 1) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_15E53C8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v3 + 16))
    {
      uint64_t v5 = *(void *)(v3 + 48);
      uint64_t v6 = *(unsigned int *)(v5 + 80);
      uint64_t v7 = *(void *)(v5 + 88);
      while ((int)v6 >= 1)
      {
        uint64_t v8 = *(void *)(v7 + 8 * v6--);
        if ((~*(_DWORD *)(v8 + 16) & 3) != 0) {
          return 0;
        }
      }
    }
  }
  if ((v2 & 4) != 0)
  {
    uint64_t result = sub_12632C0(*(void *)(a1 + 40));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 8) != 0)
  {
    uint64_t result = sub_1263380(*(void *)(a1 + 48));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 0x10) == 0) {
    return 1;
  }
  uint64_t result = sub_15E6FFC(*(void *)(a1 + 56));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15E546C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiCorrections");
}

void *sub_15E547C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DA8((uint64_t)(a1 + 6));
  sub_1889DA8((uint64_t)(a1 + 4));
  sub_1889DA8((uint64_t)(a1 + 2));
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15E5508(void *a1)
{
  sub_15E547C(a1);

  operator delete();
}

uint64_t sub_15E5540(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15E555C(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v34 = a2;
  if (sub_11947B8((uint64_t)a3, &v34, a3[11].i32[1])) {
    return v34;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v34 + 1;
    unsigned int v8 = *v34;
    if (*v34 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v34, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v34 + 2;
      }
    }
    uint64_t v34 = v7;
    unsigned int v11 = v8 >> 3;
    if (v8 >> 3 == 3)
    {
      if (v8 == 24)
      {
        uint64_t v18 = v7 - 1;
        while (1)
        {
          uint64_t v34 = v18 + 1;
          uint64_t v19 = v18[1];
          if (v18[1] < 0)
          {
            int v20 = v19 + (v18[2] << 7);
            uint64_t v19 = (v20 - 128);
            if (v18[2] < 0)
            {
              uint64_t v18 = (char *)sub_188C138((uint64_t)(v18 + 1), (v20 - 128));
              uint64_t v19 = v21;
            }
            else
            {
              v18 += 3;
            }
          }
          else
          {
            v18 += 2;
          }
          uint64_t v34 = v18;
          uint64_t v22 = *(unsigned int *)(a1 + 48);
          if (v22 == *(_DWORD *)(a1 + 52))
          {
            int v23 = v22 + 1;
            sub_188CA54((unsigned int *)(a1 + 48), v22 + 1);
            *(void *)(*(void *)(a1 + 56) + 8 * v22) = v19;
            uint64_t v18 = v34;
          }
          else
          {
            *(void *)(*(void *)(a1 + 56) + 8 * v22) = v19;
            int v23 = v22 + 1;
          }
          *(_DWORD *)(a1 + 48) = v23;
          if (!v18) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v18 || *v18 != 24) {
            goto LABEL_68;
          }
        }
      }
      if (v8 == 26)
      {
        uint64_t v30 = (unsigned int *)(a1 + 48);
        goto LABEL_59;
      }
    }
    else if (v11 == 2)
    {
      if (v8 == 16)
      {
        uint64_t v24 = v7 - 1;
        while (1)
        {
          uint64_t v34 = v24 + 1;
          uint64_t v25 = v24[1];
          if (v24[1] < 0)
          {
            int v26 = v25 + (v24[2] << 7);
            uint64_t v25 = (v26 - 128);
            if (v24[2] < 0)
            {
              uint64_t v24 = (char *)sub_188C138((uint64_t)(v24 + 1), (v26 - 128));
              uint64_t v25 = v27;
            }
            else
            {
              v24 += 3;
            }
          }
          else
          {
            v24 += 2;
          }
          uint64_t v34 = v24;
          uint64_t v28 = *(unsigned int *)(a1 + 32);
          if (v28 == *(_DWORD *)(a1 + 36))
          {
            int v29 = v28 + 1;
            sub_188CA54((unsigned int *)(a1 + 32), v28 + 1);
            *(void *)(*(void *)(a1 + 40) + 8 * v28) = v25;
            uint64_t v24 = v34;
          }
          else
          {
            *(void *)(*(void *)(a1 + 40) + 8 * v28) = v25;
            int v29 = v28 + 1;
          }
          *(_DWORD *)(a1 + 32) = v29;
          if (!v24) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v24 || *v24 != 16) {
            goto LABEL_68;
          }
        }
      }
      if (v8 == 18)
      {
        uint64_t v30 = (unsigned int *)(a1 + 32);
        goto LABEL_59;
      }
    }
    else if (v11 == 1)
    {
      if (v8 == 8)
      {
        uint64_t v12 = v7 - 1;
        while (1)
        {
          uint64_t v34 = v12 + 1;
          uint64_t v13 = v12[1];
          if (v12[1] < 0)
          {
            int v14 = v13 + (v12[2] << 7);
            uint64_t v13 = (v14 - 128);
            if (v12[2] < 0)
            {
              uint64_t v12 = (char *)sub_188C138((uint64_t)(v12 + 1), (v14 - 128));
              uint64_t v13 = v15;
            }
            else
            {
              v12 += 3;
            }
          }
          else
          {
            v12 += 2;
          }
          uint64_t v34 = v12;
          uint64_t v16 = *(unsigned int *)(a1 + 16);
          if (v16 == *(_DWORD *)(a1 + 20))
          {
            int v17 = v16 + 1;
            sub_188CA54((unsigned int *)(a1 + 16), v16 + 1);
            *(void *)(*(void *)(a1 + 24) + 8 * v16) = v13;
            uint64_t v12 = v34;
          }
          else
          {
            *(void *)(*(void *)(a1 + 24) + 8 * v16) = v13;
            int v17 = v16 + 1;
          }
          *(_DWORD *)(a1 + 16) = v17;
          if (!v12) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v12 || *v12 != 8) {
            goto LABEL_68;
          }
        }
      }
      if (v8 == 10)
      {
        uint64_t v30 = (unsigned int *)(a1 + 16);
LABEL_59:
        uint64_t v31 = sub_188C2EC(v30, (unsigned __int8 *)v7, (uint64_t)a3);
        goto LABEL_67;
      }
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v33 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v33 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v34;
    }
    uint64_t v31 = sub_1885AC0(v8, v33, v7, a3);
LABEL_67:
    uint64_t v34 = (char *)v31;
    if (!v31) {
      return 0;
    }
LABEL_68:
    if (sub_11947B8((uint64_t)a3, &v34, a3[11].i32[1])) {
      return v34;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v34;
  }
  return 0;
}

char *sub_15E591C(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * i);
      *__dst = 8;
      __dst[1] = v8;
      if (v8 > 0x7F)
      {
        __dst[1] = v8 | 0x80;
        unint64_t v9 = v8 >> 7;
        __dst[2] = v8 >> 7;
        __dst += 3;
        if (v8 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v10 = v9 >> 14;
            v9 >>= 7;
            *__dst++ = v9;
          }
          while (v10);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  if ((int)v11 >= 1)
  {
    for (uint64_t j = 0; j != v11; ++j)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8 * j);
      *__dst = 16;
      __dst[1] = v13;
      if (v13 > 0x7F)
      {
        __dst[1] = v13 | 0x80;
        unint64_t v14 = v13 >> 7;
        __dst[2] = v13 >> 7;
        __dst += 3;
        if (v13 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v15 = v14 >> 14;
            v14 >>= 7;
            *__dst++ = v14;
          }
          while (v15);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  uint64_t v16 = *(unsigned int *)(a1 + 48);
  if ((int)v16 >= 1)
  {
    for (uint64_t k = 0; k != v16; ++k)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * k);
      *__dst = 24;
      __dst[1] = v18;
      if (v18 > 0x7F)
      {
        __dst[1] = v18 | 0x80;
        unint64_t v19 = v18 >> 7;
        __dst[2] = v18 >> 7;
        __dst += 3;
        if (v18 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v20 = v19 >> 14;
            v19 >>= 7;
            *__dst++ = v19;
          }
          while (v20);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return __dst;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v23 + 31) < 0)
  {
    uint64_t v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    uint64_t v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(__dst, v24, (int)v25);
    __dst += v26;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v24, v25, __dst);
}

uint64_t sub_15E5BA4(uint64_t a1)
{
  uint64_t v2 = sub_188D5A8((unsigned int *)(a1 + 16));
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = sub_188D5A8((unsigned int *)(a1 + 32));
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  uint64_t result = v2 + v4 + v3 + v5 + sub_188D5A8((unsigned int *)(a1 + 48)) + *(unsigned int *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    result += v9;
  }
  *(_DWORD *)(a1 + 64) = result;
  return result;
}

std::string *sub_15E5C44(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = &result->__r_.__value_.__r.__words[2];
    uint64_t v6 = SLODWORD(result->__r_.__value_.__r.__words[2]);
    sub_188CA54((unsigned int *)&result->__r_.__value_.__r.__words[2], v6 + v4);
    std::string::pointer data = v3[1].__r_.__value_.__l.__data_;
    *(_DWORD *)v5 += *(_DWORD *)(a2 + 16);
    uint64_t result = (std::string *)memcpy(&data[8 * v6], *(const void **)(a2 + 24), 8 * *(int *)(a2 + 16));
  }
  int v8 = *(_DWORD *)(a2 + 32);
  if (v8)
  {
    uint64_t v9 = SLODWORD(v3[1].__r_.__value_.__r.__words[1]);
    sub_188CA54((unsigned int *)&v3[1].__r_.__value_.__r.__words[1], v9 + v8);
    std::string::size_type v10 = v3[1].__r_.__value_.__r.__words[2];
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) += *(_DWORD *)(a2 + 32);
    uint64_t result = (std::string *)memcpy((void *)(v10 + 8 * v9), *(const void **)(a2 + 40), 8 * *(int *)(a2 + 32));
  }
  int v11 = *(_DWORD *)(a2 + 48);
  if (v11)
  {
    uint64_t data_low = SLODWORD(v3[2].__r_.__value_.__l.__data_);
    sub_188CA54((unsigned int *)&v3[2], data_low + v11);
    std::string::size_type size = v3[2].__r_.__value_.__l.__size_;
    LODWORD(v3[2].__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 48);
    uint64_t result = (std::string *)memcpy((void *)(size + 8 * data_low), *(const void **)(a2 + 56), 8 * *(int *)(a2 + 48));
  }
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15E5D70()
{
  return 1;
}

void *sub_15E5D78@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PlaceContainmentCorrections.ContainmentCorrection");
}

uint64_t sub_15E5D88(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_2540378)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    if (v5)
    {
      sub_15E547C(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      sub_15E547C(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15E5E58(uint64_t a1)
{
  sub_15E5D88(a1);

  operator delete();
}

char *sub_15E5E90(uint64_t a1, char *a2, int32x2_t *a3)
{
  unint64_t v18 = a2;
  if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
    return v18;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v18 + 1;
    unsigned int v8 = *v18;
    if (*v18 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v18, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v18 + 2;
      }
    }
    unint64_t v18 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 32);
        if (!v15)
        {
          uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v16 = (void *)*v16;
          }
          uint64_t v15 = sub_15F94FC((uint64_t)v16);
          *(void *)(a1 + 32) = v15;
LABEL_29:
          uint64_t v7 = v18;
        }
LABEL_30:
        uint64_t v14 = sub_15E6044(a3, v15, (unsigned __int8 *)v7);
        goto LABEL_31;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v15 = *(void *)(a1 + 24);
      if (!v15)
      {
        int v17 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          int v17 = (void *)*v17;
        }
        uint64_t v15 = sub_15F94FC((uint64_t)v17);
        *(void *)(a1 + 24) = v15;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      unint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v18;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
LABEL_31:
    unint64_t v18 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v18, a3[11].i32[1])) {
      return v18;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v18;
  }
  return 0;
}

char *sub_15E6044(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E555C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E60D4(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  int v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      int v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 64);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    int v4 = sub_15E591C(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 64);
    v4[1] = v11;
    if (v11 > 0x7F) {
      uint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      uint64_t v12 = v4 + 2;
    }
    int v4 = sub_15E591C(v10, v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15E6254(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_15E5BA4(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15E5BA4(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15E632C()
{
  return 1;
}

void *sub_15E6334@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PlaceContainmentCorrections");
}

void *sub_15E6344(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15E63C8((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t sub_15E63C8(uint64_t result)
{
  if ((uint64_t (***)())result != &off_25403A0)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void *)(result + 24);
    if (v2)
    {
      sub_15B8EC0(v2);
      operator delete();
    }
    uint64_t v3 = v1[4];
    if (v3)
    {
      sub_15C2D54(v3);
      operator delete();
    }
    uint64_t v4 = v1[5];
    if (v4)
    {
      sub_126F01C(v4);
      operator delete();
    }
    uint64_t v5 = (void *)v1[6];
    if (v5)
    {
      sub_126DDE8(v5);
      operator delete();
    }
    uint64_t v6 = (void *)v1[7];
    if (v6)
    {
      sub_15E7A24(v6);
      operator delete();
    }
    uint64_t result = v1[8];
    if (result)
    {
      sub_15C2D54(result);
      operator delete();
    }
  }
  return result;
}

void sub_15E64D4(void *a1)
{
  sub_15E6344(a1);

  operator delete();
}

uint64_t sub_15E650C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (unsigned char **)(*(void *)(result + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = (uint64_t)sub_15BB0EC(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 48);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (unsigned char **)(*(void *)(v1 + 56) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = (uint64_t)sub_15BB0EC(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 48) = 0;
  }
  uint64_t v8 = *(unsigned int *)(v1 + 72);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(v1 + 80) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t result = sub_15E71DC(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 72) = 0;
  }
  char v12 = *(unsigned char *)(v1 + 8);
  unsigned int v11 = (uint64_t *)(v1 + 8);
  if (v12)
  {
    return sub_188B4AC(v11);
  }
  return result;
}

char *sub_15E65D8(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v25 = a2;
  if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
    return v25;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = v25 + 1;
    unsigned int v8 = *v25;
    if (*v25 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v25, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v25 + 2;
      }
    }
    uint64_t v25 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 24);
        if (!v11)
        {
          char v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            char v12 = (void *)*v12;
          }
          uint64_t v11 = sub_15C1EF4((uint64_t)v12);
          *(void *)(a1 + 24) = v11;
          uint64_t v7 = v25;
        }
        uint64_t v13 = (char *)sub_1198E84(a3, v11, (unsigned __int8 *)v7);
        goto LABEL_52;
      case 2u:
        if (v8 != 18) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void **)(a1 + 32);
        if (v14) {
          goto LABEL_44;
        }
        unint64_t v15 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unint64_t v15 = (void *)*v15;
        }
        uint64_t v14 = sub_15C619C((uint64_t)v15);
        *(void *)(a1 + 32) = v14;
        goto LABEL_43;
      case 3u:
        if (v8 != 26) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v16 = *(void **)(a1 + 40);
        if (!v16)
        {
          uint64_t v17 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v17 = (void *)*v17;
          }
          uint64_t v16 = sub_1284080((uint64_t)v17);
          *(void *)(a1 + 40) = v16;
          uint64_t v7 = v25;
        }
        uint64_t v13 = sub_12613D0(a3, (uint64_t)v16, (unsigned __int8 *)v7);
        goto LABEL_52;
      case 4u:
        if (v8 != 34) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v18 = *(void *)(a1 + 48);
        if (!v18)
        {
          unint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unint64_t v19 = (void *)*v19;
          }
          uint64_t v18 = sub_1283F94((uint64_t)v19);
          *(void *)(a1 + 48) = v18;
          uint64_t v7 = v25;
        }
        uint64_t v13 = (char *)sub_12614F0(a3, v18, (unsigned __int8 *)v7);
        goto LABEL_52;
      case 5u:
        if (v8 != 42) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v20 = *(void *)(a1 + 56);
        if (!v20)
        {
          uint64_t v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v21 = (void *)*v21;
          }
          uint64_t v20 = sub_15F972C((uint64_t)v21);
          *(void *)(a1 + 56) = v20;
          uint64_t v7 = v25;
        }
        uint64_t v13 = sub_12DE5B0(a3, v20, (unsigned __int8 *)v7);
        goto LABEL_52;
      case 6u:
        if (v8 != 50) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v14 = *(void **)(a1 + 64);
        if (v14) {
          goto LABEL_44;
        }
        uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          uint64_t v22 = (void *)*v22;
        }
        uint64_t v14 = sub_15C619C((uint64_t)v22);
        *(void *)(a1 + 64) = v14;
LABEL_43:
        uint64_t v7 = v25;
LABEL_44:
        uint64_t v13 = (char *)sub_15E6904(a3, (uint64_t)v14, (unsigned __int8 *)v7);
        goto LABEL_52;
      default:
LABEL_45:
        if (v8) {
          BOOL v23 = (v8 & 7) == 4;
        }
        else {
          BOOL v23 = 1;
        }
        if (!v23)
        {
          if (*v6)
          {
            uint64_t v24 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v24 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = v25;
          }
          uint64_t v13 = (char *)sub_1885AC0(v8, v24, v7, a3);
LABEL_52:
          uint64_t v25 = v13;
          if (!v13) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
            return v25;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return v25;
    }
  }
}

uint64_t sub_15E6904(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15C2F58(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E6994(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15B9320(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    char v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    char v12 = v4 + 2;
  }
  uint64_t v4 = sub_15C31A8(v10, v12, a3);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_20:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 40);
  char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    unint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    unint64_t v15 = v4 + 2;
  }
  uint64_t v4 = sub_126F20C(v13, (unint64_t)v15, a3);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_26:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 44);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  uint64_t v4 = sub_126E168(v16, v18, a3);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_38;
  }
LABEL_32:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  char *v4 = 42;
  unsigned int v20 = *(_DWORD *)(v19 + 88);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  uint64_t v4 = sub_15E7E6C(v19, v21, a3);
  if ((v6 & 0x20) != 0)
  {
LABEL_38:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v22 = *(void *)(a1 + 64);
    char *v4 = 50;
    unsigned int v23 = *(_DWORD *)(v22 + 20);
    v4[1] = v23;
    if (v23 > 0x7F) {
      uint64_t v24 = sub_188A9CC(v23, v4 + 1);
    }
    else {
      uint64_t v24 = v4 + 2;
    }
    uint64_t v4 = sub_15C31A8(v22, v24, a3);
  }
LABEL_44:
  uint64_t v25 = *(void *)(a1 + 8);
  if ((v25 & 1) == 0) {
    return v4;
  }
  unint64_t v27 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v27 + 31) < 0)
  {
    uint64_t v28 = *(void **)(v27 + 8);
    uint64_t v29 = *(void *)(v27 + 16);
  }
  else
  {
    uint64_t v28 = (void *)(v27 + 8);
    LODWORD(v29) = *(unsigned __int8 *)(v27 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v29)
  {
    uint64_t v30 = (int)v29;
    memcpy(v4, v28, (int)v29);
    v4 += v30;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v28, v29, v4);
}

uint64_t sub_15E6CBC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x3F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_13;
  }
  if (v2)
  {
    uint64_t v4 = sub_15B956C(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15C32E4(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    uint64_t v9 = sub_126F38C(*(void *)(a1 + 40));
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_10:
      if ((v2 & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v10 = sub_126E400(*(void *)(a1 + 48));
  v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_17:
  uint64_t v11 = sub_15E80B8(*(void *)(a1 + 56));
  v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) != 0)
  {
LABEL_12:
    uint64_t v6 = sub_15C32E4(*(void *)(a1 + 64));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v12 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v3 += v13;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15E6E64(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 16, *(_DWORD *)(a2 + 24));
    sub_1301B24((uint64_t *)(a1 + 16), v6, v5, v4, **(_DWORD **)(a1 + 32) - *(_DWORD *)(a1 + 24));
    int v7 = *(_DWORD *)(a1 + 24) + v4;
    *(_DWORD *)(a1 + 24) = v7;
    unsigned int v8 = *(int **)(a1 + 32);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 56) + 8);
    uint64_t v11 = (uint64_t *)sub_188CCE4(a1 + 40, *(_DWORD *)(a2 + 48));
    sub_1301B24((uint64_t *)(a1 + 40), v11, v10, v9, **(_DWORD **)(a1 + 56) - *(_DWORD *)(a1 + 48));
    int v12 = *(_DWORD *)(a1 + 48) + v9;
    *(_DWORD *)(a1 + 48) = v12;
    uint64_t v13 = *(int **)(a1 + 56);
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 72);
  if (v14)
  {
    unint64_t v15 = (uint64_t *)(*(void *)(a2 + 80) + 8);
    uint64_t v16 = (uint64_t *)sub_188CCE4(a1 + 64, *(_DWORD *)(a2 + 72));
    sub_1638FD4((uint64_t *)(a1 + 64), v16, v15, v14, **(_DWORD **)(a1 + 80) - *(_DWORD *)(a1 + 72));
    int v17 = *(_DWORD *)(a1 + 72) + v14;
    *(_DWORD *)(a1 + 72) = v17;
    uint64_t v18 = *(int **)(a1 + 80);
    if (*v18 < v17) {
      *uint64_t v18 = v17;
    }
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (v19)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v19 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

BOOL sub_15E6FFC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_15BC024(*(void *)(*(void *)(a1 + 32) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  while ((int)v5 >= 1)
  {
    uint64_t v6 = v5 - 1;
    char v7 = sub_15BC024(*(void *)(*(void *)(a1 + 56) + 8 * v5));
    uint64_t v5 = v6;
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v10 = *(unsigned int *)(a1 + 72);
  do
  {
    BOOL v8 = (int)v10 < 1;
    if ((int)v10 < 1) {
      break;
    }
    uint64_t v11 = v10 - 1;
    char v12 = sub_15E79C8(*(void *)(*(void *)(a1 + 80) + 8 * v10));
    uint64_t v10 = v11;
  }
  while ((v12 & 1) != 0);
  return v8;
}

void *sub_15E70A4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.AddressCorrections");
}

uint64_t sub_15E70B4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
    goto LABEL_12;
  }
  if ((uint64_t (***)())a1 != &off_25403E8)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15BAFFC(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_15BAFFC(v6);
      operator delete();
    }
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      sub_15E8218(v7);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_12:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15E71A4(uint64_t a1)
{
  sub_15E70B4(a1);

  operator delete();
}

uint64_t sub_15E71DC(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 7) != 0)
  {
    if (v2)
    {
      uint64_t result = (uint64_t)sub_15BB0EC(*(unsigned char **)(result + 24));
      if ((v2 & 2) == 0)
      {
LABEL_4:
        if ((v2 & 4) == 0) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    else if ((v2 & 2) == 0)
    {
      goto LABEL_4;
    }
    uint64_t result = (uint64_t)sub_15BB0EC(*(unsigned char **)(v1 + 32));
    if ((v2 & 4) != 0) {
LABEL_5:
    }
      uint64_t result = sub_15E7264(*(void *)(v1 + 40));
  }
LABEL_6:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15E7264(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15E72E0(uint64_t a1, char *a2, int32x2_t *a3)
{
  unsigned int v23 = a2;
  if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
    return v23;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v23 + 1;
    unsigned int v8 = *v23;
    if (*v23 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v23, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v23 + 2;
      }
    }
    unsigned int v23 = v7;
    unsigned int v11 = v8 >> 3;
    if (v8 >> 3 != 3) {
      break;
    }
    if (v8 != 26) {
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v16 = *(void **)(a1 + 40);
    if (!v16)
    {
      int v17 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        int v17 = (void *)*v17;
      }
      uint64_t v16 = sub_15F97DC((uint64_t)v17);
      *(void *)(a1 + 40) = v16;
      uint64_t v7 = v23;
    }
    unint64_t v15 = (char *)sub_15E74EC(a3, (uint64_t)v16, (unsigned __int8 *)v7);
LABEL_38:
    unsigned int v23 = v15;
    if (!v15) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
      return v23;
    }
  }
  if (v11 == 2)
  {
    if (v8 == 18)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v18 = *(void *)(a1 + 32);
      if (!v18)
      {
        uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          uint64_t v19 = (void *)*v19;
        }
        sub_15C219C((uint64_t)v19);
        uint64_t v18 = v20;
        *(void *)(a1 + 32) = v20;
LABEL_36:
        uint64_t v7 = v23;
      }
LABEL_37:
      unint64_t v15 = sub_11FF458(a3, v18, (unsigned __int8 *)v7);
      goto LABEL_38;
    }
  }
  else if (v11 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v18 = *(void *)(a1 + 24);
    if (!v18)
    {
      uint64_t v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v21 = (void *)*v21;
      }
      sub_15C219C((uint64_t)v21);
      uint64_t v18 = v22;
      *(void *)(a1 + 24) = v22;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
LABEL_14:
  if (v8) {
    BOOL v13 = (v8 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v6)
    {
      int v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      int v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v23;
    }
    unint64_t v15 = (char *)sub_1885AC0(v8, v14, v7, a3);
    goto LABEL_38;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v23;
  }
  return 0;
}

uint64_t sub_15E74EC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E8308(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15E757C(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_15BB7A0(v7, (unint64_t)v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unsigned char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    char v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    char v12 = v4 + 2;
  }
  char v4 = sub_15BB7A0(v10, (unint64_t)v12, a3);
  if ((v6 & 4) != 0)
  {
LABEL_17:
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v13 = *(void *)(a1 + 40);
    unsigned char *v4 = 26;
    unsigned int v14 = *(_DWORD *)(v13 + 20);
    v4[1] = v14;
    if (v14 > 0x7F) {
      unint64_t v15 = sub_188A9CC(v14, v4 + 1);
    }
    else {
      unint64_t v15 = v4 + 2;
    }
    char v4 = sub_15E84B0(v13, v15, a3);
  }
LABEL_23:
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15E776C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 7) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  if (v2)
  {
    uint64_t v4 = sub_15BBC64(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15BBC64(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = sub_15E859C(*(void *)(a1 + 40));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v9 + 31) < 0) {
      uint64_t v10 = *(void *)(v9 + 16);
    }
    else {
      uint64_t v10 = *(unsigned __int8 *)(v9 + 31);
    }
    v3 += v10;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15E7874(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 7) == 0) {
    goto LABEL_30;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v5 = *(void *)(a1 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
      sub_15C219C((uint64_t)v7);
      *(void *)(a1 + 24) = v5;
    }
    if (*(void *)(a2 + 24)) {
      unsigned int v8 = *(uint64_t (****)())(a2 + 24);
    }
    else {
      unsigned int v8 = &off_253F580;
    }
    sub_15BBE88(v5, (uint64_t)v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_4;
  }
  *(_DWORD *)(a1 + 16) |= 2u;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    unsigned int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      unsigned int v11 = (void *)*v11;
    }
    sub_15C219C((uint64_t)v11);
    *(void *)(a1 + 32) = v9;
  }
  if (*(void *)(a2 + 32)) {
    char v12 = *(uint64_t (****)())(a2 + 32);
  }
  else {
    char v12 = &off_253F580;
  }
  sub_15BBE88(v9, (uint64_t)v12);
  if ((v4 & 4) != 0)
  {
LABEL_22:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v13 = *(std::string **)(a1 + 40);
    if (!v13)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      unint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
      if (v14) {
        unint64_t v15 = (void *)*v15;
      }
      uint64_t v13 = (std::string *)sub_15F97DC((uint64_t)v15);
      *(void *)(a1 + 40) = v13;
    }
    if (*(void *)(a2 + 40)) {
      uint64_t v16 = *(uint64_t (****)(uint64_t))(a2 + 40);
    }
    else {
      uint64_t v16 = &off_2540478;
    }
    sub_11EC100(v13, (uint64_t)v16);
  }
LABEL_30:
  uint64_t v17 = *(void *)(a2 + 8);
  if (v17)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v17 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15E79C8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_15BC024(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_15BC024(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15E7A14@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.AccessPointCorrections.EditedAccessPoint");
}

void *sub_15E7A24(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1638C40(a1 + 8);
  sub_1301628(a1 + 5);
  sub_1301628(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15E7ABC(void *a1)
{
  sub_15E7A24(a1);

  operator delete();
}

char *sub_15E7AF4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v33 = a2;
  if ((sub_11947B8((uint64_t)a3, &v33, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v7 = v33 + 1;
      unsigned int v8 = *v33;
      if (*v33 < 0)
      {
        unsigned int v9 = v8 + (*v7 << 7);
        unsigned int v8 = v9 - 128;
        if (*v7 < 0)
        {
          uint64_t v7 = (char *)sub_188C180((uint64_t)v33, v9 - 128);
          unsigned int v8 = v10;
        }
        else
        {
          uint64_t v7 = v33 + 2;
        }
      }
      uint64_t v33 = v7;
      unsigned int v11 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 == 26)
        {
          unint64_t v15 = v7 - 1;
          while (1)
          {
            uint64_t v16 = (unsigned __int8 *)(v15 + 1);
            uint64_t v33 = v15 + 1;
            uint64_t v17 = *(_DWORD **)(a1 + 80);
            if (v17 && (uint64_t v18 = *(int *)(a1 + 72), (int)v18 < *v17))
            {
              *(_DWORD *)(a1 + 72) = v18 + 1;
              uint64_t v19 = *(void *)&v17[2 * v18 + 2];
            }
            else
            {
              sub_15F96B0(*(void *)(a1 + 64));
              uint64_t v19 = sub_188CDC8(a1 + 64, v20);
              uint64_t v16 = (unsigned __int8 *)v33;
            }
            unint64_t v15 = sub_15E7DDC(a3, v19, v16);
            uint64_t v33 = v15;
            if (!v15) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *v15 != 26) {
              goto LABEL_50;
            }
          }
        }
      }
      else if (v11 == 2)
      {
        if (v8 == 18)
        {
          uint64_t v21 = v7 - 1;
          while (1)
          {
            uint64_t v22 = (unsigned __int8 *)(v21 + 1);
            uint64_t v33 = v21 + 1;
            unsigned int v23 = *(_DWORD **)(a1 + 56);
            if (v23 && (uint64_t v24 = *(int *)(a1 + 48), (int)v24 < *v23))
            {
              *(_DWORD *)(a1 + 48) = v24 + 1;
              uint64_t v25 = *(void *)&v23[2 * v24 + 2];
            }
            else
            {
              sub_15C219C(*(void *)(a1 + 40));
              uint64_t v25 = sub_188CDC8(a1 + 40, v26);
              uint64_t v22 = (unsigned __int8 *)v33;
            }
            uint64_t v21 = sub_11FF458(a3, v25, v22);
            uint64_t v33 = v21;
            if (!v21) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v21 || *v21 != 18) {
              goto LABEL_50;
            }
          }
        }
      }
      else if (v11 == 1 && v8 == 10)
      {
        unint64_t v27 = v7 - 1;
        while (1)
        {
          uint64_t v28 = (unsigned __int8 *)(v27 + 1);
          uint64_t v33 = v27 + 1;
          uint64_t v29 = *(_DWORD **)(a1 + 32);
          if (v29 && (uint64_t v30 = *(int *)(a1 + 24), (int)v30 < *v29))
          {
            *(_DWORD *)(a1 + 24) = v30 + 1;
            uint64_t v31 = *(void *)&v29[2 * v30 + 2];
          }
          else
          {
            sub_15C219C(*(void *)(a1 + 16));
            uint64_t v31 = sub_188CDC8(a1 + 16, v32);
            uint64_t v28 = (unsigned __int8 *)v33;
          }
          unint64_t v27 = sub_11FF458(a3, v31, v28);
          uint64_t v33 = v27;
          if (!v27) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v27 || *v27 != 10) {
            goto LABEL_50;
          }
        }
      }
      if (!v8 || (v8 & 7) == 4) {
        break;
      }
      if (*v6)
      {
        uint64_t v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        uint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        uint64_t v7 = v33;
      }
      uint64_t v33 = (char *)sub_1885AC0(v8, v14, v7, a3);
      if (!v33) {
        return 0;
      }
LABEL_50:
      if (sub_11947B8((uint64_t)a3, &v33, a3[11].i32[1])) {
        return v33;
      }
    }
    if (v7)
    {
      a3[10].i32[0] = v8 - 1;
      return v33;
    }
    return 0;
  }
  return v33;
}

char *sub_15E7DDC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E72E0(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15E7E6C(uint64_t a1, char *__dst, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        unsigned int v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        unsigned int v10 = __dst + 2;
      }
      __dst = sub_15BB7A0(v8, (unint64_t)v10, a3);
    }
  }
  int v11 = *(_DWORD *)(a1 + 48);
  if (v11)
  {
    for (int j = 0; j != v11; ++j)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * j + 8);
      *__dst = 18;
      unsigned int v14 = *(_DWORD *)(v13 + 20);
      __dst[1] = v14;
      if (v14 > 0x7F) {
        unint64_t v15 = sub_188A9CC(v14, __dst + 1);
      }
      else {
        unint64_t v15 = __dst + 2;
      }
      __dst = sub_15BB7A0(v13, (unint64_t)v15, a3);
    }
  }
  int v16 = *(_DWORD *)(a1 + 72);
  if (v16)
  {
    for (int k = 0; k != v16; ++k)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 80) + 8 * k + 8);
      *__dst = 26;
      unsigned int v19 = *(_DWORD *)(v18 + 20);
      __dst[1] = v19;
      if (v19 > 0x7F) {
        uint64_t v20 = sub_188A9CC(v19, __dst + 1);
      }
      else {
        uint64_t v20 = __dst + 2;
      }
      __dst = sub_15E757C(v18, (unint64_t)v20, a3);
    }
  }
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return __dst;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v23 + 31) < 0)
  {
    uint64_t v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    uint64_t v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(__dst, v24, (int)v25);
    __dst += v26;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v24, v25, __dst);
}

uint64_t sub_15E80B8(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    int v4 = (uint64_t *)(v3 + 8);
  }
  else {
    int v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15BBC64(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 48);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    int v11 = (uint64_t *)(v10 + 8);
  }
  else {
    int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = sub_15BBC64(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v15 = *(int *)(a1 + 72);
  uint64_t v16 = v9 + v15;
  uint64_t v17 = *(void *)(a1 + 80);
  if (v17) {
    uint64_t v18 = (uint64_t *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v15)
  {
    uint64_t v19 = 8 * v15;
    do
    {
      uint64_t v20 = *v18++;
      uint64_t v21 = sub_15E776C(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v22 = *(void *)(a1 + 8);
  if (v22)
  {
    unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v24 + 31) < 0) {
      uint64_t v25 = *(void *)(v24 + 16);
    }
    else {
      uint64_t v25 = *(unsigned __int8 *)(v24 + 31);
    }
    v16 += v25;
  }
  *(_DWORD *)(a1 + 88) = v16;
  return v16;
}

void *sub_15E8208@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.AccessPointCorrections");
}

uint64_t sub_15E8218(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    goto LABEL_9;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_9:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15E82D0(uint64_t a1)
{
  sub_15E8218(a1);

  operator delete();
}

uint64_t sub_15E8308(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v20 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
    return *(void *)v20;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = (char *)(*(void *)v20 + 1);
    unsigned int v8 = **(unsigned char **)v20;
    if ((char)**(unsigned char **)v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180(*(uint64_t *)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (char *)(*(void *)v20 + 2);
      }
    }
    *(void *)uint64_t v20 = v7;
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v16 = (uint64_t *)*v16;
        }
        uint64_t v17 = (void *)(a1 + 32);
        goto LABEL_27;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v16 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        uint64_t v16 = (uint64_t *)*v16;
      }
      uint64_t v17 = (void *)(a1 + 24);
LABEL_27:
      uint64_t v19 = (std::string *)sub_1880F84(v17, v16);
      uint64_t v14 = (void *)sub_188C244(v19, *(char **)v20, (uint64_t)a3);
      goto LABEL_28;
    }
    if (!v8 || (v8 & 7) == 4) {
      break;
    }
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = *(char **)v20;
    }
    uint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
LABEL_28:
    *(void *)uint64_t v20 = v14;
    if (!v14) {
      goto LABEL_34;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v20, a3[11].i32[1])) {
      return *(void *)v20;
    }
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v20;
  }
LABEL_34:
  *(void *)uint64_t v20 = 0;
  return *(void *)v20;
}

char *sub_15E84B0(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    int v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15E859C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15E8678()
{
  return 1;
}

void *sub_15E8680@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.CorrectedString");
}

void *sub_15E8690(void *a1)
{
  unint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DE8(a1 + 5);
  sub_1889DE8(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15E8714(void *a1)
{
  sub_15E8690(a1);

  operator delete();
}

uint64_t sub_15E874C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v30 = a2;
  if ((sub_11947B8((uint64_t)a3, (char **)v30, a3[11].i32[1]) & 1) == 0)
  {
    unint64_t v6 = (uint64_t **)(a1 + 40);
    uint64_t v7 = (uint64_t **)(a1 + 16);
    uint64_t v8 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v9 = (char *)(*(void *)v30 + 1);
      unsigned int v10 = **(unsigned char **)v30;
      if ((char)**(unsigned char **)v30 < 0)
      {
        unsigned int v11 = v10 + (*v9 << 7);
        unsigned int v10 = v11 - 128;
        if (*v9 < 0)
        {
          uint64_t v9 = (char *)sub_188C180(*(uint64_t *)v30, v11 - 128);
          unsigned int v10 = v12;
        }
        else
        {
          uint64_t v9 = (char *)(*(void *)v30 + 2);
        }
      }
      *(void *)uint64_t v30 = v9;
      if (v10 >> 3 == 2)
      {
        if (v10 == 18)
        {
          uint64_t v16 = v9 - 1;
          while (1)
          {
            uint64_t v17 = (char *)(v16 + 1);
            *(void *)uint64_t v30 = v16 + 1;
            uint64_t v18 = *(_DWORD **)(a1 + 56);
            if (v18 && (uint64_t v19 = *(int *)(a1 + 48), (int)v19 < *v18))
            {
              *(_DWORD *)(a1 + 48) = v19 + 1;
              uint64_t v20 = *(std::string **)&v18[2 * v19 + 2];
            }
            else
            {
              if (!*v6) {
                operator new();
              }
              void *v22 = v21;
              v22[1] = sub_3A6EDC;
              void *v21 = 0;
              v21[1] = 0;
              int v21[2] = 0;
              uint64_t v20 = (std::string *)sub_188CDC8(a1 + 40, (uint64_t)v21);
              uint64_t v17 = *(char **)v30;
            }
            uint64_t v16 = sub_188C244(v20, v17, (uint64_t)a3);
            *(void *)uint64_t v30 = v16;
            if (!v16) {
              goto LABEL_48;
            }
            if (*(void *)a3 <= (unint64_t)v16 || *v16 != 18) {
              goto LABEL_43;
            }
          }
        }
      }
      else if (v10 >> 3 == 1 && v10 == 10)
      {
        unint64_t v23 = v9 - 1;
        while (1)
        {
          unint64_t v24 = (char *)(v23 + 1);
          *(void *)uint64_t v30 = v23 + 1;
          uint64_t v25 = *(_DWORD **)(a1 + 32);
          if (v25 && (uint64_t v26 = *(int *)(a1 + 24), (int)v26 < *v25))
          {
            *(_DWORD *)(a1 + 24) = v26 + 1;
            unint64_t v27 = *(std::string **)&v25[2 * v26 + 2];
          }
          else
          {
            if (!*v7) {
              operator new();
            }
            *uint64_t v29 = v28;
            v29[1] = sub_3A6EDC;
            *uint64_t v28 = 0;
            v28[1] = 0;
            int v28[2] = 0;
            unint64_t v27 = (std::string *)sub_188CDC8(a1 + 16, (uint64_t)v28);
            unint64_t v24 = *(char **)v30;
          }
          unint64_t v23 = sub_188C244(v27, v24, (uint64_t)a3);
          *(void *)uint64_t v30 = v23;
          if (!v23) {
            goto LABEL_48;
          }
          if (*(void *)a3 <= (unint64_t)v23 || *v23 != 10) {
            goto LABEL_43;
          }
        }
      }
      if (!v10 || (v10 & 7) == 4) {
        break;
      }
      if (*v8)
      {
        uint64_t v15 = (std::string *)((*v8 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        uint64_t v15 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        uint64_t v9 = *(char **)v30;
      }
      *(void *)uint64_t v30 = sub_1885AC0(v10, v15, v9, a3);
      if (!*(void *)v30) {
        goto LABEL_48;
      }
LABEL_43:
      if (sub_11947B8((uint64_t)a3, (char **)v30, a3[11].i32[1])) {
        return *(void *)v30;
      }
    }
    if (v9)
    {
      a3[10].i32[0] = v10 - 1;
      return *(void *)v30;
    }
LABEL_48:
    *(void *)uint64_t v30 = 0;
  }
  return *(void *)v30;
}

char *sub_15E8A2C(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *(void **)(*(void *)(a1 + 32) + v7 + 8);
      if (*((char *)v9 + 23) < 0)
      {
        int64_t v10 = v9[1];
        if (v10 > 127) {
          goto LABEL_12;
        }
      }
      else
      {
        int64_t v10 = *((unsigned __int8 *)v9 + 23);
      }
      if (*(void *)a3 - (void)__dst + 14 >= v10)
      {
        *__dst = 10;
        __dst[1] = v10;
        if (*((char *)v9 + 23) < 0) {
          uint64_t v9 = (void *)*v9;
        }
        unsigned int v11 = __dst + 2;
        memcpy(v11, v9, v10);
        __dst = &v11[v10];
        goto LABEL_10;
      }
LABEL_12:
      __dst = (char *)sub_188A868(a3, 1, (uint64_t)v9, __dst);
LABEL_10:
      v7 += 8;
    }
    while (v8 != v7);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 48);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 8 * v12;
    do
    {
      uint64_t v15 = *(void **)(*(void *)(a1 + 56) + v13 + 8);
      if (*((char *)v15 + 23) < 0)
      {
        int64_t v16 = v15[1];
        if (v16 > 127) {
          goto LABEL_24;
        }
      }
      else
      {
        int64_t v16 = *((unsigned __int8 *)v15 + 23);
      }
      if (*(void *)a3 - (void)__dst + 14 >= v16)
      {
        *__dst = 18;
        __dst[1] = v16;
        if (*((char *)v15 + 23) < 0) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v17 = __dst + 2;
        memcpy(v17, v15, v16);
        __dst = &v17[v16];
        goto LABEL_22;
      }
LABEL_24:
      __dst = (char *)sub_188A868(a3, 2, (uint64_t)v15, __dst);
LABEL_22:
      v13 += 8;
    }
    while (v14 != v13);
  }
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return __dst;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(__dst, v21, (int)v22);
    __dst += v23;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v21, v22, __dst);
}

uint64_t sub_15E8C3C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 32) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 48);
  uint64_t v8 = v3 + v7;
  if ((int)v7 >= 1)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 56) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v12 = *(void *)(v10 + 8);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v11;
      }
      v8 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      --v7;
    }
    while (v7);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    v8 += v16;
  }
  *(_DWORD *)(a1 + 64) = v8;
  return v8;
}

uint64_t sub_15E8D2C()
{
  return 1;
}

void *sub_15E8D34@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.CategoryCorrections");
}

uint64_t sub_15E8D44(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_25404E8)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_182B32C(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_182E7B8(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15E8E14(uint64_t a1)
{
  sub_15E8D44(a1);

  operator delete();
}

uint64_t sub_15E8E4C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if (v2) {
      uint64_t result = sub_182B368(*(void *)(result + 24));
    }
    if ((v2 & 2) != 0) {
      uint64_t result = sub_182E7F4(*(void *)(v1 + 32));
    }
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

char *sub_15E8EBC(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v19 + 1;
    unsigned int v8 = *v19;
    if (*v19 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v19, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v19 + 2;
      }
    }
    uint64_t v19 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_1836F0C((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_1179958(a3, v15, (unsigned __int8 *)v7);
LABEL_31:
    uint64_t v19 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17)
    {
      uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v17 = sub_1836E54((uint64_t)v18);
      *(void *)(a1 + 24) = v17;
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_11798C8(a3, v17, (unsigned __int8 *)v7);
    goto LABEL_31;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_31;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v19;
  }
  return 0;
}

char *sub_15E907C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_182BE50(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 44);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    char v4 = sub_182F28C(v10, v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15E91FC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_182C500(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_182F8B4(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15E92D4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v5 = *(void *)(a1 + 24);
      if (!v5)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6) {
          uint64_t v7 = (void *)*v7;
        }
        uint64_t v5 = sub_1836E54((uint64_t)v7);
        *(void *)(a1 + 24) = v5;
      }
      if (*(void *)(a2 + 24)) {
        unint64_t v8 = *(uint64_t (****)())(a2 + 24);
      }
      else {
        unint64_t v8 = &off_254CA18;
      }
      sub_182C88C(v5, (uint64_t)v8);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v9 = *(void *)(a1 + 32);
      if (!v9)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        unsigned int v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
        if (v10) {
          unsigned int v11 = (void *)*v11;
        }
        uint64_t v9 = sub_1836F0C((uint64_t)v11);
        *(void *)(a1 + 32) = v9;
      }
      if (*(void *)(a2 + 32)) {
        BOOL v12 = *(uint64_t (****)())(a2 + 32);
      }
      else {
        BOOL v12 = &off_254CB28;
      }
      sub_182FC60(v9, (uint64_t)v12);
    }
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15E93D8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    uint64_t result = sub_182D83C(*(void *)(a1 + 24));
    if (!result) {
      return result;
    }
    int v2 = *(_DWORD *)(a1 + 16);
  }
  if ((v2 & 2) == 0) {
    return 1;
  }
  uint64_t result = sub_18300B0(*(void *)(a1 + 32));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15E9424@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PlaceRequestResponse");
}

void *sub_15E9434(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15E94B8((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t sub_15E94B8(uint64_t result)
{
  if ((uint64_t (***)())result != &off_2540510)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void **)(result + 24);
    if (v2)
    {
      sub_15E3558(v2);
      operator delete();
    }
    if (v1[4])
    {
      sub_1762C7C();
      operator delete();
    }
    uint64_t v3 = v1[5];
    if (v3)
    {
      sub_182B32C(v3);
      operator delete();
    }
    uint64_t result = v1[6];
    if (result)
    {
      sub_15F4630(result);
      operator delete();
    }
  }
  return result;
}

void sub_15E9584(void *a1)
{
  sub_15E9434(a1);

  operator delete();
}

uint64_t sub_15E95BC(uint64_t result)
{
  uint64_t v1 = result;
  *(_DWORD *)(result + 24) = 0;
  uint64_t v2 = *(unsigned int *)(result + 48);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 56) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15DAAEC(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 48) = 0;
  }
  int v5 = *(_DWORD *)(v1 + 16);
  if ((v5 & 7) != 0)
  {
    if ((v5 & 1) == 0)
    {
      if ((v5 & 2) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      unint64_t v7 = *(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v7 + 23) < 0)
      {
        **(unsigned char **)unint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        if ((v5 & 4) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
        if ((v5 & 4) == 0) {
          goto LABEL_21;
        }
      }
      goto LABEL_18;
    }
    unint64_t v6 = *(void *)(v1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v5 & 2) != 0) {
        goto LABEL_14;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v5 & 2) != 0) {
        goto LABEL_14;
      }
    }
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_21;
    }
LABEL_18:
    unint64_t v8 = *(void *)(v1 + 80) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)unint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
    }
  }
LABEL_21:
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v9 = v1 + 8;
  *(void *)(v9 + 80) = 0;
  *(_DWORD *)(v9 + 8) = 0;
  if (v10)
  {
    return sub_188B4AC((uint64_t *)v9);
  }
  return result;
}

char *sub_15E96E8(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v35 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v35, a3[11].i32[1])) {
    goto LABEL_2;
  }
  unint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    unint64_t v8 = v35 + 1;
    unsigned int v9 = *v35;
    if (*v35 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        unint64_t v8 = (char *)sub_188C180((uint64_t)v35, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        unint64_t v8 = v35 + 2;
      }
    }
    uint64_t v35 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8) {
          goto LABEL_45;
        }
        BOOL v12 = v8 + 1;
        unint64_t v13 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v14 = *v12;
        int v15 = v13 + (v14 << 7);
        unint64_t v13 = (v15 - 128);
        if (v14 < 0)
        {
          uint64_t v35 = (char *)sub_188C138((uint64_t)v8, (v15 - 128));
          if (!v35) {
            goto LABEL_66;
          }
          unint64_t v13 = v31;
        }
        else
        {
          BOOL v12 = v8 + 2;
LABEL_13:
          uint64_t v35 = v12;
        }
        if (v13 > 3)
        {
          if (*v7) {
            uint64_t v34 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v34 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(1, v13, v34);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x10u;
          *(_DWORD *)(a1 + 56) = v13;
        }
        goto LABEL_53;
      case 2u:
        if (v9 != 18) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v16 = *(void *)(a1 + 24);
        if (!v16)
        {
          uint64_t v17 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v17 = (void *)*v17;
          }
          sub_15F946C((uint64_t)v17);
          uint64_t v16 = v18;
          *(void *)(a1 + 24) = v18;
          unint64_t v8 = v35;
        }
        uint64_t v19 = (char *)sub_15E9AA4(a3, v16, (unsigned __int8 *)v8);
        goto LABEL_52;
      case 3u:
        if (v9 != 26) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v20 = *(void *)(a1 + 32);
        if (!v20)
        {
          uint64_t v21 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v21 = (void *)*v21;
          }
          uint64_t v20 = sub_178CDA8((uint64_t)v21);
          *(void *)(a1 + 32) = v20;
          unint64_t v8 = v35;
        }
        uint64_t v19 = (char *)sub_1265F8C(a3, v20, (unsigned __int8 *)v8);
        goto LABEL_52;
      case 4u:
        if (v9 != 34) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v22 = *(void *)(a1 + 40);
        if (!v22)
        {
          uint64_t v23 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v23 = (void *)*v23;
          }
          uint64_t v22 = sub_1836E54((uint64_t)v23);
          *(void *)(a1 + 40) = v22;
          unint64_t v8 = v35;
        }
        uint64_t v19 = (char *)sub_11798C8(a3, v22, (unsigned __int8 *)v8);
        goto LABEL_52;
      case 5u:
        if (v9 != 40) {
          goto LABEL_45;
        }
        v5 |= 0x20u;
        unint64_t v24 = v8 + 1;
        uint64_t v25 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        int v26 = *v24;
        uint64_t v25 = v25 + (v26 << 7) - 128;
        if (v26 < 0)
        {
          uint64_t v32 = (char *)sub_188C138((uint64_t)v8, v25);
          uint64_t v35 = v32;
          *(unsigned char *)(a1 + 60) = v33 != 0;
          if (!v32) {
            goto LABEL_66;
          }
        }
        else
        {
          unint64_t v24 = v8 + 2;
LABEL_38:
          uint64_t v35 = v24;
          *(unsigned char *)(a1 + 60) = v25 != 0;
        }
        goto LABEL_53;
      case 6u:
        if (v9 != 50) {
          goto LABEL_45;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        unint64_t v27 = *(void **)(a1 + 48);
        if (!v27)
        {
          uint64_t v28 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v28 = (void *)*v28;
          }
          unint64_t v27 = sub_15FA3B4((uint64_t)v28);
          *(void *)(a1 + 48) = v27;
          unint64_t v8 = v35;
        }
        uint64_t v19 = (char *)sub_15E9B34(a3, (uint64_t)v27, (unsigned __int8 *)v8);
        goto LABEL_52;
      default:
LABEL_45:
        if (v9) {
          BOOL v29 = (v9 & 7) == 4;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29)
        {
          if (*v7)
          {
            uint64_t v30 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            unint64_t v8 = v35;
          }
          uint64_t v19 = (char *)sub_1885AC0(v9, v30, v8, a3);
LABEL_52:
          uint64_t v35 = v19;
          if (!v19) {
            goto LABEL_66;
          }
LABEL_53:
          if (sub_11947B8((uint64_t)a3, &v35, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_66:
        }
          uint64_t v35 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v35;
    }
  }
}

uint64_t sub_15E9AA4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E3B68(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15E9B34(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F4748(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15E9BC4(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 56);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    unsigned char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    uint64_t v4 = sub_15E4350(v10, v12, a3);
    if ((v6 & 2) == 0)
    {
LABEL_10:
      if ((v6 & 4) == 0) {
        goto LABEL_11;
      }
      goto LABEL_26;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_10;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  unsigned char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 44);
  v4[1] = v14;
  if (v14 > 0x7F) {
    int v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    int v15 = v4 + 2;
  }
  uint64_t v4 = sub_1763540(v13, v15, a3);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_26:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 40);
  unsigned char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 44);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  uint64_t v4 = sub_182BE50(v16, v18, a3);
  if ((v6 & 0x20) == 0)
  {
LABEL_12:
    if ((v6 & 8) == 0) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
LABEL_32:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v19 = *(unsigned char *)(a1 + 60);
  unsigned char *v4 = 40;
  v4[1] = v19;
  v4 += 2;
  if ((v6 & 8) != 0)
  {
LABEL_35:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v20 = *(void *)(a1 + 48);
    unsigned char *v4 = 50;
    unsigned int v21 = *(_DWORD *)(v20 + 20);
    v4[1] = v21;
    if (v21 > 0x7F) {
      uint64_t v22 = sub_188A9CC(v21, v4 + 1);
    }
    else {
      uint64_t v22 = v4 + 2;
    }
    uint64_t v4 = sub_15F4BE0(v20, (unint64_t)v22, a3);
  }
LABEL_41:
  uint64_t v23 = *(void *)(a1 + 8);
  if ((v23 & 1) == 0) {
    return v4;
  }
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v25 + 31) < 0)
  {
    int v26 = *(void **)(v25 + 8);
    uint64_t v27 = *(void *)(v25 + 16);
  }
  else
  {
    int v26 = (void *)(v25 + 8);
    LODWORD(v27) = *(unsigned __int8 *)(v25 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v27)
  {
    uint64_t v28 = (int)v27;
    memcpy(v4, v26, (int)v27);
    v4 += v28;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v26, v27, v4);
}

uint64_t sub_15E9ED4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x3F) == 0)
  {
    uint64_t result = 0;
    goto LABEL_21;
  }
  if (v2)
  {
    uint64_t v5 = sub_15E4824(*(void *)(a1 + 24));
    uint64_t v3 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v6 = sub_1763C40(*(void *)(a1 + 32));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v8 = sub_15F4EAC(*(void *)(a1 + 48));
    v3 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 0x10) == 0) {
      goto LABEL_18;
    }
LABEL_14:
    int v9 = *(_DWORD *)(a1 + 56);
    if (v9 < 0) {
      uint64_t v10 = 11;
    }
    else {
      uint64_t v10 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v3 += v10;
    goto LABEL_18;
  }
  uint64_t v7 = sub_182C500(*(void *)(a1 + 40));
  v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 8) != 0) {
    goto LABEL_13;
  }
LABEL_10:
  if ((v2 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_18:
  if ((v2 & 0x20) != 0) {
    uint64_t result = v3 + 2;
  }
  else {
    uint64_t result = v3;
  }
LABEL_21:
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    result += v13;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

std::string *sub_15EA054(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = result + 1;
    uint64_t data_low = SLODWORD(result[1].__r_.__value_.__l.__data_);
    sub_188CA54((unsigned int *)&result[1], data_low + v4);
    std::string::size_type size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v5->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    uint64_t result = (std::string *)memcpy((void *)(size + 8 * data_low), *(const void **)(a2 + 32), 8 * *(int *)(a2 + 24));
  }
  int v8 = *(_DWORD *)(a2 + 48);
  if (v8)
  {
    int v9 = (uint64_t *)(*(void *)(a2 + 56) + 8);
    uint64_t v10 = (std::string **)sub_188CCE4((uint64_t)&v3[1].__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 48));
    uint64_t result = sub_1639178((std::string *)((char *)v3 + 40), v10, v9, v8, *(_DWORD *)v3[2].__r_.__value_.__l.__size_ - LODWORD(v3[2].__r_.__value_.__l.__data_));
    int v11 = LODWORD(v3[2].__r_.__value_.__l.__data_) + v8;
    LODWORD(v3[2].__r_.__value_.__l.__data_) = v11;
    unint64_t v12 = (int *)v3[2].__r_.__value_.__l.__size_;
    if (*v12 < v11) {
      *unint64_t v12 = v11;
    }
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 0xF) != 0)
  {
    if (v13)
    {
      int v15 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::size_type v16 = v3->__r_.__value_.__l.__size_;
      unsigned int v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        unsigned int v17 = (uint64_t *)*v17;
      }
      uint64_t result = sub_1881DF4((std::string **)&v3[2].__r_.__value_.__r.__words[2], v15, v17);
      if ((v13 & 2) == 0)
      {
LABEL_9:
        if ((v13 & 4) == 0) {
          goto LABEL_10;
        }
        goto LABEL_23;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_9;
    }
    uint64_t v18 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    std::string::size_type v19 = v3->__r_.__value_.__l.__size_;
    uint64_t v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19) {
      uint64_t v20 = (uint64_t *)*v20;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[3], v18, v20);
    if ((v13 & 4) == 0)
    {
LABEL_10:
      if ((v13 & 8) == 0)
      {
LABEL_12:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v13;
        goto LABEL_13;
      }
LABEL_11:
      v3[3].__r_.__value_.__r.__words[2] = *(void *)(a2 + 88);
      goto LABEL_12;
    }
LABEL_23:
    unsigned int v21 = (long long *)(*(void *)(a2 + 80) & 0xFFFFFFFFFFFFFFFELL);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
    std::string::size_type v22 = v3->__r_.__value_.__l.__size_;
    uint64_t v23 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22) {
      uint64_t v23 = (uint64_t *)*v23;
    }
    uint64_t result = sub_1881DF4((std::string **)&v3[3].__r_.__value_.__l.__size_, v21, v23);
    if ((v13 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

void *sub_15EA238@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiFeedback");
}

uint64_t sub_15EA248(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15EA2E4((uint64_t (***)())a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_12C2134((void *)(a1 + 48));
  sub_12C20B4((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t (***sub_15EA2E4(uint64_t (***result)()))()
{
  if (result != &off_2540550)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[9];
    if (v2)
    {
      sub_15EB3AC(v2);
      operator delete();
    }
    if (v1[10])
    {
      sub_1762C7C();
      operator delete();
    }
    uint64_t v3 = (uint64_t)v1[11];
    if (v3)
    {
      sub_126C3A8(v3);
      operator delete();
    }
    uint64_t result = (uint64_t (***)())v1[12];
    if (result)
    {
      sub_182B32C(result);
      operator delete();
    }
  }
  return result;
}

void sub_15EA3B0(uint64_t a1)
{
  sub_15EA248(a1);

  operator delete();
}

uint64_t sub_15EA3E8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15C356C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  int v5 = *(_DWORD *)(v1 + 16);
  if ((v5 & 0x7F) == 0) {
    goto LABEL_14;
  }
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_22:
    unint64_t v9 = *(void *)(v1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0)
    {
      **(unsigned char **)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      if ((v5 & 4) != 0) {
        goto LABEL_26;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v9 = 0;
      *(unsigned char *)(v9 + 23) = 0;
      if ((v5 & 4) != 0) {
        goto LABEL_26;
      }
    }
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
  unint64_t v8 = *(void *)(v1 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v8 + 23) < 0)
  {
    **(unsigned char **)unint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    if ((v5 & 2) != 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v8 = 0;
    *(unsigned char *)(v8 + 23) = 0;
    if ((v5 & 2) != 0) {
      goto LABEL_22;
    }
  }
LABEL_8:
  if ((v5 & 4) == 0) {
    goto LABEL_9;
  }
LABEL_26:
  uint64_t result = sub_15C5484(*(void *)(v1 + 64));
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
LABEL_28:
    uint64_t result = (uint64_t)sub_12605AC(*(void *)(v1 + 80));
    if ((v5 & 0x20) == 0)
    {
LABEL_12:
      if ((v5 & 0x40) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = (uint64_t)sub_1260464(*(unsigned char **)(v1 + 72));
  if ((v5 & 0x10) != 0) {
    goto LABEL_28;
  }
LABEL_11:
  if ((v5 & 0x20) == 0) {
    goto LABEL_12;
  }
LABEL_29:
  uint64_t result = sub_15E650C(*(void *)(v1 + 88));
  if ((v5 & 0x40) != 0) {
LABEL_13:
  }
    uint64_t result = sub_15E3AD0(*(void *)(v1 + 96));
LABEL_14:
  char v7 = *(unsigned char *)(v1 + 8);
  uint64_t v6 = v1 + 8;
  *(_WORD *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

char *sub_15EA530(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v41 = a2;
  if (sub_11947B8((uint64_t)a3, &v41, a3[11].i32[1])) {
    return v41;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    char v7 = v41 + 1;
    unsigned int v8 = *v41;
    if (*v41 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        char v7 = (char *)sub_188C180((uint64_t)v41, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        char v7 = v41 + 2;
      }
    }
    uint64_t v41 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 8) {
          goto LABEL_60;
        }
        int v11 = v7 + 1;
        unint64_t v12 = *v7;
        if ((*v7 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v13 = *v11;
        int v14 = v12 + (v13 << 7);
        unint64_t v12 = (v14 - 128);
        if (v13 < 0)
        {
          uint64_t v41 = (char *)sub_188C138((uint64_t)v7, (v14 - 128));
          if (!v41) {
            return 0;
          }
          unint64_t v12 = v39;
        }
        else
        {
          int v11 = v7 + 2;
LABEL_13:
          uint64_t v41 = v11;
        }
        if (v12 > 3)
        {
          if (*v6) {
            uint64_t v40 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v40 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(1, v12, v40);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x10u;
          *(_DWORD *)(a1 + 104) = v12;
        }
        goto LABEL_68;
      case 2u:
        if (v8 != 18) {
          goto LABEL_60;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v15 = *(void *)(a1 + 72);
        if (!v15)
        {
          std::string::size_type v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            std::string::size_type v16 = (void *)*v16;
          }
          sub_15F9ABC((uint64_t)v16);
          uint64_t v15 = v17;
          *(void *)(a1 + 72) = v17;
          char v7 = v41;
        }
        uint64_t v18 = (char *)sub_15EA994(a3, v15, (unsigned __int8 *)v7);
        goto LABEL_67;
      case 3u:
        if (v8 != 26) {
          goto LABEL_60;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v19 = *(void *)(a1 + 80);
        if (!v19)
        {
          uint64_t v20 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v20 = (void *)*v20;
          }
          uint64_t v19 = sub_178CDA8((uint64_t)v20);
          *(void *)(a1 + 80) = v19;
          char v7 = v41;
        }
        uint64_t v18 = (char *)sub_1265F8C(a3, v19, (unsigned __int8 *)v7);
        goto LABEL_67;
      case 4u:
        if (v8 != 34) {
          goto LABEL_60;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        unsigned int v21 = *(void **)(a1 + 88);
        if (!v21)
        {
          std::string::size_type v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            std::string::size_type v22 = (void *)*v22;
          }
          unsigned int v21 = sub_1283D90((uint64_t)v22);
          *(void *)(a1 + 88) = v21;
          char v7 = v41;
        }
        uint64_t v18 = (char *)sub_126613C(a3, (uint64_t)v21, (unsigned __int8 *)v7);
        goto LABEL_67;
      case 5u:
        if (v8 != 42) {
          goto LABEL_60;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v23 = *(void *)(a1 + 96);
        if (!v23)
        {
          unint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unint64_t v24 = (void *)*v24;
          }
          uint64_t v23 = sub_1836E54((uint64_t)v24);
          *(void *)(a1 + 96) = v23;
          char v7 = v41;
        }
        uint64_t v18 = (char *)sub_11798C8(a3, v23, (unsigned __int8 *)v7);
        goto LABEL_67;
      case 6u:
        if (v8 != 50) {
          goto LABEL_60;
        }
        unint64_t v25 = v7 - 1;
        while (1)
        {
          int v26 = (unsigned __int8 *)(v25 + 1);
          uint64_t v41 = v25 + 1;
          uint64_t v27 = *(_DWORD **)(a1 + 40);
          if (v27 && (uint64_t v28 = *(int *)(a1 + 32), (int)v28 < *v27))
          {
            *(_DWORD *)(a1 + 32) = v28 + 1;
            uint64_t v29 = *(void *)&v27[2 * v28 + 2];
          }
          else
          {
            uint64_t v30 = sub_16332DC(*(void *)(a1 + 24));
            uint64_t v29 = sub_188CDC8(a1 + 24, v30);
            int v26 = (unsigned __int8 *)v41;
          }
          unint64_t v25 = (char *)sub_118D0CC(a3, v29, v26);
          uint64_t v41 = v25;
          if (!v25) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v25 || *v25 != 50) {
            goto LABEL_68;
          }
        }
      case 7u:
        if (v8 != 58) {
          goto LABEL_60;
        }
        unint64_t v31 = v7 - 1;
        while (1)
        {
          uint64_t v32 = (unsigned __int8 *)(v31 + 1);
          uint64_t v41 = v31 + 1;
          uint64_t v33 = *(_DWORD **)(a1 + 64);
          if (v33 && (uint64_t v34 = *(int *)(a1 + 56), (int)v34 < *v33))
          {
            *(_DWORD *)(a1 + 56) = v34 + 1;
            uint64_t v35 = *(void *)&v33[2 * v34 + 2];
          }
          else
          {
            uint64_t v36 = sub_1633394(*(void *)(a1 + 48));
            uint64_t v35 = sub_188CDC8(a1 + 48, v36);
            uint64_t v32 = (unsigned __int8 *)v41;
          }
          unint64_t v31 = sub_126601C(a3, v35, v32);
          uint64_t v41 = v31;
          if (!v31) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v31 || *v31 != 58) {
            goto LABEL_68;
          }
        }
      default:
LABEL_60:
        if (v8) {
          BOOL v37 = (v8 & 7) == 4;
        }
        else {
          BOOL v37 = 1;
        }
        if (!v37)
        {
          if (*v6)
          {
            uint64_t v38 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v38 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            char v7 = v41;
          }
          uint64_t v18 = (char *)sub_1885AC0(v8, v38, v7, a3);
LABEL_67:
          uint64_t v41 = v18;
          if (!v18) {
            return 0;
          }
LABEL_68:
          if (sub_11947B8((uint64_t)a3, &v41, a3[11].i32[1])) {
            return v41;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return v41;
    }
  }
}

uint64_t sub_15EA994(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15EB58C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15EAA24(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 104);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 72);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      unint64_t v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      unint64_t v12 = v4 + 2;
    }
    uint64_t v4 = sub_15EBA8C(v10, v12, a3);
    if ((v6 & 2) == 0)
    {
LABEL_10:
      if ((v6 & 4) == 0) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_10;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 80);
  char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 44);
  v4[1] = v14;
  if (v14 > 0x7F) {
    uint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    uint64_t v15 = v4 + 2;
  }
  uint64_t v4 = sub_1763540(v13, v15, a3);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_31;
  }
LABEL_25:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 88);
  char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 20);
  v4[1] = v17;
  if (v17 > 0x7F) {
    uint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    uint64_t v18 = v4 + 2;
  }
  uint64_t v4 = sub_126C608(v16, (unint64_t)v18, a3);
  if ((v6 & 8) != 0)
  {
LABEL_31:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v19 = *(void *)(a1 + 96);
    char *v4 = 42;
    unsigned int v20 = *(_DWORD *)(v19 + 44);
    v4[1] = v20;
    if (v20 > 0x7F) {
      unsigned int v21 = sub_188A9CC(v20, v4 + 1);
    }
    else {
      unsigned int v21 = v4 + 2;
    }
    uint64_t v4 = sub_182BE50(v19, v21, a3);
  }
LABEL_37:
  int v22 = *(_DWORD *)(a1 + 32);
  if (v22)
  {
    for (int i = 0; i != v22; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      char *v4 = 50;
      unsigned int v25 = *(_DWORD *)(v24 + 44);
      v4[1] = v25;
      if (v25 > 0x7F) {
        int v26 = sub_188A9CC(v25, v4 + 1);
      }
      else {
        int v26 = v4 + 2;
      }
      uint64_t v4 = sub_162962C(v24, v26, a3);
    }
  }
  int v27 = *(_DWORD *)(a1 + 56);
  if (v27)
  {
    for (int j = 0; j != v27; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8 * j + 8);
      char *v4 = 58;
      unsigned int v30 = *(_DWORD *)(v29 + 44);
      v4[1] = v30;
      if (v30 > 0x7F) {
        unint64_t v31 = sub_188A9CC(v30, v4 + 1);
      }
      else {
        unint64_t v31 = v4 + 2;
      }
      uint64_t v4 = sub_162F61C(v29, v31, a3);
    }
  }
  uint64_t v32 = *(void *)(a1 + 8);
  if ((v32 & 1) == 0) {
    return v4;
  }
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v34 + 31) < 0)
  {
    uint64_t v35 = *(void **)(v34 + 8);
    uint64_t v36 = *(void *)(v34 + 16);
  }
  else
  {
    uint64_t v35 = (void *)(v34 + 8);
    LODWORD(v36) = *(unsigned __int8 *)(v34 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v36)
  {
    uint64_t v37 = (int)v36;
    memcpy(v4, v35, (int)v36);
    v4 += v37;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v35, v36, v4);
}

uint64_t sub_15EAE0C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_162A6E8(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 56);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    unsigned int v11 = (uint64_t *)(v10 + 8);
  }
  else {
    unsigned int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = sub_1630810(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  int v15 = *(_DWORD *)(a1 + 16);
  if ((v15 & 0x1F) != 0)
  {
    if (v15)
    {
      uint64_t v21 = sub_15EBE94(*(void *)(a1 + 72));
      v9 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v15 & 2) == 0)
      {
LABEL_18:
        if ((v15 & 4) == 0) {
          goto LABEL_19;
        }
        goto LABEL_29;
      }
    }
    else if ((v15 & 2) == 0)
    {
      goto LABEL_18;
    }
    uint64_t v22 = sub_1763C40(*(void *)(a1 + 80));
    v9 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 4) == 0)
    {
LABEL_19:
      if ((v15 & 8) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
LABEL_29:
    uint64_t v23 = sub_126C770(*(void *)(a1 + 88));
    v9 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 8) == 0)
    {
LABEL_20:
      if ((v15 & 0x10) == 0) {
        goto LABEL_25;
      }
LABEL_21:
      int v16 = *(_DWORD *)(a1 + 104);
      uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v16 >= 0) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 11;
      }
      v9 += v18;
      goto LABEL_25;
    }
LABEL_30:
    uint64_t v24 = sub_182C500(*(void *)(a1 + 96));
    v9 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
LABEL_25:
  uint64_t v19 = *(void *)(a1 + 8);
  if (v19)
  {
    unint64_t v25 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v25 + 31) < 0) {
      uint64_t v26 = *(void *)(v25 + 16);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 31);
    }
    v9 += v26;
  }
  *(_DWORD *)(a1 + 20) = v9;
  return v9;
}

void sub_15EB020(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1301C3C((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((_BYTE)v9)
  {
    if (v9)
    {
      uint64_t v12 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        uint64_t v14 = (uint64_t *)*v14;
      }
      sub_1881DF4((std::string **)(a1 + 48), v12, v14);
      if ((v9 & 2) == 0)
      {
LABEL_7:
        if ((v9 & 4) == 0) {
          goto LABEL_8;
        }
        goto LABEL_27;
      }
    }
    else if ((v9 & 2) == 0)
    {
      goto LABEL_7;
    }
    int v15 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      uint64_t v17 = (uint64_t *)*v17;
    }
    sub_1881DF4((std::string **)(a1 + 56), v15, v17);
    if ((v9 & 4) == 0)
    {
LABEL_8:
      if ((v9 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_35;
    }
LABEL_27:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v18 = *(std::string **)(a1 + 64);
    if (!v18)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      unsigned int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        unsigned int v20 = (void *)*v20;
      }
      uint64_t v18 = (std::string *)sub_15C63E0((uint64_t)v20);
      *(void *)(a1 + 64) = v18;
    }
    if (*(void *)(a2 + 64)) {
      uint64_t v21 = *(uint64_t (****)())(a2 + 64);
    }
    else {
      uint64_t v21 = &off_253F8F8;
    }
    sub_15C5F4C(v18, (uint64_t)v21);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_43;
    }
LABEL_35:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v22 = *(void **)(a1 + 72);
    if (!v22)
    {
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
      uint64_t v22 = sub_1284080((uint64_t)v24);
      *(void *)(a1 + 72) = v22;
    }
    if (*(void *)(a2 + 72)) {
      unint64_t v25 = *(uint64_t (****)())(a2 + 72);
    }
    else {
      unint64_t v25 = &off_252F900;
    }
    sub_12626AC((uint64_t)v22, (uint64_t)v25);
    if ((v9 & 0x10) == 0)
    {
LABEL_10:
      if ((v9 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_51;
    }
LABEL_43:
    *(_DWORD *)(a1 + 16) |= 0x10u;
    uint64_t v26 = *(void *)(a1 + 80);
    if (!v26)
    {
      uint64_t v27 = *(void *)(a1 + 8);
      uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if (v27) {
        uint64_t v28 = (void *)*v28;
      }
      uint64_t v26 = sub_1283F94((uint64_t)v28);
      *(void *)(a1 + 80) = v26;
    }
    if (*(void *)(a2 + 80)) {
      uint64_t v29 = *(uint64_t (****)())(a2 + 80);
    }
    else {
      uint64_t v29 = &off_252F8A0;
    }
    sub_12629B8(v26, (uint64_t)v29);
    if ((v9 & 0x20) == 0)
    {
LABEL_11:
      if ((v9 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_59;
    }
LABEL_51:
    *(_DWORD *)(a1 + 16) |= 0x20u;
    uint64_t v30 = *(void *)(a1 + 88);
    if (!v30)
    {
      uint64_t v31 = *(void *)(a1 + 8);
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      uint64_t v30 = sub_15F972C((uint64_t)v32);
      *(void *)(a1 + 88) = v30;
    }
    if (*(void *)(a2 + 88)) {
      uint64_t v33 = *(void *(****)(void *))(a2 + 88);
    }
    else {
      uint64_t v33 = &off_2540418;
    }
    sub_15E6E64(v30, (uint64_t)v33);
    if ((v9 & 0x40) == 0)
    {
LABEL_12:
      if ((v9 & 0x80) == 0)
      {
LABEL_14:
        *(_DWORD *)(a1 + 16) |= v9;
        goto LABEL_15;
      }
LABEL_13:
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      goto LABEL_14;
    }
LABEL_59:
    *(_DWORD *)(a1 + 16) |= 0x40u;
    unint64_t v34 = *(std::string **)(a1 + 96);
    if (!v34)
    {
      uint64_t v35 = *(void *)(a1 + 8);
      uint64_t v36 = (void *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
      if (v35) {
        uint64_t v36 = (void *)*v36;
      }
      unint64_t v34 = (std::string *)sub_15F95B0((uint64_t)v36);
      *(void *)(a1 + 96) = v34;
    }
    if (*(void *)(a2 + 96)) {
      uint64_t v37 = *(uint64_t (****)())(a2 + 96);
    }
    else {
      uint64_t v37 = &off_2540378;
    }
    sub_15E5218(v34, (uint64_t)v37);
    if ((v9 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_15:
  if ((v9 & 0x100) != 0)
  {
    char v10 = *(unsigned char *)(a2 + 105);
    *(_DWORD *)(a1 + 16) |= 0x100u;
    *(unsigned char *)(a1 + 105) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v11 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15EB330(uint64_t a1)
{
  uint64_t result = sub_15E5358(a1 + 24);
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if ((v3 & 8) != 0)
    {
      uint64_t result = sub_12632C0(*(void *)(a1 + 72));
      if (!result) {
        return result;
      }
      int v3 = *(_DWORD *)(a1 + 16);
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t result = sub_1263380(*(void *)(a1 + 80));
      if (!result) {
        return result;
      }
      int v3 = *(_DWORD *)(a1 + 16);
    }
    if ((v3 & 0x20) == 0) {
      return 1;
    }
    uint64_t result = sub_15E6FFC(*(void *)(a1 + 88));
    if (result) {
      return 1;
    }
  }
  return result;
}

void *sub_15EB39C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.TransitPoiFeedback");
}

void *sub_15EB3AC(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15EB43C((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  sub_1301728(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void ***sub_15EB43C(uint64_t a1)
{
  int v3 = *(uint64_t **)(a1 + 48);
  uint64_t v2 = (void ***)(a1 + 48);
  if (v3 != &qword_2550250) {
    sub_1881C6C(v2);
  }
  uint64_t result = (void ***)(a1 + 56);
  if (*(uint64_t **)(a1 + 56) != &qword_2550250) {
    sub_1881C6C(result);
  }
  if ((uint64_t (***)())a1 != &off_25405C0)
  {
    uint64_t v5 = *(void **)(a1 + 64);
    if (v5)
    {
      sub_15C53B8(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      sub_126F01C(v6);
      operator delete();
    }
    int v7 = *(void **)(a1 + 80);
    if (v7)
    {
      sub_126DDE8(v7);
      operator delete();
    }
    uint64_t v8 = *(void **)(a1 + 88);
    if (v8)
    {
      sub_15E7A24(v8);
      operator delete();
    }
    uint64_t result = *(void ****)(a1 + 96);
    if (result)
    {
      sub_15E5D88((uint64_t)result);
      operator delete();
    }
  }
  return result;
}

void sub_15EB554(void *a1)
{
  sub_15EB3AC(a1);

  operator delete();
}

uint64_t sub_15EB58C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)int v46 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v46, a3[11].i32[1])) {
    goto LABEL_2;
  }
  int v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = (unsigned __int8 *)(*(void *)v46 + 1);
    unsigned int v9 = **(unsigned char **)v46;
    if ((char)**(unsigned char **)v46 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        uint64_t v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v46, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (unsigned __int8 *)(*(void *)v46 + 2);
      }
    }
    *(void *)int v46 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_68;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        uint64_t v14 = (void *)(a1 + 48);
        goto LABEL_61;
      case 2u:
        if (v9 != 18) {
          goto LABEL_68;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v15 = *(void *)(a1 + 64);
        if (!v15)
        {
          uint64_t v16 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v16 = (void *)*v16;
          }
          uint64_t v15 = sub_15C63E0((uint64_t)v16);
          *(void *)(a1 + 64) = v15;
          uint64_t v8 = *(unsigned __int8 **)v46;
        }
        uint64_t v17 = sub_12DE880(a3, v15, v8);
        goto LABEL_75;
      case 3u:
        if (v9 != 26) {
          goto LABEL_68;
        }
        uint64_t v18 = v8 - 1;
        while (1)
        {
          uint64_t v19 = v18 + 1;
          *(void *)int v46 = v18 + 1;
          unsigned int v20 = *(_DWORD **)(a1 + 40);
          if (v20 && (uint64_t v21 = *(int *)(a1 + 32), (int)v21 < *v20))
          {
            *(_DWORD *)(a1 + 32) = v21 + 1;
            uint64_t v22 = *(void *)&v20[2 * v21 + 2];
          }
          else
          {
            uint64_t v23 = sub_15C6224(*(void *)(a1 + 24));
            uint64_t v22 = sub_188CDC8(a1 + 24, v23);
            uint64_t v19 = *(unsigned __int8 **)v46;
          }
          uint64_t v18 = (unsigned __int8 *)sub_12DE760(a3, v22, v19);
          *(void *)int v46 = v18;
          if (!v18) {
            goto LABEL_85;
          }
          if (*(void *)a3 <= (unint64_t)v18 || *v18 != 26) {
            goto LABEL_76;
          }
        }
      case 4u:
        if (v9 != 34) {
          goto LABEL_68;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v24 = *(void **)(a1 + 72);
        if (!v24)
        {
          unint64_t v25 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v25 = (void *)*v25;
          }
          uint64_t v24 = sub_1284080((uint64_t)v25);
          *(void *)(a1 + 72) = v24;
          uint64_t v8 = *(unsigned __int8 **)v46;
        }
        uint64_t v17 = (uint64_t)sub_12613D0(a3, (uint64_t)v24, v8);
        goto LABEL_75;
      case 5u:
        if (v9 != 42) {
          goto LABEL_68;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v26 = *(void *)(a1 + 80);
        if (!v26)
        {
          uint64_t v27 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v27 = (void *)*v27;
          }
          uint64_t v26 = sub_1283F94((uint64_t)v27);
          *(void *)(a1 + 80) = v26;
          uint64_t v8 = *(unsigned __int8 **)v46;
        }
        uint64_t v17 = sub_12614F0(a3, v26, v8);
        goto LABEL_75;
      case 6u:
        if (v9 != 48) {
          goto LABEL_68;
        }
        v5 |= 0x80u;
        uint64_t v28 = (char *)(v8 + 1);
        uint64_t v29 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_45;
        }
        int v30 = *v28;
        uint64_t v29 = v29 + (v30 << 7) - 128;
        if (v30 < 0)
        {
          uint64_t v42 = sub_188C138((uint64_t)v8, v29);
          *(void *)int v46 = v42;
          *(unsigned char *)(a1 + 104) = v43 != 0;
          if (!v42) {
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v28 = (char *)(v8 + 2);
LABEL_45:
          *(void *)int v46 = v28;
          *(unsigned char *)(a1 + 104) = v29 != 0;
        }
        goto LABEL_76;
      case 7u:
        if (v9 != 56) {
          goto LABEL_68;
        }
        v5 |= 0x100u;
        uint64_t v31 = (char *)(v8 + 1);
        uint64_t v32 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_50;
        }
        int v33 = *v31;
        uint64_t v32 = v32 + (v33 << 7) - 128;
        if (v33 < 0)
        {
          uint64_t v44 = sub_188C138((uint64_t)v8, v32);
          *(void *)int v46 = v44;
          *(unsigned char *)(a1 + 105) = v45 != 0;
          if (!v44) {
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v31 = (char *)(v8 + 2);
LABEL_50:
          *(void *)int v46 = v31;
          *(unsigned char *)(a1 + 105) = v32 != 0;
        }
        goto LABEL_76;
      case 8u:
        if (v9 != 66) {
          goto LABEL_68;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v34 = *(void *)(a1 + 88);
        if (!v34)
        {
          uint64_t v35 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v35 = (void *)*v35;
          }
          uint64_t v34 = sub_15F972C((uint64_t)v35);
          *(void *)(a1 + 88) = v34;
          uint64_t v8 = *(unsigned __int8 **)v46;
        }
        uint64_t v17 = (uint64_t)sub_12DE5B0(a3, v34, v8);
        goto LABEL_75;
      case 9u:
        if (v9 != 74) {
          goto LABEL_68;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v36 = *(void *)(a1 + 8);
        uint64_t v13 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
        if (v36) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        uint64_t v14 = (void *)(a1 + 56);
LABEL_61:
        uint64_t v37 = (std::string *)sub_1880F84(v14, v13);
        uint64_t v17 = (uint64_t)sub_188C244(v37, *(char **)v46, (uint64_t)a3);
        goto LABEL_75;
      case 0xAu:
        if (v9 != 82) {
          goto LABEL_68;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v38 = *(void **)(a1 + 96);
        if (!v38)
        {
          unint64_t v39 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            unint64_t v39 = (void *)*v39;
          }
          uint64_t v38 = sub_15F95B0((uint64_t)v39);
          *(void *)(a1 + 96) = v38;
          uint64_t v8 = *(unsigned __int8 **)v46;
        }
        uint64_t v17 = (uint64_t)sub_15E42C0(a3, (uint64_t)v38, v8);
        goto LABEL_75;
      default:
LABEL_68:
        if (v9) {
          BOOL v40 = (v9 & 7) == 4;
        }
        else {
          BOOL v40 = 1;
        }
        if (!v40)
        {
          if (*v7)
          {
            uint64_t v41 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v41 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = *(unsigned __int8 **)v46;
          }
          uint64_t v17 = (uint64_t)sub_1885AC0(v9, v41, (char *)v8, a3);
LABEL_75:
          *(void *)int v46 = v17;
          if (!v17) {
            goto LABEL_85;
          }
LABEL_76:
          if (sub_11947B8((uint64_t)a3, (char **)v46, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_85:
        }
          *(void *)int v46 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v46;
    }
  }
}

char *sub_15EBA8C(uint64_t a1, char *__dst, void *a3)
{
  int v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    int v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v7 = *(void *)(a1 + 64);
    char *v4 = 18;
    unsigned int v8 = *(_DWORD *)(v7 + 96);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    int v4 = sub_15C5A5C(v7, v9, a3);
  }
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    for (int i = 0; i != v10; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      char *v4 = 26;
      unsigned int v13 = *(_DWORD *)(v12 + 20);
      v4[1] = v13;
      if (v13 > 0x7F) {
        uint64_t v14 = sub_188A9CC(v13, v4 + 1);
      }
      else {
        uint64_t v14 = v4 + 2;
      }
      int v4 = sub_15C396C(v12, (unint64_t)v14, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v15 = *(void *)(a1 + 72);
    char *v4 = 34;
    unsigned int v16 = *(_DWORD *)(v15 + 20);
    v4[1] = v16;
    if (v16 > 0x7F) {
      uint64_t v17 = sub_188A9CC(v16, v4 + 1);
    }
    else {
      uint64_t v17 = v4 + 2;
    }
    int v4 = sub_126F20C(v15, (unint64_t)v17, a3);
    if ((v6 & 0x10) == 0)
    {
LABEL_20:
      if ((v6 & 0x80) == 0) {
        goto LABEL_21;
      }
      goto LABEL_38;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_20;
  }
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v18 = *(void *)(a1 + 80);
  char *v4 = 42;
  unsigned int v19 = *(_DWORD *)(v18 + 44);
  v4[1] = v19;
  if (v19 > 0x7F) {
    unsigned int v20 = sub_188A9CC(v19, v4 + 1);
  }
  else {
    unsigned int v20 = v4 + 2;
  }
  int v4 = sub_126E168(v18, v20, a3);
  if ((v6 & 0x80) == 0)
  {
LABEL_21:
    if ((v6 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_38:
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v21 = *(unsigned char *)(a1 + 104);
  char *v4 = 48;
  v4[1] = v21;
  v4 += 2;
  if ((v6 & 0x100) == 0)
  {
LABEL_22:
    if ((v6 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_41:
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v22 = *(unsigned char *)(a1 + 105);
  char *v4 = 56;
  v4[1] = v22;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_23:
    if ((v6 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_44:
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v23 = *(void *)(a1 + 88);
  char *v4 = 66;
  unsigned int v24 = *(_DWORD *)(v23 + 88);
  v4[1] = v24;
  if (v24 > 0x7F) {
    unint64_t v25 = sub_188A9CC(v24, v4 + 1);
  }
  else {
    unint64_t v25 = v4 + 2;
  }
  int v4 = sub_15E7E6C(v23, v25, a3);
  if ((v6 & 2) == 0)
  {
LABEL_24:
    if ((v6 & 0x40) == 0) {
      goto LABEL_57;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v4 = sub_117A0AC(a3, 9, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x40) == 0) {
    goto LABEL_57;
  }
LABEL_51:
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v26 = *(void *)(a1 + 96);
  char *v4 = 82;
  unsigned int v27 = *(_DWORD *)(v26 + 20);
  v4[1] = v27;
  if (v27 > 0x7F) {
    uint64_t v28 = sub_188A9CC(v27, v4 + 1);
  }
  else {
    uint64_t v28 = v4 + 2;
  }
  int v4 = sub_15E60D4(v26, (unint64_t)v28, a3);
LABEL_57:
  uint64_t v29 = *(void *)(a1 + 8);
  if ((v29 & 1) == 0) {
    return v4;
  }
  unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v31 + 31) < 0)
  {
    uint64_t v32 = *(void **)(v31 + 8);
    uint64_t v33 = *(void *)(v31 + 16);
  }
  else
  {
    uint64_t v32 = (void *)(v31 + 8);
    LODWORD(v33) = *(unsigned __int8 *)(v31 + 31);
  }
  if (*a3 - (void)v4 >= (int)v33)
  {
    uint64_t v34 = (int)v33;
    memcpy(v4, v32, (int)v33);
    v4 += v34;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v32, v33, v4);
}

uint64_t sub_15EBE94(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    int v4 = (uint64_t *)(v3 + 8);
  }
  else {
    int v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15C3C1C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v8) {
    goto LABEL_20;
  }
  if (v8)
  {
    unint64_t v12 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v14 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v13;
    }
    v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 2) == 0)
    {
LABEL_12:
      if ((v8 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_31;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_12;
  }
  unint64_t v15 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  uint64_t v17 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v16;
  }
  v2 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 4) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v18 = sub_15C5DA4(*(void *)(a1 + 64));
  v2 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 8) == 0)
  {
LABEL_14:
    if ((v8 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v19 = sub_126F38C(*(void *)(a1 + 72));
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x10) == 0)
  {
LABEL_15:
    if ((v8 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v20 = sub_126E400(*(void *)(a1 + 80));
  v2 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x20) == 0)
  {
LABEL_16:
    if ((v8 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_34:
  uint64_t v21 = sub_15E80B8(*(void *)(a1 + 88));
  v2 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 0x40) != 0)
  {
LABEL_17:
    uint64_t v9 = sub_15E6254(*(void *)(a1 + 96));
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_18:
  if ((v8 & 0x80) != 0) {
    v2 += 2;
  }
LABEL_20:
  if ((v8 & 0x100) != 0) {
    uint64_t result = v2 + 2;
  }
  else {
    uint64_t result = v2;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    unint64_t v22 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v22 + 31) < 0) {
      uint64_t v23 = *(void *)(v22 + 16);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v22 + 31);
    }
    result += v23;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void *sub_15EC0F8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.TransitPoiCorrections");
}

uint64_t sub_15EC108(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_2540630)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    if (v5)
    {
      sub_12682F4(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      sub_1269190(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15EC1D8(uint64_t a1)
{
  sub_15EC108(a1);

  operator delete();
}

char *sub_15EC210(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v20 = a2;
  if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
    return v20;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v20 + 1;
    unsigned int v8 = *v20;
    if (*v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v20 + 2;
      }
    }
    uint64_t v20 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_1283A10((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = v20;
    }
    uint64_t v14 = sub_12618E0(a3, v15, (unsigned __int8 *)v7);
LABEL_31:
    uint64_t v20 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
      return v20;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17)
    {
      uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v18 = (void *)*v18;
      }
      sub_1283984((uint64_t)v18);
      uint64_t v17 = v19;
      *(void *)(a1 + 24) = v19;
      uint64_t v7 = v20;
    }
    uint64_t v14 = (char *)sub_12665BC(a3, v17, (unsigned __int8 *)v7);
    goto LABEL_31;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v20;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_31;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v20;
  }
  return 0;
}

unsigned char *sub_15EC3D0(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  int v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      int v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    int v4 = sub_1268960(v7, (unint64_t)v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    unsigned char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    int v4 = sub_1269450(v10, (unint64_t)v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15EC550(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_1268D7C(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_12695B0(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void *sub_15EC628@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.MerchantLookupFeedback");
}

uint64_t sub_15EC638(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_2540658)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15ECEB8(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      sub_15ED4EC(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15EC708(uint64_t a1)
{
  sub_15EC638(a1);

  operator delete();
}

uint64_t sub_15EC740(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_126B908(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if (*(unsigned char *)(v1 + 16)) {
    uint64_t result = sub_15E8E4C(*(void *)(v1 + 48));
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

uint64_t sub_15EC7D0(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15EC7E8(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  char v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v19 + 1;
    unsigned int v8 = *v19;
    if (*v19 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v19, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v19 + 2;
      }
    }
    uint64_t v19 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_15F9D00((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = v19;
    }
    uint64_t v14 = sub_15ECA38(a3, v15, (unsigned __int8 *)v7);
LABEL_31:
    uint64_t v19 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void **)(a1 + 24);
    if (!v17)
    {
      uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v17 = sub_15F9C64((uint64_t)v18);
      *(void *)(a1 + 24) = v17;
      uint64_t v7 = v19;
    }
    uint64_t v14 = sub_15EC9A8(a3, (uint64_t)v17, (unsigned __int8 *)v7);
    goto LABEL_31;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_31;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v19;
  }
  return 0;
}

char *sub_15EC9A8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15ECFB4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15ECA38(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15ED598(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15ECAC8(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15ED24C(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    uint64_t v4 = sub_15ED740(v10, (unint64_t)v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15ECC48(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_15ED3F8(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15ED868(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15ECD20(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_12C2D88((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    unint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v9 = *(uint64_t (****)())(a2 + 48);
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v10 = *(void **)(a1 + 48);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      BOOL v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        BOOL v12 = (void *)*v12;
      }
      uint64_t v10 = sub_15F9904((uint64_t)v12);
      *(void *)(a1 + 48) = v10;
      uint64_t v9 = *(uint64_t (****)())(a2 + 48);
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = &off_25404E8;
    }
    sub_15E92D4((uint64_t)v10, (uint64_t)v13);
  }
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v14 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15ECE44(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_126C298(*(void *)(*(void *)(a1 + 40) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return 1;
  }
  uint64_t result = sub_15E93D8(*(void *)(a1 + 48));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15ECEA8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.SearchFeedback");
}

uint64_t sub_15ECEB8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_2540680)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      sub_15E8D44(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  sub_12C2234((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15ECF7C(uint64_t a1)
{
  sub_15ECEB8(a1);

  operator delete();
}

char *sub_15ECFB4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v23 = a2;
  if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
    return v23;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    int v7 = v23 + 1;
    unsigned int v8 = *v23;
    if (*v23 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        int v7 = (char *)sub_188C180((uint64_t)v23, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        int v7 = v23 + 2;
      }
    }
    uint64_t v23 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    unint64_t v15 = *(void **)(a1 + 48);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      unint64_t v15 = sub_15F9904((uint64_t)v16);
      *(void *)(a1 + 48) = v15;
      int v7 = v23;
    }
    uint64_t v14 = sub_15ED1BC(a3, (uint64_t)v15, (unsigned __int8 *)v7);
LABEL_26:
    uint64_t v23 = v14;
    if (!v14) {
      return 0;
    }
LABEL_27:
    if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
      return v23;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    uint64_t v17 = v7 - 1;
    while (1)
    {
      uint64_t v18 = (unsigned __int8 *)(v17 + 1);
      uint64_t v23 = v17 + 1;
      uint64_t v19 = *(_DWORD **)(a1 + 40);
      if (v19 && (uint64_t v20 = *(int *)(a1 + 32), (int)v20 < *v19))
      {
        *(_DWORD *)(a1 + 32) = v20 + 1;
        uint64_t v21 = *(void *)&v19[2 * v20 + 2];
      }
      else
      {
        unint64_t v22 = sub_1283CE8(*(void *)(a1 + 24));
        uint64_t v21 = sub_188CDC8(a1 + 24, (uint64_t)v22);
        uint64_t v18 = (unsigned __int8 *)v23;
      }
      uint64_t v17 = (char *)sub_12662EC(a3, v21, v18);
      uint64_t v23 = v17;
      if (!v17) {
        return 0;
      }
      if (*(void *)a3 <= (unint64_t)v17 || *v17 != 10) {
        goto LABEL_27;
      }
    }
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      int v7 = v23;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_26;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v23;
  }
  return 0;
}

char *sub_15ED1BC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15E8EBC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15ED24C(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        unsigned int v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        unsigned int v10 = __dst + 2;
      }
      __dst = sub_126BD48(v8, v10, a3);
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    *__dst = 18;
    unsigned int v12 = *(_DWORD *)(v11 + 20);
    __dst[1] = v12;
    if (v12 > 0x7F) {
      uint64_t v13 = sub_188A9CC(v12, __dst + 1);
    }
    else {
      uint64_t v13 = __dst + 2;
    }
    __dst = sub_15E907C(v11, (unint64_t)v13, a3);
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return __dst;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v17, v18, __dst);
}

uint64_t sub_15ED3F8(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    char v4 = (uint64_t *)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_126BF78(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v8 = sub_15E91FC(*(void *)(a1 + 48));
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

void *sub_15ED4DC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.SearchFeedbackContext");
}

void *sub_15ED4EC(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15ED560(void *a1)
{
  sub_15ED4EC(a1);

  operator delete();
}

char *sub_15ED598(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  uint64_t v5 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v6 = v19 + 1;
    unsigned int v7 = *v19;
    if (*v19 < 0)
    {
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if (*v6 < 0)
      {
        uint64_t v6 = (char *)sub_188C180((uint64_t)v19, v8 - 128);
        unsigned int v7 = v9;
      }
      else
      {
        uint64_t v6 = v19 + 2;
      }
    }
    uint64_t v19 = v6;
    if (v7 == 8)
    {
      uint64_t v12 = v6 + 1;
      unint64_t v13 = *v6;
      if (*v6 < 0)
      {
        int v14 = *v12;
        int v15 = v13 + (v14 << 7);
        unint64_t v13 = (v15 - 128);
        if (v14 < 0)
        {
          uint64_t v19 = (char *)sub_188C138((uint64_t)v6, (v15 - 128));
          if (!v19) {
            return 0;
          }
          unint64_t v13 = v16;
          goto LABEL_20;
        }
        uint64_t v12 = v6 + 2;
      }
      uint64_t v19 = v12;
LABEL_20:
      if (v13 > 7)
      {
        if (*v5) {
          uint64_t v17 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v17 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        sub_188C020(1, v13, v17);
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 24) = v13;
      }
      goto LABEL_22;
    }
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    if (*v5)
    {
      unint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v6 = v19;
    }
    uint64_t v19 = (char *)sub_1885AC0(v7, v11, v6, a3);
    if (!v19) {
      return 0;
    }
LABEL_22:
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return v19;
  }
  return 0;
}

unsigned char *sub_15ED740(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  char v4 = (unsigned char *)__dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v6 = *(int *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v6;
    if (v6 > 0x7F)
    {
      v4[1] = v6 | 0x80;
      unint64_t v7 = v6 >> 7;
      v4[2] = v6 >> 7;
      v4 += 3;
      if (v6 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v8 = v7 >> 14;
          v7 >>= 7;
          *v4++ = v7;
        }
        while (v8);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    uint64_t v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    uint64_t v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    v4 += v14;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15ED868(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    int v2 = *(_DWORD *)(a1 + 24);
    if (v2 < 0) {
      uint64_t v1 = 11;
    }
    else {
      uint64_t v1 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31);
    }
    v1 += v6;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

uint64_t sub_15ED8DC()
{
  return 1;
}

void *sub_15ED8E4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.SearchFeedbackCorrections");
}

uint64_t sub_15ED8F4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_25406D8)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15EF3D8(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_15EEA24(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15ED9C4(uint64_t a1)
{
  sub_15ED8F4(a1);

  operator delete();
}

uint64_t sub_15ED9FC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1627DF0(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v1 + 64) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = sub_162D688(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 56) = 0;
  }
  uint64_t v8 = *(unsigned int *)(v1 + 80);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(v1 + 88) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t result = sub_15E8E4C(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 80) = 0;
  }
  uint64_t v11 = *(unsigned int *)(v1 + 104);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v1 + 112) + 8);
    do
    {
      uint64_t v13 = *v12++;
      uint64_t result = sub_13A22B8(v13);
      --v11;
    }
    while (v11);
    *(_DWORD *)(v1 + 104) = 0;
  }
  uint64_t v14 = *(unsigned int *)(v1 + 128);
  if ((int)v14 >= 1)
  {
    int v15 = (uint64_t *)(*(void *)(v1 + 136) + 8);
    do
    {
      uint64_t v16 = *v15++;
      uint64_t result = (uint64_t)sub_15B09D0(v16);
      --v14;
    }
    while (v14);
    *(_DWORD *)(v1 + 128) = 0;
  }
  int v17 = *(_DWORD *)(v1 + 16);
  if ((v17 & 7) != 0)
  {
    if (v17)
    {
      uint64_t result = sub_12748A4(*(void *)(v1 + 144));
      if ((v17 & 2) == 0)
      {
LABEL_24:
        if ((v17 & 4) == 0) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    else if ((v17 & 2) == 0)
    {
      goto LABEL_24;
    }
    uint64_t result = sub_12748A4(*(void *)(v1 + 152));
    if ((v17 & 4) != 0) {
LABEL_25:
    }
      uint64_t result = sub_1264DA0(*(void *)(v1 + 160));
  }
LABEL_26:
  char v19 = *(unsigned char *)(v1 + 8);
  uint64_t v18 = v1 + 8;
  *(unsigned char *)(v18 + 160) = 0;
  *(_DWORD *)(v18 + 8) = 0;
  if (v19)
  {
    return sub_188B4AC((uint64_t *)v18);
  }
  return result;
}

uint64_t sub_15EDB5C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_12779F4(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  uint64_t v5 = *(unsigned int *)(v1 + 56);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (unsigned char **)(*(void *)(v1 + 64) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = (uint64_t)sub_1276378(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 56) = 0;
  }
  int v8 = *(_DWORD *)(v1 + 16);
  if ((v8 & 7) == 0) {
    goto LABEL_14;
  }
  if ((v8 & 1) == 0)
  {
    if ((v8 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  unint64_t v11 = *(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v11 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v11 = 0;
    *(unsigned char *)(v11 + 23) = 0;
    if ((v8 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_12:
    if ((v8 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  **(unsigned char **)unint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  if ((v8 & 2) == 0) {
    goto LABEL_12;
  }
LABEL_22:
  unint64_t v12 = *(void *)(v1 + 80) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v12 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v12 = 0;
    *(unsigned char *)(v12 + 23) = 0;
    if ((v8 & 4) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    uint64_t result = (uint64_t)sub_1260464(*(unsigned char **)(v1 + 88));
    goto LABEL_14;
  }
  **(unsigned char **)unint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  if ((v8 & 4) != 0) {
    goto LABEL_13;
  }
LABEL_14:
  char v10 = *(unsigned char *)(v1 + 8);
  uint64_t v9 = v1 + 8;
  *(unsigned char *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 8) = 0;
  if (v10)
  {
    return sub_188B4AC((uint64_t *)v9);
  }
  return result;
}

char *sub_15EDC8C(uint64_t a1, char *a2, int32x2_t *a3)
{
  unsigned int v27 = a2;
  if (sub_11947B8((uint64_t)a3, &v27, a3[11].i32[1])) {
    return v27;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v27 + 1;
    unsigned int v8 = *v27;
    if (*v27 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v27, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v27 + 2;
      }
    }
    unsigned int v27 = v7;
    unsigned int v11 = v8 >> 3;
    if (v8 >> 3 == 3) {
      break;
    }
    if (v11 == 2)
    {
      if (v8 != 18) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 16) |= 2u;
      uint64_t v20 = *(void *)(a1 + 32);
      if (!v20)
      {
        uint64_t v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          uint64_t v21 = (void *)*v21;
        }
        uint64_t v20 = sub_15F9DFC((uint64_t)v21);
        *(void *)(a1 + 32) = v20;
        uint64_t v7 = v27;
      }
      int v15 = (char *)sub_15EDF84(a3, v20, (unsigned __int8 *)v7);
    }
    else
    {
      if (v11 != 1 || v8 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v22 = *(void *)(a1 + 24);
      if (!v22)
      {
        uint64_t v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          uint64_t v23 = (void *)*v23;
        }
        sub_15F9EB4((uint64_t)v23);
        uint64_t v22 = v24;
        *(void *)(a1 + 24) = v24;
        uint64_t v7 = v27;
      }
      int v15 = sub_15EDEF4(a3, v22, (unsigned __int8 *)v7);
    }
LABEL_39:
    unsigned int v27 = v15;
    if (!v15) {
      return 0;
    }
LABEL_40:
    if (sub_11947B8((uint64_t)a3, &v27, a3[11].i32[1])) {
      return v27;
    }
  }
  if (v8 == 24)
  {
    uint64_t v16 = v7 + 1;
    unint64_t v17 = *v7;
    if (*v7 < 0)
    {
      int v18 = *v16;
      int v19 = v17 + (v18 << 7);
      unint64_t v17 = (v19 - 128);
      if (v18 < 0)
      {
        unsigned int v27 = (char *)sub_188C138((uint64_t)v7, (v19 - 128));
        if (!v27) {
          return 0;
        }
        unint64_t v17 = v25;
        goto LABEL_26;
      }
      uint64_t v16 = v7 + 2;
    }
    unsigned int v27 = v16;
LABEL_26:
    if (v17 > 5)
    {
      if (*v6) {
        uint64_t v26 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v26 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(3, v17, v26);
    }
    else
    {
      *(_DWORD *)(a1 + 16) |= 4u;
      *(_DWORD *)(a1 + 40) = v17;
    }
    goto LABEL_40;
  }
LABEL_14:
  if (v8) {
    BOOL v13 = (v8 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v6)
    {
      uint64_t v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v27;
    }
    int v15 = (char *)sub_1885AC0(v8, v14, v7, a3);
    goto LABEL_39;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v27;
  }
  return 0;
}

char *sub_15EDEF4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15EF53C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15EDF84(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15EEB5C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15EE014(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15EFAE8(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    unint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    unint64_t v12 = v4 + 2;
  }
  uint64_t v4 = sub_15EEF38(v10, v12, a3);
  if ((v6 & 4) != 0)
  {
LABEL_17:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(int *)(a1 + 40);
    char *v4 = 24;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_23:
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    int v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    int v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15EE21C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 7) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_13;
  }
  if (v2)
  {
    uint64_t v4 = sub_15EFFB0(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15EF1EC(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a1 + 40);
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v3 += v7;
  }
LABEL_13:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v3 += v11;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15EE328(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    int v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_12C2BE4((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    unint64_t v10 = (uint64_t *)(*(void *)(a2 + 64) + 8);
    uint64_t v11 = (uint64_t *)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_12C2C70((uint64_t *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    unint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 80);
  if (v14)
  {
    unint64_t v15 = (uint64_t *)(*(void *)(a2 + 88) + 8);
    uint64_t v16 = (uint64_t *)sub_188CCE4(a1 + 72, *(_DWORD *)(a2 + 80));
    sub_1639060((uint64_t *)(a1 + 72), v16, v15, v14, **(_DWORD **)(a1 + 88) - *(_DWORD *)(a1 + 80));
    int v17 = *(_DWORD *)(a1 + 80) + v14;
    *(_DWORD *)(a1 + 80) = v17;
    unint64_t v18 = *(int **)(a1 + 88);
    if (*v18 < v17) {
      *unint64_t v18 = v17;
    }
  }
  int v19 = *(_DWORD *)(a2 + 104);
  if (v19)
  {
    uint64_t v20 = (uint64_t *)(*(void *)(a2 + 112) + 8);
    uint64_t v21 = (uint64_t *)sub_188CCE4(a1 + 96, *(_DWORD *)(a2 + 104));
    sub_DF401C((uint64_t *)(a1 + 96), v21, v20, v19, **(_DWORD **)(a1 + 112) - *(_DWORD *)(a1 + 104));
    int v22 = *(_DWORD *)(a1 + 104) + v19;
    *(_DWORD *)(a1 + 104) = v22;
    uint64_t v23 = *(int **)(a1 + 112);
    if (*v23 < v22) {
      *uint64_t v23 = v22;
    }
  }
  int v24 = *(_DWORD *)(a2 + 128);
  if (v24)
  {
    unint64_t v25 = (uint64_t *)(*(void *)(a2 + 136) + 8);
    uint64_t v26 = (uint64_t *)sub_188CCE4(a1 + 120, *(_DWORD *)(a2 + 128));
    sub_10E4FFC((uint64_t *)(a1 + 120), v26, v25, v24, **(_DWORD **)(a1 + 136) - *(_DWORD *)(a1 + 128));
    int v27 = *(_DWORD *)(a1 + 128) + v24;
    *(_DWORD *)(a1 + 128) = v27;
    uint64_t v28 = *(int **)(a1 + 136);
    if (*v28 < v27) {
      *uint64_t v28 = v27;
    }
  }
  int v29 = *(_DWORD *)(a2 + 16);
  if ((v29 & 0xF) != 0)
  {
    if (v29)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v31 = *(void *)(a1 + 144);
      if (!v31)
      {
        uint64_t v32 = *(void *)(a1 + 8);
        uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
        if (v32) {
          uint64_t v33 = (void *)*v33;
        }
        uint64_t v31 = sub_12846F4((uint64_t)v33);
        *(void *)(a1 + 144) = v31;
      }
      if (*(void *)(a2 + 144)) {
        uint64_t v34 = *(uint64_t (****)())(a2 + 144);
      }
      else {
        uint64_t v34 = &off_252FB60;
      }
      sub_1275F68(v31, (uint64_t)v34);
      if ((v29 & 2) == 0)
      {
LABEL_19:
        if ((v29 & 4) == 0) {
          goto LABEL_20;
        }
        goto LABEL_43;
      }
    }
    else if ((v29 & 2) == 0)
    {
      goto LABEL_19;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v35 = *(void *)(a1 + 152);
    if (!v35)
    {
      uint64_t v36 = *(void *)(a1 + 8);
      uint64_t v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
      if (v36) {
        uint64_t v37 = (void *)*v37;
      }
      uint64_t v35 = sub_12846F4((uint64_t)v37);
      *(void *)(a1 + 152) = v35;
    }
    if (*(void *)(a2 + 152)) {
      uint64_t v38 = *(uint64_t (****)())(a2 + 152);
    }
    else {
      uint64_t v38 = &off_252FB60;
    }
    sub_1275F68(v35, (uint64_t)v38);
    if ((v29 & 4) == 0)
    {
LABEL_20:
      if ((v29 & 8) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 16) |= v29;
        goto LABEL_23;
      }
LABEL_21:
      *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
      goto LABEL_22;
    }
LABEL_43:
    *(_DWORD *)(a1 + 16) |= 4u;
    unint64_t v39 = *(std::string **)(a1 + 160);
    if (!v39)
    {
      uint64_t v40 = *(void *)(a1 + 8);
      uint64_t v41 = (void *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
      if (v40) {
        uint64_t v41 = (void *)*v41;
      }
      unint64_t v39 = (std::string *)sub_1283D90((uint64_t)v41);
      *(void *)(a1 + 160) = v39;
    }
    if (*(void *)(a2 + 160)) {
      uint64_t v42 = *(uint64_t (****)(uint64_t))(a2 + 160);
    }
    else {
      uint64_t v42 = &off_252F7F8;
    }
    sub_126792C(v39, (uint64_t)v42);
    if ((v29 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v30 = *(void *)(a2 + 8);
  if (v30)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v30 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

void sub_15EE698(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    int v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_12C3244((std::string *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    uint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 56);
  if (v9)
  {
    unint64_t v10 = (uint64_t *)(*(void *)(a2 + 64) + 8);
    uint64_t v11 = (uint64_t *)sub_188CCE4(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_12C32D0((uint64_t *)(a1 + 48), v11, v10, v9, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 56) + v9;
    *(_DWORD *)(a1 + 56) = v12;
    unint64_t v13 = *(int **)(a1 + 64);
    if (*v13 < v12) {
      int *v13 = v12;
    }
  }
  int v14 = *(_DWORD *)(a2 + 16);
  if ((v14 & 0xF) != 0)
  {
    if (v14)
    {
      uint64_t v16 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v17 = *(void *)(a1 + 8);
      unint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        unint64_t v18 = (uint64_t *)*v18;
      }
      sub_1881DF4((std::string **)(a1 + 72), v16, v18);
      if ((v14 & 2) == 0)
      {
LABEL_10:
        if ((v14 & 4) == 0) {
          goto LABEL_11;
        }
        goto LABEL_24;
      }
    }
    else if ((v14 & 2) == 0)
    {
      goto LABEL_10;
    }
    int v19 = (long long *)(*(void *)(a2 + 80) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (uint64_t *)*v21;
    }
    sub_1881DF4((std::string **)(a1 + 80), v19, v21);
    if ((v14 & 4) == 0)
    {
LABEL_11:
      if ((v14 & 8) == 0)
      {
LABEL_13:
        *(_DWORD *)(a1 + 16) |= v14;
        goto LABEL_14;
      }
LABEL_12:
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      goto LABEL_13;
    }
LABEL_24:
    *(_DWORD *)(a1 + 16) |= 4u;
    int v22 = *(void **)(a1 + 88);
    if (!v22)
    {
      uint64_t v23 = *(void *)(a1 + 8);
      int v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        int v24 = (void *)*v24;
      }
      int v22 = sub_1284080((uint64_t)v24);
      *(void *)(a1 + 88) = v22;
    }
    if (*(void *)(a2 + 88)) {
      unint64_t v25 = *(uint64_t (****)())(a2 + 88);
    }
    else {
      unint64_t v25 = &off_252F900;
    }
    sub_12626AC((uint64_t)v22, (uint64_t)v25);
    if ((v14 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_14:
  uint64_t v15 = *(void *)(a2 + 8);
  if (v15)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v15 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15EE8B4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_162BBCC(*(void *)(*(void *)(a1 + 40) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  while ((int)v5 >= 1)
  {
    uint64_t v6 = v5 - 1;
    char v7 = sub_16320B4(*(void *)(*(void *)(a1 + 64) + 8 * v5));
    uint64_t v5 = v6;
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v8 = *(unsigned int *)(a1 + 80);
  while ((int)v8 >= 1)
  {
    uint64_t v9 = v8 - 1;
    char v10 = sub_15E93D8(*(void *)(*(void *)(a1 + 88) + 8 * v8));
    uint64_t v8 = v9;
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 104);
  while ((int)v11 >= 1)
  {
    uint64_t v12 = v11 - 1;
    char v13 = sub_13A4A14(*(void *)(*(void *)(a1 + 112) + 8 * v11));
    uint64_t v11 = v12;
    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  uint64_t result = sub_15B1FC8(a1 + 120);
  if (result)
  {
    int v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      uint64_t result = sub_12761C0(*(void *)(a1 + 144));
      if (!result) {
        return result;
      }
      int v15 = *(_DWORD *)(a1 + 16);
    }
    if ((v15 & 2) == 0) {
      return 1;
    }
    uint64_t result = sub_12761C0(*(void *)(a1 + 152));
    if (result) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_15EE9B0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_1276EC8(*(void *)(*(void *)(a1 + 64) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 16) & 4) == 0) {
    return 1;
  }
  uint64_t result = sub_12632C0(*(void *)(a1 + 88));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15EEA14@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.DirectionsFeedback");
}

uint64_t sub_15EEA24(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
    goto LABEL_12;
  }
  uint64_t v5 = (void ***)(a1 + 72);
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 80) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 80));
  }
  if ((uint64_t (***)())a1 != &off_2540708)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    if (v6)
    {
      sub_126F01C(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_12:
  sub_12C2734((void *)(a1 + 48));
  sub_12C26B4((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15EEB24(uint64_t a1)
{
  sub_15EEA24(a1);

  operator delete();
}

uint64_t sub_15EEB5C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)unint64_t v39 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, (char **)v39, a3[11].i32[1])) {
    goto LABEL_2;
  }
  char v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = (unsigned __int8 *)(*(void *)v39 + 1);
    unsigned int v9 = **(unsigned char **)v39;
    if ((char)**(unsigned char **)v39 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((char)*v8 < 0)
      {
        uint64_t v8 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v39, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = (unsigned __int8 *)(*(void *)v39 + 2);
      }
    }
    *(void *)unint64_t v39 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        char v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          char v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 72);
        goto LABEL_37;
      case 2u:
        if (v9 != 18) {
          goto LABEL_49;
        }
        int v15 = (char *)(v8 - 1);
        while (1)
        {
          uint64_t v16 = (unsigned __int8 *)(v15 + 1);
          *(void *)unint64_t v39 = v15 + 1;
          uint64_t v17 = *(_DWORD **)(a1 + 40);
          if (v17 && (uint64_t v18 = *(int *)(a1 + 32), (int)v18 < *v17))
          {
            *(_DWORD *)(a1 + 32) = v18 + 1;
            uint64_t v19 = *(void *)&v17[2 * v18 + 2];
          }
          else
          {
            uint64_t v20 = sub_1284784(*(void *)(a1 + 24));
            uint64_t v19 = sub_188CDC8(a1 + 24, (uint64_t)v20);
            uint64_t v16 = *(unsigned __int8 **)v39;
          }
          int v15 = sub_1275290(a3, v19, v16);
          *(void *)unint64_t v39 = v15;
          if (!v15) {
            goto LABEL_64;
          }
          if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
            goto LABEL_57;
          }
        }
      case 3u:
        if (v9 != 26) {
          goto LABEL_49;
        }
        uint64_t v21 = v8 - 1;
        while (1)
        {
          int v22 = v21 + 1;
          *(void *)unint64_t v39 = v21 + 1;
          uint64_t v23 = *(_DWORD **)(a1 + 64);
          if (v23 && (uint64_t v24 = *(int *)(a1 + 56), (int)v24 < *v23))
          {
            *(_DWORD *)(a1 + 56) = v24 + 1;
            uint64_t v25 = *(void *)&v23[2 * v24 + 2];
          }
          else
          {
            uint64_t v26 = sub_1284668(*(void *)(a1 + 48));
            uint64_t v25 = sub_188CDC8(a1 + 48, (uint64_t)v26);
            int v22 = *(unsigned __int8 **)v39;
          }
          uint64_t v21 = (unsigned __int8 *)sub_12753B0(a3, v25, v22);
          *(void *)unint64_t v39 = v21;
          if (!v21) {
            goto LABEL_64;
          }
          if (*(void *)a3 <= (unint64_t)v21 || *v21 != 26) {
            goto LABEL_57;
          }
        }
      case 4u:
        if (v9 != 34) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v27 = *(void *)(a1 + 8);
        char v13 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        if (v27) {
          char v13 = (uint64_t *)*v13;
        }
        int v14 = (void *)(a1 + 80);
LABEL_37:
        uint64_t v28 = (std::string *)sub_1880F84(v14, v13);
        int v29 = (void *)sub_188C244(v28, *(char **)v39, (uint64_t)a3);
        goto LABEL_56;
      case 5u:
        if (v9 != 42) {
          goto LABEL_49;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v30 = *(void **)(a1 + 88);
        if (!v30)
        {
          uint64_t v31 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            uint64_t v31 = (void *)*v31;
          }
          uint64_t v30 = sub_1284080((uint64_t)v31);
          *(void *)(a1 + 88) = v30;
          uint64_t v8 = *(unsigned __int8 **)v39;
        }
        int v29 = sub_12613D0(a3, (uint64_t)v30, v8);
        goto LABEL_56;
      case 6u:
        if (v9 != 48) {
          goto LABEL_49;
        }
        v5 |= 8u;
        uint64_t v32 = (char *)(v8 + 1);
        uint64_t v33 = *v8;
        if (((char)*v8 & 0x80000000) == 0) {
          goto LABEL_48;
        }
        int v34 = *v32;
        uint64_t v33 = v33 + (v34 << 7) - 128;
        if (v34 < 0)
        {
          uint64_t v37 = sub_188C138((uint64_t)v8, v33);
          *(void *)unint64_t v39 = v37;
          *(unsigned char *)(a1 + 96) = v38 != 0;
          if (!v37) {
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v32 = (char *)(v8 + 2);
LABEL_48:
          *(void *)unint64_t v39 = v32;
          *(unsigned char *)(a1 + 96) = v33 != 0;
        }
        goto LABEL_57;
      default:
LABEL_49:
        if (v9) {
          BOOL v35 = (v9 & 7) == 4;
        }
        else {
          BOOL v35 = 1;
        }
        if (!v35)
        {
          if (*v7)
          {
            uint64_t v36 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v36 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = *(unsigned __int8 **)v39;
          }
          int v29 = sub_1885AC0(v9, v36, (char *)v8, a3);
LABEL_56:
          *(void *)unint64_t v39 = v29;
          if (!v29) {
            goto LABEL_64;
          }
LABEL_57:
          if (sub_11947B8((uint64_t)a3, (char **)v39, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_64:
        }
          *(void *)unint64_t v39 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return *(void *)v39;
    }
  }
}

unsigned char *sub_15EEF38(uint64_t a1, unsigned char *__dst, unint64_t *a3)
{
  char v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    char v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 18;
      unsigned int v10 = *(_DWORD *)(v9 + 20);
      v4[1] = v10;
      if (v10 > 0x7F) {
        unsigned int v11 = sub_188A9CC(v10, v4 + 1);
      }
      else {
        unsigned int v11 = v4 + 2;
      }
      char v4 = sub_1277CF8(v9, (unint64_t)v11, a3);
    }
  }
  int v12 = *(_DWORD *)(a1 + 56);
  if (v12)
  {
    for (int j = 0; j != v12; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8 * j + 8);
      unsigned char *v4 = 26;
      unsigned int v15 = *(_DWORD *)(v14 + 20);
      v4[1] = v15;
      if (v15 > 0x7F) {
        uint64_t v16 = sub_188A9CC(v15, v4 + 1);
      }
      else {
        uint64_t v16 = v4 + 2;
      }
      char v4 = sub_1276838(v14, (unint64_t)v16, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    char v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL), v4);
    if ((v6 & 4) == 0)
    {
LABEL_21:
      if ((v6 & 8) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_21;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v17 = *(void *)(a1 + 88);
  unsigned char *v4 = 42;
  unsigned int v18 = *(_DWORD *)(v17 + 20);
  v4[1] = v18;
  if (v18 > 0x7F) {
    uint64_t v19 = sub_188A9CC(v18, v4 + 1);
  }
  else {
    uint64_t v19 = v4 + 2;
  }
  char v4 = sub_126F20C(v17, (unint64_t)v19, a3);
  if ((v6 & 8) != 0)
  {
LABEL_30:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v20 = *(unsigned char *)(a1 + 96);
    unsigned char *v4 = 48;
    v4[1] = v20;
    v4 += 2;
  }
LABEL_33:
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return v4;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v23 + 31) < 0)
  {
    uint64_t v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    uint64_t v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(v4, v24, (int)v25);
    v4 += v26;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v24, v25, v4);
}

uint64_t sub_15EF1EC(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    char v4 = (uint64_t *)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_1277F44(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 56);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    unsigned int v11 = (uint64_t *)(v10 + 8);
  }
  else {
    unsigned int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = sub_1276AE4(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  int v15 = *(_DWORD *)(a1 + 16);
  if ((v15 & 0xF) != 0)
  {
    if (v15)
    {
      unint64_t v19 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
      uint64_t v21 = *(void *)(v19 + 8);
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = v20;
      }
      v9 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v15 & 2) == 0)
      {
LABEL_18:
        if ((v15 & 4) == 0) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
    else if ((v15 & 2) == 0)
    {
      goto LABEL_18;
    }
    unint64_t v22 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v24 = *(void *)(v22 + 8);
    if ((v23 & 0x80u) == 0) {
      uint64_t v24 = v23;
    }
    v9 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v15 & 4) == 0) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v16 = sub_126F38C(*(void *)(a1 + 88));
    v9 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_20:
    if ((v15 & 8) != 0) {
      v9 += 2;
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if (v17)
  {
    unint64_t v25 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v25 + 31) < 0) {
      uint64_t v26 = *(void *)(v25 + 16);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 31);
    }
    v9 += v26;
  }
  *(_DWORD *)(a1 + 20) = v9;
  return v9;
}

void *sub_15EF3C8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.DirectionsCorrections");
}

uint64_t sub_15EF3D8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_12;
    }
  }
  else if (v4)
  {
    goto LABEL_12;
  }
  if ((uint64_t (***)())a1 != &off_2540770)
  {
    uint64_t v5 = *(void **)(a1 + 144);
    if (v5)
    {
      sub_1277068(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 152);
    if (v6)
    {
      sub_1277068(v6);
      operator delete();
    }
    uint64_t v7 = *(void *)(a1 + 160);
    if (v7)
    {
      sub_126C3A8(v7);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_12:
  sub_11DB7D4((void *)(a1 + 120));
  sub_148EDBC((void *)(a1 + 96));
  sub_1638CC0((void *)(a1 + 72));
  sub_12C2134((void *)(a1 + 48));
  sub_12C20B4((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15EF504(uint64_t a1)
{
  sub_15EF3D8(a1);

  operator delete();
}

char *sub_15EF53C(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v55 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v55, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v8 = v55 + 1;
    unsigned int v9 = *v55;
    if (*v55 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        uint64_t v8 = (char *)sub_188C180((uint64_t)v55, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        uint64_t v8 = v55 + 2;
      }
    }
    uint64_t v55 = v8;
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10) {
          goto LABEL_82;
        }
        uint64_t v12 = v8 - 1;
        while (1)
        {
          uint64_t v13 = (unsigned __int8 *)(v12 + 1);
          uint64_t v55 = v12 + 1;
          uint64_t v14 = *(_DWORD **)(a1 + 40);
          if (v14 && (uint64_t v15 = *(int *)(a1 + 32), (int)v15 < *v14))
          {
            *(_DWORD *)(a1 + 32) = v15 + 1;
            uint64_t v16 = *(void *)&v14[2 * v15 + 2];
          }
          else
          {
            uint64_t v17 = sub_16332DC(*(void *)(a1 + 24));
            uint64_t v16 = sub_188CDC8(a1 + 24, v17);
            uint64_t v13 = (unsigned __int8 *)v55;
          }
          uint64_t v12 = (char *)sub_118D0CC(a3, v16, v13);
          uint64_t v55 = v12;
          if (!v12) {
            goto LABEL_97;
          }
          if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
            goto LABEL_90;
          }
        }
      case 2u:
        if (v9 != 18) {
          goto LABEL_82;
        }
        unsigned int v18 = v8 - 1;
        while (1)
        {
          unint64_t v19 = (unsigned __int8 *)(v18 + 1);
          uint64_t v55 = v18 + 1;
          uint64_t v20 = *(_DWORD **)(a1 + 64);
          if (v20 && (uint64_t v21 = *(int *)(a1 + 56), (int)v21 < *v20))
          {
            *(_DWORD *)(a1 + 56) = v21 + 1;
            uint64_t v22 = *(void *)&v20[2 * v21 + 2];
          }
          else
          {
            uint64_t v23 = sub_1633394(*(void *)(a1 + 48));
            uint64_t v22 = sub_188CDC8(a1 + 48, v23);
            unint64_t v19 = (unsigned __int8 *)v55;
          }
          unsigned int v18 = sub_126601C(a3, v22, v19);
          uint64_t v55 = v18;
          if (!v18) {
            goto LABEL_97;
          }
          if (*(void *)a3 <= (unint64_t)v18 || *v18 != 18) {
            goto LABEL_90;
          }
        }
      case 3u:
        if (v9 != 26) {
          goto LABEL_82;
        }
        uint64_t v24 = v8 - 1;
        while (1)
        {
          unint64_t v25 = (unsigned __int8 *)(v24 + 1);
          uint64_t v55 = v24 + 1;
          uint64_t v26 = *(_DWORD **)(a1 + 88);
          if (v26 && (uint64_t v27 = *(int *)(a1 + 80), (int)v27 < *v26))
          {
            *(_DWORD *)(a1 + 80) = v27 + 1;
            uint64_t v28 = *(void *)&v26[2 * v27 + 2];
          }
          else
          {
            int v29 = sub_15F9904(*(void *)(a1 + 72));
            uint64_t v28 = sub_188CDC8(a1 + 72, (uint64_t)v29);
            unint64_t v25 = (unsigned __int8 *)v55;
          }
          uint64_t v24 = sub_15ED1BC(a3, v28, v25);
          uint64_t v55 = v24;
          if (!v24) {
            goto LABEL_97;
          }
          if (*(void *)a3 <= (unint64_t)v24 || *v24 != 26) {
            goto LABEL_90;
          }
        }
      case 4u:
        if (v9 != 34) {
          goto LABEL_82;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v30 = *(void *)(a1 + 144);
        if (v30) {
          goto LABEL_50;
        }
        uint64_t v31 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v7) {
          uint64_t v31 = (void *)*v31;
        }
        uint64_t v30 = sub_12846F4((uint64_t)v31);
        *(void *)(a1 + 144) = v30;
        goto LABEL_49;
      case 5u:
        if (v9 != 42) {
          goto LABEL_82;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v30 = *(void *)(a1 + 152);
        if (v30) {
          goto LABEL_50;
        }
        uint64_t v32 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v7) {
          uint64_t v32 = (void *)*v32;
        }
        uint64_t v30 = sub_12846F4((uint64_t)v32);
        *(void *)(a1 + 152) = v30;
LABEL_49:
        uint64_t v8 = v55;
LABEL_50:
        uint64_t v33 = (char *)sub_1275320(a3, v30, (unsigned __int8 *)v8);
        goto LABEL_89;
      case 6u:
        if (v9 != 50) {
          goto LABEL_82;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        int v34 = *(void **)(a1 + 160);
        if (!v34)
        {
          BOOL v35 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v7) {
            BOOL v35 = (void *)*v35;
          }
          int v34 = sub_1283D90((uint64_t)v35);
          *(void *)(a1 + 160) = v34;
          uint64_t v8 = v55;
        }
        uint64_t v33 = (char *)sub_126613C(a3, (uint64_t)v34, (unsigned __int8 *)v8);
        goto LABEL_89;
      case 7u:
        if (v9 != 58) {
          goto LABEL_82;
        }
        uint64_t v36 = v8 - 1;
        while (1)
        {
          uint64_t v37 = (unsigned __int8 *)(v36 + 1);
          uint64_t v55 = v36 + 1;
          uint64_t v38 = *(_DWORD **)(a1 + 112);
          if (v38 && (uint64_t v39 = *(int *)(a1 + 104), (int)v39 < *v38))
          {
            *(_DWORD *)(a1 + 104) = v39 + 1;
            uint64_t v40 = *(void *)&v38[2 * v39 + 2];
          }
          else
          {
            uint64_t v41 = sub_13D8C74(*(void *)(a1 + 96));
            uint64_t v40 = sub_188CDC8(a1 + 96, v41);
            uint64_t v37 = (unsigned __int8 *)v55;
          }
          uint64_t v36 = sub_13E0498(a3, v40, v37);
          uint64_t v55 = v36;
          if (!v36) {
            goto LABEL_97;
          }
          if (*(void *)a3 <= (unint64_t)v36 || *v36 != 58) {
            goto LABEL_90;
          }
        }
      case 8u:
        if (v9 != 66) {
          goto LABEL_82;
        }
        uint64_t v42 = v8 - 1;
        while (1)
        {
          uint64_t v43 = (unsigned __int8 *)(v42 + 1);
          uint64_t v55 = v42 + 1;
          uint64_t v44 = *(_DWORD **)(a1 + 136);
          if (v44 && (uint64_t v45 = *(int *)(a1 + 128), (int)v45 < *v44))
          {
            *(_DWORD *)(a1 + 128) = v45 + 1;
            uint64_t v46 = *(void *)&v44[2 * v45 + 2];
          }
          else
          {
            uint64_t v47 = sub_15C1918(*(void *)(a1 + 120));
            uint64_t v46 = sub_188CDC8(a1 + 120, v47);
            uint64_t v43 = (unsigned __int8 *)v55;
          }
          uint64_t v42 = sub_1198F14(a3, v46, v43);
          uint64_t v55 = v42;
          if (!v42) {
            goto LABEL_97;
          }
          if (*(void *)a3 <= (unint64_t)v42 || *v42 != 66) {
            goto LABEL_90;
          }
        }
      case 9u:
        if (v9 != 72) {
          goto LABEL_82;
        }
        v5 |= 8u;
        uint64_t v48 = v8 + 1;
        uint64_t v49 = *v8;
        if ((*v8 & 0x80000000) == 0) {
          goto LABEL_81;
        }
        int v50 = *v48;
        uint64_t v49 = v49 + (v50 << 7) - 128;
        if (v50 < 0)
        {
          uint64_t v53 = (char *)sub_188C138((uint64_t)v8, v49);
          uint64_t v55 = v53;
          *(unsigned char *)(a1 + 168) = v54 != 0;
          if (!v53) {
            goto LABEL_97;
          }
        }
        else
        {
          uint64_t v48 = v8 + 2;
LABEL_81:
          uint64_t v55 = v48;
          *(unsigned char *)(a1 + 168) = v49 != 0;
        }
        goto LABEL_90;
      default:
LABEL_82:
        if (v9) {
          BOOL v51 = (v9 & 7) == 4;
        }
        else {
          BOOL v51 = 1;
        }
        if (!v51)
        {
          if (*v7)
          {
            uint64_t v52 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v52 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v8 = v55;
          }
          uint64_t v33 = (char *)sub_1885AC0(v9, v52, v8, a3);
LABEL_89:
          uint64_t v55 = v33;
          if (!v33) {
            goto LABEL_97;
          }
LABEL_90:
          if (sub_11947B8((uint64_t)a3, &v55, a3[11].i32[1])) {
            goto LABEL_2;
          }
          continue;
        }
        if (v8) {
          a3[10].i32[0] = v9 - 1;
        }
        else {
LABEL_97:
        }
          uint64_t v55 = 0;
LABEL_2:
        *(_DWORD *)(a1 + 16) |= v5;
        return v55;
    }
  }
}

char *sub_15EFAE8(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        unsigned int v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        unsigned int v10 = __dst + 2;
      }
      __dst = sub_162962C(v8, v10, a3);
    }
  }
  int v11 = *(_DWORD *)(a1 + 56);
  if (v11)
  {
    for (int j = 0; j != v11; ++j)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8 * j + 8);
      *__dst = 18;
      unsigned int v14 = *(_DWORD *)(v13 + 44);
      __dst[1] = v14;
      if (v14 > 0x7F) {
        uint64_t v15 = sub_188A9CC(v14, __dst + 1);
      }
      else {
        uint64_t v15 = __dst + 2;
      }
      __dst = sub_162F61C(v13, v15, a3);
    }
  }
  int v16 = *(_DWORD *)(a1 + 80);
  if (v16)
  {
    for (int k = 0; k != v16; ++k)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 88) + 8 * k + 8);
      *__dst = 26;
      unsigned int v19 = *(_DWORD *)(v18 + 20);
      __dst[1] = v19;
      if (v19 > 0x7F) {
        uint64_t v20 = sub_188A9CC(v19, __dst + 1);
      }
      else {
        uint64_t v20 = __dst + 2;
      }
      __dst = sub_15E907C(v18, (unint64_t)v20, a3);
    }
  }
  int v21 = *(_DWORD *)(a1 + 16);
  if (v21)
  {
    if (*a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v22 = *(void *)(a1 + 144);
    *__dst = 34;
    unsigned int v23 = *(_DWORD *)(v22 + 20);
    __dst[1] = v23;
    if (v23 > 0x7F) {
      uint64_t v24 = sub_188A9CC(v23, __dst + 1);
    }
    else {
      uint64_t v24 = __dst + 2;
    }
    __dst = sub_12774A4(v22, v24, a3);
    if ((v21 & 2) == 0)
    {
LABEL_27:
      if ((v21 & 4) == 0) {
        goto LABEL_47;
      }
      goto LABEL_41;
    }
  }
  else if ((v21 & 2) == 0)
  {
    goto LABEL_27;
  }
  if (*a3 <= (unint64_t)__dst) {
    __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
  }
  uint64_t v25 = *(void *)(a1 + 152);
  *__dst = 42;
  unsigned int v26 = *(_DWORD *)(v25 + 20);
  __dst[1] = v26;
  if (v26 > 0x7F) {
    uint64_t v27 = sub_188A9CC(v26, __dst + 1);
  }
  else {
    uint64_t v27 = __dst + 2;
  }
  __dst = sub_12774A4(v25, v27, a3);
  if ((v21 & 4) != 0)
  {
LABEL_41:
    if (*a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    uint64_t v28 = *(void *)(a1 + 160);
    *__dst = 50;
    unsigned int v29 = *(_DWORD *)(v28 + 20);
    __dst[1] = v29;
    if (v29 > 0x7F) {
      uint64_t v30 = sub_188A9CC(v29, __dst + 1);
    }
    else {
      uint64_t v30 = __dst + 2;
    }
    __dst = sub_126C608(v28, (unint64_t)v30, a3);
  }
LABEL_47:
  int v31 = *(_DWORD *)(a1 + 104);
  if (v31)
  {
    for (int m = 0; m != v31; ++m)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v33 = *(void *)(*(void *)(a1 + 112) + 8 * m + 8);
      *__dst = 58;
      unsigned int v34 = *(_DWORD *)(v33 + 44);
      __dst[1] = v34;
      if (v34 > 0x7F) {
        BOOL v35 = sub_188A9CC(v34, __dst + 1);
      }
      else {
        BOOL v35 = __dst + 2;
      }
      __dst = sub_13A351C(v33, v35, a3);
    }
  }
  int v36 = *(_DWORD *)(a1 + 128);
  if (v36)
  {
    for (int n = 0; n != v36; ++n)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v38 = *(void *)(*(void *)(a1 + 136) + 8 * n + 8);
      *__dst = 66;
      unsigned int v39 = *(_DWORD *)(v38 + 44);
      __dst[1] = v39;
      if (v39 > 0x7F) {
        uint64_t v40 = sub_188A9CC(v39, __dst + 1);
      }
      else {
        uint64_t v40 = __dst + 2;
      }
      __dst = sub_15B0C0C(v38, v40, a3);
    }
  }
  if ((v21 & 8) != 0)
  {
    if (*a3 <= (unint64_t)__dst) {
      __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
    }
    char v41 = *(unsigned char *)(a1 + 168);
    *__dst = 72;
    __dst[1] = v41;
    __dst += 2;
  }
  uint64_t v42 = *(void *)(a1 + 8);
  if ((v42 & 1) == 0) {
    return __dst;
  }
  unint64_t v44 = v42 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v44 + 31) < 0)
  {
    uint64_t v45 = *(void **)(v44 + 8);
    uint64_t v46 = *(void *)(v44 + 16);
  }
  else
  {
    uint64_t v45 = (void *)(v44 + 8);
    LODWORD(v46) = *(unsigned __int8 *)(v44 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v46)
  {
    uint64_t v47 = (int)v46;
    memcpy(__dst, v45, (int)v46);
    __dst += v47;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v45, v46, __dst);
}

uint64_t sub_15EFFB0(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    char v4 = (uint64_t *)(v3 + 8);
  }
  else {
    char v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_162A6E8(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 56);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    int v11 = (uint64_t *)(v10 + 8);
  }
  else {
    int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      uint64_t v13 = *v11++;
      uint64_t v14 = sub_1630810(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v15 = *(int *)(a1 + 80);
  uint64_t v16 = v9 + v15;
  uint64_t v17 = *(void *)(a1 + 88);
  if (v17) {
    uint64_t v18 = (uint64_t *)(v17 + 8);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v15)
  {
    uint64_t v19 = 8 * v15;
    do
    {
      uint64_t v20 = *v18++;
      uint64_t v21 = sub_15E91FC(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v22 = *(int *)(a1 + 104);
  uint64_t v23 = v16 + v22;
  uint64_t v24 = *(void *)(a1 + 112);
  if (v24) {
    uint64_t v25 = (uint64_t *)(v24 + 8);
  }
  else {
    uint64_t v25 = 0;
  }
  if (v22)
  {
    uint64_t v26 = 8 * v22;
    do
    {
      uint64_t v27 = *v25++;
      uint64_t v28 = sub_13A3F0C(v27);
      v23 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6);
      v26 -= 8;
    }
    while (v26);
  }
  uint64_t v29 = *(int *)(a1 + 128);
  uint64_t v30 = v23 + v29;
  uint64_t v31 = *(void *)(a1 + 136);
  if (v31) {
    uint64_t v32 = (uint64_t *)(v31 + 8);
  }
  else {
    uint64_t v32 = 0;
  }
  if (v29)
  {
    uint64_t v33 = 8 * v29;
    do
    {
      uint64_t v34 = *v32++;
      uint64_t v35 = sub_15B0D90(v34);
      v30 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6);
      v33 -= 8;
    }
    while (v33);
  }
  int v36 = *(_DWORD *)(a1 + 16);
  if ((v36 & 0xF) != 0)
  {
    if (v36)
    {
      uint64_t v40 = sub_127775C(*(void *)(a1 + 144));
      v30 += v40 + ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v36 & 2) == 0)
      {
LABEL_36:
        if ((v36 & 4) == 0) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
    }
    else if ((v36 & 2) == 0)
    {
      goto LABEL_36;
    }
    uint64_t v41 = sub_127775C(*(void *)(a1 + 152));
    v30 += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v36 & 4) == 0)
    {
LABEL_38:
      if ((v36 & 8) != 0) {
        v30 += 2;
      }
      goto LABEL_40;
    }
LABEL_37:
    uint64_t v37 = sub_126C770(*(void *)(a1 + 160));
    v30 += v37 + ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_38;
  }
LABEL_40:
  uint64_t v38 = *(void *)(a1 + 8);
  if (v38)
  {
    unint64_t v42 = v38 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v42 + 31) < 0) {
      uint64_t v43 = *(void *)(v42 + 16);
    }
    else {
      uint64_t v43 = *(unsigned __int8 *)(v42 + 31);
    }
    v30 += v43;
  }
  *(_DWORD *)(a1 + 20) = v30;
  return v30;
}

void *sub_15F0254@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.DirectionsFeedbackContext");
}

uint64_t sub_15F0264(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15F02E8((uint64_t (***)())a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t (***sub_15F02E8(uint64_t (***result)()))()
{
  if (result != &off_2540820)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[3];
    if (v2)
    {
      sub_15E6344(v2);
      operator delete();
    }
    if (v1[4])
    {
      sub_1762C7C();
      operator delete();
    }
    uint64_t v3 = v1[5];
    if (v3)
    {
      sub_15F0C2C(v3);
      operator delete();
    }
    uint64_t result = (uint64_t (***)())v1[6];
    if (result)
    {
      sub_182B32C(result);
      operator delete();
    }
  }
  return result;
}

void sub_15F03B4(uint64_t a1)
{
  sub_15F0264(a1);

  operator delete();
}

uint64_t sub_15F03EC(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 3) != 0) {
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15F0410(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v29 = a2;
  if (sub_11947B8((uint64_t)a3, &v29, a3[11].i32[1])) {
    return v29;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = v29 + 1;
    unsigned int v8 = *v29;
    if (*v29 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v29, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v29 + 2;
      }
    }
    uint64_t v29 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 24);
        if (!v11)
        {
          uint64_t v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v12 = (void *)*v12;
          }
          sub_15F962C((uint64_t)v12);
          uint64_t v11 = v13;
          *(void *)(a1 + 24) = v13;
          uint64_t v7 = v29;
        }
        uint64_t v14 = sub_15E4230(a3, v11, (unsigned __int8 *)v7);
        goto LABEL_47;
      case 2u:
        if (v8 != 18) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v15 = *(void *)(a1 + 32);
        if (!v15)
        {
          uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v16 = (void *)*v16;
          }
          uint64_t v15 = sub_178CDA8((uint64_t)v16);
          *(void *)(a1 + 32) = v15;
          uint64_t v7 = v29;
        }
        uint64_t v14 = (char *)sub_1265F8C(a3, v15, (unsigned __int8 *)v7);
        goto LABEL_47;
      case 3u:
        if (v8 != 24) {
          goto LABEL_40;
        }
        uint64_t v17 = v7 + 1;
        unint64_t v18 = *v7;
        if ((*v7 & 0x80000000) == 0) {
          goto LABEL_25;
        }
        int v19 = *v17;
        int v20 = v18 + (v19 << 7);
        unint64_t v18 = (v20 - 128);
        if (v19 < 0)
        {
          uint64_t v29 = (char *)sub_188C138((uint64_t)v7, (v20 - 128));
          if (!v29) {
            return 0;
          }
          unint64_t v18 = v27;
        }
        else
        {
          uint64_t v17 = v7 + 2;
LABEL_25:
          uint64_t v29 = v17;
        }
        if (v18 > 2)
        {
          if (*v6) {
            uint64_t v28 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v28 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(3, v18, v28);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x10u;
          *(_DWORD *)(a1 + 56) = v18;
        }
        goto LABEL_48;
      case 4u:
        if (v8 != 34) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v21 = *(void **)(a1 + 40);
        if (!v21)
        {
          uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v22 = (void *)*v22;
          }
          uint64_t v21 = sub_15FA000((uint64_t)v22);
          *(void *)(a1 + 40) = v21;
          uint64_t v7 = v29;
        }
        uint64_t v14 = sub_15F0744(a3, (uint64_t)v21, (unsigned __int8 *)v7);
        goto LABEL_47;
      case 5u:
        if (v8 != 42) {
          goto LABEL_40;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v23 = *(void *)(a1 + 48);
        if (!v23)
        {
          uint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v24 = (void *)*v24;
          }
          uint64_t v23 = sub_1836E54((uint64_t)v24);
          *(void *)(a1 + 48) = v23;
          uint64_t v7 = v29;
        }
        uint64_t v14 = (char *)sub_11798C8(a3, v23, (unsigned __int8 *)v7);
        goto LABEL_47;
      default:
LABEL_40:
        if (v8) {
          BOOL v25 = (v8 & 7) == 4;
        }
        else {
          BOOL v25 = 1;
        }
        if (!v25)
        {
          if (*v6)
          {
            uint64_t v26 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v26 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = v29;
          }
          uint64_t v14 = (char *)sub_1885AC0(v8, v26, v7, a3);
LABEL_47:
          uint64_t v29 = v14;
          if (!v14) {
            return 0;
          }
LABEL_48:
          if (sub_11947B8((uint64_t)a3, &v29, a3[11].i32[1])) {
            return v29;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return v29;
    }
  }
}

char *sub_15F0744(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F0CD8(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15F07D4(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_15E6994(v7, (unint64_t)v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unsigned char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 44);
  v4[1] = v11;
  if (v11 > 0x7F) {
    uint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    uint64_t v12 = v4 + 2;
  }
  char v4 = sub_1763540(v10, v12, a3);
  if ((v6 & 0x10) != 0)
  {
LABEL_17:
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(int *)(a1 + 56);
    unsigned char *v4 = 24;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_23:
  if ((v6 & 4) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    unsigned char *v4 = 34;
    unsigned int v17 = *(_DWORD *)(v16 + 20);
    v4[1] = v17;
    if (v17 > 0x7F) {
      unint64_t v18 = sub_188A9CC(v17, v4 + 1);
    }
    else {
      unint64_t v18 = v4 + 2;
    }
    char v4 = sub_15F0F38(v16, (unint64_t)v18, a3);
  }
  if ((v6 & 8) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v19 = *(void *)(a1 + 48);
    unsigned char *v4 = 42;
    unsigned int v20 = *(_DWORD *)(v19 + 44);
    v4[1] = v20;
    if (v20 > 0x7F) {
      uint64_t v21 = sub_188A9CC(v20, v4 + 1);
    }
    else {
      uint64_t v21 = v4 + 2;
    }
    char v4 = sub_182BE50(v19, v21, a3);
  }
  uint64_t v22 = *(void *)(a1 + 8);
  if ((v22 & 1) == 0) {
    return v4;
  }
  unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v24 + 31) < 0)
  {
    BOOL v25 = *(void **)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
  }
  else
  {
    BOOL v25 = (void *)(v24 + 8);
    LODWORD(v26) = *(unsigned __int8 *)(v24 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v26)
  {
    uint64_t v27 = (int)v26;
    memcpy(v4, v25, (int)v26);
    v4 += v27;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v25, v26, v4);
}

uint64_t sub_15F0AA4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x1F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_18;
  }
  if (v2)
  {
    uint64_t v4 = sub_15E6CBC(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_1763C40(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = sub_15F10DC(*(void *)(a1 + 40));
    v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_10:
      if ((v2 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_10;
  }
  uint64_t v7 = sub_182C500(*(void *)(a1 + 48));
  v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_14:
  int v8 = *(_DWORD *)(a1 + 56);
  if (v8 < 0) {
    uint64_t v9 = 11;
  }
  else {
    uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v3 += v9;
LABEL_18:
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v3 += v13;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void *sub_15F0C1C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.AddressFeedback");
}

void *sub_15F0C2C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F0CA0(void *a1)
{
  sub_15F0C2C(a1);

  operator delete();
}

char *sub_15F0CD8(uint64_t a1, char *a2, int32x2_t *a3)
{
  BOOL v25 = a2;
  if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
    return v25;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v25 + 1;
    unsigned int v8 = *v25;
    if (*v25 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v25, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v25 + 2;
      }
    }
    BOOL v25 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 16) {
      goto LABEL_13;
    }
    unint64_t v14 = v7 + 1;
    unint64_t v15 = *v7;
    if (*v7 < 0)
    {
      int v16 = *v14;
      int v17 = v15 + (v16 << 7);
      unint64_t v15 = (v17 - 128);
      if (v16 < 0)
      {
        BOOL v25 = (char *)sub_188C138((uint64_t)v7, (v17 - 128));
        if (!v25) {
          return 0;
        }
        unint64_t v15 = v21;
        goto LABEL_26;
      }
      unint64_t v14 = v7 + 2;
    }
    BOOL v25 = v14;
LABEL_26:
    if (!sub_125D180(v15))
    {
      if (*v6) {
        uint64_t v23 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v23 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      int v24 = 2;
      goto LABEL_46;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_DWORD *)(a1 + 28) = v15;
LABEL_34:
    if (sub_11947B8((uint64_t)a3, &v25, a3[11].i32[1])) {
      return v25;
    }
  }
  if (v8 >> 3 == 1 && v8 == 8)
  {
    unint64_t v18 = v7 + 1;
    unint64_t v15 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    int v19 = *v18;
    int v20 = v15 + (v19 << 7);
    unint64_t v15 = (v20 - 128);
    if (v19 < 0)
    {
      BOOL v25 = (char *)sub_188C138((uint64_t)v7, (v20 - 128));
      if (!v25) {
        return 0;
      }
      unint64_t v15 = v22;
    }
    else
    {
      unint64_t v18 = v7 + 2;
LABEL_31:
      BOOL v25 = v18;
    }
    if (sub_125D174(v15))
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_DWORD *)(a1 + 24) = v15;
      goto LABEL_34;
    }
    if (*v6) {
      uint64_t v23 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      uint64_t v23 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
    }
    int v24 = 1;
LABEL_46:
    sub_188C020(v24, v15, v23);
    goto LABEL_34;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v25;
    }
    BOOL v25 = (char *)sub_1885AC0(v8, v13, v7, a3);
    if (!v25) {
      return 0;
    }
    goto LABEL_34;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v25;
  }
  return 0;
}

unsigned char *sub_15F0F38(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 28);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    int v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    int v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15F10DC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_14;
  }
  if (v1)
  {
    int v3 = *(_DWORD *)(a1 + 24);
    if (v3 < 0)
    {
      uint64_t v2 = 11;
      if ((v1 & 2) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v2 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v1 & 2) == 0) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_14;
    }
  }
  int v4 = *(_DWORD *)(a1 + 28);
  if (v4 < 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v2 += v5;
LABEL_14:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v2 += v9;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15F119C()
{
  return 1;
}

void *sub_15F11A4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PersonalizedMapsContext");
}

uint64_t sub_15F11B4(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_2540880)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_126FBC0(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_126F01C(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F1284(uint64_t a1)
{
  sub_15F11B4(a1);

  operator delete();
}

char *sub_15F12BC(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v26 = a2;
  if (sub_11947B8((uint64_t)a3, &v26, a3[11].i32[1])) {
    return v26;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = v26 + 1;
    unsigned int v8 = *v26;
    if (*v26 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180((uint64_t)v26, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = v26 + 2;
      }
    }
    uint64_t v26 = v7;
    unsigned int v11 = v8 >> 3;
    if (v8 >> 3 == 3) {
      break;
    }
    if (v11 == 2)
    {
      if (v8 != 18) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 16) |= 2u;
      int v20 = *(void **)(a1 + 32);
      if (!v20)
      {
        unint64_t v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unint64_t v21 = (void *)*v21;
        }
        int v20 = sub_1284080((uint64_t)v21);
        *(void *)(a1 + 32) = v20;
        unint64_t v7 = v26;
      }
      unint64_t v15 = sub_12613D0(a3, (uint64_t)v20, (unsigned __int8 *)v7);
    }
    else
    {
      if (v11 != 1 || v8 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v22 = *(void *)(a1 + 24);
      if (!v22)
      {
        uint64_t v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          uint64_t v23 = (void *)*v23;
        }
        uint64_t v22 = sub_1284178((uint64_t)v23);
        *(void *)(a1 + 24) = v22;
        unint64_t v7 = v26;
      }
      unint64_t v15 = (char *)sub_1261340(a3, v22, (unsigned __int8 *)v7);
    }
LABEL_39:
    uint64_t v26 = v15;
    if (!v15) {
      return 0;
    }
LABEL_40:
    if (sub_11947B8((uint64_t)a3, &v26, a3[11].i32[1])) {
      return v26;
    }
  }
  if (v8 == 24)
  {
    int v16 = v7 + 1;
    unint64_t v17 = *v7;
    if (*v7 < 0)
    {
      int v18 = *v16;
      int v19 = v17 + (v18 << 7);
      unint64_t v17 = (v19 - 128);
      if (v18 < 0)
      {
        uint64_t v26 = (char *)sub_188C138((uint64_t)v7, (v19 - 128));
        if (!v26) {
          return 0;
        }
        unint64_t v17 = v24;
        goto LABEL_26;
      }
      int v16 = v7 + 2;
    }
    uint64_t v26 = v16;
LABEL_26:
    if (v17 > 2)
    {
      if (*v6) {
        BOOL v25 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        BOOL v25 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(3, v17, v25);
    }
    else
    {
      *(_DWORD *)(a1 + 16) |= 4u;
      *(_DWORD *)(a1 + 40) = v17;
    }
    goto LABEL_40;
  }
LABEL_14:
  if (v8) {
    BOOL v13 = (v8 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v6)
    {
      unint64_t v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = v26;
    }
    unint64_t v15 = (char *)sub_1885AC0(v8, v14, v7, a3);
    goto LABEL_39;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v26;
  }
  return 0;
}

unsigned char *sub_15F1524(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  int v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      int v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    int v4 = sub_1270080(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unsigned char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    unint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    unint64_t v12 = v4 + 2;
  }
  int v4 = sub_126F20C(v10, (unint64_t)v12, a3);
  if ((v6 & 4) != 0)
  {
LABEL_17:
    if (*a3 <= (unint64_t)v4) {
      int v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(int *)(a1 + 40);
    unsigned char *v4 = 24;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_23:
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    int v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    int v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15F172C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 7) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_13;
  }
  if (v2)
  {
    uint64_t v4 = sub_1270390(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_126F38C(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a1 + 40);
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v3 += v7;
  }
LABEL_13:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v3 += v11;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void *sub_15F1838@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.TileFeedback");
}

uint64_t sub_15F1848(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_25408B0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15F2B54(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_15F3ADC(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F1918(uint64_t a1)
{
  sub_15F1848(a1);

  operator delete();
}

uint64_t sub_15F1950(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15F2584(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  *(_DWORD *)(v1 + 48) = 0;
  uint64_t v5 = *(unsigned int *)(v1 + 72);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v1 + 80) + 8);
    do
    {
      uint64_t v7 = *v6++;
      uint64_t result = sub_1260340(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(v1 + 72) = 0;
  }
  uint64_t v8 = *(unsigned int *)(v1 + 96);
  if ((int)v8 >= 1)
  {
    unsigned int v9 = (uint64_t *)(*(void *)(v1 + 104) + 8);
    do
    {
      uint64_t v10 = *v9++;
      uint64_t result = sub_1272680(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(v1 + 96) = 0;
  }
  int v11 = *(_DWORD *)(v1 + 16);
  if ((v11 & 0xF) == 0) {
    goto LABEL_19;
  }
  if ((v11 & 1) == 0)
  {
    if ((v11 & 2) == 0) {
      goto LABEL_16;
    }
LABEL_29:
    uint64_t result = sub_147F26C(*(void *)(v1 + 120));
    if ((v11 & 4) == 0)
    {
LABEL_17:
      if ((v11 & 8) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v1 + 112) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v14 + 23) < 0)
  {
    **(unsigned char **)unint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    if ((v11 & 2) != 0) {
      goto LABEL_29;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v14 = 0;
    *(unsigned char *)(v14 + 23) = 0;
    if ((v11 & 2) != 0) {
      goto LABEL_29;
    }
  }
LABEL_16:
  if ((v11 & 4) == 0) {
    goto LABEL_17;
  }
LABEL_30:
  uint64_t result = sub_1481530(*(void *)(v1 + 128));
  if ((v11 & 8) != 0) {
LABEL_18:
  }
    uint64_t result = sub_15BF870(*(void *)(v1 + 136));
LABEL_19:
  if ((v11 & 0x30) != 0)
  {
    *(_DWORD *)(v1 + 152) = 0;
    *(void *)(v1 + 144) = 0;
  }
  char v13 = *(unsigned char *)(v1 + 8);
  uint64_t v12 = v1 + 8;
  *(_DWORD *)(v12 + 8) = 0;
  if (v13)
  {
    return sub_188B4AC((uint64_t *)v12);
  }
  return result;
}

uint64_t sub_15F1AA4(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16)) {
    uint64_t result = sub_15C2E6C(*(void *)(result + 24));
  }
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  *(_DWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 8) = 0;
  if (v3)
  {
    return sub_188B4AC((uint64_t *)v2);
  }
  return result;
}

char *sub_15F1B04(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v20 = a2;
  if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
    return v20;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v20 + 1;
    unsigned int v8 = *v20;
    if (*v20 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v20, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v20 + 2;
      }
    }
    uint64_t v20 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_15FA2BC((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = v20;
    }
    unint64_t v14 = sub_15F1D54(a3, v15, (unsigned __int8 *)v7);
LABEL_31:
    uint64_t v20 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v20, a3[11].i32[1])) {
      return v20;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17)
    {
      unint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        unint64_t v18 = (void *)*v18;
      }
      sub_15FA1F0((uint64_t)v18);
      uint64_t v17 = v19;
      *(void *)(a1 + 24) = v19;
      uint64_t v7 = v20;
    }
    unint64_t v14 = (char *)sub_15F1CC4(a3, v17, (unsigned __int8 *)v7);
    goto LABEL_31;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      char v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      char v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v20;
    }
    unint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_31;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v20;
  }
  return 0;
}

uint64_t sub_15F1CC4(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F2CC4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15F1D54(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F3BCC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15F1DE4(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15F32E4(v7, (unint64_t)v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    unsigned char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    uint64_t v4 = sub_15F3DDC(v10, (unint64_t)v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15F1F64(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_15F3824(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15F3F68(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15F203C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1301E6C((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    unint64_t v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 48);
  if (v9)
  {
    uint64_t v10 = *(int *)(a1 + 48);
    sub_188CA54((unsigned int *)(a1 + 48), v10 + v9);
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a2 + 48);
    memcpy((void *)(v11 + 8 * v10), *(const void **)(a2 + 56), 8 * *(int *)(a2 + 48));
  }
  int v12 = *(_DWORD *)(a2 + 72);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 80) + 8);
    unint64_t v14 = (uint64_t *)sub_188CCE4(a1 + 64, *(_DWORD *)(a2 + 72));
    sub_16390EC((uint64_t *)(a1 + 64), v14, v13, v12, **(_DWORD **)(a1 + 80) - *(_DWORD *)(a1 + 72));
    int v15 = *(_DWORD *)(a1 + 72) + v12;
    *(_DWORD *)(a1 + 72) = v15;
    uint64_t v16 = *(int **)(a1 + 80);
    if (*v16 < v15) {
      int *v16 = v15;
    }
  }
  int v17 = *(_DWORD *)(a2 + 96);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a2 + 104) + 8);
    uint64_t v19 = (std::string **)sub_188CCE4(a1 + 88, *(_DWORD *)(a2 + 96));
    sub_12C2FA8((uint64_t *)(a1 + 88), v19, v18, v17, **(_DWORD **)(a1 + 104) - *(_DWORD *)(a1 + 96));
    int v20 = *(_DWORD *)(a1 + 96) + v17;
    *(_DWORD *)(a1 + 96) = v20;
    uint64_t v21 = *(int **)(a1 + 104);
    if (*v21 < v20) {
      int *v21 = v20;
    }
  }
  int v22 = *(_DWORD *)(a2 + 16);
  if ((v22 & 0x3F) != 0)
  {
    if (v22)
    {
      unint64_t v24 = (long long *)(*(void *)(a2 + 112) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (uint64_t *)*v26;
      }
      sub_1881DF4((std::string **)(a1 + 112), v24, v26);
      if ((v22 & 2) == 0)
      {
LABEL_15:
        if ((v22 & 4) == 0) {
          goto LABEL_16;
        }
        goto LABEL_36;
      }
    }
    else if ((v22 & 2) == 0)
    {
      goto LABEL_15;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v27 = *(std::string **)(a1 + 120);
    if (!v27)
    {
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
      if (v28) {
        uint64_t v29 = (void *)*v29;
      }
      uint64_t v27 = (std::string *)sub_148206C((uint64_t)v29);
      *(void *)(a1 + 120) = v27;
    }
    if (*(void *)(a2 + 120)) {
      uint64_t v30 = *(uint64_t (****)())(a2 + 120);
    }
    else {
      uint64_t v30 = &off_2539ED0;
    }
    sub_1480504(v27, (uint64_t)v30);
    if ((v22 & 4) == 0)
    {
LABEL_16:
      if ((v22 & 8) == 0) {
        goto LABEL_17;
      }
      goto LABEL_44;
    }
LABEL_36:
    *(_DWORD *)(a1 + 16) |= 4u;
    uint64_t v31 = *(std::string **)(a1 + 128);
    if (!v31)
    {
      uint64_t v32 = *(void *)(a1 + 8);
      uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
      if (v32) {
        uint64_t v33 = (void *)*v33;
      }
      uint64_t v31 = (std::string *)sub_1482228((uint64_t)v33);
      *(void *)(a1 + 128) = v31;
    }
    if (*(void *)(a2 + 128)) {
      uint64_t v34 = *(uint64_t (****)())(a2 + 128);
    }
    else {
      uint64_t v34 = &off_2539FD0;
    }
    sub_1481AD8(v31, (uint64_t)v34);
    if ((v22 & 8) == 0)
    {
LABEL_17:
      if ((v22 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_52;
    }
LABEL_44:
    *(_DWORD *)(a1 + 16) |= 8u;
    uint64_t v35 = *(std::string **)(a1 + 136);
    if (!v35)
    {
      uint64_t v36 = *(void *)(a1 + 8);
      uint64_t v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
      if (v36) {
        uint64_t v37 = (void *)*v37;
      }
      uint64_t v35 = (std::string *)sub_15C2510((uint64_t)v37);
      *(void *)(a1 + 136) = v35;
    }
    if (*(void *)(a2 + 136)) {
      uint64_t v38 = *(uint64_t (****)())(a2 + 136);
    }
    else {
      uint64_t v38 = &off_253F728;
    }
    sub_117EF50(v35, (uint64_t)v38);
    if ((v22 & 0x10) == 0)
    {
LABEL_18:
      if ((v22 & 0x20) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 16) |= v22;
        goto LABEL_21;
      }
LABEL_19:
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
      goto LABEL_20;
    }
LABEL_52:
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    if ((v22 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_21:
  uint64_t v23 = *(void *)(a2 + 8);
  if (v23)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v23 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15F2378(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 3) != 0)
  {
    if (v4)
    {
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      std::string::pointer data = (std::string *)result[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        std::string::size_type size = v3->__r_.__value_.__l.__size_;
        int v7 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
        if (size) {
          int v7 = (void *)*v7;
        }
        std::string::pointer data = (std::string *)sub_15C619C((uint64_t)v7);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(void *)(a2 + 24)) {
        unint64_t v8 = *(uint64_t (****)(uint64_t))(a2 + 24);
      }
      else {
        unint64_t v8 = &off_253F7F0;
      }
      uint64_t result = sub_1263010(data, (uint64_t)v8);
    }
    if ((v4 & 2) != 0) {
      LODWORD(v3[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

BOOL sub_15F2448(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 72);
  while ((int)v2 >= 1)
  {
    uint64_t v3 = v2 - 1;
    char v4 = sub_1263268(*(void *)(*(void *)(a1 + 80) + 8 * v2));
    uint64_t v2 = v3;
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  do
  {
    BOOL v5 = (int)v6 < 1;
    if ((int)v6 < 1) {
      break;
    }
    uint64_t v7 = v6 - 1;
    BOOL v8 = sub_12734C4(*(void *)(*(void *)(a1 + 104) + 8 * v6));
    uint64_t v6 = v7;
  }
  while (v8);
  return v5;
}

void *sub_15F24C8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.GroundViewFeedback");
}

void *sub_15F24D8(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F254C(void *a1)
{
  sub_15F24D8(a1);

  operator delete();
}

uint64_t sub_15F2584(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 7) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = 0;
  }
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15F25AC(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v32 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v32, a3[11].i32[1])) {
    goto LABEL_2;
  }
  uint64_t v7 = (void *)(a1 + 8);
  while (1)
  {
    BOOL v8 = v32 + 1;
    unsigned int v9 = *v32;
    if (*v32 < 0)
    {
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if (*v8 < 0)
      {
        BOOL v8 = (char *)sub_188C180((uint64_t)v32, v10 - 128);
        unsigned int v9 = v11;
      }
      else
      {
        BOOL v8 = v32 + 2;
      }
    }
    uint64_t v32 = v8;
    unsigned int v12 = v9 >> 3;
    if (v9 >> 3 == 3) {
      break;
    }
    if (v12 == 2)
    {
      if (v9 != 16) {
        goto LABEL_14;
      }
      v5 |= 2u;
      int v20 = v8 + 1;
      int v21 = *v8;
      if ((*v8 & 0x80000000) == 0) {
        goto LABEL_33;
      }
      int v22 = *v20;
      int v21 = v21 + (v22 << 7) - 128;
      if ((v22 & 0x80000000) == 0)
      {
        int v20 = v8 + 2;
LABEL_33:
        uint64_t v32 = v20;
        *(_DWORD *)(a1 + 28) = v21;
        goto LABEL_38;
      }
      uint64_t v27 = (char *)sub_188C0D0((uint64_t)v8, v21);
      uint64_t v32 = v27;
      *(_DWORD *)(a1 + 28) = v28;
      if (!v27) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v12 != 1 || v9 != 8) {
        goto LABEL_14;
      }
      v5 |= 1u;
      uint64_t v23 = v8 + 1;
      int v24 = *v8;
      if ((*v8 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      int v25 = *v23;
      int v24 = v24 + (v25 << 7) - 128;
      if ((v25 & 0x80000000) == 0)
      {
        uint64_t v23 = v8 + 2;
LABEL_37:
        uint64_t v32 = v23;
        *(_DWORD *)(a1 + 24) = v24;
        goto LABEL_38;
      }
      uint64_t v29 = (char *)sub_188C0D0((uint64_t)v8, v24);
      uint64_t v32 = v29;
      *(_DWORD *)(a1 + 24) = v30;
      if (!v29) {
        goto LABEL_53;
      }
    }
LABEL_38:
    if (sub_11947B8((uint64_t)a3, &v32, a3[11].i32[1])) {
      goto LABEL_2;
    }
  }
  if (v9 == 24)
  {
    uint64_t v16 = v8 + 1;
    unint64_t v17 = *v8;
    if (*v8 < 0)
    {
      int v18 = *v16;
      int v19 = v17 + (v18 << 7);
      unint64_t v17 = (v19 - 128);
      if (v18 < 0)
      {
        uint64_t v32 = (char *)sub_188C138((uint64_t)v8, (v19 - 128));
        if (!v32) {
          goto LABEL_53;
        }
        unint64_t v17 = v26;
        goto LABEL_27;
      }
      uint64_t v16 = v8 + 2;
    }
    uint64_t v32 = v16;
LABEL_27:
    if (v17 > 2)
    {
      if (*v7) {
        uint64_t v31 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v31 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(3, v17, v31);
    }
    else
    {
      *(_DWORD *)(a1 + 16) |= 4u;
      *(_DWORD *)(a1 + 32) = v17;
    }
    goto LABEL_38;
  }
LABEL_14:
  if (v9) {
    BOOL v14 = (v9 & 7) == 4;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (*v7)
    {
      int v15 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      int v15 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      BOOL v8 = v32;
    }
    uint64_t v32 = (char *)sub_1885AC0(v9, v15, v8, a3);
    if (!v32) {
      goto LABEL_53;
    }
    goto LABEL_38;
  }
  if (v8)
  {
    a3[10].i32[0] = v9 - 1;
    goto LABEL_2;
  }
LABEL_53:
  uint64_t v32 = 0;
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v32;
}

unsigned char *sub_15F2844(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unsigned int v7 = *(_DWORD *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unsigned int v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unsigned int v10 = *(_DWORD *)(a1 + 28);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unsigned int v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 4) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v13 = *(int *)(a1 + 32);
    unsigned char *v4 = 24;
    v4[1] = v13;
    if (v13 > 0x7F)
    {
      v4[1] = v13 | 0x80;
      unint64_t v14 = v13 >> 7;
      v4[2] = v13 >> 7;
      v4 += 3;
      if (v13 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v15 = v14 >> 14;
          v14 >>= 7;
          *v4++ = v14;
        }
        while (v15);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v4;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v18 + 31) < 0)
  {
    int v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    int v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v4, v19, (int)v20);
    v4 += v21;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v19, v20, v4);
}

uint64_t sub_15F2A64(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_13;
  }
  if (v1)
  {
    uint64_t v2 = ((9 * (__clz(*(_DWORD *)(a1 + 24) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = 0;
  if ((v1 & 2) != 0) {
LABEL_7:
  }
    v2 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if ((v1 & 4) != 0)
  {
    int v3 = *(_DWORD *)(a1 + 32);
    if (v3 < 0) {
      uint64_t v4 = 11;
    }
    else {
      uint64_t v4 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v4;
  }
LABEL_13:
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(void *)(v7 + 16);
    }
    else {
      uint64_t v8 = *(unsigned __int8 *)(v7 + 31);
    }
    v2 += v8;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15F2B3C()
{
  return 1;
}

void *sub_15F2B44@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.GroundViewImageResource");
}

uint64_t sub_15F2B54(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_14;
    }
  }
  else if (v4)
  {
    goto LABEL_14;
  }
  uint64_t v5 = (void ***)(a1 + 112);
  if (*(uint64_t **)(a1 + 112) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if ((uint64_t (***)())a1 != &off_25408D8)
  {
    uint64_t v6 = *(void *)(a1 + 120);
    if (v6)
    {
      sub_147F230(v6);
      operator delete();
    }
    if (*(void *)(a1 + 128))
    {
      sub_14814F4();
      operator delete();
    }
    unint64_t v7 = *(void **)(a1 + 136);
    if (v7)
    {
      sub_15BF7C4(v7);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_14:
  sub_12C2434((void *)(a1 + 88));
  sub_1638D40((void *)(a1 + 64));
  sub_1889DA8(a1 + 48);
  sub_1301928((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F2C8C(uint64_t a1)
{
  sub_15F2B54(a1);

  operator delete();
}

uint64_t sub_15F2CC4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v58 = a2;
  int v5 = 0;
  if ((sub_11947B8((uint64_t)a3, (char **)v58, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v57 = (uint64_t *)(a1 + 8);
    while (1)
    {
      unint64_t v7 = (unsigned __int8 *)(*(void *)v58 + 1);
      unsigned int v8 = **(unsigned char **)v58;
      if ((char)**(unsigned char **)v58 < 0)
      {
        unsigned int v9 = v8 + (*v7 << 7);
        unsigned int v8 = v9 - 128;
        if ((char)*v7 < 0)
        {
          unint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v58, v9 - 128);
          unsigned int v8 = v10;
        }
        else
        {
          unint64_t v7 = (unsigned __int8 *)(*(void *)v58 + 2);
        }
      }
      *(void *)uint64_t v58 = v7;
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 10) {
            goto LABEL_91;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v11 = *(void *)(a1 + 120);
          if (!v11)
          {
            unsigned int v12 = (void *)(*v57 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v57) {
              unsigned int v12 = (void *)*v12;
            }
            uint64_t v11 = sub_148206C((uint64_t)v12);
            *(void *)(a1 + 120) = v11;
            unint64_t v7 = *(unsigned __int8 **)v58;
          }
          unint64_t v13 = sub_12E4C34(a3, v11, v7);
          goto LABEL_98;
        case 2u:
          if (v8 != 18) {
            goto LABEL_91;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          unint64_t v14 = *(void **)(a1 + 128);
          if (!v14)
          {
            unint64_t v15 = (void *)(*v57 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v57) {
              unint64_t v15 = (void *)*v15;
            }
            unint64_t v14 = sub_1482228((uint64_t)v15);
            *(void *)(a1 + 128) = v14;
            unint64_t v7 = *(unsigned __int8 **)v58;
          }
          unint64_t v13 = sub_12E4CC4(a3, (uint64_t)v14, v7);
          goto LABEL_98;
        case 3u:
          if (v8 != 26) {
            goto LABEL_91;
          }
          *(_DWORD *)(a1 + 16) |= 8u;
          uint64_t v16 = *(void *)(a1 + 136);
          if (!v16)
          {
            unint64_t v17 = (void *)(*v57 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v57) {
              unint64_t v17 = (void *)*v17;
            }
            uint64_t v16 = sub_15C2510((uint64_t)v17);
            *(void *)(a1 + 136) = v16;
            unint64_t v7 = *(unsigned __int8 **)v58;
          }
          unint64_t v13 = sub_11FF090(a3, v16, v7);
          goto LABEL_98;
        case 4u:
          if (v8 != 32) {
            goto LABEL_91;
          }
          v5 |= 0x20u;
          unint64_t v18 = (char *)(v7 + 1);
          int v19 = *v7;
          if (((char)*v7 & 0x80000000) == 0) {
            goto LABEL_31;
          }
          int v20 = *v18;
          int v19 = v19 + (v20 << 7) - 128;
          if (v20 < 0)
          {
            uint64_t v51 = sub_188C0D0((uint64_t)v7, v19);
            *(void *)uint64_t v58 = v51;
            *(_DWORD *)(a1 + 152) = v52;
            if (!v51) {
              goto LABEL_104;
            }
          }
          else
          {
            unint64_t v18 = (char *)(v7 + 2);
LABEL_31:
            *(void *)uint64_t v58 = v18;
            *(_DWORD *)(a1 + 152) = v19;
          }
          goto LABEL_99;
        case 5u:
          if (v8 != 42) {
            goto LABEL_91;
          }
          uint64_t v21 = (char *)(v7 - 1);
          while (1)
          {
            int v22 = (unsigned __int8 *)(v21 + 1);
            *(void *)uint64_t v58 = v21 + 1;
            uint64_t v23 = *(_DWORD **)(a1 + 40);
            if (v23 && (uint64_t v24 = *(int *)(a1 + 32), (int)v24 < *v23))
            {
              *(_DWORD *)(a1 + 32) = v24 + 1;
              uint64_t v25 = *(void *)&v23[2 * v24 + 2];
            }
            else
            {
              uint64_t v26 = sub_15FA174(*(void *)(a1 + 24));
              uint64_t v25 = sub_188CDC8(a1 + 24, v26);
              int v22 = *(unsigned __int8 **)v58;
            }
            uint64_t v21 = sub_12E4D54(a3, v25, v22);
            *(void *)uint64_t v58 = v21;
            if (!v21) {
              goto LABEL_104;
            }
            if (*(void *)a3 <= (unint64_t)v21 || *v21 != 42) {
              goto LABEL_99;
            }
          }
        case 6u:
          if (v8 == 48)
          {
            uint64_t v27 = v7 - 1;
            while (1)
            {
              *(void *)uint64_t v58 = v27 + 1;
              uint64_t v28 = v27[1];
              if ((char)v27[1] < 0)
              {
                int v29 = v28 + (v27[2] << 7);
                uint64_t v28 = (v29 - 128);
                if ((char)v27[2] < 0)
                {
                  uint64_t v27 = (unsigned __int8 *)sub_188C138((uint64_t)(v27 + 1), (v29 - 128));
                  uint64_t v28 = v30;
                }
                else
                {
                  v27 += 3;
                }
              }
              else
              {
                v27 += 2;
              }
              *(void *)uint64_t v58 = v27;
              uint64_t v31 = *(unsigned int *)(a1 + 48);
              if (v31 == *(_DWORD *)(a1 + 52))
              {
                int v32 = v31 + 1;
                sub_188CA54((unsigned int *)(a1 + 48), v31 + 1);
                *(void *)(*(void *)(a1 + 56) + 8 * v31) = v28;
                uint64_t v27 = *(unsigned __int8 **)v58;
              }
              else
              {
                *(void *)(*(void *)(a1 + 56) + 8 * v31) = v28;
                int v32 = v31 + 1;
              }
              *(_DWORD *)(a1 + 48) = v32;
              if (!v27) {
                goto LABEL_104;
              }
              if (*(void *)a3 <= (unint64_t)v27 || *v27 != 48) {
                goto LABEL_99;
              }
            }
          }
          if (v8 == 50)
          {
            unint64_t v13 = sub_188C2EC((unsigned int *)(a1 + 48), v7, (uint64_t)a3);
          }
          else
          {
LABEL_91:
            if (v8) {
              BOOL v55 = (v8 & 7) == 4;
            }
            else {
              BOOL v55 = 1;
            }
            if (v55)
            {
              if (v7)
              {
                a3[10].i32[0] = v8 - 1;
                goto LABEL_2;
              }
LABEL_104:
              *(void *)uint64_t v58 = 0;
              goto LABEL_2;
            }
            if (*v57)
            {
              uint64_t v56 = (std::string *)((*v57 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else
            {
              uint64_t v56 = (std::string *)sub_188DBD8(v57);
              unint64_t v7 = *(unsigned __int8 **)v58;
            }
            unint64_t v13 = sub_1885AC0(v8, v56, (char *)v7, a3);
          }
LABEL_98:
          *(void *)uint64_t v58 = v13;
          if (!v13) {
            goto LABEL_104;
          }
LABEL_99:
          if (sub_11947B8((uint64_t)a3, (char **)v58, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
        case 7u:
          if (v8 != 56) {
            goto LABEL_91;
          }
          v5 |= 0x10u;
          uint64_t v33 = (char *)(v7 + 1);
          uint64_t v34 = *v7;
          if (((char)*v7 & 0x80000000) == 0) {
            goto LABEL_60;
          }
          int v35 = *v33;
          uint64_t v34 = v34 + (v35 << 7) - 128;
          if (v35 < 0)
          {
            uint64_t v53 = sub_188C138((uint64_t)v7, v34);
            *(void *)uint64_t v58 = v53;
            *(void *)(a1 + 144) = v54;
            if (!v53) {
              goto LABEL_104;
            }
          }
          else
          {
            uint64_t v33 = (char *)(v7 + 2);
LABEL_60:
            *(void *)uint64_t v58 = v33;
            *(void *)(a1 + 144) = v34;
          }
          goto LABEL_99;
        case 8u:
          if (v8 != 66) {
            goto LABEL_91;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v36 = *(void *)(a1 + 8);
          uint64_t v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if (v36) {
            uint64_t v37 = (uint64_t *)*v37;
          }
          uint64_t v38 = (std::string *)sub_1880F84((void *)(a1 + 112), v37);
          unint64_t v13 = (void *)sub_188C244(v38, *(char **)v58, (uint64_t)a3);
          goto LABEL_98;
        case 9u:
          if (v8 != 74) {
            goto LABEL_91;
          }
          unsigned int v39 = v7 - 1;
          while (1)
          {
            uint64_t v40 = v39 + 1;
            *(void *)uint64_t v58 = v39 + 1;
            uint64_t v41 = *(_DWORD **)(a1 + 80);
            if (v41 && (uint64_t v42 = *(int *)(a1 + 72), (int)v42 < *v41))
            {
              *(_DWORD *)(a1 + 72) = v42 + 1;
              uint64_t v43 = *(void *)&v41[2 * v42 + 2];
            }
            else
            {
              uint64_t v44 = sub_1284178(*(void *)(a1 + 64));
              uint64_t v43 = sub_188CDC8(a1 + 64, v44);
              uint64_t v40 = *(unsigned __int8 **)v58;
            }
            unsigned int v39 = (unsigned __int8 *)sub_1261340(a3, v43, v40);
            *(void *)uint64_t v58 = v39;
            if (!v39) {
              goto LABEL_104;
            }
            if (*(void *)a3 <= (unint64_t)v39 || *v39 != 74) {
              goto LABEL_99;
            }
          }
        case 0xAu:
          if (v8 != 82) {
            goto LABEL_91;
          }
          uint64_t v45 = (char *)(v7 - 1);
          while (1)
          {
            uint64_t v46 = (unsigned __int8 *)(v45 + 1);
            *(void *)uint64_t v58 = v45 + 1;
            uint64_t v47 = *(_DWORD **)(a1 + 104);
            if (v47 && (uint64_t v48 = *(int *)(a1 + 96), (int)v48 < *v47))
            {
              *(_DWORD *)(a1 + 96) = v48 + 1;
              uint64_t v49 = *(void *)&v47[2 * v48 + 2];
            }
            else
            {
              uint64_t v50 = sub_1284448(*(void *)(a1 + 88));
              uint64_t v49 = sub_188CDC8(a1 + 88, v50);
              uint64_t v46 = *(unsigned __int8 **)v58;
            }
            uint64_t v45 = sub_126FFF0(a3, v49, v46);
            *(void *)uint64_t v58 = v45;
            if (!v45) {
              goto LABEL_104;
            }
            if (*(void *)a3 <= (unint64_t)v45 || *v45 != 82) {
              goto LABEL_99;
            }
          }
        default:
          goto LABEL_91;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return *(void *)v58;
}

unsigned char *sub_15F32E4(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 120);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_147FC10(v7, (unint64_t)v9, a3);
    if ((v6 & 4) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 128);
  unsigned char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    unsigned int v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    unsigned int v12 = v4 + 2;
  }
  uint64_t v4 = sub_1481880(v10, (unint64_t)v12, a3);
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_24;
  }
LABEL_18:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 136);
  unsigned char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    unint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    unint64_t v15 = v4 + 2;
  }
  uint64_t v4 = sub_15BFAE0(v13, (unint64_t)v15, a3);
  if ((v6 & 0x20) != 0)
  {
LABEL_24:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unsigned int v16 = *(_DWORD *)(a1 + 152);
    unsigned char *v4 = 32;
    v4[1] = v16;
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      unsigned int v17 = v16 >> 7;
      v4[2] = v16 >> 7;
      v4 += 3;
      if (v16 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unsigned int v18 = v17 >> 14;
          v17 >>= 7;
          *v4++ = v17;
        }
        while (v18);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_30:
  int v19 = *(_DWORD *)(a1 + 32);
  if (v19)
  {
    for (int i = 0; i != v19; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 42;
      unsigned int v22 = *(_DWORD *)(v21 + 20);
      v4[1] = v22;
      if (v22 > 0x7F) {
        uint64_t v23 = sub_188A9CC(v22, v4 + 1);
      }
      else {
        uint64_t v23 = v4 + 2;
      }
      uint64_t v4 = sub_15F2844(v21, (unint64_t)v23, a3);
    }
  }
  uint64_t v24 = *(unsigned int *)(a1 + 48);
  if ((int)v24 >= 1)
  {
    for (uint64_t j = 0; j != v24; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8 * j);
      unsigned char *v4 = 48;
      v4[1] = v26;
      if (v26 > 0x7F)
      {
        v4[1] = v26 | 0x80;
        unint64_t v27 = v26 >> 7;
        v4[2] = v26 >> 7;
        v4 += 3;
        if (v26 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v28 = v27 >> 14;
            v27 >>= 7;
            *v4++ = v27;
          }
          while (v28);
        }
      }
      else
      {
        v4 += 2;
      }
    }
  }
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v29 = *(void *)(a1 + 144);
    unsigned char *v4 = 56;
    v4[1] = v29;
    if (v29 > 0x7F)
    {
      v4[1] = v29 | 0x80;
      unint64_t v30 = v29 >> 7;
      v4[2] = v29 >> 7;
      v4 += 3;
      if (v29 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v31 = v30 >> 14;
          v30 >>= 7;
          *v4++ = v30;
        }
        while (v31);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 8, (const void **)(*(void *)(a1 + 112) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  int v32 = *(_DWORD *)(a1 + 72);
  if (v32)
  {
    for (int k = 0; k != v32; ++k)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v34 = *(void *)(*(void *)(a1 + 80) + 8 * k + 8);
      unsigned char *v4 = 74;
      unsigned int v35 = *(_DWORD *)(v34 + 20);
      v4[1] = v35;
      if (v35 > 0x7F) {
        uint64_t v36 = sub_188A9CC(v35, v4 + 1);
      }
      else {
        uint64_t v36 = v4 + 2;
      }
      uint64_t v4 = sub_1270080(v34, v36, a3);
    }
  }
  int v37 = *(_DWORD *)(a1 + 96);
  if (v37)
  {
    for (int m = 0; m != v37; ++m)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v39 = *(void *)(*(void *)(a1 + 104) + 8 * m + 8);
      unsigned char *v4 = 82;
      unsigned int v40 = *(_DWORD *)(v39 + 20);
      v4[1] = v40;
      if (v40 > 0x7F) {
        uint64_t v41 = sub_188A9CC(v40, v4 + 1);
      }
      else {
        uint64_t v41 = v4 + 2;
      }
      uint64_t v4 = sub_1272CB8(v39, (unint64_t)v41, a3);
    }
  }
  uint64_t v42 = *(void *)(a1 + 8);
  if ((v42 & 1) == 0) {
    return v4;
  }
  unint64_t v44 = v42 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v44 + 31) < 0)
  {
    uint64_t v45 = *(void **)(v44 + 8);
    uint64_t v46 = *(void *)(v44 + 16);
  }
  else
  {
    uint64_t v45 = (void *)(v44 + 8);
    LODWORD(v46) = *(unsigned __int8 *)(v44 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v46)
  {
    uint64_t v47 = (int)v46;
    memcpy(v4, v45, (int)v46);
    v4 += v47;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v45, v46, v4);
}

uint64_t sub_15F3824(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15F2A64(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = sub_188D5A8((unsigned int *)(a1 + 48));
  uint64_t v9 = *(int *)(a1 + 72);
  uint64_t v10 = v8 + v2 + *(unsigned int *)(a1 + 48) + v9;
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11) {
    unsigned int v12 = (uint64_t *)(v11 + 8);
  }
  else {
    unsigned int v12 = 0;
  }
  if (v9)
  {
    uint64_t v13 = 8 * v9;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t v15 = sub_1270390(v14);
      v10 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      v13 -= 8;
    }
    while (v13);
  }
  uint64_t v16 = *(int *)(a1 + 96);
  uint64_t v17 = v10 + v16;
  uint64_t v18 = *(void *)(a1 + 104);
  if (v18) {
    int v19 = (uint64_t *)(v18 + 8);
  }
  else {
    int v19 = 0;
  }
  if (v16)
  {
    uint64_t v20 = 8 * v16;
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_1273164(v21);
      v17 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      v20 -= 8;
    }
    while (v20);
  }
  int v23 = *(_DWORD *)(a1 + 16);
  if ((v23 & 0x3F) == 0) {
    goto LABEL_29;
  }
  if (v23)
  {
    unint64_t v26 = *(void *)(a1 + 112) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
    uint64_t v28 = *(void *)(v26 + 8);
    if ((v27 & 0x80u) == 0) {
      uint64_t v28 = v27;
    }
    v17 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_35;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  uint64_t v29 = sub_1480248(*(void *)(a1 + 120));
  v17 += v29 + ((9 * (__clz(v29 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0) {
      goto LABEL_26;
    }
LABEL_36:
    uint64_t v31 = sub_15BFD00(*(void *)(a1 + 136));
    v17 += v31 + ((9 * (__clz(v31 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 0x10) == 0)
    {
LABEL_27:
      if ((v23 & 0x20) == 0) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    goto LABEL_37;
  }
LABEL_35:
  uint64_t v30 = sub_1481A00(*(void *)(a1 + 128));
  v17 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 8) != 0) {
    goto LABEL_36;
  }
LABEL_26:
  if ((v23 & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_37:
  v17 += ((9 * (__clz(*(void *)(a1 + 144) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v23 & 0x20) != 0) {
LABEL_28:
  }
    v17 += ((9 * (__clz(*(_DWORD *)(a1 + 152) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_29:
  uint64_t v24 = *(void *)(a1 + 8);
  if (v24)
  {
    unint64_t v32 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v32 + 31) < 0) {
      uint64_t v33 = *(void *)(v32 + 16);
    }
    else {
      uint64_t v33 = *(unsigned __int8 *)(v32 + 31);
    }
    v17 += v33;
  }
  *(_DWORD *)(a1 + 20) = v17;
  return v17;
}

void *sub_15F3ACC@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.GroundViewFeedbackContext");
}

uint64_t sub_15F3ADC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8) & 1;
  if ((uint64_t (***)())a1 != &off_2540978)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      sub_15C2D54(v6);
      operator delete();
    }
  }
  if (v5) {
    sub_10E4F74(v3);
  }
LABEL_8:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F3B94(uint64_t a1)
{
  sub_15F3ADC(a1);

  operator delete();
}

char *sub_15F3BCC(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v23 = a2;
  if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
    return v23;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v23 + 1;
    unsigned int v8 = *v23;
    if (*v23 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v23, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v23 + 2;
      }
    }
    int v23 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v15 = *(void **)(a1 + 24);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_15C619C((uint64_t)v16);
      *(void *)(a1 + 24) = v15;
      uint64_t v7 = v23;
    }
    uint64_t v14 = (char *)sub_15E6904(a3, (uint64_t)v15, (unsigned __int8 *)v7);
LABEL_26:
    int v23 = v14;
    if (!v14) {
      return 0;
    }
LABEL_34:
    if (sub_11947B8((uint64_t)a3, &v23, a3[11].i32[1])) {
      return v23;
    }
  }
  if (v8 >> 3 == 1 && v8 == 8)
  {
    uint64_t v17 = v7 + 1;
    unint64_t v18 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    int v19 = *v17;
    int v20 = v18 + (v19 << 7);
    unint64_t v18 = (v20 - 128);
    if (v19 < 0)
    {
      int v23 = (char *)sub_188C138((uint64_t)v7, (v20 - 128));
      if (!v23) {
        return 0;
      }
      unint64_t v18 = v21;
    }
    else
    {
      uint64_t v17 = v7 + 2;
LABEL_31:
      int v23 = v17;
    }
    if (v18 > 6)
    {
      if (*v6) {
        uint64_t v22 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v22 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(1, v18, v22);
    }
    else
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_DWORD *)(a1 + 32) = v18;
    }
    goto LABEL_34;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v23;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_26;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v23;
  }
  return 0;
}

char *sub_15F3DDC(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 32);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 24);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    uint64_t v4 = sub_15C31A8(v10, v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15F3F68(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t result = 0;
    goto LABEL_11;
  }
  if (v2)
  {
    uint64_t v4 = sub_15C32E4(*(void *)(a1 + 24));
    uint64_t result = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
  }
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 < 0) {
    uint64_t v6 = 11;
  }
  else {
    uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  result += v6;
LABEL_11:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    result += v9;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

uint64_t sub_15F4038()
{
  return 1;
}

void *sub_15F4040@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.GroundViewCorrections");
}

uint64_t sub_15F4050(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_25409A0)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15F4630(v5);
      operator delete();
    }
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      sub_15F508C(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F4120(uint64_t a1)
{
  sub_15F4050(a1);

  operator delete();
}

uint64_t sub_15F4158(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v2) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15F4170(uint64_t a1, char *a2, int32x2_t *a3)
{
  int v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v19 + 1;
    unsigned int v8 = *v19;
    if (*v19 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v19, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v19 + 2;
      }
    }
    int v19 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      uint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_15FA464((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = v19;
    }
    uint64_t v14 = sub_15F4330(a3, v15, (unsigned __int8 *)v7);
LABEL_31:
    int v19 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void **)(a1 + 24);
    if (!v17)
    {
      uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v17 = sub_15FA3B4((uint64_t)v18);
      *(void *)(a1 + 24) = v17;
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_15E9B34(a3, (uint64_t)v17, (unsigned __int8 *)v7);
    goto LABEL_31;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_31;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v19;
  }
  return 0;
}

char *sub_15F4330(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F5138(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15F43C0(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15F4BE0(v7, (unint64_t)v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    unsigned char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    uint64_t v4 = sub_15F52E0(v10, (unint64_t)v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    uint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    uint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15F4540(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_15F4EAC(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15F5408(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_15F4618()
{
  return 1;
}

void *sub_15F4620@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.CuratedCollectionFeedback");
}

uint64_t sub_15F4630(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_11;
    }
  }
  else if (v4)
  {
    goto LABEL_11;
  }
  uint64_t v5 = (void ***)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 72) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 72));
  }
  if (*(uint64_t **)(a1 + 80) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 80));
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_11:
  sub_1638DC0((void *)(a1 + 40));
  sub_1889DA8(a1 + 24);
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F4710(uint64_t a1)
{
  sub_15F4630(a1);

  operator delete();
}

uint64_t sub_15F4748(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v38 = a2;
  int v5 = 0;
  if ((sub_11947B8((uint64_t)a3, (char **)v38, a3[11].i32[1]) & 1) == 0)
  {
    int v37 = (uint64_t *)(a1 + 8);
    while (1)
    {
      uint64_t v7 = (unsigned __int8 *)(*(void *)v38 + 1);
      unsigned int v8 = **(unsigned char **)v38;
      if ((char)**(unsigned char **)v38 < 0)
      {
        unsigned int v9 = v8 + (*v7 << 7);
        unsigned int v8 = v9 - 128;
        if ((char)*v7 < 0)
        {
          uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v38, v9 - 128);
          unsigned int v8 = v10;
        }
        else
        {
          uint64_t v7 = (unsigned __int8 *)(*(void *)v38 + 2);
        }
      }
      *(void *)uint64_t v38 = v7;
      switch(v8 >> 3)
      {
        case 1u:
          if (v8 != 8) {
            goto LABEL_55;
          }
          v5 |= 8u;
          unsigned int v11 = (char *)(v7 + 1);
          uint64_t v12 = *v7;
          if (((char)*v7 & 0x80000000) == 0) {
            goto LABEL_13;
          }
          int v13 = *v11;
          uint64_t v12 = v12 + (v13 << 7) - 128;
          if ((v13 & 0x80000000) == 0)
          {
            unsigned int v11 = (char *)(v7 + 2);
LABEL_13:
            *(void *)uint64_t v38 = v11;
            *(void *)(a1 + 88) = v12;
            goto LABEL_63;
          }
          uint64_t v33 = sub_188C138((uint64_t)v7, v12);
          *(void *)uint64_t v38 = v33;
          *(void *)(a1 + 88) = v34;
          if (!v33) {
            goto LABEL_68;
          }
          goto LABEL_63;
        case 2u:
          if (v8 == 16)
          {
            uint64_t v14 = v7 - 1;
            while (1)
            {
              *(void *)uint64_t v38 = v14 + 1;
              uint64_t v15 = v14[1];
              if ((char)v14[1] < 0)
              {
                int v16 = v15 + (v14[2] << 7);
                uint64_t v15 = (v16 - 128);
                if ((char)v14[2] < 0)
                {
                  uint64_t v14 = (unsigned __int8 *)sub_188C138((uint64_t)(v14 + 1), (v16 - 128));
                  uint64_t v15 = v17;
                }
                else
                {
                  v14 += 3;
                }
              }
              else
              {
                v14 += 2;
              }
              *(void *)uint64_t v38 = v14;
              uint64_t v18 = *(unsigned int *)(a1 + 24);
              if (v18 == *(_DWORD *)(a1 + 28))
              {
                int v19 = v18 + 1;
                sub_188CA54((unsigned int *)(a1 + 24), v18 + 1);
                *(void *)(*(void *)(a1 + 32) + 8 * v18) = v15;
                uint64_t v14 = *(unsigned __int8 **)v38;
              }
              else
              {
                *(void *)(*(void *)(a1 + 32) + 8 * v18) = v15;
                int v19 = v18 + 1;
              }
              *(_DWORD *)(a1 + 24) = v19;
              if (!v14) {
                goto LABEL_68;
              }
              if (*(void *)a3 <= (unint64_t)v14 || *v14 != 16) {
                goto LABEL_63;
              }
            }
          }
          if (v8 == 18)
          {
            unint64_t v26 = sub_188C2EC((unsigned int *)(a1 + 24), v7, (uint64_t)a3);
          }
          else
          {
LABEL_55:
            if (v8) {
              BOOL v35 = (v8 & 7) == 4;
            }
            else {
              BOOL v35 = 1;
            }
            if (v35)
            {
              if (v7)
              {
                a3[10].i32[0] = v8 - 1;
                goto LABEL_2;
              }
LABEL_68:
              *(void *)uint64_t v38 = 0;
              goto LABEL_2;
            }
            if (*v37)
            {
              uint64_t v36 = (std::string *)((*v37 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else
            {
              uint64_t v36 = (std::string *)sub_188DBD8(v37);
              uint64_t v7 = *(unsigned __int8 **)v38;
            }
            unint64_t v26 = sub_1885AC0(v8, v36, (char *)v7, a3);
          }
LABEL_62:
          *(void *)uint64_t v38 = v26;
          if (!v26) {
            goto LABEL_68;
          }
LABEL_63:
          if (sub_11947B8((uint64_t)a3, (char **)v38, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
        case 3u:
          if (v8 != 26) {
            goto LABEL_55;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v20 = *(void *)(a1 + 8);
          unint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
          if (v20) {
            unint64_t v21 = (uint64_t *)*v21;
          }
          uint64_t v22 = (void *)(a1 + 64);
          goto LABEL_40;
        case 4u:
          if (v8 != 34) {
            goto LABEL_55;
          }
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v23 = *(void *)(a1 + 8);
          unint64_t v21 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
          if (v23) {
            unint64_t v21 = (uint64_t *)*v21;
          }
          uint64_t v22 = (void *)(a1 + 72);
          goto LABEL_40;
        case 5u:
          if (v8 != 42) {
            goto LABEL_55;
          }
          *(_DWORD *)(a1 + 16) |= 4u;
          uint64_t v24 = *(void *)(a1 + 8);
          unint64_t v21 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          if (v24) {
            unint64_t v21 = (uint64_t *)*v21;
          }
          uint64_t v22 = (void *)(a1 + 80);
LABEL_40:
          uint64_t v25 = (std::string *)sub_1880F84(v22, v21);
          unint64_t v26 = (void *)sub_188C244(v25, *(char **)v38, (uint64_t)a3);
          goto LABEL_62;
        case 6u:
          if (v8 != 50) {
            goto LABEL_55;
          }
          uint64_t v27 = v7 - 1;
          while (1)
          {
            uint64_t v28 = v27 + 1;
            *(void *)uint64_t v38 = v27 + 1;
            uint64_t v29 = *(_DWORD **)(a1 + 56);
            if (v29 && (uint64_t v30 = *(int *)(a1 + 48), (int)v30 < *v29))
            {
              *(_DWORD *)(a1 + 48) = v30 + 1;
              uint64_t v31 = *(void *)&v29[2 * v30 + 2];
            }
            else
            {
              unint64_t v32 = sub_15F8F04(*(void *)(a1 + 40));
              uint64_t v31 = sub_188CDC8(a1 + 40, (uint64_t)v32);
              uint64_t v28 = *(unsigned __int8 **)v38;
            }
            uint64_t v27 = (unsigned __int8 *)sub_15F4B50(a3, v31, v28);
            *(void *)uint64_t v38 = v27;
            if (!v27) {
              goto LABEL_68;
            }
            if (*(void *)a3 <= (unint64_t)v27 || *v27 != 50) {
              goto LABEL_63;
            }
          }
        default:
          goto LABEL_55;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return *(void *)v38;
}

uint64_t sub_15F4B50(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15DAB68(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15F4BE0(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 8) != 0)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(void *)(a1 + 88);
    char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8 * i);
      char *v4 = 16;
      v4[1] = v12;
      if (v12 > 0x7F)
      {
        v4[1] = v12 | 0x80;
        unint64_t v13 = v12 >> 7;
        v4[2] = v12 >> 7;
        v4 += 3;
        if (v12 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unint64_t v14 = v13 >> 14;
            v13 >>= 7;
            *v4++ = v13;
          }
          while (v14);
        }
      }
      else
      {
        v4 += 2;
      }
    }
  }
  if (v6)
  {
    uint64_t v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
    if ((v6 & 2) == 0)
    {
LABEL_19:
      if ((v6 & 4) == 0) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_19;
  }
  uint64_t v4 = sub_117A0AC(a3, 4, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 4) != 0) {
LABEL_20:
  }
    uint64_t v4 = sub_117A0AC(a3, 5, (const void **)(*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL), v4);
LABEL_21:
  int v15 = *(_DWORD *)(a1 + 48);
  if (v15)
  {
    for (int j = 0; j != v15; ++j)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * j + 8);
      char *v4 = 50;
      unsigned int v18 = *(_DWORD *)(v17 + 20);
      v4[1] = v18;
      if (v18 > 0x7F) {
        int v19 = sub_188A9CC(v18, v4 + 1);
      }
      else {
        int v19 = v4 + 2;
      }
      uint64_t v4 = sub_15DAD10(v17, v19, a3);
    }
  }
  uint64_t v20 = *(void *)(a1 + 8);
  if ((v20 & 1) == 0) {
    return v4;
  }
  unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v22 + 31) < 0)
  {
    uint64_t v23 = *(void **)(v22 + 8);
    uint64_t v24 = *(void *)(v22 + 16);
  }
  else
  {
    uint64_t v23 = (void *)(v22 + 8);
    LODWORD(v24) = *(unsigned __int8 *)(v22 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v24)
  {
    uint64_t v25 = (int)v24;
    memcpy(v4, v23, (int)v24);
    v4 += v25;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v23, v24, v4);
}

uint64_t sub_15F4EAC(uint64_t a1)
{
  uint64_t v2 = sub_188D5A8((unsigned int *)(a1 + 24));
  uint64_t v3 = *(int *)(a1 + 48);
  uint64_t v4 = v2 + *(unsigned int *)(a1 + 24) + v3;
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_15DADFC(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 16);
  if ((v10 & 0xF) == 0) {
    goto LABEL_13;
  }
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    unint64_t v16 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v18 = *(void *)(v16 + 8);
    if ((v17 & 0x80u) == 0) {
      uint64_t v18 = v17;
    }
    v4 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_21;
  }
  unint64_t v13 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  uint64_t v15 = *(void *)(v13 + 8);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v14;
  }
  v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v10 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_21:
  unint64_t v19 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
  uint64_t v21 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    uint64_t v21 = v20;
  }
  v4 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0) {
LABEL_12:
  }
    v4 += ((9 * (__clz(*(void *)(a1 + 88) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_13:
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    unint64_t v22 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v22 + 31) < 0) {
      uint64_t v23 = *(void *)(v22 + 16);
    }
    else {
      uint64_t v23 = *(unsigned __int8 *)(v22 + 31);
    }
    v4 += v23;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

uint64_t sub_15F5074()
{
  return 1;
}

void *sub_15F507C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.CuratedCollectionContext");
}

void *sub_15F508C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F5100(void *a1)
{
  sub_15F508C(a1);

  operator delete();
}

char *sub_15F5138(uint64_t a1, char *a2, int32x2_t *a3)
{
  unint64_t v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  uint64_t v5 = (void *)(a1 + 8);
  while (1)
  {
    int v6 = v19 + 1;
    unsigned int v7 = *v19;
    if (*v19 < 0)
    {
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if (*v6 < 0)
      {
        int v6 = (char *)sub_188C180((uint64_t)v19, v8 - 128);
        unsigned int v7 = v9;
      }
      else
      {
        int v6 = v19 + 2;
      }
    }
    unint64_t v19 = v6;
    if (v7 == 8)
    {
      unint64_t v12 = v6 + 1;
      unint64_t v13 = *v6;
      if (*v6 < 0)
      {
        int v14 = *v12;
        int v15 = v13 + (v14 << 7);
        unint64_t v13 = (v15 - 128);
        if (v14 < 0)
        {
          unint64_t v19 = (char *)sub_188C138((uint64_t)v6, (v15 - 128));
          if (!v19) {
            return 0;
          }
          unint64_t v13 = v16;
          goto LABEL_20;
        }
        unint64_t v12 = v6 + 2;
      }
      unint64_t v19 = v12;
LABEL_20:
      if (v13 > 3)
      {
        if (*v5) {
          uint64_t v17 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          uint64_t v17 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        sub_188C020(1, v13, v17);
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 24) = v13;
      }
      goto LABEL_22;
    }
    if (!v7 || (v7 & 7) == 4) {
      break;
    }
    if (*v5)
    {
      uint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      int v6 = v19;
    }
    unint64_t v19 = (char *)sub_1885AC0(v7, v11, v6, a3);
    if (!v19) {
      return 0;
    }
LABEL_22:
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return v19;
  }
  return 0;
}

unsigned char *sub_15F52E0(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v6 = *(int *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v6;
    if (v6 > 0x7F)
    {
      v4[1] = v6 | 0x80;
      unint64_t v7 = v6 >> 7;
      v4[2] = v6 >> 7;
      v4 += 3;
      if (v6 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v8 = v7 >> 14;
          v7 >>= 7;
          *v4++ = v7;
        }
        while (v8);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & 1) == 0) {
    return v4;
  }
  unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v11 + 31) < 0)
  {
    unint64_t v12 = *(void **)(v11 + 8);
    uint64_t v13 = *(void *)(v11 + 16);
  }
  else
  {
    unint64_t v12 = (void *)(v11 + 8);
    LODWORD(v13) = *(unsigned __int8 *)(v11 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v13)
  {
    uint64_t v14 = (int)v13;
    memcpy(v4, v12, (int)v13);
    v4 += v14;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v12, v13, v4);
}

uint64_t sub_15F5408(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    int v2 = *(_DWORD *)(a1 + 24);
    if (v2 < 0) {
      uint64_t v1 = 11;
    }
    else {
      uint64_t v1 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = *(void *)(v5 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v5 + 31);
    }
    v1 += v6;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

uint64_t sub_15F547C()
{
  return 1;
}

void *sub_15F5484@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.CuratedCollectionCorrections");
}

uint64_t sub_15F5494(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_2540A48)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      sub_15F5DB4(v5);
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_15F64B4(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F5564(uint64_t a1)
{
  sub_15F5494(a1);

  operator delete();
}

uint64_t sub_15F559C(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_7;
  }
  if (v2)
  {
    unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_15;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_15;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_15:
  unint64_t v6 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(unsigned char **)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_19;
    }
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  *(unsigned char *)unint64_t v6 = 0;
  *(unsigned char *)(v6 + 23) = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_19:
  uint64_t result = sub_175FE78(*(void *)(result + 40));
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    uint64_t result = sub_15DAAEC(*(void *)(v1 + 48));
LABEL_7:
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15F567C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v1 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v3) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

char *sub_15F56C4(uint64_t a1, char *a2, int32x2_t *a3)
{
  unint64_t v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = v19 + 1;
    unsigned int v8 = *v19;
    if (*v19 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180((uint64_t)v19, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = v19 + 2;
      }
    }
    unint64_t v19 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      unint64_t v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        unint64_t v16 = (void *)*v16;
      }
      uint64_t v15 = sub_15FA5E4((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      unint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_15F5914(a3, v15, (unsigned __int8 *)v7);
LABEL_31:
    unint64_t v19 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void **)(a1 + 24);
    if (!v17)
    {
      uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v17 = sub_15FA55C((uint64_t)v18);
      *(void *)(a1 + 24) = v17;
      unint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_15F5884(a3, (uint64_t)v17, (unsigned __int8 *)v7);
    goto LABEL_31;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_31;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v19;
  }
  return 0;
}

uint64_t sub_15F5884(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F5EF4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15F5914(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15F658C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15F59A4(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  char v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      char v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 20);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    char v4 = sub_15F616C(v7, (unint64_t)v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      char v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    unsigned char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 20);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    char v4 = sub_15F679C(v10, (unint64_t)v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15F5B24(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_15F633C(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_15F68E4(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15F5BFC(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) == 0) {
    goto LABEL_29;
  }
  if (v4)
  {
    uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v6 = (std::string **)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
    if (v7) {
      unint64_t v8 = (uint64_t *)*v8;
    }
    sub_1881DF4(v6, v5, v8);
    if ((v4 & 2) == 0)
    {
LABEL_4:
      if ((v4 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_4;
  }
  uint64_t v9 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 16) |= 2u;
  uint64_t v10 = *(void *)(a1 + 8);
  unsigned int v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10) {
    unsigned int v11 = (uint64_t *)*v11;
  }
  sub_1881DF4((std::string **)(a1 + 32), v9, v11);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
LABEL_13:
  *(_DWORD *)(a1 + 16) |= 4u;
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12)
  {
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      uint64_t v14 = (void *)*v14;
    }
    uint64_t v12 = sub_178CDA8((uint64_t)v14);
    *(void *)(a1 + 40) = v12;
  }
  if (*(void *)(a2 + 40)) {
    unint64_t v15 = *(uint64_t (****)())(a2 + 40);
  }
  else {
    unint64_t v15 = &off_25486C0;
  }
  sub_1760D4C(v12, (uint64_t)v15);
  if ((v4 & 8) != 0)
  {
LABEL_21:
    *(_DWORD *)(a1 + 16) |= 8u;
    unint64_t v16 = *(std::string **)(a1 + 48);
    if (!v16)
    {
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
      unint64_t v16 = (std::string *)sub_15F8F04((uint64_t)v18);
      *(void *)(a1 + 48) = v16;
    }
    if (*(void *)(a2 + 48)) {
      unint64_t v19 = *(uint64_t (****)(uint64_t))(a2 + 48);
    }
    else {
      unint64_t v19 = &off_253FFC8;
    }
    sub_11EC100(v16, (uint64_t)v19);
  }
LABEL_29:
  uint64_t v20 = *(void *)(a2 + 8);
  if (v20)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v20 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15F5D78(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 4) == 0) {
    return 1;
  }
  uint64_t result = sub_17612D4(*(void *)(a1 + 40));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15F5DA4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiImageFeedback");
}

uint64_t sub_15F5DB4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_14;
    }
  }
  else if (v4)
  {
    goto LABEL_14;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if ((uint64_t (***)())a1 != &off_2540A70)
  {
    if (*(void *)(a1 + 40))
    {
      sub_1762C7C();
      operator delete();
    }
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      sub_15DA9FC(v6);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_14:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F5EBC(uint64_t a1)
{
  sub_15F5DB4(a1);

  operator delete();
}

uint64_t sub_15F5EF4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v23 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v23, a3[11].i32[1])) {
    return *(void *)v23;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = (unsigned __int8 *)(*(void *)v23 + 1);
    unsigned int v8 = **(unsigned char **)v23;
    if ((char)**(unsigned char **)v23 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        uint64_t v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v23, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = (unsigned __int8 *)(*(void *)v23 + 2);
      }
    }
    *(void *)uint64_t v23 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v11 = *(void *)(a1 + 40);
        if (!v11)
        {
          uint64_t v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v11 = sub_178CDA8((uint64_t)v12);
          *(void *)(a1 + 40) = v11;
          uint64_t v7 = *(unsigned __int8 **)v23;
        }
        uint64_t v13 = sub_1265F8C(a3, v11, v7);
        goto LABEL_37;
      case 2u:
        if (v8 != 18) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v14 = *(void *)(a1 + 8);
        unint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          unint64_t v15 = (uint64_t *)*v15;
        }
        unint64_t v16 = (void *)(a1 + 24);
        goto LABEL_23;
      case 3u:
        if (v8 != 26) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v17 = *(void *)(a1 + 8);
        unint64_t v15 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
        if (v17) {
          unint64_t v15 = (uint64_t *)*v15;
        }
        unint64_t v16 = (void *)(a1 + 32);
LABEL_23:
        uint64_t v18 = (std::string *)sub_1880F84(v16, v15);
        uint64_t v13 = (uint64_t)sub_188C244(v18, *(char **)v23, (uint64_t)a3);
        goto LABEL_37;
      case 4u:
        if (v8 != 34) {
          goto LABEL_30;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        unint64_t v19 = *(void **)(a1 + 48);
        if (!v19)
        {
          uint64_t v20 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v20 = (void *)*v20;
          }
          unint64_t v19 = sub_15F8F04((uint64_t)v20);
          *(void *)(a1 + 48) = v19;
          uint64_t v7 = *(unsigned __int8 **)v23;
        }
        uint64_t v13 = sub_15F4B50(a3, (uint64_t)v19, v7);
        goto LABEL_37;
      default:
LABEL_30:
        if (v8) {
          BOOL v21 = (v8 & 7) == 4;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21)
        {
          if (*v6)
          {
            unint64_t v22 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            unint64_t v22 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = *(unsigned __int8 **)v23;
          }
          uint64_t v13 = (uint64_t)sub_1885AC0(v8, v22, (char *)v7, a3);
LABEL_37:
          *(void *)uint64_t v23 = v13;
          if (!v13) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, (char **)v23, a3[11].i32[1])) {
            return *(void *)v23;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v23;
    }
  }
}

char *sub_15F616C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  int v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 4) != 0)
  {
    if (*a3 <= __dst) {
      int v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    int v4 = sub_1763540(v7, v9, a3);
    if ((v6 & 1) == 0)
    {
LABEL_3:
      if ((v6 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_3;
  }
  int v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 2) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
LABEL_13:
  int v4 = sub_117A0AC(a3, 3, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_20;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4) {
    int v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  char *v4 = 34;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    uint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    uint64_t v12 = v4 + 2;
  }
  int v4 = sub_15DAD10(v10, v12, a3);
LABEL_20:
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    unint64_t v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    unint64_t v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15F633C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0xF) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_15;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v4 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  uint64_t v6 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = v5;
  }
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    unint64_t v7 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    uint64_t v9 = *(void *)(v7 + 8);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = v8;
    }
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v13 = sub_1763C40(*(void *)(a1 + 40));
  v3 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 8) != 0)
  {
LABEL_14:
    uint64_t v10 = sub_15DADFC(*(void *)(a1 + 48));
    v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_15:
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v14 + 31) < 0) {
      uint64_t v15 = *(void *)(v14 + 16);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 31);
    }
    v3 += v15;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void *sub_15F64A4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiImageFeedbackContext");
}

uint64_t sub_15F64B4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F6554(uint64_t a1)
{
  sub_15F64B4(a1);

  operator delete();
}

uint64_t sub_15F658C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v24 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
    return *(void *)v24;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v7 = (char *)(*(void *)v24 + 1);
    unsigned int v8 = **(unsigned char **)v24;
    if ((char)**(unsigned char **)v24 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        unint64_t v7 = (char *)sub_188C180(*(uint64_t *)v24, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unint64_t v7 = (char *)(*(void *)v24 + 2);
      }
    }
    *(void *)uint64_t v24 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v15 = *(void *)(a1 + 8);
    unint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      unint64_t v16 = (uint64_t *)*v16;
    }
    uint64_t v17 = (std::string *)sub_1880F84((void *)(a1 + 24), v16);
    unint64_t v14 = (void *)sub_188C244(v17, *(char **)v24, (uint64_t)a3);
LABEL_24:
    *(void *)uint64_t v24 = v14;
    if (!v14) {
      goto LABEL_43;
    }
LABEL_32:
    if (sub_11947B8((uint64_t)a3, (char **)v24, a3[11].i32[1])) {
      return *(void *)v24;
    }
  }
  if (v8 >> 3 == 1 && v8 == 8)
  {
    uint64_t v18 = v7 + 1;
    unint64_t v19 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    int v20 = *v18;
    int v21 = v19 + (v20 << 7);
    unint64_t v19 = (v21 - 128);
    if (v20 < 0)
    {
      *(void *)uint64_t v24 = sub_188C138((uint64_t)v7, (v21 - 128));
      if (!*(void *)v24) {
        goto LABEL_43;
      }
      unint64_t v19 = v22;
    }
    else
    {
      uint64_t v18 = v7 + 2;
LABEL_29:
      *(void *)uint64_t v24 = v18;
    }
    if (v19 > 8)
    {
      if (*v6) {
        uint64_t v23 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v23 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(1, v19, v23);
    }
    else
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_DWORD *)(a1 + 32) = v19;
    }
    goto LABEL_32;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      uint64_t v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v7 = *(char **)v24;
    }
    unint64_t v14 = sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_24;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v24;
  }
LABEL_43:
  *(void *)uint64_t v24 = 0;
  return *(void *)v24;
}

unsigned char *sub_15F679C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  unint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 2) != 0)
  {
    if (*a3 <= __dst) {
      unint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 32);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6) {
    unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if ((v10 & 1) == 0) {
    return v4;
  }
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v12 + 31) < 0)
  {
    uint64_t v13 = *(void **)(v12 + 8);
    uint64_t v14 = *(void *)(v12 + 16);
  }
  else
  {
    uint64_t v13 = (void *)(v12 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(v12 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v14)
  {
    uint64_t v15 = (int)v14;
    memcpy(v4, v13, (int)v14);
    v4 += v15;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v13, v14, v4);
}

uint64_t sub_15F68E4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_13;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    int v6 = *(_DWORD *)(a1 + 32);
    if (v6 < 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v2 += v7;
  }
LABEL_13:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

uint64_t sub_15F69B0()
{
  return 1;
}

void *sub_15F69B8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiImageFeedbackCorrections");
}

uint64_t sub_15F69C8(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_8;
    }
  }
  else if (v4)
  {
    goto LABEL_8;
  }
  if ((uint64_t (***)())a1 != &off_2540AD0 && *(void *)(a1 + 40))
  {
    sub_184B078();
    operator delete();
  }
  if (*(void *)(a1 + 8)) {
    sub_10E4F74(v3);
  }
LABEL_8:
  sub_1889DA8(a1 + 24);
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F6A88(uint64_t a1)
{
  sub_15F69C8(a1);

  operator delete();
}

char *sub_15F6AC0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v38 = a2;
  int v5 = 0;
  if ((sub_11947B8((uint64_t)a3, &v38, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = v38 + 1;
      unsigned int v9 = *v38;
      if (*v38 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v8 = (char *)sub_188C180((uint64_t)v38, v10 - 128);
          unsigned int v9 = v11;
        }
        else
        {
          uint64_t v8 = v38 + 2;
        }
      }
      uint64_t v38 = v8;
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_52;
          }
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v12 = *(void *)(a1 + 40);
          if (!v12)
          {
            uint64_t v13 = (void *)(*v7 & 0xFFFFFFFFFFFFFFFCLL);
            if (*v7) {
              uint64_t v13 = (void *)*v13;
            }
            uint64_t v12 = sub_185089C((uint64_t)v13);
            *(void *)(a1 + 40) = v12;
            uint64_t v8 = v38;
          }
          uint64_t v14 = sub_12688D0(a3, v12, (unsigned __int8 *)v8);
          goto LABEL_59;
        case 2u:
          if (v9 == 16)
          {
            uint64_t v15 = v8 - 1;
            while (1)
            {
              uint64_t v38 = v15 + 1;
              int v16 = v15[1];
              if (v15[1] < 0)
              {
                int v17 = v16 + (v15[2] << 7);
                int v16 = v17 - 128;
                if (v15[2] < 0)
                {
                  uint64_t v15 = (char *)sub_188C0D0((uint64_t)(v15 + 1), v17 - 128);
                  int v16 = v18;
                }
                else
                {
                  v15 += 3;
                }
              }
              else
              {
                v15 += 2;
              }
              uint64_t v38 = v15;
              uint64_t v19 = *(unsigned int *)(a1 + 24);
              if (v19 == *(_DWORD *)(a1 + 28))
              {
                int v20 = v19 + 1;
                sub_188C80C((unsigned int *)(a1 + 24), v19 + 1);
                *(_DWORD *)(*(void *)(a1 + 32) + 4 * v19) = v16;
                uint64_t v15 = v38;
              }
              else
              {
                *(_DWORD *)(*(void *)(a1 + 32) + 4 * v19) = v16;
                int v20 = v19 + 1;
              }
              *(_DWORD *)(a1 + 24) = v20;
              if (!v15) {
                goto LABEL_65;
              }
              if (*(void *)a3 <= (unint64_t)v15 || *v15 != 16) {
                goto LABEL_60;
              }
            }
          }
          if (v9 == 18)
          {
            uint64_t v14 = (char *)sub_188C2CC((unsigned int *)(a1 + 24), (unsigned __int8 *)v8, (uint64_t)a3);
          }
          else
          {
LABEL_52:
            if (v9) {
              BOOL v36 = (v9 & 7) == 4;
            }
            else {
              BOOL v36 = 1;
            }
            if (v36)
            {
              if (v8)
              {
                a3[10].i32[0] = v9 - 1;
                goto LABEL_2;
              }
LABEL_65:
              uint64_t v38 = 0;
              goto LABEL_2;
            }
            if (*v7)
            {
              int v37 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            }
            else
            {
              int v37 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
              uint64_t v8 = v38;
            }
            uint64_t v14 = (char *)sub_1885AC0(v9, v37, v8, a3);
          }
LABEL_59:
          uint64_t v38 = v14;
          if (!v14) {
            goto LABEL_65;
          }
LABEL_60:
          if (sub_11947B8((uint64_t)a3, &v38, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
        case 3u:
          if (v9 != 24) {
            goto LABEL_52;
          }
          v5 |= 2u;
          int v21 = v8 + 1;
          uint64_t v22 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_33;
          }
          int v23 = *v21;
          uint64_t v22 = v22 + (v23 << 7) - 128;
          if (v23 < 0)
          {
            uint64_t v30 = (char *)sub_188C138((uint64_t)v8, v22);
            uint64_t v38 = v30;
            *(unsigned char *)(a1 + 48) = v31 != 0;
            if (!v30) {
              goto LABEL_65;
            }
          }
          else
          {
            int v21 = v8 + 2;
LABEL_33:
            uint64_t v38 = v21;
            *(unsigned char *)(a1 + 48) = v22 != 0;
          }
          goto LABEL_60;
        case 4u:
          if (v9 != 32) {
            goto LABEL_52;
          }
          v5 |= 4u;
          uint64_t v24 = v8 + 1;
          uint64_t v25 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_38;
          }
          int v26 = *v24;
          uint64_t v25 = v25 + (v26 << 7) - 128;
          if (v26 < 0)
          {
            unint64_t v32 = (char *)sub_188C138((uint64_t)v8, v25);
            uint64_t v38 = v32;
            *(unsigned char *)(a1 + 49) = v33 != 0;
            if (!v32) {
              goto LABEL_65;
            }
          }
          else
          {
            uint64_t v24 = v8 + 2;
LABEL_38:
            uint64_t v38 = v24;
            *(unsigned char *)(a1 + 49) = v25 != 0;
          }
          goto LABEL_60;
        case 5u:
          if (v9 != 40) {
            goto LABEL_52;
          }
          v5 |= 8u;
          uint64_t v27 = v8 + 1;
          uint64_t v28 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_43;
          }
          int v29 = *v27;
          uint64_t v28 = v28 + (v29 << 7) - 128;
          if (v29 < 0)
          {
            uint64_t v34 = (char *)sub_188C138((uint64_t)v8, v28);
            uint64_t v38 = v34;
            *(unsigned char *)(a1 + 50) = v35 != 0;
            if (!v34) {
              goto LABEL_65;
            }
          }
          else
          {
            uint64_t v27 = v8 + 2;
LABEL_43:
            uint64_t v38 = v27;
            *(unsigned char *)(a1 + 50) = v28 != 0;
          }
          goto LABEL_60;
        default:
          goto LABEL_52;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 16) |= v5;
  return v38;
}

char *sub_15F6EA4(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 40);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_184B3AC(v7, v9, a3);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 24);
  if ((int)v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
      }
      unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * i);
      char *v4 = 16;
      v4[1] = v12;
      if (v12 > 0x7F)
      {
        v4[1] = v12 | 0x80;
        unsigned int v13 = v12 >> 7;
        v4[2] = v12 >> 7;
        v4 += 3;
        if (v12 >= 0x4000)
        {
          do
          {
            *(v4 - 1) |= 0x80u;
            unsigned int v14 = v13 >> 14;
            v13 >>= 7;
            *v4++ = v13;
          }
          while (v14);
        }
      }
      else
      {
        v4 += 2;
      }
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v15 = *(unsigned char *)(a1 + 48);
    char *v4 = 24;
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 4) == 0)
    {
LABEL_19:
      if ((v6 & 8) == 0) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_19;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  char v16 = *(unsigned char *)(a1 + 49);
  char *v4 = 32;
  v4[1] = v16;
  v4 += 2;
  if ((v6 & 8) != 0)
  {
LABEL_27:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    char v17 = *(unsigned char *)(a1 + 50);
    char *v4 = 40;
    v4[1] = v17;
    v4 += 2;
  }
LABEL_30:
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v4;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v20 + 31) < 0)
  {
    int v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    int v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v4, v21, (int)v22);
    v4 += v23;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v21, v22, v4);
}

uint64_t sub_15F711C(uint64_t a1)
{
  uint64_t v2 = sub_188D4F0((unsigned int *)(a1 + 24)) + *(unsigned int *)(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 16);
  if ((v3 & 0xF) != 0)
  {
    if (v3)
    {
      uint64_t v4 = sub_184B568(*(void *)(a1 + 40));
      v2 += v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v5 = v2 + 2;
    if ((v3 & 2) == 0) {
      uint64_t v5 = v2;
    }
    if ((v3 & 4) != 0) {
      v5 += 2;
    }
    if ((v3 & 8) != 0) {
      uint64_t v2 = v5 + 2;
    }
    else {
      uint64_t v2 = v5;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v2 += v9;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

void *sub_15F71E8@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.PoiActivityFeedback");
}

void *sub_15F71F8(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F726C(void *a1)
{
  sub_15F71F8(a1);

  operator delete();
}

char *sub_15F72A4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  int v5 = 0;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    goto LABEL_27;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v19 + 1;
    unsigned int v8 = *v19;
    if (*v19 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v19, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v19 + 2;
      }
    }
    uint64_t v19 = v7;
    if (v8 != 8) {
      break;
    }
    unsigned int v13 = v7 + 1;
    uint64_t v14 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    int v15 = *v13;
    uint64_t v14 = v14 + (v15 << 7) - 128;
    if ((v15 & 0x80000000) == 0)
    {
      unsigned int v13 = v7 + 2;
LABEL_19:
      uint64_t v19 = v13;
      *(unsigned char *)(a1 + 24) = v14 != 0;
      int v5 = 1;
      goto LABEL_20;
    }
    char v16 = (char *)sub_188C138((uint64_t)v7, v14);
    uint64_t v19 = v16;
    *(unsigned char *)(a1 + 24) = v17 != 0;
    int v5 = 1;
    if (!v16) {
      goto LABEL_28;
    }
LABEL_20:
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      goto LABEL_27;
    }
  }
  if (v8) {
    BOOL v11 = (v8 & 7) == 4;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*v6)
    {
      unsigned int v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unsigned int v12 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v19;
    }
    uint64_t v19 = (char *)sub_1885AC0(v8, v12, v7, a3);
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v19 = 0;
LABEL_27:
  *(_DWORD *)(a1 + 16) |= v5;
  return v19;
}

unsigned char *sub_15F7434(uint64_t a1, unint64_t __dst, _DWORD *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(void *)a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    char v6 = *(unsigned char *)(a1 + 24);
    unsigned char *v4 = 8;
    v4[1] = v6;
    v4 += 2;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v9 + 31) < 0)
  {
    unsigned int v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    unsigned int v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v10, v11, v4);
}

uint64_t sub_15F7518(uint64_t a1)
{
  uint64_t v1 = 2 * (*(_DWORD *)(a1 + 16) & 1);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = *(void *)(v4 + 16);
    }
    else {
      uint64_t v5 = *(unsigned __int8 *)(v4 + 31);
    }
    v1 += v5;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

uint64_t sub_15F7558()
{
  return 1;
}

void *sub_15F7560@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.AddToMapFeedback");
}

uint64_t sub_15F7570(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_10;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if ((uint64_t (***)())a1 != &off_2540B28)
  {
    if (*(void *)(a1 + 24))
    {
      sub_1762C7C();
      operator delete();
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      sub_182B32C(v5);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_10:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F7640(uint64_t a1)
{
  sub_15F7570(a1);

  operator delete();
}

char *sub_15F7678(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v19 = a2;
  if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
    return v19;
  }
  char v6 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v7 = v19 + 1;
    unsigned int v8 = *v19;
    if (*v19 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v19, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v19 + 2;
      }
    }
    uint64_t v19 = v7;
    if (v8 >> 3 != 2) {
      break;
    }
    if (v8 != 18) {
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v15 = *(void *)(a1 + 32);
    if (!v15)
    {
      char v16 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        char v16 = (void *)*v16;
      }
      uint64_t v15 = sub_1836E54((uint64_t)v16);
      *(void *)(a1 + 32) = v15;
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_11798C8(a3, v15, (unsigned __int8 *)v7);
LABEL_31:
    uint64_t v19 = v14;
    if (!v14) {
      return 0;
    }
    if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
      return v19;
    }
  }
  if (v8 >> 3 == 1 && v8 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v17 = *(void *)(a1 + 24);
    if (!v17)
    {
      uint64_t v18 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (*v6) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v17 = sub_178CDA8((uint64_t)v18);
      *(void *)(a1 + 24) = v17;
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_1265F8C(a3, v17, (unsigned __int8 *)v7);
    goto LABEL_31;
  }
LABEL_13:
  if (v8) {
    BOOL v12 = (v8 & 7) == 4;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    if (*v6)
    {
      unsigned int v13 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unsigned int v13 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v7 = v19;
    }
    uint64_t v14 = (char *)sub_1885AC0(v8, v13, v7, a3);
    goto LABEL_31;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v19;
  }
  return 0;
}

char *sub_15F7838(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  unint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    unint64_t v4 = sub_1763540(v7, v9, a3);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    char *v4 = 18;
    unsigned int v11 = *(_DWORD *)(v10 + 44);
    v4[1] = v11;
    if (v11 > 0x7F) {
      BOOL v12 = sub_188A9CC(v11, v4 + 1);
    }
    else {
      BOOL v12 = v4 + 2;
    }
    unint64_t v4 = sub_182BE50(v10, v12, a3);
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v4;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v15 + 31) < 0)
  {
    char v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    char v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v4, v16, (int)v17);
    v4 += v18;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v16, v17, v4);
}

uint64_t sub_15F79B8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  if (v2)
  {
    uint64_t v4 = sub_1763C40(*(void *)(a1 + 24));
    uint64_t v3 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    uint64_t v5 = sub_182C500(*(void *)(a1 + 32));
    v3 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v8 + 31) < 0) {
      uint64_t v9 = *(void *)(v8 + 16);
    }
    else {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
    }
    v3 += v9;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void *sub_15F7A90@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.LocalityFeedback");
}

void *sub_15F7AA0(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F7B14(void *a1)
{
  sub_15F7AA0(a1);

  operator delete();
}

char *sub_15F7B4C(uint64_t a1, char *a2, int32x2_t *a3)
{
  BOOL v12 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if (sub_11947B8((uint64_t)a3, &v12, a3[11].i32[1])) {
      return v12;
    }
    uint64_t v5 = v12 + 1;
    unsigned int v6 = *v12;
    if (*v12 < 0)
    {
      unsigned int v7 = v6 + (*v5 << 7);
      unsigned int v6 = v7 - 128;
      if (*v5 < 0)
      {
        uint64_t v5 = (char *)sub_188C180((uint64_t)v12, v7 - 128);
        unsigned int v6 = v8;
      }
      else
      {
        uint64_t v5 = v12 + 2;
      }
    }
    BOOL v12 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    if (*v4)
    {
      uint64_t v10 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v10 = (std::string *)sub_188DBD8(v4);
      uint64_t v5 = v12;
    }
    BOOL v12 = (char *)sub_1885AC0(v6, v10, v5, a3);
    if (!v12) {
      return 0;
    }
  }
  if (v5) {
    a3[10].i32[0] = v6 - 1;
  }
  return v5;
}

char *sub_15F7C4C(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0) {
    return __dst;
  }
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v6 + 31) < 0)
  {
    unsigned int v7 = *(void **)(v6 + 8);
    unint64_t v6 = *(void *)(v6 + 16);
  }
  else
  {
    unsigned int v7 = (void *)(v6 + 8);
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v6)
  {
    uint64_t v8 = (int)v6;
    memcpy(__dst, v7, (int)v6);
    __dst += v8;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v7, v6, __dst);
}

uint64_t sub_15F7CE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v2 = *(void *)(v4 + 16);
    }
    else {
      uint64_t v2 = *(unsigned __int8 *)(v4 + 31);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(a1 + 16) = v2;
  return v2;
}

std::string *sub_15F7D18(std::string *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15F7D34()
{
  return 1;
}

void *sub_15F7D3C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.StreetFeedback");
}

uint64_t sub_15F7D4C(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F7DEC(uint64_t a1)
{
  sub_15F7D4C(a1);

  operator delete();
}

uint64_t sub_15F7E24(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v17 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v17, a3[11].i32[1])) {
    return *(void *)v17;
  }
  uint64_t v5 = (void *)(a1 + 8);
  while (1)
  {
    unint64_t v6 = (char *)(*(void *)v17 + 1);
    unsigned int v7 = **(unsigned char **)v17;
    if ((char)**(unsigned char **)v17 < 0)
    {
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if (*v6 < 0)
      {
        unint64_t v6 = (char *)sub_188C180(*(uint64_t *)v17, v8 - 128);
        unsigned int v7 = v9;
      }
      else
      {
        unint64_t v6 = (char *)(*(void *)v17 + 2);
      }
    }
    *(void *)uint64_t v17 = v6;
    if (v7 != 10) {
      break;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      uint64_t v14 = (uint64_t *)*v14;
    }
    unint64_t v15 = (std::string *)sub_1880F84((void *)(a1 + 24), v14);
    BOOL v12 = (void *)sub_188C244(v15, *(char **)v17, (uint64_t)a3);
LABEL_18:
    *(void *)uint64_t v17 = v12;
    if (!v12) {
      goto LABEL_25;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v17, a3[11].i32[1])) {
      return *(void *)v17;
    }
  }
  if (v7) {
    BOOL v10 = (v7 & 7) == 4;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*v5)
    {
      unsigned int v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unsigned int v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      unint64_t v6 = *(char **)v17;
    }
    BOOL v12 = sub_1885AC0(v7, v11, v6, a3);
    goto LABEL_18;
  }
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return *(void *)v17;
  }
LABEL_25:
  *(void *)uint64_t v17 = 0;
  return *(void *)v17;
}

char *sub_15F7F7C(uint64_t a1, char *__dst, void *a3)
{
  unint64_t v4 = __dst;
  if (*(unsigned char *)(a1 + 16)) {
    unint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if ((v6 & 1) == 0) {
    return v4;
  }
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v8 + 31) < 0)
  {
    unsigned int v9 = *(void **)(v8 + 8);
    uint64_t v10 = *(void *)(v8 + 16);
  }
  else
  {
    unsigned int v9 = (void *)(v8 + 8);
    LODWORD(v10) = *(unsigned __int8 *)(v8 + 31);
  }
  if (*a3 - (void)v4 >= (int)v10)
  {
    uint64_t v11 = (int)v10;
    memcpy(v4, v9, (int)v10);
    v4 += v11;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v9, v10, v4);
}

uint64_t sub_15F8048(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = v3;
    }
    uint64_t v1 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(void *)(v7 + 16);
    }
    else {
      uint64_t v8 = *(unsigned __int8 *)(v7 + 31);
    }
    v1 += v8;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

uint64_t sub_15F80CC()
{
  return 1;
}

void *sub_15F80D4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.RunningTrackFeedback");
}

uint64_t sub_15F80E4(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15F8184(uint64_t a1)
{
  sub_15F80E4(a1);

  operator delete();
}

uint64_t sub_15F81BC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v17 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v17, a3[11].i32[1])) {
    return *(void *)v17;
  }
  uint64_t v5 = (void *)(a1 + 8);
  while (1)
  {
    uint64_t v6 = (char *)(*(void *)v17 + 1);
    unsigned int v7 = **(unsigned char **)v17;
    if ((char)**(unsigned char **)v17 < 0)
    {
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if (*v6 < 0)
      {
        uint64_t v6 = (char *)sub_188C180(*(uint64_t *)v17, v8 - 128);
        unsigned int v7 = v9;
      }
      else
      {
        uint64_t v6 = (char *)(*(void *)v17 + 2);
      }
    }
    *(void *)uint64_t v17 = v6;
    if (v7 != 10) {
      break;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      uint64_t v14 = (uint64_t *)*v14;
    }
    unint64_t v15 = (std::string *)sub_1880F84((void *)(a1 + 24), v14);
    BOOL v12 = (void *)sub_188C244(v15, *(char **)v17, (uint64_t)a3);
LABEL_18:
    *(void *)uint64_t v17 = v12;
    if (!v12) {
      goto LABEL_25;
    }
    if (sub_11947B8((uint64_t)a3, (char **)v17, a3[11].i32[1])) {
      return *(void *)v17;
    }
  }
  if (v7) {
    BOOL v10 = (v7 & 7) == 4;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (*v5)
    {
      uint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v6 = *(char **)v17;
    }
    BOOL v12 = sub_1885AC0(v7, v11, v6, a3);
    goto LABEL_18;
  }
  if (v6)
  {
    a3[10].i32[0] = v7 - 1;
    return *(void *)v17;
  }
LABEL_25:
  *(void *)uint64_t v17 = 0;
  return *(void *)v17;
}

char *sub_15F8314(uint64_t a1, char *__dst, void *a3)
{
  uint64_t v4 = __dst;
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if ((v6 & 1) == 0) {
    return v4;
  }
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v8 + 31) < 0)
  {
    unsigned int v9 = *(void **)(v8 + 8);
    uint64_t v10 = *(void *)(v8 + 16);
  }
  else
  {
    unsigned int v9 = (void *)(v8 + 8);
    LODWORD(v10) = *(unsigned __int8 *)(v8 + 31);
  }
  if (*a3 - (void)v4 >= (int)v10)
  {
    uint64_t v11 = (int)v10;
    memcpy(v4, v9, (int)v10);
    v4 += v11;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v9, v10, v4);
}

uint64_t sub_15F83E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
    uint64_t v4 = *(void *)(v2 + 8);
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = v3;
    }
    uint64_t v1 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = *(void *)(v7 + 16);
    }
    else {
      uint64_t v8 = *(unsigned __int8 *)(v7 + 31);
    }
    v1 += v8;
  }
  *(_DWORD *)(a1 + 20) = v1;
  return v1;
}

uint64_t sub_15F8464()
{
  return 1;
}

void *sub_15F846C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.RapUserResponseFeedback");
}

uint64_t sub_15F847C(uint64_t a1)
{
  if (!a1)
  {
    sub_16391F4();
  }

  return sub_15CBDE4(v3, a1, 0);
}

double sub_15F84D8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C5B10;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  return result;
}

double sub_15F8558(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C5B90;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = &qword_2550250;
  *(void *)(v2 + 32) = &qword_2550250;
  *(void *)(v2 + 40) = &qword_2550250;
  *(void *)(v2 + 48) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  return result;
}

void *sub_15F85EC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = &off_24C5C10;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = &qword_2550250;
  result[6] = &qword_2550250;
  return result;
}

uint64_t sub_15F8674(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C5C90;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = &qword_2550250;
  *(void *)(result + 56) = &qword_2550250;
  *(_WORD *)(result + 64) = 0;
  return result;
}

void *sub_15F871C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C5D10;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = &qword_2550250;
  result[6] = &qword_2550250;
  result[7] = &qword_2550250;
  return result;
}

uint64_t sub_15F87A8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C5D90;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_WORD *)(result + 32) = 0;
  return result;
}

void *sub_15F8824(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C5E10;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = &qword_2550250;
  result[6] = &qword_2550250;
  result[7] = &qword_2550250;
  result[8] = 0;
  return result;
}

void *sub_15F88B0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C5E90;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_15F8928(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C5F10;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_15F89B0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C5F90;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(void *)(result + 32) = &qword_2550250;
  *(_WORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_15F8A38(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C6010;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_WORD *)(result + 40) = 0;
  return result;
}

double sub_15F8AB8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C6090;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  return result;
}

uint64_t sub_15F8B38(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C6110;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_15F8BB0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C6190;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

double sub_15F8C28(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C6210;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = &qword_2550250;
  *(void *)(v2 + 32) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_DWORD *)(v2 + 72) = 0;
  return result;
}

uint64_t sub_15F8CBC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C6290;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 0;
  return result;
}

uint64_t sub_15F8D58(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C6310;
  *(void *)(result + 8) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void *sub_15F8DF8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6390;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = &qword_2550250;
  result[6] = 0;
  return result;
}

void *sub_15F8E80(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6410;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

void *sub_15F8F04(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6490;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

void *sub_15F8F88(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6510;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

double sub_15F9004(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = &off_24C6590;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  return result;
}

void *sub_15F90B4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *double result = &off_24C6610;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = &qword_2550250;
  return result;
}

uint64_t sub_15F9158(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = off_24C6690;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_15F91FC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C6710;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = a1;
  *(void *)(result + 64) = a1;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 149) = 0u;
  *(_DWORD *)(result + 168) = -1;
  return result;
}

void *sub_15F92D4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6790;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

void *sub_15F9358(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6810;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

double sub_15F93DC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C6890;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(void *)(v2 + 176) = 0;
  return result;
}

double sub_15F946C(uint64_t a1)
{
  if (!a1)
  {
    sub_1639260();
  }
  *(void *)uint64_t v3 = &off_24C6910;
  *(void *)(v3 + 8) = a1;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = &qword_2550250;
  *(void *)(v3 + 56) = &qword_2550250;
  *(void *)(v3 + 64) = &qword_2550250;
  *(void *)(v3 + 72) = &qword_2550250;
  *(void *)(v3 + 80) = &qword_2550250;
  *(void *)(v3 + 88) = &qword_2550250;
  *(void *)(v3 + 96) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  return result;
}

uint64_t sub_15F94FC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C6990;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = a1;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void *sub_15F95B0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6A10;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

double sub_15F962C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C6A90;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0;
  return result;
}

double sub_15F96B0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C6B10;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  return result;
}

uint64_t sub_15F972C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C6B90;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 64) = a1;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void *sub_15F97DC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6C10;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  return result;
}

uint64_t sub_15F9860(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C6C90;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void *sub_15F9904(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C6D10;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

double sub_15F9980(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C6D90;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 45) = 0u;
  return result;
}

double sub_15F9A00(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = &off_24C6E10;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  double result = 0.0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_DWORD *)(v2 + 104) = 0;
  return result;
}

double sub_15F9ABC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = &off_24C6E90;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = &qword_2550250;
  *(void *)(v2 + 56) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 90) = 0u;
  return result;
}

void *sub_15F9B6C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = &off_24C6F10;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *sub_15F9BE8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = &off_24C6F90;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *sub_15F9C64(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *double result = &off_24C7010;
  result[1] = a1;
  result[2] = 0;
  result[3] = a1;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  return result;
}

uint64_t sub_15F9D00(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7090;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_15F9D7C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7110;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t sub_15F9DFC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C7190;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = a1;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = &qword_2550250;
  *(void *)(result + 80) = &qword_2550250;
  *(void *)(result + 88) = 0;
  *(unsigned char *)(result + 96) = 0;
  return result;
}

double sub_15F9EB4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = &off_24C7210;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = a1;
  double result = 0.0;
  *(_OWORD *)(v2 + 153) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  return result;
}

double sub_15F9F80(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(v2 + 8) = a1;
  *(void *)uint64_t v2 = &off_24C7290;
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 44) = 0u;
  return result;
}

void *sub_15FA000(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *double result = &off_24C7310;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_15FA078(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7390;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void *sub_15FA0F8(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C7410;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_15FA174(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = off_24C7490;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

double sub_15FA1F0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t v2 = &off_24C7510;
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = &qword_2550250;
  double result = 0.0;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_DWORD *)(v2 + 152) = 0;
  return result;
}

uint64_t sub_15FA2BC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7590;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void *sub_15FA338(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C7610;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *sub_15FA3B4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *uint64_t result = &off_24C7690;
  result[1] = a1;
  result[2] = 0;
  result[3] = 0;
  result[4] = a1;
  result[5] = a1;
  result[6] = 0;
  result[7] = 0;
  result[8] = &qword_2550250;
  result[9] = &qword_2550250;
  result[10] = &qword_2550250;
  result[11] = 0;
  return result;
}

uint64_t sub_15FA464(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7710;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void *sub_15FA4E0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C7790;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void *sub_15FA55C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C7810;
  result[2] = 0;
  result[3] = &qword_2550250;
  result[4] = &qword_2550250;
  result[5] = 0;
  result[6] = 0;
  return result;
}

uint64_t sub_15FA5E4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7890;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = &qword_2550250;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_15FA66C(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)uint64_t result = &off_24C7910;
  *(void *)(result + 8) = a1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = a1;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 47) = 0;
  return result;
}

uint64_t sub_15FA708(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7990;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

void *sub_15FA784(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C7A10;
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_15FA800(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  *(void *)(result + 8) = a1;
  *(void *)uint64_t result = &off_24C7A90;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void *sub_15FA878(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C7B10;
  result[2] = 0;
  result[3] = &qword_2550250;
  return result;
}

void *sub_15FA8FC(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  result[1] = a1;
  *uint64_t result = &off_24C7B90;
  result[2] = 0;
  result[3] = &qword_2550250;
  return result;
}

BOOL sub_15FA980(unsigned int a1)
{
  return a1 < 8;
}

void *sub_15FA98C(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_1889DA8((uint64_t)(a1 + 5));
  sub_1889DE8(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15FAA10(void *a1)
{
  sub_15FA98C(a1);

  operator delete();
}

uint64_t sub_15FAA48(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v33 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v33, a3[11].i32[1])) {
    return *(void *)v33;
  }
  uint64_t v6 = (void *)(a1 + 8);
  unint64_t v7 = (uint64_t **)(a1 + 16);
  while (1)
  {
    uint64_t v8 = (char *)(*(void *)v33 + 1);
    unsigned int v9 = **(unsigned char **)v33;
    if ((char)**(unsigned char **)v33 < 0)
    {
      int v10 = *v8;
      unsigned int v11 = v9 + (v10 << 7);
      unsigned int v9 = v11 - 128;
      if (v10 < 0)
      {
        uint64_t v8 = (char *)sub_188C180(*(uint64_t *)v33, v11 - 128);
        unsigned int v9 = v12;
      }
      else
      {
        uint64_t v8 = (char *)(*(void *)v33 + 2);
      }
    }
    *(void *)uint64_t v33 = v8;
    if (v9 >> 3 != 2) {
      break;
    }
    if (v9 == 16)
    {
      uint64_t v17 = (uint64_t)(v8 - 1);
      while (1)
      {
        *(void *)uint64_t v33 = v17 + 1;
        unint64_t v18 = *(unsigned __int8 *)(v17 + 1);
        uint64_t v19 = (char *)(v17 + 2);
        if (*(char *)(v17 + 1) < 0)
        {
          int v20 = *v19;
          int v21 = v18 + (v20 << 7);
          unint64_t v18 = (v21 - 128);
          if (v20 < 0)
          {
            *(void *)uint64_t v33 = sub_188C138(v17 + 1, (v21 - 128));
            if (!*(void *)v33) {
              goto LABEL_59;
            }
            unint64_t v18 = v24;
            goto LABEL_28;
          }
          uint64_t v19 = (char *)(v17 + 3);
        }
        *(void *)uint64_t v33 = v19;
LABEL_28:
        if (v18 > 7)
        {
          if (*v6) {
            uint64_t v25 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            uint64_t v25 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          sub_188C020(2, v18, v25);
        }
        else
        {
          uint64_t v22 = *(unsigned int *)(a1 + 40);
          if (v22 == *(_DWORD *)(a1 + 44))
          {
            int v23 = v22 + 1;
            sub_188C80C((unsigned int *)(a1 + 40), v22 + 1);
            *(_DWORD *)(*(void *)(a1 + 48) + 4 * v22) = v18;
          }
          else
          {
            *(_DWORD *)(*(void *)(a1 + 48) + 4 * v22) = v18;
            int v23 = v22 + 1;
          }
          *(_DWORD *)(a1 + 40) = v23;
        }
        uint64_t v17 = *(void *)v33;
        if (*(void *)a3 <= *(void *)v33 || **(unsigned char **)v33 != 16) {
          goto LABEL_52;
        }
      }
    }
    if (v9 == 18)
    {
      *(void *)&long long v34 = a1 + 40;
      *((void *)&v34 + 1) = sub_15FA980;
      uint64_t v35 = a1 + 8;
      int v36 = 2;
      char v16 = sub_1112E88((uint64_t)a3, v8, &v34);
      goto LABEL_20;
    }
LABEL_13:
    if (v9) {
      BOOL v14 = (v9 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      if (!v8) {
        goto LABEL_59;
      }
      a3[10].i32[0] = v9 - 1;
      return *(void *)v33;
    }
    if (*v6)
    {
      unint64_t v15 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v15 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      uint64_t v8 = *(char **)v33;
    }
    char v16 = sub_1885AC0(v9, v15, v8, a3);
LABEL_20:
    *(void *)uint64_t v33 = v16;
    if (!v16) {
      goto LABEL_59;
    }
LABEL_52:
    if (sub_11947B8((uint64_t)a3, (char **)v33, a3[11].i32[1])) {
      return *(void *)v33;
    }
  }
  if (v9 >> 3 != 1 || v9 != 10) {
    goto LABEL_13;
  }
  int v26 = v8 - 1;
  while (1)
  {
    uint64_t v27 = (char *)(v26 + 1);
    *(void *)uint64_t v33 = v26 + 1;
    uint64_t v28 = *(_DWORD **)(a1 + 32);
    if (v28 && (uint64_t v29 = *(int *)(a1 + 24), (int)v29 < *v28))
    {
      *(_DWORD *)(a1 + 24) = v29 + 1;
      uint64_t v30 = *(std::string **)&v28[2 * v29 + 2];
    }
    else
    {
      if (!*v7) {
        operator new();
      }
      *unint64_t v32 = v31;
      v32[1] = sub_3A6EDC;
      void *v31 = 0;
      v31[1] = 0;
      int v31[2] = 0;
      uint64_t v30 = (std::string *)sub_188CDC8(a1 + 16, (uint64_t)v31);
      uint64_t v27 = *(char **)v33;
    }
    int v26 = sub_188C244(v30, v27, (uint64_t)a3);
    *(void *)uint64_t v33 = v26;
    if (!v26) {
      break;
    }
    if (*(void *)a3 <= (unint64_t)v26 || *v26 != 10) {
      goto LABEL_52;
    }
  }
LABEL_59:
  *(void *)uint64_t v33 = 0;
  return *(void *)v33;
}

char *sub_15FAD88(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    do
    {
      unsigned int v9 = *(void **)(*(void *)(a1 + 32) + v7 + 8);
      if (*((char *)v9 + 23) < 0)
      {
        int64_t v10 = v9[1];
        if (v10 > 127) {
          goto LABEL_12;
        }
      }
      else
      {
        int64_t v10 = *((unsigned __int8 *)v9 + 23);
      }
      if (*(void *)a3 - (void)__dst + 14 >= v10)
      {
        *__dst = 10;
        __dst[1] = v10;
        if (*((char *)v9 + 23) < 0) {
          unsigned int v9 = (void *)*v9;
        }
        unsigned int v11 = __dst + 2;
        memcpy(v11, v9, v10);
        __dst = &v11[v10];
        goto LABEL_10;
      }
LABEL_12:
      __dst = (char *)sub_188A868(a3, 1, (uint64_t)v9, __dst);
LABEL_10:
      v7 += 8;
    }
    while (v8 != v7);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 40);
  if ((int)v12 >= 1)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if (*(void *)a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      unint64_t v14 = *(int *)(*(void *)(a1 + 48) + 4 * i);
      *__dst = 16;
      __dst[1] = v14;
      if (v14 > 0x7F)
      {
        __dst[1] = v14 | 0x80;
        unint64_t v15 = v14 >> 7;
        __dst[2] = v14 >> 7;
        __dst += 3;
        if (v14 >= 0x4000)
        {
          do
          {
            *(__dst - 1) |= 0x80u;
            unint64_t v16 = v15 >> 14;
            v15 >>= 7;
            *__dst++ = v15;
          }
          while (v16);
        }
      }
      else
      {
        __dst += 2;
      }
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  if ((v17 & 1) == 0) {
    return __dst;
  }
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v19 + 31) < 0)
  {
    int v20 = *(void **)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 16);
  }
  else
  {
    int v20 = (void *)(v19 + 8);
    LODWORD(v21) = *(unsigned __int8 *)(v19 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v21)
  {
    uint64_t v22 = (int)v21;
    memcpy(__dst, v20, (int)v21);
    __dst += v22;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v20, v21, __dst);
}

uint64_t sub_15FAF8C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 24);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 32) + 8);
    uint64_t v3 = *(unsigned int *)(a1 + 24);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  if (v7)
  {
    int v8 = 0;
    uint64_t v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v8);
      if (v10 < 0) {
        uint64_t v11 = 10;
      }
      else {
        uint64_t v11 = (9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6;
      }
      v9 += v11;
      ++v8;
    }
    while (v7 != v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v12 = v3 + v7 + v9;
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    v12 += v16;
  }
  *(_DWORD *)(a1 + 56) = v12;
  return v12;
}

uint64_t sub_15FB080()
{
  return 1;
}

void *sub_15FB088@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackIdLookupParameters");
}

void *sub_15FB098(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_16392D4(a1 + 2);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15FB118(void *a1)
{
  sub_15FB098(a1);

  operator delete();
}

char *sub_15FB150(uint64_t a1, char *a2, int32x2_t *a3)
{
  unint64_t v19 = a2;
  if ((sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v6 = v19 + 1;
      unsigned int v7 = *v19;
      if (*v19 < 0)
      {
        unsigned int v8 = v7 + (*v6 << 7);
        unsigned int v7 = v8 - 128;
        if (*v6 < 0)
        {
          uint64_t v6 = (char *)sub_188C180((uint64_t)v19, v8 - 128);
          unsigned int v7 = v9;
        }
        else
        {
          uint64_t v6 = v19 + 2;
        }
      }
      unint64_t v19 = v6;
      if (v7 == 10)
      {
        uint64_t v12 = v6 - 1;
        while (1)
        {
          uint64_t v13 = (unsigned __int8 *)(v12 + 1);
          unint64_t v19 = v12 + 1;
          unint64_t v14 = *(_DWORD **)(a1 + 32);
          if (v14 && (uint64_t v15 = *(int *)(a1 + 24), (int)v15 < *v14))
          {
            *(_DWORD *)(a1 + 24) = v15 + 1;
            uint64_t v16 = *(void *)&v14[2 * v15 + 2];
          }
          else
          {
            uint64_t v17 = sub_1605E70(*(void *)(a1 + 16));
            uint64_t v16 = sub_188CDC8(a1 + 16, v17);
            uint64_t v13 = (unsigned __int8 *)v19;
          }
          uint64_t v12 = (char *)sub_15FB2F0(a3, v16, v13);
          unint64_t v19 = v12;
          if (!v12) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v12 || *v12 != 10) {
            goto LABEL_24;
          }
        }
      }
      if (!v7 || (v7 & 7) == 4) {
        break;
      }
      if (*v5)
      {
        uint64_t v11 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else
      {
        uint64_t v11 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        uint64_t v6 = v19;
      }
      unint64_t v19 = (char *)sub_1885AC0(v7, v11, v6, a3);
      if (!v19) {
        return 0;
      }
LABEL_24:
      if (sub_11947B8((uint64_t)a3, &v19, a3[11].i32[1])) {
        return v19;
      }
    }
    if (v6)
    {
      a3[10].i32[0] = v7 - 1;
      return v19;
    }
    return 0;
  }
  return v19;
}

uint64_t sub_15FB2F0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15FB71C(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15FB380(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        __dst = (char *)sub_188A3FC((uint64_t)a3, (int)__dst);
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8 * i + 8);
      *__dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      __dst[1] = v9;
      if (v9 > 0x7F) {
        int v10 = sub_188A9CC(v9, __dst + 1);
      }
      else {
        int v10 = __dst + 2;
      }
      __dst = sub_15FBA58(v8, v10, a3);
    }
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v11 & 1) == 0) {
    return __dst;
  }
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v13 + 31) < 0)
  {
    unint64_t v14 = *(void **)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    unint64_t v14 = (void *)(v13 + 8);
    LODWORD(v15) = *(unsigned __int8 *)(v13 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v15)
  {
    uint64_t v16 = (int)v15;
    memcpy(__dst, v14, (int)v15);
    __dst += v16;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v14, v15, __dst);
}

uint64_t sub_15FB4C4(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15FBC3C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void *sub_15FB574@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackIdLookupResult");
}

uint64_t sub_15FB584(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_7;
    }
  }
  else if (v4)
  {
    goto LABEL_7;
  }
  uint64_t v5 = (void ***)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (v2) {
    sub_10E4F74(v3);
  }
LABEL_7:
  sub_1639354((void *)(a1 + 24));
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15FB630(uint64_t a1)
{
  sub_15FB584(a1);

  operator delete();
}

uint64_t sub_15FB668(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_15FD930(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if (*(unsigned char *)(v1 + 16))
  {
    unint64_t v5 = *(void *)(v1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
  char v7 = *(unsigned char *)(v1 + 8);
  uint64_t v6 = v1 + 8;
  *(_DWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  if (v7)
  {
    return sub_188B4AC((uint64_t *)v6);
  }
  return result;
}

uint64_t sub_15FB71C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v31 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
    return *(void *)v31;
  }
  uint64_t v6 = (void *)(a1 + 8);
  while (1)
  {
    char v7 = (char *)(*(void *)v31 + 1);
    unsigned int v8 = **(unsigned char **)v31;
    if ((char)**(unsigned char **)v31 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        char v7 = (char *)sub_188C180(*(uint64_t *)v31, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        char v7 = (char *)(*(void *)v31 + 2);
      }
    }
    *(void *)uint64_t v31 = v7;
    unsigned int v11 = v8 >> 3;
    if (v8 >> 3 == 5)
    {
      if (v8 == 42)
      {
        uint64_t v16 = v7 - 1;
        while (1)
        {
          uint64_t v17 = (unsigned __int8 *)(v16 + 1);
          *(void *)uint64_t v31 = v16 + 1;
          unint64_t v18 = *(_DWORD **)(a1 + 40);
          if (v18 && (uint64_t v19 = *(int *)(a1 + 32), (int)v19 < *v18))
          {
            *(_DWORD *)(a1 + 32) = v19 + 1;
            uint64_t v20 = *(void *)&v18[2 * v19 + 2];
          }
          else
          {
            uint64_t v21 = sub_1605F98(*(void *)(a1 + 24));
            uint64_t v20 = sub_188CDC8(a1 + 24, (uint64_t)v21);
            uint64_t v17 = *(unsigned __int8 **)v31;
          }
          uint64_t v16 = sub_15FB9C8(a3, v20, v17);
          *(void *)uint64_t v31 = v16;
          if (!v16) {
            goto LABEL_53;
          }
          if (*(void *)a3 <= (unint64_t)v16 || *v16 != 42) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_14;
    }
    if (v11 == 2) {
      break;
    }
    if (v11 != 1 || v8 != 10) {
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (uint64_t *)*v27;
    }
    uint64_t v28 = (std::string *)sub_1880F84((void *)(a1 + 48), v27);
    uint64_t v15 = (void *)sub_188C244(v28, *(char **)v31, (uint64_t)a3);
LABEL_41:
    *(void *)uint64_t v31 = v15;
    if (!v15) {
      goto LABEL_53;
    }
LABEL_42:
    if (sub_11947B8((uint64_t)a3, (char **)v31, a3[11].i32[1])) {
      return *(void *)v31;
    }
  }
  if (v8 == 16)
  {
    uint64_t v22 = v7 + 1;
    unint64_t v23 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    int v24 = *v22;
    int v25 = v23 + (v24 << 7);
    unint64_t v23 = (v25 - 128);
    if (v24 < 0)
    {
      *(void *)uint64_t v31 = sub_188C138((uint64_t)v7, (v25 - 128));
      if (!*(void *)v31) {
        goto LABEL_53;
      }
      unint64_t v23 = v29;
    }
    else
    {
      uint64_t v22 = v7 + 2;
LABEL_35:
      *(void *)uint64_t v31 = v22;
    }
    if (sub_13E78E4(v23))
    {
      *(_DWORD *)(a1 + 16) |= 2u;
      *(_DWORD *)(a1 + 56) = v23;
    }
    else
    {
      if (*v6) {
        uint64_t v30 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        uint64_t v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      sub_188C020(2, v23, v30);
    }
    goto LABEL_42;
  }
LABEL_14:
  if (v8) {
    BOOL v13 = (v8 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v6)
    {
      unint64_t v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      unint64_t v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      char v7 = *(char **)v31;
    }
    uint64_t v15 = sub_1885AC0(v8, v14, v7, a3);
    goto LABEL_41;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return *(void *)v31;
  }
LABEL_53:
  *(void *)uint64_t v31 = 0;
  return *(void *)v31;
}

char *sub_15FB9C8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15FD9C0(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15FBA58(uint64_t a1, unsigned char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_117A0AC(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v7 = *(int *)(a1 + 56);
    unsigned char *v4 = 16;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    for (int i = 0; i != v10; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 42;
      unsigned int v13 = *(_DWORD *)(v12 + 20);
      v4[1] = v13;
      if (v13 > 0x7F) {
        unint64_t v14 = sub_188A9CC(v13, v4 + 1);
      }
      else {
        unint64_t v14 = v4 + 2;
      }
      uint64_t v4 = sub_15FDD4C(v12, (unint64_t)v14, a3);
    }
  }
  uint64_t v15 = *(void *)(a1 + 8);
  if ((v15 & 1) == 0) {
    return v4;
  }
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v17 + 31) < 0)
  {
    unint64_t v18 = *(void **)(v17 + 8);
    uint64_t v19 = *(void *)(v17 + 16);
  }
  else
  {
    unint64_t v18 = (void *)(v17 + 8);
    LODWORD(v19) = *(unsigned __int8 *)(v17 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v19)
  {
    uint64_t v20 = (int)v19;
    memcpy(v4, v18, (int)v19);
    v4 += v20;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v18, v19, v4);
}

uint64_t sub_15FBC3C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15FDF8C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 3) != 0)
  {
    if (v8)
    {
      unint64_t v9 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      int v12 = *(_DWORD *)(a1 + 56);
      if (v12 < 0) {
        uint64_t v13 = 11;
      }
      else {
        uint64_t v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v2 += v13;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v2 += v17;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

void sub_15FBD70(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_16395E0((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    int v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 3) != 0)
  {
    if (v9)
    {
      uint64_t v10 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      uint64_t v11 = *(void *)(a1 + 8);
      int v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        int v12 = (uint64_t *)*v12;
      }
      sub_1881DF4((std::string **)(a1 + 48), v10, v12);
    }
    if ((v9 & 2) != 0) {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    }
    *(_DWORD *)(a1 + 16) |= v9;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v13 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15FBE98(uint64_t a1)
{
  return sub_15FBEA0(a1 + 24);
}

uint64_t sub_15FBEA0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 >= 1)
  {
    do
    {
      uint64_t v3 = v1--;
      uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * v1 + 8);
      uint64_t v5 = *(unsigned int *)(v4 + 32);
      while ((int)v5 >= 1)
      {
        uint64_t v6 = v5 - 1;
        char v7 = sub_15FD784(*(void *)(*(void *)(v4 + 40) + 8 * v5));
        uint64_t v5 = v6;
        if ((v7 & 1) == 0) {
          return 0;
        }
      }
    }
    while (v3 >= 2);
  }
  return 1;
}

void *sub_15FBF2C@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackInfo");
}

uint64_t sub_15FBF3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v1 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)unint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(unsigned char *)(result + 24) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v3) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

uint64_t sub_15FBF84(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  unint64_t v2 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)unint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)unint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    unint64_t v3 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t result = a1 + 8;
  *(_WORD *)(result + 32) = 0;
  *(_DWORD *)(result + 8) = 0;
  if (v5) {
    return sub_188B4AC((uint64_t *)result);
  }
  return result;
}

void *sub_15FC004(void *a1)
{
  unint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  sub_15FC088((uint64_t)a1);
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_5:
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

uint64_t sub_15FC088(uint64_t result)
{
  if ((uint64_t (***)())result != &off_2540C38)
  {
    int v1 = (void *)result;
    uint64_t v2 = *(void **)(result + 24);
    if (v2)
    {
      sub_15FE218(v2);
      operator delete();
    }
    uint64_t v3 = v1[4];
    if (v3)
    {
      sub_15FE4C4(v3);
      operator delete();
    }
    uint64_t v4 = (void *)v1[5];
    if (v4)
    {
      sub_15FF354(v4);
      operator delete();
    }
    uint64_t v5 = v1[6];
    if (v5)
    {
      sub_15CABB4(v5);
      operator delete();
    }
    uint64_t v6 = v1[7];
    if (v6)
    {
      sub_1600BBC(v6);
      operator delete();
    }
    uint64_t v7 = v1[8];
    if (v7)
    {
      sub_16216F8(v7);
      operator delete();
    }
    uint64_t result = v1[9];
    if (result)
    {
      sub_16225CC(result);
      operator delete();
    }
  }
  return result;
}

void sub_15FC1B4(void *a1)
{
  sub_15FC004(a1);

  operator delete();
}

uint64_t sub_15FC1EC(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0x7F) == 0) {
    goto LABEL_12;
  }
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 24);
    char v4 = *(unsigned char *)(v3 + 8);
    uint64_t result = v3 + 8;
    if (v4) {
      uint64_t result = sub_188B4AC((uint64_t *)result);
    }
  }
  if ((v2 & 2) != 0)
  {
    uint64_t result = sub_15FC2C8(*(void *)(v1 + 32));
    if ((v2 & 4) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_7;
  }
  uint64_t result = sub_15FC3B4(*(void *)(v1 + 40));
  if ((v2 & 8) == 0)
  {
LABEL_8:
    if ((v2 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t result = sub_15FC430(*(void *)(v1 + 56));
    if ((v2 & 0x20) == 0)
    {
LABEL_10:
      if ((v2 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_18:
  uint64_t result = sub_15CACB0(*(void *)(v1 + 48));
  if ((v2 & 0x10) != 0) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v2 & 0x20) == 0) {
    goto LABEL_10;
  }
LABEL_20:
  uint64_t result = sub_15FBF3C(*(void *)(v1 + 64));
  if ((v2 & 0x40) != 0) {
LABEL_11:
  }
    uint64_t result = sub_15FBF84(*(void *)(v1 + 72));
LABEL_12:
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

uint64_t *sub_15FC2B8(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  if (v2) {
    return (uint64_t *)sub_188B4AC(result);
  }
  return result;
}

uint64_t sub_15FC2C8(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 0xF) == 0) {
    goto LABEL_7;
  }
  if (v2)
  {
    unint64_t v5 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_17;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_17:
  unint64_t v6 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(unsigned char **)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_21;
    }
LABEL_5:
    if ((v2 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  *(unsigned char *)unint64_t v6 = 0;
  *(unsigned char *)(v6 + 23) = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_5;
  }
LABEL_21:
  uint64_t result = sub_15C2850(*(void *)(result + 40));
  if ((v2 & 8) != 0) {
LABEL_6:
  }
    uint64_t result = sub_15C2850(*(void *)(v1 + 48));
LABEL_7:
  if ((v2 & 0x30) != 0) {
    *(void *)(v1 + 56) = 0;
  }
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = v1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if (v4)
  {
    return sub_188B4AC((uint64_t *)v3);
  }
  return result;
}

uint64_t sub_15FC3B4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 32) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_1600038(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 24) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  unint64_t v5 = (uint64_t *)(v1 + 8);
  if (v6)
  {
    return sub_188B4AC(v5);
  }
  return result;
}

uint64_t sub_15FC430(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) == 0) {
      goto LABEL_5;
    }
    unint64_t v3 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
    if ((*(char *)(v3 + 23) & 0x80000000) == 0)
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
LABEL_5:
      if ((v2 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    **(unsigned char **)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if ((v2 & 2) != 0) {
LABEL_6:
    }
      uint64_t result = sub_1600CC0(*(void *)(result + 32));
  }
LABEL_7:
  if ((v2 & 0xC) != 0) {
    *(void *)(v1 + 40) = 0;
  }
  char v5 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = v1 + 8;
  *(_DWORD *)(v4 + 8) = 0;
  if (v5)
  {
    return sub_188B4AC((uint64_t *)v4);
  }
  return result;
}

char *sub_15FC4D0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v28 = a2;
  if (sub_11947B8((uint64_t)a3, &v28, a3[11].i32[1])) {
    return v28;
  }
  char v6 = (void *)(a1 + 8);
  while (2)
  {
    uint64_t v7 = v28 + 1;
    unsigned int v8 = *v28;
    if (*v28 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        uint64_t v7 = (char *)sub_188C180((uint64_t)v28, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        uint64_t v7 = v28 + 2;
      }
    }
    uint64_t v28 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v11 = *(void *)(a1 + 24);
        if (!v11)
        {
          int v12 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            int v12 = (void *)*v12;
          }
          uint64_t v11 = sub_1606034((uint64_t)v12);
          *(void *)(a1 + 24) = v11;
          uint64_t v7 = v28;
        }
        uint64_t v13 = sub_15FC85C(a3, v11, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 2u:
        if (v8 != 18) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v14 = *(void **)(a1 + 32);
        if (!v14)
        {
          uint64_t v15 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v15 = (void *)*v15;
          }
          uint64_t v14 = sub_16060AC((uint64_t)v15);
          *(void *)(a1 + 32) = v14;
          uint64_t v7 = v28;
        }
        uint64_t v13 = (char *)sub_15FC8EC(a3, (uint64_t)v14, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 3u:
        if (v8 != 26) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v16 = *(void *)(a1 + 40);
        if (!v16)
        {
          uint64_t v17 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v17 = (void *)*v17;
          }
          uint64_t v16 = sub_16061BC((uint64_t)v17);
          *(void *)(a1 + 40) = v16;
          uint64_t v7 = v28;
        }
        uint64_t v13 = sub_12E8CD8(a3, v16, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 4u:
        if (v8 != 34) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        unint64_t v18 = *(void **)(a1 + 48);
        if (!v18)
        {
          uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v19 = (void *)*v19;
          }
          unint64_t v18 = sub_15CBCB8((uint64_t)v19);
          *(void *)(a1 + 48) = v18;
          uint64_t v7 = v28;
        }
        uint64_t v13 = sub_15FC97C(a3, (uint64_t)v18, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 5u:
        if (v8 != 42) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x10u;
        uint64_t v20 = *(void **)(a1 + 56);
        if (!v20)
        {
          uint64_t v21 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            uint64_t v21 = (void *)*v21;
          }
          uint64_t v20 = sub_160638C((uint64_t)v21);
          *(void *)(a1 + 56) = v20;
          uint64_t v7 = v28;
        }
        uint64_t v13 = (char *)sub_15FCA0C(a3, (uint64_t)v20, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 6u:
        if (v8 != 50) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x20u;
        uint64_t v22 = *(void *)(a1 + 64);
        if (!v22)
        {
          unint64_t v23 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            unint64_t v23 = (void *)*v23;
          }
          uint64_t v22 = sub_1623650((uint64_t)v23);
          *(void *)(a1 + 64) = v22;
          uint64_t v7 = v28;
        }
        uint64_t v13 = (char *)sub_15FCA9C(a3, v22, (unsigned __int8 *)v7);
        goto LABEL_58;
      case 7u:
        if (v8 != 58) {
          goto LABEL_51;
        }
        *(_DWORD *)(a1 + 16) |= 0x40u;
        uint64_t v24 = *(void *)(a1 + 72);
        if (!v24)
        {
          int v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
          if (*v6) {
            int v25 = (void *)*v25;
          }
          uint64_t v24 = sub_16237E8((uint64_t)v25);
          *(void *)(a1 + 72) = v24;
          uint64_t v7 = v28;
        }
        uint64_t v13 = (char *)sub_15FCB2C(a3, v24, (unsigned __int8 *)v7);
        goto LABEL_58;
      default:
LABEL_51:
        if (v8) {
          BOOL v26 = (v8 & 7) == 4;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          if (*v6)
          {
            uint64_t v27 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            uint64_t v27 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            uint64_t v7 = v28;
          }
          uint64_t v13 = (char *)sub_1885AC0(v8, v27, v7, a3);
LABEL_58:
          uint64_t v28 = v13;
          if (!v13) {
            return 0;
          }
          if (sub_11947B8((uint64_t)a3, &v28, a3[11].i32[1])) {
            return v28;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return v28;
    }
  }
}

char *sub_15FC85C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15FE2C4(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15FC8EC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15FE604(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15FC97C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_15CAD40(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15FCA0C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_1600D90(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15FCA9C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_16217D0(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

uint64_t sub_15FCB2C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  uint64_t result = sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    uint64_t result = sub_16226BC(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

char *sub_15FCBBC(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, __dst);
    }
    uint64_t v7 = *(void *)(a1 + 24);
    char *v4 = 10;
    unsigned int v8 = *(_DWORD *)(v7 + 16);
    v4[1] = v8;
    if (v8 > 0x7F) {
      unsigned int v9 = sub_188A9CC(v8, v4 + 1);
    }
    else {
      unsigned int v9 = v4 + 2;
    }
    uint64_t v4 = sub_15FE3C4(v7, v9, a3);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  char *v4 = 18;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    int v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    int v12 = v4 + 2;
  }
  uint64_t v4 = sub_15FE9B0(v10, (unint64_t)v12, a3);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_21:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 40);
  char *v4 = 26;
  unsigned int v14 = *(_DWORD *)(v13 + 40);
  v4[1] = v14;
  if (v14 > 0x7F) {
    uint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    uint64_t v15 = v4 + 2;
  }
  uint64_t v4 = sub_15FF63C(v13, v15, a3);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_27:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  char *v4 = 34;
  unsigned int v17 = *(_DWORD *)(v16 + 20);
  v4[1] = v17;
  if (v17 > 0x7F) {
    unint64_t v18 = sub_188A9CC(v17, v4 + 1);
  }
  else {
    unint64_t v18 = v4 + 2;
  }
  uint64_t v4 = sub_15CAFD8(v16, (unint64_t)v18, a3);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_33:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  char *v4 = 42;
  unsigned int v20 = *(_DWORD *)(v19 + 20);
  v4[1] = v20;
  if (v20 > 0x7F) {
    uint64_t v21 = sub_188A9CC(v20, v4 + 1);
  }
  else {
    uint64_t v21 = v4 + 2;
  }
  uint64_t v4 = sub_160112C(v19, (unint64_t)v21, a3);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
LABEL_39:
  if (*a3 <= (unint64_t)v4) {
    uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v22 = *(void *)(a1 + 64);
  char *v4 = 50;
  unsigned int v23 = *(_DWORD *)(v22 + 20);
  v4[1] = v23;
  if (v23 > 0x7F) {
    uint64_t v24 = sub_188A9CC(v23, v4 + 1);
  }
  else {
    uint64_t v24 = v4 + 2;
  }
  uint64_t v4 = sub_16219BC(v22, v24, a3);
  if ((v6 & 0x40) != 0)
  {
LABEL_45:
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = (char *)sub_188A3FC((uint64_t)a3, (int)v4);
    }
    uint64_t v25 = *(void *)(a1 + 72);
    char *v4 = 58;
    unsigned int v26 = *(_DWORD *)(v25 + 20);
    v4[1] = v26;
    if (v26 > 0x7F) {
      uint64_t v27 = sub_188A9CC(v26, v4 + 1);
    }
    else {
      uint64_t v27 = v4 + 2;
    }
    uint64_t v4 = sub_1622984(v25, v27, a3);
  }
LABEL_51:
  uint64_t v28 = *(void *)(a1 + 8);
  if ((v28 & 1) == 0) {
    return v4;
  }
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v30 + 31) < 0)
  {
    uint64_t v31 = *(void **)(v30 + 8);
    uint64_t v32 = *(void *)(v30 + 16);
  }
  else
  {
    uint64_t v31 = (void *)(v30 + 8);
    LODWORD(v32) = *(unsigned __int8 *)(v30 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v32)
  {
    uint64_t v33 = (int)v32;
    memcpy(v4, v31, (int)v32);
    v4 += v33;
    return v4;
  }

  return (char *)sub_188A528(a3, (char *)v31, v32, v4);
}

uint64_t sub_15FCF4C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 0x7F) == 0)
  {
    uint64_t v3 = 0;
    goto LABEL_16;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v7 = sub_15FEC78(*(void *)(a1 + 32));
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5)
  {
    unint64_t v17 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v6 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(v17 + 31);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(_DWORD *)(v4 + 16) = v6;
  uint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_10:
  if ((v2 & 4) != 0)
  {
    uint64_t v11 = sub_15FF780(*(void *)(a1 + 40));
    v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 8) == 0)
    {
LABEL_12:
      if ((v2 & 0x10) == 0) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_12;
  }
  uint64_t v12 = sub_15CB184(*(void *)(a1 + 48));
  v3 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v13 = sub_160132C(*(void *)(a1 + 56));
  v3 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_21:
  uint64_t v14 = sub_1621AC0(*(void *)(a1 + 64));
  v3 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v8 = sub_1622AF0(*(void *)(a1 + 72));
    v3 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_16:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    v3 += v16;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

void sub_15FD150(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x7F) == 0) {
    goto LABEL_66;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    uint64_t v5 = *(void *)(a1 + 24);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
      uint64_t v5 = sub_1606034((uint64_t)v7);
      *(void *)(a1 + 24) = v5;
    }
    uint64_t v8 = *(void *(****)(void *))(a2 + 24);
    if (!v8) {
      uint64_t v8 = &off_2540C88;
    }
    unint64_t v9 = (unint64_t)v8[1];
    if (v9) {
      sub_188B4F8((uint64_t *)(v5 + 8), (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
  }
  if ((v4 & 2) != 0)
  {
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(std::string **)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = (std::string *)sub_16060AC((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_2540CA0;
    }
    sub_15FD3FC(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_13:
      if ((v4 & 8) == 0) {
        goto LABEL_14;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 16) |= 4u;
  uint64_t v14 = *(std::string **)(a1 + 40);
  if (!v14)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if (v15) {
      uint64_t v16 = (void *)*v16;
    }
    uint64_t v14 = (std::string *)sub_16061BC((uint64_t)v16);
    *(void *)(a1 + 40) = v14;
  }
  if (*(void *)(a2 + 40)) {
    unint64_t v17 = *(uint64_t (****)())(a2 + 40);
  }
  else {
    unint64_t v17 = &off_2540CE0;
  }
  sub_15FD594(v14, (uint64_t)v17);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_34:
  *(_DWORD *)(a1 + 16) |= 8u;
  unint64_t v18 = *(std::string **)(a1 + 48);
  if (!v18)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    unsigned int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19) {
      unsigned int v20 = (void *)*v20;
    }
    unint64_t v18 = (std::string *)sub_15CBCB8((uint64_t)v20);
    *(void *)(a1 + 48) = v18;
  }
  if (*(void *)(a2 + 48)) {
    uint64_t v21 = *(uint64_t (****)())(a2 + 48);
  }
  else {
    uint64_t v21 = &off_253FB28;
  }
  sub_15CB268(v18, (uint64_t)v21);
  if ((v4 & 0x10) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_42:
  *(_DWORD *)(a1 + 16) |= 0x10u;
  uint64_t v22 = *(void **)(a1 + 56);
  if (!v22)
  {
    uint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      uint64_t v24 = (void *)*v24;
    }
    uint64_t v22 = sub_160638C((uint64_t)v24);
    *(void *)(a1 + 56) = v22;
  }
  if (*(void *)(a2 + 56)) {
    uint64_t v25 = *(uint64_t (****)())(a2 + 56);
  }
  else {
    uint64_t v25 = &off_2540D90;
  }
  sub_15FD664((uint64_t)v22, (uint64_t)v25);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_66;
    }
    goto LABEL_58;
  }
LABEL_50:
  *(_DWORD *)(a1 + 16) |= 0x20u;
  unsigned int v26 = *(std::string **)(a1 + 64);
  if (!v26)
  {
    uint64_t v27 = *(void *)(a1 + 8);
    uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
    if (v27) {
      uint64_t v28 = (void *)*v28;
    }
    unsigned int v26 = (std::string *)sub_1623650((uint64_t)v28);
    *(void *)(a1 + 64) = v26;
  }
  if (*(void *)(a2 + 64)) {
    unint64_t v29 = *(uint64_t (****)(uint64_t))(a2 + 64);
  }
  else {
    unint64_t v29 = &off_2541900;
  }
  sub_142E300(v26, (uint64_t)v29);
  if ((v4 & 0x40) != 0)
  {
LABEL_58:
    *(_DWORD *)(a1 + 16) |= 0x40u;
    unint64_t v30 = *(std::string **)(a1 + 72);
    if (!v30)
    {
      uint64_t v31 = *(void *)(a1 + 8);
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      unint64_t v30 = (std::string *)sub_16237E8((uint64_t)v32);
      *(void *)(a1 + 72) = v30;
    }
    if (*(void *)(a2 + 72)) {
      uint64_t v33 = *(uint64_t (****)(uint64_t))(a2 + 72);
    }
    else {
      uint64_t v33 = &off_2541978;
    }
    sub_15D361C(v30, (uint64_t)v33);
  }
LABEL_66:
  uint64_t v34 = *(void *)(a2 + 8);
  if (v34)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v34 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

std::string *sub_15FD3FC(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0x3F) != 0)
  {
    if (v4)
    {
      uint64_t v5 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(result->__r_.__value_.__r.__words[2]) |= 1u;
      uint64_t v6 = (std::string **)&result[1];
      std::string::size_type size = v3->__r_.__value_.__l.__size_;
      uint64_t v8 = (uint64_t *)(size & 0xFFFFFFFFFFFFFFFCLL);
      if (size) {
        uint64_t v8 = (uint64_t *)*v8;
      }
      uint64_t result = sub_1881DF4(v6, v5, v8);
    }
    if ((v4 & 2) != 0)
    {
      unint64_t v9 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
      std::string::size_type v10 = v3->__r_.__value_.__l.__size_;
      uint64_t v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (uint64_t *)*v11;
      }
      uint64_t result = sub_1881DF4((std::string **)&v3[1].__r_.__value_.__l.__size_, v9, v11);
    }
    if ((v4 & 4) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
      uint64_t v13 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
      if (!v13)
      {
        std::string::size_type v14 = v3->__r_.__value_.__l.__size_;
        uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
        if (v14) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v13 = (std::string *)sub_15C6120((uint64_t)v15);
        v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v13;
      }
      if (*(void *)(a2 + 40)) {
        uint64_t v16 = *(uint64_t (****)())(a2 + 40);
      }
      else {
        uint64_t v16 = &off_253F7C8;
      }
      uint64_t result = sub_12D45B4(v13, (uint64_t)v16);
      if ((v4 & 8) == 0)
      {
LABEL_12:
        if ((v4 & 0x10) == 0) {
          goto LABEL_13;
        }
        goto LABEL_36;
      }
    }
    else if ((v4 & 8) == 0)
    {
      goto LABEL_12;
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
    std::string::pointer data = (std::string *)v3[2].__r_.__value_.__l.__data_;
    if (!data)
    {
      std::string::size_type v18 = v3->__r_.__value_.__l.__size_;
      uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
      if (v18) {
        uint64_t v19 = (void *)*v19;
      }
      std::string::pointer data = (std::string *)sub_15C6120((uint64_t)v19);
      v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
    }
    if (*(void *)(a2 + 48)) {
      unsigned int v20 = *(uint64_t (****)())(a2 + 48);
    }
    else {
      unsigned int v20 = &off_253F7C8;
    }
    uint64_t result = sub_12D45B4(data, (uint64_t)v20);
    if ((v4 & 0x10) == 0)
    {
LABEL_13:
      if ((v4 & 0x20) == 0)
      {
LABEL_15:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v4;
        goto LABEL_16;
      }
LABEL_14:
      HIDWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 60);
      goto LABEL_15;
    }
LABEL_36:
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 56);
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  if (v12)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v12 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

std::string *sub_15FD594(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 32) + 8);
    uint64_t v6 = (std::string **)sub_188CCE4((uint64_t)&result->__r_.__value_.__r.__words[2], *(_DWORD *)(a2 + 24));
    uint64_t result = sub_16396F8((std::string *)&v3->__r_.__value_.__r.__words[2], v6, v5, v4, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    int v7 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v4;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v7;
    std::string::size_type size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v7) {
      *std::string::size_type size = v7;
    }
  }
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    return sub_188B4F8((uint64_t *)&v3->__r_.__value_.__l.__size_, (v9 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

void sub_15FD664(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if ((v4 & 0xF) != 0)
  {
    if (v4)
    {
      uint64_t v6 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 16) |= 1u;
      int v7 = (std::string **)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (uint64_t *)*v9;
      }
      sub_1881DF4(v7, v6, v9);
      if ((v4 & 2) == 0)
      {
LABEL_4:
        if ((v4 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_23;
      }
    }
    else if ((v4 & 2) == 0)
    {
      goto LABEL_4;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    uint64_t v10 = *(void *)(a1 + 32);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = sub_16065B0((uint64_t)v12);
      *(void *)(a1 + 32) = v10;
    }
    if (*(void *)(a2 + 32)) {
      uint64_t v13 = *(uint64_t (****)())(a2 + 32);
    }
    else {
      uint64_t v13 = &off_2540E60;
    }
    sub_1601454(v10, (uint64_t)v13);
    if ((v4 & 4) == 0)
    {
LABEL_5:
      if ((v4 & 8) == 0)
      {
LABEL_7:
        *(_DWORD *)(a1 + 16) |= v4;
        goto LABEL_8;
      }
LABEL_6:
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      goto LABEL_7;
    }
LABEL_23:
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v5 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

uint64_t sub_15FD784(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 2) == 0 || (uint64_t result = sub_15FD7E4(*(void *)(a1 + 32)), result))
  {
    if ((v2 & 4) != 0)
    {
      uint64_t result = sub_15FF830(*(void *)(a1 + 40) + 16);
      if (!result) {
        return result;
      }
      int v2 = *(_DWORD *)(a1 + 16);
    }
    if ((v2 & 0x10) == 0) {
      return 1;
    }
    uint64_t result = sub_15FD830(*(void *)(a1 + 56));
    if (result) {
      return 1;
    }
  }
  return result;
}

BOOL sub_15FD7E4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  return ((v1 & 4) == 0 || (~*(_DWORD *)(*(void *)(a1 + 40) + 16) & 3) == 0)
      && ((v1 & 8) == 0 || (~*(_DWORD *)(*(void *)(a1 + 48) + 16) & 3) == 0);
}

uint64_t sub_15FD828(uint64_t a1)
{
  return sub_15FF830(a1 + 16);
}

BOOL sub_15FD830(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 16) & 2) == 0) {
    return 1;
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v1 + 16) & 4) == 0) {
    return 1;
  }
  BOOL result = sub_1602EE4(*(void *)(v1 + 40));
  if (result) {
    return 1;
  }
  return result;
}

void *sub_15FD868@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackComponentValue");
}

void *sub_15FD878(void *a1)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  sub_16393D4(a1 + 3);
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15FD8F8(void *a1)
{
  sub_15FD878(a1);

  operator delete();
}

uint64_t sub_15FD930(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 32);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 40) + 8);
    do
    {
      uint64_t v4 = *v3++;
      BOOL result = sub_15FC1EC(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(v1 + 32) = 0;
  }
  if ((*(unsigned char *)(v1 + 16) & 3) != 0) {
    *(void *)(v1 + 48) = 0;
  }
  char v6 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = v1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if (v6)
  {
    return sub_188B4AC((uint64_t *)v5);
  }
  return result;
}

char *sub_15FD9C0(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v32 = a2;
  if (sub_11947B8((uint64_t)a3, &v32, a3[11].i32[1])) {
    return v32;
  }
  char v6 = (void *)(a1 + 8);
  while (1)
  {
    int v7 = v32 + 1;
    unsigned int v8 = *v32;
    if (*v32 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if (*v7 < 0)
      {
        int v7 = (char *)sub_188C180((uint64_t)v32, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        int v7 = v32 + 2;
      }
    }
    uint64_t v32 = v7;
    unsigned int v11 = v8 >> 3;
    if (v8 >> 3 == 3)
    {
      if (v8 == 26)
      {
        uint64_t v15 = v7 - 1;
        while (1)
        {
          uint64_t v16 = (unsigned __int8 *)(v15 + 1);
          uint64_t v32 = v15 + 1;
          unint64_t v17 = *(_DWORD **)(a1 + 40);
          if (v17 && (uint64_t v18 = *(int *)(a1 + 32), (int)v18 < *v17))
          {
            *(_DWORD *)(a1 + 32) = v18 + 1;
            uint64_t v19 = *(void *)&v17[2 * v18 + 2];
          }
          else
          {
            sub_1605F18(*(void *)(a1 + 24));
            uint64_t v19 = sub_188CDC8(a1 + 24, v20);
            uint64_t v16 = (unsigned __int8 *)v32;
          }
          uint64_t v15 = sub_15FDCBC(a3, v19, v16);
          uint64_t v32 = v15;
          if (!v15) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v15 || *v15 != 26) {
            goto LABEL_45;
          }
        }
      }
      goto LABEL_14;
    }
    if (v11 != 2) {
      break;
    }
    if (v8 != 16) {
      goto LABEL_14;
    }
    uint64_t v21 = v7 + 1;
    unint64_t v22 = *v7;
    if (*v7 < 0)
    {
      int v23 = *v21;
      int v24 = v22 + (v23 << 7);
      unint64_t v22 = (v24 - 128);
      if (v23 < 0)
      {
        uint64_t v32 = (char *)sub_188C138((uint64_t)v7, (v24 - 128));
        if (!v32) {
          return 0;
        }
        unint64_t v22 = v28;
        goto LABEL_37;
      }
      uint64_t v21 = v7 + 2;
    }
    uint64_t v32 = v21;
LABEL_37:
    if (!sub_13E78E4(v22))
    {
      if (*v6) {
        unint64_t v30 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      }
      else {
        unint64_t v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      }
      int v31 = 2;
      goto LABEL_57;
    }
    *(_DWORD *)(a1 + 16) |= 2u;
    *(_DWORD *)(a1 + 52) = v22;
LABEL_45:
    if (sub_11947B8((uint64_t)a3, &v32, a3[11].i32[1])) {
      return v32;
    }
  }
  if (v11 == 1 && v8 == 8)
  {
    uint64_t v25 = v7 + 1;
    unint64_t v22 = *v7;
    if ((*v7 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    int v26 = *v25;
    int v27 = v22 + (v26 << 7);
    unint64_t v22 = (v27 - 128);
    if (v26 < 0)
    {
      uint64_t v32 = (char *)sub_188C138((uint64_t)v7, (v27 - 128));
      if (!v32) {
        return 0;
      }
      unint64_t v22 = v29;
    }
    else
    {
      uint64_t v25 = v7 + 2;
LABEL_42:
      uint64_t v32 = v25;
    }
    if (v22 <= 7)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      *(_DWORD *)(a1 + 48) = v22;
      goto LABEL_45;
    }
    if (*v6) {
      unint64_t v30 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else {
      unint64_t v30 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
    }
    int v31 = 1;
LABEL_57:
    sub_188C020(v31, v22, v30);
    goto LABEL_45;
  }
LABEL_14:
  if (v8) {
    BOOL v13 = (v8 & 7) == 4;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    if (*v6)
    {
      std::string::size_type v14 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      std::string::size_type v14 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
      int v7 = v32;
    }
    uint64_t v32 = (char *)sub_1885AC0(v8, v14, v7, a3);
    if (!v32) {
      return 0;
    }
    goto LABEL_45;
  }
  if (v7)
  {
    a3[10].i32[0] = v8 - 1;
    return v32;
  }
  return 0;
}

char *sub_15FDCBC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v7 = 0;
  BOOL result = (char *)sub_188BEE0((uint64_t)a1, a3, &v7);
  if (result) {
    BOOL result = sub_15FC4D0(a2, result, a1);
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v6 = a1[3].i32[1] + v7;
  a1[3].i32[1] = v6;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v6 & (v6 >> 31)));
  return result;
}

unsigned char *sub_15FDD4C(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  uint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    if (*a3 <= __dst) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 48);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v10 = *(int *)(a1 + 52);
    unsigned char *v4 = 16;
    v4[1] = v10;
    if (v10 > 0x7F)
    {
      v4[1] = v10 | 0x80;
      unint64_t v11 = v10 >> 7;
      v4[2] = v10 >> 7;
      v4 += 3;
      if (v10 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v12 = v11 >> 14;
          v11 >>= 7;
          *v4++ = v11;
        }
        while (v12);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  int v13 = *(_DWORD *)(a1 + 32);
  if (v13)
  {
    for (int i = 0; i != v13; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
      }
      uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8 * i + 8);
      unsigned char *v4 = 26;
      unsigned int v16 = *(_DWORD *)(v15 + 20);
      v4[1] = v16;
      if (v16 > 0x7F) {
        unint64_t v17 = sub_188A9CC(v16, v4 + 1);
      }
      else {
        unint64_t v17 = v4 + 2;
      }
      uint64_t v4 = sub_15FCBBC(v15, (unint64_t)v17, a3);
    }
  }
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v4;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v4, v21, (int)v22);
    v4 += v23;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v21, v22, v4);
}

uint64_t sub_15FDF8C(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_15FCF4C(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 3) != 0)
  {
    if (v8)
    {
      int v9 = *(_DWORD *)(a1 + 48);
      if (v9 < 0) {
        uint64_t v10 = 11;
      }
      else {
        uint64_t v10 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v2 += v10;
    }
    if ((v8 & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 52);
      if (v11 < 0) {
        uint64_t v12 = 11;
      }
      else {
        uint64_t v12 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v2 += v12;
    }
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    v2 += v16;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

void sub_15FE0B0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(*(void *)(a2 + 40) + 8);
    uint64_t v6 = (uint64_t *)sub_188CCE4(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_163966C((uint64_t *)(a1 + 24), v6, v5, v4, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    int v7 = *(_DWORD *)(a1 + 32) + v4;
    *(_DWORD *)(a1 + 32) = v7;
    int v8 = *(int **)(a1 + 40);
    if (*v8 < v7) {
      int *v8 = v7;
    }
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if ((v9 & 3) != 0)
  {
    if (v9) {
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    }
    if ((v9 & 2) != 0) {
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    }
    *(_DWORD *)(a1 + 16) |= v9;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    sub_188B4F8((uint64_t *)(a1 + 8), (v10 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
}

BOOL sub_15FE1B0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  do
  {
    int v3 = v2;
    if ((int)v2 < 1) {
      break;
    }
    uint64_t v4 = v2 - 1;
    char v5 = sub_15FD784(*(void *)(*(void *)(a1 + 40) + 8 * v2));
    uint64_t v2 = v4;
  }
  while ((v5 & 1) != 0);
  return v3 < 1;
}

void *sub_15FE208@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackComponent");
}

void *sub_15FE218(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = a1[1];
  if ((v2 & 1) != 0 && !*(void *)(v2 & 0xFFFFFFFFFFFFFFFCLL)) {
    sub_10E4F74(a1 + 1);
  }
  *a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15FE28C(void *a1)
{
  sub_15FE218(a1);

  operator delete();
}

char *sub_15FE2C4(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v12 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  while (1)
  {
    if (sub_11947B8((uint64_t)a3, &v12, a3[11].i32[1])) {
      return v12;
    }
    char v5 = v12 + 1;
    unsigned int v6 = *v12;
    if (*v12 < 0)
    {
      unsigned int v7 = v6 + (*v5 << 7);
      unsigned int v6 = v7 - 128;
      if (*v5 < 0)
      {
        char v5 = (char *)sub_188C180((uint64_t)v12, v7 - 128);
        unsigned int v6 = v8;
      }
      else
      {
        char v5 = v12 + 2;
      }
    }
    uint64_t v12 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    if (*v4)
    {
      uint64_t v10 = (std::string *)((*v4 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    }
    else
    {
      uint64_t v10 = (std::string *)sub_188DBD8(v4);
      char v5 = v12;
    }
    uint64_t v12 = (char *)sub_1885AC0(v6, v10, v5, a3);
    if (!v12) {
      return 0;
    }
  }
  if (v5) {
    a3[10].i32[0] = v6 - 1;
  }
  return v5;
}

char *sub_15FE3C4(uint64_t a1, char *__dst, _DWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 1) == 0) {
    return __dst;
  }
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v6 + 31) < 0)
  {
    unsigned int v7 = *(void **)(v6 + 8);
    unint64_t v6 = *(void *)(v6 + 16);
  }
  else
  {
    unsigned int v7 = (void *)(v6 + 8);
    LODWORD(v6) = *(unsigned __int8 *)(v6 + 31);
  }
  if (*(void *)a3 - (void)__dst >= (int)v6)
  {
    uint64_t v8 = (int)v6;
    memcpy(__dst, v7, (int)v6);
    __dst += v8;
    return __dst;
  }

  return (char *)sub_188A528(a3, (char *)v7, v6, __dst);
}

uint64_t sub_15FE45C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v2 = *(void *)(v4 + 16);
    }
    else {
      uint64_t v2 = *(unsigned __int8 *)(v4 + 31);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *(_DWORD *)(a1 + 16) = v2;
  return v2;
}

std::string *sub_15FE490(std::string *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    return sub_188B4F8((uint64_t *)&result->__r_.__value_.__l.__size_, (v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  return result;
}

uint64_t sub_15FE4AC()
{
  return 1;
}

void *sub_15FE4B4@<X0>(void *a1@<X8>)
{
  return sub_5E5C(a1, "geo3.rap2.FeedbackNotification");
}

uint64_t sub_15FE4C4(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
  if (v2)
  {
    if (*v4) {
      goto LABEL_14;
    }
  }
  else if (v4)
  {
    goto LABEL_14;
  }
  char v5 = (void ***)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_2550250) {
    sub_1881C6C(v5);
  }
  if (*(uint64_t **)(a1 + 32) != &qword_2550250) {
    sub_1881C6C((void ***)(a1 + 32));
  }
  if ((uint64_t (***)())a1 != &off_2540CA0)
  {
    unint64_t v6 = *(void **)(a1 + 40);
    if (v6)
    {
      sub_15C27A4(v6);
      operator delete();
    }
    unsigned int v7 = *(void **)(a1 + 48);
    if (v7)
    {
      sub_15C27A4(v7);
      operator delete();
    }
  }
  if (*(unsigned char *)v3) {
    sub_10E4F74(v3);
  }
LABEL_14:
  *(void *)a1 = off_24E6998;
  sub_119475C(v3);
  return a1;
}

void sub_15FE5CC(uint64_t a1)
{
  sub_15FE4C4(a1);

  operator delete();
}

uint64_t sub_15FE604(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v33 = a2;
  if (sub_11947B8((uint64_t)a3, (char **)v33, a3[11].i32[1])) {
    return *(void *)v33;
  }
  unint64_t v6 = (void *)(a1 + 8);
  while (2)
  {
    unsigned int v7 = (unsigned __int8 *)(*(void *)v33 + 1);
    unsigned int v8 = **(unsigned char **)v33;
    if ((char)**(unsigned char **)v33 < 0)
    {
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((char)*v7 < 0)
      {
        unsigned int v7 = (unsigned __int8 *)sub_188C180(*(uint64_t *)v33, v9 - 128);
        unsigned int v8 = v10;
      }
      else
      {
        unsigned int v7 = (unsigned __int8 *)(*(void *)v33 + 2);
      }
    }
    *(void *)uint64_t v33 = v7;
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 8) {
          goto LABEL_44;
        }
        int v11 = (char *)(v7 + 1);
        unint64_t v12 = *v7;
        if (((char)*v7 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        int v13 = *v11;
        int v14 = v12 + (v13 << 7);
        unint64_t v12 = (v14 - 128);
        if (v13 < 0)
        {
          *(void *)uint64_t v33 = sub_188C138((uint64_t)v7, (v14 - 128));
          if (!*(void *)v33) {
            return 0;
          }
          unint64_t v12 = v29;
        }
        else
        {
          int v11 = (char *)(v7 + 2);
LABEL_13:
          *(void *)uint64_t v33 = v11;
        }
        if (v12 <= 0x15)
        {
          *(_DWORD *)(a1 + 16) |= 0x10u;
          *(_DWORD *)(a1 + 56) = v12;
          goto LABEL_52;
        }
        if (*v6) {
          int v31 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
        }
        else {
          int v31 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
        }
        int v32 = 1;
        goto LABEL_64;
      case 2u:
        if (v8 != 18) {
          goto LABEL_44;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v15 = *(void *)(a1 + 8);
        uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          uint64_t v16 = (uint64_t *)*v16;
        }
        unint64_t v17 = (void *)(a1 + 24);
        goto LABEL_43;
      case 3u:
        if (v8 != 26) {
          goto LABEL_44;
        }
        *(_DWORD *)(a1 + 16) |= 4u;
        uint64_t v18 = *(void *)(a1 + 40);
        if (v18) {
          goto LABEL_31;
        }
        uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          uint64_t v19 = (void *)*v19;
        }
        uint64_t v18 = sub_15C6120((uint64_t)v19);
        *(void *)(a1 + 40) = v18;
        goto LABEL_30;
      case 4u:
        if (v8 != 34) {
          goto LABEL_44;
        }
        *(_DWORD *)(a1 + 16) |= 8u;
        uint64_t v18 = *(void *)(a1 + 48);
        if (v18) {
          goto LABEL_31;
        }
        unint64_t v20 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (*v6) {
          unint64_t v20 = (void *)*v20;
        }
        uint64_t v18 = sub_15C6120((uint64_t)v20);
        *(void *)(a1 + 48) = v18;
LABEL_30:
        unsigned int v7 = *(unsigned __int8 **)v33;
LABEL_31:
        uint64_t v21 = sub_12FECD8(a3, v18, v7);
        goto LABEL_51;
      case 5u:
        if (v8 != 40) {
          goto LABEL_44;
        }
        uint64_t v22 = (char *)(v7 + 1);
        unint64_t v12 = *v7;
        if (((char)*v7 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v23 = *v22;
        int v24 = v12 + (v23 << 7);
        unint64_t v12 = (v24 - 128);
        if (v23 < 0)
        {
          *(void *)uint64_t v33 = sub_188C138((uint64_t)v7, (v24 - 128));
          if (!*(void *)v33) {
            return 0;
          }
          unint64_t v12 = v30;
        }
        else
        {
          uint64_t v22 = (char *)(v7 + 2);
LABEL_36:
          *(void *)uint64_t v33 = v22;
        }
        if (v12 > 7)
        {
          if (*v6) {
            int v31 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else {
            int v31 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
          }
          int v32 = 5;
LABEL_64:
          sub_188C020(v32, v12, v31);
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x20u;
          *(_DWORD *)(a1 + 60) = v12;
        }
        goto LABEL_52;
      case 6u:
        if (v8 != 50) {
          goto LABEL_44;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v25 = *(void *)(a1 + 8);
        uint64_t v16 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
        if (v25) {
          uint64_t v16 = (uint64_t *)*v16;
        }
        unint64_t v17 = (void *)(a1 + 32);
LABEL_43:
        int v26 = (std::string *)sub_1880F84(v17, v16);
        uint64_t v21 = (void *)sub_188C244(v26, *(char **)v33, (uint64_t)a3);
        goto LABEL_51;
      default:
LABEL_44:
        if (v8) {
          BOOL v27 = (v8 & 7) == 4;
        }
        else {
          BOOL v27 = 1;
        }
        if (!v27)
        {
          if (*v6)
          {
            unint64_t v28 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFCLL) + 8);
          }
          else
          {
            unint64_t v28 = (std::string *)sub_188DBD8((uint64_t *)(a1 + 8));
            unsigned int v7 = *(unsigned __int8 **)v33;
          }
          uint64_t v21 = sub_1885AC0(v8, v28, (char *)v7, a3);
LABEL_51:
          *(void *)uint64_t v33 = v21;
          if (!v21) {
            return 0;
          }
LABEL_52:
          if (sub_11947B8((uint64_t)a3, (char **)v33, a3[11].i32[1])) {
            return *(void *)v33;
          }
          continue;
        }
        if (!v7) {
          return 0;
        }
        a3[10].i32[0] = v8 - 1;
        return *(void *)v33;
    }
  }
}

unsigned char *sub_15FE9B0(uint64_t a1, unint64_t __dst, unint64_t *a3)
{
  unint64_t v4 = (unsigned char *)__dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 0x10) != 0)
  {
    if (*a3 <= __dst) {
      unint64_t v4 = sub_188A3FC((uint64_t)a3, __dst);
    }
    unint64_t v7 = *(int *)(a1 + 56);
    unsigned char *v4 = 8;
    v4[1] = v7;
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      unint64_t v8 = v7 >> 7;
      v4[2] = v7 >> 7;
      v4 += 3;
      if (v7 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v9 = v8 >> 14;
          v8 >>= 7;
          *v4++ = v8;
        }
        while (v9);
      }
    }
    else
    {
      v4 += 2;
    }
  }
  if (v6)
  {
    unint64_t v4 = sub_117A0AC(a3, 2, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), v4);
    if ((v6 & 4) == 0)
    {
LABEL_10:
      if ((v6 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_10;
  }
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  unsigned char *v4 = 26;
  unsigned int v11 = *(_DWORD *)(v10 + 20);
  v4[1] = v11;
  if (v11 > 0x7F) {
    unint64_t v12 = sub_188A9CC(v11, v4 + 1);
  }
  else {
    unint64_t v12 = v4 + 2;
  }
  unint64_t v4 = sub_15C2A64(v10, (unint64_t)v12, a3);
  if ((v6 & 8) == 0)
  {
LABEL_11:
    if ((v6 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_20:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
  }
  uint64_t v13 = *(void *)(a1 + 48);
  unsigned char *v4 = 34;
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  v4[1] = v14;
  if (v14 > 0x7F) {
    uint64_t v15 = sub_188A9CC(v14, v4 + 1);
  }
  else {
    uint64_t v15 = v4 + 2;
  }
  unint64_t v4 = sub_15C2A64(v13, (unint64_t)v15, a3);
  if ((v6 & 0x20) != 0)
  {
LABEL_26:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_188A3FC((uint64_t)a3, (int)v4);
    }
    unint64_t v16 = *(int *)(a1 + 60);
    unsigned char *v4 = 40;
    v4[1] = v16;
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      unint64_t v17 = v16 >> 7;
      v4[2] = v16 >> 7;
      v4 += 3;
      if (v16 >= 0x4000)
      {
        do
        {
          *(v4 - 1) |= 0x80u;
          unint64_t v18 = v17 >> 14;
          v17 >>= 7;
          *v4++ = v17;
        }
        while (v18);
      }
    }
    else
    {
      v4 += 2;
    }
  }
LABEL_32:
  if ((v6 & 2) != 0) {
    unint64_t v4 = sub_117A0AC(a3, 6, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if ((v19 & 1) == 0) {
    return v4;
  }
  unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(char *)(v21 + 31) < 0)
  {
    uint64_t v22 = *(void **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    uint64_t v22 = (void *)(v21 + 8);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v23)
  {
    uint64_t v24 = (int)v23;
    memcpy(v4, v22, (int)v23);
    v4 += v24;
    return v4;
  }

  return (unsigned char *)sub_188A528(a3, (char *)v22, v23, v4);
}