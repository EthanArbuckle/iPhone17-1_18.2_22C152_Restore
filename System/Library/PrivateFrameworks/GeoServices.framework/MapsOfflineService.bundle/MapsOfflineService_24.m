void sub_A77474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A774C0(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A79C48(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A79E40(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        v17 = *(unsigned int **)(a1 + 256);
        v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A7A044(a1, v6);
        sub_A7A374(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        v7 = *(unsigned int **)(a1 + 208);
        v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A7BF34(a1);
        sub_725D0((uint64_t)v38);
        v12 = *(unsigned int **)(a1 + 328);
        v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A7D748(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A72048(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A7CE94(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A77770@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  v297 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v334) = 0;
  LOBYTE(__p[0]) = 0;
  v295 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v334) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v296 = v5;
  if (v4 >= 2)
  {
    v7 = (char **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v299 = _Q0;
    int v298 = 1;
    v305 = a1;
    v304 = (void **)(a1 + 13);
    while (1)
    {
      sub_A724E0((uint64_t)v7, 0);
      sub_A7D574(v7, v298 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] != v11) {
        break;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v12 = a1[16];
      unsigned int v13 = *v11;
      if ((unsigned int *)a1[14] != v11) {
        goto LABEL_12;
      }
      sub_D2BFC((void **)v7, 1uLL);
      unsigned int v11 = (unsigned int *)a1[13];
      uint64_t v14 = a1[16];
LABEL_15:
      v300 = (unsigned int *)(v14 + 56 * v11[1]);
      v301 = (unsigned int *)(v12 + 56 * v13);
      if (v301 != v300)
      {
        while (1)
        {
          LOWORD(__p[0]) = 0;
          BYTE2(__p[0]) = 0;
          *(void *)&__p[1] = 0;
          *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
          int v334 = 0x7FFFFFFF;
          __int16 v335 = 0;
          unint64_t v336 = 0x8000000080000000;
          __int16 v337 = 0;
          unint64_t v338 = 0x8000000080000000;
          int v339 = 0x7FFFFFFF;
          __int16 v340 = 0;
          unint64_t v341 = 0x8000000080000000;
          __int16 v342 = 0;
          unint64_t v343 = 0x8000000080000000;
          __int16 v344 = 0;
          unint64_t v345 = 0xFFFFFFFF00000000;
          int v346 = -1;
          uint64_t v347 = 0;
          v349 = 0;
          uint64_t v350 = 0;
          uint64_t v351 = 0;
          int v348 = 0x7FFFFFFF;
          int v352 = 100;
          int v353 = -1;
          long long v354 = v299;
          long long v355 = v299;
          long long v356 = v299;
          long long v357 = 0u;
          long long v358 = 0u;
          long long v359 = 0u;
          long long v360 = 0u;
          uint64_t v15 = a1[3];
          long long v361 = 0u;
          long long v362 = 0u;
          if (sub_C259C0(v15 + 3896) && *(void *)(v15 + 3944))
          {
            BOOL v16 = 1;
          }
          else
          {
            uint64_t v17 = a1[3];
            BOOL v16 = sub_C259D4(v17 + 3896) && *(void *)(v17 + 3960) != 0;
          }
          BYTE1(__p[0]) = v16;
          uint64_t v18 = a1[3];
          if (sub_C259D4(v18 + 3896))
          {
            __p[1] = 2 * (*(void *)(v18 + 3960) != 0);
            if (*v301 != -1) {
              break;
            }
            goto LABEL_397;
          }
          __p[1] = 0;
          if (*v301 != -1) {
            break;
          }
LABEL_397:
          sub_A29D50((uint64_t)__p);
          unint64_t v269 = *(void *)(v3 + 16);
          if (v269 >= *(void *)(v3 + 24))
          {
            uint64_t v270 = sub_A4D268(v297, (long long *)__p);
          }
          else
          {
            sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
            uint64_t v270 = v269 + 296;
            *(void *)(v3 + 16) = v269 + 296;
          }
          v7 = (char **)v304;
          *(void *)(v3 + 16) = v270;
          if (*((void *)&v361 + 1))
          {
            *(void *)&long long v362 = *((void *)&v361 + 1);
            operator delete(*((void **)&v361 + 1));
          }
          if ((void)v360)
          {
            *((void *)&v360 + 1) = v360;
            operator delete((void *)v360);
          }
          if (*((void *)&v358 + 1))
          {
            *(void *)&long long v359 = *((void *)&v358 + 1);
            operator delete(*((void **)&v358 + 1));
          }
          v271 = (void **)v357;
          if ((void)v357)
          {
            uint64_t v272 = *((void *)&v357 + 1);
            v273 = (void *)v357;
            if (*((void *)&v357 + 1) != (void)v357)
            {
              do
              {
                v275 = *(void **)(v272 - 40);
                if (v275)
                {
                  *(void *)(v272 - 32) = v275;
                  operator delete(v275);
                }
                v276 = (void **)(v272 - 72);
                uint64_t v277 = *(void *)(v272 - 72);
                if (v277)
                {
                  uint64_t v278 = *(void *)(v272 - 64);
                  v274 = *(void **)(v272 - 72);
                  if (v278 != v277)
                  {
                    do
                    {
                      if (!*(_DWORD *)(v278 - 8))
                      {
                        v279 = *(void **)(v278 - 48);
                        if (v279)
                        {
                          *(void *)(v278 - 40) = v279;
                          operator delete(v279);
                        }
                        v280 = *(void **)(v278 - 80);
                        if (v280)
                        {
                          *(void *)(v278 - 72) = v280;
                          operator delete(v280);
                        }
                        v281 = *(void **)(v278 - 104);
                        if (v281)
                        {
                          *(void *)(v278 - 96) = v281;
                          operator delete(v281);
                        }
                      }
                      v278 -= 168;
                    }
                    while (v278 != v277);
                    v274 = *v276;
                  }
                  *(void *)(v272 - 64) = v277;
                  operator delete(v274);
                  a1 = v305;
                }
                v272 -= 72;
              }
              while (v276 != v271);
              v273 = (void *)v357;
            }
            *((void *)&v357 + 1) = v271;
            operator delete(v273);
          }
          if (SHIBYTE(v351) < 0) {
            operator delete(v349);
          }
          v301 += 14;
          if (v301 == v300) {
            goto LABEL_9;
          }
        }
        uint64_t v19 = v301;
        int v307 = v298;
        unsigned int v308 = *((_DWORD *)a1 + 88);
        while (2)
        {
          v325 = 0;
          v326 = 0;
          unint64_t v327 = 0;
          v330 = 0;
          uint64_t v331 = 0;
          v329 = 0;
          v332[0] = 1;
          *(void *)&v332[4] = 0x8000000080000000;
          *(_WORD *)&v332[12] = 0;
          v332[14] = 0;
          int v384 = -1;
          if (v19[4] == -1) {
            goto LABEL_269;
          }
          long long v309 = xmmword_20E12E0;
          __int16 v310 = 0;
          unint64_t v311 = 0x8000000080000000;
          __int16 v312 = 0;
          *(_OWORD *)v313 = xmmword_20EB6B0;
          *(void *)&v313[16] = 0xFFFFFFFF7FFFFFFFLL;
          long long v315 = 0u;
          long long v316 = 0u;
          long long v317 = 0u;
          int v314 = -1;
          int v318 = 0x7FFFFFFF;
          v320 = 0;
          uint64_t v321 = 0;
          v319 = 0;
          char v322 = 1;
          unint64_t v323 = 0x8000000080000000;
          int v324 = 0;
          char v328 = 0;
          uint64_t v21 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v19[4]);
          *(void *)v313 = v21;
          uint64_t v22 = *(void *)(v19 + 1);
          *(_DWORD *)&v313[16] = v19[3];
          *(void *)&v313[8] = v22;
          int v314 = *v19;
          unsigned int v23 = v314;
          uint64_t v24 = a1[3];
          uint64_t v363 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v308);
          sub_A1E9A0((uint64_t)v364, v24, v21, v23, 0, 0);
          *(void *)&long long v366 = *(void *)&v365[24] + 12 * *(unsigned int *)&v313[8];
          if (LOBYTE(v368[1])) {
            *(void **)((char *)&v368[1] + 4) = *(void **)&v313[12];
          }
          if (*(void *)&v365[16]) {
            uint64_t v25 = *(unsigned int *)(*(void *)&v365[16]
          }
                                  + 4 * ((*(void *)v365 - *(void *)&v364[24]) >> 4));
          else {
            uint64_t v25 = 0;
          }
          sub_A56ED0((uint64_t)v364, &v363, v25);
          _CF = *(void *)v365 < *(void *)&v365[8] && *(void *)v365 >= *(void *)&v364[24];
          uint64_t v27 = (*(void *)v365 - *(void *)&v364[24]) >> 4;
          if (!_CF) {
            LODWORD(v27) = -1;
          }
          *(_DWORD *)&v313[20] = v27;
          uint64_t v28 = a1[4];
          uint64_t v29 = (void *)(a1[3] + 4136);
          unint64_t v30 = *(void *)v313;
          unsigned int v31 = v314;
          uint64_t v32 = HIDWORD(*(void *)v313);
          if (sub_A10E20(v29, *(int *)&v313[4]))
          {
            uint64_t v33 = (int *)sub_A1120C(*(void *)(*v29 + 3944), v30);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v265 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v34 = *v29;
            if (dword_24F7300 == v32)
            {
              uint64_t v35 = *(unsigned int **)(*(void *)(v34 + 3976) + 72);
              if (!v35)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                v290 = (void *)sub_2F404((uint64_t)exception, (long long *)v364);
              }
              uint64_t v36 = (int *)((char *)v35 + *v35);
              v37 = (unsigned __int16 *)((char *)v36 - *v36);
              if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
                v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
              }
              else {
                v39 = 0;
              }
              uint64_t v33 = (int *)sub_A1139C(v39, v30);
            }
            else
            {
              uint64_t v33 = (int *)sub_A11500(v34 + 24, v30, 0, "stop pattern");
            }
          }
          v40 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
            v42 = (unsigned int *)((char *)v33 + v41 + *(unsigned int *)((char *)v33 + v41));
          }
          else {
            v42 = 0;
          }
          unint64_t v43 = __ROR8__(*(void *)sub_A10764(v42, v31), 32);
          uint64_t v44 = *(void *)(v28 + 56) - 1;
          unint64_t v45 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v43 ^ (v43 >> 33))) >> 33));
          unint64_t v46 = v45 ^ (v45 >> 33);
          uint64_t v47 = *(void *)(v28 + 80);
          int v49 = *(_DWORD *)(v28 + 64);
          int v48 = *(_DWORD *)(v28 + 68);
          uint64_t v50 = v46 & v44;
          v51 = (unsigned int *)(v47 + 12 * (v46 & v44));
          unsigned int v53 = *v51;
          unsigned int v52 = v51[1];
          if (v48 == v52 && v49 == v53) {
            goto LABEL_77;
          }
          if (!*(void *)(v28 + 40))
          {
            uint64_t v79 = 1;
            while (__PAIR64__(v52, v53) != v43)
            {
              uint64_t v50 = (v50 + v79) & v44;
              v80 = (unsigned int *)(v47 + 12 * v50);
              unsigned int v53 = *v80;
              unsigned int v52 = v80[1];
              ++v79;
              if (v48 == v52 && v49 == v53) {
                goto LABEL_77;
              }
            }
            a1 = v305;
            if (v50 == -1)
            {
LABEL_112:
              uint64_t v55 = -1;
              goto LABEL_78;
            }
LABEL_74:
            uint64_t v59 = v47 + 12 * v50;
            unsigned int v308 = *(_DWORD *)(v59 + 8);
            if (v308 == -1) {
              goto LABEL_126;
            }
            goto LABEL_159;
          }
          uint64_t v55 = -1;
          uint64_t v56 = 1;
          a1 = v305;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v52 && *(_DWORD *)(v28 + 32) == v53)
            {
              if (v55 == -1) {
                uint64_t v55 = v50;
              }
            }
            else if (__PAIR64__(v52, v53) == v43)
            {
              if (v50 == -1) {
                goto LABEL_112;
              }
              goto LABEL_74;
            }
            uint64_t v50 = (v50 + v56) & v44;
            v57 = (unsigned int *)(v47 + 12 * v50);
            unsigned int v53 = *v57;
            unsigned int v52 = v57[1];
            ++v56;
          }
          while (v48 != v52 || v49 != v53);
          if (v55 != -1) {
            goto LABEL_78;
          }
LABEL_77:
          uint64_t v55 = v50;
LABEL_78:
          if (!sub_A3BA84(v28, 1))
          {
            uint64_t v75 = *(void *)(v28 + 40);
            uint64_t v74 = *(void *)(v28 + 48);
            if ((unint64_t)(v74 - v75) >= 0x1555555555555555) {
              goto LABEL_431;
            }
            uint64_t v61 = *(void *)(v28 + 80);
            if (v75
              && ((v76 = (_DWORD *)(v61 + 12 * v55), *(_DWORD *)(v28 + 36) == v76[1])
                ? (BOOL v77 = *(_DWORD *)(v28 + 32) == *v76)
                : (BOOL v77 = 0),
                  v77))
            {
              *(void *)(v28 + 40) = v75 - 1;
            }
            else
            {
              *(void *)(v28 + 48) = v74 + 1;
            }
            a1 = v305;
            uint64_t v82 = 3 * v55;
            goto LABEL_125;
          }
          uint64_t v60 = *(void *)(v28 + 56) - 1;
          uint64_t v61 = *(void *)(v28 + 80);
          int v63 = *(_DWORD *)(v28 + 64);
          int v62 = *(_DWORD *)(v28 + 68);
          uint64_t v64 = v60 & v46;
          v65 = (unsigned int *)(v61 + 12 * (v60 & v46));
          unsigned int v67 = *v65;
          unsigned int v66 = v65[1];
          uint64_t v68 = *(void *)(v28 + 40);
          if (v62 == v66 && v63 == v67)
          {
            a1 = v305;
            goto LABEL_103;
          }
          if (!v68)
          {
            uint64_t v100 = 1;
            a1 = v305;
            while (__PAIR64__(v66, v67) != v43)
            {
              uint64_t v64 = (v64 + v100) & v60;
              v101 = (unsigned int *)(v61 + 12 * v64);
              unsigned int v67 = *v101;
              unsigned int v66 = v101[1];
              ++v100;
              if (v62 == v66 && v63 == v67)
              {
                uint64_t v68 = 0;
                uint64_t v70 = v64;
                unint64_t v78 = *(void *)(v28 + 48);
                if (v78 >= 0x1555555555555555) {
                  goto LABEL_431;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v64 == -1)
            {
              uint64_t v70 = -1;
              unint64_t v78 = *(void *)(v28 + 48);
              if (v78 - v68 >= 0x1555555555555555)
              {
LABEL_431:
                v286 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v286, "insert overflow");
              }
              goto LABEL_117;
            }
            uint64_t v59 = v61 + 12 * v64;
            unsigned int v308 = *(_DWORD *)(v59 + 8);
            if (v308 != -1) {
              goto LABEL_159;
            }
            goto LABEL_126;
          }
          uint64_t v70 = -1;
          uint64_t v71 = 1;
          a1 = v305;
          do
          {
            if (*(_DWORD *)(v28 + 36) == v66 && *(_DWORD *)(v28 + 32) == v67)
            {
              if (v70 == -1) {
                uint64_t v70 = v64;
              }
            }
            else if (__PAIR64__(v66, v67) == v43)
            {
              goto LABEL_145;
            }
            uint64_t v64 = (v64 + v71) & v60;
            v72 = (unsigned int *)(v61 + 12 * v64);
            unsigned int v67 = *v72;
            unsigned int v66 = v72[1];
            ++v71;
          }
          while (v62 != v66 || v63 != v67);
          if (v70 != -1)
          {
            unint64_t v78 = *(void *)(v28 + 48);
            if (v78 - v68 >= 0x1555555555555555) {
              goto LABEL_431;
            }
            goto LABEL_117;
          }
LABEL_103:
          uint64_t v70 = v64;
          unint64_t v78 = *(void *)(v28 + 48);
          if (v78 - v68 >= 0x1555555555555555) {
            goto LABEL_431;
          }
LABEL_117:
          if (v68
            && ((v83 = (_DWORD *)(v61 + 12 * v70), *(_DWORD *)(v28 + 36) == v83[1])
              ? (BOOL v84 = *(_DWORD *)(v28 + 32) == *v83)
              : (BOOL v84 = 0),
                v84))
          {
            *(void *)(v28 + 40) = v68 - 1;
          }
          else
          {
            *(void *)(v28 + 48) = v78 + 1;
          }
          uint64_t v82 = 3 * v70;
LABEL_125:
          uint64_t v85 = 4 * v82;
          uint64_t v86 = v61 + v85;
          *(void *)uint64_t v86 = v43;
          *(_DWORD *)(v86 + 8) = -1;
          uint64_t v59 = *(void *)(v28 + 80) + v85;
          unsigned int v308 = *(_DWORD *)(v59 + 8);
          if (v308 == -1)
          {
LABEL_126:
            int v87 = *(_DWORD *)(v28 + 112);
            *(_DWORD *)(v28 + 112) = v87 + 1;
            *(_DWORD *)(v59 + 8) = v87;
            v89 = *(char **)(v28 + 96);
            unint64_t v88 = *(void *)(v28 + 104);
            if ((unint64_t)v89 < v88)
            {
              *(void *)v89 = v43;
              uint64_t v90 = (uint64_t)(v89 + 8);
              goto LABEL_158;
            }
            v91 = *(char **)(v28 + 88);
            uint64_t v92 = (v89 - v91) >> 3;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v94 = v88 - (void)v91;
            if (v94 >> 2 > v93) {
              unint64_t v93 = v94 >> 2;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              if (v95 >> 61) {
                sub_188D718();
              }
              unint64_t v96 = v95;
              v97 = (char *)operator new(8 * v95);
              unint64_t v95 = v96;
              v98 = &v97[8 * v92];
              *(void *)v98 = v43;
              uint64_t v90 = (uint64_t)(v98 + 8);
              if (v89 != v91)
              {
LABEL_137:
                unint64_t v99 = v89 - 8 - v91;
                if (v99 < 0x58)
                {
                  a1 = v305;
                  goto LABEL_155;
                }
                a1 = v305;
                if ((unint64_t)(v91 - v97) < 0x20) {
                  goto LABEL_442;
                }
                uint64_t v103 = (v99 >> 3) + 1;
                uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
                v105 = &v89[-v104];
                v98 -= v104;
                v106 = &v97[8 * v92 - 16];
                v107 = (long long *)(v89 - 16);
                uint64_t v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v109 = *v107;
                  *((_OWORD *)v106 - 1) = *(v107 - 1);
                  *(_OWORD *)v106 = v109;
                  v106 -= 32;
                  v107 -= 2;
                  v108 -= 4;
                }
                while (v108);
                v89 = v105;
                if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_442:
                  do
                  {
LABEL_155:
                    uint64_t v110 = *((void *)v89 - 1);
                    v89 -= 8;
                    *((void *)v98 - 1) = v110;
                    v98 -= 8;
                  }
                  while (v89 != v91);
                }
                v89 = *(char **)(v28 + 88);
                *(void *)(v28 + 88) = v98;
                *(void *)(v28 + 96) = v90;
                *(void *)(v28 + 104) = &v97[8 * v95];
                if (v89) {
LABEL_157:
                }
                  operator delete(v89);
LABEL_158:
                *(void *)(v28 + 96) = v90;
                unsigned int v308 = *(_DWORD *)(v59 + 8);
                goto LABEL_159;
              }
            }
            else
            {
              v97 = 0;
              v98 = (char *)(8 * v92);
              *(void *)(8 * v92) = v43;
              uint64_t v90 = 8 * v92 + 8;
              if (v89 != v91) {
                goto LABEL_137;
              }
            }
            a1 = v305;
            *(void *)(v28 + 88) = v98;
            *(void *)(v28 + 96) = v90;
            *(void *)(v28 + 104) = &v97[8 * v95];
            if (v89) {
              goto LABEL_157;
            }
            goto LABEL_158;
          }
LABEL_159:
          v111 = (void *)(a1[3] + 4136);
          unint64_t v112 = *(void *)v313;
          unsigned int v113 = *(_DWORD *)&v313[20];
          uint64_t v114 = HIDWORD(*(void *)v313);
          if (sub_A10E20(v111, *(int *)&v313[4]))
          {
            v115 = (int *)sub_A1120C(*(void *)(*v111 + 3944), v112);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v266 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v116 = *v111;
            if (dword_24F7300 == v114)
            {
              v117 = *(unsigned int **)(*(void *)(v116 + 3976) + 72);
              if (!v117)
              {
                v293 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                v294 = (void *)sub_2F404((uint64_t)v293, (long long *)v364);
              }
              v118 = (int *)((char *)v117 + *v117);
              v119 = (unsigned __int16 *)((char *)v118 - *v118);
              if (*v119 >= 5u && (uint64_t v120 = v119[2]) != 0) {
                v121 = (unsigned int *)((char *)v118 + v120 + *(unsigned int *)((char *)v118 + v120));
              }
              else {
                v121 = 0;
              }
              v115 = (int *)sub_A1139C(v121, v112);
            }
            else
            {
              v115 = (int *)sub_A11500(v116 + 24, v112, 0, "stop pattern");
            }
          }
          v122 = (unsigned __int16 *)((char *)v115 - *v115);
          if (*v122 >= 9u && (uint64_t v123 = v122[4]) != 0) {
            v124 = (unsigned int *)((char *)v115 + v123 + *(unsigned int *)((char *)v115 + v123));
          }
          else {
            v124 = 0;
          }
          DWORD1(v309) = 10 * *(_DWORD *)(sub_A10764(v124, v113) + 8);
          uint64_t v125 = a1[3];
          unint64_t v126 = *(void *)v313;
          v127 = (uint64_t *)(v125 + 4136);
          unsigned int v128 = *(_DWORD *)&v313[20];
          int v129 = *(_DWORD *)&v313[8];
          uint64_t v130 = HIDWORD(*(void *)v313);
          if (sub_A10E20((void *)(v125 + 4136), *(int *)&v313[4]))
          {
            v131 = *(unsigned int **)(*(void *)(*v127 + 3944) + 72);
            if (!v131)
            {
              v282 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v364, "Incident stop pattern quad data requested on nullptr buffer");
              v283 = (void *)sub_2F404((uint64_t)v282, (long long *)v364);
            }
            goto LABEL_180;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v267 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v132 = *v127;
          if (dword_24F7300 == v130)
          {
            v131 = *(unsigned int **)(*(void *)(v132 + 3976) + 72);
            if (!v131)
            {
              v287 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
              v288 = (void *)sub_2F404((uint64_t)v287, (long long *)v364);
            }
LABEL_180:
            v133 = (char *)v131 + *v131;
            v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u)
            {
LABEL_181:
              uint64_t v135 = *((unsigned __int16 *)v134 + 2);
              if (v135) {
                v135 += (uint64_t)&v133[*(unsigned int *)&v133[v135]];
              }
LABEL_185:
              v136 = (int *)(v135 + 4 * v126 + 4 + *(unsigned int *)(v135 + 4 * v126 + 4));
              v137 = (unsigned __int16 *)((char *)v136 - *v136);
              if (*v137 >= 9u && (uint64_t v138 = v137[4]) != 0) {
                v139 = (unsigned int *)((char *)v136 + v138 + *(unsigned int *)((char *)v136 + v138));
              }
              else {
                v139 = 0;
              }
              uint64_t v140 = sub_A10764(v139, v128);
              v141 = &v133[-*(int *)v133];
              if (*(unsigned __int16 *)v141 < 0xBu)
              {
                v142 = 0;
                v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u) {
                  goto LABEL_193;
                }
              }
              else
              {
                v142 = (unsigned int *)*((unsigned __int16 *)v141 + 5);
                if (v142) {
                  v142 = (unsigned int *)((char *)v142 + (void)v133 + *(unsigned int *)((char *)v142 + (void)v133));
                }
                v143 = (unsigned __int16 *)((char *)v136 - *v136);
                if (*v143 >= 0x11u)
                {
LABEL_193:
                  uint64_t v144 = v143[8];
                  if (v143[8]) {
                    LODWORD(v144) = *(int *)((char *)v136 + v144);
                  }
LABEL_197:
                  uint64_t v145 = sub_A108C4(v142, v144+ *(int *)((char *)v136 + v143[2] + *(unsigned int *)((char *)v136 + v143[2])) * v129+ *(unsigned __int8 *)(v140 + 14));
                  if (v145)
                  {
                    uint64_t v146 = __ROR8__(*(void *)v145, 32);
                    int v147 = *(_DWORD *)(v145 + 8);
                  }
                  else
                  {
                    int v147 = 0;
                    uint64_t v146 = 0xFFFFFFFFLL;
                  }
                  *(void *)v364 = v146;
                  *(_DWORD *)&v364[8] = v147;
                  v148 = (int *)sub_A11094((void *)(v125 + 4136), v126);
                  v149 = (unsigned __int16 *)((char *)v148 - *v148);
                  if (*v149 >= 9u && (uint64_t v150 = v149[4]) != 0) {
                    v151 = (unsigned int *)((char *)v148 + v150 + *(unsigned int *)((char *)v148 + v150));
                  }
                  else {
                    v151 = 0;
                  }
                  unsigned int v152 = *(unsigned __int16 *)(sub_A10764(v151, v128) + 12);
                  if (*(_DWORD *)&v313[12] == -1) {
                    int v153 = 0x7FFFFFFF;
                  }
                  else {
                    int v153 = *(_DWORD *)&v313[16];
                  }
                  *((void *)&v309 + 1) = sub_A0FAA0((uint64_t *)(v125 + 4184), (unsigned int *)v364, v152, v153);
                  __int16 v310 = v154;
                  uint64_t v155 = a1[3];
                  unint64_t v156 = *(void *)v313;
                  v157 = (uint64_t *)(v155 + 4136);
                  unsigned int v158 = v314;
                  int v159 = *(_DWORD *)&v313[8];
                  uint64_t v160 = HIDWORD(*(void *)v313);
                  if (sub_A10E20((void *)(v155 + 4136), *(int *)&v313[4]))
                  {
                    v161 = *(unsigned int **)(*(void *)(*v157 + 3944) + 72);
                    if (!v161)
                    {
                      v284 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v364, "Incident stop pattern quad data requested on nullptr buffer");
                      v285 = (void *)sub_2F404((uint64_t)v284, (long long *)v364);
                    }
                    goto LABEL_213;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v268 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v162 = *v157;
                  if (dword_24F7300 == v160)
                  {
                    v161 = *(unsigned int **)(*(void *)(v162 + 3976) + 72);
                    if (!v161)
                    {
                      v291 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v364, "Realtime stop pattern quad data requested on nullptr buffer");
                      v292 = (void *)sub_2F404((uint64_t)v291, (long long *)v364);
                    }
LABEL_213:
                    v163 = (char *)v161 + *v161;
                    v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u)
                    {
LABEL_214:
                      uint64_t v165 = *((unsigned __int16 *)v164 + 2);
                      if (v165) {
                        v165 += (uint64_t)&v163[*(unsigned int *)&v163[v165]];
                      }
LABEL_218:
                      v166 = (int *)(v165
                                   + 4 * v156
                                   + 4
                                   + *(unsigned int *)(v165 + 4 * v156 + 4));
                      v167 = (unsigned __int16 *)((char *)v166 - *v166);
                      if (*v167 >= 9u && (uint64_t v168 = v167[4]) != 0) {
                        v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                      }
                      else {
                        v169 = 0;
                      }
                      uint64_t v170 = sub_A10764(v169, v158);
                      v171 = &v163[-*(int *)v163];
                      if (*(unsigned __int16 *)v171 < 0xBu)
                      {
                        v172 = 0;
                        v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u) {
                          goto LABEL_226;
                        }
                      }
                      else
                      {
                        v172 = (unsigned int *)*((unsigned __int16 *)v171 + 5);
                        if (v172) {
                          v172 = (unsigned int *)((char *)v172
                        }
                                                + (void)v163
                                                + *(unsigned int *)((char *)v172 + (void)v163));
                        v173 = (unsigned __int16 *)((char *)v166 - *v166);
                        if (*v173 >= 0x11u)
                        {
LABEL_226:
                          uint64_t v174 = v173[8];
                          if (v173[8]) {
                            LODWORD(v174) = *(int *)((char *)v166 + v174);
                          }
LABEL_230:
                          uint64_t v175 = sub_A108C4(v172, v174+ *(int *)((char *)v166 + v173[2] + *(unsigned int *)((char *)v166 + v173[2])) * v159+ *(unsigned __int8 *)(v170 + 14));
                          if (v175)
                          {
                            uint64_t v176 = __ROR8__(*(void *)v175, 32);
                            int v177 = *(_DWORD *)(v175 + 8);
                          }
                          else
                          {
                            int v177 = 0;
                            uint64_t v176 = 0xFFFFFFFFLL;
                          }
                          *(void *)v364 = v176;
                          *(_DWORD *)&v364[8] = v177;
                          v178 = (int *)sub_A11094((void *)(v155 + 4136), v156);
                          v179 = (unsigned __int16 *)((char *)v178 - *v178);
                          if (*v179 >= 9u && (uint64_t v180 = v179[4]) != 0) {
                            v181 = (unsigned int *)((char *)v178 + v180 + *(unsigned int *)((char *)v178 + v180));
                          }
                          else {
                            v181 = 0;
                          }
                          unsigned int v182 = *(unsigned __int16 *)(sub_A10764(v181, v158) + 12);
                          if (*(_DWORD *)&v313[12] == -1) {
                            int v183 = 0x7FFFFFFF;
                          }
                          else {
                            int v183 = *(_DWORD *)&v313[16];
                          }
                          unint64_t v311 = sub_A0FDF4((uint64_t *)(v155 + 4184), (unsigned int *)v364, v182, v183);
                          __int16 v312 = v184;
                          int v373 = -1;
                          sub_9F6FA0((uint64_t)v364, &v309);
                          int v373 = 0;
                          if (v384)
                          {
                            sub_9F6FA0((uint64_t)v374, (long long *)v364);
                            int v384 = v373;
                            if (!v373) {
                              goto LABEL_250;
                            }
                          }
                          else
                          {
                            *(_OWORD *)v374 = *(_OWORD *)v364;
                            *(_OWORD *)&v374[16] = *(_OWORD *)&v364[16];
                            v375[0] = *(_OWORD *)v365;
                            *(_OWORD *)((char *)v375 + 12) = *(_OWORD *)&v365[12];
                            if (v376[0])
                            {
                              v376[1] = v376[0];
                              operator delete(v376[0]);
                            }
                            *(_OWORD *)v376 = v366;
                            uint64_t v377 = v367;
                            uint64_t v367 = 0;
                            long long v366 = 0uLL;
                            if ((void)v378)
                            {
                              *((void *)&v378 + 1) = v378;
                              operator delete((void *)v378);
                            }
                            long long v378 = *(_OWORD *)v368;
                            v379 = v368[2];
                            memset(v368, 0, sizeof(v368));
                            int v380 = v369;
                            if ((void)v381)
                            {
                              *((void *)&v381 + 1) = v381;
                              operator delete((void *)v381);
                            }
                            long long v381 = v370;
                            uint64_t v382 = v371;
                            uint64_t v371 = 0;
                            long long v370 = 0uLL;
                            long long v383 = v372;
                            if (!v373)
                            {
LABEL_250:
                              if ((void)v370)
                              {
                                *((void *)&v370 + 1) = v370;
                                operator delete((void *)v370);
                              }
                              if (v368[0])
                              {
                                v368[1] = v368[0];
                                operator delete(v368[0]);
                              }
                              if ((void)v366)
                              {
                                *((void *)&v366 + 1) = v366;
                                operator delete((void *)v366);
                              }
                            }
                          }
                          if (v319)
                          {
                            v320 = v319;
                            operator delete(v319);
                          }
                          if (*((void *)&v316 + 1))
                          {
                            *(void *)&long long v317 = *((void *)&v316 + 1);
                            operator delete(*((void **)&v316 + 1));
                          }
                          if ((void)v315)
                          {
                            *((void *)&v315 + 1) = v315;
                            operator delete((void *)v315);
                          }
                          if (v19[4] != -1)
                          {
                            uint64_t v185 = (uint64_t)v326;
                            if ((unint64_t)v326 < v327) {
                              goto LABEL_264;
                            }
LABEL_282:
                            v326 = (char *)sub_A4CBF4((uint64_t *)&v325, (uint64_t)v374);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358)
                            {
LABEL_283:
                              *(void *)uint64_t v186 = 0;
                              *(void *)(v186 + 8) = 0;
                              *(void *)(v186 + 16) = 0;
                              v192 = (char *)v325;
                              v193 = v326;
                              int64_t v194 = v326 - (unsigned char *)v325;
                              if (v326 != v325)
                              {
                                unint64_t v195 = 0xCF3CF3CF3CF3CF3DLL * (v194 >> 3);
                                if (v195 >= 0x186186186186187) {
                                  sub_2E00();
                                }
                                v196 = (char *)operator new(v194);
                                uint64_t v197 = 0;
                                *(void *)uint64_t v186 = v196;
                                *(void *)(v186 + 8) = v196;
                                *(void *)(v186 + 16) = &v196[168 * v195];
                                a1 = v305;
                                do
                                {
                                  v199 = (long long *)&v196[v197];
                                  v200 = (long long *)&v192[v197];
                                  *(_DWORD *)&v196[v197 + 160] = *(_DWORD *)&v192[v197 + 160];
                                  int v201 = *(_DWORD *)&v192[v197 + 160];
                                  if (v201 == 1)
                                  {
                                    long long v198 = *v200;
                                    *(long long *)((char *)v199 + 12) = *(long long *)((char *)v200 + 12);
                                    long long *v199 = v198;
                                  }
                                  else if (!v201)
                                  {
                                    sub_9F6FA0((uint64_t)v199, v200);
                                  }
                                  v197 += 168;
                                }
                                while (&v192[v197] != v193);
                                *(void *)(v186 + 8) = &v196[v197];
                              }
                              char v202 = v328;
                              *(void *)(v186 + 32) = 0;
                              *(unsigned char *)(v186 + 24) = v202;
                              *(void *)(v186 + 40) = 0;
                              *(void *)(v186 + 48) = 0;
                              v203 = v329;
                              uint64_t v204 = v330 - (unsigned char *)v329;
                              if (v330 != v329)
                              {
                                if (0xCCCCCCCCCCCCCCCDLL * (v204 >> 3) >= 0x666666666666667) {
                                  sub_2E00();
                                }
                                v205 = (char *)operator new(v330 - (unsigned char *)v329);
                                *(void *)(v186 + 32) = v205;
                                *(void *)(v186 + 40) = v205;
                                v206 = &v205[8 * (v204 >> 3)];
                                *(void *)(v186 + 48) = v206;
                                memcpy(v205, v203, v204 - 7);
                                *(void *)(v186 + 40) = v206;
                              }
                              uint64_t v207 = *(void *)v332;
                              *(void *)(v186 + 63) = *(void *)&v332[7];
                              *(void *)(v186 + 56) = v207;
                              v187 = (char *)(v186 + 72);
LABEL_296:
                              *((void *)&v357 + 1) = v187;
                              unint64_t v208 = v307 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v308 + 1;
                              unsigned int v209 = v19[5];
                              v210 = (char *)a1[13];
                              v211 = (char *)a1[14];
                              unint64_t v212 = (v211 - v210) >> 3;
                              if (v212 <= v208)
                              {
                                unint64_t v213 = v307 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v308 + 2;
                                unint64_t v214 = v213 - v212;
                                if (v213 <= v212)
                                {
                                  if (v213 < v212)
                                  {
                                    v211 = &v210[8 * v213];
                                    a1[14] = v211;
                                  }
                                }
                                else
                                {
                                  uint64_t v215 = a1[15];
                                  if (v214 <= (v215 - (uint64_t)v211) >> 3)
                                  {
                                    bzero((void *)a1[14], 8 * v214);
                                    v224 = &v211[8 * v214];
                                    a1[14] = v224;
                                    v225 = v304;
                                  }
                                  else
                                  {
                                    uint64_t v216 = v215 - (void)v210;
                                    if (v216 >> 2 > v213) {
                                      unint64_t v213 = v216 >> 2;
                                    }
                                    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
                                      unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      unint64_t v217 = v213;
                                    }
                                    if (v217 >> 61) {
LABEL_432:
                                    }
                                      sub_188D718();
                                    v218 = (char *)operator new(8 * v217);
                                    size_t v219 = 8 * v214;
                                    bzero(&v218[8 * v212], v219);
                                    if (v211 == v210)
                                    {
                                      v225 = v304;
                                      a1 = v305;
                                      v224 = &v218[8 * v212 + v219];
                                      v305[13] = &v218[8 * v212];
                                      v305[14] = v224;
                                      v305[15] = &v218[8 * v217];
                                      if (v211) {
                                        goto LABEL_329;
                                      }
                                    }
                                    else
                                    {
                                      unint64_t v220 = v211 - 8 - v210;
                                      if (v220 < 0x58)
                                      {
                                        v221 = &v218[8 * v212];
                                        v222 = v221;
                                        a1 = v305;
                                        goto LABEL_327;
                                      }
                                      v221 = &v218[8 * v212];
                                      v222 = v221;
                                      a1 = v305;
                                      if ((unint64_t)(v210 - v218) < 0x20) {
                                        goto LABEL_443;
                                      }
                                      uint64_t v226 = (v220 >> 3) + 1;
                                      uint64_t v227 = 8 * (v226 & 0x3FFFFFFFFFFFFFFCLL);
                                      v228 = &v211[-v227];
                                      v222 = &v221[-v227];
                                      v229 = &v218[8 * v212 - 16];
                                      v230 = v211 - 16;
                                      uint64_t v231 = v226 & 0x3FFFFFFFFFFFFFFCLL;
                                      do
                                      {
                                        long long v232 = *(_OWORD *)v230;
                                        *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                                        *(_OWORD *)v229 = v232;
                                        v229 -= 32;
                                        v230 -= 32;
                                        v231 -= 4;
                                      }
                                      while (v231);
                                      v211 = v228;
                                      if (v226 != (v226 & 0x3FFFFFFFFFFFFFFCLL))
                                      {
LABEL_443:
                                        do
                                        {
LABEL_327:
                                          uint64_t v233 = *((void *)v211 - 1);
                                          v211 -= 8;
                                          *((void *)v222 - 1) = v233;
                                          v222 -= 8;
                                        }
                                        while (v211 != v210);
                                      }
                                      v211 = v210;
                                      v225 = v304;
                                      v224 = &v221[v219];
                                      a1[13] = v222;
                                      a1[14] = &v221[v219];
                                      a1[15] = &v218[8 * v217];
                                      if (v210)
                                      {
LABEL_329:
                                        operator delete(v211);
                                        v224 = (char *)a1[14];
                                      }
                                    }
                                  }
                                  v210 = (char *)*v225;
                                  v211 = v224;
                                }
                              }
                              uint64_t v234 = a1[16];
                              unsigned int v235 = *(_DWORD *)&v210[8 * v208];
                              unint64_t v236 = (v211 - v210) >> 3;
                              if (v236 > v208)
                              {
LABEL_332:
                                uint64_t v237 = v234;
                                goto LABEL_355;
                              }
                              unint64_t v238 = (v208 + 1);
                              unint64_t v239 = v238 - v236;
                              if (v238 <= v236)
                              {
                                if (v238 < v236) {
                                  a1[14] = &v210[8 * v238];
                                }
                                goto LABEL_332;
                              }
                              uint64_t v240 = a1[15];
                              if (v239 <= (v240 - (uint64_t)v211) >> 3)
                              {
                                size_t v245 = 8 * v239;
                                bzero(v211, v245);
                                a1[14] = &v211[v245];
                              }
                              else
                              {
                                uint64_t v241 = (v211 - v210) >> 3;
                                unint64_t v242 = v241 + v239;
                                if ((v241 + v239) >> 61) {
                                  sub_2E00();
                                }
                                uint64_t v243 = v240 - (void)v210;
                                if (v243 >> 2 > v242) {
                                  unint64_t v242 = v243 >> 2;
                                }
                                if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v242 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                unint64_t v303 = v242;
                                if (v242)
                                {
                                  if (v242 >> 61) {
                                    goto LABEL_432;
                                  }
                                  v244 = (char *)operator new(8 * v242);
                                }
                                else
                                {
                                  v244 = 0;
                                }
                                size_t v246 = 8 * v239;
                                v247 = &v244[8 * v241];
                                size_t v302 = v246;
                                bzero(v247, v246);
                                if (v211 == v210)
                                {
                                  a1 = v305;
                                  v305[13] = v247;
                                  v305[14] = &v247[v302];
                                  v305[15] = &v244[8 * v303];
                                  if (v211) {
                                    goto LABEL_353;
                                  }
                                }
                                else
                                {
                                  unint64_t v248 = v211 - 8 - v210;
                                  if (v248 < 0x58 || (unint64_t)(v210 - v244) < 0x20)
                                  {
                                    v249 = v211;
                                    v250 = &v244[8 * v241];
                                    a1 = v305;
                                    size_t v251 = v302;
                                    goto LABEL_351;
                                  }
                                  uint64_t v259 = (v248 >> 3) + 1;
                                  uint64_t v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
                                  v249 = &v211[-v260];
                                  v250 = &v247[-v260];
                                  v261 = &v244[8 * v241 - 16];
                                  v262 = v211 - 16;
                                  uint64_t v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
                                  a1 = v305;
                                  do
                                  {
                                    long long v264 = *(_OWORD *)v262;
                                    *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
                                    *(_OWORD *)v261 = v264;
                                    v261 -= 32;
                                    v262 -= 32;
                                    v263 -= 4;
                                  }
                                  while (v263);
                                  size_t v251 = v302;
                                  if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
                                    do
                                    {
LABEL_351:
                                      uint64_t v252 = *((void *)v249 - 1);
                                      v249 -= 8;
                                      *((void *)v250 - 1) = v252;
                                      v250 -= 8;
                                    }
                                    while (v249 != v210);
                                  }
                                  v211 = (char *)*v304;
                                  a1[13] = v250;
                                  a1[14] = &v247[v251];
                                  a1[15] = &v244[8 * v303];
                                  if (v211) {
LABEL_353:
                                  }
                                    operator delete(v211);
                                }
                              }
                              v210 = (char *)a1[13];
                              uint64_t v237 = a1[16];
LABEL_355:
                              uint64_t v19 = (unsigned int *)(v234 + 56 * v235);
                              v253 = (unsigned int *)(v237 + 56 * *(unsigned int *)&v210[8 * v208 + 4]);
                              if (v19 == v253)
                              {
LABEL_358:
                                uint64_t v19 = 0;
                              }
                              else
                              {
                                while (v19[6] != v209)
                                {
                                  v19 += 14;
                                  if (v19 == v253) {
                                    goto LABEL_358;
                                  }
                                }
                              }
                              uint64_t v3 = a2;
                              if (!v384)
                              {
                                if ((void)v381)
                                {
                                  *((void *)&v381 + 1) = v381;
                                  operator delete((void *)v381);
                                }
                                if ((void)v378)
                                {
                                  *((void *)&v378 + 1) = v378;
                                  operator delete((void *)v378);
                                }
                                if (v376[0])
                                {
                                  v376[1] = v376[0];
                                  operator delete(v376[0]);
                                }
                              }
                              if (v329)
                              {
                                v330 = v329;
                                operator delete(v329);
                              }
                              v254 = (char *)v325;
                              if (v325)
                              {
                                v255 = v326;
                                v20 = v325;
                                if (v326 != v325)
                                {
                                  do
                                  {
                                    if (!*((_DWORD *)v255 - 2))
                                    {
                                      v256 = (void *)*((void *)v255 - 6);
                                      if (v256)
                                      {
                                        *((void *)v255 - 5) = v256;
                                        operator delete(v256);
                                      }
                                      v257 = (void *)*((void *)v255 - 10);
                                      if (v257)
                                      {
                                        *((void *)v255 - 9) = v257;
                                        operator delete(v257);
                                      }
                                      v258 = (void *)*((void *)v255 - 13);
                                      if (v258)
                                      {
                                        *((void *)v255 - 12) = v258;
                                        operator delete(v258);
                                      }
                                    }
                                    v255 -= 168;
                                  }
                                  while (v255 != v254);
                                  v20 = v325;
                                }
                                v326 = v254;
                                operator delete(v20);
                              }
                              --v307;
                              if (*v19 == -1) {
                                goto LABEL_397;
                              }
                              continue;
                            }
LABEL_268:
                            v187 = sub_A4CECC((void ***)&v357, (uint64_t)&v325);
                            goto LABEL_296;
                          }
LABEL_269:
                          char v328 = 1;
                          unsigned int v188 = v19[7];
                          unsigned int v189 = v19[3];
                          uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v308);
                          uint64_t v191 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v19);
                          *(_DWORD *)v364 = 0;
                          *(_DWORD *)&v364[4] = v188;
                          *(void *)&v364[12] = v190;
                          *(void *)&v364[20] = v191;
                          *(_DWORD *)&v364[8] = v189;
                          int v373 = 1;
                          if (v384)
                          {
                            if (v384 == 1)
                            {
                              *(_OWORD *)v374 = *(_OWORD *)v364;
                              *(_OWORD *)&v374[12] = *(_OWORD *)&v364[12];
                              goto LABEL_281;
                            }
LABEL_280:
                            *(_OWORD *)v374 = *(_OWORD *)v364;
                            *(_OWORD *)&v374[12] = *(_OWORD *)&v364[12];
                            int v384 = 1;
                          }
                          else
                          {
                            if ((void)v381)
                            {
                              *((void *)&v381 + 1) = v381;
                              operator delete((void *)v381);
                            }
                            if ((void)v378)
                            {
                              *((void *)&v378 + 1) = v378;
                              operator delete((void *)v378);
                            }
                            if (v376[0])
                            {
                              v376[1] = v376[0];
                              operator delete(v376[0]);
                            }
                            if (v373)
                            {
                              if (v373 == 1) {
                                goto LABEL_280;
                              }
                              int v384 = v373;
                            }
                            else
                            {
                              sub_9F6FA0((uint64_t)v374, (long long *)v364);
                              int v384 = v373;
                              if (!v373)
                              {
                                if ((void)v370)
                                {
                                  *((void *)&v370 + 1) = v370;
                                  operator delete((void *)v370);
                                }
                                if (v368[0])
                                {
                                  v368[1] = v368[0];
                                  operator delete(v368[0]);
                                }
                                if ((void)v366)
                                {
                                  *((void *)&v366 + 1) = v366;
                                  operator delete((void *)v366);
                                }
                              }
                            }
                          }
LABEL_281:
                          unsigned int v308 = *v19;
                          uint64_t v185 = (uint64_t)v326;
                          if ((unint64_t)v326 >= v327) {
                            goto LABEL_282;
                          }
LABEL_264:
                          *(_DWORD *)(v185 + 160) = v384;
                          if (v384 == 1)
                          {
                            long long v223 = *(_OWORD *)v374;
                            *(_OWORD *)(v185 + 12) = *(_OWORD *)&v374[12];
                            *(_OWORD *)uint64_t v185 = v223;
                            v326 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358) {
                              goto LABEL_283;
                            }
                          }
                          else
                          {
                            if (!v384) {
                              sub_9F6FA0(v185, (long long *)v374);
                            }
                            v326 = (char *)(v185 + 168);
                            uint64_t v186 = *((void *)&v357 + 1);
                            if (*((void *)&v357 + 1) < (unint64_t)v358) {
                              goto LABEL_283;
                            }
                          }
                          goto LABEL_268;
                        }
                      }
                      LODWORD(v174) = 0;
                      goto LABEL_230;
                    }
                  }
                  else
                  {
                    v163 = sub_A10B80(v162 + 24, v156, 0);
                    v164 = &v163[-*(int *)v163];
                    if (*(unsigned __int16 *)v164 >= 5u) {
                      goto LABEL_214;
                    }
                  }
                  uint64_t v165 = 0;
                  goto LABEL_218;
                }
              }
              LODWORD(v144) = 0;
              goto LABEL_197;
            }
          }
          else
          {
            v133 = sub_A10B80(v132 + 24, v126, 0);
            v134 = &v133[-*(int *)v133];
            if (*(unsigned __int16 *)v134 >= 5u) {
              goto LABEL_181;
            }
          }
          break;
        }
        uint64_t v135 = 0;
        goto LABEL_185;
      }
LABEL_9:
      if (++v298 == v296) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = a1[16];
    unsigned int v13 = *v11;
LABEL_12:
    uint64_t v14 = v12;
    goto LABEL_15;
  }
LABEL_7:
  result = std::string::operator=(v295, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A796A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      unsigned int v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  unsigned int v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        uint64_t v71 = a61;
        if (!a61)
        {
LABEL_15:
          v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      v83 = (void **)STACK[0x2B8];
      BOOL v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        BOOL v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        BOOL v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      BOOL v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      uint64_t v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        uint64_t v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A79C48(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  v7 = *(unsigned int **)(a1 + 256);
  v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  unsigned int v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    BOOL v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  uint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)uint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A79E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A79E40(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v25 = 0x1FFFFFFFDLL;
    int v5 = sub_A3B520(v4, &v25);
    int v26 = v5;
    sub_A724E0(a1 + 104, 0);
    long long v18 = xmmword_20E2060;
    uint64_t v19 = -1;
    int v20 = v3;
    int v21 = v2;
    uint64_t v22 = 0;
    uint64_t v23 = -1;
    int v24 = 0x7FFFFFFF;
    unsigned int v6 = *(unsigned int **)(a1 + 104);
    if (*(unsigned int **)(a1 + 112) == v6
      || (v8 = *v6, unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 104) + 4), v7 == v8))
    {
      sub_A72C48((char **)(a1 + 104), 0, &v18);
    }
    else
    {
      char v12 = 0;
      uint64_t v13 = 56 * v8;
      uint64_t v14 = 56 * v7 - v13;
      uint64_t v15 = (_DWORD *)(v13 + *(void *)(a1 + 128) + 36);
      do
      {
        int v16 = *(v15 - 2);
        if (v16 != 0x7FFFFFFF)
        {
          if (v16 >= v21 && *(v15 - 1) <= (int)v22 && *v15 <= HIDWORD(v22)) {
            goto LABEL_22;
          }
          if (v21 >= v16 && (int)v22 <= *(v15 - 1) && HIDWORD(v22) <= *v15)
          {
            *(v15 - 2) = 0x7FFFFFFF;
            char v12 = 1;
          }
        }
        v15 += 14;
        v14 -= 56;
      }
      while (v14);
      uint64_t v17 = sub_A72C48((char **)(a1 + 104), 0, &v18);
      *(void *)(v17 + 44) = -1;
      *(_DWORD *)(v17 + 52) = 0x7FFFFFFF;
LABEL_22:
      if (v12) {
        sub_A731E8((void **)(a1 + 104), 0);
      }
    }
    int v9 = *(_DWORD *)(a1 + 96);
    unsigned int v10 = v9 + v9 * v5;
    unsigned int v11 = v10 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A7CFD4((void **)(a1 + 104), 0, v11, v10, v9 + v9 * *(_DWORD *)(a1 + 352), 0x80000000)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_A7CFD4((void **)(a1 + 104), 0, v11, v10, 0xFFFFFFFF, 0x80000000)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v26);
  }
}

double sub_A7A044(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v33);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v30 = *(unsigned int **)(a1 + 216);
  if (v4 != v30)
  {
    int v5 = (char **)(a1 + 104);
    while (1)
    {
      unsigned int v32 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v32);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      unsigned int v31 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      unsigned int v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 300;
LABEL_17:
      sub_A724E0((uint64_t)v5, 0);
      sub_A7D574(v5, a2 + 1 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v32, 0);
      uint64_t v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v15)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        unsigned int v17 = *v15;
LABEL_19:
        long long v18 = (unsigned int *)(v16 + 56 * v17);
        uint64_t v19 = v16 + 56 * v15[1];
        if (v18 == (unsigned int *)v19) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_D2BFC((void **)v5, 1uLL);
      uint64_t v15 = *(unsigned int **)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 128);
      unsigned int v17 = *v15;
      if (*(unsigned int **)(a1 + 112) != v15) {
        goto LABEL_19;
      }
      sub_D2BFC((void **)v5, 1uLL);
      long long v18 = (unsigned int *)(v16 + 56 * v17);
      uint64_t v19 = *(void *)(a1 + 128) + 56 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        unsigned int *v18 = v32;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        v18[4] = -1;
        v18[7] = v20 + v11 / -10;
        v18 += 14;
      }
      while (v18 != (unsigned int *)v19);
LABEL_24:
      uint64_t v21 = v32;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        int v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v23 = -1;
        int v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_26:
          if (*v24 > (unint64_t)v32)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + ~a2;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 0x80000000;
LABEL_34:
      int v5 = (char **)(a1 + 104);
      if (sub_A7CFD4((void **)(a1 + 104), 0, a2 + 2 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v32);
      }
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v30) {
        goto LABEL_36;
      }
    }
    unsigned int v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    char v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = 10 * *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v33) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A7A374(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v335);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  v305 = *(unsigned int **)(a1 + 216);
  if (v4 != v305)
  {
    int v316 = a2 + 1;
    int v306 = a2 + 2;
    int v311 = ~a2;
    int v307 = (uint64_t *)(a1 + 232);
    v304 = (void **)(a1 + 256);
    v325 = (void **)(a1 + 104);
    while (1)
    {
      long long v309 = v4;
      unsigned int v5 = *v4;
      unint64_t v6 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v329, *(void *)(a1 + 24), *v6);
      BOOL v7 = v330;
      uint64_t v8 = &v331;
      if (v334) {
        uint64_t v8 = v333;
      }
      if ((unint64_t)v330 < *v8) {
        break;
      }
LABEL_3:
      uint64_t v4 = v309 + 1;
      if (v309 + 1 == v305) {
        goto LABEL_410;
      }
    }
    unsigned int v317 = v5 + 1;
    unsigned int v320 = v5;
LABEL_13:
    unint64_t v12 = __ROR8__(*v7, 32);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v13 + 56) - 1;
    unint64_t v15 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
    unint64_t v16 = v15 ^ (v15 >> 33);
    uint64_t v17 = *(void *)(v13 + 80);
    int v19 = *(_DWORD *)(v13 + 64);
    int v18 = *(_DWORD *)(v13 + 68);
    uint64_t v20 = v16 & v14;
    uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
    unsigned int v23 = *v21;
    unsigned int v22 = v21[1];
    if (v18 != v22 || v19 != v23)
    {
      if (!*(void *)(v13 + 40))
      {
        uint64_t v43 = 1;
        while (__PAIR64__(v22, v23) != v12)
        {
          uint64_t v20 = (v20 + v43) & v14;
          uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v44;
          unsigned int v22 = v44[1];
          ++v43;
          if (v18 == v22 && v19 == v23) {
            goto LABEL_56;
          }
        }
LABEL_53:
        if (v20 != -1)
        {
          uint64_t v46 = v17 + 12 * v20;
          unsigned int v47 = *(_DWORD *)(v46 + 8);
          if (v47 != -1) {
            goto LABEL_110;
          }
          goto LABEL_91;
        }
        uint64_t v25 = -1;
        if (sub_A3BA84(*(void *)(a1 + 32), 1))
        {
LABEL_31:
          uint64_t v29 = *(void *)(v13 + 56) - 1;
          uint64_t v30 = *(void *)(v13 + 80);
          int v32 = *(_DWORD *)(v13 + 64);
          int v31 = *(_DWORD *)(v13 + 68);
          uint64_t v33 = v29 & v16;
          uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
          unsigned int v36 = *v34;
          unsigned int v35 = v34[1];
          uint64_t v37 = *(void *)(v13 + 40);
          if (v31 == v35 && v32 == v36)
          {
LABEL_81:
            uint64_t v39 = v33;
            goto LABEL_82;
          }
          if (v37)
          {
            uint64_t v39 = -1;
            uint64_t v40 = 1;
            do
            {
              if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
              {
                if (v39 == -1) {
                  uint64_t v39 = v33;
                }
              }
              else if (__PAIR64__(v35, v36) == v12)
              {
                goto LABEL_75;
              }
              uint64_t v33 = (v33 + v40) & v29;
              uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
              unsigned int v36 = *v41;
              unsigned int v35 = v41[1];
              ++v40;
            }
            while (v31 != v35 || v32 != v36);
            if (v39 == -1) {
              goto LABEL_81;
            }
LABEL_82:
            uint64_t v57 = *(void *)(v13 + 48);
            if ((unint64_t)(v57 - v37) >= 0x1555555555555555)
            {
LABEL_418:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              sub_2E18(exception, "insert overflow");
            }
            if (v37
              && ((v58 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v58[1])
                ? (BOOL v59 = *(_DWORD *)(v13 + 32) == *v58)
                : (BOOL v59 = 0),
                  v59))
            {
              *(void *)(v13 + 40) = v37 - 1;
            }
            else
            {
              *(void *)(v13 + 48) = v57 + 1;
            }
            uint64_t v60 = v30 + 12 * v39;
            *(void *)uint64_t v60 = v12;
            *(_DWORD *)(v60 + 8) = -1;
            uint64_t v46 = *(void *)(v13 + 80) + 12 * v39;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 == -1) {
              goto LABEL_91;
            }
LABEL_110:
            *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
            unsigned int v322 = v47;
            if (v320 == v47) {
              goto LABEL_358;
            }
            v81 = *(char **)(a1 + 104);
            uint64_t v82 = *(unsigned char **)(a1 + 112);
            uint64_t v83 = v82 - v81;
            if (v82 != v81)
            {
              BOOL v84 = (void **)(a1 + 104);
              uint64_t v85 = *(void *)(a1 + 128);
              unsigned int v86 = *(_DWORD *)v81;
LABEL_125:
              uint64_t v99 = v85;
              goto LABEL_141;
            }
            uint64_t v88 = v83 >> 3;
            unint64_t v89 = 1 - (v83 >> 3);
            uint64_t v90 = *(void *)(a1 + 120);
            BOOL v84 = (void **)(a1 + 104);
            if (v89 <= (v90 - (uint64_t)v82) >> 3)
            {
              bzero(*(void **)(a1 + 112), 8 * v89);
              v98 = &v82[8 * v89];
              *(void *)(a1 + 112) = v98;
              v81 = (char *)*v325;
              uint64_t v85 = *(void *)(a1 + 128);
              unsigned int v86 = *(_DWORD *)*v325;
              if (*v325 != v98) {
                goto LABEL_125;
              }
            }
            else
            {
              uint64_t v91 = v90 - (void)v81;
              uint64_t v92 = v91 >> 2;
              if ((unint64_t)(v91 >> 2) <= 1) {
                uint64_t v92 = 1;
              }
              BOOL v299 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v299) {
                unint64_t v93 = v92;
              }
              if (v93 >> 61) {
                goto LABEL_417;
              }
              uint64_t v94 = 8 * v93;
              unint64_t v95 = (char *)operator new(8 * v93);
              unint64_t v96 = &v95[8 * v88];
              bzero(v96, 8 * v89);
              v97 = &v96[8 * v89];
              *(void *)(a1 + 104) = v96;
              *(void *)(a1 + 112) = v97;
              *(void *)(a1 + 120) = &v95[v94];
              if (v82)
              {
                operator delete(v82);
                v98 = *(char **)(a1 + 112);
                v81 = (char *)*v325;
                uint64_t v85 = *(void *)(a1 + 128);
                unsigned int v86 = *(_DWORD *)*v325;
                if (*v325 != v98) {
                  goto LABEL_125;
                }
              }
              else
              {
                v98 = &v96[8 * v89];
                v81 = (char *)*v325;
                uint64_t v85 = *(void *)(a1 + 128);
                unsigned int v86 = *(_DWORD *)*v325;
                if (*v325 != v97) {
                  goto LABEL_125;
                }
              }
            }
            int v87 = *(char **)(a1 + 120);
            if (v87 != v98)
            {
              *(void *)v98 = 0;
              *(void *)(a1 + 112) = v98 + 8;
LABEL_140:
              v81 = *(char **)(a1 + 104);
              uint64_t v99 = *(void *)(a1 + 128);
LABEL_141:
              sub_A72724(v84, 0, (char *)(v85 + 56 * v86), (unsigned char *)(v99 + 56 * *((unsigned int *)v81 + 1)));
              unint64_t v109 = v316 + *(_DWORD *)(a1 + 96) * v317;
              uint64_t v110 = *(unsigned int **)(a1 + 104);
              v111 = *(unsigned int **)(a1 + 112);
              if (v109 >= ((char *)v111 - (char *)v110) >> 3) {
                goto LABEL_187;
              }
              unsigned int v112 = v110[2 * v109];
              unsigned int v113 = v110[2 * v109 + 1];
              unsigned int v114 = v113 - v112;
              if (v113 == v112) {
                goto LABEL_187;
              }
              int v115 = 0;
              unsigned int v116 = 0;
              do
              {
                v117 = *(unsigned int **)(a1 + 104);
                if (v109 >= (uint64_t)(*(void *)(a1 + 112) - (void)v117) >> 3) {
                  goto LABEL_414;
                }
                unsigned int v118 = v117[2 * v109];
                if (v117[2 * v109 + 1] - v118 <= v116) {
                  goto LABEL_414;
                }
                unint64_t v119 = v118 + v116;
                uint64_t v120 = *(void *)(a1 + 128);
                if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 136) - v120) >> 3) <= v119)
                {
LABEL_415:
                  size_t v302 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  sub_188D9E0(v302, "index out of range");
                  goto LABEL_416;
                }
                uint64_t v121 = v120 + 56 * v119;
                long long v122 = *(_OWORD *)v121;
                long long v123 = *(_OWORD *)(v121 + 16);
                long long v124 = *(_OWORD *)(v121 + 32);
                uint64_t v339 = *(void *)(v121 + 48);
                long long v338 = v124;
                long long v336 = v122;
                long long v337 = v123;
                v127 = v117;
                uint64_t v125 = *v117;
                unsigned int v126 = v127[1];
                if (v126 != v125)
                {
                  int v128 = 0;
                  uint64_t v130 = 56 * v125;
                  uint64_t v131 = 56 * v126 - 56 * v125;
                  uint64_t v132 = (_DWORD *)(v120 + v130 + 36);
                  while (1)
                  {
                    int v133 = *(v132 - 2);
                    if (v133 != 0x7FFFFFFF)
                    {
                      if (v133 >= SHIDWORD(v337) && *(v132 - 1) <= (int)v338 && *v132 <= DWORD1(v338)) {
                        goto LABEL_150;
                      }
                      if (SHIDWORD(v337) >= v133 && (int)v338 <= *(v132 - 1) && DWORD1(v338) <= *v132)
                      {
                        *(v132 - 2) = 0x7FFFFFFF;
                        int v128 = 1;
                      }
                    }
                    v132 += 14;
                    v131 -= 56;
                    if (!v131) {
                      goto LABEL_149;
                    }
                  }
                }
                int v128 = 0;
LABEL_149:
                uint64_t v129 = sub_A72C48((char **)v84, 0, &v336);
                *(void *)(v129 + 44) = -1;
                *(_DWORD *)(v129 + 52) = 0x7FFFFFFF;
LABEL_150:
                v115 |= v128;
                ++v116;
              }
              while (v116 != v114);
              uint64_t v110 = *(unsigned int **)(a1 + 104);
              v111 = *(unsigned int **)(a1 + 112);
              if (v115)
              {
                if (v111 != v110)
                {
                  uint64_t v134 = *(void *)(a1 + 128);
                  unsigned int v135 = *v110;
                  goto LABEL_165;
                }
                sub_D2BFC(v84, 1uLL);
                uint64_t v110 = *(unsigned int **)(a1 + 104);
                uint64_t v134 = *(void *)(a1 + 128);
                unsigned int v135 = *v110;
                if (*(unsigned int **)(a1 + 112) == v110)
                {
                  sub_D2BFC(v84, 1uLL);
                  uint64_t v110 = *(unsigned int **)(a1 + 104);
                  uint64_t v136 = *(void *)(a1 + 128);
                }
                else
                {
LABEL_165:
                  uint64_t v136 = v134;
                }
                v137 = (long long *)(v134 + 56 * v135);
                uint64_t v138 = (long long *)(v136 + 56 * v110[1]);
                if (v137 == v138)
                {
LABEL_184:
                  if (*(unsigned int **)(a1 + 112) == v110) {
                    goto LABEL_185;
                  }
                }
                else
                {
                  while (*((_DWORD *)v137 + 7) != 0x7FFFFFFF)
                  {
                    v137 = (long long *)((char *)v137 + 56);
                    if (v137 == v138)
                    {
                      v137 = v138;
                      if (*(unsigned int **)(a1 + 112) != v110) {
                        goto LABEL_186;
                      }
                      goto LABEL_185;
                    }
                  }
                  if (v137 == v138) {
                    goto LABEL_184;
                  }
                  v139 = (long long *)((char *)v137 + 56);
                  if ((long long *)((char *)v137 + 56) == v138) {
                    goto LABEL_184;
                  }
                  do
                  {
                    if (*((_DWORD *)v139 + 7) != 0x7FFFFFFF)
                    {
                      long long v144 = *v139;
                      long long v145 = v139[1];
                      long long v146 = v139[2];
                      *((void *)v137 + 6) = *((void *)v139 + 6);
                      v137[1] = v145;
                      v137[2] = v146;
                      long long *v137 = v144;
                      v137 = (long long *)((char *)v137 + 56);
                    }
                    v139 = (long long *)((char *)v139 + 56);
                  }
                  while (v139 != v138);
                  uint64_t v110 = (unsigned int *)*v84;
                  if (*(void **)(a1 + 112) == *v84)
                  {
LABEL_185:
                    sub_D2BFC(v84, 1uLL);
                    uint64_t v110 = (unsigned int *)*v84;
                  }
                }
LABEL_186:
                sub_A72724(v84, 0, (char *)v137, (unsigned char *)(*(void *)(a1 + 128) + 56 * v110[1]));
                uint64_t v110 = *(unsigned int **)(a1 + 104);
                v111 = *(unsigned int **)(a1 + 112);
              }
LABEL_187:
              uint64_t v140 = (char *)v111 - (char *)v110;
              if (v111 != v110)
              {
                uint64_t v141 = *(void *)(a1 + 128);
                unsigned int v142 = *v110;
                goto LABEL_203;
              }
              uint64_t v147 = v140 >> 3;
              unint64_t v148 = 1 - (v140 >> 3);
              uint64_t v149 = *(void *)(a1 + 120);
              if (v148 <= (v149 - (uint64_t)v111) >> 3)
              {
                bzero(v110, 8 * v148);
                unint64_t v156 = &v110[2 * v148];
                *(void *)(a1 + 112) = v156;
                uint64_t v110 = (unsigned int *)*v84;
                uint64_t v141 = *(void *)(a1 + 128);
                unsigned int v142 = *(_DWORD *)*v84;
                if (*v84 != v156) {
                  goto LABEL_203;
                }
                goto LABEL_189;
              }
              uint64_t v150 = v149 - (void)v110;
              uint64_t v151 = v150 >> 2;
              if ((unint64_t)(v150 >> 2) <= 1) {
                uint64_t v151 = 1;
              }
              BOOL v299 = (unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8;
              unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v299) {
                unint64_t v152 = v151;
              }
              if (v152 >> 61) {
                goto LABEL_417;
              }
              uint64_t v153 = 8 * v152;
              __int16 v154 = (char *)operator new(8 * v152);
              uint64_t v155 = &v154[8 * v147];
              bzero(v155, 8 * v148);
              unint64_t v156 = (unsigned int *)&v155[8 * v148];
              *(void *)(a1 + 104) = v155;
              *(void *)(a1 + 112) = v156;
              *(void *)(a1 + 120) = &v154[v153];
              if (v110)
              {
                operator delete(v110);
                unint64_t v156 = *(unsigned int **)(a1 + 112);
              }
              uint64_t v110 = (unsigned int *)*v84;
              uint64_t v141 = *(void *)(a1 + 128);
              unsigned int v142 = *(_DWORD *)*v84;
              if (*v84 != v156)
              {
LABEL_203:
                uint64_t v157 = v141;
                goto LABEL_221;
              }
LABEL_189:
              v143 = *(unsigned int **)(a1 + 120);
              if (v143 == v156)
              {
                uint64_t v158 = 1;
                uint64_t v159 = (char *)v143 - (char *)v110;
                if ((unint64_t)(v159 >> 2) > 1) {
                  uint64_t v158 = v159 >> 2;
                }
                if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v160 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v160 = v158;
                }
                if (v160)
                {
                  if (v160 >> 61) {
LABEL_417:
                  }
                    sub_188D718();
                  v161 = (char *)operator new(8 * v160);
                  uint64_t v162 = v161;
                  *(void *)v161 = 0;
                  uint64_t v163 = (uint64_t)(v161 + 8);
                  if (v156 != v110)
                  {
LABEL_214:
                    unint64_t v164 = (char *)(v156 - 2) - (char *)v110;
                    if (v164 < 0x58 || (unint64_t)((char *)v156 - v161) < 0x20)
                    {
                      uint64_t v165 = v156;
                      goto LABEL_217;
                    }
                    uint64_t v275 = (v164 >> 3) + 1;
                    uint64_t v276 = 8 * (v275 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v165 = &v156[v276 / 0xFFFFFFFFFFFFFFFCLL];
                    v162 -= v276;
                    uint64_t v277 = v161 - 16;
                    uint64_t v278 = v156 - 4;
                    uint64_t v279 = v275 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v280 = *(_OWORD *)v278;
                      *((_OWORD *)v277 - 1) = *((_OWORD *)v278 - 1);
                      *(_OWORD *)uint64_t v277 = v280;
                      v277 -= 32;
                      v278 -= 8;
                      v279 -= 4;
                    }
                    while (v279);
                    if (v275 != (v275 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_217:
                        uint64_t v166 = *((void *)v165 - 1);
                        v165 -= 2;
                        *((void *)v162 - 1) = v166;
                        v162 -= 8;
                      }
                      while (v165 != v110);
                    }
                    unint64_t v156 = (unsigned int *)*v84;
                    *(void *)(a1 + 104) = v162;
                    *(void *)(a1 + 112) = v163;
                    *(void *)(a1 + 120) = &v161[8 * v160];
                    if (!v156) {
                      goto LABEL_220;
                    }
LABEL_219:
                    operator delete(v156);
                    goto LABEL_220;
                  }
                }
                else
                {
                  v161 = 0;
                  uint64_t v162 = 0;
                  *(void *)&def_332C = 0;
                  uint64_t v163 = 8;
                  if (v156 != v110) {
                    goto LABEL_214;
                  }
                }
                *(void *)(a1 + 104) = v162;
                *(void *)(a1 + 112) = v163;
                *(void *)(a1 + 120) = &v161[8 * v160];
                if (!v156) {
                  goto LABEL_220;
                }
                goto LABEL_219;
              }
              *(void *)unint64_t v156 = 0;
              *(void *)(a1 + 112) = v156 + 2;
LABEL_220:
              uint64_t v110 = *(unsigned int **)(a1 + 104);
              uint64_t v157 = *(void *)(a1 + 128);
LABEL_221:
              v167 = (unsigned int *)(v141 + 56 * v142);
              uint64_t v168 = (unsigned int *)(v157 + 56 * v110[1]);
              if (v167 != v168)
              {
                v169 = v330;
                do
                {
                  unsigned int *v167 = v320;
                  unsigned int v170 = v167[7];
                  unsigned int v171 = v167[8];
                  v167[3] = v170;
                  v167[4] = -1;
                  int v172 = *((_DWORD *)v169 + 2);
                  int v173 = v172 / -10;
                  int v174 = v172 / 10;
                  int v175 = v172 % 10;
                  if (v172 < 0) {
                    char v176 = -5;
                  }
                  else {
                    char v176 = 5;
                  }
                  int v177 = (char)(v176 + v175);
                  v167[7] = v173 + v170 + (((-103 * v177) >> 15) & 1) + ((-103 * v177) >> 10);
                  v167[8] = v171 + v174 + (((103 * v177) >> 15) & 1) + ((103 * v177) >> 10);
                  v167 += 14;
                }
                while (v167 != v168);
              }
              int v178 = *(_DWORD *)(a1 + 96);
              if (!*(unsigned char *)(a1 + 20))
              {
                unsigned int v324 = -1;
                unint64_t v179 = v322;
                uint64_t v180 = *(unint64_t **)(a1 + 48);
                if (v180) {
                  goto LABEL_229;
                }
LABEL_236:
                int v184 = 0x80000000;
                uint64_t v185 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v185) {
                  goto LABEL_358;
                }
                goto LABEL_241;
              }
              unsigned int v324 = v178 + v178 * *(_DWORD *)(a1 + 352) + 1;
              unint64_t v179 = v322;
              uint64_t v180 = *(unint64_t **)(a1 + 48);
              if (!v180) {
                goto LABEL_236;
              }
LABEL_229:
              if (*v180 <= v179)
              {
                int v184 = 0x7FFFFFFF;
                uint64_t v185 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v185) {
                  goto LABEL_358;
                }
              }
              else
              {
                unsigned int v181 = 0;
                unsigned int v182 = *(_DWORD *)(a1 + 100) + v311;
                unsigned int v183 = v182;
                do
                {
                  if (v181 > v182)
                  {
                    int v184 = 0x7FFFFFFF;
                    uint64_t v185 = *(_DWORD **)(a1 + 104);
                    if (*(_DWORD **)(a1 + 112) == v185) {
                      goto LABEL_358;
                    }
                    goto LABEL_241;
                  }
                  int v184 = *(_DWORD *)sub_A3F53C(v180 + 2, v180[1] * v179 + v183);
                  v181 += 2;
                  v183 -= 2;
                }
                while (v184 == 0x7FFFFFFF);
                uint64_t v185 = *(_DWORD **)(a1 + 104);
                if (*(_DWORD **)(a1 + 112) == v185) {
                  goto LABEL_358;
                }
              }
LABEL_241:
              int v186 = v185[1];
              int v187 = v186 - *v185;
              if (v186 == *v185) {
                goto LABEL_358;
              }
              if (v184 == 0x7FFFFFFF)
              {
                unsigned int v188 = 0;
                while (v185[1] - *v185 > v188)
                {
                  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) <= (unint64_t)(v188 + *v185)) {
                    goto LABEL_415;
                  }
                  if (v187 == ++v188) {
                    goto LABEL_358;
                  }
                }
LABEL_414:
                size_t v302 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v302, "key does not exist and cannot be added");
LABEL_416:
              }
              unint64_t v310 = v179;
              unsigned int v189 = 0;
              unint64_t v308 = v322 + 1;
              unint64_t v190 = (v178 * v308 + 1);
              __int16 v327 = 0;
              unint64_t v318 = v324 + 1;
              unint64_t v319 = (v306 + v178 * v308);
              int v323 = v186 - *v185;
              unint64_t v321 = v190;
LABEL_255:
              v192 = *(char **)(a1 + 104);
              v193 = *(char **)(a1 + 112);
              uint64_t v194 = v193 - v192;
              if (v193 == v192 || *((_DWORD *)v192 + 1) - *(_DWORD *)v192 <= v189) {
                goto LABEL_414;
              }
              unint64_t v195 = *(_DWORD *)v192 + v189;
              uint64_t v196 = *(void *)(a1 + 128);
              if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 136) - v196) >> 3) <= v195) {
                goto LABEL_415;
              }
              uint64_t v197 = v196 + 56 * v195;
              long long v199 = *(_OWORD *)(v197 + 16);
              long long v198 = *(_OWORD *)(v197 + 32);
              long long v200 = *(_OWORD *)v197;
              uint64_t v339 = *(void *)(v197 + 48);
              long long v338 = v198;
              long long v336 = v200;
              long long v337 = v199;
              if (SHIDWORD(v199) < v184) {
                goto LABEL_254;
              }
              if (v324 == -1)
              {
                v211 = (char **)(a1 + 104);
                if (v190 >= (uint64_t)(*(void *)(a1 + 112) - (void)v192) >> 3) {
                  goto LABEL_326;
                }
                goto LABEL_325;
              }
              unint64_t v201 = v194 >> 3;
              if (v194 >> 3 <= (unint64_t)v324)
              {
                unint64_t v202 = v318 - v201;
                if (v318 > v201)
                {
                  uint64_t v203 = *(void *)(a1 + 120);
                  if (v202 <= (v203 - (uint64_t)v193) >> 3)
                  {
                    bzero(v193, 8 * v202);
                    v193 += 8 * v202;
                    *(void *)(a1 + 112) = v193;
LABEL_282:
                    v192 = *(char **)(a1 + 104);
                    uint64_t v196 = *(void *)(a1 + 128);
                    int v187 = v323;
                    unint64_t v190 = v321;
                    goto LABEL_283;
                  }
                  uint64_t v204 = v203 - (void)v192;
                  uint64_t v205 = v204 >> 2;
                  if (v204 >> 2 <= v318) {
                    uint64_t v205 = v324 + 1;
                  }
                  BOOL v299 = (unint64_t)v204 >= 0x7FFFFFFFFFFFFFF8;
                  unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v299) {
                    unint64_t v206 = v205;
                  }
                  if (v206 >> 61) {
                    goto LABEL_417;
                  }
                  uint64_t v314 = 8 * v206;
                  __int16 v312 = operator new(8 * v206);
                  uint64_t v207 = &v312[8 * v201];
                  bzero(v207, 8 * v202);
                  unint64_t v208 = v193 - 8 - v192;
                  if (v208 >= 0x58)
                  {
                    v210 = v312;
                    unsigned int v209 = &v312[8 * v201];
                    if ((unint64_t)(&v193[-(v194 & 0xFFFFFFFFFFFFFFF8)] - v312) >= 0x20)
                    {
                      uint64_t v212 = (v208 >> 3) + 1;
                      uint64_t v213 = 8 * (v212 & 0x3FFFFFFFFFFFFFFCLL);
                      unint64_t v214 = &v193[-v213];
                      unsigned int v209 = &v207[-v213];
                      uint64_t v215 = &v312[8 * v201 - 16];
                      uint64_t v216 = (long long *)(v193 - 16);
                      uint64_t v217 = v212 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v218 = *v216;
                        *(v215 - 1) = *(v216 - 1);
                        *uint64_t v215 = v218;
                        v215 -= 2;
                        v216 -= 2;
                        v217 -= 4;
                      }
                      while (v217);
                      v193 = v214;
                      if (v212 == (v212 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_281;
                      }
                    }
                  }
                  else
                  {
                    unsigned int v209 = &v312[8 * v201];
                    v210 = v312;
                  }
                  do
                  {
                    uint64_t v219 = *((void *)v193 - 1);
                    v193 -= 8;
                    *((void *)v209 - 1) = v219;
                    v209 -= 8;
                  }
                  while (v193 != v192);
LABEL_281:
                  *(void *)(a1 + 104) = v209;
                  *(void *)(a1 + 112) = &v207[8 * v202];
                  *(void *)(a1 + 120) = &v210[v314];
                  operator delete(v192);
                  v193 = *(char **)(a1 + 112);
                  goto LABEL_282;
                }
                if (v318 < v201)
                {
                  v193 = &v192[8 * v318];
                  *(void *)(a1 + 112) = v193;
                }
              }
LABEL_283:
              unsigned int v220 = *(_DWORD *)&v192[8 * v324];
              unint64_t v221 = (v193 - v192) >> 3;
              if (v221 > v324)
              {
                uint64_t v222 = v196;
                v211 = (char **)(a1 + 104);
                goto LABEL_314;
              }
              unint64_t v223 = v318 - v221;
              if (v318 <= v221)
              {
                v211 = (char **)(a1 + 104);
                if (v318 < v221) {
                  *(void *)(a1 + 112) = &v192[8 * v318];
                }
                uint64_t v222 = v196;
LABEL_314:
                uint64_t v243 = (_DWORD *)(v196 + 56 * v220);
                for (i = (_DWORD *)(v222 + 56 * *(unsigned int *)&v192[8 * v324 + 4]); v243 != i; v243 += 14)
                {
                  int v245 = v243[7];
                  BOOL v246 = v245 == 0x7FFFFFFF || v245 < SHIDWORD(v337);
                  if (!v246 && v243[8] <= (int)v338 && v243[9] <= DWORD1(v338))
                  {
                    __int16 v191 = 0;
                    __int16 v247 = 0;
                    goto LABEL_253;
                  }
                }
                uint64_t v196 = v222;
                if (v190 >= (uint64_t)(*(void *)(a1 + 112) - (void)v192) >> 3) {
                  goto LABEL_326;
                }
LABEL_325:
                uint64_t v249 = *(unsigned int *)&v192[8 * v190];
                unsigned int v248 = *(_DWORD *)&v192[8 * v190 + 4];
                if (v248 != v249)
                {
                  __int16 v247 = 0;
                  uint64_t v256 = 56 * v249;
                  uint64_t v257 = 56 * v248 - v256;
                  v258 = (_DWORD *)(v196 + v256 + 36);
                  do
                  {
                    int v259 = *(v258 - 2);
                    if (v259 != 0x7FFFFFFF)
                    {
                      if (v259 >= SHIDWORD(v337) && *(v258 - 1) <= (int)v338 && *v258 <= DWORD1(v338))
                      {
                        __int16 v191 = 0;
                        goto LABEL_253;
                      }
                      if (SHIDWORD(v337) >= v259 && (int)v338 <= *(v258 - 1) && DWORD1(v338) <= *v258)
                      {
                        *(v258 - 2) = 0x7FFFFFFF;
                        __int16 v247 = 1;
                      }
                    }
                    v258 += 14;
                    v257 -= 56;
                  }
                  while (v257);
                  goto LABEL_327;
                }
LABEL_326:
                __int16 v247 = 0;
LABEL_327:
                uint64_t v250 = sub_A72C48(v211, v190, &v336);
                *(void *)(v250 + 44) = -1;
                *(_DWORD *)(v250 + 52) = 0x7FFFFFFF;
                uint64_t v251 = *(void *)(a1 + 104);
                if (v319 >= (*(void *)(a1 + 112) - v251) >> 3
                  || (uint64_t v253 = *(unsigned int *)(v251 + 8 * v319),
                      unsigned int v252 = *(_DWORD *)(v251 + 8 * v319 + 4),
                      v252 == v253))
                {
LABEL_329:
                  uint64_t v254 = sub_A72C48(v211, v319, &v336);
                  *(void *)(v254 + 44) = -1;
                  *(_DWORD *)(v254 + 52) = 0x7FFFFFFF;
                  int v255 = *(_DWORD *)(a1 + 176);
                  *(_DWORD *)(a1 + 176) = v255 + 1;
                  *(_DWORD *)(v254 + 24) = v255;
                  *(_DWORD *)(v254 + 20) = DWORD2(v337);
                  goto LABEL_330;
                }
                uint64_t v260 = 56 * v253;
                uint64_t v261 = 56 * v252 - v260;
                v262 = (_DWORD *)(*(void *)(a1 + 128) + v260 + 36);
                while (1)
                {
                  int v263 = *(v262 - 2);
                  if (v263 != 0x7FFFFFFF)
                  {
                    if (v263 >= SHIDWORD(v337) && *(v262 - 1) <= (int)v338 && *v262 <= DWORD1(v338))
                    {
                      uint64_t v254 = 0;
LABEL_330:
                      *(void *)(v254 + 44) = -1;
                      *(_DWORD *)(v254 + 52) = 0x7FFFFFFF;
                      __int16 v191 = 1;
                      int v187 = v323;
                      unint64_t v190 = v321;
LABEL_253:
                      v327 |= v191 | (v247 << 8);
LABEL_254:
                      if (++v189 != v187) {
                        goto LABEL_255;
                      }
                      if ((v327 & 0xFF00) != 0)
                      {
                        unsigned int v264 = v190;
                        sub_A731E8(v325, v319);
                        sub_A731E8(v325, v264);
                      }
                      if (!(_BYTE)v327) {
                        goto LABEL_358;
                      }
                      if (*(void *)(a1 + 240) <= v310) {
                        sub_A3E96C((uint64_t)v307, v308, 0);
                      }
                      uint64_t v265 = *v307;
                      if ((*(void *)(*v307 + 8 * (v310 >> 6)) & (1 << v310)) != 0)
                      {
LABEL_358:
                        unint64_t v10 = (unint64_t)v331;
                        BOOL v7 = (void *)((char *)v330 + 12);
                        v330 = v7;
                        if (v7 != v331) {
                          goto LABEL_359;
                        }
LABEL_392:
                        BOOL v7 = v332;
                        unint64_t v11 = v333[0];
                        v330 = v332;
                        int v9 = 1;
                        unsigned __int8 v334 = 1;
                        if (*(unsigned char *)(v329 + 16)) {
                          goto LABEL_393;
                        }
                        goto LABEL_10;
                      }
                      int v267 = *(char **)(a1 + 264);
                      unint64_t v266 = *(void *)(a1 + 272);
                      if ((unint64_t)v267 < v266)
                      {
                        *(_DWORD *)int v267 = v322;
                        uint64_t v268 = (uint64_t)(v267 + 4);
                        goto LABEL_391;
                      }
                      v281 = (char *)*v304;
                      uint64_t v282 = v267 - (unsigned char *)*v304;
                      uint64_t v283 = v282 >> 2;
                      unint64_t v284 = (v282 >> 2) + 1;
                      if (v284 >> 62) {
                        sub_2E00();
                      }
                      uint64_t v285 = v266 - (void)v281;
                      if (v285 >> 1 > v284) {
                        unint64_t v284 = v285 >> 1;
                      }
                      if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v284 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      unint64_t v328 = v284;
                      if (!v284)
                      {
                        v286 = 0;
                        v287 = (unsigned int *)(4 * v283);
                        *(_DWORD *)(4 * v283) = v322;
                        uint64_t v268 = 4 * v283 + 4;
                        if (v267 == v281) {
                          goto LABEL_389;
                        }
LABEL_383:
                        unint64_t v288 = v267 - 4 - v281;
                        if (v288 < 0x2C) {
                          goto LABEL_424;
                        }
                        if ((unint64_t)(v267 - &v286[v282]) < 0x20) {
                          goto LABEL_424;
                        }
                        uint64_t v289 = (v288 >> 2) + 1;
                        uint64_t v290 = 4 * (v289 & 0x7FFFFFFFFFFFFFF8);
                        v291 = &v267[-v290];
                        v287 = (unsigned int *)((char *)v287 - v290);
                        v292 = &v286[4 * v283 - 16];
                        v293 = v267 - 16;
                        uint64_t v294 = v289 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          long long v295 = *(_OWORD *)v293;
                          *(v292 - 1) = *((_OWORD *)v293 - 1);
                          _OWORD *v292 = v295;
                          v292 -= 2;
                          v293 -= 32;
                          v294 -= 8;
                        }
                        while (v294);
                        int v267 = v291;
                        if (v289 != (v289 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_424:
                          do
                          {
                            unsigned int v296 = *((_DWORD *)v267 - 1);
                            v267 -= 4;
                            *--v287 = v296;
                          }
                          while (v267 != v281);
                        }
                        goto LABEL_389;
                      }
                      if (v284 >> 62) {
                        goto LABEL_417;
                      }
                      v286 = operator new(4 * v284);
                      v287 = (unsigned int *)&v286[4 * v283];
                      unsigned int *v287 = v322;
                      uint64_t v268 = (uint64_t)(v287 + 1);
                      if (v267 != v281) {
                        goto LABEL_383;
                      }
LABEL_389:
                      *(void *)(a1 + 256) = v287;
                      *(void *)(a1 + 264) = v268;
                      *(void *)(a1 + 272) = &v286[4 * v328];
                      if (v281)
                      {
                        operator delete(v281);
                        uint64_t v265 = *v307;
                      }
LABEL_391:
                      *(void *)(a1 + 264) = v268;
                      *(void *)(v265 + 8 * (v310 >> 6)) |= 1 << v310;
                      unint64_t v10 = (unint64_t)v331;
                      BOOL v7 = (void *)((char *)v330 + 12);
                      v330 = v7;
                      if (v7 == v331) {
                        goto LABEL_392;
                      }
LABEL_359:
                      int v9 = v334;
                      unint64_t v11 = v333[0];
                      if (*(unsigned char *)(v329 + 16))
                      {
LABEL_393:
                        if (v9) {
                          unint64_t v297 = v11;
                        }
                        else {
                          unint64_t v297 = v10;
                        }
                        if ((unint64_t)v7 < v297)
                        {
                          while (1)
                          {
                            unint64_t v298 = __ROR8__(*v7, 32);
                            BOOL v299 = HIDWORD(v298) != 1 || (v298 + 3) >= 2;
                            if (!v299) {
                              break;
                            }
                            if (sub_2AB7E4(**(void **)(v329 + 4120)))
                            {
                              LOBYTE(v9) = v334;
                              BOOL v7 = v330;
                              unint64_t v10 = (unint64_t)v331;
                              break;
                            }
                            unint64_t v10 = (unint64_t)v331;
                            BOOL v7 = (void *)((char *)v330 + 12);
                            v330 = v7;
                            if (v7 == v331)
                            {
                              BOOL v7 = v332;
                              v330 = v332;
                              LOBYTE(v9) = 1;
                              unsigned __int8 v334 = 1;
                              if ((unint64_t)v332 >= v333[0]) {
                                break;
                              }
                            }
                            else
                            {
                              LOBYTE(v9) = v334;
                              v300 = &v331;
                              if (v334) {
                                v300 = v333;
                              }
                              if ((unint64_t)v7 >= *v300) {
                                break;
                              }
                            }
                          }
                          unint64_t v11 = v333[0];
                        }
                      }
LABEL_10:
                      if ((_BYTE)v9) {
                        unint64_t v10 = v11;
                      }
                      if ((unint64_t)v7 >= v10) {
                        goto LABEL_3;
                      }
                      goto LABEL_13;
                    }
                    if (SHIDWORD(v337) >= v263 && (int)v338 <= *(v262 - 1) && DWORD1(v338) <= *v262) {
                      *(v262 - 2) = 0x7FFFFFFF;
                    }
                  }
                  v262 += 14;
                  v261 -= 56;
                  if (!v261) {
                    goto LABEL_329;
                  }
                }
              }
              uint64_t v224 = *(void *)(a1 + 120);
              if (v223 <= (v224 - (uint64_t)v193) >> 3)
              {
                size_t v229 = 8 * v223;
                bzero(v193, v229);
                int v187 = v323;
                *(void *)(a1 + 112) = &v193[v229];
LABEL_313:
                v192 = *(char **)(a1 + 104);
                uint64_t v222 = *(void *)(a1 + 128);
                v211 = (char **)(a1 + 104);
                unint64_t v190 = v321;
                goto LABEL_314;
              }
              uint64_t v225 = (v193 - v192) >> 3;
              unint64_t v226 = v225 + v223;
              if ((v225 + v223) >> 61) {
                sub_2E00();
              }
              uint64_t v227 = v224 - (void)v192;
              if (v227 >> 2 > v226) {
                unint64_t v226 = v227 >> 2;
              }
              if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v226 = 0x1FFFFFFFFFFFFFFFLL;
              }
              unint64_t v315 = v226;
              if (v226)
              {
                if (v226 >> 61) {
                  goto LABEL_417;
                }
                v228 = (char *)operator new(8 * v226);
              }
              else
              {
                v228 = 0;
              }
              v313 = v228;
              v230 = &v228[8 * v225];
              bzero(v230, 8 * v223);
              if (v193 == v192)
              {
                uint64_t v233 = v230;
                int v187 = v323;
                unsigned int v235 = v313;
                goto LABEL_311;
              }
              unint64_t v231 = v193 - 8 - v192;
              int v187 = v323;
              if (v231 >= 0x58)
              {
                unsigned int v235 = v313;
                if ((unint64_t)(v192 - v313) >= 0x20)
                {
                  uint64_t v236 = (v231 >> 3) + 1;
                  uint64_t v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
                  long long v232 = &v193[-v237];
                  uint64_t v233 = &v230[-v237];
                  unint64_t v238 = &v313[8 * ((v193 - v192) >> 3) - 16];
                  unint64_t v239 = (long long *)(v193 - 16);
                  uint64_t v240 = v236 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v241 = *v239;
                    *((_OWORD *)v238 - 1) = *(v239 - 1);
                    *(_OWORD *)unint64_t v238 = v241;
                    v238 -= 32;
                    v239 -= 2;
                    v240 -= 4;
                  }
                  while (v240);
                  uint64_t v234 = (void **)(a1 + 104);
                  if (v236 == (v236 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_310;
                  }
                }
                else
                {
                  long long v232 = v193;
                  uint64_t v233 = v230;
                  uint64_t v234 = (void **)(a1 + 104);
                }
              }
              else
              {
                long long v232 = v193;
                uint64_t v233 = v230;
                uint64_t v234 = (void **)(a1 + 104);
                unsigned int v235 = v313;
              }
              do
              {
                uint64_t v242 = *((void *)v232 - 1);
                v232 -= 8;
                *((void *)v233 - 1) = v242;
                v233 -= 8;
              }
              while (v232 != v192);
LABEL_310:
              v193 = (char *)*v234;
LABEL_311:
              *(void *)(a1 + 104) = v233;
              *(void *)(a1 + 112) = &v230[8 * v223];
              *(void *)(a1 + 120) = &v235[8 * v315];
              if (v193)
              {
                operator delete(v193);
                int v187 = v323;
              }
              goto LABEL_313;
            }
            uint64_t v100 = 1;
            uint64_t v101 = v87 - v81;
            if ((unint64_t)(v101 >> 2) > 1) {
              uint64_t v100 = v101 >> 2;
            }
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v100;
            }
            if (v102)
            {
              if (v102 >> 61) {
                goto LABEL_417;
              }
              uint64_t v103 = (char *)operator new(8 * v102);
              uint64_t v104 = v103;
              *(void *)uint64_t v103 = 0;
              uint64_t v105 = (uint64_t)(v103 + 8);
              if (v98 != v81)
              {
LABEL_134:
                unint64_t v106 = v98 - 8 - v81;
                if (v106 >= 0x58 && (unint64_t)(v98 - v103) >= 0x20)
                {
                  uint64_t v269 = (v106 >> 3) + 1;
                  uint64_t v270 = 8 * (v269 & 0x3FFFFFFFFFFFFFFCLL);
                  v107 = &v98[-v270];
                  v104 -= v270;
                  v271 = v103 - 16;
                  uint64_t v272 = v98 - 16;
                  uint64_t v273 = v269 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v274 = *(_OWORD *)v272;
                    *((_OWORD *)v271 - 1) = *((_OWORD *)v272 - 1);
                    *(_OWORD *)v271 = v274;
                    v271 -= 32;
                    v272 -= 32;
                    v273 -= 4;
                  }
                  while (v273);
                  if (v269 == (v269 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_138:
                    v98 = (char *)*v325;
                    *(void *)(a1 + 104) = v104;
                    *(void *)(a1 + 112) = v105;
                    *(void *)(a1 + 120) = &v103[8 * v102];
                    if (!v98) {
                      goto LABEL_140;
                    }
LABEL_139:
                    operator delete(v98);
                    goto LABEL_140;
                  }
                }
                else
                {
                  v107 = v98;
                }
                do
                {
                  uint64_t v108 = *((void *)v107 - 1);
                  v107 -= 8;
                  *((void *)v104 - 1) = v108;
                  v104 -= 8;
                }
                while (v107 != v81);
                goto LABEL_138;
              }
            }
            else
            {
              uint64_t v103 = 0;
              uint64_t v104 = 0;
              *(void *)&def_332C = 0;
              uint64_t v105 = 8;
              if (v98 != v81) {
                goto LABEL_134;
              }
            }
            *(void *)(a1 + 104) = v104;
            *(void *)(a1 + 112) = v105;
            *(void *)(a1 + 120) = &v103[8 * v102];
            if (!v98) {
              goto LABEL_140;
            }
            goto LABEL_139;
          }
          uint64_t v54 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v54) & v29;
            uint64_t v55 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v55;
            unsigned int v35 = v55[1];
            ++v54;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_81;
            }
          }
LABEL_75:
          if (v33 == -1)
          {
            uint64_t v39 = -1;
            goto LABEL_82;
          }
          uint64_t v46 = v30 + 12 * v33;
          unsigned int v47 = *(_DWORD *)(v46 + 8);
          if (v47 != -1) {
            goto LABEL_110;
          }
LABEL_91:
          int v61 = *(_DWORD *)(v13 + 112);
          *(_DWORD *)(v13 + 112) = v61 + 1;
          *(_DWORD *)(v46 + 8) = v61;
          int v63 = *(char **)(v13 + 96);
          unint64_t v62 = *(void *)(v13 + 104);
          if ((unint64_t)v63 < v62)
          {
            *(void *)int v63 = v12;
            uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
            *(void *)(v13 + 96) = v64;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            goto LABEL_110;
          }
          v65 = (char **)(v13 + 88);
          unsigned int v66 = *(char **)(v13 + 88);
          uint64_t v67 = (v63 - v66) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v69 = v62 - (void)v66;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v326 = v68;
          if (v68)
          {
            if (v68 >> 61) {
              goto LABEL_417;
            }
            uint64_t v70 = (char *)operator new(8 * v68);
            v65 = (char **)(v13 + 88);
            uint64_t v71 = &v70[8 * v67];
            *(void *)uint64_t v71 = v12;
            uint64_t v64 = (uint64_t)(v71 + 8);
            if (v63 != v66)
            {
LABEL_101:
              unint64_t v72 = v63 - 8 - v66;
              if (v72 < 0x58) {
                goto LABEL_425;
              }
              if ((unint64_t)(v66 - v70) < 0x20) {
                goto LABEL_425;
              }
              uint64_t v73 = (v72 >> 3) + 1;
              uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v75 = &v63[-v74];
              v71 -= v74;
              v76 = &v70[8 * v67 - 16];
              BOOL v77 = (long long *)(v63 - 16);
              uint64_t v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v77;
                *((_OWORD *)v76 - 1) = *(v77 - 1);
                *(_OWORD *)v76 = v79;
                v76 -= 32;
                v77 -= 2;
                v78 -= 4;
              }
              while (v78);
              int v63 = v75;
              if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_425:
                do
                {
                  uint64_t v80 = *((void *)v63 - 1);
                  v63 -= 8;
                  *((void *)v71 - 1) = v80;
                  v71 -= 8;
                }
                while (v63 != v66);
              }
              int v63 = *v65;
              *(void *)(v13 + 88) = v71;
              *(void *)(v13 + 96) = v64;
              *(void *)(v13 + 104) = &v70[8 * v326];
              if (!v63) {
                goto LABEL_109;
              }
LABEL_108:
              operator delete(v63);
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v70 = 0;
            uint64_t v71 = (char *)(8 * v67);
            *(void *)(8 * v67) = v12;
            uint64_t v64 = 8 * v67 + 8;
            if (v63 != v66) {
              goto LABEL_101;
            }
          }
          *(void *)(v13 + 88) = v71;
          *(void *)(v13 + 96) = v64;
          *(void *)(v13 + 104) = &v70[8 * v326];
          if (!v63) {
            goto LABEL_109;
          }
          goto LABEL_108;
        }
LABEL_57:
        uint64_t v49 = *(void *)(v13 + 40);
        uint64_t v48 = *(void *)(v13 + 48);
        if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
          goto LABEL_418;
        }
        uint64_t v50 = *(void *)(v13 + 80);
        if (v49
          && ((v51 = (_DWORD *)(v50 + 12 * v25), *(_DWORD *)(v13 + 36) == v51[1])
            ? (BOOL v52 = *(_DWORD *)(v13 + 32) == *v51)
            : (BOOL v52 = 0),
              v52))
        {
          *(void *)(v13 + 40) = v49 - 1;
        }
        else
        {
          *(void *)(v13 + 48) = v48 + 1;
        }
        uint64_t v53 = v50 + 12 * v25;
        *(void *)uint64_t v53 = v12;
        *(_DWORD *)(v53 + 8) = -1;
        uint64_t v46 = *(void *)(v13 + 80) + 12 * v25;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 == -1) {
          goto LABEL_91;
        }
        goto LABEL_110;
      }
      uint64_t v25 = -1;
      uint64_t v26 = 1;
      do
      {
        if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
        {
          if (v25 == -1) {
            uint64_t v25 = v20;
          }
        }
        else if (__PAIR64__(v22, v23) == v12)
        {
          goto LABEL_53;
        }
        uint64_t v20 = (v20 + v26) & v14;
        unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v27;
        unsigned int v22 = v27[1];
        ++v26;
      }
      while (v18 != v22 || v19 != v23);
      if (v25 != -1)
      {
        if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
          goto LABEL_31;
        }
        goto LABEL_57;
      }
    }
LABEL_56:
    uint64_t v25 = v20;
    if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_410:
  double result = sub_72688((uint64_t)v335) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A7BE94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BEA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BEBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BED0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BEE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BEF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BF0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BF20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7BF34(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  unint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    v211 = v8;
    int v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      int v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        v65 = (char **)(v13 + 88);
        unsigned int v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          v65 = (char **)(v13 + 88);
          unint64_t v72 = &v71[8 * v67];
          *(void *)unint64_t v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          v76 = &v63[-v75];
          v72 -= v75;
          BOOL v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)BOOL v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          int v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          int v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unint64_t v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)int v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 5);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      int v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 5);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          long long v200 = operator new(4 * v96);
          unint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            uint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              uint64_t v101 = v200;
              goto LABEL_135;
            }
            uint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            unint64_t v106 = &v200[4 * v89 - 16];
            v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        unint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        unint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] < v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        uint64_t v168 = v213 + 2;
        uint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          uint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      unint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        __int16 v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              __int16 v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            __int16 v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              uint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                uint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          int v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] >= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int v173 = &v135[4 * v130 - 16];
          int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        int v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] >= v82) {
          goto LABEL_156;
        }
LABEL_141:
        v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            unint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                long long v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              long long v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              uint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        unint64_t v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            uint64_t v157 = operator new(4 * v155);
            uint64_t v158 = (unsigned int *)&v157[4 * v152];
            *uint64_t v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            uint64_t v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            unint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            unint64_t v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--uint64_t v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            uint64_t v157 = 0;
            uint64_t v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)unint64_t v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A7CE6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7CE80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7CE94(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (char **)(a1 + 104);
    while (1)
    {
      sub_A724E0((uint64_t)v4, 0);
      sub_A7D574(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      unsigned int v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC((void **)v4, 1uLL);
      uint64_t v8 = v6 + 56 * v7;
      uint64_t v9 = *(void *)(a1 + 128) + 56 * *(unsigned int *)(*(void *)(a1 + 104) + 4);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 56;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    unsigned int v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + 56 * v7;
    uint64_t v9 = v6 + 56 * v5[1];
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_A7CFD4(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A73590(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  __int16 v13 = 0;
  unsigned int v15 = 0;
  do
  {
    uint64_t v19 = sub_A73590(a1, a2, v15);
    long long v21 = *(_OWORD *)(v19 + 16);
    long long v20 = *(_OWORD *)(v19 + 32);
    uint64_t v22 = *(void *)(v19 + 48);
    v24[0] = *(_OWORD *)v19;
    v24[1] = v21;
    uint64_t v25 = v22;
    v24[2] = v20;
    if (SHIDWORD(v21) >= a6)
    {
      __int16 v23 = sub_A7D29C((uint64_t)a1, (uint64_t)v24, a3, a4, a5);
      __int16 v13 = v23 | v13 | (v23 | v13) & 0xFF00;
    }
    ++v15;
  }
  while (v9 != v15);
  if ((v13 & 0xFF00) != 0)
  {
    sub_A731E8(a1, a3);
    sub_A731E8(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_A7D12C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    uint64_t v11 = (unsigned int *)(*(void *)a1 + 8 * a3);
    uint64_t v9 = *v11;
    unsigned int v10 = v11[1];
    if (v10 != v9)
    {
      unsigned __int8 v12 = 0;
      uint64_t v16 = 56 * v9;
      uint64_t v17 = (_DWORD *)(56 * v9 + *(void *)(a1 + 24) + 36);
      uint64_t v18 = 56 * v10 - v16;
      while (1)
      {
        int v19 = *(v17 - 2);
        if (v19 != 0x7FFFFFFF)
        {
          int v20 = *(_DWORD *)(a2 + 28);
          if (v19 >= v20 && *(v17 - 1) <= *(_DWORD *)(a2 + 32) && *v17 <= *(_DWORD *)(a2 + 36)) {
            return (unint64_t)v12 << 8;
          }
          if (v20 >= v19 && *(_DWORD *)(a2 + 32) <= *(v17 - 1) && *(_DWORD *)(a2 + 36) <= *v17)
          {
            *(v17 - 2) = 0x7FFFFFFF;
            unsigned __int8 v12 = 1;
          }
        }
        v17 += 14;
        v18 -= 56;
        if (!v18) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  uint64_t v13 = sub_A72C48((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 44) = -1;
    *(_DWORD *)(v13 + 52) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *(_DWORD *)(v13 + 24) = v14;
    *(_DWORD *)(v13 + 20) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

unint64_t sub_A7D29C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  if (a5 == 0xFFFFFFFFLL || (sub_A7D434(a1, (_DWORD *)a2, a5) & 1) == 0)
  {
    uint64_t v11 = *(char **)a1;
    if (a4 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      uint64_t v13 = *(unsigned int *)&v11[8 * a4];
      unsigned int v12 = *(_DWORD *)&v11[8 * a4 + 4];
      if (v12 != v13)
      {
        unsigned __int8 v10 = 0;
        uint64_t v18 = 56 * v13;
        uint64_t v19 = 56 * v12 - v18;
        int v20 = (_DWORD *)(v18 + *(void *)(a1 + 24) + 36);
        while (1)
        {
          int v21 = *(v20 - 2);
          if (v21 != 0x7FFFFFFF)
          {
            int v22 = *(_DWORD *)(a2 + 28);
            if (v21 >= v22 && *(v20 - 1) <= *(_DWORD *)(a2 + 32) && *v20 <= *(_DWORD *)(a2 + 36))
            {
              uint64_t v9 = 0;
              return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
            }
            if (v22 >= v21 && *(_DWORD *)(a2 + 32) <= *(v20 - 1) && *(_DWORD *)(a2 + 36) <= *v20)
            {
              *(v20 - 2) = 0x7FFFFFFF;
              unsigned __int8 v10 = 1;
            }
          }
          v20 += 14;
          v19 -= 56;
          if (!v19) {
            goto LABEL_7;
          }
        }
      }
    }
    unsigned __int8 v10 = 0;
LABEL_7:
    uint64_t v14 = sub_A72C48((char **)a1, a4, (long long *)a2);
    *(void *)(v14 + 44) = -1;
    *(_DWORD *)(v14 + 52) = 0x7FFFFFFF;
    unsigned int v15 = a3;
    uint64_t v9 = 1;
    sub_A7D12C(a1, a2, v15, 1, 1);
    *(void *)(v16 + 44) = -1;
    *(_DWORD *)(v16 + 52) = 0x7FFFFFFF;
  }
  else
  {
    uint64_t v9 = 0;
    unsigned __int8 v10 = 0;
  }
  return v9 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v10 << 8);
}

uint64_t sub_A7D434(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  unint64_t v9 = (uint64_t)&v8[-*(void *)a1] >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        *(void *)(a1 + 8) = v8;
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v10 - v9);
      int v7 = *(char **)a1;
      uint64_t v8 = *(char **)(a1 + 8);
    }
  }
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = *(_DWORD *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC((void **)a1, v14 - v13);
      int v7 = *(char **)a1;
      uint64_t v15 = *(void *)(a1 + 24);
      goto LABEL_12;
    }
    if (v14 < v13) {
      *(void *)(a1 + 8) = &v7[8 * v14];
    }
  }
  uint64_t v15 = v11;
LABEL_12:
  uint64_t v16 = (_DWORD *)(v11 + 56 * v12);
  uint64_t v17 = (_DWORD *)(v15 + 56 * *(unsigned int *)&v7[8 * v6 + 4]);
  if (v16 == v17) {
    return 0;
  }
  while (1)
  {
    int v18 = v16[7];
    BOOL v19 = v18 == 0x7FFFFFFF || v18 < a2[7];
    if (!v19 && v16[8] <= a2[8] && v16[9] <= a2[9]) {
      break;
    }
    v16 += 14;
    if (v16 == v17) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_A7D574(char **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((a1[1] - *a1) >> 3)
    || (v5 = &(*a1)[8 * a2], int v4 = *((_DWORD *)v5 + 1), v6 = v4 - *(_DWORD *)v5, v4 == *(_DWORD *)v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = a3;
    do
    {
      uint64_t v12 = sub_A73590(a1, a2, v10);
      long long v14 = *(_OWORD *)(v12 + 16);
      long long v13 = *(_OWORD *)(v12 + 32);
      long long v15 = *(_OWORD *)v12;
      uint64_t v30 = *(void *)(v12 + 48);
      long long v28 = v14;
      long long v29 = v13;
      long long v27 = v15;
      uint64_t v16 = *a1;
      if (v11 < (a1[1] - *a1) >> 3)
      {
        uint64_t v18 = *(unsigned int *)&v16[8 * v11];
        unsigned int v17 = *(_DWORD *)&v16[8 * v11 + 4];
        if (v17 != v18)
        {
          int v19 = 0;
          uint64_t v23 = 56 * v18;
          uint64_t v24 = 56 * v17 - v23;
          uint64_t v25 = &a1[3][v23 + 36];
          while (1)
          {
            int v26 = *((_DWORD *)v25 - 2);
            if (v26 != 0x7FFFFFFF)
            {
              if (v26 >= SHIDWORD(v28) && *((_DWORD *)v25 - 1) <= (int)v29 && *(_DWORD *)v25 <= DWORD1(v29))
              {
                __int16 v21 = 0;
                goto LABEL_10;
              }
              if (SHIDWORD(v28) >= v26 && (int)v29 <= *((_DWORD *)v25 - 1) && DWORD1(v29) <= *(_DWORD *)v25)
              {
                *((_DWORD *)v25 - 2) = 0x7FFFFFFF;
                int v19 = 1;
              }
            }
            v25 += 56;
            v24 -= 56;
            if (!v24) {
              goto LABEL_9;
            }
          }
        }
      }
      int v19 = 0;
LABEL_9:
      uint64_t v20 = sub_A72C48(a1, v11, &v27);
      *(void *)(v20 + 44) = -1;
      *(_DWORD *)(v20 + 52) = 0x7FFFFFFF;
      __int16 v21 = 1;
LABEL_10:
      int v22 = v19 | HIBYTE(v7);
      __int16 v7 = v7 | v21 | ((_WORD)v22 << 8);
      ++v10;
    }
    while (v10 != v6);
    if (v22) {
      sub_A731E8((void **)a1, v11);
    }
  }
  return v7 != 0;
}

uint64_t sub_A7D748(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = (void *)a1;
  unsigned int v257 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v224 = *(_DWORD *)sub_A3F74C(v4 + 35, &v257);
  unint64_t v228 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v255, v4[3], v5);
  __int16 v7 = v255;
  if ((unint64_t)v255 < v256)
  {
    uint64_t v8 = (char *)(v4 + 13);
    unint64_t v231 = (void **)(v4 + 13);
    uint64_t v232 = (uint64_t)(v4 + 45);
    int v223 = a2 + 2;
    int v221 = ~a2;
    uint64_t v222 = v4 + 23;
    int v225 = a2 + 1;
    unint64_t v229 = HIDWORD(v5);
    v230 = v4;
    while (1)
    {
      *((double *)v4 + 69) = *((double *)v4 + 69) + 1.0;
      uint64_t v226 = *(unsigned int *)v7;
      sub_A724E0((uint64_t)v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v243, v4[3], v228, v224, 0, 1);
      unint64_t v9 = v247;
      BOOL v10 = (unint64_t)v247 < v246 || (unint64_t)v247 >= v248;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v255 + 4;
      int v255 = v7;
      if ((unint64_t)v7 >= v256) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = v4[4];
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      uint64_t v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(v4[4], 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555) {
            goto LABEL_295;
          }
        }
        else
        {
          uint64_t v66 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v66) & v28;
            uint64_t v67 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v67;
            unsigned int v34 = v67[1];
            ++v66;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555)
          {
LABEL_295:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((unint64_t v70 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v70[1])
            ? (BOOL v71 = *(_DWORD *)(v12 + 32) == *v70)
            : (BOOL v71 = 0),
              v71))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v65 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v69 + 1;
          uint64_t v65 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v62 = *(void *)(v12 + 40);
      uint64_t v61 = *(void *)(v12 + 48);
      if ((unint64_t)(v61 - v62) >= 0x1555555555555555) {
        goto LABEL_295;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v62
        && ((int v63 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v63[1])
          ? (BOOL v64 = *(_DWORD *)(v12 + 32) == *v63)
          : (BOOL v64 = 0),
            v64))
      {
        *(void *)(v12 + 40) = v62 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v61 + 1;
      }
      uint64_t v65 = 3 * v24;
LABEL_95:
      uint64_t v72 = 4 * v65;
      uint64_t v73 = v29 + v72;
      *(void *)uint64_t v73 = v11;
      *(_DWORD *)(v73 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v72;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v242 = v46;
        uint64_t result = sub_BD5C18(v232, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_119;
      }
LABEL_96:
      int v74 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v74 + 1;
      *(_DWORD *)(v45 + 8) = v74;
      v76 = *(unint64_t **)(v12 + 96);
      unint64_t v75 = *(void *)(v12 + 104);
      if ((unint64_t)v76 < v75)
      {
        unint64_t *v76 = v11;
        uint64_t v77 = (uint64_t)(v76 + 1);
        goto LABEL_118;
      }
      uint64_t v78 = *(char **)(v12 + 88);
      uint64_t v79 = ((char *)v76 - v78) >> 3;
      unint64_t v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v81 = v75 - (void)v78;
      if (v81 >> 2 > v80) {
        unint64_t v80 = v81 >> 2;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v80)
      {
        if (v80 >> 61) {
          goto LABEL_297;
        }
        unint64_t v82 = v80;
        unint64_t v83 = (char *)operator new(8 * v80);
        uint64_t v84 = (unint64_t *)&v83[8 * v79];
        *uint64_t v84 = v11;
        uint64_t v77 = (uint64_t)(v84 + 1);
        if (v76 == (unint64_t *)v78)
        {
LABEL_109:
          *(void *)(v12 + 88) = v84;
          *(void *)(v12 + 96) = v77;
          *(void *)(v12 + 104) = &v83[8 * v82];
          int v4 = v230;
          uint64_t v8 = (char *)v231;
          if (v76) {
            goto LABEL_117;
          }
          goto LABEL_118;
        }
      }
      else
      {
        unint64_t v82 = 0;
        unint64_t v83 = 0;
        uint64_t v84 = (unint64_t *)(8 * v79);
        *(void *)(8 * v79) = v11;
        uint64_t v77 = 8 * v79 + 8;
        if (v76 == (unint64_t *)v78) {
          goto LABEL_109;
        }
      }
      unint64_t v85 = (char *)(v76 - 1) - v78;
      if (v85 < 0x58) {
        goto LABEL_301;
      }
      if ((unint64_t)(v78 - v83) < 0x20) {
        goto LABEL_301;
      }
      uint64_t v86 = (v85 >> 3) + 1;
      uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v88 = &v76[v87 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v84 = (unint64_t *)((char *)v84 - v87);
      unint64_t v89 = &v83[8 * v79 - 16];
      unint64_t v90 = v76 - 2;
      uint64_t v91 = v86 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v92 = *(_OWORD *)v90;
        *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
        *(_OWORD *)unint64_t v89 = v92;
        v89 -= 32;
        v90 -= 4;
        v91 -= 4;
      }
      while (v91);
      v76 = v88;
      if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_301:
        do
        {
          unint64_t v93 = *--v76;
          *--uint64_t v84 = v93;
        }
        while (v76 != (unint64_t *)v78);
      }
      v76 = *(unint64_t **)(v12 + 88);
      *(void *)(v12 + 88) = v84;
      *(void *)(v12 + 96) = v77;
      *(void *)(v12 + 104) = &v83[8 * v82];
      int v4 = v230;
      uint64_t v8 = (char *)v231;
      if (v76) {
LABEL_117:
      }
        operator delete(v76);
LABEL_118:
      *(void *)(v12 + 96) = v77;
      unsigned int v242 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v232, v242, v11);
      if (result)
      {
LABEL_51:
        unsigned int v47 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] != v47)
        {
          uint64_t v49 = *v47;
          unsigned int v48 = v47[1];
          if (v48 != v49)
          {
            int v50 = v252;
            uint64_t v51 = v250;
            uint64_t v52 = v247;
            uint64_t v53 = v245;
            unint64_t v54 = ((unint64_t)v247 - v246) >> 4;
            uint64_t v55 = 56 * v49;
            uint64_t v56 = 56 * v48 - v55;
            uint64_t v57 = (int *)(v4[16] + v55 + 52);
            do
            {
              unsigned int v60 = *(v57 - 2);
              if (v50)
              {
                unsigned int v253 = *(v57 - 1);
                int v58 = *v57;
                int v254 = *v57;
              }
              else
              {
                int v58 = *(_DWORD *)(v51 + 12 * v60);
              }
              uint64_t v59 = (unsigned int *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 6));
              *(v57 - 6) = *(unsigned int *)((char *)&v59[2 * (*(_DWORD *)(v51 + 12 * v60 + 4) + v54)
                                                        + 2]
                                           + *v59)
                         + v58
                         - *((_DWORD *)v52 + 2);
              v57 += 14;
              v56 -= 56;
            }
            while (v56);
            uint64_t v251 = (int *)(v51 + 12 * v60);
            sub_A7EAF8(v8, 0);
            if ((*((unsigned char *)v247 + 15) & 2) != 0
              && (!v249
               || (*(_DWORD *)(v249 + 4 * (((unint64_t)v247 - v246) >> 4)) & v226) == 0))
            {
              int v98 = *((_DWORD *)v4 + 24);
              if (*((unsigned char *)v4 + 20))
              {
                unsigned int v99 = v98 + v98 * *((_DWORD *)v4 + 88);
                unint64_t v100 = v242;
                uint64_t v101 = (unint64_t *)v4[6];
                if (v101) {
                  goto LABEL_130;
                }
LABEL_137:
                int v105 = 0x80000000;
              }
              else
              {
                unsigned int v99 = -1;
                unint64_t v100 = v242;
                uint64_t v101 = (unint64_t *)v4[6];
                if (!v101) {
                  goto LABEL_137;
                }
LABEL_130:
                if (*v101 > v100)
                {
                  unsigned int v102 = 0;
                  unsigned int v103 = *((_DWORD *)v4 + 25) + v221;
                  unsigned int v104 = v103;
                  while (v102 <= v103)
                  {
                    int v105 = *(_DWORD *)sub_A3F53C(v101 + 2, v101[1] * v100 + v104);
                    v102 += 2;
                    v104 -= 2;
                    if (v105 != 0x7FFFFFFF) {
                      goto LABEL_138;
                    }
                  }
                }
                int v105 = 0x7FFFFFFF;
              }
LABEL_138:
              uint64_t v8 = (char *)v231;
              int v4 = v230;
              if (sub_A7ED60(v231, 0, v223 + v98 + v98 * v100, v98 + v98 * v100, v99, v105)) {
                sub_A3EF14(v222, &v242);
              }
            }
            unint64_t v106 = (char *)v4[13];
            v107 = (unsigned char *)v4[14];
            uint64_t v108 = v107 - v106;
            if (v107 != v106)
            {
              uint64_t v109 = v4[16];
              unsigned int v110 = *(_DWORD *)v106;
              goto LABEL_154;
            }
            uint64_t v112 = v108 >> 3;
            unint64_t v113 = 1 - (v108 >> 3);
            uint64_t v114 = v4[15];
            if (v113 <= (v114 - (uint64_t)v107) >> 3)
            {
              bzero((void *)v4[14], 8 * v113);
              long long v122 = &v107[8 * v113];
              v4[14] = v122;
              unint64_t v106 = *(char **)v8;
              uint64_t v109 = v4[16];
              unsigned int v110 = **(_DWORD **)v8;
              if (*(char **)v8 != v122) {
                goto LABEL_154;
              }
              goto LABEL_142;
            }
            uint64_t v115 = v114 - (void)v106;
            uint64_t v116 = v115 >> 2;
            if ((unint64_t)(v115 >> 2) <= 1) {
              uint64_t v116 = 1;
            }
            BOOL v10 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v10) {
              unint64_t v117 = v116;
            }
            if (v117 >> 61) {
LABEL_297:
            }
              sub_188D718();
            uint64_t v118 = 8 * v117;
            unsigned int v119 = (char *)operator new(8 * v117);
            size_t v120 = &v119[8 * v112];
            bzero(v120, 8 * v113);
            unint64_t v121 = &v119[v118];
            int v4 = v230;
            v230[13] = v120;
            v230[14] = &v120[8 * v113];
            v230[15] = v121;
            if (v107)
            {
              operator delete(v107);
              long long v122 = (char *)v230[14];
              unint64_t v106 = *(char **)v8;
              uint64_t v109 = v230[16];
              unsigned int v110 = **(_DWORD **)v8;
              if (*(char **)v8 != v122) {
                goto LABEL_154;
              }
LABEL_142:
              v111 = (char *)v4[15];
              if (v111 != v122)
              {
                *(void *)long long v122 = 0;
                v4[14] = v122 + 8;
                goto LABEL_179;
              }
              uint64_t v125 = 1;
              uint64_t v126 = v111 - v106;
              if ((unint64_t)(v126 >> 2) > 1) {
                uint64_t v125 = v126 >> 2;
              }
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v125;
              }
              if (v127)
              {
                if (v127 >> 61) {
                  goto LABEL_297;
                }
                int v128 = (char *)operator new(8 * v127);
                uint64_t v129 = v128;
                *(void *)int v128 = 0;
                uint64_t v130 = (uint64_t)(v128 + 8);
                if (v122 == v106) {
                  goto LABEL_177;
                }
LABEL_168:
                unint64_t v131 = v122 - 8 - v106;
                if (v131 < 0x58)
                {
                  uint64_t v132 = v122;
                  goto LABEL_175;
                }
                if ((unint64_t)(v122 - v128) < 0x20)
                {
                  uint64_t v132 = v122;
                  goto LABEL_175;
                }
                uint64_t v133 = (v131 >> 3) + 1;
                uint64_t v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v132 = &v122[-v134];
                v129 -= v134;
                unsigned int v135 = v128 - 16;
                uint64_t v136 = v122 - 16;
                uint64_t v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v138 = *(_OWORD *)v136;
                  *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
                  *(_OWORD *)unsigned int v135 = v138;
                  v135 -= 32;
                  v136 -= 32;
                  v137 -= 4;
                }
                while (v137);
                if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_175:
                    uint64_t v139 = *((void *)v132 - 1);
                    v132 -= 8;
                    *((void *)v129 - 1) = v139;
                    v129 -= 8;
                  }
                  while (v132 != v106);
                }
                long long v122 = (char *)*v231;
              }
              else
              {
                int v128 = 0;
                uint64_t v129 = 0;
                *(void *)&def_332C = 0;
                uint64_t v130 = 8;
                if (v122 != v106) {
                  goto LABEL_168;
                }
              }
LABEL_177:
              v4[13] = v129;
              v4[14] = v130;
              v4[15] = &v128[8 * v127];
              uint64_t v8 = (char *)v231;
              if (v122) {
                operator delete(v122);
              }
LABEL_179:
              uint64_t v123 = (_DWORD *)(v109 + 56 * v110);
              uint64_t v124 = v4[16] + 56 * *(unsigned int *)(v4[13] + 4);
              if (v123 != (_DWORD *)v124)
              {
LABEL_180:
                int v140 = v252;
                uint64_t v141 = v250;
                unsigned int v142 = v245;
                unint64_t v143 = ((unint64_t)v247 - v246) >> 4;
                do
                {
                  unsigned int v146 = v123[11];
                  if (v140)
                  {
                    unsigned int v253 = v123[12];
                    int v144 = v123[13];
                    int v254 = v144;
                  }
                  else
                  {
                    int v144 = *(_DWORD *)(v141 + 12 * v146);
                  }
                  int v145 = (unsigned int *)((char *)v142 + *(unsigned __int16 *)((char *)v142 - *v142 + 6));
                  v123[7] = *(unsigned int *)((char *)&v145[2
                                                          * (*(_DWORD *)(v141 + 12 * v146 + 4) + v143)
                                                          + 1]
                                            + *v145)
                          + v144;
                  v123 += 14;
                }
                while (v123 != (_DWORD *)v124);
                uint64_t v251 = (int *)(v141 + 12 * v146);
              }
            }
            else
            {
              long long v122 = &v120[8 * v113];
              unint64_t v106 = *(char **)v8;
              uint64_t v109 = v230[16];
              unsigned int v110 = **(_DWORD **)v8;
              if (*(char **)v8 == v122) {
                goto LABEL_142;
              }
LABEL_154:
              uint64_t v123 = (_DWORD *)(v109 + 56 * v110);
              uint64_t v124 = v109 + 56 * *((unsigned int *)v106 + 1);
              if (v123 != (_DWORD *)v124) {
                goto LABEL_180;
              }
            }
            uint64_t result = (uint64_t)sub_A7EAF8(v8, 0);
          }
        }
        if ((*((unsigned char *)v247 + 15) & 1) == 0) {
          goto LABEL_194;
        }
        if (v249)
        {
          if (*(_DWORD *)(v249 + 4 * (((unint64_t)v247 - v246) >> 4)) != v226) {
            goto LABEL_194;
          }
        }
        else if (v226)
        {
          goto LABEL_194;
        }
        unint64_t v147 = v225 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v242;
        uint64_t v148 = v4[13];
        if (v147 >= (v4[14] - v148) >> 3) {
          goto LABEL_194;
        }
        uint64_t v151 = (int *)(v148 + 8 * v147);
        int v149 = *v151;
        int v150 = v151[1];
        int v152 = v150 - *v151;
        if (v150 == *v151) {
          goto LABEL_194;
        }
        unsigned int v160 = 0;
        int v227 = v150 - v149;
        while (2)
        {
          uint64_t v161 = v4[13];
          if (v147 >= (v4[14] - v161) >> 3 || (v163 = (int *)(v161 + 8 * v147), int v162 = *v163, v163[1] - *v163 <= v160))
          {
            char v217 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v217, "key does not exist and cannot be added");
            goto LABEL_294;
          }
          unint64_t v164 = v162 + v160;
          uint64_t v165 = v4[16];
          if (0x6DB6DB6DB6DB6DB7 * ((v4[17] - v165) >> 3) <= v164)
          {
            char v217 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v217, "index out of range");
LABEL_294:
          }
          uint64_t v166 = v165 + 56 * v164;
          int v167 = *(_DWORD *)(v166 + 28);
          if (v252)
          {
            uint64_t result = sub_A2B620(v4[3], (uint64_t)&v243, v167, 1);
            if ((result & 1) == 0) {
              goto LABEL_220;
            }
LABEL_228:
            uint64_t v168 = *(void *)(v166 + 20);
            unint64_t v169 = v4;
            int v170 = *(_DWORD *)(v166 + 32);
            int v171 = *(_DWORD *)(v166 + 36);
            int v172 = *(_DWORD *)(v166 + 40);
            int v173 = (void *)(v169[3] + 4136);
            if (sub_A10E20(v173, v229))
            {
              int v174 = (int *)sub_A1120C(*(void *)(*v173 + 3944), v228);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v216 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v175 = *v173;
              if (dword_24F7300 == v229)
              {
                long long v176 = *(unsigned int **)(*(void *)(v175 + 3976) + 72);
                if (!v176)
                {
                  uint64_t v219 = __cxa_allocate_exception(0x40uLL);
                  v258 = (char *)operator new(0x40uLL);
                  long long v259 = xmmword_20B9A90;
                  strcpy(v258, "Realtime stop pattern quad data requested on nullptr buffer");
                  unsigned int v220 = (void *)sub_2F404((uint64_t)v219, (long long *)&v258);
                }
                unsigned int v177 = (int *)((char *)v176 + *v176);
                uint64_t v178 = (unsigned __int16 *)((char *)v177 - *v177);
                if (*v178 >= 5u && (uint64_t v179 = v178[2]) != 0) {
                  uint64_t v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
                }
                else {
                  uint64_t v180 = 0;
                }
                int v174 = (int *)sub_A1139C(v180, v228);
              }
              else
              {
                int v174 = (int *)sub_A11500(v175 + 24, v228, 0, "stop pattern");
              }
            }
            unint64_t v181 = v174;
            uint64_t v182 = *v173;
            int8x8_t v183 = (unsigned __int16 *)((char *)v174 - *v174);
            if (*v183 >= 0xFu && (uint64_t v184 = v183[7]) != 0)
            {
              uint64_t v185 = v182 + 3896;
              char v186 = sub_49442C(*(unsigned __int16 *)((char *)v174 + v184));
              if ((sub_C25A10(v185, v186) & 1) == 0)
              {
LABEL_242:
                unint64_t v187 = (unsigned __int16 *)((char *)v181 - *v181);
                if (*v187 >= 0xBu && (uint64_t v188 = v187[5]) != 0) {
                  char v189 = *((unsigned char *)v181 + v188);
                }
                else {
                  char v189 = 0;
                }
                uint64_t result = sub_A2BF48(v189);
LABEL_249:
                int v192 = v254;
                unint64_t v193 = 0xFFFFFFFF00000000;
                if (v252) {
                  unint64_t v193 = (unint64_t)v253 << 32;
                }
                unint64_t v194 = (-1431655765 * (((unint64_t)v251 - v250) >> 2)) | v193;
                if (!v252) {
                  int v192 = 0x7FFFFFFF;
                }
                unint64_t v195 = (unsigned int *)((char *)v245 + *(unsigned __int16 *)((char *)v245 - *v245 + 6));
                uint64_t v196 = (char *)v195 + *v195;
                unsigned int v197 = &v254;
                if (!v252) {
                  unsigned int v197 = v251;
                }
                int v198 = *(_DWORD *)&v196[8 * v251[1] + 4 + 8 * (((unint64_t)v247 - v246) >> 4)]
                     + *v197;
                LODWORD(v233) = ((unint64_t)v247 - v246) >> 4;
                *(void *)((char *)&v233 + 4) = v194;
                HIDWORD(v233) = v192;
                unsigned int v234 = v257;
                uint64_t v235 = v168;
                int v236 = v198;
                int v237 = v170;
                unsigned int v238 = result + v171;
                int v239 = v172;
                unint64_t v240 = v194;
                int v241 = v192;
                int v4 = v230;
                long long v199 = (unsigned int *)v230[13];
                if ((unsigned int *)v230[14] == v199
                  || (uint64_t v201 = *v199, v200 = *(_DWORD *)(v230[13] + 4), v200 == v201))
                {
                  uint64_t v8 = (char *)v231;
                  uint64_t result = sub_A72C48((char **)v231, 0, &v233);
                  int v152 = v227;
                }
                else
                {
                  char v202 = 0;
                  uint64_t v203 = 56 * v201;
                  uint64_t v204 = 56 * v200 - v203;
                  unsigned int v205 = (unsigned int *)(v230[16] + v203 + 36);
                  uint64_t v8 = (char *)v231;
                  do
                  {
                    int v206 = *(v205 - 2);
                    if (v206 != 0x7FFFFFFF)
                    {
                      if (v206 >= v236 && (int)*(v205 - 1) <= v237 && *v205 <= v238) {
                        goto LABEL_268;
                      }
                      if (v236 >= v206 && v237 <= (int)*(v205 - 1) && v238 <= *v205)
                      {
                        *(v205 - 2) = 0x7FFFFFFF;
                        char v202 = 1;
                      }
                    }
                    v205 += 14;
                    v204 -= 56;
                  }
                  while (v204);
                  uint64_t result = sub_A72C48((char **)v231, 0, &v233);
LABEL_268:
                  int v152 = v227;
                  if (v202)
                  {
                    uint64_t v207 = (unsigned int *)v230[13];
                    if ((unsigned int *)v230[14] != v207)
                    {
                      uint64_t v208 = v230[16];
                      unsigned int v209 = *v207;
LABEL_271:
                      uint64_t v210 = v208 + 56 * v209;
                      uint64_t v211 = v208 + 56 * v207[1];
                      if (v210 != v211) {
                        goto LABEL_275;
                      }
                      goto LABEL_281;
                    }
                    sub_D2BFC(v231, 1uLL);
                    uint64_t v207 = (unsigned int *)v230[13];
                    uint64_t v208 = v230[16];
                    unsigned int v209 = *v207;
                    if ((unsigned int *)v230[14] != v207) {
                      goto LABEL_271;
                    }
                    sub_D2BFC(v231, 1uLL);
                    uint64_t v207 = (unsigned int *)v230[13];
                    uint64_t v210 = v208 + 56 * v209;
                    uint64_t v211 = v230[16] + 56 * v207[1];
                    if (v210 == v211)
                    {
LABEL_281:
                      if ((unsigned int *)v230[14] == v207) {
                        goto LABEL_282;
                      }
                    }
                    else
                    {
LABEL_275:
                      while (*(_DWORD *)(v210 + 28) != 0x7FFFFFFF)
                      {
                        v210 += 56;
                        if (v210 == v211)
                        {
                          uint64_t v210 = v211;
                          if ((unsigned int *)v230[14] != v207) {
                            goto LABEL_283;
                          }
                          goto LABEL_282;
                        }
                      }
                      if (v210 == v211) {
                        goto LABEL_281;
                      }
                      uint64_t v212 = v210 + 56;
                      if (v210 + 56 == v211) {
                        goto LABEL_281;
                      }
                      do
                      {
                        if (*(_DWORD *)(v212 + 28) != 0x7FFFFFFF)
                        {
                          long long v213 = *(_OWORD *)v212;
                          long long v214 = *(_OWORD *)(v212 + 16);
                          long long v215 = *(_OWORD *)(v212 + 32);
                          *(void *)(v210 + 48) = *(void *)(v212 + 48);
                          *(_OWORD *)(v210 + 16) = v214;
                          *(_OWORD *)(v210 + 32) = v215;
                          *(_OWORD *)uint64_t v210 = v213;
                          v210 += 56;
                        }
                        v212 += 56;
                      }
                      while (v212 != v211);
                      uint64_t v207 = (unsigned int *)*v231;
                      if ((void *)v230[14] == *v231)
                      {
LABEL_282:
                        sub_D2BFC(v231, 1uLL);
                        uint64_t v207 = (unsigned int *)*v231;
                      }
                    }
LABEL_283:
                    uint64_t result = (uint64_t)sub_A72724(v231, 0, (char *)v210, (unsigned char *)(v230[16] + 56 * v207[1]));
                  }
                }
LABEL_220:
                if (++v160 == v152) {
                  goto LABEL_194;
                }
                continue;
              }
            }
            else
            {
              uint64_t v190 = v182 + 3896;
              char v191 = sub_49442C(0x7FFFu);
              if ((sub_C25A10(v190, v191) & 1) == 0) {
                goto LABEL_242;
              }
            }
            uint64_t result = 128;
            goto LABEL_249;
          }
          break;
        }
        uint64_t result = sub_A2BC00((uint64_t)&v243, v167, 1);
        if (result) {
          goto LABEL_228;
        }
        goto LABEL_220;
      }
LABEL_119:
      if (!*((unsigned char *)v4 + 21))
      {
        uint64_t v94 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v94)
        {
          sub_D2BFC((void **)v8, 1uLL);
          uint64_t v94 = (unsigned int *)v4[13];
          uint64_t v95 = v4[16];
          unsigned int v96 = *v94;
          if ((unsigned int *)v4[14] == v94)
          {
            sub_D2BFC((void **)v8, 1uLL);
            uint64_t v94 = (unsigned int *)v4[13];
            uint64_t v97 = v4[16];
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v95 = v4[16];
          unsigned int v96 = *v94;
        }
        uint64_t v97 = v95;
LABEL_125:
        uint64_t result = (uint64_t)sub_A72724((void **)v8, 0, (char *)(v95 + 56 * v96), (unsigned char *)(v97 + 56 * v94[1]));
      }
LABEL_194:
      unint64_t v153 = v246;
      unint64_t v9 = v247 - 2;
      v247 -= 2;
      if (*(unsigned char *)(v243 + 16)) {
        BOOL v154 = v244 == 0;
      }
      else {
        BOOL v154 = 0;
      }
      if (v154 && (unint64_t)v9 >= v246 && (unint64_t)v9 < v248)
      {
        do
        {
          unint64_t v157 = __ROR8__(*v9, 32);
          if (HIDWORD(v157) == 1 && (v157 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v243 + 4120));
          unint64_t v153 = v246;
          unint64_t v9 = v247;
          if (result) {
            break;
          }
          unint64_t v9 = v247 - 2;
          __int16 v247 = v9;
        }
        while ((unint64_t)v9 >= v246 && (unint64_t)v9 < v248);
      }
      if ((unint64_t)v9 < v153 || (unint64_t)v9 >= v248) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      int v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(v4[4], 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(v4[4], 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A7EAA0(_Unwind_Exception *a1)
{
}

void sub_A7EAB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v1 + 24));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A7EAF8(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A73590(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_33:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_33;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (0x6DB6DB6DB6DB6DB7 * ((*((void *)v2 + 4) - v13) >> 3) <= v12) {
                break;
              }
              uint64_t v14 = v13 + 56 * v12;
              int v17 = *(_DWORD *)(v14 + 28);
              unint64_t v15 = (_DWORD *)(v14 + 28);
              int v16 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 >= v16
                  && *((_DWORD *)result + 8) <= *(_DWORD *)(v13 + 56 * v12 + 32)
                  && *((_DWORD *)result + 9) <= *(_DWORD *)(v13 + 56 * v12 + 36))
                {
                  *unint64_t v15 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 >= v18 {
                       && *(_DWORD *)(v13 + 56 * v12 + 32) <= *((_DWORD *)result + 8)
                }
                       && *(_DWORD *)(v13 + 56 * v12 + 36) <= *((_DWORD *)result + 9))
                {
                  *((_DWORD *)result + 7) = 0x7FFFFFFF;
                  char v5 = 1;
                  goto LABEL_6;
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A731E8((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A7ED38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A7ED4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A7ED60(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A73590(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      uint64_t v21 = sub_A73590(a1, a2, v18);
      long long v23 = *(_OWORD *)(v21 + 16);
      long long v22 = *(_OWORD *)(v21 + 32);
      uint64_t v24 = *(void *)(v21 + 48);
      long long v36 = *(_OWORD *)v21;
      long long v37 = v23;
      uint64_t v39 = v24;
      long long v38 = v22;
      if (SHIDWORD(v23) >= a6)
      {
        if (sub_A7D434((uint64_t)a1, &v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_A7D12C((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 44) = -1;
            *(_DWORD *)(v26 + 52) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      uint64_t v30 = sub_A73590(a1, a2, v27);
      long long v32 = *(_OWORD *)(v30 + 16);
      long long v31 = *(_OWORD *)(v30 + 32);
      uint64_t v33 = *(void *)(v30 + 48);
      long long v36 = *(_OWORD *)v30;
      long long v37 = v32;
      uint64_t v39 = v33;
      long long v38 = v31;
      if (SHIDWORD(v32) >= a6)
      {
        if (sub_A7D434((uint64_t)a1, &v36, a5) & 1) != 0 || (sub_A7D434((uint64_t)a1, &v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_A7D12C((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 44) = -1;
            *(_DWORD *)(v35 + 52) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A731E8(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_A7EFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v6 = a5[1];
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v7;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 344) = 0;
  sub_BD5668(a1 + 360, a2);
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 464), &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_A7F0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v15 + 280);
  sub_A3884C(v15 + 232);
  sub_A3884C(v18);
  sub_46645C(v17);
  sub_14A84(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_A7F11C(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  long long v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    char v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      char v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A7F3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A7F404(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A3C368((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    char v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A7F74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A7F7EC(uint64_t a1, int a2)
{
  int v96 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v95[0] = *(_OWORD *)(a1 + 88);
  v95[1] = v4;
  LOBYTE(v95[0]) = 1;
  v94[0] = (uint64_t)v95;
  v94[1] = a1;
  v94[2] = (uint64_t)&v96;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v97 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v10 - v11);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A80F00(v94, v10);
    LODWORD(v86[0]) = v14;
    unsigned int v11 = v97;
    if (v14 != 0x7FFFFFFF && (int)v97 < v14)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v89 < 0) {
          operator delete(__p[0]);
        }
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v86[0];
      unsigned int v97 = v86[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      unsigned int v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 / 10;
      int v49 = v22 % 10;
      int v50 = (void *)std::ostream::operator<<();
      sub_188FC78(v50, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v86, 2u);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      uint64_t v90 = v85;
      *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 / 10;
      int v49 = v22 % 10;
    }
    char v51 = v22 < 0 ? -5 : 5;
    unsigned int v52 = v48 + (((103 * (char)(v51 + v49)) >> 15) & 1) + ((103 * (char)(v51 + v49)) >> 10);
    int v53 = v10;
    int v54 = v52 + v10;
    unsigned int v55 = sub_A80F00(v94, v52 + v10);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v55 - v97))) >= (double)(int)fabs((double)(int)(10 * v52))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46);
      if (v56 >= 1) {
        --v56;
      }
    }
    double v46 = (double)(v56 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v57 = v55;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    int v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v59 = (void *)std::ostream::operator<<();
    sub_188FC78(v59, (uint64_t)" to ", 4);
    unsigned int v60 = (void *)std::ostream::operator<<();
    sub_188FC78(v60, (uint64_t)" sec for time shift of ", 23);
    uint64_t v61 = (void *)std::ostream::operator<<();
    sub_188FC78(v61, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    uint64_t v90 = v85;
    *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v97 = v57;
  int v23 = v53;
  if (v52)
  {
    double v62 = (double)v22 * 0.5;
    if (v62 >= 0.0)
    {
      if (v62 < 4.50359963e15)
      {
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
        goto LABEL_93;
      }
    }
    else if (v62 > -4.50359963e15)
    {
      uint64_t v63 = (uint64_t)(v62 + v62);
      if (v63 >= 1) {
        --v63;
      }
LABEL_93:
      double v62 = (double)(v63 >> 1);
    }
    double v64 = (double)v22 * 0.25;
    if (v64 >= 0.0)
    {
      if (v64 < 4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64) + 1;
        goto LABEL_101;
      }
    }
    else if (v64 > -4.50359963e15)
    {
      uint64_t v65 = (uint64_t)(v64 + v64);
      if (v65 >= 1) {
        --v65;
      }
LABEL_101:
      double v64 = (double)(v65 >> 1);
    }
    int v66 = (int)v64;
    if (*(_DWORD *)(a1 + 60) > (int)v64)
    {
      int v23 = v54;
      goto LABEL_30;
    }
    int v67 = (int)v62;
    int v23 = v54;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v69 = v66 + v67;
      int v83 = v67;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        unint64_t v70 = (void *)std::ostream::operator<<();
        sub_188FC78(v70, (uint64_t)"] Examining time shift of ", 26);
        int v71 = v69 / 10;
        int v72 = v69 % 10;
        uint64_t v73 = (void *)std::ostream::operator<<();
        sub_188FC78(v73, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v86, 2u);
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        uint64_t v90 = v85;
        *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v71 = v69 / 10;
        int v72 = v69 % 10;
      }
      if (v69 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unsigned int v75 = v71 + (((103 * (char)(v74 + v72)) >> 15) & 1) + ((103 * (char)(v74 + v72)) >> 10);
      unsigned int v76 = sub_A80F00(v94, v75 + v53);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v97 - v76))) >= (double)(int)fabs((double)(int)(10 * (v23 - (v75 + v53)))))
      {
        v67 += v66;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v77 = v76;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v90);
          sub_188FC78(&v90, (uint64_t)"[", 1);
          uint64_t v78 = (void *)std::ostream::operator<<();
          sub_188FC78(v78, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v79 = (void *)std::ostream::operator<<();
          sub_188FC78(v79, (uint64_t)" to ", 4);
          unint64_t v80 = (void *)std::ostream::operator<<();
          sub_188FC78(v80, (uint64_t)" sec for time shift of ", 23);
          uint64_t v81 = (void *)std::ostream::operator<<();
          sub_188FC78(v81, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v86, 2u);
          if (v87 < 0) {
            operator delete(v86[0]);
          }
          uint64_t v90 = v85;
          *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
          if (v93 < 0) {
            operator delete(v92);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v97 = v77;
        int v23 = v75 + v53;
        int v67 = v83;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0)
        {
LABEL_125:
          if (v68 < 4.50359963e15)
          {
            uint64_t v82 = (uint64_t)(v68 + v68) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v68 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v68 + v68);
        if (v82 >= 1) {
          --v82;
        }
LABEL_105:
        double v68 = (double)(v82 >> 1);
      }
LABEL_106:
      int v66 = (int)v68;
      if (*(_DWORD *)(a1 + 60) > (int)v68) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v97;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"departure", 9);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v89 < 0) {
        operator delete(__p[0]);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v96;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v96 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v96 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v96 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v96 + 3;
    int v35 = v96;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / 10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A80F00(v94, v42 + v10 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10));
  return v97;
}

void sub_A80970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A80AE4(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A811BC(a1 + 1336, v42);
  sub_A81470((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_A80E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A80F00(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A40DC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A81170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A811BC(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A839A8(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A83BA0(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A83D00(a1, v6);
        sub_A8400C(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A853A4(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A87B80(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A86304(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A8665C(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A81470@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  unint64_t v298 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v335) = 0;
  LOBYTE(__p[0]) = 0;
  unsigned int v296 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v335) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v297 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v300 = _Q0;
    int v299 = 1;
    int v306 = a1;
    v305 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_A87A9C(v7, v299 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v301 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          size_t v302 = (unsigned int *)(v12 + (v13 << 6));
          if (v302 != (unsigned int *)v301) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v301 = v12 + ((unint64_t)v11[1] << 6);
      size_t v302 = (unsigned int *)(v12 + (v13 << 6));
      if (v302 != (unsigned int *)v301) {
        break;
      }
LABEL_9:
      if (++v299 == v297) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v335 = 0x7FFFFFFF;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      __int16 v338 = 0;
      unint64_t v339 = 0x8000000080000000;
      int v340 = 0x7FFFFFFF;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0x8000000080000000;
      __int16 v345 = 0;
      unint64_t v346 = 0xFFFFFFFF00000000;
      int v347 = -1;
      uint64_t v348 = 0;
      uint64_t v350 = 0;
      uint64_t v351 = 0;
      uint64_t v352 = 0;
      int v349 = 0x7FFFFFFF;
      int v353 = 100;
      int v354 = -1;
      long long v355 = v300;
      long long v356 = v300;
      long long v357 = v300;
      long long v358 = 0u;
      long long v359 = 0u;
      long long v360 = 0u;
      long long v361 = 0u;
      uint64_t v14 = a1[3];
      long long v362 = 0u;
      long long v363 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v302 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v302 != -1) {
        break;
      }
LABEL_397:
      unint64_t v268 = v358;
      if ((void)v358 != *((void *)&v358 + 1))
      {
        unint64_t v269 = *((void *)&v358 + 1) - 72;
        if (*((void *)&v358 + 1) - 72 > (unint64_t)v358)
        {
          do
          {
            sub_A4D0C8(v268, v269);
            v268 += 72;
            v269 -= 72;
          }
          while (v268 < v269);
        }
      }
      sub_A29D50((uint64_t)__p);
      unint64_t v270 = *(void *)(v3 + 16);
      if (v270 >= *(void *)(v3 + 24))
      {
        uint64_t v271 = sub_A4D268(v298, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v271 = v270 + 296;
        *(void *)(v3 + 16) = v270 + 296;
      }
      int v7 = v305;
      *(void *)(v3 + 16) = v271;
      if (*((void *)&v362 + 1))
      {
        *(void *)&long long v363 = *((void *)&v362 + 1);
        operator delete(*((void **)&v362 + 1));
      }
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      if (*((void *)&v359 + 1))
      {
        *(void *)&long long v360 = *((void *)&v359 + 1);
        operator delete(*((void **)&v359 + 1));
      }
      uint64_t v272 = (void **)v358;
      if ((void)v358)
      {
        uint64_t v273 = *((void *)&v358 + 1);
        long long v274 = (void *)v358;
        if (*((void *)&v358 + 1) != (void)v358)
        {
          do
          {
            uint64_t v276 = *(void **)(v273 - 40);
            if (v276)
            {
              *(void *)(v273 - 32) = v276;
              operator delete(v276);
            }
            uint64_t v277 = (void **)(v273 - 72);
            uint64_t v278 = *(void *)(v273 - 72);
            if (v278)
            {
              uint64_t v279 = *(void *)(v273 - 64);
              uint64_t v275 = *(void **)(v273 - 72);
              if (v279 != v278)
              {
                do
                {
                  if (!*(_DWORD *)(v279 - 8))
                  {
                    long long v280 = *(void **)(v279 - 48);
                    if (v280)
                    {
                      *(void *)(v279 - 40) = v280;
                      operator delete(v280);
                    }
                    v281 = *(void **)(v279 - 80);
                    if (v281)
                    {
                      *(void *)(v279 - 72) = v281;
                      operator delete(v281);
                    }
                    uint64_t v282 = *(void **)(v279 - 104);
                    if (v282)
                    {
                      *(void *)(v279 - 96) = v282;
                      operator delete(v282);
                    }
                  }
                  v279 -= 168;
                }
                while (v279 != v278);
                uint64_t v275 = *v277;
              }
              *(void *)(v273 - 64) = v278;
              operator delete(v275);
              a1 = v306;
            }
            v273 -= 72;
          }
          while (v277 != v272);
          long long v274 = (void *)v358;
        }
        *((void *)&v358 + 1) = v272;
        operator delete(v274);
      }
      if (SHIBYTE(v352) < 0) {
        operator delete(v350);
      }
      v302 += 16;
      if (v302 == (unsigned int *)v301) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v302;
    int v308 = v299;
    unsigned int v309 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v326 = 0;
      __int16 v327 = 0;
      unint64_t v328 = 0;
      uint64_t v331 = 0;
      uint64_t v332 = 0;
      v330 = 0;
      v333[0] = 1;
      *(void *)&v333[4] = 0x8000000080000000;
      *(_WORD *)&v333[12] = 0;
      v333[14] = 0;
      int v385 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v310 = xmmword_20E12E0;
      __int16 v311 = 0;
      unint64_t v312 = 0x8000000080000000;
      __int16 v313 = 0;
      *(_OWORD *)uint64_t v314 = xmmword_20EB6B0;
      *(void *)&v314[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v316 = 0u;
      long long v317 = 0u;
      long long v318 = 0u;
      int v315 = -1;
      int v319 = 0x7FFFFFFF;
      unint64_t v321 = 0;
      uint64_t v322 = 0;
      unsigned int v320 = 0;
      char v323 = 1;
      unint64_t v324 = 0x8000000080000000;
      int v325 = 0;
      char v329 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)uint64_t v314 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v314[16] = v18[3];
      *(void *)&v314[8] = v21;
      *(_DWORD *)&v314[20] = *v18;
      unsigned int v22 = *(_DWORD *)&v314[20];
      uint64_t v23 = a1[3];
      uint64_t v364 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      sub_A1E9A0((uint64_t)v365, v23, v20, v22, 0, 0);
      *(void *)&long long v367 = *(void *)&v366[24] + 12 * *(unsigned int *)&v314[8];
      if (LOBYTE(v369[1])) {
        *(void **)((char *)&v369[1] + 4) = *(void **)&v314[12];
      }
      if (*(void *)&v366[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v366[16]
      }
                              + 4 * ((*(void *)v366 - *(void *)&v365[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A4C9D4((uint64_t)v365, &v364, v24);
      _CF = *(void *)v366 < *(void *)&v366[8] && *(void *)v366 >= *(void *)&v365[24];
      uint64_t v26 = (*(void *)v366 - *(void *)&v365[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      int v315 = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v314;
      unsigned int v30 = *(_DWORD *)&v314[20];
      uint64_t v31 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v28, *(int *)&v314[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            v291 = (void *)sub_2F404((uint64_t)exception, (long long *)v365);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      int v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        uint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v306;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v309 = *(_DWORD *)(v58 + 8);
        if (v309 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        double v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v306;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v306;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              unint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_434;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v309 = *(_DWORD *)(v58 + 8);
              if (v309 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_434:
              v287 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v287, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v306;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_434;
            }
LABEL_117:
            if (v67
              && ((uint64_t v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_434;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_434;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((unsigned int v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v306;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
      if (v309 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      uint64_t v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)uint64_t v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      uint64_t v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        int v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        unsigned int v97 = &v96[8 * v91];
        *(void *)unsigned int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v306;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        int v96 = 0;
        unsigned int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v306;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v306;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      unint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      uint64_t v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      uint64_t v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
LABEL_159:
      unsigned int v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v314;
      unsigned int v112 = *(_DWORD *)&v314[20];
      uint64_t v113 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v110, *(int *)&v314[4]))
      {
        uint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          uint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            uint64_t v294 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            long long v295 = (void *)sub_2F404((uint64_t)v294, (long long *)v365);
          }
          unint64_t v117 = (int *)((char *)v116 + *v116);
          uint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          uint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          uint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        uint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        uint64_t v123 = 0;
      }
      DWORD1(v310) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v314;
      uint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v314[20];
      int v128 = *(_DWORD *)&v314[8];
      uint64_t v129 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v314[4]))
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          uint64_t v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          unint64_t v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v365);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          unint64_t v288 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          uint64_t v289 = (void *)sub_2F404((uint64_t)v288, (long long *)v365);
        }
LABEL_180:
        uint64_t v132 = (char *)v130 + *v130;
        uint64_t v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      uint64_t v132 = sub_A10B80(v131 + 24, v125, 0);
      uint64_t v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      unsigned int v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        long long v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        long long v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      int v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        uint64_t v141 = 0;
        unsigned int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        uint64_t v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          uint64_t v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        unsigned int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)v365 = v145;
      *(_DWORD *)&v365[8] = v146;
      unint64_t v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      uint64_t v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        int v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        int v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v314[16];
      }
      *((void *)&v310 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v365, v151, v152);
      __int16 v311 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v314;
      unsigned int v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v315;
      int v158 = *(_DWORD *)&v314[8];
      uint64_t v159 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v314[4]))
      {
        unsigned int v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          uint64_t v285 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          v286 = (void *)sub_2F404((uint64_t)v285, (long long *)v365);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        unsigned int v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          v292 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v365);
        }
LABEL_213:
        int v162 = (char *)v160 + *v160;
        uint64_t v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      int v162 = sub_A10B80(v161 + 24, v155, 0);
      uint64_t v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      uint64_t v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      uint64_t v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        uint64_t v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        uint64_t v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      int v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        int v171 = 0;
        int v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        int v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          int v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        int v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)v365 = v175;
      *(_DWORD *)&v365[8] = v176;
      unsigned int v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      uint64_t v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        uint64_t v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        uint64_t v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v314[16];
      }
      unint64_t v312 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v365, v181, v182);
      __int16 v313 = v183;
      int v374 = -1;
      sub_9F6FA0((uint64_t)v365, &v310);
      int v374 = 0;
      if (v385)
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (v374) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v371)
        {
          *((void *)&v371 + 1) = v371;
          operator delete((void *)v371);
        }
        if (v369[0])
        {
          v369[1] = v369[0];
          operator delete(v369[0]);
        }
        if ((void)v367)
        {
          *((void *)&v367 + 1) = v367;
          operator delete((void *)v367);
        }
        goto LABEL_256;
      }
      *(_OWORD *)v375 = *(_OWORD *)v365;
      *(_OWORD *)&v375[16] = *(_OWORD *)&v365[16];
      v376[0] = *(_OWORD *)v366;
      *(_OWORD *)((char *)v376 + 12) = *(_OWORD *)&v366[12];
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      *(_OWORD *)uint64_t v377 = v367;
      uint64_t v378 = v368;
      uint64_t v368 = 0;
      long long v367 = 0uLL;
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      long long v379 = *(_OWORD *)v369;
      int v380 = v369[2];
      memset(v369, 0, sizeof(v369));
      int v381 = v370;
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      long long v382 = v371;
      uint64_t v383 = v372;
      uint64_t v372 = 0;
      long long v371 = 0uLL;
      long long v384 = v373;
      if (!v374) {
        goto LABEL_250;
      }
LABEL_256:
      if (v320)
      {
        unint64_t v321 = v320;
        operator delete(v320);
      }
      if (*((void *)&v317 + 1))
      {
        *(void *)&long long v318 = *((void *)&v317 + 1);
        operator delete(*((void **)&v317 + 1));
      }
      if ((void)v316)
      {
        *((void *)&v316 + 1) = v316;
        operator delete((void *)v316);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v327;
        if ((unint64_t)v327 >= v328) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v329 = 1;
      unsigned int v187 = v18[3];
      unsigned int v188 = v18[7];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      *(_DWORD *)v365 = 0;
      *(_DWORD *)&v365[4] = v187;
      *(void *)&v365[12] = v189;
      *(void *)&v365[20] = v190;
      *(_DWORD *)&v365[8] = v188;
      int v374 = 1;
      if (v385)
      {
        if (v385 == 1)
        {
          *(_OWORD *)v375 = *(_OWORD *)v365;
          *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)v375 = *(_OWORD *)v365;
        *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
        int v385 = 1;
        goto LABEL_281;
      }
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      if (v374)
      {
        if (v374 == 1) {
          goto LABEL_280;
        }
        int v385 = v374;
      }
      else
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (!v374)
        {
          if ((void)v371)
          {
            *((void *)&v371 + 1) = v371;
            operator delete((void *)v371);
          }
          if (v369[0])
          {
            v369[1] = v369[0];
            operator delete(v369[0]);
          }
          if ((void)v367)
          {
            *((void *)&v367 + 1) = v367;
            operator delete((void *)v367);
          }
        }
      }
LABEL_281:
      unsigned int v309 = *v18;
      uint64_t v184 = (uint64_t)v327;
      if ((unint64_t)v327 >= v328)
      {
LABEL_282:
        __int16 v327 = (char *)sub_A4CBF4((uint64_t *)&v326, (uint64_t)v375);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v385;
      if (v385 == 1)
      {
        long long v222 = *(_OWORD *)v375;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v375[12];
        *(_OWORD *)uint64_t v184 = v222;
        __int16 v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v385) {
          sub_9F6FA0(v184, (long long *)v375);
        }
        __int16 v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359)
        {
LABEL_268:
          char v186 = sub_A4CECC((void ***)&v358, (uint64_t)&v326);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      char v191 = (char *)v326;
      int v192 = v327;
      int64_t v193 = v327 - (unsigned char *)v326;
      if (v327 != v326)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        unint64_t v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v306;
        do
        {
          int v198 = (long long *)&v195[v196];
          long long v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *int v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v329;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      char v202 = v330;
      uint64_t v203 = v331 - (unsigned char *)v330;
      if (v331 != v330)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        uint64_t v204 = (char *)operator new(v331 - (unsigned char *)v330);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        unsigned int v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v333;
      *(void *)(v185 + 63) = *(void *)&v333[7];
      *(void *)(v185 + 56) = v206;
      char v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v358 + 1) = v186;
      unint64_t v207 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 1;
      unsigned int v208 = v18[5];
      unsigned int v209 = (char *)a1[13];
      uint64_t v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          int v223 = &v210[8 * v213];
          a1[14] = v223;
          unsigned int v224 = v305;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_435:
          }
            sub_188D718();
          char v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            unsigned int v224 = v305;
            a1 = v306;
            int v223 = &v217[8 * v211 + v218];
            v306[13] = &v217[8 * v211];
            v306[14] = v223;
            v306[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              unsigned int v220 = &v217[8 * v211];
              int v221 = v220;
              a1 = v306;
              goto LABEL_327;
            }
            unsigned int v220 = &v217[8 * v211];
            int v221 = v220;
            a1 = v306;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_445;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            int v227 = &v210[-v226];
            int v221 = &v220[-v226];
            unint64_t v228 = &v217[8 * v211 - 16];
            unint64_t v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)unint64_t v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            uint64_t v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_445:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            uint64_t v210 = v209;
            unsigned int v224 = v305;
            int v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              int v223 = (char *)a1[14];
            }
          }
        }
        unsigned int v209 = (char *)*v224;
        uint64_t v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        uint64_t v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v304 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_435;
        }
        uint64_t v249 = (char *)operator new(8 * v247);
      }
      else
      {
        uint64_t v249 = 0;
      }
      size_t v251 = 8 * v244;
      unsigned __int8 v252 = &v249[8 * v246];
      size_t v303 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          int v254 = v210;
          int v255 = &v249[8 * v246];
          a1 = v306;
          size_t v256 = v303;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        int v254 = &v210[-v259];
        int v255 = &v252[-v259];
        uint64_t v260 = &v249[8 * v246 - 16];
        uint64_t v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v306;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)uint64_t v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v303;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        uint64_t v210 = (char *)*v305;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v304];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v306;
      v306[13] = v252;
      v306[14] = &v252[v303];
      v306[15] = &v249[8 * v304];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v385)
      {
        if ((void)v382)
        {
          *((void *)&v382 + 1) = v382;
          operator delete((void *)v382);
        }
        if ((void)v379)
        {
          *((void *)&v379 + 1) = v379;
          operator delete((void *)v379);
        }
        if (v377[0])
        {
          v377[1] = v377[0];
          operator delete(v377[0]);
        }
      }
      if (v330)
      {
        uint64_t v331 = v330;
        operator delete(v330);
      }
      unsigned int v238 = (char *)v326;
      if (v326)
      {
        int v239 = v327;
        uint64_t v19 = v326;
        if (v327 != v326)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              unint64_t v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              int v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              unsigned int v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v326;
        }
        __int16 v327 = v238;
        operator delete(v19);
      }
      --v308;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v306;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      uint64_t v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v296, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A83400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    double v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            unint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A839A8(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A83B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A83BA0(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v18 = 0x1FFFFFFFELL;
    int v5 = sub_A3B520(v4, &v18);
    int v19 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 10 * v2;
    uint64_t v16 = -1;
    int v17 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_A86F6C((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_A87340(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A86878((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 2147483646)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_A86878((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 2147483646)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v19);
  }
}

double sub_A83D00(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v36);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v33 = *(unsigned int **)(a1 + 216);
  if (v4 != v33)
  {
    int v5 = (void **)(a1 + 104);
    int v31 = a2 + 2;
    int v32 = a2 + 1;
    int v30 = ~a2;
    while (1)
    {
      unsigned int v35 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v35);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v34 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 30;
LABEL_17:
      sub_A86790(v5, 0);
      sub_A87A9C(v5, v32 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v35, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) == v15)
      {
        sub_D2BFC(v5, 1uLL);
        int v15 = *(unsigned int **)(a1 + 104);
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
        if (*(unsigned int **)(a1 + 112) == v15)
        {
          sub_D2BFC(v5, 1uLL);
          uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
          unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
          if (v18 == (unsigned int *)v19) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
      }
      uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_21;
      }
      do
      {
LABEL_20:
        unsigned int *v18 = v35;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        v18[4] = -1;
        v18[7] = v20 + v11;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_21:
      uint64_t v21 = v35;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_23:
          if (*v24 > (unint64_t)v35)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + v30;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 2147483646;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_A86878((void **)(a1 + 104), 0, v31 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v35);
      }
      uint64_t v4 = v34 + 1;
      if (v34 + 1 == v33) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v36) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A8400C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v249);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v231 = *(unsigned int **)(a1 + 216);
  if (v4 != v231)
  {
    int v5 = (void **)(a1 + 104);
    int v236 = a2 + 2;
    int v237 = a2 + 1;
    int v234 = ~a2;
    unint64_t v235 = (uint64_t *)(a1 + 232);
    uint64_t v230 = (void **)(a1 + 256);
    int v239 = (void **)(a1 + 104);
    while (1)
    {
      uint64_t v233 = v4;
      unsigned int v6 = *v4;
      BOOL v7 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v243, *(void *)(a1 + 24), *v7);
      uint64_t v8 = v244;
      uint64_t v9 = &v245;
      if (v248) {
        uint64_t v9 = v247;
      }
      if ((unint64_t)v244 < *v9) {
        break;
      }
LABEL_3:
      uint64_t v4 = v233 + 1;
      if (v233 + 1 == v231) {
        goto LABEL_303;
      }
    }
    unsigned int v238 = v6 + 1;
    unsigned int v240 = v6;
    while (1)
    {
      unint64_t v13 = __ROR8__(*v8, 32);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 56) - 1;
      unint64_t v16 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
      unint64_t v17 = v16 ^ (v16 >> 33);
      uint64_t v18 = *(void *)(v14 + 80);
      int v20 = *(_DWORD *)(v14 + 64);
      int v19 = *(_DWORD *)(v14 + 68);
      uint64_t v21 = v17 & v15;
      int v22 = (unsigned int *)(v18 + 12 * (v17 & v15));
      unsigned int v24 = *v22;
      unsigned int v23 = v22[1];
      if (v19 == v23 && v20 == v24) {
        goto LABEL_56;
      }
      if (*(void *)(v14 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v23, v24) != v13)
      {
        uint64_t v21 = (v21 + v44) & v15;
        unint64_t v45 = (unsigned int *)(v18 + 12 * v21);
        unsigned int v24 = *v45;
        unsigned int v23 = v45[1];
        ++v44;
        if (v19 == v23 && v20 == v24) {
          goto LABEL_56;
        }
      }
LABEL_53:
      if (v21 != -1)
      {
        uint64_t v47 = v18 + 12 * v21;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_109;
        }
        goto LABEL_90;
      }
      uint64_t v26 = -1;
      if (sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_31:
        uint64_t v30 = *(void *)(v14 + 56) - 1;
        uint64_t v31 = *(void *)(v14 + 80);
        int v33 = *(_DWORD *)(v14 + 64);
        int v32 = *(_DWORD *)(v14 + 68);
        uint64_t v34 = v30 & v17;
        unsigned int v35 = (unsigned int *)(v31 + 12 * (v30 & v17));
        unsigned int v37 = *v35;
        unsigned int v36 = v35[1];
        uint64_t v38 = *(void *)(v14 + 40);
        if (v32 == v36 && v33 == v37) {
          goto LABEL_80;
        }
        if (v38)
        {
          uint64_t v40 = -1;
          uint64_t v41 = 1;
          do
          {
            if (*(_DWORD *)(v14 + 36) == v36 && *(_DWORD *)(v14 + 32) == v37)
            {
              if (v40 == -1) {
                uint64_t v40 = v34;
              }
            }
            else if (__PAIR64__(v36, v37) == v13)
            {
              goto LABEL_74;
            }
            uint64_t v34 = (v34 + v41) & v30;
            unint64_t v42 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v42;
            unsigned int v36 = v42[1];
            ++v41;
          }
          while (v32 != v36 || v33 != v37);
          if (v40 == -1) {
LABEL_80:
          }
            uint64_t v40 = v34;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555) {
            goto LABEL_308;
          }
        }
        else
        {
          uint64_t v54 = 1;
          while (__PAIR64__(v36, v37) != v13)
          {
            uint64_t v34 = (v34 + v54) & v30;
            uint64_t v55 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v55;
            unsigned int v36 = v55[1];
            ++v54;
            if (v32 == v36 && v33 == v37)
            {
              uint64_t v38 = 0;
              goto LABEL_80;
            }
          }
LABEL_74:
          if (v34 != -1)
          {
            uint64_t v47 = v31 + 12 * v34;
            unsigned int v48 = *(_DWORD *)(v47 + 8);
            if (v48 != -1) {
              goto LABEL_109;
            }
            goto LABEL_90;
          }
          uint64_t v40 = -1;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555)
          {
LABEL_308:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v38
          && ((uint64_t v58 = (_DWORD *)(v31 + 12 * v40), *(_DWORD *)(v14 + 36) == v58[1])
            ? (BOOL v59 = *(_DWORD *)(v14 + 32) == *v58)
            : (BOOL v59 = 0),
              v59))
        {
          *(void *)(v14 + 40) = v38 - 1;
          uint64_t v53 = 3 * v40;
        }
        else
        {
          *(void *)(v14 + 48) = v57 + 1;
          uint64_t v53 = 3 * v40;
        }
        goto LABEL_89;
      }
LABEL_57:
      uint64_t v50 = *(void *)(v14 + 40);
      uint64_t v49 = *(void *)(v14 + 48);
      if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
        goto LABEL_308;
      }
      uint64_t v31 = *(void *)(v14 + 80);
      if (v50
        && ((unsigned int v51 = (_DWORD *)(v31 + 12 * v26), *(_DWORD *)(v14 + 36) == v51[1])
          ? (BOOL v52 = *(_DWORD *)(v14 + 32) == *v51)
          : (BOOL v52 = 0),
            v52))
      {
        *(void *)(v14 + 40) = v50 - 1;
      }
      else
      {
        *(void *)(v14 + 48) = v49 + 1;
      }
      uint64_t v53 = 3 * v26;
LABEL_89:
      uint64_t v60 = 4 * v53;
      uint64_t v61 = v31 + v60;
      *(void *)uint64_t v61 = v13;
      *(_DWORD *)(v61 + 8) = -1;
      uint64_t v47 = *(void *)(v14 + 80) + v60;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 != -1) {
        goto LABEL_109;
      }
LABEL_90:
      int v62 = *(_DWORD *)(v14 + 112);
      *(_DWORD *)(v14 + 112) = v62 + 1;
      *(_DWORD *)(v47 + 8) = v62;
      double v64 = *(char **)(v14 + 96);
      unint64_t v63 = *(void *)(v14 + 104);
      if ((unint64_t)v64 >= v63)
      {
        unsigned int v66 = (char **)(v14 + 88);
        uint64_t v67 = *(char **)(v14 + 88);
        uint64_t v68 = (v64 - v67) >> 3;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v70 = v63 - (void)v67;
        if (v70 >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v241 = v69;
        if (v69)
        {
          if (v69 >> 61) {
            goto LABEL_307;
          }
          int v71 = (char *)operator new(8 * v69);
          unsigned int v66 = (char **)(v14 + 88);
          int v72 = &v71[8 * v68];
          *(void *)int v72 = v13;
          uint64_t v65 = (uint64_t)(v72 + 8);
          if (v64 != v67) {
            goto LABEL_100;
          }
LABEL_139:
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v241];
          int v5 = (void **)(a1 + 104);
          if (!v64) {
            goto LABEL_108;
          }
        }
        else
        {
          int v71 = 0;
          int v72 = (char *)(8 * v68);
          *(void *)(8 * v68) = v13;
          uint64_t v65 = 8 * v68 + 8;
          if (v64 == v67) {
            goto LABEL_139;
          }
LABEL_100:
          unint64_t v73 = v64 - 8 - v67;
          if (v73 < 0x58) {
            goto LABEL_313;
          }
          if ((unint64_t)(v67 - v71) < 0x20) {
            goto LABEL_313;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v76 = &v64[-v75];
          v72 -= v75;
          unint64_t v77 = &v71[8 * v68 - 16];
          uint64_t v78 = (long long *)(v64 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)unint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          double v64 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_313:
            do
            {
              uint64_t v81 = *((void *)v64 - 1);
              v64 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v64 != v67);
          }
          double v64 = *v66;
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v241];
          int v5 = (void **)(a1 + 104);
          if (!v64) {
            goto LABEL_108;
          }
        }
        operator delete(v64);
        goto LABEL_108;
      }
      *(void *)double v64 = v13;
      uint64_t v65 = (uint64_t)(v64 + 8);
LABEL_108:
      *(void *)(v14 + 96) = v65;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
LABEL_109:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v242 = v48;
      if (v240 == v48) {
        goto LABEL_247;
      }
      BOOL v83 = *(unsigned int **)(a1 + 104);
      uint64_t v82 = *(unsigned int **)(a1 + 112);
      uint64_t v84 = (char *)v82 - (char *)v83;
      if (v82 == v83)
      {
        uint64_t v88 = v84 >> 3;
        unint64_t v89 = 1 - (v84 >> 3);
        uint64_t v90 = *(void *)(a1 + 120);
        if (v89 <= (v90 - (uint64_t)v82) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v89);
          unsigned int v97 = (char *)&v82[2 * v89];
          *(void *)(a1 + 112) = v97;
        }
        else
        {
          uint64_t v91 = v90 - (void)v83;
          uint64_t v92 = v91 >> 2;
          if ((unint64_t)(v91 >> 2) <= 1) {
            uint64_t v92 = 1;
          }
          BOOL v213 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v213) {
            unint64_t v93 = v92;
          }
          if (v93 >> 61) {
LABEL_307:
          }
            sub_188D718();
          uint64_t v94 = 8 * v93;
          unint64_t v95 = (char *)operator new(8 * v93);
          int v96 = &v95[8 * v88];
          bzero(v96, 8 * v89);
          *(void *)(a1 + 104) = v96;
          *(void *)(a1 + 112) = &v96[8 * v89];
          *(void *)(a1 + 120) = &v95[v94];
          if (v82)
          {
            operator delete(v82);
            unsigned int v97 = *(char **)(a1 + 112);
          }
          else
          {
            unsigned int v97 = &v96[8 * v89];
          }
        }
        int v5 = (void **)(a1 + 104);
        BOOL v83 = (unsigned int *)*v239;
        uint64_t v85 = *(void *)(a1 + 128);
        uint64_t v86 = *(unsigned int *)*v239;
        if (*v239 == v97)
        {
          unint64_t v87 = *(char **)(a1 + 120);
          if (v87 != v97)
          {
            *(void *)unsigned int v97 = 0;
            *(void *)(a1 + 112) = v97 + 8;
LABEL_137:
            BOOL v83 = *(unsigned int **)(a1 + 104);
            uint64_t v107 = *(void *)(a1 + 128);
            goto LABEL_144;
          }
          uint64_t v98 = 1;
          uint64_t v99 = v87 - (char *)v83;
          if ((unint64_t)(v99 >> 2) > 1) {
            uint64_t v98 = v99 >> 2;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100)
          {
            if (v100 >> 61) {
              goto LABEL_307;
            }
            uint64_t v101 = (char *)operator new(8 * v100);
            uint64_t v102 = v101;
            *(void *)uint64_t v101 = 0;
            uint64_t v103 = (uint64_t)(v101 + 8);
            if (v97 != (char *)v83)
            {
LABEL_131:
              unint64_t v104 = v97 - 8 - (char *)v83;
              if (v104 < 0x58 || (unint64_t)(v97 - v101) < 0x20)
              {
                int v105 = (unsigned int *)v97;
                int v5 = (void **)(a1 + 104);
                goto LABEL_134;
              }
              uint64_t v215 = (v104 >> 3) + 1;
              uint64_t v216 = 8 * (v215 & 0x3FFFFFFFFFFFFFFCLL);
              int v105 = (unsigned int *)&v97[-v216];
              v102 -= v216;
              char v217 = v101 - 16;
              size_t v218 = v97 - 16;
              uint64_t v219 = v215 & 0x3FFFFFFFFFFFFFFCLL;
              int v5 = (void **)(a1 + 104);
              do
              {
                long long v220 = *(_OWORD *)v218;
                *((_OWORD *)v217 - 1) = *((_OWORD *)v218 - 1);
                *(_OWORD *)char v217 = v220;
                v217 -= 32;
                v218 -= 32;
                v219 -= 4;
              }
              while (v219);
              if (v215 != (v215 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_134:
                  uint64_t v106 = *((void *)v105 - 1);
                  v105 -= 2;
                  *((void *)v102 - 1) = v106;
                  v102 -= 8;
                }
                while (v105 != v83);
              }
              unsigned int v97 = (char *)*v5;
              *(void *)(a1 + 104) = v102;
              *(void *)(a1 + 112) = v103;
              *(void *)(a1 + 120) = &v101[8 * v100];
              if (!v97) {
                goto LABEL_137;
              }
LABEL_136:
              operator delete(v97);
              goto LABEL_137;
            }
          }
          else
          {
            uint64_t v101 = 0;
            uint64_t v102 = 0;
            *(void *)&def_332C = 0;
            uint64_t v103 = 8;
            if (v97 != (char *)v83) {
              goto LABEL_131;
            }
          }
          int v5 = (void **)(a1 + 104);
          *(void *)(a1 + 104) = v102;
          *(void *)(a1 + 112) = v103;
          *(void *)(a1 + 120) = &v101[8 * v100];
          if (!v97) {
            goto LABEL_137;
          }
          goto LABEL_136;
        }
      }
      else
      {
        uint64_t v85 = *(void *)(a1 + 128);
        uint64_t v86 = *v83;
      }
      uint64_t v107 = v85;
LABEL_144:
      sub_A86AC4(v5, 0, (char *)(v85 + (v86 << 6)), (char *)(v107 + ((unint64_t)v83[1] << 6)));
      unint64_t v108 = v237 + *(_DWORD *)(a1 + 96) * v238;
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      unsigned int v110 = *(unsigned int **)(a1 + 112);
      if (v108 >= ((char *)v110 - (char *)v109) >> 3) {
        goto LABEL_194;
      }
      unsigned int v111 = v109[2 * v108];
      unsigned int v112 = v109[2 * v108 + 1];
      unsigned int v113 = v112 - v111;
      if (v112 == v111) {
        goto LABEL_194;
      }
      unsigned __int16 v114 = 0;
      unsigned int v115 = 0;
LABEL_147:
      while (2)
      {
        uint64_t v116 = *(unsigned int **)(a1 + 104);
        if (v108 >= (uint64_t)(*(void *)(a1 + 112) - (void)v116) >> 3
          || (unsigned int v117 = v116[2 * v108], v116[2 * v108 + 1] - v117 <= v115))
        {
          unint64_t v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v228, "key does not exist and cannot be added");
          goto LABEL_306;
        }
        unint64_t v118 = v117 + v115;
        uint64_t v119 = *(void *)(a1 + 128);
        if (v118 >= (*(void *)(a1 + 136) - v119) >> 6)
        {
          unint64_t v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v228, "index out of range");
LABEL_306:
        }
        size_t v120 = (long long *)(v119 + (v118 << 6));
        long long v121 = *v120;
        long long v122 = v120[1];
        long long v123 = v120[3];
        long long v252 = v120[2];
        long long v253 = v123;
        long long v250 = v121;
        long long v251 = v122;
        uint64_t v126 = v116;
        uint64_t v124 = *v116;
        uint64_t v125 = v126[1];
        if (v125 != v124)
        {
          uint64_t v127 = 0;
          uint64_t v130 = v124 << 6;
          uint64_t v131 = (v125 << 6) - (v124 << 6);
          uint64_t v132 = (_DWORD *)(v119 + v130 + 44);
          while (1)
          {
            int v133 = *(v132 - 4);
            if (v133 != 0x7FFFFFFF)
            {
              if (v133 <= SHIDWORD(v251) && *(v132 - 3) <= (int)v252)
              {
                unsigned int v134 = *(v132 - 2);
                if (v134 <= DWORD1(v252)
                  && (v134 != DWORD1(v252)
                   || v133 != HIDWORD(v251)
                   || 10 * v133 - *v132 <= 10 * HIDWORD(v251) - HIDWORD(v252)))
                {
                  unint64_t v129 = v114 & 0xFF00 | (unint64_t)(v127 << 8);
                  unsigned __int16 v114 = v114 & 0xFF00 | ((_WORD)v127 << 8);
                  if (++v115 == v113) {
                    goto LABEL_172;
                  }
                  goto LABEL_147;
                }
              }
              if (SHIDWORD(v251) <= v133 && (int)v252 <= *(v132 - 3))
              {
                unsigned int v135 = *(v132 - 2);
                if (DWORD1(v252) <= v135
                  && (DWORD1(v252) != v135
                   || HIDWORD(v251) != v133
                   || 10 * HIDWORD(v251) - HIDWORD(v252) <= 10 * v133 - *v132))
                {
                  *(v132 - 4) = 0x7FFFFFFF;
                  uint64_t v127 = 1;
                }
              }
            }
            v132 += 16;
            v131 -= 64;
            if (!v131) {
              goto LABEL_152;
            }
          }
        }
        uint64_t v127 = 0;
LABEL_152:
        int v128 = sub_A86F6C((char **)v5, 0, &v250);
        *(void *)(v128 + 52) = -1;
        *((_DWORD *)v128 + 15) = 0x7FFFFFFF;
        unint64_t v129 = v114 & 0xFF00 | (unint64_t)(v127 << 8);
        unsigned __int16 v114 = v129 | 1;
        if (++v115 != v113) {
          continue;
        }
        break;
      }
LABEL_172:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      unsigned int v110 = *(unsigned int **)(a1 + 112);
      if (v129)
      {
        if (v110 != v109)
        {
          uint64_t v136 = *(void *)(a1 + 128);
          uint64_t v137 = *v109;
          goto LABEL_175;
        }
        sub_D2BFC(v5, 1uLL);
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v136 = *(void *)(a1 + 128);
        uint64_t v137 = *v109;
        if (*(unsigned int **)(a1 + 112) == v109)
        {
          sub_D2BFC(v239, 1uLL);
          uint64_t v109 = *(unsigned int **)(a1 + 104);
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = *(void *)(a1 + 128) + ((unint64_t)v109[1] << 6);
          if (v138 == v139)
          {
LABEL_188:
            int v140 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v109) {
              goto LABEL_189;
            }
            goto LABEL_193;
          }
        }
        else
        {
LABEL_175:
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = v136 + ((unint64_t)v109[1] << 6);
          if (v138 == v139) {
            goto LABEL_188;
          }
        }
        int v140 = (void **)(a1 + 104);
        while (*(_DWORD *)(v138 + 28) != 0x7FFFFFFF)
        {
          v138 += 64;
          if (v138 == v139)
          {
            unint64_t v138 = v139;
            if (*(unsigned int **)(a1 + 112) != v109) {
              goto LABEL_193;
            }
            goto LABEL_189;
          }
        }
        if (v138 == v139 || (unint64_t v141 = v138 + 64, v138 + 64 == v139))
        {
          if (*(unsigned int **)(a1 + 112) == v109) {
            goto LABEL_189;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v141 + 28) != 0x7FFFFFFF)
            {
              long long v146 = *(_OWORD *)v141;
              long long v147 = *(_OWORD *)(v141 + 16);
              long long v148 = *(_OWORD *)(v141 + 48);
              *(_OWORD *)(v138 + 32) = *(_OWORD *)(v141 + 32);
              *(_OWORD *)(v138 + 48) = v148;
              *(_OWORD *)unint64_t v138 = v146;
              *(_OWORD *)(v138 + 16) = v147;
              v138 += 64;
            }
            v141 += 64;
          }
          while (v141 != v139);
          uint64_t v109 = (unsigned int *)*v239;
          if (*(void **)(a1 + 112) != *v239) {
            goto LABEL_193;
          }
LABEL_189:
          sub_D2BFC(v140, 1uLL);
          uint64_t v109 = (unsigned int *)*v140;
        }
LABEL_193:
        sub_A86AC4(v140, 0, (char *)v138, (char *)(*(void *)(a1 + 128) + ((unint64_t)v109[1] << 6)));
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        unsigned int v110 = *(unsigned int **)(a1 + 112);
      }
LABEL_194:
      uint64_t v142 = (char *)v110 - (char *)v109;
      if (v110 != v109)
      {
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *v109;
LABEL_211:
        uint64_t v159 = v143;
        goto LABEL_227;
      }
      uint64_t v149 = v142 >> 3;
      unint64_t v150 = 1 - (v142 >> 3);
      uint64_t v151 = *(void *)(a1 + 120);
      if (v150 <= (v151 - (uint64_t)v110) >> 3)
      {
        bzero(v109, 8 * v150);
        int v158 = &v109[2 * v150];
        *(void *)(a1 + 112) = v158;
      }
      else
      {
        uint64_t v152 = v151 - (void)v109;
        uint64_t v153 = v152 >> 2;
        if ((unint64_t)(v152 >> 2) <= 1) {
          uint64_t v153 = 1;
        }
        BOOL v213 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v213) {
          unint64_t v154 = v153;
        }
        if (v154 >> 61) {
          goto LABEL_307;
        }
        uint64_t v155 = 8 * v154;
        unsigned int v156 = (char *)operator new(8 * v154);
        unsigned int v157 = &v156[8 * v149];
        bzero(v157, 8 * v150);
        int v158 = (unsigned int *)&v157[8 * v150];
        *(void *)(a1 + 104) = v157;
        *(void *)(a1 + 112) = v158;
        *(void *)(a1 + 120) = &v156[v155];
        if (v109)
        {
          operator delete(v109);
          int v158 = *(unsigned int **)(a1 + 112);
        }
      }
      uint64_t v109 = (unsigned int *)*v239;
      uint64_t v143 = *(void *)(a1 + 128);
      uint64_t v144 = *(unsigned int *)*v239;
      if (*v239 != v158) {
        goto LABEL_211;
      }
      uint64_t v145 = *(unsigned int **)(a1 + 120);
      if (v145 != v158)
      {
        *(void *)int v158 = 0;
        *(void *)(a1 + 112) = v158 + 2;
        goto LABEL_226;
      }
      uint64_t v160 = 1;
      uint64_t v161 = (char *)v145 - (char *)v109;
      if ((unint64_t)(v161 >> 2) > 1) {
        uint64_t v160 = v161 >> 2;
      }
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v162 = v160;
      }
      if (v162)
      {
        if (v162 >> 61) {
          goto LABEL_307;
        }
        uint64_t v163 = (char *)operator new(8 * v162);
        uint64_t v164 = v163;
        *(void *)uint64_t v163 = 0;
        uint64_t v165 = (uint64_t)(v163 + 8);
        if (v158 == v109)
        {
LABEL_288:
          *(void *)(a1 + 104) = v164;
          *(void *)(a1 + 112) = v165;
          *(void *)(a1 + 120) = &v163[8 * v162];
          if (!v158) {
            goto LABEL_226;
          }
LABEL_225:
          operator delete(v158);
          goto LABEL_226;
        }
      }
      else
      {
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        *(void *)&def_332C = 0;
        uint64_t v165 = 8;
        if (v158 == v109) {
          goto LABEL_288;
        }
      }
      unint64_t v166 = (char *)(v158 - 2) - (char *)v109;
      if (v166 < 0x58 || (unint64_t)((char *)v158 - v163) < 0x20)
      {
        uint64_t v167 = v158;
        uint64_t v168 = (unsigned int **)(a1 + 104);
        do
        {
LABEL_223:
          uint64_t v169 = *((void *)v167 - 1);
          v167 -= 2;
          *((void *)v164 - 1) = v169;
          v164 -= 8;
        }
        while (v167 != v109);
        goto LABEL_224;
      }
      uint64_t v221 = (v166 >> 3) + 1;
      uint64_t v222 = 8 * (v221 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v167 = &v158[v222 / 0xFFFFFFFFFFFFFFFCLL];
      v164 -= v222;
      int v223 = v163 - 16;
      unsigned int v224 = v158 - 4;
      uint64_t v225 = v221 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v168 = (unsigned int **)(a1 + 104);
      do
      {
        long long v226 = *(_OWORD *)v224;
        *((_OWORD *)v223 - 1) = *((_OWORD *)v224 - 1);
        *(_OWORD *)int v223 = v226;
        v223 -= 32;
        v224 -= 8;
        v225 -= 4;
      }
      while (v225);
      if (v221 != (v221 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_223;
      }
LABEL_224:
      int v158 = *v168;
      *(void *)(a1 + 104) = v164;
      *(void *)(a1 + 112) = v165;
      *(void *)(a1 + 120) = &v163[8 * v162];
      if (v158) {
        goto LABEL_225;
      }
LABEL_226:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v159 = *(void *)(a1 + 128);
LABEL_227:
      uint64_t v170 = v143 + (v144 << 6);
      uint64_t v171 = v159 + ((unint64_t)v109[1] << 6);
      if (v170 != v171)
      {
        int v172 = v244;
        do
        {
          *(_DWORD *)uint64_t v170 = v240;
          *(_DWORD *)(v170 + 16) = -1;
          int32x2_t v173 = *(int32x2_t *)(v170 + 28);
          *(_DWORD *)(v170 + 12) = v173.i32[0];
          int v174 = *((_DWORD *)v172 + 2);
          int v175 = v174 / 10;
          int v176 = v174 % 10;
          if (v174 < 0) {
            char v177 = -5;
          }
          else {
            char v177 = 5;
          }
          *(int32x2_t *)(v170 + 28) = vadd_s32(vdup_n_s32(v175+ (((103 * (char)(v177 + v176)) >> 15) & 1)+ ((103 * (char)(v177 + v176)) >> 10)), v173);
          v170 += 64;
        }
        while (v170 != v171);
      }
      int v178 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v179 = v178 + v178 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v180 = v242;
        unsigned int v181 = *(unint64_t **)(a1 + 48);
        if (!v181) {
          goto LABEL_242;
        }
      }
      else
      {
        unsigned int v179 = -1;
        unint64_t v180 = v242;
        unsigned int v181 = *(unint64_t **)(a1 + 48);
        if (!v181)
        {
LABEL_242:
          int v185 = 2147483646;
          goto LABEL_243;
        }
      }
      if (*v181 > v180)
      {
        unsigned int v182 = 0;
        unsigned int v183 = *(_DWORD *)(a1 + 100) + v234;
        unsigned int v184 = v183;
        while (v182 <= v183)
        {
          int v185 = *(_DWORD *)sub_A3F53C(v181 + 2, v181[1] * v180 + v184);
          v182 += 2;
          v184 -= 2;
          if (v185 != 0x7FFFFFFF) {
            goto LABEL_243;
          }
        }
      }
      int v185 = 0x7FFFFFFF;
LABEL_243:
      unint64_t v186 = v242 + 1;
      unsigned int v187 = v236 + v178 * v186;
      unsigned int v188 = v178 * v186 + 1;
      int v5 = (void **)(a1 + 104);
      if (!sub_A86878(v239, 0, v187, v188, v179, v185)) {
        goto LABEL_247;
      }
      if (*(void *)(a1 + 240) <= v180) {
        sub_A3E96C((uint64_t)v235, v186, 0);
      }
      uint64_t v189 = *v235;
      unint64_t v190 = v180 >> 6;
      uint64_t v191 = 1 << v180;
      if ((*(void *)(*v235 + 8 * (v180 >> 6)) & (1 << v180)) != 0)
      {
LABEL_247:
        unint64_t v11 = (unint64_t)v245;
        uint64_t v8 = (void *)((char *)v244 + 12);
        unint64_t v244 = v8;
        if (v8 != v245) {
          goto LABEL_248;
        }
        goto LABEL_269;
      }
      int64_t v193 = *(char **)(a1 + 264);
      unint64_t v192 = *(void *)(a1 + 272);
      if ((unint64_t)v193 < v192)
      {
        *(_DWORD *)int64_t v193 = v242;
        uint64_t v194 = (uint64_t)(v193 + 4);
        goto LABEL_268;
      }
      unint64_t v195 = (char *)*v230;
      uint64_t v196 = v193 - (unsigned char *)*v230;
      uint64_t v197 = v196 >> 2;
      unint64_t v198 = (v196 >> 2) + 1;
      if (v198 >> 62) {
        sub_2E00();
      }
      uint64_t v199 = v192 - (void)v195;
      if (v199 >> 1 > v198) {
        unint64_t v198 = v199 >> 1;
      }
      if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v232 = v198;
      if (v198)
      {
        if (v198 >> 62) {
          goto LABEL_307;
        }
        int v200 = operator new(4 * v198);
        char v201 = (unsigned int *)&v200[4 * v197];
        *char v201 = v242;
        uint64_t v194 = (uint64_t)(v201 + 1);
        if (v193 == v195)
        {
LABEL_291:
          *(void *)(a1 + 256) = v201;
          *(void *)(a1 + 264) = v194;
          *(void *)(a1 + 272) = &v200[4 * v232];
          if (v195) {
            goto LABEL_267;
          }
          goto LABEL_268;
        }
      }
      else
      {
        int v200 = 0;
        char v201 = (unsigned int *)(4 * v197);
        *(_DWORD *)(4 * v197) = v242;
        uint64_t v194 = 4 * v197 + 4;
        if (v193 == v195) {
          goto LABEL_291;
        }
      }
      unint64_t v202 = v193 - 4 - v195;
      if (v202 < 0x2C) {
        goto LABEL_314;
      }
      if ((unint64_t)(v193 - &v200[v196]) < 0x20) {
        goto LABEL_314;
      }
      uint64_t v203 = (v202 >> 2) + 1;
      uint64_t v204 = 4 * (v203 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v205 = &v193[-v204];
      char v201 = (unsigned int *)((char *)v201 - v204);
      uint64_t v206 = &v200[4 * v197 - 16];
      unint64_t v207 = v193 - 16;
      uint64_t v208 = v203 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v209 = *(_OWORD *)v207;
        *(v206 - 1) = *((_OWORD *)v207 - 1);
        _OWORD *v206 = v209;
        v206 -= 2;
        v207 -= 32;
        v208 -= 8;
      }
      while (v208);
      int64_t v193 = v205;
      if (v203 != (v203 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_314:
        do
        {
          unsigned int v210 = *((_DWORD *)v193 - 1);
          v193 -= 4;
          *--char v201 = v210;
        }
        while (v193 != v195);
      }
      *(void *)(a1 + 256) = v201;
      *(void *)(a1 + 264) = v194;
      *(void *)(a1 + 272) = &v200[4 * v232];
      if (v195)
      {
LABEL_267:
        operator delete(v195);
        uint64_t v189 = *v235;
      }
LABEL_268:
      *(void *)(a1 + 264) = v194;
      *(void *)(v189 + 8 * v190) |= v191;
      int v5 = (void **)(a1 + 104);
      unint64_t v11 = (unint64_t)v245;
      uint64_t v8 = (void *)((char *)v244 + 12);
      unint64_t v244 = v8;
      if (v8 != v245)
      {
LABEL_248:
        int v10 = v248;
        unint64_t v12 = v247[0];
        if (*(unsigned char *)(v243 + 16)) {
          goto LABEL_270;
        }
        goto LABEL_10;
      }
LABEL_269:
      uint64_t v8 = v246;
      unint64_t v12 = v247[0];
      unint64_t v244 = v246;
      int v10 = 1;
      unsigned __int8 v248 = 1;
      if (*(unsigned char *)(v243 + 16))
      {
LABEL_270:
        if (v10) {
          unint64_t v211 = v12;
        }
        else {
          unint64_t v211 = v11;
        }
        if ((unint64_t)v8 < v211)
        {
          while (1)
          {
            unint64_t v212 = __ROR8__(*v8, 32);
            BOOL v213 = HIDWORD(v212) != 1 || (v212 + 3) >= 2;
            if (!v213) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v243 + 4120)))
            {
              LOBYTE(v10) = v248;
              uint64_t v8 = v244;
              unint64_t v11 = (unint64_t)v245;
              break;
            }
            unint64_t v11 = (unint64_t)v245;
            uint64_t v8 = (void *)((char *)v244 + 12);
            unint64_t v244 = v8;
            if (v8 == v245)
            {
              uint64_t v8 = v246;
              unint64_t v244 = v246;
              LOBYTE(v10) = 1;
              unsigned __int8 v248 = 1;
              if ((unint64_t)v246 >= v247[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v10) = v248;
              uint64_t v214 = &v245;
              if (v248) {
                uint64_t v214 = v247;
              }
              if ((unint64_t)v8 >= *v214) {
                break;
              }
            }
          }
          unint64_t v12 = v247[0];
        }
      }
LABEL_10:
      if ((_BYTE)v10) {
        unint64_t v11 = v12;
      }
      if ((unint64_t)v8 >= v11) {
        goto LABEL_3;
      }
    }
    uint64_t v26 = -1;
    uint64_t v27 = 1;
    do
    {
      if (*(_DWORD *)(v14 + 36) == v23 && *(_DWORD *)(v14 + 32) == v24)
      {
        if (v26 == -1) {
          uint64_t v26 = v21;
        }
      }
      else if (__PAIR64__(v23, v24) == v13)
      {
        goto LABEL_53;
      }
      uint64_t v21 = (v21 + v27) & v15;
      int v28 = (unsigned int *)(v18 + 12 * v21);
      unsigned int v24 = *v28;
      unsigned int v23 = v28[1];
      ++v27;
    }
    while (v19 != v23 || v20 != v24);
    if (v26 != -1)
    {
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v26 = v21;
    if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_303:
  double result = sub_72688((uint64_t)v249) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A85354(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A85368(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A8537C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A85390(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A853A4(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unsigned int v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  unsigned int v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    unint64_t v211 = v8;
    uint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    int v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          uint64_t v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      unint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unsigned int v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          int v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          int v72 = &v71[8 * v67];
          *(void *)int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v76 = &v63[-v75];
          v72 -= v75;
          unint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)unint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          unint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          unint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          int v71 = 0;
          int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)unint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 4);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      unint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 4);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          int v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            uint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              uint64_t v101 = v200;
              goto LABEL_135;
            }
            uint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            int v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] > v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        uint64_t v168 = v213 + 2;
        BOOL v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          int v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          BOOL v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      unint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                int v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            int v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              int v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              BOOL v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                int v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                BOOL v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        uint64_t v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)uint64_t v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          unint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] <= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int32x2_t v173 = &v135[4 * v130 - 16];
          int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          uint64_t v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] <= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            unint64_t v202 = operator new(4 * v118);
            unint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              int v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              unint64_t v141 = &v202[4 * v112 - 16];
              uint64_t v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          unint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A862DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A862F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A86304(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v3 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 280);
  uint64_t v20 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = sub_BD6170((void *)(a1 + 360));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 56) + *(void *)(*(void *)(a1 + 32) + 56))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    uint64_t v10 = v10 + *(void *)(v11 + 32) - *(void *)(v11 + 16);
  }
  unint64_t v32 = v23
      + v26
      - (v27
       + v25)
      + v24
      + v2
      + v20
      - v22
      + v5
      + v3
      + v4
      - (v21
       + v19)
      + v7
      + v8
      - v6
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v32 > *(void *)a1;
  if (v32 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v32);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_A86610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_A8665C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_A87A9C(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

char *sub_A86790(void **a1, unsigned int a2)
{
  unint64_t v4 = a2;
  uint64_t v5 = (char *)*a1;
  uint64_t v6 = (char *)a1[1];
  unint64_t v7 = (v6 - (unsigned char *)*a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        uint64_t v6 = &v5[8 * v8];
        a1[1] = v6;
      }
    }
    else
    {
      sub_D2BFC(a1, v8 - v7);
      uint64_t v5 = (char *)*a1;
      uint64_t v6 = (char *)a1[1];
    }
  }
  unint64_t v9 = (char *)a1[3];
  uint64_t v10 = *(unsigned int *)&v5[8 * v4];
  unint64_t v11 = (v6 - v5) >> 3;
  if (v11 <= v4)
  {
    unint64_t v12 = a2 + 1;
    if (v12 > v11)
    {
      sub_D2BFC(a1, v12 - v11);
      uint64_t v5 = (char *)*a1;
      uint64_t v13 = (char *)a1[3];
      goto LABEL_12;
    }
    if (v12 < v11) {
      a1[1] = &v5[8 * v12];
    }
  }
  uint64_t v13 = v9;
LABEL_12:
  uint64_t v14 = &v13[64 * (unint64_t)*(unsigned int *)&v5[8 * v4 + 4]];

  return sub_A86AC4(a1, v4, &v9[64 * v10], v14);
}

BOOL sub_A86878(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A87844(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_A87844(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) <= a6)
      {
        __int16 v22 = sub_A87340((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_A87340((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      uint64_t v27 = (long long *)sub_A87844(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) <= a6)
      {
        if (sub_A8791C(a1, &v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_A87340((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_A87340((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

char *sub_A86AC4(void **a1, unsigned int a2, char *__dst, char *__src)
{
  unint64_t v8 = a2;
  uint64_t v10 = (char *)*a1;
  int v9 = (char *)a1[1];
  unint64_t v11 = (v9 - (unsigned char *)*a1) >> 3;
  if (v11 <= a2)
  {
    unint64_t v12 = a2 + 1;
    if (v12 <= v11)
    {
      if (v12 < v11)
      {
        int v9 = &v10[8 * v12];
        a1[1] = v9;
      }
    }
    else
    {
      sub_D2BFC(a1, v12 - v11);
      uint64_t v10 = (char *)*a1;
      int v9 = (char *)a1[1];
    }
  }
  unint64_t v13 = (v9 - v10) >> 3;
  uint64_t v14 = v10;
  if (v13 <= v8)
  {
    unint64_t v15 = a2 + 1;
    if (v15 <= v13)
    {
      uint64_t v14 = v10;
      if (v15 < v13)
      {
        a1[1] = &v10[8 * v15];
        uint64_t v14 = v10;
      }
    }
    else
    {
      sub_D2BFC(a1, v15 - v13);
      uint64_t v14 = (char *)*a1;
    }
  }
  unint64_t v16 = (char *)a1[3];
  if (&v16[64 * (unint64_t)*(unsigned int *)&v14[8 * v8 + 4]] == __src)
  {
    long long v19 = (char *)a1[6];
    unint64_t v20 = (__dst - v16) >> 6;
    if (__dst - v16 <= -64) {
      uint64_t v21 = -(uint64_t)((63 - v20) >> 6);
    }
    else {
      uint64_t v21 = v20 >> 6;
    }
    __int16 v22 = &v19[8 * v21];
    unint64_t v23 = (__src - v16) >> 6;
    if (__src - v16 <= -64) {
      uint64_t v24 = -(uint64_t)((63 - v23) >> 6);
    }
    else {
      uint64_t v24 = v23 >> 6;
    }
    unint64_t v25 = (((__src - v16) >> 6) & 0x3F) - (((__dst - v16) >> 6) & 0x3F) + 8 * (&v19[8 * v24] - v22);
    if (v25)
    {
      if ((v20 & 0x3F) != 0)
      {
        if (64 - (v20 & 0x3F) >= v25) {
          uint64_t v26 = (((__src - v16) >> 6) & 0x3F) - (((__dst - v16) >> 6) & 0x3F) + 8 * (&v19[8 * v24] - v22);
        }
        else {
          uint64_t v26 = 64 - (v20 & 0x3F);
        }
        *(void *)v22 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v20 & 0x3Fu) - v26)) & (-1 << (v20 & 0x3F)));
        v22 += 8;
        v25 -= v26;
      }
      if (v25 >= 0x40) {
        bzero(v22, 8 * (v25 >> 6));
      }
      if ((v25 & 0x3F) != 0) {
        *(void *)&v22[8 * (v25 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v25 & 0x3F));
      }
    }
    *(_DWORD *)&v10[8 * v8 + 4] = v20;
  }
  else
  {
    unint64_t v17 = ((unsigned char *)a1[1] - v14) >> 3;
    if (v17 <= v8)
    {
      unint64_t v18 = a2 + 1;
      if (v18 <= v17)
      {
        if (v18 < v17) {
          a1[1] = &v14[8 * v18];
        }
      }
      else
      {
        sub_D2BFC(a1, v18 - v17);
        uint64_t v14 = (char *)*a1;
        unint64_t v16 = (char *)a1[3];
      }
    }
    if (&v16[64 * (unint64_t)*(unsigned int *)&v14[8 * v8]] == __dst)
    {
      long long v29 = &v10[8 * v8];
      long long v30 = (char *)a1[6];
      unint64_t v31 = (__dst - v16) >> 6;
      if (__dst - v16 <= -64) {
        uint64_t v32 = -(uint64_t)((63 - v31) >> 6);
      }
      else {
        uint64_t v32 = v31 >> 6;
      }
      uint64_t v33 = &v30[8 * v32];
      unint64_t v34 = (__src - v16) >> 6;
      if (__src - v16 <= -64) {
        uint64_t v35 = -(uint64_t)((63 - v34) >> 6);
      }
      else {
        uint64_t v35 = v34 >> 6;
      }
      uint64_t v36 = &v30[8 * v35] - v33;
      char v37 = v31 & 0x3F;
      unint64_t v38 = (((__src - v16) >> 6) & 0x3F) - (v31 & 0x3F) + 8 * v36;
      if (v38)
      {
        int v39 = v31 & 0x3F;
        if (v39)
        {
          unint64_t v40 = (64 - v39);
          if (v40 >= v38) {
            unint64_t v41 = v38;
          }
          else {
            unint64_t v41 = v40;
          }
          *(void *)v33 &= ~((0xFFFFFFFFFFFFFFFFLL >> (v40 - v41)) & (-1 << v37));
          v33 += 8;
          v38 -= v41;
        }
        if (v38 >= 0x40) {
          bzero(v33, 8 * (v38 >> 6));
        }
        if ((v38 & 0x3F) != 0) {
          *(void *)&v33[8 * (v38 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v38 & 0x3F));
        }
      }
      *(_DWORD *)long long v29 = v34;
      return __src;
    }
    else
    {
      unint64_t v27 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v27 <= v8)
      {
        unint64_t v28 = a2 + 1;
        if (v28 <= v27)
        {
          if (v28 < v27) {
            a1[1] = &v14[8 * v28];
          }
        }
        else
        {
          sub_D2BFC(a1, v28 - v27);
          uint64_t v14 = (char *)*a1;
          unint64_t v16 = (char *)a1[3];
        }
      }
      unint64_t v42 = &v16[64 * (unint64_t)*(unsigned int *)&v14[8 * v8 + 4]];
      int64_t v43 = v42 - __src;
      if (v42 != __src)
      {
        memmove(__dst, __src, v42 - __src);
        unint64_t v16 = (char *)a1[3];
        uint64_t v14 = (char *)*a1;
      }
      uint64_t v44 = &__dst[v43];
      unint64_t v45 = (char *)a1[6];
      unint64_t v46 = v44 - v16;
      unint64_t v47 = (v44 - v16) >> 6;
      if (v44 - v16 <= -64) {
        uint64_t v48 = -(uint64_t)((63 - v47) >> 6);
      }
      else {
        uint64_t v48 = v47 >> 6;
      }
      uint64_t v49 = &v45[8 * v48];
      unint64_t v50 = ((unsigned char *)a1[1] - v14) >> 3;
      if (v50 <= v8)
      {
        unint64_t v51 = a2 + 1;
        if (v51 <= v50)
        {
          if (v51 < v50) {
            a1[1] = &v14[8 * v51];
          }
        }
        else
        {
          uint64_t v52 = v44;
          sub_D2BFC(a1, v51 - v50);
          uint64_t v44 = v52;
          uint64_t v14 = (char *)*a1;
          unint64_t v16 = (char *)a1[3];
        }
      }
      unint64_t v53 = *(unsigned int *)&v14[8 * v8 + 4];
      uint64_t v54 = v53 & 0x3F;
      uint64_t v55 = &v45[(v53 >> 3) & 0x1FFFFFF8] - v49;
      uint64_t v56 = (v46 >> 6) & 0x3F;
      unint64_t v57 = v54 - v56 + 8 * v55;
      if (v57)
      {
        if ((v47 & 0x3F) != 0)
        {
          if (64 - (v47 & 0x3F) >= v57) {
            uint64_t v58 = v54 - v56 + 8 * v55;
          }
          else {
            uint64_t v58 = 64 - (v47 & 0x3F);
          }
          *(void *)v49 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (v47 & 0x3Fu) - v58)) & (-1 << v56));
          v49 += 8;
          v57 -= v58;
        }
        if (v57 >= 0x40)
        {
          uint64_t v59 = v44;
          bzero(v49, 8 * (v57 >> 6));
          uint64_t v44 = v59;
        }
        if ((v57 & 0x3F) != 0) {
          *(void *)&v49[8 * (v57 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v57 & 0x3F));
        }
      }
      *(_DWORD *)&v10[8 * v8 + 4] = (unint64_t)(v44 - v16) >> 6;
    }
  }
  return __dst;
}

char *sub_A86F6C(char **a1, unsigned int a2, long long *a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = *a1;
  unint64_t v7 = (a1[1] - *a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7) {
        a1[1] = &v6[8 * v8];
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      uint64_t v6 = *a1;
    }
  }
  int v9 = &v6[8 * v5];
  unsigned int v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9
    && (unint64_t v11 = v10 - 1, ((*(void *)&a1[6][(v11 >> 3) & 0x1FFFFFF8] >> (v10 - 1)) & 1) == 0))
  {
    *(_DWORD *)int v9 = v11;
    unint64_t v45 = &a1[3][64 * v11];
    long long v46 = *a3;
    long long v47 = a3[1];
    long long v48 = a3[3];
    *((_OWORD *)v45 + 2) = a3[2];
    *((_OWORD *)v45 + 3) = v48;
    *(_OWORD *)unint64_t v45 = v46;
    *((_OWORD *)v45 + 1) = v47;
    unint64_t v43 = *(unsigned int *)v9;
    *(void *)&a1[6][(v43 >> 3) & 0x1FFFFFF8] |= 1 << v43;
    uint64_t v44 = a1[3];
  }
  else
  {
    unint64_t v13 = v9 + 4;
    unint64_t v12 = *((unsigned int *)v9 + 1);
    uint64_t v14 = a1[3];
    unint64_t v15 = a1[4];
    unint64_t v16 = a1 + 3;
    unint64_t v17 = v15 - v14;
    unint64_t v18 = (v15 - v14) >> 6;
    if (v18 <= (v12 + 1) || ((*(void *)&a1[6][(v12 >> 3) & 0x1FFFFFF8] >> v12) & 1) != 0)
    {
      uint64_t v19 = a1[1] - v6;
      unsigned int v20 = v12 + (v17 >> 6) - v10;
      unint64_t v21 = 2 * (v12 - v10) + 2;
      BOOL v22 = v5 >= v19 >> 3;
      if (v5 < v19 >> 3) {
        unint64_t v23 = v20;
      }
      else {
        unint64_t v23 = (v17 >> 6);
      }
      if (v22) {
        unint64_t v24 = 2;
      }
      else {
        unint64_t v24 = v21;
      }
      unint64_t v56 = v17 >> 6;
      if (v18 >= v24 + v18)
      {
        if (v18 > v24 + v18)
        {
          unint64_t v15 = &v14[64 * (v24 + v18)];
          a1[4] = v15;
        }
      }
      else
      {
        sub_A876B0((void **)a1 + 3, v24);
        uint64_t v14 = a1[3];
        unint64_t v15 = a1[4];
      }
      unint64_t v55 = v23;
      unint64_t v25 = a1 + 6;
      sub_A3E96C((uint64_t)v25, (v15 - v14) >> 6, 0);
      uint64_t v26 = *(unsigned int *)v9;
      uint64_t v27 = *v13;
      unint64_t v28 = (v17 >> 6);
      unsigned int v29 = v26;
      if (v27 != v26)
      {
        memmove(&(*v16)[64 * v28], &(*v16)[64 * v26], &(*v16)[64 * v27] - &(*v16)[64 * v26]);
        unsigned int v29 = *(_DWORD *)v9;
        LODWORD(v26) = *v13;
      }
      uint64_t v54 = v25;
      uint64_t v30 = *v25;
      unint64_t v31 = (void *)(v30 + 8 * (v29 >> 6));
      uint64_t v32 = v29 & 0x3F;
      unint64_t v33 = (v26 & 0x3F) - v32 + 8 * (v30 + 8 * (v26 >> 6) - (void)v31);
      if (v33)
      {
        if (v32)
        {
          if ((64 - v32) >= v33) {
            uint64_t v34 = (v26 & 0x3F) - v32 + 8 * (v30 + 8 * (v26 >> 6) - (void)v31);
          }
          else {
            uint64_t v34 = (64 - v32);
          }
          *v31++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v32 - v34)) & (-1 << v32));
          v33 -= v34;
        }
        if (v33 >= 0x40) {
          bzero(v31, 8 * (v33 >> 6));
        }
        if ((v33 & 0x3F) != 0) {
          v31[v33 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v33 & 0x3F));
        }
      }
      uint64_t v35 = (void *)(v30 + ((v28 >> 3) & 0x1FFFFFF8));
      uint64_t v36 = (v17 >> 6) & 0x3F;
      unint64_t v37 = (v55 & 0x3F) - v36 + 8 * (((v55 >> 3) & 0x1FFFFFF8) - ((v28 >> 3) & 0x1FFFFFF8));
      if (v37)
      {
        if ((v56 & 0x3F) != 0)
        {
          if (64 - (v56 & 0x3F) >= v37) {
            uint64_t v38 = (v55 & 0x3F) - v36 + 8 * (((v55 >> 3) & 0x1FFFFFF8) - ((v28 >> 3) & 0x1FFFFFF8));
          }
          else {
            uint64_t v38 = 64 - (v56 & 0x3F);
          }
          *v35++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v56 & 0x3Fu) - v38)) & (-1 << v36);
          v37 -= v38;
        }
        if (v37 >= 0x40) {
          memset(v35, 255, 8 * (v37 >> 6));
        }
        if ((v37 & 0x3F) != 0) {
          v35[v37 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v37 & 0x3F);
        }
      }
      *(_DWORD *)int v9 = v56;
      _DWORD *v13 = v55;
      int v39 = &(*v16)[64 * v55];
      long long v40 = *a3;
      long long v41 = a3[1];
      long long v42 = a3[3];
      *((_OWORD *)v39 + 2) = a3[2];
      *((_OWORD *)v39 + 3) = v42;
      *(_OWORD *)int v39 = v40;
      *((_OWORD *)v39 + 1) = v41;
      unint64_t v43 = *v13;
      *(void *)(*v54 + ((v43 >> 3) & 0x1FFFFFF8)) |= 1 << v43;
      uint64_t v44 = *v16;
    }
    else
    {
      uint64_t v49 = &v14[64 * v12];
      long long v50 = *a3;
      long long v51 = a3[1];
      long long v52 = a3[3];
      *((_OWORD *)v49 + 2) = a3[2];
      *((_OWORD *)v49 + 3) = v52;
      *(_OWORD *)uint64_t v49 = v50;
      *((_OWORD *)v49 + 1) = v51;
      unint64_t v43 = *v13;
      *(void *)&a1[6][(v43 >> 3) & 0x1FFFFFF8] |= 1 << v43;
      uint64_t v44 = a1[3];
    }
    _DWORD *v13 = v43 + 1;
  }
  return &v44[64 * v43];
}

unint64_t sub_A87340(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  int v9 = *(char **)a1;
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    uint64_t v11 = *(unsigned int *)&v9[8 * a3];
    uint64_t v10 = *(unsigned int *)&v9[8 * a3 + 4];
    if (v10 != v11)
    {
      unsigned __int8 v12 = 0;
      uint64_t v16 = v11 << 6;
      uint64_t v17 = (v10 << 6) - v16;
      unint64_t v18 = (_DWORD *)(v16 + *(void *)(a1 + 24) + 44);
      while (1)
      {
        int v19 = *(v18 - 4);
        if (v19 != 0x7FFFFFFF)
        {
          int v20 = *(_DWORD *)(a2 + 28);
          if (v19 <= v20 && *(v18 - 3) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v21 = *(_DWORD *)(a2 + 36);
            unsigned int v22 = *(v18 - 2);
            if (v22 <= v21 && (v22 != v21 || v19 != v20 || 10 * v19 - *v18 <= 10 * v20 - *(_DWORD *)(a2 + 44))) {
              return (unint64_t)v12 << 8;
            }
          }
          if (v20 <= v19 && *(_DWORD *)(a2 + 32) <= *(v18 - 3))
          {
            unsigned int v23 = *(v18 - 2);
            unsigned int v24 = *(_DWORD *)(a2 + 36);
            if (v24 <= v23 && (v24 != v23 || v20 != v19 || 10 * v20 - *(_DWORD *)(a2 + 44) <= 10 * v19 - *v18))
            {
              *(v18 - 4) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 16;
        v17 -= 64;
        if (!v17) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  unint64_t v13 = sub_A86F6C((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

char *sub_A8750C(void **a1, unsigned int a2)
{
  unint64_t v4 = a2;
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = (char *)a1[1];
  unint64_t v7 = (v6 - (unsigned char *)*a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7)
      {
        uint64_t v6 = &v5[8 * v8];
        a1[1] = v6;
      }
    }
    else
    {
      sub_D2BFC(a1, v8 - v7);
      unint64_t v5 = (char *)*a1;
      uint64_t v6 = (char *)a1[1];
    }
  }
  int v9 = (char *)a1[3];
  uint64_t v10 = &v9[64 * (unint64_t)*(unsigned int *)&v5[8 * v4]];
  unint64_t v11 = (v6 - v5) >> 3;
  if (v11 <= v4)
  {
    unint64_t v12 = a2 + 1;
    if (v12 <= v11)
    {
      if (v12 < v11) {
        a1[1] = &v5[8 * v12];
      }
    }
    else
    {
      sub_D2BFC(a1, v12 - v11);
      unint64_t v5 = (char *)*a1;
      int v9 = (char *)a1[3];
    }
  }
  unint64_t v13 = (long long *)&v9[64 * (unint64_t)*(unsigned int *)&v5[8 * v4 + 4]];
  if (v10 != (char *)v13)
  {
    while (*((_DWORD *)v10 + 7) != 0x7FFFFFFF)
    {
      v10 += 64;
      if (v10 == (char *)v13)
      {
        uint64_t v10 = &v9[64 * (unint64_t)*(unsigned int *)&v5[8 * v4 + 4]];
        goto LABEL_22;
      }
    }
    if (v10 != (char *)v13)
    {
      int v14 = (long long *)(v10 + 64);
      if (v10 + 64 != (char *)v13)
      {
        do
        {
          if (*((_DWORD *)v14 + 7) != 0x7FFFFFFF)
          {
            long long v15 = *v14;
            long long v16 = v14[1];
            long long v17 = v14[3];
            *((_OWORD *)v10 + 2) = v14[2];
            *((_OWORD *)v10 + 3) = v17;
            *(_OWORD *)uint64_t v10 = v15;
            *((_OWORD *)v10 + 1) = v16;
            v10 += 64;
          }
          v14 += 4;
        }
        while (v14 != v13);
        unint64_t v5 = (char *)*a1;
      }
    }
  }
LABEL_22:
  unint64_t v18 = ((unsigned char *)a1[1] - v5) >> 3;
  if (v18 <= v4)
  {
    unint64_t v19 = a2 + 1;
    if (v19 <= v18)
    {
      if (v19 < v18) {
        a1[1] = &v5[8 * v19];
      }
    }
    else
    {
      sub_D2BFC(a1, v19 - v18);
      unint64_t v5 = (char *)*a1;
    }
  }
  int v20 = (char *)a1[3] + 64 * (unint64_t)*(unsigned int *)&v5[8 * v4 + 4];

  return sub_A86AC4(a1, v4, v10, v20);
}

void sub_A876B0(void **a1, unint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = a1[2];
  if (a2 <= (v5 - v4) >> 6)
  {
    if (a2)
    {
      unint64_t v11 = v4 + 32;
      unint64_t v12 = a2 << 6;
      v4 += 64 * a2;
      do
      {
        *((_DWORD *)v11 + 4) = 0;
        *(void *)unint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((_OWORD *)v11 - 2) = xmmword_20E2060;
        *((_OWORD *)v11 - 1) = xmmword_20EB780;
        *(void *)(v11 + 20) = -1;
        *((_DWORD *)v11 + 7) = 0x7FFFFFFF;
        v11 += 64;
        v12 -= 64;
      }
      while (v12);
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = (v4 - (unsigned char *)*a1) >> 6;
    unint64_t v7 = v6 + a2;
    if ((v6 + a2) >> 58) {
      sub_2E00();
    }
    uint64_t v8 = v5 - (unsigned char *)*a1;
    if (v8 >> 5 > v7) {
      unint64_t v7 = v8 >> 5;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 >> 58) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(v9 << 6);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v13 = &v10[64 * v6];
    unint64_t v14 = a2 << 6;
    long long v15 = &v13[64 * a2];
    long long v16 = v13 + 32;
    do
    {
      *((_DWORD *)v16 + 4) = 0;
      *(void *)long long v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_OWORD *)v16 - 2) = xmmword_20E2060;
      *((_OWORD *)v16 - 1) = xmmword_20EB780;
      *(void *)(v16 + 20) = -1;
      *((_DWORD *)v16 + 7) = 0x7FFFFFFF;
      v16 += 64;
      v14 -= 64;
    }
    while (v14);
    long long v17 = &v10[64 * v9];
    unint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 4);
        long long v21 = *((_OWORD *)v18 - 3);
        long long v22 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v13 - 1) = v22;
        *((_OWORD *)v13 - 4) = v20;
        *((_OWORD *)v13 - 3) = v21;
        v13 -= 64;
        v18 -= 64;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t sub_A87844(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3)
    || (unint64_t v4 = (int *)(*a1 + 8 * a2), v3 = *v4, v4[1] - *v4 <= a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_7;
  }
  unint64_t v5 = v3 + a3;
  uint64_t v6 = a1[3];
  if (v5 >= (a1[4] - v6) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_7:
  }
  return v6 + (v5 << 6);
}

void sub_A878F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A87908(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A8791C(void **a1, _DWORD *a2, unsigned int a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      unint64_t v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  unint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC(a1, v14 - v13);
      long long v15 = &v11[64 * v12];
      unint64_t v16 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
      if (v15 == (char *)v16) {
        return 0;
      }
      goto LABEL_13;
    }
    if (v14 < v13) {
      a1[1] = &v7[8 * v14];
    }
  }
  long long v15 = &v11[64 * v12];
  unint64_t v16 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
  if (v15 == (char *)v16) {
    return 0;
  }
LABEL_13:
  int v17 = a2[7];
  unsigned int v18 = a2[9];
  while (1)
  {
    int v19 = *((_DWORD *)v15 + 7);
    if (v19 != 0x7FFFFFFF && v19 <= v17 && *((_DWORD *)v15 + 8) <= a2[8])
    {
      unsigned int v21 = *((_DWORD *)v15 + 9);
      if (v21 <= v18)
      {
        BOOL v22 = 10 * v19 - *((_DWORD *)v15 + 11) > 10 * v17 - a2[11] && v19 == v17;
        if (!v22 || v21 != v18) {
          break;
        }
      }
    }
    v15 += 64;
    if (v15 == (char *)v16) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_A87A9C(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_A87844(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_A87340((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

uint64_t sub_A87B80(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = (void *)a1;
  unsigned int v264 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v227 = *(_DWORD *)sub_A3F74C(v4 + 35, &v264);
  unint64_t v231 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v262, v4[3], v5);
  __int16 v7 = v262;
  if ((unint64_t)v262 < v263)
  {
    uint64_t v8 = (void **)(v4 + 13);
    uint64_t v236 = (uint64_t)(v4 + 45);
    int v226 = a2 + 2;
    int v224 = ~a2;
    uint64_t v225 = v4 + 23;
    int v228 = a2 + 1;
    unint64_t v232 = HIDWORD(v5);
    uint64_t v233 = v4;
    int v234 = (void **)(v4 + 13);
    while (1)
    {
      *((double *)v4 + 69) = *((double *)v4 + 69) + 1.0;
      uint64_t v229 = *(unsigned int *)v7;
      sub_A86790(v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v250, v4[3], v231, v227, 0, 1);
      unint64_t v9 = v254;
      BOOL v10 = (unint64_t)v254 < v253 || (unint64_t)v254 >= v255;
      if (!v10) {
        break;
      }
LABEL_3:
      v262 += 4;
      __int16 v7 = v262;
      if ((unint64_t)v262 >= v263) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = v4[4];
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      long long v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        unint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(v4[4], 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        unint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            long long v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555) {
            goto LABEL_302;
          }
        }
        else
        {
          uint64_t v65 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v65) & v28;
            unsigned int v66 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v66;
            unsigned int v34 = v66[1];
            ++v65;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555)
          {
LABEL_302:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((uint64_t v69 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v69[1])
            ? (BOOL v70 = *(_DWORD *)(v12 + 32) == *v69)
            : (BOOL v70 = 0),
              v70))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v64 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v68 + 1;
          uint64_t v64 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v61 = *(void *)(v12 + 40);
      uint64_t v60 = *(void *)(v12 + 48);
      if ((unint64_t)(v60 - v61) >= 0x1555555555555555) {
        goto LABEL_302;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v61
        && ((unint64_t v62 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v62[1])
          ? (BOOL v63 = *(_DWORD *)(v12 + 32) == *v62)
          : (BOOL v63 = 0),
            v63))
      {
        *(void *)(v12 + 40) = v61 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v60 + 1;
      }
      uint64_t v64 = 3 * v24;
LABEL_95:
      uint64_t v71 = 4 * v64;
      uint64_t v72 = v29 + v71;
      *(void *)uint64_t v72 = v11;
      *(_DWORD *)(v72 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v71;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v249 = v46;
        uint64_t result = sub_BD5C18(v236, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_119;
      }
LABEL_96:
      int v73 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v73 + 1;
      *(_DWORD *)(v45 + 8) = v73;
      uint64_t v75 = *(unint64_t **)(v12 + 96);
      unint64_t v74 = *(void *)(v12 + 104);
      if ((unint64_t)v75 < v74)
      {
        *uint64_t v75 = v11;
        uint64_t v76 = (uint64_t)(v75 + 1);
        goto LABEL_118;
      }
      unint64_t v77 = *(char **)(v12 + 88);
      uint64_t v78 = ((char *)v75 - v77) >> 3;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v80 = v74 - (void)v77;
      if (v80 >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v79)
      {
        if (v79 >> 61) {
          goto LABEL_304;
        }
        unint64_t v81 = v79;
        unsigned int v82 = (char *)operator new(8 * v79);
        unint64_t v83 = (unint64_t *)&v82[8 * v78];
        unint64_t *v83 = v11;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v75 == (unint64_t *)v77)
        {
LABEL_109:
          *(void *)(v12 + 88) = v83;
          *(void *)(v12 + 96) = v76;
          *(void *)(v12 + 104) = &v82[8 * v81];
          int v4 = v233;
          uint64_t v8 = v234;
          if (v75) {
            goto LABEL_117;
          }
          goto LABEL_118;
        }
      }
      else
      {
        unint64_t v81 = 0;
        unsigned int v82 = 0;
        unint64_t v83 = (unint64_t *)(8 * v78);
        *(void *)(8 * v78) = v11;
        uint64_t v76 = 8 * v78 + 8;
        if (v75 == (unint64_t *)v77) {
          goto LABEL_109;
        }
      }
      unint64_t v84 = (char *)(v75 - 1) - v77;
      if (v84 < 0x58) {
        goto LABEL_308;
      }
      if ((unint64_t)(v77 - v82) < 0x20) {
        goto LABEL_308;
      }
      uint64_t v85 = (v84 >> 3) + 1;
      uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v87 = &v75[v86 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v83 = (unint64_t *)((char *)v83 - v86);
      uint64_t v88 = &v82[8 * v78 - 16];
      unint64_t v89 = v75 - 2;
      uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v91 = *(_OWORD *)v89;
        *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
        *(_OWORD *)uint64_t v88 = v91;
        v88 -= 32;
        v89 -= 4;
        v90 -= 4;
      }
      while (v90);
      uint64_t v75 = v87;
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_308:
        do
        {
          unint64_t v92 = *--v75;
          *--unint64_t v83 = v92;
        }
        while (v75 != (unint64_t *)v77);
      }
      uint64_t v75 = *(unint64_t **)(v12 + 88);
      *(void *)(v12 + 88) = v83;
      *(void *)(v12 + 96) = v76;
      *(void *)(v12 + 104) = &v82[8 * v81];
      int v4 = v233;
      uint64_t v8 = v234;
      if (v75) {
LABEL_117:
      }
        operator delete(v75);
LABEL_118:
      *(void *)(v12 + 96) = v76;
      unsigned int v249 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v236, v249, v11);
      if (result)
      {
LABEL_51:
        long long v47 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] != v47)
        {
          uint64_t v48 = *v47;
          uint64_t v49 = v47[1];
          if (v49 != v48)
          {
            int v50 = v259;
            uint64_t v51 = v257;
            long long v52 = v252;
            unint64_t v53 = ((unint64_t)v254 - v253) >> 4;
            uint64_t v54 = v48 << 6;
            unint64_t v55 = (int *)(v4[16] + (v48 << 6) + 60);
            uint64_t v56 = (v49 << 6) - v54;
            do
            {
              unsigned int v59 = *(v55 - 2);
              if (v50)
              {
                unsigned int v260 = *(v55 - 1);
                int v57 = *v55;
                int v261 = *v55;
              }
              else
              {
                int v57 = *(_DWORD *)(v51 + 12 * v59);
              }
              uint64_t v58 = (unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - *v52 + 6));
              *(v55 - 8) = *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(v51 + 12 * v59 + 4) + v53)
                                                        + 1]
                                           + *v58)
                         + v57;
              v55 += 16;
              v56 -= 64;
            }
            while (v56);
            uint64_t v258 = (int *)(v51 + 12 * v59);
            sub_A88F9C((char *)v8, 0);
            if ((*((unsigned char *)v254 + 15) & 1) != 0
              && (!v256
               || (*(_DWORD *)(v256 + 4 * (((unint64_t)v254 - v253) >> 4)) & v229) == 0))
            {
              int v97 = *((_DWORD *)v4 + 24);
              if (*((unsigned char *)v4 + 20))
              {
                unsigned int v98 = v97 + v97 * *((_DWORD *)v4 + 88);
                unint64_t v99 = v249;
                uint64_t v100 = (unint64_t *)v4[6];
                if (v100) {
                  goto LABEL_130;
                }
LABEL_137:
                int v104 = 2147483646;
              }
              else
              {
                unsigned int v98 = -1;
                unint64_t v99 = v249;
                uint64_t v100 = (unint64_t *)v4[6];
                if (!v100) {
                  goto LABEL_137;
                }
LABEL_130:
                if (*v100 > v99)
                {
                  unsigned int v101 = 0;
                  unsigned int v102 = *((_DWORD *)v4 + 25) + v224;
                  unsigned int v103 = v102;
                  while (v101 <= v102)
                  {
                    int v104 = *(_DWORD *)sub_A3F53C(v100 + 2, v100[1] * v99 + v103);
                    v101 += 2;
                    v103 -= 2;
                    if (v104 != 0x7FFFFFFF) {
                      goto LABEL_138;
                    }
                  }
                }
                int v104 = 0x7FFFFFFF;
              }
LABEL_138:
              uint64_t v8 = v234;
              int v4 = v233;
              if (sub_A8923C(v234, 0, v226 + v97 + v97 * v99, v97 + v97 * v99, v98, v104)) {
                sub_A3EF14(v225, &v249);
              }
            }
            int v105 = (unsigned int *)v4[13];
            uint64_t v106 = (unsigned int *)v4[14];
            uint64_t v107 = (char *)v106 - (char *)v105;
            if (v106 != v105)
            {
              uint64_t v108 = v4[16];
              uint64_t v109 = *v105;
              goto LABEL_154;
            }
            uint64_t v111 = v107 >> 3;
            unint64_t v112 = 1 - (v107 >> 3);
            uint64_t v113 = v4[15];
            if (v112 <= (v113 - (uint64_t)v106) >> 3)
            {
              bzero((void *)v4[14], 8 * v112);
              unint64_t v121 = (char *)&v106[2 * v112];
              v4[14] = v121;
              int v105 = (unsigned int *)*v8;
              uint64_t v108 = v4[16];
              uint64_t v109 = *(unsigned int *)*v8;
              if (*v8 != v121) {
                goto LABEL_154;
              }
              goto LABEL_142;
            }
            uint64_t v114 = v113 - (void)v105;
            uint64_t v115 = v114 >> 2;
            if ((unint64_t)(v114 >> 2) <= 1) {
              uint64_t v115 = 1;
            }
            BOOL v10 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v10) {
              unint64_t v116 = v115;
            }
            if (v116 >> 61) {
LABEL_304:
            }
              sub_188D718();
            uint64_t v117 = 8 * v116;
            unint64_t v118 = (char *)operator new(8 * v116);
            unsigned int v119 = &v118[8 * v111];
            bzero(v119, 8 * v112);
            size_t v120 = &v118[v117];
            int v4 = v233;
            v233[13] = v119;
            v233[14] = &v119[8 * v112];
            v233[15] = v120;
            if (v106)
            {
              operator delete(v106);
              unint64_t v121 = (char *)v233[14];
              int v105 = (unsigned int *)*v8;
              uint64_t v108 = v233[16];
              uint64_t v109 = *(unsigned int *)*v8;
              if (*v8 != v121) {
                goto LABEL_154;
              }
LABEL_142:
              int v110 = (char *)v4[15];
              if (v110 != v121)
              {
                *(void *)unint64_t v121 = 0;
                v4[14] = v121 + 8;
                goto LABEL_179;
              }
              uint64_t v124 = 1;
              uint64_t v125 = v110 - (char *)v105;
              if ((unint64_t)(v125 >> 2) > 1) {
                uint64_t v124 = v125 >> 2;
              }
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v124;
              }
              if (v126)
              {
                if (v126 >> 61) {
                  goto LABEL_304;
                }
                uint64_t v127 = (char *)operator new(8 * v126);
                int v128 = v127;
                *(void *)uint64_t v127 = 0;
                uint64_t v129 = (uint64_t)(v127 + 8);
                if (v121 == (char *)v105) {
                  goto LABEL_177;
                }
LABEL_168:
                unint64_t v130 = v121 - 8 - (char *)v105;
                if (v130 < 0x58)
                {
                  unint64_t v131 = (unsigned int *)v121;
                  goto LABEL_175;
                }
                if ((unint64_t)(v121 - v127) < 0x20)
                {
                  unint64_t v131 = (unsigned int *)v121;
                  goto LABEL_175;
                }
                uint64_t v132 = (v130 >> 3) + 1;
                uint64_t v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v131 = (unsigned int *)&v121[-v133];
                v128 -= v133;
                unsigned int v134 = v127 - 16;
                unsigned int v135 = v121 - 16;
                uint64_t v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v137 = *(_OWORD *)v135;
                  *((_OWORD *)v134 - 1) = *((_OWORD *)v135 - 1);
                  *(_OWORD *)unsigned int v134 = v137;
                  v134 -= 32;
                  v135 -= 32;
                  v136 -= 4;
                }
                while (v136);
                if (v132 != (v132 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_175:
                    uint64_t v138 = *((void *)v131 - 1);
                    v131 -= 2;
                    *((void *)v128 - 1) = v138;
                    v128 -= 8;
                  }
                  while (v131 != v105);
                }
                unint64_t v121 = (char *)*v234;
              }
              else
              {
                uint64_t v127 = 0;
                int v128 = 0;
                *(void *)&def_332C = 0;
                uint64_t v129 = 8;
                if (v121 != (char *)v105) {
                  goto LABEL_168;
                }
              }
LABEL_177:
              v4[13] = v128;
              v4[14] = v129;
              v4[15] = &v127[8 * v126];
              uint64_t v8 = v234;
              if (v121) {
                operator delete(v121);
              }
LABEL_179:
              long long v122 = (_DWORD *)(v108 + (v109 << 6));
              unint64_t v123 = v4[16] + ((unint64_t)*(unsigned int *)(v4[13] + 4) << 6);
              if (v122 != (_DWORD *)v123)
              {
LABEL_180:
                int v139 = v259;
                uint64_t v140 = v257;
                unint64_t v141 = v252;
                unint64_t v142 = ((unint64_t)v254 - v253) >> 4;
                do
                {
                  unsigned int v145 = v122[13];
                  if (v139)
                  {
                    unsigned int v260 = v122[14];
                    int v143 = v122[15];
                    int v261 = v143;
                  }
                  else
                  {
                    int v143 = *(_DWORD *)(v140 + 12 * v145);
                  }
                  long long v144 = (unsigned int *)((char *)v141 + *(unsigned __int16 *)((char *)v141 - *v141 + 6));
                  v122[7] = *(unsigned int *)((char *)&v144[2
                                                          * (*(_DWORD *)(v140 + 12 * v145 + 4) + v142)
                                                          + 2]
                                            + *v144)
                          + v143;
                  v122 += 16;
                }
                while (v122 != (_DWORD *)v123);
                uint64_t v258 = (int *)(v140 + 12 * v145);
              }
            }
            else
            {
              unint64_t v121 = &v119[8 * v112];
              int v105 = (unsigned int *)*v8;
              uint64_t v108 = v233[16];
              uint64_t v109 = *(unsigned int *)*v8;
              if (*v8 == v121) {
                goto LABEL_142;
              }
LABEL_154:
              long long v122 = (_DWORD *)(v108 + (v109 << 6));
              unint64_t v123 = v108 + ((unint64_t)v105[1] << 6);
              if (v122 != (_DWORD *)v123) {
                goto LABEL_180;
              }
            }
            uint64_t result = (uint64_t)sub_A88F9C((char *)v8, 0);
          }
        }
        if ((*((unsigned char *)v254 + 15) & 2) == 0) {
          goto LABEL_194;
        }
        if (v256)
        {
          if (*(_DWORD *)(v256 + 4 * (((unint64_t)v254 - v253) >> 4)) != v229) {
            goto LABEL_194;
          }
        }
        else if (v229)
        {
          goto LABEL_194;
        }
        unint64_t v146 = v228 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v249;
        uint64_t v147 = v4[13];
        if (v146 >= (v4[14] - v147) >> 3) {
          goto LABEL_194;
        }
        int v237 = *(_DWORD *)(v147 + 8 * v146 + 4) - *(_DWORD *)(v147 + 8 * v146);
        if (!v237) {
          goto LABEL_194;
        }
        unsigned int v155 = 0;
        unint64_t v230 = v228 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v249;
        while (2)
        {
          uint64_t v156 = v4[13];
          if (v146 >= (v4[14] - v156) >> 3 || (int v158 = (int *)(v156 + 8 * v146), v157 = *v158, v158[1] - *v158 <= v155))
          {
            long long v220 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v220, "key does not exist and cannot be added");
            goto LABEL_301;
          }
          unint64_t v159 = v157 + v155;
          uint64_t v160 = v4[16];
          if (v159 >= (v4[17] - v160) >> 6)
          {
            long long v220 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v220, "index out of range");
LABEL_301:
          }
          uint64_t v161 = v160 + (v159 << 6);
          unint64_t v162 = (_DWORD *)(v161 + 28);
          signed int v163 = *((_DWORD *)v254 + 2) + *(_DWORD *)(v161 + 28);
          if (v259)
          {
            uint64_t result = sub_A1F39C(v4[3], (uint64_t)&v250, v163, 1);
            if ((result & 1) == 0) {
              goto LABEL_220;
            }
LABEL_228:
            uint64_t v164 = *(void *)(v161 + 20);
            int v165 = *(_DWORD *)(v161 + 32);
            int v235 = *(_DWORD *)(v161 + 36);
            long long v166 = v4;
            int v168 = *(_DWORD *)(v161 + 40);
            int v167 = *(_DWORD *)(v161 + 44);
            int v169 = *(_DWORD *)(v161 + 48);
            uint64_t v170 = (void *)(v166[3] + 4136);
            if (sub_A10E20(v170, v232))
            {
              uint64_t v171 = (int *)sub_A1120C(*(void *)(*v170 + 3944), v231);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v219 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v172 = *v170;
              if (dword_24F7300 == v232)
              {
                int32x2_t v173 = *(unsigned int **)(*(void *)(v172 + 3976) + 72);
                if (!v173)
                {
                  uint64_t v222 = __cxa_allocate_exception(0x40uLL);
                  int v265 = (char *)operator new(0x40uLL);
                  long long v266 = xmmword_20B9A90;
                  strcpy(v265, "Realtime stop pattern quad data requested on nullptr buffer");
                  int v223 = (void *)sub_2F404((uint64_t)v222, (long long *)&v265);
                }
                int v174 = (int *)((char *)v173 + *v173);
                uint64_t v175 = (unsigned __int16 *)((char *)v174 - *v174);
                if (*v175 >= 5u && (uint64_t v176 = v175[2]) != 0) {
                  unsigned int v177 = (unsigned int *)((char *)v174 + v176 + *(unsigned int *)((char *)v174 + v176));
                }
                else {
                  unsigned int v177 = 0;
                }
                uint64_t v171 = (int *)sub_A1139C(v177, v231);
              }
              else
              {
                uint64_t v171 = (int *)sub_A11500(v172 + 24, v231, 0, "stop pattern");
              }
            }
            uint64_t v178 = v171;
            uint64_t v179 = *v170;
            uint64_t v180 = (unsigned __int16 *)((char *)v171 - *v171);
            if (*v180 >= 0xFu && (uint64_t v181 = v180[7]) != 0)
            {
              uint64_t v182 = v179 + 3896;
              char v183 = sub_49442C(*(unsigned __int16 *)((char *)v171 + v181));
              if ((sub_C25A10(v182, v183) & 1) == 0)
              {
LABEL_242:
                unint64_t v184 = (unsigned __int16 *)((char *)v178 - *v178);
                if (*v184 >= 0xBu && (uint64_t v185 = v184[5]) != 0) {
                  char v186 = *((unsigned char *)v178 + v185);
                }
                else {
                  char v186 = 0;
                }
                unint64_t v146 = v230;
                uint64_t result = sub_A2BF48(v186);
LABEL_249:
                int v189 = v261;
                unint64_t v190 = 0xFFFFFFFF00000000;
                if (v259) {
                  unint64_t v190 = (unint64_t)v260 << 32;
                }
                unint64_t v191 = (-1431655765 * (((unint64_t)v258 - v257) >> 2)) | v190;
                if (!v259) {
                  int v189 = 0x7FFFFFFF;
                }
                uint64_t v192 = (unsigned int *)((char *)v252 + *(unsigned __int16 *)((char *)v252 - *v252 + 6));
                int64_t v193 = (char *)v192 + *v192;
                unint64_t v194 = &v261;
                if (!v259) {
                  unint64_t v194 = v258;
                }
                int v195 = *v194;
                unint64_t v196 = ((unint64_t)v254 - v253) >> 4;
                int v197 = *(_DWORD *)&v193[8 * (v258[1] + v196) + 4];
                int v198 = *(_DWORD *)&v193[8 * (v258[1] + v196) + 8] + v195;
                int v199 = ((10 * (v195 - *v162 + v197)) & ~((10 * (v195 - *v162 + v197)) >> 31)) + v167;
                LODWORD(v238) = v196;
                *(void *)((char *)&v238 + 4) = v191;
                HIDWORD(v238) = v189;
                unsigned int v239 = v264;
                uint64_t v240 = v164;
                int v241 = v198;
                int v242 = v165;
                unsigned int v243 = result + v235;
                int v244 = v168;
                int v245 = v199;
                int v246 = v169;
                unint64_t v247 = v191;
                int v248 = v189;
                int v4 = v233;
                int v200 = (unsigned int *)v233[13];
                if ((unsigned int *)v233[14] == v200
                  || (v202 = *v200, uint64_t v201 = *(unsigned int *)(v233[13] + 4), v201 == v202))
                {
                  uint64_t v8 = v234;
                  uint64_t result = (uint64_t)sub_A86F6C((char **)v234, 0, &v238);
                }
                else
                {
                  char v203 = 0;
                  uint64_t v204 = v202 << 6;
                  uint64_t v205 = (v201 << 6) - v204;
                  uint64_t v206 = (_DWORD *)(v233[16] + v204 + 44);
                  uint64_t v8 = v234;
                  do
                  {
                    int v207 = *(v206 - 4);
                    if (v207 != 0x7FFFFFFF)
                    {
                      if (v207 <= v241 && *(v206 - 3) <= v242)
                      {
                        unsigned int v208 = *(v206 - 2);
                        if (v208 <= v243 && (v208 != v243 || v207 != v241 || 10 * v207 - *v206 <= 10 * v241 - v245)) {
                          goto LABEL_275;
                        }
                      }
                      if (v241 <= v207 && v242 <= *(v206 - 3))
                      {
                        unsigned int v209 = *(v206 - 2);
                        if (v243 <= v209 && (v243 != v209 || v241 != v207 || 10 * v241 - v245 <= 10 * v207 - *v206))
                        {
                          *(v206 - 4) = 0x7FFFFFFF;
                          char v203 = 1;
                        }
                      }
                    }
                    v206 += 16;
                    v205 -= 64;
                  }
                  while (v205);
                  uint64_t result = (uint64_t)sub_A86F6C((char **)v234, 0, &v238);
LABEL_275:
                  if (v203)
                  {
                    unsigned int v210 = (unsigned int *)v233[13];
                    if ((unsigned int *)v233[14] != v210)
                    {
                      uint64_t v211 = v233[16];
                      uint64_t v212 = *v210;
LABEL_278:
                      unint64_t v213 = v211 + (v212 << 6);
                      unint64_t v214 = v211 + ((unint64_t)v210[1] << 6);
                      if (v213 != v214) {
                        goto LABEL_282;
                      }
                      goto LABEL_288;
                    }
                    sub_D2BFC(v234, 1uLL);
                    unsigned int v210 = (unsigned int *)v233[13];
                    uint64_t v211 = v233[16];
                    uint64_t v212 = *v210;
                    if ((unsigned int *)v233[14] != v210) {
                      goto LABEL_278;
                    }
                    sub_D2BFC(v234, 1uLL);
                    unsigned int v210 = (unsigned int *)v233[13];
                    unint64_t v213 = v211 + (v212 << 6);
                    unint64_t v214 = v233[16] + ((unint64_t)v210[1] << 6);
                    if (v213 == v214)
                    {
LABEL_288:
                      if ((unsigned int *)v233[14] == v210) {
                        goto LABEL_289;
                      }
                    }
                    else
                    {
LABEL_282:
                      while (*(_DWORD *)(v213 + 28) != 0x7FFFFFFF)
                      {
                        v213 += 64;
                        if (v213 == v214)
                        {
                          unint64_t v213 = v214;
                          if ((unsigned int *)v233[14] != v210) {
                            goto LABEL_290;
                          }
                          goto LABEL_289;
                        }
                      }
                      if (v213 == v214) {
                        goto LABEL_288;
                      }
                      unint64_t v215 = v213 + 64;
                      if (v213 + 64 == v214) {
                        goto LABEL_288;
                      }
                      do
                      {
                        if (*(_DWORD *)(v215 + 28) != 0x7FFFFFFF)
                        {
                          long long v216 = *(_OWORD *)v215;
                          long long v217 = *(_OWORD *)(v215 + 16);
                          long long v218 = *(_OWORD *)(v215 + 48);
                          *(_OWORD *)(v213 + 32) = *(_OWORD *)(v215 + 32);
                          *(_OWORD *)(v213 + 48) = v218;
                          *(_OWORD *)unint64_t v213 = v216;
                          *(_OWORD *)(v213 + 16) = v217;
                          v213 += 64;
                        }
                        v215 += 64;
                      }
                      while (v215 != v214);
                      unsigned int v210 = (unsigned int *)*v234;
                      if ((void *)v233[14] == *v234)
                      {
LABEL_289:
                        sub_D2BFC(v234, 1uLL);
                        unsigned int v210 = (unsigned int *)*v234;
                      }
                    }
LABEL_290:
                    uint64_t result = (uint64_t)sub_A86AC4(v234, 0, (char *)v213, (char *)(v233[16] + ((unint64_t)v210[1] << 6)));
                  }
                }
LABEL_220:
                if (++v155 == v237) {
                  goto LABEL_194;
                }
                continue;
              }
            }
            else
            {
              uint64_t v187 = v179 + 3896;
              char v188 = sub_49442C(0x7FFFu);
              if ((sub_C25A10(v187, v188) & 1) == 0) {
                goto LABEL_242;
              }
            }
            uint64_t result = 128;
            unint64_t v146 = v230;
            goto LABEL_249;
          }
          break;
        }
        uint64_t result = sub_A1F8B4((uint64_t)&v250, v163, 1);
        if (result) {
          goto LABEL_228;
        }
        goto LABEL_220;
      }
LABEL_119:
      if (!*((unsigned char *)v4 + 21))
      {
        uint64_t v93 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v93)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v93 = (unsigned int *)v4[13];
          uint64_t v94 = v4[16];
          uint64_t v95 = *v93;
          if ((unsigned int *)v4[14] == v93)
          {
            sub_D2BFC(v8, 1uLL);
            uint64_t v93 = (unsigned int *)v4[13];
            uint64_t v96 = v4[16];
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v94 = v4[16];
          uint64_t v95 = *v93;
        }
        uint64_t v96 = v94;
LABEL_125:
        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)(v94 + (v95 << 6)), (char *)(v96 + ((unint64_t)v93[1] << 6)));
      }
LABEL_194:
      unint64_t v148 = v253;
      unint64_t v9 = v254 + 2;
      v254 += 2;
      if (*(unsigned char *)(v250 + 16)) {
        BOOL v149 = v251 == 0;
      }
      else {
        BOOL v149 = 0;
      }
      if (v149 && (unint64_t)v9 >= v253 && (unint64_t)v9 < v255)
      {
        do
        {
          unint64_t v152 = __ROR8__(*v9, 32);
          if (HIDWORD(v152) == 1 && (v152 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v250 + 4120));
          unint64_t v148 = v253;
          unint64_t v9 = v254;
          if (result) {
            break;
          }
          unint64_t v9 = v254 + 2;
          int v254 = v9;
        }
        while ((unint64_t)v9 >= v253 && (unint64_t)v9 < v255);
      }
      if ((unint64_t)v9 < v148 || (unint64_t)v9 >= v255) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      uint64_t v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(v4[4], 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(v4[4], 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A88F44(_Unwind_Exception *a1)
{
}

void sub_A88F5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v1 + 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A88F9C(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A87844(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_48:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_48;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (v12 >= (*((void *)v2 + 4) - v13) >> 6) {
                break;
              }
              uint64_t v14 = v13 + (v12 << 6);
              int v17 = *(_DWORD *)(v14 + 28);
              uint64_t v16 = (_DWORD *)(v14 + 28);
              int v15 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 <= v15
                  && (uint64_t v19 = v13 + (v12 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v19 + 32))
                  && (v20 = *(_DWORD *)(v19 + 36), unsigned int v21 = *((_DWORD *)result + 9), v21 <= v20)
                  && (v21 == v20 ? (BOOL v22 = v18 == v15) : (BOOL v22 = 0),
                      v22
                    ? (BOOL v23 = 10 * v18 - *((_DWORD *)result + 11) <= 10 * v15 - *(_DWORD *)(v13 + (v12 << 6) + 44))
                    : (BOOL v23 = 1),
                      v23))
                {
                  *uint64_t v16 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v15 <= v18)
                {
                  uint64_t v24 = v13 + (v12 << 6);
                  if (*(_DWORD *)(v24 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v25 = *((_DWORD *)result + 9);
                    unsigned int v26 = *(_DWORD *)(v24 + 36);
                    if (v26 <= v25)
                    {
                      int v27 = 10 * v15 - *(_DWORD *)(v13 + (v12 << 6) + 44);
                      BOOL v28 = v26 == v25 && v15 == v18;
                      if (!v28 || v27 <= 10 * v18 - *((_DWORD *)result + 11))
                      {
                        *((_DWORD *)result + 7) = 0x7FFFFFFF;
                        char v5 = 1;
                        goto LABEL_6;
                      }
                    }
                  }
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A89214(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A89228(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A8923C(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A87844(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_A87844(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) <= a6)
      {
        if (sub_A8791C(a1, &v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_A87340((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      int v30 = (long long *)sub_A87844(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) <= a6)
      {
        if (sub_A8791C(a1, &v36, a5) & 1) != 0 || (sub_A8791C(a1, &v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_A87340((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_A89480(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  unsigned int v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    BOOL v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      BOOL v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A89734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A89764(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A40DC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    BOOL v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A89AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A89B4C(uint64_t a1, int a2)
{
  int v91 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v90[0] = *(_OWORD *)(a1 + 88);
  v90[1] = v4;
  LOBYTE(v90[0]) = 0;
  v89[0] = (uint64_t)v90;
  v89[1] = a1;
  v89[2] = (uint64_t)&v91;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v92 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v11 - v10);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A8B2E4(v89, v10);
    LODWORD(v81[0]) = v14;
    unsigned int v11 = v92;
    if (v14 != 0x7FFFFFFF && v14 < (int)v92)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v81[0];
      unsigned int v92 = v81[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      long long v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 % 10;
      uint64_t v49 = (void *)std::ostream::operator<<();
      sub_188FC78(v49, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v81, 2u);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
      uint64_t v85 = v80;
      *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 % 10;
    }
    char v50 = v22 < 0 ? -5 : 5;
    int v51 = v22 / -10 + v10 + (((-103 * (char)(v50 + v48)) >> 15) & 1) + ((-103 * (char)(v50 + v48)) >> 10);
    unsigned int v52 = sub_A8B2E4(v89, v51);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v52 - v92))) >= (double)(int)fabs((double)(10 * (v51 - v10)))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v46 = (double)(v53 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v54 = v52;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    unint64_t v55 = (void *)std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v56 = (void *)std::ostream::operator<<();
    sub_188FC78(v56, (uint64_t)" to ", 4);
    int v57 = (void *)std::ostream::operator<<();
    sub_188FC78(v57, (uint64_t)" sec for time shift of ", 23);
    uint64_t v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v85 = v80;
    *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v92 = v54;
  int v23 = v10;
  if (v51 != v10)
  {
    double v59 = (double)v22 * 0.5;
    if (v59 >= 0.0)
    {
      if (v59 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v59 + v59) + 1;
        goto LABEL_93;
      }
    }
    else if (v59 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59);
      if (v60 >= 1) {
        --v60;
      }
LABEL_93:
      double v59 = (double)(v60 >> 1);
    }
    double v61 = (double)v22 * 0.25;
    if (v61 >= 0.0)
    {
      if (v61 < 4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        goto LABEL_101;
      }
    }
    else if (v61 > -4.50359963e15)
    {
      uint64_t v62 = (uint64_t)(v61 + v61);
      if (v62 >= 1) {
        --v62;
      }
LABEL_101:
      double v61 = (double)(v62 >> 1);
    }
    int v63 = (int)v61;
    if (*(_DWORD *)(a1 + 60) > (int)v61)
    {
      int v23 = v51;
      goto LABEL_30;
    }
    int v23 = v51;
    int v64 = (int)v59;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v66 = v63 + v64;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v67 = (void *)std::ostream::operator<<();
        sub_188FC78(v67, (uint64_t)"] Examining time shift of ", 26);
        int v68 = v66 % 10;
        uint64_t v69 = (void *)std::ostream::operator<<();
        sub_188FC78(v69, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v81, 2u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        uint64_t v85 = v80;
        *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v68 = v66 % 10;
      }
      if (v66 < 0) {
        char v70 = -5;
      }
      else {
        char v70 = 5;
      }
      int v71 = v66 / -10
          + v10
          + (((-103 * (char)(v70 + v68)) >> 15) & 1)
          + ((-103 * (char)(v70 + v68)) >> 10);
      unsigned int v72 = sub_A8B2E4(v89, v71);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v92 - v72))) >= (double)(int)fabs((double)(10 * (v23 - v71))))
      {
        v64 += v63;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v73 = v72;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v85);
          sub_188FC78(&v85, (uint64_t)"[", 1);
          unint64_t v74 = (void *)std::ostream::operator<<();
          sub_188FC78(v74, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v75 = (void *)std::ostream::operator<<();
          sub_188FC78(v75, (uint64_t)" to ", 4);
          uint64_t v76 = (void *)std::ostream::operator<<();
          sub_188FC78(v76, (uint64_t)" sec for time shift of ", 23);
          unint64_t v77 = (void *)std::ostream::operator<<();
          sub_188FC78(v77, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v81, 2u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          uint64_t v85 = v80;
          *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
          if (v88 < 0) {
            operator delete(v87);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v92 = v73;
        int v23 = v71;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0)
        {
LABEL_125:
          if (v65 < 4.50359963e15)
          {
            uint64_t v78 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v65 > -4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v65 + v65);
        if (v78 >= 1) {
          --v78;
        }
LABEL_105:
        double v65 = (double)(v78 >> 1);
      }
LABEL_106:
      int v63 = (int)v65;
      if (*(_DWORD *)(a1 + 60) > (int)v65) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v92;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"arrival", 7);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v91;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v91 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v91 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v91 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v91 + 3;
    int v35 = v91;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / -10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A8B2E4(v89, v42 + v10 + (((-103 * (char)(v44 + v43)) >> 15) & 1) + ((-103 * (char)(v44 + v43)) >> 10));
  return v92;
}

void sub_A8AD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A8AEC8(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A8B5A0(a1 + 1336, v42);
  sub_A8B850((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_A8B268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A8B2E4(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A3C368(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A8B554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A8B5A0(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A8DD50(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A8DF48(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A8E0AC(a1, v6);
        sub_A8E3D4(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A8F7A0(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A90E98(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A86304(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A90700(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A8B850@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  unsigned int v296 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v333) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v294 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v333) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v295 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v298 = _Q0;
    int v297 = 1;
    unint64_t v304 = a1;
    size_t v303 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_A90DB4(v7, v297 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v299 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          long long v300 = (unsigned int *)(v12 + (v13 << 6));
          if (v300 != (unsigned int *)v299) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v299 = v12 + ((unint64_t)v11[1] << 6);
      long long v300 = (unsigned int *)(v12 + (v13 << 6));
      if (v300 != (unsigned int *)v299) {
        break;
      }
LABEL_9:
      if (++v297 == v295) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v333 = 0x7FFFFFFF;
      __int16 v334 = 0;
      unint64_t v335 = 0x8000000080000000;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      int v338 = 0x7FFFFFFF;
      __int16 v339 = 0;
      unint64_t v340 = 0x8000000080000000;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0xFFFFFFFF00000000;
      int v345 = -1;
      uint64_t v346 = 0;
      uint64_t v348 = 0;
      uint64_t v349 = 0;
      uint64_t v350 = 0;
      int v347 = 0x7FFFFFFF;
      int v351 = 100;
      int v352 = -1;
      long long v353 = v298;
      long long v354 = v298;
      long long v355 = v298;
      long long v356 = 0u;
      long long v357 = 0u;
      long long v358 = 0u;
      long long v359 = 0u;
      uint64_t v14 = a1[3];
      long long v360 = 0u;
      long long v361 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v300 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v300 != -1) {
        break;
      }
LABEL_397:
      sub_A29D50((uint64_t)__p);
      unint64_t v268 = *(void *)(v3 + 16);
      if (v268 >= *(void *)(v3 + 24))
      {
        uint64_t v269 = sub_A4D268(v296, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v269 = v268 + 296;
        *(void *)(v3 + 16) = v268 + 296;
      }
      int v7 = v303;
      *(void *)(v3 + 16) = v269;
      if (*((void *)&v360 + 1))
      {
        *(void *)&long long v361 = *((void *)&v360 + 1);
        operator delete(*((void **)&v360 + 1));
      }
      if ((void)v359)
      {
        *((void *)&v359 + 1) = v359;
        operator delete((void *)v359);
      }
      if (*((void *)&v357 + 1))
      {
        *(void *)&long long v358 = *((void *)&v357 + 1);
        operator delete(*((void **)&v357 + 1));
      }
      unint64_t v270 = (void **)v356;
      if ((void)v356)
      {
        uint64_t v271 = *((void *)&v356 + 1);
        uint64_t v272 = (void *)v356;
        if (*((void *)&v356 + 1) != (void)v356)
        {
          do
          {
            long long v274 = *(void **)(v271 - 40);
            if (v274)
            {
              *(void *)(v271 - 32) = v274;
              operator delete(v274);
            }
            uint64_t v275 = (void **)(v271 - 72);
            uint64_t v276 = *(void *)(v271 - 72);
            if (v276)
            {
              uint64_t v277 = *(void *)(v271 - 64);
              uint64_t v273 = *(void **)(v271 - 72);
              if (v277 != v276)
              {
                do
                {
                  if (!*(_DWORD *)(v277 - 8))
                  {
                    uint64_t v278 = *(void **)(v277 - 48);
                    if (v278)
                    {
                      *(void *)(v277 - 40) = v278;
                      operator delete(v278);
                    }
                    uint64_t v279 = *(void **)(v277 - 80);
                    if (v279)
                    {
                      *(void *)(v277 - 72) = v279;
                      operator delete(v279);
                    }
                    long long v280 = *(void **)(v277 - 104);
                    if (v280)
                    {
                      *(void *)(v277 - 96) = v280;
                      operator delete(v280);
                    }
                  }
                  v277 -= 168;
                }
                while (v277 != v276);
                uint64_t v273 = *v275;
              }
              *(void *)(v271 - 64) = v276;
              operator delete(v273);
              a1 = v304;
            }
            v271 -= 72;
          }
          while (v275 != v270);
          uint64_t v272 = (void *)v356;
        }
        *((void *)&v356 + 1) = v270;
        operator delete(v272);
      }
      if (SHIBYTE(v350) < 0) {
        operator delete(v348);
      }
      v300 += 16;
      if (v300 == (unsigned int *)v299) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v300;
    int v306 = v297;
    unsigned int v307 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v324 = 0;
      int v325 = 0;
      unint64_t v326 = 0;
      char v329 = 0;
      uint64_t v330 = 0;
      unint64_t v328 = 0;
      v331[0] = 1;
      *(void *)&v331[4] = 0x8000000080000000;
      *(_WORD *)&v331[12] = 0;
      v331[14] = 0;
      int v383 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v308 = xmmword_20E12E0;
      __int16 v309 = 0;
      unint64_t v310 = 0x8000000080000000;
      __int16 v311 = 0;
      *(_OWORD *)unint64_t v312 = xmmword_20EB6B0;
      *(void *)&v312[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v314 = 0u;
      long long v315 = 0u;
      long long v316 = 0u;
      int v313 = -1;
      int v317 = 0x7FFFFFFF;
      int v319 = 0;
      uint64_t v320 = 0;
      long long v318 = 0;
      char v321 = 1;
      unint64_t v322 = 0x8000000080000000;
      int v323 = 0;
      char v327 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)unint64_t v312 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v312[16] = v18[3];
      *(void *)&v312[8] = v21;
      int v313 = *v18;
      unsigned int v22 = v313;
      uint64_t v23 = a1[3];
      uint64_t v362 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      sub_A1E9A0((uint64_t)v363, v23, v20, v22, 0, 0);
      *(void *)&long long v365 = *(void *)&v364[24] + 12 * *(unsigned int *)&v312[8];
      if (LOBYTE(v367[1])) {
        *(void **)((char *)&v367[1] + 4) = *(void **)&v312[12];
      }
      if (*(void *)&v364[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v364[16]
      }
                              + 4 * ((*(void *)v364 - *(void *)&v363[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A56ED0((uint64_t)v363, &v362, v24);
      _CF = *(void *)v364 < *(void *)&v364[8] && *(void *)v364 >= *(void *)&v363[24];
      uint64_t v26 = (*(void *)v364 - *(void *)&v363[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      *(_DWORD *)&v312[20] = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v312;
      unsigned int v30 = v313;
      uint64_t v31 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v28, *(int *)&v312[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            uint64_t v289 = (void *)sub_2F404((uint64_t)exception, (long long *)v363);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      char v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        uint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v304;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v307 = *(_DWORD *)(v58 + 8);
        if (v307 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        int v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v304;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v304;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              uint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_431;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v307 = *(_DWORD *)(v58 + 8);
              if (v307 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_431:
              uint64_t v285 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v285, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v304;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_431;
            }
LABEL_117:
            if (v67
              && ((char v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_431;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_431;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((uint64_t v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v304;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
      if (v307 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      char v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)char v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      uint64_t v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        uint64_t v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        int v97 = &v96[8 * v91];
        *(void *)int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v304;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        uint64_t v96 = 0;
        int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v304;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v304;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      uint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      char v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      char v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
LABEL_159:
      int v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v312;
      unsigned int v112 = *(_DWORD *)&v312[20];
      uint64_t v113 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v110, *(int *)&v312[4]))
      {
        uint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          unint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            v292 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v363);
          }
          uint64_t v117 = (int *)((char *)v116 + *v116);
          unint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          uint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          uint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        unint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        unint64_t v123 = 0;
      }
      DWORD1(v308) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v312;
      unint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v312[20];
      int v128 = *(_DWORD *)&v312[8];
      uint64_t v129 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v312[4]))
      {
        unint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          v281 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          uint64_t v282 = (void *)sub_2F404((uint64_t)v281, (long long *)v363);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        unint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          v286 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          v287 = (void *)sub_2F404((uint64_t)v286, (long long *)v363);
        }
LABEL_180:
        uint64_t v132 = (char *)v130 + *v130;
        uint64_t v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      uint64_t v132 = sub_A10B80(v131 + 24, v125, 0);
      uint64_t v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      unsigned int v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        uint64_t v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        uint64_t v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      uint64_t v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        unint64_t v141 = 0;
        unint64_t v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        unint64_t v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          unint64_t v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        unint64_t v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v145;
      *(_DWORD *)&v363[8] = v146;
      uint64_t v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      unint64_t v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        unint64_t v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        unint64_t v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v312[16];
      }
      *((void *)&v308 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v363, v151, v152);
      __int16 v309 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v312;
      uint64_t v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v313;
      int v158 = *(_DWORD *)&v312[8];
      uint64_t v159 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v312[4]))
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          uint64_t v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          unint64_t v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v363);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          uint64_t v290 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          v291 = (void *)sub_2F404((uint64_t)v290, (long long *)v363);
        }
LABEL_213:
        unint64_t v162 = (char *)v160 + *v160;
        signed int v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      unint64_t v162 = sub_A10B80(v161 + 24, v155, 0);
      signed int v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      int v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      long long v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        int v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        int v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      uint64_t v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        uint64_t v171 = 0;
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          uint64_t v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v175;
      *(_DWORD *)&v363[8] = v176;
      unsigned int v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      uint64_t v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        uint64_t v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        uint64_t v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v312[16];
      }
      unint64_t v310 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v363, v181, v182);
      __int16 v311 = v183;
      int v372 = -1;
      sub_9F6FA0((uint64_t)v363, &v308);
      int v372 = 0;
      if (v383)
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (v372) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v369)
        {
          *((void *)&v369 + 1) = v369;
          operator delete((void *)v369);
        }
        if (v367[0])
        {
          v367[1] = v367[0];
          operator delete(v367[0]);
        }
        if ((void)v365)
        {
          *((void *)&v365 + 1) = v365;
          operator delete((void *)v365);
        }
        goto LABEL_256;
      }
      *(_OWORD *)long long v373 = *(_OWORD *)v363;
      *(_OWORD *)&v373[16] = *(_OWORD *)&v363[16];
      v374[0] = *(_OWORD *)v364;
      *(_OWORD *)((char *)v374 + 12) = *(_OWORD *)&v364[12];
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      *(_OWORD *)v375 = v365;
      uint64_t v376 = v366;
      uint64_t v366 = 0;
      long long v365 = 0uLL;
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      long long v377 = *(_OWORD *)v367;
      uint64_t v378 = v367[2];
      memset(v367, 0, sizeof(v367));
      int v379 = v368;
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      long long v380 = v369;
      uint64_t v381 = v370;
      uint64_t v370 = 0;
      long long v369 = 0uLL;
      long long v382 = v371;
      if (!v372) {
        goto LABEL_250;
      }
LABEL_256:
      if (v318)
      {
        int v319 = v318;
        operator delete(v318);
      }
      if (*((void *)&v315 + 1))
      {
        *(void *)&long long v316 = *((void *)&v315 + 1);
        operator delete(*((void **)&v315 + 1));
      }
      if ((void)v314)
      {
        *((void *)&v314 + 1) = v314;
        operator delete((void *)v314);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v325;
        if ((unint64_t)v325 >= v326) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v327 = 1;
      unsigned int v187 = v18[7];
      unsigned int v188 = v18[3];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      *(_DWORD *)long long v363 = 0;
      *(_DWORD *)&v363[4] = v187;
      *(void *)&v363[12] = v189;
      *(void *)&v363[20] = v190;
      *(_DWORD *)&v363[8] = v188;
      int v372 = 1;
      if (v383)
      {
        if (v383 == 1)
        {
          *(_OWORD *)long long v373 = *(_OWORD *)v363;
          *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)long long v373 = *(_OWORD *)v363;
        *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
        int v383 = 1;
        goto LABEL_281;
      }
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      if (v372)
      {
        if (v372 == 1) {
          goto LABEL_280;
        }
        int v383 = v372;
      }
      else
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (!v372)
        {
          if ((void)v369)
          {
            *((void *)&v369 + 1) = v369;
            operator delete((void *)v369);
          }
          if (v367[0])
          {
            v367[1] = v367[0];
            operator delete(v367[0]);
          }
          if ((void)v365)
          {
            *((void *)&v365 + 1) = v365;
            operator delete((void *)v365);
          }
        }
      }
LABEL_281:
      unsigned int v307 = *v18;
      uint64_t v184 = (uint64_t)v325;
      if ((unint64_t)v325 >= v326)
      {
LABEL_282:
        int v325 = (char *)sub_A4CBF4((uint64_t *)&v324, (uint64_t)v373);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v383;
      if (v383 == 1)
      {
        long long v222 = *(_OWORD *)v373;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v373[12];
        *(_OWORD *)uint64_t v184 = v222;
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v383) {
          sub_9F6FA0(v184, (long long *)v373);
        }
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357)
        {
LABEL_268:
          char v186 = sub_A4CECC((void ***)&v356, (uint64_t)&v324);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      unint64_t v191 = (char *)v324;
      uint64_t v192 = v325;
      int64_t v193 = v325 - (unsigned char *)v324;
      if (v325 != v324)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        int v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v304;
        do
        {
          int v198 = (long long *)&v195[v196];
          int v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *int v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v327;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      uint64_t v202 = v328;
      uint64_t v203 = v329 - (unsigned char *)v328;
      if (v329 != v328)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        uint64_t v204 = (char *)operator new(v329 - (unsigned char *)v328);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        uint64_t v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v331;
      *(void *)(v185 + 63) = *(void *)&v331[7];
      *(void *)(v185 + 56) = v206;
      char v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v356 + 1) = v186;
      unint64_t v207 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 1;
      unsigned int v208 = v18[5];
      unsigned int v209 = (char *)a1[13];
      unsigned int v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          int v223 = &v210[8 * v213];
          a1[14] = v223;
          int v224 = v303;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_432:
          }
            sub_188D718();
          long long v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            int v224 = v303;
            a1 = v304;
            int v223 = &v217[8 * v211 + v218];
            v304[13] = &v217[8 * v211];
            v304[14] = v223;
            v304[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              long long v220 = &v217[8 * v211];
              uint64_t v221 = v220;
              a1 = v304;
              goto LABEL_327;
            }
            long long v220 = &v217[8 * v211];
            uint64_t v221 = v220;
            a1 = v304;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_442;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            unsigned int v227 = &v210[-v226];
            uint64_t v221 = &v220[-v226];
            int v228 = &v217[8 * v211 - 16];
            uint64_t v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)int v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            unsigned int v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_442:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            unsigned int v210 = v209;
            int v224 = v303;
            int v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              int v223 = (char *)a1[14];
            }
          }
        }
        unsigned int v209 = (char *)*v224;
        unsigned int v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        unsigned int v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v302 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_432;
        }
        unsigned int v249 = (char *)operator new(8 * v247);
      }
      else
      {
        unsigned int v249 = 0;
      }
      size_t v251 = 8 * v244;
      long long v252 = &v249[8 * v246];
      size_t v301 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          int v254 = v210;
          unint64_t v255 = &v249[8 * v246];
          a1 = v304;
          size_t v256 = v301;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        int v254 = &v210[-v259];
        unint64_t v255 = &v252[-v259];
        unsigned int v260 = &v249[8 * v246 - 16];
        int v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v304;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)unsigned int v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v301;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        unsigned int v210 = (char *)*v303;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v302];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v304;
      v304[13] = v252;
      v304[14] = &v252[v301];
      v304[15] = &v249[8 * v302];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v383)
      {
        if ((void)v380)
        {
          *((void *)&v380 + 1) = v380;
          operator delete((void *)v380);
        }
        if ((void)v377)
        {
          *((void *)&v377 + 1) = v377;
          operator delete((void *)v377);
        }
        if (v375[0])
        {
          v375[1] = v375[0];
          operator delete(v375[0]);
        }
      }
      if (v328)
      {
        char v329 = v328;
        operator delete(v328);
      }
      long long v238 = (char *)v324;
      if (v324)
      {
        unsigned int v239 = v325;
        uint64_t v19 = v324;
        if (v325 != v324)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              uint64_t v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              int v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              int v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v324;
        }
        int v325 = v238;
        operator delete(v19);
      }
      --v306;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v304;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      uint64_t v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v294, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A8D7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    int v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          unsigned int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            char v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      unsigned int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A8DD50(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A8DF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A8DF48(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v18 = 0x1FFFFFFFDLL;
    int v5 = sub_A3B520(v4, &v18);
    int v19 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 10 * v2;
    uint64_t v16 = -1;
    int v17 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_A86F6C((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_A90A80(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A90834((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 0x80000000)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_A90834((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 0x80000000)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v19);
  }
}

double sub_A8E0AC(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v33);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v30 = *(unsigned int **)(a1 + 216);
  if (v4 != v30)
  {
    int v5 = (void **)(a1 + 104);
    while (1)
    {
      unsigned int v32 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v32);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v31 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 300;
LABEL_17:
      sub_A86790(v5, 0);
      sub_A90DB4(v5, a2 + 1 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v32, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v15)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
LABEL_19:
        uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
        unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
        if (v18 == (unsigned int *)v19) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_D2BFC(v5, 1uLL);
      int v15 = *(unsigned int **)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 128);
      uint64_t v17 = *v15;
      if (*(unsigned int **)(a1 + 112) != v15) {
        goto LABEL_19;
      }
      sub_D2BFC(v5, 1uLL);
      uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        unsigned int *v18 = v32;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        _OWORD v18[4] = -1;
        v18[7] = v20 + v11 / -10;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_24:
      uint64_t v21 = v32;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_26:
          if (*v24 > (unint64_t)v32)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + ~a2;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 0x80000000;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_A90834((void **)(a1 + 104), 0, a2 + 2 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v32);
      }
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v30) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = 10 * *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v33) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A8E3D4(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v251);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v234 = *(unsigned int **)(a1 + 216);
  if (v4 != v234)
  {
    int v239 = a2 + 2;
    int v240 = a2 + 1;
    int v237 = ~a2;
    long long v238 = (uint64_t *)(a1 + 232);
    uint64_t v233 = (void **)(a1 + 256);
    unint64_t v244 = (void **)(a1 + 104);
    while (1)
    {
      uint64_t v236 = v4;
      unsigned int v241 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v245, *(void *)(a1 + 24), *v5);
      unint64_t v6 = v246;
      BOOL v7 = &v247;
      if (v250) {
        BOOL v7 = v249;
      }
      if ((unint64_t)v246 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v236 + 1;
      if (v236 + 1 == v234) {
        goto LABEL_307;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v6, 32);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      unsigned int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_59;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v44) & v13;
        unint64_t v45 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v45;
        unsigned int v21 = v45[1];
        ++v44;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_59;
        }
      }
LABEL_56:
      if (v19 != -1)
      {
        uint64_t v47 = v16 + 12 * v19;
        unint64_t v42 = (void **)(a1 + 104);
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
        goto LABEL_80;
      }
      uint64_t v24 = -1;
      if (!sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_60:
        uint64_t v50 = *(void *)(v12 + 40);
        uint64_t v49 = *(void *)(v12 + 48);
        unint64_t v42 = (void **)(a1 + 104);
        if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
          goto LABEL_312;
        }
        uint64_t v29 = *(void *)(v12 + 80);
        if (v50
          && ((unsigned int v51 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v51[1])
            ? (BOOL v52 = *(_DWORD *)(v12 + 32) == *v51)
            : (BOOL v52 = 0),
              v52))
        {
          *(void *)(v12 + 40) = v50 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v49 + 1;
        }
        uint64_t v53 = 3 * v24;
LABEL_79:
        uint64_t v56 = 4 * v53;
        uint64_t v57 = v29 + v56;
        *(void *)uint64_t v57 = v11;
        *(_DWORD *)(v57 + 8) = -1;
        uint64_t v47 = *(void *)(v12 + 80) + v56;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
LABEL_80:
        int v58 = *(_DWORD *)(v12 + 112);
        *(_DWORD *)(v12 + 112) = v58 + 1;
        *(_DWORD *)(v47 + 8) = v58;
        uint64_t v60 = *(char **)(v12 + 96);
        unint64_t v59 = *(void *)(v12 + 104);
        if ((unint64_t)v60 < v59)
        {
          *(void *)uint64_t v60 = v11;
          uint64_t v61 = (uint64_t)(v60 + 8);
LABEL_98:
          *(void *)(v12 + 96) = v61;
          unsigned int v48 = *(_DWORD *)(v47 + 8);
          goto LABEL_99;
        }
        int v62 = (char **)(v12 + 88);
        uint64_t v63 = *(char **)(v12 + 88);
        uint64_t v64 = (v60 - v63) >> 3;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v66 = v59 - (void)v63;
        if (v66 >> 2 > v65) {
          unint64_t v65 = v66 >> 2;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v242 = v65;
        if (v65)
        {
          if (v65 >> 61) {
            goto LABEL_311;
          }
          uint64_t v67 = (char *)operator new(8 * v65);
          int v62 = (char **)(v12 + 88);
          int v68 = &v67[8 * v64];
          *(void *)int v68 = v11;
          uint64_t v61 = (uint64_t)(v68 + 8);
          if (v60 != v63) {
            goto LABEL_90;
          }
LABEL_140:
          unint64_t v42 = (void **)(a1 + 104);
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v242];
          if (!v60) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v67 = 0;
          int v68 = (char *)(8 * v64);
          *(void *)(8 * v64) = v11;
          uint64_t v61 = 8 * v64 + 8;
          if (v60 == v63) {
            goto LABEL_140;
          }
LABEL_90:
          unint64_t v69 = v60 - 8 - v63;
          if (v69 < 0x58) {
            goto LABEL_317;
          }
          if ((unint64_t)(v63 - v67) < 0x20) {
            goto LABEL_317;
          }
          uint64_t v70 = (v69 >> 3) + 1;
          uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v72 = &v60[-v71];
          v68 -= v71;
          uint64_t v73 = &v67[8 * v64 - 16];
          uint64_t v74 = (long long *)(v60 - 16);
          uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v76 = *v74;
            *((_OWORD *)v73 - 1) = *(v74 - 1);
            *(_OWORD *)uint64_t v73 = v76;
            v73 -= 32;
            v74 -= 2;
            v75 -= 4;
          }
          while (v75);
          uint64_t v60 = v72;
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_317:
            do
            {
              uint64_t v77 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v68 - 1) = v77;
              v68 -= 8;
            }
            while (v60 != v63);
          }
          uint64_t v60 = *v62;
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v242];
          unint64_t v42 = (void **)(a1 + 104);
          if (!v60) {
            goto LABEL_98;
          }
        }
        operator delete(v60);
        goto LABEL_98;
      }
LABEL_31:
      uint64_t v28 = *(void *)(v12 + 56) - 1;
      uint64_t v29 = *(void *)(v12 + 80);
      int v31 = *(_DWORD *)(v12 + 64);
      int v30 = *(_DWORD *)(v12 + 68);
      uint64_t v32 = v28 & v15;
      uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
      unsigned int v35 = *v33;
      unsigned int v34 = v33[1];
      uint64_t v36 = *(void *)(v12 + 40);
      if (v30 == v34 && v31 == v35)
      {
        unint64_t v42 = (void **)(a1 + 104);
LABEL_48:
        uint64_t v38 = v32;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555) {
          goto LABEL_312;
        }
        goto LABEL_71;
      }
      if (v36)
      {
        uint64_t v38 = -1;
        uint64_t v39 = 1;
        do
        {
          if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
          {
            if (v38 == -1) {
              uint64_t v38 = v32;
            }
          }
          else if (__PAIR64__(v34, v35) == v11)
          {
            goto LABEL_134;
          }
          uint64_t v32 = (v32 + v39) & v28;
          uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
          unsigned int v35 = *v40;
          unsigned int v34 = v40[1];
          ++v39;
        }
        while (v30 != v34 || v31 != v35);
        unint64_t v42 = (void **)(a1 + 104);
        if (v38 != -1)
        {
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 - v36 >= 0x1555555555555555) {
            goto LABEL_312;
          }
          goto LABEL_71;
        }
        goto LABEL_48;
      }
      uint64_t v104 = 1;
      while (__PAIR64__(v34, v35) != v11)
      {
        uint64_t v32 = (v32 + v104) & v28;
        int v105 = (unsigned int *)(v29 + 12 * v32);
        unsigned int v35 = *v105;
        unsigned int v34 = v105[1];
        ++v104;
        if (v30 == v34 && v31 == v35)
        {
          uint64_t v36 = 0;
          unint64_t v42 = (void **)(a1 + 104);
          uint64_t v38 = v32;
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 >= 0x1555555555555555) {
            goto LABEL_312;
          }
          goto LABEL_71;
        }
      }
LABEL_134:
      unint64_t v42 = (void **)(a1 + 104);
      if (v32 == -1)
      {
        uint64_t v38 = -1;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555)
        {
LABEL_312:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
LABEL_71:
        if (v36
          && ((uint64_t v54 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v54[1])
            ? (BOOL v55 = *(_DWORD *)(v12 + 32) == *v54)
            : (BOOL v55 = 0),
              v55))
        {
          *(void *)(v12 + 40) = v36 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v43 + 1;
        }
        uint64_t v53 = 3 * v38;
        goto LABEL_79;
      }
      uint64_t v47 = v29 + 12 * v32;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 == -1) {
        goto LABEL_80;
      }
LABEL_99:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v243 = v48;
      if (v241 == v48) {
        goto LABEL_251;
      }
      uint64_t v79 = *(unsigned int **)(a1 + 104);
      uint64_t v78 = *(unsigned int **)(a1 + 112);
      uint64_t v80 = (char *)v78 - (char *)v79;
      if (v78 == v79)
      {
        uint64_t v84 = v80 >> 3;
        unint64_t v85 = 1 - (v80 >> 3);
        uint64_t v86 = *(void *)(a1 + 120);
        if (v85 <= (v86 - (uint64_t)v78) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v85);
          uint64_t v93 = (char *)&v78[2 * v85];
          *(void *)(a1 + 112) = v93;
        }
        else
        {
          uint64_t v87 = v86 - (void)v79;
          uint64_t v88 = v87 >> 2;
          if ((unint64_t)(v87 >> 2) <= 1) {
            uint64_t v88 = 1;
          }
          BOOL v228 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v228) {
            unint64_t v89 = v88;
          }
          if (v89 >> 61) {
LABEL_311:
          }
            sub_188D718();
          uint64_t v90 = 8 * v89;
          uint64_t v91 = (char *)operator new(8 * v89);
          unint64_t v92 = &v91[8 * v84];
          bzero(v92, 8 * v85);
          *(void *)(a1 + 104) = v92;
          *(void *)(a1 + 112) = &v92[8 * v85];
          *(void *)(a1 + 120) = &v91[v90];
          if (v78)
          {
            operator delete(v78);
            uint64_t v93 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v93 = &v92[8 * v85];
          }
        }
        unint64_t v42 = (void **)(a1 + 104);
        uint64_t v79 = (unsigned int *)*v244;
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *(unsigned int *)*v244;
        if (*v244 == v93)
        {
          BOOL v83 = *(char **)(a1 + 120);
          if (v83 != v93)
          {
            *(void *)uint64_t v93 = 0;
            *(void *)(a1 + 112) = v93 + 8;
LABEL_127:
            uint64_t v79 = *(unsigned int **)(a1 + 104);
            uint64_t v103 = *(void *)(a1 + 128);
            goto LABEL_147;
          }
          uint64_t v94 = 1;
          uint64_t v95 = v83 - (char *)v79;
          if ((unint64_t)(v95 >> 2) > 1) {
            uint64_t v94 = v95 >> 2;
          }
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v96 = v94;
          }
          if (v96)
          {
            if (v96 >> 61) {
              goto LABEL_311;
            }
            int v97 = (char *)operator new(8 * v96);
            unint64_t v98 = v97;
            *(void *)int v97 = 0;
            uint64_t v99 = (uint64_t)(v97 + 8);
            if (v93 != (char *)v79)
            {
LABEL_121:
              unint64_t v100 = v93 - 8 - (char *)v79;
              if (v100 < 0x58 || (unint64_t)(v93 - v97) < 0x20)
              {
                unsigned int v101 = (unsigned int *)v93;
                goto LABEL_124;
              }
              uint64_t v205 = (v100 >> 3) + 1;
              uint64_t v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v101 = (unsigned int *)&v93[-v206];
              v98 -= v206;
              unint64_t v207 = v97 - 16;
              unsigned int v208 = v93 - 16;
              uint64_t v209 = v205 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v210 = *(_OWORD *)v208;
                *((_OWORD *)v207 - 1) = *((_OWORD *)v208 - 1);
                *(_OWORD *)unint64_t v207 = v210;
                v207 -= 32;
                v208 -= 32;
                v209 -= 4;
              }
              while (v209);
              if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_124:
                  uint64_t v102 = *((void *)v101 - 1);
                  v101 -= 2;
                  *((void *)v98 - 1) = v102;
                  v98 -= 8;
                }
                while (v101 != v79);
              }
              uint64_t v93 = (char *)*v244;
              *(void *)(a1 + 104) = v98;
              *(void *)(a1 + 112) = v99;
              *(void *)(a1 + 120) = &v97[8 * v96];
              if (!v93) {
                goto LABEL_127;
              }
LABEL_126:
              operator delete(v93);
              goto LABEL_127;
            }
          }
          else
          {
            int v97 = 0;
            unint64_t v98 = 0;
            *(void *)&def_332C = 0;
            uint64_t v99 = 8;
            if (v93 != (char *)v79) {
              goto LABEL_121;
            }
          }
          *(void *)(a1 + 104) = v98;
          *(void *)(a1 + 112) = v99;
          *(void *)(a1 + 120) = &v97[8 * v96];
          if (!v93) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *v79;
      }
      uint64_t v103 = v81;
LABEL_147:
      sub_A86AC4(v42, 0, (char *)(v81 + (v82 << 6)), (char *)(v103 + ((unint64_t)v79[1] << 6)));
      unint64_t v107 = v240 + *(_DWORD *)(a1 + 96) * (v241 + 1);
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v109 = *(unsigned int **)(a1 + 112);
      if (v107 >= ((char *)v109 - (char *)v108) >> 3) {
        goto LABEL_197;
      }
      unsigned int v110 = v108[2 * v107];
      unsigned int v111 = v108[2 * v107 + 1];
      unsigned int v112 = v111 - v110;
      if (v111 == v110) {
        goto LABEL_197;
      }
      unsigned __int16 v113 = 0;
      unsigned int v114 = 0;
LABEL_150:
      while (2)
      {
        uint64_t v115 = *(unsigned int **)(a1 + 104);
        if (v107 >= (uint64_t)(*(void *)(a1 + 112) - (void)v115) >> 3
          || (unsigned int v116 = v115[2 * v107], v115[2 * v107 + 1] - v116 <= v114))
        {
          long long v231 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v231, "key does not exist and cannot be added");
          goto LABEL_310;
        }
        unint64_t v117 = v116 + v114;
        uint64_t v118 = *(void *)(a1 + 128);
        if (v117 >= (*(void *)(a1 + 136) - v118) >> 6)
        {
          long long v231 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v231, "index out of range");
LABEL_310:
        }
        uint64_t v119 = (long long *)(v118 + (v117 << 6));
        long long v120 = *v119;
        long long v121 = v119[1];
        long long v122 = v119[3];
        long long v254 = v119[2];
        long long v255 = v122;
        long long v252 = v120;
        long long v253 = v121;
        unint64_t v125 = v115;
        uint64_t v123 = *v115;
        uint64_t v124 = v125[1];
        if (v124 != v123)
        {
          uint64_t v126 = 0;
          uint64_t v129 = v123 << 6;
          uint64_t v130 = (v124 << 6) - (v123 << 6);
          uint64_t v131 = (_DWORD *)(v118 + v129 + 44);
          while (1)
          {
            int v132 = *(v131 - 4);
            if (v132 != 0x7FFFFFFF)
            {
              if (v132 >= SHIDWORD(v253) && *(v131 - 3) <= (int)v254)
              {
                unsigned int v133 = *(v131 - 2);
                if (v133 <= DWORD1(v254)
                  && (v133 != DWORD1(v254)
                   || v132 != HIDWORD(v253)
                   || *v131 - 10 * v132 <= HIDWORD(v254) - 10 * HIDWORD(v253)))
                {
                  unint64_t v128 = v113 & 0xFF00 | (unint64_t)(v126 << 8);
                  unsigned __int16 v113 = v113 & 0xFF00 | ((_WORD)v126 << 8);
                  if (++v114 == v112) {
                    goto LABEL_175;
                  }
                  goto LABEL_150;
                }
              }
              if (SHIDWORD(v253) >= v132 && (int)v254 <= *(v131 - 3))
              {
                unsigned int v134 = *(v131 - 2);
                if (DWORD1(v254) <= v134
                  && (DWORD1(v254) != v134
                   || HIDWORD(v253) != v132
                   || HIDWORD(v254) - 10 * HIDWORD(v253) <= *v131 - 10 * v132))
                {
                  *(v131 - 4) = 0x7FFFFFFF;
                  uint64_t v126 = 1;
                }
              }
            }
            v131 += 16;
            v130 -= 64;
            if (!v130) {
              goto LABEL_155;
            }
          }
        }
        uint64_t v126 = 0;
LABEL_155:
        unsigned int v127 = sub_A86F6C((char **)v42, 0, &v252);
        *(void *)(v127 + 52) = -1;
        *((_DWORD *)v127 + 15) = 0x7FFFFFFF;
        unint64_t v128 = v113 & 0xFF00 | (unint64_t)(v126 << 8);
        unsigned __int16 v113 = v128 | 1;
        if (++v114 != v112) {
          continue;
        }
        break;
      }
LABEL_175:
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v109 = *(unsigned int **)(a1 + 112);
      if (v128)
      {
        if (v109 != v108)
        {
          uint64_t v135 = *(void *)(a1 + 128);
          uint64_t v136 = *v108;
          goto LABEL_178;
        }
        sub_D2BFC(v42, 1uLL);
        long long v108 = *(unsigned int **)(a1 + 104);
        uint64_t v135 = *(void *)(a1 + 128);
        uint64_t v136 = *v108;
        if (*(unsigned int **)(a1 + 112) == v108)
        {
          sub_D2BFC(v244, 1uLL);
          long long v108 = *(unsigned int **)(a1 + 104);
          unint64_t v137 = v135 + (v136 << 6);
          unint64_t v138 = *(void *)(a1 + 128) + ((unint64_t)v108[1] << 6);
          if (v137 == v138)
          {
LABEL_191:
            uint64_t v139 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v108) {
              goto LABEL_192;
            }
            goto LABEL_196;
          }
        }
        else
        {
LABEL_178:
          unint64_t v137 = v135 + (v136 << 6);
          unint64_t v138 = v135 + ((unint64_t)v108[1] << 6);
          if (v137 == v138) {
            goto LABEL_191;
          }
        }
        uint64_t v139 = (void **)(a1 + 104);
        while (*(_DWORD *)(v137 + 28) != 0x7FFFFFFF)
        {
          v137 += 64;
          if (v137 == v138)
          {
            unint64_t v137 = v138;
            if (*(unsigned int **)(a1 + 112) != v108) {
              goto LABEL_196;
            }
            goto LABEL_192;
          }
        }
        if (v137 == v138 || (unint64_t v140 = v137 + 64, v137 + 64 == v138))
        {
          if (*(unsigned int **)(a1 + 112) == v108) {
            goto LABEL_192;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v140 + 28) != 0x7FFFFFFF)
            {
              long long v146 = *(_OWORD *)v140;
              long long v147 = *(_OWORD *)(v140 + 16);
              long long v148 = *(_OWORD *)(v140 + 48);
              *(_OWORD *)(v137 + 32) = *(_OWORD *)(v140 + 32);
              *(_OWORD *)(v137 + 48) = v148;
              *(_OWORD *)unint64_t v137 = v146;
              *(_OWORD *)(v137 + 16) = v147;
              v137 += 64;
            }
            v140 += 64;
          }
          while (v140 != v138);
          long long v108 = (unsigned int *)*v244;
          if (*(void **)(a1 + 112) != *v244) {
            goto LABEL_196;
          }
LABEL_192:
          sub_D2BFC(v139, 1uLL);
          long long v108 = (unsigned int *)*v139;
        }
LABEL_196:
        sub_A86AC4(v139, 0, (char *)v137, (char *)(*(void *)(a1 + 128) + ((unint64_t)v108[1] << 6)));
        long long v108 = *(unsigned int **)(a1 + 104);
        uint64_t v109 = *(unsigned int **)(a1 + 112);
      }
LABEL_197:
      uint64_t v141 = (char *)v109 - (char *)v108;
      if (v109 != v108)
      {
        unsigned int v142 = v241;
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *v108;
LABEL_213:
        uint64_t v160 = v143;
        goto LABEL_231;
      }
      uint64_t v149 = v141 >> 3;
      unint64_t v150 = 1 - (v141 >> 3);
      uint64_t v151 = *(void *)(a1 + 120);
      unsigned int v142 = v241;
      if (v150 <= (v151 - (uint64_t)v109) >> 3)
      {
        bzero(v108, 8 * v150);
        int v158 = &v108[2 * v150];
        *(void *)(a1 + 112) = v158;
        uint64_t v159 = (unsigned int **)(a1 + 104);
        long long v108 = (unsigned int *)*v244;
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *(unsigned int *)*v244;
        if (*v244 != v158) {
          goto LABEL_213;
        }
      }
      else
      {
        uint64_t v152 = v151 - (void)v108;
        uint64_t v153 = v152 >> 2;
        if ((unint64_t)(v152 >> 2) <= 1) {
          uint64_t v153 = 1;
        }
        BOOL v228 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v228) {
          unint64_t v154 = v153;
        }
        if (v154 >> 61) {
          goto LABEL_311;
        }
        uint64_t v155 = 8 * v154;
        uint64_t v156 = (char *)operator new(8 * v154);
        unsigned int v157 = &v156[8 * v149];
        bzero(v157, 8 * v150);
        int v158 = (unsigned int *)&v157[8 * v150];
        *(void *)(a1 + 104) = v157;
        *(void *)(a1 + 112) = v158;
        *(void *)(a1 + 120) = &v156[v155];
        if (v108)
        {
          operator delete(v108);
          int v158 = *(unsigned int **)(a1 + 112);
        }
        uint64_t v159 = (unsigned int **)(a1 + 104);
        long long v108 = (unsigned int *)*v244;
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *(unsigned int *)*v244;
        if (*v244 != v158) {
          goto LABEL_213;
        }
      }
      uint64_t v145 = *(unsigned int **)(a1 + 120);
      if (v145 != v158)
      {
        *(void *)int v158 = 0;
        *(void *)(a1 + 112) = v158 + 2;
        goto LABEL_230;
      }
      uint64_t v161 = 1;
      uint64_t v162 = (char *)v145 - (char *)v108;
      if ((unint64_t)(v162 >> 2) > 1) {
        uint64_t v161 = v162 >> 2;
      }
      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v163 = v161;
      }
      if (v163)
      {
        if (v163 >> 61) {
          goto LABEL_311;
        }
        uint64_t v164 = (char *)operator new(8 * v163);
        int v165 = v164;
        *(void *)uint64_t v164 = 0;
        uint64_t v166 = (uint64_t)(v164 + 8);
        if (v158 == v108)
        {
LABEL_267:
          unsigned int v142 = v241;
          *(void *)(a1 + 104) = v165;
          *(void *)(a1 + 112) = v166;
          *(void *)(a1 + 120) = &v164[8 * v163];
          if (!v158) {
            goto LABEL_230;
          }
LABEL_229:
          operator delete(v158);
          goto LABEL_230;
        }
      }
      else
      {
        uint64_t v164 = 0;
        int v165 = 0;
        *(void *)&def_332C = 0;
        uint64_t v166 = 8;
        if (v158 == v108) {
          goto LABEL_267;
        }
      }
      unint64_t v167 = (char *)(v158 - 2) - (char *)v108;
      if (v167 < 0x58 || (unint64_t)((char *)v158 - v164) < 0x20)
      {
        int v168 = v158;
        unsigned int v142 = v241;
        do
        {
LABEL_227:
          uint64_t v169 = *((void *)v168 - 1);
          v168 -= 2;
          *((void *)v165 - 1) = v169;
          v165 -= 8;
        }
        while (v168 != v108);
        goto LABEL_228;
      }
      uint64_t v211 = (v167 >> 3) + 1;
      uint64_t v212 = 8 * (v211 & 0x3FFFFFFFFFFFFFFCLL);
      int v168 = &v158[v212 / 0xFFFFFFFFFFFFFFFCLL];
      v165 -= v212;
      unint64_t v213 = v164 - 16;
      uint64_t v214 = v158 - 4;
      uint64_t v215 = v211 & 0x3FFFFFFFFFFFFFFCLL;
      unsigned int v142 = v241;
      do
      {
        long long v216 = *(_OWORD *)v214;
        *((_OWORD *)v213 - 1) = *((_OWORD *)v214 - 1);
        *(_OWORD *)unint64_t v213 = v216;
        v213 -= 32;
        v214 -= 8;
        v215 -= 4;
      }
      while (v215);
      if (v211 != (v211 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_227;
      }
LABEL_228:
      int v158 = *v159;
      *(void *)(a1 + 104) = v165;
      *(void *)(a1 + 112) = v166;
      *(void *)(a1 + 120) = &v164[8 * v163];
      if (v158) {
        goto LABEL_229;
      }
LABEL_230:
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v160 = *(void *)(a1 + 128);
LABEL_231:
      uint64_t v170 = (unsigned int *)(v143 + (v144 << 6));
      uint64_t v171 = (unsigned int *)(v160 + ((unint64_t)v108[1] << 6));
      if (v170 != v171)
      {
        uint64_t v172 = v246;
        do
        {
          *uint64_t v170 = v142;
          unsigned int v173 = v170[7];
          unsigned int v174 = v170[8];
          v170[3] = v173;
          v170[4] = -1;
          int v175 = *((_DWORD *)v172 + 2);
          int v176 = v175 / -10;
          int v177 = v175 / 10;
          int v178 = v175 % 10;
          if (v175 < 0) {
            char v179 = -5;
          }
          else {
            char v179 = 5;
          }
          int v180 = (char)(v179 + v178);
          v170[7] = v176 + v173 + (((-103 * v180) >> 15) & 1) + ((-103 * v180) >> 10);
          v170[8] = v174 + v177 + (((103 * v180) >> 15) & 1) + ((103 * v180) >> 10);
          v170 += 16;
        }
        while (v170 != v171);
      }
      int v181 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v182 = v181 + v181 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v183 = v243;
        uint64_t v184 = *(unint64_t **)(a1 + 48);
        if (!v184) {
          goto LABEL_246;
        }
      }
      else
      {
        unsigned int v182 = -1;
        unint64_t v183 = v243;
        uint64_t v184 = *(unint64_t **)(a1 + 48);
        if (!v184)
        {
LABEL_246:
          int v188 = 0x80000000;
          goto LABEL_247;
        }
      }
      if (*v184 > v183)
      {
        unsigned int v185 = 0;
        unsigned int v186 = *(_DWORD *)(a1 + 100) + v237;
        unsigned int v187 = v186;
        while (v185 <= v186)
        {
          int v188 = *(_DWORD *)sub_A3F53C(v184 + 2, v184[1] * v183 + v187);
          v185 += 2;
          v187 -= 2;
          if (v188 != 0x7FFFFFFF) {
            goto LABEL_247;
          }
        }
      }
      int v188 = 0x7FFFFFFF;
LABEL_247:
      unint64_t v189 = v243 + 1;
      if (!sub_A90834(v244, 0, v239 + v181 * v189, v181 * v189 + 1, v182, v188)) {
        goto LABEL_251;
      }
      if (*(void *)(a1 + 240) <= v183) {
        sub_A3E96C((uint64_t)v238, v189, 0);
      }
      uint64_t v190 = *v238;
      unint64_t v191 = v183 >> 6;
      uint64_t v192 = 1 << v183;
      if ((*(void *)(*v238 + 8 * (v183 >> 6)) & (1 << v183)) != 0)
      {
LABEL_251:
        unint64_t v9 = (unint64_t)v247;
        unint64_t v6 = (void *)((char *)v246 + 12);
        uint64_t v246 = v6;
        if (v6 != v247) {
          goto LABEL_252;
        }
        goto LABEL_287;
      }
      unint64_t v194 = *(char **)(a1 + 264);
      unint64_t v193 = *(void *)(a1 + 272);
      if ((unint64_t)v194 < v193)
      {
        *(_DWORD *)unint64_t v194 = v243;
        uint64_t v195 = (uint64_t)(v194 + 4);
        goto LABEL_286;
      }
      uint64_t v196 = (char *)*v233;
      uint64_t v197 = v194 - (unsigned char *)*v233;
      uint64_t v198 = v197 >> 2;
      unint64_t v199 = (v197 >> 2) + 1;
      if (v199 >> 62) {
        sub_2E00();
      }
      uint64_t v200 = v193 - (void)v196;
      if (v200 >> 1 > v199) {
        unint64_t v199 = v200 >> 1;
      }
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v235 = v199;
      if (v199)
      {
        if (v199 >> 62) {
          goto LABEL_311;
        }
        char v201 = operator new(4 * v199);
        uint64_t v202 = (unsigned int *)&v201[4 * v198];
        *uint64_t v202 = v243;
        uint64_t v195 = (uint64_t)(v202 + 1);
        if (v194 != v196)
        {
LABEL_264:
          unint64_t v203 = v194 - 4 - v196;
          unint64_t v204 = v235;
          if (v203 < 0x2C) {
            goto LABEL_318;
          }
          if ((unint64_t)(v194 - &v201[v197]) < 0x20) {
            goto LABEL_318;
          }
          uint64_t v217 = (v203 >> 2) + 1;
          uint64_t v218 = 4 * (v217 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v219 = &v194[-v218];
          uint64_t v202 = (unsigned int *)((char *)v202 - v218);
          long long v220 = &v201[4 * v198 - 16];
          uint64_t v221 = v194 - 16;
          uint64_t v222 = v217 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v223 = *(_OWORD *)v221;
            *(v220 - 1) = *((_OWORD *)v221 - 1);
            *long long v220 = v223;
            v220 -= 2;
            v221 -= 32;
            v222 -= 8;
          }
          while (v222);
          unint64_t v194 = v219;
          if (v217 != (v217 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_318:
            do
            {
              unsigned int v224 = *((_DWORD *)v194 - 1);
              v194 -= 4;
              *--uint64_t v202 = v224;
            }
            while (v194 != v196);
          }
          goto LABEL_284;
        }
      }
      else
      {
        char v201 = 0;
        uint64_t v202 = (unsigned int *)(4 * v198);
        *(_DWORD *)(4 * v198) = v243;
        uint64_t v195 = 4 * v198 + 4;
        if (v194 != v196) {
          goto LABEL_264;
        }
      }
      unint64_t v204 = v235;
LABEL_284:
      *(void *)(a1 + 256) = v202;
      *(void *)(a1 + 264) = v195;
      *(void *)(a1 + 272) = &v201[4 * v204];
      if (v196)
      {
        uint64_t v225 = v195;
        operator delete(v196);
        uint64_t v195 = v225;
        uint64_t v190 = *v238;
      }
LABEL_286:
      *(void *)(a1 + 264) = v195;
      *(void *)(v190 + 8 * v191) |= v192;
      unint64_t v9 = (unint64_t)v247;
      unint64_t v6 = (void *)((char *)v246 + 12);
      uint64_t v246 = v6;
      if (v6 != v247)
      {
LABEL_252:
        int v8 = v250;
        unint64_t v10 = v249[0];
        if (*(unsigned char *)(v245 + 16)) {
          goto LABEL_288;
        }
        goto LABEL_10;
      }
LABEL_287:
      unint64_t v6 = v248;
      unint64_t v10 = v249[0];
      uint64_t v246 = v248;
      int v8 = 1;
      unsigned __int8 v250 = 1;
      if (*(unsigned char *)(v245 + 16))
      {
LABEL_288:
        if (v8) {
          unint64_t v226 = v10;
        }
        else {
          unint64_t v226 = v9;
        }
        if ((unint64_t)v6 < v226)
        {
          while (1)
          {
            unint64_t v227 = __ROR8__(*v6, 32);
            BOOL v228 = HIDWORD(v227) != 1 || (v227 + 3) >= 2;
            if (!v228) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v245 + 4120)))
            {
              LOBYTE(v8) = v250;
              unint64_t v6 = v246;
              unint64_t v9 = (unint64_t)v247;
              break;
            }
            unint64_t v9 = (unint64_t)v247;
            unint64_t v6 = (void *)((char *)v246 + 12);
            uint64_t v246 = v6;
            if (v6 == v247)
            {
              unint64_t v6 = v248;
              uint64_t v246 = v248;
              LOBYTE(v8) = 1;
              unsigned __int8 v250 = 1;
              if ((unint64_t)v248 >= v249[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v8) = v250;
              uint64_t v229 = &v247;
              if (v250) {
                uint64_t v229 = v249;
              }
              if ((unint64_t)v6 >= *v229) {
                break;
              }
            }
          }
          unint64_t v10 = v249[0];
        }
      }
LABEL_10:
      if ((_BYTE)v8) {
        unint64_t v9 = v10;
      }
      if ((unint64_t)v6 >= v9) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_56;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unsigned int v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_60;
      }
      goto LABEL_31;
    }
LABEL_59:
    uint64_t v24 = v19;
    if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_60;
    }
    goto LABEL_31;
  }
LABEL_307:
  double result = sub_72688((uint64_t)v251) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A8F750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A8F764(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A8F778(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A8F78C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A8F7A0(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  int v8 = *(unsigned int **)(a1 + 256);
  unsigned int v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  unint64_t v204 = (void **)(a1 + 328);
  long long v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    uint64_t v211 = v8;
    unint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      unsigned int v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        unsigned int v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            int v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      uint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        unint64_t v65 = (char **)(v13 + 88);
        uint64_t v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          unint64_t v65 = (char **)(v13 + 88);
          unsigned int v72 = &v71[8 * v67];
          *(void *)unsigned int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          long long v76 = &v63[-v75];
          v72 -= v75;
          uint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)uint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          uint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          uint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unsigned int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)uint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 5);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      uint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 5);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          uint64_t v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unsigned int v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unsigned int v101 = v200;
              goto LABEL_135;
            }
            unsigned int v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            int v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            unint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] < v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        int v168 = v213 + 2;
        unint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          unint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        long long v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      uint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        unint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              unint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            unint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              int v188 = v213 + 2;
              unint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                unint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              long long v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        unsigned int v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)unsigned int v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          uint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] >= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        unint64_t v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          uint64_t v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          unsigned int v173 = &v135[4 * v130 - 16];
          unsigned int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          unsigned int v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        uint64_t v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] >= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)unint64_t v203 = 4 * v118;
            uint64_t v202 = operator new(4 * v118);
            unint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              uint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          unint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          unint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          unint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            unint64_t v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    int v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A906D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A906EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A90700(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_A90DB4(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_A90834(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A87844(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_A87844(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) >= a6)
      {
        __int16 v22 = sub_A90A80((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_A90A80((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      unsigned int v27 = (long long *)sub_A87844(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) >= a6)
      {
        if (sub_A90C3C(a1, &v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_A90A80((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_A90A80((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_A90A80(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  int v9 = *(char **)a1;
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    uint64_t v11 = *(unsigned int *)&v9[8 * a3];
    uint64_t v10 = *(unsigned int *)&v9[8 * a3 + 4];
    if (v10 != v11)
    {
      unsigned __int8 v12 = 0;
      uint64_t v16 = v11 << 6;
      uint64_t v17 = (v10 << 6) - v16;
      int v18 = (_DWORD *)(v16 + *(void *)(a1 + 24) + 44);
      while (1)
      {
        int v19 = *(v18 - 4);
        if (v19 != 0x7FFFFFFF)
        {
          int v20 = *(_DWORD *)(a2 + 28);
          if (v19 >= v20 && *(v18 - 3) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v21 = *(_DWORD *)(a2 + 36);
            unsigned int v22 = *(v18 - 2);
            if (v22 <= v21 && (v22 != v21 || v19 != v20 || *v18 - 10 * v19 <= *(_DWORD *)(a2 + 44) - 10 * v20)) {
              return (unint64_t)v12 << 8;
            }
          }
          if (v20 >= v19 && *(_DWORD *)(a2 + 32) <= *(v18 - 3))
          {
            unsigned int v23 = *(v18 - 2);
            unsigned int v24 = *(_DWORD *)(a2 + 36);
            if (v24 <= v23 && (v24 != v23 || v20 != v19 || *(_DWORD *)(a2 + 44) - 10 * v20 <= *v18 - 10 * v19))
            {
              *(v18 - 4) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 16;
        v17 -= 64;
        if (!v17) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  __int16 v13 = sub_A86F6C((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

uint64_t sub_A90C3C(void **a1, _DWORD *a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      int v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC(a1, v14 - v13);
      unint64_t v15 = &v11[64 * v12];
      unint64_t v16 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
      if (v15 == (char *)v16) {
        return 0;
      }
      goto LABEL_13;
    }
    if (v14 < v13) {
      a1[1] = &v7[8 * v14];
    }
  }
  unint64_t v15 = &v11[64 * v12];
  unint64_t v16 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
  if (v15 == (char *)v16) {
    return 0;
  }
LABEL_13:
  int v17 = a2[7];
  unsigned int v18 = a2[9];
  while (1)
  {
    int v19 = *((_DWORD *)v15 + 7);
    if (v19 != 0x7FFFFFFF && v19 >= v17 && *((_DWORD *)v15 + 8) <= a2[8])
    {
      unsigned int v21 = *((_DWORD *)v15 + 9);
      if (v21 <= v18)
      {
        BOOL v22 = *((_DWORD *)v15 + 11) - 10 * v19 > a2[11] - 10 * v17 && v19 == v17;
        if (!v22 || v21 != v18) {
          break;
        }
      }
    }
    v15 += 64;
    if (v15 == (char *)v16) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_A90DB4(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_A87844(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_A90A80((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

uint64_t sub_A90E98(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = (void *)a1;
  unsigned int v263 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v226 = *(_DWORD *)sub_A3F74C(v4 + 35, &v263);
  unint64_t v230 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v261, v4[3], v5);
  __int16 v7 = v261;
  if ((unint64_t)v261 < v262)
  {
    uint64_t v8 = (void **)(v4 + 13);
    uint64_t v235 = (uint64_t)(v4 + 45);
    int v225 = a2 + 2;
    int v223 = ~a2;
    unsigned int v224 = v4 + 23;
    int v227 = a2 + 1;
    unint64_t v231 = HIDWORD(v5);
    uint64_t v232 = v4;
    uint64_t v233 = (void **)(v4 + 13);
    while (1)
    {
      *((double *)v4 + 69) = *((double *)v4 + 69) + 1.0;
      uint64_t v228 = *(unsigned int *)v7;
      sub_A86790(v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v249, v4[3], v230, v226, 0, 1);
      unint64_t v9 = v253;
      BOOL v10 = (unint64_t)v253 < v252 || (unint64_t)v253 >= v254;
      if (!v10) {
        break;
      }
LABEL_3:
      v261 += 4;
      __int16 v7 = v261;
      if ((unint64_t)v261 >= v262) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = v4[4];
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(v4[4], 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555) {
            goto LABEL_302;
          }
        }
        else
        {
          uint64_t v66 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v66) & v28;
            uint64_t v67 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v67;
            unsigned int v34 = v67[1];
            ++v66;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555)
          {
LABEL_302:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((unint64_t v70 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v70[1])
            ? (BOOL v71 = *(_DWORD *)(v12 + 32) == *v70)
            : (BOOL v71 = 0),
              v71))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v65 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v69 + 1;
          uint64_t v65 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v62 = *(void *)(v12 + 40);
      uint64_t v61 = *(void *)(v12 + 48);
      if ((unint64_t)(v61 - v62) >= 0x1555555555555555) {
        goto LABEL_302;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v62
        && ((uint64_t v63 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v63[1])
          ? (BOOL v64 = *(_DWORD *)(v12 + 32) == *v63)
          : (BOOL v64 = 0),
            v64))
      {
        *(void *)(v12 + 40) = v62 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v61 + 1;
      }
      uint64_t v65 = 3 * v24;
LABEL_95:
      uint64_t v72 = 4 * v65;
      uint64_t v73 = v29 + v72;
      *(void *)uint64_t v73 = v11;
      *(_DWORD *)(v73 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v72;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v248 = v46;
        uint64_t result = sub_BD5C18(v235, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_119;
      }
LABEL_96:
      int v74 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v74 + 1;
      *(_DWORD *)(v45 + 8) = v74;
      long long v76 = *(unint64_t **)(v12 + 96);
      unint64_t v75 = *(void *)(v12 + 104);
      if ((unint64_t)v76 < v75)
      {
        unint64_t *v76 = v11;
        uint64_t v77 = (uint64_t)(v76 + 1);
        goto LABEL_118;
      }
      uint64_t v78 = *(char **)(v12 + 88);
      uint64_t v79 = ((char *)v76 - v78) >> 3;
      unint64_t v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v81 = v75 - (void)v78;
      if (v81 >> 2 > v80) {
        unint64_t v80 = v81 >> 2;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v80)
      {
        if (v80 >> 61) {
          goto LABEL_304;
        }
        unint64_t v82 = v80;
        unint64_t v83 = (char *)operator new(8 * v80);
        uint64_t v84 = (unint64_t *)&v83[8 * v79];
        *uint64_t v84 = v11;
        uint64_t v77 = (uint64_t)(v84 + 1);
        if (v76 == (unint64_t *)v78)
        {
LABEL_109:
          *(void *)(v12 + 88) = v84;
          *(void *)(v12 + 96) = v77;
          *(void *)(v12 + 104) = &v83[8 * v82];
          int v4 = v232;
          uint64_t v8 = v233;
          if (v76) {
            goto LABEL_117;
          }
          goto LABEL_118;
        }
      }
      else
      {
        unint64_t v82 = 0;
        unint64_t v83 = 0;
        uint64_t v84 = (unint64_t *)(8 * v79);
        *(void *)(8 * v79) = v11;
        uint64_t v77 = 8 * v79 + 8;
        if (v76 == (unint64_t *)v78) {
          goto LABEL_109;
        }
      }
      unint64_t v85 = (char *)(v76 - 1) - v78;
      if (v85 < 0x58) {
        goto LABEL_308;
      }
      if ((unint64_t)(v78 - v83) < 0x20) {
        goto LABEL_308;
      }
      uint64_t v86 = (v85 >> 3) + 1;
      uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v88 = &v76[v87 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v84 = (unint64_t *)((char *)v84 - v87);
      unint64_t v89 = &v83[8 * v79 - 16];
      unint64_t v90 = v76 - 2;
      uint64_t v91 = v86 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v92 = *(_OWORD *)v90;
        *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
        *(_OWORD *)unint64_t v89 = v92;
        v89 -= 32;
        v90 -= 4;
        v91 -= 4;
      }
      while (v91);
      long long v76 = v88;
      if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_308:
        do
        {
          unint64_t v93 = *--v76;
          *--uint64_t v84 = v93;
        }
        while (v76 != (unint64_t *)v78);
      }
      long long v76 = *(unint64_t **)(v12 + 88);
      *(void *)(v12 + 88) = v84;
      *(void *)(v12 + 96) = v77;
      *(void *)(v12 + 104) = &v83[8 * v82];
      int v4 = v232;
      uint64_t v8 = v233;
      if (v76) {
LABEL_117:
      }
        operator delete(v76);
LABEL_118:
      *(void *)(v12 + 96) = v77;
      unsigned int v248 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v235, v248, v11);
      if (result)
      {
LABEL_51:
        unsigned int v47 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] != v47)
        {
          uint64_t v48 = *v47;
          uint64_t v49 = v47[1];
          if (v49 != v48)
          {
            int v50 = v258;
            uint64_t v51 = v256;
            uint64_t v52 = v253;
            uint64_t v53 = v251;
            unint64_t v54 = ((unint64_t)v253 - v252) >> 4;
            uint64_t v55 = v48 << 6;
            uint64_t v56 = (int *)(v4[16] + (v48 << 6) + 60);
            uint64_t v57 = (v49 << 6) - v55;
            do
            {
              unsigned int v60 = *(v56 - 2);
              if (v50)
              {
                unsigned int v259 = *(v56 - 1);
                int v58 = *v56;
                int v260 = *v56;
              }
              else
              {
                int v58 = *(_DWORD *)(v51 + 12 * v60);
              }
              uint64_t v59 = (unsigned int *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 6));
              *(v56 - 8) = *(unsigned int *)((char *)&v59[2 * (*(_DWORD *)(v51 + 12 * v60 + 4) + v54)
                                                        + 2]
                                           + *v59)
                         + v58
                         - *((_DWORD *)v52 + 2);
              v56 += 16;
              v57 -= 64;
            }
            while (v57);
            uint64_t v257 = (int *)(v51 + 12 * v60);
            sub_A922A0((char *)v8, 0);
            if ((*((unsigned char *)v253 + 15) & 2) != 0
              && (!v255
               || (*(_DWORD *)(v255 + 4 * (((unint64_t)v253 - v252) >> 4)) & v228) == 0))
            {
              int v98 = *((_DWORD *)v4 + 24);
              if (*((unsigned char *)v4 + 20))
              {
                unsigned int v99 = v98 + v98 * *((_DWORD *)v4 + 88);
                unint64_t v100 = v248;
                unsigned int v101 = (unint64_t *)v4[6];
                if (v101) {
                  goto LABEL_130;
                }
LABEL_137:
                int v105 = 0x80000000;
              }
              else
              {
                unsigned int v99 = -1;
                unint64_t v100 = v248;
                unsigned int v101 = (unint64_t *)v4[6];
                if (!v101) {
                  goto LABEL_137;
                }
LABEL_130:
                if (*v101 > v100)
                {
                  unsigned int v102 = 0;
                  unsigned int v103 = *((_DWORD *)v4 + 25) + v223;
                  unsigned int v104 = v103;
                  while (v102 <= v103)
                  {
                    int v105 = *(_DWORD *)sub_A3F53C(v101 + 2, v101[1] * v100 + v104);
                    v102 += 2;
                    v104 -= 2;
                    if (v105 != 0x7FFFFFFF) {
                      goto LABEL_138;
                    }
                  }
                }
                int v105 = 0x7FFFFFFF;
              }
LABEL_138:
              uint64_t v8 = v233;
              int v4 = v232;
              if (sub_A92530(v233, 0, v225 + v98 + v98 * v100, v98 + v98 * v100, v99, v105)) {
                sub_A3EF14(v224, &v248);
              }
            }
            uint64_t v106 = (unsigned int *)v4[13];
            unint64_t v107 = (unsigned int *)v4[14];
            uint64_t v108 = (char *)v107 - (char *)v106;
            if (v107 != v106)
            {
              uint64_t v109 = v4[16];
              uint64_t v110 = *v106;
              goto LABEL_154;
            }
            uint64_t v112 = v108 >> 3;
            unint64_t v113 = 1 - (v108 >> 3);
            uint64_t v114 = v4[15];
            if (v113 <= (v114 - (uint64_t)v107) >> 3)
            {
              bzero((void *)v4[14], 8 * v113);
              long long v122 = (char *)&v107[2 * v113];
              v4[14] = v122;
              uint64_t v106 = (unsigned int *)*v8;
              uint64_t v109 = v4[16];
              uint64_t v110 = *(unsigned int *)*v8;
              if (*v8 != v122) {
                goto LABEL_154;
              }
              goto LABEL_142;
            }
            uint64_t v115 = v114 - (void)v106;
            uint64_t v116 = v115 >> 2;
            if ((unint64_t)(v115 >> 2) <= 1) {
              uint64_t v116 = 1;
            }
            BOOL v10 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8;
            unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v10) {
              unint64_t v117 = v116;
            }
            if (v117 >> 61) {
LABEL_304:
            }
              sub_188D718();
            uint64_t v118 = 8 * v117;
            unsigned int v119 = (char *)operator new(8 * v117);
            size_t v120 = &v119[8 * v112];
            bzero(v120, 8 * v113);
            unint64_t v121 = &v119[v118];
            int v4 = v232;
            v232[13] = v120;
            v232[14] = &v120[8 * v113];
            v232[15] = v121;
            if (v107)
            {
              operator delete(v107);
              long long v122 = (char *)v232[14];
              uint64_t v106 = (unsigned int *)*v8;
              uint64_t v109 = v232[16];
              uint64_t v110 = *(unsigned int *)*v8;
              if (*v8 != v122) {
                goto LABEL_154;
              }
LABEL_142:
              unsigned int v111 = (char *)v4[15];
              if (v111 != v122)
              {
                *(void *)long long v122 = 0;
                v4[14] = v122 + 8;
                goto LABEL_179;
              }
              uint64_t v125 = 1;
              uint64_t v126 = v111 - (char *)v106;
              if ((unint64_t)(v126 >> 2) > 1) {
                uint64_t v125 = v126 >> 2;
              }
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v125;
              }
              if (v127)
              {
                if (v127 >> 61) {
                  goto LABEL_304;
                }
                unint64_t v128 = (char *)operator new(8 * v127);
                uint64_t v129 = v128;
                *(void *)unint64_t v128 = 0;
                uint64_t v130 = (uint64_t)(v128 + 8);
                if (v122 == (char *)v106) {
                  goto LABEL_177;
                }
LABEL_168:
                unint64_t v131 = v122 - 8 - (char *)v106;
                if (v131 < 0x58)
                {
                  uint64_t v132 = (unsigned int *)v122;
                  goto LABEL_175;
                }
                if ((unint64_t)(v122 - v128) < 0x20)
                {
                  uint64_t v132 = (unsigned int *)v122;
                  goto LABEL_175;
                }
                uint64_t v133 = (v131 >> 3) + 1;
                uint64_t v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v132 = (unsigned int *)&v122[-v134];
                v129 -= v134;
                uint64_t v135 = v128 - 16;
                uint64_t v136 = v122 - 16;
                uint64_t v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v138 = *(_OWORD *)v136;
                  *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
                  *(_OWORD *)uint64_t v135 = v138;
                  v135 -= 32;
                  v136 -= 32;
                  v137 -= 4;
                }
                while (v137);
                if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_175:
                    uint64_t v139 = *((void *)v132 - 1);
                    v132 -= 2;
                    *((void *)v129 - 1) = v139;
                    v129 -= 8;
                  }
                  while (v132 != v106);
                }
                long long v122 = (char *)*v233;
              }
              else
              {
                unint64_t v128 = 0;
                uint64_t v129 = 0;
                *(void *)&def_332C = 0;
                uint64_t v130 = 8;
                if (v122 != (char *)v106) {
                  goto LABEL_168;
                }
              }
LABEL_177:
              v4[13] = v129;
              v4[14] = v130;
              v4[15] = &v128[8 * v127];
              uint64_t v8 = v233;
              if (v122) {
                operator delete(v122);
              }
LABEL_179:
              uint64_t v123 = (_DWORD *)(v109 + (v110 << 6));
              unint64_t v124 = v4[16] + ((unint64_t)*(unsigned int *)(v4[13] + 4) << 6);
              if (v123 != (_DWORD *)v124)
              {
LABEL_180:
                int v140 = v258;
                uint64_t v141 = v256;
                unsigned int v142 = v251;
                unint64_t v143 = ((unint64_t)v253 - v252) >> 4;
                do
                {
                  unsigned int v146 = v123[13];
                  if (v140)
                  {
                    unsigned int v259 = v123[14];
                    int v144 = v123[15];
                    int v260 = v144;
                  }
                  else
                  {
                    int v144 = *(_DWORD *)(v141 + 12 * v146);
                  }
                  int v145 = (unsigned int *)((char *)v142 + *(unsigned __int16 *)((char *)v142 - *v142 + 6));
                  v123[7] = *(unsigned int *)((char *)&v145[2
                                                          * (*(_DWORD *)(v141 + 12 * v146 + 4) + v143)
                                                          + 1]
                                            + *v145)
                          + v144;
                  v123 += 16;
                }
                while (v123 != (_DWORD *)v124);
                uint64_t v257 = (int *)(v141 + 12 * v146);
              }
            }
            else
            {
              long long v122 = &v120[8 * v113];
              uint64_t v106 = (unsigned int *)*v8;
              uint64_t v109 = v232[16];
              uint64_t v110 = *(unsigned int *)*v8;
              if (*v8 == v122) {
                goto LABEL_142;
              }
LABEL_154:
              uint64_t v123 = (_DWORD *)(v109 + (v110 << 6));
              unint64_t v124 = v109 + ((unint64_t)v106[1] << 6);
              if (v123 != (_DWORD *)v124) {
                goto LABEL_180;
              }
            }
            uint64_t result = (uint64_t)sub_A922A0((char *)v8, 0);
          }
        }
        if ((*((unsigned char *)v253 + 15) & 1) == 0) {
          goto LABEL_194;
        }
        if (v255)
        {
          if (*(_DWORD *)(v255 + 4 * (((unint64_t)v253 - v252) >> 4)) != v228) {
            goto LABEL_194;
          }
        }
        else if (v228)
        {
          goto LABEL_194;
        }
        unint64_t v147 = v227 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v248;
        uint64_t v148 = v4[13];
        if (v147 >= (v4[14] - v148) >> 3) {
          goto LABEL_194;
        }
        int v236 = *(_DWORD *)(v148 + 8 * v147 + 4) - *(_DWORD *)(v148 + 8 * v147);
        if (!v236) {
          goto LABEL_194;
        }
        unsigned int v156 = 0;
        unint64_t v229 = v227 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v248;
        while (2)
        {
          uint64_t v157 = v4[13];
          if (v147 >= (v4[14] - v157) >> 3 || (v159 = (int *)(v157 + 8 * v147), int v158 = *v159, v159[1] - *v159 <= v156))
          {
            unint64_t v219 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v219, "key does not exist and cannot be added");
            goto LABEL_301;
          }
          unint64_t v160 = v158 + v156;
          uint64_t v161 = v4[16];
          if (v160 >= (v4[17] - v161) >> 6)
          {
            unint64_t v219 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(v219, "index out of range");
LABEL_301:
          }
          uint64_t v162 = v161 + (v160 << 6);
          uint64_t v164 = (_DWORD *)(v162 + 28);
          int v163 = *(_DWORD *)(v162 + 28);
          if (v258)
          {
            uint64_t result = sub_A2B620(v4[3], (uint64_t)&v249, v163, 1);
            if ((result & 1) == 0) {
              goto LABEL_220;
            }
LABEL_228:
            uint64_t v165 = *(void *)(v162 + 20);
            int v166 = *(_DWORD *)(v162 + 32);
            int v234 = *(_DWORD *)(v162 + 36);
            unsigned int v167 = v4;
            int v169 = *(_DWORD *)(v162 + 40);
            int v168 = *(_DWORD *)(v162 + 44);
            int v170 = *(_DWORD *)(v162 + 48);
            uint64_t v171 = (void *)(v167[3] + 4136);
            if (sub_A10E20(v171, v231))
            {
              uint64_t v172 = (int *)sub_A1120C(*(void *)(*v171 + 3944), v230);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v218 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v173 = *v171;
              if (dword_24F7300 == v231)
              {
                unsigned int v174 = *(unsigned int **)(*(void *)(v173 + 3976) + 72);
                if (!v174)
                {
                  uint64_t v221 = __cxa_allocate_exception(0x40uLL);
                  int v264 = (char *)operator new(0x40uLL);
                  long long v265 = xmmword_20B9A90;
                  strcpy(v264, "Realtime stop pattern quad data requested on nullptr buffer");
                  uint64_t v222 = (void *)sub_2F404((uint64_t)v221, (long long *)&v264);
                }
                uint64_t v175 = (int *)((char *)v174 + *v174);
                long long v176 = (unsigned __int16 *)((char *)v175 - *v175);
                if (*v176 >= 5u && (uint64_t v177 = v176[2]) != 0) {
                  uint64_t v178 = (unsigned int *)((char *)v175 + v177 + *(unsigned int *)((char *)v175 + v177));
                }
                else {
                  uint64_t v178 = 0;
                }
                uint64_t v172 = (int *)sub_A1139C(v178, v230);
              }
              else
              {
                uint64_t v172 = (int *)sub_A11500(v173 + 24, v230, 0, "stop pattern");
              }
            }
            uint64_t v179 = v172;
            uint64_t v180 = *v171;
            unint64_t v181 = (unsigned __int16 *)((char *)v172 - *v172);
            if (*v181 >= 0xFu && (uint64_t v182 = v181[7]) != 0)
            {
              uint64_t v183 = v180 + 3896;
              char v184 = sub_49442C(*(unsigned __int16 *)((char *)v172 + v182));
              if ((sub_C25A10(v183, v184) & 1) == 0)
              {
LABEL_242:
                unint64_t v185 = (unsigned __int16 *)((char *)v179 - *v179);
                if (*v185 >= 0xBu && (uint64_t v186 = v185[5]) != 0) {
                  char v187 = *((unsigned char *)v179 + v186);
                }
                else {
                  char v187 = 0;
                }
                unint64_t v147 = v229;
                uint64_t result = sub_A2BF48(v187);
LABEL_249:
                int v190 = v260;
                unint64_t v191 = 0xFFFFFFFF00000000;
                if (v258) {
                  unint64_t v191 = (unint64_t)v259 << 32;
                }
                unint64_t v192 = (-1431655765 * (((unint64_t)v257 - v256) >> 2)) | v191;
                if (!v258) {
                  int v190 = 0x7FFFFFFF;
                }
                unint64_t v193 = (unsigned int *)((char *)v251 + *(unsigned __int16 *)((char *)v251 - *v251 + 6));
                unint64_t v194 = (char *)v193 + *v193;
                uint64_t v195 = &v260;
                if (!v258) {
                  uint64_t v195 = v257;
                }
                int v196 = *v195;
                unsigned int v197 = &v194[8 * v257[1] + 8 * (((unint64_t)v253 - v252) >> 4)];
                int v198 = *((_DWORD *)v197 + 1) + v196;
                LODWORD(v197) = 10 * (*v164 - v196 - *((_DWORD *)v197 + 2));
                LODWORD(v237) = ((unint64_t)v253 - v252) >> 4;
                *(void *)((char *)&v237 + 4) = v192;
                HIDWORD(v237) = v190;
                unsigned int v238 = v263;
                uint64_t v239 = v165;
                int v240 = v198;
                int v241 = v166;
                unsigned int v242 = result + v234;
                int v243 = v169;
                int v244 = v168 - (v197 & ~((int)v197 >> 31));
                int v245 = v170;
                unint64_t v246 = v192;
                int v247 = v190;
                int v4 = v232;
                unint64_t v199 = (unsigned int *)v232[13];
                if ((unsigned int *)v232[14] == v199
                  || (uint64_t v201 = *v199, v200 = *(unsigned int *)(v232[13] + 4), v200 == v201))
                {
                  uint64_t v8 = v233;
                  uint64_t result = (uint64_t)sub_A86F6C((char **)v233, 0, &v237);
                }
                else
                {
                  char v202 = 0;
                  uint64_t v203 = v201 << 6;
                  uint64_t v204 = (v200 << 6) - v203;
                  unsigned int v205 = (_DWORD *)(v232[16] + v203 + 44);
                  uint64_t v8 = v233;
                  do
                  {
                    int v206 = *(v205 - 4);
                    if (v206 != 0x7FFFFFFF)
                    {
                      if (v206 >= v240 && *(v205 - 3) <= v241)
                      {
                        unsigned int v207 = *(v205 - 2);
                        if (v207 <= v242 && (v207 != v242 || v206 != v240 || *v205 - 10 * v206 <= v244 - 10 * v240)) {
                          goto LABEL_275;
                        }
                      }
                      if (v240 >= v206 && v241 <= *(v205 - 3))
                      {
                        unsigned int v208 = *(v205 - 2);
                        if (v242 <= v208 && (v242 != v208 || v240 != v206 || v244 - 10 * v240 <= *v205 - 10 * v206))
                        {
                          *(v205 - 4) = 0x7FFFFFFF;
                          char v202 = 1;
                        }
                      }
                    }
                    v205 += 16;
                    v204 -= 64;
                  }
                  while (v204);
                  uint64_t result = (uint64_t)sub_A86F6C((char **)v233, 0, &v237);
LABEL_275:
                  if (v202)
                  {
                    unint64_t v209 = (unsigned int *)v232[13];
                    if ((unsigned int *)v232[14] != v209)
                    {
                      uint64_t v210 = v232[16];
                      uint64_t v211 = *v209;
LABEL_278:
                      unint64_t v212 = v210 + (v211 << 6);
                      unint64_t v213 = v210 + ((unint64_t)v209[1] << 6);
                      if (v212 != v213) {
                        goto LABEL_282;
                      }
                      goto LABEL_288;
                    }
                    sub_D2BFC(v233, 1uLL);
                    unint64_t v209 = (unsigned int *)v232[13];
                    uint64_t v210 = v232[16];
                    uint64_t v211 = *v209;
                    if ((unsigned int *)v232[14] != v209) {
                      goto LABEL_278;
                    }
                    sub_D2BFC(v233, 1uLL);
                    unint64_t v209 = (unsigned int *)v232[13];
                    unint64_t v212 = v210 + (v211 << 6);
                    unint64_t v213 = v232[16] + ((unint64_t)v209[1] << 6);
                    if (v212 == v213)
                    {
LABEL_288:
                      if ((unsigned int *)v232[14] == v209) {
                        goto LABEL_289;
                      }
                    }
                    else
                    {
LABEL_282:
                      while (*(_DWORD *)(v212 + 28) != 0x7FFFFFFF)
                      {
                        v212 += 64;
                        if (v212 == v213)
                        {
                          unint64_t v212 = v213;
                          if ((unsigned int *)v232[14] != v209) {
                            goto LABEL_290;
                          }
                          goto LABEL_289;
                        }
                      }
                      if (v212 == v213) {
                        goto LABEL_288;
                      }
                      unint64_t v214 = v212 + 64;
                      if (v212 + 64 == v213) {
                        goto LABEL_288;
                      }
                      do
                      {
                        if (*(_DWORD *)(v214 + 28) != 0x7FFFFFFF)
                        {
                          long long v215 = *(_OWORD *)v214;
                          long long v216 = *(_OWORD *)(v214 + 16);
                          long long v217 = *(_OWORD *)(v214 + 48);
                          *(_OWORD *)(v212 + 32) = *(_OWORD *)(v214 + 32);
                          *(_OWORD *)(v212 + 48) = v217;
                          *(_OWORD *)unint64_t v212 = v215;
                          *(_OWORD *)(v212 + 16) = v216;
                          v212 += 64;
                        }
                        v214 += 64;
                      }
                      while (v214 != v213);
                      unint64_t v209 = (unsigned int *)*v233;
                      if ((void *)v232[14] == *v233)
                      {
LABEL_289:
                        sub_D2BFC(v233, 1uLL);
                        unint64_t v209 = (unsigned int *)*v233;
                      }
                    }
LABEL_290:
                    uint64_t result = (uint64_t)sub_A86AC4(v233, 0, (char *)v212, (char *)(v232[16] + ((unint64_t)v209[1] << 6)));
                  }
                }
LABEL_220:
                if (++v156 == v236) {
                  goto LABEL_194;
                }
                continue;
              }
            }
            else
            {
              uint64_t v188 = v180 + 3896;
              char v189 = sub_49442C(0x7FFFu);
              if ((sub_C25A10(v188, v189) & 1) == 0) {
                goto LABEL_242;
              }
            }
            uint64_t result = 128;
            unint64_t v147 = v229;
            goto LABEL_249;
          }
          break;
        }
        uint64_t result = sub_A2BC00((uint64_t)&v249, v163, 1);
        if (result) {
          goto LABEL_228;
        }
        goto LABEL_220;
      }
LABEL_119:
      if (!*((unsigned char *)v4 + 21))
      {
        uint64_t v94 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v94)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v94 = (unsigned int *)v4[13];
          uint64_t v95 = v4[16];
          uint64_t v96 = *v94;
          if ((unsigned int *)v4[14] == v94)
          {
            sub_D2BFC(v8, 1uLL);
            uint64_t v94 = (unsigned int *)v4[13];
            uint64_t v97 = v4[16];
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v95 = v4[16];
          uint64_t v96 = *v94;
        }
        uint64_t v97 = v95;
LABEL_125:
        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)(v95 + (v96 << 6)), (char *)(v97 + ((unint64_t)v94[1] << 6)));
      }
LABEL_194:
      unint64_t v149 = v252;
      unint64_t v9 = v253 - 2;
      v253 -= 2;
      if (*(unsigned char *)(v249 + 16)) {
        BOOL v150 = v250 == 0;
      }
      else {
        BOOL v150 = 0;
      }
      if (v150 && (unint64_t)v9 >= v252 && (unint64_t)v9 < v254)
      {
        do
        {
          unint64_t v153 = __ROR8__(*v9, 32);
          if (HIDWORD(v153) == 1 && (v153 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v249 + 4120));
          unint64_t v149 = v252;
          unint64_t v9 = v253;
          if (result) {
            break;
          }
          unint64_t v9 = v253 - 2;
          long long v253 = v9;
        }
        while ((unint64_t)v9 >= v252 && (unint64_t)v9 < v254);
      }
      if ((unint64_t)v9 < v149 || (unint64_t)v9 >= v254) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unint64_t v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(v4[4], 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(v4[4], 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A92248(_Unwind_Exception *a1)
{
}

void sub_A92260(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v1 + 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A922A0(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A87844(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_48:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_48;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (v12 >= (*((void *)v2 + 4) - v13) >> 6) {
                break;
              }
              uint64_t v14 = v13 + (v12 << 6);
              int v17 = *(_DWORD *)(v14 + 28);
              uint64_t v16 = (_DWORD *)(v14 + 28);
              int v15 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 >= v15
                  && (uint64_t v19 = v13 + (v12 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v19 + 32))
                  && (v20 = *(_DWORD *)(v19 + 36), unsigned int v21 = *((_DWORD *)result + 9), v21 <= v20)
                  && (v21 == v20 ? (BOOL v22 = v18 == v15) : (BOOL v22 = 0),
                      v22
                    ? (BOOL v23 = *((_DWORD *)result + 11) - 10 * v18 <= *(_DWORD *)(v13 + (v12 << 6) + 44) - 10 * v15)
                    : (BOOL v23 = 1),
                      v23))
                {
                  *uint64_t v16 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v15 >= v18)
                {
                  uint64_t v24 = v13 + (v12 << 6);
                  if (*(_DWORD *)(v24 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v25 = *((_DWORD *)result + 9);
                    unsigned int v26 = *(_DWORD *)(v24 + 36);
                    if (v26 <= v25)
                    {
                      int v27 = *(_DWORD *)(v13 + (v12 << 6) + 44) - 10 * v15;
                      BOOL v28 = v26 == v25 && v15 == v18;
                      if (!v28 || v27 <= *((_DWORD *)result + 11) - 10 * v18)
                      {
                        *((_DWORD *)result + 7) = 0x7FFFFFFF;
                        char v5 = 1;
                        goto LABEL_6;
                      }
                    }
                  }
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A92508(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A9251C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A92530(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A87844(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_A87844(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) >= a6)
      {
        if (sub_A90C3C(a1, &v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_A90A80((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      int v30 = (long long *)sub_A87844(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) >= a6)
      {
        if (sub_A90C3C(a1, &v36, a5) & 1) != 0 || (sub_A90C3C(a1, &v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_A90A80((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_A92774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v6 = a5[1];
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v7;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 344) = 0;
  sub_BD5668(a1 + 360, a2);
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 464), &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_A92888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v15 + 280);
  sub_A3884C(v15 + 232);
  sub_A3884C(v18);
  sub_46645C(v17);
  sub_14A84(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_A928DC(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  long long v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    char v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      char v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A92B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A92BC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A3C368((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    char v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A92F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A92FAC(uint64_t a1, int a2)
{
  int v96 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v95[0] = *(_OWORD *)(a1 + 88);
  v95[1] = v4;
  LOBYTE(v95[0]) = 1;
  v94[0] = (uint64_t)v95;
  v94[1] = a1;
  v94[2] = (uint64_t)&v96;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v97 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v10 - v11);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A946C0(v94, v10);
    LODWORD(v86[0]) = v14;
    unsigned int v11 = v97;
    if (v14 != 0x7FFFFFFF && (int)v97 < v14)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v89 < 0) {
          operator delete(__p[0]);
        }
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v86[0];
      unsigned int v97 = v86[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      unsigned int v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 / 10;
      int v49 = v22 % 10;
      int v50 = (void *)std::ostream::operator<<();
      sub_188FC78(v50, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v86, 2u);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      uint64_t v90 = v85;
      *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 / 10;
      int v49 = v22 % 10;
    }
    char v51 = v22 < 0 ? -5 : 5;
    unsigned int v52 = v48 + (((103 * (char)(v51 + v49)) >> 15) & 1) + ((103 * (char)(v51 + v49)) >> 10);
    int v53 = v10;
    int v54 = v52 + v10;
    unsigned int v55 = sub_A946C0(v94, v52 + v10);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v55 - v97))) >= (double)(int)fabs((double)(int)(10 * v52))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46);
      if (v56 >= 1) {
        --v56;
      }
    }
    double v46 = (double)(v56 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v57 = v55;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    int v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v59 = (void *)std::ostream::operator<<();
    sub_188FC78(v59, (uint64_t)" to ", 4);
    unsigned int v60 = (void *)std::ostream::operator<<();
    sub_188FC78(v60, (uint64_t)" sec for time shift of ", 23);
    uint64_t v61 = (void *)std::ostream::operator<<();
    sub_188FC78(v61, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    uint64_t v90 = v85;
    *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v97 = v57;
  int v23 = v53;
  if (v52)
  {
    double v62 = (double)v22 * 0.5;
    if (v62 >= 0.0)
    {
      if (v62 < 4.50359963e15)
      {
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
        goto LABEL_93;
      }
    }
    else if (v62 > -4.50359963e15)
    {
      uint64_t v63 = (uint64_t)(v62 + v62);
      if (v63 >= 1) {
        --v63;
      }
LABEL_93:
      double v62 = (double)(v63 >> 1);
    }
    double v64 = (double)v22 * 0.25;
    if (v64 >= 0.0)
    {
      if (v64 < 4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64) + 1;
        goto LABEL_101;
      }
    }
    else if (v64 > -4.50359963e15)
    {
      uint64_t v65 = (uint64_t)(v64 + v64);
      if (v65 >= 1) {
        --v65;
      }
LABEL_101:
      double v64 = (double)(v65 >> 1);
    }
    int v66 = (int)v64;
    if (*(_DWORD *)(a1 + 60) > (int)v64)
    {
      int v23 = v54;
      goto LABEL_30;
    }
    int v67 = (int)v62;
    int v23 = v54;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v69 = v66 + v67;
      int v83 = v67;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        unint64_t v70 = (void *)std::ostream::operator<<();
        sub_188FC78(v70, (uint64_t)"] Examining time shift of ", 26);
        int v71 = v69 / 10;
        int v72 = v69 % 10;
        uint64_t v73 = (void *)std::ostream::operator<<();
        sub_188FC78(v73, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v86, 2u);
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        uint64_t v90 = v85;
        *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v71 = v69 / 10;
        int v72 = v69 % 10;
      }
      if (v69 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unsigned int v75 = v71 + (((103 * (char)(v74 + v72)) >> 15) & 1) + ((103 * (char)(v74 + v72)) >> 10);
      unsigned int v76 = sub_A946C0(v94, v75 + v53);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v97 - v76))) >= (double)(int)fabs((double)(int)(10 * (v23 - (v75 + v53)))))
      {
        v67 += v66;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v77 = v76;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v90);
          sub_188FC78(&v90, (uint64_t)"[", 1);
          uint64_t v78 = (void *)std::ostream::operator<<();
          sub_188FC78(v78, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v79 = (void *)std::ostream::operator<<();
          sub_188FC78(v79, (uint64_t)" to ", 4);
          unint64_t v80 = (void *)std::ostream::operator<<();
          sub_188FC78(v80, (uint64_t)" sec for time shift of ", 23);
          uint64_t v81 = (void *)std::ostream::operator<<();
          sub_188FC78(v81, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v86, 2u);
          if (v87 < 0) {
            operator delete(v86[0]);
          }
          uint64_t v90 = v85;
          *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
          if (v93 < 0) {
            operator delete(v92);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v97 = v77;
        int v23 = v75 + v53;
        int v67 = v83;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0)
        {
LABEL_125:
          if (v68 < 4.50359963e15)
          {
            uint64_t v82 = (uint64_t)(v68 + v68) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v68 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v68 + v68);
        if (v82 >= 1) {
          --v82;
        }
LABEL_105:
        double v68 = (double)(v82 >> 1);
      }
LABEL_106:
      int v66 = (int)v68;
      if (*(_DWORD *)(a1 + 60) > (int)v68) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v97;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"departure", 9);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v89 < 0) {
        operator delete(__p[0]);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v96;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v96 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v96 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v96 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v96 + 3;
    int v35 = v96;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / 10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A946C0(v94, v42 + v10 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10));
  return v97;
}

void sub_A94130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A942A4(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A9497C(a1 + 1336, v42);
  sub_A94C30((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_A94644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A946C0(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A40DC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A94930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A9497C(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_A97168(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_A97360(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_A974C4(a1, v6);
        sub_A977D0(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_A98B88(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_A9A704(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A99AE8(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_A99E40(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A94C30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  long long v298 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v335) = 0;
  LOBYTE(__p[0]) = 0;
  unsigned int v296 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v335) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v297 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v300 = _Q0;
    int v299 = 1;
    int v306 = a1;
    v305 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_A9A620(v7, v299 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v301 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          unint64_t v302 = (unsigned int *)(v12 + (v13 << 6));
          if (v302 != (unsigned int *)v301) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v301 = v12 + ((unint64_t)v11[1] << 6);
      unint64_t v302 = (unsigned int *)(v12 + (v13 << 6));
      if (v302 != (unsigned int *)v301) {
        break;
      }
LABEL_9:
      if (++v299 == v297) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v335 = 0x7FFFFFFF;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      __int16 v338 = 0;
      unint64_t v339 = 0x8000000080000000;
      int v340 = 0x7FFFFFFF;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0x8000000080000000;
      __int16 v345 = 0;
      unint64_t v346 = 0xFFFFFFFF00000000;
      int v347 = -1;
      uint64_t v348 = 0;
      uint64_t v350 = 0;
      uint64_t v351 = 0;
      uint64_t v352 = 0;
      int v349 = 0x7FFFFFFF;
      int v353 = 100;
      int v354 = -1;
      long long v355 = v300;
      long long v356 = v300;
      long long v357 = v300;
      long long v358 = 0u;
      long long v359 = 0u;
      long long v360 = 0u;
      long long v361 = 0u;
      uint64_t v14 = a1[3];
      long long v362 = 0u;
      long long v363 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v302 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v302 != -1) {
        break;
      }
LABEL_397:
      unint64_t v268 = v358;
      if ((void)v358 != *((void *)&v358 + 1))
      {
        unint64_t v269 = *((void *)&v358 + 1) - 72;
        if (*((void *)&v358 + 1) - 72 > (unint64_t)v358)
        {
          do
          {
            sub_A4D0C8(v268, v269);
            v268 += 72;
            v269 -= 72;
          }
          while (v268 < v269);
        }
      }
      sub_A29D50((uint64_t)__p);
      unint64_t v270 = *(void *)(v3 + 16);
      if (v270 >= *(void *)(v3 + 24))
      {
        uint64_t v271 = sub_A4D268(v298, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v271 = v270 + 296;
        *(void *)(v3 + 16) = v270 + 296;
      }
      int v7 = v305;
      *(void *)(v3 + 16) = v271;
      if (*((void *)&v362 + 1))
      {
        *(void *)&long long v363 = *((void *)&v362 + 1);
        operator delete(*((void **)&v362 + 1));
      }
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      if (*((void *)&v359 + 1))
      {
        *(void *)&long long v360 = *((void *)&v359 + 1);
        operator delete(*((void **)&v359 + 1));
      }
      uint64_t v272 = (void **)v358;
      if ((void)v358)
      {
        uint64_t v273 = *((void *)&v358 + 1);
        long long v274 = (void *)v358;
        if (*((void *)&v358 + 1) != (void)v358)
        {
          do
          {
            uint64_t v276 = *(void **)(v273 - 40);
            if (v276)
            {
              *(void *)(v273 - 32) = v276;
              operator delete(v276);
            }
            uint64_t v277 = (void **)(v273 - 72);
            uint64_t v278 = *(void *)(v273 - 72);
            if (v278)
            {
              uint64_t v279 = *(void *)(v273 - 64);
              uint64_t v275 = *(void **)(v273 - 72);
              if (v279 != v278)
              {
                do
                {
                  if (!*(_DWORD *)(v279 - 8))
                  {
                    long long v280 = *(void **)(v279 - 48);
                    if (v280)
                    {
                      *(void *)(v279 - 40) = v280;
                      operator delete(v280);
                    }
                    v281 = *(void **)(v279 - 80);
                    if (v281)
                    {
                      *(void *)(v279 - 72) = v281;
                      operator delete(v281);
                    }
                    uint64_t v282 = *(void **)(v279 - 104);
                    if (v282)
                    {
                      *(void *)(v279 - 96) = v282;
                      operator delete(v282);
                    }
                  }
                  v279 -= 168;
                }
                while (v279 != v278);
                uint64_t v275 = *v277;
              }
              *(void *)(v273 - 64) = v278;
              operator delete(v275);
              a1 = v306;
            }
            v273 -= 72;
          }
          while (v277 != v272);
          long long v274 = (void *)v358;
        }
        *((void *)&v358 + 1) = v272;
        operator delete(v274);
      }
      if (SHIBYTE(v352) < 0) {
        operator delete(v350);
      }
      v302 += 16;
      if (v302 == (unsigned int *)v301) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v302;
    int v308 = v299;
    unsigned int v309 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v326 = 0;
      char v327 = 0;
      unint64_t v328 = 0;
      uint64_t v331 = 0;
      uint64_t v332 = 0;
      uint64_t v330 = 0;
      v333[0] = 1;
      *(void *)&v333[4] = 0x8000000080000000;
      *(_WORD *)&v333[12] = 0;
      v333[14] = 0;
      int v385 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v310 = xmmword_20E12E0;
      __int16 v311 = 0;
      unint64_t v312 = 0x8000000080000000;
      __int16 v313 = 0;
      *(_OWORD *)long long v314 = xmmword_20EB6B0;
      *(void *)&v314[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v316 = 0u;
      long long v317 = 0u;
      long long v318 = 0u;
      int v315 = -1;
      int v319 = 0x7FFFFFFF;
      char v321 = 0;
      uint64_t v322 = 0;
      uint64_t v320 = 0;
      char v323 = 1;
      unint64_t v324 = 0x8000000080000000;
      int v325 = 0;
      char v329 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)long long v314 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v314[16] = v18[3];
      *(void *)&v314[8] = v21;
      *(_DWORD *)&v314[20] = *v18;
      unsigned int v22 = *(_DWORD *)&v314[20];
      uint64_t v23 = a1[3];
      uint64_t v364 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      sub_A1E9A0((uint64_t)v365, v23, v20, v22, 0, 0);
      *(void *)&long long v367 = *(void *)&v366[24] + 12 * *(unsigned int *)&v314[8];
      if (LOBYTE(v369[1])) {
        *(void **)((char *)&v369[1] + 4) = *(void **)&v314[12];
      }
      if (*(void *)&v366[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v366[16]
      }
                              + 4 * ((*(void *)v366 - *(void *)&v365[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A4C9D4((uint64_t)v365, &v364, v24);
      _CF = *(void *)v366 < *(void *)&v366[8] && *(void *)v366 >= *(void *)&v365[24];
      uint64_t v26 = (*(void *)v366 - *(void *)&v365[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      int v315 = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v314;
      unsigned int v30 = *(_DWORD *)&v314[20];
      uint64_t v31 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v28, *(int *)&v314[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            v291 = (void *)sub_2F404((uint64_t)exception, (long long *)v365);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      int v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        uint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v306;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v309 = *(_DWORD *)(v58 + 8);
        if (v309 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        double v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v306;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v306;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              unint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_434;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v309 = *(_DWORD *)(v58 + 8);
              if (v309 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_434:
              v287 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v287, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v306;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_434;
            }
LABEL_117:
            if (v67
              && ((uint64_t v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_434;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_434;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((unsigned int v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v306;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
      if (v309 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      uint64_t v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)uint64_t v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      uint64_t v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        int v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        unsigned int v97 = &v96[8 * v91];
        *(void *)unsigned int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v306;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        int v96 = 0;
        unsigned int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v306;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v306;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      uint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      uint64_t v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      uint64_t v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
LABEL_159:
      uint64_t v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v314;
      unsigned int v112 = *(_DWORD *)&v314[20];
      uint64_t v113 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v110, *(int *)&v314[4]))
      {
        uint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          uint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            uint64_t v294 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            int v295 = (void *)sub_2F404((uint64_t)v294, (long long *)v365);
          }
          unint64_t v117 = (int *)((char *)v116 + *v116);
          uint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          uint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          uint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        uint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        uint64_t v123 = 0;
      }
      DWORD1(v310) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v314;
      uint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v314[20];
      int v128 = *(_DWORD *)&v314[8];
      uint64_t v129 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v314[4]))
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          uint64_t v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          unint64_t v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v365);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          unint64_t v288 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          uint64_t v289 = (void *)sub_2F404((uint64_t)v288, (long long *)v365);
        }
LABEL_180:
        uint64_t v132 = (char *)v130 + *v130;
        uint64_t v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      uint64_t v132 = sub_A10B80(v131 + 24, v125, 0);
      uint64_t v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      uint64_t v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        long long v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        long long v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      int v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        uint64_t v141 = 0;
        unsigned int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        uint64_t v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          uint64_t v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        unsigned int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)long long v365 = v145;
      *(_DWORD *)&v365[8] = v146;
      unint64_t v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      uint64_t v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        BOOL v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        BOOL v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v314[16];
      }
      *((void *)&v310 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v365, v151, v152);
      __int16 v311 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v314;
      unsigned int v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v315;
      int v158 = *(_DWORD *)&v314[8];
      uint64_t v159 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v314[4]))
      {
        unint64_t v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          uint64_t v285 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          v286 = (void *)sub_2F404((uint64_t)v285, (long long *)v365);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        unint64_t v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          v292 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v365);
        }
LABEL_213:
        uint64_t v162 = (char *)v160 + *v160;
        int v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      uint64_t v162 = sub_A10B80(v161 + 24, v155, 0);
      int v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      uint64_t v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      int v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        int v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        int v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      int v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        uint64_t v171 = 0;
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          uint64_t v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)long long v365 = v175;
      *(_DWORD *)&v365[8] = v176;
      uint64_t v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      uint64_t v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        uint64_t v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        uint64_t v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v314[16];
      }
      unint64_t v312 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v365, v181, v182);
      __int16 v313 = v183;
      int v374 = -1;
      sub_9F6FA0((uint64_t)v365, &v310);
      int v374 = 0;
      if (v385)
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (v374) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v371)
        {
          *((void *)&v371 + 1) = v371;
          operator delete((void *)v371);
        }
        if (v369[0])
        {
          v369[1] = v369[0];
          operator delete(v369[0]);
        }
        if ((void)v367)
        {
          *((void *)&v367 + 1) = v367;
          operator delete((void *)v367);
        }
        goto LABEL_256;
      }
      *(_OWORD *)v375 = *(_OWORD *)v365;
      *(_OWORD *)&v375[16] = *(_OWORD *)&v365[16];
      v376[0] = *(_OWORD *)v366;
      *(_OWORD *)((char *)v376 + 12) = *(_OWORD *)&v366[12];
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      *(_OWORD *)long long v377 = v367;
      uint64_t v378 = v368;
      uint64_t v368 = 0;
      long long v367 = 0uLL;
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      long long v379 = *(_OWORD *)v369;
      long long v380 = v369[2];
      memset(v369, 0, sizeof(v369));
      int v381 = v370;
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      long long v382 = v371;
      uint64_t v383 = v372;
      uint64_t v372 = 0;
      long long v371 = 0uLL;
      long long v384 = v373;
      if (!v374) {
        goto LABEL_250;
      }
LABEL_256:
      if (v320)
      {
        char v321 = v320;
        operator delete(v320);
      }
      if (*((void *)&v317 + 1))
      {
        *(void *)&long long v318 = *((void *)&v317 + 1);
        operator delete(*((void **)&v317 + 1));
      }
      if ((void)v316)
      {
        *((void *)&v316 + 1) = v316;
        operator delete((void *)v316);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v327;
        if ((unint64_t)v327 >= v328) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v329 = 1;
      unsigned int v187 = v18[3];
      unsigned int v188 = v18[7];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      *(_DWORD *)long long v365 = 0;
      *(_DWORD *)&v365[4] = v187;
      *(void *)&v365[12] = v189;
      *(void *)&v365[20] = v190;
      *(_DWORD *)&v365[8] = v188;
      int v374 = 1;
      if (v385)
      {
        if (v385 == 1)
        {
          *(_OWORD *)v375 = *(_OWORD *)v365;
          *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)v375 = *(_OWORD *)v365;
        *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
        int v385 = 1;
        goto LABEL_281;
      }
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      if (v374)
      {
        if (v374 == 1) {
          goto LABEL_280;
        }
        int v385 = v374;
      }
      else
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (!v374)
        {
          if ((void)v371)
          {
            *((void *)&v371 + 1) = v371;
            operator delete((void *)v371);
          }
          if (v369[0])
          {
            v369[1] = v369[0];
            operator delete(v369[0]);
          }
          if ((void)v367)
          {
            *((void *)&v367 + 1) = v367;
            operator delete((void *)v367);
          }
        }
      }
LABEL_281:
      unsigned int v309 = *v18;
      uint64_t v184 = (uint64_t)v327;
      if ((unint64_t)v327 >= v328)
      {
LABEL_282:
        char v327 = (char *)sub_A4CBF4((uint64_t *)&v326, (uint64_t)v375);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v385;
      if (v385 == 1)
      {
        long long v222 = *(_OWORD *)v375;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v375[12];
        *(_OWORD *)uint64_t v184 = v222;
        char v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v385) {
          sub_9F6FA0(v184, (long long *)v375);
        }
        char v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359)
        {
LABEL_268:
          uint64_t v186 = sub_A4CECC((void ***)&v358, (uint64_t)&v326);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      unint64_t v191 = (char *)v326;
      unint64_t v192 = v327;
      int64_t v193 = v327 - (unsigned char *)v326;
      if (v327 != v326)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        uint64_t v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v306;
        do
        {
          int v198 = (long long *)&v195[v196];
          unint64_t v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *int v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v329;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      char v202 = v330;
      uint64_t v203 = v331 - (unsigned char *)v330;
      if (v331 != v330)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        uint64_t v204 = (char *)operator new(v331 - (unsigned char *)v330);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        unsigned int v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v333;
      *(void *)(v185 + 63) = *(void *)&v333[7];
      *(void *)(v185 + 56) = v206;
      uint64_t v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v358 + 1) = v186;
      unint64_t v207 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 1;
      unsigned int v208 = v18[5];
      unint64_t v209 = (char *)a1[13];
      uint64_t v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          int v223 = &v210[8 * v213];
          a1[14] = v223;
          unsigned int v224 = v305;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_435:
          }
            sub_188D718();
          long long v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            unsigned int v224 = v305;
            a1 = v306;
            int v223 = &v217[8 * v211 + v218];
            v306[13] = &v217[8 * v211];
            v306[14] = v223;
            v306[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              long long v220 = &v217[8 * v211];
              uint64_t v221 = v220;
              a1 = v306;
              goto LABEL_327;
            }
            long long v220 = &v217[8 * v211];
            uint64_t v221 = v220;
            a1 = v306;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_445;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            int v227 = &v210[-v226];
            uint64_t v221 = &v220[-v226];
            uint64_t v228 = &v217[8 * v211 - 16];
            unint64_t v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)uint64_t v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            uint64_t v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_445:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            uint64_t v210 = v209;
            unsigned int v224 = v305;
            int v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              int v223 = (char *)a1[14];
            }
          }
        }
        unint64_t v209 = (char *)*v224;
        uint64_t v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        uint64_t v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v304 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_435;
        }
        uint64_t v249 = (char *)operator new(8 * v247);
      }
      else
      {
        uint64_t v249 = 0;
      }
      size_t v251 = 8 * v244;
      unint64_t v252 = &v249[8 * v246];
      size_t v303 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          unint64_t v254 = v210;
          uint64_t v255 = &v249[8 * v246];
          a1 = v306;
          size_t v256 = v303;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v254 = &v210[-v259];
        uint64_t v255 = &v252[-v259];
        int v260 = &v249[8 * v246 - 16];
        int v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v306;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)int v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v303;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        uint64_t v210 = (char *)*v305;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v304];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v306;
      v306[13] = v252;
      v306[14] = &v252[v303];
      v306[15] = &v249[8 * v304];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v385)
      {
        if ((void)v382)
        {
          *((void *)&v382 + 1) = v382;
          operator delete((void *)v382);
        }
        if ((void)v379)
        {
          *((void *)&v379 + 1) = v379;
          operator delete((void *)v379);
        }
        if (v377[0])
        {
          v377[1] = v377[0];
          operator delete(v377[0]);
        }
      }
      if (v330)
      {
        uint64_t v331 = v330;
        operator delete(v330);
      }
      unsigned int v238 = (char *)v326;
      if (v326)
      {
        uint64_t v239 = v327;
        uint64_t v19 = v326;
        if (v327 != v326)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              int v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              int v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              unsigned int v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v326;
        }
        char v327 = v238;
        operator delete(v19);
      }
      --v308;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v306;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      uint64_t v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v296, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_A96BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    double v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            unint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_A97168(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_A97344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A97360(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v19 = 0x1FFFFFFFELL;
    int v5 = sub_A3B520(v4, &v19);
    int v20 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 10 * v2;
    char v16 = 0;
    uint64_t v17 = -1;
    int v18 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_A86F6C((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_A9A1C0(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_A99F74((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 2147483646)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_A99F74((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 2147483646)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v20);
  }
}

double sub_A974C4(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v36);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v33 = *(unsigned int **)(a1 + 216);
  if (v4 != v33)
  {
    int v5 = (void **)(a1 + 104);
    int v31 = a2 + 2;
    int v32 = a2 + 1;
    int v30 = ~a2;
    while (1)
    {
      unsigned int v35 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v35);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v34 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 30;
LABEL_17:
      sub_A86790(v5, 0);
      sub_A9A620(v5, v32 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v35, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) == v15)
      {
        sub_D2BFC(v5, 1uLL);
        int v15 = *(unsigned int **)(a1 + 104);
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
        if (*(unsigned int **)(a1 + 112) == v15)
        {
          sub_D2BFC(v5, 1uLL);
          int v18 = (unsigned int *)(v16 + (v17 << 6));
          unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
          if (v18 == (unsigned int *)v19) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
      }
      int v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_21;
      }
      do
      {
LABEL_20:
        unsigned int *v18 = v35;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        _OWORD v18[4] = -1;
        v18[7] = v20 + v11;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_21:
      uint64_t v21 = v35;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_23:
          if (*v24 > (unint64_t)v35)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + v30;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 2147483646;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_A99F74((void **)(a1 + 104), 0, v31 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v35);
      }
      uint64_t v4 = v34 + 1;
      if (v34 + 1 == v33) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v36) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_A977D0(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v249);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v231 = *(unsigned int **)(a1 + 216);
  if (v4 != v231)
  {
    int v5 = (void **)(a1 + 104);
    int v236 = a2 + 2;
    int v237 = a2 + 1;
    int v234 = ~a2;
    unint64_t v235 = (uint64_t *)(a1 + 232);
    uint64_t v230 = (void **)(a1 + 256);
    uint64_t v239 = (void **)(a1 + 104);
    while (1)
    {
      uint64_t v233 = v4;
      unsigned int v6 = *v4;
      BOOL v7 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v243, *(void *)(a1 + 24), *v7);
      uint64_t v8 = v244;
      uint64_t v9 = &v245;
      if (v248) {
        uint64_t v9 = v247;
      }
      if ((unint64_t)v244 < *v9) {
        break;
      }
LABEL_3:
      uint64_t v4 = v233 + 1;
      if (v233 + 1 == v231) {
        goto LABEL_304;
      }
    }
    unsigned int v238 = v6 + 1;
    unsigned int v240 = v6;
    while (1)
    {
      unint64_t v13 = __ROR8__(*v8, 32);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 56) - 1;
      unint64_t v16 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
      unint64_t v17 = v16 ^ (v16 >> 33);
      uint64_t v18 = *(void *)(v14 + 80);
      int v20 = *(_DWORD *)(v14 + 64);
      int v19 = *(_DWORD *)(v14 + 68);
      uint64_t v21 = v17 & v15;
      int v22 = (unsigned int *)(v18 + 12 * (v17 & v15));
      unsigned int v24 = *v22;
      unsigned int v23 = v22[1];
      if (v19 == v23 && v20 == v24) {
        goto LABEL_56;
      }
      if (*(void *)(v14 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v23, v24) != v13)
      {
        uint64_t v21 = (v21 + v44) & v15;
        unint64_t v45 = (unsigned int *)(v18 + 12 * v21);
        unsigned int v24 = *v45;
        unsigned int v23 = v45[1];
        ++v44;
        if (v19 == v23 && v20 == v24) {
          goto LABEL_56;
        }
      }
LABEL_53:
      if (v21 != -1)
      {
        uint64_t v47 = v18 + 12 * v21;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_109;
        }
        goto LABEL_90;
      }
      uint64_t v26 = -1;
      if (sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_31:
        uint64_t v30 = *(void *)(v14 + 56) - 1;
        uint64_t v31 = *(void *)(v14 + 80);
        int v33 = *(_DWORD *)(v14 + 64);
        int v32 = *(_DWORD *)(v14 + 68);
        uint64_t v34 = v30 & v17;
        unsigned int v35 = (unsigned int *)(v31 + 12 * (v30 & v17));
        unsigned int v37 = *v35;
        unsigned int v36 = v35[1];
        uint64_t v38 = *(void *)(v14 + 40);
        if (v32 == v36 && v33 == v37) {
          goto LABEL_80;
        }
        if (v38)
        {
          uint64_t v40 = -1;
          uint64_t v41 = 1;
          do
          {
            if (*(_DWORD *)(v14 + 36) == v36 && *(_DWORD *)(v14 + 32) == v37)
            {
              if (v40 == -1) {
                uint64_t v40 = v34;
              }
            }
            else if (__PAIR64__(v36, v37) == v13)
            {
              goto LABEL_74;
            }
            uint64_t v34 = (v34 + v41) & v30;
            unint64_t v42 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v42;
            unsigned int v36 = v42[1];
            ++v41;
          }
          while (v32 != v36 || v33 != v37);
          if (v40 == -1) {
LABEL_80:
          }
            uint64_t v40 = v34;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555) {
            goto LABEL_309;
          }
        }
        else
        {
          uint64_t v54 = 1;
          while (__PAIR64__(v36, v37) != v13)
          {
            uint64_t v34 = (v34 + v54) & v30;
            uint64_t v55 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v55;
            unsigned int v36 = v55[1];
            ++v54;
            if (v32 == v36 && v33 == v37)
            {
              uint64_t v38 = 0;
              goto LABEL_80;
            }
          }
LABEL_74:
          if (v34 != -1)
          {
            uint64_t v47 = v31 + 12 * v34;
            unsigned int v48 = *(_DWORD *)(v47 + 8);
            if (v48 != -1) {
              goto LABEL_109;
            }
            goto LABEL_90;
          }
          uint64_t v40 = -1;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555)
          {
LABEL_309:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v38
          && ((uint64_t v58 = (_DWORD *)(v31 + 12 * v40), *(_DWORD *)(v14 + 36) == v58[1])
            ? (BOOL v59 = *(_DWORD *)(v14 + 32) == *v58)
            : (BOOL v59 = 0),
              v59))
        {
          *(void *)(v14 + 40) = v38 - 1;
          uint64_t v53 = 3 * v40;
        }
        else
        {
          *(void *)(v14 + 48) = v57 + 1;
          uint64_t v53 = 3 * v40;
        }
        goto LABEL_89;
      }
LABEL_57:
      uint64_t v50 = *(void *)(v14 + 40);
      uint64_t v49 = *(void *)(v14 + 48);
      if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
        goto LABEL_309;
      }
      uint64_t v31 = *(void *)(v14 + 80);
      if (v50
        && ((unsigned int v51 = (_DWORD *)(v31 + 12 * v26), *(_DWORD *)(v14 + 36) == v51[1])
          ? (BOOL v52 = *(_DWORD *)(v14 + 32) == *v51)
          : (BOOL v52 = 0),
            v52))
      {
        *(void *)(v14 + 40) = v50 - 1;
      }
      else
      {
        *(void *)(v14 + 48) = v49 + 1;
      }
      uint64_t v53 = 3 * v26;
LABEL_89:
      uint64_t v60 = 4 * v53;
      uint64_t v61 = v31 + v60;
      *(void *)uint64_t v61 = v13;
      *(_DWORD *)(v61 + 8) = -1;
      uint64_t v47 = *(void *)(v14 + 80) + v60;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 != -1) {
        goto LABEL_109;
      }
LABEL_90:
      int v62 = *(_DWORD *)(v14 + 112);
      *(_DWORD *)(v14 + 112) = v62 + 1;
      *(_DWORD *)(v47 + 8) = v62;
      double v64 = *(char **)(v14 + 96);
      unint64_t v63 = *(void *)(v14 + 104);
      if ((unint64_t)v64 >= v63)
      {
        unsigned int v66 = (char **)(v14 + 88);
        uint64_t v67 = *(char **)(v14 + 88);
        uint64_t v68 = (v64 - v67) >> 3;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v70 = v63 - (void)v67;
        if (v70 >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v241 = v69;
        if (v69)
        {
          if (v69 >> 61) {
            goto LABEL_308;
          }
          int v71 = (char *)operator new(8 * v69);
          unsigned int v66 = (char **)(v14 + 88);
          int v72 = &v71[8 * v68];
          *(void *)int v72 = v13;
          uint64_t v65 = (uint64_t)(v72 + 8);
          if (v64 != v67) {
            goto LABEL_100;
          }
LABEL_139:
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v241];
          int v5 = (void **)(a1 + 104);
          if (!v64) {
            goto LABEL_108;
          }
        }
        else
        {
          int v71 = 0;
          int v72 = (char *)(8 * v68);
          *(void *)(8 * v68) = v13;
          uint64_t v65 = 8 * v68 + 8;
          if (v64 == v67) {
            goto LABEL_139;
          }
LABEL_100:
          unint64_t v73 = v64 - 8 - v67;
          if (v73 < 0x58) {
            goto LABEL_314;
          }
          if ((unint64_t)(v67 - v71) < 0x20) {
            goto LABEL_314;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v76 = &v64[-v75];
          v72 -= v75;
          unint64_t v77 = &v71[8 * v68 - 16];
          uint64_t v78 = (long long *)(v64 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)unint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          double v64 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_314:
            do
            {
              uint64_t v81 = *((void *)v64 - 1);
              v64 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v64 != v67);
          }
          double v64 = *v66;
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v241];
          int v5 = (void **)(a1 + 104);
          if (!v64) {
            goto LABEL_108;
          }
        }
        operator delete(v64);
        goto LABEL_108;
      }
      *(void *)double v64 = v13;
      uint64_t v65 = (uint64_t)(v64 + 8);
LABEL_108:
      *(void *)(v14 + 96) = v65;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
LABEL_109:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v242 = v48;
      if (v240 == v48) {
        goto LABEL_248;
      }
      BOOL v83 = *(unsigned int **)(a1 + 104);
      uint64_t v82 = *(unsigned int **)(a1 + 112);
      uint64_t v84 = (char *)v82 - (char *)v83;
      if (v82 == v83)
      {
        uint64_t v88 = v84 >> 3;
        unint64_t v89 = 1 - (v84 >> 3);
        uint64_t v90 = *(void *)(a1 + 120);
        if (v89 <= (v90 - (uint64_t)v82) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v89);
          unsigned int v97 = (char *)&v82[2 * v89];
          *(void *)(a1 + 112) = v97;
        }
        else
        {
          uint64_t v91 = v90 - (void)v83;
          uint64_t v92 = v91 >> 2;
          if ((unint64_t)(v91 >> 2) <= 1) {
            uint64_t v92 = 1;
          }
          BOOL v213 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v213) {
            unint64_t v93 = v92;
          }
          if (v93 >> 61) {
LABEL_308:
          }
            sub_188D718();
          uint64_t v94 = 8 * v93;
          unint64_t v95 = (char *)operator new(8 * v93);
          int v96 = &v95[8 * v88];
          bzero(v96, 8 * v89);
          *(void *)(a1 + 104) = v96;
          *(void *)(a1 + 112) = &v96[8 * v89];
          *(void *)(a1 + 120) = &v95[v94];
          if (v82)
          {
            operator delete(v82);
            unsigned int v97 = *(char **)(a1 + 112);
          }
          else
          {
            unsigned int v97 = &v96[8 * v89];
          }
        }
        int v5 = (void **)(a1 + 104);
        BOOL v83 = (unsigned int *)*v239;
        uint64_t v85 = *(void *)(a1 + 128);
        uint64_t v86 = *(unsigned int *)*v239;
        if (*v239 == v97)
        {
          unint64_t v87 = *(char **)(a1 + 120);
          if (v87 != v97)
          {
            *(void *)unsigned int v97 = 0;
            *(void *)(a1 + 112) = v97 + 8;
LABEL_137:
            BOOL v83 = *(unsigned int **)(a1 + 104);
            uint64_t v107 = *(void *)(a1 + 128);
            goto LABEL_144;
          }
          uint64_t v98 = 1;
          uint64_t v99 = v87 - (char *)v83;
          if ((unint64_t)(v99 >> 2) > 1) {
            uint64_t v98 = v99 >> 2;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100)
          {
            if (v100 >> 61) {
              goto LABEL_308;
            }
            unsigned int v101 = (char *)operator new(8 * v100);
            uint64_t v102 = v101;
            *(void *)unsigned int v101 = 0;
            uint64_t v103 = (uint64_t)(v101 + 8);
            if (v97 != (char *)v83)
            {
LABEL_131:
              unint64_t v104 = v97 - 8 - (char *)v83;
              if (v104 < 0x58 || (unint64_t)(v97 - v101) < 0x20)
              {
                int v105 = (unsigned int *)v97;
                int v5 = (void **)(a1 + 104);
                goto LABEL_134;
              }
              uint64_t v215 = (v104 >> 3) + 1;
              uint64_t v216 = 8 * (v215 & 0x3FFFFFFFFFFFFFFCLL);
              int v105 = (unsigned int *)&v97[-v216];
              v102 -= v216;
              long long v217 = v101 - 16;
              size_t v218 = v97 - 16;
              uint64_t v219 = v215 & 0x3FFFFFFFFFFFFFFCLL;
              int v5 = (void **)(a1 + 104);
              do
              {
                long long v220 = *(_OWORD *)v218;
                *((_OWORD *)v217 - 1) = *((_OWORD *)v218 - 1);
                *(_OWORD *)long long v217 = v220;
                v217 -= 32;
                v218 -= 32;
                v219 -= 4;
              }
              while (v219);
              if (v215 != (v215 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_134:
                  uint64_t v106 = *((void *)v105 - 1);
                  v105 -= 2;
                  *((void *)v102 - 1) = v106;
                  v102 -= 8;
                }
                while (v105 != v83);
              }
              unsigned int v97 = (char *)*v5;
              *(void *)(a1 + 104) = v102;
              *(void *)(a1 + 112) = v103;
              *(void *)(a1 + 120) = &v101[8 * v100];
              if (!v97) {
                goto LABEL_137;
              }
LABEL_136:
              operator delete(v97);
              goto LABEL_137;
            }
          }
          else
          {
            unsigned int v101 = 0;
            uint64_t v102 = 0;
            *(void *)&def_332C = 0;
            uint64_t v103 = 8;
            if (v97 != (char *)v83) {
              goto LABEL_131;
            }
          }
          int v5 = (void **)(a1 + 104);
          *(void *)(a1 + 104) = v102;
          *(void *)(a1 + 112) = v103;
          *(void *)(a1 + 120) = &v101[8 * v100];
          if (!v97) {
            goto LABEL_137;
          }
          goto LABEL_136;
        }
      }
      else
      {
        uint64_t v85 = *(void *)(a1 + 128);
        uint64_t v86 = *v83;
      }
      uint64_t v107 = v85;
LABEL_144:
      sub_A86AC4(v5, 0, (char *)(v85 + (v86 << 6)), (char *)(v107 + ((unint64_t)v83[1] << 6)));
      unint64_t v108 = v237 + *(_DWORD *)(a1 + 96) * v238;
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v110 = *(unsigned int **)(a1 + 112);
      if (v108 >= ((char *)v110 - (char *)v109) >> 3) {
        goto LABEL_195;
      }
      unsigned int v111 = v109[2 * v108];
      unsigned int v112 = v109[2 * v108 + 1];
      unsigned int v113 = v112 - v111;
      if (v112 == v111) {
        goto LABEL_195;
      }
      unsigned __int16 v114 = 0;
      unsigned int v115 = 0;
LABEL_147:
      while (2)
      {
        uint64_t v116 = *(unsigned int **)(a1 + 104);
        if (v108 >= (uint64_t)(*(void *)(a1 + 112) - (void)v116) >> 3
          || (unsigned int v117 = v116[2 * v108], v116[2 * v108 + 1] - v117 <= v115))
        {
          uint64_t v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v228, "key does not exist and cannot be added");
          goto LABEL_307;
        }
        unint64_t v118 = v117 + v115;
        uint64_t v119 = *(void *)(a1 + 128);
        if (v118 >= (*(void *)(a1 + 136) - v119) >> 6)
        {
          uint64_t v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v228, "index out of range");
LABEL_307:
        }
        size_t v120 = (long long *)(v119 + (v118 << 6));
        long long v121 = *v120;
        long long v122 = v120[1];
        long long v123 = v120[3];
        long long v252 = v120[2];
        long long v253 = v123;
        long long v250 = v121;
        long long v251 = v122;
        uint64_t v125 = *v116;
        uint64_t v124 = v116[1];
        if (v124 != v125)
        {
          uint64_t v126 = 0;
          int v129 = v253;
          uint64_t v130 = v125 << 6;
          uint64_t v131 = (unsigned __int8 *)(v119 + v130 + 48);
          uint64_t v132 = (v124 << 6) - v130;
          while (1)
          {
            int v133 = *((_DWORD *)v131 - 5);
            if (v133 != 0x7FFFFFFF)
            {
              if (v133 <= SHIDWORD(v251) && *((_DWORD *)v131 - 4) <= (int)v252)
              {
                unsigned int v134 = *((_DWORD *)v131 - 3);
                if (v134 <= DWORD1(v252)
                  && (v134 != DWORD1(v252)
                   || v133 != HIDWORD(v251)
                   || 10 * v133 - *((_DWORD *)v131 - 1) <= 10 * HIDWORD(v251) - HIDWORD(v252))
                  && (*v131 & ~v253) == 0)
                {
                  unint64_t v128 = v114 & 0xFF00 | (unint64_t)(v126 << 8);
                  unsigned __int16 v114 = v114 & 0xFF00 | ((_WORD)v126 << 8);
                  if (++v115 == v113) {
                    goto LABEL_173;
                  }
                  goto LABEL_147;
                }
              }
              if (SHIDWORD(v251) <= v133 && (int)v252 <= *((_DWORD *)v131 - 4))
              {
                unsigned int v135 = *((_DWORD *)v131 - 3);
                if (DWORD1(v252) <= v135
                  && (DWORD1(v252) != v135
                   || HIDWORD(v251) != v133
                   || 10 * HIDWORD(v251) - HIDWORD(v252) <= 10 * v133 - *((_DWORD *)v131 - 1))
                  && (v129 & ~*v131) == 0)
                {
                  *((_DWORD *)v131 - 5) = 0x7FFFFFFF;
                  uint64_t v126 = 1;
                }
              }
            }
            v131 += 64;
            v132 -= 64;
            if (!v132) {
              goto LABEL_152;
            }
          }
        }
        uint64_t v126 = 0;
LABEL_152:
        unsigned int v127 = sub_A86F6C((char **)v5, 0, &v250);
        *(void *)(v127 + 52) = -1;
        *((_DWORD *)v127 + 15) = 0x7FFFFFFF;
        unint64_t v128 = v114 & 0xFF00 | (unint64_t)(v126 << 8);
        unsigned __int16 v114 = v128 | 1;
        if (++v115 != v113) {
          continue;
        }
        break;
      }
LABEL_173:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v110 = *(unsigned int **)(a1 + 112);
      if (v128)
      {
        if (v110 != v109)
        {
          uint64_t v136 = *(void *)(a1 + 128);
          uint64_t v137 = *v109;
          goto LABEL_176;
        }
        sub_D2BFC(v5, 1uLL);
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v136 = *(void *)(a1 + 128);
        uint64_t v137 = *v109;
        if (*(unsigned int **)(a1 + 112) == v109)
        {
          sub_D2BFC(v239, 1uLL);
          uint64_t v109 = *(unsigned int **)(a1 + 104);
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = *(void *)(a1 + 128) + ((unint64_t)v109[1] << 6);
          if (v138 == v139)
          {
LABEL_189:
            int v140 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v109) {
              goto LABEL_190;
            }
            goto LABEL_194;
          }
        }
        else
        {
LABEL_176:
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = v136 + ((unint64_t)v109[1] << 6);
          if (v138 == v139) {
            goto LABEL_189;
          }
        }
        int v140 = (void **)(a1 + 104);
        while (*(_DWORD *)(v138 + 28) != 0x7FFFFFFF)
        {
          v138 += 64;
          if (v138 == v139)
          {
            unint64_t v138 = v139;
            if (*(unsigned int **)(a1 + 112) != v109) {
              goto LABEL_194;
            }
            goto LABEL_190;
          }
        }
        if (v138 == v139 || (unint64_t v141 = v138 + 64, v138 + 64 == v139))
        {
          if (*(unsigned int **)(a1 + 112) == v109) {
            goto LABEL_190;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v141 + 28) != 0x7FFFFFFF)
            {
              long long v146 = *(_OWORD *)v141;
              long long v147 = *(_OWORD *)(v141 + 16);
              long long v148 = *(_OWORD *)(v141 + 48);
              *(_OWORD *)(v138 + 32) = *(_OWORD *)(v141 + 32);
              *(_OWORD *)(v138 + 48) = v148;
              *(_OWORD *)unint64_t v138 = v146;
              *(_OWORD *)(v138 + 16) = v147;
              v138 += 64;
            }
            v141 += 64;
          }
          while (v141 != v139);
          uint64_t v109 = (unsigned int *)*v239;
          if (*(void **)(a1 + 112) != *v239) {
            goto LABEL_194;
          }
LABEL_190:
          sub_D2BFC(v140, 1uLL);
          uint64_t v109 = (unsigned int *)*v140;
        }
LABEL_194:
        sub_A86AC4(v140, 0, (char *)v138, (char *)(*(void *)(a1 + 128) + ((unint64_t)v109[1] << 6)));
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v110 = *(unsigned int **)(a1 + 112);
      }
LABEL_195:
      uint64_t v142 = (char *)v110 - (char *)v109;
      if (v110 != v109)
      {
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *v109;
LABEL_212:
        uint64_t v159 = v143;
        goto LABEL_228;
      }
      uint64_t v149 = v142 >> 3;
      unint64_t v150 = 1 - (v142 >> 3);
      uint64_t v151 = *(void *)(a1 + 120);
      if (v150 <= (v151 - (uint64_t)v110) >> 3)
      {
        bzero(v109, 8 * v150);
        int v158 = &v109[2 * v150];
        *(void *)(a1 + 112) = v158;
      }
      else
      {
        uint64_t v152 = v151 - (void)v109;
        uint64_t v153 = v152 >> 2;
        if ((unint64_t)(v152 >> 2) <= 1) {
          uint64_t v153 = 1;
        }
        BOOL v213 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v213) {
          unint64_t v154 = v153;
        }
        if (v154 >> 61) {
          goto LABEL_308;
        }
        uint64_t v155 = 8 * v154;
        unsigned int v156 = (char *)operator new(8 * v154);
        unsigned int v157 = &v156[8 * v149];
        bzero(v157, 8 * v150);
        int v158 = (unsigned int *)&v157[8 * v150];
        *(void *)(a1 + 104) = v157;
        *(void *)(a1 + 112) = v158;
        *(void *)(a1 + 120) = &v156[v155];
        if (v109)
        {
          operator delete(v109);
          int v158 = *(unsigned int **)(a1 + 112);
        }
      }
      uint64_t v109 = (unsigned int *)*v239;
      uint64_t v143 = *(void *)(a1 + 128);
      uint64_t v144 = *(unsigned int *)*v239;
      if (*v239 != v158) {
        goto LABEL_212;
      }
      uint64_t v145 = *(unsigned int **)(a1 + 120);
      if (v145 != v158)
      {
        *(void *)int v158 = 0;
        *(void *)(a1 + 112) = v158 + 2;
        goto LABEL_227;
      }
      uint64_t v160 = 1;
      uint64_t v161 = (char *)v145 - (char *)v109;
      if ((unint64_t)(v161 >> 2) > 1) {
        uint64_t v160 = v161 >> 2;
      }
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v162 = v160;
      }
      if (v162)
      {
        if (v162 >> 61) {
          goto LABEL_308;
        }
        int v163 = (char *)operator new(8 * v162);
        uint64_t v164 = v163;
        *(void *)int v163 = 0;
        uint64_t v165 = (uint64_t)(v163 + 8);
        if (v158 == v109)
        {
LABEL_289:
          *(void *)(a1 + 104) = v164;
          *(void *)(a1 + 112) = v165;
          *(void *)(a1 + 120) = &v163[8 * v162];
          if (!v158) {
            goto LABEL_227;
          }
LABEL_226:
          operator delete(v158);
          goto LABEL_227;
        }
      }
      else
      {
        int v163 = 0;
        uint64_t v164 = 0;
        *(void *)&def_332C = 0;
        uint64_t v165 = 8;
        if (v158 == v109) {
          goto LABEL_289;
        }
      }
      unint64_t v166 = (char *)(v158 - 2) - (char *)v109;
      if (v166 < 0x58 || (unint64_t)((char *)v158 - v163) < 0x20)
      {
        uint64_t v167 = v158;
        int v168 = (unsigned int **)(a1 + 104);
        do
        {
LABEL_224:
          uint64_t v169 = *((void *)v167 - 1);
          v167 -= 2;
          *((void *)v164 - 1) = v169;
          v164 -= 8;
        }
        while (v167 != v109);
        goto LABEL_225;
      }
      uint64_t v221 = (v166 >> 3) + 1;
      uint64_t v222 = 8 * (v221 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v167 = &v158[v222 / 0xFFFFFFFFFFFFFFFCLL];
      v164 -= v222;
      int v223 = v163 - 16;
      unsigned int v224 = v158 - 4;
      uint64_t v225 = v221 & 0x3FFFFFFFFFFFFFFCLL;
      int v168 = (unsigned int **)(a1 + 104);
      do
      {
        long long v226 = *(_OWORD *)v224;
        *((_OWORD *)v223 - 1) = *((_OWORD *)v224 - 1);
        *(_OWORD *)int v223 = v226;
        v223 -= 32;
        v224 -= 8;
        v225 -= 4;
      }
      while (v225);
      if (v221 != (v221 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_224;
      }
LABEL_225:
      int v158 = *v168;
      *(void *)(a1 + 104) = v164;
      *(void *)(a1 + 112) = v165;
      *(void *)(a1 + 120) = &v163[8 * v162];
      if (v158) {
        goto LABEL_226;
      }
LABEL_227:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v159 = *(void *)(a1 + 128);
LABEL_228:
      uint64_t v170 = v143 + (v144 << 6);
      uint64_t v171 = v159 + ((unint64_t)v109[1] << 6);
      if (v170 != v171)
      {
        uint64_t v172 = v244;
        do
        {
          *(_DWORD *)uint64_t v170 = v240;
          *(_DWORD *)(v170 + 16) = -1;
          int32x2_t v173 = *(int32x2_t *)(v170 + 28);
          *(_DWORD *)(v170 + 12) = v173.i32[0];
          int v174 = *((_DWORD *)v172 + 2);
          int v175 = v174 / 10;
          int v176 = v174 % 10;
          if (v174 < 0) {
            char v177 = -5;
          }
          else {
            char v177 = 5;
          }
          *(int32x2_t *)(v170 + 28) = vadd_s32(vdup_n_s32(v175+ (((103 * (char)(v177 + v176)) >> 15) & 1)+ ((103 * (char)(v177 + v176)) >> 10)), v173);
          v170 += 64;
        }
        while (v170 != v171);
      }
      int v178 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v179 = v178 + v178 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v180 = v242;
        unsigned int v181 = *(unint64_t **)(a1 + 48);
        if (!v181) {
          goto LABEL_243;
        }
      }
      else
      {
        unsigned int v179 = -1;
        unint64_t v180 = v242;
        unsigned int v181 = *(unint64_t **)(a1 + 48);
        if (!v181)
        {
LABEL_243:
          int v185 = 2147483646;
          goto LABEL_244;
        }
      }
      if (*v181 > v180)
      {
        unsigned int v182 = 0;
        unsigned int v183 = *(_DWORD *)(a1 + 100) + v234;
        unsigned int v184 = v183;
        while (v182 <= v183)
        {
          int v185 = *(_DWORD *)sub_A3F53C(v181 + 2, v181[1] * v180 + v184);
          v182 += 2;
          v184 -= 2;
          if (v185 != 0x7FFFFFFF) {
            goto LABEL_244;
          }
        }
      }
      int v185 = 0x7FFFFFFF;
LABEL_244:
      unint64_t v186 = v242 + 1;
      unsigned int v187 = v236 + v178 * v186;
      unsigned int v188 = v178 * v186 + 1;
      int v5 = (void **)(a1 + 104);
      if (!sub_A99F74(v239, 0, v187, v188, v179, v185)) {
        goto LABEL_248;
      }
      if (*(void *)(a1 + 240) <= v180) {
        sub_A3E96C((uint64_t)v235, v186, 0);
      }
      uint64_t v189 = *v235;
      unint64_t v190 = v180 >> 6;
      uint64_t v191 = 1 << v180;
      if ((*(void *)(*v235 + 8 * (v180 >> 6)) & (1 << v180)) != 0)
      {
LABEL_248:
        unint64_t v11 = (unint64_t)v245;
        uint64_t v8 = (void *)((char *)v244 + 12);
        unint64_t v244 = v8;
        if (v8 != v245) {
          goto LABEL_249;
        }
        goto LABEL_270;
      }
      int64_t v193 = *(char **)(a1 + 264);
      unint64_t v192 = *(void *)(a1 + 272);
      if ((unint64_t)v193 < v192)
      {
        *(_DWORD *)int64_t v193 = v242;
        uint64_t v194 = (uint64_t)(v193 + 4);
        goto LABEL_269;
      }
      uint64_t v195 = (char *)*v230;
      uint64_t v196 = v193 - (unsigned char *)*v230;
      uint64_t v197 = v196 >> 2;
      unint64_t v198 = (v196 >> 2) + 1;
      if (v198 >> 62) {
        sub_2E00();
      }
      uint64_t v199 = v192 - (void)v195;
      if (v199 >> 1 > v198) {
        unint64_t v198 = v199 >> 1;
      }
      if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v232 = v198;
      if (v198)
      {
        if (v198 >> 62) {
          goto LABEL_308;
        }
        int v200 = operator new(4 * v198);
        char v201 = (unsigned int *)&v200[4 * v197];
        *char v201 = v242;
        uint64_t v194 = (uint64_t)(v201 + 1);
        if (v193 == v195)
        {
LABEL_292:
          *(void *)(a1 + 256) = v201;
          *(void *)(a1 + 264) = v194;
          *(void *)(a1 + 272) = &v200[4 * v232];
          if (v195) {
            goto LABEL_268;
          }
          goto LABEL_269;
        }
      }
      else
      {
        int v200 = 0;
        char v201 = (unsigned int *)(4 * v197);
        *(_DWORD *)(4 * v197) = v242;
        uint64_t v194 = 4 * v197 + 4;
        if (v193 == v195) {
          goto LABEL_292;
        }
      }
      unint64_t v202 = v193 - 4 - v195;
      if (v202 < 0x2C) {
        goto LABEL_315;
      }
      if ((unint64_t)(v193 - &v200[v196]) < 0x20) {
        goto LABEL_315;
      }
      uint64_t v203 = (v202 >> 2) + 1;
      uint64_t v204 = 4 * (v203 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v205 = &v193[-v204];
      char v201 = (unsigned int *)((char *)v201 - v204);
      uint64_t v206 = &v200[4 * v197 - 16];
      unint64_t v207 = v193 - 16;
      uint64_t v208 = v203 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v209 = *(_OWORD *)v207;
        *(v206 - 1) = *((_OWORD *)v207 - 1);
        _OWORD *v206 = v209;
        v206 -= 2;
        v207 -= 32;
        v208 -= 8;
      }
      while (v208);
      int64_t v193 = v205;
      if (v203 != (v203 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_315:
        do
        {
          unsigned int v210 = *((_DWORD *)v193 - 1);
          v193 -= 4;
          *--char v201 = v210;
        }
        while (v193 != v195);
      }
      *(void *)(a1 + 256) = v201;
      *(void *)(a1 + 264) = v194;
      *(void *)(a1 + 272) = &v200[4 * v232];
      if (v195)
      {
LABEL_268:
        operator delete(v195);
        uint64_t v189 = *v235;
      }
LABEL_269:
      *(void *)(a1 + 264) = v194;
      *(void *)(v189 + 8 * v190) |= v191;
      int v5 = (void **)(a1 + 104);
      unint64_t v11 = (unint64_t)v245;
      uint64_t v8 = (void *)((char *)v244 + 12);
      unint64_t v244 = v8;
      if (v8 != v245)
      {
LABEL_249:
        int v10 = v248;
        unint64_t v12 = v247[0];
        if (*(unsigned char *)(v243 + 16)) {
          goto LABEL_271;
        }
        goto LABEL_10;
      }
LABEL_270:
      uint64_t v8 = v246;
      unint64_t v12 = v247[0];
      unint64_t v244 = v246;
      int v10 = 1;
      unsigned __int8 v248 = 1;
      if (*(unsigned char *)(v243 + 16))
      {
LABEL_271:
        if (v10) {
          unint64_t v211 = v12;
        }
        else {
          unint64_t v211 = v11;
        }
        if ((unint64_t)v8 < v211)
        {
          while (1)
          {
            unint64_t v212 = __ROR8__(*v8, 32);
            BOOL v213 = HIDWORD(v212) != 1 || (v212 + 3) >= 2;
            if (!v213) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v243 + 4120)))
            {
              LOBYTE(v10) = v248;
              uint64_t v8 = v244;
              unint64_t v11 = (unint64_t)v245;
              break;
            }
            unint64_t v11 = (unint64_t)v245;
            uint64_t v8 = (void *)((char *)v244 + 12);
            unint64_t v244 = v8;
            if (v8 == v245)
            {
              uint64_t v8 = v246;
              unint64_t v244 = v246;
              LOBYTE(v10) = 1;
              unsigned __int8 v248 = 1;
              if ((unint64_t)v246 >= v247[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v10) = v248;
              uint64_t v214 = &v245;
              if (v248) {
                uint64_t v214 = v247;
              }
              if ((unint64_t)v8 >= *v214) {
                break;
              }
            }
          }
          unint64_t v12 = v247[0];
        }
      }
LABEL_10:
      if ((_BYTE)v10) {
        unint64_t v11 = v12;
      }
      if ((unint64_t)v8 >= v11) {
        goto LABEL_3;
      }
    }
    uint64_t v26 = -1;
    uint64_t v27 = 1;
    do
    {
      if (*(_DWORD *)(v14 + 36) == v23 && *(_DWORD *)(v14 + 32) == v24)
      {
        if (v26 == -1) {
          uint64_t v26 = v21;
        }
      }
      else if (__PAIR64__(v23, v24) == v13)
      {
        goto LABEL_53;
      }
      uint64_t v21 = (v21 + v27) & v15;
      int v28 = (unsigned int *)(v18 + 12 * v21);
      unsigned int v24 = *v28;
      unsigned int v23 = v28[1];
      ++v27;
    }
    while (v19 != v23 || v20 != v24);
    if (v26 != -1)
    {
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v26 = v21;
    if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_304:
  double result = sub_72688((uint64_t)v249) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_A98B38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A98B4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A98B60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A98B74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A98B88(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unsigned int v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  unsigned int v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    unint64_t v211 = v8;
    uint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    int v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          uint64_t v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      unint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unsigned int v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          int v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          int v72 = &v71[8 * v67];
          *(void *)int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v76 = &v63[-v75];
          v72 -= v75;
          unint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)unint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          unint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          unint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          int v71 = 0;
          int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)unint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 4);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      unint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 4);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          int v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unsigned int v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unsigned int v101 = v200;
              goto LABEL_135;
            }
            unsigned int v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            int v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] > v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        int v168 = v213 + 2;
        BOOL v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          int v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          BOOL v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      unint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                int v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            int v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              int v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              BOOL v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                int v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                BOOL v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        unsigned int v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)unsigned int v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          unint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] <= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        unint64_t v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int32x2_t v173 = &v135[4 * v130 - 16];
          int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          unsigned int v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] <= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            unint64_t v202 = operator new(4 * v118);
            unint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              int v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              unint64_t v141 = &v202[4 * v112 - 16];
              uint64_t v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          unint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            int v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_A99AC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A99AD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A99AE8(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v3 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 280);
  uint64_t v20 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = sub_BD6170((void *)(a1 + 360));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 56) + *(void *)(*(void *)(a1 + 32) + 56))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    uint64_t v10 = v10 + *(void *)(v11 + 32) - *(void *)(v11 + 16);
  }
  unint64_t v32 = v23
      + v26
      - (v27
       + v25)
      + v24
      + v2
      + v20
      - v22
      + v5
      + v3
      + v4
      - (v21
       + v19)
      + v7
      + v8
      - v6
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v32 > *(void *)a1;
  if (v32 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v32);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_A99DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_A99E40(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_A9A620(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_A99F74(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A9A3AC(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_A9A3AC(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) <= a6)
      {
        __int16 v22 = sub_A9A1C0((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_A9A1C0((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      uint64_t v27 = (long long *)sub_A9A3AC(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) <= a6)
      {
        if (sub_A9A484(a1, (uint64_t)&v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_A9A1C0((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_A9A1C0((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_A9A1C0(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    int v9 = (unsigned int *)(*(void *)a1 + 8 * a3);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v11 != v10)
    {
      unsigned __int8 v12 = 0;
      int v16 = *(unsigned __int8 *)(a2 + 48);
      uint64_t v17 = v10 << 6;
      int v18 = (unsigned __int8 *)((v10 << 6) + *(void *)(a1 + 24) + 48);
      uint64_t v19 = (v11 << 6) - v17;
      while (1)
      {
        int v20 = *((_DWORD *)v18 - 5);
        if (v20 != 0x7FFFFFFF)
        {
          int v21 = *(_DWORD *)(a2 + 28);
          if (v20 <= v21 && *((_DWORD *)v18 - 4) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v22 = *(_DWORD *)(a2 + 36);
            unsigned int v23 = *((_DWORD *)v18 - 3);
            if (v23 <= v22
              && (v23 != v22 || v20 != v21 || 10 * v20 - *((_DWORD *)v18 - 1) <= 10 * v21 - *(_DWORD *)(a2 + 44))
              && (*v18 & ~*(unsigned __int8 *)(a2 + 48)) == 0)
            {
              return (unint64_t)v12 << 8;
            }
          }
          if (v21 <= v20 && *(_DWORD *)(a2 + 32) <= *((_DWORD *)v18 - 4))
          {
            unsigned int v24 = *((_DWORD *)v18 - 3);
            unsigned int v25 = *(_DWORD *)(a2 + 36);
            if (v25 <= v24
              && (v25 != v24 || v21 != v20 || 10 * v21 - *(_DWORD *)(a2 + 44) <= 10 * v20 - *((_DWORD *)v18 - 1))
              && (v16 & ~*v18) == 0)
            {
              *((_DWORD *)v18 - 5) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 64;
        v19 -= 64;
        if (!v19) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  __int16 v13 = sub_A86F6C((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

uint64_t sub_A9A3AC(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3)
    || (uint64_t v4 = (int *)(*a1 + 8 * a2), v3 = *v4, v4[1] - *v4 <= a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_7;
  }
  unint64_t v5 = v3 + a3;
  uint64_t v6 = a1[3];
  if (v5 >= (a1[4] - v6) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_7:
  }
  return v6 + (v5 << 6);
}

void sub_A9A45C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A9A470(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A9A484(void **a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      int v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC(a1, v14 - v13);
      unint64_t v15 = &v11[64 * v12];
      unint64_t v16 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
      if (v15 == (char *)v16) {
        return 0;
      }
      goto LABEL_13;
    }
    if (v14 < v13) {
      a1[1] = &v7[8 * v14];
    }
  }
  unint64_t v15 = &v11[64 * v12];
  unint64_t v16 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
  if (v15 == (char *)v16) {
    return 0;
  }
LABEL_13:
  int v17 = *(_DWORD *)(a2 + 28);
  unsigned int v18 = *(_DWORD *)(a2 + 36);
  while (1)
  {
    int v19 = *((_DWORD *)v15 + 7);
    if (v19 != 0x7FFFFFFF && v19 <= v17 && *((_DWORD *)v15 + 8) <= *(_DWORD *)(a2 + 32))
    {
      unsigned int v21 = *((_DWORD *)v15 + 9);
      if (v21 <= v18
        && (v21 != v18 || v19 != v17 || 10 * v19 - *((_DWORD *)v15 + 11) <= 10 * v17 - *(_DWORD *)(a2 + 44))
        && (v15[48] & ~*(unsigned __int8 *)(a2 + 48)) == 0)
      {
        break;
      }
    }
    v15 += 64;
    if (v15 == (char *)v16) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_A9A620(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_A9A3AC(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_A9A1C0((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

uint64_t sub_A9A704(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v284 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v240 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v284);
  unint64_t v252 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v282, *(void *)(v4 + 24), v5);
  __int16 v7 = v282;
  if ((unint64_t)v282 < v283)
  {
    uint64_t v8 = (void **)(v4 + 104);
    uint64_t v250 = v4 + 360;
    long long v251 = (void **)(v4 + 104);
    int v239 = a2 + 2;
    int v237 = ~a2;
    unsigned int v238 = (uint64_t *)(v4 + 184);
    int v241 = a2 + 1;
    unint64_t v253 = HIDWORD(v5);
    uint64_t v242 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v243 = *(unsigned int *)v7;
      sub_A86790(v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v270, *(void *)(v4 + 24), v252, v240, 0, 1);
      unint64_t v9 = v274;
      BOOL v10 = (unint64_t)v274 < v273 || (unint64_t)v274 >= v275;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v282 + 4;
      uint64_t v282 = v7;
      if ((unint64_t)v7 >= v283) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555) {
            goto LABEL_328;
          }
        }
        else
        {
          uint64_t v65 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v65) & v28;
            unsigned int v66 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v66;
            unsigned int v34 = v66[1];
            ++v65;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555)
          {
LABEL_328:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((uint64_t v69 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v69[1])
            ? (BOOL v70 = *(_DWORD *)(v12 + 32) == *v69)
            : (BOOL v70 = 0),
              v70))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v64 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v68 + 1;
          uint64_t v64 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v61 = *(void *)(v12 + 40);
      uint64_t v60 = *(void *)(v12 + 48);
      if ((unint64_t)(v60 - v61) >= 0x1555555555555555) {
        goto LABEL_328;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v61
        && ((unint64_t v62 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v62[1])
          ? (BOOL v63 = *(_DWORD *)(v12 + 32) == *v62)
          : (BOOL v63 = 0),
            v63))
      {
        *(void *)(v12 + 40) = v61 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v60 + 1;
      }
      uint64_t v64 = 3 * v24;
LABEL_95:
      uint64_t v71 = 4 * v64;
      uint64_t v72 = v29 + v71;
      *(void *)uint64_t v72 = v11;
      *(_DWORD *)(v72 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v71;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v269 = v46;
        uint64_t result = sub_BD5C18(v250, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v73 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v73 + 1;
      *(_DWORD *)(v45 + 8) = v73;
      uint64_t v75 = *(unint64_t **)(v12 + 96);
      unint64_t v74 = *(void *)(v12 + 104);
      if ((unint64_t)v75 < v74)
      {
        *uint64_t v75 = v11;
        uint64_t v76 = (uint64_t)(v75 + 1);
        goto LABEL_119;
      }
      unint64_t v77 = *(char **)(v12 + 88);
      uint64_t v78 = ((char *)v75 - v77) >> 3;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v80 = v74 - (void)v77;
      if (v80 >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        if (v81 >> 61) {
          goto LABEL_330;
        }
        unsigned int v82 = (char *)operator new(8 * v81);
        unint64_t v83 = (unint64_t *)&v82[8 * v78];
        unint64_t *v83 = v11;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v75 != (unint64_t *)v77)
        {
LABEL_107:
          unint64_t v84 = (char *)(v75 - 1) - v77;
          if (v84 < 0x58)
          {
            uint64_t v4 = v242;
            goto LABEL_116;
          }
          uint64_t v4 = v242;
          if ((unint64_t)(v77 - v82) < 0x20) {
            goto LABEL_335;
          }
          uint64_t v85 = (v84 >> 3) + 1;
          uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v87 = &v75[v86 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v83 = (unint64_t *)((char *)v83 - v86);
          uint64_t v88 = &v82[8 * v78 - 16];
          unint64_t v89 = v75 - 2;
          uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v91 = *(_OWORD *)v89;
            *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
            *(_OWORD *)uint64_t v88 = v91;
            v88 -= 32;
            v89 -= 4;
            v90 -= 4;
          }
          while (v90);
          uint64_t v75 = v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_335:
            do
            {
LABEL_116:
              unint64_t v92 = *--v75;
              *--unint64_t v83 = v92;
            }
            while (v75 != (unint64_t *)v77);
          }
          uint64_t v75 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v83;
          *(void *)(v12 + 96) = v76;
          *(void *)(v12 + 104) = &v82[8 * v81];
          if (!v75) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v75);
          goto LABEL_119;
        }
      }
      else
      {
        unsigned int v82 = 0;
        unint64_t v83 = (unint64_t *)(8 * v78);
        *(void *)(8 * v78) = v11;
        uint64_t v76 = 8 * v78 + 8;
        if (v75 != (unint64_t *)v77) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v242;
      *(void *)(v12 + 88) = v83;
      *(void *)(v12 + 96) = v76;
      *(void *)(v12 + 104) = &v82[8 * v81];
      if (v75) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v76;
      uint64_t v8 = v251;
      unsigned int v269 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v250, v269, v11);
      if (result)
      {
LABEL_51:
        unsigned int v47 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v47) {
          goto LABEL_179;
        }
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        if (v49 == v48) {
          goto LABEL_179;
        }
        int v50 = v279;
        uint64_t v51 = v277;
        uint64_t v52 = v272;
        unint64_t v53 = ((unint64_t)v274 - v273) >> 4;
        uint64_t v54 = v48 << 6;
        uint64_t v55 = (int *)(*(void *)(v4 + 128) + (v48 << 6) + 60);
        uint64_t v56 = (v49 << 6) - v54;
        do
        {
          unsigned int v59 = *(v55 - 2);
          if (v50)
          {
            unsigned int v280 = *(v55 - 1);
            int v57 = *v55;
            int v281 = *v55;
          }
          else
          {
            int v57 = *(_DWORD *)(v51 + 12 * v59);
          }
          BOOL v58 = (unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - *v52 + 6));
          *(v55 - 8) = *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(v51 + 12 * v59 + 4) + v53) + 1]
                                       + *v58)
                     + v57;
          v55 += 16;
          v56 -= 64;
        }
        while (v56);
        uint64_t v278 = (int *)(v51 + 12 * v59);
        sub_A9BE2C((char *)v8, 0);
        if ((*((unsigned char *)v274 + 15) & 1) != 0
          && (!v276
           || (*(_DWORD *)(v276 + 4 * (((unint64_t)v274 - v273) >> 4)) & v243) == 0))
        {
          int v97 = *(_DWORD *)(v4 + 96);
          if (*(unsigned char *)(v4 + 20))
          {
            unsigned int v98 = v97 + v97 * *(_DWORD *)(v4 + 352);
            unint64_t v99 = v269;
            uint64_t v100 = *(unint64_t **)(v4 + 48);
            if (v100) {
              goto LABEL_131;
            }
LABEL_138:
            int v104 = 2147483646;
          }
          else
          {
            unsigned int v98 = -1;
            unint64_t v99 = v269;
            uint64_t v100 = *(unint64_t **)(v4 + 48);
            if (!v100) {
              goto LABEL_138;
            }
LABEL_131:
            if (*v100 > v99)
            {
              unsigned int v101 = 0;
              unsigned int v102 = *(_DWORD *)(v242 + 100) + v237;
              unsigned int v103 = v102;
              while (v101 <= v102)
              {
                int v104 = *(_DWORD *)sub_A3F53C(v100 + 2, v100[1] * v99 + v103);
                v101 += 2;
                v103 -= 2;
                if (v104 != 0x7FFFFFFF) {
                  goto LABEL_139;
                }
              }
            }
            int v104 = 0x7FFFFFFF;
          }
LABEL_139:
          uint64_t v8 = v251;
          uint64_t v4 = v242;
          if (sub_A9C0EC(v251, 0, v239 + v97 + v97 * v99, v97 + v97 * v99, v98, v104)) {
            sub_A3EF14(v238, &v269);
          }
        }
        int v105 = *(unsigned int **)(v4 + 104);
        uint64_t v106 = *(unsigned int **)(v4 + 112);
        uint64_t v107 = (char *)v106 - (char *)v105;
        if (v106 != v105)
        {
          uint64_t v108 = *(void *)(v4 + 128);
          uint64_t v109 = *v105;
          goto LABEL_155;
        }
        uint64_t v111 = v107 >> 3;
        unint64_t v112 = 1 - (v107 >> 3);
        uint64_t v113 = *(void *)(v4 + 120);
        if (v112 <= (v113 - (uint64_t)v106) >> 3)
        {
          bzero(*(void **)(v4 + 112), 8 * v112);
          size_t v120 = (char *)&v106[2 * v112];
          *(void *)(v4 + 112) = v120;
          int v105 = (unsigned int *)*v8;
          uint64_t v108 = *(void *)(v4 + 128);
          uint64_t v109 = *(unsigned int *)*v8;
          if (*v8 != v120) {
            goto LABEL_155;
          }
          goto LABEL_143;
        }
        uint64_t v114 = v113 - (void)v105;
        uint64_t v115 = v114 >> 2;
        if ((unint64_t)(v114 >> 2) <= 1) {
          uint64_t v115 = 1;
        }
        BOOL v10 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v10) {
          unint64_t v116 = v115;
        }
        if (v116 >> 61) {
LABEL_330:
        }
          sub_188D718();
        uint64_t v117 = 8 * v116;
        unint64_t v118 = (char *)operator new(8 * v116);
        unsigned int v119 = &v118[8 * v111];
        bzero(v119, 8 * v112);
        *(void *)(v4 + 104) = v119;
        *(void *)(v4 + 112) = &v119[8 * v112];
        *(void *)(v4 + 120) = &v118[v117];
        if (!v106)
        {
          size_t v120 = &v119[8 * v112];
          uint64_t v8 = v251;
          int v105 = (unsigned int *)*v251;
          uint64_t v108 = *(void *)(v4 + 128);
          uint64_t v109 = *(unsigned int *)*v251;
          if (*v251 == v120) {
            goto LABEL_143;
          }
LABEL_155:
          unint64_t v121 = (_DWORD *)(v108 + (v109 << 6));
          unint64_t v122 = v108 + ((unint64_t)v105[1] << 6);
          if (v121 != (_DWORD *)v122) {
            goto LABEL_172;
          }
          goto LABEL_178;
        }
        operator delete(v106);
        size_t v120 = *(char **)(v4 + 112);
        uint64_t v8 = v251;
        int v105 = (unsigned int *)*v251;
        uint64_t v108 = *(void *)(v4 + 128);
        uint64_t v109 = *(unsigned int *)*v251;
        if (*v251 != v120) {
          goto LABEL_155;
        }
LABEL_143:
        int v110 = *(char **)(v4 + 120);
        if (v110 != v120)
        {
          *(void *)size_t v120 = 0;
          *(void *)(v4 + 112) = v120 + 8;
          goto LABEL_171;
        }
        uint64_t v123 = 1;
        uint64_t v124 = v110 - (char *)v105;
        if ((unint64_t)(v124 >> 2) > 1) {
          uint64_t v123 = v124 >> 2;
        }
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v125 = v123;
        }
        if (v125)
        {
          if (v125 >> 61) {
            goto LABEL_330;
          }
          unint64_t v126 = (char *)operator new(8 * v125);
          unsigned int v127 = v126;
          *(void *)unint64_t v126 = 0;
          uint64_t v128 = (uint64_t)(v126 + 8);
          if (v120 != (char *)v105)
          {
LABEL_165:
            unint64_t v129 = v120 - 8 - (char *)v105;
            if (v129 < 0x58 || (unint64_t)(v120 - v126) < 0x20)
            {
              uint64_t v130 = (unsigned int *)v120;
              uint64_t v4 = v242;
              goto LABEL_168;
            }
            uint64_t v225 = (v129 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v130 = (unsigned int *)&v120[-v226];
            v127 -= v226;
            int v227 = v126 - 16;
            uint64_t v228 = v120 - 16;
            uint64_t v229 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v4 = v242;
            do
            {
              long long v230 = *(_OWORD *)v228;
              *((_OWORD *)v227 - 1) = *((_OWORD *)v228 - 1);
              *(_OWORD *)int v227 = v230;
              v227 -= 32;
              v228 -= 32;
              v229 -= 4;
            }
            while (v229);
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_168:
                uint64_t v131 = *((void *)v130 - 1);
                v130 -= 2;
                *((void *)v127 - 1) = v131;
                v127 -= 8;
              }
              while (v130 != v105);
            }
            size_t v120 = (char *)*v8;
            *(void *)(v4 + 104) = v127;
            *(void *)(v4 + 112) = v128;
            *(void *)(v4 + 120) = &v126[8 * v125];
            if (v120) {
LABEL_170:
            }
              operator delete(v120);
LABEL_171:
            unint64_t v121 = (_DWORD *)(v108 + (v109 << 6));
            unint64_t v122 = *(void *)(v4 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(v4 + 104) + 4) << 6);
            if (v121 != (_DWORD *)v122)
            {
LABEL_172:
              int v132 = v279;
              uint64_t v133 = v277;
              unsigned int v134 = v272;
              unint64_t v135 = ((unint64_t)v274 - v273) >> 4;
              do
              {
                unsigned int v138 = v121[13];
                if (v132)
                {
                  unsigned int v280 = v121[14];
                  int v136 = v121[15];
                  int v281 = v136;
                }
                else
                {
                  int v136 = *(_DWORD *)(v133 + 12 * v138);
                }
                uint64_t v137 = (unsigned int *)((char *)v134 + *(unsigned __int16 *)((char *)v134 - *v134 + 6));
                v121[7] = *(unsigned int *)((char *)&v137[2 * (*(_DWORD *)(v133 + 12 * v138 + 4) + v135)
                                                        + 2]
                                          + *v137)
                        + v136;
                v121 += 16;
              }
              while (v121 != (_DWORD *)v122);
              uint64_t v278 = (int *)(v133 + 12 * v138);
            }
LABEL_178:
            uint64_t result = (uint64_t)sub_A9BE2C((char *)v8, 0);
LABEL_179:
            if ((*((unsigned char *)v274 + 15) & 2) == 0) {
              goto LABEL_186;
            }
            if (v276)
            {
              if (*(_DWORD *)(v276 + 4 * (((unint64_t)v274 - v273) >> 4)) != v243) {
                goto LABEL_186;
              }
            }
            else if (v243)
            {
              goto LABEL_186;
            }
            unint64_t v139 = v241 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v269;
            uint64_t v140 = *(void *)(v4 + 104);
            if (v139 >= (*(void *)(v4 + 112) - v140) >> 3) {
              goto LABEL_186;
            }
            uint64_t v143 = (int *)(v140 + 8 * v139);
            int v141 = *v143;
            int v142 = v143[1];
            int v144 = v142 - *v143;
            if (v142 == *v143) {
              goto LABEL_186;
            }
            unsigned int v152 = 0;
            int v244 = v142 - v141;
            while (2)
            {
              uint64_t v153 = *(void *)(v4 + 104);
              if (v139 >= (*(void *)(v4 + 112) - v153) >> 3
                || (v155 = (int *)(v153 + 8 * v139), int v154 = *v155, v155[1] - *v155 <= v152))
              {
                long long v231 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v231, "key does not exist and cannot be added");
                goto LABEL_327;
              }
              unint64_t v156 = v154 + v152;
              uint64_t v157 = *(void *)(v4 + 128);
              if (v156 >= (*(void *)(v4 + 136) - v157) >> 6)
              {
                long long v231 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v231, "index out of range");
LABEL_327:
              }
              uint64_t v158 = v157 + (v156 << 6);
              signed int v159 = *((_DWORD *)v274 + 2) + *(_DWORD *)(v158 + 28);
              if (v279)
              {
                uint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v270, v159, 1);
                if ((result & 1) == 0) {
                  goto LABEL_213;
                }
LABEL_221:
                uint64_t v247 = *(void *)(v158 + 20);
                int v248 = *(_DWORD *)(v158 + 40);
                int v249 = *(_DWORD *)(v158 + 32);
                int v245 = *(_DWORD *)(v158 + 36);
                int v246 = *(_DWORD *)(v158 + 44);
                int v160 = *(unsigned __int8 *)(v158 + 48);
                __int16 v267 = *(_WORD *)(v158 + 49);
                uint64_t v161 = (void *)(*(void *)(v4 + 24) + 4136);
                char v268 = *(unsigned char *)(v158 + 51);
                if (sub_A10E20(v161, v253))
                {
                  unint64_t v162 = (int *)sub_A1120C(*(void *)(*v161 + 3944), v252);
                }
                else
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v223 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                    uint64_t v4 = v242;
                  }
                  uint64_t v163 = *v161;
                  if (dword_24F7300 == v253)
                  {
                    uint64_t v164 = *(unsigned int **)(*(void *)(v163 + 3976) + 72);
                    if (!v164)
                    {
                      unint64_t v235 = __cxa_allocate_exception(0x40uLL);
                      uint64_t v285 = (char *)operator new(0x40uLL);
                      long long v286 = xmmword_20B9A90;
                      strcpy(v285, "Realtime stop pattern quad data requested on nullptr buffer");
                      int v236 = (void *)sub_2F404((uint64_t)v235, (long long *)&v285);
                    }
                    uint64_t v165 = (int *)((char *)v164 + *v164);
                    long long v166 = (unsigned __int16 *)((char *)v165 - *v165);
                    if (*v166 >= 5u && (uint64_t v167 = v166[2]) != 0) {
                      int v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
                    }
                    else {
                      int v168 = 0;
                    }
                    unint64_t v162 = (int *)sub_A1139C(v168, v252);
                  }
                  else
                  {
                    unint64_t v162 = (int *)sub_A11500(v163 + 24, v252, 0, "stop pattern");
                  }
                }
                unint64_t v169 = v162;
                uint64_t v170 = *v161;
                uint64_t v171 = (unsigned __int16 *)((char *)v162 - *v162);
                if (*v171 >= 0xFu && (uint64_t v172 = v171[7]) != 0)
                {
                  uint64_t v173 = v170 + 3896;
                  char v174 = sub_49442C(*(unsigned __int16 *)((char *)v162 + v172));
                  if ((sub_C25A10(v173, v174) & 1) == 0)
                  {
LABEL_235:
                    uint64_t v175 = (unsigned __int16 *)((char *)v169 - *v169);
                    uint64_t v8 = v251;
                    if (*v175 >= 0xBu && (uint64_t v176 = v175[5]) != 0)
                    {
                      int v177 = sub_A2BF48(*((unsigned char *)v169 + v176));
                      if (sub_A10E20(v161, v253))
                      {
LABEL_241:
                        uint64_t v180 = (int *)sub_A1120C(*(void *)(*v161 + 3944), v252);
                        unint64_t v181 = (unsigned __int16 *)((char *)v180 - *v180);
                        if (*v181 < 0xFu) {
                          goto LABEL_257;
                        }
LABEL_254:
                        uint64_t v188 = v181[7];
                        if (!v188) {
                          goto LABEL_257;
                        }
                        char v189 = 0;
                        unsigned int v190 = *(unsigned __int16 *)((char *)v180 + v188);
                        uint64_t result = 0x7FFFFFFFLL;
                        switch(v190)
                        {
                          case 0u:
                          case 1u:
                          case 2u:
                          case 0xCu:
                            goto LABEL_258;
                          case 3u:
                            char v189 = 1;
                            goto LABEL_258;
                          case 4u:
                            char v189 = 2;
                            goto LABEL_258;
                          case 5u:
                          case 6u:
                          case 7u:
                            goto LABEL_256;
                          case 8u:
                          case 9u:
                          case 0xAu:
                          case 0xBu:
                            goto LABEL_305;
                          default:
                            uint64_t result = 0x7FFFFFFFLL;
                            if (v190 != 900)
                            {
LABEL_305:
                              uint64_t v222 = ((5243 * (v190 >> 2)) >> 17) - 1;
                              if (v222 > 0xB) {
LABEL_256:
                              }
                                char v189 = 3;
                              else {
                                char v189 = byte_20EC3B6[v222];
                              }
                            }
                            break;
                        }
                        goto LABEL_258;
                      }
                    }
                    else
                    {
                      int v177 = sub_A2BF48(0);
                      if (sub_A10E20(v161, v253)) {
                        goto LABEL_241;
                      }
                    }
LABEL_244:
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v224 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                      uint64_t v4 = v242;
                      uint64_t v8 = v251;
                    }
                    uint64_t v182 = *v161;
                    if (dword_24F7300 == v253)
                    {
                      int8x8_t v183 = *(unsigned int **)(*(void *)(v182 + 3976) + 72);
                      if (!v183)
                      {
                        uint64_t v233 = __cxa_allocate_exception(0x40uLL);
                        uint64_t v285 = (char *)operator new(0x40uLL);
                        long long v286 = xmmword_20B9A90;
                        strcpy(v285, "Realtime stop pattern quad data requested on nullptr buffer");
                        int v234 = (void *)sub_2F404((uint64_t)v233, (long long *)&v285);
                      }
                      unint64_t v184 = (int *)((char *)v183 + *v183);
                      unint64_t v185 = (unsigned __int16 *)((char *)v184 - *v184);
                      if (*v185 >= 5u && (uint64_t v186 = v185[2]) != 0) {
                        unint64_t v187 = (unsigned int *)((char *)v184 + v186 + *(unsigned int *)((char *)v184 + v186));
                      }
                      else {
                        unint64_t v187 = 0;
                      }
                      uint64_t v180 = (int *)sub_A1139C(v187, v252);
                      unint64_t v181 = (unsigned __int16 *)((char *)v180 - *v180);
                      if (*v181 >= 0xFu) {
                        goto LABEL_254;
                      }
                    }
                    else
                    {
                      uint64_t v180 = (int *)sub_A11500(v182 + 24, v252, 0, "stop pattern");
                      unint64_t v181 = (unsigned __int16 *)((char *)v180 - *v180);
                      if (*v181 >= 0xFu) {
                        goto LABEL_254;
                      }
                    }
LABEL_257:
                    char v189 = 3;
                    uint64_t result = 0x7FFFFFFFLL;
LABEL_258:
                    int v191 = (1 << v189) | v160;
                    int v192 = v281;
                    unint64_t v193 = 0xFFFFFFFF00000000;
                    if (v279) {
                      unint64_t v193 = (unint64_t)v280 << 32;
                    }
                    unint64_t v194 = (-1431655765 * (((unint64_t)v278 - v277) >> 2)) | v193;
                    if (!v279) {
                      int v192 = 0x7FFFFFFF;
                    }
                    uint64_t v195 = (unsigned int *)((char *)v272 + *(unsigned __int16 *)((char *)v272 - *v272 + 6));
                    uint64_t v196 = (char *)v195 + *v195;
                    unsigned int v197 = &v281;
                    if (!v279) {
                      unsigned int v197 = v278;
                    }
                    int v198 = *v197;
                    unint64_t v199 = ((unint64_t)v274 - v273) >> 4;
                    int v200 = *(_DWORD *)&v196[8 * (v278[1] + v199) + 4];
                    int v201 = *(_DWORD *)&v196[8 * (v278[1] + v199) + 8] + v198;
                    int v202 = ((10 * (v198 - *(_DWORD *)(v158 + 28) + v200)) & ~((10
                                                                             * (v198 - *(_DWORD *)(v158 + 28) + v200)) >> 31))
                         + v246;
                    LODWORD(v254) = v199;
                    *(void *)((char *)&v254 + 4) = v194;
                    HIDWORD(v254) = v192;
                    unsigned int v255 = v284;
                    uint64_t v256 = v247;
                    int v257 = v201;
                    int v258 = v249;
                    unsigned int v259 = v177 + v245;
                    int v260 = v248;
                    int v261 = v202;
                    unsigned __int8 v262 = v191;
                    __int16 v263 = v267;
                    char v264 = v268;
                    unint64_t v265 = v194;
                    int v266 = v192;
                    uint64_t v203 = *(unsigned int **)(v4 + 104);
                    if (*(unsigned int **)(v4 + 112) == v203
                      || (uint64_t v204 = *v203,
                          uint64_t v205 = *(unsigned int *)(*(void *)(v4 + 104) + 4),
                          v205 == v204))
                    {
                      uint64_t result = (uint64_t)sub_A86F6C((char **)v8, 0, &v254);
                    }
                    else
                    {
                      char v206 = 0;
                      uint64_t v207 = v204 << 6;
                      uint64_t v208 = (unsigned __int8 *)(*(void *)(v4 + 128) + (v204 << 6) + 48);
                      uint64_t v209 = (v205 << 6) - v207;
                      do
                      {
                        int v210 = *((_DWORD *)v208 - 5);
                        if (v210 != 0x7FFFFFFF)
                        {
                          if (v210 <= v257 && *((_DWORD *)v208 - 4) <= v258)
                          {
                            unsigned int v211 = *((_DWORD *)v208 - 3);
                            if (v211 <= v259
                              && (v211 != v259 || v210 != v257 || 10 * v210 - *((_DWORD *)v208 - 1) <= 10 * v257 - v261)
                              && (*v208 & ~v262) == 0)
                            {
                              goto LABEL_285;
                            }
                          }
                          if (v257 <= v210 && v258 <= *((_DWORD *)v208 - 4))
                          {
                            unsigned int v212 = *((_DWORD *)v208 - 3);
                            if (v259 <= v212
                              && (v259 != v212 || v257 != v210 || 10 * v257 - v261 <= 10 * v210 - *((_DWORD *)v208 - 1))
                              && (v191 & ~*v208) == 0)
                            {
                              *((_DWORD *)v208 - 5) = 0x7FFFFFFF;
                              char v206 = 1;
                            }
                          }
                        }
                        v208 += 64;
                        v209 -= 64;
                      }
                      while (v209);
                      uint64_t result = (uint64_t)sub_A86F6C((char **)v8, 0, &v254);
LABEL_285:
                      if (v206)
                      {
                        BOOL v213 = *(unsigned int **)(v4 + 104);
                        if (*(unsigned int **)(v4 + 112) != v213)
                        {
                          uint64_t v214 = *(void *)(v4 + 128);
                          uint64_t v215 = *v213;
LABEL_288:
                          unint64_t v216 = v214 + (v215 << 6);
                          unint64_t v217 = v214 + ((unint64_t)v213[1] << 6);
                          if (v216 != v217) {
                            goto LABEL_292;
                          }
                          goto LABEL_298;
                        }
                        sub_D2BFC(v8, 1uLL);
                        BOOL v213 = *(unsigned int **)(v4 + 104);
                        uint64_t v214 = *(void *)(v4 + 128);
                        uint64_t v215 = *v213;
                        if (*(unsigned int **)(v4 + 112) != v213) {
                          goto LABEL_288;
                        }
                        sub_D2BFC(v8, 1uLL);
                        BOOL v213 = *(unsigned int **)(v4 + 104);
                        unint64_t v216 = v214 + (v215 << 6);
                        unint64_t v217 = *(void *)(v4 + 128) + ((unint64_t)v213[1] << 6);
                        if (v216 == v217)
                        {
LABEL_298:
                          if (*(unsigned int **)(v4 + 112) == v213) {
                            goto LABEL_299;
                          }
                        }
                        else
                        {
LABEL_292:
                          while (*(_DWORD *)(v216 + 28) != 0x7FFFFFFF)
                          {
                            v216 += 64;
                            if (v216 == v217)
                            {
                              unint64_t v216 = v217;
                              if (*(unsigned int **)(v4 + 112) != v213) {
                                goto LABEL_300;
                              }
                              goto LABEL_299;
                            }
                          }
                          if (v216 == v217) {
                            goto LABEL_298;
                          }
                          unint64_t v218 = v216 + 64;
                          if (v216 + 64 == v217) {
                            goto LABEL_298;
                          }
                          do
                          {
                            if (*(_DWORD *)(v218 + 28) != 0x7FFFFFFF)
                            {
                              long long v219 = *(_OWORD *)v218;
                              long long v220 = *(_OWORD *)(v218 + 16);
                              long long v221 = *(_OWORD *)(v218 + 48);
                              *(_OWORD *)(v216 + 32) = *(_OWORD *)(v218 + 32);
                              *(_OWORD *)(v216 + 48) = v221;
                              *(_OWORD *)unint64_t v216 = v219;
                              *(_OWORD *)(v216 + 16) = v220;
                              v216 += 64;
                            }
                            v218 += 64;
                          }
                          while (v218 != v217);
                          BOOL v213 = (unsigned int *)*v8;
                          if (*(void **)(v4 + 112) == *v8)
                          {
LABEL_299:
                            sub_D2BFC(v8, 1uLL);
                            BOOL v213 = (unsigned int *)*v8;
                          }
                        }
LABEL_300:
                        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)v216, (char *)(*(void *)(v4 + 128) + ((unint64_t)v213[1] << 6)));
                      }
                    }
                    int v144 = v244;
LABEL_213:
                    if (++v152 == v144) {
                      goto LABEL_186;
                    }
                    continue;
                  }
                }
                else
                {
                  uint64_t v178 = v170 + 3896;
                  char v179 = sub_49442C(0x7FFFu);
                  if ((sub_C25A10(v178, v179) & 1) == 0) {
                    goto LABEL_235;
                  }
                }
                int v177 = 128;
                uint64_t v8 = v251;
                if (sub_A10E20(v161, v253)) {
                  goto LABEL_241;
                }
                goto LABEL_244;
              }
              break;
            }
            uint64_t result = sub_A1F8B4((uint64_t)&v270, v159, 1);
            if (result) {
              goto LABEL_221;
            }
            goto LABEL_213;
          }
        }
        else
        {
          unint64_t v126 = 0;
          unsigned int v127 = 0;
          *(void *)&def_332C = 0;
          uint64_t v128 = 8;
          if (v120 != (char *)v105) {
            goto LABEL_165;
          }
        }
        uint64_t v4 = v242;
        *(void *)(v242 + 104) = v127;
        *(void *)(v242 + 112) = v128;
        *(void *)(v242 + 120) = &v126[8 * v125];
        if (v120) {
          goto LABEL_170;
        }
        goto LABEL_171;
      }
LABEL_120:
      if (!*(unsigned char *)(v4 + 21))
      {
        uint64_t v93 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v93)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v93 = *(unsigned int **)(v4 + 104);
          uint64_t v94 = *(void *)(v4 + 128);
          uint64_t v95 = *v93;
          if (*(unsigned int **)(v4 + 112) == v93)
          {
            sub_D2BFC(v8, 1uLL);
            uint64_t v93 = *(unsigned int **)(v4 + 104);
            uint64_t v96 = *(void *)(v4 + 128);
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v94 = *(void *)(v4 + 128);
          uint64_t v95 = *v93;
        }
        uint64_t v96 = v94;
LABEL_126:
        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)(v94 + (v95 << 6)), (char *)(v96 + ((unint64_t)v93[1] << 6)));
      }
LABEL_186:
      unint64_t v145 = v273;
      unint64_t v9 = v274 + 2;
      v274 += 2;
      if (*(unsigned char *)(v270 + 16)) {
        BOOL v146 = v271 == 0;
      }
      else {
        BOOL v146 = 0;
      }
      if (v146 && (unint64_t)v9 >= v273 && (unint64_t)v9 < v275)
      {
        do
        {
          unint64_t v149 = __ROR8__(*v9, 32);
          if (HIDWORD(v149) == 1 && (v149 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v270 + 4120));
          unint64_t v145 = v273;
          unint64_t v9 = v274;
          if (result) {
            break;
          }
          unint64_t v9 = v274 + 2;
          long long v274 = v9;
        }
        while ((unint64_t)v9 >= v273 && (unint64_t)v9 < v275);
      }
      if ((unint64_t)v9 < v145 || (unint64_t)v9 >= v275) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unint64_t v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_A9BD80(_Unwind_Exception *a1)
{
}

void sub_A9BD98(_Unwind_Exception *a1)
{
}

void sub_A9BDB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A9BE2C(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A9A3AC(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_51:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            int v11 = result[48];
            unsigned int v12 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v12) {
                goto LABEL_51;
              }
              unint64_t v13 = v12 + *v10;
              uint64_t v14 = *((void *)v2 + 3);
              if (v13 >= (*((void *)v2 + 4) - v14) >> 6) {
                break;
              }
              uint64_t v15 = v14 + (v13 << 6);
              int v18 = *(_DWORD *)(v15 + 28);
              int v17 = (_DWORD *)(v15 + 28);
              int v16 = v18;
              if (v18 != 0x7FFFFFFF)
              {
                int v19 = *((_DWORD *)result + 7);
                if (v19 <= v16
                  && (uint64_t v20 = v14 + (v13 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v20 + 32))
                  && (unsigned int v21 = *(_DWORD *)(v20 + 36), v22 = *((_DWORD *)result + 9), v22 <= v21)
                  && ((uint64_t v23 = v14 + (v13 << 6), v22 == v21) ? (v24 = v19 == v16) : (v24 = 0),
                      v24 ? (BOOL v25 = 10 * v19 - *((_DWORD *)result + 11) <= 10 * v16 - *(_DWORD *)(v23 + 44)) : (BOOL v25 = 1),
                      v25 && (v11 & ~*(unsigned __int8 *)(v23 + 48)) == 0))
                {
                  _DWORD *v17 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 <= v19)
                {
                  uint64_t v26 = v14 + (v13 << 6);
                  if (*(_DWORD *)(v26 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v27 = *((_DWORD *)result + 9);
                    unsigned int v28 = *(_DWORD *)(v26 + 36);
                    if (v28 <= v27)
                    {
                      uint64_t v29 = v14 + (v13 << 6);
                      BOOL v30 = v28 == v27 && v16 == v19;
                      BOOL v31 = !v30 || 10 * v16 - *(_DWORD *)(v29 + 44) <= 10 * v19 - *((_DWORD *)result + 11);
                      if (v31 && (*(unsigned __int8 *)(v29 + 48) & ~result[48]) == 0)
                      {
                        *((_DWORD *)result + 7) = 0x7FFFFFFF;
                        char v5 = 1;
                        goto LABEL_6;
                      }
                    }
                  }
                }
              }
              if (v8 == ++v12) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_A9C0C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_A9C0D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_A9C0EC(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A9A3AC(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_A9A3AC(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) <= a6)
      {
        if (sub_A9A484(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_A9A1C0((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      BOOL v30 = (long long *)sub_A9A3AC(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) <= a6)
      {
        if (sub_A9A484(a1, (uint64_t)&v36, a5) & 1) != 0 || (sub_A9A484(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_A9A1C0((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_A9C330(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  unsigned int v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    BOOL v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      BOOL v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_A9C5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A9C614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A40DC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    BOOL v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_A9C95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_A9C9FC(uint64_t a1, int a2)
{
  int v91 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v90[0] = *(_OWORD *)(a1 + 88);
  v90[1] = v4;
  LOBYTE(v90[0]) = 0;
  v89[0] = (uint64_t)v90;
  v89[1] = a1;
  v89[2] = (uint64_t)&v91;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v92 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v11 - v10);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_A9E194(v89, v10);
    LODWORD(v81[0]) = v14;
    unsigned int v11 = v92;
    if (v14 != 0x7FFFFFFF && v14 < (int)v92)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        int v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v81[0];
      unsigned int v92 = v81[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      unsigned int v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 % 10;
      uint64_t v49 = (void *)std::ostream::operator<<();
      sub_188FC78(v49, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v81, 2u);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
      uint64_t v85 = v80;
      *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 % 10;
    }
    char v50 = v22 < 0 ? -5 : 5;
    int v51 = v22 / -10 + v10 + (((-103 * (char)(v50 + v48)) >> 15) & 1) + ((-103 * (char)(v50 + v48)) >> 10);
    unsigned int v52 = sub_A9E194(v89, v51);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v52 - v92))) >= (double)(int)fabs((double)(10 * (v51 - v10)))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v46 = (double)(v53 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v54 = v52;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    uint64_t v55 = (void *)std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v56 = (void *)std::ostream::operator<<();
    sub_188FC78(v56, (uint64_t)" to ", 4);
    int v57 = (void *)std::ostream::operator<<();
    sub_188FC78(v57, (uint64_t)" sec for time shift of ", 23);
    BOOL v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v85 = v80;
    *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v92 = v54;
  int v23 = v10;
  if (v51 != v10)
  {
    double v59 = (double)v22 * 0.5;
    if (v59 >= 0.0)
    {
      if (v59 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v59 + v59) + 1;
        goto LABEL_93;
      }
    }
    else if (v59 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59);
      if (v60 >= 1) {
        --v60;
      }
LABEL_93:
      double v59 = (double)(v60 >> 1);
    }
    double v61 = (double)v22 * 0.25;
    if (v61 >= 0.0)
    {
      if (v61 < 4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        goto LABEL_101;
      }
    }
    else if (v61 > -4.50359963e15)
    {
      uint64_t v62 = (uint64_t)(v61 + v61);
      if (v62 >= 1) {
        --v62;
      }
LABEL_101:
      double v61 = (double)(v62 >> 1);
    }
    int v63 = (int)v61;
    if (*(_DWORD *)(a1 + 60) > (int)v61)
    {
      int v23 = v51;
      goto LABEL_30;
    }
    int v23 = v51;
    int v64 = (int)v59;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v66 = v63 + v64;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v67 = (void *)std::ostream::operator<<();
        sub_188FC78(v67, (uint64_t)"] Examining time shift of ", 26);
        int v68 = v66 % 10;
        uint64_t v69 = (void *)std::ostream::operator<<();
        sub_188FC78(v69, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v81, 2u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        uint64_t v85 = v80;
        *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v68 = v66 % 10;
      }
      if (v66 < 0) {
        char v70 = -5;
      }
      else {
        char v70 = 5;
      }
      int v71 = v66 / -10
          + v10
          + (((-103 * (char)(v70 + v68)) >> 15) & 1)
          + ((-103 * (char)(v70 + v68)) >> 10);
      unsigned int v72 = sub_A9E194(v89, v71);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v92 - v72))) >= (double)(int)fabs((double)(10 * (v23 - v71))))
      {
        v64 += v63;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v73 = v72;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v85);
          sub_188FC78(&v85, (uint64_t)"[", 1);
          unint64_t v74 = (void *)std::ostream::operator<<();
          sub_188FC78(v74, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v75 = (void *)std::ostream::operator<<();
          sub_188FC78(v75, (uint64_t)" to ", 4);
          uint64_t v76 = (void *)std::ostream::operator<<();
          sub_188FC78(v76, (uint64_t)" sec for time shift of ", 23);
          unint64_t v77 = (void *)std::ostream::operator<<();
          sub_188FC78(v77, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v81, 2u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          uint64_t v85 = v80;
          *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
          if (v88 < 0) {
            operator delete(v87);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v92 = v73;
        int v23 = v71;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0)
        {
LABEL_125:
          if (v65 < 4.50359963e15)
          {
            uint64_t v78 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v65 > -4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v65 + v65);
        if (v78 >= 1) {
          --v78;
        }
LABEL_105:
        double v65 = (double)(v78 >> 1);
      }
LABEL_106:
      int v63 = (int)v65;
      if (*(_DWORD *)(a1 + 60) > (int)v65) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v92;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"arrival", 7);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v91;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v91 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v91 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v91 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v91 + 3;
    int v35 = v91;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / -10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_A9E194(v89, v42 + v10 + (((-103 * (char)(v44 + v43)) >> 15) & 1) + ((-103 * (char)(v44 + v43)) >> 10));
  return v92;
}

void sub_A9DC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_A9DD78(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_A9E450(a1 + 1336, v42);
  sub_A9E700((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_A9E118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_A9E194(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A3C368(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_A9E404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_A9E450(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_AA0C00(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_AA0DF8(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_AA0F60(a1, v6);
        sub_AA1288(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_AA2674(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_AA3DA8(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_A99AE8(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_AA35D4(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_A9E700@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  unsigned int v296 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v333) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v294 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v333) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v295 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v298 = _Q0;
    int v297 = 1;
    unint64_t v304 = a1;
    size_t v303 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_AA3CC4(v7, v297 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v299 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          long long v300 = (unsigned int *)(v12 + (v13 << 6));
          if (v300 != (unsigned int *)v299) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v299 = v12 + ((unint64_t)v11[1] << 6);
      long long v300 = (unsigned int *)(v12 + (v13 << 6));
      if (v300 != (unsigned int *)v299) {
        break;
      }
LABEL_9:
      if (++v297 == v295) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v333 = 0x7FFFFFFF;
      __int16 v334 = 0;
      unint64_t v335 = 0x8000000080000000;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      int v338 = 0x7FFFFFFF;
      __int16 v339 = 0;
      unint64_t v340 = 0x8000000080000000;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0xFFFFFFFF00000000;
      int v345 = -1;
      uint64_t v346 = 0;
      uint64_t v348 = 0;
      uint64_t v349 = 0;
      uint64_t v350 = 0;
      int v347 = 0x7FFFFFFF;
      int v351 = 100;
      int v352 = -1;
      long long v353 = v298;
      long long v354 = v298;
      long long v355 = v298;
      long long v356 = 0u;
      long long v357 = 0u;
      long long v358 = 0u;
      long long v359 = 0u;
      uint64_t v14 = a1[3];
      long long v360 = 0u;
      long long v361 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v300 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v300 != -1) {
        break;
      }
LABEL_397:
      sub_A29D50((uint64_t)__p);
      unint64_t v268 = *(void *)(v3 + 16);
      if (v268 >= *(void *)(v3 + 24))
      {
        uint64_t v269 = sub_A4D268(v296, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v269 = v268 + 296;
        *(void *)(v3 + 16) = v268 + 296;
      }
      int v7 = v303;
      *(void *)(v3 + 16) = v269;
      if (*((void *)&v360 + 1))
      {
        *(void *)&long long v361 = *((void *)&v360 + 1);
        operator delete(*((void **)&v360 + 1));
      }
      if ((void)v359)
      {
        *((void *)&v359 + 1) = v359;
        operator delete((void *)v359);
      }
      if (*((void *)&v357 + 1))
      {
        *(void *)&long long v358 = *((void *)&v357 + 1);
        operator delete(*((void **)&v357 + 1));
      }
      uint64_t v270 = (void **)v356;
      if ((void)v356)
      {
        uint64_t v271 = *((void *)&v356 + 1);
        uint64_t v272 = (void *)v356;
        if (*((void *)&v356 + 1) != (void)v356)
        {
          do
          {
            long long v274 = *(void **)(v271 - 40);
            if (v274)
            {
              *(void *)(v271 - 32) = v274;
              operator delete(v274);
            }
            unint64_t v275 = (void **)(v271 - 72);
            uint64_t v276 = *(void *)(v271 - 72);
            if (v276)
            {
              uint64_t v277 = *(void *)(v271 - 64);
              unint64_t v273 = *(void **)(v271 - 72);
              if (v277 != v276)
              {
                do
                {
                  if (!*(_DWORD *)(v277 - 8))
                  {
                    uint64_t v278 = *(void **)(v277 - 48);
                    if (v278)
                    {
                      *(void *)(v277 - 40) = v278;
                      operator delete(v278);
                    }
                    unsigned __int8 v279 = *(void **)(v277 - 80);
                    if (v279)
                    {
                      *(void *)(v277 - 72) = v279;
                      operator delete(v279);
                    }
                    unsigned int v280 = *(void **)(v277 - 104);
                    if (v280)
                    {
                      *(void *)(v277 - 96) = v280;
                      operator delete(v280);
                    }
                  }
                  v277 -= 168;
                }
                while (v277 != v276);
                unint64_t v273 = *v275;
              }
              *(void *)(v271 - 64) = v276;
              operator delete(v273);
              a1 = v304;
            }
            v271 -= 72;
          }
          while (v275 != v270);
          uint64_t v272 = (void *)v356;
        }
        *((void *)&v356 + 1) = v270;
        operator delete(v272);
      }
      if (SHIBYTE(v350) < 0) {
        operator delete(v348);
      }
      v300 += 16;
      if (v300 == (unsigned int *)v299) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v300;
    int v306 = v297;
    unsigned int v307 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v324 = 0;
      int v325 = 0;
      unint64_t v326 = 0;
      char v329 = 0;
      uint64_t v330 = 0;
      unint64_t v328 = 0;
      v331[0] = 1;
      *(void *)&v331[4] = 0x8000000080000000;
      *(_WORD *)&v331[12] = 0;
      v331[14] = 0;
      int v383 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v308 = xmmword_20E12E0;
      __int16 v309 = 0;
      unint64_t v310 = 0x8000000080000000;
      __int16 v311 = 0;
      *(_OWORD *)unint64_t v312 = xmmword_20EB6B0;
      *(void *)&v312[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v314 = 0u;
      long long v315 = 0u;
      long long v316 = 0u;
      int v313 = -1;
      int v317 = 0x7FFFFFFF;
      int v319 = 0;
      uint64_t v320 = 0;
      long long v318 = 0;
      char v321 = 1;
      unint64_t v322 = 0x8000000080000000;
      int v323 = 0;
      char v327 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)unint64_t v312 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v312[16] = v18[3];
      *(void *)&v312[8] = v21;
      int v313 = *v18;
      unsigned int v22 = v313;
      uint64_t v23 = a1[3];
      uint64_t v362 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      sub_A1E9A0((uint64_t)v363, v23, v20, v22, 0, 0);
      *(void *)&long long v365 = *(void *)&v364[24] + 12 * *(unsigned int *)&v312[8];
      if (LOBYTE(v367[1])) {
        *(void **)((char *)&v367[1] + 4) = *(void **)&v312[12];
      }
      if (*(void *)&v364[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v364[16]
      }
                              + 4 * ((*(void *)v364 - *(void *)&v363[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A56ED0((uint64_t)v363, &v362, v24);
      _CF = *(void *)v364 < *(void *)&v364[8] && *(void *)v364 >= *(void *)&v363[24];
      uint64_t v26 = (*(void *)v364 - *(void *)&v363[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      *(_DWORD *)&v312[20] = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v312;
      unsigned int v30 = v313;
      uint64_t v31 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v28, *(int *)&v312[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            uint64_t v289 = (void *)sub_2F404((uint64_t)exception, (long long *)v363);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      char v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        uint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v304;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v307 = *(_DWORD *)(v58 + 8);
        if (v307 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        int v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v304;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v304;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              uint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_431;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v307 = *(_DWORD *)(v58 + 8);
              if (v307 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_431:
              uint64_t v285 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v285, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v304;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_431;
            }
LABEL_117:
            if (v67
              && ((char v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_431;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_431;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((uint64_t v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v304;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
      if (v307 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      char v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)char v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      uint64_t v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        uint64_t v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        int v97 = &v96[8 * v91];
        *(void *)int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v304;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        uint64_t v96 = 0;
        int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v304;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v304;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      uint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      char v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      char v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
LABEL_159:
      int v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v312;
      unsigned int v112 = *(_DWORD *)&v312[20];
      uint64_t v113 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v110, *(int *)&v312[4]))
      {
        uint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          unint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            v292 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v363);
          }
          uint64_t v117 = (int *)((char *)v116 + *v116);
          unint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          uint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          uint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        uint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        uint64_t v123 = 0;
      }
      DWORD1(v308) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v312;
      unint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v312[20];
      int v128 = *(_DWORD *)&v312[8];
      uint64_t v129 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v312[4]))
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          int v281 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          uint64_t v282 = (void *)sub_2F404((uint64_t)v281, (long long *)v363);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          long long v286 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          v287 = (void *)sub_2F404((uint64_t)v286, (long long *)v363);
        }
LABEL_180:
        int v132 = (char *)v130 + *v130;
        uint64_t v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      int v132 = sub_A10B80(v131 + 24, v125, 0);
      uint64_t v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      unint64_t v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      int v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        unsigned int v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        unsigned int v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      uint64_t v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        int v141 = 0;
        int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        int v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          int v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v145;
      *(_DWORD *)&v363[8] = v146;
      unint64_t v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      long long v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        unint64_t v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        unint64_t v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v312[16];
      }
      *((void *)&v308 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v363, v151, v152);
      __int16 v309 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v312;
      unint64_t v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v313;
      int v158 = *(_DWORD *)&v312[8];
      uint64_t v159 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v312[4]))
      {
        int v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          unint64_t v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          unsigned int v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v363);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        int v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          uint64_t v290 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          v291 = (void *)sub_2F404((uint64_t)v290, (long long *)v363);
        }
LABEL_213:
        unint64_t v162 = (char *)v160 + *v160;
        uint64_t v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      unint64_t v162 = sub_A10B80(v161 + 24, v155, 0);
      uint64_t v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      uint64_t v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      long long v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        int v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        int v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      uint64_t v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        uint64_t v171 = 0;
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          uint64_t v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v175;
      *(_DWORD *)&v363[8] = v176;
      int v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      uint64_t v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        uint64_t v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        uint64_t v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v312[16];
      }
      unint64_t v310 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v363, v181, v182);
      __int16 v311 = v183;
      int v372 = -1;
      sub_9F6FA0((uint64_t)v363, &v308);
      int v372 = 0;
      if (v383)
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (v372) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v369)
        {
          *((void *)&v369 + 1) = v369;
          operator delete((void *)v369);
        }
        if (v367[0])
        {
          v367[1] = v367[0];
          operator delete(v367[0]);
        }
        if ((void)v365)
        {
          *((void *)&v365 + 1) = v365;
          operator delete((void *)v365);
        }
        goto LABEL_256;
      }
      *(_OWORD *)long long v373 = *(_OWORD *)v363;
      *(_OWORD *)&v373[16] = *(_OWORD *)&v363[16];
      v374[0] = *(_OWORD *)v364;
      *(_OWORD *)((char *)v374 + 12) = *(_OWORD *)&v364[12];
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      *(_OWORD *)v375 = v365;
      uint64_t v376 = v366;
      uint64_t v366 = 0;
      long long v365 = 0uLL;
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      long long v377 = *(_OWORD *)v367;
      uint64_t v378 = v367[2];
      memset(v367, 0, sizeof(v367));
      int v379 = v368;
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      long long v380 = v369;
      uint64_t v381 = v370;
      uint64_t v370 = 0;
      long long v369 = 0uLL;
      long long v382 = v371;
      if (!v372) {
        goto LABEL_250;
      }
LABEL_256:
      if (v318)
      {
        int v319 = v318;
        operator delete(v318);
      }
      if (*((void *)&v315 + 1))
      {
        *(void *)&long long v316 = *((void *)&v315 + 1);
        operator delete(*((void **)&v315 + 1));
      }
      if ((void)v314)
      {
        *((void *)&v314 + 1) = v314;
        operator delete((void *)v314);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v325;
        if ((unint64_t)v325 >= v326) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v327 = 1;
      unsigned int v187 = v18[7];
      unsigned int v188 = v18[3];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      *(_DWORD *)long long v363 = 0;
      *(_DWORD *)&v363[4] = v187;
      *(void *)&v363[12] = v189;
      *(void *)&v363[20] = v190;
      *(_DWORD *)&v363[8] = v188;
      int v372 = 1;
      if (v383)
      {
        if (v383 == 1)
        {
          *(_OWORD *)long long v373 = *(_OWORD *)v363;
          *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)long long v373 = *(_OWORD *)v363;
        *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
        int v383 = 1;
        goto LABEL_281;
      }
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      if (v372)
      {
        if (v372 == 1) {
          goto LABEL_280;
        }
        int v383 = v372;
      }
      else
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (!v372)
        {
          if ((void)v369)
          {
            *((void *)&v369 + 1) = v369;
            operator delete((void *)v369);
          }
          if (v367[0])
          {
            v367[1] = v367[0];
            operator delete(v367[0]);
          }
          if ((void)v365)
          {
            *((void *)&v365 + 1) = v365;
            operator delete((void *)v365);
          }
        }
      }
LABEL_281:
      unsigned int v307 = *v18;
      uint64_t v184 = (uint64_t)v325;
      if ((unint64_t)v325 >= v326)
      {
LABEL_282:
        int v325 = (char *)sub_A4CBF4((uint64_t *)&v324, (uint64_t)v373);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v383;
      if (v383 == 1)
      {
        long long v222 = *(_OWORD *)v373;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v373[12];
        *(_OWORD *)uint64_t v184 = v222;
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v383) {
          sub_9F6FA0(v184, (long long *)v373);
        }
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357)
        {
LABEL_268:
          uint64_t v186 = sub_A4CECC((void ***)&v356, (uint64_t)&v324);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      int v191 = (char *)v324;
      int v192 = v325;
      int64_t v193 = v325 - (unsigned char *)v324;
      if (v325 != v324)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        uint64_t v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v304;
        do
        {
          int v198 = (long long *)&v195[v196];
          unint64_t v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *int v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v327;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      int v202 = v328;
      uint64_t v203 = v329 - (unsigned char *)v328;
      if (v329 != v328)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        uint64_t v204 = (char *)operator new(v329 - (unsigned char *)v328);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        uint64_t v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v331;
      *(void *)(v185 + 63) = *(void *)&v331[7];
      *(void *)(v185 + 56) = v206;
      uint64_t v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v356 + 1) = v186;
      unint64_t v207 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 1;
      unsigned int v208 = v18[5];
      uint64_t v209 = (char *)a1[13];
      int v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          int v223 = &v210[8 * v213];
          a1[14] = v223;
          int v224 = v303;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_432:
          }
            sub_188D718();
          unint64_t v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            int v224 = v303;
            a1 = v304;
            int v223 = &v217[8 * v211 + v218];
            v304[13] = &v217[8 * v211];
            v304[14] = v223;
            v304[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              long long v220 = &v217[8 * v211];
              long long v221 = v220;
              a1 = v304;
              goto LABEL_327;
            }
            long long v220 = &v217[8 * v211];
            long long v221 = v220;
            a1 = v304;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_442;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            int v227 = &v210[-v226];
            long long v221 = &v220[-v226];
            uint64_t v228 = &v217[8 * v211 - 16];
            uint64_t v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)uint64_t v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            int v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_442:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            int v210 = v209;
            int v224 = v303;
            int v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              int v223 = (char *)a1[14];
            }
          }
        }
        uint64_t v209 = (char *)*v224;
        int v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        int v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v302 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_432;
        }
        int v249 = (char *)operator new(8 * v247);
      }
      else
      {
        int v249 = 0;
      }
      size_t v251 = 8 * v244;
      unint64_t v252 = &v249[8 * v246];
      size_t v301 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          long long v254 = v210;
          unsigned int v255 = &v249[8 * v246];
          a1 = v304;
          size_t v256 = v301;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        long long v254 = &v210[-v259];
        unsigned int v255 = &v252[-v259];
        int v260 = &v249[8 * v246 - 16];
        int v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v304;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)int v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v301;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        int v210 = (char *)*v303;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v302];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v304;
      v304[13] = v252;
      v304[14] = &v252[v301];
      v304[15] = &v249[8 * v302];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v383)
      {
        if ((void)v380)
        {
          *((void *)&v380 + 1) = v380;
          operator delete((void *)v380);
        }
        if ((void)v377)
        {
          *((void *)&v377 + 1) = v377;
          operator delete((void *)v377);
        }
        if (v375[0])
        {
          v375[1] = v375[0];
          operator delete(v375[0]);
        }
      }
      if (v328)
      {
        char v329 = v328;
        operator delete(v328);
      }
      unsigned int v238 = (char *)v324;
      if (v324)
      {
        int v239 = v325;
        uint64_t v19 = v324;
        if (v325 != v324)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              unsigned int v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              int v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              uint64_t v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v324;
        }
        int v325 = v238;
        operator delete(v19);
      }
      --v306;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v304;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      uint64_t v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v294, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_AA0658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    int v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          unsigned int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            char v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      unsigned int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_AA0C00(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_AA0DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AA0DF8(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v19 = 0x1FFFFFFFDLL;
    int v5 = sub_A3B520(v4, &v19);
    int v20 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 10 * v2;
    char v16 = 0;
    uint64_t v17 = -1;
    int v18 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_A86F6C((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_AA3954(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_AA3708((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 0x80000000)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_AA3708((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 0x80000000)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v20);
  }
}

double sub_AA0F60(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v33);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v30 = *(unsigned int **)(a1 + 216);
  if (v4 != v30)
  {
    int v5 = (void **)(a1 + 104);
    while (1)
    {
      unsigned int v32 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v32);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v31 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 300;
LABEL_17:
      sub_A86790(v5, 0);
      sub_AA3CC4(v5, a2 + 1 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v32, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v15)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
LABEL_19:
        int v18 = (unsigned int *)(v16 + (v17 << 6));
        unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
        if (v18 == (unsigned int *)v19) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_D2BFC(v5, 1uLL);
      int v15 = *(unsigned int **)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 128);
      uint64_t v17 = *v15;
      if (*(unsigned int **)(a1 + 112) != v15) {
        goto LABEL_19;
      }
      sub_D2BFC(v5, 1uLL);
      int v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        unsigned int *v18 = v32;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        _OWORD v18[4] = -1;
        v18[7] = v20 + v11 / -10;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_24:
      uint64_t v21 = v32;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_26:
          if (*v24 > (unint64_t)v32)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + ~a2;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 0x80000000;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_AA3708((void **)(a1 + 104), 0, a2 + 2 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v32);
      }
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v30) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = 10 * *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v33) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_AA1288(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v251);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v234 = *(unsigned int **)(a1 + 216);
  if (v4 != v234)
  {
    int v239 = a2 + 2;
    int v240 = a2 + 1;
    int v237 = ~a2;
    unsigned int v238 = (uint64_t *)(a1 + 232);
    uint64_t v233 = (void **)(a1 + 256);
    unint64_t v244 = (void **)(a1 + 104);
    while (1)
    {
      uint64_t v236 = v4;
      unsigned int v241 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v245, *(void *)(a1 + 24), *v5);
      unint64_t v6 = v246;
      BOOL v7 = &v247;
      if (v250) {
        BOOL v7 = v249;
      }
      if ((unint64_t)v246 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v236 + 1;
      if (v236 + 1 == v234) {
        goto LABEL_308;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v6, 32);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      unsigned int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_59;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v44) & v13;
        unint64_t v45 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v45;
        unsigned int v21 = v45[1];
        ++v44;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_59;
        }
      }
LABEL_56:
      if (v19 != -1)
      {
        uint64_t v47 = v16 + 12 * v19;
        unint64_t v42 = (void **)(a1 + 104);
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
        goto LABEL_80;
      }
      uint64_t v24 = -1;
      if (!sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_60:
        uint64_t v50 = *(void *)(v12 + 40);
        uint64_t v49 = *(void *)(v12 + 48);
        unint64_t v42 = (void **)(a1 + 104);
        if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
          goto LABEL_313;
        }
        uint64_t v29 = *(void *)(v12 + 80);
        if (v50
          && ((unsigned int v51 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v51[1])
            ? (BOOL v52 = *(_DWORD *)(v12 + 32) == *v51)
            : (BOOL v52 = 0),
              v52))
        {
          *(void *)(v12 + 40) = v50 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v49 + 1;
        }
        uint64_t v53 = 3 * v24;
LABEL_79:
        uint64_t v56 = 4 * v53;
        uint64_t v57 = v29 + v56;
        *(void *)uint64_t v57 = v11;
        *(_DWORD *)(v57 + 8) = -1;
        uint64_t v47 = *(void *)(v12 + 80) + v56;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
LABEL_80:
        int v58 = *(_DWORD *)(v12 + 112);
        *(_DWORD *)(v12 + 112) = v58 + 1;
        *(_DWORD *)(v47 + 8) = v58;
        uint64_t v60 = *(char **)(v12 + 96);
        unint64_t v59 = *(void *)(v12 + 104);
        if ((unint64_t)v60 < v59)
        {
          *(void *)uint64_t v60 = v11;
          uint64_t v61 = (uint64_t)(v60 + 8);
LABEL_98:
          *(void *)(v12 + 96) = v61;
          unsigned int v48 = *(_DWORD *)(v47 + 8);
          goto LABEL_99;
        }
        int v62 = (char **)(v12 + 88);
        uint64_t v63 = *(char **)(v12 + 88);
        uint64_t v64 = (v60 - v63) >> 3;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v66 = v59 - (void)v63;
        if (v66 >> 2 > v65) {
          unint64_t v65 = v66 >> 2;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v242 = v65;
        if (v65)
        {
          if (v65 >> 61) {
            goto LABEL_312;
          }
          uint64_t v67 = (char *)operator new(8 * v65);
          int v62 = (char **)(v12 + 88);
          int v68 = &v67[8 * v64];
          *(void *)int v68 = v11;
          uint64_t v61 = (uint64_t)(v68 + 8);
          if (v60 != v63) {
            goto LABEL_90;
          }
LABEL_140:
          unint64_t v42 = (void **)(a1 + 104);
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v242];
          if (!v60) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v67 = 0;
          int v68 = (char *)(8 * v64);
          *(void *)(8 * v64) = v11;
          uint64_t v61 = 8 * v64 + 8;
          if (v60 == v63) {
            goto LABEL_140;
          }
LABEL_90:
          unint64_t v69 = v60 - 8 - v63;
          if (v69 < 0x58) {
            goto LABEL_318;
          }
          if ((unint64_t)(v63 - v67) < 0x20) {
            goto LABEL_318;
          }
          uint64_t v70 = (v69 >> 3) + 1;
          uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v72 = &v60[-v71];
          v68 -= v71;
          uint64_t v73 = &v67[8 * v64 - 16];
          uint64_t v74 = (long long *)(v60 - 16);
          uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v76 = *v74;
            *((_OWORD *)v73 - 1) = *(v74 - 1);
            *(_OWORD *)uint64_t v73 = v76;
            v73 -= 32;
            v74 -= 2;
            v75 -= 4;
          }
          while (v75);
          uint64_t v60 = v72;
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_318:
            do
            {
              uint64_t v77 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v68 - 1) = v77;
              v68 -= 8;
            }
            while (v60 != v63);
          }
          uint64_t v60 = *v62;
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v242];
          unint64_t v42 = (void **)(a1 + 104);
          if (!v60) {
            goto LABEL_98;
          }
        }
        operator delete(v60);
        goto LABEL_98;
      }
LABEL_31:
      uint64_t v28 = *(void *)(v12 + 56) - 1;
      uint64_t v29 = *(void *)(v12 + 80);
      int v31 = *(_DWORD *)(v12 + 64);
      int v30 = *(_DWORD *)(v12 + 68);
      uint64_t v32 = v28 & v15;
      uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
      unsigned int v35 = *v33;
      unsigned int v34 = v33[1];
      uint64_t v36 = *(void *)(v12 + 40);
      if (v30 == v34 && v31 == v35)
      {
        unint64_t v42 = (void **)(a1 + 104);
LABEL_48:
        uint64_t v38 = v32;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555) {
          goto LABEL_313;
        }
        goto LABEL_71;
      }
      if (v36)
      {
        uint64_t v38 = -1;
        uint64_t v39 = 1;
        do
        {
          if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
          {
            if (v38 == -1) {
              uint64_t v38 = v32;
            }
          }
          else if (__PAIR64__(v34, v35) == v11)
          {
            goto LABEL_134;
          }
          uint64_t v32 = (v32 + v39) & v28;
          uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
          unsigned int v35 = *v40;
          unsigned int v34 = v40[1];
          ++v39;
        }
        while (v30 != v34 || v31 != v35);
        unint64_t v42 = (void **)(a1 + 104);
        if (v38 != -1)
        {
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 - v36 >= 0x1555555555555555) {
            goto LABEL_313;
          }
          goto LABEL_71;
        }
        goto LABEL_48;
      }
      uint64_t v104 = 1;
      while (__PAIR64__(v34, v35) != v11)
      {
        uint64_t v32 = (v32 + v104) & v28;
        int v105 = (unsigned int *)(v29 + 12 * v32);
        unsigned int v35 = *v105;
        unsigned int v34 = v105[1];
        ++v104;
        if (v30 == v34 && v31 == v35)
        {
          uint64_t v36 = 0;
          unint64_t v42 = (void **)(a1 + 104);
          uint64_t v38 = v32;
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 >= 0x1555555555555555) {
            goto LABEL_313;
          }
          goto LABEL_71;
        }
      }
LABEL_134:
      unint64_t v42 = (void **)(a1 + 104);
      if (v32 == -1)
      {
        uint64_t v38 = -1;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555)
        {
LABEL_313:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
LABEL_71:
        if (v36
          && ((uint64_t v54 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v54[1])
            ? (BOOL v55 = *(_DWORD *)(v12 + 32) == *v54)
            : (BOOL v55 = 0),
              v55))
        {
          *(void *)(v12 + 40) = v36 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v43 + 1;
        }
        uint64_t v53 = 3 * v38;
        goto LABEL_79;
      }
      uint64_t v47 = v29 + 12 * v32;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 == -1) {
        goto LABEL_80;
      }
LABEL_99:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v243 = v48;
      if (v241 == v48) {
        goto LABEL_252;
      }
      uint64_t v79 = *(unsigned int **)(a1 + 104);
      uint64_t v78 = *(unsigned int **)(a1 + 112);
      uint64_t v80 = (char *)v78 - (char *)v79;
      if (v78 == v79)
      {
        uint64_t v84 = v80 >> 3;
        unint64_t v85 = 1 - (v80 >> 3);
        uint64_t v86 = *(void *)(a1 + 120);
        if (v85 <= (v86 - (uint64_t)v78) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v85);
          uint64_t v93 = (char *)&v78[2 * v85];
          *(void *)(a1 + 112) = v93;
        }
        else
        {
          uint64_t v87 = v86 - (void)v79;
          uint64_t v88 = v87 >> 2;
          if ((unint64_t)(v87 >> 2) <= 1) {
            uint64_t v88 = 1;
          }
          BOOL v228 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v228) {
            unint64_t v89 = v88;
          }
          if (v89 >> 61) {
LABEL_312:
          }
            sub_188D718();
          uint64_t v90 = 8 * v89;
          uint64_t v91 = (char *)operator new(8 * v89);
          unint64_t v92 = &v91[8 * v84];
          bzero(v92, 8 * v85);
          *(void *)(a1 + 104) = v92;
          *(void *)(a1 + 112) = &v92[8 * v85];
          *(void *)(a1 + 120) = &v91[v90];
          if (v78)
          {
            operator delete(v78);
            uint64_t v93 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v93 = &v92[8 * v85];
          }
        }
        unint64_t v42 = (void **)(a1 + 104);
        uint64_t v79 = (unsigned int *)*v244;
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *(unsigned int *)*v244;
        if (*v244 == v93)
        {
          BOOL v83 = *(char **)(a1 + 120);
          if (v83 != v93)
          {
            *(void *)uint64_t v93 = 0;
            *(void *)(a1 + 112) = v93 + 8;
LABEL_127:
            uint64_t v79 = *(unsigned int **)(a1 + 104);
            uint64_t v103 = *(void *)(a1 + 128);
            goto LABEL_147;
          }
          uint64_t v94 = 1;
          uint64_t v95 = v83 - (char *)v79;
          if ((unint64_t)(v95 >> 2) > 1) {
            uint64_t v94 = v95 >> 2;
          }
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v96 = v94;
          }
          if (v96)
          {
            if (v96 >> 61) {
              goto LABEL_312;
            }
            int v97 = (char *)operator new(8 * v96);
            unint64_t v98 = v97;
            *(void *)int v97 = 0;
            uint64_t v99 = (uint64_t)(v97 + 8);
            if (v93 != (char *)v79)
            {
LABEL_121:
              unint64_t v100 = v93 - 8 - (char *)v79;
              if (v100 < 0x58 || (unint64_t)(v93 - v97) < 0x20)
              {
                unsigned int v101 = (unsigned int *)v93;
                goto LABEL_124;
              }
              uint64_t v205 = (v100 >> 3) + 1;
              uint64_t v206 = 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v101 = (unsigned int *)&v93[-v206];
              v98 -= v206;
              unint64_t v207 = v97 - 16;
              unsigned int v208 = v93 - 16;
              uint64_t v209 = v205 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v210 = *(_OWORD *)v208;
                *((_OWORD *)v207 - 1) = *((_OWORD *)v208 - 1);
                *(_OWORD *)unint64_t v207 = v210;
                v207 -= 32;
                v208 -= 32;
                v209 -= 4;
              }
              while (v209);
              if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_124:
                  uint64_t v102 = *((void *)v101 - 1);
                  v101 -= 2;
                  *((void *)v98 - 1) = v102;
                  v98 -= 8;
                }
                while (v101 != v79);
              }
              uint64_t v93 = (char *)*v244;
              *(void *)(a1 + 104) = v98;
              *(void *)(a1 + 112) = v99;
              *(void *)(a1 + 120) = &v97[8 * v96];
              if (!v93) {
                goto LABEL_127;
              }
LABEL_126:
              operator delete(v93);
              goto LABEL_127;
            }
          }
          else
          {
            int v97 = 0;
            unint64_t v98 = 0;
            *(void *)&def_332C = 0;
            uint64_t v99 = 8;
            if (v93 != (char *)v79) {
              goto LABEL_121;
            }
          }
          *(void *)(a1 + 104) = v98;
          *(void *)(a1 + 112) = v99;
          *(void *)(a1 + 120) = &v97[8 * v96];
          if (!v93) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *v79;
      }
      uint64_t v103 = v81;
LABEL_147:
      sub_A86AC4(v42, 0, (char *)(v81 + (v82 << 6)), (char *)(v103 + ((unint64_t)v79[1] << 6)));
      unint64_t v107 = v240 + *(_DWORD *)(a1 + 96) * (v241 + 1);
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v109 = *(unsigned int **)(a1 + 112);
      if (v107 >= ((char *)v109 - (char *)v108) >> 3) {
        goto LABEL_198;
      }
      unsigned int v110 = v108[2 * v107];
      unsigned int v111 = v108[2 * v107 + 1];
      unsigned int v112 = v111 - v110;
      if (v111 == v110) {
        goto LABEL_198;
      }
      unsigned __int16 v113 = 0;
      unsigned int v114 = 0;
LABEL_150:
      while (2)
      {
        uint64_t v115 = *(unsigned int **)(a1 + 104);
        if (v107 >= (uint64_t)(*(void *)(a1 + 112) - (void)v115) >> 3
          || (unsigned int v116 = v115[2 * v107], v115[2 * v107 + 1] - v116 <= v114))
        {
          long long v231 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v231, "key does not exist and cannot be added");
          goto LABEL_311;
        }
        unint64_t v117 = v116 + v114;
        uint64_t v118 = *(void *)(a1 + 128);
        if (v117 >= (*(void *)(a1 + 136) - v118) >> 6)
        {
          long long v231 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v231, "index out of range");
LABEL_311:
        }
        uint64_t v119 = (long long *)(v118 + (v117 << 6));
        long long v120 = *v119;
        long long v121 = v119[1];
        long long v122 = v119[3];
        long long v254 = v119[2];
        long long v255 = v122;
        long long v252 = v120;
        long long v253 = v121;
        uint64_t v124 = *v115;
        uint64_t v123 = v115[1];
        if (v123 != v124)
        {
          uint64_t v125 = 0;
          int v128 = v255;
          uint64_t v129 = v124 << 6;
          uint64_t v130 = (unsigned __int8 *)(v118 + v129 + 48);
          uint64_t v131 = (v123 << 6) - v129;
          while (1)
          {
            int v132 = *((_DWORD *)v130 - 5);
            if (v132 != 0x7FFFFFFF)
            {
              if (v132 >= SHIDWORD(v253) && *((_DWORD *)v130 - 4) <= (int)v254)
              {
                unsigned int v133 = *((_DWORD *)v130 - 3);
                if (v133 <= DWORD1(v254)
                  && (v133 != DWORD1(v254)
                   || v132 != HIDWORD(v253)
                   || *((_DWORD *)v130 - 1) - 10 * v132 <= HIDWORD(v254) - 10 * HIDWORD(v253))
                  && (*v130 & ~v255) == 0)
                {
                  unint64_t v127 = v113 & 0xFF00 | (unint64_t)(v125 << 8);
                  unsigned __int16 v113 = v113 & 0xFF00 | ((_WORD)v125 << 8);
                  if (++v114 == v112) {
                    goto LABEL_176;
                  }
                  goto LABEL_150;
                }
              }
              if (SHIDWORD(v253) >= v132 && (int)v254 <= *((_DWORD *)v130 - 4))
              {
                unsigned int v134 = *((_DWORD *)v130 - 3);
                if (DWORD1(v254) <= v134
                  && (DWORD1(v254) != v134
                   || HIDWORD(v253) != v132
                   || HIDWORD(v254) - 10 * HIDWORD(v253) <= *((_DWORD *)v130 - 1) - 10 * v132)
                  && (v128 & ~*v130) == 0)
                {
                  *((_DWORD *)v130 - 5) = 0x7FFFFFFF;
                  uint64_t v125 = 1;
                }
              }
            }
            v130 += 64;
            v131 -= 64;
            if (!v131) {
              goto LABEL_155;
            }
          }
        }
        uint64_t v125 = 0;
LABEL_155:
        unint64_t v126 = sub_A86F6C((char **)v42, 0, &v252);
        *(void *)(v126 + 52) = -1;
        *((_DWORD *)v126 + 15) = 0x7FFFFFFF;
        unint64_t v127 = v113 & 0xFF00 | (unint64_t)(v125 << 8);
        unsigned __int16 v113 = v127 | 1;
        if (++v114 != v112) {
          continue;
        }
        break;
      }
LABEL_176:
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v109 = *(unsigned int **)(a1 + 112);
      if (v127)
      {
        if (v109 != v108)
        {
          uint64_t v135 = *(void *)(a1 + 128);
          uint64_t v136 = *v108;
          goto LABEL_179;
        }
        sub_D2BFC(v42, 1uLL);
        long long v108 = *(unsigned int **)(a1 + 104);
        uint64_t v135 = *(void *)(a1 + 128);
        uint64_t v136 = *v108;
        if (*(unsigned int **)(a1 + 112) == v108)
        {
          sub_D2BFC(v244, 1uLL);
          long long v108 = *(unsigned int **)(a1 + 104);
          unint64_t v137 = v135 + (v136 << 6);
          unint64_t v138 = *(void *)(a1 + 128) + ((unint64_t)v108[1] << 6);
          if (v137 == v138)
          {
LABEL_192:
            uint64_t v139 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v108) {
              goto LABEL_193;
            }
            goto LABEL_197;
          }
        }
        else
        {
LABEL_179:
          unint64_t v137 = v135 + (v136 << 6);
          unint64_t v138 = v135 + ((unint64_t)v108[1] << 6);
          if (v137 == v138) {
            goto LABEL_192;
          }
        }
        uint64_t v139 = (void **)(a1 + 104);
        while (*(_DWORD *)(v137 + 28) != 0x7FFFFFFF)
        {
          v137 += 64;
          if (v137 == v138)
          {
            unint64_t v137 = v138;
            if (*(unsigned int **)(a1 + 112) != v108) {
              goto LABEL_197;
            }
            goto LABEL_193;
          }
        }
        if (v137 == v138 || (unint64_t v140 = v137 + 64, v137 + 64 == v138))
        {
          if (*(unsigned int **)(a1 + 112) == v108) {
            goto LABEL_193;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v140 + 28) != 0x7FFFFFFF)
            {
              long long v146 = *(_OWORD *)v140;
              long long v147 = *(_OWORD *)(v140 + 16);
              long long v148 = *(_OWORD *)(v140 + 48);
              *(_OWORD *)(v137 + 32) = *(_OWORD *)(v140 + 32);
              *(_OWORD *)(v137 + 48) = v148;
              *(_OWORD *)unint64_t v137 = v146;
              *(_OWORD *)(v137 + 16) = v147;
              v137 += 64;
            }
            v140 += 64;
          }
          while (v140 != v138);
          long long v108 = (unsigned int *)*v244;
          if (*(void **)(a1 + 112) != *v244) {
            goto LABEL_197;
          }
LABEL_193:
          sub_D2BFC(v139, 1uLL);
          long long v108 = (unsigned int *)*v139;
        }
LABEL_197:
        sub_A86AC4(v139, 0, (char *)v137, (char *)(*(void *)(a1 + 128) + ((unint64_t)v108[1] << 6)));
        long long v108 = *(unsigned int **)(a1 + 104);
        uint64_t v109 = *(unsigned int **)(a1 + 112);
      }
LABEL_198:
      uint64_t v141 = (char *)v109 - (char *)v108;
      if (v109 != v108)
      {
        unsigned int v142 = v241;
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *v108;
LABEL_214:
        uint64_t v160 = v143;
        goto LABEL_232;
      }
      uint64_t v149 = v141 >> 3;
      unint64_t v150 = 1 - (v141 >> 3);
      uint64_t v151 = *(void *)(a1 + 120);
      unsigned int v142 = v241;
      if (v150 <= (v151 - (uint64_t)v109) >> 3)
      {
        bzero(v108, 8 * v150);
        int v158 = &v108[2 * v150];
        *(void *)(a1 + 112) = v158;
        uint64_t v159 = (unsigned int **)(a1 + 104);
        long long v108 = (unsigned int *)*v244;
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *(unsigned int *)*v244;
        if (*v244 != v158) {
          goto LABEL_214;
        }
      }
      else
      {
        uint64_t v152 = v151 - (void)v108;
        uint64_t v153 = v152 >> 2;
        if ((unint64_t)(v152 >> 2) <= 1) {
          uint64_t v153 = 1;
        }
        BOOL v228 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v228) {
          unint64_t v154 = v153;
        }
        if (v154 >> 61) {
          goto LABEL_312;
        }
        uint64_t v155 = 8 * v154;
        unint64_t v156 = (char *)operator new(8 * v154);
        unsigned int v157 = &v156[8 * v149];
        bzero(v157, 8 * v150);
        int v158 = (unsigned int *)&v157[8 * v150];
        *(void *)(a1 + 104) = v157;
        *(void *)(a1 + 112) = v158;
        *(void *)(a1 + 120) = &v156[v155];
        if (v108)
        {
          operator delete(v108);
          int v158 = *(unsigned int **)(a1 + 112);
        }
        uint64_t v159 = (unsigned int **)(a1 + 104);
        long long v108 = (unsigned int *)*v244;
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *(unsigned int *)*v244;
        if (*v244 != v158) {
          goto LABEL_214;
        }
      }
      uint64_t v145 = *(unsigned int **)(a1 + 120);
      if (v145 != v158)
      {
        *(void *)int v158 = 0;
        *(void *)(a1 + 112) = v158 + 2;
        goto LABEL_231;
      }
      uint64_t v161 = 1;
      uint64_t v162 = (char *)v145 - (char *)v108;
      if ((unint64_t)(v162 >> 2) > 1) {
        uint64_t v161 = v162 >> 2;
      }
      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v163 = v161;
      }
      if (v163)
      {
        if (v163 >> 61) {
          goto LABEL_312;
        }
        uint64_t v164 = (char *)operator new(8 * v163);
        uint64_t v165 = v164;
        *(void *)uint64_t v164 = 0;
        uint64_t v166 = (uint64_t)(v164 + 8);
        if (v158 == v108)
        {
LABEL_268:
          unsigned int v142 = v241;
          *(void *)(a1 + 104) = v165;
          *(void *)(a1 + 112) = v166;
          *(void *)(a1 + 120) = &v164[8 * v163];
          if (!v158) {
            goto LABEL_231;
          }
LABEL_230:
          operator delete(v158);
          goto LABEL_231;
        }
      }
      else
      {
        uint64_t v164 = 0;
        uint64_t v165 = 0;
        *(void *)&def_332C = 0;
        uint64_t v166 = 8;
        if (v158 == v108) {
          goto LABEL_268;
        }
      }
      unint64_t v167 = (char *)(v158 - 2) - (char *)v108;
      if (v167 < 0x58 || (unint64_t)((char *)v158 - v164) < 0x20)
      {
        int v168 = v158;
        unsigned int v142 = v241;
        do
        {
LABEL_228:
          uint64_t v169 = *((void *)v168 - 1);
          v168 -= 2;
          *((void *)v165 - 1) = v169;
          v165 -= 8;
        }
        while (v168 != v108);
        goto LABEL_229;
      }
      uint64_t v211 = (v167 >> 3) + 1;
      uint64_t v212 = 8 * (v211 & 0x3FFFFFFFFFFFFFFCLL);
      int v168 = &v158[v212 / 0xFFFFFFFFFFFFFFFCLL];
      v165 -= v212;
      unint64_t v213 = v164 - 16;
      uint64_t v214 = v158 - 4;
      uint64_t v215 = v211 & 0x3FFFFFFFFFFFFFFCLL;
      unsigned int v142 = v241;
      do
      {
        long long v216 = *(_OWORD *)v214;
        *((_OWORD *)v213 - 1) = *((_OWORD *)v214 - 1);
        *(_OWORD *)unint64_t v213 = v216;
        v213 -= 32;
        v214 -= 8;
        v215 -= 4;
      }
      while (v215);
      if (v211 != (v211 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_228;
      }
LABEL_229:
      int v158 = *v159;
      *(void *)(a1 + 104) = v165;
      *(void *)(a1 + 112) = v166;
      *(void *)(a1 + 120) = &v164[8 * v163];
      if (v158) {
        goto LABEL_230;
      }
LABEL_231:
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v160 = *(void *)(a1 + 128);
LABEL_232:
      uint64_t v170 = (unsigned int *)(v143 + (v144 << 6));
      uint64_t v171 = (unsigned int *)(v160 + ((unint64_t)v108[1] << 6));
      if (v170 != v171)
      {
        uint64_t v172 = v246;
        do
        {
          *uint64_t v170 = v142;
          unsigned int v173 = v170[7];
          unsigned int v174 = v170[8];
          v170[3] = v173;
          v170[4] = -1;
          int v175 = *((_DWORD *)v172 + 2);
          int v176 = v175 / -10;
          int v177 = v175 / 10;
          int v178 = v175 % 10;
          if (v175 < 0) {
            char v179 = -5;
          }
          else {
            char v179 = 5;
          }
          int v180 = (char)(v179 + v178);
          v170[7] = v176 + v173 + (((-103 * v180) >> 15) & 1) + ((-103 * v180) >> 10);
          v170[8] = v174 + v177 + (((103 * v180) >> 15) & 1) + ((103 * v180) >> 10);
          v170 += 16;
        }
        while (v170 != v171);
      }
      int v181 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v182 = v181 + v181 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v183 = v243;
        uint64_t v184 = *(unint64_t **)(a1 + 48);
        if (!v184) {
          goto LABEL_247;
        }
      }
      else
      {
        unsigned int v182 = -1;
        unint64_t v183 = v243;
        uint64_t v184 = *(unint64_t **)(a1 + 48);
        if (!v184)
        {
LABEL_247:
          int v188 = 0x80000000;
          goto LABEL_248;
        }
      }
      if (*v184 > v183)
      {
        unsigned int v185 = 0;
        unsigned int v186 = *(_DWORD *)(a1 + 100) + v237;
        unsigned int v187 = v186;
        while (v185 <= v186)
        {
          int v188 = *(_DWORD *)sub_A3F53C(v184 + 2, v184[1] * v183 + v187);
          v185 += 2;
          v187 -= 2;
          if (v188 != 0x7FFFFFFF) {
            goto LABEL_248;
          }
        }
      }
      int v188 = 0x7FFFFFFF;
LABEL_248:
      unint64_t v189 = v243 + 1;
      if (!sub_AA3708(v244, 0, v239 + v181 * v189, v181 * v189 + 1, v182, v188)) {
        goto LABEL_252;
      }
      if (*(void *)(a1 + 240) <= v183) {
        sub_A3E96C((uint64_t)v238, v189, 0);
      }
      uint64_t v190 = *v238;
      unint64_t v191 = v183 >> 6;
      uint64_t v192 = 1 << v183;
      if ((*(void *)(*v238 + 8 * (v183 >> 6)) & (1 << v183)) != 0)
      {
LABEL_252:
        unint64_t v9 = (unint64_t)v247;
        unint64_t v6 = (void *)((char *)v246 + 12);
        uint64_t v246 = v6;
        if (v6 != v247) {
          goto LABEL_253;
        }
        goto LABEL_288;
      }
      unint64_t v194 = *(char **)(a1 + 264);
      unint64_t v193 = *(void *)(a1 + 272);
      if ((unint64_t)v194 < v193)
      {
        *(_DWORD *)unint64_t v194 = v243;
        uint64_t v195 = (uint64_t)(v194 + 4);
        goto LABEL_287;
      }
      uint64_t v196 = (char *)*v233;
      uint64_t v197 = v194 - (unsigned char *)*v233;
      uint64_t v198 = v197 >> 2;
      unint64_t v199 = (v197 >> 2) + 1;
      if (v199 >> 62) {
        sub_2E00();
      }
      uint64_t v200 = v193 - (void)v196;
      if (v200 >> 1 > v199) {
        unint64_t v199 = v200 >> 1;
      }
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v235 = v199;
      if (v199)
      {
        if (v199 >> 62) {
          goto LABEL_312;
        }
        char v201 = operator new(4 * v199);
        int v202 = (unsigned int *)&v201[4 * v198];
        *int v202 = v243;
        uint64_t v195 = (uint64_t)(v202 + 1);
        if (v194 != v196)
        {
LABEL_265:
          unint64_t v203 = v194 - 4 - v196;
          unint64_t v204 = v235;
          if (v203 < 0x2C) {
            goto LABEL_319;
          }
          if ((unint64_t)(v194 - &v201[v197]) < 0x20) {
            goto LABEL_319;
          }
          uint64_t v217 = (v203 >> 2) + 1;
          uint64_t v218 = 4 * (v217 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v219 = &v194[-v218];
          int v202 = (unsigned int *)((char *)v202 - v218);
          long long v220 = &v201[4 * v198 - 16];
          long long v221 = v194 - 16;
          uint64_t v222 = v217 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v223 = *(_OWORD *)v221;
            *(v220 - 1) = *((_OWORD *)v221 - 1);
            *long long v220 = v223;
            v220 -= 2;
            v221 -= 32;
            v222 -= 8;
          }
          while (v222);
          unint64_t v194 = v219;
          if (v217 != (v217 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_319:
            do
            {
              unsigned int v224 = *((_DWORD *)v194 - 1);
              v194 -= 4;
              *--int v202 = v224;
            }
            while (v194 != v196);
          }
          goto LABEL_285;
        }
      }
      else
      {
        char v201 = 0;
        int v202 = (unsigned int *)(4 * v198);
        *(_DWORD *)(4 * v198) = v243;
        uint64_t v195 = 4 * v198 + 4;
        if (v194 != v196) {
          goto LABEL_265;
        }
      }
      unint64_t v204 = v235;
LABEL_285:
      *(void *)(a1 + 256) = v202;
      *(void *)(a1 + 264) = v195;
      *(void *)(a1 + 272) = &v201[4 * v204];
      if (v196)
      {
        uint64_t v225 = v195;
        operator delete(v196);
        uint64_t v195 = v225;
        uint64_t v190 = *v238;
      }
LABEL_287:
      *(void *)(a1 + 264) = v195;
      *(void *)(v190 + 8 * v191) |= v192;
      unint64_t v9 = (unint64_t)v247;
      unint64_t v6 = (void *)((char *)v246 + 12);
      uint64_t v246 = v6;
      if (v6 != v247)
      {
LABEL_253:
        int v8 = v250;
        unint64_t v10 = v249[0];
        if (*(unsigned char *)(v245 + 16)) {
          goto LABEL_289;
        }
        goto LABEL_10;
      }
LABEL_288:
      unint64_t v6 = v248;
      unint64_t v10 = v249[0];
      uint64_t v246 = v248;
      int v8 = 1;
      unsigned __int8 v250 = 1;
      if (*(unsigned char *)(v245 + 16))
      {
LABEL_289:
        if (v8) {
          unint64_t v226 = v10;
        }
        else {
          unint64_t v226 = v9;
        }
        if ((unint64_t)v6 < v226)
        {
          while (1)
          {
            unint64_t v227 = __ROR8__(*v6, 32);
            BOOL v228 = HIDWORD(v227) != 1 || (v227 + 3) >= 2;
            if (!v228) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v245 + 4120)))
            {
              LOBYTE(v8) = v250;
              unint64_t v6 = v246;
              unint64_t v9 = (unint64_t)v247;
              break;
            }
            unint64_t v9 = (unint64_t)v247;
            unint64_t v6 = (void *)((char *)v246 + 12);
            uint64_t v246 = v6;
            if (v6 == v247)
            {
              unint64_t v6 = v248;
              uint64_t v246 = v248;
              LOBYTE(v8) = 1;
              unsigned __int8 v250 = 1;
              if ((unint64_t)v248 >= v249[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v8) = v250;
              uint64_t v229 = &v247;
              if (v250) {
                uint64_t v229 = v249;
              }
              if ((unint64_t)v6 >= *v229) {
                break;
              }
            }
          }
          unint64_t v10 = v249[0];
        }
      }
LABEL_10:
      if ((_BYTE)v8) {
        unint64_t v9 = v10;
      }
      if ((unint64_t)v6 >= v9) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_56;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unsigned int v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_60;
      }
      goto LABEL_31;
    }
LABEL_59:
    uint64_t v24 = v19;
    if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_60;
    }
    goto LABEL_31;
  }
LABEL_308:
  double result = sub_72688((uint64_t)v251) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_AA2624(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AA2638(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AA264C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AA2660(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AA2674(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  int v8 = *(unsigned int **)(a1 + 256);
  unsigned int v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  unint64_t v204 = (void **)(a1 + 328);
  long long v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    uint64_t v211 = v8;
    unint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      unsigned int v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        unsigned int v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            int v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      uint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        unint64_t v65 = (char **)(v13 + 88);
        uint64_t v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          unint64_t v65 = (char **)(v13 + 88);
          unsigned int v72 = &v71[8 * v67];
          *(void *)unsigned int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          long long v76 = &v63[-v75];
          v72 -= v75;
          uint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)uint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          uint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          uint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unsigned int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)uint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 5);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      uint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 5);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          uint64_t v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unsigned int v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unsigned int v101 = v200;
              goto LABEL_135;
            }
            unsigned int v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            int v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            unint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] < v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        int v168 = v213 + 2;
        unint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          unint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        long long v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      uint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        unint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              unint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            unint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              int v188 = v213 + 2;
              unint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                unint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              long long v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        unint64_t v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)unint64_t v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          uint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] >= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          uint64_t v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          unsigned int v173 = &v135[4 * v130 - 16];
          unsigned int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          unint64_t v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        uint64_t v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] >= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)unint64_t v203 = 4 * v118;
            int v202 = operator new(4 * v118);
            unint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              uint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          unint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            unint64_t v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    int v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_AA35AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AA35C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AA35D4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_AA3CC4(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_AA3708(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A9A3AC(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_A9A3AC(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) >= a6)
      {
        __int16 v22 = sub_AA3954((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_AA3954((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      unsigned int v27 = (long long *)sub_A9A3AC(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) >= a6)
      {
        if (sub_AA3B30(a1, (uint64_t)&v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_AA3954((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_AA3954((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_AA3954(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    int v9 = (unsigned int *)(*(void *)a1 + 8 * a3);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v11 != v10)
    {
      unsigned __int8 v12 = 0;
      int v16 = *(unsigned __int8 *)(a2 + 48);
      uint64_t v17 = v10 << 6;
      int v18 = (unsigned __int8 *)((v10 << 6) + *(void *)(a1 + 24) + 48);
      uint64_t v19 = (v11 << 6) - v17;
      while (1)
      {
        int v20 = *((_DWORD *)v18 - 5);
        if (v20 != 0x7FFFFFFF)
        {
          int v21 = *(_DWORD *)(a2 + 28);
          if (v20 >= v21 && *((_DWORD *)v18 - 4) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v22 = *(_DWORD *)(a2 + 36);
            unsigned int v23 = *((_DWORD *)v18 - 3);
            if (v23 <= v22
              && (v23 != v22 || v20 != v21 || *((_DWORD *)v18 - 1) - 10 * v20 <= *(_DWORD *)(a2 + 44) - 10 * v21)
              && (*v18 & ~*(unsigned __int8 *)(a2 + 48)) == 0)
            {
              return (unint64_t)v12 << 8;
            }
          }
          if (v21 >= v20 && *(_DWORD *)(a2 + 32) <= *((_DWORD *)v18 - 4))
          {
            unsigned int v24 = *((_DWORD *)v18 - 3);
            unsigned int v25 = *(_DWORD *)(a2 + 36);
            if (v25 <= v24
              && (v25 != v24 || v21 != v20 || *(_DWORD *)(a2 + 44) - 10 * v21 <= *((_DWORD *)v18 - 1) - 10 * v20)
              && (v16 & ~*v18) == 0)
            {
              *((_DWORD *)v18 - 5) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 64;
        v19 -= 64;
        if (!v19) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  __int16 v13 = sub_A86F6C((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

uint64_t sub_AA3B30(void **a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      int v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC(a1, v14 - v13);
      unint64_t v15 = &v11[64 * v12];
      unint64_t v16 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
      if (v15 == (char *)v16) {
        return 0;
      }
      goto LABEL_13;
    }
    if (v14 < v13) {
      a1[1] = &v7[8 * v14];
    }
  }
  unint64_t v15 = &v11[64 * v12];
  unint64_t v16 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
  if (v15 == (char *)v16) {
    return 0;
  }
LABEL_13:
  int v17 = *(_DWORD *)(a2 + 28);
  unsigned int v18 = *(_DWORD *)(a2 + 36);
  while (1)
  {
    int v19 = *((_DWORD *)v15 + 7);
    if (v19 != 0x7FFFFFFF && v19 >= v17 && *((_DWORD *)v15 + 8) <= *(_DWORD *)(a2 + 32))
    {
      unsigned int v21 = *((_DWORD *)v15 + 9);
      if (v21 <= v18
        && (v21 != v18 || v19 != v17 || *((_DWORD *)v15 + 11) - 10 * v19 <= *(_DWORD *)(a2 + 44) - 10 * v17)
        && (v15[48] & ~*(unsigned __int8 *)(a2 + 48)) == 0)
      {
        break;
      }
    }
    v15 += 64;
    if (v15 == (char *)v16) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_AA3CC4(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_A9A3AC(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_AA3954((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

uint64_t sub_AA3DA8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v283 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v239 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v283);
  unint64_t v251 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v281, *(void *)(v4 + 24), v5);
  __int16 v7 = v281;
  if ((unint64_t)v281 < v282)
  {
    uint64_t v8 = (void **)(v4 + 104);
    uint64_t v249 = v4 + 360;
    unsigned __int8 v250 = (void **)(v4 + 104);
    int v238 = a2 + 2;
    int v236 = ~a2;
    int v237 = (uint64_t *)(v4 + 184);
    int v240 = a2 + 1;
    unint64_t v252 = HIDWORD(v5);
    uint64_t v241 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v242 = *(unsigned int *)v7;
      sub_A86790(v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v269, *(void *)(v4 + 24), v251, v239, 0, 1);
      unint64_t v9 = v273;
      BOOL v10 = (unint64_t)v273 < v272 || (unint64_t)v273 >= v274;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v281 + 4;
      int v281 = v7;
      if ((unint64_t)v7 >= v282) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555) {
            goto LABEL_328;
          }
        }
        else
        {
          uint64_t v66 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v66) & v28;
            uint64_t v67 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v67;
            unsigned int v34 = v67[1];
            ++v66;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555)
          {
LABEL_328:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((unint64_t v70 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v70[1])
            ? (BOOL v71 = *(_DWORD *)(v12 + 32) == *v70)
            : (BOOL v71 = 0),
              v71))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v65 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v69 + 1;
          uint64_t v65 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v62 = *(void *)(v12 + 40);
      uint64_t v61 = *(void *)(v12 + 48);
      if ((unint64_t)(v61 - v62) >= 0x1555555555555555) {
        goto LABEL_328;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v62
        && ((uint64_t v63 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v63[1])
          ? (BOOL v64 = *(_DWORD *)(v12 + 32) == *v63)
          : (BOOL v64 = 0),
            v64))
      {
        *(void *)(v12 + 40) = v62 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v61 + 1;
      }
      uint64_t v65 = 3 * v24;
LABEL_95:
      uint64_t v72 = 4 * v65;
      uint64_t v73 = v29 + v72;
      *(void *)uint64_t v73 = v11;
      *(_DWORD *)(v73 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v72;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v268 = v46;
        uint64_t result = sub_BD5C18(v249, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v74 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v74 + 1;
      *(_DWORD *)(v45 + 8) = v74;
      long long v76 = *(unint64_t **)(v12 + 96);
      unint64_t v75 = *(void *)(v12 + 104);
      if ((unint64_t)v76 < v75)
      {
        unint64_t *v76 = v11;
        uint64_t v77 = (uint64_t)(v76 + 1);
        goto LABEL_119;
      }
      uint64_t v78 = *(char **)(v12 + 88);
      uint64_t v79 = ((char *)v76 - v78) >> 3;
      unint64_t v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v81 = v75 - (void)v78;
      if (v81 >> 2 > v80) {
        unint64_t v80 = v81 >> 2;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v82 = v80;
      }
      if (v82)
      {
        if (v82 >> 61) {
          goto LABEL_330;
        }
        unint64_t v83 = (char *)operator new(8 * v82);
        uint64_t v84 = (unint64_t *)&v83[8 * v79];
        *uint64_t v84 = v11;
        uint64_t v77 = (uint64_t)(v84 + 1);
        if (v76 != (unint64_t *)v78)
        {
LABEL_107:
          unint64_t v85 = (char *)(v76 - 1) - v78;
          if (v85 < 0x58)
          {
            uint64_t v4 = v241;
            goto LABEL_116;
          }
          uint64_t v4 = v241;
          if ((unint64_t)(v78 - v83) < 0x20) {
            goto LABEL_335;
          }
          uint64_t v86 = (v85 >> 3) + 1;
          uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v88 = &v76[v87 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v84 = (unint64_t *)((char *)v84 - v87);
          unint64_t v89 = &v83[8 * v79 - 16];
          unint64_t v90 = v76 - 2;
          uint64_t v91 = v86 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v92 = *(_OWORD *)v90;
            *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
            *(_OWORD *)unint64_t v89 = v92;
            v89 -= 32;
            v90 -= 4;
            v91 -= 4;
          }
          while (v91);
          long long v76 = v88;
          if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_335:
            do
            {
LABEL_116:
              unint64_t v93 = *--v76;
              *--uint64_t v84 = v93;
            }
            while (v76 != (unint64_t *)v78);
          }
          long long v76 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v84;
          *(void *)(v12 + 96) = v77;
          *(void *)(v12 + 104) = &v83[8 * v82];
          if (!v76) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v76);
          goto LABEL_119;
        }
      }
      else
      {
        unint64_t v83 = 0;
        uint64_t v84 = (unint64_t *)(8 * v79);
        *(void *)(8 * v79) = v11;
        uint64_t v77 = 8 * v79 + 8;
        if (v76 != (unint64_t *)v78) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v241;
      *(void *)(v12 + 88) = v84;
      *(void *)(v12 + 96) = v77;
      *(void *)(v12 + 104) = &v83[8 * v82];
      if (v76) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v77;
      uint64_t v8 = v250;
      unsigned int v268 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v249, v268, v11);
      if (result)
      {
LABEL_51:
        unsigned int v47 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v47) {
          goto LABEL_179;
        }
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        if (v49 == v48) {
          goto LABEL_179;
        }
        int v50 = v278;
        uint64_t v51 = v276;
        uint64_t v52 = v273;
        uint64_t v53 = v271;
        unint64_t v54 = ((unint64_t)v273 - v272) >> 4;
        uint64_t v55 = v48 << 6;
        uint64_t v56 = (int *)(*(void *)(v4 + 128) + (v48 << 6) + 60);
        uint64_t v57 = (v49 << 6) - v55;
        do
        {
          unsigned int v60 = *(v56 - 2);
          if (v50)
          {
            unsigned int v279 = *(v56 - 1);
            int v58 = *v56;
            int v280 = *v56;
          }
          else
          {
            int v58 = *(_DWORD *)(v51 + 12 * v60);
          }
          uint64_t v59 = (unsigned int *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 6));
          *(v56 - 8) = *(unsigned int *)((char *)&v59[2 * (*(_DWORD *)(v51 + 12 * v60 + 4) + v54) + 2]
                                       + *v59)
                     + v58
                     - *((_DWORD *)v52 + 2);
          v56 += 16;
          v57 -= 64;
        }
        while (v57);
        uint64_t v277 = (int *)(v51 + 12 * v60);
        sub_AA54BC((char *)v8, 0);
        if ((*((unsigned char *)v273 + 15) & 2) != 0
          && (!v275
           || (*(_DWORD *)(v275 + 4 * (((unint64_t)v273 - v272) >> 4)) & v242) == 0))
        {
          int v98 = *(_DWORD *)(v4 + 96);
          if (*(unsigned char *)(v4 + 20))
          {
            unsigned int v99 = v98 + v98 * *(_DWORD *)(v4 + 352);
            unint64_t v100 = v268;
            unsigned int v101 = *(unint64_t **)(v4 + 48);
            if (v101) {
              goto LABEL_131;
            }
LABEL_138:
            int v105 = 0x80000000;
          }
          else
          {
            unsigned int v99 = -1;
            unint64_t v100 = v268;
            unsigned int v101 = *(unint64_t **)(v4 + 48);
            if (!v101) {
              goto LABEL_138;
            }
LABEL_131:
            if (*v101 > v100)
            {
              unsigned int v102 = 0;
              unsigned int v103 = *(_DWORD *)(v241 + 100) + v236;
              unsigned int v104 = v103;
              while (v102 <= v103)
              {
                int v105 = *(_DWORD *)sub_A3F53C(v101 + 2, v101[1] * v100 + v104);
                v102 += 2;
                v104 -= 2;
                if (v105 != 0x7FFFFFFF) {
                  goto LABEL_139;
                }
              }
            }
            int v105 = 0x7FFFFFFF;
          }
LABEL_139:
          uint64_t v8 = v250;
          uint64_t v4 = v241;
          if (sub_AA576C(v250, 0, v238 + v98 + v98 * v100, v98 + v98 * v100, v99, v105)) {
            sub_A3EF14(v237, &v268);
          }
        }
        uint64_t v106 = *(unsigned int **)(v4 + 104);
        unint64_t v107 = *(unsigned int **)(v4 + 112);
        uint64_t v108 = (char *)v107 - (char *)v106;
        if (v107 != v106)
        {
          uint64_t v109 = *(void *)(v4 + 128);
          uint64_t v110 = *v106;
          goto LABEL_155;
        }
        uint64_t v112 = v108 >> 3;
        unint64_t v113 = 1 - (v108 >> 3);
        uint64_t v114 = *(void *)(v4 + 120);
        if (v113 <= (v114 - (uint64_t)v107) >> 3)
        {
          bzero(*(void **)(v4 + 112), 8 * v113);
          unint64_t v121 = (char *)&v107[2 * v113];
          *(void *)(v4 + 112) = v121;
          uint64_t v106 = (unsigned int *)*v8;
          uint64_t v109 = *(void *)(v4 + 128);
          uint64_t v110 = *(unsigned int *)*v8;
          if (*v8 != v121) {
            goto LABEL_155;
          }
          goto LABEL_143;
        }
        uint64_t v115 = v114 - (void)v106;
        uint64_t v116 = v115 >> 2;
        if ((unint64_t)(v115 >> 2) <= 1) {
          uint64_t v116 = 1;
        }
        BOOL v10 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v10) {
          unint64_t v117 = v116;
        }
        if (v117 >> 61) {
LABEL_330:
        }
          sub_188D718();
        uint64_t v118 = 8 * v117;
        unsigned int v119 = (char *)operator new(8 * v117);
        size_t v120 = &v119[8 * v112];
        bzero(v120, 8 * v113);
        *(void *)(v4 + 104) = v120;
        *(void *)(v4 + 112) = &v120[8 * v113];
        *(void *)(v4 + 120) = &v119[v118];
        if (!v107)
        {
          unint64_t v121 = &v120[8 * v113];
          uint64_t v8 = v250;
          uint64_t v106 = (unsigned int *)*v250;
          uint64_t v109 = *(void *)(v4 + 128);
          uint64_t v110 = *(unsigned int *)*v250;
          if (*v250 == v121) {
            goto LABEL_143;
          }
LABEL_155:
          long long v122 = (_DWORD *)(v109 + (v110 << 6));
          unint64_t v123 = v109 + ((unint64_t)v106[1] << 6);
          if (v122 != (_DWORD *)v123) {
            goto LABEL_172;
          }
          goto LABEL_178;
        }
        operator delete(v107);
        unint64_t v121 = *(char **)(v4 + 112);
        uint64_t v8 = v250;
        uint64_t v106 = (unsigned int *)*v250;
        uint64_t v109 = *(void *)(v4 + 128);
        uint64_t v110 = *(unsigned int *)*v250;
        if (*v250 != v121) {
          goto LABEL_155;
        }
LABEL_143:
        unsigned int v111 = *(char **)(v4 + 120);
        if (v111 != v121)
        {
          *(void *)unint64_t v121 = 0;
          *(void *)(v4 + 112) = v121 + 8;
          goto LABEL_171;
        }
        uint64_t v124 = 1;
        uint64_t v125 = v111 - (char *)v106;
        if ((unint64_t)(v125 >> 2) > 1) {
          uint64_t v124 = v125 >> 2;
        }
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v126 = v124;
        }
        if (v126)
        {
          if (v126 >> 61) {
            goto LABEL_330;
          }
          unint64_t v127 = (char *)operator new(8 * v126);
          int v128 = v127;
          *(void *)unint64_t v127 = 0;
          uint64_t v129 = (uint64_t)(v127 + 8);
          if (v121 != (char *)v106)
          {
LABEL_165:
            unint64_t v130 = v121 - 8 - (char *)v106;
            if (v130 < 0x58 || (unint64_t)(v121 - v127) < 0x20)
            {
              unint64_t v131 = (unsigned int *)v121;
              uint64_t v4 = v241;
              goto LABEL_168;
            }
            uint64_t v224 = (v130 >> 3) + 1;
            uint64_t v225 = 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v131 = (unsigned int *)&v121[-v225];
            v128 -= v225;
            unint64_t v226 = v127 - 16;
            unint64_t v227 = v121 - 16;
            uint64_t v228 = v224 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v4 = v241;
            do
            {
              long long v229 = *(_OWORD *)v227;
              *((_OWORD *)v226 - 1) = *((_OWORD *)v227 - 1);
              *(_OWORD *)unint64_t v226 = v229;
              v226 -= 32;
              v227 -= 32;
              v228 -= 4;
            }
            while (v228);
            if (v224 != (v224 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_168:
                uint64_t v132 = *((void *)v131 - 1);
                v131 -= 2;
                *((void *)v128 - 1) = v132;
                v128 -= 8;
              }
              while (v131 != v106);
            }
            unint64_t v121 = (char *)*v8;
            *(void *)(v4 + 104) = v128;
            *(void *)(v4 + 112) = v129;
            *(void *)(v4 + 120) = &v127[8 * v126];
            if (v121) {
LABEL_170:
            }
              operator delete(v121);
LABEL_171:
            long long v122 = (_DWORD *)(v109 + (v110 << 6));
            unint64_t v123 = *(void *)(v4 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(v4 + 104) + 4) << 6);
            if (v122 != (_DWORD *)v123)
            {
LABEL_172:
              int v133 = v278;
              uint64_t v134 = v276;
              uint64_t v135 = v271;
              unint64_t v136 = ((unint64_t)v273 - v272) >> 4;
              do
              {
                unsigned int v139 = v122[13];
                if (v133)
                {
                  unsigned int v279 = v122[14];
                  int v137 = v122[15];
                  int v280 = v137;
                }
                else
                {
                  int v137 = *(_DWORD *)(v134 + 12 * v139);
                }
                uint64_t v138 = (unsigned int *)((char *)v135 + *(unsigned __int16 *)((char *)v135 - *v135 + 6));
                v122[7] = *(unsigned int *)((char *)&v138[2 * (*(_DWORD *)(v134 + 12 * v139 + 4) + v136)
                                                        + 1]
                                          + *v138)
                        + v137;
                v122 += 16;
              }
              while (v122 != (_DWORD *)v123);
              uint64_t v277 = (int *)(v134 + 12 * v139);
            }
LABEL_178:
            uint64_t result = (uint64_t)sub_AA54BC((char *)v8, 0);
LABEL_179:
            if ((*((unsigned char *)v273 + 15) & 1) == 0) {
              goto LABEL_186;
            }
            if (v275)
            {
              if (*(_DWORD *)(v275 + 4 * (((unint64_t)v273 - v272) >> 4)) != v242) {
                goto LABEL_186;
              }
            }
            else if (v242)
            {
              goto LABEL_186;
            }
            unint64_t v140 = v240 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v268;
            uint64_t v141 = *(void *)(v4 + 104);
            if (v140 >= (*(void *)(v4 + 112) - v141) >> 3) {
              goto LABEL_186;
            }
            long long v144 = (int *)(v141 + 8 * v140);
            int v142 = *v144;
            int v143 = v144[1];
            int v145 = v143 - *v144;
            if (v143 == *v144) {
              goto LABEL_186;
            }
            unsigned int v153 = 0;
            int v243 = v143 - v142;
            while (2)
            {
              uint64_t v154 = *(void *)(v4 + 104);
              if (v140 >= (*(void *)(v4 + 112) - v154) >> 3
                || (v156 = (int *)(v154 + 8 * v140), int v155 = *v156, v156[1] - *v156 <= v153))
              {
                uint64_t v230 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v230, "key does not exist and cannot be added");
                goto LABEL_327;
              }
              unint64_t v157 = v155 + v153;
              uint64_t v158 = *(void *)(v4 + 128);
              if (v157 >= (*(void *)(v4 + 136) - v158) >> 6)
              {
                uint64_t v230 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v230, "index out of range");
LABEL_327:
              }
              uint64_t v159 = v158 + (v157 << 6);
              int v160 = *(_DWORD *)(v159 + 28);
              if (v278)
              {
                uint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v269, v160, 1);
                if ((result & 1) == 0) {
                  goto LABEL_213;
                }
LABEL_221:
                uint64_t v246 = *(void *)(v159 + 20);
                int v247 = *(_DWORD *)(v159 + 40);
                int v248 = *(_DWORD *)(v159 + 32);
                int v244 = *(_DWORD *)(v159 + 36);
                int v245 = *(_DWORD *)(v159 + 44);
                int v161 = *(unsigned __int8 *)(v159 + 48);
                __int16 v266 = *(_WORD *)(v159 + 49);
                uint64_t v162 = (void *)(*(void *)(v4 + 24) + 4136);
                char v267 = *(unsigned char *)(v159 + 51);
                if (sub_A10E20(v162, v252))
                {
                  unint64_t v163 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v251);
                }
                else
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v222 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                    uint64_t v4 = v241;
                  }
                  uint64_t v164 = *v162;
                  if (dword_24F7300 == v252)
                  {
                    uint64_t v165 = *(unsigned int **)(*(void *)(v164 + 3976) + 72);
                    if (!v165)
                    {
                      uint64_t v234 = __cxa_allocate_exception(0x40uLL);
                      unsigned int v284 = (char *)operator new(0x40uLL);
                      long long v285 = xmmword_20B9A90;
                      strcpy(v284, "Realtime stop pattern quad data requested on nullptr buffer");
                      unint64_t v235 = (void *)sub_2F404((uint64_t)v234, (long long *)&v284);
                    }
                    long long v166 = (int *)((char *)v165 + *v165);
                    unsigned int v167 = (unsigned __int16 *)((char *)v166 - *v166);
                    if (*v167 >= 5u && (uint64_t v168 = v167[2]) != 0) {
                      unint64_t v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                    }
                    else {
                      unint64_t v169 = 0;
                    }
                    unint64_t v163 = (int *)sub_A1139C(v169, v251);
                  }
                  else
                  {
                    unint64_t v163 = (int *)sub_A11500(v164 + 24, v251, 0, "stop pattern");
                  }
                }
                uint64_t v170 = v163;
                uint64_t v171 = *v162;
                uint64_t v172 = (unsigned __int16 *)((char *)v163 - *v163);
                if (*v172 >= 0xFu && (uint64_t v173 = v172[7]) != 0)
                {
                  uint64_t v174 = v171 + 3896;
                  char v175 = sub_49442C(*(unsigned __int16 *)((char *)v163 + v173));
                  if ((sub_C25A10(v174, v175) & 1) == 0)
                  {
LABEL_235:
                    long long v176 = (unsigned __int16 *)((char *)v170 - *v170);
                    uint64_t v8 = v250;
                    if (*v176 >= 0xBu && (uint64_t v177 = v176[5]) != 0)
                    {
                      int v178 = sub_A2BF48(*((unsigned char *)v170 + v177));
                      if (sub_A10E20(v162, v252))
                      {
LABEL_241:
                        unint64_t v181 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v251);
                        unsigned int v182 = (unsigned __int16 *)((char *)v181 - *v181);
                        if (*v182 < 0xFu) {
                          goto LABEL_257;
                        }
LABEL_254:
                        uint64_t v189 = v182[7];
                        if (!v189) {
                          goto LABEL_257;
                        }
                        char v190 = 0;
                        unsigned int v191 = *(unsigned __int16 *)((char *)v181 + v189);
                        uint64_t result = 0x7FFFFFFFLL;
                        switch(v191)
                        {
                          case 0u:
                          case 1u:
                          case 2u:
                          case 0xCu:
                            goto LABEL_258;
                          case 3u:
                            char v190 = 1;
                            goto LABEL_258;
                          case 4u:
                            char v190 = 2;
                            goto LABEL_258;
                          case 5u:
                          case 6u:
                          case 7u:
                            goto LABEL_256;
                          case 8u:
                          case 9u:
                          case 0xAu:
                          case 0xBu:
                            goto LABEL_305;
                          default:
                            uint64_t result = 0x7FFFFFFFLL;
                            if (v191 != 900)
                            {
LABEL_305:
                              uint64_t v221 = ((5243 * (v191 >> 2)) >> 17) - 1;
                              if (v221 > 0xB) {
LABEL_256:
                              }
                                char v190 = 3;
                              else {
                                char v190 = byte_20EC3B6[v221];
                              }
                            }
                            break;
                        }
                        goto LABEL_258;
                      }
                    }
                    else
                    {
                      int v178 = sub_A2BF48(0);
                      if (sub_A10E20(v162, v252)) {
                        goto LABEL_241;
                      }
                    }
LABEL_244:
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v223 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                      uint64_t v4 = v241;
                      uint64_t v8 = v250;
                    }
                    uint64_t v183 = *v162;
                    if (dword_24F7300 == v252)
                    {
                      unint64_t v184 = *(unsigned int **)(*(void *)(v183 + 3976) + 72);
                      if (!v184)
                      {
                        uint64_t v232 = __cxa_allocate_exception(0x40uLL);
                        unsigned int v284 = (char *)operator new(0x40uLL);
                        long long v285 = xmmword_20B9A90;
                        strcpy(v284, "Realtime stop pattern quad data requested on nullptr buffer");
                        uint64_t v233 = (void *)sub_2F404((uint64_t)v232, (long long *)&v284);
                      }
                      unint64_t v185 = (int *)((char *)v184 + *v184);
                      uint8x8_t v186 = (unsigned __int16 *)((char *)v185 - *v185);
                      if (*v186 >= 5u && (uint64_t v187 = v186[2]) != 0) {
                        int v188 = (unsigned int *)((char *)v185 + v187 + *(unsigned int *)((char *)v185 + v187));
                      }
                      else {
                        int v188 = 0;
                      }
                      unint64_t v181 = (int *)sub_A1139C(v188, v251);
                      unsigned int v182 = (unsigned __int16 *)((char *)v181 - *v181);
                      if (*v182 >= 0xFu) {
                        goto LABEL_254;
                      }
                    }
                    else
                    {
                      unint64_t v181 = (int *)sub_A11500(v183 + 24, v251, 0, "stop pattern");
                      unsigned int v182 = (unsigned __int16 *)((char *)v181 - *v181);
                      if (*v182 >= 0xFu) {
                        goto LABEL_254;
                      }
                    }
LABEL_257:
                    char v190 = 3;
                    uint64_t result = 0x7FFFFFFFLL;
LABEL_258:
                    int v192 = (1 << v190) | v161;
                    int v193 = v280;
                    unint64_t v194 = 0xFFFFFFFF00000000;
                    if (v278) {
                      unint64_t v194 = (unint64_t)v279 << 32;
                    }
                    unint64_t v195 = (-1431655765 * (((unint64_t)v277 - v276) >> 2)) | v194;
                    if (!v278) {
                      int v193 = 0x7FFFFFFF;
                    }
                    uint64_t v196 = (unsigned int *)((char *)v271 + *(unsigned __int16 *)((char *)v271 - *v271 + 6));
                    unsigned int v197 = (char *)v196 + *v196;
                    char v198 = &v280;
                    if (!v278) {
                      char v198 = v277;
                    }
                    int v199 = *v198;
                    uint64_t v200 = &v197[8 * v277[1] + 8 * (((unint64_t)v273 - v272) >> 4)];
                    int v201 = *((_DWORD *)v200 + 1);
                    LODWORD(v200) = 10 * (*(_DWORD *)(v159 + 28) - v199 - *((_DWORD *)v200 + 2));
                    LODWORD(v253) = ((unint64_t)v273 - v272) >> 4;
                    *(void *)((char *)&v253 + 4) = v195;
                    HIDWORD(v253) = v193;
                    unsigned int v254 = v283;
                    uint64_t v255 = v246;
                    int v256 = v201 + v199;
                    int v257 = v248;
                    unsigned int v258 = v178 + v244;
                    int v259 = v247;
                    int v260 = v245 - (v200 & ~((int)v200 >> 31));
                    unsigned __int8 v261 = v192;
                    __int16 v262 = v266;
                    char v263 = v267;
                    unint64_t v264 = v195;
                    int v265 = v193;
                    int v202 = *(unsigned int **)(v4 + 104);
                    if (*(unsigned int **)(v4 + 112) == v202
                      || (uint64_t v203 = *v202,
                          uint64_t v204 = *(unsigned int *)(*(void *)(v4 + 104) + 4),
                          v204 == v203))
                    {
                      uint64_t result = (uint64_t)sub_A86F6C((char **)v8, 0, &v253);
                    }
                    else
                    {
                      char v205 = 0;
                      uint64_t v206 = v203 << 6;
                      unint64_t v207 = (unsigned __int8 *)(*(void *)(v4 + 128) + (v203 << 6) + 48);
                      uint64_t v208 = (v204 << 6) - v206;
                      do
                      {
                        int v209 = *((_DWORD *)v207 - 5);
                        if (v209 != 0x7FFFFFFF)
                        {
                          if (v209 >= v256 && *((_DWORD *)v207 - 4) <= v257)
                          {
                            unsigned int v210 = *((_DWORD *)v207 - 3);
                            if (v210 <= v258
                              && (v210 != v258 || v209 != v256 || *((_DWORD *)v207 - 1) - 10 * v209 <= v260 - 10 * v256)
                              && (*v207 & ~v261) == 0)
                            {
                              goto LABEL_285;
                            }
                          }
                          if (v256 >= v209 && v257 <= *((_DWORD *)v207 - 4))
                          {
                            unsigned int v211 = *((_DWORD *)v207 - 3);
                            if (v258 <= v211
                              && (v258 != v211 || v256 != v209 || v260 - 10 * v256 <= *((_DWORD *)v207 - 1) - 10 * v209)
                              && (v192 & ~*v207) == 0)
                            {
                              *((_DWORD *)v207 - 5) = 0x7FFFFFFF;
                              char v205 = 1;
                            }
                          }
                        }
                        v207 += 64;
                        v208 -= 64;
                      }
                      while (v208);
                      uint64_t result = (uint64_t)sub_A86F6C((char **)v8, 0, &v253);
LABEL_285:
                      if (v205)
                      {
                        uint64_t v212 = *(unsigned int **)(v4 + 104);
                        if (*(unsigned int **)(v4 + 112) != v212)
                        {
                          uint64_t v213 = *(void *)(v4 + 128);
                          uint64_t v214 = *v212;
LABEL_288:
                          unint64_t v215 = v213 + (v214 << 6);
                          unint64_t v216 = v213 + ((unint64_t)v212[1] << 6);
                          if (v215 != v216) {
                            goto LABEL_292;
                          }
                          goto LABEL_298;
                        }
                        sub_D2BFC(v8, 1uLL);
                        uint64_t v212 = *(unsigned int **)(v4 + 104);
                        uint64_t v213 = *(void *)(v4 + 128);
                        uint64_t v214 = *v212;
                        if (*(unsigned int **)(v4 + 112) != v212) {
                          goto LABEL_288;
                        }
                        sub_D2BFC(v8, 1uLL);
                        uint64_t v212 = *(unsigned int **)(v4 + 104);
                        unint64_t v215 = v213 + (v214 << 6);
                        unint64_t v216 = *(void *)(v4 + 128) + ((unint64_t)v212[1] << 6);
                        if (v215 == v216)
                        {
LABEL_298:
                          if (*(unsigned int **)(v4 + 112) == v212) {
                            goto LABEL_299;
                          }
                        }
                        else
                        {
LABEL_292:
                          while (*(_DWORD *)(v215 + 28) != 0x7FFFFFFF)
                          {
                            v215 += 64;
                            if (v215 == v216)
                            {
                              unint64_t v215 = v216;
                              if (*(unsigned int **)(v4 + 112) != v212) {
                                goto LABEL_300;
                              }
                              goto LABEL_299;
                            }
                          }
                          if (v215 == v216) {
                            goto LABEL_298;
                          }
                          unint64_t v217 = v215 + 64;
                          if (v215 + 64 == v216) {
                            goto LABEL_298;
                          }
                          do
                          {
                            if (*(_DWORD *)(v217 + 28) != 0x7FFFFFFF)
                            {
                              long long v218 = *(_OWORD *)v217;
                              long long v219 = *(_OWORD *)(v217 + 16);
                              long long v220 = *(_OWORD *)(v217 + 48);
                              *(_OWORD *)(v215 + 32) = *(_OWORD *)(v217 + 32);
                              *(_OWORD *)(v215 + 48) = v220;
                              *(_OWORD *)unint64_t v215 = v218;
                              *(_OWORD *)(v215 + 16) = v219;
                              v215 += 64;
                            }
                            v217 += 64;
                          }
                          while (v217 != v216);
                          uint64_t v212 = (unsigned int *)*v8;
                          if (*(void **)(v4 + 112) == *v8)
                          {
LABEL_299:
                            sub_D2BFC(v8, 1uLL);
                            uint64_t v212 = (unsigned int *)*v8;
                          }
                        }
LABEL_300:
                        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)v215, (char *)(*(void *)(v4 + 128) + ((unint64_t)v212[1] << 6)));
                      }
                    }
                    int v145 = v243;
LABEL_213:
                    if (++v153 == v145) {
                      goto LABEL_186;
                    }
                    continue;
                  }
                }
                else
                {
                  uint64_t v179 = v171 + 3896;
                  char v180 = sub_49442C(0x7FFFu);
                  if ((sub_C25A10(v179, v180) & 1) == 0) {
                    goto LABEL_235;
                  }
                }
                int v178 = 128;
                uint64_t v8 = v250;
                if (sub_A10E20(v162, v252)) {
                  goto LABEL_241;
                }
                goto LABEL_244;
              }
              break;
            }
            uint64_t result = sub_A2BC00((uint64_t)&v269, v160, 1);
            if (result) {
              goto LABEL_221;
            }
            goto LABEL_213;
          }
        }
        else
        {
          unint64_t v127 = 0;
          int v128 = 0;
          *(void *)&def_332C = 0;
          uint64_t v129 = 8;
          if (v121 != (char *)v106) {
            goto LABEL_165;
          }
        }
        uint64_t v4 = v241;
        *(void *)(v241 + 104) = v128;
        *(void *)(v241 + 112) = v129;
        *(void *)(v241 + 120) = &v127[8 * v126];
        if (v121) {
          goto LABEL_170;
        }
        goto LABEL_171;
      }
LABEL_120:
      if (!*(unsigned char *)(v4 + 21))
      {
        uint64_t v94 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v94)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v94 = *(unsigned int **)(v4 + 104);
          uint64_t v95 = *(void *)(v4 + 128);
          uint64_t v96 = *v94;
          if (*(unsigned int **)(v4 + 112) == v94)
          {
            sub_D2BFC(v8, 1uLL);
            uint64_t v94 = *(unsigned int **)(v4 + 104);
            uint64_t v97 = *(void *)(v4 + 128);
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v95 = *(void *)(v4 + 128);
          uint64_t v96 = *v94;
        }
        uint64_t v97 = v95;
LABEL_126:
        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)(v95 + (v96 << 6)), (char *)(v97 + ((unint64_t)v94[1] << 6)));
      }
LABEL_186:
      unint64_t v146 = v272;
      unint64_t v9 = v273 - 2;
      v273 -= 2;
      if (*(unsigned char *)(v269 + 16)) {
        BOOL v147 = v270 == 0;
      }
      else {
        BOOL v147 = 0;
      }
      if (v147 && (unint64_t)v9 >= v272 && (unint64_t)v9 < v274)
      {
        do
        {
          unint64_t v150 = __ROR8__(*v9, 32);
          if (HIDWORD(v150) == 1 && (v150 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v269 + 4120));
          unint64_t v146 = v272;
          unint64_t v9 = v273;
          if (result) {
            break;
          }
          unint64_t v9 = v273 - 2;
          unint64_t v273 = v9;
        }
        while ((unint64_t)v9 >= v272 && (unint64_t)v9 < v274);
      }
      if ((unint64_t)v9 < v146 || (unint64_t)v9 >= v274) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unint64_t v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_AA5410(_Unwind_Exception *a1)
{
}

void sub_AA5428(_Unwind_Exception *a1)
{
}

void sub_AA5440(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_AA54BC(char *result, unsigned int a2)
{
  int v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_A9A3AC(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_51:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            int v11 = result[48];
            unsigned int v12 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v12) {
                goto LABEL_51;
              }
              unint64_t v13 = v12 + *v10;
              uint64_t v14 = *((void *)v2 + 3);
              if (v13 >= (*((void *)v2 + 4) - v14) >> 6) {
                break;
              }
              uint64_t v15 = v14 + (v13 << 6);
              int v18 = *(_DWORD *)(v15 + 28);
              int v17 = (_DWORD *)(v15 + 28);
              int v16 = v18;
              if (v18 != 0x7FFFFFFF)
              {
                int v19 = *((_DWORD *)result + 7);
                if (v19 >= v16
                  && (uint64_t v20 = v14 + (v13 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v20 + 32))
                  && (unsigned int v21 = *(_DWORD *)(v20 + 36), v22 = *((_DWORD *)result + 9), v22 <= v21)
                  && ((uint64_t v23 = v14 + (v13 << 6), v22 == v21) ? (v24 = v19 == v16) : (v24 = 0),
                      v24 ? (BOOL v25 = *((_DWORD *)result + 11) - 10 * v19 <= *(_DWORD *)(v23 + 44) - 10 * v16) : (BOOL v25 = 1),
                      v25 && (v11 & ~*(unsigned __int8 *)(v23 + 48)) == 0))
                {
                  _DWORD *v17 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 >= v19)
                {
                  uint64_t v26 = v14 + (v13 << 6);
                  if (*(_DWORD *)(v26 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v27 = *((_DWORD *)result + 9);
                    unsigned int v28 = *(_DWORD *)(v26 + 36);
                    if (v28 <= v27)
                    {
                      uint64_t v29 = v14 + (v13 << 6);
                      BOOL v30 = v28 == v27 && v16 == v19;
                      BOOL v31 = !v30 || *(_DWORD *)(v29 + 44) - 10 * v16 <= *((_DWORD *)result + 11) - 10 * v19;
                      if (v31 && (*(unsigned __int8 *)(v29 + 48) & ~result[48]) == 0)
                      {
                        *((_DWORD *)result + 7) = 0x7FFFFFFF;
                        char v5 = 1;
                        goto LABEL_6;
                      }
                    }
                  }
                }
              }
              if (v8 == ++v12) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_AA5744(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AA5758(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AA576C(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_A9A3AC(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_A9A3AC(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) >= a6)
      {
        if (sub_AA3B30(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_AA3954((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      BOOL v30 = (long long *)sub_A9A3AC(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) >= a6)
      {
        if (sub_AA3B30(a1, (uint64_t)&v36, a5) & 1) != 0 || (sub_AA3B30(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_AA3954((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_AA59B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v6 = a5[1];
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v7;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 344) = 0;
  sub_BD5668(a1 + 360, a2);
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 464), &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_AA5AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v15 + 280);
  sub_A3884C(v15 + 232);
  sub_A3884C(v18);
  sub_46645C(v17);
  sub_14A84(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_AA5B18(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  int v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  long long v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    char v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      char v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AA5DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AA5E00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A3C368((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    char v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AA6148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AA61E8(uint64_t a1, int a2)
{
  int v96 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v95[0] = *(_OWORD *)(a1 + 88);
  v95[1] = v4;
  LOBYTE(v95[0]) = 1;
  v94[0] = (uint64_t)v95;
  v94[1] = a1;
  v94[2] = (uint64_t)&v96;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v97 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v10 - v11);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_AA78FC(v94, v10);
    LODWORD(v86[0]) = v14;
    unsigned int v11 = v97;
    if (v14 != 0x7FFFFFFF && (int)v97 < v14)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v89 < 0) {
          operator delete(__p[0]);
        }
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v86[0];
      unsigned int v97 = v86[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      unsigned int v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 / 10;
      int v49 = v22 % 10;
      int v50 = (void *)std::ostream::operator<<();
      sub_188FC78(v50, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v86, 2u);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      uint64_t v90 = v85;
      *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 / 10;
      int v49 = v22 % 10;
    }
    char v51 = v22 < 0 ? -5 : 5;
    unsigned int v52 = v48 + (((103 * (char)(v51 + v49)) >> 15) & 1) + ((103 * (char)(v51 + v49)) >> 10);
    int v53 = v10;
    int v54 = v52 + v10;
    unsigned int v55 = sub_AA78FC(v94, v52 + v10);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v55 - v97))) >= (double)(int)fabs((double)(int)(10 * v52))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46);
      if (v56 >= 1) {
        --v56;
      }
    }
    double v46 = (double)(v56 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v57 = v55;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    int v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v59 = (void *)std::ostream::operator<<();
    sub_188FC78(v59, (uint64_t)" to ", 4);
    unsigned int v60 = (void *)std::ostream::operator<<();
    sub_188FC78(v60, (uint64_t)" sec for time shift of ", 23);
    uint64_t v61 = (void *)std::ostream::operator<<();
    sub_188FC78(v61, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    uint64_t v90 = v85;
    *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v97 = v57;
  int v23 = v53;
  if (v52)
  {
    double v62 = (double)v22 * 0.5;
    if (v62 >= 0.0)
    {
      if (v62 < 4.50359963e15)
      {
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
        goto LABEL_93;
      }
    }
    else if (v62 > -4.50359963e15)
    {
      uint64_t v63 = (uint64_t)(v62 + v62);
      if (v63 >= 1) {
        --v63;
      }
LABEL_93:
      double v62 = (double)(v63 >> 1);
    }
    double v64 = (double)v22 * 0.25;
    if (v64 >= 0.0)
    {
      if (v64 < 4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64) + 1;
        goto LABEL_101;
      }
    }
    else if (v64 > -4.50359963e15)
    {
      uint64_t v65 = (uint64_t)(v64 + v64);
      if (v65 >= 1) {
        --v65;
      }
LABEL_101:
      double v64 = (double)(v65 >> 1);
    }
    int v66 = (int)v64;
    if (*(_DWORD *)(a1 + 60) > (int)v64)
    {
      int v23 = v54;
      goto LABEL_30;
    }
    int v67 = (int)v62;
    int v23 = v54;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v69 = v66 + v67;
      int v83 = v67;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        unint64_t v70 = (void *)std::ostream::operator<<();
        sub_188FC78(v70, (uint64_t)"] Examining time shift of ", 26);
        int v71 = v69 / 10;
        int v72 = v69 % 10;
        uint64_t v73 = (void *)std::ostream::operator<<();
        sub_188FC78(v73, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v86, 2u);
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        uint64_t v90 = v85;
        *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v71 = v69 / 10;
        int v72 = v69 % 10;
      }
      if (v69 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unsigned int v75 = v71 + (((103 * (char)(v74 + v72)) >> 15) & 1) + ((103 * (char)(v74 + v72)) >> 10);
      unsigned int v76 = sub_AA78FC(v94, v75 + v53);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v97 - v76))) >= (double)(int)fabs((double)(int)(10 * (v23 - (v75 + v53)))))
      {
        v67 += v66;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v77 = v76;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v90);
          sub_188FC78(&v90, (uint64_t)"[", 1);
          uint64_t v78 = (void *)std::ostream::operator<<();
          sub_188FC78(v78, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v79 = (void *)std::ostream::operator<<();
          sub_188FC78(v79, (uint64_t)" to ", 4);
          unint64_t v80 = (void *)std::ostream::operator<<();
          sub_188FC78(v80, (uint64_t)" sec for time shift of ", 23);
          uint64_t v81 = (void *)std::ostream::operator<<();
          sub_188FC78(v81, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v86, 2u);
          if (v87 < 0) {
            operator delete(v86[0]);
          }
          uint64_t v90 = v85;
          *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
          if (v93 < 0) {
            operator delete(v92);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v97 = v77;
        int v23 = v75 + v53;
        int v67 = v83;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0)
        {
LABEL_125:
          if (v68 < 4.50359963e15)
          {
            uint64_t v82 = (uint64_t)(v68 + v68) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v68 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v68 + v68);
        if (v82 >= 1) {
          --v82;
        }
LABEL_105:
        double v68 = (double)(v82 >> 1);
      }
LABEL_106:
      int v66 = (int)v68;
      if (*(_DWORD *)(a1 + 60) > (int)v68) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v97;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"departure", 9);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v89 < 0) {
        operator delete(__p[0]);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v96;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v96 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v96 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v96 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v96 + 3;
    int v35 = v96;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / 10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_AA78FC(v94, v42 + v10 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10));
  return v97;
}

void sub_AA736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_AA74E0(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_AA7BB8(a1 + 1336, v42);
  sub_AA7E6C((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_AA7880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_AA78FC(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A40DC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_AA7B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_AA7BB8(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_AAA3A4(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_AAA59C(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_AAA6FC(a1, v6);
        sub_AAAA08(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_AABDC0(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_AADEBC(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_AACD20(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_AAD078(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_AA7E6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  long long v298 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v335) = 0;
  LOBYTE(__p[0]) = 0;
  unsigned int v296 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v335) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v297 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v300 = _Q0;
    int v299 = 1;
    int v306 = a1;
    v305 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_AADDD8(v7, v299 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v301 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          unint64_t v302 = (unsigned int *)(v12 + (v13 << 6));
          if (v302 != (unsigned int *)v301) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v301 = v12 + ((unint64_t)v11[1] << 6);
      unint64_t v302 = (unsigned int *)(v12 + (v13 << 6));
      if (v302 != (unsigned int *)v301) {
        break;
      }
LABEL_9:
      if (++v299 == v297) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v335 = 0x7FFFFFFF;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      __int16 v338 = 0;
      unint64_t v339 = 0x8000000080000000;
      int v340 = 0x7FFFFFFF;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0x8000000080000000;
      __int16 v345 = 0;
      unint64_t v346 = 0xFFFFFFFF00000000;
      int v347 = -1;
      uint64_t v348 = 0;
      uint64_t v350 = 0;
      uint64_t v351 = 0;
      uint64_t v352 = 0;
      int v349 = 0x7FFFFFFF;
      int v353 = 100;
      int v354 = -1;
      long long v355 = v300;
      long long v356 = v300;
      long long v357 = v300;
      long long v358 = 0u;
      long long v359 = 0u;
      long long v360 = 0u;
      long long v361 = 0u;
      uint64_t v14 = a1[3];
      long long v362 = 0u;
      long long v363 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v302 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v302 != -1) {
        break;
      }
LABEL_397:
      unint64_t v268 = v358;
      if ((void)v358 != *((void *)&v358 + 1))
      {
        unint64_t v269 = *((void *)&v358 + 1) - 72;
        if (*((void *)&v358 + 1) - 72 > (unint64_t)v358)
        {
          do
          {
            sub_A4D0C8(v268, v269);
            v268 += 72;
            v269 -= 72;
          }
          while (v268 < v269);
        }
      }
      sub_A29D50((uint64_t)__p);
      unint64_t v270 = *(void *)(v3 + 16);
      if (v270 >= *(void *)(v3 + 24))
      {
        uint64_t v271 = sub_A4D268(v298, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v271 = v270 + 296;
        *(void *)(v3 + 16) = v270 + 296;
      }
      int v7 = v305;
      *(void *)(v3 + 16) = v271;
      if (*((void *)&v362 + 1))
      {
        *(void *)&long long v363 = *((void *)&v362 + 1);
        operator delete(*((void **)&v362 + 1));
      }
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      if (*((void *)&v359 + 1))
      {
        *(void *)&long long v360 = *((void *)&v359 + 1);
        operator delete(*((void **)&v359 + 1));
      }
      unint64_t v272 = (void **)v358;
      if ((void)v358)
      {
        uint64_t v273 = *((void *)&v358 + 1);
        unint64_t v274 = (void *)v358;
        if (*((void *)&v358 + 1) != (void)v358)
        {
          do
          {
            uint64_t v276 = *(void **)(v273 - 40);
            if (v276)
            {
              *(void *)(v273 - 32) = v276;
              operator delete(v276);
            }
            uint64_t v277 = (void **)(v273 - 72);
            uint64_t v278 = *(void *)(v273 - 72);
            if (v278)
            {
              uint64_t v279 = *(void *)(v273 - 64);
              uint64_t v275 = *(void **)(v273 - 72);
              if (v279 != v278)
              {
                do
                {
                  if (!*(_DWORD *)(v279 - 8))
                  {
                    int v280 = *(void **)(v279 - 48);
                    if (v280)
                    {
                      *(void *)(v279 - 40) = v280;
                      operator delete(v280);
                    }
                    int v281 = *(void **)(v279 - 80);
                    if (v281)
                    {
                      *(void *)(v279 - 72) = v281;
                      operator delete(v281);
                    }
                    unint64_t v282 = *(void **)(v279 - 104);
                    if (v282)
                    {
                      *(void *)(v279 - 96) = v282;
                      operator delete(v282);
                    }
                  }
                  v279 -= 168;
                }
                while (v279 != v278);
                uint64_t v275 = *v277;
              }
              *(void *)(v273 - 64) = v278;
              operator delete(v275);
              a1 = v306;
            }
            v273 -= 72;
          }
          while (v277 != v272);
          unint64_t v274 = (void *)v358;
        }
        *((void *)&v358 + 1) = v272;
        operator delete(v274);
      }
      if (SHIBYTE(v352) < 0) {
        operator delete(v350);
      }
      v302 += 16;
      if (v302 == (unsigned int *)v301) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v302;
    int v308 = v299;
    unsigned int v309 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v326 = 0;
      char v327 = 0;
      unint64_t v328 = 0;
      uint64_t v331 = 0;
      uint64_t v332 = 0;
      uint64_t v330 = 0;
      v333[0] = 1;
      *(void *)&v333[4] = 0x8000000080000000;
      *(_WORD *)&v333[12] = 0;
      v333[14] = 0;
      int v385 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v310 = xmmword_20E12E0;
      __int16 v311 = 0;
      unint64_t v312 = 0x8000000080000000;
      __int16 v313 = 0;
      *(_OWORD *)long long v314 = xmmword_20EB6B0;
      *(void *)&v314[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v316 = 0u;
      long long v317 = 0u;
      long long v318 = 0u;
      int v315 = -1;
      int v319 = 0x7FFFFFFF;
      char v321 = 0;
      uint64_t v322 = 0;
      uint64_t v320 = 0;
      char v323 = 1;
      unint64_t v324 = 0x8000000080000000;
      int v325 = 0;
      char v329 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)long long v314 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v314[16] = v18[3];
      *(void *)&v314[8] = v21;
      *(_DWORD *)&v314[20] = *v18;
      unsigned int v22 = *(_DWORD *)&v314[20];
      uint64_t v23 = a1[3];
      uint64_t v364 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      sub_A1E9A0((uint64_t)v365, v23, v20, v22, 0, 0);
      *(void *)&long long v367 = *(void *)&v366[24] + 12 * *(unsigned int *)&v314[8];
      if (LOBYTE(v369[1])) {
        *(void **)((char *)&v369[1] + 4) = *(void **)&v314[12];
      }
      if (*(void *)&v366[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v366[16]
      }
                              + 4 * ((*(void *)v366 - *(void *)&v365[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A4C9D4((uint64_t)v365, &v364, v24);
      _CF = *(void *)v366 < *(void *)&v366[8] && *(void *)v366 >= *(void *)&v365[24];
      uint64_t v26 = (*(void *)v366 - *(void *)&v365[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      int v315 = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v314;
      unsigned int v30 = *(_DWORD *)&v314[20];
      uint64_t v31 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v28, *(int *)&v314[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            v291 = (void *)sub_2F404((uint64_t)exception, (long long *)v365);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      int v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        uint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v306;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v309 = *(_DWORD *)(v58 + 8);
        if (v309 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        double v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v306;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v306;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              unint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_434;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v309 = *(_DWORD *)(v58 + 8);
              if (v309 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_434:
              v287 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v287, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v306;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_434;
            }
LABEL_117:
            if (v67
              && ((uint64_t v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_434;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_434;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((unsigned int v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v306;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
      if (v309 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      uint64_t v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)uint64_t v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      uint64_t v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        int v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        unsigned int v97 = &v96[8 * v91];
        *(void *)unsigned int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v306;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        int v96 = 0;
        unsigned int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v306;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v306;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      uint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      uint64_t v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      uint64_t v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
LABEL_159:
      uint64_t v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v314;
      unsigned int v112 = *(_DWORD *)&v314[20];
      uint64_t v113 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v110, *(int *)&v314[4]))
      {
        uint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          uint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            uint64_t v294 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            int v295 = (void *)sub_2F404((uint64_t)v294, (long long *)v365);
          }
          unint64_t v117 = (int *)((char *)v116 + *v116);
          uint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          uint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          uint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        unint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        unint64_t v123 = 0;
      }
      DWORD1(v310) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v314;
      unint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v314[20];
      int v128 = *(_DWORD *)&v314[8];
      uint64_t v129 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v314[4]))
      {
        unint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          unsigned int v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          unsigned int v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v365);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        unint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          unint64_t v288 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          uint64_t v289 = (void *)sub_2F404((uint64_t)v288, (long long *)v365);
        }
LABEL_180:
        uint64_t v132 = (char *)v130 + *v130;
        int v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      uint64_t v132 = sub_A10B80(v131 + 24, v125, 0);
      int v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      uint64_t v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      unint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        uint64_t v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        uint64_t v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      unint64_t v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        uint64_t v141 = 0;
        int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        uint64_t v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          uint64_t v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)long long v365 = v145;
      *(_DWORD *)&v365[8] = v146;
      BOOL v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      long long v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        unint64_t v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        unint64_t v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v314[16];
      }
      *((void *)&v310 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v365, v151, v152);
      __int16 v311 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v314;
      unsigned int v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v315;
      int v158 = *(_DWORD *)&v314[8];
      uint64_t v159 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v314[4]))
      {
        int v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          long long v285 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          long long v286 = (void *)sub_2F404((uint64_t)v285, (long long *)v365);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        int v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          v292 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v365);
        }
LABEL_213:
        uint64_t v162 = (char *)v160 + *v160;
        unint64_t v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      uint64_t v162 = sub_A10B80(v161 + 24, v155, 0);
      unint64_t v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      uint64_t v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      long long v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        uint64_t v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        uint64_t v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      uint64_t v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        uint64_t v171 = 0;
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          uint64_t v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)long long v365 = v175;
      *(_DWORD *)&v365[8] = v176;
      uint64_t v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      int v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        char v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        char v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v314[16];
      }
      unint64_t v312 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v365, v181, v182);
      __int16 v313 = v183;
      int v374 = -1;
      sub_9F6FA0((uint64_t)v365, &v310);
      int v374 = 0;
      if (v385)
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (v374) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v371)
        {
          *((void *)&v371 + 1) = v371;
          operator delete((void *)v371);
        }
        if (v369[0])
        {
          v369[1] = v369[0];
          operator delete(v369[0]);
        }
        if ((void)v367)
        {
          *((void *)&v367 + 1) = v367;
          operator delete((void *)v367);
        }
        goto LABEL_256;
      }
      *(_OWORD *)v375 = *(_OWORD *)v365;
      *(_OWORD *)&v375[16] = *(_OWORD *)&v365[16];
      v376[0] = *(_OWORD *)v366;
      *(_OWORD *)((char *)v376 + 12) = *(_OWORD *)&v366[12];
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      *(_OWORD *)long long v377 = v367;
      uint64_t v378 = v368;
      uint64_t v368 = 0;
      long long v367 = 0uLL;
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      long long v379 = *(_OWORD *)v369;
      long long v380 = v369[2];
      memset(v369, 0, sizeof(v369));
      int v381 = v370;
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      long long v382 = v371;
      uint64_t v383 = v372;
      uint64_t v372 = 0;
      long long v371 = 0uLL;
      long long v384 = v373;
      if (!v374) {
        goto LABEL_250;
      }
LABEL_256:
      if (v320)
      {
        char v321 = v320;
        operator delete(v320);
      }
      if (*((void *)&v317 + 1))
      {
        *(void *)&long long v318 = *((void *)&v317 + 1);
        operator delete(*((void **)&v317 + 1));
      }
      if ((void)v316)
      {
        *((void *)&v316 + 1) = v316;
        operator delete((void *)v316);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v327;
        if ((unint64_t)v327 >= v328) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v329 = 1;
      unsigned int v187 = v18[3];
      unsigned int v188 = v18[7];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      *(_DWORD *)long long v365 = 0;
      *(_DWORD *)&v365[4] = v187;
      *(void *)&v365[12] = v189;
      *(void *)&v365[20] = v190;
      *(_DWORD *)&v365[8] = v188;
      int v374 = 1;
      if (v385)
      {
        if (v385 == 1)
        {
          *(_OWORD *)v375 = *(_OWORD *)v365;
          *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)v375 = *(_OWORD *)v365;
        *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
        int v385 = 1;
        goto LABEL_281;
      }
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      if (v374)
      {
        if (v374 == 1) {
          goto LABEL_280;
        }
        int v385 = v374;
      }
      else
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (!v374)
        {
          if ((void)v371)
          {
            *((void *)&v371 + 1) = v371;
            operator delete((void *)v371);
          }
          if (v369[0])
          {
            v369[1] = v369[0];
            operator delete(v369[0]);
          }
          if ((void)v367)
          {
            *((void *)&v367 + 1) = v367;
            operator delete((void *)v367);
          }
        }
      }
LABEL_281:
      unsigned int v309 = *v18;
      uint64_t v184 = (uint64_t)v327;
      if ((unint64_t)v327 >= v328)
      {
LABEL_282:
        char v327 = (char *)sub_A4CBF4((uint64_t *)&v326, (uint64_t)v375);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v385;
      if (v385 == 1)
      {
        long long v222 = *(_OWORD *)v375;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v375[12];
        *(_OWORD *)uint64_t v184 = v222;
        char v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v385) {
          sub_9F6FA0(v184, (long long *)v375);
        }
        char v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359)
        {
LABEL_268:
          uint8x8_t v186 = sub_A4CECC((void ***)&v358, (uint64_t)&v326);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      unsigned int v191 = (char *)v326;
      int v192 = v327;
      int64_t v193 = v327 - (unsigned char *)v326;
      if (v327 != v326)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        unint64_t v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v306;
        do
        {
          char v198 = (long long *)&v195[v196];
          int v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *char v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v329;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      int v202 = v330;
      uint64_t v203 = v331 - (unsigned char *)v330;
      if (v331 != v330)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        uint64_t v204 = (char *)operator new(v331 - (unsigned char *)v330);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        char v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v333;
      *(void *)(v185 + 63) = *(void *)&v333[7];
      *(void *)(v185 + 56) = v206;
      uint8x8_t v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v358 + 1) = v186;
      unint64_t v207 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 1;
      unsigned int v208 = v18[5];
      int v209 = (char *)a1[13];
      unsigned int v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          int v223 = &v210[8 * v213];
          a1[14] = v223;
          uint64_t v224 = v305;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_435:
          }
            sub_188D718();
          unint64_t v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            uint64_t v224 = v305;
            a1 = v306;
            int v223 = &v217[8 * v211 + v218];
            v306[13] = &v217[8 * v211];
            v306[14] = v223;
            v306[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              long long v220 = &v217[8 * v211];
              uint64_t v221 = v220;
              a1 = v306;
              goto LABEL_327;
            }
            long long v220 = &v217[8 * v211];
            uint64_t v221 = v220;
            a1 = v306;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_445;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v227 = &v210[-v226];
            uint64_t v221 = &v220[-v226];
            uint64_t v228 = &v217[8 * v211 - 16];
            long long v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)uint64_t v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            unsigned int v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_445:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            unsigned int v210 = v209;
            uint64_t v224 = v305;
            int v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              int v223 = (char *)a1[14];
            }
          }
        }
        int v209 = (char *)*v224;
        unsigned int v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        unsigned int v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v304 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_435;
        }
        uint64_t v249 = (char *)operator new(8 * v247);
      }
      else
      {
        uint64_t v249 = 0;
      }
      size_t v251 = 8 * v244;
      unint64_t v252 = &v249[8 * v246];
      size_t v303 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          unsigned int v254 = v210;
          uint64_t v255 = &v249[8 * v246];
          a1 = v306;
          size_t v256 = v303;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v254 = &v210[-v259];
        uint64_t v255 = &v252[-v259];
        int v260 = &v249[8 * v246 - 16];
        unsigned __int8 v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v306;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)int v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v303;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        unsigned int v210 = (char *)*v305;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v304];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v306;
      v306[13] = v252;
      v306[14] = &v252[v303];
      v306[15] = &v249[8 * v304];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v385)
      {
        if ((void)v382)
        {
          *((void *)&v382 + 1) = v382;
          operator delete((void *)v382);
        }
        if ((void)v379)
        {
          *((void *)&v379 + 1) = v379;
          operator delete((void *)v379);
        }
        if (v377[0])
        {
          v377[1] = v377[0];
          operator delete(v377[0]);
        }
      }
      if (v330)
      {
        uint64_t v331 = v330;
        operator delete(v330);
      }
      int v238 = (char *)v326;
      if (v326)
      {
        unsigned int v239 = v327;
        uint64_t v19 = v326;
        if (v327 != v326)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              int v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              uint64_t v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              uint64_t v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v326;
        }
        char v327 = v238;
        operator delete(v19);
      }
      --v308;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v306;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      uint64_t v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v296, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_AA9DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    double v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            unint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_AAA3A4(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_AAA580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AAA59C(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v19 = 0x1FFFFFFFELL;
    int v5 = sub_A3B520(v4, &v19);
    int v20 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 10 * v2;
    uint64_t v17 = -1;
    int v18 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_AAD3F8((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_AAD7CC(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_AAD1AC((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 2147483646)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_AAD1AC((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 2147483646)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v20);
  }
}

double sub_AAA6FC(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v36);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v33 = *(unsigned int **)(a1 + 216);
  if (v4 != v33)
  {
    int v5 = (void **)(a1 + 104);
    int v31 = a2 + 2;
    int v32 = a2 + 1;
    int v30 = ~a2;
    while (1)
    {
      unsigned int v35 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v35);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v34 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 30;
LABEL_17:
      sub_A86790(v5, 0);
      sub_AADDD8(v5, v32 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v35, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) == v15)
      {
        sub_D2BFC(v5, 1uLL);
        int v15 = *(unsigned int **)(a1 + 104);
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
        if (*(unsigned int **)(a1 + 112) == v15)
        {
          sub_D2BFC(v5, 1uLL);
          int v18 = (unsigned int *)(v16 + (v17 << 6));
          unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
          if (v18 == (unsigned int *)v19) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
      }
      int v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_21;
      }
      do
      {
LABEL_20:
        unsigned int *v18 = v35;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        _OWORD v18[4] = -1;
        v18[7] = v20 + v11;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_21:
      uint64_t v21 = v35;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_23:
          if (*v24 > (unint64_t)v35)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + v30;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 2147483646;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_AAD1AC((void **)(a1 + 104), 0, v31 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v35);
      }
      uint64_t v4 = v34 + 1;
      if (v34 + 1 == v33) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v36) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_AAAA08(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v249);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v231 = *(unsigned int **)(a1 + 216);
  if (v4 != v231)
  {
    int v5 = (void **)(a1 + 104);
    int v236 = a2 + 2;
    int v237 = a2 + 1;
    int v234 = ~a2;
    unint64_t v235 = (uint64_t *)(a1 + 232);
    uint64_t v230 = (void **)(a1 + 256);
    unsigned int v239 = (void **)(a1 + 104);
    while (1)
    {
      uint64_t v233 = v4;
      unsigned int v6 = *v4;
      BOOL v7 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v243, *(void *)(a1 + 24), *v7);
      uint64_t v8 = v244;
      uint64_t v9 = &v245;
      if (v248) {
        uint64_t v9 = v247;
      }
      if ((unint64_t)v244 < *v9) {
        break;
      }
LABEL_3:
      uint64_t v4 = v233 + 1;
      if (v233 + 1 == v231) {
        goto LABEL_305;
      }
    }
    unsigned int v238 = v6 + 1;
    unsigned int v240 = v6;
    while (1)
    {
      unint64_t v13 = __ROR8__(*v8, 32);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(v14 + 56) - 1;
      unint64_t v16 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
      unint64_t v17 = v16 ^ (v16 >> 33);
      uint64_t v18 = *(void *)(v14 + 80);
      int v20 = *(_DWORD *)(v14 + 64);
      int v19 = *(_DWORD *)(v14 + 68);
      uint64_t v21 = v17 & v15;
      int v22 = (unsigned int *)(v18 + 12 * (v17 & v15));
      unsigned int v24 = *v22;
      unsigned int v23 = v22[1];
      if (v19 == v23 && v20 == v24) {
        goto LABEL_56;
      }
      if (*(void *)(v14 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v23, v24) != v13)
      {
        uint64_t v21 = (v21 + v44) & v15;
        unint64_t v45 = (unsigned int *)(v18 + 12 * v21);
        unsigned int v24 = *v45;
        unsigned int v23 = v45[1];
        ++v44;
        if (v19 == v23 && v20 == v24) {
          goto LABEL_56;
        }
      }
LABEL_53:
      if (v21 != -1)
      {
        uint64_t v47 = v18 + 12 * v21;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_109;
        }
        goto LABEL_90;
      }
      uint64_t v26 = -1;
      if (sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_31:
        uint64_t v30 = *(void *)(v14 + 56) - 1;
        uint64_t v31 = *(void *)(v14 + 80);
        int v33 = *(_DWORD *)(v14 + 64);
        int v32 = *(_DWORD *)(v14 + 68);
        uint64_t v34 = v30 & v17;
        unsigned int v35 = (unsigned int *)(v31 + 12 * (v30 & v17));
        unsigned int v37 = *v35;
        unsigned int v36 = v35[1];
        uint64_t v38 = *(void *)(v14 + 40);
        if (v32 == v36 && v33 == v37) {
          goto LABEL_80;
        }
        if (v38)
        {
          uint64_t v40 = -1;
          uint64_t v41 = 1;
          do
          {
            if (*(_DWORD *)(v14 + 36) == v36 && *(_DWORD *)(v14 + 32) == v37)
            {
              if (v40 == -1) {
                uint64_t v40 = v34;
              }
            }
            else if (__PAIR64__(v36, v37) == v13)
            {
              goto LABEL_74;
            }
            uint64_t v34 = (v34 + v41) & v30;
            unint64_t v42 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v42;
            unsigned int v36 = v42[1];
            ++v41;
          }
          while (v32 != v36 || v33 != v37);
          if (v40 == -1) {
LABEL_80:
          }
            uint64_t v40 = v34;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555) {
            goto LABEL_310;
          }
        }
        else
        {
          uint64_t v54 = 1;
          while (__PAIR64__(v36, v37) != v13)
          {
            uint64_t v34 = (v34 + v54) & v30;
            uint64_t v55 = (unsigned int *)(v31 + 12 * v34);
            unsigned int v37 = *v55;
            unsigned int v36 = v55[1];
            ++v54;
            if (v32 == v36 && v33 == v37)
            {
              uint64_t v38 = 0;
              goto LABEL_80;
            }
          }
LABEL_74:
          if (v34 != -1)
          {
            uint64_t v47 = v31 + 12 * v34;
            unsigned int v48 = *(_DWORD *)(v47 + 8);
            if (v48 != -1) {
              goto LABEL_109;
            }
            goto LABEL_90;
          }
          uint64_t v40 = -1;
          uint64_t v57 = *(void *)(v14 + 48);
          if ((unint64_t)(v57 - v38) >= 0x1555555555555555)
          {
LABEL_310:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v38
          && ((uint64_t v58 = (_DWORD *)(v31 + 12 * v40), *(_DWORD *)(v14 + 36) == v58[1])
            ? (BOOL v59 = *(_DWORD *)(v14 + 32) == *v58)
            : (BOOL v59 = 0),
              v59))
        {
          *(void *)(v14 + 40) = v38 - 1;
          uint64_t v53 = 3 * v40;
        }
        else
        {
          *(void *)(v14 + 48) = v57 + 1;
          uint64_t v53 = 3 * v40;
        }
        goto LABEL_89;
      }
LABEL_57:
      uint64_t v50 = *(void *)(v14 + 40);
      uint64_t v49 = *(void *)(v14 + 48);
      if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
        goto LABEL_310;
      }
      uint64_t v31 = *(void *)(v14 + 80);
      if (v50
        && ((unsigned int v51 = (_DWORD *)(v31 + 12 * v26), *(_DWORD *)(v14 + 36) == v51[1])
          ? (BOOL v52 = *(_DWORD *)(v14 + 32) == *v51)
          : (BOOL v52 = 0),
            v52))
      {
        *(void *)(v14 + 40) = v50 - 1;
      }
      else
      {
        *(void *)(v14 + 48) = v49 + 1;
      }
      uint64_t v53 = 3 * v26;
LABEL_89:
      uint64_t v60 = 4 * v53;
      uint64_t v61 = v31 + v60;
      *(void *)uint64_t v61 = v13;
      *(_DWORD *)(v61 + 8) = -1;
      uint64_t v47 = *(void *)(v14 + 80) + v60;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 != -1) {
        goto LABEL_109;
      }
LABEL_90:
      int v62 = *(_DWORD *)(v14 + 112);
      *(_DWORD *)(v14 + 112) = v62 + 1;
      *(_DWORD *)(v47 + 8) = v62;
      double v64 = *(char **)(v14 + 96);
      unint64_t v63 = *(void *)(v14 + 104);
      if ((unint64_t)v64 >= v63)
      {
        unsigned int v66 = (char **)(v14 + 88);
        uint64_t v67 = *(char **)(v14 + 88);
        uint64_t v68 = (v64 - v67) >> 3;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v70 = v63 - (void)v67;
        if (v70 >> 2 > v69) {
          unint64_t v69 = v70 >> 2;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v241 = v69;
        if (v69)
        {
          if (v69 >> 61) {
            goto LABEL_309;
          }
          int v71 = (char *)operator new(8 * v69);
          unsigned int v66 = (char **)(v14 + 88);
          int v72 = &v71[8 * v68];
          *(void *)int v72 = v13;
          uint64_t v65 = (uint64_t)(v72 + 8);
          if (v64 != v67) {
            goto LABEL_100;
          }
LABEL_139:
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v241];
          int v5 = (void **)(a1 + 104);
          if (!v64) {
            goto LABEL_108;
          }
        }
        else
        {
          int v71 = 0;
          int v72 = (char *)(8 * v68);
          *(void *)(8 * v68) = v13;
          uint64_t v65 = 8 * v68 + 8;
          if (v64 == v67) {
            goto LABEL_139;
          }
LABEL_100:
          unint64_t v73 = v64 - 8 - v67;
          if (v73 < 0x58) {
            goto LABEL_315;
          }
          if ((unint64_t)(v67 - v71) < 0x20) {
            goto LABEL_315;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v76 = &v64[-v75];
          v72 -= v75;
          unint64_t v77 = &v71[8 * v68 - 16];
          uint64_t v78 = (long long *)(v64 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)unint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          double v64 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_315:
            do
            {
              uint64_t v81 = *((void *)v64 - 1);
              v64 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v64 != v67);
          }
          double v64 = *v66;
          *(void *)(v14 + 88) = v72;
          *(void *)(v14 + 96) = v65;
          *(void *)(v14 + 104) = &v71[8 * v241];
          int v5 = (void **)(a1 + 104);
          if (!v64) {
            goto LABEL_108;
          }
        }
        operator delete(v64);
        goto LABEL_108;
      }
      *(void *)double v64 = v13;
      uint64_t v65 = (uint64_t)(v64 + 8);
LABEL_108:
      *(void *)(v14 + 96) = v65;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
LABEL_109:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v242 = v48;
      if (v240 == v48) {
        goto LABEL_249;
      }
      BOOL v83 = *(unsigned int **)(a1 + 104);
      uint64_t v82 = *(unsigned int **)(a1 + 112);
      uint64_t v84 = (char *)v82 - (char *)v83;
      if (v82 == v83)
      {
        uint64_t v88 = v84 >> 3;
        unint64_t v89 = 1 - (v84 >> 3);
        uint64_t v90 = *(void *)(a1 + 120);
        if (v89 <= (v90 - (uint64_t)v82) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v89);
          unsigned int v97 = (char *)&v82[2 * v89];
          *(void *)(a1 + 112) = v97;
        }
        else
        {
          uint64_t v91 = v90 - (void)v83;
          uint64_t v92 = v91 >> 2;
          if ((unint64_t)(v91 >> 2) <= 1) {
            uint64_t v92 = 1;
          }
          BOOL v213 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v213) {
            unint64_t v93 = v92;
          }
          if (v93 >> 61) {
LABEL_309:
          }
            sub_188D718();
          uint64_t v94 = 8 * v93;
          unint64_t v95 = (char *)operator new(8 * v93);
          int v96 = &v95[8 * v88];
          bzero(v96, 8 * v89);
          *(void *)(a1 + 104) = v96;
          *(void *)(a1 + 112) = &v96[8 * v89];
          *(void *)(a1 + 120) = &v95[v94];
          if (v82)
          {
            operator delete(v82);
            unsigned int v97 = *(char **)(a1 + 112);
          }
          else
          {
            unsigned int v97 = &v96[8 * v89];
          }
        }
        int v5 = (void **)(a1 + 104);
        BOOL v83 = (unsigned int *)*v239;
        uint64_t v85 = *(void *)(a1 + 128);
        uint64_t v86 = *(unsigned int *)*v239;
        if (*v239 == v97)
        {
          unint64_t v87 = *(char **)(a1 + 120);
          if (v87 != v97)
          {
            *(void *)unsigned int v97 = 0;
            *(void *)(a1 + 112) = v97 + 8;
LABEL_137:
            BOOL v83 = *(unsigned int **)(a1 + 104);
            uint64_t v107 = *(void *)(a1 + 128);
            goto LABEL_144;
          }
          uint64_t v98 = 1;
          uint64_t v99 = v87 - (char *)v83;
          if ((unint64_t)(v99 >> 2) > 1) {
            uint64_t v98 = v99 >> 2;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100)
          {
            if (v100 >> 61) {
              goto LABEL_309;
            }
            unsigned int v101 = (char *)operator new(8 * v100);
            uint64_t v102 = v101;
            *(void *)unsigned int v101 = 0;
            uint64_t v103 = (uint64_t)(v101 + 8);
            if (v97 != (char *)v83)
            {
LABEL_131:
              unint64_t v104 = v97 - 8 - (char *)v83;
              if (v104 < 0x58 || (unint64_t)(v97 - v101) < 0x20)
              {
                int v105 = (unsigned int *)v97;
                int v5 = (void **)(a1 + 104);
                goto LABEL_134;
              }
              uint64_t v215 = (v104 >> 3) + 1;
              uint64_t v216 = 8 * (v215 & 0x3FFFFFFFFFFFFFFCLL);
              int v105 = (unsigned int *)&v97[-v216];
              v102 -= v216;
              unint64_t v217 = v101 - 16;
              size_t v218 = v97 - 16;
              uint64_t v219 = v215 & 0x3FFFFFFFFFFFFFFCLL;
              int v5 = (void **)(a1 + 104);
              do
              {
                long long v220 = *(_OWORD *)v218;
                *((_OWORD *)v217 - 1) = *((_OWORD *)v218 - 1);
                *(_OWORD *)unint64_t v217 = v220;
                v217 -= 32;
                v218 -= 32;
                v219 -= 4;
              }
              while (v219);
              if (v215 != (v215 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_134:
                  uint64_t v106 = *((void *)v105 - 1);
                  v105 -= 2;
                  *((void *)v102 - 1) = v106;
                  v102 -= 8;
                }
                while (v105 != v83);
              }
              unsigned int v97 = (char *)*v5;
              *(void *)(a1 + 104) = v102;
              *(void *)(a1 + 112) = v103;
              *(void *)(a1 + 120) = &v101[8 * v100];
              if (!v97) {
                goto LABEL_137;
              }
LABEL_136:
              operator delete(v97);
              goto LABEL_137;
            }
          }
          else
          {
            unsigned int v101 = 0;
            uint64_t v102 = 0;
            *(void *)&def_332C = 0;
            uint64_t v103 = 8;
            if (v97 != (char *)v83) {
              goto LABEL_131;
            }
          }
          int v5 = (void **)(a1 + 104);
          *(void *)(a1 + 104) = v102;
          *(void *)(a1 + 112) = v103;
          *(void *)(a1 + 120) = &v101[8 * v100];
          if (!v97) {
            goto LABEL_137;
          }
          goto LABEL_136;
        }
      }
      else
      {
        uint64_t v85 = *(void *)(a1 + 128);
        uint64_t v86 = *v83;
      }
      uint64_t v107 = v85;
LABEL_144:
      sub_A86AC4(v5, 0, (char *)(v85 + (v86 << 6)), (char *)(v107 + ((unint64_t)v83[1] << 6)));
      unint64_t v108 = v237 + *(_DWORD *)(a1 + 96) * v238;
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v110 = *(unsigned int **)(a1 + 112);
      if (v108 >= ((char *)v110 - (char *)v109) >> 3) {
        goto LABEL_196;
      }
      unsigned int v111 = v109[2 * v108];
      unsigned int v112 = v109[2 * v108 + 1];
      unsigned int v113 = v112 - v111;
      if (v112 == v111) {
        goto LABEL_196;
      }
      unsigned __int16 v114 = 0;
      unsigned int v115 = 0;
LABEL_147:
      while (2)
      {
        uint64_t v116 = *(unsigned int **)(a1 + 104);
        if (v108 >= (uint64_t)(*(void *)(a1 + 112) - (void)v116) >> 3
          || (unsigned int v117 = v116[2 * v108], v116[2 * v108 + 1] - v117 <= v115))
        {
          uint64_t v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v228, "key does not exist and cannot be added");
          goto LABEL_308;
        }
        unint64_t v118 = v117 + v115;
        uint64_t v119 = *(void *)(a1 + 128);
        if (v118 >= (*(void *)(a1 + 136) - v119) >> 6)
        {
          uint64_t v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v228, "index out of range");
LABEL_308:
        }
        size_t v120 = (long long *)(v119 + (v118 << 6));
        long long v121 = *v120;
        long long v122 = v120[1];
        long long v123 = v120[3];
        long long v252 = v120[2];
        long long v253 = v123;
        long long v250 = v121;
        long long v251 = v122;
        unint64_t v126 = v116;
        uint64_t v124 = *v116;
        uint64_t v125 = v126[1];
        if (v125 != v124)
        {
          uint64_t v127 = 0;
          uint64_t v130 = v124 << 6;
          uint64_t v131 = (v125 << 6) - (v124 << 6);
          uint64_t v132 = (_DWORD *)(v119 + v130 + 44);
          while (1)
          {
            int v133 = *(v132 - 4);
            if (v133 != 0x7FFFFFFF)
            {
              if (v133 <= SHIDWORD(v251) && *(v132 - 3) <= (int)v252)
              {
                unsigned int v134 = *(v132 - 2);
                if (v134 <= DWORD1(v252)
                  && *(v132 - 1) <= DWORD2(v252)
                  && (v134 != DWORD1(v252)
                   || v133 != HIDWORD(v251)
                   || 10 * v133 - *v132 <= 10 * HIDWORD(v251) - HIDWORD(v252)))
                {
                  unint64_t v129 = v114 & 0xFF00 | (unint64_t)(v127 << 8);
                  unsigned __int16 v114 = v114 & 0xFF00 | ((_WORD)v127 << 8);
                  if (++v115 == v113) {
                    goto LABEL_174;
                  }
                  goto LABEL_147;
                }
              }
              if (SHIDWORD(v251) <= v133 && (int)v252 <= *(v132 - 3))
              {
                unsigned int v135 = *(v132 - 2);
                if (DWORD1(v252) <= v135
                  && DWORD2(v252) <= *(v132 - 1)
                  && (DWORD1(v252) != v135
                   || HIDWORD(v251) != v133
                   || 10 * HIDWORD(v251) - HIDWORD(v252) <= 10 * v133 - *v132))
                {
                  *(v132 - 4) = 0x7FFFFFFF;
                  uint64_t v127 = 1;
                }
              }
            }
            v132 += 16;
            v131 -= 64;
            if (!v131) {
              goto LABEL_152;
            }
          }
        }
        uint64_t v127 = 0;
LABEL_152:
        int v128 = sub_AAD3F8((char **)v5, 0, &v250);
        *(void *)(v128 + 52) = -1;
        *((_DWORD *)v128 + 15) = 0x7FFFFFFF;
        unint64_t v129 = v114 & 0xFF00 | (unint64_t)(v127 << 8);
        unsigned __int16 v114 = v129 | 1;
        if (++v115 != v113) {
          continue;
        }
        break;
      }
LABEL_174:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v110 = *(unsigned int **)(a1 + 112);
      if (v129)
      {
        if (v110 != v109)
        {
          uint64_t v136 = *(void *)(a1 + 128);
          uint64_t v137 = *v109;
          goto LABEL_177;
        }
        sub_D2BFC(v5, 1uLL);
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v136 = *(void *)(a1 + 128);
        uint64_t v137 = *v109;
        if (*(unsigned int **)(a1 + 112) == v109)
        {
          sub_D2BFC(v239, 1uLL);
          uint64_t v109 = *(unsigned int **)(a1 + 104);
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = *(void *)(a1 + 128) + ((unint64_t)v109[1] << 6);
          if (v138 == v139)
          {
LABEL_190:
            unint64_t v140 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v109) {
              goto LABEL_191;
            }
            goto LABEL_195;
          }
        }
        else
        {
LABEL_177:
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = v136 + ((unint64_t)v109[1] << 6);
          if (v138 == v139) {
            goto LABEL_190;
          }
        }
        unint64_t v140 = (void **)(a1 + 104);
        while (*(_DWORD *)(v138 + 28) != 0x7FFFFFFF)
        {
          v138 += 64;
          if (v138 == v139)
          {
            unint64_t v138 = v139;
            if (*(unsigned int **)(a1 + 112) != v109) {
              goto LABEL_195;
            }
            goto LABEL_191;
          }
        }
        if (v138 == v139 || (unint64_t v141 = v138 + 64, v138 + 64 == v139))
        {
          if (*(unsigned int **)(a1 + 112) == v109) {
            goto LABEL_191;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v141 + 28) != 0x7FFFFFFF)
            {
              long long v146 = *(_OWORD *)v141;
              long long v147 = *(_OWORD *)(v141 + 16);
              long long v148 = *(_OWORD *)(v141 + 48);
              *(_OWORD *)(v138 + 32) = *(_OWORD *)(v141 + 32);
              *(_OWORD *)(v138 + 48) = v148;
              *(_OWORD *)unint64_t v138 = v146;
              *(_OWORD *)(v138 + 16) = v147;
              v138 += 64;
            }
            v141 += 64;
          }
          while (v141 != v139);
          uint64_t v109 = (unsigned int *)*v239;
          if (*(void **)(a1 + 112) != *v239) {
            goto LABEL_195;
          }
LABEL_191:
          sub_D2BFC(v140, 1uLL);
          uint64_t v109 = (unsigned int *)*v140;
        }
LABEL_195:
        sub_A86AC4(v140, 0, (char *)v138, (char *)(*(void *)(a1 + 128) + ((unint64_t)v109[1] << 6)));
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v110 = *(unsigned int **)(a1 + 112);
      }
LABEL_196:
      uint64_t v142 = (char *)v110 - (char *)v109;
      if (v110 != v109)
      {
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *v109;
LABEL_213:
        uint64_t v159 = v143;
        goto LABEL_229;
      }
      uint64_t v149 = v142 >> 3;
      unint64_t v150 = 1 - (v142 >> 3);
      uint64_t v151 = *(void *)(a1 + 120);
      if (v150 <= (v151 - (uint64_t)v110) >> 3)
      {
        bzero(v109, 8 * v150);
        int v158 = &v109[2 * v150];
        *(void *)(a1 + 112) = v158;
      }
      else
      {
        uint64_t v152 = v151 - (void)v109;
        uint64_t v153 = v152 >> 2;
        if ((unint64_t)(v152 >> 2) <= 1) {
          uint64_t v153 = 1;
        }
        BOOL v213 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v213) {
          unint64_t v154 = v153;
        }
        if (v154 >> 61) {
          goto LABEL_309;
        }
        uint64_t v155 = 8 * v154;
        unsigned int v156 = (char *)operator new(8 * v154);
        unsigned int v157 = &v156[8 * v149];
        bzero(v157, 8 * v150);
        int v158 = (unsigned int *)&v157[8 * v150];
        *(void *)(a1 + 104) = v157;
        *(void *)(a1 + 112) = v158;
        *(void *)(a1 + 120) = &v156[v155];
        if (v109)
        {
          operator delete(v109);
          int v158 = *(unsigned int **)(a1 + 112);
        }
      }
      uint64_t v109 = (unsigned int *)*v239;
      uint64_t v143 = *(void *)(a1 + 128);
      uint64_t v144 = *(unsigned int *)*v239;
      if (*v239 != v158) {
        goto LABEL_213;
      }
      uint64_t v145 = *(unsigned int **)(a1 + 120);
      if (v145 != v158)
      {
        *(void *)int v158 = 0;
        *(void *)(a1 + 112) = v158 + 2;
        goto LABEL_228;
      }
      uint64_t v160 = 1;
      uint64_t v161 = (char *)v145 - (char *)v109;
      if ((unint64_t)(v161 >> 2) > 1) {
        uint64_t v160 = v161 >> 2;
      }
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v162 = v160;
      }
      if (v162)
      {
        if (v162 >> 61) {
          goto LABEL_309;
        }
        unint64_t v163 = (char *)operator new(8 * v162);
        uint64_t v164 = v163;
        *(void *)unint64_t v163 = 0;
        uint64_t v165 = (uint64_t)(v163 + 8);
        if (v158 == v109)
        {
LABEL_290:
          *(void *)(a1 + 104) = v164;
          *(void *)(a1 + 112) = v165;
          *(void *)(a1 + 120) = &v163[8 * v162];
          if (!v158) {
            goto LABEL_228;
          }
LABEL_227:
          operator delete(v158);
          goto LABEL_228;
        }
      }
      else
      {
        unint64_t v163 = 0;
        uint64_t v164 = 0;
        *(void *)&def_332C = 0;
        uint64_t v165 = 8;
        if (v158 == v109) {
          goto LABEL_290;
        }
      }
      unint64_t v166 = (char *)(v158 - 2) - (char *)v109;
      if (v166 < 0x58 || (unint64_t)((char *)v158 - v163) < 0x20)
      {
        uint64_t v167 = v158;
        uint64_t v168 = (unsigned int **)(a1 + 104);
        do
        {
LABEL_225:
          uint64_t v169 = *((void *)v167 - 1);
          v167 -= 2;
          *((void *)v164 - 1) = v169;
          v164 -= 8;
        }
        while (v167 != v109);
        goto LABEL_226;
      }
      uint64_t v221 = (v166 >> 3) + 1;
      uint64_t v222 = 8 * (v221 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v167 = &v158[v222 / 0xFFFFFFFFFFFFFFFCLL];
      v164 -= v222;
      int v223 = v163 - 16;
      uint64_t v224 = v158 - 4;
      uint64_t v225 = v221 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v168 = (unsigned int **)(a1 + 104);
      do
      {
        long long v226 = *(_OWORD *)v224;
        *((_OWORD *)v223 - 1) = *((_OWORD *)v224 - 1);
        *(_OWORD *)int v223 = v226;
        v223 -= 32;
        v224 -= 8;
        v225 -= 4;
      }
      while (v225);
      if (v221 != (v221 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_225;
      }
LABEL_226:
      int v158 = *v168;
      *(void *)(a1 + 104) = v164;
      *(void *)(a1 + 112) = v165;
      *(void *)(a1 + 120) = &v163[8 * v162];
      if (v158) {
        goto LABEL_227;
      }
LABEL_228:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v159 = *(void *)(a1 + 128);
LABEL_229:
      uint64_t v170 = v143 + (v144 << 6);
      uint64_t v171 = v159 + ((unint64_t)v109[1] << 6);
      if (v170 != v171)
      {
        uint64_t v172 = v244;
        do
        {
          *(_DWORD *)uint64_t v170 = v240;
          *(_DWORD *)(v170 + 16) = -1;
          int32x2_t v173 = *(int32x2_t *)(v170 + 28);
          *(_DWORD *)(v170 + 12) = v173.i32[0];
          int v174 = *((_DWORD *)v172 + 2);
          int v175 = v174 / 10;
          int v176 = v174 % 10;
          if (v174 < 0) {
            char v177 = -5;
          }
          else {
            char v177 = 5;
          }
          *(int32x2_t *)(v170 + 28) = vadd_s32(vdup_n_s32(v175+ (((103 * (char)(v177 + v176)) >> 15) & 1)+ ((103 * (char)(v177 + v176)) >> 10)), v173);
          v170 += 64;
        }
        while (v170 != v171);
      }
      int v178 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v179 = v178 + v178 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v180 = v242;
        unsigned int v181 = *(unint64_t **)(a1 + 48);
        if (!v181) {
          goto LABEL_244;
        }
      }
      else
      {
        unsigned int v179 = -1;
        unint64_t v180 = v242;
        unsigned int v181 = *(unint64_t **)(a1 + 48);
        if (!v181)
        {
LABEL_244:
          int v185 = 2147483646;
          goto LABEL_245;
        }
      }
      if (*v181 > v180)
      {
        unsigned int v182 = 0;
        unsigned int v183 = *(_DWORD *)(a1 + 100) + v234;
        unsigned int v184 = v183;
        while (v182 <= v183)
        {
          int v185 = *(_DWORD *)sub_A3F53C(v181 + 2, v181[1] * v180 + v184);
          v182 += 2;
          v184 -= 2;
          if (v185 != 0x7FFFFFFF) {
            goto LABEL_245;
          }
        }
      }
      int v185 = 0x7FFFFFFF;
LABEL_245:
      unint64_t v186 = v242 + 1;
      unsigned int v187 = v236 + v178 * v186;
      unsigned int v188 = v178 * v186 + 1;
      int v5 = (void **)(a1 + 104);
      if (!sub_AAD1AC(v239, 0, v187, v188, v179, v185)) {
        goto LABEL_249;
      }
      if (*(void *)(a1 + 240) <= v180) {
        sub_A3E96C((uint64_t)v235, v186, 0);
      }
      uint64_t v189 = *v235;
      unint64_t v190 = v180 >> 6;
      uint64_t v191 = 1 << v180;
      if ((*(void *)(*v235 + 8 * (v180 >> 6)) & (1 << v180)) != 0)
      {
LABEL_249:
        unint64_t v11 = (unint64_t)v245;
        uint64_t v8 = (void *)((char *)v244 + 12);
        unint64_t v244 = v8;
        if (v8 != v245) {
          goto LABEL_250;
        }
        goto LABEL_271;
      }
      int64_t v193 = *(char **)(a1 + 264);
      unint64_t v192 = *(void *)(a1 + 272);
      if ((unint64_t)v193 < v192)
      {
        *(_DWORD *)int64_t v193 = v242;
        uint64_t v194 = (uint64_t)(v193 + 4);
        goto LABEL_270;
      }
      unint64_t v195 = (char *)*v230;
      uint64_t v196 = v193 - (unsigned char *)*v230;
      uint64_t v197 = v196 >> 2;
      unint64_t v198 = (v196 >> 2) + 1;
      if (v198 >> 62) {
        sub_2E00();
      }
      uint64_t v199 = v192 - (void)v195;
      if (v199 >> 1 > v198) {
        unint64_t v198 = v199 >> 1;
      }
      if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v232 = v198;
      if (v198)
      {
        if (v198 >> 62) {
          goto LABEL_309;
        }
        int v200 = operator new(4 * v198);
        char v201 = (unsigned int *)&v200[4 * v197];
        *char v201 = v242;
        uint64_t v194 = (uint64_t)(v201 + 1);
        if (v193 == v195)
        {
LABEL_293:
          *(void *)(a1 + 256) = v201;
          *(void *)(a1 + 264) = v194;
          *(void *)(a1 + 272) = &v200[4 * v232];
          if (v195) {
            goto LABEL_269;
          }
          goto LABEL_270;
        }
      }
      else
      {
        int v200 = 0;
        char v201 = (unsigned int *)(4 * v197);
        *(_DWORD *)(4 * v197) = v242;
        uint64_t v194 = 4 * v197 + 4;
        if (v193 == v195) {
          goto LABEL_293;
        }
      }
      unint64_t v202 = v193 - 4 - v195;
      if (v202 < 0x2C) {
        goto LABEL_316;
      }
      if ((unint64_t)(v193 - &v200[v196]) < 0x20) {
        goto LABEL_316;
      }
      uint64_t v203 = (v202 >> 2) + 1;
      uint64_t v204 = 4 * (v203 & 0x7FFFFFFFFFFFFFF8);
      char v205 = &v193[-v204];
      char v201 = (unsigned int *)((char *)v201 - v204);
      uint64_t v206 = &v200[4 * v197 - 16];
      unint64_t v207 = v193 - 16;
      uint64_t v208 = v203 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v209 = *(_OWORD *)v207;
        *(v206 - 1) = *((_OWORD *)v207 - 1);
        _OWORD *v206 = v209;
        v206 -= 2;
        v207 -= 32;
        v208 -= 8;
      }
      while (v208);
      int64_t v193 = v205;
      if (v203 != (v203 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_316:
        do
        {
          unsigned int v210 = *((_DWORD *)v193 - 1);
          v193 -= 4;
          *--char v201 = v210;
        }
        while (v193 != v195);
      }
      *(void *)(a1 + 256) = v201;
      *(void *)(a1 + 264) = v194;
      *(void *)(a1 + 272) = &v200[4 * v232];
      if (v195)
      {
LABEL_269:
        operator delete(v195);
        uint64_t v189 = *v235;
      }
LABEL_270:
      *(void *)(a1 + 264) = v194;
      *(void *)(v189 + 8 * v190) |= v191;
      int v5 = (void **)(a1 + 104);
      unint64_t v11 = (unint64_t)v245;
      uint64_t v8 = (void *)((char *)v244 + 12);
      unint64_t v244 = v8;
      if (v8 != v245)
      {
LABEL_250:
        int v10 = v248;
        unint64_t v12 = v247[0];
        if (*(unsigned char *)(v243 + 16)) {
          goto LABEL_272;
        }
        goto LABEL_10;
      }
LABEL_271:
      uint64_t v8 = v246;
      unint64_t v12 = v247[0];
      unint64_t v244 = v246;
      int v10 = 1;
      unsigned __int8 v248 = 1;
      if (*(unsigned char *)(v243 + 16))
      {
LABEL_272:
        if (v10) {
          unint64_t v211 = v12;
        }
        else {
          unint64_t v211 = v11;
        }
        if ((unint64_t)v8 < v211)
        {
          while (1)
          {
            unint64_t v212 = __ROR8__(*v8, 32);
            BOOL v213 = HIDWORD(v212) != 1 || (v212 + 3) >= 2;
            if (!v213) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v243 + 4120)))
            {
              LOBYTE(v10) = v248;
              uint64_t v8 = v244;
              unint64_t v11 = (unint64_t)v245;
              break;
            }
            unint64_t v11 = (unint64_t)v245;
            uint64_t v8 = (void *)((char *)v244 + 12);
            unint64_t v244 = v8;
            if (v8 == v245)
            {
              uint64_t v8 = v246;
              unint64_t v244 = v246;
              LOBYTE(v10) = 1;
              unsigned __int8 v248 = 1;
              if ((unint64_t)v246 >= v247[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v10) = v248;
              uint64_t v214 = &v245;
              if (v248) {
                uint64_t v214 = v247;
              }
              if ((unint64_t)v8 >= *v214) {
                break;
              }
            }
          }
          unint64_t v12 = v247[0];
        }
      }
LABEL_10:
      if ((_BYTE)v10) {
        unint64_t v11 = v12;
      }
      if ((unint64_t)v8 >= v11) {
        goto LABEL_3;
      }
    }
    uint64_t v26 = -1;
    uint64_t v27 = 1;
    do
    {
      if (*(_DWORD *)(v14 + 36) == v23 && *(_DWORD *)(v14 + 32) == v24)
      {
        if (v26 == -1) {
          uint64_t v26 = v21;
        }
      }
      else if (__PAIR64__(v23, v24) == v13)
      {
        goto LABEL_53;
      }
      uint64_t v21 = (v21 + v27) & v15;
      int v28 = (unsigned int *)(v18 + 12 * v21);
      unsigned int v24 = *v28;
      unsigned int v23 = v28[1];
      ++v27;
    }
    while (v19 != v23 || v20 != v24);
    if (v26 != -1)
    {
      if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_31;
      }
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v26 = v21;
    if (sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_305:
  double result = sub_72688((uint64_t)v249) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_AABD70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AABD84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AABD98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AABDAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AABDC0(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unsigned int v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  uint64_t v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  uint64_t v204 = (void **)(a1 + 328);
  unsigned int v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    unint64_t v211 = v8;
    uint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    int v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      uint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          uint64_t v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            uint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      unint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = (char **)(v13 + 88);
        unsigned int v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          int v71 = (char *)operator new(8 * v68);
          uint64_t v65 = (char **)(v13 + 88);
          int v72 = &v71[8 * v67];
          *(void *)int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v76 = &v63[-v75];
          v72 -= v75;
          unint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)unint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          unint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          unint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          int v71 = 0;
          int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)unint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 4);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      unint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 4);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          int v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unsigned int v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unsigned int v101 = v200;
              goto LABEL_135;
            }
            unsigned int v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            int v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] > v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        uint64_t v168 = v213 + 2;
        BOOL v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          int v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          BOOL v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      unint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                int v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            int v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              int v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              BOOL v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                int v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                BOOL v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        uint64_t v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)uint64_t v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          unint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] <= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int32x2_t v173 = &v135[4 * v130 - 16];
          int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          uint64_t v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        unint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] <= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            unint64_t v202 = operator new(4 * v118);
            unint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              unint64_t v141 = &v202[4 * v112 - 16];
              uint64_t v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          unint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            unint64_t v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        int v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    uint64_t v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_AACCF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AACD0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AACD20(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v3 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 280);
  uint64_t v20 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = sub_BD6170((void *)(a1 + 360));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 56) + *(void *)(*(void *)(a1 + 32) + 56))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    uint64_t v10 = v10 + *(void *)(v11 + 32) - *(void *)(v11 + 16);
  }
  unint64_t v32 = v23
      + v26
      - (v27
       + v25)
      + v24
      + v2
      + v20
      - v22
      + v5
      + v3
      + v4
      - (v21
       + v19)
      + v7
      + v8
      - v6
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v32 > *(void *)a1;
  if (v32 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v32);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_AAD02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_AAD078(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_AADDD8(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_AAD1AC(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AADB74(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_AADB74(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) <= a6)
      {
        __int16 v22 = sub_AAD7CC((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_AAD7CC((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      uint64_t v27 = (long long *)sub_AADB74(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) <= a6)
      {
        if (sub_AADC4C(a1, &v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_AAD7CC((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_AAD7CC((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

char *sub_AAD3F8(char **a1, unsigned int a2, long long *a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = *a1;
  unint64_t v7 = (a1[1] - *a1) >> 3;
  if (v7 <= a2)
  {
    unint64_t v8 = a2 + 1;
    if (v8 <= v7)
    {
      if (v8 < v7) {
        a1[1] = &v6[8 * v8];
      }
    }
    else
    {
      sub_D2BFC((void **)a1, v8 - v7);
      uint64_t v6 = *a1;
    }
  }
  int v9 = &v6[8 * v5];
  unsigned int v10 = *(_DWORD *)v9;
  if (*(_DWORD *)v9
    && (unint64_t v11 = v10 - 1, ((*(void *)&a1[6][(v11 >> 3) & 0x1FFFFFF8] >> (v10 - 1)) & 1) == 0))
  {
    *(_DWORD *)int v9 = v11;
    unint64_t v45 = &a1[3][64 * v11];
    long long v46 = *a3;
    long long v47 = a3[1];
    long long v48 = a3[3];
    *((_OWORD *)v45 + 2) = a3[2];
    *((_OWORD *)v45 + 3) = v48;
    *(_OWORD *)unint64_t v45 = v46;
    *((_OWORD *)v45 + 1) = v47;
    unint64_t v43 = *(unsigned int *)v9;
    *(void *)&a1[6][(v43 >> 3) & 0x1FFFFFF8] |= 1 << v43;
    uint64_t v44 = a1[3];
  }
  else
  {
    __int16 v13 = v9 + 4;
    unint64_t v12 = *((unsigned int *)v9 + 1);
    uint64_t v14 = a1[3];
    unint64_t v15 = a1[4];
    unint64_t v16 = a1 + 3;
    unint64_t v17 = v15 - v14;
    unint64_t v18 = (v15 - v14) >> 6;
    if (v18 <= (v12 + 1) || ((*(void *)&a1[6][(v12 >> 3) & 0x1FFFFFF8] >> v12) & 1) != 0)
    {
      uint64_t v19 = a1[1] - v6;
      unsigned int v20 = v12 + (v17 >> 6) - v10;
      unint64_t v21 = 2 * (v12 - v10) + 2;
      BOOL v22 = v5 >= v19 >> 3;
      if (v5 < v19 >> 3) {
        unint64_t v23 = v20;
      }
      else {
        unint64_t v23 = (v17 >> 6);
      }
      if (v22) {
        unint64_t v24 = 2;
      }
      else {
        unint64_t v24 = v21;
      }
      unint64_t v56 = v17 >> 6;
      if (v18 >= v24 + v18)
      {
        if (v18 > v24 + v18)
        {
          unint64_t v15 = &v14[64 * (v24 + v18)];
          a1[4] = v15;
        }
      }
      else
      {
        sub_AAD9B8((void **)a1 + 3, v24);
        uint64_t v14 = a1[3];
        unint64_t v15 = a1[4];
      }
      unint64_t v55 = v23;
      __int16 v25 = a1 + 6;
      sub_A3E96C((uint64_t)v25, (v15 - v14) >> 6, 0);
      uint64_t v26 = *(unsigned int *)v9;
      uint64_t v27 = *v13;
      unint64_t v28 = (v17 >> 6);
      unsigned int v29 = v26;
      if (v27 != v26)
      {
        memmove(&(*v16)[64 * v28], &(*v16)[64 * v26], &(*v16)[64 * v27] - &(*v16)[64 * v26]);
        unsigned int v29 = *(_DWORD *)v9;
        LODWORD(v26) = *v13;
      }
      uint64_t v54 = v25;
      uint64_t v30 = *v25;
      unint64_t v31 = (void *)(v30 + 8 * (v29 >> 6));
      uint64_t v32 = v29 & 0x3F;
      unint64_t v33 = (v26 & 0x3F) - v32 + 8 * (v30 + 8 * (v26 >> 6) - (void)v31);
      if (v33)
      {
        if (v32)
        {
          if ((64 - v32) >= v33) {
            uint64_t v34 = (v26 & 0x3F) - v32 + 8 * (v30 + 8 * (v26 >> 6) - (void)v31);
          }
          else {
            uint64_t v34 = (64 - v32);
          }
          *v31++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v32 - v34)) & (-1 << v32));
          v33 -= v34;
        }
        if (v33 >= 0x40) {
          bzero(v31, 8 * (v33 >> 6));
        }
        if ((v33 & 0x3F) != 0) {
          v31[v33 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v33 & 0x3F));
        }
      }
      long long v35 = (void *)(v30 + ((v28 >> 3) & 0x1FFFFFF8));
      uint64_t v36 = (v17 >> 6) & 0x3F;
      unint64_t v37 = (v55 & 0x3F) - v36 + 8 * (((v55 >> 3) & 0x1FFFFFF8) - ((v28 >> 3) & 0x1FFFFFF8));
      if (v37)
      {
        if ((v56 & 0x3F) != 0)
        {
          if (64 - (v56 & 0x3F) >= v37) {
            uint64_t v38 = (v55 & 0x3F) - v36 + 8 * (((v55 >> 3) & 0x1FFFFFF8) - ((v28 >> 3) & 0x1FFFFFF8));
          }
          else {
            uint64_t v38 = 64 - (v56 & 0x3F);
          }
          *v35++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - (v56 & 0x3Fu) - v38)) & (-1 << v36);
          v37 -= v38;
        }
        if (v37 >= 0x40) {
          memset(v35, 255, 8 * (v37 >> 6));
        }
        if ((v37 & 0x3F) != 0) {
          v35[v37 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v37 & 0x3F);
        }
      }
      *(_DWORD *)int v9 = v56;
      _DWORD *v13 = v55;
      uint64_t v39 = &(*v16)[64 * v55];
      long long v40 = *a3;
      long long v41 = a3[1];
      long long v42 = a3[3];
      *((_OWORD *)v39 + 2) = a3[2];
      *((_OWORD *)v39 + 3) = v42;
      *(_OWORD *)uint64_t v39 = v40;
      *((_OWORD *)v39 + 1) = v41;
      unint64_t v43 = *v13;
      *(void *)(*v54 + ((v43 >> 3) & 0x1FFFFFF8)) |= 1 << v43;
      uint64_t v44 = *v16;
    }
    else
    {
      uint64_t v49 = &v14[64 * v12];
      long long v50 = *a3;
      long long v51 = a3[1];
      long long v52 = a3[3];
      *((_OWORD *)v49 + 2) = a3[2];
      *((_OWORD *)v49 + 3) = v52;
      *(_OWORD *)uint64_t v49 = v50;
      *((_OWORD *)v49 + 1) = v51;
      unint64_t v43 = *v13;
      *(void *)&a1[6][(v43 >> 3) & 0x1FFFFFF8] |= 1 << v43;
      uint64_t v44 = a1[3];
    }
    _DWORD *v13 = v43 + 1;
  }
  return &v44[64 * v43];
}

unint64_t sub_AAD7CC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  int v9 = *(char **)a1;
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    uint64_t v11 = *(unsigned int *)&v9[8 * a3];
    uint64_t v10 = *(unsigned int *)&v9[8 * a3 + 4];
    if (v10 != v11)
    {
      unsigned __int8 v12 = 0;
      uint64_t v16 = v11 << 6;
      uint64_t v17 = (v10 << 6) - v16;
      unint64_t v18 = (_DWORD *)(v16 + *(void *)(a1 + 24) + 44);
      while (1)
      {
        int v19 = *(v18 - 4);
        if (v19 != 0x7FFFFFFF)
        {
          int v20 = *(_DWORD *)(a2 + 28);
          if (v19 <= v20 && *(v18 - 3) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v21 = *(_DWORD *)(a2 + 36);
            unsigned int v22 = *(v18 - 2);
            if (v22 <= v21
              && *(v18 - 1) <= *(_DWORD *)(a2 + 40)
              && (v22 != v21 || v19 != v20 || 10 * v19 - *v18 <= 10 * v20 - *(_DWORD *)(a2 + 44)))
            {
              return (unint64_t)v12 << 8;
            }
          }
          if (v20 <= v19 && *(_DWORD *)(a2 + 32) <= *(v18 - 3))
          {
            unsigned int v23 = *(v18 - 2);
            unsigned int v24 = *(_DWORD *)(a2 + 36);
            if (v24 <= v23
              && *(_DWORD *)(a2 + 40) <= *(v18 - 1)
              && (v24 != v23 || v20 != v19 || 10 * v20 - *(_DWORD *)(a2 + 44) <= 10 * v19 - *v18))
            {
              *(v18 - 4) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 16;
        v17 -= 64;
        if (!v17) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  __int16 v13 = sub_AAD3F8((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

void sub_AAD9B8(void **a1, unint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = a1[2];
  if (a2 <= (v5 - v4) >> 6)
  {
    if (a2)
    {
      uint64_t v11 = 0;
      do
      {
        unsigned __int8 v12 = &v4[v11];
        *(_OWORD *)unsigned __int8 v12 = xmmword_20E2060;
        *((void *)v12 + 2) = -1;
        *((_DWORD *)v12 + 6) = -1;
        *(void *)(v12 + 44) = 0;
        *(void *)(v12 + 36) = 0;
        *(void *)(v12 + 28) = 0;
        *(void *)(v12 + 52) = -1;
        v11 += 64;
        *((_DWORD *)v12 + 15) = 0x7FFFFFFF;
      }
      while (a2 << 6 != v11);
      a1[1] = &v4[64 * a2];
    }
    else
    {
      a1[1] = v4;
    }
  }
  else
  {
    uint64_t v6 = (v4 - (unsigned char *)*a1) >> 6;
    unint64_t v7 = v6 + a2;
    if ((v6 + a2) >> 58) {
      sub_2E00();
    }
    uint64_t v8 = v5 - (unsigned char *)*a1;
    if (v8 >> 5 > v7) {
      unint64_t v7 = v8 >> 5;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 >> 58) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(v9 << 6);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = 0;
    int v14 = &v10[64 * v6];
    unint64_t v15 = &v14[64 * a2];
    do
    {
      uint64_t v16 = &v14[v13];
      *(_OWORD *)uint64_t v16 = xmmword_20E2060;
      *((void *)v16 + 2) = -1;
      *((_DWORD *)v16 + 6) = -1;
      *(void *)(v16 + 44) = 0;
      *(void *)(v16 + 36) = 0;
      *(void *)(v16 + 28) = 0;
      *(void *)(v16 + 52) = -1;
      v13 += 64;
      *((_DWORD *)v16 + 15) = 0x7FFFFFFF;
    }
    while (a2 << 6 != v13);
    uint64_t v17 = &v10[64 * v9];
    int v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 4);
        long long v21 = *((_OWORD *)v18 - 3);
        long long v22 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v22;
        *((_OWORD *)v14 - 4) = v20;
        *((_OWORD *)v14 - 3) = v21;
        v14 -= 64;
        v18 -= 64;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t sub_AADB74(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3)
    || (uint64_t v4 = (int *)(*a1 + 8 * a2), v3 = *v4, v4[1] - *v4 <= a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_7;
  }
  unint64_t v5 = v3 + a3;
  uint64_t v6 = a1[3];
  if (v5 >= (a1[4] - v6) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_7:
  }
  return v6 + (v5 << 6);
}

void sub_AADC24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AADC38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AADC4C(void **a1, _DWORD *a2, unsigned int a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      unint64_t v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC(a1, v14 - v13);
      unint64_t v15 = &v11[64 * v12];
      unint64_t v16 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
      if (v15 == (char *)v16) {
        return 0;
      }
      goto LABEL_13;
    }
    if (v14 < v13) {
      a1[1] = &v7[8 * v14];
    }
  }
  unint64_t v15 = &v11[64 * v12];
  unint64_t v16 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
  if (v15 == (char *)v16) {
    return 0;
  }
LABEL_13:
  int v17 = a2[7];
  unsigned int v18 = a2[9];
  while (1)
  {
    int v19 = *((_DWORD *)v15 + 7);
    if (v19 != 0x7FFFFFFF && v19 <= v17 && *((_DWORD *)v15 + 8) <= a2[8])
    {
      unsigned int v21 = *((_DWORD *)v15 + 9);
      if (v21 <= v18 && *((_DWORD *)v15 + 10) <= a2[10])
      {
        BOOL v22 = 10 * v19 - *((_DWORD *)v15 + 11) > 10 * v17 - a2[11] && v19 == v17;
        if (!v22 || v21 != v18) {
          break;
        }
      }
    }
    v15 += 64;
    if (v15 == (char *)v16) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_AADDD8(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_AADB74(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_AAD7CC((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

void **sub_AADEBC(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = (void *)a1;
  unsigned int v282 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v243 = *(_DWORD *)sub_A3F74C(v4 + 35, &v282);
  unint64_t v253 = v5;
  double result = (void **)sub_A40514(&v280, v4[3], v5);
  __int16 v7 = v280;
  if ((unint64_t)v280 < v281)
  {
    double result = (void **)(v4 + 13);
    uint64_t v251 = (uint64_t)(v4 + 45);
    long long v252 = v4;
    int v242 = a2 + 2;
    int v240 = ~a2;
    unint64_t v241 = v4 + 23;
    int v244 = a2 + 1;
    unsigned int v254 = (char *)(v4 + 13);
    unint64_t v255 = HIDWORD(v5);
    while (1)
    {
      *((double *)v4 + 69) = *((double *)v4 + 69) + 1.0;
      uint64_t v245 = *(unsigned int *)v7;
      sub_A86790(result, 0);
      sub_A1E9A0((uint64_t)&v268, v4[3], v253, v243, 0, 1);
      uint64_t v8 = v272;
      BOOL v9 = (unint64_t)v272 < v271 || (unint64_t)v272 >= v273;
      if (!v9) {
        break;
      }
LABEL_3:
      __int16 v7 = v280 + 4;
      int v280 = v7;
      double result = (void **)v254;
      if ((unint64_t)v7 >= v281) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v10 = __ROR8__(*v8, 32);
      uint64_t v11 = v4[4];
      uint64_t v12 = *(void *)(v11 + 56) - 1;
      unint64_t v13 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) >> 33));
      unint64_t v14 = v13 ^ (v13 >> 33);
      uint64_t v15 = *(void *)(v11 + 80);
      int v17 = *(_DWORD *)(v11 + 64);
      int v16 = *(_DWORD *)(v11 + 68);
      uint64_t v18 = v14 & v12;
      int v19 = (unsigned int *)(v15 + 12 * (v14 & v12));
      unsigned int v21 = *v19;
      unsigned int v20 = v19[1];
      if (v16 == v20 && v17 == v21) {
        goto LABEL_58;
      }
      if (*(void *)(v11 + 40)) {
        break;
      }
      uint64_t v41 = 1;
      while (__PAIR64__(v20, v21) != v10)
      {
        uint64_t v18 = (v18 + v41) & v12;
        long long v42 = (unsigned int *)(v15 + 12 * v18);
        unsigned int v21 = *v42;
        unsigned int v20 = v42[1];
        ++v41;
        if (v16 == v20 && v17 == v21) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v18 != -1)
      {
        uint64_t v44 = v15 + 12 * v18;
        unsigned int v45 = *(_DWORD *)(v44 + 8);
        if (v45 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v23 = -1;
      if (sub_A3BA84(v4[4], 1))
      {
LABEL_26:
        uint64_t v27 = *(void *)(v11 + 56) - 1;
        uint64_t v28 = *(void *)(v11 + 80);
        int v30 = *(_DWORD *)(v11 + 64);
        int v29 = *(_DWORD *)(v11 + 68);
        uint64_t v31 = v27 & v14;
        uint64_t v32 = (unsigned int *)(v28 + 12 * (v27 & v14));
        unsigned int v34 = *v32;
        unsigned int v33 = v32[1];
        uint64_t v35 = *(void *)(v11 + 40);
        if (v29 == v33 && v30 == v34) {
          goto LABEL_86;
        }
        if (v35)
        {
          uint64_t v37 = -1;
          uint64_t v38 = 1;
          do
          {
            if (*(_DWORD *)(v11 + 36) == v33 && *(_DWORD *)(v11 + 32) == v34)
            {
              if (v37 == -1) {
                uint64_t v37 = v31;
              }
            }
            else if (__PAIR64__(v33, v34) == v10)
            {
              goto LABEL_80;
            }
            uint64_t v31 = (v31 + v38) & v27;
            uint64_t v39 = (unsigned int *)(v28 + 12 * v31);
            unsigned int v34 = *v39;
            unsigned int v33 = v39[1];
            ++v38;
          }
          while (v29 != v33 || v30 != v34);
          if (v37 == -1) {
LABEL_86:
          }
            uint64_t v37 = v31;
          uint64_t v67 = *(void *)(v11 + 48);
          if ((unint64_t)(v67 - v35) >= 0x1555555555555555) {
            goto LABEL_325;
          }
        }
        else
        {
          uint64_t v64 = 1;
          while (__PAIR64__(v33, v34) != v10)
          {
            uint64_t v31 = (v31 + v64) & v27;
            uint64_t v65 = (unsigned int *)(v28 + 12 * v31);
            unsigned int v34 = *v65;
            unsigned int v33 = v65[1];
            ++v64;
            if (v29 == v33 && v30 == v34)
            {
              uint64_t v35 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v31 != -1)
          {
            uint64_t v44 = v28 + 12 * v31;
            unsigned int v45 = *(_DWORD *)(v44 + 8);
            if (v45 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v37 = -1;
          uint64_t v67 = *(void *)(v11 + 48);
          if ((unint64_t)(v67 - v35) >= 0x1555555555555555)
          {
LABEL_325:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v35
          && ((unint64_t v68 = (_DWORD *)(v28 + 12 * v37), *(_DWORD *)(v11 + 36) == v68[1])
            ? (BOOL v69 = *(_DWORD *)(v11 + 32) == *v68)
            : (BOOL v69 = 0),
              v69))
        {
          *(void *)(v11 + 40) = v35 - 1;
          uint64_t v63 = 3 * v37;
        }
        else
        {
          *(void *)(v11 + 48) = v67 + 1;
          uint64_t v63 = 3 * v37;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v60 = *(void *)(v11 + 40);
      uint64_t v59 = *(void *)(v11 + 48);
      if ((unint64_t)(v59 - v60) >= 0x1555555555555555) {
        goto LABEL_325;
      }
      uint64_t v28 = *(void *)(v11 + 80);
      if (v60
        && ((int v61 = (_DWORD *)(v28 + 12 * v23), *(_DWORD *)(v11 + 36) == v61[1])
          ? (BOOL v62 = *(_DWORD *)(v11 + 32) == *v61)
          : (BOOL v62 = 0),
            v62))
      {
        *(void *)(v11 + 40) = v60 - 1;
      }
      else
      {
        *(void *)(v11 + 48) = v59 + 1;
      }
      uint64_t v63 = 3 * v23;
LABEL_95:
      uint64_t v70 = 4 * v63;
      uint64_t v71 = v28 + v70;
      *(void *)uint64_t v71 = v10;
      *(_DWORD *)(v71 + 8) = -1;
      uint64_t v44 = *(void *)(v11 + 80) + v70;
      unsigned int v45 = *(_DWORD *)(v44 + 8);
      if (v45 != -1)
      {
LABEL_50:
        unsigned int v267 = v45;
        if (sub_BD5C18(v251, v45, v10)) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v72 = *(_DWORD *)(v11 + 112);
      *(_DWORD *)(v11 + 112) = v72 + 1;
      *(_DWORD *)(v44 + 8) = v72;
      uint64_t v74 = *(unint64_t **)(v11 + 96);
      unint64_t v73 = *(void *)(v11 + 104);
      if ((unint64_t)v74 < v73)
      {
        *uint64_t v74 = v10;
        uint64_t v75 = (uint64_t)(v74 + 1);
        goto LABEL_119;
      }
      BOOL v76 = *(char **)(v11 + 88);
      uint64_t v77 = ((char *)v74 - v76) >> 3;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v79 = v73 - (void)v76;
      if (v79 >> 2 > v78) {
        unint64_t v78 = v79 >> 2;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80)
      {
        if (v80 >> 61) {
          goto LABEL_327;
        }
        uint64_t v81 = (char *)operator new(8 * v80);
        unsigned int v82 = (unint64_t *)&v81[8 * v77];
        *unsigned int v82 = v10;
        uint64_t v75 = (uint64_t)(v82 + 1);
        if (v74 == (unint64_t *)v76)
        {
LABEL_110:
          *(void *)(v11 + 88) = v82;
          *(void *)(v11 + 96) = v75;
          *(void *)(v11 + 104) = &v81[8 * v80];
          if (v74) {
            goto LABEL_118;
          }
          goto LABEL_119;
        }
      }
      else
      {
        uint64_t v81 = 0;
        unsigned int v82 = (unint64_t *)(8 * v77);
        *(void *)(8 * v77) = v10;
        uint64_t v75 = 8 * v77 + 8;
        if (v74 == (unint64_t *)v76) {
          goto LABEL_110;
        }
      }
      unint64_t v83 = (char *)(v74 - 1) - v76;
      if (v83 < 0x58) {
        goto LABEL_332;
      }
      if ((unint64_t)(v76 - v81) < 0x20) {
        goto LABEL_332;
      }
      uint64_t v84 = (v83 >> 3) + 1;
      uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v86 = &v74[v85 / 0xFFFFFFFFFFFFFFF8];
      unsigned int v82 = (unint64_t *)((char *)v82 - v85);
      unint64_t v87 = &v81[8 * v77 - 16];
      uint64_t v88 = v74 - 2;
      uint64_t v89 = v84 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v90 = *(_OWORD *)v88;
        *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
        *(_OWORD *)unint64_t v87 = v90;
        v87 -= 32;
        v88 -= 4;
        v89 -= 4;
      }
      while (v89);
      uint64_t v74 = v86;
      if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_332:
        do
        {
          unint64_t v91 = *--v74;
          *--unsigned int v82 = v91;
        }
        while (v74 != (unint64_t *)v76);
      }
      uint64_t v74 = *(unint64_t **)(v11 + 88);
      *(void *)(v11 + 88) = v82;
      *(void *)(v11 + 96) = v75;
      *(void *)(v11 + 104) = &v81[8 * v80];
      if (v74) {
LABEL_118:
      }
        operator delete(v74);
LABEL_119:
      *(void *)(v11 + 96) = v75;
      int v4 = v252;
      unsigned int v267 = *(_DWORD *)(v44 + 8);
      if (sub_BD5C18(v251, v267, v10))
      {
LABEL_51:
        long long v46 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v46) {
          goto LABEL_181;
        }
        uint64_t v47 = *v46;
        uint64_t v48 = v46[1];
        if (v48 == v47) {
          goto LABEL_181;
        }
        int v49 = v277;
        uint64_t v50 = v275;
        long long v51 = v270;
        unint64_t v52 = ((unint64_t)v272 - v271) >> 4;
        uint64_t v53 = v47 << 6;
        uint64_t v54 = (int *)(v4[16] + (v47 << 6) + 60);
        uint64_t v55 = (v48 << 6) - v53;
        do
        {
          unsigned int v58 = *(v54 - 2);
          if (v49)
          {
            unsigned int v278 = *(v54 - 1);
            int v56 = *v54;
            int v279 = *v54;
          }
          else
          {
            int v56 = *(_DWORD *)(v50 + 12 * v58);
          }
          uint64_t v57 = (unsigned int *)((char *)v51 + *(unsigned __int16 *)((char *)v51 - *v51 + 6));
          *(v54 - 8) = *(unsigned int *)((char *)&v57[2 * (*(_DWORD *)(v50 + 12 * v58 + 4) + v52) + 1]
                                       + *v57)
                     + v56;
          v54 += 16;
          v55 -= 64;
        }
        while (v55);
        uint64_t v276 = (int *)(v50 + 12 * v58);
        sub_AAF520(v254, 0);
        if ((*((unsigned char *)v272 + 15) & 1) != 0
          && (!v274
           || (*(_DWORD *)(v274 + 4 * (((unint64_t)v272 - v271) >> 4)) & v245) == 0))
        {
          int v97 = *((_DWORD *)v4 + 24);
          if (*((unsigned char *)v4 + 20))
          {
            unsigned int v98 = v97 + v97 * *((_DWORD *)v4 + 88);
            unint64_t v99 = v267;
            uint64_t v100 = (unint64_t *)v4[6];
            if (v100) {
              goto LABEL_131;
            }
LABEL_138:
            int v104 = 2147483646;
          }
          else
          {
            unsigned int v98 = -1;
            unint64_t v99 = v267;
            uint64_t v100 = (unint64_t *)v4[6];
            if (!v100) {
              goto LABEL_138;
            }
LABEL_131:
            if (*v100 > v99)
            {
              unsigned int v101 = 0;
              unsigned int v102 = *((_DWORD *)v4 + 25) + v240;
              unsigned int v103 = v102;
              while (v101 <= v102)
              {
                int v104 = *(_DWORD *)sub_A3F53C(v100 + 2, v100[1] * v99 + v103);
                v101 += 2;
                v103 -= 2;
                if (v104 != 0x7FFFFFFF) {
                  goto LABEL_139;
                }
              }
            }
            int v104 = 0x7FFFFFFF;
          }
LABEL_139:
          int v4 = v252;
          if (sub_AAF7E0((void **)v254, 0, v242 + v97 + v97 * v99, v97 + v97 * v99, v98, v104)) {
            sub_A3EF14(v241, &v267);
          }
        }
        int v105 = (unsigned int *)v4[13];
        uint64_t v106 = (unsigned int *)v4[14];
        uint64_t v107 = (char *)v106 - (char *)v105;
        if (v106 != v105)
        {
          uint64_t v108 = v254;
          uint64_t v109 = v4[16];
          uint64_t v110 = *v105;
          goto LABEL_173;
        }
        uint64_t v112 = v107 >> 3;
        unint64_t v113 = 1 - (v107 >> 3);
        uint64_t v114 = v4[15];
        if (v113 > (v114 - (uint64_t)v106) >> 3)
        {
          uint64_t v115 = v114 - (void)v105;
          uint64_t v116 = v115 >> 2;
          if ((unint64_t)(v115 >> 2) <= 1) {
            uint64_t v116 = 1;
          }
          BOOL v9 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v9) {
            unint64_t v117 = v116;
          }
          if (v117 >> 61) {
LABEL_327:
          }
            sub_188D718();
          uint64_t v118 = 8 * v117;
          unsigned int v119 = (char *)operator new(8 * v117);
          size_t v120 = &v119[8 * v112];
          bzero(v120, 8 * v113);
          unint64_t v121 = &v120[8 * v113];
          int v4 = v252;
          v252[13] = v120;
          v252[14] = v121;
          v252[15] = &v119[v118];
          if (v106)
          {
            operator delete(v106);
            long long v122 = (char *)v252[14];
            uint64_t v108 = v254;
            int v105 = *(unsigned int **)v254;
            uint64_t v109 = v252[16];
            uint64_t v110 = **(unsigned int **)v254;
            if (*(char **)v254 != v122) {
              goto LABEL_173;
            }
          }
          else
          {
            long long v122 = &v120[8 * v113];
            uint64_t v108 = v254;
            int v105 = *(unsigned int **)v254;
            uint64_t v109 = v252[16];
            uint64_t v110 = **(unsigned int **)v254;
            if (*(char **)v254 != v121) {
              goto LABEL_173;
            }
          }
LABEL_143:
          unsigned int v111 = (char *)v4[15];
          if (v111 != v122)
          {
            *(void *)long long v122 = 0;
            v4[14] = v122 + 8;
            goto LABEL_170;
          }
          uint64_t v123 = 1;
          uint64_t v124 = v111 - (char *)v105;
          if ((unint64_t)(v124 >> 2) > 1) {
            uint64_t v123 = v124 >> 2;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v125 = v123;
          }
          if (v125)
          {
            if (v125 >> 61) {
              goto LABEL_327;
            }
            unint64_t v126 = (char *)operator new(8 * v125);
            uint64_t v108 = v254;
            uint64_t v127 = v126;
            *(void *)unint64_t v126 = 0;
            uint64_t v128 = (uint64_t)(v126 + 8);
            if (v122 != (char *)v105)
            {
LABEL_164:
              unint64_t v129 = v122 - 8 - (char *)v105;
              if (v129 < 0x58 || (unint64_t)(v122 - v126) < 0x20)
              {
                uint64_t v130 = (unsigned int *)v122;
                goto LABEL_167;
              }
              uint64_t v228 = (v129 >> 3) + 1;
              uint64_t v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v130 = (unsigned int *)&v122[-v229];
              v127 -= v229;
              uint64_t v230 = v126 - 16;
              long long v231 = v122 - 16;
              uint64_t v232 = v228 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v233 = *(_OWORD *)v231;
                *((_OWORD *)v230 - 1) = *((_OWORD *)v231 - 1);
                *(_OWORD *)uint64_t v230 = v233;
                v230 -= 32;
                v231 -= 32;
                v232 -= 4;
              }
              while (v232);
              if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_167:
                  uint64_t v131 = *((void *)v130 - 1);
                  v130 -= 2;
                  *((void *)v127 - 1) = v131;
                  v127 -= 8;
                }
                while (v130 != v105);
              }
              long long v122 = *(char **)v108;
              v4[13] = v127;
              v4[14] = v128;
              v4[15] = &v126[8 * v125];
              if (v122)
              {
LABEL_169:
                operator delete(v122);
                uint64_t v108 = v254;
              }
LABEL_170:
              uint64_t v132 = (_DWORD *)(v109 + (v110 << 6));
              unint64_t v133 = v4[16] + ((unint64_t)*(unsigned int *)(v4[13] + 4) << 6);
              if (v132 == (_DWORD *)v133)
              {
LABEL_180:
                sub_AAF520(v108, 0);
LABEL_181:
                if ((*((unsigned char *)v272 + 15) & 2) == 0) {
                  goto LABEL_188;
                }
                if (v274)
                {
                  if (*(_DWORD *)(v274 + 4 * (((unint64_t)v272 - v271) >> 4)) != v245) {
                    goto LABEL_188;
                  }
                }
                else if (v245)
                {
                  goto LABEL_188;
                }
                unint64_t v141 = v244 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v267;
                uint64_t v142 = v4[13];
                if (v141 >= (v4[14] - v142) >> 3) {
                  goto LABEL_188;
                }
                long long v144 = (_DWORD *)(v142 + 8 * v141);
                int v143 = v144[1];
                uint64_t v145 = (v143 - *v144);
                if (v143 == *v144) {
                  goto LABEL_188;
                }
                unsigned int v154 = 0;
                while (2)
                {
                  uint64_t v155 = v4[13];
                  if (v141 >= (v4[14] - v155) >> 3
                    || (v157 = (int *)(v155 + 8 * v141), int v156 = *v157, v157[1] - *v157 <= v154))
                  {
                    int v234 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    sub_188D9E0(v234, "key does not exist and cannot be added");
                    goto LABEL_324;
                  }
                  unint64_t v158 = v156 + v154;
                  uint64_t v159 = v4[16];
                  if (v158 >= (v4[17] - v159) >> 6)
                  {
                    int v234 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    sub_188D9E0(v234, "index out of range");
LABEL_324:
                  }
                  uint64_t v160 = v159 + (v158 << 6);
                  signed int v161 = *((_DWORD *)v272 + 2) + *(_DWORD *)(v160 + 28);
                  if (v277)
                  {
                    if (!sub_A1F39C(v4[3], (uint64_t)&v268, v161, 1)) {
                      goto LABEL_214;
                    }
LABEL_222:
                    uint64_t v162 = v145;
                    uint64_t v248 = *(void *)(v160 + 20);
                    unsigned int v163 = *(_DWORD *)(v160 + 40);
                    int v246 = *(_DWORD *)(v160 + 36);
                    int v247 = *(_DWORD *)(v160 + 44);
                    int v249 = *(_DWORD *)(v160 + 48);
                    int v250 = *(_DWORD *)(v160 + 32);
                    uint64_t v164 = (void *)(v4[3] + 4136);
                    if (sub_A10E20(v164, v255))
                    {
                      uint64_t v165 = (int *)sub_A1120C(*(void *)(*v164 + 3944), v253);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v226 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                      }
                      uint64_t v166 = *v164;
                      if (dword_24F7300 == v255)
                      {
                        unsigned int v167 = *(unsigned int **)(*(void *)(v166 + 3976) + 72);
                        if (!v167)
                        {
                          unsigned int v238 = __cxa_allocate_exception(0x40uLL);
                          unsigned int v283 = (char *)operator new(0x40uLL);
                          long long v284 = xmmword_20B9A90;
                          strcpy(v283, "Realtime stop pattern quad data requested on nullptr buffer");
                          unsigned int v239 = (void *)sub_2F404((uint64_t)v238, (long long *)&v283);
                        }
                        uint64_t v168 = (int *)((char *)v167 + *v167);
                        unint64_t v169 = (unsigned __int16 *)((char *)v168 - *v168);
                        if (*v169 >= 5u && (uint64_t v170 = v169[2]) != 0) {
                          uint64_t v171 = (unsigned int *)((char *)v168 + v170 + *(unsigned int *)((char *)v168 + v170));
                        }
                        else {
                          uint64_t v171 = 0;
                        }
                        uint64_t v165 = (int *)sub_A1139C(v171, v253);
                      }
                      else
                      {
                        uint64_t v165 = (int *)sub_A11500(v166 + 24, v253, 0, "stop pattern");
                      }
                    }
                    uint64_t v172 = v165;
                    uint64_t v173 = *v164;
                    int v174 = (unsigned __int16 *)((char *)v165 - *v165);
                    if (*v174 >= 0xFu && (uint64_t v175 = v174[7]) != 0)
                    {
                      uint64_t v176 = v173 + 3896;
                      char v177 = sub_49442C(*(unsigned __int16 *)((char *)v165 + v175));
                      if ((sub_C25A10(v176, v177) & 1) == 0)
                      {
LABEL_236:
                        uint64_t v178 = (unsigned __int16 *)((char *)v172 - *v172);
                        int v4 = v252;
                        if (*v178 >= 0xBu && (uint64_t v179 = v178[5]) != 0)
                        {
                          int v180 = sub_A2BF48(*((unsigned char *)v172 + v179));
                          if (sub_A10E20(v164, v255))
                          {
LABEL_242:
                            int8x8_t v183 = (int *)sub_A1120C(*(void *)(*v164 + 3944), v253);
                            goto LABEL_251;
                          }
                        }
                        else
                        {
                          int v180 = sub_A2BF48(0);
                          if (sub_A10E20(v164, v255)) {
                            goto LABEL_242;
                          }
                        }
LABEL_244:
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_24F7308))
                        {
                          sub_518C8(0x3B60u, 0x7FCAu);
                          dword_24F7300 = v227 | 0x40000000;
                          __cxa_guard_release(&qword_24F7308);
                          int v4 = v252;
                        }
                        uint64_t v184 = *v164;
                        if (dword_24F7300 == v255)
                        {
                          unint64_t v185 = *(unsigned int **)(*(void *)(v184 + 3976) + 72);
                          if (!v185)
                          {
                            int v236 = __cxa_allocate_exception(0x40uLL);
                            unsigned int v283 = (char *)operator new(0x40uLL);
                            long long v284 = xmmword_20B9A90;
                            strcpy(v283, "Realtime stop pattern quad data requested on nullptr buffer");
                            int v237 = (void *)sub_2F404((uint64_t)v236, (long long *)&v283);
                          }
                          uint64_t v145 = v162;
                          uint8x8_t v186 = (int *)((char *)v185 + *v185);
                          unint64_t v187 = (unsigned __int16 *)((char *)v186 - *v186);
                          if (*v187 >= 5u && (uint64_t v188 = v187[2]) != 0) {
                            unint64_t v189 = (unsigned int *)((char *)v186 + v188 + *(unsigned int *)((char *)v186 + v188));
                          }
                          else {
                            unint64_t v189 = 0;
                          }
                          int8x8_t v183 = (int *)sub_A1139C(v189, v253);
                          unint64_t v190 = (unsigned __int16 *)((char *)v183 - *v183);
                          if (*v190 >= 0x19u) {
                            goto LABEL_255;
                          }
LABEL_257:
                          unsigned int v192 = 2;
                        }
                        else
                        {
                          int8x8_t v183 = (int *)sub_A11500(v184 + 24, v253, 0, "stop pattern");
LABEL_251:
                          uint64_t v145 = v162;
                          unint64_t v190 = (unsigned __int16 *)((char *)v183 - *v183);
                          if (*v190 < 0x19u) {
                            goto LABEL_257;
                          }
LABEL_255:
                          uint64_t v191 = v190[12];
                          if (!v191) {
                            goto LABEL_257;
                          }
                          unsigned int v192 = *((unsigned __int8 *)v183 + v191);
                        }
                        unsigned int v193 = sub_A2BF38(v192);
                        if (v163 <= v193) {
                          unsigned int v194 = v193;
                        }
                        else {
                          unsigned int v194 = v163;
                        }
                        int v195 = v279;
                        unint64_t v196 = 0xFFFFFFFF00000000;
                        if (v277) {
                          unint64_t v196 = (unint64_t)v278 << 32;
                        }
                        unint64_t v197 = (-1431655765 * (((unint64_t)v276 - v275) >> 2)) | v196;
                        if (!v277) {
                          int v195 = 0x7FFFFFFF;
                        }
                        char v198 = (unsigned int *)((char *)v270 + *(unsigned __int16 *)((char *)v270 - *v270 + 6));
                        uint64_t v199 = (char *)v198 + *v198;
                        int v200 = &v279;
                        if (!v277) {
                          int v200 = v276;
                        }
                        int v201 = *v200;
                        unint64_t v202 = ((unint64_t)v272 - v271) >> 4;
                        int v203 = *(_DWORD *)&v199[8 * (v276[1] + v202) + 4];
                        int v204 = *(_DWORD *)&v199[8 * (v276[1] + v202) + 8] + v201;
                        int v205 = ((10 * (v201 - *(_DWORD *)(v160 + 28) + v203)) & ~((10
                                                                                 * (v201 - *(_DWORD *)(v160 + 28) + v203)) >> 31))
                             + v247;
                        LODWORD(v256) = v202;
                        *(void *)((char *)&v256 + 4) = v197;
                        HIDWORD(v256) = v195;
                        unsigned int v257 = v282;
                        uint64_t v258 = v248;
                        int v259 = v204;
                        int v260 = v250;
                        unsigned int v261 = v180 + v246;
                        unsigned int v262 = v194;
                        int v263 = v205;
                        int v264 = v249;
                        unint64_t v265 = v197;
                        int v266 = v195;
                        uint64_t v206 = (unsigned int *)v4[13];
                        if ((unsigned int *)v4[14] == v206
                          || (v208 = *v206, uint64_t v207 = *(unsigned int *)(v4[13] + 4), v207 == v208))
                        {
                          sub_AAD3F8((char **)v254, 0, &v256);
                        }
                        else
                        {
                          char v209 = 0;
                          uint64_t v210 = v208 << 6;
                          uint64_t v211 = (v207 << 6) - v210;
                          unint64_t v212 = (_DWORD *)(v4[16] + v210 + 44);
                          do
                          {
                            int v213 = *(v212 - 4);
                            if (v213 != 0x7FFFFFFF)
                            {
                              if (v213 <= v259 && *(v212 - 3) <= v260)
                              {
                                unsigned int v214 = *(v212 - 2);
                                if (v214 <= v261
                                  && *(v212 - 1) <= v262
                                  && (v214 != v261 || v213 != v259 || 10 * v213 - *v212 <= 10 * v259 - v263))
                                {
                                  goto LABEL_289;
                                }
                              }
                              if (v259 <= v213 && v260 <= *(v212 - 3))
                              {
                                unsigned int v215 = *(v212 - 2);
                                if (v261 <= v215
                                  && v262 <= *(v212 - 1)
                                  && (v261 != v215 || v259 != v213 || 10 * v259 - v263 <= 10 * v213 - *v212))
                                {
                                  *(v212 - 4) = 0x7FFFFFFF;
                                  char v209 = 1;
                                }
                              }
                            }
                            v212 += 16;
                            v211 -= 64;
                          }
                          while (v211);
                          sub_AAD3F8((char **)v254, 0, &v256);
LABEL_289:
                          if (v209)
                          {
                            uint64_t v216 = (unsigned int *)v4[13];
                            if ((unsigned int *)v4[14] != v216)
                            {
                              uint64_t v217 = v4[16];
                              uint64_t v218 = *v216;
LABEL_292:
                              unint64_t v219 = v217 + (v218 << 6);
                              unint64_t v220 = v217 + ((unint64_t)v216[1] << 6);
                              uint64_t v221 = (void **)v254;
                              if (v219 != v220) {
                                goto LABEL_296;
                              }
                              goto LABEL_302;
                            }
                            sub_D2BFC((void **)v254, 1uLL);
                            uint64_t v216 = (unsigned int *)v4[13];
                            uint64_t v217 = v4[16];
                            uint64_t v218 = *v216;
                            if ((unsigned int *)v4[14] != v216) {
                              goto LABEL_292;
                            }
                            sub_D2BFC((void **)v254, 1uLL);
                            uint64_t v216 = (unsigned int *)v4[13];
                            unint64_t v219 = v217 + (v218 << 6);
                            unint64_t v220 = v4[16] + ((unint64_t)v216[1] << 6);
                            uint64_t v221 = (void **)v254;
                            if (v219 == v220)
                            {
LABEL_302:
                              if ((unsigned int *)v4[14] == v216) {
                                goto LABEL_303;
                              }
                            }
                            else
                            {
LABEL_296:
                              while (*(_DWORD *)(v219 + 28) != 0x7FFFFFFF)
                              {
                                v219 += 64;
                                if (v219 == v220)
                                {
                                  unint64_t v219 = v220;
                                  if ((unsigned int *)v4[14] != v216) {
                                    goto LABEL_304;
                                  }
                                  goto LABEL_303;
                                }
                              }
                              if (v219 == v220) {
                                goto LABEL_302;
                              }
                              unint64_t v222 = v219 + 64;
                              if (v219 + 64 == v220) {
                                goto LABEL_302;
                              }
                              do
                              {
                                if (*(_DWORD *)(v222 + 28) != 0x7FFFFFFF)
                                {
                                  long long v223 = *(_OWORD *)v222;
                                  long long v224 = *(_OWORD *)(v222 + 16);
                                  long long v225 = *(_OWORD *)(v222 + 48);
                                  *(_OWORD *)(v219 + 32) = *(_OWORD *)(v222 + 32);
                                  *(_OWORD *)(v219 + 48) = v225;
                                  *(_OWORD *)unint64_t v219 = v223;
                                  *(_OWORD *)(v219 + 16) = v224;
                                  v219 += 64;
                                }
                                v222 += 64;
                              }
                              while (v222 != v220);
                              uint64_t v216 = (unsigned int *)*v221;
                              if ((void *)v4[14] == *v221)
                              {
LABEL_303:
                                sub_D2BFC(v221, 1uLL);
                                uint64_t v221 = (void **)v254;
                                uint64_t v216 = *(unsigned int **)v254;
                              }
                            }
LABEL_304:
                            sub_A86AC4(v221, 0, (char *)v219, (char *)(v4[16] + ((unint64_t)v216[1] << 6)));
                          }
                        }
LABEL_214:
                        if (++v154 == v145) {
                          goto LABEL_188;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      uint64_t v181 = v173 + 3896;
                      char v182 = sub_49442C(0x7FFFu);
                      if ((sub_C25A10(v181, v182) & 1) == 0) {
                        goto LABEL_236;
                      }
                    }
                    int v180 = 128;
                    int v4 = v252;
                    if (sub_A10E20(v164, v255)) {
                      goto LABEL_242;
                    }
                    goto LABEL_244;
                  }
                  break;
                }
                if (sub_A1F8B4((uint64_t)&v268, v161, 1)) {
                  goto LABEL_222;
                }
                goto LABEL_214;
              }
LABEL_174:
              int v134 = v277;
              uint64_t v135 = v275;
              uint64_t v136 = v270;
              unint64_t v137 = ((unint64_t)v272 - v271) >> 4;
              do
              {
                unsigned int v140 = v132[13];
                if (v134)
                {
                  unsigned int v278 = v132[14];
                  int v138 = v132[15];
                  int v279 = v138;
                }
                else
                {
                  int v138 = *(_DWORD *)(v135 + 12 * v140);
                }
                uint64_t v139 = (unsigned int *)((char *)v136 + *(unsigned __int16 *)((char *)v136 - *v136 + 6));
                v132[7] = *(unsigned int *)((char *)&v139[2 * (*(_DWORD *)(v135 + 12 * v140 + 4) + v137)
                                                        + 2]
                                          + *v139)
                        + v138;
                v132 += 16;
              }
              while (v132 != (_DWORD *)v133);
              uint64_t v276 = (int *)(v135 + 12 * v140);
              goto LABEL_180;
            }
          }
          else
          {
            unint64_t v126 = 0;
            uint64_t v127 = 0;
            *(void *)&def_332C = 0;
            uint64_t v128 = 8;
            if (v122 != (char *)v105) {
              goto LABEL_164;
            }
          }
          v4[13] = v127;
          v4[14] = v128;
          v4[15] = &v126[8 * v125];
          if (v122) {
            goto LABEL_169;
          }
          goto LABEL_170;
        }
        bzero((void *)v4[14], 8 * v113);
        long long v122 = (char *)&v106[2 * v113];
        v4[14] = v122;
        uint64_t v108 = v254;
        int v105 = *(unsigned int **)v254;
        uint64_t v109 = v4[16];
        uint64_t v110 = **(unsigned int **)v254;
        if (*(char **)v254 == v122) {
          goto LABEL_143;
        }
LABEL_173:
        uint64_t v132 = (_DWORD *)(v109 + (v110 << 6));
        unint64_t v133 = v109 + ((unint64_t)v105[1] << 6);
        if (v132 == (_DWORD *)v133) {
          goto LABEL_180;
        }
        goto LABEL_174;
      }
LABEL_120:
      if (!*((unsigned char *)v4 + 21))
      {
        uint64_t v92 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v92)
        {
          sub_D2BFC((void **)v254, 1uLL);
          uint64_t v92 = (unsigned int *)v4[13];
          uint64_t v93 = v4[16];
          uint64_t v94 = *v92;
          if ((unsigned int *)v4[14] == v92)
          {
            unint64_t v96 = (void **)v254;
            sub_D2BFC((void **)v254, 1uLL);
            uint64_t v92 = (unsigned int *)v4[13];
            uint64_t v95 = v4[16];
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v93 = v4[16];
          uint64_t v94 = *v92;
        }
        uint64_t v95 = v93;
        unint64_t v96 = (void **)v254;
LABEL_126:
        sub_A86AC4(v96, 0, (char *)(v93 + (v94 << 6)), (char *)(v95 + ((unint64_t)v92[1] << 6)));
      }
LABEL_188:
      unint64_t v146 = v271;
      uint64_t v8 = v272 + 2;
      v272 += 2;
      if (*(unsigned char *)(v268 + 16)) {
        BOOL v147 = v269 == 0;
      }
      else {
        BOOL v147 = 0;
      }
      if (v147 && (unint64_t)v8 >= v271 && (unint64_t)v8 < v273)
      {
        do
        {
          unint64_t v150 = __ROR8__(*v8, 32);
          if (HIDWORD(v150) == 1 && (v150 + 3) < 2) {
            break;
          }
          char v152 = sub_2AB7E4(**(void **)(v268 + 4120));
          unint64_t v146 = v271;
          uint64_t v8 = v272;
          if (v152) {
            break;
          }
          uint64_t v8 = v272 + 2;
          unint64_t v272 = v8;
        }
        while ((unint64_t)v8 >= v271 && (unint64_t)v8 < v273);
      }
      if ((unint64_t)v8 < v146 || (unint64_t)v8 >= v273) {
        goto LABEL_3;
      }
    }
    uint64_t v23 = -1;
    uint64_t v24 = 1;
    do
    {
      if (*(_DWORD *)(v11 + 36) == v20 && *(_DWORD *)(v11 + 32) == v21)
      {
        if (v23 == -1) {
          uint64_t v23 = v18;
        }
      }
      else if (__PAIR64__(v20, v21) == v10)
      {
        goto LABEL_48;
      }
      uint64_t v18 = (v18 + v24) & v12;
      __int16 v25 = (unsigned int *)(v15 + 12 * v18);
      unsigned int v21 = *v25;
      unsigned int v20 = v25[1];
      ++v24;
    }
    while (v16 != v20 || v17 != v21);
    if (v23 != -1)
    {
      if (sub_A3BA84(v4[4], 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v23 = v18;
    if (sub_A3BA84(v4[4], 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_AAF4A8(_Unwind_Exception *a1)
{
}

void sub_AAF4C0(_Unwind_Exception *a1)
{
}

void sub_AAF4D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v1 + 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_AAF520(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        double result = (char *)sub_AADB74(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_50:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            unint64_t v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_50;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (v12 >= (*((void *)v2 + 4) - v13) >> 6) {
                break;
              }
              uint64_t v14 = v13 + (v12 << 6);
              int v17 = *(_DWORD *)(v14 + 28);
              int v16 = (_DWORD *)(v14 + 28);
              int v15 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 <= v15
                  && (uint64_t v19 = v13 + (v12 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v19 + 32))
                  && (v20 = *(_DWORD *)(v19 + 36), unsigned int v21 = *((_DWORD *)result + 9), v21 <= v20)
                  && (uint64_t v22 = v13 + (v12 << 6), *((_DWORD *)result + 10) <= *(_DWORD *)(v22 + 40))
                  && ((int v23 = 10 * v15 - *(_DWORD *)(v22 + 44), v21 == v20) ? (v24 = v18 == v15) : (v24 = 0),
                      v24 ? (BOOL v25 = 10 * v18 - *((_DWORD *)result + 11) <= v23) : (BOOL v25 = 1),
                      v25))
                {
                  *int v16 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v15 <= v18)
                {
                  uint64_t v26 = v13 + (v12 << 6);
                  if (*(_DWORD *)(v26 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v27 = *((_DWORD *)result + 9);
                    unsigned int v28 = *(_DWORD *)(v26 + 36);
                    if (v28 <= v27)
                    {
                      uint64_t v29 = v13 + (v12 << 6);
                      if (*(_DWORD *)(v29 + 40) <= *((_DWORD *)result + 10))
                      {
                        int v30 = 10 * v15 - *(_DWORD *)(v29 + 44);
                        BOOL v31 = v28 == v27 && v15 == v18;
                        if (!v31 || v30 <= 10 * v18 - *((_DWORD *)result + 11))
                        {
                          *((_DWORD *)result + 7) = 0x7FFFFFFF;
                          char v5 = 1;
                          goto LABEL_6;
                        }
                      }
                    }
                  }
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_AAF7B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AAF7CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AAF7E0(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AADB74(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_AADB74(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) <= a6)
      {
        if (sub_AADC4C(a1, &v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_AAD7CC((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      int v30 = (long long *)sub_AADB74(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) <= a6)
      {
        if (sub_AADC4C(a1, &v36, a5) & 1) != 0 || (sub_AADC4C(a1, &v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_AAD7CC((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_AAFA24(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  unsigned int v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    unint64_t v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      unint64_t v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AAFCD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AAFD08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  int v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A40DC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    unint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AB0050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AB00F0(uint64_t a1, int a2)
{
  int v91 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v90[0] = *(_OWORD *)(a1 + 88);
  v90[1] = v4;
  LOBYTE(v90[0]) = 0;
  v89[0] = (uint64_t)v90;
  v89[1] = a1;
  v89[2] = (uint64_t)&v91;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v92 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v11 - v10);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_AB1888(v89, v10);
    LODWORD(v81[0]) = v14;
    unsigned int v11 = v92;
    if (v14 != 0x7FFFFFFF && v14 < (int)v92)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        int v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v81[0];
      unsigned int v92 = v81[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 % 10;
      int v49 = (void *)std::ostream::operator<<();
      sub_188FC78(v49, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v81, 2u);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
      uint64_t v85 = v80;
      *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 % 10;
    }
    char v50 = v22 < 0 ? -5 : 5;
    int v51 = v22 / -10 + v10 + (((-103 * (char)(v50 + v48)) >> 15) & 1) + ((-103 * (char)(v50 + v48)) >> 10);
    unsigned int v52 = sub_AB1888(v89, v51);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v52 - v92))) >= (double)(int)fabs((double)(10 * (v51 - v10)))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v46 = (double)(v53 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v54 = v52;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    uint64_t v55 = (void *)std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)"] Journey duration improved from ", 33);
    int v56 = (void *)std::ostream::operator<<();
    sub_188FC78(v56, (uint64_t)" to ", 4);
    uint64_t v57 = (void *)std::ostream::operator<<();
    sub_188FC78(v57, (uint64_t)" sec for time shift of ", 23);
    unsigned int v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v85 = v80;
    *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v92 = v54;
  int v23 = v10;
  if (v51 != v10)
  {
    double v59 = (double)v22 * 0.5;
    if (v59 >= 0.0)
    {
      if (v59 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v59 + v59) + 1;
        goto LABEL_93;
      }
    }
    else if (v59 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59);
      if (v60 >= 1) {
        --v60;
      }
LABEL_93:
      double v59 = (double)(v60 >> 1);
    }
    double v61 = (double)v22 * 0.25;
    if (v61 >= 0.0)
    {
      if (v61 < 4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        goto LABEL_101;
      }
    }
    else if (v61 > -4.50359963e15)
    {
      uint64_t v62 = (uint64_t)(v61 + v61);
      if (v62 >= 1) {
        --v62;
      }
LABEL_101:
      double v61 = (double)(v62 >> 1);
    }
    int v63 = (int)v61;
    if (*(_DWORD *)(a1 + 60) > (int)v61)
    {
      int v23 = v51;
      goto LABEL_30;
    }
    int v23 = v51;
    int v64 = (int)v59;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v66 = v63 + v64;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v67 = (void *)std::ostream::operator<<();
        sub_188FC78(v67, (uint64_t)"] Examining time shift of ", 26);
        int v68 = v66 % 10;
        BOOL v69 = (void *)std::ostream::operator<<();
        sub_188FC78(v69, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v81, 2u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        uint64_t v85 = v80;
        *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v68 = v66 % 10;
      }
      if (v66 < 0) {
        char v70 = -5;
      }
      else {
        char v70 = 5;
      }
      int v71 = v66 / -10
          + v10
          + (((-103 * (char)(v70 + v68)) >> 15) & 1)
          + ((-103 * (char)(v70 + v68)) >> 10);
      unsigned int v72 = sub_AB1888(v89, v71);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v92 - v72))) >= (double)(int)fabs((double)(10 * (v23 - v71))))
      {
        v64 += v63;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v73 = v72;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v85);
          sub_188FC78(&v85, (uint64_t)"[", 1);
          uint64_t v74 = (void *)std::ostream::operator<<();
          sub_188FC78(v74, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v75 = (void *)std::ostream::operator<<();
          sub_188FC78(v75, (uint64_t)" to ", 4);
          BOOL v76 = (void *)std::ostream::operator<<();
          sub_188FC78(v76, (uint64_t)" sec for time shift of ", 23);
          uint64_t v77 = (void *)std::ostream::operator<<();
          sub_188FC78(v77, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v81, 2u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          uint64_t v85 = v80;
          *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
          if (v88 < 0) {
            operator delete(v87);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v92 = v73;
        int v23 = v71;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0)
        {
LABEL_125:
          if (v65 < 4.50359963e15)
          {
            uint64_t v78 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v65 > -4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v65 + v65);
        if (v78 >= 1) {
          --v78;
        }
LABEL_105:
        double v65 = (double)(v78 >> 1);
      }
LABEL_106:
      int v63 = (int)v65;
      if (*(_DWORD *)(a1 + 60) > (int)v65) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v92;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"arrival", 7);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v91;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v91 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v91 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v91 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v91 + 3;
    int v35 = v91;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / -10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_AB1888(v89, v42 + v10 + (((-103 * (char)(v44 + v43)) >> 15) & 1) + ((-103 * (char)(v44 + v43)) >> 10));
  return v92;
}

void sub_AB12F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_AB146C(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_AB1B44(a1 + 1336, v42);
  sub_AB1DF4((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_AB180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_AB1888(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A3C368(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_AB1AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_AB1B44(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_AB42F4(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_AB44EC(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_AB4650(a1, v6);
        sub_AB4978(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_AB5D88(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_AB74AC(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_AACD20(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_AB6CE8(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_AB1DF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  unsigned int v296 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v333) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v294 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v333) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v295 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v298 = _Q0;
    int v297 = 1;
    unint64_t v304 = a1;
    size_t v303 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_AB73C8(v7, v297 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v299 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          long long v300 = (unsigned int *)(v12 + (v13 << 6));
          if (v300 != (unsigned int *)v299) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v299 = v12 + ((unint64_t)v11[1] << 6);
      long long v300 = (unsigned int *)(v12 + (v13 << 6));
      if (v300 != (unsigned int *)v299) {
        break;
      }
LABEL_9:
      if (++v297 == v295) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v333 = 0x7FFFFFFF;
      __int16 v334 = 0;
      unint64_t v335 = 0x8000000080000000;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      int v338 = 0x7FFFFFFF;
      __int16 v339 = 0;
      unint64_t v340 = 0x8000000080000000;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0xFFFFFFFF00000000;
      int v345 = -1;
      uint64_t v346 = 0;
      uint64_t v348 = 0;
      uint64_t v349 = 0;
      uint64_t v350 = 0;
      int v347 = 0x7FFFFFFF;
      int v351 = 100;
      int v352 = -1;
      long long v353 = v298;
      long long v354 = v298;
      long long v355 = v298;
      long long v356 = 0u;
      long long v357 = 0u;
      long long v358 = 0u;
      long long v359 = 0u;
      uint64_t v14 = a1[3];
      long long v360 = 0u;
      long long v361 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v300 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v300 != -1) {
        break;
      }
LABEL_397:
      sub_A29D50((uint64_t)__p);
      unint64_t v268 = *(void *)(v3 + 16);
      if (v268 >= *(void *)(v3 + 24))
      {
        uint64_t v269 = sub_A4D268(v296, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v269 = v268 + 296;
        *(void *)(v3 + 16) = v268 + 296;
      }
      int v7 = v303;
      *(void *)(v3 + 16) = v269;
      if (*((void *)&v360 + 1))
      {
        *(void *)&long long v361 = *((void *)&v360 + 1);
        operator delete(*((void **)&v360 + 1));
      }
      if ((void)v359)
      {
        *((void *)&v359 + 1) = v359;
        operator delete((void *)v359);
      }
      if (*((void *)&v357 + 1))
      {
        *(void *)&long long v358 = *((void *)&v357 + 1);
        operator delete(*((void **)&v357 + 1));
      }
      unint64_t v270 = (void **)v356;
      if ((void)v356)
      {
        uint64_t v271 = *((void *)&v356 + 1);
        unint64_t v272 = (void *)v356;
        if (*((void *)&v356 + 1) != (void)v356)
        {
          do
          {
            uint64_t v274 = *(void **)(v271 - 40);
            if (v274)
            {
              *(void *)(v271 - 32) = v274;
              operator delete(v274);
            }
            uint64_t v275 = (void **)(v271 - 72);
            uint64_t v276 = *(void *)(v271 - 72);
            if (v276)
            {
              uint64_t v277 = *(void *)(v271 - 64);
              unint64_t v273 = *(void **)(v271 - 72);
              if (v277 != v276)
              {
                do
                {
                  if (!*(_DWORD *)(v277 - 8))
                  {
                    unsigned int v278 = *(void **)(v277 - 48);
                    if (v278)
                    {
                      *(void *)(v277 - 40) = v278;
                      operator delete(v278);
                    }
                    int v279 = *(void **)(v277 - 80);
                    if (v279)
                    {
                      *(void *)(v277 - 72) = v279;
                      operator delete(v279);
                    }
                    int v280 = *(void **)(v277 - 104);
                    if (v280)
                    {
                      *(void *)(v277 - 96) = v280;
                      operator delete(v280);
                    }
                  }
                  v277 -= 168;
                }
                while (v277 != v276);
                unint64_t v273 = *v275;
              }
              *(void *)(v271 - 64) = v276;
              operator delete(v273);
              a1 = v304;
            }
            v271 -= 72;
          }
          while (v275 != v270);
          unint64_t v272 = (void *)v356;
        }
        *((void *)&v356 + 1) = v270;
        operator delete(v272);
      }
      if (SHIBYTE(v350) < 0) {
        operator delete(v348);
      }
      v300 += 16;
      if (v300 == (unsigned int *)v299) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v300;
    int v306 = v297;
    unsigned int v307 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v324 = 0;
      int v325 = 0;
      unint64_t v326 = 0;
      char v329 = 0;
      uint64_t v330 = 0;
      unint64_t v328 = 0;
      v331[0] = 1;
      *(void *)&v331[4] = 0x8000000080000000;
      *(_WORD *)&v331[12] = 0;
      v331[14] = 0;
      int v383 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v308 = xmmword_20E12E0;
      __int16 v309 = 0;
      unint64_t v310 = 0x8000000080000000;
      __int16 v311 = 0;
      *(_OWORD *)unint64_t v312 = xmmword_20EB6B0;
      *(void *)&v312[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v314 = 0u;
      long long v315 = 0u;
      long long v316 = 0u;
      int v313 = -1;
      int v317 = 0x7FFFFFFF;
      int v319 = 0;
      uint64_t v320 = 0;
      long long v318 = 0;
      char v321 = 1;
      unint64_t v322 = 0x8000000080000000;
      int v323 = 0;
      char v327 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)unint64_t v312 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v312[16] = v18[3];
      *(void *)&v312[8] = v21;
      int v313 = *v18;
      unsigned int v22 = v313;
      uint64_t v23 = a1[3];
      uint64_t v362 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      sub_A1E9A0((uint64_t)v363, v23, v20, v22, 0, 0);
      *(void *)&long long v365 = *(void *)&v364[24] + 12 * *(unsigned int *)&v312[8];
      if (LOBYTE(v367[1])) {
        *(void **)((char *)&v367[1] + 4) = *(void **)&v312[12];
      }
      if (*(void *)&v364[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v364[16]
      }
                              + 4 * ((*(void *)v364 - *(void *)&v363[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A56ED0((uint64_t)v363, &v362, v24);
      _CF = *(void *)v364 < *(void *)&v364[8] && *(void *)v364 >= *(void *)&v363[24];
      uint64_t v26 = (*(void *)v364 - *(void *)&v363[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      *(_DWORD *)&v312[20] = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v312;
      unsigned int v30 = v313;
      uint64_t v31 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v28, *(int *)&v312[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            uint64_t v289 = (void *)sub_2F404((uint64_t)exception, (long long *)v363);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      char v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        uint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v304;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v307 = *(_DWORD *)(v58 + 8);
        if (v307 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        int v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v304;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v304;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              uint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_431;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v307 = *(_DWORD *)(v58 + 8);
              if (v307 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_431:
              long long v285 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v285, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v304;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_431;
            }
LABEL_117:
            if (v67
              && ((char v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_431;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_431;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((uint64_t v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v304;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
      if (v307 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      char v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)char v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      long long v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        unint64_t v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        int v97 = &v96[8 * v91];
        *(void *)int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v304;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        unint64_t v96 = 0;
        int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v304;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v304;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      uint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      char v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      char v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
LABEL_159:
      uint64_t v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v312;
      unsigned int v112 = *(_DWORD *)&v312[20];
      uint64_t v113 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v110, *(int *)&v312[4]))
      {
        uint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          uint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            v292 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v363);
          }
          unint64_t v117 = (int *)((char *)v116 + *v116);
          uint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          uint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          uint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        uint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        uint64_t v123 = 0;
      }
      DWORD1(v308) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v312;
      unint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v312[20];
      int v128 = *(_DWORD *)&v312[8];
      uint64_t v129 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v312[4]))
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          unint64_t v281 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          unsigned int v282 = (void *)sub_2F404((uint64_t)v281, (long long *)v363);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          long long v286 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          v287 = (void *)sub_2F404((uint64_t)v286, (long long *)v363);
        }
LABEL_180:
        uint64_t v132 = (char *)v130 + *v130;
        unint64_t v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      uint64_t v132 = sub_A10B80(v131 + 24, v125, 0);
      unint64_t v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      uint64_t v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        int v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        int v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      unsigned int v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        unint64_t v141 = 0;
        uint64_t v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        unint64_t v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          unint64_t v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        uint64_t v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v145;
      *(_DWORD *)&v363[8] = v146;
      BOOL v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      long long v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        unint64_t v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        unint64_t v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v312[16];
      }
      *((void *)&v308 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v363, v151, v152);
      __int16 v309 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v312;
      int v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v313;
      int v158 = *(_DWORD *)&v312[8];
      uint64_t v159 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v312[4]))
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          unsigned int v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          long long v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v363);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          uint64_t v290 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          v291 = (void *)sub_2F404((uint64_t)v290, (long long *)v363);
        }
LABEL_213:
        uint64_t v162 = (char *)v160 + *v160;
        unsigned int v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      uint64_t v162 = sub_A10B80(v161 + 24, v155, 0);
      unsigned int v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      uint64_t v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      uint64_t v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        uint64_t v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        uint64_t v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      uint64_t v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        uint64_t v171 = 0;
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          uint64_t v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v175;
      *(_DWORD *)&v363[8] = v176;
      char v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      uint64_t v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        int v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        int v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v312[16];
      }
      unint64_t v310 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v363, v181, v182);
      __int16 v311 = v183;
      int v372 = -1;
      sub_9F6FA0((uint64_t)v363, &v308);
      int v372 = 0;
      if (v383)
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (v372) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v369)
        {
          *((void *)&v369 + 1) = v369;
          operator delete((void *)v369);
        }
        if (v367[0])
        {
          v367[1] = v367[0];
          operator delete(v367[0]);
        }
        if ((void)v365)
        {
          *((void *)&v365 + 1) = v365;
          operator delete((void *)v365);
        }
        goto LABEL_256;
      }
      *(_OWORD *)long long v373 = *(_OWORD *)v363;
      *(_OWORD *)&v373[16] = *(_OWORD *)&v363[16];
      v374[0] = *(_OWORD *)v364;
      *(_OWORD *)((char *)v374 + 12) = *(_OWORD *)&v364[12];
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      *(_OWORD *)v375 = v365;
      uint64_t v376 = v366;
      uint64_t v366 = 0;
      long long v365 = 0uLL;
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      long long v377 = *(_OWORD *)v367;
      uint64_t v378 = v367[2];
      memset(v367, 0, sizeof(v367));
      int v379 = v368;
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      long long v380 = v369;
      uint64_t v381 = v370;
      uint64_t v370 = 0;
      long long v369 = 0uLL;
      long long v382 = v371;
      if (!v372) {
        goto LABEL_250;
      }
LABEL_256:
      if (v318)
      {
        int v319 = v318;
        operator delete(v318);
      }
      if (*((void *)&v315 + 1))
      {
        *(void *)&long long v316 = *((void *)&v315 + 1);
        operator delete(*((void **)&v315 + 1));
      }
      if ((void)v314)
      {
        *((void *)&v314 + 1) = v314;
        operator delete((void *)v314);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v325;
        if ((unint64_t)v325 >= v326) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v327 = 1;
      unsigned int v187 = v18[7];
      unsigned int v188 = v18[3];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      *(_DWORD *)long long v363 = 0;
      *(_DWORD *)&v363[4] = v187;
      *(void *)&v363[12] = v189;
      *(void *)&v363[20] = v190;
      *(_DWORD *)&v363[8] = v188;
      int v372 = 1;
      if (v383)
      {
        if (v383 == 1)
        {
          *(_OWORD *)long long v373 = *(_OWORD *)v363;
          *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)long long v373 = *(_OWORD *)v363;
        *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
        int v383 = 1;
        goto LABEL_281;
      }
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      if (v372)
      {
        if (v372 == 1) {
          goto LABEL_280;
        }
        int v383 = v372;
      }
      else
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (!v372)
        {
          if ((void)v369)
          {
            *((void *)&v369 + 1) = v369;
            operator delete((void *)v369);
          }
          if (v367[0])
          {
            v367[1] = v367[0];
            operator delete(v367[0]);
          }
          if ((void)v365)
          {
            *((void *)&v365 + 1) = v365;
            operator delete((void *)v365);
          }
        }
      }
LABEL_281:
      unsigned int v307 = *v18;
      uint64_t v184 = (uint64_t)v325;
      if ((unint64_t)v325 >= v326)
      {
LABEL_282:
        int v325 = (char *)sub_A4CBF4((uint64_t *)&v324, (uint64_t)v373);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v383;
      if (v383 == 1)
      {
        long long v222 = *(_OWORD *)v373;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v373[12];
        *(_OWORD *)uint64_t v184 = v222;
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v383) {
          sub_9F6FA0(v184, (long long *)v373);
        }
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357)
        {
LABEL_268:
          uint8x8_t v186 = sub_A4CECC((void ***)&v356, (uint64_t)&v324);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      uint64_t v191 = (char *)v324;
      unsigned int v192 = v325;
      int64_t v193 = v325 - (unsigned char *)v324;
      if (v325 != v324)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        int v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v304;
        do
        {
          char v198 = (long long *)&v195[v196];
          uint64_t v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *char v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v327;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      unint64_t v202 = v328;
      uint64_t v203 = v329 - (unsigned char *)v328;
      if (v329 != v328)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        int v204 = (char *)operator new(v329 - (unsigned char *)v328);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        int v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v331;
      *(void *)(v185 + 63) = *(void *)&v331[7];
      *(void *)(v185 + 56) = v206;
      uint8x8_t v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v356 + 1) = v186;
      unint64_t v207 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 1;
      unsigned int v208 = v18[5];
      char v209 = (char *)a1[13];
      uint64_t v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          long long v223 = &v210[8 * v213];
          a1[14] = v223;
          long long v224 = v303;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_432:
          }
            sub_188D718();
          uint64_t v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            long long v224 = v303;
            a1 = v304;
            long long v223 = &v217[8 * v211 + v218];
            v304[13] = &v217[8 * v211];
            v304[14] = v223;
            v304[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              unint64_t v220 = &v217[8 * v211];
              uint64_t v221 = v220;
              a1 = v304;
              goto LABEL_327;
            }
            unint64_t v220 = &v217[8 * v211];
            uint64_t v221 = v220;
            a1 = v304;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_442;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            int v227 = &v210[-v226];
            uint64_t v221 = &v220[-v226];
            uint64_t v228 = &v217[8 * v211 - 16];
            uint64_t v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)uint64_t v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            uint64_t v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_442:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            uint64_t v210 = v209;
            long long v224 = v303;
            long long v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              long long v223 = (char *)a1[14];
            }
          }
        }
        char v209 = (char *)*v224;
        uint64_t v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        uint64_t v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v302 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_432;
        }
        int v249 = (char *)operator new(8 * v247);
      }
      else
      {
        int v249 = 0;
      }
      size_t v251 = 8 * v244;
      long long v252 = &v249[8 * v246];
      size_t v301 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          unsigned int v254 = v210;
          unint64_t v255 = &v249[8 * v246];
          a1 = v304;
          size_t v256 = v301;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v254 = &v210[-v259];
        unint64_t v255 = &v252[-v259];
        int v260 = &v249[8 * v246 - 16];
        unsigned int v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v304;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)int v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v301;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        uint64_t v210 = (char *)*v303;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v302];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v304;
      v304[13] = v252;
      v304[14] = &v252[v301];
      v304[15] = &v249[8 * v302];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v383)
      {
        if ((void)v380)
        {
          *((void *)&v380 + 1) = v380;
          operator delete((void *)v380);
        }
        if ((void)v377)
        {
          *((void *)&v377 + 1) = v377;
          operator delete((void *)v377);
        }
        if (v375[0])
        {
          v375[1] = v375[0];
          operator delete(v375[0]);
        }
      }
      if (v328)
      {
        char v329 = v328;
        operator delete(v328);
      }
      unsigned int v238 = (char *)v324;
      if (v324)
      {
        unsigned int v239 = v325;
        uint64_t v19 = v324;
        if (v325 != v324)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              int v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              unint64_t v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              int v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v324;
        }
        int v325 = v238;
        operator delete(v19);
      }
      --v306;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v304;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      int v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v294, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_AB3D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    int v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          unsigned int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            char v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      unsigned int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_AB42F4(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_AB44D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AB44EC(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v19 = 0x1FFFFFFFDLL;
    int v5 = sub_A3B520(v4, &v19);
    int v20 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 10 * v2;
    uint64_t v17 = -1;
    int v18 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_AAD3F8((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_AB7068(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_AB6E1C((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 0x80000000)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_AB6E1C((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 0x80000000)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v20);
  }
}

double sub_AB4650(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v33);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v30 = *(unsigned int **)(a1 + 216);
  if (v4 != v30)
  {
    int v5 = (void **)(a1 + 104);
    while (1)
    {
      unsigned int v32 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v32);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v31 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 300;
LABEL_17:
      sub_A86790(v5, 0);
      sub_AB73C8(v5, a2 + 1 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v32, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v15)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
LABEL_19:
        int v18 = (unsigned int *)(v16 + (v17 << 6));
        unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
        if (v18 == (unsigned int *)v19) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_D2BFC(v5, 1uLL);
      int v15 = *(unsigned int **)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 128);
      uint64_t v17 = *v15;
      if (*(unsigned int **)(a1 + 112) != v15) {
        goto LABEL_19;
      }
      sub_D2BFC(v5, 1uLL);
      int v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        unsigned int *v18 = v32;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        _OWORD v18[4] = -1;
        v18[7] = v20 + v11 / -10;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_24:
      uint64_t v21 = v32;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_26:
          if (*v24 > (unint64_t)v32)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + ~a2;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 0x80000000;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_AB6E1C((void **)(a1 + 104), 0, a2 + 2 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v32);
      }
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v30) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = 10 * *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v33) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_AB4978(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v252);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  unint64_t v235 = *(unsigned int **)(a1 + 216);
  if (v4 != v235)
  {
    int v240 = a2 + 2;
    int v241 = a2 + 1;
    int v238 = ~a2;
    unsigned int v239 = (uint64_t *)(a1 + 232);
    uint64_t v234 = (void **)(a1 + 256);
    uint64_t v245 = (void **)(a1 + 104);
    while (1)
    {
      unint64_t v237 = v4;
      unsigned int v242 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v246, *(void *)(a1 + 24), *v5);
      unint64_t v6 = v247;
      BOOL v7 = &v248;
      if (v251) {
        BOOL v7 = v250;
      }
      if ((unint64_t)v247 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v237 + 1;
      if (v237 + 1 == v235) {
        goto LABEL_310;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v6, 32);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      unsigned int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_59;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v44) & v13;
        unint64_t v45 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v45;
        unsigned int v21 = v45[1];
        ++v44;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_59;
        }
      }
LABEL_56:
      if (v19 != -1)
      {
        uint64_t v47 = v16 + 12 * v19;
        unint64_t v42 = (void **)(a1 + 104);
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
        goto LABEL_80;
      }
      uint64_t v24 = -1;
      if (!sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_60:
        uint64_t v50 = *(void *)(v12 + 40);
        uint64_t v49 = *(void *)(v12 + 48);
        unint64_t v42 = (void **)(a1 + 104);
        if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
          goto LABEL_315;
        }
        uint64_t v29 = *(void *)(v12 + 80);
        if (v50
          && ((unsigned int v51 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v51[1])
            ? (BOOL v52 = *(_DWORD *)(v12 + 32) == *v51)
            : (BOOL v52 = 0),
              v52))
        {
          *(void *)(v12 + 40) = v50 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v49 + 1;
        }
        uint64_t v53 = 3 * v24;
LABEL_79:
        uint64_t v56 = 4 * v53;
        uint64_t v57 = v29 + v56;
        *(void *)uint64_t v57 = v11;
        *(_DWORD *)(v57 + 8) = -1;
        uint64_t v47 = *(void *)(v12 + 80) + v56;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
LABEL_80:
        int v58 = *(_DWORD *)(v12 + 112);
        *(_DWORD *)(v12 + 112) = v58 + 1;
        *(_DWORD *)(v47 + 8) = v58;
        uint64_t v60 = *(char **)(v12 + 96);
        unint64_t v59 = *(void *)(v12 + 104);
        if ((unint64_t)v60 < v59)
        {
          *(void *)uint64_t v60 = v11;
          uint64_t v61 = (uint64_t)(v60 + 8);
LABEL_98:
          *(void *)(v12 + 96) = v61;
          unsigned int v48 = *(_DWORD *)(v47 + 8);
          goto LABEL_99;
        }
        int v62 = (char **)(v12 + 88);
        uint64_t v63 = *(char **)(v12 + 88);
        uint64_t v64 = (v60 - v63) >> 3;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v66 = v59 - (void)v63;
        if (v66 >> 2 > v65) {
          unint64_t v65 = v66 >> 2;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v243 = v65;
        if (v65)
        {
          if (v65 >> 61) {
            goto LABEL_314;
          }
          uint64_t v67 = (char *)operator new(8 * v65);
          int v62 = (char **)(v12 + 88);
          int v68 = &v67[8 * v64];
          *(void *)int v68 = v11;
          uint64_t v61 = (uint64_t)(v68 + 8);
          if (v60 != v63) {
            goto LABEL_90;
          }
LABEL_142:
          unint64_t v42 = (void **)(a1 + 104);
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v243];
          if (!v60) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v67 = 0;
          int v68 = (char *)(8 * v64);
          *(void *)(8 * v64) = v11;
          uint64_t v61 = 8 * v64 + 8;
          if (v60 == v63) {
            goto LABEL_142;
          }
LABEL_90:
          unint64_t v69 = v60 - 8 - v63;
          if (v69 < 0x58) {
            goto LABEL_320;
          }
          if ((unint64_t)(v63 - v67) < 0x20) {
            goto LABEL_320;
          }
          uint64_t v70 = (v69 >> 3) + 1;
          uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v72 = &v60[-v71];
          v68 -= v71;
          uint64_t v73 = &v67[8 * v64 - 16];
          uint64_t v74 = (long long *)(v60 - 16);
          uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v76 = *v74;
            *((_OWORD *)v73 - 1) = *(v74 - 1);
            *(_OWORD *)uint64_t v73 = v76;
            v73 -= 32;
            v74 -= 2;
            v75 -= 4;
          }
          while (v75);
          uint64_t v60 = v72;
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_320:
            do
            {
              uint64_t v77 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v68 - 1) = v77;
              v68 -= 8;
            }
            while (v60 != v63);
          }
          uint64_t v60 = *v62;
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v243];
          unint64_t v42 = (void **)(a1 + 104);
          if (!v60) {
            goto LABEL_98;
          }
        }
        operator delete(v60);
        goto LABEL_98;
      }
LABEL_31:
      uint64_t v28 = *(void *)(v12 + 56) - 1;
      uint64_t v29 = *(void *)(v12 + 80);
      int v31 = *(_DWORD *)(v12 + 64);
      int v30 = *(_DWORD *)(v12 + 68);
      uint64_t v32 = v28 & v15;
      uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
      unsigned int v35 = *v33;
      unsigned int v34 = v33[1];
      uint64_t v36 = *(void *)(v12 + 40);
      if (v30 == v34 && v31 == v35)
      {
        unint64_t v42 = (void **)(a1 + 104);
LABEL_48:
        uint64_t v38 = v32;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555) {
          goto LABEL_315;
        }
        goto LABEL_71;
      }
      if (v36)
      {
        uint64_t v38 = -1;
        uint64_t v39 = 1;
        do
        {
          if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
          {
            if (v38 == -1) {
              uint64_t v38 = v32;
            }
          }
          else if (__PAIR64__(v34, v35) == v11)
          {
            goto LABEL_136;
          }
          uint64_t v32 = (v32 + v39) & v28;
          uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
          unsigned int v35 = *v40;
          unsigned int v34 = v40[1];
          ++v39;
        }
        while (v30 != v34 || v31 != v35);
        unint64_t v42 = (void **)(a1 + 104);
        if (v38 != -1)
        {
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 - v36 >= 0x1555555555555555) {
            goto LABEL_315;
          }
          goto LABEL_71;
        }
        goto LABEL_48;
      }
      uint64_t v105 = 1;
      while (__PAIR64__(v34, v35) != v11)
      {
        uint64_t v32 = (v32 + v105) & v28;
        uint64_t v106 = (unsigned int *)(v29 + 12 * v32);
        unsigned int v35 = *v106;
        unsigned int v34 = v106[1];
        ++v105;
        if (v30 == v34 && v31 == v35)
        {
          uint64_t v36 = 0;
          unint64_t v42 = (void **)(a1 + 104);
          uint64_t v38 = v32;
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 >= 0x1555555555555555) {
            goto LABEL_315;
          }
          goto LABEL_71;
        }
      }
LABEL_136:
      unint64_t v42 = (void **)(a1 + 104);
      if (v32 == -1)
      {
        uint64_t v38 = -1;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555)
        {
LABEL_315:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
LABEL_71:
        if (v36
          && ((uint64_t v54 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v54[1])
            ? (BOOL v55 = *(_DWORD *)(v12 + 32) == *v54)
            : (BOOL v55 = 0),
              v55))
        {
          *(void *)(v12 + 40) = v36 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v43 + 1;
        }
        uint64_t v53 = 3 * v38;
        goto LABEL_79;
      }
      uint64_t v47 = v29 + 12 * v32;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 == -1) {
        goto LABEL_80;
      }
LABEL_99:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v244 = v48;
      if (v242 == v48) {
        goto LABEL_254;
      }
      uint64_t v79 = *(unsigned int **)(a1 + 104);
      uint64_t v78 = *(unsigned int **)(a1 + 112);
      uint64_t v80 = (char *)v78 - (char *)v79;
      if (v78 == v79)
      {
        uint64_t v84 = v80 >> 3;
        unint64_t v85 = 1 - (v80 >> 3);
        uint64_t v86 = *(void *)(a1 + 120);
        if (v85 <= (v86 - (uint64_t)v78) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v85);
          unint64_t v94 = (char *)&v78[2 * v85];
          *(void *)(a1 + 112) = v94;
          unint64_t v42 = (void **)(a1 + 104);
          uint64_t v79 = (unsigned int *)*v245;
          uint64_t v81 = *(void *)(a1 + 128);
          uint64_t v82 = *(unsigned int *)*v245;
          if (*v245 == v94) {
            goto LABEL_102;
          }
        }
        else
        {
          uint64_t v87 = v86 - (void)v79;
          uint64_t v88 = v87 >> 2;
          if ((unint64_t)(v87 >> 2) <= 1) {
            uint64_t v88 = 1;
          }
          BOOL v229 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v229) {
            unint64_t v89 = v88;
          }
          if (v89 >> 61) {
LABEL_314:
          }
            sub_188D718();
          uint64_t v90 = 8 * v89;
          uint64_t v91 = (char *)operator new(8 * v89);
          unint64_t v92 = &v91[8 * v84];
          bzero(v92, 8 * v85);
          uint64_t v93 = &v92[8 * v85];
          *(void *)(a1 + 104) = v92;
          *(void *)(a1 + 112) = v93;
          *(void *)(a1 + 120) = &v91[v90];
          if (v78)
          {
            operator delete(v78);
            unint64_t v94 = *(char **)(a1 + 112);
            unint64_t v42 = (void **)(a1 + 104);
            uint64_t v79 = (unsigned int *)*v245;
            uint64_t v81 = *(void *)(a1 + 128);
            uint64_t v82 = *(unsigned int *)*v245;
            if (*v245 == v94) {
              goto LABEL_102;
            }
          }
          else
          {
            unint64_t v94 = &v92[8 * v85];
            unint64_t v42 = (void **)(a1 + 104);
            uint64_t v79 = (unsigned int *)*v245;
            uint64_t v81 = *(void *)(a1 + 128);
            uint64_t v82 = *(unsigned int *)*v245;
            if (*v245 == v93)
            {
LABEL_102:
              BOOL v83 = *(char **)(a1 + 120);
              if (v83 != v94)
              {
                *(void *)unint64_t v94 = 0;
                *(void *)(a1 + 112) = v94 + 8;
LABEL_129:
                uint64_t v79 = *(unsigned int **)(a1 + 104);
                uint64_t v104 = *(void *)(a1 + 128);
                goto LABEL_148;
              }
              uint64_t v95 = 1;
              uint64_t v96 = v83 - (char *)v79;
              if ((unint64_t)(v96 >> 2) > 1) {
                uint64_t v95 = v96 >> 2;
              }
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v95;
              }
              if (v97)
              {
                if (v97 >> 61) {
                  goto LABEL_314;
                }
                unint64_t v98 = (char *)operator new(8 * v97);
                uint64_t v99 = v98;
                *(void *)unint64_t v98 = 0;
                uint64_t v100 = (uint64_t)(v98 + 8);
                if (v94 != (char *)v79)
                {
LABEL_123:
                  unint64_t v101 = v94 - 8 - (char *)v79;
                  if (v101 < 0x58 || (unint64_t)(v94 - v98) < 0x20)
                  {
                    uint64_t v102 = (unsigned int *)v94;
                    goto LABEL_126;
                  }
                  uint64_t v206 = (v101 >> 3) + 1;
                  uint64_t v207 = 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v102 = (unsigned int *)&v94[-v207];
                  v99 -= v207;
                  unsigned int v208 = v98 - 16;
                  char v209 = v94 - 16;
                  uint64_t v210 = v206 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v211 = *(_OWORD *)v209;
                    *((_OWORD *)v208 - 1) = *((_OWORD *)v209 - 1);
                    *(_OWORD *)unsigned int v208 = v211;
                    v208 -= 32;
                    v209 -= 32;
                    v210 -= 4;
                  }
                  while (v210);
                  if (v206 != (v206 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_126:
                      uint64_t v103 = *((void *)v102 - 1);
                      v102 -= 2;
                      *((void *)v99 - 1) = v103;
                      v99 -= 8;
                    }
                    while (v102 != v79);
                  }
                  unint64_t v94 = (char *)*v42;
                  *(void *)(a1 + 104) = v99;
                  *(void *)(a1 + 112) = v100;
                  *(void *)(a1 + 120) = &v98[8 * v97];
                  if (!v94) {
                    goto LABEL_129;
                  }
LABEL_128:
                  operator delete(v94);
                  goto LABEL_129;
                }
              }
              else
              {
                unint64_t v98 = 0;
                uint64_t v99 = 0;
                *(void *)&def_332C = 0;
                uint64_t v100 = 8;
                if (v94 != (char *)v79) {
                  goto LABEL_123;
                }
              }
              *(void *)(a1 + 104) = v99;
              *(void *)(a1 + 112) = v100;
              *(void *)(a1 + 120) = &v98[8 * v97];
              if (!v94) {
                goto LABEL_129;
              }
              goto LABEL_128;
            }
          }
        }
      }
      else
      {
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *v79;
      }
      uint64_t v104 = v81;
LABEL_148:
      sub_A86AC4(v42, 0, (char *)(v81 + (v82 << 6)), (char *)(v104 + ((unint64_t)v79[1] << 6)));
      unint64_t v108 = v241 + *(_DWORD *)(a1 + 96) * (v242 + 1);
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v110 = *(unsigned int **)(a1 + 112);
      if (v108 >= ((char *)v110 - (char *)v109) >> 3) {
        goto LABEL_200;
      }
      unsigned int v111 = v109[2 * v108];
      unsigned int v112 = v109[2 * v108 + 1];
      unsigned int v113 = v112 - v111;
      if (v112 == v111) {
        goto LABEL_200;
      }
      unsigned __int16 v114 = 0;
      unsigned int v115 = 0;
LABEL_151:
      while (2)
      {
        uint64_t v116 = *(unsigned int **)(a1 + 104);
        if (v108 >= (uint64_t)(*(void *)(a1 + 112) - (void)v116) >> 3
          || (unsigned int v117 = v116[2 * v108], v116[2 * v108 + 1] - v117 <= v115))
        {
          uint64_t v232 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v232, "key does not exist and cannot be added");
          goto LABEL_313;
        }
        unint64_t v118 = v117 + v115;
        uint64_t v119 = *(void *)(a1 + 128);
        if (v118 >= (*(void *)(a1 + 136) - v119) >> 6)
        {
          uint64_t v232 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v232, "index out of range");
LABEL_313:
        }
        size_t v120 = (long long *)(v119 + (v118 << 6));
        long long v121 = *v120;
        long long v122 = v120[1];
        long long v123 = v120[3];
        long long v255 = v120[2];
        long long v256 = v123;
        long long v253 = v121;
        long long v254 = v122;
        unint64_t v126 = v116;
        uint64_t v124 = *v116;
        uint64_t v125 = v126[1];
        if (v125 != v124)
        {
          uint64_t v127 = 0;
          uint64_t v130 = v124 << 6;
          uint64_t v131 = (v125 << 6) - (v124 << 6);
          uint64_t v132 = (_DWORD *)(v119 + v130 + 44);
          while (1)
          {
            int v133 = *(v132 - 4);
            if (v133 != 0x7FFFFFFF)
            {
              if (v133 >= SHIDWORD(v254) && *(v132 - 3) <= (int)v255)
              {
                unsigned int v134 = *(v132 - 2);
                if (v134 <= DWORD1(v255)
                  && *(v132 - 1) <= DWORD2(v255)
                  && (v134 != DWORD1(v255)
                   || v133 != HIDWORD(v254)
                   || *v132 - 10 * v133 <= HIDWORD(v255) - 10 * HIDWORD(v254)))
                {
                  unint64_t v129 = v114 & 0xFF00 | (unint64_t)(v127 << 8);
                  unsigned __int16 v114 = v114 & 0xFF00 | ((_WORD)v127 << 8);
                  if (++v115 == v113) {
                    goto LABEL_178;
                  }
                  goto LABEL_151;
                }
              }
              if (SHIDWORD(v254) >= v133 && (int)v255 <= *(v132 - 3))
              {
                unsigned int v135 = *(v132 - 2);
                if (DWORD1(v255) <= v135
                  && DWORD2(v255) <= *(v132 - 1)
                  && (DWORD1(v255) != v135
                   || HIDWORD(v254) != v133
                   || HIDWORD(v255) - 10 * HIDWORD(v254) <= *v132 - 10 * v133))
                {
                  *(v132 - 4) = 0x7FFFFFFF;
                  uint64_t v127 = 1;
                }
              }
            }
            v132 += 16;
            v131 -= 64;
            if (!v131) {
              goto LABEL_156;
            }
          }
        }
        uint64_t v127 = 0;
LABEL_156:
        int v128 = sub_AAD3F8((char **)v42, 0, &v253);
        *(void *)(v128 + 52) = -1;
        *((_DWORD *)v128 + 15) = 0x7FFFFFFF;
        unint64_t v129 = v114 & 0xFF00 | (unint64_t)(v127 << 8);
        unsigned __int16 v114 = v129 | 1;
        if (++v115 != v113) {
          continue;
        }
        break;
      }
LABEL_178:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v110 = *(unsigned int **)(a1 + 112);
      if (v129)
      {
        if (v110 != v109)
        {
          uint64_t v136 = *(void *)(a1 + 128);
          uint64_t v137 = *v109;
          goto LABEL_181;
        }
        sub_D2BFC(v42, 1uLL);
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v136 = *(void *)(a1 + 128);
        uint64_t v137 = *v109;
        if (*(unsigned int **)(a1 + 112) == v109)
        {
          sub_D2BFC(v245, 1uLL);
          uint64_t v109 = *(unsigned int **)(a1 + 104);
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = *(void *)(a1 + 128) + ((unint64_t)v109[1] << 6);
          if (v138 == v139)
          {
LABEL_194:
            unsigned int v140 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v109) {
              goto LABEL_195;
            }
            goto LABEL_199;
          }
        }
        else
        {
LABEL_181:
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = v136 + ((unint64_t)v109[1] << 6);
          if (v138 == v139) {
            goto LABEL_194;
          }
        }
        unsigned int v140 = (void **)(a1 + 104);
        while (*(_DWORD *)(v138 + 28) != 0x7FFFFFFF)
        {
          v138 += 64;
          if (v138 == v139)
          {
            unint64_t v138 = v139;
            if (*(unsigned int **)(a1 + 112) != v109) {
              goto LABEL_199;
            }
            goto LABEL_195;
          }
        }
        if (v138 == v139 || (unint64_t v141 = v138 + 64, v138 + 64 == v139))
        {
          if (*(unsigned int **)(a1 + 112) == v109) {
            goto LABEL_195;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v141 + 28) != 0x7FFFFFFF)
            {
              long long v147 = *(_OWORD *)v141;
              long long v148 = *(_OWORD *)(v141 + 16);
              long long v149 = *(_OWORD *)(v141 + 48);
              *(_OWORD *)(v138 + 32) = *(_OWORD *)(v141 + 32);
              *(_OWORD *)(v138 + 48) = v149;
              *(_OWORD *)unint64_t v138 = v147;
              *(_OWORD *)(v138 + 16) = v148;
              v138 += 64;
            }
            v141 += 64;
          }
          while (v141 != v139);
          uint64_t v109 = (unsigned int *)*v245;
          if (*(void **)(a1 + 112) != *v245) {
            goto LABEL_199;
          }
LABEL_195:
          sub_D2BFC(v140, 1uLL);
          uint64_t v109 = (unsigned int *)*v140;
        }
LABEL_199:
        sub_A86AC4(v140, 0, (char *)v138, (char *)(*(void *)(a1 + 128) + ((unint64_t)v109[1] << 6)));
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v110 = *(unsigned int **)(a1 + 112);
      }
LABEL_200:
      uint64_t v142 = (char *)v110 - (char *)v109;
      if (v110 != v109)
      {
        unsigned int v143 = v242;
        uint64_t v144 = *(void *)(a1 + 128);
        uint64_t v145 = *v109;
LABEL_216:
        uint64_t v161 = v144;
        goto LABEL_234;
      }
      uint64_t v150 = v142 >> 3;
      unint64_t v151 = 1 - (v142 >> 3);
      uint64_t v152 = *(void *)(a1 + 120);
      unsigned int v143 = v242;
      if (v151 <= (v152 - (uint64_t)v110) >> 3)
      {
        bzero(v109, 8 * v151);
        uint64_t v159 = &v109[2 * v151];
        *(void *)(a1 + 112) = v159;
        uint64_t v160 = (unsigned int **)(a1 + 104);
        uint64_t v109 = (unsigned int *)*v245;
        uint64_t v144 = *(void *)(a1 + 128);
        uint64_t v145 = *(unsigned int *)*v245;
        if (*v245 != v159) {
          goto LABEL_216;
        }
      }
      else
      {
        uint64_t v153 = v152 - (void)v109;
        uint64_t v154 = v153 >> 2;
        if ((unint64_t)(v153 >> 2) <= 1) {
          uint64_t v154 = 1;
        }
        BOOL v229 = (unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v229) {
          unint64_t v155 = v154;
        }
        if (v155 >> 61) {
          goto LABEL_314;
        }
        uint64_t v156 = 8 * v155;
        unsigned int v157 = (char *)operator new(8 * v155);
        int v158 = &v157[8 * v150];
        bzero(v158, 8 * v151);
        uint64_t v159 = (unsigned int *)&v158[8 * v151];
        *(void *)(a1 + 104) = v158;
        *(void *)(a1 + 112) = v159;
        *(void *)(a1 + 120) = &v157[v156];
        if (v109)
        {
          operator delete(v109);
          uint64_t v159 = *(unsigned int **)(a1 + 112);
        }
        uint64_t v160 = (unsigned int **)(a1 + 104);
        uint64_t v109 = (unsigned int *)*v245;
        uint64_t v144 = *(void *)(a1 + 128);
        uint64_t v145 = *(unsigned int *)*v245;
        if (*v245 != v159) {
          goto LABEL_216;
        }
      }
      int v146 = *(unsigned int **)(a1 + 120);
      if (v146 != v159)
      {
        *(void *)uint64_t v159 = 0;
        *(void *)(a1 + 112) = v159 + 2;
        goto LABEL_233;
      }
      uint64_t v162 = 1;
      uint64_t v163 = (char *)v146 - (char *)v109;
      if ((unint64_t)(v163 >> 2) > 1) {
        uint64_t v162 = v163 >> 2;
      }
      if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v164 = v162;
      }
      if (v164)
      {
        if (v164 >> 61) {
          goto LABEL_314;
        }
        uint64_t v165 = (char *)operator new(8 * v164);
        uint64_t v166 = v165;
        *(void *)uint64_t v165 = 0;
        uint64_t v167 = (uint64_t)(v165 + 8);
        if (v159 == v109)
        {
LABEL_270:
          unsigned int v143 = v242;
          *(void *)(a1 + 104) = v166;
          *(void *)(a1 + 112) = v167;
          *(void *)(a1 + 120) = &v165[8 * v164];
          if (!v159) {
            goto LABEL_233;
          }
LABEL_232:
          operator delete(v159);
          goto LABEL_233;
        }
      }
      else
      {
        uint64_t v165 = 0;
        uint64_t v166 = 0;
        *(void *)&def_332C = 0;
        uint64_t v167 = 8;
        if (v159 == v109) {
          goto LABEL_270;
        }
      }
      unint64_t v168 = (char *)(v159 - 2) - (char *)v109;
      if (v168 < 0x58 || (unint64_t)((char *)v159 - v165) < 0x20)
      {
        uint64_t v169 = v159;
        unsigned int v143 = v242;
        do
        {
LABEL_230:
          uint64_t v170 = *((void *)v169 - 1);
          v169 -= 2;
          *((void *)v166 - 1) = v170;
          v166 -= 8;
        }
        while (v169 != v109);
        goto LABEL_231;
      }
      uint64_t v212 = (v168 >> 3) + 1;
      uint64_t v213 = 8 * (v212 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v169 = &v159[v213 / 0xFFFFFFFFFFFFFFFCLL];
      v166 -= v213;
      uint64_t v214 = v165 - 16;
      uint64_t v215 = v159 - 4;
      uint64_t v216 = v212 & 0x3FFFFFFFFFFFFFFCLL;
      unsigned int v143 = v242;
      do
      {
        long long v217 = *(_OWORD *)v215;
        *((_OWORD *)v214 - 1) = *((_OWORD *)v215 - 1);
        *(_OWORD *)uint64_t v214 = v217;
        v214 -= 32;
        v215 -= 8;
        v216 -= 4;
      }
      while (v216);
      if (v212 != (v212 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_230;
      }
LABEL_231:
      uint64_t v159 = *v160;
      *(void *)(a1 + 104) = v166;
      *(void *)(a1 + 112) = v167;
      *(void *)(a1 + 120) = &v165[8 * v164];
      if (v159) {
        goto LABEL_232;
      }
LABEL_233:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v161 = *(void *)(a1 + 128);
LABEL_234:
      uint64_t v171 = (unsigned int *)(v144 + (v145 << 6));
      uint64_t v172 = (unsigned int *)(v161 + ((unint64_t)v109[1] << 6));
      if (v171 != v172)
      {
        uint64_t v173 = v247;
        do
        {
          unsigned int *v171 = v143;
          unsigned int v174 = v171[7];
          unsigned int v175 = v171[8];
          v171[3] = v174;
          v171[4] = -1;
          int v176 = *((_DWORD *)v173 + 2);
          int v177 = v176 / -10;
          int v178 = v176 / 10;
          int v179 = v176 % 10;
          if (v176 < 0) {
            char v180 = -5;
          }
          else {
            char v180 = 5;
          }
          int v181 = (char)(v180 + v179);
          v171[7] = v177 + v174 + (((-103 * v181) >> 15) & 1) + ((-103 * v181) >> 10);
          v171[8] = v175 + v178 + (((103 * v181) >> 15) & 1) + ((103 * v181) >> 10);
          v171 += 16;
        }
        while (v171 != v172);
      }
      int v182 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v183 = v182 + v182 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v184 = v244;
        uint64_t v185 = *(unint64_t **)(a1 + 48);
        if (!v185) {
          goto LABEL_249;
        }
      }
      else
      {
        unsigned int v183 = -1;
        unint64_t v184 = v244;
        uint64_t v185 = *(unint64_t **)(a1 + 48);
        if (!v185)
        {
LABEL_249:
          int v189 = 0x80000000;
          goto LABEL_250;
        }
      }
      if (*v185 > v184)
      {
        unsigned int v186 = 0;
        unsigned int v187 = *(_DWORD *)(a1 + 100) + v238;
        unsigned int v188 = v187;
        while (v186 <= v187)
        {
          int v189 = *(_DWORD *)sub_A3F53C(v185 + 2, v185[1] * v184 + v188);
          v186 += 2;
          v188 -= 2;
          if (v189 != 0x7FFFFFFF) {
            goto LABEL_250;
          }
        }
      }
      int v189 = 0x7FFFFFFF;
LABEL_250:
      unint64_t v190 = v244 + 1;
      if (!sub_AB6E1C(v245, 0, v240 + v182 * v190, v182 * v190 + 1, v183, v189)) {
        goto LABEL_254;
      }
      if (*(void *)(a1 + 240) <= v184) {
        sub_A3E96C((uint64_t)v239, v190, 0);
      }
      uint64_t v191 = *v239;
      unint64_t v192 = v184 >> 6;
      uint64_t v193 = 1 << v184;
      if ((*(void *)(*v239 + 8 * (v184 >> 6)) & (1 << v184)) != 0)
      {
LABEL_254:
        unint64_t v9 = (unint64_t)v248;
        unint64_t v6 = (void *)((char *)v247 + 12);
        unint64_t v247 = v6;
        if (v6 != v248) {
          goto LABEL_255;
        }
        goto LABEL_290;
      }
      int v195 = *(char **)(a1 + 264);
      unint64_t v194 = *(void *)(a1 + 272);
      if ((unint64_t)v195 < v194)
      {
        *(_DWORD *)int v195 = v244;
        uint64_t v196 = (uint64_t)(v195 + 4);
        goto LABEL_289;
      }
      long long v197 = (char *)*v234;
      uint64_t v198 = v195 - (unsigned char *)*v234;
      uint64_t v199 = v198 >> 2;
      unint64_t v200 = (v198 >> 2) + 1;
      if (v200 >> 62) {
        sub_2E00();
      }
      uint64_t v201 = v194 - (void)v197;
      if (v201 >> 1 > v200) {
        unint64_t v200 = v201 >> 1;
      }
      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v200 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v236 = v200;
      if (v200)
      {
        if (v200 >> 62) {
          goto LABEL_314;
        }
        unint64_t v202 = operator new(4 * v200);
        uint64_t v203 = (unsigned int *)&v202[4 * v199];
        unsigned int *v203 = v244;
        uint64_t v196 = (uint64_t)(v203 + 1);
        if (v195 != v197)
        {
LABEL_267:
          unint64_t v204 = v195 - 4 - v197;
          unint64_t v205 = v236;
          if (v204 < 0x2C) {
            goto LABEL_321;
          }
          if ((unint64_t)(v195 - &v202[v198]) < 0x20) {
            goto LABEL_321;
          }
          uint64_t v218 = (v204 >> 2) + 1;
          uint64_t v219 = 4 * (v218 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v220 = &v195[-v219];
          uint64_t v203 = (unsigned int *)((char *)v203 - v219);
          uint64_t v221 = &v202[4 * v199 - 16];
          long long v222 = v195 - 16;
          uint64_t v223 = v218 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v224 = *(_OWORD *)v222;
            *(v221 - 1) = *((_OWORD *)v222 - 1);
            _OWORD *v221 = v224;
            v221 -= 2;
            v222 -= 32;
            v223 -= 8;
          }
          while (v223);
          int v195 = v220;
          if (v218 != (v218 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_321:
            do
            {
              unsigned int v225 = *((_DWORD *)v195 - 1);
              v195 -= 4;
              *--uint64_t v203 = v225;
            }
            while (v195 != v197);
          }
          goto LABEL_287;
        }
      }
      else
      {
        unint64_t v202 = 0;
        uint64_t v203 = (unsigned int *)(4 * v199);
        *(_DWORD *)(4 * v199) = v244;
        uint64_t v196 = 4 * v199 + 4;
        if (v195 != v197) {
          goto LABEL_267;
        }
      }
      unint64_t v205 = v236;
LABEL_287:
      *(void *)(a1 + 256) = v203;
      *(void *)(a1 + 264) = v196;
      *(void *)(a1 + 272) = &v202[4 * v205];
      if (v197)
      {
        uint64_t v226 = v196;
        operator delete(v197);
        uint64_t v196 = v226;
        uint64_t v191 = *v239;
      }
LABEL_289:
      *(void *)(a1 + 264) = v196;
      *(void *)(v191 + 8 * v192) |= v193;
      unint64_t v9 = (unint64_t)v248;
      unint64_t v6 = (void *)((char *)v247 + 12);
      unint64_t v247 = v6;
      if (v6 != v248)
      {
LABEL_255:
        int v8 = v251;
        unint64_t v10 = v250[0];
        if (*(unsigned char *)(v246 + 16)) {
          goto LABEL_291;
        }
        goto LABEL_10;
      }
LABEL_290:
      unint64_t v6 = v249;
      unint64_t v10 = v250[0];
      unint64_t v247 = v249;
      int v8 = 1;
      unsigned __int8 v251 = 1;
      if (*(unsigned char *)(v246 + 16))
      {
LABEL_291:
        if (v8) {
          unint64_t v227 = v10;
        }
        else {
          unint64_t v227 = v9;
        }
        if ((unint64_t)v6 < v227)
        {
          while (1)
          {
            unint64_t v228 = __ROR8__(*v6, 32);
            BOOL v229 = HIDWORD(v228) != 1 || (v228 + 3) >= 2;
            if (!v229) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v246 + 4120)))
            {
              LOBYTE(v8) = v251;
              unint64_t v6 = v247;
              unint64_t v9 = (unint64_t)v248;
              break;
            }
            unint64_t v9 = (unint64_t)v248;
            unint64_t v6 = (void *)((char *)v247 + 12);
            unint64_t v247 = v6;
            if (v6 == v248)
            {
              unint64_t v6 = v249;
              unint64_t v247 = v249;
              LOBYTE(v8) = 1;
              unsigned __int8 v251 = 1;
              if ((unint64_t)v249 >= v250[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v8) = v251;
              uint64_t v230 = &v248;
              if (v251) {
                uint64_t v230 = v250;
              }
              if ((unint64_t)v6 >= *v230) {
                break;
              }
            }
          }
          unint64_t v10 = v250[0];
        }
      }
LABEL_10:
      if ((_BYTE)v8) {
        unint64_t v9 = v10;
      }
      if ((unint64_t)v6 >= v9) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_56;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unsigned int v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_60;
      }
      goto LABEL_31;
    }
LABEL_59:
    uint64_t v24 = v19;
    if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_60;
    }
    goto LABEL_31;
  }
LABEL_310:
  double result = sub_72688((uint64_t)v252) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_AB5D38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AB5D4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AB5D60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AB5D74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AB5D88(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  int v8 = *(unsigned int **)(a1 + 256);
  unsigned int v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  unint64_t v204 = (void **)(a1 + 328);
  uint64_t v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    long long v211 = v8;
    unint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      unsigned int v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        unsigned int v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            int v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      uint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        unint64_t v65 = (char **)(v13 + 88);
        uint64_t v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          unint64_t v65 = (char **)(v13 + 88);
          unsigned int v72 = &v71[8 * v67];
          *(void *)unsigned int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          long long v76 = &v63[-v75];
          v72 -= v75;
          uint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)uint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          uint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          uint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unsigned int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)uint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 5);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      uint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 5);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          unint64_t v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unint64_t v101 = v200;
              goto LABEL_135;
            }
            unint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] < v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        unint64_t v168 = v213 + 2;
        uint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          uint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      unint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              uint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                uint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        uint64_t v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)uint64_t v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          uint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] >= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          uint64_t v173 = &v135[4 * v130 - 16];
          unsigned int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          uint64_t v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] >= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            unint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              unsigned int v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              unint64_t v141 = &v202[4 * v112 - 16];
              uint64_t v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            unint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    int v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_AB6CC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AB6CD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AB6CE8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_AB73C8(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_AB6E1C(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AADB74(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_AADB74(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) >= a6)
      {
        __int16 v22 = sub_AB7068((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_AB7068((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      unsigned int v27 = (long long *)sub_AADB74(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) >= a6)
      {
        if (sub_AB7244(a1, &v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_AB7068((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_AB7068((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_AB7068(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  int v9 = *(char **)a1;
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    uint64_t v11 = *(unsigned int *)&v9[8 * a3];
    uint64_t v10 = *(unsigned int *)&v9[8 * a3 + 4];
    if (v10 != v11)
    {
      unsigned __int8 v12 = 0;
      uint64_t v16 = v11 << 6;
      uint64_t v17 = (v10 << 6) - v16;
      int v18 = (_DWORD *)(v16 + *(void *)(a1 + 24) + 44);
      while (1)
      {
        int v19 = *(v18 - 4);
        if (v19 != 0x7FFFFFFF)
        {
          int v20 = *(_DWORD *)(a2 + 28);
          if (v19 >= v20 && *(v18 - 3) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v21 = *(_DWORD *)(a2 + 36);
            unsigned int v22 = *(v18 - 2);
            if (v22 <= v21
              && *(v18 - 1) <= *(_DWORD *)(a2 + 40)
              && (v22 != v21 || v19 != v20 || *v18 - 10 * v19 <= *(_DWORD *)(a2 + 44) - 10 * v20))
            {
              return (unint64_t)v12 << 8;
            }
          }
          if (v20 >= v19 && *(_DWORD *)(a2 + 32) <= *(v18 - 3))
          {
            unsigned int v23 = *(v18 - 2);
            unsigned int v24 = *(_DWORD *)(a2 + 36);
            if (v24 <= v23
              && *(_DWORD *)(a2 + 40) <= *(v18 - 1)
              && (v24 != v23 || v20 != v19 || *(_DWORD *)(a2 + 44) - 10 * v20 <= *v18 - 10 * v19))
            {
              *(v18 - 4) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 16;
        v17 -= 64;
        if (!v17) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  __int16 v13 = sub_AAD3F8((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

uint64_t sub_AB7244(void **a1, _DWORD *a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      int v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 <= v6)
  {
    unint64_t v14 = a3 + 1;
    if (v14 > v13)
    {
      sub_D2BFC(a1, v14 - v13);
      unint64_t v15 = &v11[64 * v12];
      unint64_t v16 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
      if (v15 == (char *)v16) {
        return 0;
      }
      goto LABEL_13;
    }
    if (v14 < v13) {
      a1[1] = &v7[8 * v14];
    }
  }
  unint64_t v15 = &v11[64 * v12];
  unint64_t v16 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
  if (v15 == (char *)v16) {
    return 0;
  }
LABEL_13:
  int v17 = a2[7];
  unsigned int v18 = a2[9];
  while (1)
  {
    int v19 = *((_DWORD *)v15 + 7);
    if (v19 != 0x7FFFFFFF && v19 >= v17 && *((_DWORD *)v15 + 8) <= a2[8])
    {
      unsigned int v21 = *((_DWORD *)v15 + 9);
      if (v21 <= v18 && *((_DWORD *)v15 + 10) <= a2[10])
      {
        BOOL v22 = *((_DWORD *)v15 + 11) - 10 * v19 > a2[11] - 10 * v17 && v19 == v17;
        if (!v22 || v21 != v18) {
          break;
        }
      }
    }
    v15 += 64;
    if (v15 == (char *)v16) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_AB73C8(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_AADB74(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_AB7068((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

void **sub_AB74AC(uint64_t a1, int a2, unsigned int a3)
{
  int v4 = (void *)a1;
  unsigned int v281 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v242 = *(_DWORD *)sub_A3F74C(v4 + 35, &v281);
  unint64_t v252 = v5;
  double result = (void **)sub_A40514(&v279, v4[3], v5);
  __int16 v7 = v279;
  if ((unint64_t)v279 < v280)
  {
    double result = (void **)(v4 + 13);
    uint64_t v250 = (uint64_t)(v4 + 45);
    unsigned __int8 v251 = v4;
    int v241 = a2 + 2;
    int v239 = ~a2;
    int v240 = v4 + 23;
    int v243 = a2 + 1;
    long long v253 = (char *)(v4 + 13);
    unint64_t v254 = HIDWORD(v5);
    while (1)
    {
      *((double *)v4 + 69) = *((double *)v4 + 69) + 1.0;
      uint64_t v244 = *(unsigned int *)v7;
      sub_A86790(result, 0);
      sub_A1E9A0((uint64_t)&v267, v4[3], v252, v242, 0, 1);
      uint64_t v8 = v271;
      BOOL v9 = (unint64_t)v271 < v270 || (unint64_t)v271 >= v272;
      if (!v9) {
        break;
      }
LABEL_3:
      __int16 v7 = v279 + 4;
      int v279 = v7;
      double result = (void **)v253;
      if ((unint64_t)v7 >= v280) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v10 = __ROR8__(*v8, 32);
      uint64_t v11 = v4[4];
      uint64_t v12 = *(void *)(v11 + 56) - 1;
      unint64_t v13 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) >> 33));
      unint64_t v14 = v13 ^ (v13 >> 33);
      uint64_t v15 = *(void *)(v11 + 80);
      int v17 = *(_DWORD *)(v11 + 64);
      int v16 = *(_DWORD *)(v11 + 68);
      uint64_t v18 = v14 & v12;
      int v19 = (unsigned int *)(v15 + 12 * (v14 & v12));
      unsigned int v21 = *v19;
      unsigned int v20 = v19[1];
      if (v16 == v20 && v17 == v21) {
        goto LABEL_58;
      }
      if (*(void *)(v11 + 40)) {
        break;
      }
      uint64_t v41 = 1;
      while (__PAIR64__(v20, v21) != v10)
      {
        uint64_t v18 = (v18 + v41) & v12;
        unint64_t v42 = (unsigned int *)(v15 + 12 * v18);
        unsigned int v21 = *v42;
        unsigned int v20 = v42[1];
        ++v41;
        if (v16 == v20 && v17 == v21) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v18 != -1)
      {
        uint64_t v44 = v15 + 12 * v18;
        unsigned int v45 = *(_DWORD *)(v44 + 8);
        if (v45 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v23 = -1;
      if (sub_A3BA84(v4[4], 1))
      {
LABEL_26:
        uint64_t v27 = *(void *)(v11 + 56) - 1;
        uint64_t v28 = *(void *)(v11 + 80);
        int v30 = *(_DWORD *)(v11 + 64);
        int v29 = *(_DWORD *)(v11 + 68);
        uint64_t v31 = v27 & v14;
        uint64_t v32 = (unsigned int *)(v28 + 12 * (v27 & v14));
        unsigned int v34 = *v32;
        unsigned int v33 = v32[1];
        uint64_t v35 = *(void *)(v11 + 40);
        if (v29 == v33 && v30 == v34) {
          goto LABEL_86;
        }
        if (v35)
        {
          uint64_t v37 = -1;
          uint64_t v38 = 1;
          do
          {
            if (*(_DWORD *)(v11 + 36) == v33 && *(_DWORD *)(v11 + 32) == v34)
            {
              if (v37 == -1) {
                uint64_t v37 = v31;
              }
            }
            else if (__PAIR64__(v33, v34) == v10)
            {
              goto LABEL_80;
            }
            uint64_t v31 = (v31 + v38) & v27;
            uint64_t v39 = (unsigned int *)(v28 + 12 * v31);
            unsigned int v34 = *v39;
            unsigned int v33 = v39[1];
            ++v38;
          }
          while (v29 != v33 || v30 != v34);
          if (v37 == -1) {
LABEL_86:
          }
            uint64_t v37 = v31;
          uint64_t v68 = *(void *)(v11 + 48);
          if ((unint64_t)(v68 - v35) >= 0x1555555555555555) {
            goto LABEL_325;
          }
        }
        else
        {
          uint64_t v65 = 1;
          while (__PAIR64__(v33, v34) != v10)
          {
            uint64_t v31 = (v31 + v65) & v27;
            uint64_t v66 = (unsigned int *)(v28 + 12 * v31);
            unsigned int v34 = *v66;
            unsigned int v33 = v66[1];
            ++v65;
            if (v29 == v33 && v30 == v34)
            {
              uint64_t v35 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v31 != -1)
          {
            uint64_t v44 = v28 + 12 * v31;
            unsigned int v45 = *(_DWORD *)(v44 + 8);
            if (v45 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v37 = -1;
          uint64_t v68 = *(void *)(v11 + 48);
          if ((unint64_t)(v68 - v35) >= 0x1555555555555555)
          {
LABEL_325:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v35
          && ((uint64_t v69 = (_DWORD *)(v28 + 12 * v37), *(_DWORD *)(v11 + 36) == v69[1])
            ? (BOOL v70 = *(_DWORD *)(v11 + 32) == *v69)
            : (BOOL v70 = 0),
              v70))
        {
          *(void *)(v11 + 40) = v35 - 1;
          uint64_t v64 = 3 * v37;
        }
        else
        {
          *(void *)(v11 + 48) = v68 + 1;
          uint64_t v64 = 3 * v37;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v61 = *(void *)(v11 + 40);
      uint64_t v60 = *(void *)(v11 + 48);
      if ((unint64_t)(v60 - v61) >= 0x1555555555555555) {
        goto LABEL_325;
      }
      uint64_t v28 = *(void *)(v11 + 80);
      if (v61
        && ((unint64_t v62 = (_DWORD *)(v28 + 12 * v23), *(_DWORD *)(v11 + 36) == v62[1])
          ? (BOOL v63 = *(_DWORD *)(v11 + 32) == *v62)
          : (BOOL v63 = 0),
            v63))
      {
        *(void *)(v11 + 40) = v61 - 1;
      }
      else
      {
        *(void *)(v11 + 48) = v60 + 1;
      }
      uint64_t v64 = 3 * v23;
LABEL_95:
      uint64_t v71 = 4 * v64;
      uint64_t v72 = v28 + v71;
      *(void *)uint64_t v72 = v10;
      *(_DWORD *)(v72 + 8) = -1;
      uint64_t v44 = *(void *)(v11 + 80) + v71;
      unsigned int v45 = *(_DWORD *)(v44 + 8);
      if (v45 != -1)
      {
LABEL_50:
        unsigned int v266 = v45;
        if (sub_BD5C18(v250, v45, v10)) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v73 = *(_DWORD *)(v11 + 112);
      *(_DWORD *)(v11 + 112) = v73 + 1;
      *(_DWORD *)(v44 + 8) = v73;
      uint64_t v75 = *(unint64_t **)(v11 + 96);
      unint64_t v74 = *(void *)(v11 + 104);
      if ((unint64_t)v75 < v74)
      {
        *uint64_t v75 = v10;
        uint64_t v76 = (uint64_t)(v75 + 1);
        goto LABEL_119;
      }
      uint64_t v77 = *(char **)(v11 + 88);
      uint64_t v78 = ((char *)v75 - v77) >> 3;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v80 = v74 - (void)v77;
      if (v80 >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        if (v81 >> 61) {
          goto LABEL_327;
        }
        unsigned int v82 = (char *)operator new(8 * v81);
        unint64_t v83 = (unint64_t *)&v82[8 * v78];
        unint64_t *v83 = v10;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v75 == (unint64_t *)v77)
        {
LABEL_110:
          *(void *)(v11 + 88) = v83;
          *(void *)(v11 + 96) = v76;
          *(void *)(v11 + 104) = &v82[8 * v81];
          if (v75) {
            goto LABEL_118;
          }
          goto LABEL_119;
        }
      }
      else
      {
        unsigned int v82 = 0;
        unint64_t v83 = (unint64_t *)(8 * v78);
        *(void *)(8 * v78) = v10;
        uint64_t v76 = 8 * v78 + 8;
        if (v75 == (unint64_t *)v77) {
          goto LABEL_110;
        }
      }
      unint64_t v84 = (char *)(v75 - 1) - v77;
      if (v84 < 0x58) {
        goto LABEL_332;
      }
      if ((unint64_t)(v77 - v82) < 0x20) {
        goto LABEL_332;
      }
      uint64_t v85 = (v84 >> 3) + 1;
      uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v87 = &v75[v86 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v83 = (unint64_t *)((char *)v83 - v86);
      uint64_t v88 = &v82[8 * v78 - 16];
      unint64_t v89 = v75 - 2;
      uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v91 = *(_OWORD *)v89;
        *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
        *(_OWORD *)uint64_t v88 = v91;
        v88 -= 32;
        v89 -= 4;
        v90 -= 4;
      }
      while (v90);
      uint64_t v75 = v87;
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_332:
        do
        {
          unint64_t v92 = *--v75;
          *--unint64_t v83 = v92;
        }
        while (v75 != (unint64_t *)v77);
      }
      uint64_t v75 = *(unint64_t **)(v11 + 88);
      *(void *)(v11 + 88) = v83;
      *(void *)(v11 + 96) = v76;
      *(void *)(v11 + 104) = &v82[8 * v81];
      if (v75) {
LABEL_118:
      }
        operator delete(v75);
LABEL_119:
      *(void *)(v11 + 96) = v76;
      int v4 = v251;
      unsigned int v266 = *(_DWORD *)(v44 + 8);
      if (sub_BD5C18(v250, v266, v10))
      {
LABEL_51:
        uint64_t v46 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v46) {
          goto LABEL_181;
        }
        uint64_t v47 = *v46;
        uint64_t v48 = v46[1];
        if (v48 == v47) {
          goto LABEL_181;
        }
        int v49 = v276;
        uint64_t v50 = v274;
        BOOL v51 = v271;
        uint64_t v52 = v269;
        unint64_t v53 = ((unint64_t)v271 - v270) >> 4;
        uint64_t v54 = v47 << 6;
        BOOL v55 = (int *)(v4[16] + (v47 << 6) + 60);
        uint64_t v56 = (v48 << 6) - v54;
        do
        {
          unsigned int v59 = *(v55 - 2);
          if (v49)
          {
            unsigned int v277 = *(v55 - 1);
            int v57 = *v55;
            int v278 = *v55;
          }
          else
          {
            int v57 = *(_DWORD *)(v50 + 12 * v59);
          }
          BOOL v58 = (unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - *v52 + 6));
          *(v55 - 8) = *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(v50 + 12 * v59 + 4) + v53) + 2]
                                       + *v58)
                     + v57
                     - *((_DWORD *)v51 + 2);
          v55 += 16;
          v56 -= 64;
        }
        while (v56);
        uint64_t v275 = (int *)(v50 + 12 * v59);
        sub_AB8AFC(v253, 0);
        if ((*((unsigned char *)v271 + 15) & 2) != 0
          && (!v273
           || (*(_DWORD *)(v273 + 4 * (((unint64_t)v271 - v270) >> 4)) & v244) == 0))
        {
          int v98 = *((_DWORD *)v4 + 24);
          if (*((unsigned char *)v4 + 20))
          {
            unsigned int v99 = v98 + v98 * *((_DWORD *)v4 + 88);
            unint64_t v100 = v266;
            unint64_t v101 = (unint64_t *)v4[6];
            if (v101) {
              goto LABEL_131;
            }
LABEL_138:
            int v105 = 0x80000000;
          }
          else
          {
            unsigned int v99 = -1;
            unint64_t v100 = v266;
            unint64_t v101 = (unint64_t *)v4[6];
            if (!v101) {
              goto LABEL_138;
            }
LABEL_131:
            if (*v101 > v100)
            {
              unsigned int v102 = 0;
              unsigned int v103 = *((_DWORD *)v4 + 25) + v239;
              unsigned int v104 = v103;
              while (v102 <= v103)
              {
                int v105 = *(_DWORD *)sub_A3F53C(v101 + 2, v101[1] * v100 + v104);
                v102 += 2;
                v104 -= 2;
                if (v105 != 0x7FFFFFFF) {
                  goto LABEL_139;
                }
              }
            }
            int v105 = 0x7FFFFFFF;
          }
LABEL_139:
          int v4 = v251;
          if (sub_AB8DAC((void **)v253, 0, v241 + v98 + v98 * v100, v98 + v98 * v100, v99, v105)) {
            sub_A3EF14(v240, &v266);
          }
        }
        uint64_t v106 = (unsigned int *)v4[13];
        uint64_t v107 = (unsigned int *)v4[14];
        uint64_t v108 = (char *)v107 - (char *)v106;
        if (v107 != v106)
        {
          long long v109 = v253;
          uint64_t v110 = v4[16];
          uint64_t v111 = *v106;
          goto LABEL_173;
        }
        uint64_t v113 = v108 >> 3;
        unint64_t v114 = 1 - (v108 >> 3);
        uint64_t v115 = v4[15];
        if (v114 > (v115 - (uint64_t)v107) >> 3)
        {
          uint64_t v116 = v115 - (void)v106;
          uint64_t v117 = v116 >> 2;
          if ((unint64_t)(v116 >> 2) <= 1) {
            uint64_t v117 = 1;
          }
          BOOL v9 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v9) {
            unint64_t v118 = v117;
          }
          if (v118 >> 61) {
LABEL_327:
          }
            sub_188D718();
          uint64_t v119 = 8 * v118;
          size_t v120 = (char *)operator new(8 * v118);
          unint64_t v121 = &v120[8 * v113];
          bzero(v121, 8 * v114);
          long long v122 = &v121[8 * v114];
          int v4 = v251;
          v251[13] = v121;
          v251[14] = v122;
          v251[15] = &v120[v119];
          if (v107)
          {
            operator delete(v107);
            uint64_t v123 = (char *)v251[14];
            long long v109 = v253;
            uint64_t v106 = *(unsigned int **)v253;
            uint64_t v110 = v251[16];
            uint64_t v111 = **(unsigned int **)v253;
            if (*(char **)v253 != v123) {
              goto LABEL_173;
            }
          }
          else
          {
            uint64_t v123 = &v121[8 * v114];
            long long v109 = v253;
            uint64_t v106 = *(unsigned int **)v253;
            uint64_t v110 = v251[16];
            uint64_t v111 = **(unsigned int **)v253;
            if (*(char **)v253 != v122) {
              goto LABEL_173;
            }
          }
LABEL_143:
          unint64_t v112 = (char *)v4[15];
          if (v112 != v123)
          {
            *(void *)uint64_t v123 = 0;
            v4[14] = v123 + 8;
            goto LABEL_170;
          }
          uint64_t v124 = 1;
          uint64_t v125 = v112 - (char *)v106;
          if ((unint64_t)(v125 >> 2) > 1) {
            uint64_t v124 = v125 >> 2;
          }
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v126 = v124;
          }
          if (v126)
          {
            if (v126 >> 61) {
              goto LABEL_327;
            }
            uint64_t v127 = (char *)operator new(8 * v126);
            long long v109 = v253;
            int v128 = v127;
            *(void *)uint64_t v127 = 0;
            uint64_t v129 = (uint64_t)(v127 + 8);
            if (v123 != (char *)v106)
            {
LABEL_164:
              unint64_t v130 = v123 - 8 - (char *)v106;
              if (v130 < 0x58 || (unint64_t)(v123 - v127) < 0x20)
              {
                unint64_t v131 = (unsigned int *)v123;
                goto LABEL_167;
              }
              uint64_t v227 = (v130 >> 3) + 1;
              uint64_t v228 = 8 * (v227 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v131 = (unsigned int *)&v123[-v228];
              v128 -= v228;
              BOOL v229 = v127 - 16;
              uint64_t v230 = v123 - 16;
              uint64_t v231 = v227 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v232 = *(_OWORD *)v230;
                *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
                *(_OWORD *)BOOL v229 = v232;
                v229 -= 32;
                v230 -= 32;
                v231 -= 4;
              }
              while (v231);
              if (v227 != (v227 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_167:
                  uint64_t v132 = *((void *)v131 - 1);
                  v131 -= 2;
                  *((void *)v128 - 1) = v132;
                  v128 -= 8;
                }
                while (v131 != v106);
              }
              uint64_t v123 = *(char **)v109;
              v4[13] = v128;
              v4[14] = v129;
              v4[15] = &v127[8 * v126];
              if (v123)
              {
LABEL_169:
                operator delete(v123);
                long long v109 = v253;
              }
LABEL_170:
              unint64_t v133 = (_DWORD *)(v110 + (v111 << 6));
              unint64_t v134 = v4[16] + ((unint64_t)*(unsigned int *)(v4[13] + 4) << 6);
              if (v133 == (_DWORD *)v134)
              {
LABEL_180:
                sub_AB8AFC(v109, 0);
LABEL_181:
                if ((*((unsigned char *)v271 + 15) & 1) == 0) {
                  goto LABEL_188;
                }
                if (v273)
                {
                  if (*(_DWORD *)(v273 + 4 * (((unint64_t)v271 - v270) >> 4)) != v244) {
                    goto LABEL_188;
                  }
                }
                else if (v244)
                {
                  goto LABEL_188;
                }
                unint64_t v142 = v243 + *((_DWORD *)v4 + 24) + *((_DWORD *)v4 + 24) * v266;
                uint64_t v143 = v4[13];
                if (v142 >= (v4[14] - v143) >> 3) {
                  goto LABEL_188;
                }
                int v145 = (_DWORD *)(v143 + 8 * v142);
                int v144 = v145[1];
                uint64_t v146 = (v144 - *v145);
                if (v144 == *v145) {
                  goto LABEL_188;
                }
                unsigned int v155 = 0;
                while (2)
                {
                  uint64_t v156 = v4[13];
                  if (v142 >= (v4[14] - v156) >> 3
                    || (int v158 = (int *)(v156 + 8 * v142), v157 = *v158, v158[1] - *v158 <= v155))
                  {
                    uint64_t v233 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    sub_188D9E0(v233, "key does not exist and cannot be added");
                    goto LABEL_324;
                  }
                  unint64_t v159 = v157 + v155;
                  uint64_t v160 = v4[16];
                  if (v159 >= (v4[17] - v160) >> 6)
                  {
                    uint64_t v233 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    sub_188D9E0(v233, "index out of range");
LABEL_324:
                  }
                  uint64_t v161 = v160 + (v159 << 6);
                  int v162 = *(_DWORD *)(v161 + 28);
                  if (v276)
                  {
                    if (!sub_A2B620(v4[3], (uint64_t)&v267, v162, 1)) {
                      goto LABEL_214;
                    }
LABEL_222:
                    uint64_t v163 = v146;
                    uint64_t v247 = *(void *)(v161 + 20);
                    unsigned int v164 = *(_DWORD *)(v161 + 40);
                    int v245 = *(_DWORD *)(v161 + 36);
                    int v246 = *(_DWORD *)(v161 + 44);
                    int v248 = *(_DWORD *)(v161 + 48);
                    int v249 = *(_DWORD *)(v161 + 32);
                    uint64_t v165 = (void *)(v4[3] + 4136);
                    if (sub_A10E20(v165, v254))
                    {
                      long long v166 = (int *)sub_A1120C(*(void *)(*v165 + 3944), v252);
                    }
                    else
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F7308))
                      {
                        sub_518C8(0x3B60u, 0x7FCAu);
                        dword_24F7300 = v225 | 0x40000000;
                        __cxa_guard_release(&qword_24F7308);
                      }
                      uint64_t v167 = *v165;
                      if (dword_24F7300 == v254)
                      {
                        unint64_t v168 = *(unsigned int **)(*(void *)(v167 + 3976) + 72);
                        if (!v168)
                        {
                          unint64_t v237 = __cxa_allocate_exception(0x40uLL);
                          unsigned int v282 = (char *)operator new(0x40uLL);
                          long long v283 = xmmword_20B9A90;
                          strcpy(v282, "Realtime stop pattern quad data requested on nullptr buffer");
                          int v238 = (void *)sub_2F404((uint64_t)v237, (long long *)&v282);
                        }
                        unint64_t v169 = (int *)((char *)v168 + *v168);
                        uint64_t v170 = (unsigned __int16 *)((char *)v169 - *v169);
                        if (*v170 >= 5u && (uint64_t v171 = v170[2]) != 0) {
                          uint64_t v172 = (unsigned int *)((char *)v169 + v171 + *(unsigned int *)((char *)v169 + v171));
                        }
                        else {
                          uint64_t v172 = 0;
                        }
                        long long v166 = (int *)sub_A1139C(v172, v252);
                      }
                      else
                      {
                        long long v166 = (int *)sub_A11500(v167 + 24, v252, 0, "stop pattern");
                      }
                    }
                    uint64_t v173 = v166;
                    uint64_t v174 = *v165;
                    uint64_t v175 = (unsigned __int16 *)((char *)v166 - *v166);
                    if (*v175 >= 0xFu && (uint64_t v176 = v175[7]) != 0)
                    {
                      uint64_t v177 = v174 + 3896;
                      char v178 = sub_49442C(*(unsigned __int16 *)((char *)v166 + v176));
                      if ((sub_C25A10(v177, v178) & 1) == 0)
                      {
LABEL_236:
                        uint64_t v179 = (unsigned __int16 *)((char *)v173 - *v173);
                        int v4 = v251;
                        if (*v179 >= 0xBu && (uint64_t v180 = v179[5]) != 0)
                        {
                          int v181 = sub_A2BF48(*((unsigned char *)v173 + v180));
                          if (sub_A10E20(v165, v254))
                          {
LABEL_242:
                            unint64_t v184 = (int *)sub_A1120C(*(void *)(*v165 + 3944), v252);
                            goto LABEL_251;
                          }
                        }
                        else
                        {
                          int v181 = sub_A2BF48(0);
                          if (sub_A10E20(v165, v254)) {
                            goto LABEL_242;
                          }
                        }
LABEL_244:
                        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                          && __cxa_guard_acquire(&qword_24F7308))
                        {
                          sub_518C8(0x3B60u, 0x7FCAu);
                          dword_24F7300 = v226 | 0x40000000;
                          __cxa_guard_release(&qword_24F7308);
                          int v4 = v251;
                        }
                        uint64_t v185 = *v165;
                        if (dword_24F7300 == v254)
                        {
                          uint8x8_t v186 = *(unsigned int **)(*(void *)(v185 + 3976) + 72);
                          if (!v186)
                          {
                            unint64_t v235 = __cxa_allocate_exception(0x40uLL);
                            unsigned int v282 = (char *)operator new(0x40uLL);
                            long long v283 = xmmword_20B9A90;
                            strcpy(v282, "Realtime stop pattern quad data requested on nullptr buffer");
                            unint64_t v236 = (void *)sub_2F404((uint64_t)v235, (long long *)&v282);
                          }
                          uint64_t v146 = v163;
                          unint64_t v187 = (int *)((char *)v186 + *v186);
                          unsigned int v188 = (unsigned __int16 *)((char *)v187 - *v187);
                          if (*v188 >= 5u && (uint64_t v189 = v188[2]) != 0) {
                            unint64_t v190 = (unsigned int *)((char *)v187 + v189 + *(unsigned int *)((char *)v187 + v189));
                          }
                          else {
                            unint64_t v190 = 0;
                          }
                          unint64_t v184 = (int *)sub_A1139C(v190, v252);
                          uint64_t v191 = (unsigned __int16 *)((char *)v184 - *v184);
                          if (*v191 >= 0x19u) {
                            goto LABEL_255;
                          }
LABEL_257:
                          unsigned int v193 = 2;
                        }
                        else
                        {
                          unint64_t v184 = (int *)sub_A11500(v185 + 24, v252, 0, "stop pattern");
LABEL_251:
                          uint64_t v146 = v163;
                          uint64_t v191 = (unsigned __int16 *)((char *)v184 - *v184);
                          if (*v191 < 0x19u) {
                            goto LABEL_257;
                          }
LABEL_255:
                          uint64_t v192 = v191[12];
                          if (!v192) {
                            goto LABEL_257;
                          }
                          unsigned int v193 = *((unsigned __int8 *)v184 + v192);
                        }
                        unsigned int v194 = sub_A2BF38(v193);
                        if (v164 <= v194) {
                          unsigned int v195 = v194;
                        }
                        else {
                          unsigned int v195 = v164;
                        }
                        int v196 = v278;
                        unint64_t v197 = 0xFFFFFFFF00000000;
                        if (v276) {
                          unint64_t v197 = (unint64_t)v277 << 32;
                        }
                        unint64_t v198 = (-1431655765 * (((unint64_t)v275 - v274) >> 2)) | v197;
                        if (!v276) {
                          int v196 = 0x7FFFFFFF;
                        }
                        uint64_t v199 = (unsigned int *)((char *)v269 + *(unsigned __int16 *)((char *)v269 - *v269 + 6));
                        unint64_t v200 = (char *)v199 + *v199;
                        uint64_t v201 = &v278;
                        if (!v276) {
                          uint64_t v201 = v275;
                        }
                        int v202 = *v201;
                        uint64_t v203 = &v200[8 * v275[1] + 8 * (((unint64_t)v271 - v270) >> 4)];
                        int v204 = *((_DWORD *)v203 + 1);
                        LODWORD(v203) = 10 * (*(_DWORD *)(v161 + 28) - v202 - *((_DWORD *)v203 + 2));
                        LODWORD(v255) = ((unint64_t)v271 - v270) >> 4;
                        *(void *)((char *)&v255 + 4) = v198;
                        HIDWORD(v255) = v196;
                        unsigned int v256 = v281;
                        uint64_t v257 = v247;
                        int v258 = v204 + v202;
                        int v259 = v249;
                        unsigned int v260 = v181 + v245;
                        unsigned int v261 = v195;
                        int v262 = v246 - (v203 & ~((int)v203 >> 31));
                        int v263 = v248;
                        unint64_t v264 = v198;
                        int v265 = v196;
                        unsigned int v205 = (unsigned int *)v4[13];
                        if ((unsigned int *)v4[14] == v205
                          || (uint64_t v207 = *v205, v206 = *(unsigned int *)(v4[13] + 4), v206 == v207))
                        {
                          sub_AAD3F8((char **)v253, 0, &v255);
                        }
                        else
                        {
                          char v208 = 0;
                          uint64_t v209 = v207 << 6;
                          uint64_t v210 = (v206 << 6) - v209;
                          long long v211 = (_DWORD *)(v4[16] + v209 + 44);
                          do
                          {
                            int v212 = *(v211 - 4);
                            if (v212 != 0x7FFFFFFF)
                            {
                              if (v212 >= v258 && *(v211 - 3) <= v259)
                              {
                                unsigned int v213 = *(v211 - 2);
                                if (v213 <= v260
                                  && *(v211 - 1) <= v261
                                  && (v213 != v260 || v212 != v258 || *v211 - 10 * v212 <= v262 - 10 * v258))
                                {
                                  goto LABEL_289;
                                }
                              }
                              if (v258 >= v212 && v259 <= *(v211 - 3))
                              {
                                unsigned int v214 = *(v211 - 2);
                                if (v260 <= v214
                                  && v261 <= *(v211 - 1)
                                  && (v260 != v214 || v258 != v212 || v262 - 10 * v258 <= *v211 - 10 * v212))
                                {
                                  *(v211 - 4) = 0x7FFFFFFF;
                                  char v208 = 1;
                                }
                              }
                            }
                            v211 += 16;
                            v210 -= 64;
                          }
                          while (v210);
                          sub_AAD3F8((char **)v253, 0, &v255);
LABEL_289:
                          if (v208)
                          {
                            uint64_t v215 = (unsigned int *)v4[13];
                            if ((unsigned int *)v4[14] != v215)
                            {
                              uint64_t v216 = v4[16];
                              uint64_t v217 = *v215;
LABEL_292:
                              unint64_t v218 = v216 + (v217 << 6);
                              unint64_t v219 = v216 + ((unint64_t)v215[1] << 6);
                              unint64_t v220 = (void **)v253;
                              if (v218 != v219) {
                                goto LABEL_296;
                              }
                              goto LABEL_302;
                            }
                            sub_D2BFC((void **)v253, 1uLL);
                            uint64_t v215 = (unsigned int *)v4[13];
                            uint64_t v216 = v4[16];
                            uint64_t v217 = *v215;
                            if ((unsigned int *)v4[14] != v215) {
                              goto LABEL_292;
                            }
                            sub_D2BFC((void **)v253, 1uLL);
                            uint64_t v215 = (unsigned int *)v4[13];
                            unint64_t v218 = v216 + (v217 << 6);
                            unint64_t v219 = v4[16] + ((unint64_t)v215[1] << 6);
                            unint64_t v220 = (void **)v253;
                            if (v218 == v219)
                            {
LABEL_302:
                              if ((unsigned int *)v4[14] == v215) {
                                goto LABEL_303;
                              }
                            }
                            else
                            {
LABEL_296:
                              while (*(_DWORD *)(v218 + 28) != 0x7FFFFFFF)
                              {
                                v218 += 64;
                                if (v218 == v219)
                                {
                                  unint64_t v218 = v219;
                                  if ((unsigned int *)v4[14] != v215) {
                                    goto LABEL_304;
                                  }
                                  goto LABEL_303;
                                }
                              }
                              if (v218 == v219) {
                                goto LABEL_302;
                              }
                              unint64_t v221 = v218 + 64;
                              if (v218 + 64 == v219) {
                                goto LABEL_302;
                              }
                              do
                              {
                                if (*(_DWORD *)(v221 + 28) != 0x7FFFFFFF)
                                {
                                  long long v222 = *(_OWORD *)v221;
                                  long long v223 = *(_OWORD *)(v221 + 16);
                                  long long v224 = *(_OWORD *)(v221 + 48);
                                  *(_OWORD *)(v218 + 32) = *(_OWORD *)(v221 + 32);
                                  *(_OWORD *)(v218 + 48) = v224;
                                  *(_OWORD *)unint64_t v218 = v222;
                                  *(_OWORD *)(v218 + 16) = v223;
                                  v218 += 64;
                                }
                                v221 += 64;
                              }
                              while (v221 != v219);
                              uint64_t v215 = (unsigned int *)*v220;
                              if ((void *)v4[14] == *v220)
                              {
LABEL_303:
                                sub_D2BFC(v220, 1uLL);
                                unint64_t v220 = (void **)v253;
                                uint64_t v215 = *(unsigned int **)v253;
                              }
                            }
LABEL_304:
                            sub_A86AC4(v220, 0, (char *)v218, (char *)(v4[16] + ((unint64_t)v215[1] << 6)));
                          }
                        }
LABEL_214:
                        if (++v155 == v146) {
                          goto LABEL_188;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      uint64_t v182 = v174 + 3896;
                      char v183 = sub_49442C(0x7FFFu);
                      if ((sub_C25A10(v182, v183) & 1) == 0) {
                        goto LABEL_236;
                      }
                    }
                    int v181 = 128;
                    int v4 = v251;
                    if (sub_A10E20(v165, v254)) {
                      goto LABEL_242;
                    }
                    goto LABEL_244;
                  }
                  break;
                }
                if (sub_A2BC00((uint64_t)&v267, v162, 1)) {
                  goto LABEL_222;
                }
                goto LABEL_214;
              }
LABEL_174:
              int v135 = v276;
              uint64_t v136 = v274;
              uint64_t v137 = v269;
              unint64_t v138 = ((unint64_t)v271 - v270) >> 4;
              do
              {
                unsigned int v141 = v133[13];
                if (v135)
                {
                  unsigned int v277 = v133[14];
                  int v139 = v133[15];
                  int v278 = v139;
                }
                else
                {
                  int v139 = *(_DWORD *)(v136 + 12 * v141);
                }
                unsigned int v140 = (unsigned int *)((char *)v137 + *(unsigned __int16 *)((char *)v137 - *v137 + 6));
                v133[7] = *(unsigned int *)((char *)&v140[2 * (*(_DWORD *)(v136 + 12 * v141 + 4) + v138)
                                                        + 1]
                                          + *v140)
                        + v139;
                v133 += 16;
              }
              while (v133 != (_DWORD *)v134);
              uint64_t v275 = (int *)(v136 + 12 * v141);
              goto LABEL_180;
            }
          }
          else
          {
            uint64_t v127 = 0;
            int v128 = 0;
            *(void *)&def_332C = 0;
            uint64_t v129 = 8;
            if (v123 != (char *)v106) {
              goto LABEL_164;
            }
          }
          v4[13] = v128;
          v4[14] = v129;
          v4[15] = &v127[8 * v126];
          if (v123) {
            goto LABEL_169;
          }
          goto LABEL_170;
        }
        bzero((void *)v4[14], 8 * v114);
        uint64_t v123 = (char *)&v107[2 * v114];
        v4[14] = v123;
        long long v109 = v253;
        uint64_t v106 = *(unsigned int **)v253;
        uint64_t v110 = v4[16];
        uint64_t v111 = **(unsigned int **)v253;
        if (*(char **)v253 == v123) {
          goto LABEL_143;
        }
LABEL_173:
        unint64_t v133 = (_DWORD *)(v110 + (v111 << 6));
        unint64_t v134 = v110 + ((unint64_t)v106[1] << 6);
        if (v133 == (_DWORD *)v134) {
          goto LABEL_180;
        }
        goto LABEL_174;
      }
LABEL_120:
      if (!*((unsigned char *)v4 + 21))
      {
        uint64_t v93 = (unsigned int *)v4[13];
        if ((unsigned int *)v4[14] == v93)
        {
          sub_D2BFC((void **)v253, 1uLL);
          uint64_t v93 = (unsigned int *)v4[13];
          uint64_t v94 = v4[16];
          uint64_t v95 = *v93;
          if ((unsigned int *)v4[14] == v93)
          {
            size_t v97 = (void **)v253;
            sub_D2BFC((void **)v253, 1uLL);
            uint64_t v93 = (unsigned int *)v4[13];
            uint64_t v96 = v4[16];
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v94 = v4[16];
          uint64_t v95 = *v93;
        }
        uint64_t v96 = v94;
        size_t v97 = (void **)v253;
LABEL_126:
        sub_A86AC4(v97, 0, (char *)(v94 + (v95 << 6)), (char *)(v96 + ((unint64_t)v93[1] << 6)));
      }
LABEL_188:
      unint64_t v147 = v270;
      uint64_t v8 = v271 - 2;
      v271 -= 2;
      if (*(unsigned char *)(v267 + 16)) {
        BOOL v148 = v268 == 0;
      }
      else {
        BOOL v148 = 0;
      }
      if (v148 && (unint64_t)v8 >= v270 && (unint64_t)v8 < v272)
      {
        do
        {
          unint64_t v151 = __ROR8__(*v8, 32);
          if (HIDWORD(v151) == 1 && (v151 + 3) < 2) {
            break;
          }
          char v153 = sub_2AB7E4(**(void **)(v267 + 4120));
          unint64_t v147 = v270;
          uint64_t v8 = v271;
          if (v153) {
            break;
          }
          uint64_t v8 = v271 - 2;
          uint64_t v271 = v8;
        }
        while ((unint64_t)v8 >= v270 && (unint64_t)v8 < v272);
      }
      if ((unint64_t)v8 < v147 || (unint64_t)v8 >= v272) {
        goto LABEL_3;
      }
    }
    uint64_t v23 = -1;
    uint64_t v24 = 1;
    do
    {
      if (*(_DWORD *)(v11 + 36) == v20 && *(_DWORD *)(v11 + 32) == v21)
      {
        if (v23 == -1) {
          uint64_t v23 = v18;
        }
      }
      else if (__PAIR64__(v20, v21) == v10)
      {
        goto LABEL_48;
      }
      uint64_t v18 = (v18 + v24) & v12;
      __int16 v25 = (unsigned int *)(v15 + 12 * v18);
      unsigned int v21 = *v25;
      unsigned int v20 = v25[1];
      ++v24;
    }
    while (v16 != v20 || v17 != v21);
    if (v23 != -1)
    {
      if (sub_A3BA84(v4[4], 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v23 = v18;
    if (sub_A3BA84(v4[4], 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_AB8A84(_Unwind_Exception *a1)
{
}

void sub_AB8A9C(_Unwind_Exception *a1)
{
}

void sub_AB8AB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 105) < 0)
  {
    operator delete(*(void **)(v1 + 136));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_AB8AFC(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        double result = (char *)sub_AADB74(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_50:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            unint64_t v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            unsigned int v11 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v11) {
                goto LABEL_50;
              }
              unint64_t v12 = v11 + *v10;
              uint64_t v13 = *((void *)v2 + 3);
              if (v12 >= (*((void *)v2 + 4) - v13) >> 6) {
                break;
              }
              uint64_t v14 = v13 + (v12 << 6);
              int v17 = *(_DWORD *)(v14 + 28);
              int v16 = (_DWORD *)(v14 + 28);
              int v15 = v17;
              if (v17 != 0x7FFFFFFF)
              {
                int v18 = *((_DWORD *)result + 7);
                if (v18 >= v15
                  && (uint64_t v19 = v13 + (v12 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v19 + 32))
                  && (v20 = *(_DWORD *)(v19 + 36), unsigned int v21 = *((_DWORD *)result + 9), v21 <= v20)
                  && (uint64_t v22 = v13 + (v12 << 6), *((_DWORD *)result + 10) <= *(_DWORD *)(v22 + 40))
                  && ((int v23 = *(_DWORD *)(v22 + 44) - 10 * v15, v21 == v20) ? (v24 = v18 == v15) : (v24 = 0),
                      v24 ? (BOOL v25 = *((_DWORD *)result + 11) - 10 * v18 <= v23) : (BOOL v25 = 1),
                      v25))
                {
                  *int v16 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v15 >= v18)
                {
                  uint64_t v26 = v13 + (v12 << 6);
                  if (*(_DWORD *)(v26 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v27 = *((_DWORD *)result + 9);
                    unsigned int v28 = *(_DWORD *)(v26 + 36);
                    if (v28 <= v27)
                    {
                      uint64_t v29 = v13 + (v12 << 6);
                      if (*(_DWORD *)(v29 + 40) <= *((_DWORD *)result + 10))
                      {
                        int v30 = *(_DWORD *)(v29 + 44) - 10 * v15;
                        BOOL v31 = v28 == v27 && v15 == v18;
                        if (!v31 || v30 <= *((_DWORD *)result + 11) - 10 * v18)
                        {
                          *((_DWORD *)result + 7) = 0x7FFFFFFF;
                          char v5 = 1;
                          goto LABEL_6;
                        }
                      }
                    }
                  }
                }
              }
              if (v8 == ++v11) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_AB8D84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AB8D98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AB8DAC(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AADB74(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_AADB74(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) >= a6)
      {
        if (sub_AB7244(a1, &v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_AB7068((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      int v30 = (long long *)sub_AADB74(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) >= a6)
      {
        if (sub_AB7244(a1, &v36, a5) & 1) != 0 || (sub_AB7244(a1, &v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_AB7068((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_AB8FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v6 = a5[1];
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v7;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 352) = -1;
  *(void *)(a1 + 344) = 0;
  sub_BD5668(a1 + 360, a2);
  char v10 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 464), &__p);
  if (v10 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_AB9104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v15 + 280);
  sub_A3884C(v15 + 232);
  sub_A3884C(v18);
  sub_46645C(v17);
  sub_14A84(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_AB9158(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  long long v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    char v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      char v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AB9410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AB9440(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A3C368((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    char v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AB9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AB9828(uint64_t a1, int a2)
{
  int v96 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v95[0] = *(_OWORD *)(a1 + 88);
  v95[1] = v4;
  LOBYTE(v95[0]) = 1;
  v94[0] = (uint64_t)v95;
  v94[1] = a1;
  v94[2] = (uint64_t)&v96;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v97 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v10 - v11);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_ABAF3C(v94, v10);
    LODWORD(v86[0]) = v14;
    unsigned int v11 = v97;
    if (v14 != 0x7FFFFFFF && (int)v97 < v14)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        uint64_t v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v89 < 0) {
          operator delete(__p[0]);
        }
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v86[0];
      unsigned int v97 = v86[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 / 10;
      int v49 = v22 % 10;
      uint64_t v50 = (void *)std::ostream::operator<<();
      sub_188FC78(v50, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v86, 2u);
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      uint64_t v90 = v85;
      *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 / 10;
      int v49 = v22 % 10;
    }
    char v51 = v22 < 0 ? -5 : 5;
    unsigned int v52 = v48 + (((103 * (char)(v51 + v49)) >> 15) & 1) + ((103 * (char)(v51 + v49)) >> 10);
    int v53 = v10;
    int v54 = v52 + v10;
    unsigned int v55 = sub_ABAF3C(v94, v52 + v10);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v55 - v97))) >= (double)(int)fabs((double)(int)(10 * v52))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v56 = (uint64_t)(v46 + v46);
      if (v56 >= 1) {
        --v56;
      }
    }
    double v46 = (double)(v56 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v57 = v55;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v90);
    sub_188FC78(&v90, (uint64_t)"[", 1);
    BOOL v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)"] Journey duration improved from ", 33);
    unsigned int v59 = (void *)std::ostream::operator<<();
    sub_188FC78(v59, (uint64_t)" to ", 4);
    uint64_t v60 = (void *)std::ostream::operator<<();
    sub_188FC78(v60, (uint64_t)" sec for time shift of ", 23);
    uint64_t v61 = (void *)std::ostream::operator<<();
    sub_188FC78(v61, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v86, 2u);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    uint64_t v90 = v85;
    *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
    if (v93 < 0) {
      operator delete(v92);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v97 = v57;
  int v23 = v53;
  if (v52)
  {
    double v62 = (double)v22 * 0.5;
    if (v62 >= 0.0)
    {
      if (v62 < 4.50359963e15)
      {
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
        goto LABEL_93;
      }
    }
    else if (v62 > -4.50359963e15)
    {
      uint64_t v63 = (uint64_t)(v62 + v62);
      if (v63 >= 1) {
        --v63;
      }
LABEL_93:
      double v62 = (double)(v63 >> 1);
    }
    double v64 = (double)v22 * 0.25;
    if (v64 >= 0.0)
    {
      if (v64 < 4.50359963e15)
      {
        uint64_t v65 = (uint64_t)(v64 + v64) + 1;
        goto LABEL_101;
      }
    }
    else if (v64 > -4.50359963e15)
    {
      uint64_t v65 = (uint64_t)(v64 + v64);
      if (v65 >= 1) {
        --v65;
      }
LABEL_101:
      double v64 = (double)(v65 >> 1);
    }
    int v66 = (int)v64;
    if (*(_DWORD *)(a1 + 60) > (int)v64)
    {
      int v23 = v54;
      goto LABEL_30;
    }
    int v67 = (int)v62;
    int v23 = v54;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v69 = v66 + v67;
      int v83 = v67;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v90);
        sub_188FC78(&v90, (uint64_t)"[", 1);
        BOOL v70 = (void *)std::ostream::operator<<();
        sub_188FC78(v70, (uint64_t)"] Examining time shift of ", 26);
        int v71 = v69 / 10;
        int v72 = v69 % 10;
        int v73 = (void *)std::ostream::operator<<();
        sub_188FC78(v73, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v86, 2u);
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        uint64_t v90 = v85;
        *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
        if (v93 < 0) {
          operator delete(v92);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v71 = v69 / 10;
        int v72 = v69 % 10;
      }
      if (v69 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unsigned int v75 = v71 + (((103 * (char)(v74 + v72)) >> 15) & 1) + ((103 * (char)(v74 + v72)) >> 10);
      unsigned int v76 = sub_ABAF3C(v94, v75 + v53);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v97 - v76))) >= (double)(int)fabs((double)(int)(10 * (v23 - (v75 + v53)))))
      {
        v67 += v66;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v77 = v76;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v90);
          sub_188FC78(&v90, (uint64_t)"[", 1);
          uint64_t v78 = (void *)std::ostream::operator<<();
          sub_188FC78(v78, (uint64_t)"] Journey duration improved from ", 33);
          unint64_t v79 = (void *)std::ostream::operator<<();
          sub_188FC78(v79, (uint64_t)" to ", 4);
          uint64_t v80 = (void *)std::ostream::operator<<();
          sub_188FC78(v80, (uint64_t)" sec for time shift of ", 23);
          unint64_t v81 = (void *)std::ostream::operator<<();
          sub_188FC78(v81, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v86, 2u);
          if (v87 < 0) {
            operator delete(v86[0]);
          }
          uint64_t v90 = v85;
          *(uint64_t *)((char *)&v90 + *(void *)(v85 - 24)) = v84;
          if (v93 < 0) {
            operator delete(v92);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v97 = v77;
        int v23 = v75 + v53;
        int v67 = v83;
        double v68 = (double)v66 * 0.5;
        if (v68 >= 0.0)
        {
LABEL_125:
          if (v68 < 4.50359963e15)
          {
            uint64_t v82 = (uint64_t)(v68 + v68) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v68 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v68 + v68);
        if (v82 >= 1) {
          --v82;
        }
LABEL_105:
        double v68 = (double)(v82 >> 1);
      }
LABEL_106:
      int v66 = (int)v68;
      if (*(_DWORD *)(a1 + 60) > (int)v68) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v97;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v90);
      sub_188FC78(&v90, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"departure", 9);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v89 < 0) {
        operator delete(__p[0]);
      }
      if (v93 < 0) {
        operator delete(v92);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v96;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v96 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v96 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v96 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v96 + 3;
    int v35 = v96;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / 10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_ABAF3C(v94, v42 + v10 + (((103 * (char)(v44 + v43)) >> 15) & 1) + ((103 * (char)(v44 + v43)) >> 10));
  return v97;
}

void sub_ABA9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_ABAB20(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_ABB1F8(a1 + 1336, v42);
  sub_ABB4AC((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_ABAEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_ABAF3C(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A40DC4(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_ABB1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_ABB1F8(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_ABD9E4(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_ABDBDC(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_ABDD40(a1, v6);
        sub_ABE04C(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_ABF43C(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_AC0FE8(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_AC039C(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_AC06F4(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_ABB4AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  long long v298 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v335) = 0;
  LOBYTE(__p[0]) = 0;
  unsigned int v296 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v335) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v297 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v300 = _Q0;
    int v299 = 1;
    int v306 = a1;
    v305 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_AC0F04(v7, v299 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v301 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          unint64_t v302 = (unsigned int *)(v12 + (v13 << 6));
          if (v302 != (unsigned int *)v301) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v301 = v12 + ((unint64_t)v11[1] << 6);
      unint64_t v302 = (unsigned int *)(v12 + (v13 << 6));
      if (v302 != (unsigned int *)v301) {
        break;
      }
LABEL_9:
      if (++v299 == v297) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v335 = 0x7FFFFFFF;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      __int16 v338 = 0;
      unint64_t v339 = 0x8000000080000000;
      int v340 = 0x7FFFFFFF;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0x8000000080000000;
      __int16 v345 = 0;
      unint64_t v346 = 0xFFFFFFFF00000000;
      int v347 = -1;
      uint64_t v348 = 0;
      uint64_t v350 = 0;
      uint64_t v351 = 0;
      uint64_t v352 = 0;
      int v349 = 0x7FFFFFFF;
      int v353 = 100;
      int v354 = -1;
      long long v355 = v300;
      long long v356 = v300;
      long long v357 = v300;
      long long v358 = 0u;
      long long v359 = 0u;
      long long v360 = 0u;
      long long v361 = 0u;
      uint64_t v14 = a1[3];
      long long v362 = 0u;
      long long v363 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v302 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v302 != -1) {
        break;
      }
LABEL_397:
      unint64_t v268 = v358;
      if ((void)v358 != *((void *)&v358 + 1))
      {
        unint64_t v269 = *((void *)&v358 + 1) - 72;
        if (*((void *)&v358 + 1) - 72 > (unint64_t)v358)
        {
          do
          {
            sub_A4D0C8(v268, v269);
            v268 += 72;
            v269 -= 72;
          }
          while (v268 < v269);
        }
      }
      sub_A29D50((uint64_t)__p);
      unint64_t v270 = *(void *)(v3 + 16);
      if (v270 >= *(void *)(v3 + 24))
      {
        uint64_t v271 = sub_A4D268(v298, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v271 = v270 + 296;
        *(void *)(v3 + 16) = v270 + 296;
      }
      int v7 = v305;
      *(void *)(v3 + 16) = v271;
      if (*((void *)&v362 + 1))
      {
        *(void *)&long long v363 = *((void *)&v362 + 1);
        operator delete(*((void **)&v362 + 1));
      }
      if ((void)v361)
      {
        *((void *)&v361 + 1) = v361;
        operator delete((void *)v361);
      }
      if (*((void *)&v359 + 1))
      {
        *(void *)&long long v360 = *((void *)&v359 + 1);
        operator delete(*((void **)&v359 + 1));
      }
      unint64_t v272 = (void **)v358;
      if ((void)v358)
      {
        uint64_t v273 = *((void *)&v358 + 1);
        uint64_t v274 = (void *)v358;
        if (*((void *)&v358 + 1) != (void)v358)
        {
          do
          {
            unsigned __int8 v276 = *(void **)(v273 - 40);
            if (v276)
            {
              *(void *)(v273 - 32) = v276;
              operator delete(v276);
            }
            unsigned int v277 = (void **)(v273 - 72);
            uint64_t v278 = *(void *)(v273 - 72);
            if (v278)
            {
              uint64_t v279 = *(void *)(v273 - 64);
              uint64_t v275 = *(void **)(v273 - 72);
              if (v279 != v278)
              {
                do
                {
                  if (!*(_DWORD *)(v279 - 8))
                  {
                    unint64_t v280 = *(void **)(v279 - 48);
                    if (v280)
                    {
                      *(void *)(v279 - 40) = v280;
                      operator delete(v280);
                    }
                    unsigned int v281 = *(void **)(v279 - 80);
                    if (v281)
                    {
                      *(void *)(v279 - 72) = v281;
                      operator delete(v281);
                    }
                    unsigned int v282 = *(void **)(v279 - 104);
                    if (v282)
                    {
                      *(void *)(v279 - 96) = v282;
                      operator delete(v282);
                    }
                  }
                  v279 -= 168;
                }
                while (v279 != v278);
                uint64_t v275 = *v277;
              }
              *(void *)(v273 - 64) = v278;
              operator delete(v275);
              a1 = v306;
            }
            v273 -= 72;
          }
          while (v277 != v272);
          uint64_t v274 = (void *)v358;
        }
        *((void *)&v358 + 1) = v272;
        operator delete(v274);
      }
      if (SHIBYTE(v352) < 0) {
        operator delete(v350);
      }
      v302 += 16;
      if (v302 == (unsigned int *)v301) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v302;
    int v308 = v299;
    unsigned int v309 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v326 = 0;
      char v327 = 0;
      unint64_t v328 = 0;
      uint64_t v331 = 0;
      uint64_t v332 = 0;
      uint64_t v330 = 0;
      v333[0] = 1;
      *(void *)&v333[4] = 0x8000000080000000;
      *(_WORD *)&v333[12] = 0;
      v333[14] = 0;
      int v385 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v310 = xmmword_20E12E0;
      __int16 v311 = 0;
      unint64_t v312 = 0x8000000080000000;
      __int16 v313 = 0;
      *(_OWORD *)long long v314 = xmmword_20EB6B0;
      *(void *)&v314[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v316 = 0u;
      long long v317 = 0u;
      long long v318 = 0u;
      int v315 = -1;
      int v319 = 0x7FFFFFFF;
      char v321 = 0;
      uint64_t v322 = 0;
      uint64_t v320 = 0;
      char v323 = 1;
      unint64_t v324 = 0x8000000080000000;
      int v325 = 0;
      char v329 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)long long v314 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v314[16] = v18[3];
      *(void *)&v314[8] = v21;
      *(_DWORD *)&v314[20] = *v18;
      unsigned int v22 = *(_DWORD *)&v314[20];
      uint64_t v23 = a1[3];
      uint64_t v364 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      sub_A1E9A0((uint64_t)v365, v23, v20, v22, 0, 0);
      *(void *)&long long v367 = *(void *)&v366[24] + 12 * *(unsigned int *)&v314[8];
      if (LOBYTE(v369[1])) {
        *(void **)((char *)&v369[1] + 4) = *(void **)&v314[12];
      }
      if (*(void *)&v366[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v366[16]
      }
                              + 4 * ((*(void *)v366 - *(void *)&v365[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A4C9D4((uint64_t)v365, &v364, v24);
      _CF = *(void *)v366 < *(void *)&v366[8] && *(void *)v366 >= *(void *)&v365[24];
      uint64_t v26 = (*(void *)v366 - *(void *)&v365[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      int v315 = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v314;
      unsigned int v30 = *(_DWORD *)&v314[20];
      uint64_t v31 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v28, *(int *)&v314[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            v291 = (void *)sub_2F404((uint64_t)exception, (long long *)v365);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      uint64_t v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        unint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v306;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v309 = *(_DWORD *)(v58 + 8);
        if (v309 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        double v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v306;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v306;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              unint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_434;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v309 = *(_DWORD *)(v58 + 8);
              if (v309 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_434:
              v287 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v287, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v306;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_434;
            }
LABEL_117:
            if (v67
              && ((uint64_t v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_434;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_434;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((unsigned int v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v306;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
      if (v309 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      uint64_t v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)uint64_t v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      uint64_t v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        int v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        unsigned int v97 = &v96[8 * v91];
        *(void *)unsigned int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v306;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        int v96 = 0;
        unsigned int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v306;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v306;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      uint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      uint64_t v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      uint64_t v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v309 = *(_DWORD *)(v58 + 8);
LABEL_159:
      uint64_t v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v314;
      unsigned int v112 = *(_DWORD *)&v314[20];
      uint64_t v113 = HIDWORD(*(void *)v314);
      if (sub_A10E20(v110, *(int *)&v314[4]))
      {
        unint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          uint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            uint64_t v294 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
            int v295 = (void *)sub_2F404((uint64_t)v294, (long long *)v365);
          }
          uint64_t v117 = (int *)((char *)v116 + *v116);
          unint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          unint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          unint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        uint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        uint64_t v123 = 0;
      }
      DWORD1(v310) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v314;
      unint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v314[20];
      int v128 = *(_DWORD *)&v314[8];
      uint64_t v129 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v314[4]))
      {
        unint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          long long v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          long long v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v365);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        unint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          unint64_t v288 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          uint64_t v289 = (void *)sub_2F404((uint64_t)v288, (long long *)v365);
        }
LABEL_180:
        uint64_t v132 = (char *)v130 + *v130;
        unint64_t v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      uint64_t v132 = sub_A10B80(v131 + 24, v125, 0);
      unint64_t v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      int v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        unint64_t v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        unint64_t v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      unsigned int v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        unsigned int v141 = 0;
        unint64_t v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        unsigned int v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          unsigned int v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        unint64_t v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)long long v365 = v145;
      *(_DWORD *)&v365[8] = v146;
      unint64_t v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      BOOL v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        uint64_t v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        uint64_t v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v314[16];
      }
      *((void *)&v310 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v365, v151, v152);
      __int16 v311 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v314;
      uint64_t v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v315;
      int v158 = *(_DWORD *)&v314[8];
      uint64_t v159 = HIDWORD(*(void *)v314);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v314[4]))
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          long long v285 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Incident stop pattern quad data requested on nullptr buffer");
          long long v286 = (void *)sub_2F404((uint64_t)v285, (long long *)v365);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          v292 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v365, "Realtime stop pattern quad data requested on nullptr buffer");
          v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v365);
        }
LABEL_213:
        int v162 = (char *)v160 + *v160;
        uint64_t v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      int v162 = sub_A10B80(v161 + 24, v155, 0);
      uint64_t v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      uint64_t v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      long long v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        unint64_t v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        unint64_t v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      uint64_t v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        uint64_t v171 = 0;
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          uint64_t v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        uint64_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)long long v365 = v175;
      *(_DWORD *)&v365[8] = v176;
      uint64_t v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      char v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        uint64_t v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        uint64_t v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v314[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v314[16];
      }
      unint64_t v312 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v365, v181, v182);
      __int16 v313 = v183;
      int v374 = -1;
      sub_9F6FA0((uint64_t)v365, &v310);
      int v374 = 0;
      if (v385)
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (v374) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v371)
        {
          *((void *)&v371 + 1) = v371;
          operator delete((void *)v371);
        }
        if (v369[0])
        {
          v369[1] = v369[0];
          operator delete(v369[0]);
        }
        if ((void)v367)
        {
          *((void *)&v367 + 1) = v367;
          operator delete((void *)v367);
        }
        goto LABEL_256;
      }
      *(_OWORD *)v375 = *(_OWORD *)v365;
      *(_OWORD *)&v375[16] = *(_OWORD *)&v365[16];
      v376[0] = *(_OWORD *)v366;
      *(_OWORD *)((char *)v376 + 12) = *(_OWORD *)&v366[12];
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      *(_OWORD *)long long v377 = v367;
      uint64_t v378 = v368;
      uint64_t v368 = 0;
      long long v367 = 0uLL;
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      long long v379 = *(_OWORD *)v369;
      long long v380 = v369[2];
      memset(v369, 0, sizeof(v369));
      int v381 = v370;
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      long long v382 = v371;
      uint64_t v383 = v372;
      uint64_t v372 = 0;
      long long v371 = 0uLL;
      long long v384 = v373;
      if (!v374) {
        goto LABEL_250;
      }
LABEL_256:
      if (v320)
      {
        char v321 = v320;
        operator delete(v320);
      }
      if (*((void *)&v317 + 1))
      {
        *(void *)&long long v318 = *((void *)&v317 + 1);
        operator delete(*((void **)&v317 + 1));
      }
      if ((void)v316)
      {
        *((void *)&v316 + 1) = v316;
        operator delete((void *)v316);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v327;
        if ((unint64_t)v327 >= v328) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v329 = 1;
      unsigned int v187 = v18[3];
      unsigned int v188 = v18[7];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v309);
      *(_DWORD *)long long v365 = 0;
      *(_DWORD *)&v365[4] = v187;
      *(void *)&v365[12] = v189;
      *(void *)&v365[20] = v190;
      *(_DWORD *)&v365[8] = v188;
      int v374 = 1;
      if (v385)
      {
        if (v385 == 1)
        {
          *(_OWORD *)v375 = *(_OWORD *)v365;
          *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)v375 = *(_OWORD *)v365;
        *(_OWORD *)&v375[12] = *(_OWORD *)&v365[12];
        int v385 = 1;
        goto LABEL_281;
      }
      if ((void)v382)
      {
        *((void *)&v382 + 1) = v382;
        operator delete((void *)v382);
      }
      if ((void)v379)
      {
        *((void *)&v379 + 1) = v379;
        operator delete((void *)v379);
      }
      if (v377[0])
      {
        v377[1] = v377[0];
        operator delete(v377[0]);
      }
      if (v374)
      {
        if (v374 == 1) {
          goto LABEL_280;
        }
        int v385 = v374;
      }
      else
      {
        sub_9F6FA0((uint64_t)v375, (long long *)v365);
        int v385 = v374;
        if (!v374)
        {
          if ((void)v371)
          {
            *((void *)&v371 + 1) = v371;
            operator delete((void *)v371);
          }
          if (v369[0])
          {
            v369[1] = v369[0];
            operator delete(v369[0]);
          }
          if ((void)v367)
          {
            *((void *)&v367 + 1) = v367;
            operator delete((void *)v367);
          }
        }
      }
LABEL_281:
      unsigned int v309 = *v18;
      uint64_t v184 = (uint64_t)v327;
      if ((unint64_t)v327 >= v328)
      {
LABEL_282:
        char v327 = (char *)sub_A4CBF4((uint64_t *)&v326, (uint64_t)v375);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v385;
      if (v385 == 1)
      {
        long long v222 = *(_OWORD *)v375;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v375[12];
        *(_OWORD *)uint64_t v184 = v222;
        char v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v385) {
          sub_9F6FA0(v184, (long long *)v375);
        }
        char v327 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v358 + 1);
        if (*((void *)&v358 + 1) >= (unint64_t)v359)
        {
LABEL_268:
          uint8x8_t v186 = sub_A4CECC((void ***)&v358, (uint64_t)&v326);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      uint64_t v191 = (char *)v326;
      uint64_t v192 = v327;
      int64_t v193 = v327 - (unsigned char *)v326;
      if (v327 != v326)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        unsigned int v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v306;
        do
        {
          unint64_t v198 = (long long *)&v195[v196];
          uint64_t v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *unint64_t v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v329;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      int v202 = v330;
      uint64_t v203 = v331 - (unsigned char *)v330;
      if (v331 != v330)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        int v204 = (char *)operator new(v331 - (unsigned char *)v330);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        unsigned int v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v333;
      *(void *)(v185 + 63) = *(void *)&v333[7];
      *(void *)(v185 + 56) = v206;
      uint8x8_t v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v358 + 1) = v186;
      unint64_t v207 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 1;
      unsigned int v208 = v18[5];
      uint64_t v209 = (char *)a1[13];
      uint64_t v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v308 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v309 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          long long v223 = &v210[8 * v213];
          a1[14] = v223;
          long long v224 = v305;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_435:
          }
            sub_188D718();
          uint64_t v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            long long v224 = v305;
            a1 = v306;
            long long v223 = &v217[8 * v211 + v218];
            v306[13] = &v217[8 * v211];
            v306[14] = v223;
            v306[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              unint64_t v220 = &v217[8 * v211];
              unint64_t v221 = v220;
              a1 = v306;
              goto LABEL_327;
            }
            unint64_t v220 = &v217[8 * v211];
            unint64_t v221 = v220;
            a1 = v306;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_445;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v227 = &v210[-v226];
            unint64_t v221 = &v220[-v226];
            uint64_t v228 = &v217[8 * v211 - 16];
            BOOL v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)uint64_t v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            uint64_t v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_445:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            uint64_t v210 = v209;
            long long v224 = v305;
            long long v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              long long v223 = (char *)a1[14];
            }
          }
        }
        uint64_t v209 = (char *)*v224;
        uint64_t v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        uint64_t v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v304 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_435;
        }
        int v249 = (char *)operator new(8 * v247);
      }
      else
      {
        int v249 = 0;
      }
      size_t v251 = 8 * v244;
      unint64_t v252 = &v249[8 * v246];
      size_t v303 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          unint64_t v254 = v210;
          long long v255 = &v249[8 * v246];
          a1 = v306;
          size_t v256 = v303;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v254 = &v210[-v259];
        long long v255 = &v252[-v259];
        unsigned int v260 = &v249[8 * v246 - 16];
        unsigned int v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v306;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)unsigned int v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v303;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        uint64_t v210 = (char *)*v305;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v304];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v306;
      v306[13] = v252;
      v306[14] = &v252[v303];
      v306[15] = &v249[8 * v304];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v385)
      {
        if ((void)v382)
        {
          *((void *)&v382 + 1) = v382;
          operator delete((void *)v382);
        }
        if ((void)v379)
        {
          *((void *)&v379 + 1) = v379;
          operator delete((void *)v379);
        }
        if (v377[0])
        {
          v377[1] = v377[0];
          operator delete(v377[0]);
        }
      }
      if (v330)
      {
        uint64_t v331 = v330;
        operator delete(v330);
      }
      int v238 = (char *)v326;
      if (v326)
      {
        int v239 = v327;
        uint64_t v19 = v326;
        if (v327 != v326)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              int v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              int v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              unsigned int v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v326;
        }
        char v327 = v238;
        operator delete(v19);
      }
      --v308;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v306;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      uint64_t v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v296, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_ABD43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    double v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      unint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            uint64_t v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        unint64_t v79 = a61;
      }
      operator delete(v79);
      int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_ABD9E4(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_ABDBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_ABDBDC(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v20 = 0x1FFFFFFFELL;
    int v5 = sub_A3B520(v4, &v20);
    int v21 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 10 * v2;
    char v17 = 0;
    uint64_t v18 = -1;
    int v19 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_AAD3F8((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_AC0A74(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_AC0828((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 2147483646)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_AC0828((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 2147483646)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v21);
  }
}

double sub_ABDD40(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v36);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v33 = *(unsigned int **)(a1 + 216);
  if (v4 != v33)
  {
    int v5 = (void **)(a1 + 104);
    int v31 = a2 + 2;
    int v32 = a2 + 1;
    int v30 = ~a2;
    while (1)
    {
      unsigned int v35 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v35);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v34 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 30;
LABEL_17:
      sub_A86790(v5, 0);
      sub_AC0F04(v5, v32 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v35, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) == v15)
      {
        sub_D2BFC(v5, 1uLL);
        int v15 = *(unsigned int **)(a1 + 104);
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
        if (*(unsigned int **)(a1 + 112) == v15)
        {
          sub_D2BFC(v5, 1uLL);
          uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
          unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
          if (v18 == (unsigned int *)v19) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
      }
      uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_21;
      }
      do
      {
LABEL_20:
        unsigned int *v18 = v35;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        _OWORD v18[4] = -1;
        v18[7] = v20 + v11;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_21:
      uint64_t v21 = v35;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_23;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_23:
          if (*v24 > (unint64_t)v35)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + v30;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 2147483646;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_AC0828((void **)(a1 + 104), 0, v31 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v35);
      }
      uint64_t v4 = v34 + 1;
      if (v34 + 1 == v33) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v36) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_ABE04C(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v247);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  uint64_t v230 = *(unsigned int **)(a1 + 216);
  if (v4 != v230)
  {
    int v235 = a2 + 2;
    int v236 = a2 + 1;
    int v233 = ~a2;
    uint64_t v234 = (uint64_t *)(a1 + 232);
    BOOL v229 = (void **)(a1 + 256);
    int v240 = (void **)(a1 + 104);
    while (1)
    {
      uint64_t v232 = v4;
      unsigned int v237 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A19FA8((uint64_t)&v241, *(void *)(a1 + 24), *v5);
      unint64_t v6 = v242;
      BOOL v7 = &v243;
      if (v246) {
        BOOL v7 = v245;
      }
      if ((unint64_t)v242 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v232 + 1;
      if (v232 + 1 == v230) {
        goto LABEL_309;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v6, 32);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      unsigned int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_59;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v44) & v13;
        unint64_t v45 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v45;
        unsigned int v21 = v45[1];
        ++v44;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_59;
        }
      }
LABEL_56:
      if (v19 != -1)
      {
        uint64_t v47 = v16 + 12 * v19;
        unint64_t v42 = (void **)(a1 + 104);
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
        goto LABEL_80;
      }
      uint64_t v24 = -1;
      if (!sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_60:
        uint64_t v50 = *(void *)(v12 + 40);
        uint64_t v49 = *(void *)(v12 + 48);
        unint64_t v42 = (void **)(a1 + 104);
        if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
          goto LABEL_314;
        }
        uint64_t v29 = *(void *)(v12 + 80);
        if (v50
          && ((unsigned int v51 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v51[1])
            ? (BOOL v52 = *(_DWORD *)(v12 + 32) == *v51)
            : (BOOL v52 = 0),
              v52))
        {
          *(void *)(v12 + 40) = v50 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v49 + 1;
        }
        uint64_t v53 = 3 * v24;
LABEL_79:
        uint64_t v56 = 4 * v53;
        uint64_t v57 = v29 + v56;
        *(void *)uint64_t v57 = v11;
        *(_DWORD *)(v57 + 8) = -1;
        uint64_t v47 = *(void *)(v12 + 80) + v56;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
LABEL_80:
        int v58 = *(_DWORD *)(v12 + 112);
        *(_DWORD *)(v12 + 112) = v58 + 1;
        *(_DWORD *)(v47 + 8) = v58;
        uint64_t v60 = *(char **)(v12 + 96);
        unint64_t v59 = *(void *)(v12 + 104);
        if ((unint64_t)v60 < v59)
        {
          *(void *)uint64_t v60 = v11;
          uint64_t v61 = (uint64_t)(v60 + 8);
LABEL_98:
          *(void *)(v12 + 96) = v61;
          unsigned int v48 = *(_DWORD *)(v47 + 8);
          goto LABEL_99;
        }
        int v62 = (char **)(v12 + 88);
        uint64_t v63 = *(char **)(v12 + 88);
        uint64_t v64 = (v60 - v63) >> 3;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v66 = v59 - (void)v63;
        if (v66 >> 2 > v65) {
          unint64_t v65 = v66 >> 2;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v238 = v65;
        if (v65)
        {
          if (v65 >> 61) {
            goto LABEL_313;
          }
          uint64_t v67 = (char *)operator new(8 * v65);
          int v62 = (char **)(v12 + 88);
          double v68 = &v67[8 * v64];
          *(void *)double v68 = v11;
          uint64_t v61 = (uint64_t)(v68 + 8);
          if (v60 != v63) {
            goto LABEL_90;
          }
LABEL_140:
          unint64_t v42 = (void **)(a1 + 104);
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v238];
          if (!v60) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v67 = 0;
          double v68 = (char *)(8 * v64);
          *(void *)(8 * v64) = v11;
          uint64_t v61 = 8 * v64 + 8;
          if (v60 == v63) {
            goto LABEL_140;
          }
LABEL_90:
          unint64_t v69 = v60 - 8 - v63;
          if (v69 < 0x58) {
            goto LABEL_319;
          }
          if ((unint64_t)(v63 - v67) < 0x20) {
            goto LABEL_319;
          }
          uint64_t v70 = (v69 >> 3) + 1;
          uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          int v72 = &v60[-v71];
          v68 -= v71;
          uint64_t v73 = &v67[8 * v64 - 16];
          uint64_t v74 = (long long *)(v60 - 16);
          uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v76 = *v74;
            *((_OWORD *)v73 - 1) = *(v74 - 1);
            *(_OWORD *)uint64_t v73 = v76;
            v73 -= 32;
            v74 -= 2;
            v75 -= 4;
          }
          while (v75);
          uint64_t v60 = v72;
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_319:
            do
            {
              uint64_t v77 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v68 - 1) = v77;
              v68 -= 8;
            }
            while (v60 != v63);
          }
          uint64_t v60 = *v62;
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v238];
          unint64_t v42 = (void **)(a1 + 104);
          if (!v60) {
            goto LABEL_98;
          }
        }
        operator delete(v60);
        goto LABEL_98;
      }
LABEL_31:
      uint64_t v28 = *(void *)(v12 + 56) - 1;
      uint64_t v29 = *(void *)(v12 + 80);
      int v31 = *(_DWORD *)(v12 + 64);
      int v30 = *(_DWORD *)(v12 + 68);
      uint64_t v32 = v28 & v15;
      uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
      unsigned int v35 = *v33;
      unsigned int v34 = v33[1];
      uint64_t v36 = *(void *)(v12 + 40);
      if (v30 == v34 && v31 == v35)
      {
        unint64_t v42 = (void **)(a1 + 104);
LABEL_48:
        uint64_t v38 = v32;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555) {
          goto LABEL_314;
        }
        goto LABEL_71;
      }
      if (v36)
      {
        uint64_t v38 = -1;
        uint64_t v39 = 1;
        do
        {
          if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
          {
            if (v38 == -1) {
              uint64_t v38 = v32;
            }
          }
          else if (__PAIR64__(v34, v35) == v11)
          {
            goto LABEL_134;
          }
          uint64_t v32 = (v32 + v39) & v28;
          uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
          unsigned int v35 = *v40;
          unsigned int v34 = v40[1];
          ++v39;
        }
        while (v30 != v34 || v31 != v35);
        unint64_t v42 = (void **)(a1 + 104);
        if (v38 != -1)
        {
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 - v36 >= 0x1555555555555555) {
            goto LABEL_314;
          }
          goto LABEL_71;
        }
        goto LABEL_48;
      }
      uint64_t v104 = 1;
      while (__PAIR64__(v34, v35) != v11)
      {
        uint64_t v32 = (v32 + v104) & v28;
        int v105 = (unsigned int *)(v29 + 12 * v32);
        unsigned int v35 = *v105;
        unsigned int v34 = v105[1];
        ++v104;
        if (v30 == v34 && v31 == v35)
        {
          uint64_t v36 = 0;
          unint64_t v42 = (void **)(a1 + 104);
          uint64_t v38 = v32;
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 >= 0x1555555555555555) {
            goto LABEL_314;
          }
          goto LABEL_71;
        }
      }
LABEL_134:
      unint64_t v42 = (void **)(a1 + 104);
      if (v32 == -1)
      {
        uint64_t v38 = -1;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555)
        {
LABEL_314:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
LABEL_71:
        if (v36
          && ((uint64_t v54 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v54[1])
            ? (BOOL v55 = *(_DWORD *)(v12 + 32) == *v54)
            : (BOOL v55 = 0),
              v55))
        {
          *(void *)(v12 + 40) = v36 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v43 + 1;
        }
        uint64_t v53 = 3 * v38;
        goto LABEL_79;
      }
      uint64_t v47 = v29 + 12 * v32;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 == -1) {
        goto LABEL_80;
      }
LABEL_99:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v239 = v48;
      if (v237 == v48) {
        goto LABEL_253;
      }
      unint64_t v79 = *(unsigned int **)(a1 + 104);
      uint64_t v78 = *(unsigned int **)(a1 + 112);
      uint64_t v80 = (char *)v78 - (char *)v79;
      if (v78 == v79)
      {
        uint64_t v84 = v80 >> 3;
        unint64_t v85 = 1 - (v80 >> 3);
        uint64_t v86 = *(void *)(a1 + 120);
        if (v85 <= (v86 - (uint64_t)v78) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v85);
          uint64_t v93 = (char *)&v78[2 * v85];
          *(void *)(a1 + 112) = v93;
        }
        else
        {
          uint64_t v87 = v86 - (void)v79;
          uint64_t v88 = v87 >> 2;
          if ((unint64_t)(v87 >> 2) <= 1) {
            uint64_t v88 = 1;
          }
          BOOL v224 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v224) {
            unint64_t v89 = v88;
          }
          if (v89 >> 61) {
LABEL_313:
          }
            sub_188D718();
          uint64_t v90 = 8 * v89;
          uint64_t v91 = (char *)operator new(8 * v89);
          unint64_t v92 = &v91[8 * v84];
          bzero(v92, 8 * v85);
          *(void *)(a1 + 104) = v92;
          *(void *)(a1 + 112) = &v92[8 * v85];
          *(void *)(a1 + 120) = &v91[v90];
          if (v78)
          {
            operator delete(v78);
            uint64_t v93 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v93 = &v92[8 * v85];
          }
        }
        unint64_t v42 = (void **)(a1 + 104);
        unint64_t v79 = (unsigned int *)*v240;
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *(unsigned int *)*v240;
        if (*v240 == v93)
        {
          BOOL v83 = *(char **)(a1 + 120);
          if (v83 != v93)
          {
            *(void *)uint64_t v93 = 0;
            *(void *)(a1 + 112) = v93 + 8;
LABEL_127:
            unint64_t v79 = *(unsigned int **)(a1 + 104);
            uint64_t v103 = *(void *)(a1 + 128);
            goto LABEL_147;
          }
          uint64_t v94 = 1;
          uint64_t v95 = v83 - (char *)v79;
          if ((unint64_t)(v95 >> 2) > 1) {
            uint64_t v94 = v95 >> 2;
          }
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v96 = v94;
          }
          if (v96)
          {
            if (v96 >> 61) {
              goto LABEL_313;
            }
            unsigned int v97 = (char *)operator new(8 * v96);
            unint64_t v98 = v97;
            *(void *)unsigned int v97 = 0;
            uint64_t v99 = (uint64_t)(v97 + 8);
            if (v93 != (char *)v79)
            {
LABEL_121:
              unint64_t v100 = v93 - 8 - (char *)v79;
              if (v100 < 0x58 || (unint64_t)(v93 - v97) < 0x20)
              {
                unint64_t v101 = (unsigned int *)v93;
                goto LABEL_124;
              }
              uint64_t v201 = (v100 >> 3) + 1;
              uint64_t v202 = 8 * (v201 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v101 = (unsigned int *)&v93[-v202];
              v98 -= v202;
              uint64_t v203 = v97 - 16;
              int v204 = v93 - 16;
              uint64_t v205 = v201 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v206 = *(_OWORD *)v204;
                *((_OWORD *)v203 - 1) = *((_OWORD *)v204 - 1);
                *(_OWORD *)uint64_t v203 = v206;
                v203 -= 32;
                v204 -= 32;
                v205 -= 4;
              }
              while (v205);
              if (v201 != (v201 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_124:
                  uint64_t v102 = *((void *)v101 - 1);
                  v101 -= 2;
                  *((void *)v98 - 1) = v102;
                  v98 -= 8;
                }
                while (v101 != v79);
              }
              uint64_t v93 = (char *)*v240;
              *(void *)(a1 + 104) = v98;
              *(void *)(a1 + 112) = v99;
              *(void *)(a1 + 120) = &v97[8 * v96];
              if (!v93) {
                goto LABEL_127;
              }
LABEL_126:
              operator delete(v93);
              goto LABEL_127;
            }
          }
          else
          {
            unsigned int v97 = 0;
            unint64_t v98 = 0;
            *(void *)&def_332C = 0;
            uint64_t v99 = 8;
            if (v93 != (char *)v79) {
              goto LABEL_121;
            }
          }
          *(void *)(a1 + 104) = v98;
          *(void *)(a1 + 112) = v99;
          *(void *)(a1 + 120) = &v97[8 * v96];
          if (!v93) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *v79;
      }
      uint64_t v103 = v81;
LABEL_147:
      sub_A86AC4(v42, 0, (char *)(v81 + (v82 << 6)), (char *)(v103 + ((unint64_t)v79[1] << 6)));
      unint64_t v107 = v236 + *(_DWORD *)(a1 + 96) * (v237 + 1);
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v109 = *(unsigned int **)(a1 + 112);
      if (v107 >= ((char *)v109 - (char *)v108) >> 3) {
        goto LABEL_200;
      }
      unsigned int v110 = v108[2 * v107];
      unsigned int v111 = v108[2 * v107 + 1];
      unsigned int v112 = v111 - v110;
      if (v111 == v110) {
        goto LABEL_200;
      }
      unsigned __int16 v113 = 0;
      unsigned int v114 = 0;
LABEL_150:
      while (2)
      {
        uint64_t v115 = *(unsigned int **)(a1 + 104);
        if (v107 >= (uint64_t)(*(void *)(a1 + 112) - (void)v115) >> 3
          || (unsigned int v116 = v115[2 * v107], v115[2 * v107 + 1] - v116 <= v114))
        {
          uint64_t v227 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v227, "key does not exist and cannot be added");
          goto LABEL_312;
        }
        unint64_t v117 = v116 + v114;
        uint64_t v118 = *(void *)(a1 + 128);
        if (v117 >= (*(void *)(a1 + 136) - v118) >> 6)
        {
          uint64_t v227 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v227, "index out of range");
LABEL_312:
        }
        uint64_t v119 = (long long *)(v118 + (v117 << 6));
        long long v120 = *v119;
        long long v121 = v119[1];
        long long v122 = v119[3];
        long long v250 = v119[2];
        long long v251 = v122;
        long long v248 = v120;
        long long v249 = v121;
        uint64_t v124 = *v115;
        uint64_t v123 = v115[1];
        if (v123 != v124)
        {
          uint64_t v125 = 0;
          int v128 = v251;
          uint64_t v129 = v124 << 6;
          unint64_t v130 = (unsigned __int8 *)(v118 + v129 + 48);
          uint64_t v131 = (v123 << 6) - v129;
          while (1)
          {
            int v132 = *((_DWORD *)v130 - 5);
            if (v132 != 0x7FFFFFFF)
            {
              if (v132 <= SHIDWORD(v249) && *((_DWORD *)v130 - 4) <= (int)v250)
              {
                unsigned int v133 = *((_DWORD *)v130 - 3);
                if (v133 <= DWORD1(v250)
                  && *((_DWORD *)v130 - 2) <= DWORD2(v250)
                  && (v133 != DWORD1(v250)
                   || v132 != HIDWORD(v249)
                   || 10 * v132 - *((_DWORD *)v130 - 1) <= 10 * HIDWORD(v249) - HIDWORD(v250))
                  && (*v130 & ~v251) == 0)
                {
                  unint64_t v127 = v113 & 0xFF00 | (unint64_t)(v125 << 8);
                  unsigned __int16 v113 = v113 & 0xFF00 | ((_WORD)v125 << 8);
                  if (++v114 == v112) {
                    goto LABEL_178;
                  }
                  goto LABEL_150;
                }
              }
              if (SHIDWORD(v249) <= v132 && (int)v250 <= *((_DWORD *)v130 - 4))
              {
                unsigned int v134 = *((_DWORD *)v130 - 3);
                if (DWORD1(v250) <= v134
                  && DWORD2(v250) <= *((_DWORD *)v130 - 2)
                  && (DWORD1(v250) != v134
                   || HIDWORD(v249) != v132
                   || 10 * HIDWORD(v249) - HIDWORD(v250) <= 10 * v132 - *((_DWORD *)v130 - 1))
                  && (v128 & ~*v130) == 0)
                {
                  *((_DWORD *)v130 - 5) = 0x7FFFFFFF;
                  uint64_t v125 = 1;
                }
              }
            }
            v130 += 64;
            v131 -= 64;
            if (!v131) {
              goto LABEL_155;
            }
          }
        }
        uint64_t v125 = 0;
LABEL_155:
        unint64_t v126 = sub_AAD3F8((char **)v42, 0, &v248);
        *(void *)(v126 + 52) = -1;
        *((_DWORD *)v126 + 15) = 0x7FFFFFFF;
        unint64_t v127 = v113 & 0xFF00 | (unint64_t)(v125 << 8);
        unsigned __int16 v113 = v127 | 1;
        if (++v114 != v112) {
          continue;
        }
        break;
      }
LABEL_178:
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v109 = *(unsigned int **)(a1 + 112);
      if (v127)
      {
        if (v109 != v108)
        {
          uint64_t v135 = *(void *)(a1 + 128);
          uint64_t v136 = *v108;
          goto LABEL_181;
        }
        sub_D2BFC(v42, 1uLL);
        long long v108 = *(unsigned int **)(a1 + 104);
        uint64_t v135 = *(void *)(a1 + 128);
        uint64_t v136 = *v108;
        if (*(unsigned int **)(a1 + 112) == v108)
        {
          sub_D2BFC(v240, 1uLL);
          long long v108 = *(unsigned int **)(a1 + 104);
          unint64_t v137 = v135 + (v136 << 6);
          unint64_t v138 = *(void *)(a1 + 128) + ((unint64_t)v108[1] << 6);
          if (v137 == v138)
          {
LABEL_194:
            uint64_t v139 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v108) {
              goto LABEL_195;
            }
            goto LABEL_199;
          }
        }
        else
        {
LABEL_181:
          unint64_t v137 = v135 + (v136 << 6);
          unint64_t v138 = v135 + ((unint64_t)v108[1] << 6);
          if (v137 == v138) {
            goto LABEL_194;
          }
        }
        uint64_t v139 = (void **)(a1 + 104);
        while (*(_DWORD *)(v137 + 28) != 0x7FFFFFFF)
        {
          v137 += 64;
          if (v137 == v138)
          {
            unint64_t v137 = v138;
            if (*(unsigned int **)(a1 + 112) != v108) {
              goto LABEL_199;
            }
            goto LABEL_195;
          }
        }
        if (v137 == v138 || (unint64_t v140 = v137 + 64, v137 + 64 == v138))
        {
          if (*(unsigned int **)(a1 + 112) == v108) {
            goto LABEL_195;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v140 + 28) != 0x7FFFFFFF)
            {
              long long v146 = *(_OWORD *)v140;
              long long v147 = *(_OWORD *)(v140 + 16);
              long long v148 = *(_OWORD *)(v140 + 48);
              *(_OWORD *)(v137 + 32) = *(_OWORD *)(v140 + 32);
              *(_OWORD *)(v137 + 48) = v148;
              *(_OWORD *)unint64_t v137 = v146;
              *(_OWORD *)(v137 + 16) = v147;
              v137 += 64;
            }
            v140 += 64;
          }
          while (v140 != v138);
          long long v108 = (unsigned int *)*v240;
          if (*(void **)(a1 + 112) != *v240) {
            goto LABEL_199;
          }
LABEL_195:
          sub_D2BFC(v139, 1uLL);
          long long v108 = (unsigned int *)*v139;
        }
LABEL_199:
        sub_A86AC4(v139, 0, (char *)v137, (char *)(*(void *)(a1 + 128) + ((unint64_t)v108[1] << 6)));
        long long v108 = *(unsigned int **)(a1 + 104);
        uint64_t v109 = *(unsigned int **)(a1 + 112);
      }
LABEL_200:
      uint64_t v141 = (char *)v109 - (char *)v108;
      if (v109 != v108)
      {
        unsigned int v142 = v237;
        uint64_t v143 = *(void *)(a1 + 128);
        uint64_t v144 = *v108;
LABEL_217:
        uint64_t v159 = v143;
        goto LABEL_233;
      }
      uint64_t v149 = v141 >> 3;
      unint64_t v150 = 1 - (v141 >> 3);
      uint64_t v151 = *(void *)(a1 + 120);
      unsigned int v142 = v237;
      if (v150 <= (v151 - (uint64_t)v109) >> 3)
      {
        bzero(v108, 8 * v150);
        int v158 = &v108[2 * v150];
        *(void *)(a1 + 112) = v158;
      }
      else
      {
        uint64_t v152 = v151 - (void)v108;
        uint64_t v153 = v152 >> 2;
        if ((unint64_t)(v152 >> 2) <= 1) {
          uint64_t v153 = 1;
        }
        BOOL v224 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v224) {
          unint64_t v154 = v153;
        }
        if (v154 >> 61) {
          goto LABEL_313;
        }
        uint64_t v155 = 8 * v154;
        uint64_t v156 = (char *)operator new(8 * v154);
        unsigned int v157 = &v156[8 * v149];
        bzero(v157, 8 * v150);
        int v158 = (unsigned int *)&v157[8 * v150];
        *(void *)(a1 + 104) = v157;
        *(void *)(a1 + 112) = v158;
        *(void *)(a1 + 120) = &v156[v155];
        if (v108)
        {
          operator delete(v108);
          int v158 = *(unsigned int **)(a1 + 112);
        }
      }
      long long v108 = (unsigned int *)*v240;
      uint64_t v143 = *(void *)(a1 + 128);
      uint64_t v144 = *(unsigned int *)*v240;
      if (*v240 != v158) {
        goto LABEL_217;
      }
      uint64_t v145 = *(unsigned int **)(a1 + 120);
      if (v145 != v158)
      {
        *(void *)int v158 = 0;
        *(void *)(a1 + 112) = v158 + 2;
        goto LABEL_232;
      }
      uint64_t v160 = 1;
      uint64_t v161 = (char *)v145 - (char *)v108;
      if ((unint64_t)(v161 >> 2) > 1) {
        uint64_t v160 = v161 >> 2;
      }
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v162 = v160;
      }
      if (v162)
      {
        if (v162 >> 61) {
          goto LABEL_313;
        }
        uint64_t v163 = (char *)operator new(8 * v162);
        uint64_t v164 = v163;
        *(void *)uint64_t v163 = 0;
        uint64_t v165 = (uint64_t)(v163 + 8);
        if (v158 == v108)
        {
LABEL_269:
          unsigned int v142 = v237;
          *(void *)(a1 + 104) = v164;
          *(void *)(a1 + 112) = v165;
          *(void *)(a1 + 120) = &v163[8 * v162];
          if (!v158) {
            goto LABEL_232;
          }
LABEL_231:
          operator delete(v158);
          goto LABEL_232;
        }
      }
      else
      {
        uint64_t v163 = 0;
        uint64_t v164 = 0;
        *(void *)&def_332C = 0;
        uint64_t v165 = 8;
        if (v158 == v108) {
          goto LABEL_269;
        }
      }
      unint64_t v166 = (char *)(v158 - 2) - (char *)v108;
      if (v166 < 0x58 || (unint64_t)((char *)v158 - v163) < 0x20)
      {
        uint64_t v167 = v158;
        unsigned int v142 = v237;
        do
        {
LABEL_229:
          uint64_t v168 = *((void *)v167 - 1);
          v167 -= 2;
          *((void *)v164 - 1) = v168;
          v164 -= 8;
        }
        while (v167 != v108);
        goto LABEL_230;
      }
      uint64_t v207 = (v166 >> 3) + 1;
      uint64_t v208 = 8 * (v207 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v167 = &v158[v208 / 0xFFFFFFFFFFFFFFFCLL];
      v164 -= v208;
      uint64_t v209 = v163 - 16;
      uint64_t v210 = v158 - 4;
      uint64_t v211 = v207 & 0x3FFFFFFFFFFFFFFCLL;
      unsigned int v142 = v237;
      do
      {
        long long v212 = *(_OWORD *)v210;
        *((_OWORD *)v209 - 1) = *((_OWORD *)v210 - 1);
        *(_OWORD *)uint64_t v209 = v212;
        v209 -= 32;
        v210 -= 8;
        v211 -= 4;
      }
      while (v211);
      if (v207 != (v207 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_229;
      }
LABEL_230:
      int v158 = (unsigned int *)*v240;
      *(void *)(a1 + 104) = v164;
      *(void *)(a1 + 112) = v165;
      *(void *)(a1 + 120) = &v163[8 * v162];
      if (v158) {
        goto LABEL_231;
      }
LABEL_232:
      long long v108 = *(unsigned int **)(a1 + 104);
      uint64_t v159 = *(void *)(a1 + 128);
LABEL_233:
      uint64_t v169 = v143 + (v144 << 6);
      uint64_t v170 = v159 + ((unint64_t)v108[1] << 6);
      if (v169 != v170)
      {
        uint64_t v171 = v242;
        do
        {
          *(_DWORD *)uint64_t v169 = v142;
          *(_DWORD *)(v169 + 16) = -1;
          int32x2_t v172 = *(int32x2_t *)(v169 + 28);
          *(_DWORD *)(v169 + 12) = v172.i32[0];
          int v173 = *((_DWORD *)v171 + 2);
          int v174 = v173 / 10;
          int v175 = v173 % 10;
          if (v173 < 0) {
            char v176 = -5;
          }
          else {
            char v176 = 5;
          }
          *(int32x2_t *)(v169 + 28) = vadd_s32(vdup_n_s32(v174+ (((103 * (char)(v176 + v175)) >> 15) & 1)+ ((103 * (char)(v176 + v175)) >> 10)), v172);
          v169 += 64;
        }
        while (v169 != v170);
      }
      int v177 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v178 = v177 + v177 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v179 = v239;
        uint64_t v180 = *(unint64_t **)(a1 + 48);
        if (!v180) {
          goto LABEL_248;
        }
      }
      else
      {
        unsigned int v178 = -1;
        unint64_t v179 = v239;
        uint64_t v180 = *(unint64_t **)(a1 + 48);
        if (!v180)
        {
LABEL_248:
          int v184 = 2147483646;
          goto LABEL_249;
        }
      }
      if (*v180 > v179)
      {
        unsigned int v181 = 0;
        unsigned int v182 = *(_DWORD *)(a1 + 100) + v233;
        unsigned int v183 = v182;
        while (v181 <= v182)
        {
          int v184 = *(_DWORD *)sub_A3F53C(v180 + 2, v180[1] * v179 + v183);
          v181 += 2;
          v183 -= 2;
          if (v184 != 0x7FFFFFFF) {
            goto LABEL_249;
          }
        }
      }
      int v184 = 0x7FFFFFFF;
LABEL_249:
      unint64_t v185 = v239 + 1;
      if (!sub_AC0828(v240, 0, v235 + v177 * v185, v177 * v185 + 1, v178, v184)) {
        goto LABEL_253;
      }
      if (*(void *)(a1 + 240) <= v179) {
        sub_A3E96C((uint64_t)v234, v185, 0);
      }
      uint64_t v186 = *v234;
      unint64_t v187 = v179 >> 6;
      uint64_t v188 = 1 << v179;
      if ((*(void *)(*v234 + 8 * (v179 >> 6)) & (1 << v179)) != 0)
      {
LABEL_253:
        unint64_t v9 = (unint64_t)v243;
        unint64_t v6 = (void *)((char *)v242 + 12);
        unsigned int v242 = v6;
        if (v6 != v243) {
          goto LABEL_254;
        }
        goto LABEL_289;
      }
      uint64_t v190 = *(char **)(a1 + 264);
      unint64_t v189 = *(void *)(a1 + 272);
      if ((unint64_t)v190 < v189)
      {
        *(_DWORD *)uint64_t v190 = v239;
        uint64_t v191 = (uint64_t)(v190 + 4);
        goto LABEL_288;
      }
      uint64_t v192 = (char *)*v229;
      uint64_t v193 = v190 - (unsigned char *)*v229;
      uint64_t v194 = v193 >> 2;
      unint64_t v195 = (v193 >> 2) + 1;
      if (v195 >> 62) {
        sub_2E00();
      }
      uint64_t v196 = v189 - (void)v192;
      if (v196 >> 1 > v195) {
        unint64_t v195 = v196 >> 1;
      }
      if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v195 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v231 = v195;
      if (v195)
      {
        if (v195 >> 62) {
          goto LABEL_313;
        }
        long long v197 = operator new(4 * v195);
        unint64_t v198 = (unsigned int *)&v197[4 * v194];
        *unint64_t v198 = v239;
        uint64_t v191 = (uint64_t)(v198 + 1);
        if (v190 != v192)
        {
LABEL_266:
          unint64_t v199 = v190 - 4 - v192;
          unint64_t v200 = v231;
          if (v199 < 0x2C) {
            goto LABEL_320;
          }
          if ((unint64_t)(v190 - &v197[v193]) < 0x20) {
            goto LABEL_320;
          }
          uint64_t v213 = (v199 >> 2) + 1;
          uint64_t v214 = 4 * (v213 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v215 = &v190[-v214];
          unint64_t v198 = (unsigned int *)((char *)v198 - v214);
          unint64_t v216 = &v197[4 * v194 - 16];
          uint64_t v217 = v190 - 16;
          uint64_t v218 = v213 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v219 = *(_OWORD *)v217;
            *(v216 - 1) = *((_OWORD *)v217 - 1);
            *unint64_t v216 = v219;
            v216 -= 2;
            v217 -= 32;
            v218 -= 8;
          }
          while (v218);
          uint64_t v190 = v215;
          if (v213 != (v213 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_320:
            do
            {
              unsigned int v220 = *((_DWORD *)v190 - 1);
              v190 -= 4;
              *--unint64_t v198 = v220;
            }
            while (v190 != v192);
          }
          goto LABEL_286;
        }
      }
      else
      {
        long long v197 = 0;
        unint64_t v198 = (unsigned int *)(4 * v194);
        *(_DWORD *)(4 * v194) = v239;
        uint64_t v191 = 4 * v194 + 4;
        if (v190 != v192) {
          goto LABEL_266;
        }
      }
      unint64_t v200 = v231;
LABEL_286:
      *(void *)(a1 + 256) = v198;
      *(void *)(a1 + 264) = v191;
      *(void *)(a1 + 272) = &v197[4 * v200];
      if (v192)
      {
        uint64_t v221 = v191;
        operator delete(v192);
        uint64_t v191 = v221;
        uint64_t v186 = *v234;
      }
LABEL_288:
      *(void *)(a1 + 264) = v191;
      *(void *)(v186 + 8 * v187) |= v188;
      unint64_t v9 = (unint64_t)v243;
      unint64_t v6 = (void *)((char *)v242 + 12);
      unsigned int v242 = v6;
      if (v6 != v243)
      {
LABEL_254:
        int v8 = v246;
        unint64_t v10 = v245[0];
        if (*(unsigned char *)(v241 + 16)) {
          goto LABEL_290;
        }
        goto LABEL_10;
      }
LABEL_289:
      unint64_t v6 = v244;
      unint64_t v10 = v245[0];
      unsigned int v242 = v244;
      int v8 = 1;
      unsigned __int8 v246 = 1;
      if (*(unsigned char *)(v241 + 16))
      {
LABEL_290:
        if (v8) {
          unint64_t v222 = v10;
        }
        else {
          unint64_t v222 = v9;
        }
        if ((unint64_t)v6 < v222)
        {
          while (1)
          {
            unint64_t v223 = __ROR8__(*v6, 32);
            BOOL v224 = HIDWORD(v223) != 1 || (v223 + 3) >= 2;
            if (!v224) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v241 + 4120)))
            {
              LOBYTE(v8) = v246;
              unint64_t v6 = v242;
              unint64_t v9 = (unint64_t)v243;
              break;
            }
            unint64_t v9 = (unint64_t)v243;
            unint64_t v6 = (void *)((char *)v242 + 12);
            unsigned int v242 = v6;
            if (v6 == v243)
            {
              unint64_t v6 = v244;
              unsigned int v242 = v244;
              LOBYTE(v8) = 1;
              unsigned __int8 v246 = 1;
              if ((unint64_t)v244 >= v245[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v8) = v246;
              uint64_t v225 = &v243;
              if (v246) {
                uint64_t v225 = v245;
              }
              if ((unint64_t)v6 >= *v225) {
                break;
              }
            }
          }
          unint64_t v10 = v245[0];
        }
      }
LABEL_10:
      if ((_BYTE)v8) {
        unint64_t v9 = v10;
      }
      if ((unint64_t)v6 >= v9) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_56;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unsigned int v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_60;
      }
      goto LABEL_31;
    }
LABEL_59:
    uint64_t v24 = v19;
    if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_60;
    }
    goto LABEL_31;
  }
LABEL_309:
  double result = sub_72688((uint64_t)v247) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_ABF3EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ABF400(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ABF414(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ABF428(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ABF43C(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  int v8 = *(unsigned int **)(a1 + 256);
  uint64_t v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  int v204 = (void **)(a1 + 328);
  uint64_t v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    uint64_t v211 = v8;
    unint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      unsigned int v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        unsigned int v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            int v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      uint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        unint64_t v65 = (char **)(v13 + 88);
        uint64_t v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          unint64_t v65 = (char **)(v13 + 88);
          int v72 = &v71[8 * v67];
          *(void *)int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          long long v76 = &v63[-v75];
          v72 -= v75;
          uint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)uint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          uint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          uint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)uint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 4);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      uint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 4);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          unint64_t v200 = operator new(4 * v96);
          long long v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unint64_t v101 = v200;
              goto LABEL_135;
            }
            unint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            int v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            unint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] > v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        uint64_t v168 = v213 + 2;
        uint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          uint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        unint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    unsigned int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      uint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              uint64_t v188 = v213 + 2;
              uint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                uint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              unint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        unint64_t v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)unint64_t v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          uint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] <= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        int v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          uint64_t v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int32x2_t v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          int v173 = &v135[4 * v130 - 16];
          int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          unint64_t v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        uint64_t v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] <= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            uint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              uint64_t v141 = &v202[4 * v112 - 16];
              unsigned int v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          unint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            uint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    int v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_AC0374(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AC0388(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AC039C(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 144);
  uint64_t v27 = *(void *)(a1 + 104);
  uint64_t v25 = *(void *)(a1 + 128);
  uint64_t v23 = *(void *)(a1 + 120);
  uint64_t v24 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 256);
  uint64_t v22 = *(void *)(a1 + 208);
  uint64_t v3 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 280);
  uint64_t v20 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v6 = *(void *)(a1 + 328);
  uint64_t v7 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
  uint64_t v8 = *(void *)(a1 + 344);
  uint64_t v9 = sub_BD6170((void *)(a1 + 360));
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104)
      - *(void *)(*(void *)(a1 + 32) + 88)
      + *(void *)(*(void *)(a1 + 40) + 104)
      + 12 * (*(void *)(*(void *)(a1 + 40) + 56) + *(void *)(*(void *)(a1 + 32) + 56))
      - *(void *)(*(void *)(a1 + 40) + 88);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    uint64_t v10 = v10 + *(void *)(v11 + 32) - *(void *)(v11 + 16);
  }
  unint64_t v32 = v23
      + v26
      - (v27
       + v25)
      + v24
      + v2
      + v20
      - v22
      + v5
      + v3
      + v4
      - (v21
       + v19)
      + v7
      + v8
      - v6
      + sub_A409C0(*(uint64_t **)(a1 + 24))
      + v9
      + v10;
  BOOL v12 = v32 > *(void *)a1;
  if (v32 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v30);
    uint64_t v13 = sub_188FC78(v30, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v14 = (void *)sub_38EC58((uint64_t)v13, (unint64_t *)a1);
    unint64_t v15 = sub_188FC78(v14, (uint64_t)" in directional McSPA (", 23);
    unint64_t v16 = (void *)sub_38EC58((uint64_t)v15, &v32);
    uint64_t v17 = sub_188FC78(v16, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v12;
}

void sub_AC06A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_AC06F4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_AC0F04(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_AC0828(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AC0C80(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_AC0C80(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) <= a6)
      {
        __int16 v22 = sub_AC0A74((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_AC0A74((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      uint64_t v27 = (long long *)sub_AC0C80(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) <= a6)
      {
        if (sub_AC0D58(a1, (uint64_t)&v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_AC0A74((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_AC0A74((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_AC0A74(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    int v9 = (unsigned int *)(*(void *)a1 + 8 * a3);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v11 != v10)
    {
      unsigned __int8 v12 = 0;
      int v16 = *(unsigned __int8 *)(a2 + 48);
      uint64_t v17 = v10 << 6;
      int v18 = (unsigned __int8 *)((v10 << 6) + *(void *)(a1 + 24) + 48);
      uint64_t v19 = (v11 << 6) - v17;
      while (1)
      {
        int v20 = *((_DWORD *)v18 - 5);
        if (v20 != 0x7FFFFFFF)
        {
          int v21 = *(_DWORD *)(a2 + 28);
          if (v20 <= v21 && *((_DWORD *)v18 - 4) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v22 = *(_DWORD *)(a2 + 36);
            unsigned int v23 = *((_DWORD *)v18 - 3);
            if (v23 <= v22
              && *((_DWORD *)v18 - 2) <= *(_DWORD *)(a2 + 40)
              && (v23 != v22 || v20 != v21 || 10 * v20 - *((_DWORD *)v18 - 1) <= 10 * v21 - *(_DWORD *)(a2 + 44))
              && (*v18 & ~*(unsigned __int8 *)(a2 + 48)) == 0)
            {
              return (unint64_t)v12 << 8;
            }
          }
          if (v21 <= v20 && *(_DWORD *)(a2 + 32) <= *((_DWORD *)v18 - 4))
          {
            unsigned int v24 = *((_DWORD *)v18 - 3);
            unsigned int v25 = *(_DWORD *)(a2 + 36);
            if (v25 <= v24
              && *(_DWORD *)(a2 + 40) <= *((_DWORD *)v18 - 2)
              && (v25 != v24 || v21 != v20 || 10 * v21 - *(_DWORD *)(a2 + 44) <= 10 * v20 - *((_DWORD *)v18 - 1))
              && (v16 & ~*v18) == 0)
            {
              *((_DWORD *)v18 - 5) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 64;
        v19 -= 64;
        if (!v19) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  __int16 v13 = sub_AAD3F8((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

uint64_t sub_AC0C80(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3)
    || (uint64_t v4 = (int *)(*a1 + 8 * a2), v3 = *v4, v4[1] - *v4 <= a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "key does not exist and cannot be added");
    goto LABEL_7;
  }
  unint64_t v5 = v3 + a3;
  uint64_t v6 = a1[3];
  if (v5 >= (a1[4] - v6) >> 6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_188D9E0(exception, "index out of range");
LABEL_7:
  }
  return v6 + (v5 << 6);
}

void sub_AC0D30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AC0D44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AC0D58(void **a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      int v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 > v6)
  {
LABEL_7:
    int v14 = &v11[64 * v12];
    unint64_t v15 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
    if (v14 == (char *)v15) {
      return 0;
    }
    goto LABEL_11;
  }
  unint64_t v16 = a3 + 1;
  if (v16 <= v13)
  {
    if (v16 < v13) {
      a1[1] = &v7[8 * v16];
    }
    goto LABEL_7;
  }
  sub_D2BFC(a1, v16 - v13);
  int v14 = &v11[64 * v12];
  unint64_t v15 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
  if (v14 == (char *)v15) {
    return 0;
  }
LABEL_11:
  int v17 = *(_DWORD *)(a2 + 28);
  unsigned int v18 = *(_DWORD *)(a2 + 36);
  while (1)
  {
    int v19 = *((_DWORD *)v14 + 7);
    if (v19 != 0x7FFFFFFF && v19 <= v17 && *((_DWORD *)v14 + 8) <= *(_DWORD *)(a2 + 32))
    {
      unsigned int v21 = *((_DWORD *)v14 + 9);
      if (v21 <= v18
        && *((_DWORD *)v14 + 10) <= *(_DWORD *)(a2 + 40)
        && (v21 != v18 || v19 != v17 || 10 * v19 - *((_DWORD *)v14 + 11) <= 10 * v17 - *(_DWORD *)(a2 + 44))
        && (v14[48] & ~*(unsigned __int8 *)(a2 + 48)) == 0)
      {
        break;
      }
    }
    v14 += 64;
    if (v14 == (char *)v15) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_AC0F04(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_AC0C80(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_AC0A74((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

uint64_t sub_AC0FE8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v302 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v258 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v302);
  unint64_t v270 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v300, *(void *)(v4 + 24), v5);
  __int16 v7 = v300;
  if ((unint64_t)v300 < v301)
  {
    uint64_t v8 = (void **)(v4 + 104);
    uint64_t v268 = v4 + 360;
    unint64_t v269 = (void **)(v4 + 104);
    int v257 = a2 + 2;
    int v255 = ~a2;
    size_t v256 = (uint64_t *)(v4 + 184);
    int v259 = a2 + 1;
    unint64_t v271 = HIDWORD(v5);
    uint64_t v260 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v261 = *(unsigned int *)v7;
      sub_A86790(v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v288, *(void *)(v4 + 24), v270, v258, 0, 1);
      unint64_t v9 = v292;
      BOOL v10 = (unint64_t)v292 < v291 || (unint64_t)v292 >= v293;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v300 + 4;
      long long v300 = v7;
      if ((unint64_t)v7 >= v301) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555) {
            goto LABEL_350;
          }
        }
        else
        {
          uint64_t v65 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v65) & v28;
            uint64_t v66 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v66;
            unsigned int v34 = v66[1];
            ++v65;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v68 = *(void *)(v12 + 48);
          if ((unint64_t)(v68 - v36) >= 0x1555555555555555)
          {
LABEL_350:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((uint64_t v69 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v69[1])
            ? (BOOL v70 = *(_DWORD *)(v12 + 32) == *v69)
            : (BOOL v70 = 0),
              v70))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v64 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v68 + 1;
          uint64_t v64 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v61 = *(void *)(v12 + 40);
      uint64_t v60 = *(void *)(v12 + 48);
      if ((unint64_t)(v60 - v61) >= 0x1555555555555555) {
        goto LABEL_350;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v61
        && ((unint64_t v62 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v62[1])
          ? (BOOL v63 = *(_DWORD *)(v12 + 32) == *v62)
          : (BOOL v63 = 0),
            v63))
      {
        *(void *)(v12 + 40) = v61 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v60 + 1;
      }
      uint64_t v64 = 3 * v24;
LABEL_95:
      uint64_t v71 = 4 * v64;
      uint64_t v72 = v29 + v71;
      *(void *)uint64_t v72 = v11;
      *(_DWORD *)(v72 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v71;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v287 = v46;
        uint64_t result = sub_BD5C18(v268, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v73 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v73 + 1;
      *(_DWORD *)(v45 + 8) = v73;
      uint64_t v75 = *(unint64_t **)(v12 + 96);
      unint64_t v74 = *(void *)(v12 + 104);
      if ((unint64_t)v75 < v74)
      {
        *uint64_t v75 = v11;
        uint64_t v76 = (uint64_t)(v75 + 1);
        goto LABEL_119;
      }
      uint64_t v77 = *(char **)(v12 + 88);
      uint64_t v78 = ((char *)v75 - v77) >> 3;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v80 = v74 - (void)v77;
      if (v80 >> 2 > v79) {
        unint64_t v79 = v80 >> 2;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        if (v81 >> 61) {
          goto LABEL_352;
        }
        unsigned int v82 = (char *)operator new(8 * v81);
        unint64_t v83 = (unint64_t *)&v82[8 * v78];
        unint64_t *v83 = v11;
        uint64_t v76 = (uint64_t)(v83 + 1);
        if (v75 != (unint64_t *)v77)
        {
LABEL_107:
          unint64_t v84 = (char *)(v75 - 1) - v77;
          if (v84 < 0x58)
          {
            uint64_t v4 = v260;
            goto LABEL_116;
          }
          uint64_t v4 = v260;
          if ((unint64_t)(v77 - v82) < 0x20) {
            goto LABEL_358;
          }
          uint64_t v85 = (v84 >> 3) + 1;
          uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v87 = &v75[v86 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v83 = (unint64_t *)((char *)v83 - v86);
          uint64_t v88 = &v82[8 * v78 - 16];
          unint64_t v89 = v75 - 2;
          uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v91 = *(_OWORD *)v89;
            *((_OWORD *)v88 - 1) = *((_OWORD *)v89 - 1);
            *(_OWORD *)uint64_t v88 = v91;
            v88 -= 32;
            v89 -= 4;
            v90 -= 4;
          }
          while (v90);
          uint64_t v75 = v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_358:
            do
            {
LABEL_116:
              unint64_t v92 = *--v75;
              *--unint64_t v83 = v92;
            }
            while (v75 != (unint64_t *)v77);
          }
          uint64_t v75 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v83;
          *(void *)(v12 + 96) = v76;
          *(void *)(v12 + 104) = &v82[8 * v81];
          if (!v75) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v75);
          goto LABEL_119;
        }
      }
      else
      {
        unsigned int v82 = 0;
        unint64_t v83 = (unint64_t *)(8 * v78);
        *(void *)(8 * v78) = v11;
        uint64_t v76 = 8 * v78 + 8;
        if (v75 != (unint64_t *)v77) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v260;
      *(void *)(v12 + 88) = v83;
      *(void *)(v12 + 96) = v76;
      *(void *)(v12 + 104) = &v82[8 * v81];
      if (v75) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v76;
      uint64_t v8 = v269;
      unsigned int v287 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v268, v287, v11);
      if (result)
      {
LABEL_51:
        unsigned int v47 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v47) {
          goto LABEL_179;
        }
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        if (v49 == v48) {
          goto LABEL_179;
        }
        int v50 = v297;
        uint64_t v51 = v295;
        uint64_t v52 = v290;
        unint64_t v53 = ((unint64_t)v292 - v291) >> 4;
        uint64_t v54 = v48 << 6;
        BOOL v55 = (int *)(*(void *)(v4 + 128) + (v48 << 6) + 60);
        uint64_t v56 = (v49 << 6) - v54;
        do
        {
          unsigned int v59 = *(v55 - 2);
          if (v50)
          {
            unsigned int v298 = *(v55 - 1);
            int v57 = *v55;
            int v299 = *v55;
          }
          else
          {
            int v57 = *(_DWORD *)(v51 + 12 * v59);
          }
          BOOL v58 = (unsigned int *)((char *)v52 + *(unsigned __int16 *)((char *)v52 - *v52 + 6));
          *(v55 - 8) = *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(v51 + 12 * v59 + 4) + v53) + 1]
                                       + *v58)
                     + v57;
          v55 += 16;
          v56 -= 64;
        }
        while (v56);
        unsigned int v296 = (int *)(v51 + 12 * v59);
        sub_AC2924((char *)v8, 0);
        if ((*((unsigned char *)v292 + 15) & 1) != 0
          && (!v294
           || (*(_DWORD *)(v294 + 4 * (((unint64_t)v292 - v291) >> 4)) & v261) == 0))
        {
          int v97 = *(_DWORD *)(v4 + 96);
          if (*(unsigned char *)(v4 + 20))
          {
            unsigned int v98 = v97 + v97 * *(_DWORD *)(v4 + 352);
            unint64_t v99 = v287;
            uint64_t v100 = *(unint64_t **)(v4 + 48);
            if (v100) {
              goto LABEL_131;
            }
LABEL_138:
            int v104 = 2147483646;
          }
          else
          {
            unsigned int v98 = -1;
            unint64_t v99 = v287;
            uint64_t v100 = *(unint64_t **)(v4 + 48);
            if (!v100) {
              goto LABEL_138;
            }
LABEL_131:
            if (*v100 > v99)
            {
              unsigned int v101 = 0;
              unsigned int v102 = *(_DWORD *)(v260 + 100) + v255;
              unsigned int v103 = v102;
              while (v101 <= v102)
              {
                int v104 = *(_DWORD *)sub_A3F53C(v100 + 2, v100[1] * v99 + v103);
                v101 += 2;
                v103 -= 2;
                if (v104 != 0x7FFFFFFF) {
                  goto LABEL_139;
                }
              }
            }
            int v104 = 0x7FFFFFFF;
          }
LABEL_139:
          uint64_t v8 = v269;
          uint64_t v4 = v260;
          if (sub_AC2C0C(v269, 0, v257 + v97 + v97 * v99, v97 + v97 * v99, v98, v104)) {
            sub_A3EF14(v256, &v287);
          }
        }
        int v105 = *(unsigned int **)(v4 + 104);
        uint64_t v106 = *(unsigned int **)(v4 + 112);
        uint64_t v107 = (char *)v106 - (char *)v105;
        if (v106 != v105)
        {
          uint64_t v108 = *(void *)(v4 + 128);
          uint64_t v109 = *v105;
          goto LABEL_155;
        }
        uint64_t v111 = v107 >> 3;
        unint64_t v112 = 1 - (v107 >> 3);
        uint64_t v113 = *(void *)(v4 + 120);
        if (v112 <= (v113 - (uint64_t)v106) >> 3)
        {
          bzero(*(void **)(v4 + 112), 8 * v112);
          size_t v120 = (char *)&v106[2 * v112];
          *(void *)(v4 + 112) = v120;
          int v105 = (unsigned int *)*v8;
          uint64_t v108 = *(void *)(v4 + 128);
          uint64_t v109 = *(unsigned int *)*v8;
          if (*v8 != v120) {
            goto LABEL_155;
          }
          goto LABEL_143;
        }
        uint64_t v114 = v113 - (void)v105;
        uint64_t v115 = v114 >> 2;
        if ((unint64_t)(v114 >> 2) <= 1) {
          uint64_t v115 = 1;
        }
        BOOL v10 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v10) {
          unint64_t v116 = v115;
        }
        if (v116 >> 61) {
LABEL_352:
        }
          sub_188D718();
        uint64_t v117 = 8 * v116;
        unint64_t v118 = (char *)operator new(8 * v116);
        unsigned int v119 = &v118[8 * v111];
        bzero(v119, 8 * v112);
        *(void *)(v4 + 104) = v119;
        *(void *)(v4 + 112) = &v119[8 * v112];
        *(void *)(v4 + 120) = &v118[v117];
        if (!v106)
        {
          size_t v120 = &v119[8 * v112];
          uint64_t v8 = v269;
          int v105 = (unsigned int *)*v269;
          uint64_t v108 = *(void *)(v4 + 128);
          uint64_t v109 = *(unsigned int *)*v269;
          if (*v269 == v120) {
            goto LABEL_143;
          }
LABEL_155:
          unint64_t v121 = (_DWORD *)(v108 + (v109 << 6));
          unint64_t v122 = v108 + ((unint64_t)v105[1] << 6);
          if (v121 != (_DWORD *)v122) {
            goto LABEL_172;
          }
          goto LABEL_178;
        }
        operator delete(v106);
        size_t v120 = *(char **)(v4 + 112);
        uint64_t v8 = v269;
        int v105 = (unsigned int *)*v269;
        uint64_t v108 = *(void *)(v4 + 128);
        uint64_t v109 = *(unsigned int *)*v269;
        if (*v269 != v120) {
          goto LABEL_155;
        }
LABEL_143:
        int v110 = *(char **)(v4 + 120);
        if (v110 != v120)
        {
          *(void *)size_t v120 = 0;
          *(void *)(v4 + 112) = v120 + 8;
          goto LABEL_171;
        }
        uint64_t v123 = 1;
        uint64_t v124 = v110 - (char *)v105;
        if ((unint64_t)(v124 >> 2) > 1) {
          uint64_t v123 = v124 >> 2;
        }
        if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v125 = v123;
        }
        if (v125)
        {
          if (v125 >> 61) {
            goto LABEL_352;
          }
          unint64_t v126 = (char *)operator new(8 * v125);
          unint64_t v127 = v126;
          *(void *)unint64_t v126 = 0;
          uint64_t v128 = (uint64_t)(v126 + 8);
          if (v120 != (char *)v105)
          {
LABEL_165:
            unint64_t v129 = v120 - 8 - (char *)v105;
            if (v129 < 0x58 || (unint64_t)(v120 - v126) < 0x20)
            {
              uint64_t v130 = (unsigned int *)v120;
              uint64_t v4 = v260;
              goto LABEL_168;
            }
            uint64_t v241 = (v129 >> 3) + 1;
            uint64_t v242 = 8 * (v241 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v130 = (unsigned int *)&v120[-v242];
            v127 -= v242;
            unint64_t v243 = v126 - 16;
            unint64_t v244 = v120 - 16;
            uint64_t v245 = v241 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v4 = v260;
            do
            {
              long long v246 = *(_OWORD *)v244;
              *((_OWORD *)v243 - 1) = *((_OWORD *)v244 - 1);
              *(_OWORD *)unint64_t v243 = v246;
              v243 -= 32;
              v244 -= 32;
              v245 -= 4;
            }
            while (v245);
            if (v241 != (v241 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_168:
                uint64_t v131 = *((void *)v130 - 1);
                v130 -= 2;
                *((void *)v127 - 1) = v131;
                v127 -= 8;
              }
              while (v130 != v105);
            }
            size_t v120 = (char *)*v8;
            *(void *)(v4 + 104) = v127;
            *(void *)(v4 + 112) = v128;
            *(void *)(v4 + 120) = &v126[8 * v125];
            if (v120) {
LABEL_170:
            }
              operator delete(v120);
LABEL_171:
            unint64_t v121 = (_DWORD *)(v108 + (v109 << 6));
            unint64_t v122 = *(void *)(v4 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(v4 + 104) + 4) << 6);
            if (v121 != (_DWORD *)v122)
            {
LABEL_172:
              int v132 = v297;
              uint64_t v133 = v295;
              unsigned int v134 = v290;
              unint64_t v135 = ((unint64_t)v292 - v291) >> 4;
              do
              {
                unsigned int v138 = v121[13];
                if (v132)
                {
                  unsigned int v298 = v121[14];
                  int v136 = v121[15];
                  int v299 = v136;
                }
                else
                {
                  int v136 = *(_DWORD *)(v133 + 12 * v138);
                }
                uint64_t v137 = (unsigned int *)((char *)v134 + *(unsigned __int16 *)((char *)v134 - *v134 + 6));
                v121[7] = *(unsigned int *)((char *)&v137[2 * (*(_DWORD *)(v133 + 12 * v138 + 4) + v135)
                                                        + 2]
                                          + *v137)
                        + v136;
                v121 += 16;
              }
              while (v121 != (_DWORD *)v122);
              unsigned int v296 = (int *)(v133 + 12 * v138);
            }
LABEL_178:
            uint64_t result = (uint64_t)sub_AC2924((char *)v8, 0);
LABEL_179:
            if ((*((unsigned char *)v292 + 15) & 2) == 0) {
              goto LABEL_186;
            }
            if (v294)
            {
              if (*(_DWORD *)(v294 + 4 * (((unint64_t)v292 - v291) >> 4)) != v261) {
                goto LABEL_186;
              }
            }
            else if (v261)
            {
              goto LABEL_186;
            }
            unint64_t v139 = v259 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v287;
            uint64_t v140 = *(void *)(v4 + 104);
            if (v139 >= (*(void *)(v4 + 112) - v140) >> 3) {
              goto LABEL_186;
            }
            unsigned int v142 = (_DWORD *)(v140 + 8 * v139);
            int v141 = v142[1];
            uint64_t v143 = (v141 - *v142);
            if (v141 == *v142) {
              goto LABEL_186;
            }
            unsigned int v151 = 0;
            unint64_t v262 = v259 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v287;
            while (2)
            {
              uint64_t v152 = *(void *)(v4 + 104);
              if (v139 >= (*(void *)(v4 + 112) - v152) >> 3
                || (v154 = (int *)(v152 + 8 * v139), int v153 = *v154, v154[1] - *v154 <= v151))
              {
                unint64_t v247 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v247, "key does not exist and cannot be added");
                goto LABEL_349;
              }
              unint64_t v155 = v153 + v151;
              uint64_t v156 = *(void *)(v4 + 128);
              if (v155 >= (*(void *)(v4 + 136) - v156) >> 6)
              {
                unint64_t v247 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v247, "index out of range");
LABEL_349:
              }
              uint64_t v157 = v156 + (v155 << 6);
              int v158 = (_DWORD *)(v157 + 28);
              signed int v159 = *((_DWORD *)v292 + 2) + *(_DWORD *)(v157 + 28);
              if (v297)
              {
                uint64_t result = sub_A1F39C(*(void *)(v4 + 24), (uint64_t)&v288, v159, 1);
                if ((result & 1) == 0) {
                  goto LABEL_212;
                }
LABEL_220:
                uint64_t v160 = v143;
                uint64_t v266 = *(void *)(v157 + 20);
                int v267 = *(_DWORD *)(v157 + 32);
                unsigned int v161 = *(_DWORD *)(v157 + 40);
                int v264 = *(_DWORD *)(v157 + 36);
                int v265 = *(_DWORD *)(v157 + 44);
                int v263 = *(unsigned __int8 *)(v157 + 48);
                __int16 v285 = *(_WORD *)(v157 + 49);
                unint64_t v162 = (void *)(*(void *)(v4 + 24) + 4136);
                char v286 = *(unsigned char *)(v157 + 51);
                if (sub_A10E20(v162, v271))
                {
                  uint64_t v163 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v270);
                }
                else
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v238 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                    uint64_t v4 = v260;
                  }
                  uint64_t v164 = *v162;
                  if (dword_24F7300 == v271)
                  {
                    uint64_t v165 = *(unsigned int **)(*(void *)(v164 + 3976) + 72);
                    if (!v165)
                    {
                      unint64_t v253 = __cxa_allocate_exception(0x40uLL);
                      size_t v303 = (char *)operator new(0x40uLL);
                      long long v304 = xmmword_20B9A90;
                      strcpy(v303, "Realtime stop pattern quad data requested on nullptr buffer");
                      unint64_t v254 = (void *)sub_2F404((uint64_t)v253, (long long *)&v303);
                    }
                    long long v166 = (int *)((char *)v165 + *v165);
                    unsigned int v167 = (unsigned __int16 *)((char *)v166 - *v166);
                    if (*v167 >= 5u && (uint64_t v168 = v167[2]) != 0) {
                      unint64_t v169 = (unsigned int *)((char *)v166 + v168 + *(unsigned int *)((char *)v166 + v168));
                    }
                    else {
                      unint64_t v169 = 0;
                    }
                    uint64_t v163 = (int *)sub_A1139C(v169, v270);
                  }
                  else
                  {
                    uint64_t v163 = (int *)sub_A11500(v164 + 24, v270, 0, "stop pattern");
                  }
                }
                uint64_t v170 = v163;
                uint64_t v171 = *v162;
                int32x2_t v172 = (unsigned __int16 *)((char *)v163 - *v163);
                if (*v172 >= 0xFu && (uint64_t v173 = v172[7]) != 0)
                {
                  uint64_t v174 = v171 + 3896;
                  char v175 = sub_49442C(*(unsigned __int16 *)((char *)v163 + v173));
                  if ((sub_C25A10(v174, v175) & 1) == 0)
                  {
LABEL_234:
                    long long v176 = (unsigned __int16 *)((char *)v170 - *v170);
                    uint64_t v8 = v269;
                    if (*v176 >= 0xBu && (uint64_t v177 = v176[5]) != 0)
                    {
                      int v178 = sub_A2BF48(*((unsigned char *)v170 + v177));
                      if (sub_A10E20(v162, v271))
                      {
LABEL_240:
                        unint64_t v181 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v270);
                        unsigned int v182 = (unsigned __int16 *)((char *)v181 - *v181);
                        if (*v182 >= 0x19u) {
                          goto LABEL_253;
                        }
LABEL_255:
                        unsigned int v190 = 2;
                        goto LABEL_256;
                      }
                    }
                    else
                    {
                      int v178 = sub_A2BF48(0);
                      if (sub_A10E20(v162, v271)) {
                        goto LABEL_240;
                      }
                    }
LABEL_243:
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v239 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                      uint64_t v4 = v260;
                      uint64_t v8 = v269;
                    }
                    uint64_t v183 = *v162;
                    if (dword_24F7300 != v271)
                    {
                      unint64_t v181 = (int *)sub_A11500(v183 + 24, v270, 0, "stop pattern");
                      unsigned int v182 = (unsigned __int16 *)((char *)v181 - *v181);
                      if (*v182 >= 0x19u) {
                        goto LABEL_253;
                      }
                      goto LABEL_255;
                    }
                    unint64_t v184 = *(unsigned int **)(*(void *)(v183 + 3976) + 72);
                    if (!v184)
                    {
                      long long v251 = __cxa_allocate_exception(0x40uLL);
                      size_t v303 = (char *)operator new(0x40uLL);
                      long long v304 = xmmword_20B9A90;
                      strcpy(v303, "Realtime stop pattern quad data requested on nullptr buffer");
                      unint64_t v252 = (void *)sub_2F404((uint64_t)v251, (long long *)&v303);
                    }
                    unint64_t v185 = (int *)((char *)v184 + *v184);
                    uint8x8_t v186 = (unsigned __int16 *)((char *)v185 - *v185);
                    if (*v186 >= 5u && (uint64_t v187 = v186[2]) != 0) {
                      uint64_t v188 = (unsigned int *)((char *)v185 + v187 + *(unsigned int *)((char *)v185 + v187));
                    }
                    else {
                      uint64_t v188 = 0;
                    }
                    unint64_t v181 = (int *)sub_A1139C(v188, v270);
                    unsigned int v182 = (unsigned __int16 *)((char *)v181 - *v181);
                    if (*v182 < 0x19u) {
                      goto LABEL_255;
                    }
LABEL_253:
                    uint64_t v189 = v182[12];
                    if (!v189) {
                      goto LABEL_255;
                    }
                    unsigned int v190 = *((unsigned __int8 *)v181 + v189);
LABEL_256:
                    unsigned int v191 = sub_A2BF38(v190);
                    if (v161 <= v191) {
                      unsigned int v192 = v191;
                    }
                    else {
                      unsigned int v192 = v161;
                    }
                    if (sub_A10E20(v162, v271))
                    {
                      uint64_t v193 = (int *)sub_A1120C(*(void *)(*v162 + 3944), v270);
                      goto LABEL_268;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v240 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                      uint64_t v4 = v260;
                      uint64_t v8 = v269;
                    }
                    uint64_t v194 = *v162;
                    if (dword_24F7300 == v271)
                    {
                      unint64_t v195 = *(unsigned int **)(*(void *)(v194 + 3976) + 72);
                      if (!v195)
                      {
                        long long v249 = __cxa_allocate_exception(0x40uLL);
                        size_t v303 = (char *)operator new(0x40uLL);
                        long long v304 = xmmword_20B9A90;
                        strcpy(v303, "Realtime stop pattern quad data requested on nullptr buffer");
                        long long v250 = (void *)sub_2F404((uint64_t)v249, (long long *)&v303);
                      }
                      uint64_t v143 = v160;
                      uint64_t v196 = (int *)((char *)v195 + *v195);
                      unsigned int v197 = (unsigned __int16 *)((char *)v196 - *v196);
                      unint64_t v139 = v262;
                      int v198 = v267;
                      uint64_t v199 = v266;
                      if (*v197 >= 5u && (uint64_t v200 = v197[2]) != 0) {
                        uint64_t v201 = (unsigned int *)((char *)v196 + v200 + *(unsigned int *)((char *)v196 + v200));
                      }
                      else {
                        uint64_t v201 = 0;
                      }
                      uint64_t v193 = (int *)sub_A1139C(v201, v270);
                      uint64_t v202 = (unsigned __int16 *)((char *)v193 - *v193);
                      if (*v202 >= 0xFu) {
                        goto LABEL_272;
                      }
LABEL_275:
                      char v204 = 3;
                      uint64_t result = 0x7FFFFFFFLL;
                    }
                    else
                    {
                      uint64_t v193 = (int *)sub_A11500(v194 + 24, v270, 0, "stop pattern");
LABEL_268:
                      uint64_t v143 = v160;
                      unint64_t v139 = v262;
                      int v198 = v267;
                      uint64_t v199 = v266;
                      uint64_t v202 = (unsigned __int16 *)((char *)v193 - *v193);
                      if (*v202 < 0xFu) {
                        goto LABEL_275;
                      }
LABEL_272:
                      uint64_t v203 = v202[7];
                      if (!v203) {
                        goto LABEL_275;
                      }
                      char v204 = 0;
                      unsigned int v205 = *(unsigned __int16 *)((char *)v193 + v203);
                      uint64_t result = 0x7FFFFFFFLL;
                      switch(v205)
                      {
                        case 0u:
                        case 1u:
                        case 2u:
                        case 0xCu:
                          break;
                        case 3u:
                          char v204 = 1;
                          break;
                        case 4u:
                          char v204 = 2;
                          break;
                        case 5u:
                        case 6u:
                        case 7u:
                          goto LABEL_274;
                        case 8u:
                        case 9u:
                        case 0xAu:
                        case 0xBu:
                          goto LABEL_325;
                        default:
                          uint64_t result = 0x7FFFFFFFLL;
                          if (v205 != 900)
                          {
LABEL_325:
                            uint64_t v237 = ((5243 * (v205 >> 2)) >> 17) - 1;
                            if (v237 > 0xB) {
LABEL_274:
                            }
                              char v204 = 3;
                            else {
                              char v204 = byte_20EC3B6[v237];
                            }
                          }
                          break;
                      }
                    }
                    int v206 = (1 << v204) | v263;
                    int v207 = v299;
                    unint64_t v208 = 0xFFFFFFFF00000000;
                    if (v297) {
                      unint64_t v208 = (unint64_t)v298 << 32;
                    }
                    unint64_t v209 = (-1431655765 * (((unint64_t)v296 - v295) >> 2)) | v208;
                    if (!v297) {
                      int v207 = 0x7FFFFFFF;
                    }
                    uint64_t v210 = (unsigned int *)((char *)v290 + *(unsigned __int16 *)((char *)v290 - *v290 + 6));
                    uint64_t v211 = (char *)v210 + *v210;
                    long long v212 = &v299;
                    if (!v297) {
                      long long v212 = v296;
                    }
                    int v213 = *v212;
                    unint64_t v214 = ((unint64_t)v292 - v291) >> 4;
                    int v215 = *(_DWORD *)&v211[8 * (v296[1] + v214) + 4];
                    int v216 = *(_DWORD *)&v211[8 * (v296[1] + v214) + 8] + v213;
                    int v217 = ((10 * (v213 - *v158 + v215)) & ~((10 * (v213 - *v158 + v215)) >> 31)) + v265;
                    LODWORD(v272) = v214;
                    *(void *)((char *)&v272 + 4) = v209;
                    HIDWORD(v272) = v207;
                    unsigned int v273 = v302;
                    uint64_t v274 = v199;
                    int v275 = v216;
                    int v276 = v198;
                    unsigned int v277 = v178 + v264;
                    unsigned int v278 = v192;
                    int v279 = v217;
                    unsigned __int8 v280 = v206;
                    __int16 v281 = v285;
                    char v282 = v286;
                    unint64_t v283 = v209;
                    int v284 = v207;
                    char v218 = *(unsigned int **)(v4 + 104);
                    if (*(unsigned int **)(v4 + 112) == v218
                      || (uint64_t v219 = *v218,
                          uint64_t v220 = *(unsigned int *)(*(void *)(v4 + 104) + 4),
                          v220 == v219))
                    {
                      uint64_t result = (uint64_t)sub_AAD3F8((char **)v8, 0, &v272);
                    }
                    else
                    {
                      char v221 = 0;
                      uint64_t v222 = v219 << 6;
                      unint64_t v223 = (unsigned __int8 *)(*(void *)(v4 + 128) + (v219 << 6) + 48);
                      uint64_t v224 = (v220 << 6) - v222;
                      do
                      {
                        int v225 = *((_DWORD *)v223 - 5);
                        if (v225 != 0x7FFFFFFF)
                        {
                          if (v225 <= v275 && *((_DWORD *)v223 - 4) <= v276)
                          {
                            unsigned int v226 = *((_DWORD *)v223 - 3);
                            if (v226 <= v277
                              && *((_DWORD *)v223 - 2) <= v278
                              && (v226 != v277 || v225 != v275 || 10 * v225 - *((_DWORD *)v223 - 1) <= 10 * v275 - v279)
                              && (*v223 & ~v280) == 0)
                            {
                              goto LABEL_305;
                            }
                          }
                          if (v275 <= v225 && v276 <= *((_DWORD *)v223 - 4))
                          {
                            unsigned int v227 = *((_DWORD *)v223 - 3);
                            if (v277 <= v227
                              && v278 <= *((_DWORD *)v223 - 2)
                              && (v277 != v227 || v275 != v225 || 10 * v275 - v279 <= 10 * v225 - *((_DWORD *)v223 - 1))
                              && (v206 & ~*v223) == 0)
                            {
                              *((_DWORD *)v223 - 5) = 0x7FFFFFFF;
                              char v221 = 1;
                            }
                          }
                        }
                        v223 += 64;
                        v224 -= 64;
                      }
                      while (v224);
                      uint64_t result = (uint64_t)sub_AAD3F8((char **)v8, 0, &v272);
LABEL_305:
                      if (v221)
                      {
                        uint64_t v228 = *(unsigned int **)(v4 + 104);
                        if (*(unsigned int **)(v4 + 112) != v228)
                        {
                          uint64_t v229 = *(void *)(v4 + 128);
                          uint64_t v230 = *v228;
LABEL_308:
                          unint64_t v231 = v229 + (v230 << 6);
                          unint64_t v232 = v229 + ((unint64_t)v228[1] << 6);
                          if (v231 != v232) {
                            goto LABEL_312;
                          }
                          goto LABEL_318;
                        }
                        sub_D2BFC(v8, 1uLL);
                        uint64_t v228 = *(unsigned int **)(v4 + 104);
                        uint64_t v229 = *(void *)(v4 + 128);
                        uint64_t v230 = *v228;
                        if (*(unsigned int **)(v4 + 112) != v228) {
                          goto LABEL_308;
                        }
                        sub_D2BFC(v8, 1uLL);
                        uint64_t v228 = *(unsigned int **)(v4 + 104);
                        unint64_t v231 = v229 + (v230 << 6);
                        unint64_t v232 = *(void *)(v4 + 128) + ((unint64_t)v228[1] << 6);
                        if (v231 == v232)
                        {
LABEL_318:
                          if (*(unsigned int **)(v4 + 112) == v228) {
                            goto LABEL_319;
                          }
                        }
                        else
                        {
LABEL_312:
                          while (*(_DWORD *)(v231 + 28) != 0x7FFFFFFF)
                          {
                            v231 += 64;
                            if (v231 == v232)
                            {
                              unint64_t v231 = v232;
                              if (*(unsigned int **)(v4 + 112) != v228) {
                                goto LABEL_320;
                              }
                              goto LABEL_319;
                            }
                          }
                          if (v231 == v232) {
                            goto LABEL_318;
                          }
                          unint64_t v233 = v231 + 64;
                          if (v231 + 64 == v232) {
                            goto LABEL_318;
                          }
                          do
                          {
                            if (*(_DWORD *)(v233 + 28) != 0x7FFFFFFF)
                            {
                              long long v234 = *(_OWORD *)v233;
                              long long v235 = *(_OWORD *)(v233 + 16);
                              long long v236 = *(_OWORD *)(v233 + 48);
                              *(_OWORD *)(v231 + 32) = *(_OWORD *)(v233 + 32);
                              *(_OWORD *)(v231 + 48) = v236;
                              *(_OWORD *)unint64_t v231 = v234;
                              *(_OWORD *)(v231 + 16) = v235;
                              v231 += 64;
                            }
                            v233 += 64;
                          }
                          while (v233 != v232);
                          uint64_t v228 = (unsigned int *)*v8;
                          if (*(void **)(v4 + 112) == *v8)
                          {
LABEL_319:
                            sub_D2BFC(v8, 1uLL);
                            uint64_t v228 = (unsigned int *)*v8;
                          }
                        }
LABEL_320:
                        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)v231, (char *)(*(void *)(v4 + 128) + ((unint64_t)v228[1] << 6)));
                      }
                    }
LABEL_212:
                    if (++v151 == v143) {
                      goto LABEL_186;
                    }
                    continue;
                  }
                }
                else
                {
                  uint64_t v179 = v171 + 3896;
                  char v180 = sub_49442C(0x7FFFu);
                  if ((sub_C25A10(v179, v180) & 1) == 0) {
                    goto LABEL_234;
                  }
                }
                int v178 = 128;
                uint64_t v8 = v269;
                if (sub_A10E20(v162, v271)) {
                  goto LABEL_240;
                }
                goto LABEL_243;
              }
              break;
            }
            uint64_t result = sub_A1F8B4((uint64_t)&v288, v159, 1);
            if (result) {
              goto LABEL_220;
            }
            goto LABEL_212;
          }
        }
        else
        {
          unint64_t v126 = 0;
          unint64_t v127 = 0;
          *(void *)&def_332C = 0;
          uint64_t v128 = 8;
          if (v120 != (char *)v105) {
            goto LABEL_165;
          }
        }
        uint64_t v4 = v260;
        *(void *)(v260 + 104) = v127;
        *(void *)(v260 + 112) = v128;
        *(void *)(v260 + 120) = &v126[8 * v125];
        if (v120) {
          goto LABEL_170;
        }
        goto LABEL_171;
      }
LABEL_120:
      if (!*(unsigned char *)(v4 + 21))
      {
        uint64_t v93 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v93)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v93 = *(unsigned int **)(v4 + 104);
          uint64_t v94 = *(void *)(v4 + 128);
          uint64_t v95 = *v93;
          if (*(unsigned int **)(v4 + 112) == v93)
          {
            sub_D2BFC(v8, 1uLL);
            uint64_t v93 = *(unsigned int **)(v4 + 104);
            uint64_t v96 = *(void *)(v4 + 128);
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v94 = *(void *)(v4 + 128);
          uint64_t v95 = *v93;
        }
        uint64_t v96 = v94;
LABEL_126:
        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)(v94 + (v95 << 6)), (char *)(v96 + ((unint64_t)v93[1] << 6)));
      }
LABEL_186:
      unint64_t v144 = v291;
      unint64_t v9 = v292 + 2;
      v292 += 2;
      if (*(unsigned char *)(v288 + 16)) {
        BOOL v145 = v289 == 0;
      }
      else {
        BOOL v145 = 0;
      }
      if (v145 && (unint64_t)v9 >= v291 && (unint64_t)v9 < v293)
      {
        do
        {
          unint64_t v148 = __ROR8__(*v9, 32);
          if (HIDWORD(v148) == 1 && (v148 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v288 + 4120));
          unint64_t v144 = v291;
          unint64_t v9 = v292;
          if (result) {
            break;
          }
          unint64_t v9 = v292 + 2;
          v292 = v9;
        }
        while ((unint64_t)v9 >= v291 && (unint64_t)v9 < v293);
      }
      if ((unint64_t)v9 < v144 || (unint64_t)v9 >= v293) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unint64_t v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_AC2858(_Unwind_Exception *a1)
{
}

void sub_AC2870(_Unwind_Exception *a1)
{
}

void sub_AC2888(_Unwind_Exception *a1)
{
}

void sub_AC28A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_AC2924(char *result, unsigned int a2)
{
  uint64_t v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_AC0C80(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_53:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            int v11 = result[48];
            unsigned int v12 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v12) {
                goto LABEL_53;
              }
              unint64_t v13 = v12 + *v10;
              uint64_t v14 = *((void *)v2 + 3);
              if (v13 >= (*((void *)v2 + 4) - v14) >> 6) {
                break;
              }
              uint64_t v15 = v14 + (v13 << 6);
              int v18 = *(_DWORD *)(v15 + 28);
              int v17 = (_DWORD *)(v15 + 28);
              int v16 = v18;
              if (v18 != 0x7FFFFFFF)
              {
                int v19 = *((_DWORD *)result + 7);
                if (v19 <= v16
                  && (uint64_t v20 = v14 + (v13 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v20 + 32))
                  && (unsigned int v21 = *(_DWORD *)(v20 + 36), v22 = *((_DWORD *)result + 9), v22 <= v21)
                  && (uint64_t v23 = v14 + (v13 << 6), *((_DWORD *)result + 10) <= *(_DWORD *)(v23 + 40))
                  && ((int v24 = 10 * v16 - *(_DWORD *)(v23 + 44), v22 == v21) ? (v25 = v19 == v16) : (v25 = 0),
                      v25 ? (BOOL v26 = 10 * v19 - *((_DWORD *)result + 11) <= v24) : (BOOL v26 = 1),
                      v26 && (v11 & ~*(unsigned __int8 *)(v14 + (v13 << 6) + 48)) == 0))
                {
                  _DWORD *v17 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 <= v19)
                {
                  uint64_t v27 = v14 + (v13 << 6);
                  if (*(_DWORD *)(v27 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v28 = *((_DWORD *)result + 9);
                    unsigned int v29 = *(_DWORD *)(v27 + 36);
                    if (v29 <= v28)
                    {
                      uint64_t v30 = v14 + (v13 << 6);
                      if (*(_DWORD *)(v30 + 40) <= *((_DWORD *)result + 10))
                      {
                        int v31 = 10 * v16 - *(_DWORD *)(v30 + 44);
                        BOOL v32 = v29 == v28 && v16 == v19;
                        BOOL v33 = !v32 || v31 <= 10 * v19 - *((_DWORD *)result + 11);
                        if (v33 && (*(unsigned __int8 *)(v14 + (v13 << 6) + 48) & ~result[48]) == 0)
                        {
                          *((_DWORD *)result + 7) = 0x7FFFFFFF;
                          char v5 = 1;
                          goto LABEL_6;
                        }
                      }
                    }
                  }
                }
              }
              if (v8 == ++v12) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_AC2BE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AC2BF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_AC2C0C(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AC0C80(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_AC0C80(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) <= a6)
      {
        if (sub_AC0D58(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_AC0A74((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      uint64_t v30 = (long long *)sub_AC0C80(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) <= a6)
      {
        if (sub_AC0D58(a1, (uint64_t)&v36, a5) & 1) != 0 || (sub_AC0D58(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_AC0A74((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

uint64_t sub_AC2E50(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)long long __p = 0u;
  memset(v14, 0, sizeof(v14));
  char v20 = 0;
  LOBYTE(v19) = 0;
  sub_C50BD8((char *)__p, &v19);
  if (v20 < 0) {
    operator delete((void *)v19);
  }
  BYTE8(v16[8]) = 0;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  uint64_t v2 = (void **)(a1 + 136);
  unint64_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v14[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    char v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      char v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    char *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v14[1];
  *(void **)(a1 + 152) = v14[3];
  memset(&v14[1], 0, 24);
  unsigned int v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v16[0];
  BYTE7(v16[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v16[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v16 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v16[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v16[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v16[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v16[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v16[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v16[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v16[8]);
  int v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v16[0]);
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v17;
    *(void *)(a1 + 336) = v18;
    uint64_t v18 = 0;
    long long v17 = 0uLL;
  }
  if (v14[1])
  {
    int v9 = (char *)v14[2];
    BOOL v10 = v14[1];
    if (v14[2] != v14[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v14[3], (uint64_t)v9);
      }
      while (v9 != v14[1]);
      BOOL v10 = v14[1];
    }
    v14[2] = v14[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  sub_A3B6BC(a1 + 344);
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  sub_A3B6BC(a1 + 464);
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 1952) = 0;
  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1960) = 0;
  int v11 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v11;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v12 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v12;
  *(_DWORD *)(a1 + 616) = v11;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v12;
  v14[0] = (void *)0x1FFFFFFFELL;
  uint64_t result = sub_A3B520(a1 + 344, (uint64_t *)v14);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AC3104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AC3134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  sub_A39318((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  unint64_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_A40DC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 1952);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 1952);
  }
  *(void *)(a1 + 1952) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    int v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    BOOL v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    int v11 = (void *)std::ostream::operator<<();
    char v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    __int16 v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AC347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AC351C(uint64_t a1, int a2)
{
  int v91 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v4 = *(_OWORD *)(a1 + 104);
  v90[0] = *(_OWORD *)(a1 + 88);
  v90[1] = v4;
  LOBYTE(v90[0]) = 0;
  v89[0] = (uint64_t)v90;
  v89[1] = a1;
  v89[2] = (uint64_t)&v91;
  char v5 = *(unint64_t **)(a1 + 592);
  unint64_t v6 = *(unsigned int *)(a1 + 584);
  if (*v5 <= v6)
  {
    *char v5 = v6 + 1;
    unint64_t v7 = v5[2];
    unint64_t v8 = v5[1] * (v6 + 1);
    unint64_t v9 = (uint64_t)(v5[3] - v7) >> 2;
    if (v8 <= v9)
    {
      if (v8 < v9) {
        v5[3] = v7 + 4 * v8;
      }
    }
    else
    {
      sub_5BBEE0((uint64_t)(v5 + 2), v8 - v9);
    }
  }
  int v10 = *(_DWORD *)(v5[2] + 4 * (((2 * a2) | 1u) + v5[1] * v6));
  char v12 = (_DWORD *)(a1 + 92);
  unsigned int v11 = *(_DWORD *)(a1 + 92);
  unsigned int v92 = v11;
  if (!*(unsigned char *)(a1 + 49)) {
    goto LABEL_31;
  }
  int v13 = 10 * (v11 - v10);
  if (v13 >= *(_DWORD *)(a1 + 52))
  {
    int v14 = sub_AC4CB4(v89, v10);
    LODWORD(v81[0]) = v14;
    unsigned int v11 = v92;
    if (v14 != 0x7FFFFFFF && v14 < (int)v92)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        int v16 = (void *)std::ostream::operator<<();
        char v17 = sub_188FC78(v16, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        uint64_t v18 = (void *)sub_266E4((uint64_t)v17);
        long long v19 = sub_188FC78(v18, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v19);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v11 = v81[0];
      unsigned int v92 = v81[0];
    }
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_31;
    }
  }
  if (v13 < *(_DWORD *)(a1 + 52)) {
    goto LABEL_31;
  }
  sub_725D0((uint64_t)__p);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)"] Journey duration (", 20);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v22 = *(_DWORD *)(a1 + 60);
  if (v22 > *(_DWORD *)(a1 + 56))
  {
LABEL_29:
    int v23 = v10;
    goto LABEL_30;
  }
  while (1)
  {
    *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      unsigned int v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)"] Examining time shift of ", 26);
      int v48 = v22 % 10;
      uint64_t v49 = (void *)std::ostream::operator<<();
      sub_188FC78(v49, (uint64_t)" sec (exponential search)", 25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v81, 2u);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
      uint64_t v85 = v80;
      *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    else
    {
      int v48 = v22 % 10;
    }
    char v50 = v22 < 0 ? -5 : 5;
    int v51 = v22 / -10 + v10 + (((-103 * (char)(v50 + v48)) >> 15) & 1) + ((-103 * (char)(v50 + v48)) >> 10);
    unsigned int v52 = sub_AC4CB4(v89, v51);
    if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v52 - v92))) >= (double)(int)fabs((double)(10 * (v51 - v10)))) {
      break;
    }
    double v46 = (double)v22 + (double)v22;
    if (v46 >= 0.0)
    {
      if (v46 >= 4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46) + 1;
    }
    else
    {
      if (v46 <= -4.50359963e15) {
        goto LABEL_60;
      }
      uint64_t v53 = (uint64_t)(v46 + v46);
      if (v53 >= 1) {
        --v53;
      }
    }
    double v46 = (double)(v53 >> 1);
LABEL_60:
    int v22 = (int)v46;
    if (*(_DWORD *)(a1 + 56) < (int)v46) {
      goto LABEL_29;
    }
  }
  unsigned int v54 = v52;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v85);
    sub_188FC78(&v85, (uint64_t)"[", 1);
    BOOL v55 = (void *)std::ostream::operator<<();
    sub_188FC78(v55, (uint64_t)"] Journey duration improved from ", 33);
    uint64_t v56 = (void *)std::ostream::operator<<();
    sub_188FC78(v56, (uint64_t)" to ", 4);
    int v57 = (void *)std::ostream::operator<<();
    sub_188FC78(v57, (uint64_t)" sec for time shift of ", 23);
    BOOL v58 = (void *)std::ostream::operator<<();
    sub_188FC78(v58, (uint64_t)" sec", 4);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v81, 2u);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    uint64_t v85 = v80;
    *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
    if (v88 < 0) {
      operator delete(v87);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unsigned int v92 = v54;
  int v23 = v10;
  if (v51 != v10)
  {
    double v59 = (double)v22 * 0.5;
    if (v59 >= 0.0)
    {
      if (v59 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v59 + v59) + 1;
        goto LABEL_93;
      }
    }
    else if (v59 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v59 + v59);
      if (v60 >= 1) {
        --v60;
      }
LABEL_93:
      double v59 = (double)(v60 >> 1);
    }
    double v61 = (double)v22 * 0.25;
    if (v61 >= 0.0)
    {
      if (v61 < 4.50359963e15)
      {
        uint64_t v62 = (uint64_t)(v61 + v61) + 1;
        goto LABEL_101;
      }
    }
    else if (v61 > -4.50359963e15)
    {
      uint64_t v62 = (uint64_t)(v61 + v61);
      if (v62 >= 1) {
        --v62;
      }
LABEL_101:
      double v61 = (double)(v62 >> 1);
    }
    int v63 = (int)v61;
    if (*(_DWORD *)(a1 + 60) > (int)v61)
    {
      int v23 = v51;
      goto LABEL_30;
    }
    int v23 = v51;
    int v64 = (int)v59;
    while (2)
    {
      *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
      int v66 = v63 + v64;
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v85);
        sub_188FC78(&v85, (uint64_t)"[", 1);
        uint64_t v67 = (void *)std::ostream::operator<<();
        sub_188FC78(v67, (uint64_t)"] Examining time shift of ", 26);
        int v68 = v66 % 10;
        uint64_t v69 = (void *)std::ostream::operator<<();
        sub_188FC78(v69, (uint64_t)" sec (binary refinement search)", 31);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v81, 2u);
        if (v82 < 0) {
          operator delete(v81[0]);
        }
        uint64_t v85 = v80;
        *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
        if (v88 < 0) {
          operator delete(v87);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      else
      {
        int v68 = v66 % 10;
      }
      if (v66 < 0) {
        char v70 = -5;
      }
      else {
        char v70 = 5;
      }
      int v71 = v66 / -10
          + v10
          + (((-103 * (char)(v70 + v68)) >> 15) & 1)
          + ((-103 * (char)(v70 + v68)) >> 10);
      unsigned int v72 = sub_AC4CB4(v89, v71);
      if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v92 - v72))) >= (double)(int)fabs((double)(10 * (v23 - v71))))
      {
        v64 += v63;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0) {
          goto LABEL_125;
        }
      }
      else
      {
        unsigned int v73 = v72;
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v85);
          sub_188FC78(&v85, (uint64_t)"[", 1);
          unint64_t v74 = (void *)std::ostream::operator<<();
          sub_188FC78(v74, (uint64_t)"] Journey duration improved from ", 33);
          uint64_t v75 = (void *)std::ostream::operator<<();
          sub_188FC78(v75, (uint64_t)" to ", 4);
          uint64_t v76 = (void *)std::ostream::operator<<();
          sub_188FC78(v76, (uint64_t)" sec for time shift of ", 23);
          uint64_t v77 = (void *)std::ostream::operator<<();
          sub_188FC78(v77, (uint64_t)" sec", 4);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v81, 2u);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          uint64_t v85 = v80;
          *(uint64_t *)((char *)&v85 + *(void *)(v80 - 24)) = v79;
          if (v88 < 0) {
            operator delete(v87);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unsigned int v92 = v73;
        int v23 = v71;
        double v65 = (double)v63 * 0.5;
        if (v65 >= 0.0)
        {
LABEL_125:
          if (v65 < 4.50359963e15)
          {
            uint64_t v78 = (uint64_t)(v65 + v65) + 1;
            goto LABEL_105;
          }
          goto LABEL_106;
        }
      }
      if (v65 > -4.50359963e15)
      {
        uint64_t v78 = (uint64_t)(v65 + v65);
        if (v78 >= 1) {
          --v78;
        }
LABEL_105:
        double v65 = (double)(v78 >> 1);
      }
LABEL_106:
      int v63 = (int)v65;
      if (*(_DWORD *)(a1 + 60) > (int)v65) {
        break;
      }
      continue;
    }
  }
LABEL_30:
  *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
  unsigned int v11 = v92;
  int v10 = v23;
  char v12 = (_DWORD *)(a1 + 92);
LABEL_31:
  if (v11 != *v12)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v85);
      sub_188FC78(&v85, (uint64_t)"[", 1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      unint64_t v25 = sub_188FC78(v24, (uint64_t)"] Shifting ", 11);
      uint64_t v26 = sub_188FC78(v25, (uint64_t)"arrival", 7);
      int v27 = sub_188FC78(v26, (uint64_t)" time from ", 11);
      uint64_t v28 = (void *)sub_266E4((uint64_t)v27);
      char v29 = sub_188FC78(v28, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v88 < 0) {
        operator delete(v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v30 = v91;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_51;
  }
  int v31 = v91 + 1;
  int v32 = *(_DWORD *)(a1 + 24);
  if (v91 + 1 <= (v32 + 1)) {
    int v31 = v32 + 1;
  }
  if (v91 + 1 < (v32 + 1))
  {
    int v33 = v31 - 1;
    unsigned int v34 = 2 * v91 + 3;
    int v35 = v91;
    while (1)
    {
      long long v36 = *(unint64_t **)(a1 + 592);
      unint64_t v37 = *(unsigned int *)(a1 + 584);
      if (*v36 <= v37)
      {
        *long long v36 = v37 + 1;
        unint64_t v38 = v36[2];
        unint64_t v39 = v36[1] * (v37 + 1);
        unint64_t v40 = (uint64_t)(v36[3] - v38) >> 2;
        if (v39 <= v40)
        {
          if (v39 < v40) {
            v36[3] = v38 + 4 * v39;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v36 + 2), v39 - v40);
        }
      }
      if (*(_DWORD *)(v36[2] + 4 * (v36[1] * v37 + v34)) != 0x7FFFFFFF) {
        break;
      }
      ++v35;
      v34 += 2;
      if (v33 == v35) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v30)) {
      int v35 = *(_DWORD *)(a1 + 124) + v30;
    }
    else {
      int v35 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v35;
  int v41 = *(_DWORD *)(a1 + 120);
  int v42 = v41 / -10;
  int v43 = v41 % 10;
  if (v41 < 0) {
    char v44 = -5;
  }
  else {
    char v44 = 5;
  }
  sub_AC4CB4(v89, v42 + v10 + (((-103 * (char)(v44 + v43)) >> 15) & 1) + ((-103 * (char)(v44 + v43)) >> 10));
  return v92;
}

void sub_AC4724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_AC4898(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_13;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    unsigned int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned int v11 = *(unint64_t **)(a1 + 592);
      unint64_t v12 = *(unsigned int *)(a1 + 584);
      if (*v11 <= v12)
      {
        *unsigned int v11 = v12 + 1;
        unint64_t v13 = v11[2];
        unint64_t v14 = v11[1] * (v12 + 1);
        unint64_t v15 = (uint64_t)(v11[3] - v13) >> 2;
        if (v14 <= v15)
        {
          if (v14 < v15) {
            v11[3] = v13 + 4 * v14;
          }
        }
        else
        {
          sub_5BBEE0((uint64_t)(v11 + 2), v14 - v15);
        }
      }
      if (*(_DWORD *)(v11[2] + 4 * (v11[1] * v12 + v9)) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v16 = *(_OWORD *)(a1 + 104);
  v42[0] = *(_OWORD *)(a1 + 88);
  v42[1] = v16;
  DWORD1(v42[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_AC4F70(a1 + 1336, v42);
  sub_AC5220((void *)(a1 + 1336), (uint64_t)v34);
  sub_C50C4C(a1 + 160, a1 + 1800, (uint64_t)&__p);
  if (v33 < 0) {
    operator delete(__p);
  }
  unint64_t v17 = *(void *)(a1 + 1944);
  *(void *)(a1 + 304) -= v17;
  unint64_t v18 = *(void *)(a1 + 1968);
  if (v18 <= v17) {
    unint64_t v18 = v17;
  }
  *(void *)(a1 + 1968) = v18;
  sub_A4D564((uint64_t)v30, (uint64_t)v35, (uint64_t)v36, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v30);
    sub_188FC78(v30, (uint64_t)"[", 1);
    long long v19 = (void *)std::ostream::operator<<();
    sub_188FC78(v19, (uint64_t)"] McSPA scanned ", 16);
    char v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)" stop patterns and obtained ", 28);
    char v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" journeys in ", 13);
    int v22 = (void *)std::ostream::operator<<();
    int v23 = sub_188FC78(v22, (uint64_t)" ms using ", 10);
    uint64_t v24 = (void *)sub_38EC58((uint64_t)v23, (unint64_t *)(a1 + 1944));
    sub_188FC78(v24, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v28, 2u);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v31 < 0) {
      operator delete((void *)v30[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  unint64_t v25 = (char *)v35;
  if (v35)
  {
    uint64_t v26 = v36;
    int v27 = v35;
    if (v36 != v35)
    {
      do
      {
        v26 -= 296;
        sub_9F5E28((uint64_t)&v37, (uint64_t)v26);
      }
      while (v26 != v25);
      int v27 = v35;
    }
    long long v36 = v25;
    operator delete(v27);
  }
}

void sub_AC4C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_AC4CB4(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *(_DWORD *)(v2 + 4) = a2;
  sub_A3C368(v3 + 608, (_OWORD *)v2);
  sub_C50C4C(v3 + 160, v3 + 1184, (uint64_t)&v20);
  if (v21 < 0) {
    operator delete(v20);
  }
  unint64_t v4 = *(void *)(v3 + 1328);
  *(void *)(v3 + 304) -= v4;
  unint64_t v5 = *(void *)(v3 + 1960);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  *(void *)(v3 + 1960) = v5;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v18);
    sub_188FC78(v18, (uint64_t)"[", 1);
    int v6 = (void *)std::ostream::operator<<();
    sub_188FC78(v6, (uint64_t)"] Secondary SPA scanned ", 24);
    int v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" stop patterns and obtained ", 28);
    int v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" journeys in ", 13);
    unsigned int v9 = (void *)std::ostream::operator<<();
    int v10 = sub_188FC78(v9, (uint64_t)" ms using ", 10);
    unsigned int v11 = (void *)sub_38EC58((uint64_t)v10, (unint64_t *)(v3 + 1328));
    sub_188FC78(v11, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v12 = *(unsigned int *)(v3 + 1040);
  uint64_t v13 = *(void *)(v3 + 800);
  unint64_t v14 = (*(void *)(v3 + 808) - v13) >> 2;
  if (v14 <= v12)
  {
    sub_5BBEE0(v3 + 800, v12 - v14 + 1);
    uint64_t v13 = *(void *)(v3 + 800);
  }
  return *(unsigned int *)(v13 + 4 * v12);
}

void sub_AC4F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_AC4F70(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v37);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 64) = *a2;
  *(_OWORD *)(a1 + 80) = v4;
  sub_AC7720(a1);
  uint64_t v5 = *(void *)(a1 + 32);
  v38[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 352) = sub_A3B520(v5, v38);
  sub_AC7918(a1);
  if (*(_DWORD *)(a1 + 100) >= 2u)
  {
    uint64_t v6 = 1;
    while (1)
    {
      if (v6)
      {
        char v17 = *(unsigned int **)(a1 + 256);
        unint64_t v18 = *(unsigned int **)(a1 + 264);
        if (v17 != v18)
        {
          uint64_t v19 = *(void *)(a1 + 232);
          char v20 = *(unsigned int **)(a1 + 256);
          do
          {
            unsigned int v21 = *v20++;
            *(void *)(v19 + (((unint64_t)v21 >> 3) & 0x1FFFFFF8)) &= ~(1 << v21);
          }
          while (v20 != v18);
        }
        *(void *)(a1 + 264) = v17;
        sub_AC7A80(a1, v6);
        sub_AC7DA8(a1, v6);
        uint64_t v16 = *(void *)(a1 + 256);
        if (v16 == *(void *)(a1 + 264)) {
          goto LABEL_22;
        }
        uint64_t v15 = *(void *)(a1 + 208);
      }
      else
      {
        int v7 = *(unsigned int **)(a1 + 208);
        int v8 = *(unsigned int **)(a1 + 216);
        if (v7 != v8)
        {
          uint64_t v9 = *(void *)(a1 + 184);
          int v10 = *(unsigned int **)(a1 + 208);
          do
          {
            unsigned int v11 = *v10++;
            *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
          }
          while (v10 != v8);
        }
        *(void *)(a1 + 216) = v7;
        sub_AC91D8(a1);
        sub_725D0((uint64_t)v38);
        unint64_t v12 = *(unsigned int **)(a1 + 328);
        uint64_t v13 = *(unsigned int **)(a1 + 336);
        while (v12 != v13)
        {
          unsigned int v14 = *v12++;
          sub_ACA93C(a1, v6, v14);
        }
        *(double *)(a1 + 496) = sub_72688((uint64_t)v38) + *(double *)(a1 + 496);
        uint64_t v15 = *(void *)(a1 + 208);
        if (v15 == *(void *)(a1 + 216)) {
          goto LABEL_22;
        }
        uint64_t v16 = *(void *)(a1 + 256);
      }
      uint64_t v35 = *(void *)(a1 + 144);
      uint64_t v36 = *(void *)(a1 + 104);
      uint64_t v33 = 8 * (*(void *)(a1 + 168) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v34 = *(void *)(a1 + 128);
      uint64_t v31 = *(void *)(a1 + 120);
      uint64_t v32 = 8 * (*(void *)(a1 + 200) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v22 = *(void *)(a1 + 224);
      uint64_t v23 = *(void *)(a1 + 296);
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v29 = *(void *)(a1 + 280);
      uint64_t v30 = 8 * (*(void *)(a1 + 248) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v28 = *(void *)(a1 + 328);
      uint64_t v25 = 8 * (*(void *)(a1 + 320) & 0x3FFFFFFFFFFFFFFLL);
      uint64_t v26 = *(void *)(a1 + 344);
      unint64_t v27 = v31
          + v35
          - (v36
           + v34)
          + v33
          + v22
          + v32
          - v15
          + v24
          + v30
          + v23
          - (v16
           + v29)
          + v25
          + v26
          - v28
          + sub_BD6170((void *)(a1 + 360))
          + 616;
      if (*(void *)(a1 + 608) > v27) {
        unint64_t v27 = *(void *)(a1 + 608);
      }
      *(void *)(a1 + 608) = v27;
      if (!sub_AC039C(a1) && ++v6 < (unint64_t)*(unsigned int *)(a1 + 100)) {
        continue;
      }
      goto LABEL_22;
    }
  }
  LODWORD(v6) = 1;
LABEL_22:
  sub_ACA138(a1);
  *(double *)(a1 + 536) = (double)v6;
  *(double *)(a1 + 488) = sub_72688((uint64_t)v37);
}

std::string *sub_AC5220@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  unsigned int v296 = (uint64_t *)(a2 + 8);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v333) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v294 = (std::string *)(a2 + 32);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v333) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *((unsigned char *)a1 + 64);
  unsigned int v4 = *((_DWORD *)a1 + 25);
  if (v4 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = *((_DWORD *)a1 + 25);
  }
  int v295 = v5;
  if (v4 >= 2)
  {
    int v7 = (void **)(a1 + 13);
    __asm { FMOV            V0.2D, #1.0 }
    long long v298 = _Q0;
    int v297 = 1;
    long long v304 = a1;
    size_t v303 = (void **)(a1 + 13);
    while (1)
    {
      sub_A86790(v7, 0);
      sub_ACA858(v7, v297 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * *((_DWORD *)a1 + 88) + 2, 0);
      unsigned int v11 = (unsigned int *)a1[13];
      if ((unsigned int *)a1[14] == v11)
      {
        sub_D2BFC(v7, 1uLL);
        unsigned int v11 = (unsigned int *)a1[13];
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
        if ((unsigned int *)a1[14] == v11)
        {
          sub_D2BFC(v7, 1uLL);
          unint64_t v299 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 4) << 6);
          long long v300 = (unsigned int *)(v12 + (v13 << 6));
          if (v300 != (unsigned int *)v299) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = a1[16];
        uint64_t v13 = *v11;
      }
      unint64_t v299 = v12 + ((unint64_t)v11[1] << 6);
      long long v300 = (unsigned int *)(v12 + (v13 << 6));
      if (v300 != (unsigned int *)v299) {
        break;
      }
LABEL_9:
      if (++v297 == v295) {
        goto LABEL_7;
      }
    }
    while (1)
    {
LABEL_18:
      LOWORD(__p[0]) = 0;
      BYTE2(__p[0]) = 0;
      *(void *)&__p[1] = 0;
      *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
      int v333 = 0x7FFFFFFF;
      __int16 v334 = 0;
      unint64_t v335 = 0x8000000080000000;
      __int16 v336 = 0;
      unint64_t v337 = 0x8000000080000000;
      int v338 = 0x7FFFFFFF;
      __int16 v339 = 0;
      unint64_t v340 = 0x8000000080000000;
      __int16 v341 = 0;
      unint64_t v342 = 0x8000000080000000;
      __int16 v343 = 0;
      unint64_t v344 = 0xFFFFFFFF00000000;
      int v345 = -1;
      uint64_t v346 = 0;
      uint64_t v348 = 0;
      uint64_t v349 = 0;
      uint64_t v350 = 0;
      int v347 = 0x7FFFFFFF;
      int v351 = 100;
      int v352 = -1;
      long long v353 = v298;
      long long v354 = v298;
      long long v355 = v298;
      long long v356 = 0u;
      long long v357 = 0u;
      long long v358 = 0u;
      long long v359 = 0u;
      uint64_t v14 = a1[3];
      long long v360 = 0u;
      long long v361 = 0u;
      if (sub_C259C0(v14 + 3896) && *(void *)(v14 + 3944))
      {
        BOOL v15 = 1;
      }
      else
      {
        uint64_t v16 = a1[3];
        BOOL v15 = sub_C259D4(v16 + 3896) && *(void *)(v16 + 3960) != 0;
      }
      BYTE1(__p[0]) = v15;
      uint64_t v17 = a1[3];
      if (sub_C259D4(v17 + 3896))
      {
        __p[1] = 2 * (*(void *)(v17 + 3960) != 0);
        if (*v300 != -1) {
          break;
        }
        goto LABEL_397;
      }
      __p[1] = 0;
      if (*v300 != -1) {
        break;
      }
LABEL_397:
      sub_A29D50((uint64_t)__p);
      unint64_t v268 = *(void *)(v3 + 16);
      if (v268 >= *(void *)(v3 + 24))
      {
        uint64_t v269 = sub_A4D268(v296, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v269 = v268 + 296;
        *(void *)(v3 + 16) = v268 + 296;
      }
      int v7 = v303;
      *(void *)(v3 + 16) = v269;
      if (*((void *)&v360 + 1))
      {
        *(void *)&long long v361 = *((void *)&v360 + 1);
        operator delete(*((void **)&v360 + 1));
      }
      if ((void)v359)
      {
        *((void *)&v359 + 1) = v359;
        operator delete((void *)v359);
      }
      if (*((void *)&v357 + 1))
      {
        *(void *)&long long v358 = *((void *)&v357 + 1);
        operator delete(*((void **)&v357 + 1));
      }
      unint64_t v270 = (void **)v356;
      if ((void)v356)
      {
        uint64_t v271 = *((void *)&v356 + 1);
        long long v272 = (void *)v356;
        if (*((void *)&v356 + 1) != (void)v356)
        {
          do
          {
            uint64_t v274 = *(void **)(v271 - 40);
            if (v274)
            {
              *(void *)(v271 - 32) = v274;
              operator delete(v274);
            }
            int v275 = (void **)(v271 - 72);
            uint64_t v276 = *(void *)(v271 - 72);
            if (v276)
            {
              uint64_t v277 = *(void *)(v271 - 64);
              unsigned int v273 = *(void **)(v271 - 72);
              if (v277 != v276)
              {
                do
                {
                  if (!*(_DWORD *)(v277 - 8))
                  {
                    unsigned int v278 = *(void **)(v277 - 48);
                    if (v278)
                    {
                      *(void *)(v277 - 40) = v278;
                      operator delete(v278);
                    }
                    int v279 = *(void **)(v277 - 80);
                    if (v279)
                    {
                      *(void *)(v277 - 72) = v279;
                      operator delete(v279);
                    }
                    unsigned __int8 v280 = *(void **)(v277 - 104);
                    if (v280)
                    {
                      *(void *)(v277 - 96) = v280;
                      operator delete(v280);
                    }
                  }
                  v277 -= 168;
                }
                while (v277 != v276);
                unsigned int v273 = *v275;
              }
              *(void *)(v271 - 64) = v276;
              operator delete(v273);
              a1 = v304;
            }
            v271 -= 72;
          }
          while (v275 != v270);
          long long v272 = (void *)v356;
        }
        *((void *)&v356 + 1) = v270;
        operator delete(v272);
      }
      if (SHIBYTE(v350) < 0) {
        operator delete(v348);
      }
      v300 += 16;
      if (v300 == (unsigned int *)v299) {
        goto LABEL_9;
      }
    }
    unint64_t v18 = v300;
    int v306 = v297;
    unsigned int v307 = *((_DWORD *)a1 + 88);
    while (1)
    {
      unint64_t v324 = 0;
      int v325 = 0;
      unint64_t v326 = 0;
      char v329 = 0;
      uint64_t v330 = 0;
      unint64_t v328 = 0;
      v331[0] = 1;
      *(void *)&v331[4] = 0x8000000080000000;
      *(_WORD *)&v331[12] = 0;
      v331[14] = 0;
      int v383 = -1;
      if (v18[4] == -1) {
        goto LABEL_269;
      }
      long long v308 = xmmword_20E12E0;
      __int16 v309 = 0;
      unint64_t v310 = 0x8000000080000000;
      __int16 v311 = 0;
      *(_OWORD *)unint64_t v312 = xmmword_20EB6B0;
      *(void *)&v312[16] = 0xFFFFFFFF7FFFFFFFLL;
      long long v314 = 0u;
      long long v315 = 0u;
      long long v316 = 0u;
      int v313 = -1;
      int v317 = 0x7FFFFFFF;
      int v319 = 0;
      uint64_t v320 = 0;
      long long v318 = 0;
      char v321 = 1;
      unint64_t v322 = 0x8000000080000000;
      int v323 = 0;
      char v327 = 0;
      uint64_t v20 = *(void *)sub_A3F32C((void *)(a1[5] + 88), v18[4]);
      *(void *)unint64_t v312 = v20;
      uint64_t v21 = *(void *)(v18 + 1);
      *(_DWORD *)&v312[16] = v18[3];
      *(void *)&v312[8] = v21;
      int v313 = *v18;
      unsigned int v22 = v313;
      uint64_t v23 = a1[3];
      uint64_t v362 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      sub_A1E9A0((uint64_t)v363, v23, v20, v22, 0, 0);
      *(void *)&long long v365 = *(void *)&v364[24] + 12 * *(unsigned int *)&v312[8];
      if (LOBYTE(v367[1])) {
        *(void **)((char *)&v367[1] + 4) = *(void **)&v312[12];
      }
      if (*(void *)&v364[16]) {
        uint64_t v24 = *(unsigned int *)(*(void *)&v364[16]
      }
                              + 4 * ((*(void *)v364 - *(void *)&v363[24]) >> 4));
      else {
        uint64_t v24 = 0;
      }
      sub_A56ED0((uint64_t)v363, &v362, v24);
      _CF = *(void *)v364 < *(void *)&v364[8] && *(void *)v364 >= *(void *)&v363[24];
      uint64_t v26 = (*(void *)v364 - *(void *)&v363[24]) >> 4;
      if (!_CF) {
        LODWORD(v26) = -1;
      }
      *(_DWORD *)&v312[20] = v26;
      uint64_t v27 = a1[4];
      uint64_t v28 = (void *)(a1[3] + 4136);
      unint64_t v29 = *(void *)v312;
      unsigned int v30 = v313;
      uint64_t v31 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v28, *(int *)&v312[4]))
      {
        uint64_t v32 = (int *)sub_A1120C(*(void *)(*v28 + 3944), v29);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v264 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v33 = *v28;
        if (dword_24F7300 == v31)
        {
          uint64_t v34 = *(unsigned int **)(*(void *)(v33 + 3976) + 72);
          if (!v34)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            char v289 = (void *)sub_2F404((uint64_t)exception, (long long *)v363);
          }
          uint64_t v35 = (int *)((char *)v34 + *v34);
          uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
          if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0) {
            unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
          }
          else {
            unint64_t v38 = 0;
          }
          uint64_t v32 = (int *)sub_A1139C(v38, v29);
        }
        else
        {
          uint64_t v32 = (int *)sub_A11500(v33 + 24, v29, 0, "stop pattern");
        }
      }
      char v39 = (unsigned __int16 *)((char *)v32 - *v32);
      if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
        int v41 = (unsigned int *)((char *)v32 + v40 + *(unsigned int *)((char *)v32 + v40));
      }
      else {
        int v41 = 0;
      }
      unint64_t v42 = __ROR8__(*(void *)sub_A10764(v41, v30), 32);
      uint64_t v43 = *(void *)(v27 + 56) - 1;
      unint64_t v44 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v42 ^ (v42 >> 33))) >> 33));
      unint64_t v45 = v44 ^ (v44 >> 33);
      uint64_t v46 = *(void *)(v27 + 80);
      int v48 = *(_DWORD *)(v27 + 64);
      int v47 = *(_DWORD *)(v27 + 68);
      uint64_t v49 = v45 & v43;
      char v50 = (unsigned int *)(v46 + 12 * (v45 & v43));
      unsigned int v52 = *v50;
      unsigned int v51 = v50[1];
      if (v47 == v51 && v48 == v52) {
        goto LABEL_77;
      }
      if (*(void *)(v27 + 40)) {
        break;
      }
      uint64_t v78 = 1;
      while (__PAIR64__(v51, v52) != v42)
      {
        uint64_t v49 = (v49 + v78) & v43;
        uint64_t v79 = (unsigned int *)(v46 + 12 * v49);
        unsigned int v52 = *v79;
        unsigned int v51 = v79[1];
        ++v78;
        if (v47 == v51 && v48 == v52) {
          goto LABEL_77;
        }
      }
      a1 = v304;
      if (v49 != -1)
      {
LABEL_74:
        uint64_t v58 = v46 + 12 * v49;
        unsigned int v307 = *(_DWORD *)(v58 + 8);
        if (v307 != -1) {
          goto LABEL_159;
        }
        goto LABEL_126;
      }
LABEL_112:
      uint64_t v54 = -1;
LABEL_78:
      if (sub_A3BA84(v27, 1))
      {
        uint64_t v59 = *(void *)(v27 + 56) - 1;
        uint64_t v60 = *(void *)(v27 + 80);
        int v62 = *(_DWORD *)(v27 + 64);
        int v61 = *(_DWORD *)(v27 + 68);
        uint64_t v63 = v59 & v45;
        int v64 = (unsigned int *)(v60 + 12 * (v59 & v45));
        unsigned int v66 = *v64;
        unsigned int v65 = v64[1];
        uint64_t v67 = *(void *)(v27 + 40);
        if (v61 == v65 && v62 == v66)
        {
          a1 = v304;
        }
        else
        {
          if (!v67)
          {
            uint64_t v99 = 1;
            a1 = v304;
            while (__PAIR64__(v65, v66) != v42)
            {
              uint64_t v63 = (v63 + v99) & v59;
              uint64_t v100 = (unsigned int *)(v60 + 12 * v63);
              unsigned int v66 = *v100;
              unsigned int v65 = v100[1];
              ++v99;
              if (v61 == v65 && v62 == v66)
              {
                uint64_t v67 = 0;
                uint64_t v69 = v63;
                unint64_t v77 = *(void *)(v27 + 48);
                if (v77 >= 0x1555555555555555) {
                  goto LABEL_431;
                }
                goto LABEL_117;
              }
            }
LABEL_145:
            if (v63 != -1)
            {
              uint64_t v58 = v60 + 12 * v63;
              unsigned int v307 = *(_DWORD *)(v58 + 8);
              if (v307 != -1) {
                goto LABEL_159;
              }
              goto LABEL_126;
            }
            uint64_t v69 = -1;
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555)
            {
LABEL_431:
              __int16 v285 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v285, "insert overflow");
            }
            goto LABEL_117;
          }
          uint64_t v69 = -1;
          uint64_t v70 = 1;
          a1 = v304;
          do
          {
            if (*(_DWORD *)(v27 + 36) == v65 && *(_DWORD *)(v27 + 32) == v66)
            {
              if (v69 == -1) {
                uint64_t v69 = v63;
              }
            }
            else if (__PAIR64__(v65, v66) == v42)
            {
              goto LABEL_145;
            }
            uint64_t v63 = (v63 + v70) & v59;
            int v71 = (unsigned int *)(v60 + 12 * v63);
            unsigned int v66 = *v71;
            unsigned int v65 = v71[1];
            ++v70;
          }
          while (v61 != v65 || v62 != v66);
          if (v69 != -1)
          {
            unint64_t v77 = *(void *)(v27 + 48);
            if (v77 - v67 >= 0x1555555555555555) {
              goto LABEL_431;
            }
LABEL_117:
            if (v67
              && ((char v82 = (_DWORD *)(v60 + 12 * v69), *(_DWORD *)(v27 + 36) == v82[1])
                ? (BOOL v83 = *(_DWORD *)(v27 + 32) == *v82)
                : (BOOL v83 = 0),
                  v83))
            {
              *(void *)(v27 + 40) = v67 - 1;
            }
            else
            {
              *(void *)(v27 + 48) = v77 + 1;
            }
            uint64_t v81 = 3 * v69;
            goto LABEL_125;
          }
        }
        uint64_t v69 = v63;
        unint64_t v77 = *(void *)(v27 + 48);
        if (v77 - v67 >= 0x1555555555555555) {
          goto LABEL_431;
        }
        goto LABEL_117;
      }
      uint64_t v74 = *(void *)(v27 + 40);
      uint64_t v73 = *(void *)(v27 + 48);
      if ((unint64_t)(v73 - v74) >= 0x1555555555555555) {
        goto LABEL_431;
      }
      uint64_t v60 = *(void *)(v27 + 80);
      if (v74
        && ((uint64_t v75 = (_DWORD *)(v60 + 12 * v54), *(_DWORD *)(v27 + 36) == v75[1])
          ? (BOOL v76 = *(_DWORD *)(v27 + 32) == *v75)
          : (BOOL v76 = 0),
            v76))
      {
        *(void *)(v27 + 40) = v74 - 1;
      }
      else
      {
        *(void *)(v27 + 48) = v73 + 1;
      }
      a1 = v304;
      uint64_t v81 = 3 * v54;
LABEL_125:
      uint64_t v84 = 4 * v81;
      uint64_t v85 = v60 + v84;
      *(void *)uint64_t v85 = v42;
      *(_DWORD *)(v85 + 8) = -1;
      uint64_t v58 = *(void *)(v27 + 80) + v84;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
      if (v307 != -1) {
        goto LABEL_159;
      }
LABEL_126:
      int v86 = *(_DWORD *)(v27 + 112);
      *(_DWORD *)(v27 + 112) = v86 + 1;
      *(_DWORD *)(v58 + 8) = v86;
      char v88 = *(char **)(v27 + 96);
      unint64_t v87 = *(void *)(v27 + 104);
      if ((unint64_t)v88 < v87)
      {
        *(void *)char v88 = v42;
        uint64_t v89 = (uint64_t)(v88 + 8);
        goto LABEL_158;
      }
      uint64_t v90 = *(char **)(v27 + 88);
      uint64_t v91 = (v88 - v90) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v93 = v87 - (void)v90;
      if (v93 >> 2 > v92) {
        unint64_t v92 = v93 >> 2;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        if (v94 >> 61) {
          sub_188D718();
        }
        unint64_t v95 = v94;
        uint64_t v96 = (char *)operator new(8 * v94);
        unint64_t v94 = v95;
        int v97 = &v96[8 * v91];
        *(void *)int v97 = v42;
        uint64_t v89 = (uint64_t)(v97 + 8);
        if (v88 == v90)
        {
LABEL_149:
          a1 = v304;
          *(void *)(v27 + 88) = v97;
          *(void *)(v27 + 96) = v89;
          *(void *)(v27 + 104) = &v96[8 * v94];
          if (!v88) {
            goto LABEL_158;
          }
LABEL_157:
          operator delete(v88);
          goto LABEL_158;
        }
      }
      else
      {
        uint64_t v96 = 0;
        int v97 = (char *)(8 * v91);
        *(void *)(8 * v91) = v42;
        uint64_t v89 = 8 * v91 + 8;
        if (v88 == v90) {
          goto LABEL_149;
        }
      }
      unint64_t v98 = v88 - 8 - v90;
      if (v98 < 0x58)
      {
        a1 = v304;
        do
        {
LABEL_155:
          uint64_t v109 = *((void *)v88 - 1);
          v88 -= 8;
          *((void *)v97 - 1) = v109;
          v97 -= 8;
        }
        while (v88 != v90);
        goto LABEL_156;
      }
      a1 = v304;
      if ((unint64_t)(v90 - v96) < 0x20) {
        goto LABEL_155;
      }
      uint64_t v102 = (v98 >> 3) + 1;
      uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
      int v104 = &v88[-v103];
      v97 -= v103;
      int v105 = &v96[8 * v91 - 16];
      uint64_t v106 = (long long *)(v88 - 16);
      uint64_t v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v108 = *v106;
        *((_OWORD *)v105 - 1) = *(v106 - 1);
        *(_OWORD *)int v105 = v108;
        v105 -= 32;
        v106 -= 2;
        v107 -= 4;
      }
      while (v107);
      char v88 = v104;
      if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_155;
      }
LABEL_156:
      char v88 = *(char **)(v27 + 88);
      *(void *)(v27 + 88) = v97;
      *(void *)(v27 + 96) = v89;
      *(void *)(v27 + 104) = &v96[8 * v94];
      if (v88) {
        goto LABEL_157;
      }
LABEL_158:
      *(void *)(v27 + 96) = v89;
      unsigned int v307 = *(_DWORD *)(v58 + 8);
LABEL_159:
      int v110 = (void *)(a1[3] + 4136);
      unint64_t v111 = *(void *)v312;
      unsigned int v112 = *(_DWORD *)&v312[20];
      uint64_t v113 = HIDWORD(*(void *)v312);
      if (sub_A10E20(v110, *(int *)&v312[4]))
      {
        uint64_t v114 = (int *)sub_A1120C(*(void *)(*v110 + 3944), v111);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v265 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v115 = *v110;
        if (dword_24F7300 == v113)
        {
          unint64_t v116 = *(unsigned int **)(*(void *)(v115 + 3976) + 72);
          if (!v116)
          {
            v292 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
            unint64_t v293 = (void *)sub_2F404((uint64_t)v292, (long long *)v363);
          }
          uint64_t v117 = (int *)((char *)v116 + *v116);
          unint64_t v118 = (unsigned __int16 *)((char *)v117 - *v117);
          if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0) {
            size_t v120 = (unsigned int *)((char *)v117 + v119 + *(unsigned int *)((char *)v117 + v119));
          }
          else {
            size_t v120 = 0;
          }
          uint64_t v114 = (int *)sub_A1139C(v120, v111);
        }
        else
        {
          uint64_t v114 = (int *)sub_A11500(v115 + 24, v111, 0, "stop pattern");
        }
      }
      unint64_t v121 = (unsigned __int16 *)((char *)v114 - *v114);
      if (*v121 >= 9u && (uint64_t v122 = v121[4]) != 0) {
        uint64_t v123 = (unsigned int *)((char *)v114 + v122 + *(unsigned int *)((char *)v114 + v122));
      }
      else {
        uint64_t v123 = 0;
      }
      DWORD1(v308) = 10 * *(_DWORD *)(sub_A10764(v123, v112) + 8);
      uint64_t v124 = a1[3];
      unint64_t v125 = *(void *)v312;
      unint64_t v126 = (uint64_t *)(v124 + 4136);
      unsigned int v127 = *(_DWORD *)&v312[20];
      int v128 = *(_DWORD *)&v312[8];
      uint64_t v129 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v124 + 4136), *(int *)&v312[4]))
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(*v126 + 3944) + 72);
        if (!v130)
        {
          __int16 v281 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          char v282 = (void *)sub_2F404((uint64_t)v281, (long long *)v363);
        }
        goto LABEL_180;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v266 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v131 = *v126;
      if (dword_24F7300 == v129)
      {
        uint64_t v130 = *(unsigned int **)(*(void *)(v131 + 3976) + 72);
        if (!v130)
        {
          char v286 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          unsigned int v287 = (void *)sub_2F404((uint64_t)v286, (long long *)v363);
        }
LABEL_180:
        int v132 = (char *)v130 + *v130;
        uint64_t v133 = &v132[-*(int *)v132];
        if (*(unsigned __int16 *)v133 < 5u) {
          goto LABEL_184;
        }
        goto LABEL_181;
      }
      int v132 = sub_A10B80(v131 + 24, v125, 0);
      uint64_t v133 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v133 < 5u)
      {
LABEL_184:
        uint64_t v134 = 0;
        goto LABEL_185;
      }
LABEL_181:
      uint64_t v134 = *((unsigned __int16 *)v133 + 2);
      if (v134) {
        v134 += (uint64_t)&v132[*(unsigned int *)&v132[v134]];
      }
LABEL_185:
      unint64_t v135 = (int *)(v134 + 4 * v125 + 4 + *(unsigned int *)(v134 + 4 * v125 + 4));
      int v136 = (unsigned __int16 *)((char *)v135 - *v135);
      if (*v136 >= 9u && (uint64_t v137 = v136[4]) != 0) {
        unsigned int v138 = (unsigned int *)((char *)v135 + v137 + *(unsigned int *)((char *)v135 + v137));
      }
      else {
        unsigned int v138 = 0;
      }
      uint64_t v139 = sub_A10764(v138, v127);
      uint64_t v140 = &v132[-*(int *)v132];
      if (*(unsigned __int16 *)v140 < 0xBu)
      {
        int v141 = 0;
        unsigned int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u) {
          goto LABEL_196;
        }
      }
      else
      {
        int v141 = (unsigned int *)*((unsigned __int16 *)v140 + 5);
        if (v141) {
          int v141 = (unsigned int *)((char *)v141 + (void)v132 + *(unsigned int *)((char *)v141 + (void)v132));
        }
        unsigned int v142 = (unsigned __int16 *)((char *)v135 - *v135);
        if (*v142 < 0x11u)
        {
LABEL_196:
          LODWORD(v143) = 0;
          goto LABEL_197;
        }
      }
      uint64_t v143 = v142[8];
      if (v142[8]) {
        LODWORD(v143) = *(int *)((char *)v135 + v143);
      }
LABEL_197:
      uint64_t v144 = sub_A108C4(v141, v143+ *(int *)((char *)v135 + v142[2] + *(unsigned int *)((char *)v135 + v142[2])) * v128+ *(unsigned __int8 *)(v139 + 14));
      if (v144)
      {
        uint64_t v145 = __ROR8__(*(void *)v144, 32);
        int v146 = *(_DWORD *)(v144 + 8);
      }
      else
      {
        int v146 = 0;
        uint64_t v145 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v145;
      *(_DWORD *)&v363[8] = v146;
      unint64_t v147 = (int *)sub_A11094((void *)(v124 + 4136), v125);
      unint64_t v148 = (unsigned __int16 *)((char *)v147 - *v147);
      if (*v148 >= 9u && (uint64_t v149 = v148[4]) != 0) {
        unint64_t v150 = (unsigned int *)((char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149));
      }
      else {
        unint64_t v150 = 0;
      }
      unsigned int v151 = *(unsigned __int16 *)(sub_A10764(v150, v127) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v152 = 0x7FFFFFFF;
      }
      else {
        int v152 = *(_DWORD *)&v312[16];
      }
      *((void *)&v308 + 1) = sub_A0FAA0((uint64_t *)(v124 + 4184), (unsigned int *)v363, v151, v152);
      __int16 v309 = v153;
      uint64_t v154 = a1[3];
      unint64_t v155 = *(void *)v312;
      uint64_t v156 = (uint64_t *)(v154 + 4136);
      unsigned int v157 = v313;
      int v158 = *(_DWORD *)&v312[8];
      uint64_t v159 = HIDWORD(*(void *)v312);
      if (sub_A10E20((void *)(v154 + 4136), *(int *)&v312[4]))
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(*v156 + 3944) + 72);
        if (!v160)
        {
          unint64_t v283 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Incident stop pattern quad data requested on nullptr buffer");
          int v284 = (void *)sub_2F404((uint64_t)v283, (long long *)v363);
        }
        goto LABEL_213;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v267 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v161 = *v156;
      if (dword_24F7300 == v159)
      {
        uint64_t v160 = *(unsigned int **)(*(void *)(v161 + 3976) + 72);
        if (!v160)
        {
          uint64_t v290 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v363, "Realtime stop pattern quad data requested on nullptr buffer");
          unint64_t v291 = (void *)sub_2F404((uint64_t)v290, (long long *)v363);
        }
LABEL_213:
        unint64_t v162 = (char *)v160 + *v160;
        uint64_t v163 = &v162[-*(int *)v162];
        if (*(unsigned __int16 *)v163 < 5u) {
          goto LABEL_217;
        }
        goto LABEL_214;
      }
      unint64_t v162 = sub_A10B80(v161 + 24, v155, 0);
      uint64_t v163 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v163 < 5u)
      {
LABEL_217:
        uint64_t v164 = 0;
        goto LABEL_218;
      }
LABEL_214:
      uint64_t v164 = *((unsigned __int16 *)v163 + 2);
      if (v164) {
        v164 += (uint64_t)&v162[*(unsigned int *)&v162[v164]];
      }
LABEL_218:
      uint64_t v165 = (int *)(v164 + 4 * v155 + 4 + *(unsigned int *)(v164 + 4 * v155 + 4));
      long long v166 = (unsigned __int16 *)((char *)v165 - *v165);
      if (*v166 >= 9u && (uint64_t v167 = v166[4]) != 0) {
        uint64_t v168 = (unsigned int *)((char *)v165 + v167 + *(unsigned int *)((char *)v165 + v167));
      }
      else {
        uint64_t v168 = 0;
      }
      uint64_t v169 = sub_A10764(v168, v157);
      uint64_t v170 = &v162[-*(int *)v162];
      if (*(unsigned __int16 *)v170 < 0xBu)
      {
        uint64_t v171 = 0;
        int32x2_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v171 = (unsigned int *)*((unsigned __int16 *)v170 + 5);
        if (v171) {
          uint64_t v171 = (unsigned int *)((char *)v171 + (void)v162 + *(unsigned int *)((char *)v171 + (void)v162));
        }
        int32x2_t v172 = (unsigned __int16 *)((char *)v165 - *v165);
        if (*v172 < 0x11u)
        {
LABEL_229:
          LODWORD(v173) = 0;
          goto LABEL_230;
        }
      }
      uint64_t v173 = v172[8];
      if (v172[8]) {
        LODWORD(v173) = *(int *)((char *)v165 + v173);
      }
LABEL_230:
      uint64_t v174 = sub_A108C4(v171, v173+ *(int *)((char *)v165 + v172[2] + *(unsigned int *)((char *)v165 + v172[2])) * v158+ *(unsigned __int8 *)(v169 + 14));
      if (v174)
      {
        uint64_t v175 = __ROR8__(*(void *)v174, 32);
        int v176 = *(_DWORD *)(v174 + 8);
      }
      else
      {
        int v176 = 0;
        uint64_t v175 = 0xFFFFFFFFLL;
      }
      *(void *)long long v363 = v175;
      *(_DWORD *)&v363[8] = v176;
      uint64_t v177 = (int *)sub_A11094((void *)(v154 + 4136), v155);
      int v178 = (unsigned __int16 *)((char *)v177 - *v177);
      if (*v178 >= 9u && (uint64_t v179 = v178[4]) != 0) {
        char v180 = (unsigned int *)((char *)v177 + v179 + *(unsigned int *)((char *)v177 + v179));
      }
      else {
        char v180 = 0;
      }
      unsigned int v181 = *(unsigned __int16 *)(sub_A10764(v180, v157) + 12);
      if (*(_DWORD *)&v312[12] == -1) {
        int v182 = 0x7FFFFFFF;
      }
      else {
        int v182 = *(_DWORD *)&v312[16];
      }
      unint64_t v310 = sub_A0FDF4((uint64_t *)(v154 + 4184), (unsigned int *)v363, v181, v182);
      __int16 v311 = v183;
      int v372 = -1;
      sub_9F6FA0((uint64_t)v363, &v308);
      int v372 = 0;
      if (v383)
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (v372) {
          goto LABEL_256;
        }
LABEL_250:
        if ((void)v369)
        {
          *((void *)&v369 + 1) = v369;
          operator delete((void *)v369);
        }
        if (v367[0])
        {
          v367[1] = v367[0];
          operator delete(v367[0]);
        }
        if ((void)v365)
        {
          *((void *)&v365 + 1) = v365;
          operator delete((void *)v365);
        }
        goto LABEL_256;
      }
      *(_OWORD *)long long v373 = *(_OWORD *)v363;
      *(_OWORD *)&v373[16] = *(_OWORD *)&v363[16];
      v374[0] = *(_OWORD *)v364;
      *(_OWORD *)((char *)v374 + 12) = *(_OWORD *)&v364[12];
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      *(_OWORD *)v375 = v365;
      uint64_t v376 = v366;
      uint64_t v366 = 0;
      long long v365 = 0uLL;
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      long long v377 = *(_OWORD *)v367;
      uint64_t v378 = v367[2];
      memset(v367, 0, sizeof(v367));
      int v379 = v368;
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      long long v380 = v369;
      uint64_t v381 = v370;
      uint64_t v370 = 0;
      long long v369 = 0uLL;
      long long v382 = v371;
      if (!v372) {
        goto LABEL_250;
      }
LABEL_256:
      if (v318)
      {
        int v319 = v318;
        operator delete(v318);
      }
      if (*((void *)&v315 + 1))
      {
        *(void *)&long long v316 = *((void *)&v315 + 1);
        operator delete(*((void **)&v315 + 1));
      }
      if ((void)v314)
      {
        *((void *)&v314 + 1) = v314;
        operator delete((void *)v314);
      }
      if (v18[4] != -1)
      {
        uint64_t v184 = (uint64_t)v325;
        if ((unint64_t)v325 >= v326) {
          goto LABEL_282;
        }
        goto LABEL_264;
      }
LABEL_269:
      char v327 = 1;
      unsigned int v187 = v18[7];
      unsigned int v188 = v18[3];
      uint64_t v189 = *(void *)sub_A3F32C((void *)(a1[4] + 88), v307);
      uint64_t v190 = *(void *)sub_A3F32C((void *)(a1[4] + 88), *v18);
      *(_DWORD *)long long v363 = 0;
      *(_DWORD *)&v363[4] = v187;
      *(void *)&v363[12] = v189;
      *(void *)&v363[20] = v190;
      *(_DWORD *)&v363[8] = v188;
      int v372 = 1;
      if (v383)
      {
        if (v383 == 1)
        {
          *(_OWORD *)long long v373 = *(_OWORD *)v363;
          *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
          goto LABEL_281;
        }
LABEL_280:
        *(_OWORD *)long long v373 = *(_OWORD *)v363;
        *(_OWORD *)&v373[12] = *(_OWORD *)&v363[12];
        int v383 = 1;
        goto LABEL_281;
      }
      if ((void)v380)
      {
        *((void *)&v380 + 1) = v380;
        operator delete((void *)v380);
      }
      if ((void)v377)
      {
        *((void *)&v377 + 1) = v377;
        operator delete((void *)v377);
      }
      if (v375[0])
      {
        v375[1] = v375[0];
        operator delete(v375[0]);
      }
      if (v372)
      {
        if (v372 == 1) {
          goto LABEL_280;
        }
        int v383 = v372;
      }
      else
      {
        sub_9F6FA0((uint64_t)v373, (long long *)v363);
        int v383 = v372;
        if (!v372)
        {
          if ((void)v369)
          {
            *((void *)&v369 + 1) = v369;
            operator delete((void *)v369);
          }
          if (v367[0])
          {
            v367[1] = v367[0];
            operator delete(v367[0]);
          }
          if ((void)v365)
          {
            *((void *)&v365 + 1) = v365;
            operator delete((void *)v365);
          }
        }
      }
LABEL_281:
      unsigned int v307 = *v18;
      uint64_t v184 = (uint64_t)v325;
      if ((unint64_t)v325 >= v326)
      {
LABEL_282:
        int v325 = (char *)sub_A4CBF4((uint64_t *)&v324, (uint64_t)v373);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
        goto LABEL_283;
      }
LABEL_264:
      *(_DWORD *)(v184 + 160) = v383;
      if (v383 == 1)
      {
        long long v222 = *(_OWORD *)v373;
        *(_OWORD *)(v184 + 12) = *(_OWORD *)&v373[12];
        *(_OWORD *)uint64_t v184 = v222;
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357) {
          goto LABEL_268;
        }
      }
      else
      {
        if (!v383) {
          sub_9F6FA0(v184, (long long *)v373);
        }
        int v325 = (char *)(v184 + 168);
        uint64_t v185 = *((void *)&v356 + 1);
        if (*((void *)&v356 + 1) >= (unint64_t)v357)
        {
LABEL_268:
          uint8x8_t v186 = sub_A4CECC((void ***)&v356, (uint64_t)&v324);
          goto LABEL_296;
        }
      }
LABEL_283:
      *(void *)uint64_t v185 = 0;
      *(void *)(v185 + 8) = 0;
      *(void *)(v185 + 16) = 0;
      unsigned int v191 = (char *)v324;
      unsigned int v192 = v325;
      int64_t v193 = v325 - (unsigned char *)v324;
      if (v325 != v324)
      {
        unint64_t v194 = 0xCF3CF3CF3CF3CF3DLL * (v193 >> 3);
        if (v194 >= 0x186186186186187) {
          sub_2E00();
        }
        unint64_t v195 = (char *)operator new(v193);
        uint64_t v196 = 0;
        *(void *)uint64_t v185 = v195;
        *(void *)(v185 + 8) = v195;
        *(void *)(v185 + 16) = &v195[168 * v194];
        a1 = v304;
        do
        {
          int v198 = (long long *)&v195[v196];
          uint64_t v199 = (long long *)&v191[v196];
          *(_DWORD *)&v195[v196 + 160] = *(_DWORD *)&v191[v196 + 160];
          int v200 = *(_DWORD *)&v191[v196 + 160];
          if (v200 == 1)
          {
            long long v197 = *v199;
            *(long long *)((char *)v198 + 12) = *(long long *)((char *)v199 + 12);
            *int v198 = v197;
          }
          else if (!v200)
          {
            sub_9F6FA0((uint64_t)v198, v199);
          }
          v196 += 168;
        }
        while (&v191[v196] != v192);
        *(void *)(v185 + 8) = &v195[v196];
      }
      char v201 = v327;
      *(void *)(v185 + 32) = 0;
      *(unsigned char *)(v185 + 24) = v201;
      *(void *)(v185 + 40) = 0;
      *(void *)(v185 + 48) = 0;
      uint64_t v202 = v328;
      uint64_t v203 = v329 - (unsigned char *)v328;
      if (v329 != v328)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v203 >> 3) >= 0x666666666666667) {
          sub_2E00();
        }
        char v204 = (char *)operator new(v329 - (unsigned char *)v328);
        *(void *)(v185 + 32) = v204;
        *(void *)(v185 + 40) = v204;
        unsigned int v205 = &v204[8 * (v203 >> 3)];
        *(void *)(v185 + 48) = v205;
        memcpy(v204, v202, v203 - 7);
        *(void *)(v185 + 40) = v205;
      }
      uint64_t v206 = *(void *)v331;
      *(void *)(v185 + 63) = *(void *)&v331[7];
      *(void *)(v185 + 56) = v206;
      uint8x8_t v186 = (char *)(v185 + 72);
LABEL_296:
      *((void *)&v356 + 1) = v186;
      unint64_t v207 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 1;
      unsigned int v208 = v18[5];
      unint64_t v209 = (char *)a1[13];
      uint64_t v210 = (char *)a1[14];
      unint64_t v211 = (v210 - v209) >> 3;
      if (v211 > v207) {
        goto LABEL_331;
      }
      unint64_t v212 = v306 + *((_DWORD *)a1 + 24) + *((_DWORD *)a1 + 24) * v307 + 2;
      unint64_t v213 = v212 - v211;
      if (v212 > v211)
      {
        uint64_t v214 = a1[15];
        if (v213 <= (v214 - (uint64_t)v210) >> 3)
        {
          bzero((void *)a1[14], 8 * v213);
          unint64_t v223 = &v210[8 * v213];
          a1[14] = v223;
          uint64_t v224 = v303;
        }
        else
        {
          uint64_t v215 = v214 - (void)v209;
          if (v215 >> 2 > v212) {
            unint64_t v212 = v215 >> 2;
          }
          if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v216 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v216 = v212;
          }
          if (v216 >> 61) {
LABEL_432:
          }
            sub_188D718();
          int v217 = (char *)operator new(8 * v216);
          size_t v218 = 8 * v213;
          bzero(&v217[8 * v211], v218);
          if (v210 == v209)
          {
            uint64_t v224 = v303;
            a1 = v304;
            unint64_t v223 = &v217[8 * v211 + v218];
            v304[13] = &v217[8 * v211];
            v304[14] = v223;
            v304[15] = &v217[8 * v216];
            if (v210) {
              goto LABEL_329;
            }
          }
          else
          {
            unint64_t v219 = v210 - 8 - v209;
            if (v219 < 0x58)
            {
              uint64_t v220 = &v217[8 * v211];
              char v221 = v220;
              a1 = v304;
              goto LABEL_327;
            }
            uint64_t v220 = &v217[8 * v211];
            char v221 = v220;
            a1 = v304;
            if ((unint64_t)(v209 - v217) < 0x20) {
              goto LABEL_442;
            }
            uint64_t v225 = (v219 >> 3) + 1;
            uint64_t v226 = 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
            unsigned int v227 = &v210[-v226];
            char v221 = &v220[-v226];
            uint64_t v228 = &v217[8 * v211 - 16];
            uint64_t v229 = v210 - 16;
            uint64_t v230 = v225 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v231 = *(_OWORD *)v229;
              *((_OWORD *)v228 - 1) = *((_OWORD *)v229 - 1);
              *(_OWORD *)uint64_t v228 = v231;
              v228 -= 32;
              v229 -= 32;
              v230 -= 4;
            }
            while (v230);
            uint64_t v210 = v227;
            if (v225 != (v225 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_442:
              do
              {
LABEL_327:
                uint64_t v232 = *((void *)v210 - 1);
                v210 -= 8;
                *((void *)v221 - 1) = v232;
                v221 -= 8;
              }
              while (v210 != v209);
            }
            uint64_t v210 = v209;
            uint64_t v224 = v303;
            unint64_t v223 = &v220[v218];
            a1[13] = v221;
            a1[14] = &v220[v218];
            a1[15] = &v217[8 * v216];
            if (v209)
            {
LABEL_329:
              operator delete(v210);
              unint64_t v223 = (char *)a1[14];
            }
          }
        }
        unint64_t v209 = (char *)*v224;
        uint64_t v210 = v223;
        goto LABEL_331;
      }
      if (v212 < v211)
      {
        uint64_t v210 = &v209[8 * v212];
        a1[14] = v210;
      }
LABEL_331:
      uint64_t v233 = a1[16];
      uint64_t v234 = *(unsigned int *)&v209[8 * v207];
      unint64_t v235 = (v210 - v209) >> 3;
      if (v235 > v207) {
        goto LABEL_332;
      }
      unint64_t v243 = (v207 + 1);
      unint64_t v244 = v243 - v235;
      if (v243 <= v235)
      {
        if (v243 < v235) {
          a1[14] = &v209[8 * v243];
        }
LABEL_332:
        uint64_t v236 = v233;
        unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
        unint64_t v237 = v236 + ((unint64_t)*(unsigned int *)&v209[8 * v207 + 4] << 6);
        if (v18 != (unsigned int *)v237) {
          goto LABEL_333;
        }
        goto LABEL_335;
      }
      uint64_t v245 = a1[15];
      if (v244 <= (v245 - (uint64_t)v210) >> 3)
      {
        size_t v250 = 8 * v244;
        bzero(v210, v250);
        a1[14] = &v210[v250];
        goto LABEL_377;
      }
      uint64_t v246 = (v210 - v209) >> 3;
      unint64_t v247 = v246 + v244;
      if ((v246 + v244) >> 61) {
        sub_2E00();
      }
      uint64_t v248 = v245 - (void)v209;
      if (v248 >> 2 > v247) {
        unint64_t v247 = v248 >> 2;
      }
      if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v302 = v247;
      if (v247)
      {
        if (v247 >> 61) {
          goto LABEL_432;
        }
        long long v249 = (char *)operator new(8 * v247);
      }
      else
      {
        long long v249 = 0;
      }
      size_t v251 = 8 * v244;
      unint64_t v252 = &v249[8 * v246];
      size_t v301 = v251;
      bzero(v252, v251);
      if (v210 != v209)
      {
        unint64_t v253 = v210 - 8 - v209;
        if (v253 < 0x58 || (unint64_t)(v209 - v249) < 0x20)
        {
          unint64_t v254 = v210;
          int v255 = &v249[8 * v246];
          a1 = v304;
          size_t v256 = v301;
          goto LABEL_374;
        }
        uint64_t v258 = (v253 >> 3) + 1;
        uint64_t v259 = 8 * (v258 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v254 = &v210[-v259];
        int v255 = &v252[-v259];
        uint64_t v260 = &v249[8 * v246 - 16];
        uint64_t v261 = v210 - 16;
        uint64_t v262 = v258 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v304;
        do
        {
          long long v263 = *(_OWORD *)v261;
          *((_OWORD *)v260 - 1) = *((_OWORD *)v261 - 1);
          *(_OWORD *)uint64_t v260 = v263;
          v260 -= 32;
          v261 -= 32;
          v262 -= 4;
        }
        while (v262);
        size_t v256 = v301;
        if (v258 != (v258 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_374:
            uint64_t v257 = *((void *)v254 - 1);
            v254 -= 8;
            *((void *)v255 - 1) = v257;
            v255 -= 8;
          }
          while (v254 != v209);
        }
        uint64_t v210 = (char *)*v303;
        a1[13] = v255;
        a1[14] = &v252[v256];
        a1[15] = &v249[8 * v302];
        if (!v210) {
          goto LABEL_377;
        }
LABEL_376:
        operator delete(v210);
        goto LABEL_377;
      }
      a1 = v304;
      v304[13] = v252;
      v304[14] = &v252[v301];
      v304[15] = &v249[8 * v302];
      if (v210) {
        goto LABEL_376;
      }
LABEL_377:
      unint64_t v18 = (unsigned int *)(v233 + (v234 << 6));
      unint64_t v237 = a1[16] + ((unint64_t)*(unsigned int *)(a1[13] + 8 * v207 + 4) << 6);
      if (v18 != (unsigned int *)v237)
      {
LABEL_333:
        while (v18[6] != v208)
        {
          v18 += 16;
          if (v18 == (unsigned int *)v237) {
            goto LABEL_335;
          }
        }
        goto LABEL_336;
      }
LABEL_335:
      unint64_t v18 = 0;
LABEL_336:
      uint64_t v3 = a2;
      if (!v383)
      {
        if ((void)v380)
        {
          *((void *)&v380 + 1) = v380;
          operator delete((void *)v380);
        }
        if ((void)v377)
        {
          *((void *)&v377 + 1) = v377;
          operator delete((void *)v377);
        }
        if (v375[0])
        {
          v375[1] = v375[0];
          operator delete(v375[0]);
        }
      }
      if (v328)
      {
        char v329 = v328;
        operator delete(v328);
      }
      int v238 = (char *)v324;
      if (v324)
      {
        int v239 = v325;
        uint64_t v19 = v324;
        if (v325 != v324)
        {
          do
          {
            if (!*((_DWORD *)v239 - 2))
            {
              int v240 = (void *)*((void *)v239 - 6);
              if (v240)
              {
                *((void *)v239 - 5) = v240;
                operator delete(v240);
              }
              uint64_t v241 = (void *)*((void *)v239 - 10);
              if (v241)
              {
                *((void *)v239 - 9) = v241;
                operator delete(v241);
              }
              uint64_t v242 = (void *)*((void *)v239 - 13);
              if (v242)
              {
                *((void *)v239 - 12) = v242;
                operator delete(v242);
              }
            }
            v239 -= 168;
          }
          while (v239 != v238);
          uint64_t v19 = v324;
        }
        int v325 = v238;
        operator delete(v19);
      }
      --v306;
      if (*v18 == -1) {
        goto LABEL_397;
      }
    }
    uint64_t v54 = -1;
    uint64_t v55 = 1;
    a1 = v304;
    do
    {
      if (*(_DWORD *)(v27 + 36) == v51 && *(_DWORD *)(v27 + 32) == v52)
      {
        if (v54 == -1) {
          uint64_t v54 = v49;
        }
      }
      else if (__PAIR64__(v51, v52) == v42)
      {
        if (v49 == -1) {
          goto LABEL_112;
        }
        goto LABEL_74;
      }
      uint64_t v49 = (v49 + v55) & v43;
      uint64_t v56 = (unsigned int *)(v46 + 12 * v49);
      unsigned int v52 = *v56;
      unsigned int v51 = v56[1];
      ++v55;
    }
    while (v47 != v51 || v48 != v52);
    if (v54 != -1) {
      goto LABEL_78;
    }
LABEL_77:
    uint64_t v54 = v49;
    goto LABEL_78;
  }
LABEL_7:
  uint64_t result = std::string::operator=(v294, (const std::string *)(a1 + 58));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 69);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 71);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 73);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 75);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 61);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 67);
  return result;
}

void sub_AC7178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    unsigned int v66 = a52;
    if (!a52)
    {
LABEL_3:
      uint64_t v67 = a49;
      if (!a49) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v66 = a52;
    if (!a52) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  uint64_t v67 = a49;
  if (!a49)
  {
LABEL_4:
    if (LODWORD(STACK[0x460])) {
      goto LABEL_13;
    }
LABEL_9:
    int v68 = (void *)STACK[0x438];
    if (STACK[0x438])
    {
      STACK[0x440] = (unint64_t)v68;
      operator delete(v68);
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418])
      {
LABEL_11:
        uint64_t v70 = (void *)STACK[0x400];
        if (!STACK[0x400]) {
          goto LABEL_13;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v69 = (void *)STACK[0x418];
      if (!STACK[0x418]) {
        goto LABEL_11;
      }
    }
    STACK[0x420] = (unint64_t)v69;
    operator delete(v69);
    uint64_t v70 = (void *)STACK[0x400];
    if (!STACK[0x400])
    {
LABEL_13:
      if (a65)
      {
        operator delete(a65);
        int v71 = a61;
        if (!a61)
        {
LABEL_15:
          unsigned int v72 = (void *)STACK[0x2F8];
          if (!STACK[0x2F8]) {
            goto LABEL_16;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v71 = a61;
        if (!a61) {
          goto LABEL_15;
        }
      }
      uint64_t v78 = a62;
      uint64_t v79 = v71;
      if ((void *)a62 != v71)
      {
        do
        {
          if (!*(_DWORD *)(v78 - 8))
          {
            uint64_t v80 = *(void **)(v78 - 48);
            if (v80)
            {
              *(void *)(v78 - 40) = v80;
              operator delete(v80);
            }
            uint64_t v81 = *(void **)(v78 - 80);
            if (v81)
            {
              *(void *)(v78 - 72) = v81;
              operator delete(v81);
            }
            char v82 = *(void **)(v78 - 104);
            if (v82)
            {
              *(void *)(v78 - 96) = v82;
              operator delete(v82);
            }
          }
          v78 -= 168;
        }
        while ((void *)v78 != v71);
        uint64_t v79 = a61;
      }
      operator delete(v79);
      unsigned int v72 = (void *)STACK[0x2F8];
      if (!STACK[0x2F8])
      {
LABEL_16:
        uint64_t v73 = (void *)STACK[0x2E0];
        if (!STACK[0x2E0]) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
LABEL_40:
      STACK[0x300] = (unint64_t)v72;
      operator delete(v72);
      uint64_t v73 = (void *)STACK[0x2E0];
      if (!STACK[0x2E0])
      {
LABEL_17:
        uint64_t v74 = (void *)STACK[0x2C8];
        if (!STACK[0x2C8]) {
          goto LABEL_18;
        }
        goto LABEL_42;
      }
LABEL_41:
      STACK[0x2E8] = (unint64_t)v73;
      operator delete(v73);
      uint64_t v74 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
      {
LABEL_18:
        unint64_t v75 = STACK[0x2B0];
        if (!STACK[0x2B0]) {
          goto LABEL_19;
        }
        goto LABEL_43;
      }
LABEL_42:
      STACK[0x2D0] = (unint64_t)v74;
      operator delete(v74);
      unint64_t v75 = STACK[0x2B0];
      if (!STACK[0x2B0])
      {
LABEL_19:
        if (SLOBYTE(STACK[0x26F]) < 0) {
          goto LABEL_20;
        }
        goto LABEL_47;
      }
LABEL_43:
      BOOL v83 = (void **)STACK[0x2B8];
      uint64_t v84 = (void *)v75;
      if (STACK[0x2B8] != v75)
      {
        do
        {
          v83 -= 9;
          sub_9F5F58(a9, v83);
        }
        while (v83 != (void **)v75);
        uint64_t v84 = (void *)STACK[0x2B0];
      }
      STACK[0x2B8] = v75;
      operator delete(v84);
      if (SLOBYTE(STACK[0x26F]) < 0)
      {
LABEL_20:
        operator delete((void *)STACK[0x258]);
        BOOL v76 = *a10;
        if (*a10) {
          goto LABEL_21;
        }
        goto LABEL_48;
      }
LABEL_47:
      BOOL v76 = *a10;
      if (*a10)
      {
LABEL_21:
        *(void *)(a39 + 200) = v76;
        operator delete(v76);
        if ((*(char *)(a39 + 55) & 0x80000000) == 0) {
          goto LABEL_22;
        }
        goto LABEL_49;
      }
LABEL_48:
      if ((*(char *)(a39 + 55) & 0x80000000) == 0)
      {
LABEL_22:
        unint64_t v77 = *a13;
        if (!*a13) {
          goto LABEL_23;
        }
        goto LABEL_50;
      }
LABEL_49:
      operator delete(*a11);
      unint64_t v77 = *a13;
      if (!*a13) {
LABEL_23:
      }
        _Unwind_Resume(a1);
LABEL_50:
      uint64_t v85 = *(void *)(a39 + 16);
      int v86 = v77;
      if ((void *)v85 != v77)
      {
        do
        {
          v85 -= 296;
          sub_9F5E28(a39 + 24, v85);
        }
        while ((void *)v85 != v77);
        int v86 = *a13;
      }
      *(void *)(a39 + 16) = v77;
      operator delete(v86);
      _Unwind_Resume(a1);
    }
LABEL_12:
    STACK[0x408] = (unint64_t)v70;
    operator delete(v70);
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v67);
  if (LODWORD(STACK[0x460])) {
    goto LABEL_13;
  }
  goto LABEL_9;
}

void sub_AC7720(uint64_t a1)
{
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(unsigned int **)(a1 + 208);
  uint64_t v3 = *(unsigned int **)(a1 + 216);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    int v5 = *(unsigned int **)(a1 + 208);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 216) = v2;
  int v7 = *(unsigned int **)(a1 + 256);
  int v8 = *(unsigned int **)(a1 + 264);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 232);
    int v10 = *(unsigned int **)(a1 + 256);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 264) = v7;
  uint64_t v12 = *(unsigned int **)(a1 + 328);
  uint64_t v13 = *(unsigned int **)(a1 + 336);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 304);
    uint64_t v15 = *(void *)(a1 + 280);
    uint64_t v16 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v17 = *v16++;
      *(void *)(v14 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) &= ~(1 << v17);
      *(_DWORD *)(v15 + 4 * v17) = -1;
    }
    while (v16 != v13);
  }
  *(void *)(a1 + 336) = v12;
  sub_BD5698(a1 + 360);
  char v20 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  unint64_t v18 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)unint64_t v18 = __dst;
  *(void *)(a1 + 480) = v22;
  HIBYTE(v22) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 552) = v27;
  *(_OWORD *)(a1 + 568) = v28;
  *(_OWORD *)(a1 + 584) = v29;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v24;
  *(_OWORD *)(a1 + 520) = v25;
  *(_OWORD *)(a1 + 536) = v26;
  if (v20 < 0) {
    operator delete((void *)__p);
  }
  *(int32x2_t *)(a1 + 96) = vadd_s32(vdup_n_s32(2 * *(_DWORD *)(a1 + 16)), (int32x2_t)0x200000004);
  sub_BD5704(a1 + 360, *(void *)(a1 + 8));
}

void sub_AC78FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AC7918(uint64_t a1)
{
  if (sub_A276F8(*(void *)(a1 + 24)))
  {
    int v2 = *(_DWORD *)(a1 + 68);
    int v3 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)(a1 + 176) = v3 + 1;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v20 = 0x1FFFFFFFDLL;
    int v5 = sub_A3B520(v4, &v20);
    int v21 = v5;
    sub_A86790((void **)(a1 + 104), 0);
    long long v10 = xmmword_20E2060;
    uint64_t v11 = -1;
    int v12 = v3;
    int v13 = v2;
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 10 * v2;
    char v17 = 0;
    uint64_t v18 = -1;
    int v19 = 0x7FFFFFFF;
    unsigned int v6 = *(_DWORD **)(a1 + 104);
    if (*(_DWORD **)(a1 + 112) == v6 || *(_DWORD *)(*(void *)(a1 + 104) + 4) == *v6)
    {
      sub_AAD3F8((char **)(a1 + 104), 0, &v10);
    }
    else if ((sub_ACA4B8(a1 + 104, (uint64_t)&v10, 0, 0, 1) & 0x100) != 0)
    {
      sub_A8750C((void **)(a1 + 104), 0);
    }
    int v7 = *(_DWORD *)(a1 + 96);
    unsigned int v8 = v7 + v7 * v5;
    unsigned int v9 = v8 + 2;
    if (*(unsigned char *)(a1 + 20))
    {
      if (!sub_ACA26C((void **)(a1 + 104), 0, v9, v8, v7 + v7 * *(_DWORD *)(a1 + 352), 0x80000000)) {
        return;
      }
      goto LABEL_7;
    }
    if (sub_ACA26C((void **)(a1 + 104), 0, v9, v8, 0xFFFFFFFF, 0x80000000)) {
LABEL_7:
    }
      sub_A3EF14((uint64_t *)(a1 + 184), &v21);
  }
}

double sub_AC7A80(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v33);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  long long v30 = *(unsigned int **)(a1 + 216);
  if (v4 != v30)
  {
    int v5 = (void **)(a1 + 104);
    while (1)
    {
      unsigned int v32 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), v32);
      BOOL v7 = HIDWORD(v6) != 1 || (v6 + 3) >= 2;
      uint64_t v31 = v4;
      if (!v7)
      {
LABEL_12:
        int v11 = 0;
        goto LABEL_17;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 4120);
      uint64_t v9 = v8 + 24;
      if (*(unsigned char *)(v8 + 17)) {
        break;
      }
      long long v10 = (int *)sub_498D5C(v9, __ROR8__(v6, 32), 0, "stop");
      uint64_t v14 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v14 >= 0x15u)
      {
        unsigned int v13 = v14[10];
        if (v13) {
          goto LABEL_15;
        }
      }
      int v11 = 300;
LABEL_17:
      sub_A86790(v5, 0);
      sub_ACA858(v5, a2 + 1 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * v32, 0);
      int v15 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v15)
      {
        uint64_t v16 = *(void *)(a1 + 128);
        uint64_t v17 = *v15;
LABEL_19:
        uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
        unint64_t v19 = v16 + ((unint64_t)v15[1] << 6);
        if (v18 == (unsigned int *)v19) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_D2BFC(v5, 1uLL);
      int v15 = *(unsigned int **)(a1 + 104);
      uint64_t v16 = *(void *)(a1 + 128);
      uint64_t v17 = *v15;
      if (*(unsigned int **)(a1 + 112) != v15) {
        goto LABEL_19;
      }
      sub_D2BFC(v5, 1uLL);
      uint64_t v18 = (unsigned int *)(v16 + (v17 << 6));
      unint64_t v19 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v18 == (unsigned int *)v19) {
        goto LABEL_24;
      }
      do
      {
LABEL_23:
        unsigned int *v18 = v32;
        unsigned int v20 = v18[7];
        v18[3] = v20;
        _OWORD v18[4] = -1;
        v18[7] = v20 + v11 / -10;
        v18 += 16;
      }
      while (v18 != (unsigned int *)v19);
LABEL_24:
      uint64_t v21 = v32;
      int v22 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v23 = v22 + v22 * *(_DWORD *)(a1 + 352) + 1;
        long long v24 = *(void **)(a1 + 48);
        if (v24) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v23 = -1;
        long long v24 = *(void **)(a1 + 48);
        if (v24)
        {
LABEL_26:
          if (*v24 > (unint64_t)v32)
          {
            unsigned int v25 = 0;
            unsigned int v26 = *(_DWORD *)(a1 + 100) + ~a2;
            unsigned int v27 = v26;
            while (v25 <= v26)
            {
              int v28 = *(_DWORD *)sub_A3F53C(v24 + 2, v24[1] * v21 + v27);
              v25 += 2;
              v27 -= 2;
              if (v28 != 0x7FFFFFFF) {
                goto LABEL_34;
              }
            }
          }
          int v28 = 0x7FFFFFFF;
          goto LABEL_34;
        }
      }
      int v28 = 0x80000000;
LABEL_34:
      int v5 = (void **)(a1 + 104);
      if (sub_ACA26C((void **)(a1 + 104), 0, a2 + 2 + v22 + v22 * v21, v22 + v22 * v21 + 1, v23, v28)) {
        sub_A3EF14((uint64_t *)(a1 + 232), &v32);
      }
      uint64_t v4 = v31 + 1;
      if (v31 + 1 == v30) {
        goto LABEL_36;
      }
    }
    long long v10 = (int *)sub_A1A290(v9, v6, 0, "transfers at stop");
    int v11 = 0;
    int v12 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v12 < 5u) {
      goto LABEL_17;
    }
    unsigned int v13 = v12[2];
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    int v11 = 10 * *(int *)((char *)v10 + v13);
    goto LABEL_17;
  }
LABEL_36:
  double result = sub_72688((uint64_t)v33) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

double sub_AC7DA8(uint64_t a1, int a2)
{
  sub_725D0((uint64_t)v252);
  uint64_t v4 = *(unsigned int **)(a1 + 208);
  unint64_t v235 = *(unsigned int **)(a1 + 216);
  if (v4 != v235)
  {
    int v240 = a2 + 2;
    int v241 = a2 + 1;
    int v238 = ~a2;
    int v239 = (uint64_t *)(a1 + 232);
    uint64_t v234 = (void **)(a1 + 256);
    uint64_t v245 = (void **)(a1 + 104);
    while (1)
    {
      unint64_t v237 = v4;
      unsigned int v242 = *v4;
      int v5 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v4);
      sub_A28D38((uint64_t)&v246, *(void *)(a1 + 24), *v5);
      unint64_t v6 = v247;
      BOOL v7 = &v248;
      if (v251) {
        BOOL v7 = v250;
      }
      if ((unint64_t)v247 < *v7) {
        break;
      }
LABEL_3:
      uint64_t v4 = v237 + 1;
      if (v237 + 1 == v235) {
        goto LABEL_311;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v6, 32);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      unsigned int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_59;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v44 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v44) & v13;
        unint64_t v45 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v45;
        unsigned int v21 = v45[1];
        ++v44;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_59;
        }
      }
LABEL_56:
      if (v19 != -1)
      {
        uint64_t v47 = v16 + 12 * v19;
        unint64_t v42 = (void **)(a1 + 104);
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
        goto LABEL_80;
      }
      uint64_t v24 = -1;
      if (!sub_A3BA84(*(void *)(a1 + 32), 1))
      {
LABEL_60:
        uint64_t v50 = *(void *)(v12 + 40);
        uint64_t v49 = *(void *)(v12 + 48);
        unint64_t v42 = (void **)(a1 + 104);
        if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
          goto LABEL_316;
        }
        uint64_t v29 = *(void *)(v12 + 80);
        if (v50
          && ((unsigned int v51 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v51[1])
            ? (BOOL v52 = *(_DWORD *)(v12 + 32) == *v51)
            : (BOOL v52 = 0),
              v52))
        {
          *(void *)(v12 + 40) = v50 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v49 + 1;
        }
        uint64_t v53 = 3 * v24;
LABEL_79:
        uint64_t v56 = 4 * v53;
        uint64_t v57 = v29 + v56;
        *(void *)uint64_t v57 = v11;
        *(_DWORD *)(v57 + 8) = -1;
        uint64_t v47 = *(void *)(v12 + 80) + v56;
        unsigned int v48 = *(_DWORD *)(v47 + 8);
        if (v48 != -1) {
          goto LABEL_99;
        }
LABEL_80:
        int v58 = *(_DWORD *)(v12 + 112);
        *(_DWORD *)(v12 + 112) = v58 + 1;
        *(_DWORD *)(v47 + 8) = v58;
        uint64_t v60 = *(char **)(v12 + 96);
        unint64_t v59 = *(void *)(v12 + 104);
        if ((unint64_t)v60 < v59)
        {
          *(void *)uint64_t v60 = v11;
          uint64_t v61 = (uint64_t)(v60 + 8);
LABEL_98:
          *(void *)(v12 + 96) = v61;
          unsigned int v48 = *(_DWORD *)(v47 + 8);
          goto LABEL_99;
        }
        int v62 = (char **)(v12 + 88);
        uint64_t v63 = *(char **)(v12 + 88);
        uint64_t v64 = (v60 - v63) >> 3;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v66 = v59 - (void)v63;
        if (v66 >> 2 > v65) {
          unint64_t v65 = v66 >> 2;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v243 = v65;
        if (v65)
        {
          if (v65 >> 61) {
            goto LABEL_315;
          }
          uint64_t v67 = (char *)operator new(8 * v65);
          int v62 = (char **)(v12 + 88);
          int v68 = &v67[8 * v64];
          *(void *)int v68 = v11;
          uint64_t v61 = (uint64_t)(v68 + 8);
          if (v60 != v63) {
            goto LABEL_90;
          }
LABEL_142:
          unint64_t v42 = (void **)(a1 + 104);
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v243];
          if (!v60) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v67 = 0;
          int v68 = (char *)(8 * v64);
          *(void *)(8 * v64) = v11;
          uint64_t v61 = 8 * v64 + 8;
          if (v60 == v63) {
            goto LABEL_142;
          }
LABEL_90:
          unint64_t v69 = v60 - 8 - v63;
          if (v69 < 0x58) {
            goto LABEL_321;
          }
          if ((unint64_t)(v63 - v67) < 0x20) {
            goto LABEL_321;
          }
          uint64_t v70 = (v69 >> 3) + 1;
          uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v72 = &v60[-v71];
          v68 -= v71;
          uint64_t v73 = &v67[8 * v64 - 16];
          uint64_t v74 = (long long *)(v60 - 16);
          uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v76 = *v74;
            *((_OWORD *)v73 - 1) = *(v74 - 1);
            *(_OWORD *)uint64_t v73 = v76;
            v73 -= 32;
            v74 -= 2;
            v75 -= 4;
          }
          while (v75);
          uint64_t v60 = v72;
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_321:
            do
            {
              uint64_t v77 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v68 - 1) = v77;
              v68 -= 8;
            }
            while (v60 != v63);
          }
          uint64_t v60 = *v62;
          *(void *)(v12 + 88) = v68;
          *(void *)(v12 + 96) = v61;
          *(void *)(v12 + 104) = &v67[8 * v243];
          unint64_t v42 = (void **)(a1 + 104);
          if (!v60) {
            goto LABEL_98;
          }
        }
        operator delete(v60);
        goto LABEL_98;
      }
LABEL_31:
      uint64_t v28 = *(void *)(v12 + 56) - 1;
      uint64_t v29 = *(void *)(v12 + 80);
      int v31 = *(_DWORD *)(v12 + 64);
      int v30 = *(_DWORD *)(v12 + 68);
      uint64_t v32 = v28 & v15;
      uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
      unsigned int v35 = *v33;
      unsigned int v34 = v33[1];
      uint64_t v36 = *(void *)(v12 + 40);
      if (v30 == v34 && v31 == v35)
      {
        unint64_t v42 = (void **)(a1 + 104);
LABEL_48:
        uint64_t v38 = v32;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555) {
          goto LABEL_316;
        }
        goto LABEL_71;
      }
      if (v36)
      {
        uint64_t v38 = -1;
        uint64_t v39 = 1;
        do
        {
          if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
          {
            if (v38 == -1) {
              uint64_t v38 = v32;
            }
          }
          else if (__PAIR64__(v34, v35) == v11)
          {
            goto LABEL_136;
          }
          uint64_t v32 = (v32 + v39) & v28;
          uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
          unsigned int v35 = *v40;
          unsigned int v34 = v40[1];
          ++v39;
        }
        while (v30 != v34 || v31 != v35);
        unint64_t v42 = (void **)(a1 + 104);
        if (v38 != -1)
        {
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 - v36 >= 0x1555555555555555) {
            goto LABEL_316;
          }
          goto LABEL_71;
        }
        goto LABEL_48;
      }
      uint64_t v105 = 1;
      while (__PAIR64__(v34, v35) != v11)
      {
        uint64_t v32 = (v32 + v105) & v28;
        uint64_t v106 = (unsigned int *)(v29 + 12 * v32);
        unsigned int v35 = *v106;
        unsigned int v34 = v106[1];
        ++v105;
        if (v30 == v34 && v31 == v35)
        {
          uint64_t v36 = 0;
          unint64_t v42 = (void **)(a1 + 104);
          uint64_t v38 = v32;
          unint64_t v43 = *(void *)(v12 + 48);
          if (v43 >= 0x1555555555555555) {
            goto LABEL_316;
          }
          goto LABEL_71;
        }
      }
LABEL_136:
      unint64_t v42 = (void **)(a1 + 104);
      if (v32 == -1)
      {
        uint64_t v38 = -1;
        unint64_t v43 = *(void *)(v12 + 48);
        if (v43 - v36 >= 0x1555555555555555)
        {
LABEL_316:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
LABEL_71:
        if (v36
          && ((uint64_t v54 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v54[1])
            ? (BOOL v55 = *(_DWORD *)(v12 + 32) == *v54)
            : (BOOL v55 = 0),
              v55))
        {
          *(void *)(v12 + 40) = v36 - 1;
        }
        else
        {
          *(void *)(v12 + 48) = v43 + 1;
        }
        uint64_t v53 = 3 * v38;
        goto LABEL_79;
      }
      uint64_t v47 = v29 + 12 * v32;
      unsigned int v48 = *(_DWORD *)(v47 + 8);
      if (v48 == -1) {
        goto LABEL_80;
      }
LABEL_99:
      *(double *)(a1 + 560) = *(double *)(a1 + 560) + 1.0;
      unsigned int v244 = v48;
      if (v242 == v48) {
        goto LABEL_255;
      }
      uint64_t v79 = *(unsigned int **)(a1 + 104);
      uint64_t v78 = *(unsigned int **)(a1 + 112);
      uint64_t v80 = (char *)v78 - (char *)v79;
      if (v78 == v79)
      {
        uint64_t v84 = v80 >> 3;
        unint64_t v85 = 1 - (v80 >> 3);
        uint64_t v86 = *(void *)(a1 + 120);
        if (v85 <= (v86 - (uint64_t)v78) >> 3)
        {
          bzero(*(void **)(a1 + 112), 8 * v85);
          unint64_t v94 = (char *)&v78[2 * v85];
          *(void *)(a1 + 112) = v94;
          unint64_t v42 = (void **)(a1 + 104);
          uint64_t v79 = (unsigned int *)*v245;
          uint64_t v81 = *(void *)(a1 + 128);
          uint64_t v82 = *(unsigned int *)*v245;
          if (*v245 == v94) {
            goto LABEL_102;
          }
        }
        else
        {
          uint64_t v87 = v86 - (void)v79;
          uint64_t v88 = v87 >> 2;
          if ((unint64_t)(v87 >> 2) <= 1) {
            uint64_t v88 = 1;
          }
          BOOL v229 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v229) {
            unint64_t v89 = v88;
          }
          if (v89 >> 61) {
LABEL_315:
          }
            sub_188D718();
          uint64_t v90 = 8 * v89;
          uint64_t v91 = (char *)operator new(8 * v89);
          unint64_t v92 = &v91[8 * v84];
          bzero(v92, 8 * v85);
          uint64_t v93 = &v92[8 * v85];
          *(void *)(a1 + 104) = v92;
          *(void *)(a1 + 112) = v93;
          *(void *)(a1 + 120) = &v91[v90];
          if (v78)
          {
            operator delete(v78);
            unint64_t v94 = *(char **)(a1 + 112);
            unint64_t v42 = (void **)(a1 + 104);
            uint64_t v79 = (unsigned int *)*v245;
            uint64_t v81 = *(void *)(a1 + 128);
            uint64_t v82 = *(unsigned int *)*v245;
            if (*v245 == v94) {
              goto LABEL_102;
            }
          }
          else
          {
            unint64_t v94 = &v92[8 * v85];
            unint64_t v42 = (void **)(a1 + 104);
            uint64_t v79 = (unsigned int *)*v245;
            uint64_t v81 = *(void *)(a1 + 128);
            uint64_t v82 = *(unsigned int *)*v245;
            if (*v245 == v93)
            {
LABEL_102:
              BOOL v83 = *(char **)(a1 + 120);
              if (v83 != v94)
              {
                *(void *)unint64_t v94 = 0;
                *(void *)(a1 + 112) = v94 + 8;
LABEL_129:
                uint64_t v79 = *(unsigned int **)(a1 + 104);
                uint64_t v104 = *(void *)(a1 + 128);
                goto LABEL_148;
              }
              uint64_t v95 = 1;
              uint64_t v96 = v83 - (char *)v79;
              if ((unint64_t)(v96 >> 2) > 1) {
                uint64_t v95 = v96 >> 2;
              }
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v95;
              }
              if (v97)
              {
                if (v97 >> 61) {
                  goto LABEL_315;
                }
                unint64_t v98 = (char *)operator new(8 * v97);
                uint64_t v99 = v98;
                *(void *)unint64_t v98 = 0;
                uint64_t v100 = (uint64_t)(v98 + 8);
                if (v94 != (char *)v79)
                {
LABEL_123:
                  unint64_t v101 = v94 - 8 - (char *)v79;
                  if (v101 < 0x58 || (unint64_t)(v94 - v98) < 0x20)
                  {
                    uint64_t v102 = (unsigned int *)v94;
                    goto LABEL_126;
                  }
                  uint64_t v206 = (v101 >> 3) + 1;
                  uint64_t v207 = 8 * (v206 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v102 = (unsigned int *)&v94[-v207];
                  v99 -= v207;
                  unsigned int v208 = v98 - 16;
                  unint64_t v209 = v94 - 16;
                  uint64_t v210 = v206 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v211 = *(_OWORD *)v209;
                    *((_OWORD *)v208 - 1) = *((_OWORD *)v209 - 1);
                    *(_OWORD *)unsigned int v208 = v211;
                    v208 -= 32;
                    v209 -= 32;
                    v210 -= 4;
                  }
                  while (v210);
                  if (v206 != (v206 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    do
                    {
LABEL_126:
                      uint64_t v103 = *((void *)v102 - 1);
                      v102 -= 2;
                      *((void *)v99 - 1) = v103;
                      v99 -= 8;
                    }
                    while (v102 != v79);
                  }
                  unint64_t v94 = (char *)*v42;
                  *(void *)(a1 + 104) = v99;
                  *(void *)(a1 + 112) = v100;
                  *(void *)(a1 + 120) = &v98[8 * v97];
                  if (!v94) {
                    goto LABEL_129;
                  }
LABEL_128:
                  operator delete(v94);
                  goto LABEL_129;
                }
              }
              else
              {
                unint64_t v98 = 0;
                uint64_t v99 = 0;
                *(void *)&def_332C = 0;
                uint64_t v100 = 8;
                if (v94 != (char *)v79) {
                  goto LABEL_123;
                }
              }
              *(void *)(a1 + 104) = v99;
              *(void *)(a1 + 112) = v100;
              *(void *)(a1 + 120) = &v98[8 * v97];
              if (!v94) {
                goto LABEL_129;
              }
              goto LABEL_128;
            }
          }
        }
      }
      else
      {
        uint64_t v81 = *(void *)(a1 + 128);
        uint64_t v82 = *v79;
      }
      uint64_t v104 = v81;
LABEL_148:
      sub_A86AC4(v42, 0, (char *)(v81 + (v82 << 6)), (char *)(v104 + ((unint64_t)v79[1] << 6)));
      unint64_t v108 = v241 + *(_DWORD *)(a1 + 96) * (v242 + 1);
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      int v110 = *(unsigned int **)(a1 + 112);
      if (v108 >= ((char *)v110 - (char *)v109) >> 3) {
        goto LABEL_201;
      }
      unsigned int v111 = v109[2 * v108];
      unsigned int v112 = v109[2 * v108 + 1];
      unsigned int v113 = v112 - v111;
      if (v112 == v111) {
        goto LABEL_201;
      }
      unsigned __int16 v114 = 0;
      unsigned int v115 = 0;
LABEL_151:
      while (2)
      {
        unint64_t v116 = *(unsigned int **)(a1 + 104);
        if (v108 >= (uint64_t)(*(void *)(a1 + 112) - (void)v116) >> 3
          || (unsigned int v117 = v116[2 * v108], v116[2 * v108 + 1] - v117 <= v115))
        {
          uint64_t v232 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v232, "key does not exist and cannot be added");
          goto LABEL_314;
        }
        unint64_t v118 = v117 + v115;
        uint64_t v119 = *(void *)(a1 + 128);
        if (v118 >= (*(void *)(a1 + 136) - v119) >> 6)
        {
          uint64_t v232 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_188D9E0(v232, "index out of range");
LABEL_314:
        }
        size_t v120 = (long long *)(v119 + (v118 << 6));
        long long v121 = *v120;
        long long v122 = v120[1];
        long long v123 = v120[3];
        long long v255 = v120[2];
        long long v256 = v123;
        long long v253 = v121;
        long long v254 = v122;
        uint64_t v125 = *v116;
        uint64_t v124 = v116[1];
        if (v124 != v125)
        {
          uint64_t v126 = 0;
          int v129 = v256;
          uint64_t v130 = v125 << 6;
          uint64_t v131 = (unsigned __int8 *)(v119 + v130 + 48);
          uint64_t v132 = (v124 << 6) - v130;
          while (1)
          {
            int v133 = *((_DWORD *)v131 - 5);
            if (v133 != 0x7FFFFFFF)
            {
              if (v133 >= SHIDWORD(v254) && *((_DWORD *)v131 - 4) <= (int)v255)
              {
                unsigned int v134 = *((_DWORD *)v131 - 3);
                if (v134 <= DWORD1(v255)
                  && *((_DWORD *)v131 - 2) <= DWORD2(v255)
                  && (v134 != DWORD1(v255)
                   || v133 != HIDWORD(v254)
                   || *((_DWORD *)v131 - 1) - 10 * v133 <= HIDWORD(v255) - 10 * HIDWORD(v254))
                  && (*v131 & ~v256) == 0)
                {
                  unint64_t v128 = v114 & 0xFF00 | (unint64_t)(v126 << 8);
                  unsigned __int16 v114 = v114 & 0xFF00 | ((_WORD)v126 << 8);
                  if (++v115 == v113) {
                    goto LABEL_179;
                  }
                  goto LABEL_151;
                }
              }
              if (SHIDWORD(v254) >= v133 && (int)v255 <= *((_DWORD *)v131 - 4))
              {
                unsigned int v135 = *((_DWORD *)v131 - 3);
                if (DWORD1(v255) <= v135
                  && DWORD2(v255) <= *((_DWORD *)v131 - 2)
                  && (DWORD1(v255) != v135
                   || HIDWORD(v254) != v133
                   || HIDWORD(v255) - 10 * HIDWORD(v254) <= *((_DWORD *)v131 - 1) - 10 * v133)
                  && (v129 & ~*v131) == 0)
                {
                  *((_DWORD *)v131 - 5) = 0x7FFFFFFF;
                  uint64_t v126 = 1;
                }
              }
            }
            v131 += 64;
            v132 -= 64;
            if (!v132) {
              goto LABEL_156;
            }
          }
        }
        uint64_t v126 = 0;
LABEL_156:
        unsigned int v127 = sub_AAD3F8((char **)v42, 0, &v253);
        *(void *)(v127 + 52) = -1;
        *((_DWORD *)v127 + 15) = 0x7FFFFFFF;
        unint64_t v128 = v114 & 0xFF00 | (unint64_t)(v126 << 8);
        unsigned __int16 v114 = v128 | 1;
        if (++v115 != v113) {
          continue;
        }
        break;
      }
LABEL_179:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      int v110 = *(unsigned int **)(a1 + 112);
      if (v128)
      {
        if (v110 != v109)
        {
          uint64_t v136 = *(void *)(a1 + 128);
          uint64_t v137 = *v109;
          goto LABEL_182;
        }
        sub_D2BFC(v42, 1uLL);
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        uint64_t v136 = *(void *)(a1 + 128);
        uint64_t v137 = *v109;
        if (*(unsigned int **)(a1 + 112) == v109)
        {
          sub_D2BFC(v245, 1uLL);
          uint64_t v109 = *(unsigned int **)(a1 + 104);
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = *(void *)(a1 + 128) + ((unint64_t)v109[1] << 6);
          if (v138 == v139)
          {
LABEL_195:
            uint64_t v140 = (void **)(a1 + 104);
            if (*(unsigned int **)(a1 + 112) == v109) {
              goto LABEL_196;
            }
            goto LABEL_200;
          }
        }
        else
        {
LABEL_182:
          unint64_t v138 = v136 + (v137 << 6);
          unint64_t v139 = v136 + ((unint64_t)v109[1] << 6);
          if (v138 == v139) {
            goto LABEL_195;
          }
        }
        uint64_t v140 = (void **)(a1 + 104);
        while (*(_DWORD *)(v138 + 28) != 0x7FFFFFFF)
        {
          v138 += 64;
          if (v138 == v139)
          {
            unint64_t v138 = v139;
            if (*(unsigned int **)(a1 + 112) != v109) {
              goto LABEL_200;
            }
            goto LABEL_196;
          }
        }
        if (v138 == v139 || (unint64_t v141 = v138 + 64, v138 + 64 == v139))
        {
          if (*(unsigned int **)(a1 + 112) == v109) {
            goto LABEL_196;
          }
        }
        else
        {
          do
          {
            if (*(_DWORD *)(v141 + 28) != 0x7FFFFFFF)
            {
              long long v147 = *(_OWORD *)v141;
              long long v148 = *(_OWORD *)(v141 + 16);
              long long v149 = *(_OWORD *)(v141 + 48);
              *(_OWORD *)(v138 + 32) = *(_OWORD *)(v141 + 32);
              *(_OWORD *)(v138 + 48) = v149;
              *(_OWORD *)unint64_t v138 = v147;
              *(_OWORD *)(v138 + 16) = v148;
              v138 += 64;
            }
            v141 += 64;
          }
          while (v141 != v139);
          uint64_t v109 = (unsigned int *)*v245;
          if (*(void **)(a1 + 112) != *v245) {
            goto LABEL_200;
          }
LABEL_196:
          sub_D2BFC(v140, 1uLL);
          uint64_t v109 = (unsigned int *)*v140;
        }
LABEL_200:
        sub_A86AC4(v140, 0, (char *)v138, (char *)(*(void *)(a1 + 128) + ((unint64_t)v109[1] << 6)));
        uint64_t v109 = *(unsigned int **)(a1 + 104);
        int v110 = *(unsigned int **)(a1 + 112);
      }
LABEL_201:
      uint64_t v142 = (char *)v110 - (char *)v109;
      if (v110 != v109)
      {
        unsigned int v143 = v242;
        uint64_t v144 = *(void *)(a1 + 128);
        uint64_t v145 = *v109;
LABEL_217:
        uint64_t v161 = v144;
        goto LABEL_235;
      }
      uint64_t v150 = v142 >> 3;
      unint64_t v151 = 1 - (v142 >> 3);
      uint64_t v152 = *(void *)(a1 + 120);
      unsigned int v143 = v242;
      if (v151 <= (v152 - (uint64_t)v110) >> 3)
      {
        bzero(v109, 8 * v151);
        uint64_t v159 = &v109[2 * v151];
        *(void *)(a1 + 112) = v159;
        uint64_t v160 = (unsigned int **)(a1 + 104);
        uint64_t v109 = (unsigned int *)*v245;
        uint64_t v144 = *(void *)(a1 + 128);
        uint64_t v145 = *(unsigned int *)*v245;
        if (*v245 != v159) {
          goto LABEL_217;
        }
      }
      else
      {
        uint64_t v153 = v152 - (void)v109;
        uint64_t v154 = v153 >> 2;
        if ((unint64_t)(v153 >> 2) <= 1) {
          uint64_t v154 = 1;
        }
        BOOL v229 = (unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v229) {
          unint64_t v155 = v154;
        }
        if (v155 >> 61) {
          goto LABEL_315;
        }
        uint64_t v156 = 8 * v155;
        unsigned int v157 = (char *)operator new(8 * v155);
        int v158 = &v157[8 * v150];
        bzero(v158, 8 * v151);
        uint64_t v159 = (unsigned int *)&v158[8 * v151];
        *(void *)(a1 + 104) = v158;
        *(void *)(a1 + 112) = v159;
        *(void *)(a1 + 120) = &v157[v156];
        if (v109)
        {
          operator delete(v109);
          uint64_t v159 = *(unsigned int **)(a1 + 112);
        }
        uint64_t v160 = (unsigned int **)(a1 + 104);
        uint64_t v109 = (unsigned int *)*v245;
        uint64_t v144 = *(void *)(a1 + 128);
        uint64_t v145 = *(unsigned int *)*v245;
        if (*v245 != v159) {
          goto LABEL_217;
        }
      }
      int v146 = *(unsigned int **)(a1 + 120);
      if (v146 != v159)
      {
        *(void *)uint64_t v159 = 0;
        *(void *)(a1 + 112) = v159 + 2;
        goto LABEL_234;
      }
      uint64_t v162 = 1;
      uint64_t v163 = (char *)v146 - (char *)v109;
      if ((unint64_t)(v163 >> 2) > 1) {
        uint64_t v162 = v163 >> 2;
      }
      if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v164 = v162;
      }
      if (v164)
      {
        if (v164 >> 61) {
          goto LABEL_315;
        }
        uint64_t v165 = (char *)operator new(8 * v164);
        long long v166 = v165;
        *(void *)uint64_t v165 = 0;
        uint64_t v167 = (uint64_t)(v165 + 8);
        if (v159 == v109)
        {
LABEL_271:
          unsigned int v143 = v242;
          *(void *)(a1 + 104) = v166;
          *(void *)(a1 + 112) = v167;
          *(void *)(a1 + 120) = &v165[8 * v164];
          if (!v159) {
            goto LABEL_234;
          }
LABEL_233:
          operator delete(v159);
          goto LABEL_234;
        }
      }
      else
      {
        uint64_t v165 = 0;
        long long v166 = 0;
        *(void *)&def_332C = 0;
        uint64_t v167 = 8;
        if (v159 == v109) {
          goto LABEL_271;
        }
      }
      unint64_t v168 = (char *)(v159 - 2) - (char *)v109;
      if (v168 < 0x58 || (unint64_t)((char *)v159 - v165) < 0x20)
      {
        uint64_t v169 = v159;
        unsigned int v143 = v242;
        do
        {
LABEL_231:
          uint64_t v170 = *((void *)v169 - 1);
          v169 -= 2;
          *((void *)v166 - 1) = v170;
          v166 -= 8;
        }
        while (v169 != v109);
        goto LABEL_232;
      }
      uint64_t v212 = (v168 >> 3) + 1;
      uint64_t v213 = 8 * (v212 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v169 = &v159[v213 / 0xFFFFFFFFFFFFFFFCLL];
      v166 -= v213;
      uint64_t v214 = v165 - 16;
      uint64_t v215 = v159 - 4;
      uint64_t v216 = v212 & 0x3FFFFFFFFFFFFFFCLL;
      unsigned int v143 = v242;
      do
      {
        long long v217 = *(_OWORD *)v215;
        *((_OWORD *)v214 - 1) = *((_OWORD *)v215 - 1);
        *(_OWORD *)uint64_t v214 = v217;
        v214 -= 32;
        v215 -= 8;
        v216 -= 4;
      }
      while (v216);
      if (v212 != (v212 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_231;
      }
LABEL_232:
      uint64_t v159 = *v160;
      *(void *)(a1 + 104) = v166;
      *(void *)(a1 + 112) = v167;
      *(void *)(a1 + 120) = &v165[8 * v164];
      if (v159) {
        goto LABEL_233;
      }
LABEL_234:
      uint64_t v109 = *(unsigned int **)(a1 + 104);
      uint64_t v161 = *(void *)(a1 + 128);
LABEL_235:
      uint64_t v171 = (unsigned int *)(v144 + (v145 << 6));
      int32x2_t v172 = (unsigned int *)(v161 + ((unint64_t)v109[1] << 6));
      if (v171 != v172)
      {
        uint64_t v173 = v247;
        do
        {
          unsigned int *v171 = v143;
          unsigned int v174 = v171[7];
          unsigned int v175 = v171[8];
          v171[3] = v174;
          v171[4] = -1;
          int v176 = *((_DWORD *)v173 + 2);
          int v177 = v176 / -10;
          int v178 = v176 / 10;
          int v179 = v176 % 10;
          if (v176 < 0) {
            char v180 = -5;
          }
          else {
            char v180 = 5;
          }
          int v181 = (char)(v180 + v179);
          v171[7] = v177 + v174 + (((-103 * v181) >> 15) & 1) + ((-103 * v181) >> 10);
          v171[8] = v175 + v178 + (((103 * v181) >> 15) & 1) + ((103 * v181) >> 10);
          v171 += 16;
        }
        while (v171 != v172);
      }
      int v182 = *(_DWORD *)(a1 + 96);
      if (*(unsigned char *)(a1 + 20))
      {
        unsigned int v183 = v182 + v182 * *(_DWORD *)(a1 + 352) + 1;
        unint64_t v184 = v244;
        uint64_t v185 = *(unint64_t **)(a1 + 48);
        if (!v185) {
          goto LABEL_250;
        }
      }
      else
      {
        unsigned int v183 = -1;
        unint64_t v184 = v244;
        uint64_t v185 = *(unint64_t **)(a1 + 48);
        if (!v185)
        {
LABEL_250:
          int v189 = 0x80000000;
          goto LABEL_251;
        }
      }
      if (*v185 > v184)
      {
        unsigned int v186 = 0;
        unsigned int v187 = *(_DWORD *)(a1 + 100) + v238;
        unsigned int v188 = v187;
        while (v186 <= v187)
        {
          int v189 = *(_DWORD *)sub_A3F53C(v185 + 2, v185[1] * v184 + v188);
          v186 += 2;
          v188 -= 2;
          if (v189 != 0x7FFFFFFF) {
            goto LABEL_251;
          }
        }
      }
      int v189 = 0x7FFFFFFF;
LABEL_251:
      unint64_t v190 = v244 + 1;
      if (!sub_ACA26C(v245, 0, v240 + v182 * v190, v182 * v190 + 1, v183, v189)) {
        goto LABEL_255;
      }
      if (*(void *)(a1 + 240) <= v184) {
        sub_A3E96C((uint64_t)v239, v190, 0);
      }
      uint64_t v191 = *v239;
      unint64_t v192 = v184 >> 6;
      uint64_t v193 = 1 << v184;
      if ((*(void *)(*v239 + 8 * (v184 >> 6)) & (1 << v184)) != 0)
      {
LABEL_255:
        unint64_t v9 = (unint64_t)v248;
        unint64_t v6 = (void *)((char *)v247 + 12);
        unint64_t v247 = v6;
        if (v6 != v248) {
          goto LABEL_256;
        }
        goto LABEL_291;
      }
      unint64_t v195 = *(char **)(a1 + 264);
      unint64_t v194 = *(void *)(a1 + 272);
      if ((unint64_t)v195 < v194)
      {
        *(_DWORD *)unint64_t v195 = v244;
        uint64_t v196 = (uint64_t)(v195 + 4);
        goto LABEL_290;
      }
      long long v197 = (char *)*v234;
      uint64_t v198 = v195 - (unsigned char *)*v234;
      uint64_t v199 = v198 >> 2;
      unint64_t v200 = (v198 >> 2) + 1;
      if (v200 >> 62) {
        sub_2E00();
      }
      uint64_t v201 = v194 - (void)v197;
      if (v201 >> 1 > v200) {
        unint64_t v200 = v201 >> 1;
      }
      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v200 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v236 = v200;
      if (v200)
      {
        if (v200 >> 62) {
          goto LABEL_315;
        }
        uint64_t v202 = operator new(4 * v200);
        uint64_t v203 = (unsigned int *)&v202[4 * v199];
        unsigned int *v203 = v244;
        uint64_t v196 = (uint64_t)(v203 + 1);
        if (v195 != v197)
        {
LABEL_268:
          unint64_t v204 = v195 - 4 - v197;
          unint64_t v205 = v236;
          if (v204 < 0x2C) {
            goto LABEL_322;
          }
          if ((unint64_t)(v195 - &v202[v198]) < 0x20) {
            goto LABEL_322;
          }
          uint64_t v218 = (v204 >> 2) + 1;
          uint64_t v219 = 4 * (v218 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v220 = &v195[-v219];
          uint64_t v203 = (unsigned int *)((char *)v203 - v219);
          char v221 = &v202[4 * v199 - 16];
          long long v222 = v195 - 16;
          uint64_t v223 = v218 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v224 = *(_OWORD *)v222;
            *(v221 - 1) = *((_OWORD *)v222 - 1);
            _OWORD *v221 = v224;
            v221 -= 2;
            v222 -= 32;
            v223 -= 8;
          }
          while (v223);
          unint64_t v195 = v220;
          if (v218 != (v218 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_322:
            do
            {
              unsigned int v225 = *((_DWORD *)v195 - 1);
              v195 -= 4;
              *--uint64_t v203 = v225;
            }
            while (v195 != v197);
          }
          goto LABEL_288;
        }
      }
      else
      {
        uint64_t v202 = 0;
        uint64_t v203 = (unsigned int *)(4 * v199);
        *(_DWORD *)(4 * v199) = v244;
        uint64_t v196 = 4 * v199 + 4;
        if (v195 != v197) {
          goto LABEL_268;
        }
      }
      unint64_t v205 = v236;
LABEL_288:
      *(void *)(a1 + 256) = v203;
      *(void *)(a1 + 264) = v196;
      *(void *)(a1 + 272) = &v202[4 * v205];
      if (v197)
      {
        uint64_t v226 = v196;
        operator delete(v197);
        uint64_t v196 = v226;
        uint64_t v191 = *v239;
      }
LABEL_290:
      *(void *)(a1 + 264) = v196;
      *(void *)(v191 + 8 * v192) |= v193;
      unint64_t v9 = (unint64_t)v248;
      unint64_t v6 = (void *)((char *)v247 + 12);
      unint64_t v247 = v6;
      if (v6 != v248)
      {
LABEL_256:
        int v8 = v251;
        unint64_t v10 = v250[0];
        if (*(unsigned char *)(v246 + 16)) {
          goto LABEL_292;
        }
        goto LABEL_10;
      }
LABEL_291:
      unint64_t v6 = v249;
      unint64_t v10 = v250[0];
      unint64_t v247 = v249;
      int v8 = 1;
      unsigned __int8 v251 = 1;
      if (*(unsigned char *)(v246 + 16))
      {
LABEL_292:
        if (v8) {
          unint64_t v227 = v10;
        }
        else {
          unint64_t v227 = v9;
        }
        if ((unint64_t)v6 < v227)
        {
          while (1)
          {
            unint64_t v228 = __ROR8__(*v6, 32);
            BOOL v229 = HIDWORD(v228) != 1 || (v228 + 3) >= 2;
            if (!v229) {
              break;
            }
            if (sub_2AB7E4(**(void **)(v246 + 4120)))
            {
              LOBYTE(v8) = v251;
              unint64_t v6 = v247;
              unint64_t v9 = (unint64_t)v248;
              break;
            }
            unint64_t v9 = (unint64_t)v248;
            unint64_t v6 = (void *)((char *)v247 + 12);
            unint64_t v247 = v6;
            if (v6 == v248)
            {
              unint64_t v6 = v249;
              unint64_t v247 = v249;
              LOBYTE(v8) = 1;
              unsigned __int8 v251 = 1;
              if ((unint64_t)v249 >= v250[0]) {
                break;
              }
            }
            else
            {
              LOBYTE(v8) = v251;
              uint64_t v230 = &v248;
              if (v251) {
                uint64_t v230 = v250;
              }
              if ((unint64_t)v6 >= *v230) {
                break;
              }
            }
          }
          unint64_t v10 = v250[0];
        }
      }
LABEL_10:
      if ((_BYTE)v8) {
        unint64_t v9 = v10;
      }
      if ((unint64_t)v6 >= v9) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_56;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unsigned int v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
        goto LABEL_60;
      }
      goto LABEL_31;
    }
LABEL_59:
    uint64_t v24 = v19;
    if (!sub_A3BA84(*(void *)(a1 + 32), 1)) {
      goto LABEL_60;
    }
    goto LABEL_31;
  }
LABEL_311:
  double result = sub_72688((uint64_t)v252) + *(double *)(a1 + 504);
  *(double *)(a1 + 504) = result;
  return result;
}

void sub_AC9188(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AC919C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AC91B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AC91C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AC91D8(uint64_t a1)
{
  int v2 = *(unsigned int **)(a1 + 328);
  int v3 = *(unsigned int **)(a1 + 336);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 280);
    unint64_t v6 = *(unsigned int **)(a1 + 328);
    do
    {
      unsigned int v7 = *v6++;
      *(void *)(v4 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) &= ~(1 << v7);
      *(_DWORD *)(v5 + 4 * v7) = -1;
    }
    while (v6 != v3);
  }
  *(void *)(a1 + 336) = v2;
  int v8 = *(unsigned int **)(a1 + 256);
  unsigned int v208 = *(unsigned int **)(a1 + 264);
  if (v8 == v208) {
    return;
  }
  unint64_t v204 = (void **)(a1 + 328);
  uint64_t v210 = (uint64_t *)(a1 + 304);
  while (2)
  {
    long long v211 = v8;
    unint64_t v9 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 32) + 88), *v8);
    sub_A1DF34((uint64_t)v212, *(void **)(a1 + 24), *v9, 0, 0, 0);
LABEL_8:
    unint64_t v10 = v215;
LABEL_9:
    unint64_t v11 = (unint64_t)v216;
    while ((unint64_t)v10 < v11)
    {
      unint64_t v12 = __ROR8__(*v10, 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      unsigned int v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_54;
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = -1;
        uint64_t v26 = 1;
        do
        {
          if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
          {
            if (v25 == -1) {
              uint64_t v25 = v20;
            }
          }
          else if (__PAIR64__(v22, v23) == v12)
          {
            goto LABEL_51;
          }
          uint64_t v20 = (v20 + v26) & v14;
          unsigned int v27 = (unsigned int *)(v17 + 12 * v20);
          unsigned int v23 = *v27;
          unsigned int v22 = v27[1];
          ++v26;
        }
        while (v18 != v22 || v19 != v23);
        if (v25 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
            goto LABEL_29;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v25 = v20;
        if (sub_A3BA84(*(void *)(a1 + 40), 1)) {
          goto LABEL_29;
        }
        goto LABEL_55;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_54;
        }
      }
LABEL_51:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unsigned int v47 = *(_DWORD *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_110;
        }
        goto LABEL_88;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(a1 + 40), 1))
      {
LABEL_29:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        unsigned int v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_78;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_72;
            }
            uint64_t v33 = (v33 + v40) & v29;
            int v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_78:
          }
            uint64_t v39 = v33;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555) {
            goto LABEL_268;
          }
        }
        else
        {
          uint64_t v53 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v53) & v29;
            uint64_t v54 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v54;
            unsigned int v35 = v54[1];
            ++v53;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_78;
            }
          }
LABEL_72:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unsigned int v47 = *(_DWORD *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_110;
            }
            goto LABEL_88;
          }
          uint64_t v39 = -1;
          uint64_t v56 = *(void *)(v13 + 48);
          if ((unint64_t)(v56 - v37) >= 0x1555555555555555)
          {
LABEL_268:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v57 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v57[1])
            ? (BOOL v58 = *(_DWORD *)(v13 + 32) == *v57)
            : (BOOL v58 = 0),
              v58))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v52 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v56 + 1;
          uint64_t v52 = 3 * v39;
        }
        goto LABEL_87;
      }
LABEL_55:
      uint64_t v49 = *(void *)(v13 + 40);
      uint64_t v48 = *(void *)(v13 + 48);
      if ((unint64_t)(v48 - v49) >= 0x1555555555555555) {
        goto LABEL_268;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v49
        && ((uint64_t v50 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v50[1])
          ? (BOOL v51 = *(_DWORD *)(v13 + 32) == *v50)
          : (BOOL v51 = 0),
            v51))
      {
        *(void *)(v13 + 40) = v49 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v48 + 1;
      }
      uint64_t v52 = 3 * v25;
LABEL_87:
      uint64_t v59 = 4 * v52;
      uint64_t v60 = v30 + v59;
      *(void *)uint64_t v60 = v12;
      *(_DWORD *)(v60 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v59;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
      if (v47 != -1) {
        goto LABEL_110;
      }
LABEL_88:
      int v61 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v61 + 1;
      *(_DWORD *)(v46 + 8) = v61;
      uint64_t v63 = *(char **)(v13 + 96);
      unint64_t v62 = *(void *)(v13 + 104);
      if ((unint64_t)v63 >= v62)
      {
        unint64_t v65 = (char **)(v13 + 88);
        uint64_t v66 = *(char **)(v13 + 88);
        uint64_t v67 = (v63 - v66) >> 3;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v69 = v62 - (void)v66;
        if (v69 >> 2 > v68) {
          unint64_t v68 = v69 >> 2;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v68)
        {
          if (v68 >> 61) {
            goto LABEL_269;
          }
          unint64_t v70 = v68;
          uint64_t v71 = (char *)operator new(8 * v68);
          unint64_t v65 = (char **)(v13 + 88);
          unsigned int v72 = &v71[8 * v67];
          *(void *)unsigned int v72 = v12;
          uint64_t v64 = (uint64_t)(v72 + 8);
          if (v63 == v66) {
            goto LABEL_107;
          }
LABEL_100:
          unint64_t v73 = v63 - 8 - v66;
          if (v73 < 0x58) {
            goto LABEL_274;
          }
          if ((unint64_t)(v66 - v71) < 0x20) {
            goto LABEL_274;
          }
          uint64_t v74 = (v73 >> 3) + 1;
          uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
          long long v76 = &v63[-v75];
          v72 -= v75;
          uint64_t v77 = &v71[8 * v67 - 16];
          uint64_t v78 = (long long *)(v63 - 16);
          uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *v78;
            *((_OWORD *)v77 - 1) = *(v78 - 1);
            *(_OWORD *)uint64_t v77 = v80;
            v77 -= 32;
            v78 -= 2;
            v79 -= 4;
          }
          while (v79);
          uint64_t v63 = v76;
          if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              uint64_t v81 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v72 - 1) = v81;
              v72 -= 8;
            }
            while (v63 != v66);
          }
          uint64_t v63 = *v65;
        }
        else
        {
          unint64_t v70 = 0;
          uint64_t v71 = 0;
          unsigned int v72 = (char *)(8 * v67);
          *(void *)(8 * v67) = v12;
          uint64_t v64 = 8 * v67 + 8;
          if (v63 != v66) {
            goto LABEL_100;
          }
        }
LABEL_107:
        *(void *)(v13 + 88) = v72;
        *(void *)(v13 + 96) = v64;
        *(void *)(v13 + 104) = &v71[8 * v70];
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_109;
      }
      *(void *)uint64_t v63 = v12;
      uint64_t v64 = (uint64_t)(v63 + 8);
LABEL_109:
      *(void *)(v13 + 96) = v64;
      unsigned int v47 = *(_DWORD *)(v46 + 8);
LABEL_110:
      unsigned int v82 = *((unsigned __int16 *)v215 + 5);
      unint64_t v83 = (unint64_t)v47 >> 6;
      if (*(void *)(a1 + 312) <= (unint64_t)v47)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        goto LABEL_141;
      }
      uint64_t v84 = *(void *)(a1 + 304);
      uint64_t v85 = *(void *)(v84 + 8 * v83);
      uint64_t v86 = 1 << v47;
      uint64_t v87 = *(unsigned char **)(a1 + 280);
      if ((v85 & (1 << v47)) == 0) {
        goto LABEL_141;
      }
      uint64_t v88 = *(unsigned char **)(a1 + 288);
      unint64_t v89 = (v88 - v87) >> 2;
      if (v89 > v47) {
        goto LABEL_139;
      }
      unint64_t v90 = v47 + 1;
      unint64_t v91 = v90 - v89;
      unsigned int v205 = *((unsigned __int16 *)v215 + 5);
      if (v90 > v89)
      {
        uint64_t v92 = *(void *)(a1 + 296);
        if (v91 > (v92 - (uint64_t)v88) >> 2)
        {
          uint64_t v93 = v92 - (void)v87;
          uint64_t v94 = v93 >> 1;
          if (v93 >> 1 <= v90) {
            uint64_t v94 = v47 + 1;
          }
          BOOL v95 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v95) {
            unint64_t v96 = v94;
          }
          if (v96 >> 62) {
LABEL_269:
          }
            sub_188D718();
          uint64_t v201 = 4 * v96;
          unint64_t v200 = operator new(4 * v96);
          uint64_t v206 = &v200[4 * v89];
          size_t v97 = 4 * v91;
          memset(v206, 255, v97);
          if (v88 == v87)
          {
            uint64_t v99 = &v200[4 * v89];
            uint64_t v100 = v201;
            unint64_t v90 = v47 + 1;
            unint64_t v101 = v200;
          }
          else
          {
            unint64_t v98 = v88 - 4 - v87;
            if (v98 < 0x2C)
            {
              uint64_t v99 = &v200[4 * v89];
              uint64_t v100 = v201;
              unint64_t v90 = v47 + 1;
              unint64_t v101 = v200;
              goto LABEL_135;
            }
            unint64_t v101 = v200;
            uint64_t v100 = v201;
            uint64_t v99 = &v200[4 * v89];
            unint64_t v90 = v47 + 1;
            if ((unint64_t)(v87 - v200) < 0x20) {
              goto LABEL_275;
            }
            uint64_t v103 = (v98 >> 2) + 1;
            uint64_t v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v105 = &v88[-v104];
            uint64_t v99 = &v206[-v104];
            uint64_t v106 = &v200[4 * v89 - 16];
            uint64_t v107 = (long long *)(v88 - 16);
            uint64_t v108 = v103 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v109 = *v107;
              *(v106 - 1) = *(v107 - 1);
              _OWORD *v106 = v109;
              v106 -= 2;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            uint64_t v88 = v105;
            if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_275:
              do
              {
LABEL_135:
                int v110 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v99 - 1) = v110;
                v99 -= 4;
              }
              while (v88 != v87);
            }
          }
          *(void *)(a1 + 280) = v99;
          *(void *)(a1 + 288) = &v206[v97];
          *(void *)(a1 + 296) = &v101[v100];
          if (v87)
          {
            operator delete(v87);
            unint64_t v90 = v47 + 1;
          }
          goto LABEL_138;
        }
        memset(v88, 255, 4 * v91);
        unint64_t v90 = v47 + 1;
        uint64_t v102 = &v88[4 * v91];
        goto LABEL_127;
      }
      if (v90 < v89)
      {
        uint64_t v102 = &v87[4 * v90];
LABEL_127:
        *(void *)(a1 + 288) = v102;
      }
LABEL_138:
      sub_A3E96C((uint64_t)v210, v90, 0);
      uint64_t v84 = *v210;
      uint64_t v85 = *(void *)(*v210 + 8 * v83);
      unsigned int v82 = v205;
LABEL_139:
      if ((v85 & v86) != 0)
      {
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] < v82) {
          goto LABEL_141;
        }
LABEL_156:
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 != v216) {
          goto LABEL_157;
        }
LABEL_205:
        unint64_t v168 = v213 + 2;
        uint64_t v213 = v168;
        if ((unint64_t)v168 >= v214) {
          break;
        }
        while (1)
        {
          unint64_t v10 = (void *)*v168;
          unint64_t v11 = v168[1];
          if (*v168 != v11) {
            break;
          }
          v168 += 2;
          uint64_t v213 = v168;
          if ((unint64_t)v168 >= v214) {
            goto LABEL_6;
          }
        }
        uint64_t v215 = (void *)*v168;
        uint64_t v216 = (void *)v11;
        if ((unint64_t)v10 < v11)
        {
          while (1)
          {
LABEL_225:
            if (!v218)
            {
              uint64_t v178 = v212[0];
              uint64_t v179 = *v10;
              uint64_t v180 = *(void *)(v212[0] + 4136);
              if (sub_C259C0(v180 + 3896))
              {
                if (*(void *)(v180 + 3944))
                {
                  unint64_t v181 = __ROR8__(v179, 32);
                  if (!sub_A10E20((void *)(v178 + 4136), SHIDWORD(v181)))
                  {
                    int v182 = *(void **)(*(void *)(v178 + 4136) + 3944);
                    int8x8_t v183 = (int8x8_t)v182[1];
                    if (v183)
                    {
                      unint64_t v184 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v181 ^ (v181 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v181 ^ (v181 >> 33))) >> 33));
                      unint64_t v185 = v184 ^ (v184 >> 33);
                      uint8x8_t v186 = (uint8x8_t)vcnt_s8(v183);
                      v186.i16[0] = vaddlv_u8(v186);
                      if (v186.u32[0] > 1uLL)
                      {
                        unint64_t v187 = v185;
                        if (v185 >= *(void *)&v183) {
                          unint64_t v187 = v185 % *(void *)&v183;
                        }
                      }
                      else
                      {
                        unint64_t v187 = (*(void *)&v183 - 1) & v185;
                      }
                      unint64_t v190 = *(uint64_t ***)(*v182 + 8 * v187);
                      if (v190)
                      {
                        uint64_t v191 = *v190;
                        if (v191)
                        {
                          if (v186.u32[0] < 2uLL)
                          {
                            uint64_t v192 = *(void *)&v183 - 1;
                            while (1)
                            {
                              uint64_t v196 = v191[1];
                              if (v185 == v196)
                              {
                                if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181) {
                                  goto LABEL_222;
                                }
                              }
                              else if ((v196 & v192) != v187)
                              {
                                goto LABEL_261;
                              }
                              uint64_t v191 = (uint64_t *)*v191;
                              if (!v191) {
                                goto LABEL_261;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v194 = v191[1];
                            if (v185 == v194)
                            {
                              if (*((_DWORD *)v191 + 5) == HIDWORD(v181) && *((_DWORD *)v191 + 4) == v181)
                              {
LABEL_222:
                                unint64_t v10 = v215;
                                goto LABEL_223;
                              }
                            }
                            else
                            {
                              if (v194 >= *(void *)&v183) {
                                v194 %= *(void *)&v183;
                              }
                              if (v194 != v187) {
                                break;
                              }
                            }
                            uint64_t v191 = (uint64_t *)*v191;
                          }
                          while (v191);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_261:
            if (v217) {
              goto LABEL_8;
            }
            unsigned int v197 = sub_C2599C(v212[0] + 3896);
            unint64_t v10 = v215;
            if (v197 >= *((unsigned __int8 *)v215 + 14))
            {
              if (v217) {
                goto LABEL_9;
              }
              char v198 = sub_51D60((unsigned __int8 *)(v212[0] + 3896));
              unint64_t v10 = v215;
              if ((v198 & 1) != 0 || (*((unsigned char *)v215 + 15) & 1) == 0) {
                goto LABEL_9;
              }
            }
LABEL_223:
            v10 += 2;
            uint64_t v215 = v10;
            if (v10 == v216)
            {
              unsigned int v188 = v213 + 2;
              uint64_t v213 = v188;
              if ((unint64_t)v188 >= v214) {
                goto LABEL_9;
              }
              while (1)
              {
                unint64_t v10 = (void *)*v188;
                unint64_t v189 = v188[1];
                if (*v188 != v189) {
                  break;
                }
                v188 += 2;
                uint64_t v213 = v188;
                if ((unint64_t)v188 >= v214) {
                  goto LABEL_6;
                }
              }
              uint64_t v215 = (void *)*v188;
              uint64_t v216 = (void *)v189;
              if ((unint64_t)v10 >= v189) {
                goto LABEL_9;
              }
            }
            else if (v10 >= v216)
            {
              goto LABEL_9;
            }
          }
        }
      }
      else
      {
        *(void *)(v84 + 8 * v83) = v85 | v86;
        unsigned int v127 = *(char **)(a1 + 336);
        unint64_t v126 = *(void *)(a1 + 344);
        if ((unint64_t)v127 < v126)
        {
          *(_DWORD *)unsigned int v127 = v47;
          *(void *)(a1 + 336) = v127 + 4;
          uint64_t v87 = *(unsigned char **)(a1 + 280);
          if (*(_DWORD *)&v87[4 * v47] >= v82) {
            goto LABEL_156;
          }
          goto LABEL_141;
        }
        unint64_t v128 = (char *)*v204;
        uint64_t v129 = v127 - (unsigned char *)*v204;
        uint64_t v130 = v129 >> 2;
        unint64_t v131 = (v129 >> 2) + 1;
        if (v131 >> 62) {
          goto LABEL_270;
        }
        uint64_t v132 = v126 - (void)v128;
        if (v132 >> 1 > v131) {
          unint64_t v131 = v132 >> 1;
        }
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v131;
        }
        if (!v133)
        {
          unsigned int v134 = v82;
          unsigned int v135 = 0;
          uint64_t v136 = (unsigned int *)(4 * v130);
          *(_DWORD *)(4 * v130) = v47;
          uint64_t v137 = 4 * v130 + 4;
          if (v127 == v128) {
            goto LABEL_218;
          }
LABEL_212:
          unint64_t v169 = v127 - 4 - v128;
          if (v169 < 0x2C) {
            goto LABEL_276;
          }
          if ((unint64_t)(v127 - &v135[v129]) < 0x20) {
            goto LABEL_276;
          }
          uint64_t v170 = (v169 >> 2) + 1;
          uint64_t v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
          int32x2_t v172 = &v127[-v171];
          uint64_t v136 = (unsigned int *)((char *)v136 - v171);
          uint64_t v173 = &v135[4 * v130 - 16];
          unsigned int v174 = v127 - 16;
          uint64_t v175 = v170 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v176 = *(_OWORD *)v174;
            *(v173 - 1) = *((_OWORD *)v174 - 1);
            _OWORD *v173 = v176;
            v173 -= 2;
            v174 -= 32;
            v175 -= 8;
          }
          while (v175);
          unsigned int v127 = v172;
          if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_276:
            do
            {
              unsigned int v177 = *((_DWORD *)v127 - 1);
              v127 -= 4;
              *--uint64_t v136 = v177;
            }
            while (v127 != v128);
          }
          goto LABEL_218;
        }
        if (v133 >> 62) {
          goto LABEL_269;
        }
        unsigned int v134 = v82;
        unsigned int v135 = operator new(4 * v133);
        uint64_t v136 = (unsigned int *)&v135[4 * v130];
        unsigned int *v136 = v47;
        uint64_t v137 = (uint64_t)(v136 + 1);
        if (v127 != v128) {
          goto LABEL_212;
        }
LABEL_218:
        *(void *)(a1 + 328) = v136;
        *(void *)(a1 + 336) = v137;
        *(void *)(a1 + 344) = &v135[4 * v133];
        if (v128) {
          operator delete(v128);
        }
        unsigned int v82 = v134;
        unint64_t v83 = (unint64_t)v47 >> 6;
        *(void *)(a1 + 336) = v137;
        uint64_t v87 = *(unsigned char **)(a1 + 280);
        if (*(_DWORD *)&v87[4 * v47] >= v82) {
          goto LABEL_156;
        }
LABEL_141:
        unsigned int v111 = *(unsigned char **)(a1 + 288);
        unint64_t v112 = (v111 - v87) >> 2;
        if (v112 > v47) {
          goto LABEL_180;
        }
        unint64_t v113 = v47 + 1;
        unint64_t v114 = v113 - v112;
        unint64_t v209 = v83;
        if (v113 > v112)
        {
          uint64_t v115 = *(void *)(a1 + 296);
          if (v114 > (v115 - (uint64_t)v111) >> 2)
          {
            uint64_t v116 = v115 - (void)v87;
            uint64_t v117 = v116 >> 1;
            if (v116 >> 1 <= v113) {
              uint64_t v117 = v47 + 1;
            }
            BOOL v95 = (unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v95) {
              unint64_t v118 = v117;
            }
            if (v118 >> 62) {
              goto LABEL_269;
            }
            unsigned int v119 = v82;
            *(void *)uint64_t v203 = 4 * v118;
            uint64_t v202 = operator new(4 * v118);
            uint64_t v207 = &v202[4 * v112];
            size_t v120 = 4 * v114;
            memset(v207, 255, v120);
            if (v111 == v87)
            {
              long long v122 = &v202[4 * v112];
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
            }
            else
            {
              unint64_t v121 = v111 - 4 - v87;
              if (v121 < 0x2C)
              {
                long long v122 = &v202[4 * v112];
                uint64_t v124 = v202;
                uint64_t v123 = *(void *)v203;
                goto LABEL_176;
              }
              uint64_t v124 = v202;
              uint64_t v123 = *(void *)v203;
              long long v122 = &v202[4 * v112];
              if ((unint64_t)(v87 - v202) < 0x20) {
                goto LABEL_277;
              }
              uint64_t v138 = (v121 >> 2) + 1;
              uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v140 = &v111[-v139];
              long long v122 = &v207[-v139];
              unint64_t v141 = &v202[4 * v112 - 16];
              uint64_t v142 = (long long *)(v111 - 16);
              uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v144 = *v142;
                *(v141 - 1) = *(v142 - 1);
                _OWORD *v141 = v144;
                v141 -= 2;
                v142 -= 2;
                v143 -= 8;
              }
              while (v143);
              unsigned int v111 = v140;
              if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_277:
                do
                {
LABEL_176:
                  int v145 = *((_DWORD *)v111 - 1);
                  v111 -= 4;
                  *((_DWORD *)v122 - 1) = v145;
                  v122 -= 4;
                }
                while (v111 != v87);
              }
            }
            *(void *)(a1 + 280) = v122;
            *(void *)(a1 + 288) = &v207[v120];
            *(void *)(a1 + 296) = &v124[v123];
            if (v87) {
              operator delete(v87);
            }
            goto LABEL_179;
          }
          unsigned int v119 = v82;
          memset(v111, 255, 4 * v114);
          uint64_t v125 = &v111[4 * v114];
          goto LABEL_160;
        }
        unsigned int v119 = v82;
        if (v113 < v112)
        {
          uint64_t v125 = &v87[4 * v113];
LABEL_160:
          *(void *)(a1 + 288) = v125;
        }
LABEL_179:
        sub_A3E96C((uint64_t)v210, v47 + 1, 0);
        unsigned int v82 = v119;
        unint64_t v83 = v209;
LABEL_180:
        uint64_t v146 = *(void *)(*v210 + 8 * v83);
        if ((v146 & (1 << v47)) != 0) {
          goto LABEL_204;
        }
        *(void *)(*v210 + 8 * v83) = v146 | (1 << v47);
        long long v148 = *(char **)(a1 + 336);
        unint64_t v147 = *(void *)(a1 + 344);
        if ((unint64_t)v148 >= v147)
        {
          uint64_t v150 = (char *)*v204;
          uint64_t v151 = v148 - (unsigned char *)*v204;
          uint64_t v152 = v151 >> 2;
          unint64_t v153 = (v151 >> 2) + 1;
          if (v153 >> 62) {
LABEL_270:
          }
            sub_2E00();
          uint64_t v154 = v147 - (void)v150;
          if (v154 >> 1 > v153) {
            unint64_t v153 = v154 >> 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v155 = v153;
          }
          if (v155)
          {
            if (v155 >> 62) {
              goto LABEL_269;
            }
            unsigned int v156 = v82;
            unsigned int v157 = operator new(4 * v155);
            int v158 = (unsigned int *)&v157[4 * v152];
            *int v158 = v47;
            uint64_t v149 = (uint64_t)(v158 + 1);
            if (v148 == v150) {
              goto LABEL_200;
            }
LABEL_194:
            unint64_t v159 = v148 - 4 - v150;
            if (v159 < 0x2C) {
              goto LABEL_278;
            }
            if ((unint64_t)(v148 - &v157[v151]) < 0x20) {
              goto LABEL_278;
            }
            uint64_t v160 = (v159 >> 2) + 1;
            uint64_t v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v162 = &v148[-v161];
            int v158 = (unsigned int *)((char *)v158 - v161);
            uint64_t v163 = &v157[4 * v152 - 16];
            unint64_t v164 = v148 - 16;
            uint64_t v165 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              _OWORD *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 8;
            }
            while (v165);
            long long v148 = v162;
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                unsigned int v167 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--int v158 = v167;
              }
              while (v148 != v150);
            }
          }
          else
          {
            unsigned int v156 = v82;
            unsigned int v157 = 0;
            int v158 = (unsigned int *)(4 * v152);
            *(_DWORD *)(4 * v152) = v47;
            uint64_t v149 = 4 * v152 + 4;
            if (v148 != v150) {
              goto LABEL_194;
            }
          }
LABEL_200:
          *(void *)(a1 + 328) = v158;
          *(void *)(a1 + 336) = v149;
          *(void *)(a1 + 344) = &v157[4 * v155];
          if (v150) {
            operator delete(v150);
          }
          unsigned int v82 = v156;
          goto LABEL_203;
        }
        *(_DWORD *)long long v148 = v47;
        uint64_t v149 = (uint64_t)(v148 + 4);
LABEL_203:
        *(void *)(a1 + 336) = v149;
LABEL_204:
        *(_DWORD *)(*(void *)(a1 + 280) + 4 * v47) = v82;
        unint64_t v11 = (unint64_t)v216;
        unint64_t v10 = v215 + 2;
        uint64_t v215 = v10;
        if (v10 == v216) {
          goto LABEL_205;
        }
LABEL_157:
        if ((unint64_t)v10 < v11) {
          goto LABEL_225;
        }
      }
    }
LABEL_6:
    int v8 = v211 + 1;
    if (v211 + 1 != v208) {
      continue;
    }
    break;
  }
}

void sub_ACA110(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ACA124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ACA138(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 100);
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = (void **)(a1 + 104);
    while (1)
    {
      sub_A86790(v4, 0);
      sub_ACA858(v4, v3 + *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 352) + 2, 0);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      if (*(unsigned int **)(a1 + 112) != v5) {
        break;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v5 = *(unsigned int **)(a1 + 104);
      uint64_t v6 = *(void *)(a1 + 128);
      uint64_t v7 = *v5;
      if (*(unsigned int **)(a1 + 112) != v5) {
        goto LABEL_6;
      }
      sub_D2BFC(v4, 1uLL);
      uint64_t v8 = v6 + (v7 << 6);
      unint64_t v9 = *(void *)(a1 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(a1 + 104) + 4) << 6);
      if (v8 != v9)
      {
LABEL_10:
        double v10 = *(double *)(a1 + 528);
        uint64_t v11 = *(void *)(a1 + 520);
        do
        {
          double v10 = v10 + 1.0;
          v11 += *(int *)(v8 + 28);
          v8 += 64;
        }
        while (v8 != v9);
        *(double *)(a1 + 528) = v10;
        *(void *)(a1 + 520) = v11;
      }
LABEL_3:
      if (++v3 == v1) {
        return;
      }
    }
    uint64_t v6 = *(void *)(a1 + 128);
    uint64_t v7 = *v5;
LABEL_6:
    uint64_t v8 = v6 + (v7 << 6);
    unint64_t v9 = v6 + ((unint64_t)v5[1] << 6);
    if (v8 != v9) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
}

BOOL sub_ACA26C(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  uint64_t v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AC0C80(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = (long long *)sub_AC0C80(a1, a2, v17);
      long long v19 = v18[2];
      long long v20 = v18[3];
      long long v21 = v18[1];
      long long v34 = *v18;
      long long v35 = v21;
      long long v36 = v19;
      long long v37 = v20;
      if (SHIDWORD(v21) >= a6)
      {
        __int16 v22 = sub_ACA4B8((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
        if ((_BYTE)v22)
        {
          sub_ACA4B8((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
          *(void *)(v23 + 52) = -1;
          *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
        }
        v13 |= v22 & 0xFF00 | v22;
      }
      ++v17;
    }
    while (v9 != v17);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v24 = 0;
    do
    {
      unsigned int v27 = (long long *)sub_AC0C80(a1, a2, v24);
      long long v28 = v27[2];
      long long v29 = v27[3];
      long long v30 = v27[1];
      long long v34 = *v27;
      long long v35 = v30;
      long long v36 = v28;
      long long v37 = v29;
      if (SHIDWORD(v30) >= a6)
      {
        if (sub_ACA6B4(a1, (uint64_t)&v34, a5))
        {
          __int16 v25 = 0;
          LOWORD(v26) = 0;
        }
        else
        {
          unint64_t v31 = sub_ACA4B8((uint64_t)a1, (uint64_t)&v34, a4, 0, 1);
          unint64_t v26 = v31 >> 8;
          __int16 v25 = v31;
          if ((_BYTE)v31)
          {
            sub_ACA4B8((uint64_t)a1, (uint64_t)&v34, a3, 1, 1);
            *(void *)(v32 + 52) = -1;
            *(_DWORD *)(v32 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v25 | v13 | v13 & 0xFF00 | ((_WORD)v26 << 8);
      }
      ++v24;
    }
    while (v9 != v24);
  }
  if ((v13 & 0xFF00) != 0)
  {
    sub_A8750C(a1, a3);
    sub_A8750C(a1, a4);
  }
  return v13 != 0;
}

unint64_t sub_ACA4B8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  if (a3 < (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    int v9 = (unsigned int *)(*(void *)a1 + 8 * a3);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    if (v11 != v10)
    {
      unsigned __int8 v12 = 0;
      int v16 = *(unsigned __int8 *)(a2 + 48);
      uint64_t v17 = v10 << 6;
      int v18 = (unsigned __int8 *)((v10 << 6) + *(void *)(a1 + 24) + 48);
      uint64_t v19 = (v11 << 6) - v17;
      while (1)
      {
        int v20 = *((_DWORD *)v18 - 5);
        if (v20 != 0x7FFFFFFF)
        {
          int v21 = *(_DWORD *)(a2 + 28);
          if (v20 >= v21 && *((_DWORD *)v18 - 4) <= *(_DWORD *)(a2 + 32))
          {
            unsigned int v22 = *(_DWORD *)(a2 + 36);
            unsigned int v23 = *((_DWORD *)v18 - 3);
            if (v23 <= v22
              && *((_DWORD *)v18 - 2) <= *(_DWORD *)(a2 + 40)
              && (v23 != v22 || v20 != v21 || *((_DWORD *)v18 - 1) - 10 * v20 <= *(_DWORD *)(a2 + 44) - 10 * v21)
              && (*v18 & ~*(unsigned __int8 *)(a2 + 48)) == 0)
            {
              return (unint64_t)v12 << 8;
            }
          }
          if (v21 >= v20 && *(_DWORD *)(a2 + 32) <= *((_DWORD *)v18 - 4))
          {
            unsigned int v24 = *((_DWORD *)v18 - 3);
            unsigned int v25 = *(_DWORD *)(a2 + 36);
            if (v25 <= v24
              && *(_DWORD *)(a2 + 40) <= *((_DWORD *)v18 - 2)
              && (v25 != v24 || v21 != v20 || *(_DWORD *)(a2 + 44) - 10 * v21 <= *((_DWORD *)v18 - 1) - 10 * v20)
              && (v16 & ~*v18) == 0)
            {
              *((_DWORD *)v18 - 5) = 0x7FFFFFFF;
              unsigned __int8 v12 = 1;
            }
          }
        }
        v18 += 64;
        v19 -= 64;
        if (!v19) {
          goto LABEL_4;
        }
      }
    }
  }
  unsigned __int8 v12 = 0;
LABEL_4:
  __int16 v13 = sub_AAD3F8((char **)a1, a3, (long long *)a2);
  if (a5)
  {
    *(void *)(v13 + 52) = -1;
    *((_DWORD *)v13 + 15) = 0x7FFFFFFF;
  }
  if (a4)
  {
    int v14 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14 + 1;
    *((_DWORD *)v13 + 6) = v14;
    *((_DWORD *)v13 + 5) = *(_DWORD *)(a2 + 24);
  }
  return ((unint64_t)v12 << 8) | 1;
}

uint64_t sub_ACA6B4(void **a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = a3;
  int v7 = (char *)*a1;
  uint64_t v8 = (char *)a1[1];
  unint64_t v9 = (v8 - (unsigned char *)*a1) >> 3;
  if (v9 <= a3)
  {
    unint64_t v10 = a3 + 1;
    if (v10 <= v9)
    {
      if (v10 < v9)
      {
        uint64_t v8 = &v7[8 * v10];
        a1[1] = v8;
      }
    }
    else
    {
      sub_D2BFC(a1, v10 - v9);
      int v7 = (char *)*a1;
      uint64_t v8 = (char *)a1[1];
    }
  }
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = *(unsigned int *)&v7[8 * v6];
  unint64_t v13 = (v8 - v7) >> 3;
  if (v13 > v6)
  {
LABEL_7:
    int v14 = &v11[64 * v12];
    unint64_t v15 = (unint64_t)&v11[64 * (unint64_t)*(unsigned int *)&v7[8 * v6 + 4]];
    if (v14 == (char *)v15) {
      return 0;
    }
    goto LABEL_11;
  }
  unint64_t v16 = a3 + 1;
  if (v16 <= v13)
  {
    if (v16 < v13) {
      a1[1] = &v7[8 * v16];
    }
    goto LABEL_7;
  }
  sub_D2BFC(a1, v16 - v13);
  int v14 = &v11[64 * v12];
  unint64_t v15 = (unint64_t)a1[3] + 64 * (unint64_t)*((unsigned int *)*a1 + 2 * v6 + 1);
  if (v14 == (char *)v15) {
    return 0;
  }
LABEL_11:
  int v17 = *(_DWORD *)(a2 + 28);
  unsigned int v18 = *(_DWORD *)(a2 + 36);
  while (1)
  {
    int v19 = *((_DWORD *)v14 + 7);
    if (v19 != 0x7FFFFFFF && v19 >= v17 && *((_DWORD *)v14 + 8) <= *(_DWORD *)(a2 + 32))
    {
      unsigned int v21 = *((_DWORD *)v14 + 9);
      if (v21 <= v18
        && *((_DWORD *)v14 + 10) <= *(_DWORD *)(a2 + 40)
        && (v21 != v18 || v19 != v17 || *((_DWORD *)v14 + 11) - 10 * v19 <= *(_DWORD *)(a2 + 44) - 10 * v17)
        && (v14[48] & ~*(unsigned __int8 *)(a2 + 48)) == 0)
      {
        break;
      }
    }
    v14 += 64;
    if (v14 == (char *)v15) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_ACA858(void **a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
    || (v5 = (char *)*a1 + 8 * a2, int v4 = v5[1], v6 = v4 - *v5, v4 == *v5))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    __int16 v7 = 0;
    unsigned int v10 = 0;
    do
    {
      uint64_t v12 = (long long *)sub_AC0C80(a1, a2, v10);
      long long v13 = v12[3];
      long long v15 = *v12;
      long long v14 = v12[1];
      v18[2] = v12[2];
      v18[3] = v13;
      v18[0] = v15;
      v18[1] = v14;
      __int16 v16 = sub_ACA4B8((uint64_t)a1, (uint64_t)v18, a3, 0, 1);
      uint64_t v17 = (unsigned __int16)(v16 | v7) & 0xFF00;
      __int16 v7 = v16 | v7 | v17;
      ++v10;
    }
    while (v6 != v10);
    if (v17) {
      sub_A8750C(a1, a3);
    }
  }
  return v7 != 0;
}

uint64_t sub_ACA93C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  unsigned int v301 = a3;
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 40) + 88), a3);
  unsigned int v257 = *(_DWORD *)sub_A3F74C((void *)(v4 + 280), &v301);
  unint64_t v269 = v5;
  uint64_t result = (uint64_t)sub_A40514(&v299, *(void *)(v4 + 24), v5);
  __int16 v7 = v299;
  if ((unint64_t)v299 < v300)
  {
    uint64_t v8 = (void **)(v4 + 104);
    uint64_t v267 = v4 + 360;
    unint64_t v268 = (void **)(v4 + 104);
    int v256 = a2 + 2;
    int v254 = ~a2;
    long long v255 = (uint64_t *)(v4 + 184);
    int v258 = a2 + 1;
    unint64_t v270 = HIDWORD(v5);
    uint64_t v259 = v4;
    while (1)
    {
      *(double *)(v4 + 552) = *(double *)(v4 + 552) + 1.0;
      uint64_t v260 = *(unsigned int *)v7;
      sub_A86790(v8, 0);
      uint64_t result = sub_A1E9A0((uint64_t)&v287, *(void *)(v4 + 24), v269, v257, 0, 1);
      unint64_t v9 = v291;
      BOOL v10 = (unint64_t)v291 < v290 || (unint64_t)v291 >= v292;
      if (!v10) {
        break;
      }
LABEL_3:
      __int16 v7 = v299 + 4;
      unint64_t v299 = v7;
      if ((unint64_t)v7 >= v300) {
        return result;
      }
    }
    while (1)
    {
      unint64_t v11 = __ROR8__(*v9, 32);
      uint64_t v12 = *(void *)(v4 + 32);
      uint64_t v13 = *(void *)(v12 + 56) - 1;
      unint64_t v14 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v11 ^ (v11 >> 33))) >> 33));
      unint64_t v15 = v14 ^ (v14 >> 33);
      uint64_t v16 = *(void *)(v12 + 80);
      int v18 = *(_DWORD *)(v12 + 64);
      int v17 = *(_DWORD *)(v12 + 68);
      uint64_t v19 = v15 & v13;
      int v20 = (unsigned int *)(v16 + 12 * (v15 & v13));
      unsigned int v22 = *v20;
      unsigned int v21 = v20[1];
      if (v17 == v21 && v18 == v22) {
        goto LABEL_58;
      }
      if (*(void *)(v12 + 40)) {
        break;
      }
      uint64_t v42 = 1;
      while (__PAIR64__(v21, v22) != v11)
      {
        uint64_t v19 = (v19 + v42) & v13;
        uint64_t v43 = (unsigned int *)(v16 + 12 * v19);
        unsigned int v22 = *v43;
        unsigned int v21 = v43[1];
        ++v42;
        if (v17 == v21 && v18 == v22) {
          goto LABEL_58;
        }
      }
LABEL_48:
      if (v19 != -1)
      {
        uint64_t v45 = v16 + 12 * v19;
        unsigned int v46 = *(_DWORD *)(v45 + 8);
        if (v46 != -1) {
          goto LABEL_50;
        }
        goto LABEL_96;
      }
      uint64_t v24 = -1;
      if (sub_A3BA84(*(void *)(v4 + 32), 1))
      {
LABEL_26:
        uint64_t v28 = *(void *)(v12 + 56) - 1;
        uint64_t v29 = *(void *)(v12 + 80);
        int v31 = *(_DWORD *)(v12 + 64);
        int v30 = *(_DWORD *)(v12 + 68);
        uint64_t v32 = v28 & v15;
        uint64_t v33 = (unsigned int *)(v29 + 12 * (v28 & v15));
        unsigned int v35 = *v33;
        unsigned int v34 = v33[1];
        uint64_t v36 = *(void *)(v12 + 40);
        if (v30 == v34 && v31 == v35) {
          goto LABEL_86;
        }
        if (v36)
        {
          uint64_t v38 = -1;
          uint64_t v39 = 1;
          do
          {
            if (*(_DWORD *)(v12 + 36) == v34 && *(_DWORD *)(v12 + 32) == v35)
            {
              if (v38 == -1) {
                uint64_t v38 = v32;
              }
            }
            else if (__PAIR64__(v34, v35) == v11)
            {
              goto LABEL_80;
            }
            uint64_t v32 = (v32 + v39) & v28;
            uint64_t v40 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v40;
            unsigned int v34 = v40[1];
            ++v39;
          }
          while (v30 != v34 || v31 != v35);
          if (v38 == -1) {
LABEL_86:
          }
            uint64_t v38 = v32;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555) {
            goto LABEL_350;
          }
        }
        else
        {
          uint64_t v66 = 1;
          while (__PAIR64__(v34, v35) != v11)
          {
            uint64_t v32 = (v32 + v66) & v28;
            uint64_t v67 = (unsigned int *)(v29 + 12 * v32);
            unsigned int v35 = *v67;
            unsigned int v34 = v67[1];
            ++v66;
            if (v30 == v34 && v31 == v35)
            {
              uint64_t v36 = 0;
              goto LABEL_86;
            }
          }
LABEL_80:
          if (v32 != -1)
          {
            uint64_t v45 = v29 + 12 * v32;
            unsigned int v46 = *(_DWORD *)(v45 + 8);
            if (v46 != -1) {
              goto LABEL_50;
            }
            goto LABEL_96;
          }
          uint64_t v38 = -1;
          uint64_t v69 = *(void *)(v12 + 48);
          if ((unint64_t)(v69 - v36) >= 0x1555555555555555)
          {
LABEL_350:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v36
          && ((unint64_t v70 = (_DWORD *)(v29 + 12 * v38), *(_DWORD *)(v12 + 36) == v70[1])
            ? (BOOL v71 = *(_DWORD *)(v12 + 32) == *v70)
            : (BOOL v71 = 0),
              v71))
        {
          *(void *)(v12 + 40) = v36 - 1;
          uint64_t v65 = 3 * v38;
        }
        else
        {
          *(void *)(v12 + 48) = v69 + 1;
          uint64_t v65 = 3 * v38;
        }
        goto LABEL_95;
      }
LABEL_59:
      uint64_t v62 = *(void *)(v12 + 40);
      uint64_t v61 = *(void *)(v12 + 48);
      if ((unint64_t)(v61 - v62) >= 0x1555555555555555) {
        goto LABEL_350;
      }
      uint64_t v29 = *(void *)(v12 + 80);
      if (v62
        && ((uint64_t v63 = (_DWORD *)(v29 + 12 * v24), *(_DWORD *)(v12 + 36) == v63[1])
          ? (BOOL v64 = *(_DWORD *)(v12 + 32) == *v63)
          : (BOOL v64 = 0),
            v64))
      {
        *(void *)(v12 + 40) = v62 - 1;
      }
      else
      {
        *(void *)(v12 + 48) = v61 + 1;
      }
      uint64_t v65 = 3 * v24;
LABEL_95:
      uint64_t v72 = 4 * v65;
      uint64_t v73 = v29 + v72;
      *(void *)uint64_t v73 = v11;
      *(_DWORD *)(v73 + 8) = -1;
      uint64_t v45 = *(void *)(v12 + 80) + v72;
      unsigned int v46 = *(_DWORD *)(v45 + 8);
      if (v46 != -1)
      {
LABEL_50:
        unsigned int v286 = v46;
        uint64_t result = sub_BD5C18(v267, v46, v11);
        if (result) {
          goto LABEL_51;
        }
        goto LABEL_120;
      }
LABEL_96:
      int v74 = *(_DWORD *)(v12 + 112);
      *(_DWORD *)(v12 + 112) = v74 + 1;
      *(_DWORD *)(v45 + 8) = v74;
      long long v76 = *(unint64_t **)(v12 + 96);
      unint64_t v75 = *(void *)(v12 + 104);
      if ((unint64_t)v76 < v75)
      {
        unint64_t *v76 = v11;
        uint64_t v77 = (uint64_t)(v76 + 1);
        goto LABEL_119;
      }
      uint64_t v78 = *(char **)(v12 + 88);
      uint64_t v79 = ((char *)v76 - v78) >> 3;
      unint64_t v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v81 = v75 - (void)v78;
      if (v81 >> 2 > v80) {
        unint64_t v80 = v81 >> 2;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v82 = v80;
      }
      if (v82)
      {
        if (v82 >> 61) {
          goto LABEL_352;
        }
        unint64_t v83 = (char *)operator new(8 * v82);
        uint64_t v84 = (unint64_t *)&v83[8 * v79];
        *uint64_t v84 = v11;
        uint64_t v77 = (uint64_t)(v84 + 1);
        if (v76 != (unint64_t *)v78)
        {
LABEL_107:
          unint64_t v85 = (char *)(v76 - 1) - v78;
          if (v85 < 0x58)
          {
            uint64_t v4 = v259;
            goto LABEL_116;
          }
          uint64_t v4 = v259;
          if ((unint64_t)(v78 - v83) < 0x20) {
            goto LABEL_358;
          }
          uint64_t v86 = (v85 >> 3) + 1;
          uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v88 = &v76[v87 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v84 = (unint64_t *)((char *)v84 - v87);
          unint64_t v89 = &v83[8 * v79 - 16];
          unint64_t v90 = v76 - 2;
          uint64_t v91 = v86 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v92 = *(_OWORD *)v90;
            *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
            *(_OWORD *)unint64_t v89 = v92;
            v89 -= 32;
            v90 -= 4;
            v91 -= 4;
          }
          while (v91);
          long long v76 = v88;
          if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_358:
            do
            {
LABEL_116:
              unint64_t v93 = *--v76;
              *--uint64_t v84 = v93;
            }
            while (v76 != (unint64_t *)v78);
          }
          long long v76 = *(unint64_t **)(v12 + 88);
          *(void *)(v12 + 88) = v84;
          *(void *)(v12 + 96) = v77;
          *(void *)(v12 + 104) = &v83[8 * v82];
          if (!v76) {
            goto LABEL_119;
          }
LABEL_118:
          operator delete(v76);
          goto LABEL_119;
        }
      }
      else
      {
        unint64_t v83 = 0;
        uint64_t v84 = (unint64_t *)(8 * v79);
        *(void *)(8 * v79) = v11;
        uint64_t v77 = 8 * v79 + 8;
        if (v76 != (unint64_t *)v78) {
          goto LABEL_107;
        }
      }
      uint64_t v4 = v259;
      *(void *)(v12 + 88) = v84;
      *(void *)(v12 + 96) = v77;
      *(void *)(v12 + 104) = &v83[8 * v82];
      if (v76) {
        goto LABEL_118;
      }
LABEL_119:
      *(void *)(v12 + 96) = v77;
      uint64_t v8 = v268;
      unsigned int v286 = *(_DWORD *)(v45 + 8);
      uint64_t result = sub_BD5C18(v267, v286, v11);
      if (result)
      {
LABEL_51:
        unsigned int v47 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v47) {
          goto LABEL_179;
        }
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        if (v49 == v48) {
          goto LABEL_179;
        }
        int v50 = v296;
        uint64_t v51 = v294;
        uint64_t v52 = v291;
        uint64_t v53 = v289;
        unint64_t v54 = ((unint64_t)v291 - v290) >> 4;
        uint64_t v55 = v48 << 6;
        uint64_t v56 = (int *)(*(void *)(v4 + 128) + (v48 << 6) + 60);
        uint64_t v57 = (v49 << 6) - v55;
        do
        {
          unsigned int v60 = *(v56 - 2);
          if (v50)
          {
            unsigned int v297 = *(v56 - 1);
            int v58 = *v56;
            int v298 = *v56;
          }
          else
          {
            int v58 = *(_DWORD *)(v51 + 12 * v60);
          }
          uint64_t v59 = (unsigned int *)((char *)v53 + *(unsigned __int16 *)((char *)v53 - *v53 + 6));
          *(v56 - 8) = *(unsigned int *)((char *)&v59[2 * (*(_DWORD *)(v51 + 12 * v60 + 4) + v54) + 2]
                                       + *v59)
                     + v58
                     - *((_DWORD *)v52 + 2);
          v56 += 16;
          v57 -= 64;
        }
        while (v57);
        int v295 = (int *)(v51 + 12 * v60);
        sub_ACC264((char *)v8, 0);
        if ((*((unsigned char *)v291 + 15) & 2) != 0
          && (!v293
           || (*(_DWORD *)(v293 + 4 * (((unint64_t)v291 - v290) >> 4)) & v260) == 0))
        {
          int v98 = *(_DWORD *)(v4 + 96);
          if (*(unsigned char *)(v4 + 20))
          {
            unsigned int v99 = v98 + v98 * *(_DWORD *)(v4 + 352);
            unint64_t v100 = v286;
            unint64_t v101 = *(unint64_t **)(v4 + 48);
            if (v101) {
              goto LABEL_131;
            }
LABEL_138:
            int v105 = 0x80000000;
          }
          else
          {
            unsigned int v99 = -1;
            unint64_t v100 = v286;
            unint64_t v101 = *(unint64_t **)(v4 + 48);
            if (!v101) {
              goto LABEL_138;
            }
LABEL_131:
            if (*v101 > v100)
            {
              unsigned int v102 = 0;
              unsigned int v103 = *(_DWORD *)(v259 + 100) + v254;
              unsigned int v104 = v103;
              while (v102 <= v103)
              {
                int v105 = *(_DWORD *)sub_A3F53C(v101 + 2, v101[1] * v100 + v104);
                v102 += 2;
                v104 -= 2;
                if (v105 != 0x7FFFFFFF) {
                  goto LABEL_139;
                }
              }
            }
            int v105 = 0x7FFFFFFF;
          }
LABEL_139:
          uint64_t v8 = v268;
          uint64_t v4 = v259;
          if (sub_ACC53C(v268, 0, v256 + v98 + v98 * v100, v98 + v98 * v100, v99, v105)) {
            sub_A3EF14(v255, &v286);
          }
        }
        uint64_t v106 = *(unsigned int **)(v4 + 104);
        uint64_t v107 = *(unsigned int **)(v4 + 112);
        uint64_t v108 = (char *)v107 - (char *)v106;
        if (v107 != v106)
        {
          uint64_t v109 = *(void *)(v4 + 128);
          uint64_t v110 = *v106;
          goto LABEL_155;
        }
        uint64_t v112 = v108 >> 3;
        unint64_t v113 = 1 - (v108 >> 3);
        uint64_t v114 = *(void *)(v4 + 120);
        if (v113 <= (v114 - (uint64_t)v107) >> 3)
        {
          bzero(*(void **)(v4 + 112), 8 * v113);
          unint64_t v121 = (char *)&v107[2 * v113];
          *(void *)(v4 + 112) = v121;
          uint64_t v106 = (unsigned int *)*v8;
          uint64_t v109 = *(void *)(v4 + 128);
          uint64_t v110 = *(unsigned int *)*v8;
          if (*v8 != v121) {
            goto LABEL_155;
          }
          goto LABEL_143;
        }
        uint64_t v115 = v114 - (void)v106;
        uint64_t v116 = v115 >> 2;
        if ((unint64_t)(v115 >> 2) <= 1) {
          uint64_t v116 = 1;
        }
        BOOL v10 = (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v10) {
          unint64_t v117 = v116;
        }
        if (v117 >> 61) {
LABEL_352:
        }
          sub_188D718();
        uint64_t v118 = 8 * v117;
        unsigned int v119 = (char *)operator new(8 * v117);
        size_t v120 = &v119[8 * v112];
        bzero(v120, 8 * v113);
        *(void *)(v4 + 104) = v120;
        *(void *)(v4 + 112) = &v120[8 * v113];
        *(void *)(v4 + 120) = &v119[v118];
        if (!v107)
        {
          unint64_t v121 = &v120[8 * v113];
          uint64_t v8 = v268;
          uint64_t v106 = (unsigned int *)*v268;
          uint64_t v109 = *(void *)(v4 + 128);
          uint64_t v110 = *(unsigned int *)*v268;
          if (*v268 == v121) {
            goto LABEL_143;
          }
LABEL_155:
          long long v122 = (_DWORD *)(v109 + (v110 << 6));
          unint64_t v123 = v109 + ((unint64_t)v106[1] << 6);
          if (v122 != (_DWORD *)v123) {
            goto LABEL_172;
          }
          goto LABEL_178;
        }
        operator delete(v107);
        unint64_t v121 = *(char **)(v4 + 112);
        uint64_t v8 = v268;
        uint64_t v106 = (unsigned int *)*v268;
        uint64_t v109 = *(void *)(v4 + 128);
        uint64_t v110 = *(unsigned int *)*v268;
        if (*v268 != v121) {
          goto LABEL_155;
        }
LABEL_143:
        unsigned int v111 = *(char **)(v4 + 120);
        if (v111 != v121)
        {
          *(void *)unint64_t v121 = 0;
          *(void *)(v4 + 112) = v121 + 8;
          goto LABEL_171;
        }
        uint64_t v124 = 1;
        uint64_t v125 = v111 - (char *)v106;
        if ((unint64_t)(v125 >> 2) > 1) {
          uint64_t v124 = v125 >> 2;
        }
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v126 = v124;
        }
        if (v126)
        {
          if (v126 >> 61) {
            goto LABEL_352;
          }
          unsigned int v127 = (char *)operator new(8 * v126);
          unint64_t v128 = v127;
          *(void *)unsigned int v127 = 0;
          uint64_t v129 = (uint64_t)(v127 + 8);
          if (v121 != (char *)v106)
          {
LABEL_165:
            unint64_t v130 = v121 - 8 - (char *)v106;
            if (v130 < 0x58 || (unint64_t)(v121 - v127) < 0x20)
            {
              unint64_t v131 = (unsigned int *)v121;
              uint64_t v4 = v259;
              goto LABEL_168;
            }
            uint64_t v240 = (v130 >> 3) + 1;
            uint64_t v241 = 8 * (v240 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v131 = (unsigned int *)&v121[-v241];
            v128 -= v241;
            unsigned int v242 = v127 - 16;
            unint64_t v243 = v121 - 16;
            uint64_t v244 = v240 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v4 = v259;
            do
            {
              long long v245 = *(_OWORD *)v243;
              *((_OWORD *)v242 - 1) = *((_OWORD *)v243 - 1);
              *(_OWORD *)unsigned int v242 = v245;
              v242 -= 32;
              v243 -= 32;
              v244 -= 4;
            }
            while (v244);
            if (v240 != (v240 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_168:
                uint64_t v132 = *((void *)v131 - 1);
                v131 -= 2;
                *((void *)v128 - 1) = v132;
                v128 -= 8;
              }
              while (v131 != v106);
            }
            unint64_t v121 = (char *)*v8;
            *(void *)(v4 + 104) = v128;
            *(void *)(v4 + 112) = v129;
            *(void *)(v4 + 120) = &v127[8 * v126];
            if (v121) {
LABEL_170:
            }
              operator delete(v121);
LABEL_171:
            long long v122 = (_DWORD *)(v109 + (v110 << 6));
            unint64_t v123 = *(void *)(v4 + 128) + ((unint64_t)*(unsigned int *)(*(void *)(v4 + 104) + 4) << 6);
            if (v122 != (_DWORD *)v123)
            {
LABEL_172:
              int v133 = v296;
              uint64_t v134 = v294;
              unsigned int v135 = v289;
              unint64_t v136 = ((unint64_t)v291 - v290) >> 4;
              do
              {
                unsigned int v139 = v122[13];
                if (v133)
                {
                  unsigned int v297 = v122[14];
                  int v137 = v122[15];
                  int v298 = v137;
                }
                else
                {
                  int v137 = *(_DWORD *)(v134 + 12 * v139);
                }
                uint64_t v138 = (unsigned int *)((char *)v135 + *(unsigned __int16 *)((char *)v135 - *v135 + 6));
                v122[7] = *(unsigned int *)((char *)&v138[2 * (*(_DWORD *)(v134 + 12 * v139 + 4) + v136)
                                                        + 1]
                                          + *v138)
                        + v137;
                v122 += 16;
              }
              while (v122 != (_DWORD *)v123);
              int v295 = (int *)(v134 + 12 * v139);
            }
LABEL_178:
            uint64_t result = (uint64_t)sub_ACC264((char *)v8, 0);
LABEL_179:
            if ((*((unsigned char *)v291 + 15) & 1) == 0) {
              goto LABEL_186;
            }
            if (v293)
            {
              if (*(_DWORD *)(v293 + 4 * (((unint64_t)v291 - v290) >> 4)) != v260) {
                goto LABEL_186;
              }
            }
            else if (v260)
            {
              goto LABEL_186;
            }
            unint64_t v140 = v258 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v286;
            uint64_t v141 = *(void *)(v4 + 104);
            if (v140 >= (*(void *)(v4 + 112) - v141) >> 3) {
              goto LABEL_186;
            }
            uint64_t v143 = (_DWORD *)(v141 + 8 * v140);
            int v142 = v143[1];
            uint64_t v144 = (v142 - *v143);
            if (v142 == *v143) {
              goto LABEL_186;
            }
            unsigned int v152 = 0;
            unint64_t v261 = v258 + *(_DWORD *)(v4 + 96) + *(_DWORD *)(v4 + 96) * v286;
            while (2)
            {
              uint64_t v153 = *(void *)(v4 + 104);
              if (v140 >= (*(void *)(v4 + 112) - v153) >> 3
                || (v155 = (int *)(v153 + 8 * v140), int v154 = *v155, v155[1] - *v155 <= v152))
              {
                uint64_t v246 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v246, "key does not exist and cannot be added");
                goto LABEL_349;
              }
              unint64_t v156 = v154 + v152;
              uint64_t v157 = *(void *)(v4 + 128);
              if (v156 >= (*(void *)(v4 + 136) - v157) >> 6)
              {
                uint64_t v246 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                sub_188D9E0(v246, "index out of range");
LABEL_349:
              }
              uint64_t v158 = v157 + (v156 << 6);
              uint64_t v160 = (_DWORD *)(v158 + 28);
              int v159 = *(_DWORD *)(v158 + 28);
              if (v296)
              {
                uint64_t result = sub_A2B620(*(void *)(v4 + 24), (uint64_t)&v287, v159, 1);
                if ((result & 1) == 0) {
                  goto LABEL_212;
                }
LABEL_220:
                uint64_t v161 = v144;
                uint64_t v265 = *(void *)(v158 + 20);
                int v266 = *(_DWORD *)(v158 + 32);
                unsigned int v162 = *(_DWORD *)(v158 + 40);
                int v263 = *(_DWORD *)(v158 + 36);
                int v264 = *(_DWORD *)(v158 + 44);
                int v262 = *(unsigned __int8 *)(v158 + 48);
                __int16 v284 = *(_WORD *)(v158 + 49);
                uint64_t v163 = (void *)(*(void *)(v4 + 24) + 4136);
                char v285 = *(unsigned char *)(v158 + 51);
                if (sub_A10E20(v163, v270))
                {
                  unint64_t v164 = (int *)sub_A1120C(*(void *)(*v163 + 3944), v269);
                }
                else
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v237 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                    uint64_t v4 = v259;
                  }
                  uint64_t v165 = *v163;
                  if (dword_24F7300 == v270)
                  {
                    long long v166 = *(unsigned int **)(*(void *)(v165 + 3976) + 72);
                    if (!v166)
                    {
                      unint64_t v252 = __cxa_allocate_exception(0x40uLL);
                      unint64_t v302 = (char *)operator new(0x40uLL);
                      long long v303 = xmmword_20B9A90;
                      strcpy(v302, "Realtime stop pattern quad data requested on nullptr buffer");
                      long long v253 = (void *)sub_2F404((uint64_t)v252, (long long *)&v302);
                    }
                    unsigned int v167 = (int *)((char *)v166 + *v166);
                    unint64_t v168 = (unsigned __int16 *)((char *)v167 - *v167);
                    if (*v168 >= 5u && (uint64_t v169 = v168[2]) != 0) {
                      uint64_t v170 = (unsigned int *)((char *)v167 + v169 + *(unsigned int *)((char *)v167 + v169));
                    }
                    else {
                      uint64_t v170 = 0;
                    }
                    unint64_t v164 = (int *)sub_A1139C(v170, v269);
                  }
                  else
                  {
                    unint64_t v164 = (int *)sub_A11500(v165 + 24, v269, 0, "stop pattern");
                  }
                }
                uint64_t v171 = v164;
                uint64_t v172 = *v163;
                uint64_t v173 = (unsigned __int16 *)((char *)v164 - *v164);
                if (*v173 >= 0xFu && (uint64_t v174 = v173[7]) != 0)
                {
                  uint64_t v175 = v172 + 3896;
                  char v176 = sub_49442C(*(unsigned __int16 *)((char *)v164 + v174));
                  if ((sub_C25A10(v175, v176) & 1) == 0)
                  {
LABEL_234:
                    unsigned int v177 = (unsigned __int16 *)((char *)v171 - *v171);
                    uint64_t v8 = v268;
                    if (*v177 >= 0xBu && (uint64_t v178 = v177[5]) != 0)
                    {
                      int v179 = sub_A2BF48(*((unsigned char *)v171 + v178));
                      if (sub_A10E20(v163, v270))
                      {
LABEL_240:
                        int v182 = (int *)sub_A1120C(*(void *)(*v163 + 3944), v269);
                        int8x8_t v183 = (unsigned __int16 *)((char *)v182 - *v182);
                        if (*v183 >= 0x19u) {
                          goto LABEL_253;
                        }
LABEL_255:
                        unsigned int v191 = 2;
                        goto LABEL_256;
                      }
                    }
                    else
                    {
                      int v179 = sub_A2BF48(0);
                      if (sub_A10E20(v163, v270)) {
                        goto LABEL_240;
                      }
                    }
LABEL_243:
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v238 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                      uint64_t v4 = v259;
                      uint64_t v8 = v268;
                    }
                    uint64_t v184 = *v163;
                    if (dword_24F7300 != v270)
                    {
                      int v182 = (int *)sub_A11500(v184 + 24, v269, 0, "stop pattern");
                      int8x8_t v183 = (unsigned __int16 *)((char *)v182 - *v182);
                      if (*v183 >= 0x19u) {
                        goto LABEL_253;
                      }
                      goto LABEL_255;
                    }
                    unint64_t v185 = *(unsigned int **)(*(void *)(v184 + 3976) + 72);
                    if (!v185)
                    {
                      size_t v250 = __cxa_allocate_exception(0x40uLL);
                      unint64_t v302 = (char *)operator new(0x40uLL);
                      long long v303 = xmmword_20B9A90;
                      strcpy(v302, "Realtime stop pattern quad data requested on nullptr buffer");
                      unsigned __int8 v251 = (void *)sub_2F404((uint64_t)v250, (long long *)&v302);
                    }
                    uint8x8_t v186 = (int *)((char *)v185 + *v185);
                    unint64_t v187 = (unsigned __int16 *)((char *)v186 - *v186);
                    if (*v187 >= 5u && (uint64_t v188 = v187[2]) != 0) {
                      unint64_t v189 = (unsigned int *)((char *)v186 + v188 + *(unsigned int *)((char *)v186 + v188));
                    }
                    else {
                      unint64_t v189 = 0;
                    }
                    int v182 = (int *)sub_A1139C(v189, v269);
                    int8x8_t v183 = (unsigned __int16 *)((char *)v182 - *v182);
                    if (*v183 < 0x19u) {
                      goto LABEL_255;
                    }
LABEL_253:
                    uint64_t v190 = v183[12];
                    if (!v190) {
                      goto LABEL_255;
                    }
                    unsigned int v191 = *((unsigned __int8 *)v182 + v190);
LABEL_256:
                    unsigned int v192 = sub_A2BF38(v191);
                    if (v162 <= v192) {
                      unsigned int v193 = v192;
                    }
                    else {
                      unsigned int v193 = v162;
                    }
                    if (sub_A10E20(v163, v270))
                    {
                      unint64_t v194 = (int *)sub_A1120C(*(void *)(*v163 + 3944), v269);
                      goto LABEL_268;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v239 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                      uint64_t v4 = v259;
                      uint64_t v8 = v268;
                    }
                    uint64_t v195 = *v163;
                    if (dword_24F7300 == v270)
                    {
                      uint64_t v196 = *(unsigned int **)(*(void *)(v195 + 3976) + 72);
                      if (!v196)
                      {
                        uint64_t v248 = __cxa_allocate_exception(0x40uLL);
                        unint64_t v302 = (char *)operator new(0x40uLL);
                        long long v303 = xmmword_20B9A90;
                        strcpy(v302, "Realtime stop pattern quad data requested on nullptr buffer");
                        long long v249 = (void *)sub_2F404((uint64_t)v248, (long long *)&v302);
                      }
                      uint64_t v144 = v161;
                      unsigned int v197 = (int *)((char *)v196 + *v196);
                      char v198 = (unsigned __int16 *)((char *)v197 - *v197);
                      unint64_t v140 = v261;
                      int v199 = v266;
                      uint64_t v200 = v265;
                      if (*v198 >= 5u && (uint64_t v201 = v198[2]) != 0) {
                        uint64_t v202 = (unsigned int *)((char *)v197 + v201 + *(unsigned int *)((char *)v197 + v201));
                      }
                      else {
                        uint64_t v202 = 0;
                      }
                      unint64_t v194 = (int *)sub_A1139C(v202, v269);
                      uint64_t v203 = (unsigned __int16 *)((char *)v194 - *v194);
                      if (*v203 >= 0xFu) {
                        goto LABEL_272;
                      }
LABEL_275:
                      char v205 = 3;
                      uint64_t result = 0x7FFFFFFFLL;
                    }
                    else
                    {
                      unint64_t v194 = (int *)sub_A11500(v195 + 24, v269, 0, "stop pattern");
LABEL_268:
                      uint64_t v144 = v161;
                      unint64_t v140 = v261;
                      int v199 = v266;
                      uint64_t v200 = v265;
                      uint64_t v203 = (unsigned __int16 *)((char *)v194 - *v194);
                      if (*v203 < 0xFu) {
                        goto LABEL_275;
                      }
LABEL_272:
                      uint64_t v204 = v203[7];
                      if (!v204) {
                        goto LABEL_275;
                      }
                      char v205 = 0;
                      unsigned int v206 = *(unsigned __int16 *)((char *)v194 + v204);
                      uint64_t result = 0x7FFFFFFFLL;
                      switch(v206)
                      {
                        case 0u:
                        case 1u:
                        case 2u:
                        case 0xCu:
                          break;
                        case 3u:
                          char v205 = 1;
                          break;
                        case 4u:
                          char v205 = 2;
                          break;
                        case 5u:
                        case 6u:
                        case 7u:
                          goto LABEL_274;
                        case 8u:
                        case 9u:
                        case 0xAu:
                        case 0xBu:
                          goto LABEL_325;
                        default:
                          uint64_t result = 0x7FFFFFFFLL;
                          if (v206 != 900)
                          {
LABEL_325:
                            uint64_t v236 = ((5243 * (v206 >> 2)) >> 17) - 1;
                            if (v236 > 0xB) {
LABEL_274:
                            }
                              char v205 = 3;
                            else {
                              char v205 = byte_20EC3B6[v236];
                            }
                          }
                          break;
                      }
                    }
                    int v207 = (1 << v205) | v262;
                    int v208 = v298;
                    unint64_t v209 = 0xFFFFFFFF00000000;
                    if (v296) {
                      unint64_t v209 = (unint64_t)v297 << 32;
                    }
                    unint64_t v210 = (-1431655765 * (((unint64_t)v295 - v294) >> 2)) | v209;
                    if (!v296) {
                      int v208 = 0x7FFFFFFF;
                    }
                    long long v211 = (unsigned int *)((char *)v289 + *(unsigned __int16 *)((char *)v289 - *v289 + 6));
                    uint64_t v212 = (char *)v211 + *v211;
                    uint64_t v213 = &v298;
                    if (!v296) {
                      uint64_t v213 = v295;
                    }
                    int v214 = *v213;
                    uint64_t v215 = &v212[8 * v295[1] + 8 * (((unint64_t)v291 - v290) >> 4)];
                    int v216 = *((_DWORD *)v215 + 1) + v214;
                    LODWORD(v215) = 10 * (*v160 - v214 - *((_DWORD *)v215 + 2));
                    LODWORD(v271) = ((unint64_t)v291 - v290) >> 4;
                    *(void *)((char *)&v271 + 4) = v210;
                    HIDWORD(v271) = v208;
                    unsigned int v272 = v301;
                    uint64_t v273 = v200;
                    int v274 = v216;
                    int v275 = v199;
                    unsigned int v276 = v179 + v263;
                    unsigned int v277 = v193;
                    int v278 = v264 - (v215 & ~((int)v215 >> 31));
                    unsigned __int8 v279 = v207;
                    __int16 v280 = v284;
                    char v281 = v285;
                    unint64_t v282 = v210;
                    int v283 = v208;
                    char v217 = *(unsigned int **)(v4 + 104);
                    if (*(unsigned int **)(v4 + 112) == v217
                      || (uint64_t v218 = *v217,
                          uint64_t v219 = *(unsigned int *)(*(void *)(v4 + 104) + 4),
                          v219 == v218))
                    {
                      uint64_t result = (uint64_t)sub_AAD3F8((char **)v8, 0, &v271);
                    }
                    else
                    {
                      char v220 = 0;
                      uint64_t v221 = v218 << 6;
                      long long v222 = (unsigned __int8 *)(*(void *)(v4 + 128) + (v218 << 6) + 48);
                      uint64_t v223 = (v219 << 6) - v221;
                      do
                      {
                        int v224 = *((_DWORD *)v222 - 5);
                        if (v224 != 0x7FFFFFFF)
                        {
                          if (v224 >= v274 && *((_DWORD *)v222 - 4) <= v275)
                          {
                            unsigned int v225 = *((_DWORD *)v222 - 3);
                            if (v225 <= v276
                              && *((_DWORD *)v222 - 2) <= v277
                              && (v225 != v276 || v224 != v274 || *((_DWORD *)v222 - 1) - 10 * v224 <= v278 - 10 * v274)
                              && (*v222 & ~v279) == 0)
                            {
                              goto LABEL_305;
                            }
                          }
                          if (v274 >= v224 && v275 <= *((_DWORD *)v222 - 4))
                          {
                            unsigned int v226 = *((_DWORD *)v222 - 3);
                            if (v276 <= v226
                              && v277 <= *((_DWORD *)v222 - 2)
                              && (v276 != v226 || v274 != v224 || v278 - 10 * v274 <= *((_DWORD *)v222 - 1) - 10 * v224)
                              && (v207 & ~*v222) == 0)
                            {
                              *((_DWORD *)v222 - 5) = 0x7FFFFFFF;
                              char v220 = 1;
                            }
                          }
                        }
                        v222 += 64;
                        v223 -= 64;
                      }
                      while (v223);
                      uint64_t result = (uint64_t)sub_AAD3F8((char **)v8, 0, &v271);
LABEL_305:
                      if (v220)
                      {
                        unint64_t v227 = *(unsigned int **)(v4 + 104);
                        if (*(unsigned int **)(v4 + 112) != v227)
                        {
                          uint64_t v228 = *(void *)(v4 + 128);
                          uint64_t v229 = *v227;
LABEL_308:
                          unint64_t v230 = v228 + (v229 << 6);
                          unint64_t v231 = v228 + ((unint64_t)v227[1] << 6);
                          if (v230 != v231) {
                            goto LABEL_312;
                          }
                          goto LABEL_318;
                        }
                        sub_D2BFC(v8, 1uLL);
                        unint64_t v227 = *(unsigned int **)(v4 + 104);
                        uint64_t v228 = *(void *)(v4 + 128);
                        uint64_t v229 = *v227;
                        if (*(unsigned int **)(v4 + 112) != v227) {
                          goto LABEL_308;
                        }
                        sub_D2BFC(v8, 1uLL);
                        unint64_t v227 = *(unsigned int **)(v4 + 104);
                        unint64_t v230 = v228 + (v229 << 6);
                        unint64_t v231 = *(void *)(v4 + 128) + ((unint64_t)v227[1] << 6);
                        if (v230 == v231)
                        {
LABEL_318:
                          if (*(unsigned int **)(v4 + 112) == v227) {
                            goto LABEL_319;
                          }
                        }
                        else
                        {
LABEL_312:
                          while (*(_DWORD *)(v230 + 28) != 0x7FFFFFFF)
                          {
                            v230 += 64;
                            if (v230 == v231)
                            {
                              unint64_t v230 = v231;
                              if (*(unsigned int **)(v4 + 112) != v227) {
                                goto LABEL_320;
                              }
                              goto LABEL_319;
                            }
                          }
                          if (v230 == v231) {
                            goto LABEL_318;
                          }
                          unint64_t v232 = v230 + 64;
                          if (v230 + 64 == v231) {
                            goto LABEL_318;
                          }
                          do
                          {
                            if (*(_DWORD *)(v232 + 28) != 0x7FFFFFFF)
                            {
                              long long v233 = *(_OWORD *)v232;
                              long long v234 = *(_OWORD *)(v232 + 16);
                              long long v235 = *(_OWORD *)(v232 + 48);
                              *(_OWORD *)(v230 + 32) = *(_OWORD *)(v232 + 32);
                              *(_OWORD *)(v230 + 48) = v235;
                              *(_OWORD *)unint64_t v230 = v233;
                              *(_OWORD *)(v230 + 16) = v234;
                              v230 += 64;
                            }
                            v232 += 64;
                          }
                          while (v232 != v231);
                          unint64_t v227 = (unsigned int *)*v8;
                          if (*(void **)(v4 + 112) == *v8)
                          {
LABEL_319:
                            sub_D2BFC(v8, 1uLL);
                            unint64_t v227 = (unsigned int *)*v8;
                          }
                        }
LABEL_320:
                        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)v230, (char *)(*(void *)(v4 + 128) + ((unint64_t)v227[1] << 6)));
                      }
                    }
LABEL_212:
                    if (++v152 == v144) {
                      goto LABEL_186;
                    }
                    continue;
                  }
                }
                else
                {
                  uint64_t v180 = v172 + 3896;
                  char v181 = sub_49442C(0x7FFFu);
                  if ((sub_C25A10(v180, v181) & 1) == 0) {
                    goto LABEL_234;
                  }
                }
                int v179 = 128;
                uint64_t v8 = v268;
                if (sub_A10E20(v163, v270)) {
                  goto LABEL_240;
                }
                goto LABEL_243;
              }
              break;
            }
            uint64_t result = sub_A2BC00((uint64_t)&v287, v159, 1);
            if (result) {
              goto LABEL_220;
            }
            goto LABEL_212;
          }
        }
        else
        {
          unsigned int v127 = 0;
          unint64_t v128 = 0;
          *(void *)&def_332C = 0;
          uint64_t v129 = 8;
          if (v121 != (char *)v106) {
            goto LABEL_165;
          }
        }
        uint64_t v4 = v259;
        *(void *)(v259 + 104) = v128;
        *(void *)(v259 + 112) = v129;
        *(void *)(v259 + 120) = &v127[8 * v126];
        if (v121) {
          goto LABEL_170;
        }
        goto LABEL_171;
      }
LABEL_120:
      if (!*(unsigned char *)(v4 + 21))
      {
        uint64_t v94 = *(unsigned int **)(v4 + 104);
        if (*(unsigned int **)(v4 + 112) == v94)
        {
          sub_D2BFC(v8, 1uLL);
          uint64_t v94 = *(unsigned int **)(v4 + 104);
          uint64_t v95 = *(void *)(v4 + 128);
          uint64_t v96 = *v94;
          if (*(unsigned int **)(v4 + 112) == v94)
          {
            sub_D2BFC(v8, 1uLL);
            uint64_t v94 = *(unsigned int **)(v4 + 104);
            uint64_t v97 = *(void *)(v4 + 128);
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t v95 = *(void *)(v4 + 128);
          uint64_t v96 = *v94;
        }
        uint64_t v97 = v95;
LABEL_126:
        uint64_t result = (uint64_t)sub_A86AC4(v8, 0, (char *)(v95 + (v96 << 6)), (char *)(v97 + ((unint64_t)v94[1] << 6)));
      }
LABEL_186:
      unint64_t v145 = v290;
      unint64_t v9 = v291 - 2;
      v291 -= 2;
      if (*(unsigned char *)(v287 + 16)) {
        BOOL v146 = v288 == 0;
      }
      else {
        BOOL v146 = 0;
      }
      if (v146 && (unint64_t)v9 >= v290 && (unint64_t)v9 < v292)
      {
        do
        {
          unint64_t v149 = __ROR8__(*v9, 32);
          if (HIDWORD(v149) == 1 && (v149 + 3) < 2) {
            break;
          }
          uint64_t result = sub_2AB7E4(**(void **)(v287 + 4120));
          unint64_t v145 = v290;
          unint64_t v9 = v291;
          if (result) {
            break;
          }
          unint64_t v9 = v291 - 2;
          unint64_t v291 = v9;
        }
        while ((unint64_t)v9 >= v290 && (unint64_t)v9 < v292);
      }
      if ((unint64_t)v9 < v145 || (unint64_t)v9 >= v292) {
        goto LABEL_3;
      }
    }
    uint64_t v24 = -1;
    uint64_t v25 = 1;
    do
    {
      if (*(_DWORD *)(v12 + 36) == v21 && *(_DWORD *)(v12 + 32) == v22)
      {
        if (v24 == -1) {
          uint64_t v24 = v19;
        }
      }
      else if (__PAIR64__(v21, v22) == v11)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (v19 + v25) & v13;
      unint64_t v26 = (unsigned int *)(v16 + 12 * v19);
      unsigned int v22 = *v26;
      unsigned int v21 = v26[1];
      ++v25;
    }
    while (v17 != v21 || v18 != v22);
    if (v24 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
        goto LABEL_26;
      }
      goto LABEL_59;
    }
LABEL_58:
    uint64_t v24 = v19;
    if (sub_A3BA84(*(void *)(v4 + 32), 1)) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
  return result;
}

void sub_ACC198(_Unwind_Exception *a1)
{
}

void sub_ACC1B0(_Unwind_Exception *a1)
{
}

void sub_ACC1C8(_Unwind_Exception *a1)
{
}

void sub_ACC1E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_ACC264(char *result, unsigned int a2)
{
  int v2 = result;
  unint64_t v3 = a2;
  if (a2 < (unint64_t)((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
  {
    unsigned int v4 = *(_DWORD *)(*(void *)result + 8 * a2 + 4) - *(_DWORD *)(*(void *)result + 8 * a2);
    if (v4)
    {
      char v5 = 0;
      unsigned int v6 = 0;
      unsigned int v7 = 1;
      do
      {
        if (v4 <= v7) {
          unsigned int v8 = v7;
        }
        else {
          unsigned int v8 = v4;
        }
        uint64_t result = (char *)sub_AC0C80(v2, v3, v6++);
        if (*((_DWORD *)result + 7) != 0x7FFFFFFF && v6 < v4)
        {
          if (v3 >= (uint64_t)(*((void *)v2 + 1) - *(void *)v2) >> 3)
          {
LABEL_53:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "key does not exist and cannot be added");
          }
          else
          {
            BOOL v10 = (_DWORD *)(*(void *)v2 + 8 * v3);
            int v11 = result[48];
            unsigned int v12 = v6;
            while (1)
            {
              if (v10[1] - *v10 <= v12) {
                goto LABEL_53;
              }
              unint64_t v13 = v12 + *v10;
              uint64_t v14 = *((void *)v2 + 3);
              if (v13 >= (*((void *)v2 + 4) - v14) >> 6) {
                break;
              }
              uint64_t v15 = v14 + (v13 << 6);
              int v18 = *(_DWORD *)(v15 + 28);
              int v17 = (_DWORD *)(v15 + 28);
              int v16 = v18;
              if (v18 != 0x7FFFFFFF)
              {
                int v19 = *((_DWORD *)result + 7);
                if (v19 >= v16
                  && (uint64_t v20 = v14 + (v13 << 6), *((_DWORD *)result + 8) <= *(_DWORD *)(v20 + 32))
                  && (unsigned int v21 = *(_DWORD *)(v20 + 36), v22 = *((_DWORD *)result + 9), v22 <= v21)
                  && (uint64_t v23 = v14 + (v13 << 6), *((_DWORD *)result + 10) <= *(_DWORD *)(v23 + 40))
                  && ((int v24 = *(_DWORD *)(v23 + 44) - 10 * v16, v22 == v21) ? (v25 = v19 == v16) : (v25 = 0),
                      v25 ? (BOOL v26 = *((_DWORD *)result + 11) - 10 * v19 <= v24) : (BOOL v26 = 1),
                      v26 && (v11 & ~*(unsigned __int8 *)(v14 + (v13 << 6) + 48)) == 0))
                {
                  _DWORD *v17 = 0x7FFFFFFF;
                  char v5 = 1;
                }
                else if (v16 >= v19)
                {
                  uint64_t v27 = v14 + (v13 << 6);
                  if (*(_DWORD *)(v27 + 32) <= *((_DWORD *)result + 8))
                  {
                    unsigned int v28 = *((_DWORD *)result + 9);
                    unsigned int v29 = *(_DWORD *)(v27 + 36);
                    if (v29 <= v28)
                    {
                      uint64_t v30 = v14 + (v13 << 6);
                      if (*(_DWORD *)(v30 + 40) <= *((_DWORD *)result + 10))
                      {
                        int v31 = *(_DWORD *)(v30 + 44) - 10 * v16;
                        BOOL v32 = v29 == v28 && v16 == v19;
                        BOOL v33 = !v32 || v31 <= *((_DWORD *)result + 11) - 10 * v19;
                        if (v33 && (*(unsigned __int8 *)(v14 + (v13 << 6) + 48) & ~result[48]) == 0)
                        {
                          *((_DWORD *)result + 7) = 0x7FFFFFFF;
                          char v5 = 1;
                          goto LABEL_6;
                        }
                      }
                    }
                  }
                }
              }
              if (v8 == ++v12) {
                goto LABEL_6;
              }
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_188D9E0(exception, "index out of range");
          }
        }
LABEL_6:
        ++v7;
      }
      while (v6 != v4);
      if (v5)
      {
        return sub_A8750C((void **)v2, v3);
      }
    }
  }
  return result;
}

void sub_ACC514(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ACC528(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_ACC53C(void **a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  if (a2 >= (unint64_t)(((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)) {
    goto LABEL_6;
  }
  unsigned int v8 = (char *)*a1 + 8 * a2;
  int v7 = v8[1];
  int v9 = v7 - *v8;
  if (v7 == *v8) {
    goto LABEL_6;
  }
  if (a6 == 0x7FFFFFFF)
  {
    unsigned int v12 = 0;
    do
      sub_AC0C80(a1, a2, v12++);
    while (v9 != v12);
LABEL_6:
    LOBYTE(v13) = 0;
    return v13 != 0;
  }
  if (a5 == 0xFFFFFFFFLL)
  {
    __int16 v13 = 0;
    unsigned int v18 = 0;
    do
    {
      unsigned int v21 = (long long *)sub_AC0C80(a1, a2, v18);
      long long v22 = v21[2];
      long long v23 = v21[3];
      long long v24 = v21[1];
      long long v36 = *v21;
      long long v37 = v24;
      long long v38 = v22;
      long long v39 = v23;
      if (SHIDWORD(v24) >= a6)
      {
        if (sub_ACA6B4(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v19) = 0;
          __int16 v20 = 0;
        }
        else
        {
          unint64_t v25 = sub_ACA4B8((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v19 = v25 >> 8;
          __int16 v20 = v25;
          if ((_BYTE)v25)
          {
            *(void *)(v26 + 52) = -1;
            *(_DWORD *)(v26 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v20 | v13 | v13 & 0xFF00 | ((_WORD)v19 << 8);
      }
      ++v18;
    }
    while (v9 != v18);
  }
  else
  {
    __int16 v13 = 0;
    unsigned int v27 = 0;
    do
    {
      uint64_t v30 = (long long *)sub_AC0C80(a1, a2, v27);
      long long v31 = v30[2];
      long long v32 = v30[3];
      long long v33 = v30[1];
      long long v36 = *v30;
      long long v37 = v33;
      long long v38 = v31;
      long long v39 = v32;
      if (SHIDWORD(v33) >= a6)
      {
        if (sub_ACA6B4(a1, (uint64_t)&v36, a5) & 1) != 0 || (sub_ACA6B4(a1, (uint64_t)&v36, a4))
        {
          LOWORD(v28) = 0;
          __int16 v29 = 0;
        }
        else
        {
          unint64_t v34 = sub_ACA4B8((uint64_t)a1, (uint64_t)&v36, a3, 1, 1);
          unint64_t v28 = v34 >> 8;
          __int16 v29 = v34;
          if ((_BYTE)v34)
          {
            *(void *)(v35 + 52) = -1;
            *(_DWORD *)(v35 + 60) = 0x7FFFFFFF;
          }
        }
        __int16 v13 = v29 | v13 | v13 & 0xFF00 | ((_WORD)v28 << 8);
      }
      ++v27;
    }
    while (v9 != v27);
  }
  if ((v13 & 0xFF00) != 0) {
    sub_A8750C(a1, a3);
  }
  return v13 != 0;
}

void sub_ACC780(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243D3A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_ACC7A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243D3A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_ACC7F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    unsigned int v4 = *(void **)(a1 + 80);
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        int v7 = *(void **)(v5 - 16);
        v5 -= 16;
        unsigned int v6 = v7;
        if (v7)
        {
          free(v6);
          *(void *)(v3 - 16) = 0;
        }
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unsigned int v4 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v1;
    free(v4);
  }
}

uint64_t sub_ACC888(uint64_t a1)
{
  *(void *)a1 = 0x7FFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = a1 + 8;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 34) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 48) = 0;
  sub_ACC95C((uint64_t *)(a1 + 56), 32);
  *(uint64x2_t *)uint64_t v2 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v2 + 16), (float)*(unint64_t *)(v2 + 72))));
  *(unsigned char *)(v2 + 24) = 0;
  sub_ACD03C(v2);
  *(unsigned char *)(a1 + 34) = 1;
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_ACC93C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AE02C();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_ACC95C(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    sub_ACC9F0(a1, (a2 - 1) / 0x30uLL + 1, (uint64_t)v4);
    if (v4[0]) {
      free(v4[0]);
    }
  }
  return a1;
}

void sub_ACC9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  sub_20AE094((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

void sub_ACC9F0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (a2 <= (v6 - v8) >> 4)
  {
    if (!a2)
    {
LABEL_27:
      a1[1] = v8;
      return;
    }
    uint64_t v14 = v8 + 16 * a2;
    uint64_t v15 = (int *)(a3 + 10);
    while (1)
    {
      *(void *)uint64_t v8 = 0;
      int v17 = *(unsigned __int16 *)(a3 + 8);
      *(_WORD *)(v8 + 8) = v17;
      if (!v17) {
        goto LABEL_12;
      }
      uint64_t v18 = *(unsigned __int16 *)(a3 + 8);
      unint64_t v19 = malloc_type_malloc(8 * v18, 0x100004000313F17uLL);
      if (!v19)
      {
        fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v18);
        exit(1);
      }
      *(void *)uint64_t v8 = v19;
      uint64_t v20 = *(unsigned __int16 *)(a3 + 8);
      if (!*(_WORD *)(a3 + 8)) {
        goto LABEL_12;
      }
      unsigned int v21 = *(uint64_t **)a3;
      unint64_t v22 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v22 < 3)
      {
        long long v23 = *(uint64_t **)a3;
      }
      else
      {
        long long v23 = *(uint64_t **)a3;
        if ((unint64_t)((char *)v19 - (char *)v21) >= 0x20)
        {
          unint64_t v24 = v22 + 1;
          uint64_t v25 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v26 = &v19[v25];
          long long v23 = &v21[v25];
          unsigned int v27 = (long long *)(v21 + 2);
          unint64_t v28 = v19 + 2;
          uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *unint64_t v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          unint64_t v19 = v26;
          if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_12;
          }
        }
      }
      long long v31 = &v21[v20];
      do
      {
        uint64_t v32 = *v23++;
        *v19++ = v32;
      }
      while (v23 != v31);
LABEL_12:
      int v16 = *v15;
      *(_WORD *)(v8 + 14) = *(_WORD *)(a3 + 14);
      *(_DWORD *)(v8 + 10) = v16;
      v8 += 16;
      if (v8 == v14)
      {
        uint64_t v8 = v14;
        goto LABEL_27;
      }
    }
  }
  uint64_t v9 = (v8 - *a1) >> 4;
  if ((v9 + a2) >> 60) {
    sub_2E00();
  }
  uint64_t v10 = v6 - *a1;
  uint64_t v11 = v10 >> 3;
  if (v10 >> 3 <= v9 + a2) {
    uint64_t v11 = v9 + a2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v11;
  }
  if (v12) {
    __int16 v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
  }
  else {
    __int16 v13 = 0;
  }
  uint64_t v33 = (uint64_t)&v13[16 * v9];
  unint64_t v34 = &v13[16 * v12];
  unint64_t v35 = v33 + 16 * a2;
  uint64_t v36 = v33;
  do
  {
    *(void *)uint64_t v36 = 0;
    int v38 = *(unsigned __int16 *)(a3 + 8);
    *(_WORD *)(v36 + 8) = v38;
    if (v38)
    {
      uint64_t v39 = *(unsigned __int16 *)(a3 + 8);
      uint64_t v40 = malloc_type_malloc(8 * v39, 0x100004000313F17uLL);
      if (!v40)
      {
        fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v39);
        exit(1);
      }
      *(void *)uint64_t v36 = v40;
      uint64_t v41 = *(unsigned __int16 *)(a3 + 8);
      if (*(_WORD *)(a3 + 8))
      {
        uint64_t v42 = *(uint64_t **)a3;
        unint64_t v43 = (v41 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v43 < 3)
        {
          uint64_t v44 = *(uint64_t **)a3;
LABEL_41:
          uint64_t v52 = &v42[v41];
          do
          {
            uint64_t v53 = *v44++;
            *v40++ = v53;
          }
          while (v44 != v52);
          goto LABEL_30;
        }
        uint64_t v44 = *(uint64_t **)a3;
        if ((unint64_t)((char *)v40 - (char *)v42) < 0x20) {
          goto LABEL_41;
        }
        unint64_t v45 = v43 + 1;
        uint64_t v46 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        unsigned int v47 = &v40[v46];
        uint64_t v44 = &v42[v46];
        uint64_t v48 = (long long *)(v42 + 2);
        uint64_t v49 = v40 + 2;
        uint64_t v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v51 = *v48;
          *(v49 - 1) = *(v48 - 1);
          *uint64_t v49 = v51;
          v48 += 2;
          v49 += 2;
          v50 -= 4;
        }
        while (v50);
        uint64_t v40 = v47;
        if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_41;
        }
      }
    }
LABEL_30:
    int v37 = *(_DWORD *)(a3 + 10);
    *(_WORD *)(v36 + 14) = *(_WORD *)(a3 + 14);
    *(_DWORD *)(v36 + 10) = v37;
    v36 += 16;
  }
  while (v36 != v35);
  sub_ACCE28(v7, a1[1], a1[1], *a1, *a1, v33, v33);
  unint64_t v54 = (char *)*a1;
  uint64_t v55 = (char *)a1[1];
  *a1 = v56;
  a1[1] = v35;
  a1[2] = (uint64_t)v34;
  if (v55 != v54)
  {
    uint64_t v57 = v55;
    do
    {
      uint64_t v59 = (void *)*((void *)v57 - 2);
      v57 -= 16;
      int v58 = v59;
      if (v59)
      {
        free(v58);
        *((void *)v55 - 2) = 0;
      }
      uint64_t v55 = v57;
    }
    while (v57 != v54);
  }
  if (v54) {
    free(v54);
  }
}

void sub_ACCD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACCD88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_ACCD90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_ACCD98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACCDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_ACCDC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = (void *)*(v3 - 2);
    v3 -= 2;
    unsigned int v4 = v5;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      free(v4);
      *uint64_t v3 = 0;
      uint64_t v3 = *(void **)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_ACCE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    while (1)
    {
      *(void *)(v7 - 16) = 0;
      int v11 = *(unsigned __int16 *)(v9 - 8);
      *(_WORD *)(v7 - 8) = v11;
      if (!v11) {
        goto LABEL_3;
      }
      uint64_t v12 = *(unsigned __int16 *)(v9 - 8);
      __int16 v13 = malloc_type_malloc(8 * v12, 0x100004000313F17uLL);
      if (!v13)
      {
        fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v12);
        exit(1);
      }
      *(void *)(v7 - 16) = v13;
      uint64_t v14 = *(unsigned __int16 *)(v9 - 8);
      if (!*(_WORD *)(v9 - 8)) {
        goto LABEL_3;
      }
      uint64_t v15 = *(void *)(v9 - 16);
      unint64_t v16 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 3)
      {
        int v17 = *(uint64_t **)(v9 - 16);
      }
      else
      {
        int v17 = *(uint64_t **)(v9 - 16);
        if ((unint64_t)v13 - v15 >= 0x20)
        {
          unint64_t v18 = v16 + 1;
          uint64_t v19 = v18 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v20 = &v13[v19];
          int v17 = (uint64_t *)(v15 + v19 * 8);
          unsigned int v21 = (long long *)(v15 + 16);
          unint64_t v22 = v13 + 2;
          uint64_t v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v24 = *v21;
            *(v22 - 1) = *(v21 - 1);
            *unint64_t v22 = v24;
            v21 += 2;
            v22 += 2;
            v23 -= 4;
          }
          while (v23);
          __int16 v13 = v20;
          if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_3;
          }
        }
      }
      uint64_t v25 = (uint64_t *)(v15 + 8 * v14);
      do
      {
        uint64_t v26 = *v17++;
        *v13++ = v26;
      }
      while (v17 != v25);
LABEL_3:
      int v10 = *(_DWORD *)(v9 - 6);
      *(_WORD *)(v7 - 2) = *(_WORD *)(v9 - 2);
      *(_DWORD *)(v7 - 6) = v10;
      uint64_t v7 = v29 - 16;
      v29 -= 16;
      v9 -= 16;
      if (v9 == a5) {
        return v28;
      }
    }
  }
  return a6;
}

void sub_ACCFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACCFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_ACCFD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void ***)(*(void *)(a1 + 16) + 8);
    unsigned int v4 = *(void ***)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*v3)
      {
        free(*v3);
        *uint64_t v3 = 0;
      }
      v3 += 2;
    }
  }
  return a1;
}

void sub_ACD03C(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    int v19 = *(_DWORD *)(a1 + 32);
    memset(v20, 0, sizeof(v20));
    long long v21 = 0u;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v18, 0)));
    BYTE8(v18) = 0;
    sub_ACD1C8((uint64_t)&v17, 1, (void *)a1, 0x20uLL);
    int v2 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v19;
    int v19 = v2;
    uint64_t v3 = *(void **)(a1 + 40);
    unsigned int v4 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v20[0];
    uint64x2_t v6 = *(uint64x2_t *)a1;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v7 = v18;
    *(uint64x2_t *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v7;
    uint64x2_t v17 = v6;
    long long v18 = v5;
    long long v8 = *(_OWORD *)&v20[1];
    v20[0] = v3;
    v20[1] = v4;
    uint64_t v9 = v20[3];
    long long v10 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = v9;
    *(_OWORD *)&v20[2] = v10;
    *(void *)&long long v8 = v21;
    long long v11 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v21;
    long long v21 = v11;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v18, (float)(unint64_t)v11)));
    BYTE8(v18) = 0;
    if (v4)
    {
      uint64_t v12 = (char *)v10;
      __int16 v13 = v4;
      if ((char *)v10 != v4)
      {
        uint64_t v14 = (char *)v10;
        do
        {
          unint64_t v16 = (void *)*((void *)v14 - 2);
          v14 -= 16;
          uint64_t v15 = v16;
          if (v16)
          {
            free(v15);
            *((void *)v12 - 2) = 0;
          }
          uint64_t v12 = v14;
        }
        while (v14 != v4);
        __int16 v13 = (char *)v20[1];
      }
      v20[2] = v4;
      free(v13);
    }
  }
}

void sub_ACD1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_ACD1C8(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  if (*(void *)(a1 + 40) | *(void *)(a1 + 80))
  {
    for (uint64_t i = *(void *)(a1 + 48); i != *(void *)(a1 + 56); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 80) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 72);
  float32x2_t v10 = *(float32x2_t *)(a1 + 16);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(v10, (float)v9)));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2 == 1)
  {
    unint64_t v11 = a3[9];
  }
  else
  {
    unint64_t v11 = 4;
    if (a4 > 4) {
      goto LABEL_29;
    }
    while (a3[10] - a3[5] >= (unint64_t)(float)(v10.f32[0] * (float)v11))
    {
      do
      {
LABEL_29:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a4);
    }
  }
  if (v11 > v9)
  {
    sub_ACD46C((uint64_t *)(a1 + 48), v11);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  sub_ACD62C((uint64_t)a3, &v26);
  uint64_t v12 = a3[7];
  if (v27 != a3[6] || v28 != v12 || v29 != v12)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 72) - 1;
      unint64_t v16 = v15 & *(_DWORD *)v30;
      uint64_t v17 = *(void *)(a1 + 48);
      unint64_t v18 = v16 / 0x30;
      unsigned int v19 = (v15 & *(_DWORD *)v30) % 0x30;
      if ((*(unsigned __int8 *)(v17 + 16 * v18 + (v19 >> 3) + 10) >> (v19 & 7)))
      {
        uint64_t v20 = 1;
        do
        {
          unint64_t v16 = (v16 + v20) & v15;
          unint64_t v18 = v16 / 0x30;
          ++v20;
        }
        while (((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + ((v16 % 0x30) >> 3) + 10) >> ((v16 % 0x30) & 7)) & 1) != 0);
        LOWORD(v19) = v16 % 0x30;
      }
      uint64_t v21 = 16 * v18;
      uint64_t v22 = v17 + 16 * v18;
      uint64_t v23 = *(unsigned __int16 *)(v22 + 8);
      sub_ACDCB4(v22, (unsigned __int16)v19, v30);
      *(void *)(a1 + 80) = *(void *)(a1 + 80) - v23 + *(unsigned __int16 *)(*(void *)(a1 + 48) + v21 + 8);
      sub_ACD87C(&v26);
      if (v27 == a3[6])
      {
        uint64_t v24 = a3[7];
        if (v28 == v24 && v29 == v24) {
          break;
        }
      }
    }
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_ACD458(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ACD46C(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v4 <= v6)
  {
    if (v4 < v6)
    {
      uint64_t v7 = *a1 + 16 * v4;
      if (v5 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          float32x2_t v10 = *(void **)(v8 - 16);
          v8 -= 16;
          unint64_t v9 = v10;
          if (v10)
          {
            free(v9);
            *(void *)(v5 - 16) = 0;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    sub_ACC9F0(a1, v4 - v6, (uint64_t)v25);
    if (v25[0]) {
      free(v25[0]);
    }
  }
  if (a1[3] > a2)
  {
    int v11 = a2 % 0x30;
    uint64_t v12 = a1[1];
    if (a2 % 0x30)
    {
      uint64_t v13 = v12 - 16;
      do
        sub_ACD9C0(v13, (unsigned __int16)v11++);
      while ((unsigned __int16)v11 != 48);
      uint64_t v12 = a1[1];
    }
    a1[4] = 0;
    uint64_t v14 = *a1;
    if (*a1 != v12)
    {
      unint64_t v15 = v12 - v14 - 16;
      if (v15 >= 0x10)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = (v15 >> 4) + 1;
        uint64_t v17 = v14 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v21 = (unsigned __int16 *)(v14 + 24);
        uint64_t v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v23 = *(v21 - 8);
          unsigned int v24 = *v21;
          v21 += 16;
          v18 += v23;
          v19 += v24;
          v22 -= 2;
        }
        while (v22);
        uint64_t v16 = v19 + v18;
        if (v20 == (v20 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = *a1;
      }
      do
      {
        v16 += *(unsigned __int16 *)(v17 + 8);
        v17 += 16;
      }
      while (v17 != v12);
LABEL_26:
      a1[4] = v16;
    }
  }
  a1[3] = a2;
}

void sub_ACD614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_ACD62C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v5 == v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 48);
    goto LABEL_5;
  }
  unint64_t v6 = *(_DWORD **)v5;
  if (*(_WORD *)(v5 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 56);
LABEL_5:
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = v8;
    goto LABEL_14;
  }
  uint64_t v10 = v5 + 16;
  while (1)
  {
    if (v6)
    {
      free(v6);
      *(void *)(v10 - 16) = 0;
    }
    *(void *)(v10 - 8) = 0;
    if (v10 == v4) {
      break;
    }
    unint64_t v6 = *(_DWORD **)v10;
    int v11 = *(unsigned __int16 *)(v10 + 8);
    v10 += 16;
    if (v11)
    {
      uint64_t v9 = v10 - 16;
      goto LABEL_13;
    }
  }
  uint64_t v9 = v4;
LABEL_13:
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
LABEL_14:
  *a2 = a1;
  a2[1] = v5;
  a2[2] = v4;
  a2[3] = v9;
  a2[4] = v6;
  a2[5] = v8;
  a2[6] = v7;
  a2[7] = v7;
  a2[8] = 0;
  if (v5 == v8)
  {
    if (v4 == v7)
    {
LABEL_42:
      while (v9 != v4 && *(void *)(a1 + 40) && *(_DWORD *)(a1 + 32) == *v6)
      {
        v6 += 2;
        a2[4] = v6;
        uint64_t v19 = *(_DWORD **)v9;
        if (v6 == (_DWORD *)(*(void *)v9 + 8 * *(unsigned __int16 *)(v9 + 8)))
        {
          uint64_t v20 = v9 + 16;
          do
          {
            if (v19)
            {
              free(v19);
              *(void *)(v20 - 16) = 0;
            }
            *(void *)(v20 - 8) = 0;
            if (v20 == v4)
            {
              uint64_t v9 = v4;
              a2[3] = v4;
              goto LABEL_42;
            }
            unint64_t v6 = *(_DWORD **)v20;
            a2[4] = *(void *)v20;
            int v21 = *(unsigned __int16 *)(v20 + 8);
            v20 += 16;
            uint64_t v19 = v6;
          }
          while (!v21);
          uint64_t v9 = v20 - 16;
          a2[3] = v9;
        }
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 40);
      while (v15)
      {
        if (*(_DWORD *)(a1 + 32) != *v6) {
          break;
        }
        v6 += 2;
        a2[4] = v6;
        uint64_t v16 = *(_DWORD **)v9;
        if (v6 == (_DWORD *)(*(void *)v9 + 8 * *(unsigned __int16 *)(v9 + 8)))
        {
          uint64_t v17 = v9 + 16;
          do
          {
            if (v16)
            {
              free(v16);
              *(void *)(v17 - 16) = 0;
            }
            *(void *)(v17 - 8) = 0;
            if (v17 == v4)
            {
              uint64_t v9 = v4;
              goto LABEL_31;
            }
            unint64_t v6 = *(_DWORD **)v17;
            a2[4] = *(void *)v17;
            int v18 = *(unsigned __int16 *)(v17 + 8);
            v17 += 16;
            uint64_t v16 = v6;
          }
          while (!v18);
          uint64_t v9 = v17 - 16;
LABEL_31:
          a2[3] = v9;
          uint64_t v15 = *(void *)(a1 + 40);
        }
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    while (v12)
    {
      if (*(_DWORD *)(a1 + 32) != *v6) {
        break;
      }
      v6 += 2;
      a2[4] = v6;
      uint64_t v13 = *(_DWORD **)v9;
      if (v6 == (_DWORD *)(*(void *)v9 + 8 * *(unsigned __int16 *)(v9 + 8)))
      {
        uint64_t v14 = v9 + 16;
        do
        {
          uint64_t v9 = v14;
          if (v13)
          {
            free(v13);
            *(void *)(v9 - 16) = 0;
          }
          *(void *)(v9 - 8) = 0;
          if (v9 == v4) {
            break;
          }
          unint64_t v6 = *(_DWORD **)v9;
          a2[4] = *(void *)v9;
          uint64_t v14 = v9 + 16;
          uint64_t v13 = v6;
        }
        while (!*(_WORD *)(v9 + 8));
        a2[3] = v9;
        uint64_t v12 = *(void *)(a1 + 40);
      }
    }
  }
}

void *sub_ACD87C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4] + 8;
  a1[4] = v3;
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = (void *)(v2 + 8);
  if (v3 == *(void *)v2 + 8 * *(unsigned __int16 *)(v2 + 8))
  {
    do
    {
      if (v4)
      {
        free(v4);
        *(void *)uint64_t v2 = 0;
      }
      *uint64_t v5 = 0;
      uint64_t v13 = a1[2];
      uint64_t v14 = a1[3];
      uint64_t v2 = v14 + 16;
      a1[3] = v14 + 16;
      if (v14 + 16 == v13) {
        break;
      }
      int v15 = *(unsigned __int16 *)(v14 + 24);
      uint64_t v5 = (void *)(v14 + 24);
      uint64_t v4 = (void *)*(v5 - 1);
      a1[4] = v4;
    }
    while (!v15);
  }
  while (1)
  {
    if (a1[1] == a1[5])
    {
      uint64_t v6 = a1[2];
      if (v6 == a1[6] && v2 == a1[7] && (v2 == v6 || a1[4] == a1[8])) {
        break;
      }
    }
    if (!*(void *)(*a1 + 40)) {
      break;
    }
    uint64_t v7 = (_DWORD *)a1[4];
    if (*(_DWORD *)(*a1 + 32) != *v7) {
      break;
    }
    a1[4] = v7 + 2;
    uint64_t v8 = *(void **)v2;
    uint64_t v9 = (void *)(v2 + 8);
    if (v7 + 2 == (_DWORD *)(*(void *)v2 + 8 * *(unsigned __int16 *)(v2 + 8)))
    {
      do
      {
        if (v8)
        {
          free(v8);
          *(void *)uint64_t v2 = 0;
        }
        *uint64_t v9 = 0;
        uint64_t v10 = a1[2];
        uint64_t v11 = a1[3];
        uint64_t v2 = v11 + 16;
        a1[3] = v11 + 16;
        if (v11 + 16 == v10) {
          break;
        }
        int v12 = *(unsigned __int16 *)(v11 + 24);
        uint64_t v9 = (void *)(v11 + 24);
        uint64_t v8 = (void *)*(v9 - 1);
        a1[4] = v8;
      }
      while (!v12);
    }
  }
  return a1;
}

void sub_ACD9C0(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + (a2 >> 3);
  int v4 = *(unsigned __int8 *)(v2 + 10);
  uint64_t v3 = (unsigned char *)(v2 + 10);
  int v5 = 1 << (a2 & 7);
  if ((v5 & v4) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(a1 + 10);
    if (a2 < 9)
    {
      __int16 v9 = 0;
      unsigned __int16 v11 = *(_WORD *)(a1 + 8) - 1;
      if (*(_WORD *)(a1 + 8) == 1) {
        goto LABEL_19;
      }
      goto LABEL_6;
    }
    uint64_t v8 = ((unsigned __int16)(a2 - 9) >> 3) + 1;
    if ((unsigned __int16)(a2 - 9) >= 8u)
    {
      __int16 v27 = 0;
      __int16 v28 = 0;
      LOWORD(a2) = a2 - 8 * ((((unsigned __int16)(a2 - 9) >> 3) + 1) & 0x3FFE);
      uint64_t v10 = &v7[v8 & 0x3FFE];
      uint64_t v29 = (unsigned __int8 *)(a1 + 11);
      uint64_t v30 = v8 & 0x3FFE;
      do
      {
        uint64_t v31 = *(v29 - 1);
        int v32 = *v29;
        v29 += 2;
        v27 += byte_20EBDB6[v31];
        v28 += byte_20EBDB6[v32];
        v30 -= 2;
      }
      while (v30);
      __int16 v9 = v28 + v27;
      if ((v8 & 0x3FFE) == v8)
      {
LABEL_18:
        v7 += v8;
        unsigned __int16 v11 = *(_WORD *)(a1 + 8) - 1;
        if (*(_WORD *)(a1 + 8) == 1)
        {
LABEL_19:
          int v15 = 0;
          uint64_t v16 = *(uint64_t **)a1;
          if (!*(void *)a1)
          {
LABEL_21:
            *(void *)a1 = v15;
            --*(_WORD *)(a1 + 8);
            *v3 &= ~(_BYTE)v5;
            return;
          }
LABEL_20:
          free(v16);
          goto LABEL_21;
        }
LABEL_6:
        __int16 v12 = byte_20EBDB6[~(-1 << a2) & (unint64_t)*v7];
        uint64_t v13 = v11;
        uint64_t v14 = (char *)malloc_type_malloc(8 * v11, 0x100004000313F17uLL);
        if (!v14)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v13);
          exit(1);
        }
        int v15 = v14;
        uint64_t v16 = *(uint64_t **)a1;
        uint64_t v17 = (unsigned __int16)(v9 + v12);
        if (!(v9 + v12))
        {
LABEL_26:
          unint64_t v35 = &v16[v17 + 1];
          uint64_t v36 = *(unsigned __int16 *)(a1 + 8);
          int v37 = &v16[v36];
          if (v35 != v37)
          {
            uint64_t v38 = 8 * v17;
            uint64_t v39 = &v15[8 * v17];
            unint64_t v40 = 8 * v36 - v38 - 16;
            if (v40 < 0x58) {
              goto LABEL_39;
            }
            uint64_t v41 = &v15[v38];
            if ((unint64_t)(v15 - (char *)v16 - 8) < 0x20) {
              goto LABEL_39;
            }
            uint64_t v42 = (v40 >> 3) + 1;
            uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            v39 += v43;
            unint64_t v35 = (uint64_t *)((char *)v35 + v43);
            uint64_t v44 = (long long *)&v16[(unint64_t)v38 / 8 + 3];
            unint64_t v45 = v41 + 16;
            uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v47 = *v44;
              *(v45 - 1) = *(v44 - 1);
              *unint64_t v45 = v47;
              v44 += 2;
              v45 += 2;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_39:
              do
              {
                uint64_t v48 = *v35++;
                *(void *)uint64_t v39 = v48;
                v39 += 8;
              }
              while (v35 != v37);
            }
            uint64_t v16 = *(uint64_t **)a1;
          }
          if (!v16) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        unint64_t v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v18 < 3)
        {
          uint64_t v19 = v15;
          uint64_t v20 = *(uint64_t **)a1;
        }
        else
        {
          uint64_t v19 = v15;
          uint64_t v20 = *(uint64_t **)a1;
          if ((unint64_t)(v15 - (char *)v16) >= 0x20)
          {
            unint64_t v21 = v18 + 1;
            uint64_t v22 = v21 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v19 = &v15[v22 * 8];
            uint64_t v20 = &v16[v22];
            uint64_t v23 = (long long *)(v16 + 2);
            unsigned int v24 = v15 + 16;
            uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v26 = *v23;
              *(v24 - 1) = *(v23 - 1);
              *unsigned int v24 = v26;
              v23 += 2;
              v24 += 2;
              v25 -= 4;
            }
            while (v25);
            if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          uint64_t v34 = *v20++;
          *(void *)uint64_t v19 = v34;
          v19 += 8;
        }
        while (v20 != &v16[(unsigned __int16)(v9 + v12)]);
LABEL_25:
        uint64_t v16 = *(uint64_t **)a1;
        goto LABEL_26;
      }
    }
    else
    {
      __int16 v9 = 0;
      uint64_t v10 = (unsigned __int8 *)(a1 + 10);
    }
    do
    {
      int v33 = *v10++;
      v9 += byte_20EBDB6[v33];
      LOWORD(a2) = a2 - 8;
    }
    while ((unsigned __int16)a2 > 8u);
    goto LABEL_18;
  }
}

uint64_t sub_ACDCB4(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  int v5 = (unsigned __int8 *)(a1 + 10);
  if (a2 < 9)
  {
    __int16 v7 = 0;
    LOBYTE(v8) = a2;
    goto LABEL_10;
  }
  uint64_t v6 = ((unsigned __int16)(a2 - 9) >> 3) + 1;
  if ((unsigned __int16)(a2 - 9) >= 8u)
  {
    __int16 v10 = 0;
    __int16 v11 = 0;
    unsigned __int16 v8 = a2 - 8 * ((((unsigned __int16)(a2 - 9) >> 3) + 1) & 0x3FFE);
    __int16 v9 = &v5[(((unsigned __int16)(a2 - 9) >> 3) + 1) & 0x3FFE];
    __int16 v12 = (unsigned __int8 *)(a1 + 11);
    uint64_t v13 = (((unsigned __int16)(a2 - 9) >> 3) + 1) & 0x3FFE;
    do
    {
      uint64_t v14 = *(v12 - 1);
      int v15 = *v12;
      v12 += 2;
      v10 += byte_20EBDB6[v14];
      v11 += byte_20EBDB6[v15];
      v13 -= 2;
    }
    while (v13);
    __int16 v7 = v11 + v10;
    if ((v6 & 0x3FFE) == v6) {
      goto LABEL_9;
    }
  }
  else
  {
    __int16 v7 = 0;
    unsigned __int16 v8 = a2;
    __int16 v9 = (unsigned __int8 *)(a1 + 10);
  }
  do
  {
    int v16 = *v9++;
    v7 += byte_20EBDB6[v16];
    v8 -= 8;
  }
  while (v8 > 8u);
LABEL_9:
  v5 += v6;
LABEL_10:
  unsigned __int16 v17 = v7 + byte_20EBDB6[~(-1 << v8) & (unint64_t)*v5];
  uint64_t v18 = a1 + (a2 >> 3);
  int v20 = *(unsigned __int8 *)(v18 + 10);
  uint64_t v19 = (unsigned char *)(v18 + 10);
  int v21 = 1 << (a2 & 7);
  if ((v21 & v20) != 0)
  {
    uint64_t v22 = *(uint64_t **)a1;
    uint64_t v23 = (unsigned __int16)(v7 + byte_20EBDB6[~(-1 << v8) & (unint64_t)*v5]);
    goto LABEL_35;
  }
  uint64_t v24 = (unsigned __int16)(*(_WORD *)(a1 + 8) + 1);
  uint64_t v25 = (uint64_t *)malloc_type_malloc(8 * v24, 0x100004000313F17uLL);
  if (!v25)
  {
    fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v24);
    exit(1);
  }
  uint64_t v22 = v25;
  long long v26 = *(uint64_t **)a1;
  uint64_t v23 = v17;
  if (v17)
  {
    unint64_t v27 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v27 < 3)
    {
      __int16 v28 = v22;
      uint64_t v29 = *(uint64_t **)a1;
    }
    else
    {
      __int16 v28 = v22;
      uint64_t v29 = *(uint64_t **)a1;
      if ((unint64_t)((char *)v22 - (char *)v26) >= 0x20)
      {
        unint64_t v30 = v27 + 1;
        uint64_t v31 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        __int16 v28 = &v22[v31];
        uint64_t v29 = &v26[v31];
        int v32 = (long long *)(v26 + 2);
        int v33 = v22 + 2;
        uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v35 = *v32;
          *(v33 - 1) = *(v32 - 1);
          *int v33 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 4;
        }
        while (v34);
        if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_22;
        }
      }
    }
    do
    {
      uint64_t v36 = *v29++;
      *v28++ = v36;
    }
    while (v29 != &v26[v17]);
LABEL_22:
    long long v26 = *(uint64_t **)a1;
  }
  uint64_t v37 = *(unsigned __int16 *)(a1 + 8);
  if (v37 != v17)
  {
    uint64_t v38 = v17;
    uint64_t v39 = (char *)&v22[v38];
    unint64_t v40 = &v26[v38];
    unint64_t v41 = 8 * v37 - v38 * 8 - 8;
    if (v41 < 0x58) {
      goto LABEL_29;
    }
    if ((unint64_t)((char *)v22 - (char *)v26 + 8) < 0x20) {
      goto LABEL_29;
    }
    uint64_t v42 = (v41 >> 3) + 1;
    uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v39 += v43;
    unint64_t v40 = (uint64_t *)((char *)v40 + v43);
    uint64_t v44 = (long long *)&v26[v38 + 2];
    unint64_t v45 = &v22[v38 + 3];
    uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v47 = *v44;
      *((_OWORD *)v45 - 1) = *(v44 - 1);
      *(_OWORD *)unint64_t v45 = v47;
      v44 += 2;
      v45 += 4;
      v46 -= 4;
    }
    while (v46);
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      uint64_t v48 = &v26[v37];
      uint64_t v49 = v39 + 8;
      do
      {
        uint64_t v50 = *v40++;
        *v49++ = v50;
      }
      while (v40 != v48);
    }
    long long v26 = *(uint64_t **)a1;
  }
  if (v26) {
    free(v26);
  }
  *(void *)a1 = v22;
  ++*(_WORD *)(a1 + 8);
  *v19 |= v21;
LABEL_35:
  v22[v23] = *a3;
  return *(void *)a1 + 8 * v23;
}

uint64_t sub_ACDFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 8;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 16843009;
  *(_WORD *)(a1 + 32) = 256;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = *a6;
  uint64_t v11 = a6[1];
  *(void *)(a1 + 72) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a7;
  uint64_t v12 = a7[1];
  *(void *)(a1 + 88) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = *a8;
  uint64_t v13 = a8[1];
  *(void *)(a1 + 104) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)&long long v14 = 0x8000000080000000;
  *((void *)&v14 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 116) = v14;
  *(void *)(a1 + 136) = 10;
  *(_DWORD *)(a1 + 144) = -1;
  if (*a5)
  {
    *(void *)(a1 + 152) = *a5;
    uint64_t v15 = a5[1];
    *(void *)(a1 + 160) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v16 = operator new(0x78uLL);
    v16[1] = 0;
    v16[2] = 0;
    *int v16 = off_243D3A0;
    *(void *)(a1 + 152) = sub_ACC888((uint64_t)(v16 + 3));
    *(void *)(a1 + 160) = v16;
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 432) = -1;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  sub_BD5668(a1 + 464, a2);
  *(unsigned char *)(a1 + 568) = *a5 == 0;
  char v19 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 576), &__p);
  if (v19 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_ACE1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  sub_14A84(v17);
  sub_14A84(v16);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_ACE270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(_OWORD *)a1 = xmmword_20E2060;
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = *a5;
  uint64_t v7 = a5[1];
  *(void *)(a1 + 56) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)&long long v8 = 0x8000000080000000;
  *((void *)&v8 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 68) = v8;
  *(void *)(a1 + 88) = 10;
  *(void *)(a1 + 96) = 0x100000004;
  sub_ACE3F0(a1 + 104);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 416) = -1;
  *(void *)(a1 + 408) = 0;
  sub_BD5668(a1 + 424, a2);
  char v11 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 528), &__p);
  if (v11 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_ACE388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_A387B0(v19);
  sub_A387FC(v18 + 96);
  sub_A3884C(v16 + 296);
  sub_A3884C(v18);
  sub_A3888C(v17);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

void sub_ACE3DC(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_ACE3F0(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 40) = 0;
  sub_ACE4EC((uint64_t *)(a1 + 48), 32);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  sub_ACEA00(a1);
  *(unsigned char *)(a1 + 26) = 1;
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void sub_ACE4A4(_Unwind_Exception *a1)
{
  int v4 = *(void **)(v1 + 112);
  if (v4)
  {
    operator delete(v4);
    int v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      sub_A38920(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 96) = v5;
  operator delete(v5);
  sub_A38920(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_ACE4EC(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    sub_ACE580(a1, (a2 - 1) / 0x30uLL + 1, (uint64_t **)v4);
    if (v4[0]) {
      free(v4[0]);
    }
  }
  return a1;
}

void sub_ACE55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  sub_20AE094((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

void sub_ACE580(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (a2 <= (v6 - v8) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v8 + 16 * a2;
      do
      {
        *(void *)uint64_t v8 = 0;
        int v16 = *((unsigned __int16 *)a3 + 4);
        *(_WORD *)(v8 + 8) = v16;
        if (v16)
        {
          uint64_t v17 = *((unsigned __int16 *)a3 + 4);
          uint64_t v18 = malloc_type_malloc(12 * v17, 0x10000403E1C8BA9uLL);
          if (!v18)
          {
            fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v17);
            exit(1);
          }
          *(void *)uint64_t v8 = v18;
          if (*((_WORD *)a3 + 4))
          {
            char v19 = *a3;
            uint64_t v20 = 12 * *((unsigned __int16 *)a3 + 4);
            do
            {
              uint64_t v21 = *v19;
              v18[2] = *((_DWORD *)v19 + 2);
              *(void *)uint64_t v18 = v21;
              v18 += 3;
              char v19 = (uint64_t *)((char *)v19 + 12);
              v20 -= 12;
            }
            while (v20);
          }
        }
        int v15 = *(_DWORD *)((char *)a3 + 10);
        *(_WORD *)(v8 + 14) = *((_WORD *)a3 + 7);
        *(_DWORD *)(v8 + 10) = v15;
        v8 += 16;
      }
      while (v8 != v14);
      uint64_t v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    uint64_t v9 = (v8 - *a1) >> 4;
    if ((v9 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v6 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= v9 + a2) {
      uint64_t v11 = v9 + a2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v22 = (uint64_t)&v13[16 * v9];
    uint64_t v23 = &v13[16 * v12];
    unint64_t v24 = v22 + 16 * a2;
    uint64_t v25 = v22;
    do
    {
      *(void *)uint64_t v25 = 0;
      int v27 = *((unsigned __int16 *)a3 + 4);
      *(_WORD *)(v25 + 8) = v27;
      if (v27)
      {
        uint64_t v28 = *((unsigned __int16 *)a3 + 4);
        uint64_t v29 = malloc_type_malloc(12 * v28, 0x10000403E1C8BA9uLL);
        if (!v29)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v28);
          exit(1);
        }
        *(void *)uint64_t v25 = v29;
        if (*((_WORD *)a3 + 4))
        {
          unint64_t v30 = *a3;
          uint64_t v31 = 12 * *((unsigned __int16 *)a3 + 4);
          do
          {
            uint64_t v32 = *v30;
            v29[2] = *((_DWORD *)v30 + 2);
            *(void *)uint64_t v29 = v32;
            v29 += 3;
            unint64_t v30 = (uint64_t *)((char *)v30 + 12);
            v31 -= 12;
          }
          while (v31);
        }
      }
      int v26 = *(_DWORD *)((char *)a3 + 10);
      *(_WORD *)(v25 + 14) = *((_WORD *)a3 + 7);
      *(_DWORD *)(v25 + 10) = v26;
      v25 += 16;
    }
    while (v25 != v24);
    sub_ACE8A8(v7, a1[1], a1[1], *a1, *a1, v22, v22);
    int v33 = (char *)*a1;
    uint64_t v34 = (char *)a1[1];
    *a1 = v35;
    a1[1] = v24;
    a1[2] = (uint64_t)v23;
    if (v34 != v33)
    {
      uint64_t v36 = v34;
      do
      {
        uint64_t v38 = (void *)*((void *)v36 - 2);
        v36 -= 16;
        uint64_t v37 = v38;
        if (v38)
        {
          free(v37);
          *((void *)v34 - 2) = 0;
        }
        uint64_t v34 = v36;
      }
      while (v36 != v33);
    }
    if (v33) {
      free(v33);
    }
  }
}

void sub_ACE854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACE868(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_ACE870(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_ACE878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACE890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_ACE8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 16) = 0;
      int v11 = *(unsigned __int16 *)(v9 - 8);
      *(_WORD *)(v7 - 8) = v11;
      if (v11)
      {
        uint64_t v12 = *(unsigned __int16 *)(v9 - 8);
        uint64_t v13 = malloc_type_malloc(12 * v12, 0x10000403E1C8BA9uLL);
        if (!v13)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v12);
          exit(1);
        }
        *(void *)(v7 - 16) = v13;
        if (*(_WORD *)(v9 - 8))
        {
          uint64_t v14 = *(uint64_t **)(v9 - 16);
          uint64_t v15 = 12 * *(unsigned __int16 *)(v9 - 8);
          do
          {
            uint64_t v16 = *v14;
            v13[2] = *((_DWORD *)v14 + 2);
            *(void *)uint64_t v13 = v16;
            v13 += 3;
            uint64_t v14 = (uint64_t *)((char *)v14 + 12);
            v15 -= 12;
          }
          while (v15);
        }
      }
      int v10 = *(_DWORD *)(v9 - 6);
      *(_WORD *)(v7 - 2) = *(_WORD *)(v9 - 2);
      *(_DWORD *)(v7 - 6) = v10;
      uint64_t v7 = v19 - 16;
      v19 -= 16;
      v9 -= 16;
    }
    while (v9 != a5);
    return v18;
  }
  return a6;
}

void sub_ACE9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACE9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACEA00(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    long long v18 = *(_OWORD *)(a1 + 16);
    int v19 = *(_DWORD *)(a1 + 32);
    memset(v20, 0, sizeof(v20));
    long long v21 = 0u;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v18, 0)));
    BYTE8(v18) = 0;
    sub_ACEB8C((uint64_t)&v17, 1, (void *)a1, 0x20uLL);
    int v2 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v19;
    int v19 = v2;
    uint64_t v3 = *(void **)(a1 + 40);
    int v4 = *(char **)(a1 + 48);
    *(void **)(a1 + 40) = v20[0];
    uint64x2_t v6 = *(uint64x2_t *)a1;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v7 = v18;
    *(uint64x2_t *)a1 = v17;
    *(_OWORD *)(a1 + 16) = v7;
    uint64x2_t v17 = v6;
    long long v18 = v5;
    long long v8 = *(_OWORD *)&v20[1];
    v20[0] = v3;
    v20[1] = v4;
    uint64_t v9 = v20[3];
    long long v10 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v8;
    *(void *)(a1 + 64) = v9;
    *(_OWORD *)&v20[2] = v10;
    *(void *)&long long v8 = v21;
    long long v11 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v21;
    long long v21 = v11;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v17 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v18, (float)(unint64_t)v11)));
    BYTE8(v18) = 0;
    if (v4)
    {
      uint64_t v12 = (char *)v10;
      uint64_t v13 = v4;
      if ((char *)v10 != v4)
      {
        uint64_t v14 = (char *)v10;
        do
        {
          uint64_t v16 = (void *)*((void *)v14 - 2);
          v14 -= 16;
          uint64_t v15 = v16;
          if (v16)
          {
            free(v15);
            *((void *)v12 - 2) = 0;
          }
          uint64_t v12 = v14;
        }
        while (v14 != v4);
        uint64_t v13 = (char *)v20[1];
      }
      v20[2] = v4;
      free(v13);
    }
  }
}

void sub_ACEB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_ACEB8C(uint64_t a1, int a2, void *a3, unint64_t a4)
{
  if (*(void *)(a1 + 40) | *(void *)(a1 + 80))
  {
    for (uint64_t i = *(void *)(a1 + 48); i != *(void *)(a1 + 56); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 80) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 72);
  float32x2_t v10 = *(float32x2_t *)(a1 + 16);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(v10, (float)v9)));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2 == 1)
  {
    unint64_t v11 = a3[9];
  }
  else
  {
    unint64_t v11 = 4;
    if (a4 > 4) {
      goto LABEL_28;
    }
    while (a3[10] - a3[5] >= (unint64_t)(float)(v10.f32[0] * (float)v11))
    {
      do
      {
LABEL_28:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a4);
    }
  }
  if (v11 > v9)
  {
    sub_ACEE00((uint64_t *)(a1 + 48), v11);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  sub_ACEFB0((uint64_t)a3, &v21);
  uint64_t v12 = a3[7];
  if (v22 != a3[6] || v23 != v12 || v24 != v12)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 72) - 1;
      unint64_t v16 = v15 & *(_DWORD *)v25;
      uint64_t v17 = *(void *)(a1 + 48);
      if ((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + (((v15 & *(_DWORD *)v25) % 0x30) >> 3) + 10) >> (((v15 & *(_DWORD *)v25) % 0x30) & 7)))
      {
        uint64_t v18 = 1;
        do
          unint64_t v16 = (v16 + v18++) & v15;
        while (((*(unsigned __int8 *)(v17 + 16 * (v16 / 0x30) + ((v16 % 0x30) >> 3) + 10) >> ((v16 % 0x30) & 7)) & 1) != 0);
      }
      sub_ACF218((uint64_t *)(a1 + 48), v16, v25);
      sub_ACF3EC(&v21);
      if (v22 == a3[6])
      {
        uint64_t v19 = a3[7];
        if (v23 == v19 && v24 == v19) {
          break;
        }
      }
    }
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_ACEDEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_ACEE00(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v4 <= v6)
  {
    if (v4 < v6)
    {
      uint64_t v7 = *a1 + 16 * v4;
      if (v5 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          float32x2_t v10 = *(void **)(v8 - 16);
          v8 -= 16;
          unint64_t v9 = v10;
          if (v10)
          {
            free(v9);
            *(void *)(v5 - 16) = 0;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    sub_ACE580(a1, v4 - v6, (uint64_t **)v23);
    if (v23[0]) {
      free(v23[0]);
    }
  }
  if (a1[3] > a2)
  {
    uint64_t v11 = a1[1];
    if (a2 % 0x30)
    {
      sub_ACF538(v11 - 16, v11 - 16, a2 % 0x30, v11 - 16, 0x30u);
      uint64_t v11 = a1[1];
    }
    a1[4] = 0;
    uint64_t v12 = *a1;
    if (*a1 != v11)
    {
      unint64_t v13 = v11 - v12 - 16;
      if (v13 >= 0x10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = (v13 >> 4) + 1;
        uint64_t v15 = v12 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v19 = (unsigned __int16 *)(v12 + 24);
        uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v21 = *(v19 - 8);
          unsigned int v22 = *v19;
          v19 += 16;
          v16 += v21;
          v17 += v22;
          v20 -= 2;
        }
        while (v20);
        uint64_t v14 = v17 + v16;
        if (v18 == (v18 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = *a1;
      }
      do
      {
        v14 += *(unsigned __int16 *)(v15 + 8);
        v15 += 16;
      }
      while (v15 != v11);
LABEL_24:
      a1[4] = v14;
    }
  }
  a1[3] = a2;
}

void sub_ACEF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_ACEFB0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  if (v5 == v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 48);
    goto LABEL_5;
  }
  unint64_t v6 = *(_DWORD **)v5;
  if (*(_WORD *)(v5 + 8))
  {
    uint64_t v7 = *(void *)(a1 + 56);
LABEL_5:
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = v8;
    goto LABEL_14;
  }
  uint64_t v10 = v5 + 16;
  while (1)
  {
    if (v6)
    {
      free(v6);
      *(void *)(v10 - 16) = 0;
    }
    *(void *)(v10 - 8) = 0;
    if (v10 == v4) {
      break;
    }
    unint64_t v6 = *(_DWORD **)v10;
    int v11 = *(unsigned __int16 *)(v10 + 8);
    v10 += 16;
    if (v11)
    {
      uint64_t v9 = v10 - 16;
      goto LABEL_13;
    }
  }
  uint64_t v9 = v4;
LABEL_13:
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
LABEL_14:
  *a2 = a1;
  a2[1] = v5;
  a2[2] = v4;
  a2[3] = v9;
  a2[4] = v6;
  a2[5] = v8;
  a2[6] = v7;
  a2[7] = v7;
  a2[8] = 0;
  if (v5 == v8)
  {
    if (v4 == v7)
    {
      while (v9 != v4)
      {
        if (!*(void *)(a1 + 40) || *(_DWORD *)(a1 + 32) != *v6) {
          break;
        }
        v6 += 3;
        a2[4] = v6;
        uint64_t v19 = *(_DWORD **)v9;
        if (v6 == (_DWORD *)(*(void *)v9 + 12 * *(unsigned __int16 *)(v9 + 8)))
        {
          uint64_t v20 = v9 + 16;
          do
          {
            if (v19)
            {
              free(v19);
              *(void *)(v20 - 16) = 0;
            }
            *(void *)(v20 - 8) = 0;
            if (v20 == v4)
            {
              uint64_t v9 = v4;
              goto LABEL_44;
            }
            unint64_t v6 = *(_DWORD **)v20;
            a2[4] = *(void *)v20;
            int v21 = *(unsigned __int16 *)(v20 + 8);
            v20 += 16;
            uint64_t v19 = v6;
          }
          while (!v21);
          uint64_t v9 = v20 - 16;
LABEL_44:
          a2[3] = v9;
        }
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 40);
      while (v15)
      {
        if (*(_DWORD *)(a1 + 32) != *v6) {
          break;
        }
        v6 += 3;
        a2[4] = v6;
        uint64_t v16 = *(_DWORD **)v9;
        if (v6 == (_DWORD *)(*(void *)v9 + 12 * *(unsigned __int16 *)(v9 + 8)))
        {
          uint64_t v17 = v9 + 16;
          do
          {
            if (v16)
            {
              free(v16);
              *(void *)(v17 - 16) = 0;
            }
            *(void *)(v17 - 8) = 0;
            if (v17 == v4)
            {
              uint64_t v9 = v4;
              goto LABEL_31;
            }
            unint64_t v6 = *(_DWORD **)v17;
            a2[4] = *(void *)v17;
            int v18 = *(unsigned __int16 *)(v17 + 8);
            v17 += 16;
            uint64_t v16 = v6;
          }
          while (!v18);
          uint64_t v9 = v17 - 16;
LABEL_31:
          a2[3] = v9;
          uint64_t v15 = *(void *)(a1 + 40);
        }
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    while (v12)
    {
      if (*(_DWORD *)(a1 + 32) != *v6) {
        break;
      }
      v6 += 3;
      a2[4] = v6;
      unint64_t v13 = *(_DWORD **)v9;
      if (v6 == (_DWORD *)(*(void *)v9 + 12 * *(unsigned __int16 *)(v9 + 8)))
      {
        uint64_t v14 = v9 + 16;
        do
        {
          uint64_t v9 = v14;
          if (v13)
          {
            free(v13);
            *(void *)(v9 - 16) = 0;
          }
          *(void *)(v9 - 8) = 0;
          if (v9 == v4) {
            break;
          }
          unint64_t v6 = *(_DWORD **)v9;
          a2[4] = *(void *)v9;
          uint64_t v14 = v9 + 16;
          unint64_t v13 = v6;
        }
        while (!*(_WORD *)(v9 + 8));
        a2[3] = v9;
        uint64_t v12 = *(void *)(a1 + 40);
      }
    }
  }
}

uint64_t sub_ACF218(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2 / 0x30;
  uint64_t v6 = *a1;
  uint64_t v7 = v6 + 16 * (a2 / 0x30);
  unint64_t v8 = a2 % 0x30;
  uint64_t v9 = (unsigned __int8 *)(v7 + 10);
  if ((unsigned __int16)(a2 % 0x30) < 9u)
  {
    __int16 v10 = 0;
    unint64_t v11 = a2 % 0x30;
    goto LABEL_11;
  }
  __int16 v10 = 0;
  unint64_t v11 = (unsigned __int16)(a2 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a2 % 0x30 - 9) >> 3)
  {
    __int16 v12 = 0;
    unint64_t v13 = v11 + 1;
    uint64_t v14 = (v11 + 1) & 0x3FFE;
    LOWORD(v11) = v8 - 8 * v14;
    uint64_t v15 = &v9[v14];
    uint64_t v16 = (unsigned __int8 *)(v6 + 16 * v5 + 11);
    uint64_t v17 = v14;
    do
    {
      uint64_t v18 = *(v16 - 1);
      int v19 = *v16;
      v16 += 2;
      v10 += byte_20EBEB6[v18];
      v12 += byte_20EBEB6[v19];
      v17 -= 2;
    }
    while (v17);
    v10 += v12;
    if (v13 == v14) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v11 = a2 % 0x30;
    uint64_t v15 = (unsigned __int8 *)(v7 + 10);
  }
  do
  {
    int v20 = *v15++;
    v10 += byte_20EBEB6[v20];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_10:
  v9 += ((unsigned __int16)(v8 - 9) >> 3) + 1;
LABEL_11:
  uint64_t v21 = *(unsigned __int16 *)(v7 + 8);
  unint64_t v22 = v7 + (v8 >> 3);
  int v24 = *(unsigned __int8 *)(v22 + 10);
  uint64_t v23 = (unsigned char *)(v22 + 10);
  unsigned __int16 v25 = v10 + byte_20EBEB6[~(-1 << v11) & (unint64_t)*v9];
  int v26 = 1 << (v8 & 7);
  if ((v26 & v24) == 0)
  {
    sub_ACF864(v7, (unsigned __int16)(v10 + byte_20EBEB6[~(-1 << v11) & (unint64_t)*v9]));
    ++*(_WORD *)(v7 + 8);
    *v23 |= v26;
  }
  uint64_t v27 = 12 * v25;
  uint64_t v28 = *(void *)v7 + v27;
  uint64_t v29 = *a3;
  *(_DWORD *)(v28 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v28 = v29;
  uint64_t result = *(void *)v7 + v27;
  a1[4] = a1[4] - v21 + *(unsigned __int16 *)(*a1 + 16 * v5 + 8);
  return result;
}

void *sub_ACF3EC(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4] + 12;
  a1[4] = v3;
  uint64_t v4 = *(void **)v2;
  unint64_t v5 = (void *)(v2 + 8);
  if (v3 == *(void *)v2 + 12 * *(unsigned __int16 *)(v2 + 8))
  {
    do
    {
      if (v4)
      {
        free(v4);
        *(void *)uint64_t v2 = 0;
      }
      *unint64_t v5 = 0;
      uint64_t v13 = a1[2];
      uint64_t v14 = a1[3];
      uint64_t v2 = v14 + 16;
      a1[3] = v14 + 16;
      if (v14 + 16 == v13) {
        break;
      }
      int v15 = *(unsigned __int16 *)(v14 + 24);
      unint64_t v5 = (void *)(v14 + 24);
      uint64_t v4 = (void *)*(v5 - 1);
      a1[4] = v4;
    }
    while (!v15);
  }
  while (1)
  {
    if (a1[1] == a1[5])
    {
      uint64_t v6 = a1[2];
      if (v6 == a1[6] && v2 == a1[7] && (v2 == v6 || a1[4] == a1[8])) {
        break;
      }
    }
    if (!*(void *)(*a1 + 40)) {
      break;
    }
    uint64_t v7 = (_DWORD *)a1[4];
    if (*(_DWORD *)(*a1 + 32) != *v7) {
      break;
    }
    a1[4] = v7 + 3;
    unint64_t v8 = *(void **)v2;
    uint64_t v9 = (void *)(v2 + 8);
    if (v7 + 3 == (_DWORD *)(*(void *)v2 + 12 * *(unsigned __int16 *)(v2 + 8)))
    {
      do
      {
        if (v8)
        {
          free(v8);
          *(void *)uint64_t v2 = 0;
        }
        *uint64_t v9 = 0;
        uint64_t v10 = a1[2];
        uint64_t v11 = a1[3];
        uint64_t v2 = v11 + 16;
        a1[3] = v11 + 16;
        if (v11 + 16 == v10) {
          break;
        }
        int v12 = *(unsigned __int16 *)(v11 + 24);
        uint64_t v9 = (void *)(v11 + 24);
        unint64_t v8 = (void *)*(v9 - 1);
        a1[4] = v8;
      }
      while (!v12);
    }
  }
  return a1;
}

void sub_ACF538(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v8 = a3;
  if (a2 != a4 || a3 != a5)
  {
    __int16 v9 = 0;
    uint64_t v10 = a1 + 10;
    unsigned __int16 v11 = a3 - 9;
    uint64_t v28 = (unsigned __int8 *)(a1 + 11);
    __int16 v29 = a3 - 9;
    while (1)
    {
      uint64_t v12 = a1 + (v8 >> 3);
      int v14 = *(unsigned __int8 *)(v12 + 10);
      uint64_t v13 = (unsigned char *)(v12 + 10);
      int v15 = 1 << (v8 & 7);
      if ((v15 & v14) == 0) {
        goto LABEL_19;
      }
      if (v8 < 9u)
      {
        __int16 v16 = 0;
        int v19 = (unsigned __int8 *)(a1 + 10);
        LOBYTE(v17) = v8;
        if (*(_WORD *)(a1 + 8) == 1) {
          goto LABEL_15;
        }
        goto LABEL_9;
      }
      if ((unsigned __int16)(v29 + v9) < 8u) {
        break;
      }
      __int16 v20 = 0;
      __int16 v21 = 0;
      uint64_t v22 = ((v11 >> 3) + 1) & 0x3FFE;
      unsigned __int16 v17 = v8 - 8 * ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE);
      uint64_t v18 = (unsigned __int8 *)(v10 + ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE));
      int v24 = v28;
      do
      {
        uint64_t v25 = *(v24 - 1);
        int v26 = *v24;
        v24 += 2;
        v20 += byte_20EBEB6[v25];
        v21 += byte_20EBEB6[v26];
        v22 -= 2;
      }
      while (v22);
      __int16 v16 = v21 + v20;
      uint64_t v23 = ((unsigned __int16)(v29 + v9) >> 3) + 1;
      if ((v23 & 0x3FFE) != v23) {
        goto LABEL_13;
      }
LABEL_14:
      int v19 = (unsigned __int8 *)(v10 + ((unsigned __int16)(v8 - 9) >> 3) + 1);
      if (*(_WORD *)(a1 + 8) == 1)
      {
LABEL_15:
        if (*(void *)a1) {
          free(*(void **)a1);
        }
        *(void *)a1 = 0;
        goto LABEL_18;
      }
LABEL_9:
      sub_ACF740(a1, (unsigned __int16)(v16 + byte_20EBEB6[~(-1 << v17) & *v19]));
LABEL_18:
      --*(_WORD *)(a1 + 8);
      *v13 &= ~(_BYTE)v15;
LABEL_19:
      ++v8;
      ++v9;
      ++v11;
      if (a2 == a4 && v8 == a5) {
        return;
      }
    }
    __int16 v16 = 0;
    unsigned __int16 v17 = v8;
    uint64_t v18 = (unsigned __int8 *)(a1 + 10);
    do
    {
LABEL_13:
      int v27 = *v18++;
      v16 += byte_20EBEB6[v27];
      v17 -= 8;
    }
    while (v17 > 8u);
    goto LABEL_14;
  }
}

void sub_ACF740(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (unsigned __int16)(*(_WORD *)(a1 + 8) - 1);
  unint64_t v5 = (char *)malloc_type_malloc(12 * v4, 0x10000403E1C8BA9uLL);
  if (!v5)
  {
    fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v4);
    exit(1);
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(_DWORD **)a1;
  if (a2)
  {
    uint64_t v8 = 12 * a2;
    __int16 v9 = v6;
    do
    {
      uint64_t v10 = *(void *)v7;
      *((_DWORD *)v9 + 2) = v7[2];
      *(void *)__int16 v9 = v10;
      v9 += 12;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
    uint64_t v7 = *(_DWORD **)a1;
  }
  uint64_t v11 = (uint64_t)&v7[3 * a2 + 3];
  if ((_DWORD *)v11 != &v7[3 * *(unsigned __int16 *)(a1 + 8)])
  {
    uint64_t v12 = &v6[12 * a2];
    uint64_t v13 = 12 * *(unsigned __int16 *)(a1 + 8) - 12 * a2 - 12;
    do
    {
      uint64_t v14 = *(void *)v11;
      *((_DWORD *)v12 + 2) = *(_DWORD *)(v11 + 8);
      *(void *)uint64_t v12 = v14;
      v12 += 12;
      v11 += 12;
      v13 -= 12;
    }
    while (v13);
    uint64_t v7 = *(_DWORD **)a1;
  }
  if (v7) {
    free(v7);
  }
  *(void *)a1 = v6;
}

void sub_ACF864(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (unsigned __int16)(*(_WORD *)(a1 + 8) + 1);
  unint64_t v5 = malloc_type_malloc(12 * v4, 0x10000403E1C8BA9uLL);
  if (!v5)
  {
    fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v4);
    exit(1);
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(_DWORD **)a1;
  if (a2)
  {
    uint64_t v8 = 12 * a2;
    __int16 v9 = v6;
    do
    {
      uint64_t v10 = *(void *)v7;
      v9[2] = v7[2];
      *(void *)__int16 v9 = v10;
      v9 += 3;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
    uint64_t v7 = *(_DWORD **)a1;
  }
  if (*(unsigned __int16 *)(a1 + 8) != a2)
  {
    uint64_t v11 = 3 * a2;
    uint64_t v12 = (char *)&v7[v11];
    uint64_t v13 = (uint64_t)&v6[v11 + 3];
    uint64_t v14 = 12 * *(unsigned __int16 *)(a1 + 8) - v11 * 4;
    do
    {
      uint64_t v15 = *(void *)v12;
      *(_DWORD *)(v13 + 8) = *((_DWORD *)v12 + 2);
      *(void *)uint64_t v13 = v15;
      v13 += 12;
      v12 += 12;
      v14 -= 12;
    }
    while (v14);
    uint64_t v7 = *(_DWORD **)a1;
  }
  if (v7) {
    free(v7);
  }
  *(void *)a1 = v6;
}

uint64_t sub_ACF97C(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 26) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0x3EA3D70A3F4CCCCDLL;
  *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = 0;
  sub_ACFA50((uint64_t *)(a1 + 48), 32);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_ACFF64(a1);
  *(unsigned char *)(a1 + 26) = 1;
  *(void *)(a1 + 32) = 0xFFFFFFFFLL;
  return a1;
}

void sub_ACFA28(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v5;
    operator delete(v5);
  }
  sub_A38920(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_ACFA50(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 0;
  if (a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    sub_ACFAE4(a1, (a2 - 1) / 0x30uLL + 1, (uint64_t **)v4);
    if (v4[0]) {
      free(v4[0]);
    }
  }
  return a1;
}

void sub_ACFAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  sub_20AE094((uint64_t)&a9, v9);
  _Unwind_Resume(a1);
}

void sub_ACFAE4(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[1];
  if (a2 <= (v6 - v8) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = v8 + 16 * a2;
      do
      {
        *(void *)uint64_t v8 = 0;
        int v16 = *((unsigned __int16 *)a3 + 4);
        *(_WORD *)(v8 + 8) = v16;
        if (v16)
        {
          uint64_t v17 = *((unsigned __int16 *)a3 + 4);
          uint64_t v18 = malloc_type_malloc(12 * v17, 0x10000403E1C8BA9uLL);
          if (!v18)
          {
            fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v17);
            exit(1);
          }
          *(void *)uint64_t v8 = v18;
          if (*((_WORD *)a3 + 4))
          {
            int v19 = *a3;
            uint64_t v20 = 12 * *((unsigned __int16 *)a3 + 4);
            do
            {
              uint64_t v21 = *v19;
              v18[2] = *((_DWORD *)v19 + 2);
              *(void *)uint64_t v18 = v21;
              v18 += 3;
              int v19 = (uint64_t *)((char *)v19 + 12);
              v20 -= 12;
            }
            while (v20);
          }
        }
        int v15 = *(_DWORD *)((char *)a3 + 10);
        *(_WORD *)(v8 + 14) = *((_WORD *)a3 + 7);
        *(_DWORD *)(v8 + 10) = v15;
        v8 += 16;
      }
      while (v8 != v14);
      uint64_t v8 = v14;
    }
    a1[1] = v8;
  }
  else
  {
    uint64_t v9 = (v8 - *a1) >> 4;
    if ((v9 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v6 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= v9 + a2) {
      uint64_t v11 = v9 + a2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)malloc_type_malloc(16 * v12, 0x1020040EDED9539uLL);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v22 = (uint64_t)&v13[16 * v9];
    uint64_t v23 = &v13[16 * v12];
    unint64_t v24 = v22 + 16 * a2;
    uint64_t v25 = v22;
    do
    {
      *(void *)uint64_t v25 = 0;
      int v27 = *((unsigned __int16 *)a3 + 4);
      *(_WORD *)(v25 + 8) = v27;
      if (v27)
      {
        uint64_t v28 = *((unsigned __int16 *)a3 + 4);
        __int16 v29 = malloc_type_malloc(12 * v28, 0x10000403E1C8BA9uLL);
        if (!v29)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v28);
          exit(1);
        }
        *(void *)uint64_t v25 = v29;
        if (*((_WORD *)a3 + 4))
        {
          unint64_t v30 = *a3;
          uint64_t v31 = 12 * *((unsigned __int16 *)a3 + 4);
          do
          {
            uint64_t v32 = *v30;
            v29[2] = *((_DWORD *)v30 + 2);
            *(void *)__int16 v29 = v32;
            v29 += 3;
            unint64_t v30 = (uint64_t *)((char *)v30 + 12);
            v31 -= 12;
          }
          while (v31);
        }
      }
      int v26 = *(_DWORD *)((char *)a3 + 10);
      *(_WORD *)(v25 + 14) = *((_WORD *)a3 + 7);
      *(_DWORD *)(v25 + 10) = v26;
      v25 += 16;
    }
    while (v25 != v24);
    sub_ACFE0C(v7, a1[1], a1[1], *a1, *a1, v22, v22);
    int v33 = (char *)*a1;
    uint64_t v34 = (char *)a1[1];
    *a1 = v35;
    a1[1] = v24;
    a1[2] = (uint64_t)v23;
    if (v34 != v33)
    {
      uint64_t v36 = v34;
      do
      {
        uint64_t v38 = (void *)*((void *)v36 - 2);
        v36 -= 16;
        uint64_t v37 = v38;
        if (v38)
        {
          free(v37);
          *((void *)v34 - 2) = 0;
        }
        uint64_t v34 = v36;
      }
      while (v36 != v33);
    }
    if (v33) {
      free(v33);
    }
  }
}

void sub_ACFDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACFDCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_ACFDD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_ACFDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACFDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_ACCDC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_ACFE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      *(void *)(v7 - 16) = 0;
      int v11 = *(unsigned __int16 *)(v9 - 8);
      *(_WORD *)(v7 - 8) = v11;
      if (v11)
      {
        uint64_t v12 = *(unsigned __int16 *)(v9 - 8);
        uint64_t v13 = malloc_type_malloc(12 * v12, 0x10000403E1C8BA9uLL);
        if (!v13)
        {
          fprintf(__stderrp, "sparsehash FATAL ERROR: failed to allocate %lu groups\n", v12);
          exit(1);
        }
        *(void *)(v7 - 16) = v13;
        if (*(_WORD *)(v9 - 8))
        {
          uint64_t v14 = *(uint64_t **)(v9 - 16);
          uint64_t v15 = 12 * *(unsigned __int16 *)(v9 - 8);
          do
          {
            uint64_t v16 = *v14;
            v13[2] = *((_DWORD *)v14 + 2);
            *(void *)uint64_t v13 = v16;
            v13 += 3;
            uint64_t v14 = (uint64_t *)((char *)v14 + 12);
            v15 -= 12;
          }
          while (v15);
        }
      }
      int v10 = *(_DWORD *)(v9 - 6);
      *(_WORD *)(v7 - 2) = *(_WORD *)(v9 - 2);
      *(_DWORD *)(v7 - 6) = v10;
      uint64_t v7 = v19 - 16;
      v19 -= 16;
      v9 -= 16;
    }
    while (v9 != a5);
    return v18;
  }
  return a6;
}

void sub_ACFF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACFF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_ACCFD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_ACFF64(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    long long v17 = *(_OWORD *)(a1 + 16);
    *(void *)uint64_t v18 = *(void *)(a1 + 32);
    memset(&v18[8], 0, 32);
    long long v19 = 0u;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v17, 0)));
    BYTE8(v17) = 0;
    sub_AD00E0((uint64_t)&v16, 1, a1, 0x20uLL);
    uint64x2_t v3 = *(uint64x2_t *)a1;
    long long v2 = *(_OWORD *)(a1 + 16);
    long long v4 = v17;
    *(uint64x2_t *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v4;
    uint64x2_t v16 = v3;
    long long v17 = v2;
    long long v5 = *(_OWORD *)v18;
    long long v6 = *(_OWORD *)&v18[16];
    *(_OWORD *)uint64_t v18 = *(_OWORD *)(a1 + 32);
    *(void *)&v18[16] = *(void *)(a1 + 48);
    uint64_t v7 = *(char **)&v18[16];
    uint64_t v8 = *(void *)&v18[32];
    long long v9 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    *(void *)(a1 + 64) = v8;
    *(_OWORD *)&v18[24] = v9;
    *(void *)&long long v5 = v19;
    long long v10 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v19;
    long long v19 = v10;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v5)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v17, (float)(unint64_t)v10)));
    BYTE8(v17) = 0;
    if (v7)
    {
      int v11 = (char *)v9;
      uint64_t v12 = v7;
      if ((char *)v9 != v7)
      {
        uint64_t v13 = (char *)v9;
        do
        {
          uint64_t v15 = (void *)*((void *)v13 - 2);
          v13 -= 16;
          uint64_t v14 = v15;
          if (v15)
          {
            free(v14);
            *((void *)v11 - 2) = 0;
          }
          int v11 = v13;
        }
        while (v13 != v7);
        uint64_t v12 = *(char **)&v18[16];
      }
      *(void *)&v18[24] = v7;
      free(v12);
    }
  }
}

void sub_AD00BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_AD00E0(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  if (*(void *)(a1 + 40) | *(void *)(a1 + 80))
  {
    for (uint64_t i = *(void *)(a1 + 48); i != *(void *)(a1 + 56); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 80) = 0;
  }
  unint64_t v9 = *(void *)(a1 + 72);
  float32x2_t v10 = *(float32x2_t *)(a1 + 16);
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(v10, (float)v9)));
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  if (a2 == 1)
  {
    unint64_t v11 = *(void *)(a3 + 72);
  }
  else
  {
    unint64_t v11 = 4;
    if (a4 > 4) {
      goto LABEL_17;
    }
    while (*(void *)(a3 + 80) - *(void *)(a3 + 40) >= (unint64_t)(float)(v10.f32[0] * (float)v11))
    {
      do
      {
LABEL_17:
        if ((v11 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "resize overflow");
        }
        v11 *= 2;
      }
      while (v11 < a4);
    }
  }
  if (v11 > v9)
  {
    sub_AD0568((uint64_t *)(a1 + 48), v11);
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 72))));
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t v13 = *(void *)(a3 + 48);
  uint64_t v12 = *(void *)(a3 + 56);
  if (v13 == v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a3 + 48);
LABEL_21:
    uint64_t v16 = *(void *)(a3 + 48);
    BOOL v17 = v12 == v15;
    if (!v17 || v13 != v15) {
      goto LABEL_50;
    }
LABEL_63:
    uint64_t v16 = v12;
    goto LABEL_64;
  }
  uint64_t v14 = *(_DWORD **)v13;
  if (*(_WORD *)(v13 + 8))
  {
    uint64_t v15 = *(void *)(a3 + 56);
    goto LABEL_21;
  }
  uint64_t v19 = v13 + 16;
  while (1)
  {
    if (v14)
    {
      free(v14);
      *(void *)(v19 - 16) = 0;
    }
    *(void *)(v19 - 8) = 0;
    if (v19 == v12) {
      break;
    }
    uint64_t v14 = *(_DWORD **)v19;
    int v20 = *(unsigned __int16 *)(v19 + 8);
    v19 += 16;
    if (v20)
    {
      uint64_t v16 = v19 - 16;
      goto LABEL_34;
    }
  }
  uint64_t v16 = v12;
LABEL_34:
  uint64_t v15 = *(void *)(a3 + 56);
  BOOL v17 = v13 == *(void *)(a3 + 48) && v12 == v15;
  if (v17 && v16 == v15) {
    goto LABEL_63;
  }
LABEL_50:
  while (*(void *)(a3 + 40))
  {
    if (*(_DWORD *)(a3 + 36) != v14[1] || *(_DWORD *)(a3 + 32) != *v14) {
      break;
    }
    v14 += 3;
    uint64_t v25 = *(void **)v16;
    if (v14 == (_DWORD *)(*(void *)v16 + 12 * *(unsigned __int16 *)(v16 + 8)))
    {
      uint64_t v26 = v16 + 16;
      do
      {
        if (v25)
        {
          free(v25);
          *(void *)(v26 - 16) = 0;
        }
        *(void *)(v26 - 8) = 0;
        if (v26 == v12)
        {
          uint64_t v16 = v12;
          goto LABEL_46;
        }
        uint64_t v14 = *(_DWORD **)v26;
        int v27 = *(unsigned __int16 *)(v26 + 8);
        v26 += 16;
        uint64_t v25 = v14;
      }
      while (!v27);
      uint64_t v16 = v26 - 16;
    }
LABEL_46:
    if (v16 == v15 && v17) {
      goto LABEL_63;
    }
  }
LABEL_64:
  uint64_t v28 = *(void *)(a3 + 56);
  if (v13 != *(void *)(a3 + 48) || v12 != v28 || v16 != v28)
  {
    do
    {
      unint64_t v34 = 0xFF51AFD7ED558CCDLL * (*(void *)v14 ^ (*(void *)v14 >> 33));
      unint64_t v35 = (0xC4CEB9FE1A85EC53 * (v34 ^ (v34 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v34 ^ (v34 >> 33))) >> 33);
      uint64_t v36 = *(void *)(a1 + 72) - 1;
      for (uint64_t j = 1; ; ++j)
      {
        unint64_t v38 = v35 & v36;
        if (((*(unsigned __int8 *)(*(void *)(a1 + 48) + 16 * ((v35 & v36) / 0x30) + (((v35 & v36) % 0x30) >> 3) + 10) >> (((v35 & v36) % 0x30) & 7)) & 1) == 0) {
          break;
        }
        unint64_t v35 = j + v38;
      }
      sub_AD0718((uint64_t *)(a1 + 48), v38, (uint64_t *)v14);
      v14 += 3;
      uint64_t v39 = *(void **)v16;
      if (v14 == (_DWORD *)(*(void *)v16 + 12 * *(unsigned __int16 *)(v16 + 8)))
      {
        uint64_t v40 = v16 + 16;
        while (1)
        {
          if (v39)
          {
            free(v39);
            *(void *)(v40 - 16) = 0;
          }
          *(void *)(v40 - 8) = 0;
          if (v40 == v12) {
            break;
          }
          uint64_t v14 = *(_DWORD **)v40;
          int v41 = *(unsigned __int16 *)(v40 + 8);
          v40 += 16;
          uint64_t v39 = v14;
          if (v41)
          {
            uint64_t v16 = v40 - 16;
            goto LABEL_90;
          }
        }
        uint64_t v16 = v12;
        if (v12 != v15 || !v17)
        {
LABEL_105:
          while (*(void *)(a3 + 40))
          {
            if (*(_DWORD *)(a3 + 36) != v14[1] || *(_DWORD *)(a3 + 32) != *v14) {
              break;
            }
            v14 += 3;
            uint64_t v46 = *(void **)v16;
            if (v14 == (_DWORD *)(*(void *)v16 + 12 * *(unsigned __int16 *)(v16 + 8)))
            {
              uint64_t v47 = v16 + 16;
              do
              {
                if (v46)
                {
                  free(v46);
                  *(void *)(v47 - 16) = 0;
                }
                *(void *)(v47 - 8) = 0;
                if (v47 == v12)
                {
                  uint64_t v16 = v12;
                  goto LABEL_101;
                }
                uint64_t v14 = *(_DWORD **)v47;
                int v48 = *(unsigned __int16 *)(v47 + 8);
                v47 += 16;
                uint64_t v46 = v14;
              }
              while (!v48);
              uint64_t v16 = v47 - 16;
            }
LABEL_101:
            if (v16 == v15 && v17) {
              goto LABEL_72;
            }
          }
          goto LABEL_73;
        }
      }
      else
      {
LABEL_90:
        if (v16 != v15 || !v17) {
          goto LABEL_105;
        }
      }
LABEL_72:
      uint64_t v16 = v12;
LABEL_73:
      uint64_t v31 = *(void *)(a3 + 56);
    }
    while (v13 != *(void *)(a3 + 48) || v12 != v31 || v16 != v31);
  }
  ++*(_DWORD *)(a1 + 28);
}

void sub_AD0554(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AD0568(uint64_t *a1, unint64_t a2)
{
  if (a2) {
    unint64_t v4 = (a2 - 1) / 0x30 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 4;
  if (v4 <= v6)
  {
    if (v4 < v6)
    {
      uint64_t v7 = *a1 + 16 * v4;
      if (v5 != v7)
      {
        uint64_t v8 = a1[1];
        do
        {
          float32x2_t v10 = *(void **)(v8 - 16);
          v8 -= 16;
          unint64_t v9 = v10;
          if (v10)
          {
            free(v9);
            *(void *)(v5 - 16) = 0;
          }
          uint64_t v5 = v8;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
    }
  }
  else
  {
    sub_ACFAE4(a1, v4 - v6, (uint64_t **)v23);
    if (v23[0]) {
      free(v23[0]);
    }
  }
  if (a1[3] > a2)
  {
    uint64_t v11 = a1[1];
    if (a2 % 0x30)
    {
      sub_AD08EC(v11 - 16, v11 - 16, a2 % 0x30, v11 - 16, 0x30u);
      uint64_t v11 = a1[1];
    }
    a1[4] = 0;
    uint64_t v12 = *a1;
    if (*a1 != v11)
    {
      unint64_t v13 = v11 - v12 - 16;
      if (v13 >= 0x10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = (v13 >> 4) + 1;
        uint64_t v15 = v12 + 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v19 = (unsigned __int16 *)(v12 + 24);
        uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          uint64_t v21 = *(v19 - 8);
          unsigned int v22 = *v19;
          v19 += 16;
          v16 += v21;
          v17 += v22;
          v20 -= 2;
        }
        while (v20);
        uint64_t v14 = v17 + v16;
        if (v18 == (v18 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = *a1;
      }
      do
      {
        v14 += *(unsigned __int16 *)(v15 + 8);
        v15 += 16;
      }
      while (v15 != v11);
LABEL_24:
      a1[4] = v14;
    }
  }
  a1[3] = a2;
}

void sub_AD0700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AD0718(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2 / 0x30;
  uint64_t v6 = *a1;
  uint64_t v7 = v6 + 16 * (a2 / 0x30);
  unint64_t v8 = a2 % 0x30;
  unint64_t v9 = (unsigned __int8 *)(v7 + 10);
  if ((unsigned __int16)(a2 % 0x30) < 9u)
  {
    __int16 v10 = 0;
    unint64_t v11 = a2 % 0x30;
    goto LABEL_11;
  }
  __int16 v10 = 0;
  unint64_t v11 = (unsigned __int16)(a2 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a2 % 0x30 - 9) >> 3)
  {
    __int16 v12 = 0;
    unint64_t v13 = v11 + 1;
    uint64_t v14 = (v11 + 1) & 0x3FFE;
    LOWORD(v11) = v8 - 8 * v14;
    uint64_t v15 = &v9[v14];
    uint64_t v16 = (unsigned __int8 *)(v6 + 16 * v5 + 11);
    uint64_t v17 = v14;
    do
    {
      uint64_t v18 = *(v16 - 1);
      int v19 = *v16;
      v16 += 2;
      v10 += byte_20EBFB6[v18];
      v12 += byte_20EBFB6[v19];
      v17 -= 2;
    }
    while (v17);
    v10 += v12;
    if (v13 == v14) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v11 = a2 % 0x30;
    uint64_t v15 = (unsigned __int8 *)(v7 + 10);
  }
  do
  {
    int v20 = *v15++;
    v10 += byte_20EBFB6[v20];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_10:
  v9 += ((unsigned __int16)(v8 - 9) >> 3) + 1;
LABEL_11:
  uint64_t v21 = *(unsigned __int16 *)(v7 + 8);
  unint64_t v22 = v7 + (v8 >> 3);
  int v24 = *(unsigned __int8 *)(v22 + 10);
  uint64_t v23 = (unsigned char *)(v22 + 10);
  unsigned __int16 v25 = v10 + byte_20EBFB6[~(-1 << v11) & (unint64_t)*v9];
  int v26 = 1 << (v8 & 7);
  if ((v26 & v24) == 0)
  {
    sub_ACF864(v7, (unsigned __int16)(v10 + byte_20EBFB6[~(-1 << v11) & (unint64_t)*v9]));
    ++*(_WORD *)(v7 + 8);
    *v23 |= v26;
  }
  uint64_t v27 = 12 * v25;
  uint64_t v28 = *(void *)v7 + v27;
  uint64_t v29 = *a3;
  *(_DWORD *)(v28 + 8) = *((_DWORD *)a3 + 2);
  *(void *)uint64_t v28 = v29;
  uint64_t result = *(void *)v7 + v27;
  a1[4] = a1[4] - v21 + *(unsigned __int16 *)(*a1 + 16 * v5 + 8);
  return result;
}

void sub_AD08EC(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, unsigned __int16 a5)
{
  unsigned __int16 v8 = a3;
  if (a2 != a4 || a3 != a5)
  {
    __int16 v9 = 0;
    uint64_t v10 = a1 + 10;
    unsigned __int16 v11 = a3 - 9;
    uint64_t v28 = (unsigned __int8 *)(a1 + 11);
    __int16 v29 = a3 - 9;
    while (1)
    {
      uint64_t v12 = a1 + (v8 >> 3);
      int v14 = *(unsigned __int8 *)(v12 + 10);
      unint64_t v13 = (unsigned char *)(v12 + 10);
      int v15 = 1 << (v8 & 7);
      if ((v15 & v14) == 0) {
        goto LABEL_19;
      }
      if (v8 < 9u)
      {
        __int16 v16 = 0;
        int v19 = (unsigned __int8 *)(a1 + 10);
        LOBYTE(v17) = v8;
        if (*(_WORD *)(a1 + 8) == 1) {
          goto LABEL_15;
        }
        goto LABEL_9;
      }
      if ((unsigned __int16)(v29 + v9) < 8u) {
        break;
      }
      __int16 v20 = 0;
      __int16 v21 = 0;
      uint64_t v22 = ((v11 >> 3) + 1) & 0x3FFE;
      unsigned __int16 v17 = v8 - 8 * ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE);
      uint64_t v18 = (unsigned __int8 *)(v10 + ((((unsigned __int16)(v29 + v9) >> 3) + 1) & 0x3FFE));
      int v24 = v28;
      do
      {
        uint64_t v25 = *(v24 - 1);
        int v26 = *v24;
        v24 += 2;
        v20 += byte_20EBFB6[v25];
        v21 += byte_20EBFB6[v26];
        v22 -= 2;
      }
      while (v22);
      __int16 v16 = v21 + v20;
      uint64_t v23 = ((unsigned __int16)(v29 + v9) >> 3) + 1;
      if ((v23 & 0x3FFE) != v23) {
        goto LABEL_13;
      }
LABEL_14:
      int v19 = (unsigned __int8 *)(v10 + ((unsigned __int16)(v8 - 9) >> 3) + 1);
      if (*(_WORD *)(a1 + 8) == 1)
      {
LABEL_15:
        if (*(void *)a1) {
          free(*(void **)a1);
        }
        *(void *)a1 = 0;
        goto LABEL_18;
      }
LABEL_9:
      sub_ACF740(a1, (unsigned __int16)(v16 + byte_20EBFB6[~(-1 << v17) & *v19]));
LABEL_18:
      --*(_WORD *)(a1 + 8);
      *v13 &= ~(_BYTE)v15;
LABEL_19:
      ++v8;
      ++v9;
      ++v11;
      if (a2 == a4 && v8 == a5) {
        return;
      }
    }
    __int16 v16 = 0;
    unsigned __int16 v17 = v8;
    uint64_t v18 = (unsigned __int8 *)(a1 + 10);
    do
    {
LABEL_13:
      int v27 = *v18++;
      v16 += byte_20EBFB6[v27];
      v17 -= 8;
    }
    while (v17 > 8u);
    goto LABEL_14;
  }
}

uint64_t sub_AD0AF4(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)long long __p = 0u;
  memset(v16, 0, sizeof(v16));
  char v22 = 0;
  LOBYTE(v21) = 0;
  sub_C50BD8((char *)__p, &v21);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  BYTE8(v18[8]) = 0;
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  long long v2 = (void **)(a1 + 136);
  uint64x2_t v3 = *(void **)(a1 + 136);
  *(_DWORD *)(a1 + 128) = v16[0];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 144);
    unint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 152, v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = *v2;
    }
    *(void *)(a1 + 144) = v3;
    operator delete(v5);
    void *v2 = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v16[1];
  *(void **)(a1 + 152) = v16[3];
  memset(&v16[1], 0, 24);
  uint64_t v6 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
  *(void *)(a1 + 176) = *(void *)&v18[0];
  BYTE7(v18[0]) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)((char *)&v18[4] + 8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)((char *)v18 + 8);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)((char *)&v18[2] + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)((char *)&v18[3] + 8);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)((char *)&v18[5] + 8);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)((char *)&v18[6] + 8);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)((char *)&v18[7] + 8);
  *(unsigned char *)(a1 + 312) = BYTE8(v18[8]);
  uint64_t v7 = *(void **)(a1 + 320);
  if (v7)
  {
    *(void *)(a1 + 328) = v7;
    operator delete(v7);
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    int v8 = SBYTE7(v18[0]);
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 320) = v19;
    *(void *)(a1 + 336) = v20;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
  }
  if (v16[1])
  {
    __int16 v9 = (char *)v16[2];
    uint64_t v10 = v16[1];
    if (v16[2] != v16[1])
    {
      do
      {
        v9 -= 296;
        sub_9F5E28((uint64_t)&v16[3], (uint64_t)v9);
      }
      while (v9 != v16[1]);
      uint64_t v10 = v16[1];
    }
    v16[2] = v16[1];
    operator delete(v10);
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 88);
  if (*(void *)(a1 + 384) | *(void *)(a1 + 424))
  {
    for (uint64_t i = *(void *)(a1 + 392); i != *(void *)(a1 + 400); i += 16)
    {
      if (*(void *)i)
      {
        free(*(void **)i);
        *(void *)uint64_t i = 0;
      }
      *(void *)(i + 8) = 0;
    }
    *(void *)(a1 + 424) = 0;
  }
  *(uint64x2_t *)(a1 + 344) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 360), (float)*(unint64_t *)(a1 + 416))));
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 440) = *(void *)(a1 + 432);
  *(_DWORD *)(a1 + 456) = 0;
  if (*(void *)(a1 + 504) | *(void *)(a1 + 544))
  {
    for (uint64_t j = *(void *)(a1 + 512); j != *(void *)(a1 + 520); j += 16)
    {
      if (*(void *)j)
      {
        free(*(void **)j);
        *(void *)uint64_t j = 0;
      }
      *(void *)(j + 8) = 0;
    }
    *(void *)(a1 + 544) = 0;
  }
  *(uint64x2_t *)(a1 + 464) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 480), (float)*(unint64_t *)(a1 + 536))));
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 560) = *(void *)(a1 + 552);
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2024) = 0;
  int v13 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 1352) = v13;
  *(unsigned char *)(a1 + 1356) = *(unsigned char *)(a1 + 28);
  char v14 = *(unsigned char *)(a1 + 72);
  *(unsigned char *)(a1 + 1357) = v14;
  *(_DWORD *)(a1 + 616) = v13;
  *(unsigned char *)(a1 + 634) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  *(unsigned char *)(a1 + 640) = v14;
  v16[0] = (void *)0x1FFFFFFFDLL;
  uint64_t result = sub_AD28B0(a1 + 344, (uint64_t *)v16);
  *(_DWORD *)(a1 + 584) = result;
  return result;
}

void sub_AD0E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  sub_20ADF74(v2 - 104, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_AD0E9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v18 = 0;
  long long v19 = 0;
  int v15 = 0;
  __int16 v16 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_ACDFB0((uint64_t)&v26, v2, a1 + 344, a1 + 464, (void *)(a1 + 592), &v18, &v15, &v24);
  uint64x2_t v3 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)v19 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v28 = v6;
  int v27 = *(_DWORD *)(a1 + 24);
  char v29 = *(unsigned char *)(a1 + 28);
  char v31 = *(unsigned char *)(a1 + 72);
  int v30 = *(_DWORD *)(a1 + 120);
  sub_AD3BC4((uint64_t)&v26, (_OWORD *)(a1 + 88));
  sub_C50C4C(a1 + 160, (uint64_t)&v32, (uint64_t)&__p);
  if (v23 < 0) {
    operator delete(__p);
  }
  unint64_t v7 = *(void *)(a1 + 2016);
  unint64_t v8 = *(void *)(a1 + 304);
  if (v7 > v8) {
    unint64_t v8 = *(void *)(a1 + 2016);
  }
  *(void *)(a1 + 2016) = v8 + v7;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v18);
    sub_188FC78(&v18, (uint64_t)"Primary SPA scanned ", 20);
    __int16 v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" stop patterns and obtained ", 28);
    uint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" journeys in ", 13);
    unsigned __int16 v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = sub_188FC78(v11, (uint64_t)" ms using ", 10);
    int v13 = (void *)sub_38EC58((uint64_t)v12, &v33);
    sub_188FC78(v13, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v15, 2u);
    if (v17 < 0) {
      operator delete(v15);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return sub_9FD504((uint64_t)&v26);
}

void sub_AD11E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9FD504((uint64_t)&a69);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9FD504((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_AD1284(uint64_t a1, int a2)
{
  int v85 = a2;
  *(_DWORD *)(a1 + 616) = a2;
  long long v3 = *(_OWORD *)(a1 + 104);
  v84[0] = *(_OWORD *)(a1 + 88);
  v84[1] = v3;
  LOBYTE(v84[0]) = 1;
  v83[0] = (uint64_t)v84;
  v83[1] = a1;
  v83[2] = (uint64_t)&v85;
  uint64_t v4 = *(_DWORD **)(a1 + 592);
  LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v4) | (2 * a2) | 1;
  int v5 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v4 + 2), (unsigned int *)&v79) + 4);
  unint64_t v7 = (_DWORD *)(a1 + 92);
  unsigned int v6 = *(_DWORD *)(a1 + 92);
  unsigned int v86 = v6;
  if (*(unsigned char *)(a1 + 49))
  {
    int v8 = 10 * (v5 - v6);
    if (v8 < *(_DWORD *)(a1 + 52)) {
      goto LABEL_16;
    }
    int v9 = sub_AD8C38(v83, v5);
    LODWORD(v75[0]) = v9;
    unsigned int v6 = v86;
    if (v9 != 0x7FFFFFFF && (int)v86 < v9)
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)&v79);
        sub_188FC78(&v79, (uint64_t)"[", 1);
        unsigned __int16 v11 = (void *)std::ostream::operator<<();
        uint64_t v12 = sub_188FC78(v11, (uint64_t)"] Tightening only improved the journey's departure (arrival) from ", 66);
        int v13 = (void *)sub_266E4((uint64_t)v12);
        char v14 = sub_188FC78(v13, (uint64_t)" to ", 4);
        sub_266E4((uint64_t)v14);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v78 < 0) {
          operator delete(__p[0]);
        }
        if (v82 < 0) {
          operator delete(v81);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned int v6 = v75[0];
      unsigned int v86 = v75[0];
    }
    if (*(unsigned char *)(a1 + 49))
    {
LABEL_16:
      if (v8 >= *(_DWORD *)(a1 + 52))
      {
        sub_725D0((uint64_t)__p);
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v79);
          sub_188FC78(&v79, (uint64_t)"[", 1);
          int v15 = (void *)std::ostream::operator<<();
          sub_188FC78(v15, (uint64_t)"] Journey duration (", 20);
          __int16 v16 = (void *)std::ostream::operator<<();
          sub_188FC78(v16, (uint64_t)" sec) exceeds tightening threshold; performing tightening by time shift", 71);
          std::stringbuf::str();
          sub_7246C((uint64_t *)v75, 2u);
          if (v76 < 0) {
            operator delete(v75[0]);
          }
          if (v82 < 0) {
            operator delete(v81);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        int v17 = *(_DWORD *)(a1 + 60);
        if (v17 > *(_DWORD *)(a1 + 56))
        {
LABEL_24:
          int v18 = v5;
LABEL_25:
          *(double *)(a1 + 208) = sub_72688((uint64_t)__p);
          unsigned int v6 = v86;
          int v5 = v18;
          unint64_t v7 = (_DWORD *)(a1 + 92);
          goto LABEL_26;
        }
        while (1)
        {
          *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
          if (sub_723EC(2u))
          {
            sub_6BAC((uint64_t)&v79);
            sub_188FC78(&v79, (uint64_t)"[", 1);
            unint64_t v38 = (void *)std::ostream::operator<<();
            sub_188FC78(v38, (uint64_t)"] Examining time shift of ", 26);
            int v39 = v17 / 10;
            int v40 = v17 % 10;
            int v41 = (void *)std::ostream::operator<<();
            sub_188FC78(v41, (uint64_t)" sec (exponential search)", 25);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v75, 2u);
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            uint64_t v79 = v74;
            *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
            if (v82 < 0) {
              operator delete(v81);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          else
          {
            int v39 = v17 / 10;
            int v40 = v17 % 10;
          }
          if (v17 < 0) {
            char v42 = -5;
          }
          else {
            char v42 = 5;
          }
          unsigned int v43 = v39 + (((103 * (char)(v42 + v40)) >> 15) & 1) + ((103 * (char)(v42 + v40)) >> 10);
          int v44 = v5;
          int v18 = v43 + v5;
          unsigned int v45 = sub_AD8C38(v83, v43 + v5);
          if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v45 - v86))) >= (double)(int)fabs((double)(int)(10 * v43)))
          {
            unsigned int v47 = v45;
            if (sub_723EC(2u))
            {
              sub_6BAC((uint64_t)&v79);
              sub_188FC78(&v79, (uint64_t)"[", 1);
              int v48 = (void *)std::ostream::operator<<();
              sub_188FC78(v48, (uint64_t)"] Journey duration improved from ", 33);
              uint64_t v49 = (void *)std::ostream::operator<<();
              sub_188FC78(v49, (uint64_t)" to ", 4);
              uint64_t v50 = (void *)std::ostream::operator<<();
              sub_188FC78(v50, (uint64_t)" sec for time shift of ", 23);
              long long v51 = (void *)std::ostream::operator<<();
              sub_188FC78(v51, (uint64_t)" sec", 4);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v75, 2u);
              if (v76 < 0) {
                operator delete(v75[0]);
              }
              uint64_t v79 = v74;
              *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
              if (v82 < 0) {
                operator delete(v81);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            unsigned int v86 = v47;
            if (!v43) {
              goto LABEL_25;
            }
            double v52 = (double)v17 * 0.5;
            if (v52 >= 0.0)
            {
              if (v52 < 4.50359963e15)
              {
                uint64_t v53 = (uint64_t)(v52 + v52) + 1;
                goto LABEL_83;
              }
            }
            else if (v52 > -4.50359963e15)
            {
              uint64_t v53 = (uint64_t)(v52 + v52);
              if (v53 >= 1) {
                --v53;
              }
LABEL_83:
              double v52 = (double)(v53 >> 1);
            }
            double v54 = (double)v17 * 0.25;
            if (v54 >= 0.0)
            {
              if (v54 < 4.50359963e15)
              {
                uint64_t v55 = (uint64_t)(v54 + v54) + 1;
                goto LABEL_91;
              }
            }
            else if (v54 > -4.50359963e15)
            {
              uint64_t v55 = (uint64_t)(v54 + v54);
              if (v55 >= 1) {
                --v55;
              }
LABEL_91:
              double v54 = (double)(v55 >> 1);
            }
            int v56 = (int)v54;
            if (*(_DWORD *)(a1 + 60) > (int)v54) {
              goto LABEL_25;
            }
            int v57 = (int)v52;
            while (2)
            {
              *(double *)(a1 + 272) = *(double *)(a1 + 272) + 1.0;
              int v59 = v56 + v57;
              if (sub_723EC(2u))
              {
                sub_6BAC((uint64_t)&v79);
                sub_188FC78(&v79, (uint64_t)"[", 1);
                unsigned int v60 = (void *)std::ostream::operator<<();
                sub_188FC78(v60, (uint64_t)"] Examining time shift of ", 26);
                int v61 = v59 / 10;
                int v62 = v59 % 10;
                uint64_t v63 = (void *)std::ostream::operator<<();
                sub_188FC78(v63, (uint64_t)" sec (binary refinement search)", 31);
                std::stringbuf::str();
                sub_7246C((uint64_t *)v75, 2u);
                if (v76 < 0) {
                  operator delete(v75[0]);
                }
                uint64_t v79 = v74;
                *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                if (v82 < 0) {
                  operator delete(v81);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              else
              {
                int v61 = v59 / 10;
                int v62 = v59 % 10;
              }
              if (v59 < 0) {
                char v64 = -5;
              }
              else {
                char v64 = 5;
              }
              unsigned int v65 = v61 + (((103 * (char)(v64 + v62)) >> 15) & 1) + ((103 * (char)(v64 + v62)) >> 10);
              unsigned int v66 = sub_AD8C38(v83, v65 + v44);
              if (*(double *)(a1 + 64) * (double)(int)fabs((double)(int)(10 * (v86 - v66))) >= (double)(int)fabs((double)(int)(10 * (v18 - (v65 + v44)))))
              {
                v57 += v56;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0) {
                  goto LABEL_114;
                }
              }
              else
              {
                unsigned int v67 = v66;
                if (sub_723EC(2u))
                {
                  sub_6BAC((uint64_t)&v79);
                  sub_188FC78(&v79, (uint64_t)"[", 1);
                  unint64_t v68 = (void *)std::ostream::operator<<();
                  sub_188FC78(v68, (uint64_t)"] Journey duration improved from ", 33);
                  uint64_t v69 = (void *)std::ostream::operator<<();
                  sub_188FC78(v69, (uint64_t)" to ", 4);
                  unint64_t v70 = (void *)std::ostream::operator<<();
                  sub_188FC78(v70, (uint64_t)" sec for time shift of ", 23);
                  BOOL v71 = (void *)std::ostream::operator<<();
                  sub_188FC78(v71, (uint64_t)" sec", 4);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)v75, 2u);
                  if (v76 < 0) {
                    operator delete(v75[0]);
                  }
                  uint64_t v79 = v74;
                  *(uint64_t *)((char *)&v79 + *(void *)(v74 - 24)) = v73;
                  if (v82 < 0) {
                    operator delete(v81);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                unsigned int v86 = v67;
                int v18 = v65 + v44;
                double v58 = (double)v56 * 0.5;
                if (v58 >= 0.0)
                {
LABEL_114:
                  if (v58 < 4.50359963e15)
                  {
                    uint64_t v72 = (uint64_t)(v58 + v58) + 1;
                    goto LABEL_94;
                  }
                  goto LABEL_95;
                }
              }
              if (v58 > -4.50359963e15)
              {
                uint64_t v72 = (uint64_t)(v58 + v58);
                if (v72 >= 1) {
                  --v72;
                }
LABEL_94:
                double v58 = (double)(v72 >> 1);
              }
LABEL_95:
              int v56 = (int)v58;
              if (*(_DWORD *)(a1 + 60) > (int)v58) {
                goto LABEL_25;
              }
              continue;
            }
          }
          double v37 = (double)v17 + (double)v17;
          if (v37 >= 0.0)
          {
            if (v37 >= 4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37) + 1;
          }
          else
          {
            if (v37 <= -4.50359963e15) {
              goto LABEL_50;
            }
            uint64_t v46 = (uint64_t)(v37 + v37);
            if (v46 >= 1) {
              --v46;
            }
          }
          double v37 = (double)(v46 >> 1);
LABEL_50:
          int v17 = (int)v37;
          if (*(_DWORD *)(a1 + 56) < (int)v37) {
            goto LABEL_24;
          }
        }
      }
    }
  }
LABEL_26:
  if (v6 != *v7)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)&v79);
      sub_188FC78(&v79, (uint64_t)"[", 1);
      long long v19 = (void *)std::ostream::operator<<();
      uint64_t v20 = sub_188FC78(v19, (uint64_t)"] Shifting ", 11);
      char v21 = sub_188FC78(v20, (uint64_t)"departure", 9);
      char v22 = sub_188FC78(v21, (uint64_t)" time from ", 11);
      char v23 = (void *)sub_266E4((uint64_t)v22);
      uint64_t v24 = sub_188FC78(v23, (uint64_t)" to ", 4);
      sub_266E4((uint64_t)v24);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 2u);
      if (v78 < 0) {
        operator delete(__p[0]);
      }
      if (v82 < 0) {
        operator delete(v81);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(void *)(a1 + 280) = 0x3FF0000000000000;
  }
  int v25 = v85;
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_41;
  }
  int v26 = v85 + 1;
  int v27 = *(_DWORD *)(a1 + 24);
  if (v85 + 1 <= (v27 + 1)) {
    int v26 = v27 + 1;
  }
  if (v85 + 1 < (v27 + 1))
  {
    int v28 = v26 - 1;
    int v29 = 2 * v85 + 3;
    int v30 = v85;
    while (1)
    {
      char v31 = *(_DWORD **)(a1 + 592);
      LODWORD(v79) = (*(_DWORD *)(a1 + 584) << *v31) | v29;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v31 + 2), (unsigned int *)&v79) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v30;
      v29 += 2;
      if (v28 == v30) {
        goto LABEL_41;
      }
    }
  }
  else
  {
LABEL_41:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + v25)) {
      int v30 = *(_DWORD *)(a1 + 124) + v25;
    }
    else {
      int v30 = *(_DWORD *)(a1 + 24);
    }
  }
  *(_DWORD *)(a1 + 616) = v30;
  int v32 = *(_DWORD *)(a1 + 120);
  int v33 = v32 / 10;
  int v34 = v32 % 10;
  if (v32 < 0) {
    char v35 = -5;
  }
  else {
    char v35 = 5;
  }
  sub_AD8C38(v83, v33 + v5 + (((103 * (char)(v35 + v34)) >> 15) & 1) + ((103 * (char)(v35 + v34)) >> 10));
  return v86;
}

void sub_AD2368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_AD24DC(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_8;
  }
  int v6 = a2 + 1;
  int v7 = *(_DWORD *)(a1 + 24);
  if (a2 + 1 <= (v7 + 1)) {
    int v6 = v7 + 1;
  }
  if (a2 + 1 < (v7 + 1))
  {
    int v8 = v6 - 1;
    int v9 = 2 * a2 + 3;
    int v10 = a2;
    while (1)
    {
      unsigned __int16 v11 = *(_DWORD **)(a1 + 592);
      LODWORD(v26[0]) = (*(_DWORD *)(a1 + 584) << *v11) | v9;
      if (*(_DWORD *)(sub_AF1DB0((uint64_t)(v11 + 2), (unsigned int *)v26) + 4) != 0x7FFFFFFF) {
        break;
      }
      ++v10;
      v9 += 2;
      if (v8 == v10) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 24) >= (*(_DWORD *)(a1 + 124) + a2)) {
      int v10 = *(_DWORD *)(a1 + 124) + a2;
    }
    else {
      int v10 = *(_DWORD *)(a1 + 24);
    }
  }
  long long v12 = *(_OWORD *)(a1 + 104);
  v38[0] = *(_OWORD *)(a1 + 88);
  v38[1] = v12;
  DWORD1(v38[0]) = a3;
  *(_DWORD *)(a1 + 1352) = v10;
  sub_ADD16C(a1 + 1336, v38);
  sub_ADD414(a1 + 1336, (uint64_t)v30);
  sub_C50C4C(a1 + 160, a1 + 1864, (uint64_t)&__p);
  if (v29 < 0) {
    operator delete(__p);
  }
  unint64_t v13 = *(void *)(a1 + 2008);
  *(void *)(a1 + 304) -= v13;
  unint64_t v14 = *(void *)(a1 + 2032);
  if (v14 <= v13) {
    unint64_t v14 = v13;
  }
  *(void *)(a1 + 2032) = v14;
  sub_A4D564((uint64_t)v26, (uint64_t)v31, (uint64_t)v32, a1 + 136);
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v26);
    sub_188FC78(v26, (uint64_t)"[", 1);
    int v15 = (void *)std::ostream::operator<<();
    sub_188FC78(v15, (uint64_t)"] McSPA scanned ", 16);
    __int16 v16 = (void *)std::ostream::operator<<();
    sub_188FC78(v16, (uint64_t)" stop patterns and obtained ", 28);
    int v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" journeys in ", 13);
    int v18 = (void *)std::ostream::operator<<();
    long long v19 = sub_188FC78(v18, (uint64_t)" ms using ", 10);
    uint64_t v20 = (void *)sub_38EC58((uint64_t)v19, (unint64_t *)(a1 + 2008));
    sub_188FC78(v20, (uint64_t)" of memory", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v24, 2u);
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v36)
  {
    double v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  char v21 = (char *)v31;
  if (v31)
  {
    char v22 = v32;
    char v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v22 -= 296;
        sub_9F5E28((uint64_t)&v33, (uint64_t)v22);
      }
      while (v22 != v21);
      char v23 = v31;
    }
    int v32 = v21;
    operator delete(v23);
  }
}

void sub_AD2834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_9F53E0((uint64_t)&a67);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_9F53E0((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_AD28B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_AD2A4C(a1, a2);
  uint64_t result = *(unsigned int *)(v4 + 8);
  if (result == -1)
  {
    int v6 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)(a1 + 112) = v6 + 1;
    *(_DWORD *)(v4 + 8) = v6;
    int v8 = *(uint64_t **)(a1 + 96);
    unint64_t v7 = *(void *)(a1 + 104);
    if ((unint64_t)v8 >= v7)
    {
      int v10 = *(char **)(a1 + 88);
      uint64_t v11 = ((char *)v8 - v10) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v13 = v7 - (void)v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          sub_188D718();
        }
        int v15 = (char *)operator new(8 * v14);
      }
      else
      {
        int v15 = 0;
      }
      __int16 v16 = (uint64_t *)&v15[8 * v11];
      *__int16 v16 = *a2;
      int v9 = v16 + 1;
      if (v8 != (uint64_t *)v10)
      {
        unint64_t v17 = (char *)v8 - v10 - 8;
        if (v17 < 0x58) {
          goto LABEL_30;
        }
        if ((unint64_t)(v10 - v15) < 0x20) {
          goto LABEL_30;
        }
        uint64_t v18 = (v17 >> 3) + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v20 = &v8[v19 / 0xFFFFFFFFFFFFFFF8];
        __int16 v16 = (uint64_t *)((char *)v16 - v19);
        char v21 = &v15[8 * v11 - 16];
        char v22 = v8 - 2;
        uint64_t v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
          *(_OWORD *)char v21 = v24;
          v21 -= 32;
          v22 -= 4;
          v23 -= 4;
        }
        while (v23);
        int v8 = v20;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            uint64_t v25 = *--v8;
            *--__int16 v16 = v25;
          }
          while (v8 != (uint64_t *)v10);
        }
        int v8 = *(uint64_t **)(a1 + 88);
      }
      *(void *)(a1 + 88) = v16;
      *(void *)(a1 + 96) = v9;
      *(void *)(a1 + 104) = &v15[8 * v14];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      uint64_t *v8 = *a2;
      int v9 = v8 + 1;
    }
    *(void *)(a1 + 96) = v9;
    return *(unsigned int *)(v4 + 8);
  }
  return result;
}

uint64_t sub_AD2A4C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = sub_AD2C64(a1, a2);
  if (v4 == -1)
  {
    unint64_t v25 = v5;
    if (sub_AD2F40(a1, 1))
    {
      uint64_t v34 = *a2;
      int v35 = -1;
      sub_AD3264(a1, &v34, (uint64_t)v36);
    }
    else
    {
      uint64_t v34 = *a2;
      int v35 = -1;
      sub_AD3484(a1, &v34, v25, v36);
    }
    return v36[4];
  }
  uint64_t v7 = *(void *)(a1 + 48);
  int v6 = *(uint64_t **)(a1 + 56);
  unint64_t v8 = v4 / 0x30;
  int v9 = (uint64_t *)(v7 + 16 * (v4 / 0x30));
  uint64_t v11 = (unsigned __int8 *)v9 + 10;
  uint64_t v10 = *v9;
  int v12 = v4 % 0x30;
  if ((unsigned __int16)(v4 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_16;
  }
  unsigned __int16 v13 = v12 - 9;
  unsigned __int16 v14 = v4 % 0x30 - 9;
  __int16 v15 = 0;
  uint64_t v16 = v14 >> 3;
  if (v16)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v12) = v12 - 8 * v19;
    uint64_t v20 = &v11[v19];
    char v21 = (unsigned __int8 *)(v7 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBFB6[v23];
      v17 += byte_20EBFB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = (unsigned __int8 *)v9 + 10;
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EBFB6[v27];
    LOWORD(v12) = v12 - 8;
  }
  while ((unsigned __int16)v12 > 8u);
LABEL_15:
  v11 += (v13 >> 3) + 1;
LABEL_16:
  unsigned __int16 v28 = v15 + byte_20EBFB6[~(-1 << v12) & (unint64_t)*v11];
  int v29 = *((unsigned __int16 *)v9 + 4);
  int v30 = v9 + 2;
  if (v29 != v28 || v30 == v6) {
    return v10 + 12 * v28;
  }
  uint64_t v32 = v7 + 16 * v8 + 32;
  do
  {
    if (*(_WORD *)(v32 - 8)) {
      BOOL v33 = 1;
    }
    else {
      BOOL v33 = v32 == (void)v6;
    }
    v32 += 16;
  }
  while (!v33);
  return *(void *)(v32 - 32);
}

uint64_t sub_AD2C64(uint64_t a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0xFF51AFD7ED558CCDLL * (*a2 ^ (*a2 >> 33));
  unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v3 ^ (v3 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v3 ^ (v3 >> 33))) >> 33);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = v5 + 11;
  uint64_t v7 = -1;
  while (1)
  {
    unint64_t v8 = v4 & (*(void *)(a1 + 72) - 1);
    unint64_t v9 = v8 / 0x30;
    unint64_t v10 = v8 % 0x30;
    if (((*(unsigned __int8 *)(v5 + 16 * (v8 / 0x30) + (v10 >> 3) + 10) >> (v10 & 7)) & 1) == 0) {
      return -1;
    }
    uint64_t v11 = *(void *)(v5 + 16 * v9);
    if (!*(void *)(a1 + 40)) {
      goto LABEL_21;
    }
    int v12 = (unsigned __int8 *)(v5 + 16 * v9 + 10);
    if ((unsigned __int16)(v8 % 0x30) < 9u)
    {
      __int16 v13 = 0;
      LOBYTE(v14) = v8 % 0x30;
      goto LABEL_17;
    }
    __int16 v13 = 0;
    uint64_t v14 = (unsigned __int16)(v8 % 0x30 - 9) >> 3;
    if ((unsigned __int16)(v8 % 0x30 - 9) >> 3)
    {
      __int16 v15 = 0;
      uint64_t v16 = v14 + 1;
      uint64_t v17 = (v14 + 1) & 0x3FFE;
      LOWORD(v14) = v10 - 8 * v17;
      uint64_t v18 = &v12[v17];
      uint64_t v19 = (unsigned __int8 *)(v6 + 16 * v9);
      uint64_t v20 = v17;
      do
      {
        uint64_t v21 = *(v19 - 1);
        unsigned int v22 = *v19;
        v19 += 2;
        v13 += byte_20EBFB6[v21];
        v15 += byte_20EBFB6[v22];
        v20 -= 2;
      }
      while (v20);
      v13 += v15;
      if (v16 == v17) {
        goto LABEL_16;
      }
    }
    else
    {
      LODWORD(v14) = v8 % 0x30;
      uint64_t v18 = (unsigned __int8 *)(v5 + 16 * v9 + 10);
    }
    do
    {
      unsigned int v23 = *v18++;
      v13 += byte_20EBFB6[v23];
      LOWORD(v14) = v14 - 8;
    }
    while ((unsigned __int16)v14 > 8u);
LABEL_16:
    v12 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_17:
    int v24 = (_DWORD *)(v11
                   + 12 * (unsigned __int16)(v13 + byte_20EBFB6[~(-1 << v14) & (unint64_t)*v12]));
    if (*(_DWORD *)(a1 + 36) == v24[1] && *(_DWORD *)(a1 + 32) == *v24)
    {
      if (v7 == -1) {
        uint64_t v7 = v8;
      }
      goto LABEL_4;
    }
LABEL_21:
    int v26 = (unsigned __int8 *)(v5 + 16 * v9 + 10);
    if ((unsigned __int16)(v8 % 0x30) < 9u)
    {
      __int16 v38 = 0;
      goto LABEL_31;
    }
    uint64_t v27 = (unsigned __int16)(v8 % 0x30 - 9) >> 3;
    if ((unsigned __int16)(v8 % 0x30 - 9) >> 3)
    {
      __int16 v28 = 0;
      __int16 v29 = 0;
      uint64_t v30 = v27 + 1;
      uint64_t v31 = (v27 + 1) & 0x3FFE;
      unsigned __int16 v32 = v10 - 8 * v31;
      BOOL v33 = &v26[v31];
      uint64_t v34 = (unsigned __int8 *)(v6 + 16 * v9);
      uint64_t v35 = v31;
      do
      {
        uint64_t v36 = *(v34 - 1);
        unsigned int v37 = *v34;
        v34 += 2;
        v28 += byte_20EBFB6[v36];
        v29 += byte_20EBFB6[v37];
        v35 -= 2;
      }
      while (v35);
      __int16 v38 = v29 + v28;
      if (v30 == v31) {
        goto LABEL_30;
      }
    }
    else
    {
      __int16 v38 = 0;
      unsigned __int16 v32 = v8 % 0x30;
      BOOL v33 = v26;
    }
    do
    {
      unsigned int v39 = *v33++;
      v38 += byte_20EBFB6[v39];
      v32 -= 8;
    }
    while (v32 > 8u);
LABEL_30:
    v26 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
    LOBYTE(v10) = v32;
LABEL_31:
    if (*a2 == *(void *)(v11
                          + 12
                          * (unsigned __int16)(v38 + byte_20EBFB6[~(-1 << v10) & (unint64_t)*v26])))
      return v8;
LABEL_4:
    unint64_t v4 = ++v2 + v8;
  }
}

uint64_t sub_AD2F40(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_AD37D8(a1);
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 80);
    if (v5 >= ~a2) {
      goto LABEL_32;
    }
  }
  unint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    if (v7 >= vcvts_n_u32_f32(v8, 2uLL))
    {
      unint64_t v9 = 4;
      while ((v9 & 0x8000000000000000) == 0)
      {
        v9 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v9)) {
          goto LABEL_12;
        }
      }
LABEL_32:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
    unint64_t v9 = 4;
LABEL_12:
    if (v9 > v6)
    {
      unint64_t v10 = v5 - *(void *)(a1 + 40) + a2;
      unint64_t v11 = 4;
      if (v6 > 4) {
        goto LABEL_15;
      }
LABEL_14:
      if (v10 >= (unint64_t)(float)(v8 * (float)v11))
      {
LABEL_15:
        while ((v11 & 0x8000000000000000) == 0)
        {
          v11 *= 2;
          if (v11 >= v6) {
            goto LABEL_14;
          }
        }
        goto LABEL_32;
      }
      if (v11 < v9
        && v11 <= 0x7FFFFFFFFFFFFFFELL
        && v10 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v11)))
      {
        v11 *= 2;
      }
      long long v28 = *(_OWORD *)(a1 + 16);
      *(void *)__int16 v29 = *(void *)(a1 + 32);
      memset(&v29[8], 0, 32);
      long long v30 = 0u;
      uint64x2_t v27 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v28, 0)));
      BYTE8(v28) = 0;
      sub_AD00E0((uint64_t)&v27, 0, a1, v11);
      uint64x2_t v13 = *(uint64x2_t *)a1;
      long long v12 = *(_OWORD *)(a1 + 16);
      long long v14 = v28;
      *(uint64x2_t *)a1 = v27;
      *(_OWORD *)(a1 + 16) = v14;
      uint64x2_t v27 = v13;
      long long v28 = v12;
      long long v15 = *(_OWORD *)v29;
      long long v16 = *(_OWORD *)&v29[16];
      *(_OWORD *)__int16 v29 = *(_OWORD *)(a1 + 32);
      *(void *)&v29[16] = *(void *)(a1 + 48);
      uint64_t v17 = *(char **)&v29[16];
      uint64_t v18 = *(void *)&v29[32];
      long long v19 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 32) = v15;
      *(_OWORD *)(a1 + 48) = v16;
      *(void *)(a1 + 64) = v18;
      *(_OWORD *)&v29[24] = v19;
      *(void *)&long long v15 = v30;
      long long v20 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 72) = v30;
      long long v30 = v20;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v15)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v27 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v28, (float)(unint64_t)v20)));
      BYTE8(v28) = 0;
      if (v17)
      {
        uint64_t v21 = (char *)v19;
        unsigned int v22 = v17;
        if ((char *)v19 != v17)
        {
          unsigned int v23 = (char *)v19;
          do
          {
            unint64_t v25 = (void *)*((void *)v23 - 2);
            v23 -= 16;
            int v24 = v25;
            if (v25)
            {
              free(v24);
              *((void *)v21 - 2) = 0;
            }
            uint64_t v21 = v23;
          }
          while (v23 != v17);
          unsigned int v22 = *(char **)&v29[16];
        }
        *(void *)&v29[24] = v17;
        free(v22);
      }
      return 1;
    }
  }
  return result;
}

void sub_AD3204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_AD3228(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AD323C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_AD3250(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_AD3264@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = sub_AD2C64(a1, a2);
  if (v6 == -1)
  {
    sub_AD3484(a1, a2, v7, &v33);
    long long v25 = v36;
    *(_OWORD *)(a3 + 32) = v35;
    *(_OWORD *)(a3 + 48) = v25;
    *(void *)(a3 + 64) = v37;
    __n128 result = v34;
    *(_OWORD *)a3 = v33;
    *(__n128 *)(a3 + 16) = result;
    *(unsigned char *)(a3 + 72) = 1;
    return result;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  float v8 = *(uint64_t **)(a1 + 56);
  unint64_t v10 = v6 / 0x30;
  unint64_t v11 = v9 + 16 * (v6 / 0x30);
  long long v12 = (unsigned __int8 *)(v11 + 10);
  int v13 = v6 % 0x30;
  if ((unsigned __int16)(v6 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    goto LABEL_13;
  }
  unsigned __int16 v14 = v13 - 9;
  __int16 v15 = 0;
  uint64_t v16 = (unsigned __int16)(v6 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v6 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    uint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v13) = v13 - 8 * v19;
    long long v20 = &v12[v19];
    uint64_t v21 = (unsigned __int8 *)(v9 + 16 * v10 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBFB6[v23];
      v17 += byte_20EBFB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v20 = (unsigned __int8 *)(v11 + 10);
  }
  do
  {
    int v27 = *v20++;
    v15 += byte_20EBFB6[v27];
    LOWORD(v13) = v13 - 8;
  }
  while ((unsigned __int16)v13 > 8u);
LABEL_12:
  v12 += (v14 >> 3) + 1;
LABEL_13:
  unsigned __int16 v28 = v15 + byte_20EBFB6[~(-1 << v13) & (unint64_t)*v12];
  uint64_t v29 = *(void *)v11 + 12 * v28;
  if (*(unsigned __int16 *)(v11 + 8) == v28)
  {
    unint64_t v30 = v11 + 16;
    unint64_t v11 = *(void *)(a1 + 56);
    if ((uint64_t *)v30 != v8)
    {
      while (1)
      {
        uint64_t v31 = (uint64_t *)v30;
        if (*(_WORD *)(v30 + 8)) {
          break;
        }
        v30 += 16;
        if (v31 + 2 == v8)
        {
          unint64_t v11 = *(void *)(a1 + 56);
          goto LABEL_19;
        }
      }
      unint64_t v11 = v30;
LABEL_19:
      uint64_t v29 = *v31;
    }
  }
  *(void *)&long long v33 = a1;
  *((void *)&v33 + 1) = v9;
  v34.n128_u64[0] = (unint64_t)v8;
  v34.n128_u64[1] = v11;
  *(void *)&long long v35 = v29;
  *((void *)&v35 + 1) = v9;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v8;
  uint64_t v37 = 0;
  sub_AD39BC(&v33);
  long long v32 = v36;
  *(_OWORD *)(a3 + 32) = v35;
  *(_OWORD *)(a3 + 48) = v32;
  *(void *)(a3 + 64) = v37;
  __n128 result = v34;
  *(_OWORD *)a3 = v33;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

void *sub_AD3484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 80) - v5) >= 0x1555555555555555)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  if (!v5)
  {
    unint64_t v8 = a3 / 0x30;
    LODWORD(v10) = a3 % 0x30;
    goto LABEL_21;
  }
  unint64_t v8 = a3 / 0x30;
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = a3 % 0x30;
  unint64_t v11 = (uint64_t *)(v9 + 16 * (a3 / 0x30));
  if (((*((unsigned __int8 *)v11 + ((a3 % 0x30) >> 3) + 10) >> ((a3 % 0x30) & 7)) & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v14 = *v11;
  int v13 = (unsigned __int8 *)v11 + 10;
  uint64_t v12 = v14;
  if ((unsigned __int16)(a3 % 0x30) < 9u)
  {
    __int16 v15 = 0;
    unint64_t v16 = a3 % 0x30;
    goto LABEL_15;
  }
  __int16 v15 = 0;
  unint64_t v16 = (unsigned __int16)(a3 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(a3 % 0x30 - 9) >> 3)
  {
    __int16 v17 = 0;
    unint64_t v18 = v16 + 1;
    uint64_t v19 = (v16 + 1) & 0x3FFE;
    LOWORD(v16) = v10 - 8 * v19;
    long long v20 = &v13[v19];
    uint64_t v21 = (unsigned __int8 *)(v9 + 16 * v8 + 11);
    uint64_t v22 = v19;
    do
    {
      uint64_t v23 = *(v21 - 1);
      int v24 = *v21;
      v21 += 2;
      v15 += byte_20EBFB6[v23];
      v17 += byte_20EBFB6[v24];
      v22 -= 2;
    }
    while (v22);
    v15 += v17;
    if (v18 == v19) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v16 = a3 % 0x30;
    long long v20 = v13;
  }
  do
  {
    int v25 = *v20++;
    v15 += byte_20EBFB6[v25];
    LOWORD(v16) = v16 - 8;
  }
  while ((unsigned __int16)v16 > 8u);
LABEL_14:
  v13 += ((unsigned __int16)(v10 - 9) >> 3) + 1;
LABEL_15:
  int v26 = (_DWORD *)(v12
                 + 12 * (unsigned __int16)(v15 + byte_20EBFB6[~(-1 << v16) & (unint64_t)*v13]));
  if (*(_DWORD *)(a1 + 36) == v26[1] && *(_DWORD *)(a1 + 32) == *v26) {
    *(void *)(a1 + 40) = v5 - 1;
  }
LABEL_21:
  sub_AD0718((uint64_t *)(a1 + 48), a3, a2);
  uint64_t v29 = *(void *)(a1 + 48);
  unsigned __int16 v28 = *(uint64_t **)(a1 + 56);
  uint64_t v30 = v29 + 16 * v8;
  uint64_t v31 = (unsigned __int8 *)(v30 + 10);
  if ((unsigned __int16)v10 >= 9u)
  {
    uint64_t v32 = ((unsigned __int16)(v10 - 9) >> 3) + 1;
    if ((unsigned __int16)(v10 - 9) >= 8u)
    {
      __int16 v35 = 0;
      __int16 v36 = 0;
      LOWORD(v10) = v10 - 8 * ((((unsigned __int16)(v10 - 9) >> 3) + 1) & 0x3FFE);
      __n128 v34 = &v31[v32 & 0x3FFE];
      uint64_t v37 = (unsigned __int8 *)(v29 + 16 * v8 + 11);
      uint64_t v38 = v32 & 0x3FFE;
      do
      {
        uint64_t v39 = *(v37 - 1);
        int v40 = *v37;
        v37 += 2;
        v35 += byte_20EBFB6[v39];
        v36 += byte_20EBFB6[v40];
        v38 -= 2;
      }
      while (v38);
      __int16 v33 = v36 + v35;
      if ((v32 & 0x3FFE) == v32) {
        goto LABEL_29;
      }
    }
    else
    {
      __int16 v33 = 0;
      __n128 v34 = (unsigned __int8 *)(v30 + 10);
    }
    do
    {
      int v41 = *v34++;
      v33 += byte_20EBFB6[v41];
      LOWORD(v10) = v10 - 8;
    }
    while ((unsigned __int16)v10 > 8u);
LABEL_29:
    v31 += v32;
    goto LABEL_30;
  }
  __int16 v33 = 0;
LABEL_30:
  unsigned __int16 v42 = v33 + byte_20EBFB6[~(-1 << v10) & (unint64_t)*v31];
  uint64_t v43 = *(void *)v30 + 12 * v42;
  if (*(unsigned __int16 *)(v30 + 8) == v42)
  {
    uint64_t v44 = v30 + 16;
    uint64_t v30 = *(void *)(a1 + 56);
    if ((uint64_t *)v44 != v28)
    {
      while (1)
      {
        unsigned int v45 = (uint64_t *)v44;
        if (*(_WORD *)(v44 + 8)) {
          break;
        }
        v44 += 16;
        if (v45 + 2 == v28)
        {
          uint64_t v30 = *(void *)(a1 + 56);
          goto LABEL_36;
        }
      }
      uint64_t v30 = v44;
LABEL_36:
      uint64_t v43 = *v45;
    }
  }
  *a4 = a1;
  a4[1] = v29;
  a4[2] = v28;
  a4[3] = v30;
  a4[4] = v43;
  a4[5] = v29;
  a4[6] = v28;
  a4[7] = v28;
  a4[8] = 0;

  return sub_AD39BC(a4);
}

void sub_AD37C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AD37D8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 72), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    do
    {
      unint64_t v6 = v5;
      v5 >>= 1;
    }
    while (v6 >= 0x42 && v2 < (unint64_t)(float)(*(float *)(a1 + 20) * (float)v5));
    long long v23 = *(_OWORD *)(a1 + 16);
    *(void *)int v24 = *(void *)(a1 + 32);
    memset(&v24[8], 0, 32);
    long long v25 = 0u;
    uint64x2_t v22 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v23, 0)));
    BYTE8(v23) = 0;
    sub_AD00E0((uint64_t)&v22, 0, a1, v5);
    uint64x2_t v8 = *(uint64x2_t *)a1;
    long long v7 = *(_OWORD *)(a1 + 16);
    long long v9 = v23;
    *(uint64x2_t *)a1 = v22;
    *(_OWORD *)(a1 + 16) = v9;
    uint64x2_t v22 = v8;
    long long v23 = v7;
    long long v10 = *(_OWORD *)v24;
    long long v11 = *(_OWORD *)&v24[16];
    *(_OWORD *)int v24 = *(_OWORD *)(a1 + 32);
    *(void *)&v24[16] = *(void *)(a1 + 48);
    uint64_t v12 = *(char **)&v24[16];
    uint64_t v13 = *(void *)&v24[32];
    long long v14 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 48) = v11;
    *(void *)(a1 + 64) = v13;
    *(_OWORD *)&v24[24] = v14;
    *(void *)&long long v10 = v25;
    long long v15 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v25;
    long long v25 = v15;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v10)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v22 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v23, (float)(unint64_t)v15)));
    BYTE8(v23) = 0;
    if (v12)
    {
      unint64_t v16 = (char *)v14;
      __int16 v17 = v12;
      if ((char *)v14 != v12)
      {
        unint64_t v18 = (char *)v14;
        do
        {
          long long v20 = (void *)*((void *)v18 - 2);
          v18 -= 16;
          uint64_t v19 = v20;
          if (v20)
          {
            free(v19);
            *((void *)v16 - 2) = 0;
          }
          unint64_t v16 = v18;
        }
        while (v18 != v12);
        __int16 v17 = *(char **)&v24[16];
      }
      *(void *)&v24[24] = v12;
      free(v17);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_AD3998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    sub_20AE0F0((uint64_t)&a9, a15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_AD39BC(void *result)
{
  if (result[1] == result[5])
  {
    long long v10 = (_DWORD **)result[2];
    if (v10 == (_DWORD **)result[6])
    {
      long long v15 = (_DWORD **)result[7];
      unint64_t v16 = (_DWORD **)result[3];
LABEL_30:
      while (v16 != v15 || v15 != v10 && result[4] != result[8])
      {
        uint64_t v17 = *result;
        if (!*(void *)(*result + 40)) {
          break;
        }
        unint64_t v18 = (_DWORD *)result[4];
        uint64_t v20 = v17 + 32;
        int v19 = *(_DWORD *)(v17 + 32);
        if (*(_DWORD *)(v20 + 4) != v18[1] || v19 != *v18) {
          break;
        }
        result[4] = v18 + 3;
        if (v18 + 3 == &(*v16)[3 * *((unsigned __int16 *)v16 + 4)])
        {
          uint64x2_t v22 = v16 + 2;
          while (v22 != v10)
          {
            result[4] = *v22;
            int v23 = *((unsigned __int16 *)v22 + 4);
            v22 += 2;
            if (v23)
            {
              unint64_t v16 = v22 - 2;
              result[3] = v16;
              goto LABEL_30;
            }
          }
          unint64_t v16 = v10;
          result[3] = v10;
        }
      }
    }
    else
    {
      uint64_t v11 = *result;
      if (*(void *)(*result + 40))
      {
        uint64_t v12 = (_DWORD *)result[4];
        int v13 = *(_DWORD *)(v11 + 36);
        if (v13 == v12[1] && *(_DWORD *)(v11 + 32) == *v12)
        {
          int v24 = (_DWORD **)result[3];
          do
          {
            v12 += 3;
            result[4] = v12;
            if (v12 == &(*v24)[3 * *((unsigned __int16 *)v24 + 4)])
            {
              int v26 = v24 + 2;
              int v24 = v10;
              if (v26 != v10)
              {
                do
                {
                  int v27 = v26;
                  if (*((_WORD *)v26 + 4))
                  {
                    int v24 = v26;
                    goto LABEL_47;
                  }
                  v26 += 2;
                }
                while (v27 + 2 != v10);
                int v24 = v10;
LABEL_47:
                uint64_t v12 = *v27;
                result[4] = v12;
              }
              result[3] = v24;
            }
          }
          while (v13 == v12[1] && *(_DWORD *)(v11 + 32) == *v12);
        }
      }
    }
  }
  else
  {
    uint64_t v1 = *result;
    if (*(void *)(*result + 40))
    {
      unint64_t v2 = (_DWORD *)result[4];
      int v3 = *(_DWORD *)(v1 + 36);
      if (v3 == v2[1] && *(_DWORD *)(v1 + 32) == *v2)
      {
        unint64_t v5 = (_DWORD **)result[3];
        do
        {
          v2 += 3;
          result[4] = v2;
          if (v2 == &(*v5)[3 * *((unsigned __int16 *)v5 + 4)])
          {
            unint64_t v6 = (_DWORD **)result[2];
            uint64x2_t v8 = v5 + 2;
            if (v8 != v6)
            {
              while (1)
              {
                long long v9 = v8;
                if (*((_WORD *)v8 + 4)) {
                  break;
                }
                v8 += 2;
                if (v9 + 2 == v6) {
                  goto LABEL_10;
                }
              }
              unint64_t v6 = v8;
LABEL_10:
              unint64_t v2 = *v9;
              result[4] = v2;
            }
            result[3] = v6;
            unint64_t v5 = v6;
          }
        }
        while (v3 == v2[1] && *(_DWORD *)(v1 + 32) == *v2);
      }
    }
  }
  return result;
}

void sub_AD3BC4(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v39);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_AD3FD0(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v40[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 432) = sub_AD28B0(v5, v40);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v40[0] = 0x1FFFFFFFELL;
    unsigned int v7 = sub_AD28B0(v6, v40);
    sub_AD6D5C(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27))
      {
        long long v10 = *(int **)(a1 + 336);
        uint64_t v11 = *(int **)(a1 + 344);
        if (v10 == v11)
        {
          uint64_t v19 = *(void *)(a1 + 336);
        }
        else
        {
          do
          {
            int v12 = *v10;
            int v13 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (*v10 << *v13) | (v9 - 2);
            int v14 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v13 + 2), (unsigned int *)v40) + 4);
            long long v15 = *(_DWORD **)(a1 + 152);
            LODWORD(v40[0]) = (v12 << *v15) | v9;
            uint64_t v16 = sub_AF1DB0((uint64_t)(v15 + 2), (unsigned int *)v40);
            if (v14 != 0x7FFFFFFF)
            {
              int v17 = *(_DWORD *)(v16 + 4);
              if (v17 == 0x7FFFFFFF || v14 < v17) {
                *(_DWORD *)(v16 + 4) = v14;
              }
            }
            ++v10;
          }
          while (v10 != v11);
          long long v10 = *(int **)(a1 + 336);
          uint64_t v19 = *(void *)(a1 + 344);
        }
        *(double *)(a1 + 680) = *(double *)(a1 + 680) + (double)(unint64_t)((v19 - (uint64_t)v10) >> 2);
      }
      if (v9)
      {
        uint64_t v29 = *(unsigned int **)(a1 + 288);
        uint64_t v30 = *(unsigned int **)(a1 + 296);
        if (v29 != v30)
        {
          uint64_t v31 = *(void *)(a1 + 264);
          uint64_t v32 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v33 = *v32++;
            *(void *)(v31 + (((unint64_t)v33 >> 3) & 0x1FFFFFF8)) &= ~(1 << v33);
          }
          while (v32 != v30);
        }
        *(void *)(a1 + 296) = v29;
        sub_AD4290(a1, v9);
        sub_AD447C(a1, v9);
        unint64_t v34 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v34
          && ((*(void *)(*(void *)(a1 + 264) + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_50:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_51;
          }
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v20 = *(unsigned int **)(a1 + 240);
        uint64_t v21 = *(unsigned int **)(a1 + 248);
        if (v20 != v21)
        {
          uint64_t v22 = *(void *)(a1 + 216);
          int v23 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v24 = *v23++;
            *(void *)(v22 + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) &= ~(1 << v24);
          }
          while (v23 != v21);
        }
        *(void *)(a1 + 248) = v20;
        sub_AD54FC((void *)a1, v9);
        sub_725D0((uint64_t)v40);
        long long v25 = *(unsigned int **)(a1 + 408);
        int v26 = *(unsigned int **)(a1 + 416);
        while (v25 != v26)
        {
          unsigned int v27 = *v25++;
          sub_AD78A4(a1, v9, v27);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v40) + *(double *)(a1 + 608);
        unint64_t v28 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v28
          && ((*(void *)(*(void *)(a1 + 216) + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_50;
        }
      }
      unint64_t v35 = sub_AD88FC(a1) + 728;
      if (*(void *)(a1 + 720) > v35) {
        unint64_t v35 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v35;
      if (sub_AD6B08(a1)) {
        goto LABEL_50;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_48;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_48:
  if (v8)
  {
LABEL_51:
    unint64_t v36 = 0;
    uint64_t v37 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        uint64_t v38 = *(_DWORD **)(a1 + 152);
        LODWORD(v40[0]) = (*(_DWORD *)(a1 + 432) << *v38) | v36;
        *(void *)(a1 + 632) += *(int *)(sub_AF1DB0((uint64_t)(v38 + 2), (unsigned int *)v40) + 4);
      }
      ++v36;
    }
    while (v37 != v36);
  }
LABEL_55:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v39);
}

void sub_AD3FD0(uint64_t a1)
{
  unint64_t v2 = *(unsigned int **)(a1 + 240);
  int v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  unsigned int v7 = *(unsigned int **)(a1 + 288);
  unint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    long long v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  int v12 = *(unsigned int **)(a1 + 336);
  int v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    long long v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  int v17 = *(unsigned int **)(a1 + 408);
  unint64_t v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    uint64_t v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v28 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  int v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)int v23 = __dst;
  *(void *)(a1 + 592) = v30;
  HIBYTE(v30) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v35;
  *(_OWORD *)(a1 + 680) = v36;
  *(_OWORD *)(a1 + 696) = v37;
  *(_OWORD *)(a1 + 712) = v38;
  *(_OWORD *)(a1 + 600) = v31;
  *(_OWORD *)(a1 + 616) = v32;
  *(_OWORD *)(a1 + 632) = v33;
  *(_OWORD *)(a1 + 648) = v34;
  if (v28 < 0) {
    operator delete((void *)__p);
  }
  unsigned int v24 = 2 * *(_DWORD *)(a1 + 8) + 2;
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v25 = *(void *)(a1 + 152);
    *(_DWORD *)uint64_t v25 = 32 - __clz(v24);
    if (*(void *)(v25 + 48) | *(void *)(v25 + 88))
    {
      for (uint64_t i = *(void *)(v25 + 56); i != *(void *)(v25 + 64); i += 16)
      {
        if (*(void *)i)
        {
          free(*(void **)i);
          *(void *)uint64_t i = 0;
        }
        *(void *)(i + 8) = 0;
      }
      *(void *)(v25 + 88) = 0;
    }
    *(uint64x2_t *)(v25 + 8) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(v25 + 24), (float)*(unint64_t *)(v25 + 80))));
    *(unsigned char *)(v25 + 32) = 0;
    *(void *)(v25 + 48) = 0;
    unsigned int v24 = *(_DWORD *)(a1 + 144);
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_AD4274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_AD4290(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v23);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  uint64_t v5 = *(unsigned int **)(a1 + 248);
  if (v4 != v5)
  {
    while (1)
    {
      unsigned int v6 = *v4;
      unint64_t v7 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v4);
      unint64_t v8 = *(_DWORD **)(a1 + 152);
      int v24 = (v6 << *v8) | (a2 - 1);
      signed int v9 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v8 + 2), (unsigned int *)&v24) + 4);
      if (HIDWORD(v7) == 1 && (v7 + 3) < 2)
      {
        signed int v16 = v9;
        uint64_t v17 = *(void *)(a1 + 64);
        if (v17) {
          goto LABEL_19;
        }
        goto LABEL_23;
      }
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v12 = v11 + 24;
      if (*(unsigned char *)(v11 + 17)) {
        break;
      }
      int v13 = (int *)sub_498D5C(v12, __ROR8__(v7, 32), 0, "stop");
      unint64_t v18 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v18 >= 0x15u)
      {
        unsigned int v14 = v18[10];
        if (v14) {
          goto LABEL_17;
        }
      }
      signed int v16 = v9 + 30;
      uint64_t v17 = *(void *)(a1 + 64);
      if (v17)
      {
LABEL_19:
        signed int v19 = sub_AD7004(v17, v6, *(_DWORD *)(a1 + 144) + ~a2);
        if (v19 == 0x7FFFFFFF || v19 < v16) {
          goto LABEL_3;
        }
      }
LABEL_23:
      if (sub_AD6D5C(a1, 1u, v6, a2, v16))
      {
        uint64_t v21 = *(_DWORD **)(a1 + 152);
        int v24 = (v6 << *v21) | a2;
        sub_AF1DB0((uint64_t)(v21 + 2), (unsigned int *)&v24);
      }
LABEL_3:
      if (++v4 == v5) {
        goto LABEL_27;
      }
    }
    int v13 = (int *)sub_A1A290(v12, v7, 0, "transfers at stop");
    unsigned int v14 = 0;
    long long v15 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v15 >= 5u)
    {
      unsigned int v14 = v15[2];
      if (v15[2]) {
LABEL_17:
      }
        unsigned int v14 = *(int *)((char *)v13 + v14);
    }
    signed int v16 = v14 + v9;
    uint64_t v17 = *(void *)(a1 + 64);
    if (v17) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
LABEL_27:
  double result = sub_72688((uint64_t)v23) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_AD447C(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v216);
  int v3 = *(unsigned int **)(a1 + 240);
  uint64_t v202 = *(unsigned int **)(a1 + 248);
  if (v3 != v202)
  {
    uint64_t v209 = a1;
    do
    {
      uint64_t v203 = v3;
      unsigned int v4 = *v3;
      unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v3);
      unsigned int v6 = *(_DWORD **)(a1 + 152);
      unsigned int v208 = v4;
      LODWORD(v220[0]) = (v4 << *v6) | (a2 - 1);
      int v205 = *(_DWORD *)(sub_AF1DB0((uint64_t)(v6 + 2), (unsigned int *)v220) + 4);
      sub_A19FA8((uint64_t)&v210, *(void *)(a1 + 40), v5);
      unint64_t v7 = v211;
      unint64_t v8 = (unint64_t *)&v212;
      if (v215) {
        unint64_t v8 = v214;
      }
      unint64_t v9 = *v8;
      while ((unint64_t)v7 < v9)
      {
        uint64_t v12 = 0;
        unint64_t v13 = __ROR8__(*v7, 32);
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v15 = *(void *)(v14 + 72) - 1;
        unint64_t v16 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
        unint64_t v17 = v16 ^ (v16 >> 33);
        uint64_t v18 = *(void *)(v14 + 48);
        uint64_t v19 = v18 + 11;
        uint64_t v20 = -1;
        for (unint64_t i = v17; ; unint64_t i = v12 + v22)
        {
          uint64_t v22 = i & v15;
          unint64_t v23 = (i & v15) / 0x30;
          unint64_t v24 = v22 - 48 * v23;
          if (((*(unsigned __int8 *)(v18 + 16 * v23 + (v24 >> 3) + 10) >> (v24 & 7)) & 1) == 0)
          {
            if (v20 == -1) {
              unint64_t v60 = v22;
            }
            else {
              unint64_t v60 = v20;
            }
            if (!sub_AD2F40(v14, 1)) {
              goto LABEL_97;
            }
            goto LABEL_54;
          }
          uint64_t v25 = *(void *)(v18 + 16 * v23);
          if (!*(void *)(v14 + 40)) {
            break;
          }
          int v26 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v27 = 0;
            LOBYTE(v32) = v22 - 48 * v23;
            goto LABEL_28;
          }
          __int16 v27 = 0;
          uint64_t v28 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
          if ((unsigned __int16)(v22 - 48 * v23 - 9) >> 3)
          {
            __int16 v29 = 0;
            uint64_t v30 = v28 + 1;
            uint64_t v31 = (v28 + 1) & 0x3FFE;
            unsigned __int16 v32 = v24 - 8 * v31;
            long long v33 = &v26[v31];
            long long v34 = (unsigned __int8 *)(v19 + 16 * v23);
            uint64_t v35 = v31;
            do
            {
              uint64_t v36 = *(v34 - 1);
              int v37 = *v34;
              v34 += 2;
              v27 += byte_20EBFB6[v36];
              v29 += byte_20EBFB6[v37];
              v35 -= 2;
            }
            while (v35);
            v27 += v29;
            if (v30 == v31) {
              goto LABEL_27;
            }
          }
          else
          {
            unsigned __int16 v32 = v22 - 48 * v23;
            long long v33 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          }
          do
          {
            int v38 = *v33++;
            v27 += byte_20EBFB6[v38];
            v32 -= 8;
          }
          while (v32 > 8u);
LABEL_27:
          v26 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
LABEL_28:
          uint64_t v39 = (_DWORD *)(v25
                         + 12
                         * (unsigned __int16)(v27 + byte_20EBFB6[~(-1 << v32) & (unint64_t)*v26]));
          BOOL v40 = *(_DWORD *)(v14 + 36) == v39[1] && *(_DWORD *)(v14 + 32) == *v39;
          if (!v40) {
            break;
          }
          if (v20 == -1) {
            uint64_t v20 = v22;
          }
LABEL_15:
          ++v12;
        }
        int v41 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
        if ((unsigned __int16)(v22 - 48 * v23) < 9u)
        {
          __int16 v42 = 0;
          uint64_t v53 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          LOBYTE(v47) = v22 - 48 * v23;
          goto LABEL_42;
        }
        __int16 v42 = 0;
        uint64_t v43 = (unsigned __int16)(v22 - 48 * v23 - 9) >> 3;
        if (!((unsigned __int16)(v22 - 48 * v23 - 9) >> 3))
        {
          unsigned __int16 v47 = v22 - 48 * v23;
          int v48 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
          do
          {
LABEL_40:
            int v54 = *v48++;
            v42 += byte_20EBFB6[v54];
            v47 -= 8;
          }
          while (v47 > 8u);
          goto LABEL_41;
        }
        __int16 v44 = 0;
        uint64_t v45 = v43 + 1;
        uint64_t v46 = (v43 + 1) & 0x3FFE;
        unsigned __int16 v47 = v24 - 8 * v46;
        int v48 = &v41[v46];
        uint64_t v49 = (unsigned __int8 *)(v19 + 16 * v23);
        uint64_t v50 = v46;
        do
        {
          uint64_t v51 = *(v49 - 1);
          int v52 = *v49;
          v49 += 2;
          v42 += byte_20EBFB6[v51];
          v44 += byte_20EBFB6[v52];
          v50 -= 2;
        }
        while (v50);
        v42 += v44;
        if (v45 != v46) {
          goto LABEL_40;
        }
LABEL_41:
        uint64_t v53 = &v41[((unsigned __int16)(v24 - 9) >> 3) + 1];
LABEL_42:
        if (v13 != *(void *)(v25
                              + 12
                              * (unsigned __int16)(v42
                                                 + byte_20EBFB6[~(-1 << v47) & (unint64_t)*v53])))
          goto LABEL_15;
        if (v22 != -1)
        {
          if ((unsigned __int16)(v22 - 48 * v23) < 9u)
          {
            __int16 v57 = 0;
            a1 = v209;
          }
          else
          {
            if ((((_WORD)v22 - 48 * (_WORD)v23 - 8) & 0xFFF8) != 0) {
              __int16 v55 = 8;
            }
            else {
              __int16 v55 = v22 - 48 * v23 - 8;
            }
            unsigned __int16 v56 = ~v55 + v22 - 48 * v23;
            a1 = v209;
            __int16 v57 = 0;
            if (v56 < 8u)
            {
              unsigned __int16 v58 = v24;
              int v59 = (unsigned __int8 *)(v18 + 16 * v23 + 10);
              goto LABEL_102;
            }
            __int16 v106 = 0;
            uint64_t v107 = (v56 >> 3) + 1;
            unsigned __int16 v58 = v24 - 8 * (((v56 >> 3) + 1) & 0x3FFE);
            int v59 = &v41[v107 & 0x3FFE];
            uint64_t v108 = (unsigned __int8 *)(v18 + 16 * v23 + 11);
            uint64_t v109 = v107 & 0x3FFE;
            do
            {
              uint64_t v110 = *(v108 - 1);
              int v111 = *v108;
              v108 += 2;
              v57 += byte_20EBFB6[v110];
              v106 += byte_20EBFB6[v111];
              v109 -= 2;
            }
            while (v109);
            v57 += v106;
            if ((v107 & 0x3FFE) != v107)
            {
              do
              {
LABEL_102:
                int v112 = *v59++;
                v57 += byte_20EBFB6[v112];
                v58 -= 8;
              }
              while (v58 > 8u);
            }
            v41 += ((unsigned __int16)(v24 - 9) >> 3) + 1;
            LOBYTE(v24) = v58;
          }
          uint64_t v113 = *(void *)(v14 + 56);
          unsigned __int16 v114 = v57 + byte_20EBFB6[~(-1 << v24) & (unint64_t)*v41];
          uint64_t v115 = v18 + 16 * v23;
          if (*(unsigned __int16 *)(v115 + 8) != v114 || v115 + 16 == v113)
          {
            int v105 = (_DWORD *)(v25 + 12 * v114);
          }
          else
          {
            uint64_t v117 = v115 + 32;
            do
            {
              if (*(_WORD *)(v117 - 8)) {
                BOOL v118 = 1;
              }
              else {
                BOOL v118 = v117 == v113;
              }
              v117 += 16;
            }
            while (!v118);
            int v105 = *(_DWORD **)(v117 - 32);
          }
          goto LABEL_116;
        }
        unint64_t v60 = -1;
        if (!sub_AD2F40(v14, 1))
        {
LABEL_97:
          unint64_t v218 = v13;
          int v219 = -1;
          sub_AD3484(v14, (uint64_t *)&v218, v60, v220);
          int v105 = v221;
          a1 = v209;
          goto LABEL_116;
        }
LABEL_54:
        uint64_t v61 = 0;
        unint64_t v218 = v13;
        int v219 = -1;
        uint64_t v62 = *(void *)(v14 + 72) - 1;
        uint64_t v63 = *(void *)(v14 + 48);
        uint64_t v64 = v63 + 11;
        uint64_t v65 = -1;
        while (2)
        {
          uint64_t v66 = v17 & v62;
          unint64_t v67 = (v17 & v62) / 0x30;
          unint64_t v68 = (v17 & v62) % 0x30;
          if (((*(unsigned __int8 *)(v63 + 16 * v67 + (v68 >> 3) + 10) >> (v68 & 7)) & 1) == 0)
          {
            if (v65 == -1) {
              unint64_t v104 = v17 & v62;
            }
            else {
              unint64_t v104 = v65;
            }
            goto LABEL_95;
          }
          uint64_t v69 = *(void *)(v14 + 40);
          uint64_t v70 = *(void *)(v63 + 16 * v67);
          if (!v69) {
            break;
          }
          BOOL v71 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
          {
            __int16 v72 = 0;
            LOBYTE(v73) = (v17 & v62) % 0x30;
            goto LABEL_70;
          }
          __int16 v72 = 0;
          uint64_t v73 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
          if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
          {
            LODWORD(v73) = (v17 & v62) % 0x30;
            uint64_t v77 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            do
            {
LABEL_68:
              int v82 = *v77++;
              v72 += byte_20EBFB6[v82];
              LOWORD(v73) = v73 - 8;
            }
            while ((unsigned __int16)v73 > 8u);
            goto LABEL_69;
          }
          __int16 v74 = 0;
          uint64_t v75 = v73 + 1;
          uint64_t v76 = (v73 + 1) & 0x3FFE;
          LOWORD(v73) = v68 - 8 * v76;
          uint64_t v77 = &v71[v76];
          char v78 = (unsigned __int8 *)(v64 + 16 * v67);
          uint64_t v79 = v76;
          do
          {
            uint64_t v80 = *(v78 - 1);
            int v81 = *v78;
            v78 += 2;
            v72 += byte_20EBFB6[v80];
            v74 += byte_20EBFB6[v81];
            v79 -= 2;
          }
          while (v79);
          v72 += v74;
          if (v75 != v76) {
            goto LABEL_68;
          }
LABEL_69:
          v71 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
LABEL_70:
          unint64_t v83 = (_DWORD *)(v70
                         + 12
                         * (unsigned __int16)(v72 + byte_20EBFB6[~(-1 << v73) & (unint64_t)*v71]));
          if (*(_DWORD *)(v14 + 36) == v83[1] && *(_DWORD *)(v14 + 32) == *v83)
          {
            if (v65 == -1) {
              uint64_t v65 = v17 & v62;
            }
LABEL_57:
            unint64_t v17 = ++v61 + v66;
            continue;
          }
          break;
        }
        int v85 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
        if ((unsigned __int16)((v17 & v62) % 0x30) < 9u)
        {
          __int16 v86 = 0;
          uint64_t v97 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          LOBYTE(v91) = (v17 & v62) % 0x30;
          goto LABEL_84;
        }
        __int16 v86 = 0;
        uint64_t v87 = (unsigned __int16)(v66 - 48 * v67 - 9) >> 3;
        if (!((unsigned __int16)(v66 - 48 * v67 - 9) >> 3))
        {
          unsigned __int16 v91 = (v17 & v62) % 0x30;
          long long v92 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
          do
          {
LABEL_82:
            int v98 = *v92++;
            v86 += byte_20EBFB6[v98];
            v91 -= 8;
          }
          while (v91 > 8u);
          goto LABEL_83;
        }
        __int16 v88 = 0;
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x3FFE;
        unsigned __int16 v91 = v68 - 8 * v90;
        long long v92 = &v85[v90];
        unint64_t v93 = (unsigned __int8 *)(v64 + 16 * v67);
        uint64_t v94 = v90;
        do
        {
          uint64_t v95 = *(v93 - 1);
          int v96 = *v93;
          v93 += 2;
          v86 += byte_20EBFB6[v95];
          v88 += byte_20EBFB6[v96];
          v94 -= 2;
        }
        while (v94);
        v86 += v88;
        if (v89 != v90) {
          goto LABEL_82;
        }
LABEL_83:
        uint64_t v97 = &v85[((unsigned __int16)(v68 - 9) >> 3) + 1];
LABEL_84:
        if (v13 != *(void *)(v70
                              + 12
                              * (unsigned __int16)(v86
                                                 + byte_20EBFB6[~(-1 << v91) & (unint64_t)*v97])))
          goto LABEL_57;
        if (v66 == -1)
        {
          unint64_t v104 = -1;
LABEL_95:
          a1 = v209;
          sub_AD3484(v14, (uint64_t *)&v218, v104, v220);
          int v105 = v221;
          goto LABEL_116;
        }
        a1 = v209;
        if ((unsigned __int16)v68 < 9u)
        {
          __int16 v101 = 0;
        }
        else
        {
          if ((((_WORD)v66 - 48 * (_WORD)v67 - 8) & 0xFFF8) != 0) {
            __int16 v99 = 8;
          }
          else {
            __int16 v99 = v66 - 48 * v67 - 8;
          }
          unsigned __int16 v100 = ~v99 + v66 - 48 * v67;
          if (v100 < 8u)
          {
            __int16 v101 = 0;
            unsigned __int16 v102 = v68;
            unsigned int v103 = (unsigned __int8 *)(v63 + 16 * v67 + 10);
            goto LABEL_224;
          }
          __int16 v187 = 0;
          __int16 v188 = 0;
          uint64_t v189 = (v100 >> 3) + 1;
          unsigned __int16 v102 = v68 - 8 * (((v100 >> 3) + 1) & 0x3FFE);
          unsigned int v103 = &v85[v189 & 0x3FFE];
          uint64_t v190 = (unsigned __int8 *)(v63 + 16 * v67 + 11);
          uint64_t v191 = v189 & 0x3FFE;
          do
          {
            uint64_t v192 = *(v190 - 1);
            int v193 = *v190;
            v190 += 2;
            v187 += byte_20EBFB6[v192];
            v188 += byte_20EBFB6[v193];
            v191 -= 2;
          }
          while (v191);
          __int16 v101 = v188 + v187;
          if ((v189 & 0x3FFE) != v189)
          {
            do
            {
LABEL_224:
              int v194 = *v103++;
              v101 += byte_20EBFB6[v194];
              v102 -= 8;
            }
            while (v102 > 8u);
          }
          v85 += ((unsigned __int16)(v68 - 9) >> 3) + 1;
          LOBYTE(v68) = v102;
        }
        uint64_t v195 = v63 + 16 * v67;
        uint64_t v196 = *(_DWORD ***)(v14 + 56);
        unsigned __int16 v197 = v101 + byte_20EBFB6[~(-1 << v68) & (unint64_t)*v85];
        int v105 = (_DWORD *)(v70 + 12 * v197);
        if (*(unsigned __int16 *)(v195 + 8) == v197)
        {
          uint64_t v198 = v195 + 16;
          if ((_DWORD **)(v195 + 16) != v196)
          {
            while (1)
            {
              int v199 = (_DWORD **)v198;
              if (*(_WORD *)(v198 + 8)) {
                break;
              }
              v198 += 16;
              if (v199 + 2 == v196)
              {
                uint64_t v195 = *(void *)(v14 + 56);
                goto LABEL_232;
              }
            }
            uint64_t v195 = v198;
LABEL_232:
            int v105 = *v199;
            goto LABEL_233;
          }
        }
        else
        {
LABEL_233:
          if ((_DWORD **)v195 != v196 && v69)
          {
            do
            {
              if (*(_DWORD *)(v14 + 36) != v105[1] || *(_DWORD *)(v14 + 32) != *v105) {
                break;
              }
              v105 += 3;
              if (v105 == (_DWORD *)(*(void *)v195 + 12 * *(unsigned __int16 *)(v195 + 8)))
              {
                v195 += 16;
                if ((_DWORD **)v195 != v196)
                {
                  do
                  {
                    if (*(_WORD *)(v195 + 8))
                    {
                      int v105 = *(_DWORD **)v195;
                      goto LABEL_237;
                    }
                    v195 += 16;
                  }
                  while ((_DWORD **)v195 != v196);
                  int v105 = *(_DWORD **)(v195 - 16);
                }
                break;
              }
LABEL_237:
              ;
            }
            while ((_DWORD **)v195 != v196);
          }
        }
LABEL_116:
        unsigned int v119 = v105[2];
        if (v119 == -1)
        {
          int v120 = *(_DWORD *)(v14 + 112);
          *(_DWORD *)(v14 + 112) = v120 + 1;
          v105[2] = v120;
          long long v122 = *(unint64_t **)(v14 + 96);
          unint64_t v121 = *(void *)(v14 + 104);
          if ((unint64_t)v122 < v121)
          {
            unint64_t *v122 = v13;
            uint64_t v123 = (uint64_t)(v122 + 1);
            a1 = v209;
            goto LABEL_142;
          }
          uint64_t v124 = (unint64_t **)(v14 + 88);
          uint64_t v125 = *(char **)(v14 + 88);
          uint64_t v126 = ((char *)v122 - v125) >> 3;
          unint64_t v127 = v126 + 1;
          if ((unint64_t)(v126 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v128 = v121 - (void)v125;
          if (v128 >> 2 > v127) {
            unint64_t v127 = v128 >> 2;
          }
          if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v206 = v127;
          if (v127)
          {
            if (v127 >> 61) {
              sub_188D718();
            }
            uint64_t v129 = (char *)operator new(8 * v127);
            uint64_t v124 = (unint64_t **)(v14 + 88);
            unint64_t v130 = (unint64_t *)&v129[8 * v126];
            *unint64_t v130 = v13;
            uint64_t v123 = (uint64_t)(v130 + 1);
            if (v122 != (unint64_t *)v125)
            {
LABEL_129:
              unint64_t v131 = (char *)(v122 - 1) - v125;
              if (v131 < 0x58)
              {
                uint64_t v132 = v209;
                goto LABEL_138;
              }
              uint64_t v132 = v209;
              if ((unint64_t)(v125 - v129) < 0x20) {
                goto LABEL_253;
              }
              uint64_t v133 = (v131 >> 3) + 1;
              uint64_t v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v135 = &v122[v134 / 0xFFFFFFFFFFFFFFF8];
              unint64_t v130 = (unint64_t *)((char *)v130 - v134);
              unint64_t v136 = &v129[8 * v126 - 16];
              int v137 = v122 - 2;
              uint64_t v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v139 = *(_OWORD *)v137;
                *((_OWORD *)v136 - 1) = *((_OWORD *)v137 - 1);
                *(_OWORD *)unint64_t v136 = v139;
                v136 -= 32;
                v137 -= 4;
                v138 -= 4;
              }
              while (v138);
              long long v122 = v135;
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_253:
                do
                {
LABEL_138:
                  unint64_t v140 = *--v122;
                  *--unint64_t v130 = v140;
                }
                while (v122 != (unint64_t *)v125);
              }
              long long v122 = *v124;
              *(void *)(v14 + 88) = v130;
              *(void *)(v14 + 96) = v123;
              *(void *)(v14 + 104) = &v129[8 * v206];
              if (v122) {
LABEL_140:
              }
                operator delete(v122);
LABEL_141:
              a1 = v132;
LABEL_142:
              *(void *)(v14 + 96) = v123;
              unsigned int v119 = v105[2];
              *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
              if (v208 == v119) {
                goto LABEL_200;
              }
              goto LABEL_143;
            }
          }
          else
          {
            uint64_t v129 = 0;
            unint64_t v130 = (unint64_t *)(8 * v126);
            *(void *)(8 * v126) = v13;
            uint64_t v123 = 8 * v126 + 8;
            if (v122 != (unint64_t *)v125) {
              goto LABEL_129;
            }
          }
          uint64_t v132 = v209;
          *(void *)(v14 + 88) = v130;
          *(void *)(v14 + 96) = v123;
          *(void *)(v14 + 104) = &v129[8 * v206];
          if (v122) {
            goto LABEL_140;
          }
          goto LABEL_141;
        }
        *(double *)(a1 + 672) = *(double *)(a1 + 672) + 1.0;
        if (v208 == v119) {
          goto LABEL_200;
        }
LABEL_143:
        unsigned int v141 = v119;
        int v142 = *((_DWORD *)v211 + 2);
        int v143 = v142 / 10;
        int v144 = v142 % 10;
        if (v142 < 0) {
          char v145 = -5;
        }
        else {
          char v145 = 5;
        }
        unsigned int v146 = (((103 * (char)(v145 + v144)) >> 15) & 1) + ((103 * (char)(v145 + v144)) >> 10);
        int v147 = v143 + v205;
        signed int v148 = v147 + v146;
        uint64_t v149 = *(void *)(a1 + 64);
        if (!v149) {
          goto LABEL_193;
        }
        signed int v207 = v147 + v146;
        unsigned int v150 = 0;
        unsigned int v151 = *(_DWORD *)(a1 + 144) + ~a2;
        while (2)
        {
          while (2)
          {
            LODWORD(v220[0]) = (v141 << *(_DWORD *)v149) | (v151 - v150);
            if (*(void *)(v149 + 88) == *(void *)(v149 + 48)) {
              goto LABEL_176;
            }
            unint64_t v152 = sub_AD72DC(v149 + 8, (unsigned int *)v220);
            if (v152 == -1) {
              goto LABEL_176;
            }
            uint64_t v153 = *(void *)(v149 + 56);
            int v154 = (_DWORD **)(v153 + 16 * (v152 / 0x30));
            unint64_t v155 = (unsigned __int8 *)v154 + 10;
            int v156 = v152 % 0x30;
            if ((unsigned __int16)(v152 % 0x30) < 9u)
            {
              __int16 v157 = 0;
              goto LABEL_160;
            }
            __int16 v157 = 0;
            uint64_t v158 = (unsigned __int16)(v152 % 0x30 - 9) >> 3;
            if (!((unsigned __int16)(v152 % 0x30 - 9) >> 3))
            {
              unsigned __int16 v162 = v152 % 0x30;
              uint64_t v163 = (unsigned __int8 *)v154 + 10;
              do
              {
LABEL_158:
                int v168 = *v163++;
                v157 += byte_20EBDB6[v168];
                v162 -= 8;
              }
              while (v162 > 8u);
              goto LABEL_159;
            }
            __int16 v159 = 0;
            uint64_t v160 = v158 + 1;
            uint64_t v161 = (v158 + 1) & 0x3FFE;
            unsigned __int16 v162 = v156 - 8 * v161;
            uint64_t v163 = &v155[v161];
            unint64_t v164 = (unsigned __int8 *)(v153 + 16 * (v152 / 0x30) + 11);
            uint64_t v165 = v161;
            do
            {
              uint64_t v166 = *(v164 - 1);
              int v167 = *v164;
              v164 += 2;
              v157 += byte_20EBDB6[v166];
              v159 += byte_20EBDB6[v167];
              v165 -= 2;
            }
            while (v165);
            v157 += v159;
            if (v160 != v161) {
              goto LABEL_158;
            }
LABEL_159:
            v155 += ((unsigned __int16)(v156 - 9) >> 3) + 1;
            LOBYTE(v156) = v162;
LABEL_160:
            uint64_t v169 = *(_DWORD ***)(v149 + 64);
            unsigned __int16 v170 = v157 + byte_20EBDB6[~(-1 << v156) & (unint64_t)*v155];
            if (*((unsigned __int16 *)v154 + 4) != v170)
            {
              uint64_t v172 = &(*v154)[2 * v170];
              if (v154 != v169) {
                goto LABEL_168;
              }
LABEL_176:
              signed int v173 = *(_DWORD *)(v149 + 4);
              v150 += 2;
              if (v173 != 0x7FFFFFFF || v150 > v151) {
                goto LABEL_189;
              }
              continue;
            }
            break;
          }
          v154 += 2;
          if (v154 == v169) {
            goto LABEL_176;
          }
          while (1)
          {
            uint64_t v171 = v154;
            if (*((_WORD *)v154 + 4)) {
              break;
            }
            v154 += 2;
            if (v171 + 2 == v169)
            {
              int v154 = *(_DWORD ***)(v149 + 64);
              break;
            }
          }
          uint64_t v172 = *v171;
          if (v154 == v169) {
            goto LABEL_176;
          }
LABEL_168:
          if (*(void *)(v149 + 48))
          {
            while (*(_DWORD *)(v149 + 40) == *v172)
            {
              v172 += 2;
              if (v172 == &(*v154)[2 * *((unsigned __int16 *)v154 + 4)])
              {
                while (1)
                {
                  v154 += 2;
                  if (v154 == v169) {
                    goto LABEL_176;
                  }
                  if (*((_WORD *)v154 + 4))
                  {
                    uint64_t v172 = *v154;
                    break;
                  }
                }
              }
              if (v154 == v169) {
                break;
              }
            }
          }
          BOOL v40 = v154 == v169;
          uint64_t v175 = v172 + 1;
          if (v40) {
            uint64_t v175 = (signed int *)(v149 + 4);
          }
          signed int v173 = *v175;
          v150 += 2;
          if (v173 == 0x7FFFFFFF && v150 <= v151) {
            continue;
          }
          break;
        }
LABEL_189:
        signed int v148 = v207;
        BOOL v177 = v173 == 0x7FFFFFFF || v173 < v207;
        a1 = v209;
        if (!v177)
        {
LABEL_193:
          if (sub_AD6D5C(a1, 1u, v141, a2, v148))
          {
            uint64_t v178 = *(int **)(a1 + 152);
            int v180 = *v178;
            uint64_t v179 = (uint64_t)(v178 + 2);
            int v217 = (v141 << v180) | a2;
            if (sub_AD72DC(v179, (unsigned int *)&v217) == -1)
            {
              unint64_t v182 = v181;
              if (sub_AF1FB8(v179, 1))
              {
                unint64_t v218 = v217 | 0x7FFFFFFF00000000;
                sub_AF22EC(v179, (unsigned int *)&v218, (uint64_t)v220);
              }
              else
              {
                unint64_t v218 = v217 | 0x7FFFFFFF00000000;
                sub_AF2504(v179, (uint64_t *)&v218, v182, v220);
              }
            }
          }
        }
LABEL_200:
        unint64_t v9 = (unint64_t)v212;
        unint64_t v7 = (void *)((char *)v211 + 12);
        long long v211 = v7;
        if (v7 == v212)
        {
          unint64_t v7 = v213;
          unint64_t v11 = v214[0];
          long long v211 = v213;
          int v10 = 1;
          unsigned __int8 v215 = 1;
          if (*(unsigned char *)(v210 + 16)) {
            goto LABEL_204;
          }
        }
        else
        {
          int v10 = v215;
          unint64_t v11 = v214[0];
          if (!*(unsigned char *)(v210 + 16)) {
            goto LABEL_9;
          }
LABEL_204:
          if (v10) {
            unint64_t v183 = v11;
          }
          else {
            unint64_t v183 = (unint64_t)v212;
          }
          if ((unint64_t)v7 < v183)
          {
            while (1)
            {
              unint64_t v185 = __ROR8__(*v7, 32);
              if (HIDWORD(v185) == 1 && (v185 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(**(void **)(v210 + 4120)))
              {
                LOBYTE(v10) = v215;
                unint64_t v7 = v211;
                unint64_t v9 = (unint64_t)v212;
                break;
              }
              unint64_t v9 = (unint64_t)v212;
              unint64_t v7 = (void *)((char *)v211 + 12);
              long long v211 = v7;
              if (v7 == v212)
              {
                unint64_t v7 = v213;
                long long v211 = v213;
                LOBYTE(v10) = 1;
                unsigned __int8 v215 = 1;
                if ((unint64_t)v213 >= v214[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v10) = v215;
                uint64_t v184 = &v212;
                if (v215) {
                  uint64_t v184 = v214;
                }
                if ((unint64_t)v7 >= *v184) {
                  break;
                }
              }
            }
            unint64_t v11 = v214[0];
          }
        }
LABEL_9:
        if ((_BYTE)v10) {
          unint64_t v9 = v11;
        }
      }
      int v3 = v203 + 1;
    }
    while (v203 + 1 != v202);
  }
  double result = sub_72688((uint64_t)v216) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_AD54FC(void *a1, unsigned int a2)
{
  sub_725D0((uint64_t)v307);
  unsigned int v4 = (unsigned int *)a1[51];
  unint64_t v5 = (unsigned int *)a1[52];
  if (v4 != v5)
  {
    uint64_t v6 = a1[48];
    uint64_t v7 = a1[45];
    unint64_t v8 = (unsigned int *)a1[51];
    do
    {
      unsigned int v9 = *v8++;
      *(void *)(v6 + (((unint64_t)v9 >> 3) & 0x1FFFFFF8)) &= ~(1 << v9);
      *(_DWORD *)(v7 + 4 * v9) = -1;
    }
    while (v8 != v5);
  }
  a1[52] = v4;
  int v10 = (unsigned int *)a1[36];
  unsigned __int8 v296 = (unsigned int *)a1[37];
  if (v10 != v296)
  {
    uint64_t v287 = (void **)(a1 + 51);
    unsigned int v297 = a1;
    unint64_t v298 = a2;
    uint64_t v288 = a2 + 1;
    unint64_t v291 = a1 + 48;
    while (1)
    {
      unint64_t v299 = v10;
      unint64_t v11 = (unint64_t *)sub_A3F32C((void *)(a1[6] + 88), *v10);
      sub_A1DF34((uint64_t)v300, (void *)a1[5], *v11, 0, 0, 0);
      uint64_t v12 = v303;
LABEL_8:
      unint64_t v13 = (unint64_t)v304;
LABEL_9:
      if ((unint64_t)v12 < v13) {
        break;
      }
LABEL_6:
      int v10 = v299 + 1;
      if (v299 + 1 == v296) {
        goto LABEL_331;
      }
    }
    uint64_t v14 = 0;
    unint64_t v15 = __ROR8__(*v12, 32);
    uint64_t v16 = a1[7];
    uint64_t v17 = *(void *)(v16 + 72) - 1;
    unint64_t v18 = 0xC4CEB9FE1A85EC53
        * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
    unint64_t v19 = v18 ^ (v18 >> 33);
    uint64_t v20 = *(void *)(v16 + 48);
    uint64_t v21 = v20 + 11;
    uint64_t v22 = -1;
    for (unint64_t i = v19; ; unint64_t i = v14 + v24)
    {
      uint64_t v24 = i & v17;
      unint64_t v25 = (i & v17) / 0x30;
      unint64_t v26 = v24 - 48 * v25;
      if (((*(unsigned __int8 *)(v20 + 16 * v25 + (v26 >> 3) + 10) >> (v26 & 7)) & 1) == 0)
      {
        if (v22 == -1) {
          unint64_t v62 = v24;
        }
        else {
          unint64_t v62 = v22;
        }
        if (!sub_AD2F40(a1[7], 1)) {
          goto LABEL_95;
        }
        goto LABEL_52;
      }
      uint64_t v27 = *(void *)(v20 + 16 * v25);
      if (!*(void *)(v16 + 40)) {
        goto LABEL_30;
      }
      uint64_t v28 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      if ((unsigned __int16)(v24 - 48 * v25) < 9u)
      {
        __int16 v29 = 0;
        LOBYTE(v34) = v24 - 48 * v25;
        goto LABEL_26;
      }
      __int16 v29 = 0;
      uint64_t v30 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
      if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
      {
        __int16 v31 = 0;
        uint64_t v32 = v30 + 1;
        uint64_t v33 = (v30 + 1) & 0x3FFE;
        unsigned __int16 v34 = v26 - 8 * v33;
        uint64_t v35 = &v28[v33];
        uint64_t v36 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v37 = v33;
        do
        {
          uint64_t v38 = *(v36 - 1);
          int v39 = *v36;
          v36 += 2;
          v29 += byte_20EBFB6[v38];
          v31 += byte_20EBFB6[v39];
          v37 -= 2;
        }
        while (v37);
        v29 += v31;
        if (v32 == v33) {
          goto LABEL_25;
        }
      }
      else
      {
        unsigned __int16 v34 = v24 - 48 * v25;
        uint64_t v35 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      }
      do
      {
        int v40 = *v35++;
        v29 += byte_20EBFB6[v40];
        v34 -= 8;
      }
      while (v34 > 8u);
LABEL_25:
      v28 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
LABEL_26:
      int v41 = (_DWORD *)(v27
                     + 12
                     * (unsigned __int16)(v29 + byte_20EBFB6[~(-1 << v34) & (unint64_t)*v28]));
      if (*(_DWORD *)(v16 + 36) == v41[1] && *(_DWORD *)(v16 + 32) == *v41)
      {
        if (v22 == -1) {
          uint64_t v22 = v24;
        }
        goto LABEL_13;
      }
LABEL_30:
      uint64_t v43 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      if ((unsigned __int16)(v24 - 48 * v25) < 9u)
      {
        __int16 v44 = 0;
        __int16 v55 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
        LOBYTE(v49) = v24 - 48 * v25;
        goto LABEL_40;
      }
      __int16 v44 = 0;
      uint64_t v45 = (unsigned __int16)(v24 - 48 * v25 - 9) >> 3;
      if ((unsigned __int16)(v24 - 48 * v25 - 9) >> 3)
      {
        __int16 v46 = 0;
        uint64_t v47 = v45 + 1;
        uint64_t v48 = (v45 + 1) & 0x3FFE;
        unsigned __int16 v49 = v26 - 8 * v48;
        uint64_t v50 = &v43[v48];
        uint64_t v51 = (unsigned __int8 *)(v21 + 16 * v25);
        uint64_t v52 = v48;
        do
        {
          uint64_t v53 = *(v51 - 1);
          int v54 = *v51;
          v51 += 2;
          v44 += byte_20EBFB6[v53];
          v46 += byte_20EBFB6[v54];
          v52 -= 2;
        }
        while (v52);
        v44 += v46;
        if (v47 == v48) {
          goto LABEL_39;
        }
      }
      else
      {
        unsigned __int16 v49 = v24 - 48 * v25;
        uint64_t v50 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
      }
      do
      {
        int v56 = *v50++;
        v44 += byte_20EBFB6[v56];
        v49 -= 8;
      }
      while (v49 > 8u);
LABEL_39:
      __int16 v55 = &v43[((unsigned __int16)(v26 - 9) >> 3) + 1];
LABEL_40:
      if (v15 == *(void *)(v27
                            + 12
                            * (unsigned __int16)(v44 + byte_20EBFB6[~(-1 << v49) & (unint64_t)*v55])))
      {
        if (v24 != -1)
        {
          if ((unsigned __int16)(v24 - 48 * v25) < 9u)
          {
            __int16 v59 = 0;
          }
          else
          {
            if ((((_WORD)v24 - 48 * (_WORD)v25 - 8) & 0xFFF8) != 0) {
              __int16 v57 = 8;
            }
            else {
              __int16 v57 = v24 - 48 * v25 - 8;
            }
            unsigned __int16 v58 = ~v57 + v24 - 48 * v25;
            if (v58 < 8u)
            {
              __int16 v59 = 0;
              unsigned __int16 v60 = v26;
              uint64_t v61 = (unsigned __int8 *)(v20 + 16 * v25 + 10);
              goto LABEL_100;
            }
            __int16 v108 = 0;
            __int16 v109 = 0;
            uint64_t v110 = (v58 >> 3) + 1;
            unsigned __int16 v60 = v26 - 8 * (((v58 >> 3) + 1) & 0x3FFE);
            uint64_t v61 = &v43[v110 & 0x3FFE];
            int v111 = (unsigned __int8 *)(v20 + 16 * v25 + 11);
            uint64_t v112 = v110 & 0x3FFE;
            do
            {
              uint64_t v113 = *(v111 - 1);
              int v114 = *v111;
              v111 += 2;
              v108 += byte_20EBFB6[v113];
              v109 += byte_20EBFB6[v114];
              v112 -= 2;
            }
            while (v112);
            __int16 v59 = v109 + v108;
            if ((v110 & 0x3FFE) != v110)
            {
              do
              {
LABEL_100:
                int v115 = *v61++;
                v59 += byte_20EBFB6[v115];
                v60 -= 8;
              }
              while (v60 > 8u);
            }
            v43 += ((unsigned __int16)(v26 - 9) >> 3) + 1;
            LOBYTE(v26) = v60;
          }
          uint64_t v116 = *(void *)(v16 + 56);
          unsigned __int16 v117 = v59 + byte_20EBFB6[~(-1 << v26) & (unint64_t)*v43];
          uint64_t v118 = v20 + 16 * v25;
          if (*(unsigned __int16 *)(v118 + 8) != v117 || v118 + 16 == v116)
          {
            uint64_t v107 = (_DWORD *)(v27 + 12 * v117);
          }
          else
          {
            uint64_t v120 = v118 + 32;
            do
            {
              if (*(_WORD *)(v120 - 8)) {
                BOOL v121 = 1;
              }
              else {
                BOOL v121 = v120 == v116;
              }
              v120 += 16;
            }
            while (!v121);
            uint64_t v107 = *(_DWORD **)(v120 - 32);
          }
          goto LABEL_114;
        }
        unint64_t v62 = -1;
        if (!sub_AD2F40(a1[7], 1))
        {
LABEL_95:
          unint64_t v308 = v15;
          int v309 = -1;
          sub_AD3484(v16, (uint64_t *)&v308, v62, v310);
          uint64_t v107 = v311;
          goto LABEL_114;
        }
LABEL_52:
        uint64_t v63 = 0;
        unint64_t v308 = v15;
        int v309 = -1;
        uint64_t v64 = *(void *)(v16 + 72) - 1;
        uint64_t v65 = *(void *)(v16 + 48);
        uint64_t v66 = v65 + 11;
        uint64_t v67 = -1;
        while (2)
        {
          uint64_t v68 = v19 & v64;
          unint64_t v69 = (v19 & v64) / 0x30;
          unint64_t v70 = (v19 & v64) % 0x30;
          if (((*(unsigned __int8 *)(v65 + 16 * v69 + (v70 >> 3) + 10) >> (v70 & 7)) & 1) == 0)
          {
            if (v67 == -1) {
              unint64_t v106 = v19 & v64;
            }
            else {
              unint64_t v106 = v67;
            }
            goto LABEL_93;
          }
          uint64_t v71 = *(void *)(v16 + 40);
          uint64_t v72 = *(void *)(v65 + 16 * v69);
          if (!v71) {
            break;
          }
          uint64_t v73 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          if ((unsigned __int16)((v19 & v64) % 0x30) < 9u)
          {
            __int16 v74 = 0;
            LOBYTE(v75) = (v19 & v64) % 0x30;
            goto LABEL_68;
          }
          __int16 v74 = 0;
          uint64_t v75 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
          if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
          {
            LODWORD(v75) = (v19 & v64) % 0x30;
            uint64_t v79 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            do
            {
LABEL_66:
              int v84 = *v79++;
              v74 += byte_20EBFB6[v84];
              LOWORD(v75) = v75 - 8;
            }
            while ((unsigned __int16)v75 > 8u);
            goto LABEL_67;
          }
          __int16 v76 = 0;
          uint64_t v77 = v75 + 1;
          uint64_t v78 = (v75 + 1) & 0x3FFE;
          LOWORD(v75) = v70 - 8 * v78;
          uint64_t v79 = &v73[v78];
          uint64_t v80 = (unsigned __int8 *)(v66 + 16 * v69);
          uint64_t v81 = v78;
          do
          {
            uint64_t v82 = *(v80 - 1);
            int v83 = *v80;
            v80 += 2;
            v74 += byte_20EBFB6[v82];
            v76 += byte_20EBFB6[v83];
            v81 -= 2;
          }
          while (v81);
          v74 += v76;
          if (v77 != v78) {
            goto LABEL_66;
          }
LABEL_67:
          v73 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
LABEL_68:
          int v85 = (_DWORD *)(v72
                         + 12
                         * (unsigned __int16)(v74 + byte_20EBFB6[~(-1 << v75) & (unint64_t)*v73]));
          if (*(_DWORD *)(v16 + 36) == v85[1] && *(_DWORD *)(v16 + 32) == *v85)
          {
            if (v67 == -1) {
              uint64_t v67 = v68;
            }
LABEL_55:
            unint64_t v19 = ++v63 + v68;
            continue;
          }
          break;
        }
        uint64_t v87 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
        if ((unsigned __int16)v70 < 9u)
        {
          __int16 v88 = 0;
          __int16 v99 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          LOBYTE(v93) = v70;
          goto LABEL_82;
        }
        __int16 v88 = 0;
        uint64_t v89 = (unsigned __int16)(v68 - 48 * v69 - 9) >> 3;
        if (!((unsigned __int16)(v68 - 48 * v69 - 9) >> 3))
        {
          unsigned __int16 v93 = v70;
          uint64_t v94 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
          do
          {
LABEL_80:
            int v100 = *v94++;
            v88 += byte_20EBFB6[v100];
            v93 -= 8;
          }
          while (v93 > 8u);
          goto LABEL_81;
        }
        __int16 v90 = 0;
        uint64_t v91 = v89 + 1;
        uint64_t v92 = (v89 + 1) & 0x3FFE;
        unsigned __int16 v93 = v70 - 8 * v92;
        uint64_t v94 = &v87[v92];
        uint64_t v95 = (unsigned __int8 *)(v66 + 16 * v69);
        uint64_t v96 = v92;
        do
        {
          uint64_t v97 = *(v95 - 1);
          int v98 = *v95;
          v95 += 2;
          v88 += byte_20EBFB6[v97];
          v90 += byte_20EBFB6[v98];
          v96 -= 2;
        }
        while (v96);
        v88 += v90;
        if (v91 != v92) {
          goto LABEL_80;
        }
LABEL_81:
        __int16 v99 = &v87[((unsigned __int16)(v70 - 9) >> 3) + 1];
LABEL_82:
        if (v15 != *(void *)(v72
                              + 12
                              * (unsigned __int16)(v88
                                                 + byte_20EBFB6[~(-1 << v93) & (unint64_t)*v99])))
          goto LABEL_55;
        if (v68 == -1)
        {
          unint64_t v106 = -1;
LABEL_93:
          sub_AD3484(v16, (uint64_t *)&v308, v106, v310);
          uint64_t v107 = v311;
          goto LABEL_114;
        }
        if ((unsigned __int16)v70 < 9u)
        {
          __int16 v103 = 0;
        }
        else
        {
          if ((((_WORD)v68 - 48 * (_WORD)v69 - 8) & 0xFFF8) != 0) {
            __int16 v101 = 8;
          }
          else {
            __int16 v101 = v68 - 48 * v69 - 8;
          }
          unsigned __int16 v102 = ~v101 + v68 - 48 * v69;
          if (v102 < 8u)
          {
            __int16 v103 = 0;
            unsigned __int16 v104 = v70;
            int v105 = (unsigned __int8 *)(v65 + 16 * v69 + 10);
            goto LABEL_182;
          }
          __int16 v187 = 0;
          __int16 v188 = 0;
          uint64_t v189 = (v102 >> 3) + 1;
          unsigned __int16 v104 = v70 - 8 * (((v102 >> 3) + 1) & 0x3FFE);
          int v105 = &v87[v189 & 0x3FFE];
          uint64_t v190 = (unsigned __int8 *)(v65 + 16 * v69 + 11);
          uint64_t v191 = v189 & 0x3FFE;
          do
          {
            uint64_t v192 = *(v190 - 1);
            int v193 = *v190;
            v190 += 2;
            v187 += byte_20EBFB6[v192];
            v188 += byte_20EBFB6[v193];
            v191 -= 2;
          }
          while (v191);
          __int16 v103 = v188 + v187;
          if ((v189 & 0x3FFE) != v189)
          {
            do
            {
LABEL_182:
              int v194 = *v105++;
              v103 += byte_20EBFB6[v194];
              v104 -= 8;
            }
            while (v104 > 8u);
          }
          v87 += ((unsigned __int16)(v70 - 9) >> 3) + 1;
          LOBYTE(v70) = v104;
        }
        uint64_t v195 = v65 + 16 * v69;
        uint64_t v196 = *(_DWORD ***)(v16 + 56);
        unsigned __int16 v197 = v103 + byte_20EBFB6[~(-1 << v70) & (unint64_t)*v87];
        uint64_t v107 = (_DWORD *)(v72 + 12 * v197);
        if (*(unsigned __int16 *)(v195 + 8) == v197)
        {
          uint64_t v198 = v195 + 16;
          if ((_DWORD **)(v195 + 16) != v196)
          {
            while (1)
            {
              int v199 = (_DWORD **)v198;
              if (*(_WORD *)(v198 + 8)) {
                break;
              }
              v198 += 16;
              if (v199 + 2 == v196)
              {
                uint64_t v195 = *(void *)(v16 + 56);
                goto LABEL_235;
              }
            }
            uint64_t v195 = v198;
LABEL_235:
            uint64_t v107 = *v199;
            goto LABEL_236;
          }
        }
        else
        {
LABEL_236:
          if ((_DWORD **)v195 != v196 && v71)
          {
            do
            {
              if (*(_DWORD *)(v16 + 36) != v107[1] || *(_DWORD *)(v16 + 32) != *v107) {
                break;
              }
              v107 += 3;
              if (v107 == (_DWORD *)(*(void *)v195 + 12 * *(unsigned __int16 *)(v195 + 8)))
              {
                v195 += 16;
                if ((_DWORD **)v195 != v196)
                {
                  do
                  {
                    if (*(_WORD *)(v195 + 8))
                    {
                      uint64_t v107 = *(_DWORD **)v195;
                      goto LABEL_240;
                    }
                    v195 += 16;
                  }
                  while ((_DWORD **)v195 != v196);
                  uint64_t v107 = *(_DWORD **)(v195 - 16);
                }
                break;
              }
LABEL_240:
              ;
            }
            while ((_DWORD **)v195 != v196);
          }
        }
LABEL_114:
        unsigned int v122 = v107[2];
        if (v122 == -1)
        {
          int v126 = *(_DWORD *)(v16 + 112);
          *(_DWORD *)(v16 + 112) = v126 + 1;
          v107[2] = v126;
          uint64_t v128 = *(unint64_t **)(v16 + 96);
          unint64_t v127 = *(void *)(v16 + 104);
          if ((unint64_t)v128 < v127)
          {
            *uint64_t v128 = v15;
            uint64_t v129 = (uint64_t)(v128 + 1);
            goto LABEL_139;
          }
          unint64_t v130 = (unint64_t **)(v16 + 88);
          unint64_t v131 = *(char **)(v16 + 88);
          uint64_t v132 = ((char *)v128 - v131) >> 3;
          unint64_t v133 = v132 + 1;
          if ((unint64_t)(v132 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v134 = v127 - (void)v131;
          if (v134 >> 2 > v133) {
            unint64_t v133 = v134 >> 2;
          }
          if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v133)
          {
            if (v133 >> 61) {
              goto LABEL_332;
            }
            unint64_t v135 = v133;
            unint64_t v136 = (char *)operator new(8 * v133);
            unint64_t v130 = (unint64_t **)(v16 + 88);
            int v137 = (unint64_t *)&v136[8 * v132];
            unint64_t *v137 = v15;
            uint64_t v129 = (uint64_t)(v137 + 1);
            if (v128 != (unint64_t *)v131)
            {
LABEL_127:
              unint64_t v138 = (char *)(v128 - 1) - v131;
              if (v138 < 0x58) {
                goto LABEL_337;
              }
              if ((unint64_t)(v131 - v136) < 0x20) {
                goto LABEL_337;
              }
              uint64_t v139 = (v138 >> 3) + 1;
              uint64_t v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v141 = &v128[v140 / 0xFFFFFFFFFFFFFFF8];
              int v137 = (unint64_t *)((char *)v137 - v140);
              int v142 = &v136[8 * v132 - 16];
              int v143 = v128 - 2;
              uint64_t v144 = v139 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v145 = *(_OWORD *)v143;
                *((_OWORD *)v142 - 1) = *((_OWORD *)v143 - 1);
                *(_OWORD *)int v142 = v145;
                v142 -= 32;
                v143 -= 4;
                v144 -= 4;
              }
              while (v144);
              uint64_t v128 = v141;
              if (v139 != (v139 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_337:
                do
                {
                  unint64_t v146 = *--v128;
                  *--int v137 = v146;
                }
                while (v128 != (unint64_t *)v131);
              }
              uint64_t v128 = *v130;
              *(void *)(v16 + 88) = v137;
              *(void *)(v16 + 96) = v129;
              *(void *)(v16 + 104) = &v136[8 * v135];
              a1 = v297;
              if (v128) {
LABEL_138:
              }
                operator delete(v128);
LABEL_139:
              *(void *)(v16 + 96) = v129;
              unsigned int v122 = v107[2];
              unsigned int v123 = *((unsigned __int16 *)v303 + 4);
              uint64_t v124 = (uint64_t *)a1[12];
              unint64_t v125 = v122;
              if (!v124) {
                goto LABEL_144;
              }
              goto LABEL_140;
            }
          }
          else
          {
            unint64_t v135 = 0;
            unint64_t v136 = 0;
            int v137 = (unint64_t *)(8 * v132);
            *(void *)(8 * v132) = v15;
            uint64_t v129 = 8 * v132 + 8;
            if (v128 != (unint64_t *)v131) {
              goto LABEL_127;
            }
          }
          *(void *)(v16 + 88) = v137;
          *(void *)(v16 + 96) = v129;
          *(void *)(v16 + 104) = &v136[8 * v135];
          a1 = v297;
          if (v128) {
            goto LABEL_138;
          }
          goto LABEL_139;
        }
        unsigned int v123 = *((unsigned __int16 *)v303 + 4);
        uint64_t v124 = (uint64_t *)a1[12];
        unint64_t v125 = v122;
        if (!v124) {
          goto LABEL_144;
        }
LABEL_140:
        uint64_t v147 = *v124;
        unint64_t v148 = 0xAAAAAAAAAAAAAAABLL * ((v124[1] - *v124) >> 4);
        if (v148 <= v298)
        {
          unsigned int v149 = v123;
          sub_A3F0F0((uint64_t)v124, v288 - v148);
          unsigned int v123 = v149;
          uint64_t v147 = *v124;
        }
        unsigned int v150 = (void *)(v147 + 48 * v298);
        if (v150[1] <= v125 || ((*(void *)(*v150 + ((v125 >> 3) & 0x1FFFFFF8)) >> v125) & 1) == 0) {
          goto LABEL_225;
        }
LABEL_144:
        unint64_t v151 = v125 >> 6;
        if (a1[49] <= v125)
        {
          unint64_t v155 = (unsigned char *)a1[45];
          uint64_t v158 = (unsigned char *)a1[46];
          int64_t v159 = v158 - v155;
          unint64_t v160 = (v158 - v155) >> 2;
          if (v160 <= v125) {
            goto LABEL_152;
          }
LABEL_199:
          uint64_t v209 = *(void *)(*v291 + 8 * v151);
          a1 = v297;
          if ((v209 & (1 << v125)) == 0)
          {
            *(void *)(*v291 + 8 * v151) = v209 | (1 << v125);
            long long v211 = (char *)v297[52];
            unint64_t v210 = v297[53];
            if ((unint64_t)v211 < v210)
            {
              *(_DWORD *)long long v211 = v122;
              uint64_t v212 = (uint64_t)(v211 + 4);
              goto LABEL_223;
            }
            uint64_t v213 = (char *)*v287;
            uint64_t v214 = v211 - (unsigned char *)*v287;
            uint64_t v215 = v214 >> 2;
            unint64_t v216 = (v214 >> 2) + 1;
            if (v216 >> 62) {
LABEL_334:
            }
              sub_2E00();
            uint64_t v217 = v210 - (void)v213;
            if (v217 >> 1 > v216) {
              unint64_t v216 = v217 >> 1;
            }
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v218 = v216;
            }
            unsigned int v294 = v123;
            if (v218)
            {
              if (v218 >> 62) {
                goto LABEL_332;
              }
              int v219 = operator new(4 * v218);
              char v220 = (unsigned int *)&v219[4 * v215];
              *char v220 = v122;
              uint64_t v212 = (uint64_t)(v220 + 1);
              if (v211 != v213)
              {
LABEL_211:
                unint64_t v221 = v211 - 4 - v213;
                if (v221 < 0x2C) {
                  goto LABEL_338;
                }
                if ((unint64_t)(v211 - &v219[v214]) < 0x20) {
                  goto LABEL_338;
                }
                uint64_t v222 = (v221 >> 2) + 1;
                uint64_t v223 = 4 * (v222 & 0x7FFFFFFFFFFFFFF8);
                int v224 = &v211[-v223];
                char v220 = (unsigned int *)((char *)v220 - v223);
                unsigned int v225 = &v219[4 * v215 - 16];
                unsigned int v226 = v211 - 16;
                uint64_t v227 = v222 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v228 = *(_OWORD *)v226;
                  *(v225 - 1) = *((_OWORD *)v226 - 1);
                  *unsigned int v225 = v228;
                  v225 -= 2;
                  v226 -= 32;
                  v227 -= 8;
                }
                while (v227);
                long long v211 = v224;
                if (v222 != (v222 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_338:
                  do
                  {
                    unsigned int v229 = *((_DWORD *)v211 - 1);
                    v211 -= 4;
                    *--char v220 = v229;
                  }
                  while (v211 != v213);
                }
              }
            }
            else
            {
              int v219 = 0;
              char v220 = (unsigned int *)(4 * v215);
              *(_DWORD *)(4 * v215) = v122;
              uint64_t v212 = 4 * v215 + 4;
              if (v211 != v213) {
                goto LABEL_211;
              }
            }
            a1 = v297;
            v297[51] = v220;
            v297[52] = v212;
            v297[53] = &v219[4 * v218];
            if (v213) {
              operator delete(v213);
            }
            unsigned int v123 = v294;
LABEL_223:
            a1[52] = v212;
          }
          *(_DWORD *)(a1[45] + 4 * v125) = v123;
          goto LABEL_225;
        }
        uint64_t v152 = a1[48];
        uint64_t v153 = *(void *)(v152 + 8 * v151);
        uint64_t v154 = 1 << v125;
        unint64_t v155 = (unsigned char *)a1[45];
        if ((v153 & (1 << v125)) == 0) {
          goto LABEL_149;
        }
        int v156 = (unsigned char *)a1[46];
        unint64_t v157 = (v156 - v155) >> 2;
        if (v157 <= v125)
        {
          unint64_t v174 = v122 + 1;
          BOOL v175 = v174 >= v157;
          unint64_t v176 = v174 - v157;
          unsigned int v293 = v123;
          if (v174 <= v157)
          {
            a1 = v297;
            if (!v175) {
              v297[46] = &v155[4 * v174];
            }
          }
          else
          {
            uint64_t v177 = v297[47];
            if (v176 <= (v177 - (uint64_t)v156) >> 2)
            {
              uint64_t v200 = 4 * v176;
              memset(v156, 255, 4 * v176);
              unint64_t v174 = v122 + 1;
              v297[46] = &v156[v200];
              a1 = v297;
            }
            else
            {
              unint64_t v178 = v174 - v157;
              uint64_t v179 = v177 - (void)v155;
              uint64_t v180 = v179 >> 1;
              if (v179 >> 1 <= v174) {
                uint64_t v180 = v122 + 1;
              }
              BOOL v175 = (unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v175) {
                unint64_t v181 = v180;
              }
              if (v181 >> 62) {
                goto LABEL_332;
              }
              uint64_t v286 = 4 * v181;
              __int16 v284 = operator new(4 * v181);
              size_t v182 = 4 * v178;
              unint64_t v183 = &v284[4 * v157];
              size_t v282 = v182;
              memset(v183, 255, v182);
              if (v156 == v155)
              {
                unint64_t v185 = &v284[4 * v157];
                unint64_t v174 = v122 + 1;
                uint8x8_t v186 = v284;
              }
              else
              {
                unint64_t v184 = v156 - 4 - v155;
                if (v184 < 0x2C)
                {
                  unint64_t v185 = &v284[4 * v157];
                  unint64_t v174 = v122 + 1;
                  uint8x8_t v186 = v284;
                  goto LABEL_256;
                }
                uint8x8_t v186 = v284;
                unint64_t v185 = &v284[4 * v157];
                unint64_t v174 = v122 + 1;
                if ((unint64_t)(v155 - v284) < 0x20) {
                  goto LABEL_339;
                }
                uint64_t v232 = (v184 >> 2) + 1;
                uint64_t v233 = 4 * (v232 & 0x7FFFFFFFFFFFFFF8);
                long long v234 = &v156[-v233];
                unint64_t v185 = &v183[-v233];
                long long v235 = &v284[4 * v157 - 16];
                uint64_t v236 = (long long *)(v156 - 16);
                uint64_t v237 = v232 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v238 = *v236;
                  *(v235 - 1) = *(v236 - 1);
                  *long long v235 = v238;
                  v235 -= 2;
                  v236 -= 2;
                  v237 -= 8;
                }
                while (v237);
                int v156 = v234;
                if (v232 != (v232 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_339:
                  do
                  {
LABEL_256:
                    int v239 = *((_DWORD *)v156 - 1);
                    v156 -= 4;
                    *((_DWORD *)v185 - 1) = v239;
                    v185 -= 4;
                  }
                  while (v156 != v155);
                }
              }
              a1 = v297;
              v297[45] = v185;
              v297[46] = &v183[v282];
              v297[47] = &v186[v286];
              if (v155)
              {
                operator delete(v155);
                unint64_t v174 = v122 + 1;
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v174, 0);
          uint64_t v152 = *v291;
          unint64_t v151 = v125 >> 6;
          uint64_t v153 = *(void *)(*v291 + 8 * (v125 >> 6));
          unsigned int v123 = v293;
          if ((v153 & v154) == 0) {
            goto LABEL_260;
          }
LABEL_148:
          unint64_t v155 = (unsigned char *)a1[45];
          if (*(_DWORD *)&v155[4 * v125] <= v123) {
            goto LABEL_225;
          }
LABEL_149:
          uint64_t v158 = (unsigned char *)a1[46];
          int64_t v159 = v158 - v155;
          unint64_t v160 = (v158 - v155) >> 2;
          if (v160 > v125) {
            goto LABEL_199;
          }
LABEL_152:
          unint64_t v161 = v122 + 1;
          unint64_t v162 = v161 - v160;
          unsigned int v292 = v123;
          unint64_t v289 = v151;
          if (v161 <= v160)
          {
            if (v161 < v160) {
              v297[46] = &v155[4 * v161];
            }
          }
          else
          {
            uint64_t v163 = v297[47];
            if (v162 <= (v163 - (uint64_t)v158) >> 2)
            {
              memset(v158, 255, 4 * v162);
              unint64_t v161 = v122 + 1;
              v297[46] = &v158[4 * v162];
            }
            else
            {
              uint64_t v164 = v163 - (void)v155;
              uint64_t v165 = v164 >> 1;
              if (v164 >> 1 <= v161) {
                uint64_t v165 = v122 + 1;
              }
              BOOL v175 = (unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v175) {
                unint64_t v166 = v165;
              }
              if (v166 >> 62) {
                goto LABEL_332;
              }
              uint64_t v285 = 4 * v166;
              int v283 = operator new(4 * v166);
              memset(&v283[4 * v160], 255, 4 * v162);
              if (v158 == v155)
              {
                uint64_t v169 = &v283[4 * v160];
                unsigned __int16 v170 = v297;
                int v167 = v169;
                unint64_t v161 = v122 + 1;
                uint64_t v171 = v283;
                uint64_t v172 = v285;
                uint64_t v173 = 4 * v162;
              }
              else
              {
                int v167 = &v283[4 * v160];
                unint64_t v168 = v158 - 4 - v155;
                if (v168 < 0x2C)
                {
                  uint64_t v169 = &v283[4 * v160];
                  unsigned __int16 v170 = v297;
                  unint64_t v161 = v122 + 1;
                  uint64_t v171 = v283;
                  uint64_t v172 = v285;
                  uint64_t v173 = 4 * v162;
                  goto LABEL_195;
                }
                uint64_t v171 = v283;
                uint64_t v172 = v285;
                uint64_t v169 = &v283[4 * v160];
                unsigned __int16 v170 = v297;
                unint64_t v161 = v122 + 1;
                uint64_t v173 = 4 * v162;
                if ((unint64_t)(&v158[-v159] - v283) < 0x20) {
                  goto LABEL_340;
                }
                uint64_t v201 = (v168 >> 2) + 1;
                uint64_t v202 = 4 * (v201 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v203 = &v158[-v202];
                uint64_t v169 = &v283[4 * v160 - v202];
                uint64_t v204 = &v283[4 * v160 - 16];
                int v205 = (long long *)(v158 - 16);
                uint64_t v206 = v201 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v207 = *v205;
                  *(v204 - 1) = *(v205 - 1);
                  *uint64_t v204 = v207;
                  v204 -= 2;
                  v205 -= 2;
                  v206 -= 8;
                }
                while (v206);
                uint64_t v158 = v203;
                if (v201 != (v201 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_340:
                  do
                  {
LABEL_195:
                    int v208 = *((_DWORD *)v158 - 1);
                    v158 -= 4;
                    *((_DWORD *)v169 - 1) = v208;
                    v169 -= 4;
                  }
                  while (v158 != v155);
                }
              }
              v170[45] = v169;
              v170[46] = &v167[v173];
              v170[47] = &v171[v172];
              if (v155)
              {
                operator delete(v155);
                unint64_t v161 = v122 + 1;
              }
            }
          }
          sub_A3E96C((uint64_t)v291, v161, 0);
          unsigned int v123 = v292;
          unint64_t v151 = v289;
          goto LABEL_199;
        }
        a1 = v297;
        if ((v153 & v154) != 0) {
          goto LABEL_148;
        }
LABEL_260:
        *(void *)(v152 + 8 * v151) = v153 | v154;
        uint64_t v241 = (char *)a1[52];
        unint64_t v240 = a1[53];
        if ((unint64_t)v241 < v240)
        {
          *(_DWORD *)uint64_t v241 = v122;
          uint64_t v242 = (uint64_t)(v241 + 4);
          goto LABEL_283;
        }
        unint64_t v243 = (char *)*v287;
        uint64_t v244 = v241 - (unsigned char *)*v287;
        uint64_t v245 = v244 >> 2;
        unint64_t v246 = (v244 >> 2) + 1;
        if (v246 >> 62) {
          goto LABEL_334;
        }
        uint64_t v247 = v240 - (void)v243;
        if (v247 >> 1 > v246) {
          unint64_t v246 = v247 >> 1;
        }
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v248 = v246;
        }
        unsigned int v295 = v123;
        unint64_t v290 = v151;
        if (v248)
        {
          if (!(v248 >> 62))
          {
            long long v249 = operator new(4 * v248);
            size_t v250 = (unsigned int *)&v249[4 * v245];
            unsigned int *v250 = v122;
            uint64_t v242 = (uint64_t)(v250 + 1);
            if (v241 != v243) {
              goto LABEL_271;
            }
            goto LABEL_280;
          }
LABEL_332:
          sub_188D718();
        }
        long long v249 = 0;
        size_t v250 = (unsigned int *)(4 * v245);
        *(_DWORD *)(4 * v245) = v122;
        uint64_t v242 = 4 * v245 + 4;
        if (v241 != v243)
        {
LABEL_271:
          unint64_t v251 = v241 - 4 - v243;
          if (v251 < 0x2C) {
            goto LABEL_341;
          }
          if ((unint64_t)(v241 - &v249[v244]) < 0x20) {
            goto LABEL_341;
          }
          uint64_t v252 = (v251 >> 2) + 1;
          uint64_t v253 = 4 * (v252 & 0x7FFFFFFFFFFFFFF8);
          int v254 = &v241[-v253];
          size_t v250 = (unsigned int *)((char *)v250 - v253);
          long long v255 = &v249[4 * v245 - 16];
          int v256 = v241 - 16;
          uint64_t v257 = v252 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v258 = *(_OWORD *)v256;
            *(v255 - 1) = *((_OWORD *)v256 - 1);
            _OWORD *v255 = v258;
            v255 -= 2;
            v256 -= 32;
            v257 -= 8;
          }
          while (v257);
          uint64_t v241 = v254;
          if (v252 != (v252 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_341:
            do
            {
              unsigned int v259 = *((_DWORD *)v241 - 1);
              v241 -= 4;
              *--size_t v250 = v259;
            }
            while (v241 != v243);
          }
        }
LABEL_280:
        a1 = v297;
        v297[51] = v250;
        v297[52] = v242;
        v297[53] = &v249[4 * v248];
        if (v243) {
          operator delete(v243);
        }
        unsigned int v123 = v295;
        unint64_t v151 = v290;
LABEL_283:
        a1[52] = v242;
        unint64_t v155 = (unsigned char *)a1[45];
        if (*(_DWORD *)&v155[4 * v125] > v123) {
          goto LABEL_149;
        }
LABEL_225:
        unint64_t v13 = (unint64_t)v304;
        uint64_t v12 = v303 + 2;
        long long v303 = v12;
        if (v12 == v304)
        {
          unint64_t v230 = v301 + 2;
          unsigned int v301 = v230;
          if ((unint64_t)v230 >= v302) {
            goto LABEL_6;
          }
          while (1)
          {
            uint64_t v12 = (void *)*v230;
            unint64_t v13 = v230[1];
            if (*v230 != v13) {
              break;
            }
            v230 += 2;
            unsigned int v301 = v230;
            if ((unint64_t)v230 >= v302) {
              goto LABEL_6;
            }
          }
          long long v303 = (void *)*v230;
          long long v304 = (void *)v13;
          if ((unint64_t)v12 < v13)
          {
            while (1)
            {
LABEL_288:
              if (!v306)
              {
                uint64_t v260 = v300[0];
                uint64_t v261 = *v12;
                uint64_t v262 = *(void *)(v300[0] + 4136);
                if (sub_C259C0(v262 + 3896))
                {
                  if (*(void *)(v262 + 3944))
                  {
                    unint64_t v263 = __ROR8__(v261, 32);
                    if (!sub_A10E20((void *)(v260 + 4136), SHIDWORD(v263)))
                    {
                      int v264 = *(void **)(*(void *)(v260 + 4136) + 3944);
                      int8x8_t v265 = (int8x8_t)v264[1];
                      if (v265)
                      {
                        unint64_t v266 = 0xC4CEB9FE1A85EC53
                             * ((0xFF51AFD7ED558CCDLL * (v263 ^ (v263 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                                 * (v263 ^ (v263 >> 33))) >> 33));
                        unint64_t v267 = v266 ^ (v266 >> 33);
                        uint8x8_t v268 = (uint8x8_t)vcnt_s8(v265);
                        v268.i16[0] = vaddlv_u8(v268);
                        if (v268.u32[0] > 1uLL)
                        {
                          unint64_t v269 = v267;
                          if (v267 >= *(void *)&v265) {
                            unint64_t v269 = v267 % *(void *)&v265;
                          }
                        }
                        else
                        {
                          unint64_t v269 = (*(void *)&v265 - 1) & v267;
                        }
                        unsigned int v272 = *(uint64_t ***)(*v264 + 8 * v269);
                        if (v272)
                        {
                          uint64_t v273 = *v272;
                          if (v273)
                          {
                            if (v268.u32[0] < 2uLL)
                            {
                              uint64_t v274 = *(void *)&v265 - 1;
                              while (1)
                              {
                                uint64_t v278 = v273[1];
                                if (v267 == v278)
                                {
                                  if (*((_DWORD *)v273 + 5) == HIDWORD(v263) && *((_DWORD *)v273 + 4) == v263) {
                                    goto LABEL_285;
                                  }
                                }
                                else if ((v278 & v274) != v269)
                                {
                                  goto LABEL_324;
                                }
                                uint64_t v273 = (uint64_t *)*v273;
                                if (!v273) {
                                  goto LABEL_324;
                                }
                              }
                            }
                            do
                            {
                              unint64_t v276 = v273[1];
                              if (v267 == v276)
                              {
                                if (*((_DWORD *)v273 + 5) == HIDWORD(v263) && *((_DWORD *)v273 + 4) == v263)
                                {
LABEL_285:
                                  uint64_t v12 = v303;
                                  goto LABEL_286;
                                }
                              }
                              else
                              {
                                if (v276 >= *(void *)&v265) {
                                  v276 %= *(void *)&v265;
                                }
                                if (v276 != v269) {
                                  break;
                                }
                              }
                              uint64_t v273 = (uint64_t *)*v273;
                            }
                            while (v273);
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_324:
              if (v305) {
                break;
              }
              unsigned int v279 = sub_C2599C(v300[0] + 3896);
              uint64_t v12 = v303;
              if (v279 >= *((unsigned __int8 *)v303 + 14))
              {
                if (v305) {
                  goto LABEL_8;
                }
                char v280 = sub_51D60((unsigned __int8 *)(v300[0] + 3896));
                uint64_t v12 = v303;
                if ((v280 & 1) != 0 || (*((unsigned char *)v303 + 15) & 1) == 0) {
                  goto LABEL_8;
                }
              }
LABEL_286:
              v12 += 2;
              long long v303 = v12;
              if (v12 == v304)
              {
                unint64_t v270 = v301 + 2;
                unsigned int v301 = v270;
                if ((unint64_t)v270 >= v302) {
                  goto LABEL_8;
                }
                while (1)
                {
                  uint64_t v12 = (void *)*v270;
                  unint64_t v271 = v270[1];
                  if (*v270 != v271) {
                    break;
                  }
                  v270 += 2;
                  unsigned int v301 = v270;
                  if ((unint64_t)v270 >= v302) {
                    goto LABEL_6;
                  }
                }
                long long v303 = (void *)*v270;
                long long v304 = (void *)v271;
                if ((unint64_t)v12 >= v271) {
                  goto LABEL_8;
                }
              }
              else if (v12 >= v304)
              {
                goto LABEL_8;
              }
            }
            uint64_t v12 = v303;
            goto LABEL_8;
          }
        }
        else if (v12 < v304)
        {
          goto LABEL_288;
        }
        goto LABEL_9;
      }
LABEL_13:
      ++v14;
    }
  }
LABEL_331:
  double result = sub_72688((uint64_t)v307) + *((double *)a1 + 76);
  *((double *)a1 + 76) = result;
  return result;
}

BOOL sub_AD6B08(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v2 = sub_AD88FC(a1);
  uint64_t v3 = sub_AD8A30(a1) + v2;
  unint64_t v15 = v3 + sub_A409C0(*(uint64_t **)(a1 + 40));
  BOOL v4 = v15 > *(void *)a1;
  if (v15 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v13);
    unint64_t v5 = sub_188FC78(v13, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v6 = (void *)sub_38EC58((uint64_t)v5, (unint64_t *)a1);
    uint64_t v7 = sub_188FC78(v6, (uint64_t)" in directional SPA (", 21);
    unint64_t v8 = (void *)sub_38EC58((uint64_t)v7, &v15);
    unsigned int v9 = sub_188FC78(v8, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v4;
}

void sub_AD6D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_AD6D5C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, signed int a5)
{
  unsigned int v47 = a3;
  int v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    char v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)a3
      || ((*(void *)(*v14 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    unint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    uint64_t v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v22 = *(_DWORD **)(a1 + 152);
    int v48 = (*(_DWORD *)(a1 + 432) << *v22) | a4;
    uint64_t v21 = (int *)(sub_AF1DB0((uint64_t)(v22 + 2), (unsigned int *)&v48) + 4);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_17;
    }
  }
  int v23 = *v21;
  if (v23 != 0x7FFFFFFF)
  {
    int v24 = *(_DWORD *)(a1 + 28);
    int v25 = v24 / 10;
    int v26 = v24 % 10;
    char v27 = v24 < 0 ? -5 : 5;
    if ((int)(v25 + v23 + (((103 * (char)(v27 + v26)) >> 15) & 1) + ((103 * (char)(v27 + v26)) >> 10)) <= a5) {
      return 0;
    }
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v28 = a1 + 24 * a2;
    uint64_t v29 = *(void *)(v28 + 168);
    uint64_t v30 = *(void *)(v28 + 176);
    __int16 v31 = (uint64_t *)(v28 + 168);
    unint64_t v32 = (v30 - v29) >> 2;
    if (v32 <= a3)
    {
      sub_5BBEE0((uint64_t)v31, a3 - v32 + 1);
      uint64_t v29 = *v31;
    }
    signed int v33 = *(_DWORD *)(v29 + 4 * a3);
    if (v33 != 0x7FFFFFFF && v33 <= a5) {
      return 0;
    }
  }
  uint64_t v35 = *(_DWORD **)(a1 + 152);
  int v49 = (a3 << *v35) | a4;
  uint64_t v36 = sub_AF1DB0((uint64_t)(v35 + 2), (unsigned int *)&v49);
  signed int v37 = *(_DWORD *)(v36 + 4);
  if (v37 != 0x7FFFFFFF && v37 <= a5) {
    return 0;
  }
  uint64_t v39 = v36;
  unsigned int v40 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v41 = a1 + 24 * a2;
    uint64_t v42 = *(void *)(v41 + 168);
    uint64_t v43 = *(void *)(v41 + 176);
    __int16 v44 = (uint64_t *)(v41 + 168);
    unint64_t v45 = (v43 - v42) >> 2;
    if (v45 <= a3)
    {
      sub_5BBEE0((uint64_t)v44, a3 - v45 + 1);
      uint64_t v42 = *v44;
    }
    *(_DWORD *)(v42 + 4 * a3) = a5;
  }
  *(_DWORD *)(v39 + 4) = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v40 + 216), &v47);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v47);
  }
  return 1;
}

uint64_t sub_AD7004(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = (void *)(a1 + 8);
  uint64_t v7 = (unsigned int *)(a1 + 4);
  unsigned int v8 = 2;
  unsigned int v9 = a3;
  do
  {
    LODWORD(v15) = (a2 << *(_DWORD *)a1) | v9;
    sub_AD7118(v6, (unsigned int *)&v15, v24);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v15 = v6;
    uint64_t v16 = v10;
    uint64_t v17 = v11;
    uint64_t v18 = v11;
    uint64_t v19 = 0;
    uint64_t v20 = v10;
    uint64_t v21 = v11;
    uint64_t v22 = v11;
    uint64_t v23 = 0;
    sub_AD76D0(&v15);
    if (v24[1] != v16 || v25 != v17 || v26 != v18 || (uint64_t v12 = v7, v26 != v25) && (uint64_t v12 = v7, v27 != v19)) {
      uint64_t v12 = (unsigned int *)(v27 + 4);
    }
    uint64_t result = *v12;
    v9 -= 2;
    BOOL v14 = result != 0x7FFFFFFF || v8 > a3;
    v8 += 2;
  }
  while (!v14);
  return result;
}

void *sub_AD7118@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  if (a1[10] == a1[5] || (unint64_t v5 = sub_AD72DC((uint64_t)a1, a2), v5 == -1))
  {
    uint64_t v23 = 0;
    uint64_t v6 = a1[6];
    uint64_t v7 = (uint64_t *)a1[7];
    *a3 = a1;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v7;
    goto LABEL_22;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = (uint64_t *)a1[7];
  unint64_t v8 = v5 / 0x30;
  uint64_t v9 = v6 + 16 * (v5 / 0x30);
  uint64_t v10 = (unsigned __int8 *)(v9 + 10);
  int v11 = v5 % 0x30;
  if ((unsigned __int16)(v5 % 0x30) < 9u)
  {
    __int16 v13 = 0;
    goto LABEL_14;
  }
  unsigned __int16 v12 = v11 - 9;
  __int16 v13 = 0;
  uint64_t v14 = (unsigned __int16)(v5 % 0x30 - 9) >> 3;
  if ((unsigned __int16)(v5 % 0x30 - 9) >> 3)
  {
    __int16 v15 = 0;
    uint64_t v16 = v14 + 1;
    uint64_t v17 = (v14 + 1) & 0x3FFE;
    LOWORD(v11) = v11 - 8 * v17;
    uint64_t v18 = &v10[v17];
    uint64_t v19 = (unsigned __int8 *)(v6 + 16 * v8 + 11);
    uint64_t v20 = v17;
    do
    {
      uint64_t v21 = *(v19 - 1);
      int v22 = *v19;
      v19 += 2;
      v13 += byte_20EBDB6[v21];
      v15 += byte_20EBDB6[v22];
      v20 -= 2;
    }
    while (v20);
    v13 += v15;
    if (v16 == v17) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v18 = (unsigned __int8 *)(v9 + 10);
  }
  do
  {
    int v24 = *v18++;
    v13 += byte_20EBDB6[v24];
    LOWORD(v11) = v11 - 8;
  }
  while ((unsigned __int16)v11 > 8u);
LABEL_13:
  v10 += (v12 >> 3) + 1;
LABEL_14:
  unsigned __int16 v25 = v13 + byte_20EBDB6[~(-1 << v11) & (unint64_t)*v10];
  uint64_t v23 = *(void *)v9 + 8 * v25;
  if (*(unsigned __int16 *)(v9 + 8) == v25)
  {
    uint64_t v26 = v9 + 16;
    uint64_t v9 = a1[7];
    if ((uint64_t *)v26 != v7)
    {
      while (1)
      {
        uint64_t v27 = (uint64_t *)v26;
        if (*(_WORD *)(v26 + 8)) {
          break;
        }
        v26 += 16;
        if (v27 + 2 == v7)
        {
          uint64_t v9 = a1[7];
          goto LABEL_20;
        }
      }
      uint64_t v9 = v26;
LABEL_20:
      uint64_t v23 = *v27;
    }
  }
  *a3 = a1;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
LABEL_22:
  a3[4] = v23;
  a3[5] = v6;
  a3[6] = v7;
  a3[7] = v7;
  a3[8] = 0;

  return sub_AD76D0(a3);
}

unint64_t sub_AD72DC(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 72) - 1;
  uint64_t v4 = *a2;
  unint64_t result = v3 & v4;
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = (v3 & v4) / 0x30uLL;
  LODWORD(v8) = (v3 & v4) % 0x30;
  if ((*(unsigned __int8 *)(v6 + 16 * v7 + (v8 >> 3) + 10) >> (v8 & 7)))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v9 = 0;
      int v10 = *(_DWORD *)(a1 + 32);
      uint64_t v11 = v6 + 11;
      uint64_t v12 = -1;
      while (1)
      {
        __int16 v13 = (uint64_t *)(v6 + 16 * v7);
        uint64_t v16 = *v13;
        __int16 v15 = (unsigned __int8 *)v13 + 10;
        uint64_t v14 = v16;
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v18 = 0;
          uint64_t v21 = v15;
          LOBYTE(v19) = v8;
          goto LABEL_16;
        }
        uint64_t v17 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v22 = 0;
          __int16 v23 = 0;
          unsigned __int16 v19 = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          uint64_t v20 = &v15[(((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE];
          uint64_t v24 = (((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE;
          unsigned __int16 v25 = (unsigned __int8 *)(v11 + 16 * v7);
          do
          {
            uint64_t v26 = *(v25 - 1);
            unsigned int v27 = *v25;
            v25 += 2;
            v22 += byte_20EBDB6[v26];
            v23 += byte_20EBDB6[v27];
            v24 -= 2;
          }
          while (v24);
          __int16 v18 = v23 + v22;
          if ((v17 & 0x3FFE) == v17) {
            goto LABEL_15;
          }
        }
        else
        {
          __int16 v18 = 0;
          unsigned __int16 v19 = v8;
          uint64_t v20 = v15;
        }
        do
        {
          unsigned int v28 = *v20++;
          v18 += byte_20EBDB6[v28];
          v19 -= 8;
        }
        while (v19 > 8u);
LABEL_15:
        uint64_t v21 = &v15[v17];
LABEL_16:
        if (v10 == *(_DWORD *)(v14
                              + 8
                              * (unsigned __int16)(v18
                                                 + byte_20EBDB6[~(-1 << v19) & (unint64_t)*v21])))
        {
          if (v12 == -1) {
            uint64_t v12 = result;
          }
          goto LABEL_6;
        }
        if ((unsigned __int16)v8 < 9u)
        {
          __int16 v30 = 0;
          goto LABEL_26;
        }
        uint64_t v29 = ((unsigned __int16)(v8 - 9) >> 3) + 1;
        if ((unsigned __int16)(v8 - 9) >= 8u)
        {
          __int16 v32 = 0;
          __int16 v33 = 0;
          LOWORD(v8) = v8 - 8 * ((((unsigned __int16)(v8 - 9) >> 3) + 1) & 0x3FFE);
          __int16 v31 = &v15[v29 & 0x3FFE];
          uint64_t v34 = v29 & 0x3FFE;
          uint64_t v35 = (unsigned __int8 *)(v11 + 16 * v7);
          do
          {
            uint64_t v36 = *(v35 - 1);
            unsigned int v37 = *v35;
            v35 += 2;
            v32 += byte_20EBDB6[v36];
            v33 += byte_20EBDB6[v37];
            v34 -= 2;
          }
          while (v34);
          __int16 v30 = v33 + v32;
          if ((v29 & 0x3FFE) == v29) {
            goto LABEL_25;
          }
        }
        else
        {
          __int16 v30 = 0;
          __int16 v31 = v15;
        }
        do
        {
          unsigned int v38 = *v31++;
          v30 += byte_20EBDB6[v38];
          LOWORD(v8) = v8 - 8;
        }
        while ((unsigned __int16)v8 > 8u);
LABEL_25:
        v15 += v29;
LABEL_26:
        if (v4 == *(_DWORD *)(v14
                                     + 8
                                     * (unsigned __int16)(v30
                                                        + byte_20EBDB6[~(-1 << v8) & (unint64_t)*v15])))
          return result;
LABEL_6:
        unint64_t result = (++v9 + result) & v3;
        unint64_t v7 = result / 0x30;
        unint64_t v8 = result % 0x30;
        if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v8 >> 3) + 10) >> (v8 & 7)) & 1) == 0) {
          return -1;
        }
      }
    }
    uint64_t v39 = 0;
    LODWORD(v40) = (v3 & v4) % 0x30;
    while (1)
    {
      uint64_t v41 = (uint64_t *)(v6 + 16 * v7);
      uint64_t v44 = *v41;
      uint64_t v43 = (unsigned __int8 *)v41 + 10;
      uint64_t v42 = v44;
      if ((unsigned __int16)v40 >= 9u) {
        break;
      }
      __int16 v46 = 0;
LABEL_39:
      if (v4 == *(_DWORD *)(v42
                                   + 8
                                   * (unsigned __int16)(v46
                                                      + byte_20EBDB6[~(-1 << v40) & (unint64_t)*v43])))
        return result;
      unint64_t result = (++v39 + result) & v3;
      unint64_t v7 = result / 0x30;
      unint64_t v40 = result % 0x30;
      if (((*(unsigned __int8 *)(v6 + 16 * (result / 0x30) + (v40 >> 3) + 10) >> (v40 & 7)) & 1) == 0) {
        return -1;
      }
    }
    uint64_t v45 = ((unsigned __int16)(v40 - 9) >> 3) + 1;
    if ((unsigned __int16)(v40 - 9) >= 8u)
    {
      __int16 v48 = 0;
      __int16 v49 = 0;
      LOWORD(v40) = v40 - 8 * ((((unsigned __int16)(v40 - 9) >> 3) + 1) & 0x3FFE);
      unsigned int v47 = &v43[v45 & 0x3FFE];
      uint64_t v50 = v45 & 0x3FFE;
      uint64_t v51 = (unsigned __int8 *)(v6 + 11 + 16 * v7);
      do
      {
        uint64_t v52 = *(v51 - 1);
        unsigned int v53 = *v51;
        v51 += 2;
        v48 += byte_20EBDB6[v52];
        v49 += byte_20EBDB6[v53];
        v50 -= 2;
      }
      while (v50);
      __int16 v46 = v49 + v48;
      if ((v45 & 0x3FFE) == v45) {
        goto LABEL_38;
      }
    }
    else
    {
      __int16 v46 = 0;
      unsigned int v47 = v43;
    }
    do
    {
      unsigned int v54 = *v47++;
      v46 += byte_20EBDB6[v54];
      LOWORD(v40) = v40 - 8;
    }
    while ((unsigned __int16)v40 > 8u);
LABEL_38:
    v43 += v45;
    goto LABEL_39;
  }
  return -1;
}